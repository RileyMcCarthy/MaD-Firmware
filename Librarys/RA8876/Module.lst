00000                 | 
00000                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/RA8876/Module.c"
00000                 | #line 1 "Module.h"
00000                 | #line 3 "Module.h"
00000                 | #line 1 "RA8876.h"
00000                 | #line 13 "RA8876.h"
00000                 | #line 1 "C:/flexprop/include/simpletools.h"
00000                 | #line 9 "C:/flexprop/include/simpletools.h"
00000                 | #line 1 "C:/flexprop/include/propeller2.h"
00000                 | #line 4 "C:/flexprop/include/propeller2.h"
00000                 | #line 1 "C:/flexprop/include/stdint.h"
00000                 | 
00000                 | 
00000                 | 
00000                 | typedef signed char int8_t;
00000                 | typedef unsigned char uint8_t;
00000                 | 
00000                 | typedef signed short int16_t;
00000                 | typedef unsigned short uint16_t;
00000                 | 
00000                 | typedef signed long int32_t;
00000                 | typedef unsigned long uint32_t;
00000                 | 
00000                 | typedef long long int64_t;
00000                 | typedef unsigned long long uint64_t;
00000                 | 
00000                 | typedef unsigned long uintptr_t;
00000                 | typedef long intptr_t;
00000                 | 
00000                 | typedef int64_t intmax_t;
00000                 | typedef uint64_t uintmax_t;
00000                 | 
00000                 | typedef int8_t int_least8_t;
00000                 | typedef int16_t int_least16_t;
00000                 | typedef int32_t int_least32_t;
00000                 | typedef int64_t int_least64_t;
00000                 | 
00000                 | typedef uint8_t uint_least8_t;
00000                 | typedef uint16_t uint_least16_t;
00000                 | typedef uint32_t uint_least32_t;
00000                 | typedef uint64_t uint_least64_t;
00000                 | 
00000                 | typedef int32_t int_fast8_t;
00000                 | typedef int32_t int_fast16_t;
00000                 | typedef int32_t int_fast32_t;
00000                 | typedef int64_t int_fast64_t;
00000                 | 
00000                 | typedef uint32_t uint_fast8_t;
00000                 | typedef uint32_t uint_fast16_t;
00000                 | typedef uint32_t uint_fast32_t;
00000                 | typedef uint64_t uint_fast64_t;
00000                 | #line 5 "C:/flexprop/include/propeller2.h"
00000                 | #line 56 "C:/flexprop/include/propeller2.h"
00000                 | typedef struct _cartesian {
00000                 |    int32_t x, y;
00000                 | } cartesian_t;
00000                 | 
00000                 | 
00000                 | typedef struct _polar {
00000                 |    uint32_t r, t;
00000                 | } polar_t;
00000                 | 
00000                 | 
00000                 | typedef struct _counter64 {
00000                 |     uint32_t low, high;
00000                 | } counter64_t;
00000                 | #line 96 "C:/flexprop/include/propeller2.h"
00000                 | void _clkset(uint32_t clkmode, uint32_t clkfreq);
00000                 | void _hubset(uint32_t val);
00000                 | void _reboot(void);
00000                 | 
00000                 | 
00000                 | int _coginit(int cog, void *pgm, void *ptr);
00000                 | #line 116 "C:/flexprop/include/propeller2.h"
00000                 | void _cogstop(int cog);
00000                 | int _cogchk(int cog);
00000                 | int _cogid(void);
00000                 | 
00000                 | int _locknew(void);
00000                 | void _lockret(int lock);
00000                 | 
00000                 | int _locktry(int lock);
00000                 | int _lockrel(int lock);
00000                 | int _lockchk(int lock);
00000                 | 
00000                 | void _cogatn(uint32_t mask);
00000                 | int _pollatn(void);
00000                 | int _waitatn(void);
00000                 | 
00000                 | 
00000                 | cartesian_t _rotxy(cartesian_t coord, uint32_t t);
00000                 | cartesian_t _polxy(polar_t coord);
00000                 | polar_t _xypol(cartesian_t coord);
00000                 | 
00000                 | 
00000                 | uint32_t _rnd(void);
00000                 | 
00000                 | 
00000                 | int _clz(uint32_t val);
00000                 | int _encod(uint32_t val);
00000                 | uint32_t _isqrt(uint32_t val);
00000                 | 
00000                 | 
00000                 | uint32_t _cnt(void);
00000                 | uint32_t _cnth(void);
00000                 | counter64_t _cnthl();
00000                 | uint32_t _getsec();
00000                 | uint32_t _getms();
00000                 | uint32_t _getus();
00000                 | 
00000                 | uint32_t _pollcnt(uint32_t tick);
00000                 | void _waitcnt(uint32_t tick);
00000                 | 
00000                 | void _waitx(uint32_t cycles);
00000                 | void _waitsec(uint32_t seconds);
00000                 | void _waitms(uint32_t milliseconds);
00000                 | void _waitus(uint32_t microseconds);
00000                 | 
00000                 | 
00000                 | void _pinw(int pin, int val);
00000                 | void _pinl(int pin);
00000                 | void _pinh(int pin);
00000                 | void _pinnot(int pin);
00000                 | void _pinrnd(int pin);
00000                 | void _pinf(int pin);
00000                 | int _pinr(int pin);
00000                 | 
00000                 | 
00000                 | void _wrpin(int pin, uint32_t val);
00000                 | void _wxpin(int pin, uint32_t val);
00000                 | void _wypin(int pin, uint32_t val);
00000                 | void _akpin(int pin);
00000                 | uint32_t _rdpin(int pin);
00000                 | uint32_t _rqpin(int pin);
00000                 | 
00000                 | 
00000                 | void _pinstart(int pin, uint32_t mode, uint32_t xval, uint32_t yval);
00000                 | 
00000                 | void _pinclear(int pin);
00000                 | 
00000                 | 
00000                 | extern uint32_t _clockfreq(void);
00000                 | extern uint32_t _clockmode(void);
00000                 | #line 10 "C:/flexprop/include/simpletools.h"
00000                 | #line 14 "C:/flexprop/include/simpletools.h"
00000                 | #line 1 "C:/flexprop/include/compiler.h"
00000                 | #line 15 "C:/flexprop/include/simpletools.h"
00000                 | #line 16 "C:/flexprop/include/simpletools.h"
00000                 | #line 1 "C:/flexprop/include/libsimpletext/simpletext.h"
00000                 | #line 3 "C:/flexprop/include/libsimpletext/simpletext.h"
00000                 | #line 1 "C:/flexprop/include/stdarg.h"
00000                 | #line 4 "C:/flexprop/include/libsimpletext/simpletext.h"
00000                 | #line 12 "C:/flexprop/include/libsimpletext/simpletext.h"
00000                 | typedef struct text_struct
00000                 | {
00000                 | 
00000                 |   int (*rxChar)(struct text_struct *p);
00000                 | 
00000                 |   int (*txChar)(struct text_struct *p, int ch);
00000                 | 
00000                 |   int cogid[ 7 ];
00000                 | 
00000                 |   volatile void *devst;
00000                 | 
00000                 |   volatile int terminalEcho;
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 |   volatile char ecA;
00000                 |   volatile char ecB;
00000                 |   volatile char ecsA;
00000                 |   volatile char ecsB;
00000                 | } text_t;
00000                 | 
00000                 | char *_safe_gets(text_t *text, char *buf, int count)  __fromfile("libsimpletext/safe_gets.c") ;
00000                 | char *getStr(char *buf, int max)  __fromfile("libsimpletext/getStr.c") ;
00000                 | 
00000                 | float string2float(char *s, char **end)  __fromfile("libsimpletext/stringToFloat.c") ;
00000                 | int _doscanf(const char *str, const char *fmt,  unsigned long  args)  __fromfile("libsimpletext/doscanf.c") ;
00000                 | 
00000                 | const char* _scanf_getl(const char *str, int *dst, int base, unsigned width, int isSigned)  __fromfile("libsimpletext/scanf_getl.c") ;
00000                 | const char* _scanf_getf(const char *str, float *dst)  __fromfile("libsimpletext/scanf_getf.c") ;
00000                 | 
00000                 | int scan(const char *fmt, ...)  __fromfile("libsimpletext/scan.c") ;
00000                 | #line 17 "C:/flexprop/include/simpletools.h"
00000                 | #line 1 "C:/flexprop/include/simplei2c.h"
00000                 | #line 21 "C:/flexprop/include/simplei2c.h"
00000                 | #line 1 "C:/flexprop/include/propeller2.h"
00000                 | #line 22 "C:/flexprop/include/simplei2c.h"
00000                 | #line 26 "C:/flexprop/include/simplei2c.h"
00000                 | typedef struct i2c_st
00000                 | {
00000                 |   int scl_pin;
00000                 |   int sda_pin;
00000                 |   int drivescl;
00000                 | } i2c;
00000                 | #line 46 "C:/flexprop/include/simplei2c.h"
00000                 | i2c *i2c_open(i2c *bus, int sclPin, int sdaPin, int sclDrive) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 53 "C:/flexprop/include/simplei2c.h"
00000                 | void i2c_start(i2c *bus) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 60 "C:/flexprop/include/simplei2c.h"
00000                 | void i2c_stop(i2c *bus) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 72 "C:/flexprop/include/simplei2c.h"
00000                 | int i2c_writeByte(i2c *bus, int byte) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 83 "C:/flexprop/include/simplei2c.h"
00000                 | int i2c_readByte(i2c *bus, int ackState) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 97 "C:/flexprop/include/simplei2c.h"
00000                 | int i2c_writeData(i2c *bus, const unsigned char *data, int count) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 112 "C:/flexprop/include/simplei2c.h"
00000                 | int i2c_readData(i2c *bus, unsigned char *data, int count) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 123 "C:/flexprop/include/simplei2c.h"
00000                 | int i2c_poll(i2c *bus, int addr) __fromfile("libsimplei2c/simplei2c.c");
00000                 | #line 18 "C:/flexprop/include/simpletools.h"
00000                 | #line 30 "C:/flexprop/include/simpletools.h"
00000                 | int input(int pin)  __fromfile("libsimpletools/input.c") ;
00000                 | #line 45 "C:/flexprop/include/simpletools.h"
00000                 | unsigned get_direction(int pin)  __fromfile("libsimpletools/getDirection.c") ;
00000                 | unsigned get_directions(int startPin, int endPin)  __fromfile("libsimpletools/getDirections.c") ;
00000                 | unsigned get_output(int pin)  __fromfile("libsimpletools/getOutput.c") ;
00000                 | unsigned get_outputs(int startPin, int endPin)  __fromfile("libsimpletools/getOutputs.c") ;
00000                 | unsigned get_states(int endPin, int startPin)  __fromfile("libsimpletools/getStates.c") ;
00000                 | void set_directions(int endPin, int startPin, unsigned int pattern)  __fromfile("libsimpletools/setDirections.c") ;
00000                 | void set_outputs(int endPin, int startPin, unsigned int pattern)  __fromfile("libsimpletools/setOutputs.c") ;
00000                 | 
00000                 | long count(int pin, long duration, int pinToCount = -1)  __fromfile("libsimpletools/count.c") ;
00000                 | 
00000                 | void dac_ctr(int pin, int channel, int dacVal)  __fromfile("libsimpletools/dac.c") ;
00000                 | void dac_ctr_res(int bits)  __fromfile("libsimpletools/dac.c") ;
00000                 | void dac_ctr_stop(void)  __fromfile("libsimpletools/dac.c") ;
00000                 | 
00000                 | void freqout(int pin, int msTime, int frequency)  __fromfile("libsimpletools/freqout.c") ;
00000                 | 
00000                 | int pwm_start(unsigned int cycleMicroseconds)  __fromfile("libsimpletools/pwm.c") ;
00000                 | void pwm_set(int pin, int channel, int tHigh)  __fromfile("libsimpletools/pwm.c") ;
00000                 | void pwm_stop(void)  __fromfile("libsimpletools/pwm.c") ;
00000                 | 
00000                 | long pulse_in(int pin, int state)  __fromfile("libsimpletools/pulseIn.c") ;
00000                 | void pulse_out(int pin, int time)  __fromfile("libsimpletools/pulseOut.c") ;
00000                 | 
00000                 | long rc_time(int pin, int state)  __fromfile("libsimpletools/rcTime.c") ;
00000                 | 
00000                 | void square_wave(int pin, int channel, int freq)  __fromfile("libsimpletools/squareWave.c") ;
00000                 | void square_wave_stop(void)  __fromfile("libsimpletools/squareWave.c") ;
00000                 | 
00000                 | 
00000                 | void square_wave_stop_pin(int pin)  __fromfile("libsimpletools/squareWave.c") ;
00000                 | #line 79 "C:/flexprop/include/simpletools.h"
00000                 | int int_fraction(int a, int b, int shift)  __fromfile("libsimpletools/squareWave.c") ;
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | 
00000                 | int shift_in(int pinDat, int pinClk, int mode, int bits)  __fromfile("libsimpletools/shiftIn.c") ;
00000                 | void shift_out(int pinDat, int pinClk, int mode, int bits, int value)  __fromfile("libsimpletools/shiftOut.c") ;
00000                 | 
00000                 | 
00000     00 00 00 00 | extern unsigned int st_buscnt;
00004                 | 
00004                 | i2c *i2c_newbus(int sclPin, int sdaPin, int sclDrive)  __fromfile("libsimpletools/i2c_init.c") ;
00004                 | int i2c_out(i2c *busID, int i2cAddr, int memAddr, int memAddrCount, const unsigned char *data, int dataCount)  __fromfile("libsimpletools/i2c_out.c") ;
00004                 | int i2c_in(i2c *busID, int i2cAddr, int memAddr, int memAddrCount, unsigned char *data, int dataCount)  __fromfile("libsimpletools/i2c_in.c") ;
00004                 | int i2c_busy(i2c *busID, int i2cAddr)  __fromfile("libsimpletools/i2c_busy.c") ;
00004                 | 
00004                 | 
00004     00 00 00 00 | extern i2c *st_eeprom;
00008     00 00 00 00 | extern int st_eeInitFlag;
0000c                 | #line 114 "C:/flexprop/include/simpletools.h"
0000c                 | void ee_config(int sclPin, int sdaPin, int sclDrive)  __fromfile("libsimpletools/eeprom_initSclDrive.c") ;
0000c                 | void ee_init()  __fromfile("libsimpletools/eeprom_init.c") ;
0000c                 | void ee_putByte(unsigned char value, int addr)  __fromfile("libsimpletools/eeprom_putByte.c") ;
0000c                 | char ee_getByte(int addr)  __fromfile("libsimpletools/eeprom_getByte.c") ;
0000c                 | void ee_putInt(int value, int addr)  __fromfile("libsimpletools/eeprom_putInt.c") ;
0000c                 | int ee_getInt(int addr)  __fromfile("libsimpletools/eeprom_getInt.c") ;
0000c                 | void ee_putStr(unsigned char *s, int n, int addr)  __fromfile("libsimpletools/eeprom_putStr.c") ;
0000c                 | unsigned char* ee_getStr(unsigned char* s, int n, int addr)  __fromfile("libsimpletools/eeprom_getStr.c") ;
0000c                 | void ee_putFloat32(float value, int addr)  __fromfile("libsimpletools/eeprom_putFloat.c") ;
0000c                 | float ee_getFloat32(int addr)  __fromfile("libsimpletools/eeprom_getFloat.c") ;
0000c                 | 
0000c                 | float constrainFloat(float value, float min, float max)  __fromfile("libsimpletools/constrainFloat.c") ;
0000c                 | int constrainInt(int value, int min, int max)  __fromfile("libsimpletools/constrainInt.c") ;
0000c                 | 
0000c                 | void endianSwap(void *resultAddr, void *varAddr, int byteCount)  __fromfile("libsimpletools/endianSwap.c") ;
0000c                 | 
0000c                 | float mapFloat(float value, float fromMin, float fromMax, float toMin, float toMax)  __fromfile("libsimpletools/mapFloat.c") ;
0000c                 | int mapInt(int value, int fromMin, int fromMax, int toMin, int toMax)  __fromfile("libsimpletools/mapInt.c") ;
0000c                 | 
0000c                 | int random(int limitLow, int limitHigh)  __fromfile("libsimpletools/random.c") ;
0000c                 | 
0000c                 | 
0000c                 | void cog_end(int *coginfo)  __fromfile("libsimpletools/cogend.c") ;
0000c                 | int cog_num(int *coginfo)  __fromfile("libsimpletools/cognum.c") ;
0000c                 | int* cog_run(void (*function)(void *par), int stacksize)  __fromfile("libsimpletools/cogrun.c") ;
0000c                 | #line 14 "RA8876.h"
0000c                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Error.h"
0000c                 | #line 14 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Error.h"
0000c                 | typedef enum Error_e
0000c                 | {
0000c                 |     SUCCESS,
0000c                 |     FAIL,
0000c                 | 
0000c                 |     DISPLAY_NOT_FOUND = 2,
0000c                 |     DISPLAY_PLL_FAIL,
0000c                 |     DISPLAY_SDRAM_FAIL,
0000c                 | 
0000c                 |     RTC_RESET = 51,
0000c                 |     RTC_NOT_FOUND,
0000c                 | 
0000c                 |     DYN4_NOT_RESPONDING = 101,
0000c                 |     DYN4_CONNECTION_LOST,
0000c                 |     DYN4_COG_FAIL,
0000c                 | 
0000c                 |     FORCEGAUGE_NOT_RESPONDING = 151,
0000c                 |     FORCEGAUGE_CONNECTION_LOST,
0000c                 |     FORCEGAUGE_COG_FAIL,
0000c                 | 
0000c                 |     JSON_FILE_ERROR = 201,
0000c                 |     JSON_FILE_NOT_FOUND,
0000c                 |     JSON_FILE_READ_FAIL,
0000c                 |     JSON_FILE_WRITE_FAIL,
0000c                 |     JSON_FILE_INVALID,
0000c                 |     JSON_FILE_EMPTY,
0000c                 |     JSON_FILE_NOT_VALID,
0000c                 | 
0000c                 |     MCP23017_NOT_FOUND = 251,
0000c                 | 
0000c                 | } Error;
0000c                 | 
0000c                 | void print_error(Error value);
0000c                 | inline void seterror(Error *err, Error value);
0000c                 | #line 15 "RA8876.h"
0000c                 | #line 1 "C:/flexprop/include/stdbool.h"
0000c                 | #line 16 "RA8876.h"
0000c                 | #line 1 "C:/flexprop/include/stdint.h"
0000c                 | #line 17 "RA8876.h"
0000c                 | #line 1 "C:/flexprop/include/stdio.h"
0000c                 | #line 5 "C:/flexprop/include/stdio.h"
0000c                 | #line 1 "C:/flexprop/include/sys/size_t.h"
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 |   typedef  unsigned long  size_t;
0000c                 | #line 6 "C:/flexprop/include/stdio.h"
0000c                 | #line 1 "C:/flexprop/include/sys/types.h"
0000c                 | #line 6 "C:/flexprop/include/sys/types.h"
0000c                 | #line 1 "C:/flexprop/include/sys/size_t.h"
0000c                 | #line 7 "C:/flexprop/include/sys/types.h"
0000c                 | #line 1 "C:/flexprop/include/sys/wchar_t.h"
0000c                 | #line 15 "C:/flexprop/include/sys/wchar_t.h"
0000c                 | typedef int wchar_t;
0000c                 | #line 24 "C:/flexprop/include/sys/wchar_t.h"
0000c                 | typedef struct _Mbstate {
0000c                 |   unsigned int total:5;
0000c                 |   unsigned int left:5;
0000c                 |   unsigned int partial:22;
0000c                 | } _Mbstate_t;
0000c                 | #line 8 "C:/flexprop/include/sys/types.h"
0000c                 | #line 1 "C:/flexprop/include/time.h"
0000c                 | #line 7 "C:/flexprop/include/time.h"
0000c                 | #line 1 "C:/flexprop/include/sys/size_t.h"
0000c                 | #line 8 "C:/flexprop/include/time.h"
0000c                 | #line 13 "C:/flexprop/include/time.h"
0000c                 | typedef unsigned int clock_t;
0000c                 | #line 29 "C:/flexprop/include/time.h"
0000c                 | typedef unsigned long time_t;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | struct tm {
0000c                 |   int tm_sec;
0000c                 |   int tm_min;
0000c                 |   int tm_hour;
0000c                 |   int tm_mday;
0000c                 |   int tm_mon;
0000c                 |   int tm_year;
0000c                 |   int tm_wday;
0000c                 |   int tm_yday;
0000c                 |   int tm_isdst;
0000c                 | };
0000c                 | 
0000c                 | 
0000c                 |     clock_t clock(void)  __fromfile("libc/sys/propeller/clock.c") ;
0000c                 |     time_t time(time_t *)  __fromfile("libc/time/time.c") ;
0000c                 |     double difftime(time_t time2, time_t time1)  __fromfile("libc/time/difftime.c") ;
0000c                 | 
0000c                 |     time_t mktime(struct tm *stm)  __fromfile("libc/time/localtim.c") ;
0000c                 | 
0000c                 |     struct tm *_gmtime_r(const time_t *t, struct tm *stm)  __fromfile("libc/time/localtim.c") ;
0000c                 |     struct tm *gmtime(const time_t *)  __fromfile("libc/time/localtim.c") ;
0000c                 |     struct tm *_localtime_r(const time_t *, struct tm *)  __fromfile("libc/time/localtim.c") ;
0000c                 |     struct tm *localtime(const time_t *)  __fromfile("libc/time/localtim.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 |     unsigned long  strftime(char *s,  unsigned long  max, const char *format, const struct tm *stm)  __attribute__((complexio))   __fromfile("libc/time/strftime.c") ;
0000c                 | 
0000c                 |     char *asctime(const struct tm *stm)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
0000c                 |     char *asctime_r(const struct tm *stm, char *buf)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
0000c                 |     char *ctime(const time_t *timep)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
0000c                 |     char *ctime_r(const time_t *timep, char *buf)  __attribute__((complexio))   __fromfile("libc/time/asctime.c") ;
0000c                 | #line 74 "C:/flexprop/include/time.h"
0000c                 |     void _tzset(void)  __fromfile("libc/time/localtim.c") ;
0000c                 | #line 9 "C:/flexprop/include/sys/types.h"
0000c                 | 
0000c                 | 
0000c                 | typedef long off_t;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | typedef long ssize_t;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | typedef int dev_t;
0000c                 | typedef int ino_t;
0000c                 | typedef unsigned int mode_t;
0000c                 | 
0000c                 | typedef unsigned short uid_t;
0000c                 | typedef unsigned short gid_t;
0000c                 | 
0000c                 | typedef int pid_t;
0000c                 | 
0000c                 | struct stat {
0000c                 |   int st_dev;
0000c                 |   int st_ino;
0000c                 |   unsigned int st_mode;
0000c                 |   int st_nlink;
0000c                 |   uid_t st_uid;
0000c                 |   gid_t st_gid;
0000c                 |   int st_rdev;
0000c                 |   long st_size;
0000c                 |   long st_blksize;
0000c                 |   long st_blocks;
0000c                 |   time_t st_atime;
0000c                 |   time_t st_mtime;
0000c                 |   time_t st_ctime;
0000c                 | };
0000c                 | 
0000c                 | typedef struct s_vfs_file_t vfs_file_t;
0000c                 | 
0000c                 | struct s_vfs_file_t {
0000c                 |     void *vfsdata;
0000c                 |     unsigned flags;
0000c                 |     unsigned state;
0000c                 |     int lock;
0000c                 |     ssize_t (*read)(vfs_file_t *fil, void *buf, size_t count);
0000c                 |     ssize_t (*write)(vfs_file_t *fil, const void *buf, size_t count);
0000c                 |     int (*putcf)(int c, vfs_file_t *fil);
0000c                 |     int (*getcf)(vfs_file_t *fil);
0000c                 |     int (*close)(vfs_file_t *fil);
0000c                 |     int (*ioctl)(vfs_file_t *fil, int arg, void *buf);
0000c                 |     int (*flush)(vfs_file_t *fil);
0000c                 |     off_t (*lseek)(vfs_file_t *fil, off_t offset, int whence);
0000c                 | 
0000c                 | 
0000c                 |     int putchar(int c) {
0000c                 |         int i;
0000c                 |         if (!putcf) return 0;
0000c                 |         i = putcf(c, __this); return (i < 0) ? 0 : 1;
0000c                 |     }
0000c                 |     int getchar(void) {
0000c                 |         if (!getcf) return -1;
0000c                 |         return getcf(__this);
0000c                 |     }
0000c                 | };
0000c                 | 
0000c                 | typedef int (*putcfunc_t)(int c, vfs_file_t *fil);
0000c                 | typedef int (*getcfunc_t)(vfs_file_t *fil);
0000c                 | #line 7 "C:/flexprop/include/stdio.h"
0000c                 | #line 1 "C:/flexprop/include/sys/limits.h"
0000c                 | #line 8 "C:/flexprop/include/stdio.h"
0000c                 | #line 1 "C:/flexprop/include/sys/vfs.h"
0000c                 | #line 4 "C:/flexprop/include/sys/vfs.h"
0000c                 | #line 1 "C:/flexprop/include/sys/types.h"
0000c                 | #line 5 "C:/flexprop/include/sys/vfs.h"
0000c                 | #line 1 "C:/flexprop/include/dirent.h"
0000c                 | #line 8 "C:/flexprop/include/dirent.h"
0000c                 | struct dirent {
0000c                 |     char d_name[ (64) ];
0000c                 |     unsigned long d_off;
0000c                 |     unsigned long d_ino;
0000c                 |     unsigned long d_size;
0000c                 |     unsigned long d_mtime;
0000c                 |     unsigned char d_type;
0000c                 | };
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | typedef struct _dir {
0000c                 |     void *vfs;
0000c                 |     void *vfsdata;
0000c                 |     struct dirent dirent;
0000c                 | } DIR;
0000c                 | 
0000c                 | DIR *opendir(const char *name)  __fromfile("libc/unix/opendir.c") ;
0000c                 | int closedir(DIR *dir)  __fromfile("libc/unix/opendir.c") ;
0000c                 | struct dirent *readdir(DIR *dirp)  __fromfile("libc/unix/opendir.c") ;
0000c                 | #line 6 "C:/flexprop/include/sys/vfs.h"
0000c                 | 
0000c                 | typedef DIR vfs_dir_t;
0000c                 | #line 11 "C:/flexprop/include/sys/vfs.h"
0000c                 | struct vfs {
0000c                 | 
0000c                 |     int (*close)(vfs_file_t *fil);
0000c                 |     ssize_t (*read)(vfs_file_t *fil, void *buf, size_t siz);
0000c                 |     ssize_t (*write)(vfs_file_t *fil, const void *buf, size_t siz);
0000c                 |     off_t (*lseek)(vfs_file_t *fil, off_t offset, int whence);
0000c                 |     int (*ioctl)(vfs_file_t *fil, unsigned long req, void *argp);
0000c                 |     int (*flush)(vfs_file_t *fil);
0000c                 |     void *vfs_data;
0000c                 |     void *reserved;
0000c                 | 
0000c                 |     int (*open)(vfs_file_t *fil, const char *name, int flags);
0000c                 |     int (*creat)(vfs_file_t *fil, const char *pathname, mode_t mode);
0000c                 | 
0000c                 |     int (*opendir)(vfs_dir_t *dir, const char *name);
0000c                 |     int (*closedir)(vfs_dir_t *dir);
0000c                 |     int (*readdir)(vfs_dir_t *dir, struct dirent *ent);
0000c                 |     int (*stat)(const char *name, struct stat *buf);
0000c                 | 
0000c                 |     int (*mkdir)(const char *name, mode_t mode);
0000c                 |     int (*rmdir)(const char *name);
0000c                 | 
0000c                 |     int (*remove)(const char *pathname);
0000c                 |     int (*rename)(const char *oldname, const char *newname);
0000c                 | 
0000c                 |     int (*init)(const char *mountname);
0000c                 |     int (*deinit)(const char *mountname);
0000c                 | };
0000c                 | 
0000c                 | typedef struct vfs vfs_t;
0000c                 | 
0000c                 | int _openraw(void *f, const char *name, unsigned flags, unsigned perm)  __fromfile("libc/unix/posixio.c") ;
0000c                 | int _closeraw(void *f)  __fromfile("libc/unix/posixio.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | struct vfs *_getrootvfs(void);
0000c                 | void _setrootvfs(struct vfs *);
0000c                 | 
0000c                 | struct vfs *_vfs_open_host(void)  __fromfile("filesys/fs9p/fs9p_vfs.c") ;
0000c                 | struct vfs *_vfs_open_sdcard(void)  __fromfile("filesys/fatfs/fatfs_vfs.c") ;
0000c                 | struct vfs *_vfs_open_sdcardx(int pclk = 61, int pss = 60, int pdi = 59, int pdo = 58)  __fromfile("filesys/fatfs/fatfs_vfs.c") ;
0000c                 | #line 64 "C:/flexprop/include/sys/vfs.h"
0000c                 | struct _default_buffer {
0000c                 |     int cnt;
0000c                 |     unsigned char *ptr;
0000c                 |     unsigned flags;
0000c                 | 
0000c                 | 
0000c                 |     unsigned char buf[ 1024 ];
0000c                 | };
0000c                 | 
0000c                 | int __default_getc(vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
0000c                 | int __default_putc(int c, vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
0000c                 | int __default_putc_terminal(int c, vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
0000c                 | int __default_flush(vfs_file_t *f)  __fromfile("libc/unix/bufio.c") ;
0000c                 | 
0000c                 | 
0000c                 | char *__getfilebuffer();
0000c                 | struct vfs *__getvfsforfile(char *fullname, const char *orig_name, char *full_path);
0000c                 | #line 9 "C:/flexprop/include/stdio.h"
0000c                 | #line 1 "C:/flexprop/include/unistd.h"
0000c                 | #line 2 "C:/flexprop/include/unistd.h"
0000c                 | #line 1 "C:/flexprop/include/sys/unistd.h"
0000c                 | #line 4 "C:/flexprop/include/sys/unistd.h"
0000c                 | #line 1 "C:/flexprop/include/sys/types.h"
0000c                 | #line 5 "C:/flexprop/include/sys/unistd.h"
0000c                 | #line 22 "C:/flexprop/include/sys/unistd.h"
0000c                 |   typedef unsigned int useconds_t;
0000c                 | 
0000c                 |   int open(const char *name, int flags, mode_t mode)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
0000c                 |   int write(int fd, const void *buf, int count)  __fromfile("libc/unix/posixio.c") ;
0000c                 |   int read(int fd, void *buf, int count)  __fromfile("libc/unix/posixio.c") ;
0000c                 |   int close(int fd)  __fromfile("libc/unix/posixio.c") ;
0000c                 |   off_t lseek(int fd, off_t offset, int whence)  __fromfile("libc/unix/posixio.c") ;
0000c                 |   int ioctl(int fd, unsigned long req, void *argp)  __fromfile("libc/unix/ioctl.c") ;
0000c                 |   int access(const char *path, int mode)  __fromfile("libc/unix/access.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 |   int isatty(int fd)  __fromfile("libc/unix/isatty.c") ;
0000c                 | 
0000c                 |   char *getcwd(char *buf, int size)  __attribute__((complexio))   __fromfile("libc/unix/_mount.c") ;
0000c                 |   int chdir(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/_mount.c") ;
0000c                 |   int rmdir(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
0000c                 |   int mkdir(const char *path, int mode)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
0000c                 | 
0000c                 |   int unlink(const char *path)  __attribute__((complexio))   __fromfile("libc/unix/posixio.c") ;
0000c                 |   int chown(const char *pathname, uid_t owner, gid_t group)  __fromfile("libc/unix/posixio.c") ;
0000c                 |   int chmod(const char *pathname, mode_t mode)  __fromfile("libc/unix/posixio.c") ;
0000c                 | 
0000c                 |   unsigned int sleep(unsigned int seconds)  __fromfile("libc/time/sleep.c") ;
0000c                 |   int usleep(useconds_t usec)  __fromfile("libc/time/usleep.c") ;
0000c                 | 
0000c                 |   char *_mktemp(char *templ);
0000c                 |   char *mktemp(char *);
0000c                 | 
0000c                 |   const char **_get_environ_ptr()  __fromfile("libc/stdlib/getenv.c") ;
0000c                 |   void _put_environ_ptr(const char **ptr)  __fromfile("libc/stdlib/getenv.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 |     int _execve(const char *path, char **args, char **env)  __attribute__((complexio))   __fromfile("libc/unix/exec.c") ;
0000c                 | #line 3 "C:/flexprop/include/unistd.h"
0000c                 | #line 10 "C:/flexprop/include/stdio.h"
0000c                 | #line 27 "C:/flexprop/include/stdio.h"
0000c                 | typedef vfs_file_t FILE;
0000c                 | typedef struct string_file_t {
0000c                 |     FILE file;
0000c                 |     const char *ptr;
0000c                 |     size_t pos;
0000c                 |     size_t len;
0000c                 | } _STRING_FILE;
0000c                 | 
0000c                 | FILE *__getftab(int i)  __fromfile("libc/unix/posixio.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | int fputc(int c, FILE *f)  __fromfile("libc/stdio/fputs.c") ;
0000c                 | int fgetc(FILE *f)  __fromfile("libc/stdio/fputs.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | int sprintf(char *str, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
0000c                 | int snprintf(char *str, size_t size, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
0000c                 | int printf(const char *format, ...)  __fromfile("libc/stdio/fprintf.c") ;
0000c                 | int fprintf(FILE *f, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/fprintf.c") ;
0000c                 | 
0000c                 | int vsprintf(char *str, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
0000c                 | int vsnprintf(char *str, size_t size, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sprintf.c") ;
0000c                 | int vprintf(const char *format, unsigned long ap)  __fromfile("libc/stdio/fprintf.c") ;
0000c                 | int vfprintf(FILE *f, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/fprintf.c") ;
0000c                 | 
0000c                 | int vscanf(const char *format, unsigned long ap)  __fromfile("libc/stdio/vscanf.c") ;
0000c                 | int vsscanf(char *str, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/sscanf.c") ;
0000c                 | int vfscanf(FILE *f, const char *format, unsigned long ap)  __attribute__((complexio))   __fromfile("libc/stdio/vfscanf.c") ;
0000c                 | 
0000c                 | int scanf(const char *format, ...)  __fromfile("libc/stdio/scanf.c") ;
0000c                 | int sscanf(char *str, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/sscanf.c") ;
0000c                 | int fscanf(FILE *f, const char *format, ...)  __attribute__((complexio))   __fromfile("libc/stdio/fscanf.c") ;
0000c                 | 
0000c                 | int fputs(const char *s, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fputs.c") ;
0000c                 | int puts(const char *s)  __fromfile("libc/stdio/fputs.c") ;
0000c                 | 
0000c                 | char *gets(char *data)  __fromfile("libc/stdio/gets.c") ;
0000c                 | char *fgets(char *buf, int size, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fgets.c") ;
0000c                 | 
0000c                 | FILE *fopen(const char *name, const char *mode)  __attribute__((complexio))   __fromfile("libc/stdio/fopen.c") ;
0000c                 | FILE *__string_file(_STRING_FILE *fp, const char *str, const char *mode, size_t len)  __attribute__((complexio))   __fromfile("libc/stdio/stringio.c") ;
0000c                 | 
0000c                 | int fclose(FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fopen.c") ;
0000c                 | int fflush(FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fflush.c") ;
0000c                 | size_t fwrite(const void *ptr, size_t size, size_t n, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fwrite.c") ;
0000c                 | size_t fread(void *ptr, size_t size, size_t n, FILE *f)  __attribute__((complexio))   __fromfile("libc/stdio/fwrite.c") ;
0000c                 | 
0000c                 | void clearerr(FILE *f)  __fromfile("libc/stdio/clearerr.c") ;
0000c                 | void perror(const char *s)  __fromfile("libc/stdio/perror.c") ;
0000c                 | 
0000c                 | int fileno(FILE *f)  __fromfile("libc/stdio/fileno.c") ;
0000c                 | 
0000c                 | int fseek(FILE *f, long offset, int whence)  __fromfile("libc/stdio/fseek.c") ;
0000c                 | long ftell(FILE *f)  __fromfile("libc/stdio/fseek.c") ;
0000c                 | 
0000c                 | int remove(const char *pathname)  __fromfile("libsys/remove.c") ;
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | 
0000c                 | int rename(const char *oldpath, const char *newpath)  __fromfile("libc/unix/rename.c") ;
0000c                 | #line 18 "RA8876.h"
0000c                 | #line 1 "C:/flexprop/include/stdlib.h"
0000c                 | #line 5 "C:/flexprop/include/stdlib.h"
0000c                 | #line 1 "C:/flexprop/include/sys/size_t.h"
0000c                 | #line 6 "C:/flexprop/include/stdlib.h"
0000c                 | #line 1 "C:/flexprop/include/sys/wchar_t.h"
0000c                 | #line 7 "C:/flexprop/include/stdlib.h"
0000c                 | #line 1 "C:/flexprop/include/sys/null.h"
0000c                 | #line 8 "C:/flexprop/include/stdlib.h"
0000c                 | #line 22 "C:/flexprop/include/stdlib.h"
0000c                 |     double atof(const char *);
0000c                 |     int atoi(const char *)  __fromfile("libc/stdlib/atoi.c") ;
0000c                 |     long atol(const char *)  __fromfile("libc/stdlib/atoi.c") ;
0000c                 |     long long atoll(const char *);
0000c                 | 
0000c                 |   long double strtold(const char *nptr, char **endptr);
0000c                 |   double strtod(const char *nptr, char **endptr);
0000c                 |   float strtof(const char *nptr, char **endptr);
0000c                 | 
0000c                 |     long strtol(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtol.c") ;
0000c                 |     unsigned long strtoul(const char *nptr, char **endptr, int base)  __fromfile("libc/stdlib/strtoul.c") ;
0000c                 |   long long strtoll(const char *nptr, char **endptr, int base);
0000c                 |   unsigned long long strtoull(const char *nptr, char **endptr, int base);
0000c                 | 
0000c                 | 
0000c                 |     int rand(void)  __fromfile("libc/stdlib/rand.c") ;
0000c                 |     void srand(unsigned int seed)  __fromfile("libc/stdlib/rand.c") ;
0000c                 | 
0000c                 |     void *malloc(size_t n)  __fromfile("libc/stdlib/malloc.c") ;
0000c                 |     void *calloc(size_t, size_t)  __fromfile("libc/stdlib/malloc.c") ;
0000c                 |     void *realloc(void *, size_t)  __fromfile("libc/stdlib/malloc.c") ;
0000c                 |     void free(void *)  __fromfile("libc/stdlib/malloc.c") ;
0000c                 | 
0000c                 | 
0000c                 |     int atexit(void (*func)(void))  __fromfile("libc/stdlib/exit.c") ;
0000c                 |      void exit(int status)  __fromfile("libc/stdlib/exit.c") ;
0000c                 |      void abort(void)  __fromfile("libc/stdlib/abort.c") ;
0000c                 |      void _Exit(int status)  __fromfile("libc/stdlib/_Exit.c") ;
0000c                 |    void _exit(int status);
0000c                 | #line 56 "C:/flexprop/include/stdlib.h"
0000c                 |    long labs(long l);
0000c                 | 
0000c                 | 
0000c                 |    long long llabs(long long ll);
0000c                 | 
0000c                 | 
0000c                 |   typedef struct {
0000c                 |     int quot, rem;
0000c                 |   } div_t;
0000c                 | 
0000c                 |   typedef struct {
0000c                 |     long int quot, rem;
0000c                 |   } ldiv_t;
0000c                 | 
0000c                 |   typedef struct {
0000c                 |     long long quot, rem;
0000c                 |   } lldiv_t;
0000c                 | 
0000c                 |   div_t div(int num, int denom);
0000c                 |   ldiv_t ldiv(long num, long denom);
0000c                 |   lldiv_t lldiv(long long num, long long denom);
0000c                 | 
0000c                 |     void qsort(void *base, size_t nmemb, size_t size, int (*compare)(const void *, const void *))  __fromfile("libc/stdlib/qsort.c") ;
0000c                 |   void *bsearch(const void *key, const void *base, size_t nmemb, size_t size,
0000c                 | 		int (*compare)(const void *, const void *));
0000c                 | 
0000c                 |     char *getenv(const char *name)  __fromfile("libc/stdlib/getenv.c") ;
0000c                 |     int putenv(const char *name)  __fromfile("libc/stdlib/putenv.c") ;
0000c                 | 
0000c                 | 
0000c     00 00 00 00 |   extern int _mb_cur_max;
00010                 | 
00010                 | 
00010                 | 
00010                 |   int mblen(const char *s, size_t n);
00010                 |   int mbtowc(wchar_t * __restrict pwc, const char * __restrict s, size_t n);
00010                 |   size_t mbstowcs(wchar_t *dest, const char *src, size_t n);
00010                 | 
00010                 | 
00010                 |   int system(const char *command);
00010                 | #line 102 "C:/flexprop/include/stdlib.h"
00010                 |     int _itoa_prec( unsigned int x, char *buf, unsigned base, int prec );
00010                 |     int _lltoa_prec( unsigned long long x, char *buf, unsigned base, int prec );
00010                 | #line 19 "RA8876.h"
00010                 | 
00010                 | typedef struct __using("jm_i2c.spin2") I2CBus;
00010                 | typedef struct __using("jm_spi.spin2") SPI;
00010                 | #line 786 "RA8876.h"
00010                 | typedef struct TouchLocation_s
00010                 | {
00010                 |     uint16_t x;
00010                 |     uint16_t y;
00010                 | } TouchLocation;
00010                 | 
00010                 | typedef struct Image_s
00010                 | {
00010                 |     char name[20];
00010                 |     int page;
00010                 |     int x0;
00010                 |     int y0;
00010                 |     int width;
00010                 |     int height;
00010                 |     uint16_t backgroundColor;
00010                 |     uint16_t colorToReplace;
00010                 |     uint16_t replacementColor;
00010                 | } Image;
00010                 | 
00010                 | typedef struct RA8876_s
00010                 | {
00010                 |     int xnscs, reset;
00010                 |     int spi_mosi, spi_miso, spi_clk;
00010                 |     int i2c_addr_write, i2c_addr_read;
00010                 |     int reset_mask;
00010                 |     TouchLocation location[1];
00010                 |     TouchLocation lastLocation[1];
00010                 |     int locationCount;
00010                 |     I2CBus i2cBus;
00010                 |     SPI spi;
00010                 |     int currentPage;
00010                 | } Display;
00010                 | 
00010                 | Error display_begin(Display *display, int reset, int xnscs, int spi_mosi, int spi_miso, int spi_clk, int i2c_clk, int i2c_sda);
00010                 | 
00010                 | 
00010                 | void display_load_image(Display *display, Image *image);
00010                 | void display_bte_memory_copy_image(Display *display, Image *image, int xpos, int ypos);
00010                 | 
00010                 | void display_on(Display *display,  _Bool  on);
00010                 | void display_lcd_horizontal_width_vertical_height(Display *display, uint16_t width, uint16_t height);
00010                 | void display_lcd_horizontal_non_display(Display *display, uint16_t numbers);
00010                 | void display_lcd_hsync_start_position(Display *display, uint16_t numbers);
00010                 | void display_lcd_hsync_pulse_width(Display *display, uint16_t numbers);
00010                 | void display_lcd_vertical_non_display(Display *display, uint16_t numbers);
00010                 | void display_lcd_vsync_start_position(Display *display, uint16_t numbers);
00010                 | void display_lcd_vsync_pulse_width(Display *display, uint16_t numbers);
00010                 | void display_image_start_address(Display *display, uint32_t addr);
00010                 | void display_image_width(Display *display, uint16_t width);
00010                 | void display_window_start_xy(Display *display, uint16_t x0, uint16_t y0);
00010                 | void display_canvas_image_start_address(Display *display, uint32_t addr);
00010                 | void display_canvas_image_width(Display *display, uint16_t width);
00010                 | void display_active_window_xy(Display *display, uint16_t x0, uint16_t y0);
00010                 | void display_active_window_wh(Display *display, uint16_t width, uint16_t height);
00010                 | 
00010                 | void display_ram_access_prepare(Display *display, Display *display);
00010                 | void display_fore_ground_color_16bpp(Display *display, uint16_t color);
00010                 | void display_back_ground_color_16bpp(Display *display, uint16_t color);
00010                 | 
00010                 | 
00010                 | void display_graphic_mode(Display *display,  _Bool  on);
00010                 | void display_set_pixel_cursor(Display *display, uint16_t x, uint16_t y);
00010                 | void display_put_pixel_16bpp(Display *display, uint16_t x, uint16_t y, uint16_t color);
00010                 | void display_put_picture_16bpp(Display *display, uint16_t x, uint16_t y, uint16_t width, uint16_t height);
00010                 | void display_put_picture_16bpp_data(Display *display, uint16_t x, uint16_t y, uint16_t width, uint16_t height, const unsigned char *data);
00010                 | 
00010                 | 
00010                 | void display_text_mode(Display *display,  _Bool  on);
00010                 | void display_text_color(Display *display, uint16_t foreground_color, uint16_t background_color);
00010                 | void display_set_text_cursor(Display *display, uint16_t x, uint16_t y);
00010                 | void display_set_text_parameter1(Display *display, uint8_t source_select, uint8_t size_select, uint8_t iso_select);
00010                 | void display_set_text_parameter2(Display *display, uint8_t align, uint8_t chroma_key, uint8_t width_enlarge, uint8_t height_enlarge);
00010                 | 
00010                 | void display_genitop_character_rom_parameter(Display *display, uint8_t scs_select, uint8_t clk_div, uint8_t rom_select, uint8_t character_select, uint8_t gt_width);
00010                 | 
00010                 | void display_draw_string(Display *display, const uint16_t x0, const uint16_t y0, const char *str);
00010                 | 
00010                 | 
00010                 | void display_draw_line(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
00010                 | void display_draw_square(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
00010                 | void display_draw_square_fill(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
00010                 | void display_draw_circle_square(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t xr, uint16_t yr, uint16_t color);
00010                 | void display_draw_circle_square_fill(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t xr, uint16_t yr, uint16_t color);
00010                 | void display_draw_triangle(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
00010                 | void display_draw_triangle_fill(Display *display, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color);
00010                 | void display_draw_circle(Display *display, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
00010                 | void display_draw_circle_fill(Display *display, uint16_t x0, uint16_t y0, uint16_t r, uint16_t color);
00010                 | void display_draw_ellipse(Display *display, uint16_t x0, uint16_t y0, uint16_t xr, uint16_t yr, uint16_t color);
00010                 | void display_draw_ellipse_fill(Display *display, uint16_t x0, uint16_t y0, uint16_t xr, uint16_t yr, uint16_t color);
00010                 | 
00010                 | 
00010                 | void display_bte_memory_copy(Display *display, uint32_t s0_addr, uint16_t s0_image_width, uint16_t s0_x, uint16_t s0_y, uint32_t des_addr, uint16_t des_image_width,
00010                 |                              uint16_t des_x, uint16_t des_y, uint16_t copy_width, uint16_t copy_height);
00010                 | void display_bte_memory_copy_with_rop(Display *display, uint32_t s0_addr, uint16_t s0_image_width, uint16_t s0_x, uint16_t s0_y, uint32_t s1_addr, uint16_t s1_image_width, uint16_t s1_x, uint16_t s1_y,
00010                 |                                       uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t copy_width, uint16_t copy_height, uint8_t rop_code);
00010                 | void display_bte_memory_copy_with_chroma_key(Display *display, uint32_t s0_addr, uint16_t s0_image_width, uint16_t s0_x, uint16_t s0_y,
00010                 |                                              uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t copy_width, uint16_t copy_height, uint16_t chromakey_color);
00010                 | void display_bte_mpu_write_with_rop(Display *display, uint32_t s1_addr, uint16_t s1_image_width, uint16_t s1_x, uint16_t s1_y, uint32_t des_addr, uint16_t des_image_width,
00010                 |                                     uint16_t des_x, uint16_t des_y, uint16_t width, uint16_t height, uint8_t rop_code);
00010                 | void display_bte_mpu_write_with_chroma_key(Display *display, uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t width, uint16_t height, uint16_t chromakey_color);
00010                 | void display_bte_mpu_write_color_expansion(Display *display, uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t width, uint16_t height, uint16_t foreground_color, uint16_t background_color);
00010                 | void display_bte_mpu_write_color_expansion_with_chroma_key(Display *display, uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y,
00010                 |                                                            uint16_t width, uint16_t height, uint16_t foreground_color, uint16_t background_color);
00010                 | 
00010                 | void display_bte_pattern_fill(Display *display, uint8_t p8x8or16x16, uint32_t s0_addr, uint16_t s0_image_width, uint16_t s0_x, uint16_t s0_y,
00010                 |                               uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t width, uint16_t height);
00010                 | void display_bte_pattern_fill_with_chroma_key(Display *display, uint8_t p8x8or16x16, uint32_t s0_addr, uint16_t s0_image_width, uint16_t s0_x, uint16_t s0_y,
00010                 |                                               uint32_t des_addr, uint16_t des_image_width, uint16_t des_x, uint16_t des_y, uint16_t width, uint16_t height, uint16_t chromakey_color);
00010                 | 
00010                 | Error display_initialize(Display *display);
00010                 | _Bool  display_pll_initial(Display *display);
00010                 | _Bool  display_sdram_initial(Display *display);
00010                 | 
00010                 | 
00010                 | uint8_t display_gt9271_send_cfg(Display *display, uint8_t *buf, uint16_t cfg_len);
00010                 | void display_write_gt9271_touch_register(Display *display, uint16_t regAddr, uint8_t *val, uint16_t cnt);
00010                 | uint8_t display_read_gt9271_touch_addr(Display *display, uint16_t regAddr, uint8_t *pBuf, uint8_t len);
00010                 | uint8_t readGT9271TouchLocation(Display *display, TouchLocation *pLoc, uint8_t num);
00010                 | void button_update(Display *display);
00010                 | int display_update_touch(Display *display);
00010                 | 
00010                 | void lcdRegWrite(Display *display, uint8_t reg);
00010                 | void lcdDataWrite(Display *display, uint8_t data);
00010                 | uint8_t lcdDataRead(Display *display);
00010                 | uint8_t lcdStatusRead(Display *display);
00010                 | void lcdRegDataWrite(Display *display, uint8_t reg, uint8_t data);
00010                 | uint8_t lcdRegDataRead(Display *display, uint8_t reg);
00010                 | void lcdDataWrite16bbp(Display *display, uint16_t data);
00010                 | 
00010                 | 
00010                 | void checkWriteFifoNotFull(Display *display);
00010                 | void checkWriteFifoEmpty(Display *display);
00010                 | void checkReadFifoNotFull(Display *display);
00010                 | void checkReadFifoFull(Display *display);
00010                 | void checkReadFifoNotEmpty(Display *display);
00010                 | void check2dBusy(Display *display);
00010                 | _Bool  checkSdramReady(Display *display);
00010                 | uint8_t powerSavingStatus(Display *display);
00010                 | _Bool  checkIcReady(Display *display);
00010                 | 
00010                 | void bte_Source0_MemoryStartAddr(Display *display, uint32_t addr);
00010                 | void bte_Source0_ImageWidth(Display *display, uint16_t width);
00010                 | void bte_Source0_WindowStartXY(Display *display, uint16_t x0, uint16_t y0);
00010                 | void bte_Source1_MemoryStartAddr(Display *display, uint32_t addr);
00010                 | void bte_Source1_ImageWidth(Display *display, uint16_t width);
00010                 | void bte_Source1_WindowStartXY(Display *display, uint16_t x0, uint16_t y0);
00010                 | void bte_DestinationMemoryStartAddr(Display *display, uint32_t addr);
00010                 | void bte_DestinationImageWidth(Display *display, uint16_t width);
00010                 | void bte_DestinationWindowStartXY(Display *display, uint16_t x0, uint16_t y0);
00010                 | void bte_WindowSize(Display *display, uint16_t width, uint16_t height);
00010                 | 
00010                 | 
00010                 | void pwm_Prescaler(Display *display, uint8_t prescaler);
00010                 | void pwm_ClockMuxReg(Display *display, uint8_t pwm1_clk_div, uint8_t pwm0_clk_div, uint8_t xpwm1_ctrl, uint8_t xpwm0_ctrl);
00010                 | void pwm_Configuration(Display *display, uint8_t pwm1_inverter, uint8_t pwm1_auto_reload, uint8_t pwm1_start, uint8_t pwm0_dead_zone, uint8_t pwm0_inverter, uint8_t pwm0_auto_reload, uint8_t pwm0_start);
00010                 | 
00010                 | void pwm0_ClocksPerPeriod(Display *display, uint16_t clocks_per_period);
00010                 | void pwm0_Duty(Display *display, uint16_t duty);
00010                 | void pwm1_ClocksPerPeriod(Display *display, uint16_t clocks_per_period);
00010                 | void pwm1_Duty(Display *display, uint16_t duty);
00010                 | #line 4 "Module.h"
00010                 | #line 1 "C:/flexprop/include/stdbool.h"
00010                 | #line 5 "Module.h"
00010                 | #line 1 "C:/flexprop/include/math.h"
00010                 | #line 77 "C:/flexprop/include/math.h"
00010                 | typedef float float_t;
00010                 | typedef double double_t;
00010                 | #line 6 "Module.h"
00010                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Images.h"
00010                 | #line 4 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Images.h"
00010                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/RA8876/RA8876.h"
00010                 | #line 5 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/include/Utility/Images.h"
00010                 | 
00010                 | typedef struct images_s
00010                 | {
00010                 |     Image keyboardImage;
00010                 |     Image navigationImage;
00010                 |     Image manualPageImage;
00010                 |     Image statusPageImage;
00010                 |     Image automaticPageImage;
00010                 |     Image calibratePageImage;
00010                 |     Image filesPageImage;
00010                 |     Image successImage;
00010                 |     Image failImage;
00010                 |     Image addImage;
00010                 |     Image garbageImage;
00010                 |     Image fileImage;
00010                 |     Image folderImage;
00010                 | } Images;
00010                 | #line 7 "Module.h"
00010                 | 
00010                 | 
00010                 | 
00010                 | typedef enum ModuleType_e
00010                 | {
00010                 |     MODULE_ROOT,
00010                 |     MODULE_TEXT,
00010                 |     MODULE_IMAGE,
00010                 |     MODULE_LINE,
00010                 |     MODULE_RECTANGLE,
00010                 |     MODULE_RECTANGLE_CIRCLE,
00010                 |     MODULE_GRAPH,
00010                 |     MODULE_KEYBOARD,
00010                 |     MODULE_WINDOW
00010                 | } ModuleType;
00010                 | 
00010                 | 
00010                 | 
00010                 | 
00010                 | 
00010                 | typedef enum ModuleTextAignType_e
00010                 | {
00010                 |     MODULE_TEXT_ALIGN_NONE,
00010                 |     MODULE_TEXT_ALIGN_INNER_LEFT,
00010                 |     MODULE_TEXT_ALIGN_INNER_CENTER,
00010                 |     MODULE_TEXT_ALIGN_INNER_RIGHT,
00010                 |     MODULE_TEXT_ALIGN_VTOP,
00010                 |     MODULE_TEXT_ALIGN_VCENTER,
00010                 |     MODULE_TEXT_ALIGN_VBOTTOM,
00010                 | } ModuleTextAignType;
00010                 | 
00010                 | typedef struct ModuleText_s
00010                 | {
00010                 |     char *value;
00010                 |     int font;
00010                 |     _Bool  underline;
00010                 |     ModuleTextAignType alignmentH;
00010                 |     ModuleTextAignType alignmentV;
00010                 | } ModuleText;
00010                 | 
00010                 | 
00010                 | 
00010                 | typedef union Data_u
00010                 | {
00010                 |     void *ptr;
00010                 |     ModuleText text;
00010                 |     Image *image;
00010                 | } Data;
00010                 | 
00010                 | typedef struct Module_s
00010                 | {
00010                 |     struct Module_s *parent;
00010                 |     struct Module_s *child[ 50 ];
00010                 |     ModuleType type;
00010                 |     Data data;
00010                 |     int numChildren;
00010                 |     int x, y, w, h, px, py, mx, my, r;
00010                 |     int backgroundColor, foregroundColor, borderColor;
00010                 |     _Bool  visible;
00010                 |     int lastPressed;
00010                 |     int debouncems;
00010                 |     int touchId;
00010                 |     int borderWidth;
00010                 |     void (*touchAnimate)(Display *display, struct Module_s *module);
00010                 |     void (*drawAnimate)(Display *display, struct Module_s *module);
00010                 |     void (*onTouch)(int id, void *arg);
00010                 |     void (*onUpdate)(Display *display, struct Module_s *module, void *arg);
00010                 |     void (*draw)(Display *display, struct Module_s *module);
00010                 | } Module;
00010                 | 
00010                 | void module_animation_switch_page_right(Display *display, Module *module);
00010                 | void module_animation_switch_page_up(Display *display, Module *module);
00010                 | void module_animation_switch_page_down(Display *display, Module *module);
00010                 | 
00010                 | void module_init(Module *module, Module *parent);
00010                 | 
00010                 | void module_update_callback(Module *module, void (*onUpdate)(Display *display, Module *module, void *arg));
00010                 | void module_update_check(Display *display, Module *module, void *arg);
00010                 | 
00010                 | void module_touch_callback(Module *module, void (*onTouch)(int id, void *page), int id);
00010                 | int module_touch_check(Module *root, Display *display, void *arg);
00010                 | 
00010                 | void module_set_visable(Module *module,  _Bool  visible);
00010                 | void module_copy(Module *to, Module *from);
00010                 | 
00010                 | void module_save(Module *module, Display *display);
00010                 | void module_paste(Module *module, Display *display);
00010                 | void module_animate_draw(Module *module, void (*drawAnimate)(Display *display, struct Module_s *module));
00010                 | 
00010                 | void module_set_window(Module *module, void *window);
00010                 | void module_set_line(Module *module, int w);
00010                 | void module_set_line_one(Module *module, int x, int y);
00010                 | void module_set_rectangle(Module *module, int w, int h);
00010                 | void module_set_rectangle_circle(Module *module, int w, int h);
00010                 | void module_set_radius(Module *module, int r);
00010                 | void module_set_image(Module *module, Image *image);
00010                 | 
00010                 | void module_set_text(Module *module, char *text);
00010                 | void module_set_text2(Module *module, char *text);
00010                 | void module_text_underline(Module *module);
00010                 | char *module_text_get(Module *module);
00010                 | void module_text_set(Module *module, char *text);
00010                 | void module_text_fit(Module *module);
00010                 | void module_text_align(Module *module, ModuleTextAignType alignment);
00010                 | void module_text_align_verticle(Module *module, ModuleTextAignType alignment);
00010                 | 
00010                 | void module_text_font(Module *module, int font);
00010                 | int module_text_font_width(Module *module);
00010                 | int module_text_font_height(Module *module);
00010                 | void module_text_update(Module *module, char *text);
00010                 | 
00010                 | void module_set_padding(Module *module, int px, int py);
00010                 | void module_set_margin(Module *module, int mx, int my);
00010                 | void module_set_color(Module *module, int foreground, int background);
00010                 | void module_add_border(Module *module, int color, int width);
00010                 | void module_set_position(Module *module, int x, int y);
00010                 | void module_set_size(Module *module, int w, int h);
00010                 | 
00010                 | void module_align_inner_top(Module *module);
00010                 | void module_align_inner_left(Module *module);
00010                 | void module_align_inner_right(Module *module);
00010                 | void module_align_inner_bottom(Module *module);
00010                 | 
00010                 | void module_align_middle(Module *module);
00010                 | void module_align_center(Module *module);
00010                 | void module_align_center_sector(Module *module, int section, int sections);
00010                 | void module_align_space_even(Module *module, int section, int sections);
00010                 | void module_align_space_even_verticle(Module *module, int section, int sections);
00010                 | void module_align_above(Module *module, Module *ref);
00010                 | void module_align_left(Module *module, Module *ref);
00010                 | void module_align_below(Module *module, Module *ref);
00010                 | void module_align_right(Module *module, Module *ref);
00010                 | 
00010                 | void module_fit_width(Module *module);
00010                 | void module_fit_space_even(Module *module, int sections);
00010                 | void module_fit_space_even_verticle(Module *module, int sections);
00010                 | void module_fit_height(Module *module);
00010                 | void module_fit_below(Module *module, Module *ref);
00010                 | void module_fit_right(Module *module, Module *ref);
00010                 | 
00010                 | void module_draw(Display *display, Module *module);
00010                 | 
00010                 | void module_destroy_children(Module *module);
00010                 | void module_trim(Module *module);
00010                 | void module_text_destroy(ModuleText *text);
00010                 | void module_destroy(Module *root);
00010                 | #line 2 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/RA8876/Module.c"
00010                 | 
00010                 | 
00010                 | 
00010                 | static void module_animation_touch(Display *display, Module *module)
00010                 | {
00010                 |     int moveY = 5;
00010                 |     int speedms = 50;
00010                 |     int bufferPx = 2;
00010                 | 
00010                 |     int x = module->x - module->borderWidth - bufferPx;
00010                 |     int y = module->y - module->borderWidth - bufferPx;
00010                 |     int w = module->w + module->borderWidth * 2 + bufferPx * 2;
00010                 |     int h = module->h + module->borderWidth * 2 + bufferPx * 2;
00010                 | 
00010                 | 
00010                 |     display_bte_memory_copy(display,  0 ,  1024 , x, y,  1024 * 600 * 2 * 3 ,  1024 , x, y, w, h + moveY);
00010                 | 
00010                 | 
00010                 |     int i = 0;
00010                 |     for (i = 1; i < moveY; i++)
00010                 |     {
00010                 |         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y + i, w, h);
00010                 |         display_draw_line(display, x, y + i, x + w, y + i, module->parent->foregroundColor);
00010                 |         _waitms(speedms / moveY);
00010                 |     }
00010                 | 
00010                 | 
00010                 |     for (; i > 0; i--)
00010                 |     {
00010                 |         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y + i, w, h);
00010                 |         display_draw_line(display, x, y + i, x + w, y + i, module->parent->foregroundColor);
00010                 |         _waitms(speedms / moveY);
00010                 |     }
00010                 | 
00010                 | 
00010                 |     display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y, w, h + moveY);
00010                 | }
00010                 | 
00010                 | void module_animation_switch_page_right(Display *display, Module *module)
00010                 | {
00010                 |     int speedms = 100;
00010                 |     int movePx = 100;
00010                 |     for (int i = 0; i <  1024 ; i += movePx)
00010                 |     {
00010                 |         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , i, 0,  0 ,  1024 ,  1024  - movePx, 0, movePx,  600 );
00010                 |         display_bte_memory_copy(display,  0 ,  1024 , movePx, 0,  0 ,  1024 , 0, 0,  1024  - movePx,  600 );
00010                 |     }
00010                 |     display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
00010                 | }
00010                 | 
00010                 | void module_animation_switch_page_up(Display *display, Module *module)
00010                 | {
00010                 |     int speedms = 100;
00010                 |     int movePx = 100;
00010                 | 
00010                 |     for (int i = movePx; i <  600  - movePx; i += movePx)
00010                 |     {
00010                 |         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , 0, i,  0 ,  1024 , 0,  600  - movePx,  1024 , movePx);
00010                 |         display_bte_memory_copy(display,  0 ,  1024 , 0, movePx,  0 ,  1024 , 0, 0,  1024 ,  600  - movePx);
00010                 |     }
00010                 |     display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
00010                 | }
00010                 | 
00010                 | void module_animation_switch_page_down(Display *display, Module *module)
00010                 | {
00010                 |     int speedms = 100;
00010                 |     int movePx = 40;
00010                 |     for (int i = movePx; i <  600  - movePx; i += movePx)
00010                 |     {
00010                 |         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , 0,  600  - i,  0 ,  1024 , 0, 0,  1024 , i);
00010                 | 
00010                 |     }
00010                 |     display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
00010                 | }
00010                 | 
00010                 | void module_init(Module *module, Module *parent)
00010                 | {
00010                 |     module->parent = parent;
00010                 |     module->type = MODULE_ROOT;
00010                 |     module->numChildren = 0;
00010                 |     module->visible =  (1) ;
00010                 | 
00010                 |     module->lastPressed = 0;
00010                 |     module->debouncems = 100;
00010                 |     module->onTouch =  (0) ;
00010                 |     module->onUpdate =  (0) ;
00010                 |     module->draw =  (0) ;
00010                 | 
00010                 |     module->x = 0;
00010                 |     module->y = 0;
00010                 |     module->w = 0;
00010                 |     module->h = 0;
00010                 |     module->px = 0;
00010                 |     module->py = 0;
00010                 |     module->mx = 0;
00010                 |     module->my = 0;
00010                 |     module->r = -1;
00010                 |     module->borderWidth = 0;
00010                 |     module->touchAnimate = module_animation_touch;
00010                 |     module->drawAnimate =  (0) ;
00010                 | 
00010                 |     if (parent !=  (0) )
00010                 |     {
00010                 |         if (parent->numChildren <  50 )
00010                 |         {
00010                 |             parent->numChildren++;
00010                 |             parent->child[parent->numChildren - 1] = module;
00010                 |         }
00010                 |         else
00010                 |         {
00010                 |             __builtin_printf ("Error: Too many children\n");
00010                 |         }
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_update_callback(Module *module, void (*onUpdate)(Display *display, Module *module, void *arg))
00010                 | {
00010                 |     module->onUpdate = onUpdate;
00010                 | }
00010                 | 
00010                 | void module_update_check(Display *display, Module *module, void *arg)
00010                 | {
00010                 |     if (module->type == MODULE_WINDOW)
00010                 |     {
00010                 |         arg = module->data.ptr;
00010                 |     }
00010                 |     for (int i = 0; i < module->numChildren; i++)
00010                 |     {
00010                 |         module_update_check(display, module->child[i], arg);
00010                 |     }
00010                 |     if (module->onUpdate !=  (0) )
00010                 |     {
00010                 |         module->onUpdate(display, module, arg);
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_touch_callback(Module *module, void (*onTouch)(int id, void *page), int id)
00010                 | {
00010                 |     module->onTouch = onTouch;
00010                 |     module->touchId = id;
00010                 | }
00010                 | 
00010                 | int module_touch_check(Module *root, Display *display, void *arg)
00010                 | {
00010                 |     if (display->locationCount == 0 || !root->visible)
00010                 |     {
00010                 |         return 0;
00010                 |     }
00010                 |     if (root->type == MODULE_WINDOW)
00010                 |     {
00010                 |         arg = root->data.ptr;
00010                 |     }
00010                 |     int touchCount = 0;
00010                 |     for (int i = 0; i < root->numChildren; i++)
00010                 |     {
00010                 |         touchCount += module_touch_check(root->child[i], display, arg);
00010                 |     }
00010                 |     if (root->onTouch ==  (0) )
00010                 |     {
00010                 | 
00010                 |     }
00010                 |     if ((( 1024  - display->location[0].x) > root->x) && (( 1024  - display->location[0].x) < (root->x + root->w)))
00010                 |     {
00010                 |         if ((( 600  - display->location[0].y) > root->y) && (( 600  - display->location[0].y) < (root->y + root->h)))
00010                 |         {
00010                 |             if (root->onTouch !=  (0) )
00010                 |             {
00010                 |                 root->lastPressed = _getms();
00010                 |                 root->onTouch(root->touchId, arg);
00010                 |                 touchCount++;
00010                 |                 if (root->touchAnimate !=  (0) )
00010                 |                 {
00010                 |                     root->touchAnimate(display, root);
00010                 |                 }
00010                 |             }
00010                 |         }
00010                 |     }
00010                 |     return touchCount;
00010                 | }
00010                 | 
00010                 | void module_set_visable(Module *module,  _Bool  visible)
00010                 | {
00010                 |     module->visible = visible;
00010                 | }
00010                 | 
00010                 | void module_copy(Module *to, Module *from)
00010                 | {
00010                 |     to->type = from->type;
00010                 |     to->x = from->x;
00010                 |     to->y = from->y;
00010                 |     to->w = from->w;
00010                 |     to->h = from->h;
00010                 |     to->px = from->px;
00010                 |     to->py = from->py;
00010                 |     to->mx = from->mx;
00010                 |     to->my = from->my;
00010                 |     to->r = from->r;
00010                 |     to->backgroundColor = from->backgroundColor;
00010                 |     to->foregroundColor = from->foregroundColor;
00010                 | }
00010                 | 
00010                 | void module_save(Module *module, Display *display)
00010                 | {
00010                 |     display_bte_memory_copy(display,  0 ,  1024 , module->x, module->y,  1024 * 600 * 2 * 2 ,  1024 , module->x, module->y, module->w, module->h);
00010                 | }
00010                 | 
00010                 | void module_paste(Module *module, Display *display)
00010                 | {
00010                 |     display_bte_memory_copy(display,  1024 * 600 * 2 * 2 ,  1024 , module->x, module->y,  0 ,  1024 , module->x, module->y, module->w, module->h);
00010                 | }
00010                 | 
00010                 | void module_animate_draw(Module *module, void (*drawAnimate)(Display *display, struct Module_s *module))
00010                 | {
00010                 |     module->drawAnimate = drawAnimate;
00010                 | }
00010                 | 
00010                 | void module_set_window(Module *module, void *window)
00010                 | {
00010                 |     module->type = MODULE_WINDOW;
00010                 |     module->data.ptr = window;
00010                 | }
00010                 | 
00010                 | void module_set_line(Module *module, int w)
00010                 | {
00010                 |     module_set_line_one(module, w, 0);
00010                 | }
00010                 | 
00010                 | void module_set_line_one(Module *module, int x, int y)
00010                 | {
00010                 |     module->type = MODULE_LINE;
00010                 |     module->w = x;
00010                 |     module->h = y;
00010                 | }
00010                 | 
00010                 | void module_set_rectangle(Module *module, int w, int h)
00010                 | {
00010                 |     module->type = MODULE_RECTANGLE;
00010                 |     module->w = w;
00010                 |     module->h = h;
00010                 | }
00010                 | 
00010                 | void module_set_rectangle_circle(Module *module, int w, int h)
00010                 | {
00010                 |     module->type = MODULE_RECTANGLE_CIRCLE;
00010                 |     module->w = w;
00010                 |     module->h = h;
00010                 | }
00010                 | 
00010                 | void module_set_radius(Module *module, int r)
00010                 | {
00010                 |     module->r = r;
00010                 | }
00010                 | 
00010                 | void module_set_image(Module *module, Image *image)
00010                 | {
00010                 |     module->type = MODULE_IMAGE;
00010                 |     module->data.image = image;
00010                 |     module->w = image->width;
00010                 |     module->h = image->height;
00010                 | }
00010                 | 
00010                 | void module_text_underline(Module *module)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return;
00010                 |     module->data.text.underline =  (1) ;
00010                 | }
00010                 | 
00010                 | 
00010                 | void module_set_text(Module *module, char *text)
00010                 | {
00010                 |     module->type = MODULE_TEXT;
00010                 |     module->data.text.value = text;
00010                 |     module->data.text.font =  1 ;
00010                 |     module->data.text.alignmentH = MODULE_TEXT_ALIGN_INNER_LEFT;
00010                 |     module->data.text.alignmentV = MODULE_TEXT_ALIGN_VTOP;
00010                 |     module->data.text.underline =  (0) ;
00010                 |     module_text_fit(module);
00010                 | }
00010                 | 
00010                 | void module_set_text2(Module *module, char *text)
00010                 | {
00010                 |     module->type = MODULE_TEXT;
00010                 |     module->data.text.value = text;
00010                 |     module->data.text.font =  1 ;
00010                 |     module->data.text.alignmentH = MODULE_TEXT_ALIGN_INNER_LEFT;
00010                 |     module->data.text.alignmentV = MODULE_TEXT_ALIGN_VTOP;
00010                 |     module->data.text.underline =  (0) ;
00010                 | }
00010                 | 
00010                 | void module_text_update(Module *module, char *text)
00010                 | {
00010                 |     module->data.text.value = text;
00010                 | }
00010                 | 
00010                 | char *module_text_get(Module *module)
00010                 | {
00010                 |     if (module->type == MODULE_TEXT)
00010                 |     {
00010                 |         return module->data.text.value;
00010                 |     }
00010                 |     return  (0) ;
00010                 | }
00010                 | 
00010                 | void module_text_set(Module *module, char *text)
00010                 | {
00010                 |     if (module->type == MODULE_TEXT)
00010                 |     {
00010                 |         module->data.text.value = text;
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_text_fit(Module *module)
00010                 | {
00010                 |     switch (module->data.text.font)
00010                 |     {
00010                 |     case  2 :
00010                 |         module->w = strlen(module->data.text.value) * 16;
00010                 |         module->h = 32;
00010                 |         break;
00010                 |     case  1 :
00010                 |         module->w = strlen(module->data.text.value) * 12;
00010                 |         module->h = 24;
00010                 |         break;
00010                 |     case  0 :
00010                 |         module->w = strlen(module->data.text.value) * 8;
00010                 |         module->h = 16;
00010                 |         break;
00010                 |     }
00010                 |     if (module->data.text.underline)
00010                 |     {
00010                 |         module->h += 2;
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_text_align(Module *module, ModuleTextAignType alignment)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return;
00010                 |     module->data.text.alignmentH = alignment;
00010                 | }
00010                 | void module_text_align_verticle(Module *module, ModuleTextAignType alignment)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return;
00010                 |     module->data.text.alignmentV = alignment;
00010                 | }
00010                 | 
00010                 | int module_text_font_width(Module *module)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return 0;
00010                 |     switch (module->data.text.font)
00010                 |     {
00010                 |     case  2 :
00010                 |         return strlen(module->data.text.value) * 16;
00010                 |     case  1 :
00010                 |         return strlen(module->data.text.value) * 12;
00010                 |     case  0 :
00010                 |         return strlen(module->data.text.value) * 8;
00010                 |     }
00010                 |     return 0;
00010                 | }
00010                 | 
00010                 | int module_text_font_height(Module *module)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return 0;
00010                 |     switch (module->data.text.font)
00010                 |     {
00010                 |     case  2 :
00010                 |         return 32;
00010                 |     case  1 :
00010                 |         return 24;
00010                 |     case  0 :
00010                 |         return 16;
00010                 |     }
00010                 |     return 0;
00010                 | }
00010                 | 
00010                 | 
00010                 | void module_text_font(Module *module, int font)
00010                 | {
00010                 |     if (module->type != MODULE_TEXT)
00010                 |         return;
00010                 | 
00010                 |     if (font == -1)
00010                 |     {
00010                 |         if (module->h >= 32)
00010                 |         {
00010                 |             if (module->w > (int)strlen(module->data.text.value) * 16)
00010                 |             {
00010                 |                 module->data.text.font =  2 ;
00010                 |             }
00010                 |             else if (module->w > (int)strlen(module->data.text.value) * 12)
00010                 |             {
00010                 |                 module->data.text.font =  1 ;
00010                 |             }
00010                 |             else
00010                 |             {
00010                 |                 module->data.text.font =  0 ;
00010                 |             }
00010                 |         }
00010                 |         else if (module->parent->h >= 24)
00010                 |         {
00010                 |             if (module->parent->w > (int)strlen(module->data.text.value) * 12)
00010                 |             {
00010                 |                 module->data.text.font =  1 ;
00010                 |             }
00010                 |             else
00010                 |             {
00010                 |                 module->data.text.font =  0 ;
00010                 |             }
00010                 |         }
00010                 |         else
00010                 |         {
00010                 |             module->data.text.font =  0 ;
00010                 |         }
00010                 |     }
00010                 |     else
00010                 |     {
00010                 |         module->data.text.font = font;
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_set_padding(Module *module, int px, int py)
00010                 | {
00010                 |     module->px = px;
00010                 |     module->py = py;
00010                 | }
00010                 | 
00010                 | void module_set_margin(Module *module, int mx, int my)
00010                 | {
00010                 |     module->mx = mx;
00010                 |     module->my = my;
00010                 | }
00010                 | 
00010                 | void module_set_position(Module *module, int x, int y)
00010                 | {
00010                 |     module->x = x;
00010                 |     module->y = y;
00010                 | }
00010                 | 
00010                 | void module_set_size(Module *module, int w, int h)
00010                 | {
00010                 |     module->w = w;
00010                 |     module->h = h;
00010                 | }
00010                 | 
00010                 | void module_set_color(Module *module, int foreground, int background)
00010                 | {
00010                 |     module->foregroundColor = foreground;
00010                 |     module->backgroundColor = background;
00010                 | }
00010                 | 
00010                 | void module_add_border(Module *module, int color, int width)
00010                 | {
00010                 |     module->borderColor = color;
00010                 |     module->borderWidth = width;
00010                 |     module->w += width * 2;
00010                 |     module->h += width * 2;
00010                 | }
00010                 | 
00010                 | void module_align_inner_top(Module *module)
00010                 | {
00010                 |     module->y = module->parent->y + module->parent->py;
00010                 | }
00010                 | 
00010                 | void module_align_inner_left(Module *module)
00010                 | {
00010                 |     module->x = module->parent->x + module->parent->px;
00010                 | }
00010                 | 
00010                 | void module_align_inner_right(Module *module)
00010                 | {
00010                 |     module->x = module->parent->x + module->parent->w - module->w - module->parent->px;
00010                 | }
00010                 | 
00010                 | void module_align_inner_bottom(Module *module)
00010                 | {
00010                 |     module->y = module->parent->y + module->parent->h - module->h - module->parent->py;
00010                 | }
00010                 | 
00010                 | void module_align_middle(Module *module)
00010                 | {
00010                 |     module->y = module->parent->y + module->parent->h / 2 - module->h / 2;
00010                 | }
00010                 | 
00010                 | void module_align_center(Module *module)
00010                 | {
00010                 |     module_align_center_sector(module, 1, 2);
00010                 | }
00010                 | 
00010                 | void module_align_center_sector(Module *module, int section, int sections)
00010                 | {
00010                 |     module->x = module->parent->x + module->parent->px + section * (module->parent->w - module->parent->px * 2) / sections - module->w / 2;
00010                 | }
00010                 | 
00010                 | void module_align_space_even(Module *module, int section, int sections)
00010                 | {
00010                 |     module->x = module->parent->x + section * (module->parent->w - sections * module->w) / (sections + 1) + (section - 1) * module->w;
00010                 | }
00010                 | 
00010                 | void module_align_space_even_verticle(Module *module, int section, int sections)
00010                 | {
00010                 |     module->y = module->parent->y + section * (module->parent->h - sections * module->h) / (sections + 1) + (section - 1) * module->h;
00010                 | }
00010                 | 
00010                 | void module_align_above(Module *module, Module *ref)
00010                 | {
00010                 |     module->y = ref->y - module->h - ref->my;
00010                 | }
00010                 | 
00010                 | void module_align_left(Module *module, Module *ref)
00010                 | {
00010                 |     module->x = ref->x - module->w - ref->mx;
00010                 | }
00010                 | 
00010                 | void module_align_below(Module *module, Module *ref)
00010                 | {
00010                 |     module->y = ref->y + ref->h + ref->my;
00010                 | }
00010                 | 
00010                 | void module_align_right(Module *module, Module *ref)
00010                 | {
00010                 |     module->x = ref->x + ref->w + ref->mx;
00010                 | }
00010                 | 
00010                 | void module_fit_space_even(Module *module, int sections)
00010                 | {
00010                 |     module->w = (module->parent->w - 2 * module->parent->mx - (sections - 0) * module->mx) / sections;
00010                 | }
00010                 | 
00010                 | void module_fit_space_even_verticle(Module *module, int sections)
00010                 | {
00010                 |     module->h = (module->parent->h - 2 * module->parent->my - (sections - 0) * module->my) / sections;
00010                 | }
00010                 | 
00010                 | void module_fit_height(Module *module)
00010                 | {
00010                 |     module->h = module->parent->h - module->parent->py - module->parent->py;
00010                 | }
00010                 | 
00010                 | void module_fit_below(Module *module, Module *ref)
00010                 | {
00010                 |     module_align_below(module, ref);
00010                 |     module->h = module->parent->h - (ref->y - module->parent->y) - ref->h - ref->my - module->parent->py;
00010                 | }
00010                 | 
00010                 | void module_fit_width(Module *module)
00010                 | {
00010                 |     module->w = module->parent->w - module->parent->px - module->parent->px;
00010                 | }
00010                 | 
00010                 | void module_fit_right(Module *module, Module *ref)
00010                 | {
00010                 |     module->w = module->parent->w - (ref->x - module->parent->x) - ref->w - ref->mx - module->parent->px;
00010                 | }
00010                 | 
00010                 | static void draw_border_rectangle(Display *display, Module *module, int width)
00010                 | {
00010                 |     if (module->borderWidth == 0)
00010                 |         return;
00010                 |     display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->borderColor);
00010                 |     display_draw_square_fill(display, module->x + width, module->y + width, module->x + module->w - width, module->y + module->h - width, module->foregroundColor);
00010                 | }
00010                 | 
00010                 | static int get_radius(Module *module)
00010                 | {
00010                 |     if (module->r == -1)
00010                 |         return  __builtin_round(module->w * 0.07) ;
00010                 |     else
00010                 |         return module->r;
00010                 | }
00010                 | 
00010                 | static  _Bool  draw_border_rectangle_rounded(Display *display, Module *module, int innerColor, int radius)
00010                 | {
00010                 |     if (module->borderWidth == 0)
00010                 |         return  (0) ;
00010                 |     int width = module->borderWidth;
00010                 |     display_draw_circle_square_fill(display, module->x - width, module->y - width, module->x + module->w + width, module->y + module->h + width, radius, radius, module->borderColor);
00010                 |     display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, innerColor);
00010                 |     return  (1) ;
00010                 | }
00010                 | 
00010                 | void module_draw(Display *display, Module *module)
00010                 | {
00010                 |     int charH;
00010                 |     int radius;
00010                 |     if (!module->visible)
00010                 |     {
00010                 |         return;
00010                 |     }
00010                 |     if (module->drawAnimate !=  (0) )
00010                 |     {
00010                 |         display_canvas_image_start_address(display,  1024 * 600 * 2 * 3 );
00010                 |     }
00010                 |     switch (module->type)
00010                 |     {
00010                 |     case MODULE_TEXT:
00010                 |     {
00010                 |         int x = 0;
00010                 |         int y = module->y;
00010                 |         int width = module_text_font_width(module);
00010                 |         int height = module_text_font_height(module);
00010                 |         switch (module->data.text.alignmentH)
00010                 |         {
00010                 |         case MODULE_TEXT_ALIGN_INNER_LEFT:
00010                 |             x = module->x + module->px;
00010                 |             break;
00010                 |         case MODULE_TEXT_ALIGN_INNER_CENTER:
00010                 |             x = module->x + (module->w - width) / 2;
00010                 |             break;
00010                 |         case MODULE_TEXT_ALIGN_INNER_RIGHT:
00010                 |             x = module->x + module->w - width - module->px;
00010                 |             break;
00010                 |         }
00010                 | 
00010                 |         switch (module->data.text.alignmentV)
00010                 |         {
00010                 |         case MODULE_TEXT_ALIGN_VTOP:
00010                 |             y = module->y + module->py;
00010                 |             break;
00010                 |         case MODULE_TEXT_ALIGN_VCENTER:
00010                 |             y = module->y + (module->h - height) / 2;
00010                 |             break;
00010                 |         case MODULE_TEXT_ALIGN_VBOTTOM:
00010                 |             y = module->y + module->h - height - module->py;
00010                 |             break;
00010                 |         }
00010                 | 
00010                 |         display_set_text_parameter1(display,  0 , module->data.text.font,  0 );
00010                 |         display_set_text_parameter2(display,  0 ,  0 ,  0 ,  0 );
00010                 | 
00010                 | 
00010                 |         if (!draw_border_rectangle_rounded(display, module, module->backgroundColor, get_radius(module)))
00010                 |         {
00010                 |             display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->backgroundColor);
00010                 |         }
00010                 |         display_text_color(display, module->foregroundColor, module->backgroundColor);
00010                 |         display_draw_string(display, x, y, module->data.text.value);
00010                 |         if (module->data.text.underline)
00010                 |             display_draw_line(display, x, y + height + 1, x + width, y + height + 1, module->foregroundColor);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_IMAGE:
00010                 |     {
00010                 |         display_bte_memory_copy_image(display, module->data.image, module->x, module->y);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_LINE:
00010                 |     {
00010                 |         display_draw_line(display, module->x, module->y, module->x + module->w, module->y, module->foregroundColor);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_RECTANGLE:
00010                 |     {
00010                 |         display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->foregroundColor);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_RECTANGLE_CIRCLE:
00010                 |     {
00010                 |         radius = get_radius(module);
00010                 |         draw_border_rectangle_rounded(display, module, module->foregroundColor, radius);
00010                 |         display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, module->foregroundColor);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_GRAPH:
00010                 |     {
00010                 |         module->draw(display, module);
00010                 |         break;
00010                 |     }
00010                 |     case MODULE_KEYBOARD:
00010                 |     {
00010                 |         module->draw(display, module);
00010                 |         break;
00010                 |     }
00010                 |     }
00010                 | 
00010                 |     for (int i = 0; i < module->numChildren; i++)
00010                 |     {
00010                 |         module_draw(display, module->child[i]);
00010                 |     }
00010                 |     if (module->drawAnimate !=  (0) )
00010                 |     {
00010                 |         module->drawAnimate(display, module);
00010                 |         display_canvas_image_start_address(display,  0 );
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_destroy_children(Module *module)
00010                 | {
00010                 |     for (int i = 0; i < module->numChildren; i++)
00010                 |     {
00010                 |         Module *toDestroy = module->child[i];
00010                 |         module_trim(toDestroy);
00010                 |         module_destroy(toDestroy);
00010                 |     }
00010                 |     module->numChildren = 0;
00010                 | }
00010                 | 
00010                 | void module_trim(Module *module)
00010                 | {
00010                 | 
00010                 |     if (module->parent !=  (0) )
00010                 |     {
00010                 |         for (int i = 0; i < module->parent->numChildren; i++)
00010                 |         {
00010                 |             if (module->parent->child[i] == module)
00010                 |             {
00010                 |                 for (int j = i; j < module->parent->numChildren - 1; j++)
00010                 |                 {
00010                 |                     module->parent->child[j] = module->parent->child[j + 1];
00010                 |                 }
00010                 |                 break;
00010                 |             }
00010                 |         }
00010                 |         module->parent->numChildren--;
00010                 |     }
00010                 | }
00010                 | 
00010                 | void module_destroy(Module *root)
00010                 | {
00010                 | 
00010                 |     int children = root->numChildren;
00010                 |     for (int i = 0; i < children; i++)
00010                 |     {
00010                 |         module_destroy(root->child[i]);
00010                 |     }
00010                 | 
00010                 | 
00010                 |     switch (root->type)
00010                 |     {
00010                 |     case MODULE_TEXT:
00010                 |     {
00010                 |         break;
00010                 |     }
00010                 |     default:
00010                 |         break;
00010                 |     }
00010                 | 
00010                 |     free(root);
00010                 | }
00010                 | 
