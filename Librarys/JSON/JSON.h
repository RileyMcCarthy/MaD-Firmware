#ifndef JSON_H
#define JSON_H

#include "simpletools.h"
#include <stddef.h>
#include <stdbool.h>
#include "string.h"
#include "Error.h"
#include <stdio.h>
#include <stdlib.h>
#include "tiny-json.h"

#define MACHINE_CONFIGURATION_FIELD_COUNT 13
typedef struct MachineConfiguration_s
{
    char *motorType;                  // Motor used for the machine (model)
    float maxMotorTorque;             // Maximum torque of the motor (Nm)
    float maxMotorRPM;                // Maximum RPM of the motor (RPM)
    float gearDiameter;               // Diameter of the gear (mm)
    float gearPitch;                  // Pitch of the gear (mm)
    float systemIntertia;             // Total inertia of the system (kgm2)
    float staticTorque;               // Static torque of the motor (Nm)
    float load;                       // Estimated load of the system (N)
    char *positionEncoderType;        // Encoder used for the position measurement (encoder or distance scale)
    float positionEncoderScaleFactor; // steps per mm of position encoder (step/mm)
    char *forceGauge;                 // Force gauge used (model)
    float forceGaugeScaleFactor;      // Force scale factor (mN/step)
    int forceGaugeZeroFactor;         // Force offset (steps)
} MachineConfiguration;

#define MACHINE_PERFORMANCE_FIELD_COUNT 7
typedef struct MachinePerformance_s
{
    float minPosition;             // Minimum position of the motor (mm)
    float maxPosition;             // Maximum position of the motor (mm)
    float maxVelocity;             // Maximum velocity of the motor (mm/s)
    float maxAcceleration;         // Maximum acceleration of the motor (mm/s2)
    float maxForceTensile;         // Maximum force tensile of the motor (N)
    float maxForceCompression;     // Maximum force compression of the motor (N)
    float forceGaugeNeutralOffset; // Force gauge neutral offset (N)
} MachinePerformance;

#define MACHINE_PROFILE_FIELD_COUNT MACHINE_PERFORMANCE_FIELD_COUNT + MACHINE_CONFIGURATION_FIELD_COUNT + 2
typedef struct MachineProfile_s
{
    char *name; // Name of the machine profile
    int number; // Number of the machine profile
    MachineConfiguration *configuration;
    MachinePerformance *performance;

} MachineProfile;

#define MOTION_QUARTET_FIELD_COUNT 7
typedef struct MotionQuartet_s
{
    char *name;         // Name of the motion quartet
    char *type;         // Type of the motion quartet (distance or force)
    float distance;     // Distance of the motion quartet (mm)
    float velocity;     // Velocity of the motion quartet (mm/s)
    float acceleration; // Acceleration of the motion quartet (mm/s2)
    float jerk;         // Jerk of the motion quartet (mm/s3)
    float dwell;        // Dwell of the motion quartet (ms)
} MotionQuartet;

#define MOTION_SET_FIELD_COUNT 6
typedef struct MotionSet_s
{
    char *name;       // Motion set name, user defined
    int number;       // Motion set number, autogenerated as incrment in file system
    char *type;       // descriptive purpose of the set (ie. precondition, test, etc)
    int executions;   // Number of times to execute the motion set
    int quartetCount; // Number of motion quartets in the set
    char **quartets;  // List of filenames of quartets to execute
} MotionSet;

#define MOTION_PROFILE_FIELD_COUNT 4
typedef struct MotionProfile_s
{
    char *name;       // Name of the motion profile
    int number;       // Number of the motion profile (autogenerated)
    int setCount;     // Number of motion sets in the profile
    MotionSet **sets; // Array of motion set pointers

} MotionProfile;

#define SAMPLE_PROFILE_FIELD_COUNT 9
typedef struct SampleProfile_s
{
    char *name;                // Name of the sample profile
    int number;                // Number of the sample profile
    float length;              // Length of the sample profile (mm)
    float stretchMax;          // Maximum stretch of the sample profile (% of length)
    float maxVelocity;         // Maximum velocity of the sample profile (mm/s)
    float maxAcceleration;     // Maximum acceleration of the sample profile (mm/s2)
    float maxJerk;             // Maximum jerk of the sample profile (mm/s3)
    float maxForceTensile;     // Maximum force tensile of the sample profile (N)
    float maxForceCompression; // Maximum force compression of the sample profile (N)

} SampleProfile;

#define TEST_PROFILE_FIELD_COUNT 4
typedef struct TestProfile_s
{
    char *name;                   // Descriptive test name
    char *machineProfileFileName; // Name of the machine profile file
    char *sampleProfileFileName;  // Name of the sample profile file name
    int sampleSerialNumber;
} TestProfile;

MachineProfile *get_machine_profile();
MotionProfile *get_motion_profile();
SampleProfile *get_sample_profile();
TestProfile *get_test_profile();
MotionQuartet *get_motion_quartet();

Error machine_profile_to_json(MachineProfile *settings, FILE *file);
Error motion_profile_to_json(MotionProfile *motion, FILE *file);
Error sample_profile_to_json(SampleProfile *sample, FILE *file);
Error test_profile_to_json(TestProfile *test, FILE *file);
Error motion_set_to_json(MotionSet *set, FILE *file);
Error motion_quartet_to_json(MotionQuartet *quartet, FILE *file);

MachineProfile *json_to_machine_profile(FILE *file);
MotionProfile *json_to_motion_profile(FILE *file);
SampleProfile *json_to_sample_profile(FILE *file);
TestProfile *json_to_test_profile(FILE *file);
MotionQuartet *json_to_motion_quartet(FILE *file);

void json_print_machine_profile(MachineProfile *profile);

void free_machine_profile(MachineProfile *settings);
void free_sample_profile(SampleProfile *sample);
void free_test_profile(TestProfile *test);
void free_motion_quartet(MotionQuartet *quartet);
#endif
