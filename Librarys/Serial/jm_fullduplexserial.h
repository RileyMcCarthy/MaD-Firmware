// automatically generated by spin2cpp v5.9.14 on Sun Aug 07 12:49:50 2022
// command line: C:\spin2cpp\spin2cpp.exe --p2 -o Librarys/Serial/jm_fullduplexserial Librarys/Serial/jm_fullduplexserial.spin2 

#ifndef jm_fullduplexserial_Class_Defined__
#define jm_fullduplexserial_Class_Defined__

#include <stdint.h>
#include "jm_nstr.h"

#ifndef Tuple2__
  struct tuple2__ { int32_t v0;  int32_t v1; };
# define Tuple2__ struct tuple2__
  static Tuple2__ MakeTuple2__(int32_t x0,int32_t x1) {
    Tuple2__ t;
    t.v0 = x0;
    t.v1 = x1;
    return t;
  }
#endif

#ifndef Tuple3__
  struct tuple3__ { int32_t v0;  int32_t v1;  int32_t v2; };
# define Tuple3__ struct tuple3__
  static Tuple3__ MakeTuple3__(int32_t x0,int32_t x1,int32_t x2) {
    Tuple3__ t;
    t.v0 = x0;
    t.v1 = x1;
    t.v2 = x2;
    return t;
  }
#endif

class jm_fullduplexserial {
public:
/*  fixed io pins  */
/*  I  */
// programming / debug
  static const int PGM_RX = 63;
/*  O  */
  static const int PGM_TX = 62;
/*  O  */
// serial flash
  static const int SF_CS = 61;
/*  O  */
  static const int SF_SCK = 60;
/*  O  */
  static const int SF_SDO = 59;
/*  I  */
  static const int SF_SDI = 58;
/*  pst / formatting  */
  static const int HOME = 1;
  static const int CRSR_XY = 2;
  static const int CRSR_LF = 3;
  static const int CRSR_RT = 4;
  static const int CRSR_UP = 5;
  static const int CRSR_DN = 6;
  static const int BELL = 7;
  static const int BKSP = 8;
  static const int TAB = 9;
  static const int LF = 10;
  static const int CLR_EOL = 11;
  static const int VTAB = 11;
  static const int CLR_DN = 12;
  static const int FF = 12;
  static const int CR = 13;
  static const int CRSR_X = 14;
  static const int CRSR_Y = 15;
  static const int CLS = 16;
  static const int EOF = (-1);
  static const int BUF_SIZE = 256;
  static char dat[];
  static void 	null(void);
  int32_t 	tstart(int32_t baud);
  int32_t 	start(int32_t rxpin, int32_t txpin, int32_t mode, int32_t baud);
  void 	stop(void);
  int32_t 	rx(void);
  int32_t 	rxcheck(void);
  int32_t 	rxtime(int32_t ms);
  int32_t 	rxtix(int32_t tix);
  int32_t 	available(void);
  void 	rxflush(void);
  void 	tx(int32_t b);
  void 	txn(int32_t b, int32_t n);
  void 	str(int32_t p_str);
  void 	substr(int32_t p_str, int32_t len);
  void 	padstr(int32_t p_str, int32_t width, int32_t padchar);
  void 	txflush(void);
  void 	fstr0(int32_t p_str);
  void 	fstr1(int32_t p_str, int32_t arg1);
  void 	fstr2(int32_t p_str, int32_t arg1, int32_t arg2);
  void 	fstr3(int32_t p_str, int32_t arg1, int32_t arg2, int32_t arg3);
  void 	fstr4(int32_t p_str, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);
  void 	fstr5(int32_t p_str, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5);
  void 	fstr6(int32_t p_str, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6);
  void 	format(int32_t p_str, int32_t p_args);
  static int32_t 	lower(int32_t c);
  void 	fmt_number(int32_t value, int32_t base, int32_t digits, int32_t width, int32_t pad);
  void 	dec(int32_t value);
  void 	fxdec(int32_t value, int32_t digits);
  void 	jdec(int32_t value, int32_t digits, int32_t width, int32_t pad);
  void 	dpdec(int32_t value, int32_t dp);
  void 	jdpdec(int32_t value, int32_t dp, int32_t width, int32_t pad);
  void 	hex(int32_t value);
  void 	fxhex(int32_t value, int32_t digits);
  void 	jhex(int32_t value, int32_t digits, int32_t width, int32_t pad);
  void 	oct(int32_t value);
  void 	fxoct(int32_t value, int32_t digits);
  void 	joct(int32_t value, int32_t digits, int32_t width, int32_t pad);
  void 	qrt(int32_t value);
  void 	fxqrt(int32_t value, int32_t digits);
  void 	jqrt(int32_t value, int32_t digits, int32_t width, int32_t pad);
  void 	bin(int32_t value);
  void 	fxbin(int32_t value, int32_t digits);
  void 	jbin(int32_t value, int32_t digits, int32_t width, int32_t pad);
private:
  jm_nstr 	nstr;
// cog flag/id
  int32_t 	cog;
// rx smart pin
  int32_t 	rxp;
// tx smart pin
  int32_t 	txp;
// hub address of rxbuf
  int32_t 	rxhub;
// hub address of txbuf
  int32_t 	txhub;
// rx head index
  int32_t 	rxhead;
// rx tail index
  int32_t 	rxtail;
// tx head index
  int32_t 	txhead;
// tx tail index
  int32_t 	txtail;
// ticks to transmit one byte
  int32_t 	txdelay;
// buffers
  char 	rxbuf[BUF_SIZE];
  char 	txbuf[BUF_SIZE];
// padded strings
  char 	pbuf[80];
  static Tuple2__ 	get_hex(int32_t p_str);
  static Tuple3__ 	get_nargs(int32_t p_str);
};

#endif
