00000                 | 
00000                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Main/main.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 34 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 19 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 48 1C A1 FD | 	call	#_main
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 74 62 FD | 	cogid	arg01
00614 084 03 74 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 93 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 35 06 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 75 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D 34 62 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c 2B 30 61 FD |     pop	fcache_tmpb_
00638 08d F6 31 01 F1 |     add	fcache_tmpb_, pa
0063c 08e 2A 30 61 FD |     push	fcache_tmpb_
00640 08f F6 31 81 F1 |     sub	fcache_tmpb_, pa
00644 090 02 EC 47 F0 |     shr	pa, #2
00648 091 00 EC 8F F9 |     altd	pa
0064c 092 97 00 00 F6 |     mov	 0-0, ret_instr_
00650 093 01 EC 87 F1 |     sub	pa, #1
00654 094 28 EC 63 FD |     setq	pa
00658 095 98 00 00 FB |     rdlong	$0, fcache_tmpb_
0065c 096 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00660 097             | ret_instr_
00660 097 2D 00 64 FD |     ret
00664 098             | fcache_tmpb_
00664 098 00 00 00 00 |     long 0
00668 099             | builtin_bytefill_
00668 099 01 78 56 F0 |         shr	arg03, #1 wc
0066c 09a 3A 77 42 CC |  if_c   wrbyte	arg02, arg01
00670 09b 01 74 06 C1 |  if_c   add	arg01, #1
00674 09c 00 76 FE F9 |         movbyts	arg02, #0
00678 09d             | builtin_wordfill_
00678 09d 01 78 56 F0 |         shr	arg03, #1 wc
0067c 09e 3A 77 52 CC |  if_c   wrword	arg02, arg01
00680 09f 02 74 06 C1 |  if_c   add	arg01, #2
00684 0a0 3B 77 2A F9 |         setword	arg02, arg02, #1
00688 0a1             | builtin_longfill_
00688 0a1 3A 01 88 FC |         wrfast	#0,arg01
0068c 0a2 00 78 0E F2 |         cmp	arg03, #0 wz
00690 0a3 3C 03 D8 5C |  if_nz  rep	#1, arg03
00694 0a4 17 76 62 5D |  if_nz  wflong	arg02
00698 0a5 2D 00 64 FD |         ret
0069c 0a6             | COUNT_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | RETADDR_
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | fp
006a4 0a8 00 00 00 00 |     long 0
006a8 0a9             | pushregs_
006a8 0a9 2B EC 63 FD |     pop  pa
006ac 0aa 2B 4E 61 FD |     pop  RETADDR_
006b0 0ab 03 4C 95 FB |     tjz  COUNT_, #pushregs_done_
006b4 0ac FF 4D 8D F9 |     altd  COUNT_, #511
006b8 0ad 28 00 64 FD |     setq #0-0
006bc 0ae 61 8D 66 FC |     wrlong local01, ptra++
006c0 0af             | pushregs_done_
006c0 0af 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c4 0b0 61 4D 65 FC |     wrlong COUNT_, ptra++
006c8 0b1 F8 51 01 F6 |     mov    fp, ptra
006cc 0b2 2C EC 63 FD |     jmp  pa
006d0 0b3             |  popregs_
006d0 0b3 2B EC 63 FD |     pop    pa
006d4 0b4 28 04 64 FD |     setq   #2
006d8 0b5 5F 4D 05 FB |     rdlong COUNT_, --ptra
006dc 0b6 02 4C 75 FB |     djf    COUNT_, #popregs__ret
006e0 0b7 28 4C 61 FD |     setq   COUNT_
006e4 0b8 5F 8D 06 FB |     rdlong local01, --ptra
006e8 0b9             | popregs__ret
006e8 0b9 2A 4E 61 FD |     push   RETADDR_
006ec 0ba 2C EC 63 FD |     jmp    pa
006f0 0bb             | 
006f0 0bb             | divide_
006f0 0bb 71 E3 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f4 0bc 6C 90 61 FD |        wrc     itmp2_                         'store sign of y
006f8 0bd 70 E1 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006fc 0be 71 E1 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
00700 0bf 01 90 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00704 0c0 18 E2 62 FD |        getqx   muldivb_                       'get quotient
00708 0c1 19 E0 62 FD |        getqy   muldiva_                       'get remainder
0070c 0c2 70 E1 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
00710 0c3 00 90 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00714 0c4 71 E3 82 06 |  _ret_ negc    muldivb_,muldivb_     
00718 0c5             | 
00718 0c5             | __heap_ptr
00718 0c5 34 69 05 00 | 	long	@__heap_base
0071c 0c6             | entryptr__
0071c 0c6 04 04 00 00 | 	long	@entry
00720 0c7             | itmp1_
00720 0c7 00 00 00 00 | 	long	0
00724 0c8             | itmp2_
00724 0c8 00 00 00 00 | 	long	0
00728 0c9             | objptr
00728 0c9 3C E9 05 00 | 	long	@objmem
0072c 0ca             | ptr____default_flush_
0072c 0ca 8C 14 00 00 | 	long	@___default_flush
00730 0cb             | ptr____default_getc_
00730 0cb FC 12 00 00 | 	long	@___default_getc
00734 0cc             | ptr____default_putc_
00734 0cc 78 13 00 00 | 	long	@___default_putc
00738 0cd             | ptr____default_putc_terminal_
00738 0cd 00 14 00 00 | 	long	@___default_putc_terminal
0073c 0ce             | ptr___struct___anon_9b5668f900000005_sputc_
0073c 0ce F0 58 02 00 | 	long	@__struct___anon_9b5668f900000005_sputc
00740 0cf             | ptr___struct___fmtfile_putchar_
00740 0cf B0 58 02 00 | 	long	@__struct___fmtfile_putchar
00744 0d0             | ptr___struct__s_vfs_file_t_putchar_
00744 0d0 B8 96 02 00 | 	long	@__struct__s_vfs_file_t_putchar
00748 0d1             | ptr___system__dat__
00748 0d1 00 64 05 00 | 	long	@__system__dat_
0074c 0d2             | ptr__button_callback_1934_
0074c 0d2 18 A9 01 00 | 	long	@_button_callback_1934
00750 0d3             | ptr__button_cancel_0914_
00750 0d3 04 78 01 00 | 	long	@_button_cancel_0914
00754 0d4             | ptr__button_delete_0912_
00754 0d4 EC 76 01 00 | 	long	@_button_delete_0912
00758 0d5             | ptr__button_done_0923_
00758 0d5 48 79 01 00 | 	long	@_button_done_0923
0075c 0d6             | ptr__button_dotdot_0917_
0075c 0d6 40 78 01 00 | 	long	@_button_dotdot_0917
00760 0d7             | ptr__button_files_0927_
00760 0d7 54 79 01 00 | 	long	@_button_files_0927
00764 0d8             | ptr__button_nav_0878_
00764 0d8 94 73 01 00 | 	long	@_button_nav_0878
00768 0d9             | ptr__button_navigation_0785_
00768 0d9 B4 5A 01 00 | 	long	@_button_navigation_0785
0076c 0da             | ptr__button_navigation_1002_
0076c 0da 58 7A 01 00 | 	long	@_button_navigation_1002
00770 0db             | ptr__button_new_1017_
00770 0db 98 7D 01 00 | 	long	@_button_new_1017
00774 0dc             | ptr__button_next_0921_
00774 0dc 24 79 01 00 | 	long	@_button_next_0921
00778 0dd             | ptr__button_open_0881_
00778 0dd A0 73 01 00 | 	long	@_button_open_0881
0077c 0de             | ptr__button_open_1009_
0077c 0de B4 7A 01 00 | 	long	@_button_open_1009
00780 0df             | ptr__button_prev_0919_
00780 0df DC 78 01 00 | 	long	@_button_prev_0919
00784 0e0             | ptr__button_quartet_1041_
00784 0e0 10 82 01 00 | 	long	@_button_quartet_1041
00788 0e1             | ptr__button_quartet_parameters_1046_
00788 0e1 60 84 01 00 | 	long	@_button_quartet_parameters_1046
0078c 0e2             | ptr__button_run_0876_
0078c 0e2 7C 73 01 00 | 	long	@_button_run_0876
00790 0e3             | ptr__button_save_1032_
00790 0e3 3C 80 01 00 | 	long	@_button_save_1032
00794 0e4             | ptr__button_set_1056_
00794 0e4 7C 85 01 00 | 	long	@_button_set_1056
00798 0e5             | ptr__button_set_add_
00798 0e5 04 87 01 00 | 	long	@_button_set_add
0079c 0e6             | ptr__button_set_function_2006_
0079c 0e6 6C B0 01 00 | 	long	@_button_set_function_2006
007a0 0e7             | ptr__button_set_remove_
007a0 0e7 94 87 01 00 | 	long	@_button_set_remove
007a4 0e8             | ptr__check_buttons_0743_
007a4 0e8 74 55 01 00 | 	long	@_check_buttons_0743
007a8 0e9             | ptr__check_buttons_2079_
007a8 0e9 EC BD 01 00 | 	long	@_check_buttons_2079
007ac 0ea             | ptr__control_cog_0848_
007ac 0ea 88 5C 01 00 | 	long	@_control_cog_0848
007b0 0eb             | ptr__dat__
007b0 0eb 7C B1 02 00 | 	long	@_dat_
007b4 0ec             | ptr__fatfs_cc___default_flush_
007b4 0ec 48 32 02 00 | 	long	@_fatfs_cc___default_flush
007b8 0ed             | ptr__fatfs_cc___default_getc_
007b8 0ed B8 30 02 00 | 	long	@_fatfs_cc___default_getc
007bc 0ee             | ptr__fatfs_cc___default_putc_
007bc 0ee 34 31 02 00 | 	long	@_fatfs_cc___default_putc
007c0 0ef             | ptr__fatfs_cc___default_putc_terminal_
007c0 0ef BC 31 02 00 | 	long	@_fatfs_cc___default_putc_terminal
007c4 0f0             | ptr__fatfs_cc_dat__
007c4 0f0 14 5F 05 00 | 	long	@_fatfs_cc_dat_
007c8 0f1             | ptr__fatfs_cc_v_close_
007c8 0f1 B0 3C 02 00 | 	long	@_fatfs_cc_v_close
007cc 0f2             | ptr__fatfs_cc_v_closedir_
007cc 0f2 68 3D 02 00 | 	long	@_fatfs_cc_v_closedir
007d0 0f3             | ptr__fatfs_cc_v_creat_
007d0 0f3 14 3C 02 00 | 	long	@_fatfs_cc_v_creat
007d4 0f4             | ptr__fatfs_cc_v_deinit_
007d4 0f4 8C 44 02 00 | 	long	@_fatfs_cc_v_deinit
007d8 0f5             | ptr__fatfs_cc_v_init_
007d8 0f5 84 44 02 00 | 	long	@_fatfs_cc_v_init
007dc 0f6             | ptr__fatfs_cc_v_ioctl_
007dc 0f6 38 43 02 00 | 	long	@_fatfs_cc_v_ioctl
007e0 0f7             | ptr__fatfs_cc_v_lseek_
007e0 0f7 B0 42 02 00 | 	long	@_fatfs_cc_v_lseek
007e4 0f8             | ptr__fatfs_cc_v_mkdir_
007e4 0f8 4C 43 02 00 | 	long	@_fatfs_cc_v_mkdir
007e8 0f9             | ptr__fatfs_cc_v_open_
007e8 0f9 8C 43 02 00 | 	long	@_fatfs_cc_v_open
007ec 0fa             | ptr__fatfs_cc_v_opendir_
007ec 0fa F4 3C 02 00 | 	long	@_fatfs_cc_v_opendir
007f0 0fb             | ptr__fatfs_cc_v_read_
007f0 0fb BC 40 02 00 | 	long	@_fatfs_cc_v_read
007f4 0fc             | ptr__fatfs_cc_v_readdir_
007f4 0fc A8 3D 02 00 | 	long	@_fatfs_cc_v_readdir
007f8 0fd             | ptr__fatfs_cc_v_remove_
007f8 0fd 5C 43 02 00 | 	long	@_fatfs_cc_v_remove
007fc 0fe             | ptr__fatfs_cc_v_rename_
007fc 0fe 7C 43 02 00 | 	long	@_fatfs_cc_v_rename
00800 0ff             | ptr__fatfs_cc_v_rmdir_
00800 0ff 6C 43 02 00 | 	long	@_fatfs_cc_v_rmdir
00804 100             | ptr__fatfs_cc_v_stat_
00804 100 CC 3E 02 00 | 	long	@_fatfs_cc_v_stat
00808 101             | ptr__fatfs_cc_v_write_
00808 101 D0 41 02 00 | 	long	@_fatfs_cc_v_write
0080c 102             | ptr__jm_fullduplexserial_spin2_dat__
0080c 102 A0 5E 05 00 | 	long	@_jm_fullduplexserial_spin2_dat_
00810 103             | ptr__key_pressed_1790_
00810 103 9C A3 01 00 | 	long	@_key_pressed_1790
00814 104             | ptr__module_animation_switch_page_down_
00814 104 A4 8A 00 00 | 	long	@_module_animation_switch_page_down
00818 105             | ptr__module_animation_switch_page_up_
00818 105 DC 89 00 00 | 	long	@_module_animation_switch_page_up
0081c 106             | ptr__module_animation_touch_1725_
0081c 106 50 A0 01 00 | 	long	@_module_animation_touch_1725
00820 107             | ptr__module_graph_draw_2071_
00820 107 E0 BB 01 00 | 	long	@_module_graph_draw_2071
00824 108             | ptr__monitor_cog_0769_
00824 108 88 55 01 00 | 	long	@_monitor_cog_0769
00828 109             | ptr__poolAlloc_
00828 109 54 9F 01 00 | 	long	@_poolAlloc
0082c 10a             | ptr__poolInit_
0082c 10a 40 9F 01 00 | 	long	@_poolInit
00830 10b             | ptr__sigmoid_
00830 10b B0 FE 00 00 | 	long	@_sigmoid
00834 10c             | ptr__update_condition_1946_
00834 10c 38 AC 01 00 | 	long	@_update_condition_1946
00838 10d             | ptr__update_continuous_2025_
00838 10d 6C B6 01 00 | 	long	@_update_continuous_2025
0083c 10e             | ptr__update_force_2045_
0083c 10e C8 BA 01 00 | 	long	@_update_force_2045
00840 10f             | ptr__update_header_2010_
00840 10f 84 B0 01 00 | 	long	@_update_header_2010
00844 110             | ptr__update_home_2035_
00844 110 98 B8 01 00 | 	long	@_update_home_2035
00848 111             | ptr__update_incremental_2020_
00848 111 58 B5 01 00 | 	long	@_update_incremental_2020
0084c 112             | ptr__update_length_2040_
0084c 112 B0 B9 01 00 | 	long	@_update_length_2040
00850 113             | ptr__update_mode_1952_
00850 113 D0 AE 01 00 | 	long	@_update_mode_1952
00854 114             | ptr__update_off_2015_
00854 114 5C B4 01 00 | 	long	@_update_off_2015
00858 115             | ptr__update_positional_2030_
00858 115 80 B7 01 00 | 	long	@_update_positional_2030
0085c 116             | ptr__update_profileName_0884_
0085c 116 D0 74 01 00 | 	long	@_update_profileName_0884
00860 117             | ptr__update_profileNumber_0887_
00860 117 B4 75 01 00 | 	long	@_update_profileNumber_0887
00864 118             | ptr__update_status_1940_
00864 118 44 AA 01 00 | 	long	@_update_status_1940
00868 119             | ptr_stackspace_
00868 119 3C E9 05 00 | 	long	@stackspace
0086c 11a             | result1
0086c 11a 00 00 00 00 | 	long	0
00870 11b             | result2
00870 11b 01 00 00 00 | 	long	1
00874 11c             | result3
00874 11c 02 00 00 00 | 	long	2
00878 11d             | COG_BSS_START
00878 11d             | 	fit	480
00878                 | 	orgh
00878                 | hubentry
00878                 | 
00878                 | _count
00878     03 4C 05 F6 | 	mov	COUNT_, #3
0087c     A9 00 A0 FD | 	call	#pushregs_
00880     3A 8D 02 F6 | 	mov	local01, arg01
00884     3B 8F 02 F6 | 	mov	local02, arg02
00888     00 90 06 F6 | 	mov	local03, #0
0088c     00 78 56 F2 | 	cmps	arg03, #0 wc
00890     28 00 90 CD |  if_b	jmp	#LR__0001
00894     46 79 82 F1 | 	sub	arg03, local01
00898     3C 91 02 F6 | 	mov	local03, arg03
0089c     48 7B 42 F6 | 	abs	arg04, local03
008a0     04 7A 56 F2 | 	cmps	arg04, #4 wc
008a4                 | '     {
008a4                 | '        return -1;
008a4     01 34 66 36 |  if_ae	neg	result1, #1
008a8     50 00 90 3D |  if_ae	jmp	#LR__0002
008ac     00 90 56 F2 | 	cmps	local03, #0 wc
008b0     03 90 06 C5 |  if_b	and	local03, #3
008b4     04 90 46 C5 |  if_b	or	local03, #4
008b8     03 90 06 35 |  if_ae	and	local03, #3
008bc                 | LR__0001
008bc     1C 76 06 F6 | 	mov	arg02, #28
008c0     1C 90 66 F0 | 	shl	local03, #28
008c4     48 77 42 F5 | 	or	arg02, local03
008c8     00 78 06 F6 | 	mov	arg03, #0
008cc     00 7A 06 F6 | 	mov	arg04, #0
008d0     40 8C 62 FD | 	dirl	local01
008d4     46 77 02 FC | 	wrpin	arg02, local01
008d8     46 01 18 FC | 	wxpin	#0, local01
008dc     46 01 28 FC | 	wypin	#0, local01
008e0     41 8C 62 FD | 	dirh	local01
008e4     47 75 02 F6 | 	mov	arg01, local02
008e8     9C 54 B2 FD | 	call	#__system___waitms
008ec     00 34 06 F6 | 	mov	result1, #0
008f0     46 35 8A FA | 	rdpin	result1, local01
008f4     50 8C 62 FD | 	fltl	local01
008f8     46 01 08 FC | 	wrpin	#0, local01
008fc                 | '     {
008fc                 | '       pinOffset = (pinOffset & 0x03);
008fc                 | '     }
008fc                 | '   }
008fc                 | ' 
008fc                 | '   _pinstart(pin, p_count_rises | (pinOffset << 28), 0, 0);
008fc                 | ' 
008fc                 | '   _waitms(duration) ;
008fc                 | ' 
008fc                 | '   transitions = _rdpin(pin);
008fc                 | ' 
008fc                 | '   _pinclear(pin);
008fc                 | ' #line 93 "C:/flexprop/include/libsimpletools/count.c"
008fc                 | '   return transitions;
008fc                 | LR__0002
008fc     A8 F0 03 F6 | 	mov	ptra, fp
00900     B3 00 A0 FD | 	call	#popregs_
00904                 | _count_ret
00904     2D 00 64 FD | 	ret
00908                 | 
00908                 | _shift_in
00908     0A 4C 05 F6 | 	mov	COUNT_, #10
0090c     A9 00 A0 FD | 	call	#pushregs_
00910     3A 8D 02 F6 | 	mov	local01, arg01
00914     3B 8F 02 F6 | 	mov	local02, arg02
00918     3C 91 0A F6 | 	mov	local03, arg03 wz
0091c     3D 93 02 F6 | 	mov	local04, arg04
00920     00 94 06 F6 | 	mov	local05, #0
00924     00 96 06 F6 | 	mov	local06, #0
00928     01 90 0E 52 |  if_ne	cmp	local03, #1 wz
0092c     01 96 06 A6 |  if_e	mov	local06, #1
00930                 | '   switch(mode)
00930     48 99 02 F6 | 	mov	local07, local03
00934     03 98 26 F3 | 	fle	local07, #3
00938     30 98 62 FD | 	jmprel	local07
0093c                 | LR__0003
0093c     0C 00 90 FD | 	jmp	#LR__0004
00940     1C 00 90 FD | 	jmp	#LR__0005
00944     38 00 90 FD | 	jmp	#LR__0006
00948     48 00 90 FD | 	jmp	#LR__0007
0094c                 | LR__0004
0094c     01 92 86 F1 | 	sub	local04, #1
00950     49 9B 02 F6 | 	mov	local08, local04
00954     01 9C 66 F6 | 	neg	local09, #1
00958     01 9E 66 F6 | 	neg	local10, #1
0095c                 | '       vi = bits - 1;
0095c                 | '       vf = -1;
0095c                 | '       inc = -1;
0095c                 | ' 
0095c                 | '       break;
0095c     40 00 90 FD | 	jmp	#LR__0008
00960                 | LR__0005
00960     00 9A 06 F6 | 	mov	local08, #0
00964     49 9D 02 F6 | 	mov	local09, local04
00968     01 9E 06 F6 | 	mov	local10, #1
0096c     40 8C 62 FD | 	dirl	local01
00970                 | ' {
00970                 | '     _dirl(pin);
00970                 | '     return _pinr(pin);
00970     40 8C 72 FD | 	testp	local01 wc
00974     6C 34 62 FD | 	wrc	result1
00978     1A 95 42 F5 | 	or	local05, result1
0097c                 | '       vi = 0;
0097c                 | '       vf = bits;
0097c                 | '       inc = 1;
0097c                 | '       value |= input(pinDat);
0097c                 | '       break;
0097c     20 00 90 FD | 	jmp	#LR__0008
00980                 | LR__0006
00980     49 9B 02 F6 | 	mov	local08, local04
00984     01 9A 86 F1 | 	sub	local08, #1
00988     01 9C 66 F6 | 	neg	local09, #1
0098c     01 9E 66 F6 | 	neg	local10, #1
00990                 | '       vi = bits -1;
00990                 | '       vf = -1;
00990                 | '       inc = -1;
00990                 | '       break;
00990     0C 00 90 FD | 	jmp	#LR__0008
00994                 | LR__0007
00994     00 9A 06 F6 | 	mov	local08, #0
00998     49 9D 02 F6 | 	mov	local09, local04
0099c     01 9E 06 F6 | 	mov	local10, #1
009a0                 | '       vi = 0;
009a0                 | '       vf = bits;
009a0                 | '       inc = 1;
009a0                 | '       break;
009a0                 | LR__0008
009a0     58 8E 62 FD | 	drvl	local02
009a4     A0 F6 9F FE | 	loc	pa,	#(@LR__0010-@LR__0009)
009a8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
009ac                 | '   for(i = vi; i != vf; i += inc)
009ac                 | LR__0009
009ac     4E 9B 0A F2 | 	cmp	local08, local09 wz
009b0     40 00 90 AD |  if_e	jmp	#LR__0011
009b4     00 96 0E F2 | 	cmp	local06, #0 wz
009b8     40 8C 62 5D |  if_ne	dirl	local01
009bc                 | ' {
009bc                 | '     _dirl(pin);
009bc                 | '     return _pinr(pin);
009bc     40 8C 72 5D |  if_ne	testp	local01 wc
009c0     6C 34 62 5D |  if_ne	wrc	result1
009c4     4D 35 62 50 |  if_ne	shl	result1, local08
009c8     1A 95 42 55 |  if_ne	or	local05, result1
009cc     5F 8E 62 FD | 	drvnot	local02
009d0     5F 8E 62 FD | 	drvnot	local02
009d4     00 96 0E F2 | 	cmp	local06, #0 wz
009d8     40 8C 62 AD |  if_e	dirl	local01
009dc                 | ' {
009dc                 | '     _dirl(pin);
009dc                 | '     return _pinr(pin);
009dc     40 8C 72 AD |  if_e	testp	local01 wc
009e0     6C 34 62 AD |  if_e	wrc	result1
009e4     4D 35 62 A0 |  if_e	shl	result1, local08
009e8     1A 95 42 A5 |  if_e	or	local05, result1
009ec     4F 9B 02 F1 | 	add	local08, local10
009f0     B8 FF 9F FD | 	jmp	#LR__0009
009f4                 | LR__0010
009f4                 | LR__0011
009f4                 | '   }
009f4                 | '   return value;
009f4     4A 35 02 F6 | 	mov	result1, local05
009f8     A8 F0 03 F6 | 	mov	ptra, fp
009fc     B3 00 A0 FD | 	call	#popregs_
00a00                 | _shift_in_ret
00a00     2D 00 64 FD | 	ret
00a04                 | 
00a04                 | _shift_out
00a04     04 4C 05 F6 | 	mov	COUNT_, #4
00a08     A9 00 A0 FD | 	call	#pushregs_
00a0c     3B 8D 02 F6 | 	mov	local01, arg02
00a10     01 76 76 F6 | 	neg	arg02, #1 wc
00a14     42 74 62 FD | 	dirc	arg01
00a18     00 78 0E F2 | 	cmp	arg03, #0 wz
00a1c     00 8E 06 A6 |  if_e	mov	local02, #0
00a20     3D 91 02 A6 |  if_e	mov	local03, arg04
00a24     01 92 06 A6 |  if_e	mov	local04, #1
00a28     01 7A 86 51 |  if_ne	sub	arg04, #1
00a2c     3D 8F 02 56 |  if_ne	mov	local02, arg04
00a30     01 90 66 56 |  if_ne	neg	local03, #1
00a34     01 92 66 56 |  if_ne	neg	local04, #1
00a38     58 8C 62 FD | 	drvl	local01
00a3c     E8 F5 9F FE | 	loc	pa,	#(@LR__0013-@LR__0012)
00a40     8C 00 A0 FD | 	call	#FCACHE_LOAD_
00a44                 | '   for(i = vi; i != vf; i += inc)
00a44                 | LR__0012
00a44     48 8F 0A F2 | 	cmp	local02, local03 wz
00a48     20 00 90 AD |  if_e	jmp	#LR__0014
00a4c     3E 77 02 F6 | 	mov	arg02, arg05
00a50     47 77 C2 F0 | 	sar	arg02, local02
00a54     01 76 D6 F7 | 	test	arg02, #1 wc
00a58     5A 74 62 FD | 	drvc	arg01
00a5c     5F 8C 62 FD | 	drvnot	local01
00a60     5F 8C 62 FD | 	drvnot	local01
00a64     49 8F 02 F1 | 	add	local02, local04
00a68     D8 FF 9F FD | 	jmp	#LR__0012
00a6c                 | LR__0013
00a6c                 | LR__0014
00a6c     A8 F0 03 F6 | 	mov	ptra, fp
00a70     B3 00 A0 FD | 	call	#popregs_
00a74                 | _shift_out_ret
00a74     2D 00 64 FD | 	ret
00a78                 | 
00a78                 | _opendir
00a78     06 4C 05 F6 | 	mov	COUNT_, #6
00a7c     A9 00 A0 FD | 	call	#pushregs_
00a80     3A 77 02 F6 | 	mov	arg02, arg01
00a84                 | '     return tmpname;
00a84     16 01 00 FF 
00a88     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
00a8c     EB 8C 02 F6 | 	mov	local01, ptr__dat__
00a90     46 75 02 F6 | 	mov	arg01, local01
00a94     00 78 06 F6 | 	mov	arg03, #0
00a98     16 01 00 FF 
00a9c     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
00aa0     18 82 B1 FD | 	call	#___getvfsforfile
00aa4     1A 8F 0A F6 | 	mov	local02, result1 wz
00aa8     28 8E 06 51 |  if_ne	add	local02, #40
00aac     47 75 02 5B |  if_ne	rdlong	arg01, local02
00ab0     28 8E 86 51 |  if_ne	sub	local02, #40
00ab4     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
00ab8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
00abc     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
00ac0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
00ac4                 | ' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
00ac4                 | '         _seterror( 16 );
00ac4                 | '         return 0;
00ac4     00 34 06 A6 |  if_e	mov	result1, #0
00ac8     80 00 90 AD |  if_e	jmp	#LR__0016
00acc     5C 74 06 F6 | 	mov	arg01, #92
00ad0                 | '     return _gc_alloc(size);
00ad0     10 76 06 F6 | 	mov	arg02, #16
00ad4     74 7D B2 FD | 	call	#__system___gc_doalloc
00ad8     1A 91 0A F6 | 	mov	local03, result1 wz
00adc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
00ae0     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
00ae4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
00ae8                 | ' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
00ae8                 | '         _seterror( 7 );
00ae8                 | '         return 0;
00ae8     00 34 06 A6 |  if_e	mov	result1, #0
00aec     5C 00 90 AD |  if_e	jmp	#LR__0016
00af0     28 8E 06 F1 | 	add	local02, #40
00af4     47 77 02 FB | 	rdlong	arg02, local02
00af8     28 8E 86 F1 | 	sub	local02, #40
00afc     3B 93 02 FB | 	rdlong	local04, arg02
00b00     04 76 06 F1 | 	add	arg02, #4
00b04     3B 95 02 FB | 	rdlong	local05, arg02
00b08     48 75 02 F6 | 	mov	arg01, local03
00b0c     46 77 02 F6 | 	mov	arg02, local01
00b10     C9 96 02 F6 | 	mov	local06, objptr
00b14     49 93 01 F6 | 	mov	objptr, local04
00b18     2D 94 62 FD | 	call	local05
00b1c     4B 93 01 F6 | 	mov	objptr, local06
00b20     1A 75 0A F6 | 	mov	arg01, result1 wz
00b24     1C 00 90 AD |  if_e	jmp	#LR__0015
00b28     18 A2 05 F1 | 	add	ptr___system__dat__, #24
00b2c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
00b30     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
00b34     48 75 02 F6 | 	mov	arg01, local03
00b38                 | '     return _gc_free(ptr);
00b38     40 7E B2 FD | 	call	#__system___gc_free
00b3c                 | ' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
00b3c                 | '         _seterror(r);
00b3c                 | '         free(dir);
00b3c                 | '         return 0;
00b3c     00 34 06 F6 | 	mov	result1, #0
00b40     08 00 90 FD | 	jmp	#LR__0016
00b44                 | LR__0015
00b44     48 8F 62 FC | 	wrlong	local02, local03
00b48                 | '     }
00b48                 | '     dir->vfs = v;
00b48                 | '     return dir;
00b48     48 35 02 F6 | 	mov	result1, local03
00b4c                 | LR__0016
00b4c     A8 F0 03 F6 | 	mov	ptra, fp
00b50     B3 00 A0 FD | 	call	#popregs_
00b54                 | _opendir_ret
00b54     2D 00 64 FD | 	ret
00b58                 | 
00b58                 | _closedir
00b58     04 4C 05 F6 | 	mov	COUNT_, #4
00b5c     A9 00 A0 FD | 	call	#pushregs_
00b60     3A 8D 02 F6 | 	mov	local01, arg01
00b64     46 75 02 FB | 	rdlong	arg01, local01
00b68     2C 74 06 F1 | 	add	arg01, #44
00b6c     3A 75 02 FB | 	rdlong	arg01, arg01
00b70     3A 8F 02 FB | 	rdlong	local02, arg01
00b74     04 74 06 F1 | 	add	arg01, #4
00b78     3A 91 02 FB | 	rdlong	local03, arg01
00b7c     46 75 02 F6 | 	mov	arg01, local01
00b80     C9 92 02 F6 | 	mov	local04, objptr
00b84     47 93 01 F6 | 	mov	objptr, local02
00b88     2D 90 62 FD | 	call	local03
00b8c     49 93 01 F6 | 	mov	objptr, local04
00b90     1A 93 02 F6 | 	mov	local04, result1
00b94     46 75 02 F6 | 	mov	arg01, local01
00b98                 | '     return _gc_free(ptr);
00b98     E0 7D B2 FD | 	call	#__system___gc_free
00b9c                 | '     r = v->closedir(dir);
00b9c                 | '     free(dir);
00b9c                 | '     return _seterror(r);
00b9c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
00ba0     D1 92 62 FC | 	wrlong	local04, ptr___system__dat__
00ba4     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
00ba8     00 92 0E F2 | 	cmp	local04, #0 wz
00bac     01 34 66 56 |  if_ne	neg	result1, #1
00bb0     00 34 06 A6 |  if_e	mov	result1, #0
00bb4     A8 F0 03 F6 | 	mov	ptra, fp
00bb8     B3 00 A0 FD | 	call	#popregs_
00bbc                 | _closedir_ret
00bbc     2D 00 64 FD | 	ret
00bc0                 | 
00bc0                 | _readdir
00bc0     04 4C 05 F6 | 	mov	COUNT_, #4
00bc4     A9 00 A0 FD | 	call	#pushregs_
00bc8     3A 77 0A FB | 	rdlong	arg02, arg01 wz
00bcc     08 74 06 F1 | 	add	arg01, #8
00bd0     3A 8D 02 F6 | 	mov	local01, arg01
00bd4                 | '         return 0;
00bd4     08 74 86 F1 | 	sub	arg01, #8
00bd8     00 34 06 A6 |  if_e	mov	result1, #0
00bdc     4C 00 90 AD |  if_e	jmp	#LR__0018
00be0     30 76 06 F1 | 	add	arg02, #48
00be4     3B 77 02 FB | 	rdlong	arg02, arg02
00be8     3B 8F 02 FB | 	rdlong	local02, arg02
00bec     04 76 06 F1 | 	add	arg02, #4
00bf0     3B 91 02 FB | 	rdlong	local03, arg02
00bf4     46 77 02 F6 | 	mov	arg02, local01
00bf8     C9 92 02 F6 | 	mov	local04, objptr
00bfc     47 93 01 F6 | 	mov	objptr, local02
00c00     2D 90 62 FD | 	call	local03
00c04     49 93 01 F6 | 	mov	objptr, local04
00c08     00 34 4E F2 | 	cmps	result1, #0 wz
00c0c     18 00 90 AD |  if_e	jmp	#LR__0017
00c10     01 34 56 F2 | 	cmps	result1, #1 wc
00c14     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
00c18     D1 34 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
00c1c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
00c20                 | '             _seterror(r);
00c20                 | '         }
00c20                 | '         return 0;
00c20     00 34 06 F6 | 	mov	result1, #0
00c24     04 00 90 FD | 	jmp	#LR__0018
00c28                 | LR__0017
00c28                 | '     }
00c28                 | '     return D;
00c28     46 35 02 F6 | 	mov	result1, local01
00c2c                 | LR__0018
00c2c     A8 F0 03 F6 | 	mov	ptra, fp
00c30     B3 00 A0 FD | 	call	#popregs_
00c34                 | _readdir_ret
00c34     2D 00 64 FD | 	ret
00c38                 | 
00c38                 | __openraw
00c38     0C 4C 05 F6 | 	mov	COUNT_, #12
00c3c     A9 00 A0 FD | 	call	#pushregs_
00c40     34 F0 07 F1 | 	add	ptra, #52
00c44     04 50 05 F1 | 	add	fp, #4
00c48     A8 74 62 FC | 	wrlong	arg01, fp
00c4c     04 50 05 F1 | 	add	fp, #4
00c50     A8 76 62 FC | 	wrlong	arg02, fp
00c54     04 50 05 F1 | 	add	fp, #4
00c58     A8 78 62 FC | 	wrlong	arg03, fp
00c5c     04 50 05 F1 | 	add	fp, #4
00c60     A8 7A 62 FC | 	wrlong	arg04, fp
00c64     0C 50 05 F1 | 	add	fp, #12
00c68     A8 08 68 FC | 	wrlong	#4, fp
00c6c     18 50 85 F1 | 	sub	fp, #24
00c70     A8 78 02 FB | 	rdlong	arg03, fp
00c74     1C 50 05 F1 | 	add	fp, #28
00c78     A8 78 62 FC | 	wrlong	arg03, fp
00c7c                 | '     return tmpname;
00c7c     16 01 00 FF 
00c80     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
00c84     EB 74 02 F6 | 	mov	arg01, ptr__dat__
00c88     16 01 00 FF 
00c8c     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
00c90     04 50 05 F1 | 	add	fp, #4
00c94     A8 74 62 FC | 	wrlong	arg01, fp
00c98     1C 50 85 F1 | 	sub	fp, #28
00c9c     A8 76 02 FB | 	rdlong	arg02, fp
00ca0     08 50 85 F1 | 	sub	fp, #8
00ca4     00 78 06 F6 | 	mov	arg03, #0
00ca8     10 80 B1 FD | 	call	#___getvfsforfile
00cac     18 50 05 F1 | 	add	fp, #24
00cb0     A8 34 62 FC | 	wrlong	result1, fp
00cb4     00 34 4E F2 | 	cmps	result1, #0 wz
00cb8     18 50 85 F1 | 	sub	fp, #24
00cbc     18 00 90 AD |  if_e	jmp	#LR__0019
00cc0     18 50 05 F1 | 	add	fp, #24
00cc4     A8 34 02 FB | 	rdlong	result1, fp
00cc8     18 50 85 F1 | 	sub	fp, #24
00ccc     20 34 06 F1 | 	add	result1, #32
00cd0     1A 35 0A FB | 	rdlong	result1, result1 wz
00cd4     14 00 90 5D |  if_ne	jmp	#LR__0020
00cd8                 | LR__0019
00cd8                 | ' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
00cd8                 | '         return _seterror( 16 );
00cd8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
00cdc     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
00ce0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
00ce4     01 34 66 F6 | 	neg	result1, #1
00ce8     74 04 90 FD | 	jmp	#LR__0035
00cec                 | LR__0020
00cec     20 50 05 F1 | 	add	fp, #32
00cf0     A8 74 02 FB | 	rdlong	arg01, fp
00cf4     20 50 85 F1 | 	sub	fp, #32
00cf8     00 76 06 F6 | 	mov	arg02, #0
00cfc     30 78 06 F6 | 	mov	arg03, #48
00d00     3A 8D 02 F6 | 	mov	local01, arg01
00d04     99 00 A0 FD | 	call	#\builtin_bytefill_
00d08     18 50 05 F1 | 	add	fp, #24
00d0c     A8 8E 02 FB | 	rdlong	local02, fp
00d10     47 91 02 F6 | 	mov	local03, local02
00d14     20 90 06 F1 | 	add	local03, #32
00d18     48 93 02 FB | 	rdlong	local04, local03
00d1c     49 79 02 F6 | 	mov	arg03, local04
00d20     3C 95 02 FB | 	rdlong	local05, arg03
00d24     04 78 06 F1 | 	add	arg03, #4
00d28     3C 97 02 FB | 	rdlong	local06, arg03
00d2c     4B 99 02 F6 | 	mov	local07, local06
00d30     08 50 05 F1 | 	add	fp, #8
00d34     A8 9A 02 FB | 	rdlong	local08, fp
00d38     04 50 05 F1 | 	add	fp, #4
00d3c     A8 9C 02 FB | 	rdlong	local09, fp
00d40     18 50 85 F1 | 	sub	fp, #24
00d44     A8 9E 02 FB | 	rdlong	local10, fp
00d48     0C 50 85 F1 | 	sub	fp, #12
00d4c     4D 75 02 F6 | 	mov	arg01, local08
00d50     4E 77 02 F6 | 	mov	arg02, local09
00d54     4F 79 02 F6 | 	mov	arg03, local10
00d58     C9 A0 02 F6 | 	mov	local11, objptr
00d5c     4A 93 01 F6 | 	mov	objptr, local05
00d60     2D 98 62 FD | 	call	local07
00d64     50 93 01 F6 | 	mov	objptr, local11
00d68     14 50 05 F1 | 	add	fp, #20
00d6c     A8 34 62 FC | 	wrlong	result1, fp
00d70     14 50 85 F1 | 	sub	fp, #20
00d74     00 34 0E F2 | 	cmp	result1, #0 wz
00d78     88 00 90 AD |  if_e	jmp	#LR__0021
00d7c     0C 50 05 F1 | 	add	fp, #12
00d80     A8 98 02 FB | 	rdlong	local07, fp
00d84     0C 50 85 F1 | 	sub	fp, #12
00d88     04 98 CE F7 | 	test	local07, #4 wz
00d8c     74 00 90 AD |  if_e	jmp	#LR__0021
00d90     18 50 05 F1 | 	add	fp, #24
00d94     A8 8E 02 FB | 	rdlong	local02, fp
00d98     47 91 02 F6 | 	mov	local03, local02
00d9c     24 90 06 F1 | 	add	local03, #36
00da0     48 93 02 FB | 	rdlong	local04, local03
00da4     24 90 86 F1 | 	sub	local03, #36
00da8     49 A1 02 F6 | 	mov	local11, local04
00dac     50 95 02 FB | 	rdlong	local05, local11
00db0     04 A0 06 F1 | 	add	local11, #4
00db4     50 97 02 FB | 	rdlong	local06, local11
00db8     4B 99 02 F6 | 	mov	local07, local06
00dbc     08 50 05 F1 | 	add	fp, #8
00dc0     A8 9A 02 FB | 	rdlong	local08, fp
00dc4     04 50 05 F1 | 	add	fp, #4
00dc8     A8 9C 02 FB | 	rdlong	local09, fp
00dcc     14 50 85 F1 | 	sub	fp, #20
00dd0     A8 9E 02 FB | 	rdlong	local10, fp
00dd4     10 50 85 F1 | 	sub	fp, #16
00dd8     4D 75 02 F6 | 	mov	arg01, local08
00ddc     4E 77 02 F6 | 	mov	arg02, local09
00de0     4F 79 02 F6 | 	mov	arg03, local10
00de4     C9 A0 02 F6 | 	mov	local11, objptr
00de8     4A 93 01 F6 | 	mov	objptr, local05
00dec     2D 98 62 FD | 	call	local07
00df0     50 93 01 F6 | 	mov	objptr, local11
00df4     1A A3 02 F6 | 	mov	local12, result1
00df8     14 50 05 F1 | 	add	fp, #20
00dfc     A8 A2 62 FC | 	wrlong	local12, fp
00e00     14 50 85 F1 | 	sub	fp, #20
00e04                 | LR__0021
00e04     14 50 05 F1 | 	add	fp, #20
00e08     A8 A2 0A FB | 	rdlong	local12, fp wz
00e0c     14 50 85 F1 | 	sub	fp, #20
00e10     2C 03 90 5D |  if_ne	jmp	#LR__0034
00e14     0C 50 05 F1 | 	add	fp, #12
00e18     A8 A2 02 FB | 	rdlong	local12, fp
00e1c     03 A2 0E F5 | 	and	local12, #3 wz
00e20     1C 50 05 F1 | 	add	fp, #28
00e24     A8 A2 62 FC | 	wrlong	local12, fp
00e28     28 50 85 F1 | 	sub	fp, #40
00e2c     1C 50 05 51 |  if_ne	add	fp, #28
00e30     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00e34     02 A2 46 55 |  if_ne	or	local12, #2
00e38     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00e3c     1C 50 85 51 |  if_ne	sub	fp, #28
00e40     28 50 05 F1 | 	add	fp, #40
00e44     A8 A2 02 FB | 	rdlong	local12, fp
00e48     28 50 85 F1 | 	sub	fp, #40
00e4c     01 A2 0E F2 | 	cmp	local12, #1 wz
00e50     1C 50 05 51 |  if_ne	add	fp, #28
00e54     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00e58     01 A2 46 55 |  if_ne	or	local12, #1
00e5c     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00e60     1C 50 85 51 |  if_ne	sub	fp, #28
00e64     0C 50 05 F1 | 	add	fp, #12
00e68     A8 A2 02 FB | 	rdlong	local12, fp
00e6c     0C 50 85 F1 | 	sub	fp, #12
00e70     20 A2 CE F7 | 	test	local12, #32 wz
00e74     1C 50 05 51 |  if_ne	add	fp, #28
00e78     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00e7c     C0 A2 46 55 |  if_ne	or	local12, #192
00e80     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00e84     1C 50 85 51 |  if_ne	sub	fp, #28
00e88     20 50 05 F1 | 	add	fp, #32
00e8c     A8 A2 02 FB | 	rdlong	local12, fp
00e90     04 50 85 F1 | 	sub	fp, #4
00e94     A8 98 02 FB | 	rdlong	local07, fp
00e98     08 A2 06 F1 | 	add	local12, #8
00e9c     51 99 62 FC | 	wrlong	local07, local12
00ea0     04 50 05 F1 | 	add	fp, #4
00ea4     A8 A2 02 FB | 	rdlong	local12, fp
00ea8     20 50 85 F1 | 	sub	fp, #32
00eac     10 A2 06 F1 | 	add	local12, #16
00eb0     51 99 0A FB | 	rdlong	local07, local12 wz
00eb4     24 00 90 5D |  if_ne	jmp	#LR__0022
00eb8     20 50 05 F1 | 	add	fp, #32
00ebc     A8 A2 02 FB | 	rdlong	local12, fp
00ec0     08 50 85 F1 | 	sub	fp, #8
00ec4     A8 98 02 FB | 	rdlong	local07, fp
00ec8     18 50 85 F1 | 	sub	fp, #24
00ecc     04 98 06 F1 | 	add	local07, #4
00ed0     4C 8F 02 FB | 	rdlong	local02, local07
00ed4     10 A2 06 F1 | 	add	local12, #16
00ed8     51 8F 62 FC | 	wrlong	local02, local12
00edc                 | LR__0022
00edc     20 50 05 F1 | 	add	fp, #32
00ee0     A8 A2 02 FB | 	rdlong	local12, fp
00ee4     20 50 85 F1 | 	sub	fp, #32
00ee8     14 A2 06 F1 | 	add	local12, #20
00eec     51 99 0A FB | 	rdlong	local07, local12 wz
00ef0     24 00 90 5D |  if_ne	jmp	#LR__0023
00ef4     20 50 05 F1 | 	add	fp, #32
00ef8     A8 A2 02 FB | 	rdlong	local12, fp
00efc     08 50 85 F1 | 	sub	fp, #8
00f00     A8 98 02 FB | 	rdlong	local07, fp
00f04     18 50 85 F1 | 	sub	fp, #24
00f08     08 98 06 F1 | 	add	local07, #8
00f0c     4C 8F 02 FB | 	rdlong	local02, local07
00f10     14 A2 06 F1 | 	add	local12, #20
00f14     51 8F 62 FC | 	wrlong	local02, local12
00f18                 | LR__0023
00f18     20 50 05 F1 | 	add	fp, #32
00f1c     A8 A2 02 FB | 	rdlong	local12, fp
00f20     20 50 85 F1 | 	sub	fp, #32
00f24     20 A2 06 F1 | 	add	local12, #32
00f28     51 99 0A FB | 	rdlong	local07, local12 wz
00f2c     20 00 90 5D |  if_ne	jmp	#LR__0024
00f30     20 50 05 F1 | 	add	fp, #32
00f34     A8 A2 02 FB | 	rdlong	local12, fp
00f38     08 50 85 F1 | 	sub	fp, #8
00f3c     A8 98 02 FB | 	rdlong	local07, fp
00f40     18 50 85 F1 | 	sub	fp, #24
00f44     4C 8F 02 FB | 	rdlong	local02, local07
00f48     20 A2 06 F1 | 	add	local12, #32
00f4c     51 8F 62 FC | 	wrlong	local02, local12
00f50                 | LR__0024
00f50     20 50 05 F1 | 	add	fp, #32
00f54     A8 A2 02 FB | 	rdlong	local12, fp
00f58     20 50 85 F1 | 	sub	fp, #32
00f5c     24 A2 06 F1 | 	add	local12, #36
00f60     51 99 0A FB | 	rdlong	local07, local12 wz
00f64     24 00 90 5D |  if_ne	jmp	#LR__0025
00f68     20 50 05 F1 | 	add	fp, #32
00f6c     A8 A2 02 FB | 	rdlong	local12, fp
00f70     08 50 85 F1 | 	sub	fp, #8
00f74     A8 98 02 FB | 	rdlong	local07, fp
00f78     18 50 85 F1 | 	sub	fp, #24
00f7c     10 98 06 F1 | 	add	local07, #16
00f80     4C 8F 02 FB | 	rdlong	local02, local07
00f84     24 A2 06 F1 | 	add	local12, #36
00f88     51 8F 62 FC | 	wrlong	local02, local12
00f8c                 | LR__0025
00f8c     20 50 05 F1 | 	add	fp, #32
00f90     A8 A2 02 FB | 	rdlong	local12, fp
00f94     20 50 85 F1 | 	sub	fp, #32
00f98     2C A2 06 F1 | 	add	local12, #44
00f9c     51 99 0A FB | 	rdlong	local07, local12 wz
00fa0     24 00 90 5D |  if_ne	jmp	#LR__0026
00fa4     20 50 05 F1 | 	add	fp, #32
00fa8     A8 A2 02 FB | 	rdlong	local12, fp
00fac     08 50 85 F1 | 	sub	fp, #8
00fb0     A8 98 02 FB | 	rdlong	local07, fp
00fb4     18 50 85 F1 | 	sub	fp, #24
00fb8     0C 98 06 F1 | 	add	local07, #12
00fbc     4C 8F 02 FB | 	rdlong	local02, local07
00fc0     2C A2 06 F1 | 	add	local12, #44
00fc4     51 8F 62 FC | 	wrlong	local02, local12
00fc8                 | LR__0026
00fc8     20 50 05 F1 | 	add	fp, #32
00fcc     A8 A2 02 FB | 	rdlong	local12, fp
00fd0     20 50 85 F1 | 	sub	fp, #32
00fd4     18 A2 06 F1 | 	add	local12, #24
00fd8     51 99 0A FB | 	rdlong	local07, local12 wz
00fdc     B0 00 90 5D |  if_ne	jmp	#LR__0029
00fe0     20 50 05 F1 | 	add	fp, #32
00fe4     A8 74 02 FB | 	rdlong	arg01, fp
00fe8     3A 91 02 F6 | 	mov	local03, arg01
00fec     24 90 06 F1 | 	add	local03, #36
00ff0     48 A3 02 FB | 	rdlong	local12, local03
00ff4     51 95 02 FB | 	rdlong	local05, local12
00ff8     04 A2 06 F1 | 	add	local12, #4
00ffc     51 99 02 FB | 	rdlong	local07, local12
01000     10 50 05 F1 | 	add	fp, #16
01004     A8 78 02 F6 | 	mov	arg03, fp
01008     30 50 85 F1 | 	sub	fp, #48
0100c     00 77 06 F6 | 	mov	arg02, #256
01010     C9 A0 02 F6 | 	mov	local11, objptr
01014     4A 93 01 F6 | 	mov	objptr, local05
01018     2D 98 62 FD | 	call	local07
0101c     50 93 01 F6 | 	mov	objptr, local11
01020     2C 50 05 F1 | 	add	fp, #44
01024     A8 34 62 FC | 	wrlong	result1, fp
01028     2C 50 85 F1 | 	sub	fp, #44
0102c     00 34 0E F2 | 	cmp	result1, #0 wz
01030     3C 00 90 5D |  if_ne	jmp	#LR__0027
01034     30 50 05 F1 | 	add	fp, #48
01038     A8 98 02 FB | 	rdlong	local07, fp
0103c     30 50 85 F1 | 	sub	fp, #48
01040     02 98 CE F7 | 	test	local07, #2 wz
01044     28 00 90 AD |  if_e	jmp	#LR__0027
01048     20 50 05 F1 | 	add	fp, #32
0104c     A8 A2 02 FB | 	rdlong	local12, fp
01050     20 50 85 F1 | 	sub	fp, #32
01054     C9 74 02 F6 | 	mov	arg01, objptr
01058     CD 76 02 F6 | 	mov	arg02, ptr____default_putc_terminal_
0105c     D8 4B B2 FD | 	call	#__system___make_methodptr
01060     1A 99 02 F6 | 	mov	local07, result1
01064     18 A2 06 F1 | 	add	local12, #24
01068     51 99 62 FC | 	wrlong	local07, local12
0106c     20 00 90 FD | 	jmp	#LR__0028
01070                 | LR__0027
01070     20 50 05 F1 | 	add	fp, #32
01074     A8 A2 02 FB | 	rdlong	local12, fp
01078     20 50 85 F1 | 	sub	fp, #32
0107c     C9 74 02 F6 | 	mov	arg01, objptr
01080     CC 76 02 F6 | 	mov	arg02, ptr____default_putc_
01084     B0 4B B2 FD | 	call	#__system___make_methodptr
01088     18 A2 06 F1 | 	add	local12, #24
0108c     51 35 62 FC | 	wrlong	result1, local12
01090                 | LR__0028
01090                 | LR__0029
01090     20 50 05 F1 | 	add	fp, #32
01094     A8 A2 02 FB | 	rdlong	local12, fp
01098     20 50 85 F1 | 	sub	fp, #32
0109c     1C A2 06 F1 | 	add	local12, #28
010a0     51 99 0A FB | 	rdlong	local07, local12 wz
010a4     20 00 90 5D |  if_ne	jmp	#LR__0030
010a8     20 50 05 F1 | 	add	fp, #32
010ac     A8 A2 02 FB | 	rdlong	local12, fp
010b0     20 50 85 F1 | 	sub	fp, #32
010b4     C9 74 02 F6 | 	mov	arg01, objptr
010b8     CB 76 02 F6 | 	mov	arg02, ptr____default_getc_
010bc     78 4B B2 FD | 	call	#__system___make_methodptr
010c0     1C A2 06 F1 | 	add	local12, #28
010c4     51 35 62 FC | 	wrlong	result1, local12
010c8                 | LR__0030
010c8     20 50 05 F1 | 	add	fp, #32
010cc     A8 A2 02 FB | 	rdlong	local12, fp
010d0     20 50 85 F1 | 	sub	fp, #32
010d4     28 A2 06 F1 | 	add	local12, #40
010d8     51 99 0A FB | 	rdlong	local07, local12 wz
010dc     60 00 90 5D |  if_ne	jmp	#LR__0033
010e0     18 50 05 F1 | 	add	fp, #24
010e4     A8 A2 02 FB | 	rdlong	local12, fp
010e8     18 50 85 F1 | 	sub	fp, #24
010ec     14 A2 06 F1 | 	add	local12, #20
010f0     51 99 0A FB | 	rdlong	local07, local12 wz
010f4     28 00 90 AD |  if_e	jmp	#LR__0031
010f8     20 50 05 F1 | 	add	fp, #32
010fc     A8 A2 02 FB | 	rdlong	local12, fp
01100     08 50 85 F1 | 	sub	fp, #8
01104     A8 98 02 FB | 	rdlong	local07, fp
01108     18 50 85 F1 | 	sub	fp, #24
0110c     14 98 06 F1 | 	add	local07, #20
01110     4C 8F 02 FB | 	rdlong	local02, local07
01114     28 A2 06 F1 | 	add	local12, #40
01118     51 8F 62 FC | 	wrlong	local02, local12
0111c     20 00 90 FD | 	jmp	#LR__0032
01120                 | LR__0031
01120     20 50 05 F1 | 	add	fp, #32
01124     A8 A2 02 FB | 	rdlong	local12, fp
01128     20 50 85 F1 | 	sub	fp, #32
0112c     C9 74 02 F6 | 	mov	arg01, objptr
01130     CA 76 02 F6 | 	mov	arg02, ptr____default_flush_
01134     00 4B B2 FD | 	call	#__system___make_methodptr
01138     28 A2 06 F1 | 	add	local12, #40
0113c     51 35 62 FC | 	wrlong	result1, local12
01140                 | LR__0032
01140                 | LR__0033
01140                 | LR__0034
01140     14 50 05 F1 | 	add	fp, #20
01144     A8 A2 0A FB | 	rdlong	local12, fp wz
01148     00 74 06 A6 |  if_e	mov	arg01, #0
0114c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01150     D1 74 62 AC |  if_e	wrlong	arg01, ptr___system__dat__
01154     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01158                 | '     return r;
01158     A8 34 02 FB | 	rdlong	result1, fp
0115c     14 50 85 F1 | 	sub	fp, #20
01160                 | LR__0035
01160     A8 F0 03 F6 | 	mov	ptra, fp
01164     B3 00 A0 FD | 	call	#popregs_
01168                 | __openraw_ret
01168     2D 00 64 FD | 	ret
0116c                 | 
0116c                 | __closeraw
0116c     05 4C 05 F6 | 	mov	COUNT_, #5
01170     A9 00 A0 FD | 	call	#pushregs_
01174     3A 8D 02 F6 | 	mov	local01, arg01
01178     00 8E 06 F6 | 	mov	local02, #0
0117c     08 8C 06 F1 | 	add	local01, #8
01180     46 35 0A FB | 	rdlong	result1, local01 wz
01184     08 8C 86 F1 | 	sub	local01, #8
01188                 | '         return _seterror( 5 );
01188     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
0118c     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
01190     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01194     01 34 66 A6 |  if_e	neg	result1, #1
01198     90 00 90 AD |  if_e	jmp	#LR__0038
0119c     28 8C 06 F1 | 	add	local01, #40
011a0     46 35 0A FB | 	rdlong	result1, local01 wz
011a4     28 8C 86 F1 | 	sub	local01, #40
011a8     2C 00 90 AD |  if_e	jmp	#LR__0036
011ac     28 8C 06 F1 | 	add	local01, #40
011b0     46 75 02 FB | 	rdlong	arg01, local01
011b4     28 8C 86 F1 | 	sub	local01, #40
011b8     3A 91 02 FB | 	rdlong	local03, arg01
011bc     04 74 06 F1 | 	add	arg01, #4
011c0     3A 93 02 FB | 	rdlong	local04, arg01
011c4     46 75 02 F6 | 	mov	arg01, local01
011c8     C9 94 02 F6 | 	mov	local05, objptr
011cc     48 93 01 F6 | 	mov	objptr, local03
011d0     2D 92 62 FD | 	call	local04
011d4     4A 93 01 F6 | 	mov	objptr, local05
011d8                 | LR__0036
011d8     20 8C 06 F1 | 	add	local01, #32
011dc     46 95 0A FB | 	rdlong	local05, local01 wz
011e0     20 8C 86 F1 | 	sub	local01, #32
011e4     30 00 90 AD |  if_e	jmp	#LR__0037
011e8     20 8C 06 F1 | 	add	local01, #32
011ec     46 95 02 FB | 	rdlong	local05, local01
011f0     20 8C 86 F1 | 	sub	local01, #32
011f4     4A 91 02 FB | 	rdlong	local03, local05
011f8     04 94 06 F1 | 	add	local05, #4
011fc     4A 93 02 FB | 	rdlong	local04, local05
01200     46 75 02 F6 | 	mov	arg01, local01
01204     C9 94 02 F6 | 	mov	local05, objptr
01208     48 93 01 F6 | 	mov	objptr, local03
0120c     2D 92 62 FD | 	call	local04
01210     4A 93 01 F6 | 	mov	objptr, local05
01214     1A 8F 02 F6 | 	mov	local02, result1
01218                 | LR__0037
01218     46 75 02 F6 | 	mov	arg01, local01
0121c     00 76 06 F6 | 	mov	arg02, #0
01220     30 78 06 F6 | 	mov	arg03, #48
01224     99 00 A0 FD | 	call	#\builtin_bytefill_
01228                 | '     return r;
01228     47 35 02 F6 | 	mov	result1, local02
0122c                 | LR__0038
0122c     A8 F0 03 F6 | 	mov	ptra, fp
01230     B3 00 A0 FD | 	call	#popregs_
01234                 | __closeraw_ret
01234     2D 00 64 FD | 	ret
01238                 | 
01238                 | __vfs_open_sdcardx
01238     06 4C 05 F6 | 	mov	COUNT_, #6
0123c     A9 00 A0 FD | 	call	#pushregs_
01240     3A 8D 02 F6 | 	mov	local01, arg01
01244     3B 8F 02 F6 | 	mov	local02, arg02
01248     3C 91 02 F6 | 	mov	local03, arg03
0124c     3D 93 02 F6 | 	mov	local04, arg04
01250     1C 74 06 F6 | 	mov	arg01, #28
01254     B0 75 B2 FD | 	call	#__system___gc_alloc_managed
01258     1A 95 02 F6 | 	mov	local05, result1
0125c     01 00 00 FF 
01260     30 74 06 F6 | 	mov	arg01, ##560
01264     A0 75 B2 FD | 	call	#__system___gc_alloc_managed
01268     1A 97 02 F6 | 	mov	local06, result1
0126c     00 74 06 F6 | 	mov	arg01, #0
01270     46 77 02 F6 | 	mov	arg02, local01
01274     47 79 02 F6 | 	mov	arg03, local02
01278     48 7B 02 F6 | 	mov	arg04, local03
0127c     49 7D 02 F6 | 	mov	arg05, local04
01280     C9 92 02 F6 | 	mov	local04, objptr
01284     4A 93 01 F6 | 	mov	objptr, local05
01288     10 C2 B1 FD | 	call	#_fatfs_cc_disk_setpins
0128c     49 93 01 F6 | 	mov	objptr, local04
01290     1A 93 0A F6 | 	mov	local04, result1 wz
01294     24 00 90 5D |  if_ne	jmp	#LR__0039
01298     4C 01 00 FF 
0129c     46 76 06 F6 | 	mov	arg02, ##@LR__1840
012a0     4B 75 02 F6 | 	mov	arg01, local06
012a4     00 78 06 F6 | 	mov	arg03, #0
012a8     C9 90 02 F6 | 	mov	local03, objptr
012ac     4A 93 01 F6 | 	mov	objptr, local05
012b0     00 E4 B1 FD | 	call	#_fatfs_cc_f_mount
012b4     48 93 01 F6 | 	mov	objptr, local03
012b8     1A 93 02 F6 | 	mov	local04, result1
012bc                 | LR__0039
012bc     00 92 0E F2 | 	cmp	local04, #0 wz
012c0     18 00 90 AD |  if_e	jmp	#LR__0040
012c4     49 75 6A F6 | 	neg	arg01, local04 wz
012c8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
012cc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
012d0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
012d4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012d4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012d4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012d4     00 34 06 F6 | 	mov	result1, #0
012d8     14 00 90 FD | 	jmp	#LR__0041
012dc                 | LR__0040
012dc     4A 75 02 F6 | 	mov	arg01, local05
012e0     C9 8C 02 F6 | 	mov	local01, objptr
012e4     4A 93 01 F6 | 	mov	objptr, local05
012e8     BC 31 B2 FD | 	call	#_fatfs_cc_get_vfs
012ec     46 93 01 F6 | 	mov	objptr, local01
012f0                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012f0                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012f0                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012f0                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
012f0                 | LR__0041
012f0     A8 F0 03 F6 | 	mov	ptra, fp
012f4     B3 00 A0 FD | 	call	#popregs_
012f8                 | __vfs_open_sdcardx_ret
012f8     2D 00 64 FD | 	ret
012fc                 | 
012fc                 | ___default_getc
012fc     03 4C 05 F6 | 	mov	COUNT_, #3
01300     A9 00 A0 FD | 	call	#pushregs_
01304     3A 8D 02 F6 | 	mov	local01, arg01
01308     46 8F 02 FB | 	rdlong	local02, local01
0130c     08 8E 06 F1 | 	add	local02, #8
01310     47 91 02 FB | 	rdlong	local03, local02
01314     02 90 CE F7 | 	test	local03, #2 wz
01318     46 75 02 56 |  if_ne	mov	arg01, local01
0131c     6C 01 B0 5D |  if_ne	call	#___default_flush
01320     47 91 02 FB | 	rdlong	local03, local02
01324     01 90 46 F5 | 	or	local03, #1
01328     47 91 62 FC | 	wrlong	local03, local02
0132c     08 8E 86 F1 | 	sub	local02, #8
01330     47 91 0A FB | 	rdlong	local03, local02 wz
01334     0C 00 90 5D |  if_ne	jmp	#LR__0042
01338     46 75 02 F6 | 	mov	arg01, local01
0133c     08 78 B1 FD | 	call	#___default_filbuf
01340     1A 91 02 F6 | 	mov	local03, result1
01344                 | LR__0042
01344     01 90 56 F2 | 	cmps	local03, #1 wc
01348                 | '         return -1;
01348     01 34 66 C6 |  if_b	neg	result1, #1
0134c     1C 00 90 CD |  if_b	jmp	#LR__0043
01350     01 90 86 F1 | 	sub	local03, #1
01354     47 91 62 FC | 	wrlong	local03, local02
01358     04 8E 06 F1 | 	add	local02, #4
0135c     47 91 02 FB | 	rdlong	local03, local02
01360     48 35 C2 FA | 	rdbyte	result1, local03
01364     01 90 06 F1 | 	add	local03, #1
01368     47 91 62 FC | 	wrlong	local03, local02
0136c                 | '     }
0136c                 | '     b->cnt = i-1;
0136c                 | '     ptr = b->ptr;
0136c                 | '     i = *ptr++;
0136c                 | '     b->ptr = ptr;
0136c                 | '     return i;
0136c                 | LR__0043
0136c     A8 F0 03 F6 | 	mov	ptra, fp
01370     B3 00 A0 FD | 	call	#popregs_
01374                 | ___default_getc_ret
01374     2D 00 64 FD | 	ret
01378                 | 
01378                 | ___default_putc
01378     04 4C 05 F6 | 	mov	COUNT_, #4
0137c     A9 00 A0 FD | 	call	#pushregs_
01380     3A 8D 02 F6 | 	mov	local01, arg01
01384     3B 8F 02 F6 | 	mov	local02, arg02
01388     47 91 02 FB | 	rdlong	local03, local02
0138c     08 90 06 F1 | 	add	local03, #8
01390     48 35 02 FB | 	rdlong	result1, local03
01394     01 34 CE F7 | 	test	result1, #1 wz
01398     47 75 02 56 |  if_ne	mov	arg01, local02
0139c     EC 00 B0 5D |  if_ne	call	#___default_flush
013a0     48 75 02 FB | 	rdlong	arg01, local03
013a4     02 74 46 F5 | 	or	arg01, #2
013a8     48 75 62 FC | 	wrlong	arg01, local03
013ac     08 90 86 F1 | 	sub	local03, #8
013b0     48 75 02 FB | 	rdlong	arg01, local03
013b4     3A 93 02 F6 | 	mov	local04, arg01
013b8     0C 90 06 F1 | 	add	local03, #12
013bc     48 93 02 F1 | 	add	local04, local03
013c0     49 8D 42 FC | 	wrbyte	local01, local04
013c4     46 8D E2 F8 | 	getbyte	local01, local01, #0
013c8     01 74 06 F1 | 	add	arg01, #1
013cc     0C 90 86 F1 | 	sub	local03, #12
013d0     48 75 62 FC | 	wrlong	arg01, local03
013d4     02 00 00 FF 
013d8     00 74 0E F2 | 	cmp	arg01, ##1024 wz
013dc     10 00 90 5D |  if_ne	jmp	#LR__0044
013e0     47 75 02 F6 | 	mov	arg01, local02
013e4     A4 00 B0 FD | 	call	#___default_flush
013e8     00 34 0E F2 | 	cmp	result1, #0 wz
013ec     01 8C 66 56 |  if_ne	neg	local01, #1
013f0                 | LR__0044
013f0                 | '             c = -1;
013f0                 | '         }
013f0                 | '     }
013f0                 | '     return c;
013f0     46 35 02 F6 | 	mov	result1, local01
013f4     A8 F0 03 F6 | 	mov	ptra, fp
013f8     B3 00 A0 FD | 	call	#popregs_
013fc                 | ___default_putc_ret
013fc     2D 00 64 FD | 	ret
01400                 | 
01400                 | ___default_putc_terminal
01400     04 4C 05 F6 | 	mov	COUNT_, #4
01404     A9 00 A0 FD | 	call	#pushregs_
01408     3A 8D 02 F6 | 	mov	local01, arg01
0140c     3B 8F 02 F6 | 	mov	local02, arg02
01410     47 91 02 FB | 	rdlong	local03, local02
01414     08 90 06 F1 | 	add	local03, #8
01418     48 35 02 FB | 	rdlong	result1, local03
0141c     01 34 CE F7 | 	test	result1, #1 wz
01420     47 75 02 56 |  if_ne	mov	arg01, local02
01424     64 00 B0 5D |  if_ne	call	#___default_flush
01428     48 75 02 FB | 	rdlong	arg01, local03
0142c     02 74 46 F5 | 	or	arg01, #2
01430     48 75 62 FC | 	wrlong	arg01, local03
01434     08 90 86 F1 | 	sub	local03, #8
01438     48 75 02 FB | 	rdlong	arg01, local03
0143c     3A 93 02 F6 | 	mov	local04, arg01
01440     0C 90 06 F1 | 	add	local03, #12
01444     48 93 02 F1 | 	add	local04, local03
01448     49 8D 42 FC | 	wrbyte	local01, local04
0144c     46 8D E2 F8 | 	getbyte	local01, local01, #0
01450     0C 90 86 F1 | 	sub	local03, #12
01454     01 74 06 F1 | 	add	arg01, #1
01458     48 75 62 FC | 	wrlong	arg01, local03
0145c     0A 8C 0E F2 | 	cmp	local01, #10 wz
01460     02 00 00 5F 
01464     00 74 0E 52 |  if_ne	cmp	arg01, ##1024 wz
01468     10 00 90 5D |  if_ne	jmp	#LR__0045
0146c     47 75 02 F6 | 	mov	arg01, local02
01470     18 00 B0 FD | 	call	#___default_flush
01474     00 34 0E F2 | 	cmp	result1, #0 wz
01478     01 8C 66 56 |  if_ne	neg	local01, #1
0147c                 | LR__0045
0147c                 | '             c = -1;
0147c                 | '         }
0147c                 | '     }
0147c                 | '     return c;
0147c     46 35 02 F6 | 	mov	result1, local01
01480     A8 F0 03 F6 | 	mov	ptra, fp
01484     B3 00 A0 FD | 	call	#popregs_
01488                 | ___default_putc_terminal_ret
01488     2D 00 64 FD | 	ret
0148c                 | 
0148c                 | ___default_flush
0148c     0D 4C 05 F6 | 	mov	COUNT_, #13
01490     A9 00 A0 FD | 	call	#pushregs_
01494     3A 8D 02 F6 | 	mov	local01, arg01
01498     46 8F 02 FB | 	rdlong	local02, local01
0149c     47 91 02 FB | 	rdlong	local03, local02
014a0     08 8E 06 F1 | 	add	local02, #8
014a4     47 93 02 FB | 	rdlong	local04, local02
014a8     08 8E 86 F1 | 	sub	local02, #8
014ac     02 92 CE F7 | 	test	local04, #2 wz
014b0     B8 00 90 AD |  if_e	jmp	#LR__0048
014b4     01 90 56 F2 | 	cmps	local03, #1 wc
014b8     24 01 90 CD |  if_b	jmp	#LR__0050
014bc     08 8C 06 F1 | 	add	local01, #8
014c0     46 93 02 FB | 	rdlong	local04, local01
014c4     08 8C 86 F1 | 	sub	local01, #8
014c8     40 92 CE F7 | 	test	local04, #64 wz
014cc     5C 00 90 AD |  if_e	jmp	#LR__0047
014d0     08 8C 06 F1 | 	add	local01, #8
014d4     46 93 02 FB | 	rdlong	local04, local01
014d8     08 8C 86 F1 | 	sub	local01, #8
014dc     80 92 CE F7 | 	test	local04, #128 wz
014e0     48 00 90 AD |  if_e	jmp	#LR__0046
014e4     2C 8C 06 F1 | 	add	local01, #44
014e8     46 93 02 FB | 	rdlong	local04, local01
014ec     2C 8C 86 F1 | 	sub	local01, #44
014f0     49 95 02 FB | 	rdlong	local05, local04
014f4     04 92 06 F1 | 	add	local04, #4
014f8     49 93 02 FB | 	rdlong	local04, local04
014fc     46 75 02 F6 | 	mov	arg01, local01
01500     00 76 06 F6 | 	mov	arg02, #0
01504     02 78 06 F6 | 	mov	arg03, #2
01508     C9 96 02 F6 | 	mov	local06, objptr
0150c     4A 93 01 F6 | 	mov	objptr, local05
01510     2D 92 62 FD | 	call	local04
01514     4B 93 01 F6 | 	mov	objptr, local06
01518     08 8C 06 F1 | 	add	local01, #8
0151c     46 93 02 FB | 	rdlong	local04, local01
01520     80 92 26 F5 | 	andn	local04, #128
01524     46 93 62 FC | 	wrlong	local04, local01
01528     08 8C 86 F1 | 	sub	local01, #8
0152c                 | LR__0046
0152c                 | LR__0047
0152c     14 8C 06 F1 | 	add	local01, #20
01530     46 93 02 FB | 	rdlong	local04, local01
01534     14 8C 86 F1 | 	sub	local01, #20
01538     49 95 02 FB | 	rdlong	local05, local04
0153c     04 92 06 F1 | 	add	local04, #4
01540     49 99 02 FB | 	rdlong	local07, local04
01544     0C 8E 06 F1 | 	add	local02, #12
01548     47 77 02 F6 | 	mov	arg02, local02
0154c     0C 8E 86 F1 | 	sub	local02, #12
01550     46 75 02 F6 | 	mov	arg01, local01
01554     48 79 02 F6 | 	mov	arg03, local03
01558     C9 96 02 F6 | 	mov	local06, objptr
0155c     4A 93 01 F6 | 	mov	objptr, local05
01560     2D 98 62 FD | 	call	local07
01564     4B 93 01 F6 | 	mov	objptr, local06
01568     74 00 90 FD | 	jmp	#LR__0050
0156c                 | LR__0048
0156c     08 8E 06 F1 | 	add	local02, #8
01570     47 93 02 FB | 	rdlong	local04, local02
01574     08 8E 86 F1 | 	sub	local02, #8
01578     01 92 CE F7 | 	test	local04, #1 wz
0157c     60 00 90 AD |  if_e	jmp	#LR__0049
01580     00 90 0E F2 | 	cmp	local03, #0 wz
01584     58 00 90 AD |  if_e	jmp	#LR__0049
01588     2C 8C 06 F1 | 	add	local01, #44
0158c     46 9B 02 FB | 	rdlong	local08, local01
01590     2C 8C 86 F1 | 	sub	local01, #44
01594     4D 93 02 F6 | 	mov	local04, local08
01598     49 95 02 FB | 	rdlong	local05, local04
0159c     04 92 06 F1 | 	add	local04, #4
015a0     49 9D 02 FB | 	rdlong	local09, local04
015a4     4E 99 02 F6 | 	mov	local07, local09
015a8     46 9F 02 F6 | 	mov	local10, local01
015ac     48 A1 62 F6 | 	neg	local11, local03
015b0     01 A2 06 F6 | 	mov	local12, #1
015b4     4F 75 02 F6 | 	mov	arg01, local10
015b8     50 77 02 F6 | 	mov	arg02, local11
015bc     01 78 06 F6 | 	mov	arg03, #1
015c0     C9 96 02 F6 | 	mov	local06, objptr
015c4     4A 93 01 F6 | 	mov	objptr, local05
015c8     2D 98 62 FD | 	call	local07
015cc     4B 93 01 F6 | 	mov	objptr, local06
015d0     1A 93 02 F6 | 	mov	local04, result1
015d4     49 A5 02 F6 | 	mov	local13, local04
015d8     00 A4 56 F2 | 	cmps	local13, #0 wc
015dc     48 A5 02 36 |  if_ae	mov	local13, local03
015e0                 | LR__0049
015e0                 | LR__0050
015e0     47 01 68 FC | 	wrlong	#0, local02
015e4     04 8E 06 F1 | 	add	local02, #4
015e8     47 01 68 FC | 	wrlong	#0, local02
015ec     04 8E 06 F1 | 	add	local02, #4
015f0     47 01 68 FC | 	wrlong	#0, local02
015f4                 | '     }
015f4                 | '     b->cnt = 0;
015f4                 | '     b->ptr = 0;
015f4                 | '     b->flags = 0;
015f4                 | '     return 0;
015f4     00 34 06 F6 | 	mov	result1, #0
015f8     A8 F0 03 F6 | 	mov	ptra, fp
015fc     B3 00 A0 FD | 	call	#popregs_
01600                 | ___default_flush_ret
01600     2D 00 64 FD | 	ret
01604                 | 
01604                 | _open
01604     05 4C 05 F6 | 	mov	COUNT_, #5
01608     A9 00 A0 FD | 	call	#pushregs_
0160c     3A 8D 02 F6 | 	mov	local01, arg01
01610     3B 8F 02 F6 | 	mov	local02, arg02
01614     3C 91 02 F6 | 	mov	local03, arg03
01618     AA 00 00 FF 
0161c     60 D7 05 F1 | 	add	ptr__dat__, ##87392
01620     EB 92 02 F6 | 	mov	local04, ptr__dat__
01624                 | ' 
01624                 | '     for (fd = 0; fd <  10 ; fd++) {
01624     00 94 06 F6 | 	mov	local05, #0
01628     AA 00 00 FF 
0162c     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
01630     F8 E9 9F FE | 	loc	pa,	#(@LR__0052-@LR__0051)
01634     8C 00 A0 FD | 	call	#FCACHE_LOAD_
01638                 | LR__0051
01638     0A 94 56 F2 | 	cmps	local05, #10 wc
0163c     24 00 90 3D |  if_ae	jmp	#LR__0053
01640     4A 35 02 F6 | 	mov	result1, local05
01644     01 34 66 F0 | 	shl	result1, #1
01648     4A 35 02 F1 | 	add	result1, local05
0164c     04 34 66 F0 | 	shl	result1, #4
01650     49 35 02 F1 | 	add	result1, local04
01654     08 34 06 F1 | 	add	result1, #8
01658     1A 35 0A FB | 	rdlong	result1, result1 wz
0165c     01 94 06 51 |  if_ne	add	local05, #1
01660     D4 FF 9F 5D |  if_ne	jmp	#LR__0051
01664                 | LR__0052
01664                 | LR__0053
01664     0A 94 0E F2 | 	cmp	local05, #10 wz
01668                 | '         return _seterror( 11 );
01668     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
0166c     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
01670     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01674     01 34 66 A6 |  if_e	neg	result1, #1
01678     2C 00 90 AD |  if_e	jmp	#LR__0054
0167c     4A 75 02 F6 | 	mov	arg01, local05
01680     01 74 66 F0 | 	shl	arg01, #1
01684     4A 75 02 F1 | 	add	arg01, local05
01688     04 74 66 F0 | 	shl	arg01, #4
0168c     49 75 02 F1 | 	add	arg01, local04
01690     46 77 02 F6 | 	mov	arg02, local01
01694     47 79 02 F6 | 	mov	arg03, local02
01698     48 7B 02 F6 | 	mov	arg04, local03
0169c     98 F5 BF FD | 	call	#__openraw
016a0     00 34 4E F2 | 	cmps	result1, #0 wz
016a4     4A 35 02 A6 |  if_e	mov	result1, local05
016a8                 | '         r = fd;
016a8                 | '     }
016a8                 | '     return r;
016a8                 | LR__0054
016a8     A8 F0 03 F6 | 	mov	ptra, fp
016ac     B3 00 A0 FD | 	call	#popregs_
016b0                 | _open_ret
016b0     2D 00 64 FD | 	ret
016b4                 | 
016b4                 | _write
016b4     01 4C 05 F6 | 	mov	COUNT_, #1
016b8     A9 00 A0 FD | 	call	#pushregs_
016bc     3A 8D 02 F6 | 	mov	local01, arg01
016c0     0A 8C 16 F2 | 	cmp	local01, #10 wc
016c4                 | '         return _seterror( 5 );
016c4     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
016c8     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
016cc     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
016d0     01 34 66 36 |  if_ae	neg	result1, #1
016d4     28 00 90 3D |  if_ae	jmp	#LR__0055
016d8     46 75 02 F6 | 	mov	arg01, local01
016dc     01 74 66 F0 | 	shl	arg01, #1
016e0     46 75 02 F1 | 	add	arg01, local01
016e4     04 74 66 F0 | 	shl	arg01, #4
016e8     AA 00 00 FF 
016ec     60 D7 05 F1 | 	add	ptr__dat__, ##87392
016f0     EB 74 02 F1 | 	add	arg01, ptr__dat__
016f4                 | '     }
016f4                 | '     f = &__filetab[fd];
016f4                 | '     return _vfswrite(f, vbuf, count);
016f4     AA 00 00 FF 
016f8     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
016fc     88 1B B1 FD | 	call	#__vfswrite
01700                 | LR__0055
01700     A8 F0 03 F6 | 	mov	ptra, fp
01704     B3 00 A0 FD | 	call	#popregs_
01708                 | _write_ret
01708     2D 00 64 FD | 	ret
0170c                 | 
0170c                 | _read
0170c     01 4C 05 F6 | 	mov	COUNT_, #1
01710     A9 00 A0 FD | 	call	#pushregs_
01714     3A 8D 02 F6 | 	mov	local01, arg01
01718     0A 8C 16 F2 | 	cmp	local01, #10 wc
0171c                 | '         return _seterror( 5 );
0171c     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
01720     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
01724     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
01728     01 34 66 36 |  if_ae	neg	result1, #1
0172c     28 00 90 3D |  if_ae	jmp	#LR__0056
01730     46 75 02 F6 | 	mov	arg01, local01
01734     01 74 66 F0 | 	shl	arg01, #1
01738     46 75 02 F1 | 	add	arg01, local01
0173c     04 74 66 F0 | 	shl	arg01, #4
01740     AA 00 00 FF 
01744     60 D7 05 F1 | 	add	ptr__dat__, ##87392
01748     EB 74 02 F1 | 	add	arg01, ptr__dat__
0174c                 | '     }
0174c                 | '     f = &__filetab[fd];
0174c                 | '     return _vfsread(f, vbuf, count);
0174c     AA 00 00 FF 
01750     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
01754     D4 1C B1 FD | 	call	#__vfsread
01758                 | LR__0056
01758     A8 F0 03 F6 | 	mov	ptra, fp
0175c     B3 00 A0 FD | 	call	#popregs_
01760                 | _read_ret
01760     2D 00 64 FD | 	ret
01764                 | 
01764                 | _close
01764     01 4C 05 F6 | 	mov	COUNT_, #1
01768     A9 00 A0 FD | 	call	#pushregs_
0176c     3A 8D 02 F6 | 	mov	local01, arg01
01770     0A 8C 16 F2 | 	cmp	local01, #10 wc
01774                 | '         return _seterror( 5 );
01774     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
01778     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
0177c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
01780     01 34 66 36 |  if_ae	neg	result1, #1
01784     28 00 90 3D |  if_ae	jmp	#LR__0057
01788     46 75 02 F6 | 	mov	arg01, local01
0178c     01 74 66 F0 | 	shl	arg01, #1
01790     46 75 02 F1 | 	add	arg01, local01
01794     04 74 66 F0 | 	shl	arg01, #4
01798     AA 00 00 FF 
0179c     60 D7 05 F1 | 	add	ptr__dat__, ##87392
017a0     EB 74 02 F1 | 	add	arg01, ptr__dat__
017a4                 | '     }
017a4                 | '     f = &__filetab[fd];
017a4                 | '     return _closeraw(f);
017a4     AA 00 00 FF 
017a8     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
017ac     BC F9 BF FD | 	call	#__closeraw
017b0                 | LR__0057
017b0     A8 F0 03 F6 | 	mov	ptra, fp
017b4     B3 00 A0 FD | 	call	#popregs_
017b8                 | _close_ret
017b8     2D 00 64 FD | 	ret
017bc                 | 
017bc                 | _lseek
017bc     06 4C 05 F6 | 	mov	COUNT_, #6
017c0     A9 00 A0 FD | 	call	#pushregs_
017c4     0A 74 16 F2 | 	cmp	arg01, #10 wc
017c8                 | '         return _seterror( 5 );
017c8     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
017cc     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
017d0     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
017d4     01 34 66 36 |  if_ae	neg	result1, #1
017d8     C0 00 90 3D |  if_ae	jmp	#LR__0059
017dc     3A 8D 02 F6 | 	mov	local01, arg01
017e0     01 8C 66 F0 | 	shl	local01, #1
017e4     3A 8D 02 F1 | 	add	local01, arg01
017e8     04 8C 66 F0 | 	shl	local01, #4
017ec     AA 00 00 FF 
017f0     60 D7 05 F1 | 	add	ptr__dat__, ##87392
017f4     EB 8C 02 F1 | 	add	local01, ptr__dat__
017f8     2C 8C 06 F1 | 	add	local01, #44
017fc     46 75 0A FB | 	rdlong	arg01, local01 wz
01800     2C 8C 86 F1 | 	sub	local01, #44
01804     AA 00 00 FF 
01808     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
0180c                 | '         return _seterror( 16 );
0180c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01810     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
01814     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01818     01 34 66 A6 |  if_e	neg	result1, #1
0181c     7C 00 90 AD |  if_e	jmp	#LR__0059
01820     08 8C 06 F1 | 	add	local01, #8
01824     46 8F 02 FB | 	rdlong	local02, local01
01828     08 8C 86 F1 | 	sub	local01, #8
0182c     40 8E CE F7 | 	test	local02, #64 wz
01830     08 8C 06 51 |  if_ne	add	local01, #8
01834     46 8F 02 5B |  if_ne	rdlong	local02, local01
01838     80 8E 46 55 |  if_ne	or	local02, #128
0183c     46 8F 62 5C |  if_ne	wrlong	local02, local01
01840     08 8C 86 51 |  if_ne	sub	local01, #8
01844     2C 8C 06 F1 | 	add	local01, #44
01848     46 8F 02 FB | 	rdlong	local02, local01
0184c     2C 8C 86 F1 | 	sub	local01, #44
01850     47 91 02 FB | 	rdlong	local03, local02
01854     04 8E 06 F1 | 	add	local02, #4
01858     47 93 02 FB | 	rdlong	local04, local02
0185c     46 75 02 F6 | 	mov	arg01, local01
01860     C9 94 02 F6 | 	mov	local05, objptr
01864     48 93 01 F6 | 	mov	objptr, local03
01868     2D 92 62 FD | 	call	local04
0186c     4A 93 01 F6 | 	mov	objptr, local05
01870     1A 97 02 F6 | 	mov	local06, result1
01874     00 96 56 F2 | 	cmps	local06, #0 wc
01878     1C 00 90 3D |  if_ae	jmp	#LR__0058
0187c                 | '         return _seterror(-r);
0187c     4B 75 6A F6 | 	neg	arg01, local06 wz
01880     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01884     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01888     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0188c     01 34 66 56 |  if_ne	neg	result1, #1
01890     00 34 06 A6 |  if_e	mov	result1, #0
01894     04 00 90 FD | 	jmp	#LR__0059
01898                 | LR__0058
01898                 | '     }
01898                 | '     return r;
01898     4B 35 02 F6 | 	mov	result1, local06
0189c                 | LR__0059
0189c     A8 F0 03 F6 | 	mov	ptra, fp
018a0     B3 00 A0 FD | 	call	#popregs_
018a4                 | _lseek_ret
018a4     2D 00 64 FD | 	ret
018a8                 | 
018a8                 | _ioctl
018a8     04 4C 05 F6 | 	mov	COUNT_, #4
018ac     A9 00 A0 FD | 	call	#pushregs_
018b0     70 04 B0 FD | 	call	#___getftab
018b4     1A 8D 0A F6 | 	mov	local01, result1 wz
018b8                 | '         return _seterror( 5 );
018b8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
018bc     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
018c0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
018c4     01 34 66 A6 |  if_e	neg	result1, #1
018c8     54 00 90 AD |  if_e	jmp	#LR__0061
018cc     24 8C 06 F1 | 	add	local01, #36
018d0     46 75 02 FB | 	rdlong	arg01, local01
018d4     24 8C 86 F1 | 	sub	local01, #36
018d8     3A 8F 02 FB | 	rdlong	local02, arg01
018dc     04 74 06 F1 | 	add	arg01, #4
018e0     3A 91 02 FB | 	rdlong	local03, arg01
018e4     46 75 02 F6 | 	mov	arg01, local01
018e8     C9 92 02 F6 | 	mov	local04, objptr
018ec     47 93 01 F6 | 	mov	objptr, local02
018f0     2D 90 62 FD | 	call	local03
018f4     49 93 01 F6 | 	mov	objptr, local04
018f8     1A 75 0A F6 | 	mov	arg01, result1 wz
018fc     1C 00 90 AD |  if_e	jmp	#LR__0060
01900                 | '         return _seterror(r);
01900     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01904     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01908     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0190c     00 74 0E F2 | 	cmp	arg01, #0 wz
01910     01 34 66 56 |  if_ne	neg	result1, #1
01914     00 34 06 A6 |  if_e	mov	result1, #0
01918     04 00 90 FD | 	jmp	#LR__0061
0191c                 | LR__0060
0191c                 | '     }
0191c                 | '     return 0;
0191c     00 34 06 F6 | 	mov	result1, #0
01920                 | LR__0061
01920     A8 F0 03 F6 | 	mov	ptra, fp
01924     B3 00 A0 FD | 	call	#popregs_
01928                 | _ioctl_ret
01928     2D 00 64 FD | 	ret
0192c                 | 
0192c                 | _access
0192c     06 4C 05 F6 | 	mov	COUNT_, #6
01930     A9 00 A0 FD | 	call	#pushregs_
01934     3C F0 07 F1 | 	add	ptra, #60
01938     04 50 05 F1 | 	add	fp, #4
0193c     A8 74 62 FC | 	wrlong	arg01, fp
01940     04 50 05 F1 | 	add	fp, #4
01944     A8 76 62 FC | 	wrlong	arg02, fp
01948     04 50 85 F1 | 	sub	fp, #4
0194c     A8 74 02 FB | 	rdlong	arg01, fp
01950     08 50 05 F1 | 	add	fp, #8
01954     A8 76 02 F6 | 	mov	arg02, fp
01958     0C 50 85 F1 | 	sub	fp, #12
0195c     EC 17 B1 FD | 	call	#_stat
01960     00 34 56 F2 | 	cmps	result1, #0 wc
01964                 | ' 		return -1;
01964     01 34 66 C6 |  if_b	neg	result1, #1
01968     DC 00 90 CD |  if_b	jmp	#LR__0065
0196c     08 50 05 F1 | 	add	fp, #8
01970     A8 8C 0A FB | 	rdlong	local01, fp wz
01974     08 50 85 F1 | 	sub	fp, #8
01978                 | ' 		return 0;
01978     00 34 06 A6 |  if_e	mov	result1, #0
0197c     C8 00 90 AD |  if_e	jmp	#LR__0065
01980     1C 50 05 F1 | 	add	fp, #28
01984     A8 8C E2 FA | 	rdword	local01, fp
01988     1C 50 85 F1 | 	sub	fp, #28
0198c     0F 8C 4E F7 | 	zerox	local01, #15 wz
01990     2C 00 90 5D |  if_ne	jmp	#LR__0062
01994     14 50 05 F1 | 	add	fp, #20
01998     A8 8C 02 FB | 	rdlong	local01, fp
0199c     06 8C 46 F0 | 	shr	local01, #6
019a0     0C 50 85 F1 | 	sub	fp, #12
019a4     A8 76 02 FB | 	rdlong	arg02, fp
019a8     3B 8D 02 F5 | 	and	local01, arg02
019ac     08 50 85 F1 | 	sub	fp, #8
019b0     3B 8D 0A F2 | 	cmp	local01, arg02 wz
019b4                 | ' 			return 0;
019b4     00 34 06 A6 |  if_e	mov	result1, #0
019b8     8C 00 90 AD |  if_e	jmp	#LR__0065
019bc                 | ' 			goto accdn;
019bc     74 00 90 FD | 	jmp	#LR__0064
019c0                 | LR__0062
019c0     1E 50 05 F1 | 	add	fp, #30
019c4     A8 8C E2 FA | 	rdword	local01, fp
019c8     1E 50 85 F1 | 	sub	fp, #30
019cc     0F 8C 4E F7 | 	zerox	local01, #15 wz
019d0     2C 00 90 5D |  if_ne	jmp	#LR__0063
019d4     14 50 05 F1 | 	add	fp, #20
019d8     A8 8C 02 FB | 	rdlong	local01, fp
019dc     03 8C 46 F0 | 	shr	local01, #3
019e0     0C 50 85 F1 | 	sub	fp, #12
019e4     A8 76 02 FB | 	rdlong	arg02, fp
019e8     3B 8D 02 F5 | 	and	local01, arg02
019ec     08 50 85 F1 | 	sub	fp, #8
019f0     3B 8D 0A F2 | 	cmp	local01, arg02 wz
019f4                 | ' 			return 0;
019f4     00 34 06 A6 |  if_e	mov	result1, #0
019f8     4C 00 90 AD |  if_e	jmp	#LR__0065
019fc                 | ' 			goto accdn;
019fc     34 00 90 FD | 	jmp	#LR__0064
01a00                 | LR__0063
01a00     14 50 05 F1 | 	add	fp, #20
01a04     A8 8E 02 FB | 	rdlong	local02, fp
01a08     47 8D 02 F6 | 	mov	local01, local02
01a0c     0C 50 85 F1 | 	sub	fp, #12
01a10     A8 90 02 FB | 	rdlong	local03, fp
01a14     48 93 02 F6 | 	mov	local04, local03
01a18     49 8D 02 F5 | 	and	local01, local04
01a1c     48 95 02 F6 | 	mov	local05, local03
01a20     08 50 85 F1 | 	sub	fp, #8
01a24     4A 97 02 F6 | 	mov	local06, local05
01a28     4B 8D 0A F2 | 	cmp	local01, local06 wz
01a2c                 | ' 		return 0;
01a2c     00 34 06 A6 |  if_e	mov	result1, #0
01a30     14 00 90 AD |  if_e	jmp	#LR__0065
01a34                 | LR__0064
01a34     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01a38     D1 34 02 F6 | 	mov	result1, ptr___system__dat__
01a3c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01a40     1A 0D 68 FC | 	wrlong	#6, result1
01a44                 | ' accdn:
01a44                 | ' 	(*(_geterrnoptr()))  =  6 ; return -1;
01a44     01 34 66 F6 | 	neg	result1, #1
01a48                 | LR__0065
01a48     A8 F0 03 F6 | 	mov	ptra, fp
01a4c     B3 00 A0 FD | 	call	#popregs_
01a50                 | _access_ret
01a50     2D 00 64 FD | 	ret
01a54                 | 
01a54                 | _isatty
01a54     00 4C 05 F6 | 	mov	COUNT_, #0
01a58     A9 00 A0 FD | 	call	#pushregs_
01a5c     0C F0 07 F1 | 	add	ptra, #12
01a60     04 50 05 F1 | 	add	fp, #4
01a64     A8 74 62 FC | 	wrlong	arg01, fp
01a68     04 50 05 F1 | 	add	fp, #4
01a6c     A8 78 02 F6 | 	mov	arg03, fp
01a70     08 50 85 F1 | 	sub	fp, #8
01a74     00 77 06 F6 | 	mov	arg02, #256
01a78     2C FE BF FD | 	call	#_ioctl
01a7c     00 34 0E F2 | 	cmp	result1, #0 wz
01a80                 | '         return 1;
01a80     01 34 06 A6 |  if_e	mov	result1, #1
01a84                 | '     }
01a84                 | '     return 0;
01a84     00 34 06 56 |  if_ne	mov	result1, #0
01a88     A8 F0 03 F6 | 	mov	ptra, fp
01a8c     B3 00 A0 FD | 	call	#popregs_
01a90                 | _isatty_ret
01a90     2D 00 64 FD | 	ret
01a94                 | 
01a94                 | _chdir
01a94     00 4C 05 F6 | 	mov	COUNT_, #0
01a98     A9 00 A0 FD | 	call	#pushregs_
01a9c     40 F0 07 F1 | 	add	ptra, #64
01aa0     04 50 05 F1 | 	add	fp, #4
01aa4     A8 74 62 FC | 	wrlong	arg01, fp
01aa8     04 50 05 F1 | 	add	fp, #4
01aac     A8 76 02 F6 | 	mov	arg02, fp
01ab0     08 50 85 F1 | 	sub	fp, #8
01ab4     94 16 B1 FD | 	call	#_stat
01ab8     3C 50 05 F1 | 	add	fp, #60
01abc     A8 34 62 FC | 	wrlong	result1, fp
01ac0     3C 50 85 F1 | 	sub	fp, #60
01ac4     00 34 0E F2 | 	cmp	result1, #0 wz
01ac8                 | ' #line 294 "C:/flexprop/include/libc/unix/_mount.c"
01ac8                 | '         return r;
01ac8     3C 50 05 51 |  if_ne	add	fp, #60
01acc     A8 34 02 5B |  if_ne	rdlong	result1, fp
01ad0     3C 50 85 51 |  if_ne	sub	fp, #60
01ad4     D4 00 90 5D |  if_ne	jmp	#LR__0068
01ad8     10 50 05 F1 | 	add	fp, #16
01adc     A8 74 02 FB | 	rdlong	arg01, fp
01ae0     10 50 85 F1 | 	sub	fp, #16
01ae4     78 00 00 FF 
01ae8     00 74 06 F5 | 	and	arg01, ##61440
01aec     08 00 00 FF 
01af0     00 74 0E F2 | 	cmp	arg01, ##4096 wz
01af4                 | ' #line 300 "C:/flexprop/include/libc/unix/_mount.c"
01af4                 | '         return _seterror( 13 );
01af4     18 A2 05 51 |  if_ne	add	ptr___system__dat__, #24
01af8     D1 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
01afc     18 A2 85 51 |  if_ne	sub	ptr___system__dat__, #24
01b00     01 34 66 56 |  if_ne	neg	result1, #1
01b04     A4 00 90 5D |  if_ne	jmp	#LR__0068
01b08     04 50 05 F1 | 	add	fp, #4
01b0c     A8 78 02 FB | 	rdlong	arg03, fp
01b10     04 50 85 F1 | 	sub	fp, #4
01b14     3C 79 C2 FA | 	rdbyte	arg03, arg03
01b18     2F 78 0E F2 | 	cmp	arg03, #47 wz
01b1c     2C 00 90 5D |  if_ne	jmp	#LR__0066
01b20     15 01 00 FF 
01b24     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
01b28     EB 74 02 F6 | 	mov	arg01, ptr__dat__
01b2c     15 01 00 FF 
01b30     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
01b34     04 50 05 F1 | 	add	fp, #4
01b38     A8 76 02 FB | 	rdlong	arg02, fp
01b3c     04 50 85 F1 | 	sub	fp, #4
01b40     00 79 06 F6 | 	mov	arg03, #256
01b44     A4 44 B0 FD | 	call	#_strncpy
01b48     5C 00 90 FD | 	jmp	#LR__0067
01b4c                 | LR__0066
01b4c                 | '     return tmpname;
01b4c     16 01 00 FF 
01b50     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
01b54     EB 74 02 F6 | 	mov	arg01, ptr__dat__
01b58     38 50 05 F1 | 	add	fp, #56
01b5c     A8 74 62 FC | 	wrlong	arg01, fp
01b60     38 50 85 F1 | 	sub	fp, #56
01b64     00 D7 85 F1 | 	sub	ptr__dat__, #256
01b68     EB 76 02 F6 | 	mov	arg02, ptr__dat__
01b6c     15 01 00 FF 
01b70     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
01b74     00 79 06 F6 | 	mov	arg03, #256
01b78     70 44 B0 FD | 	call	#_strncpy
01b7c     38 50 05 F1 | 	add	fp, #56
01b80     A8 74 02 FB | 	rdlong	arg01, fp
01b84     34 50 85 F1 | 	sub	fp, #52
01b88     A8 76 02 FB | 	rdlong	arg02, fp
01b8c     04 50 85 F1 | 	sub	fp, #4
01b90     15 01 00 FF 
01b94     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
01b98     EB 78 02 F6 | 	mov	arg03, ptr__dat__
01b9c     15 01 00 FF 
01ba0     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
01ba4     14 71 B1 FD | 	call	#___getvfsforfile
01ba8                 | LR__0067
01ba8                 | '         tmp = __getfilebuffer();
01ba8                 | '         strncpy(tmp, curdir,  (256) );
01ba8                 | '         __getvfsforfile(tmp, path, curdir);
01ba8                 | '     }
01ba8                 | '     return 0;
01ba8     00 34 06 F6 | 	mov	result1, #0
01bac                 | LR__0068
01bac     A8 F0 03 F6 | 	mov	ptra, fp
01bb0     B3 00 A0 FD | 	call	#popregs_
01bb4                 | _chdir_ret
01bb4     2D 00 64 FD | 	ret
01bb8                 | 
01bb8                 | _rmdir
01bb8     06 4C 05 F6 | 	mov	COUNT_, #6
01bbc     A9 00 A0 FD | 	call	#pushregs_
01bc0     3A 77 02 F6 | 	mov	arg02, arg01
01bc4                 | '     return tmpname;
01bc4     16 01 00 FF 
01bc8     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
01bcc     EB 8C 02 F6 | 	mov	local01, ptr__dat__
01bd0     46 75 02 F6 | 	mov	arg01, local01
01bd4     00 78 06 F6 | 	mov	arg03, #0
01bd8     16 01 00 FF 
01bdc     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
01be0     D8 70 B1 FD | 	call	#___getvfsforfile
01be4     1A 8F 0A F6 | 	mov	local02, result1 wz
01be8     3C 8E 06 51 |  if_ne	add	local02, #60
01bec     47 75 02 5B |  if_ne	rdlong	arg01, local02
01bf0     3C 8E 86 51 |  if_ne	sub	local02, #60
01bf4     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
01bf8                 | ' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
01bf8                 | '         return _seterror( 16 );
01bf8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01bfc     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
01c00     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01c04     01 34 66 A6 |  if_e	neg	result1, #1
01c08     50 00 90 AD |  if_e	jmp	#LR__0070
01c0c     3C 8E 06 F1 | 	add	local02, #60
01c10     47 75 02 FB | 	rdlong	arg01, local02
01c14     3A 91 02 FB | 	rdlong	local03, arg01
01c18     04 74 06 F1 | 	add	arg01, #4
01c1c     3A 93 02 FB | 	rdlong	local04, arg01
01c20     46 75 02 F6 | 	mov	arg01, local01
01c24     C9 94 02 F6 | 	mov	local05, objptr
01c28     48 93 01 F6 | 	mov	objptr, local03
01c2c     2D 92 62 FD | 	call	local04
01c30     4A 93 01 F6 | 	mov	objptr, local05
01c34     1A 97 0A F6 | 	mov	local06, result1 wz
01c38     1C 00 90 AD |  if_e	jmp	#LR__0069
01c3c                 | '         return _seterror(-r);
01c3c     4B 75 6A F6 | 	neg	arg01, local06 wz
01c40     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01c44     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01c48     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01c4c     01 34 66 56 |  if_ne	neg	result1, #1
01c50     00 34 06 A6 |  if_e	mov	result1, #0
01c54     04 00 90 FD | 	jmp	#LR__0070
01c58                 | LR__0069
01c58                 | '     }
01c58                 | '     return r;
01c58     4B 35 02 F6 | 	mov	result1, local06
01c5c                 | LR__0070
01c5c     A8 F0 03 F6 | 	mov	ptra, fp
01c60     B3 00 A0 FD | 	call	#popregs_
01c64                 | _rmdir_ret
01c64     2D 00 64 FD | 	ret
01c68                 | 
01c68                 | _mkdir
01c68     07 4C 05 F6 | 	mov	COUNT_, #7
01c6c     A9 00 A0 FD | 	call	#pushregs_
01c70     3A 79 02 F6 | 	mov	arg03, arg01
01c74     3B 8D 02 F6 | 	mov	local01, arg02
01c78                 | '     return tmpname;
01c78     16 01 00 FF 
01c7c     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
01c80     EB 8E 02 F6 | 	mov	local02, ptr__dat__
01c84     47 75 02 F6 | 	mov	arg01, local02
01c88     3C 77 02 F6 | 	mov	arg02, arg03
01c8c     00 78 06 F6 | 	mov	arg03, #0
01c90     16 01 00 FF 
01c94     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
01c98     20 70 B1 FD | 	call	#___getvfsforfile
01c9c     1A 91 0A F6 | 	mov	local03, result1 wz
01ca0     20 90 06 51 |  if_ne	add	local03, #32
01ca4     48 75 02 5B |  if_ne	rdlong	arg01, local03
01ca8     20 90 86 51 |  if_ne	sub	local03, #32
01cac     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
01cb0                 | ' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
01cb0                 | '         return _seterror( 16 );
01cb0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01cb4     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
01cb8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01cbc     01 34 66 A6 |  if_e	neg	result1, #1
01cc0     54 00 90 AD |  if_e	jmp	#LR__0072
01cc4     38 90 06 F1 | 	add	local03, #56
01cc8     48 77 02 FB | 	rdlong	arg02, local03
01ccc     3B 93 02 FB | 	rdlong	local04, arg02
01cd0     04 76 06 F1 | 	add	arg02, #4
01cd4     3B 95 02 FB | 	rdlong	local05, arg02
01cd8     47 75 02 F6 | 	mov	arg01, local02
01cdc     46 77 02 F6 | 	mov	arg02, local01
01ce0     C9 96 02 F6 | 	mov	local06, objptr
01ce4     49 93 01 F6 | 	mov	objptr, local04
01ce8     2D 94 62 FD | 	call	local05
01cec     4B 93 01 F6 | 	mov	objptr, local06
01cf0     1A 99 0A F6 | 	mov	local07, result1 wz
01cf4     1C 00 90 AD |  if_e	jmp	#LR__0071
01cf8                 | '         return _seterror(-r);
01cf8     4C 75 6A F6 | 	neg	arg01, local07 wz
01cfc     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01d00     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01d04     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01d08     01 34 66 56 |  if_ne	neg	result1, #1
01d0c     00 34 06 A6 |  if_e	mov	result1, #0
01d10     04 00 90 FD | 	jmp	#LR__0072
01d14                 | LR__0071
01d14                 | '     }
01d14                 | '     return r;
01d14     4C 35 02 F6 | 	mov	result1, local07
01d18                 | LR__0072
01d18     A8 F0 03 F6 | 	mov	ptra, fp
01d1c     B3 00 A0 FD | 	call	#popregs_
01d20                 | _mkdir_ret
01d20     2D 00 64 FD | 	ret
01d24                 | 
01d24                 | ___getftab
01d24     0A 74 16 F2 | 	cmp	arg01, #10 wc
01d28                 | '         return 0;
01d28     00 34 06 36 |  if_ae	mov	result1, #0
01d2c     24 00 90 3D |  if_ae	jmp	#___getftab_ret
01d30                 | '     }
01d30                 | '     return &__filetab[i];
01d30     3A 35 02 F6 | 	mov	result1, arg01
01d34     01 34 66 F0 | 	shl	result1, #1
01d38     3A 35 02 F1 | 	add	result1, arg01
01d3c     04 34 66 F0 | 	shl	result1, #4
01d40     AA 00 00 FF 
01d44     60 D7 05 F1 | 	add	ptr__dat__, ##87392
01d48     EB 34 02 F1 | 	add	result1, ptr__dat__
01d4c     AA 00 00 FF 
01d50     60 D7 85 F1 | 	sub	ptr__dat__, ##87392
01d54                 | ___getftab_ret
01d54     2D 00 64 FD | 	ret
01d58                 | 
01d58                 | _fgetc
01d58     03 4C 05 F6 | 	mov	COUNT_, #3
01d5c     A9 00 A0 FD | 	call	#pushregs_
01d60                 | '     return  (((f)->getcf)( (f) )) ;
01d60     1C 74 06 F1 | 	add	arg01, #28
01d64     3A 8D 02 FB | 	rdlong	local01, arg01
01d68     1C 74 86 F1 | 	sub	arg01, #28
01d6c     46 8F 02 FB | 	rdlong	local02, local01
01d70     04 8C 06 F1 | 	add	local01, #4
01d74     46 8D 02 FB | 	rdlong	local01, local01
01d78     C9 90 02 F6 | 	mov	local03, objptr
01d7c     47 93 01 F6 | 	mov	objptr, local02
01d80     2D 8C 62 FD | 	call	local01
01d84     48 93 01 F6 | 	mov	objptr, local03
01d88     A8 F0 03 F6 | 	mov	ptra, fp
01d8c     B3 00 A0 FD | 	call	#popregs_
01d90                 | _fgetc_ret
01d90     2D 00 64 FD | 	ret
01d94                 | 
01d94                 | _sprintf
01d94     00 4C 05 F6 | 	mov	COUNT_, #0
01d98     A9 00 A0 FD | 	call	#pushregs_
01d9c     20 F0 07 F1 | 	add	ptra, #32
01da0     04 50 05 F1 | 	add	fp, #4
01da4     A8 74 62 FC | 	wrlong	arg01, fp
01da8     04 50 05 F1 | 	add	fp, #4
01dac     A8 76 62 FC | 	wrlong	arg02, fp
01db0     04 50 05 F1 | 	add	fp, #4
01db4     A8 78 62 FC | 	wrlong	arg03, fp
01db8     08 50 85 F1 | 	sub	fp, #8
01dbc     A8 34 02 FB | 	rdlong	result1, fp
01dc0     10 50 05 F1 | 	add	fp, #16
01dc4     A8 34 62 FC | 	wrlong	result1, fp
01dc8     10 50 85 F1 | 	sub	fp, #16
01dcc     A8 34 02 FB | 	rdlong	result1, fp
01dd0     FF 7F 00 FF 
01dd4     FF 35 06 F1 | 	add	result1, ##16777215
01dd8     14 50 05 F1 | 	add	fp, #20
01ddc     A8 34 62 FC | 	wrlong	result1, fp
01de0     0C 50 85 F1 | 	sub	fp, #12
01de4     A8 34 02 FB | 	rdlong	result1, fp
01de8     A8 34 62 FC | 	wrlong	result1, fp
01dec     08 50 05 F1 | 	add	fp, #8
01df0     A8 74 02 F6 | 	mov	arg01, fp
01df4     14 50 85 F1 | 	sub	fp, #20
01df8     CE 76 02 F6 | 	mov	arg02, ptr___struct___anon_9b5668f900000005_sputc_
01dfc     38 3E B2 FD | 	call	#__system___make_methodptr
01e00     1A 75 02 F6 | 	mov	arg01, result1
01e04     08 50 05 F1 | 	add	fp, #8
01e08     A8 76 02 FB | 	rdlong	arg02, fp
01e0c     04 50 05 F1 | 	add	fp, #4
01e10     A8 78 02 F6 | 	mov	arg03, fp
01e14     0C 50 85 F1 | 	sub	fp, #12
01e18     F4 18 B1 FD | 	call	#__dofmt
01e1c     10 50 05 F1 | 	add	fp, #16
01e20     A8 34 62 FC | 	wrlong	result1, fp
01e24     04 50 05 F1 | 	add	fp, #4
01e28     00 74 06 F6 | 	mov	arg01, #0
01e2c     C9 78 02 F6 | 	mov	arg03, objptr
01e30     A8 92 01 F6 | 	mov	objptr, fp
01e34     14 50 85 F1 | 	sub	fp, #20
01e38     B4 3A B2 FD | 	call	#__struct___anon_9b5668f900000005_sputc
01e3c     3C 93 01 F6 | 	mov	objptr, arg03
01e40                 | '     r = _dofmt( &S.sputc, fmt, &args);
01e40                 | '     ;
01e40                 | '     S.sputc(0);
01e40                 | '     return r;
01e40     10 50 05 F1 | 	add	fp, #16
01e44     A8 34 02 FB | 	rdlong	result1, fp
01e48     10 50 85 F1 | 	sub	fp, #16
01e4c     A8 F0 03 F6 | 	mov	ptra, fp
01e50     B3 00 A0 FD | 	call	#popregs_
01e54                 | _sprintf_ret
01e54     2D 00 64 FD | 	ret
01e58                 | 
01e58                 | _printf
01e58     00 4C 05 F6 | 	mov	COUNT_, #0
01e5c     A9 00 A0 FD | 	call	#pushregs_
01e60     18 F0 07 F1 | 	add	ptra, #24
01e64     04 50 05 F1 | 	add	fp, #4
01e68     A8 74 62 FC | 	wrlong	arg01, fp
01e6c     04 50 05 F1 | 	add	fp, #4
01e70     A8 76 62 FC | 	wrlong	arg02, fp
01e74     08 50 85 F1 | 	sub	fp, #8
01e78     01 74 06 F6 | 	mov	arg01, #1
01e7c     A4 FE BF FD | 	call	#___getftab
01e80     10 50 05 F1 | 	add	fp, #16
01e84     A8 34 62 FC | 	wrlong	result1, fp
01e88     08 50 85 F1 | 	sub	fp, #8
01e8c     A8 34 02 FB | 	rdlong	result1, fp
01e90     A8 34 62 FC | 	wrlong	result1, fp
01e94     08 50 05 F1 | 	add	fp, #8
01e98     A8 74 02 F6 | 	mov	arg01, fp
01e9c     10 50 85 F1 | 	sub	fp, #16
01ea0     CF 76 02 F6 | 	mov	arg02, ptr___struct___fmtfile_putchar_
01ea4     90 3D B2 FD | 	call	#__system___make_methodptr
01ea8     1A 75 02 F6 | 	mov	arg01, result1
01eac     04 50 05 F1 | 	add	fp, #4
01eb0     A8 76 02 FB | 	rdlong	arg02, fp
01eb4     04 50 05 F1 | 	add	fp, #4
01eb8     A8 78 02 F6 | 	mov	arg03, fp
01ebc     08 50 85 F1 | 	sub	fp, #8
01ec0     4C 18 B1 FD | 	call	#__dofmt
01ec4     0C 50 05 F1 | 	add	fp, #12
01ec8     A8 34 62 FC | 	wrlong	result1, fp
01ecc                 | '     r = _dofmt( &ff.putchar, fmt, &args);
01ecc                 | '     ;
01ecc                 | '     return r;
01ecc     0C 50 85 F1 | 	sub	fp, #12
01ed0     A8 F0 03 F6 | 	mov	ptra, fp
01ed4     B3 00 A0 FD | 	call	#popregs_
01ed8                 | _printf_ret
01ed8     2D 00 64 FD | 	ret
01edc                 | 
01edc                 | _fprintf
01edc     00 4C 05 F6 | 	mov	COUNT_, #0
01ee0     A9 00 A0 FD | 	call	#pushregs_
01ee4     1C F0 07 F1 | 	add	ptra, #28
01ee8     04 50 05 F1 | 	add	fp, #4
01eec     A8 74 62 FC | 	wrlong	arg01, fp
01ef0     04 50 05 F1 | 	add	fp, #4
01ef4     A8 76 62 FC | 	wrlong	arg02, fp
01ef8     04 50 05 F1 | 	add	fp, #4
01efc     A8 78 62 FC | 	wrlong	arg03, fp
01f00     08 50 85 F1 | 	sub	fp, #8
01f04     A8 34 02 FB | 	rdlong	result1, fp
01f08     10 50 05 F1 | 	add	fp, #16
01f0c     A8 34 62 FC | 	wrlong	result1, fp
01f10     08 50 85 F1 | 	sub	fp, #8
01f14     A8 34 02 FB | 	rdlong	result1, fp
01f18     A8 34 62 FC | 	wrlong	result1, fp
01f1c     08 50 05 F1 | 	add	fp, #8
01f20     A8 74 02 F6 | 	mov	arg01, fp
01f24     14 50 85 F1 | 	sub	fp, #20
01f28     CF 76 02 F6 | 	mov	arg02, ptr___struct___fmtfile_putchar_
01f2c     08 3D B2 FD | 	call	#__system___make_methodptr
01f30     1A 75 02 F6 | 	mov	arg01, result1
01f34     08 50 05 F1 | 	add	fp, #8
01f38     A8 76 02 FB | 	rdlong	arg02, fp
01f3c     04 50 05 F1 | 	add	fp, #4
01f40     A8 78 02 F6 | 	mov	arg03, fp
01f44     0C 50 85 F1 | 	sub	fp, #12
01f48     C4 17 B1 FD | 	call	#__dofmt
01f4c     10 50 05 F1 | 	add	fp, #16
01f50     A8 34 62 FC | 	wrlong	result1, fp
01f54                 | '     r = _dofmt( &ff.putchar, fmt, &args);
01f54                 | '     ;
01f54                 | '     return r;
01f54     10 50 85 F1 | 	sub	fp, #16
01f58     A8 F0 03 F6 | 	mov	ptra, fp
01f5c     B3 00 A0 FD | 	call	#popregs_
01f60                 | _fprintf_ret
01f60     2D 00 64 FD | 	ret
01f64                 | 
01f64                 | _fopen
01f64     10 4C 05 F6 | 	mov	COUNT_, #16
01f68     A9 00 A0 FD | 	call	#pushregs_
01f6c     3A 8D 02 F6 | 	mov	local01, arg01
01f70     3B 8F 02 F6 | 	mov	local02, arg02
01f74     00 90 06 F6 | 	mov	local03, #0
01f78     00 92 06 F6 | 	mov	local04, #0
01f7c     00 94 06 F6 | 	mov	local05, #0
01f80     00 96 06 F6 | 	mov	local06, #0
01f84     00 98 06 F6 | 	mov	local07, #0
01f88     00 9A 06 F6 | 	mov	local08, #0
01f8c                 | '     vfs_file_t *ftab;
01f8c                 | ' 
01f8c                 | '     while ((c = *mode++) != 0) {
01f8c                 | LR__0073
01f8c     47 9D 02 F6 | 	mov	local09, local02
01f90     47 9F 02 F6 | 	mov	local10, local02
01f94     01 9E 06 F1 | 	add	local10, #1
01f98     4F 8F 02 F6 | 	mov	local02, local10
01f9c     4E A1 C2 FA | 	rdbyte	local11, local09
01fa0     50 A3 0A F6 | 	mov	local12, local11 wz
01fa4     A0 00 90 AD |  if_e	jmp	#LR__0080
01fa8                 | '         switch (c) {
01fa8     51 A5 02 F6 | 	mov	local13, local12
01fac     72 A4 0E F2 | 	cmp	local13, #114 wz
01fb0     24 00 90 AD |  if_e	jmp	#LR__0074
01fb4     77 A4 0E F2 | 	cmp	local13, #119 wz
01fb8     24 00 90 AD |  if_e	jmp	#LR__0075
01fbc     61 A4 0E F2 | 	cmp	local13, #97 wz
01fc0     2C 00 90 AD |  if_e	jmp	#LR__0076
01fc4     62 A4 0E F2 | 	cmp	local13, #98 wz
01fc8     34 00 90 AD |  if_e	jmp	#LR__0077
01fcc     2B A4 0E F2 | 	cmp	local13, #43 wz
01fd0     34 00 90 AD |  if_e	jmp	#LR__0078
01fd4     5C 00 90 FD | 	jmp	#LR__0079
01fd8                 | LR__0074
01fd8     01 90 06 F6 | 	mov	local03, #1
01fdc                 | '             want_read = 1;
01fdc                 | '             break;
01fdc     AC FF 9F FD | 	jmp	#LR__0073
01fe0                 | LR__0075
01fe0     01 98 06 F6 | 	mov	local07, #1
01fe4     01 9A 06 F6 | 	mov	local08, #1
01fe8     01 92 06 F6 | 	mov	local04, #1
01fec                 | '             want_create = 1;
01fec                 | '             want_trunc = 1;
01fec                 | '             want_write = 1;
01fec                 | '             break;
01fec     9C FF 9F FD | 	jmp	#LR__0073
01ff0                 | LR__0076
01ff0     01 92 06 F6 | 	mov	local04, #1
01ff4     01 98 06 F6 | 	mov	local07, #1
01ff8     01 94 06 F6 | 	mov	local05, #1
01ffc                 | '             want_write = 1;
01ffc                 | '             want_create = 1;
01ffc                 | '             want_append = 1;
01ffc                 | '             break;
01ffc     8C FF 9F FD | 	jmp	#LR__0073
02000                 | LR__0077
02000     01 96 06 F6 | 	mov	local06, #1
02004                 | '             want_binary = 1;
02004                 | '             break;
02004     84 FF 9F FD | 	jmp	#LR__0073
02008                 | LR__0078
02008     00 90 0E F2 | 	cmp	local03, #0 wz
0200c     01 92 06 56 |  if_ne	mov	local04, #1
02010     78 FF 9F 5D |  if_ne	jmp	#LR__0073
02014     00 92 0E F2 | 	cmp	local04, #0 wz
02018     01 90 06 56 |  if_ne	mov	local03, #1
0201c                 | '                 want_read = 1;
0201c                 | '                 break;
0201c     6C FF 9F 5D |  if_ne	jmp	#LR__0073
02020     18 A2 05 F1 | 	add	ptr___system__dat__, #24
02024     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
02028     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0202c                 | '                 _seterror( 10 );
0202c                 | '                 return 0;
0202c     00 34 06 F6 | 	mov	result1, #0
02030     B4 00 90 FD | 	jmp	#LR__0083
02034                 | '             }
02034                 | '             break;
02034                 | LR__0079
02034     18 A2 05 F1 | 	add	ptr___system__dat__, #24
02038     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
0203c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
02040                 | '             _seterror( 10 );
02040                 | '             return 0;
02040     00 34 06 F6 | 	mov	result1, #0
02044     A0 00 90 FD | 	jmp	#LR__0083
02048                 | LR__0080
02048     00 90 0E F2 | 	cmp	local03, #0 wz
0204c     14 00 90 AD |  if_e	jmp	#LR__0081
02050     00 92 0E F2 | 	cmp	local04, #0 wz
02054     02 A6 06 56 |  if_ne	mov	local14, #2
02058     24 00 90 5D |  if_ne	jmp	#LR__0082
0205c     00 A6 06 F6 | 	mov	local14, #0
02060     1C 00 90 FD | 	jmp	#LR__0082
02064                 | LR__0081
02064     00 92 0E F2 | 	cmp	local04, #0 wz
02068     01 A6 06 56 |  if_ne	mov	local14, #1
0206c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
02070     D1 14 68 AC |  if_e	wrlong	#10, ptr___system__dat__
02074     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
02078                 | '         _seterror( 10 );
02078                 | '         return 0;
02078     00 34 06 A6 |  if_e	mov	result1, #0
0207c     68 00 90 AD |  if_e	jmp	#LR__0083
02080                 | LR__0082
02080     00 94 0E F2 | 	cmp	local05, #0 wz
02084     20 A6 46 55 |  if_ne	or	local14, #32
02088     00 98 0E F2 | 	cmp	local07, #0 wz
0208c     04 A6 46 55 |  if_ne	or	local14, #4
02090     00 9A 0E F2 | 	cmp	local08, #0 wz
02094     08 A6 46 55 |  if_ne	or	local14, #8
02098     53 77 02 F6 | 	mov	arg02, local14
0209c     46 75 02 F6 | 	mov	arg01, local01
020a0     B6 79 06 F6 | 	mov	arg03, #438
020a4     5C F5 BF FD | 	call	#_open
020a8     1A A9 02 F6 | 	mov	local15, result1
020ac     00 A8 56 F2 | 	cmps	local15, #0 wc
020b0                 | ' #line 82 "C:/flexprop/include/libc/stdio/fopen.c"
020b0                 | '         return 0;
020b0     00 34 06 C6 |  if_b	mov	result1, #0
020b4     30 00 90 CD |  if_b	jmp	#LR__0083
020b8     54 75 02 F6 | 	mov	arg01, local15
020bc     64 FC BF FD | 	call	#___getftab
020c0     1A AB 02 F6 | 	mov	local16, result1
020c4     54 75 02 F6 | 	mov	arg01, local15
020c8     88 F9 BF FD | 	call	#_isatty
020cc     00 34 0E F2 | 	cmp	result1, #0 wz
020d0     08 AA 06 51 |  if_ne	add	local16, #8
020d4     55 A1 02 5B |  if_ne	rdlong	local11, local16
020d8     00 A1 46 55 |  if_ne	or	local11, #256
020dc     55 A1 62 5C |  if_ne	wrlong	local11, local16
020e0     08 AA 86 51 |  if_ne	sub	local16, #8
020e4                 | '         ftab->state |=  (0x100) ;
020e4                 | '     }
020e4                 | '     return ftab;
020e4     55 35 02 F6 | 	mov	result1, local16
020e8                 | LR__0083
020e8     A8 F0 03 F6 | 	mov	ptra, fp
020ec     B3 00 A0 FD | 	call	#popregs_
020f0                 | _fopen_ret
020f0     2D 00 64 FD | 	ret
020f4                 | 
020f4                 | _fflush
020f4     03 4C 05 F6 | 	mov	COUNT_, #3
020f8     A9 00 A0 FD | 	call	#pushregs_
020fc     00 8C 06 F6 | 	mov	local01, #0
02100     28 74 06 F1 | 	add	arg01, #40
02104     3A 35 0A FB | 	rdlong	result1, arg01 wz
02108     28 74 86 F1 | 	sub	arg01, #40
0210c     2C 00 90 AD |  if_e	jmp	#LR__0084
02110     28 74 06 F1 | 	add	arg01, #40
02114     3A 8D 02 FB | 	rdlong	local01, arg01
02118     28 74 86 F1 | 	sub	arg01, #40
0211c     46 8F 02 FB | 	rdlong	local02, local01
02120     04 8C 06 F1 | 	add	local01, #4
02124     46 8D 02 FB | 	rdlong	local01, local01
02128     C9 90 02 F6 | 	mov	local03, objptr
0212c     47 93 01 F6 | 	mov	objptr, local02
02130     2D 8C 62 FD | 	call	local01
02134     48 93 01 F6 | 	mov	objptr, local03
02138     1A 8D 02 F6 | 	mov	local01, result1
0213c                 | LR__0084
0213c                 | '         r = (*f->flush)(f);
0213c                 | '     }
0213c                 | '     return r;
0213c     46 35 02 F6 | 	mov	result1, local01
02140     A8 F0 03 F6 | 	mov	ptra, fp
02144     B3 00 A0 FD | 	call	#popregs_
02148                 | _fflush_ret
02148     2D 00 64 FD | 	ret
0214c                 | 
0214c                 | _fread
0214c     05 4C 05 F6 | 	mov	COUNT_, #5
02150     A9 00 A0 FD | 	call	#pushregs_
02154     3C 77 02 FD | 	qmul	arg02, arg03
02158     3A 8D 02 F6 | 	mov	local01, arg01
0215c     3D 8F 02 F6 | 	mov	local02, arg04
02160     00 90 06 F6 | 	mov	local03, #0
02164     08 8E 06 F1 | 	add	local02, #8
02168     47 35 02 FB | 	rdlong	result1, local02
0216c     08 8E 86 F1 | 	sub	local02, #8
02170     00 35 CE F7 | 	test	result1, #256 wz
02174     18 92 62 FD | 	getqx	local04
02178     30 00 90 AD |  if_e	jmp	#LR__0087
0217c     46 95 02 F6 | 	mov	local05, local01
02180                 | '         while (size > 0) {
02180                 | LR__0085
02180     01 92 16 F2 | 	cmp	local04, #1 wc
02184     1C 00 90 CD |  if_b	jmp	#LR__0086
02188     47 75 02 F6 | 	mov	arg01, local02
0218c     C8 FB BF FD | 	call	#_fgetc
02190     00 34 56 F2 | 	cmps	result1, #0 wc
02194     4A 35 42 3C |  if_ae	wrbyte	result1, local05
02198     01 90 06 31 |  if_ae	add	local03, #1
0219c     01 94 06 31 |  if_ae	add	local05, #1
021a0     DC FF 9F 3D |  if_ae	jmp	#LR__0085
021a4                 | LR__0086
021a4                 | '             *dst++ = c;
021a4                 | '             r++;
021a4                 | '         }
021a4                 | '         return r;
021a4     48 35 02 F6 | 	mov	result1, local03
021a8     18 00 90 FD | 	jmp	#LR__0088
021ac                 | LR__0087
021ac     47 75 02 F6 | 	mov	arg01, local02
021b0     40 FF BF FD | 	call	#_fflush
021b4     46 77 02 F6 | 	mov	arg02, local01
021b8     49 79 02 F6 | 	mov	arg03, local04
021bc     47 75 02 F6 | 	mov	arg01, local02
021c0     68 12 B1 FD | 	call	#__vfsread
021c4                 | '     }
021c4                 | '     fflush(f);
021c4                 | '     r = _vfsread(f, ptr, size);
021c4                 | ' #line 36 "C:/flexprop/include/libc/stdio/fwrite.c"
021c4                 | '     return r;
021c4                 | LR__0088
021c4     A8 F0 03 F6 | 	mov	ptra, fp
021c8     B3 00 A0 FD | 	call	#popregs_
021cc                 | _fread_ret
021cc     2D 00 64 FD | 	ret
021d0                 | 
021d0                 | _fseek
021d0     04 4C 05 F6 | 	mov	COUNT_, #4
021d4     A9 00 A0 FD | 	call	#pushregs_
021d8     3A 8D 02 F6 | 	mov	local01, arg01
021dc     3B 8F 02 F6 | 	mov	local02, arg02
021e0     3C 91 02 F6 | 	mov	local03, arg03
021e4                 | ' {
021e4                 | '     return (f -  __getftab(0) );
021e4     46 93 02 F6 | 	mov	local04, local01
021e8     00 74 06 F6 | 	mov	arg01, #0
021ec     34 FB BF FD | 	call	#___getftab
021f0     1A 93 82 F1 | 	sub	local04, result1
021f4     30 92 16 FD | 	qdiv	local04, #48
021f8     46 75 02 F6 | 	mov	arg01, local01
021fc     18 92 62 FD | 	getqx	local04
02200     F0 FE BF FD | 	call	#_fflush
02204     49 75 02 F6 | 	mov	arg01, local04
02208     47 77 02 F6 | 	mov	arg02, local02
0220c     48 79 02 F6 | 	mov	arg03, local03
02210     A8 F5 BF FD | 	call	#_lseek
02214     FF FF 7F FF 
02218     FF 35 0E F2 | 	cmp	result1, ##-1 wz
0221c     00 34 06 56 |  if_ne	mov	result1, #0
02220                 | '         r = 0;
02220                 | '     }
02220                 | '     return r;
02220     A8 F0 03 F6 | 	mov	ptra, fp
02224     B3 00 A0 FD | 	call	#popregs_
02228                 | _fseek_ret
02228     2D 00 64 FD | 	ret
0222c                 | 
0222c                 | _ftell
0222c     02 4C 05 F6 | 	mov	COUNT_, #2
02230     A9 00 A0 FD | 	call	#pushregs_
02234     3A 8D 02 F6 | 	mov	local01, arg01
02238                 | ' {
02238                 | '     return (f -  __getftab(0) );
02238     3A 8F 02 F6 | 	mov	local02, arg01
0223c     00 74 06 F6 | 	mov	arg01, #0
02240     E0 FA BF FD | 	call	#___getftab
02244     1A 8F 82 F1 | 	sub	local02, result1
02248     30 8E 16 FD | 	qdiv	local02, #48
0224c     46 75 02 F6 | 	mov	arg01, local01
02250     18 8E 62 FD | 	getqx	local02
02254     9C FE BF FD | 	call	#_fflush
02258     47 75 02 F6 | 	mov	arg01, local02
0225c     00 76 06 F6 | 	mov	arg02, #0
02260     01 78 06 F6 | 	mov	arg03, #1
02264     54 F5 BF FD | 	call	#_lseek
02268                 | ' 
02268                 | '     fflush(f);
02268                 | '     r = lseek(fd, 0,  1 );
02268                 | '     return r;
02268     A8 F0 03 F6 | 	mov	ptra, fp
0226c     B3 00 A0 FD | 	call	#popregs_
02270                 | _ftell_ret
02270     2D 00 64 FD | 	ret
02274                 | 
02274                 | _atol
02274     04 4C 05 F6 | 	mov	COUNT_, #4
02278     A9 00 A0 FD | 	call	#pushregs_
0227c     3A 8D 02 F6 | 	mov	local01, arg01
02280     00 8E 06 F6 | 	mov	local02, #0
02284     00 90 06 F6 | 	mov	local03, #0
02288                 | '   while (isspace(*str)) str++;
02288     56 01 00 FF 
0228c     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
02290     88 DD 9F FE | 	loc	pa,	#(@LR__0090-@LR__0089)
02294     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02298                 | LR__0089
02298     46 75 C2 FA | 	rdbyte	arg01, local01
0229c                 | ' {
0229c                 | '   return  (__ctype_get(c) & 0x10 ) ;
0229c     80 74 36 F3 | 	fle	arg01, #128 wc
022a0                 | '     return __ctype[c];
022a0     EB 74 02 F1 | 	add	arg01, ptr__dat__
022a4     3A 35 C2 FA | 	rdbyte	result1, arg01
022a8     10 34 CE F7 | 	test	result1, #16 wz
022ac     01 8C 06 51 |  if_ne	add	local01, #1
022b0     E4 FF 9F 5D |  if_ne	jmp	#LR__0089
022b4                 | LR__0090
022b4     56 01 00 FF 
022b8     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
022bc     46 93 C2 FA | 	rdbyte	local04, local01
022c0     2D 92 0E F2 | 	cmp	local04, #45 wz
022c4     01 90 06 A6 |  if_e	mov	local03, #1
022c8     01 8C 06 A1 |  if_e	add	local01, #1
022cc     7C DD 9F FE | 	loc	pa,	#(@LR__0092-@LR__0091)
022d0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
022d4                 | '     {
022d4                 | '       neg=1;
022d4                 | '       str++;
022d4                 | '     }
022d4                 | '   while (isdigit(*str))
022d4                 | LR__0091
022d4     46 75 C2 FA | 	rdbyte	arg01, local01
022d8                 | ' {
022d8                 | '   return  (__ctype_get(c) & 0x02 ) ;
022d8     80 74 36 F3 | 	fle	arg01, #128 wc
022dc                 | '     return __ctype[c];
022dc     56 01 00 FF 
022e0     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
022e4     EB 74 02 F1 | 	add	arg01, ptr__dat__
022e8     3A 35 C2 FA | 	rdbyte	result1, arg01
022ec     56 01 00 FF 
022f0     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
022f4     02 34 CE F7 | 	test	result1, #2 wz
022f8     24 00 90 AD |  if_e	jmp	#LR__0093
022fc     47 93 02 F6 | 	mov	local04, local02
02300     02 92 66 F0 | 	shl	local04, #2
02304     47 93 02 F1 | 	add	local04, local02
02308     01 92 66 F0 | 	shl	local04, #1
0230c     46 8F C2 FA | 	rdbyte	local02, local01
02310     30 8E 86 F1 | 	sub	local02, #48
02314     49 8F 02 F1 | 	add	local02, local04
02318     01 8C 06 F1 | 	add	local01, #1
0231c     B4 FF 9F FD | 	jmp	#LR__0091
02320                 | LR__0092
02320                 | LR__0093
02320     00 90 0E F2 | 	cmp	local03, #0 wz
02324     47 8F 62 56 |  if_ne	neg	local02, local02
02328                 | '     num = -num;
02328                 | '   return num;
02328     47 35 02 F6 | 	mov	result1, local02
0232c     A8 F0 03 F6 | 	mov	ptra, fp
02330     B3 00 A0 FD | 	call	#popregs_
02334                 | _atol_ret
02334     2D 00 64 FD | 	ret
02338                 | 
02338                 | _mcp23017_begin
02338     03 4C 05 F6 | 	mov	COUNT_, #3
0233c     A9 00 A0 FD | 	call	#pushregs_
02340     3A 8D 02 F6 | 	mov	local01, arg01
02344     3B 8F 02 F6 | 	mov	local02, arg02
02348     3D 75 02 F6 | 	mov	arg01, arg04
0234c     3C 77 02 F6 | 	mov	arg02, arg03
02350     64 78 06 F6 | 	mov	arg03, #100
02354     01 7A 06 F6 | 	mov	arg04, #1
02358     C9 90 02 F6 | 	mov	local03, objptr
0235c     46 93 01 F6 | 	mov	objptr, local01
02360     98 9A B1 FD | 	call	#_jm_i2c_spin2_setup
02364     48 93 01 F6 | 	mov	objptr, local03
02368     47 91 E2 F8 | 	getbyte	local03, local02, #0
0236c     20 34 06 F6 | 	mov	result1, #32
02370     48 35 42 F5 | 	or	result1, local03
02374     01 34 66 F0 | 	shl	result1, #1
02378     FE 34 06 F5 | 	and	result1, #254
0237c     0C 8C 06 F1 | 	add	local01, #12
02380     46 35 42 FC | 	wrbyte	result1, local01
02384     47 8F E2 F8 | 	getbyte	local02, local02, #0
02388     20 90 06 F6 | 	mov	local03, #32
0238c     47 91 42 F5 | 	or	local03, local02
02390     01 90 66 F0 | 	shl	local03, #1
02394     01 90 46 F5 | 	or	local03, #1
02398     01 8C 06 F1 | 	add	local01, #1
0239c     46 91 42 FC | 	wrbyte	local03, local01
023a0     0D 8C 86 F1 | 	sub	local01, #13
023a4     46 75 02 F6 | 	mov	arg01, local01
023a8     00 76 06 F6 | 	mov	arg02, #0
023ac     0F 78 06 F6 | 	mov	arg03, #15
023b0     1C 71 B1 FD | 	call	#_write_register_1636
023b4     46 75 02 F6 | 	mov	arg01, local01
023b8     01 76 06 F6 | 	mov	arg02, #1
023bc     FF 78 06 F6 | 	mov	arg03, #255
023c0     0C 71 B1 FD | 	call	#_write_register_1636
023c4     1A 91 E2 F8 | 	getbyte	local03, result1, #0
023c8     1A 8F E2 F8 | 	getbyte	local02, result1, #0
023cc     47 91 02 F5 | 	and	local03, local02
023d0     46 75 02 F6 | 	mov	arg01, local01
023d4     00 76 06 F6 | 	mov	arg02, #0
023d8     74 70 B1 FD | 	call	#_read_register_1634
023dc     1A 8F E2 F8 | 	getbyte	local02, result1, #0
023e0     0F 8E 0E F2 | 	cmp	local02, #15 wz
023e4     18 00 90 5D |  if_ne	jmp	#LR__0094
023e8     46 75 02 F6 | 	mov	arg01, local01
023ec     01 76 06 F6 | 	mov	arg02, #1
023f0     5C 70 B1 FD | 	call	#_read_register_1634
023f4     1A 35 E2 F8 | 	getbyte	result1, result1, #0
023f8     FF 34 0E F2 | 	cmp	result1, #255 wz
023fc     24 00 90 AD |  if_e	jmp	#LR__0095
02400                 | LR__0094
02400     4C 01 00 FF 
02404     48 74 06 F6 | 	mov	arg01, ##@LR__1841
02408     48 91 E2 F8 | 	getbyte	local03, local03, #0
0240c     F8 77 02 F6 | 	mov	arg02, ptra
02410     61 91 66 FC | 	wrlong	local03, ptra++
02414     40 FA BF FD | 	call	#_printf
02418     04 F0 87 F1 | 	sub	ptra, #4
0241c                 | '     {
0241c                 | '         printf("Error setting up MCP23017: ACK:%d\n",ack);
0241c                 | '         return  (0) ;
0241c     00 34 06 F6 | 	mov	result1, #0
02420     04 00 90 FD | 	jmp	#LR__0096
02424                 | LR__0095
02424                 | '     }
02424                 | '     return  (1) ;
02424     01 34 06 F6 | 	mov	result1, #1
02428                 | LR__0096
02428     A8 F0 03 F6 | 	mov	ptra, fp
0242c     B3 00 A0 FD | 	call	#popregs_
02430                 | _mcp23017_begin_ret
02430     2D 00 64 FD | 	ret
02434                 | 
02434                 | _mcp_update_register
02434     01 4C 05 F6 | 	mov	COUNT_, #1
02438     A9 00 A0 FD | 	call	#pushregs_
0243c     3A 8D 02 F6 | 	mov	local01, arg01
02440     12 76 06 F6 | 	mov	arg02, #18
02444     08 70 B1 FD | 	call	#_read_register_1634
02448     0E 8C 06 F1 | 	add	local01, #14
0244c     46 35 42 FC | 	wrbyte	result1, local01
02450     0E 8C 86 F1 | 	sub	local01, #14
02454     46 75 02 F6 | 	mov	arg01, local01
02458     13 76 06 F6 | 	mov	arg02, #19
0245c     F0 6F B1 FD | 	call	#_read_register_1634
02460     0F 8C 06 F1 | 	add	local01, #15
02464     46 35 42 FC | 	wrbyte	result1, local01
02468     A8 F0 03 F6 | 	mov	ptra, fp
0246c     B3 00 A0 FD | 	call	#popregs_
02470                 | _mcp_update_register_ret
02470     2D 00 64 FD | 	ret
02474                 | 
02474                 | _mcp_set_pin
02474     04 4C 05 F6 | 	mov	COUNT_, #4
02478     A9 00 A0 FD | 	call	#pushregs_
0247c     3A 8D 02 F6 | 	mov	local01, arg01
02480     3B 8F 02 F6 | 	mov	local02, arg02
02484     3D 91 02 F6 | 	mov	local03, arg04
02488     3C 77 02 F6 | 	mov	arg02, arg03
0248c     07 76 4E F7 | 	zerox	arg02, #7 wz
02490     12 92 06 A6 |  if_e	mov	local04, #18
02494     13 92 06 56 |  if_ne	mov	local04, #19
02498     46 75 02 F6 | 	mov	arg01, local01
0249c     49 77 02 F6 | 	mov	arg02, local04
024a0     AC 6F B1 FD | 	call	#_read_register_1634
024a4     1A 79 E2 F8 | 	getbyte	arg03, result1, #0
024a8     00 90 0E F2 | 	cmp	local03, #0 wz
024ac     47 8F 32 59 |  if_ne	getword	local02, local02, #0
024b0     47 91 C2 59 |  if_ne	decod	local03, local02
024b4     48 79 42 55 |  if_ne	or	arg03, local03
024b8     47 8F 32 A9 |  if_e	getword	local02, local02, #0
024bc     47 91 C2 A9 |  if_e	decod	local03, local02
024c0     48 79 22 A5 |  if_e	andn	arg03, local03
024c4     46 75 02 F6 | 	mov	arg01, local01
024c8     49 77 02 F6 | 	mov	arg02, local04
024cc     00 70 B1 FD | 	call	#_write_register_1636
024d0     A8 F0 03 F6 | 	mov	ptra, fp
024d4     B3 00 A0 FD | 	call	#popregs_
024d8                 | _mcp_set_pin_ret
024d8     2D 00 64 FD | 	ret
024dc                 | 
024dc                 | _mcp_get_pin
024dc                 | '     (state ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
024dc                 | '     write_register(mcp23017, reg, value);
024dc                 | ' }
024dc                 | ' uint8_t mcp_get_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
024dc                 | ' {
024dc                 | '     return  (((reg == 0x00 ? mcp23017->dira : mcp23017->dirb) >> (pin)) & 0x01) ;
024dc     07 78 4E F7 | 	zerox	arg03, #7 wz
024e0     0E 74 06 A1 |  if_e	add	arg01, #14
024e4     3A 3B C2 AA |  if_e	rdbyte	_var01, arg01
024e8     0F 74 06 51 |  if_ne	add	arg01, #15
024ec     3A 3B C2 5A |  if_ne	rdbyte	_var01, arg01
024f0     1D 35 E2 F8 | 	getbyte	result1, _var01, #0
024f4     3B 77 32 F9 | 	getword	arg02, arg02, #0
024f8     3B 35 42 F0 | 	shr	result1, arg02
024fc     01 34 06 F5 | 	and	result1, #1
02500                 | _mcp_get_pin_ret
02500     2D 00 64 FD | 	ret
02504                 | 
02504                 | _dyn4_begin
02504     02 4C 05 F6 | 	mov	COUNT_, #2
02508     A9 00 A0 FD | 	call	#pushregs_
0250c     24 F0 07 F1 | 	add	ptra, #36
02510     04 50 05 F1 | 	add	fp, #4
02514     A8 74 62 FC | 	wrlong	arg01, fp
02518     04 50 05 F1 | 	add	fp, #4
0251c     A8 76 62 FC | 	wrlong	arg02, fp
02520     04 50 05 F1 | 	add	fp, #4
02524     A8 78 62 FC | 	wrlong	arg03, fp
02528     04 50 05 F1 | 	add	fp, #4
0252c     A8 7A 62 FC | 	wrlong	arg04, fp
02530     0C 50 85 F1 | 	sub	fp, #12
02534     A8 34 02 FB | 	rdlong	result1, fp
02538     1A 7B 62 FC | 	wrlong	arg04, result1
0253c     A8 8C 02 FB | 	rdlong	local01, fp
02540     04 8C 06 F1 | 	add	local01, #4
02544     04 50 05 F1 | 	add	fp, #4
02548     A8 74 02 FB | 	rdlong	arg01, fp
0254c     04 50 05 F1 | 	add	fp, #4
02550     A8 76 02 FB | 	rdlong	arg02, fp
02554     0C 50 85 F1 | 	sub	fp, #12
02558     02 78 06 F6 | 	mov	arg03, #2
0255c     4B 00 00 FF 
02560     00 7A 06 F6 | 	mov	arg04, ##38400
02564     C9 8E 02 F6 | 	mov	local02, objptr
02568     46 93 01 F6 | 	mov	objptr, local01
0256c     F8 9A B1 FD | 	call	#_jm_fullduplexserial_spin2_start
02570     47 93 01 F6 | 	mov	objptr, local02
02574     04 50 05 F1 | 	add	fp, #4
02578     A8 74 02 FB | 	rdlong	arg01, fp
0257c     10 50 05 F1 | 	add	fp, #16
02580     A8 76 02 F6 | 	mov	arg02, fp
02584     14 50 85 F1 | 	sub	fp, #20
02588     EC 02 B0 FD | 	call	#_dyn4_get_status
0258c     20 50 05 F1 | 	add	fp, #32
02590     A8 34 62 FC | 	wrlong	result1, fp
02594     20 50 85 F1 | 	sub	fp, #32
02598     00 34 0E F2 | 	cmp	result1, #0 wz
0259c                 | '     {
0259c                 | ' 
0259c                 | '         return ret;
0259c     20 50 05 51 |  if_ne	add	fp, #32
025a0     A8 34 02 5B |  if_ne	rdlong	result1, fp
025a4     20 50 85 51 |  if_ne	sub	fp, #32
025a8                 | '     }
025a8                 | ' 
025a8                 | ' 
025a8                 | ' 
025a8                 | ' 
025a8                 | '     return ret;
025a8     20 50 05 A1 |  if_e	add	fp, #32
025ac     A8 34 02 AB |  if_e	rdlong	result1, fp
025b0     20 50 85 A1 |  if_e	sub	fp, #32
025b4     A8 F0 03 F6 | 	mov	ptra, fp
025b8     B3 00 A0 FD | 	call	#popregs_
025bc                 | _dyn4_begin_ret
025bc     2D 00 64 FD | 	ret
025c0                 | 
025c0                 | _dyn4_send_command
025c0     09 4C 05 F6 | 	mov	COUNT_, #9
025c4     A9 00 A0 FD | 	call	#pushregs_
025c8     2C F0 07 F1 | 	add	ptra, #44
025cc     3A 8D 02 F6 | 	mov	local01, arg01
025d0     3B 8F 02 F6 | 	mov	local02, arg02
025d4     00 08 00 FF 
025d8     00 78 56 F2 | 	cmps	arg03, ##1048576 wc
025dc     0C 00 90 3D |  if_ae	jmp	#LR__0097
025e0     00 F8 7F FF 
025e4     00 78 56 F2 | 	cmps	arg03, ##-1048576 wc
025e8     08 00 90 3D |  if_ae	jmp	#LR__0098
025ec                 | LR__0097
025ec     04 90 06 F6 | 	mov	local03, #4
025f0     40 00 90 FD | 	jmp	#LR__0105
025f4                 | LR__0098
025f4     10 00 00 FF 
025f8     00 78 56 F2 | 	cmps	arg03, ##8192 wc
025fc     0C 00 90 3D |  if_ae	jmp	#LR__0099
02600     F0 FF 7F FF 
02604     00 78 56 F2 | 	cmps	arg03, ##-8192 wc
02608     08 00 90 3D |  if_ae	jmp	#LR__0100
0260c                 | LR__0099
0260c     03 90 06 F6 | 	mov	local03, #3
02610     20 00 90 FD | 	jmp	#LR__0104
02614                 | LR__0100
02614     40 78 56 F2 | 	cmps	arg03, #64 wc
02618     0C 00 90 3D |  if_ae	jmp	#LR__0101
0261c     FF FF 7F FF 
02620     C0 79 56 F2 | 	cmps	arg03, ##-64 wc
02624     08 00 90 3D |  if_ae	jmp	#LR__0102
02628                 | LR__0101
02628     02 90 06 F6 | 	mov	local03, #2
0262c     04 00 90 FD | 	jmp	#LR__0103
02630                 | LR__0102
02630     01 90 06 F6 | 	mov	local03, #1
02634                 | LR__0103
02634                 | LR__0104
02634                 | LR__0105
02634     03 76 06 F6 | 	mov	arg02, #3
02638     48 77 02 F1 | 	add	arg02, local03
0263c     3B 75 02 F6 | 	mov	arg01, arg02
02640     01 74 86 F1 | 	sub	arg01, #1
02644     14 50 05 F1 | 	add	fp, #20
02648     46 93 02 FB | 	rdlong	local04, local01
0264c     A8 74 02 F1 | 	add	arg01, fp
02650     3A 93 42 FC | 	wrbyte	local04, arg01
02654     3B 95 02 F6 | 	mov	local05, arg02
02658     02 94 86 F1 | 	sub	local05, #2
0265c     A8 94 02 F1 | 	add	local05, fp
02660     48 75 02 F6 | 	mov	arg01, local03
02664     01 74 86 F1 | 	sub	arg01, #1
02668     05 74 66 F0 | 	shl	arg01, #5
0266c     80 92 06 F6 | 	mov	local04, #128
02670     3A 93 02 F1 | 	add	local04, arg01
02674     47 8F E2 F8 | 	getbyte	local02, local02, #0
02678     47 93 02 F1 | 	add	local04, local02
0267c     4A 93 42 FC | 	wrbyte	local04, local05
02680     3B 8F 02 F6 | 	mov	local02, arg02
02684     01 8E 86 F1 | 	sub	local02, #1
02688     A8 8E 02 F1 | 	add	local02, fp
0268c     47 97 C2 FA | 	rdbyte	local06, local02
02690     3B 99 02 F6 | 	mov	local07, arg02
02694     02 98 86 F1 | 	sub	local07, #2
02698     A8 98 02 F1 | 	add	local07, fp
0269c     4C 9B C2 FA | 	rdbyte	local08, local07
026a0     4D 97 02 F1 | 	add	local06, local08
026a4     00 9C 06 F6 | 	mov	local09, #0
026a8                 | '     for (int i = 0; i < n; i++)
026a8     14 50 85 F1 | 	sub	fp, #20
026ac     C0 D9 9F FE | 	loc	pa,	#(@LR__0107-@LR__0106)
026b0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
026b4                 | LR__0106
026b4     48 9D 52 F2 | 	cmps	local09, local03 wc
026b8     68 00 90 3D |  if_ae	jmp	#LR__0108
026bc     3B 95 02 F6 | 	mov	local05, arg02
026c0     03 94 86 F1 | 	sub	local05, #3
026c4     4E 95 82 F1 | 	sub	local05, local09
026c8     14 50 05 F1 | 	add	fp, #20
026cc     A8 94 02 F1 | 	add	local05, fp
026d0     3C 9B 02 F6 | 	mov	local08, arg03
026d4     48 93 02 F6 | 	mov	local04, local03
026d8     4E 93 82 F1 | 	sub	local04, local09
026dc     01 92 86 F1 | 	sub	local04, #1
026e0     49 99 02 F6 | 	mov	local07, local04
026e4     03 98 66 F0 | 	shl	local07, #3
026e8     49 99 82 F1 | 	sub	local07, local04
026ec     4C 9B C2 F0 | 	sar	local08, local07
026f0     7F 9A 06 F5 | 	and	local08, #127
026f4     80 92 06 F6 | 	mov	local04, #128
026f8     4D 93 02 F1 | 	add	local04, local08
026fc     4A 93 42 FC | 	wrbyte	local04, local05
02700     3B 93 02 F6 | 	mov	local04, arg02
02704     03 92 86 F1 | 	sub	local04, #3
02708     4E 93 82 F1 | 	sub	local04, local09
0270c     A8 92 02 F1 | 	add	local04, fp
02710     49 95 C2 FA | 	rdbyte	local05, local04
02714     4A 97 02 F1 | 	add	local06, local05
02718     01 9C 06 F1 | 	add	local09, #1
0271c     14 50 85 F1 | 	sub	fp, #20
02720     90 FF 9F FD | 	jmp	#LR__0106
02724                 | LR__0107
02724                 | LR__0108
02724     4B 95 52 F6 | 	abs	local05, local06 wc
02728     7F 94 06 F5 | 	and	local05, #127
0272c     4A 95 82 F6 | 	negc	local05, local05
02730     80 9C 06 F6 | 	mov	local09, #128
02734     4A 9D 02 F1 | 	add	local09, local05
02738     14 50 05 F1 | 	add	fp, #20
0273c     A8 9C 42 FC | 	wrbyte	local09, fp
02740     14 50 85 F1 | 	sub	fp, #20
02744     01 76 86 F1 | 	sub	arg02, #1
02748                 | '     {
02748                 | '         bytes[package_size - 3 - i] = 0x80 + ((data >> ((n - i - 1) * 7)) & 0x7F);
02748                 | ' 
02748                 | '         totalData += bytes[package_size - 3 - i];
02748                 | '     }
02748                 | '     bytes[0] = 0x80 + (totalData % 128);
02748                 | ' 
02748                 | '     for (int i = package_size - 1; i >= 0; i--)
02748                 | LR__0109
02748     00 76 56 F2 | 	cmps	arg02, #0 wc
0274c     34 00 90 CD |  if_b	jmp	#LR__0110
02750     04 8C 06 F1 | 	add	local01, #4
02754     3B 93 02 F6 | 	mov	local04, arg02
02758     14 50 05 F1 | 	add	fp, #20
0275c     A8 92 02 F1 | 	add	local04, fp
02760     49 75 C2 FA | 	rdbyte	arg01, local04
02764     C9 8E 02 F6 | 	mov	local02, objptr
02768     46 93 01 F6 | 	mov	objptr, local01
0276c     14 50 85 F1 | 	sub	fp, #20
02770     E0 9B B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
02774     47 93 01 F6 | 	mov	objptr, local02
02778     01 76 86 F1 | 	sub	arg02, #1
0277c     04 8C 86 F1 | 	sub	local01, #4
02780     C4 FF 9F FD | 	jmp	#LR__0109
02784                 | LR__0110
02784     A8 F0 03 F6 | 	mov	ptra, fp
02788     B3 00 A0 FD | 	call	#popregs_
0278c                 | _dyn4_send_command_ret
0278c     2D 00 64 FD | 	ret
02790                 | 
02790                 | _dyn4_read_command
02790     06 4C 05 F6 | 	mov	COUNT_, #6
02794     A9 00 A0 FD | 	call	#pushregs_
02798     3A 8D 02 F6 | 	mov	local01, arg01
0279c     00 8E 06 F6 | 	mov	local02, #0
027a0                 | ' {
027a0                 | '     uint8_t byte;
027a0                 | ' 
027a0                 | '     for (int i = 0; i < 10; i++)
027a0                 | LR__0111
027a0     0A 8E 56 F2 | 	cmps	local02, #10 wc
027a4     38 00 90 3D |  if_ae	jmp	#LR__0112
027a8     04 8C 06 F1 | 	add	local01, #4
027ac     64 74 06 F6 | 	mov	arg01, #100
027b0     C9 90 02 F6 | 	mov	local03, objptr
027b4     46 93 01 F6 | 	mov	objptr, local01
027b8     14 9B B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
027bc     48 93 01 F6 | 	mov	objptr, local03
027c0     1A 93 02 F6 | 	mov	local04, result1
027c4     49 91 E2 F8 | 	getbyte	local03, local04, #0
027c8     04 8C 86 F1 | 	sub	local01, #4
027cc     46 75 02 FB | 	rdlong	arg01, local01
027d0     3A 91 0A F2 | 	cmp	local03, arg01 wz
027d4                 | '         {
027d4                 | '             break;
027d4     01 92 66 56 |  if_ne	neg	local04, #1
027d8     01 8E 06 51 |  if_ne	add	local02, #1
027dc     C0 FF 9F 5D |  if_ne	jmp	#LR__0111
027e0                 | LR__0112
027e0     49 93 E2 F8 | 	getbyte	local04, local04, #0
027e4     FF FF 7F FF 
027e8     FF 93 0E F2 | 	cmp	local04, ##-1 wz
027ec                 | '     {
027ec                 | '         return -1;
027ec     01 34 66 A6 |  if_e	neg	result1, #1
027f0     78 00 90 AD |  if_e	jmp	#LR__0115
027f4     04 8C 06 F1 | 	add	local01, #4
027f8     C8 74 06 F6 | 	mov	arg01, #200
027fc     C9 90 02 F6 | 	mov	local03, objptr
02800     46 93 01 F6 | 	mov	objptr, local01
02804     C8 9A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
02808     48 93 01 F6 | 	mov	objptr, local03
0280c     04 8C 86 F1 | 	sub	local01, #4
02810     1A 95 E2 F8 | 	getbyte	local05, result1, #0
02814     05 94 46 F0 | 	shr	local05, #5
02818     03 94 06 F5 | 	and	local05, #3
0281c     00 96 06 F6 | 	mov	local06, #0
02820                 | '     for (int i = n - 1; i >= 0; i--)
02820                 | LR__0113
02820     00 94 56 F2 | 	cmps	local05, #0 wc
02824     40 00 90 CD |  if_b	jmp	#LR__0114
02828     04 8C 06 F1 | 	add	local01, #4
0282c     C8 74 06 F6 | 	mov	arg01, #200
02830     C9 90 02 F6 | 	mov	local03, objptr
02834     46 93 01 F6 | 	mov	objptr, local01
02838     94 9A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0283c     48 93 01 F6 | 	mov	objptr, local03
02840     1A 35 E2 F8 | 	getbyte	result1, result1, #0
02844     7F 34 06 F5 | 	and	result1, #127
02848     4A 93 02 F6 | 	mov	local04, local05
0284c     03 92 66 F0 | 	shl	local04, #3
02850     4A 93 82 F1 | 	sub	local04, local05
02854     49 35 62 F0 | 	shl	result1, local04
02858     1A 97 02 F1 | 	add	local06, result1
0285c     01 94 86 F1 | 	sub	local05, #1
02860     04 8C 86 F1 | 	sub	local01, #4
02864     B8 FF 9F FD | 	jmp	#LR__0113
02868                 | LR__0114
02868                 | '     {
02868                 | '         data += ((uint8_t)dyn4->serial.rxtime(200) & 0x7F) << (7 * i);
02868                 | '     }
02868                 | '     return data;
02868     4B 35 02 F6 | 	mov	result1, local06
0286c                 | LR__0115
0286c     A8 F0 03 F6 | 	mov	ptra, fp
02870     B3 00 A0 FD | 	call	#popregs_
02874                 | _dyn4_read_command_ret
02874     2D 00 64 FD | 	ret
02878                 | 
02878                 | _dyn4_get_status
02878     02 4C 05 F6 | 	mov	COUNT_, #2
0287c     A9 00 A0 FD | 	call	#pushregs_
02880     3A 8D 02 F6 | 	mov	local01, arg01
02884     3B 8F 02 F6 | 	mov	local02, arg02
02888     46 75 02 F6 | 	mov	arg01, local01
0288c     09 76 06 F6 | 	mov	arg02, #9
02890     01 78 06 F6 | 	mov	arg03, #1
02894     28 FD BF FD | 	call	#_dyn4_send_command
02898     46 75 02 F6 | 	mov	arg01, local01
0289c     19 76 06 F6 | 	mov	arg02, #25
028a0     EC FE BF FD | 	call	#_dyn4_read_command
028a4     1A 8D 02 F6 | 	mov	local01, result1
028a8     46 79 E2 F8 | 	getbyte	arg03, local01, #0
028ac     FF FF 7F FF 
028b0     FF 79 0E F2 | 	cmp	arg03, ##-1 wz
028b4                 | '     {
028b4                 | '         return DYN4_NOT_RESPONDING;
028b4     65 34 06 A6 |  if_e	mov	result1, #101
028b8     60 00 90 AD |  if_e	jmp	#LR__0116
028bc     46 35 E2 F8 | 	getbyte	result1, local01, #0
028c0     01 34 06 F5 | 	and	result1, #1
028c4     47 35 42 FC | 	wrbyte	result1, local02
028c8     46 35 E2 F8 | 	getbyte	result1, local01, #0
028cc     02 34 06 F5 | 	and	result1, #2
028d0     01 34 C6 F0 | 	sar	result1, #1
028d4     01 8E 06 F1 | 	add	local02, #1
028d8     47 35 42 FC | 	wrbyte	result1, local02
028dc     46 35 E2 F8 | 	getbyte	result1, local01, #0
028e0     1C 34 06 F5 | 	and	result1, #28
028e4     02 34 C6 F0 | 	sar	result1, #2
028e8     03 8E 06 F1 | 	add	local02, #3
028ec     47 35 62 FC | 	wrlong	result1, local02
028f0     46 35 E2 F8 | 	getbyte	result1, local01, #0
028f4     20 34 06 F5 | 	and	result1, #32
028f8     05 34 C6 F0 | 	sar	result1, #5
028fc     04 8E 06 F1 | 	add	local02, #4
02900     47 35 42 FC | 	wrbyte	result1, local02
02904     46 8D E2 F8 | 	getbyte	local01, local01, #0
02908     40 8C 06 F5 | 	and	local01, #64
0290c     06 8C C6 F0 | 	sar	local01, #6
02910     01 8E 06 F1 | 	add	local02, #1
02914     47 8D 42 FC | 	wrbyte	local01, local02
02918                 | '     }
02918                 | '     status->onRange = (statusReg & (0x01 <<  0x00 )) >>  0x00 ;
02918                 | '     status->motorFree = (statusReg & (0x01 <<  0x01 )) >>  0x01 ;
02918                 | '     status->alarm = (statusReg & (0x07 <<  0x02 )) >>  0x02 ;
02918                 | '     status->motorBusy = (statusReg & (0x01 <<  0x05 )) >>  0x05 ;
02918                 | '     status->jp3P2Status = (statusReg & (0x01 <<  0x06 )) >>  0x06 ;
02918                 | '     return SUCCESS;
02918     00 34 06 F6 | 	mov	result1, #0
0291c                 | LR__0116
0291c     A8 F0 03 F6 | 	mov	ptra, fp
02920     B3 00 A0 FD | 	call	#popregs_
02924                 | _dyn4_get_status_ret
02924     2D 00 64 FD | 	ret
02928                 | 
02928                 | _machine_state_init
02928     3A 01 68 FC | 	wrlong	#0, arg01
0292c     04 74 06 F1 | 	add	arg01, #4
02930     3A 01 48 FC | 	wrbyte	#0, arg01
02934     04 74 06 F1 | 	add	arg01, #4
02938     3A 01 48 FC | 	wrbyte	#0, arg01
0293c     04 74 06 F1 | 	add	arg01, #4
02940     3A 01 68 FC | 	wrlong	#0, arg01
02944     04 74 06 F1 | 	add	arg01, #4
02948     3A 01 48 FC | 	wrbyte	#0, arg01
0294c     01 74 06 F1 | 	add	arg01, #1
02950     3A 01 48 FC | 	wrbyte	#0, arg01
02954     01 74 06 F1 | 	add	arg01, #1
02958     3A 01 48 FC | 	wrbyte	#0, arg01
0295c     01 74 06 F1 | 	add	arg01, #1
02960     3A 01 48 FC | 	wrbyte	#0, arg01
02964     01 74 06 F1 | 	add	arg01, #1
02968     3A 03 48 FC | 	wrbyte	#1, arg01
0296c     08 74 06 F1 | 	add	arg01, #8
02970     3A 0F 68 FC | 	wrlong	#7, arg01
02974     04 74 06 F1 | 	add	arg01, #4
02978     3A 01 68 FC | 	wrlong	#0, arg01
0297c     08 74 86 F1 | 	sub	arg01, #8
02980     3A 01 68 FC | 	wrlong	#0, arg01
02984     0C 74 06 F1 | 	add	arg01, #12
02988     3A 01 68 FC | 	wrlong	#0, arg01
0298c     00 34 06 F6 | 	mov	result1, #0
02990     04 34 62 FD | 	locknew	result1
02994     08 74 06 F1 | 	add	arg01, #8
02998     3A 35 62 FC | 	wrlong	result1, arg01
0299c     FF FF 7F FF 
029a0     FF 35 0E F2 | 	cmp	result1, ##-1 wz
029a4     4C 01 00 AF 
029a8     6B 74 06 A6 |  if_e	mov	arg01, ##@LR__1842
029ac     A8 F4 BF AD |  if_e	call	#_printf
029b0                 | _machine_state_init_ret
029b0     2D 00 64 FD | 	ret
029b4                 | 
029b4                 | _state_machine_set
029b4     04 4C 05 F6 | 	mov	COUNT_, #4
029b8     A9 00 A0 FD | 	call	#pushregs_
029bc     3A 8D 02 F6 | 	mov	local01, arg01
029c0     3B 8F 02 F6 | 	mov	local02, arg02
029c4     3C 91 02 F6 | 	mov	local03, arg03
029c8                 | ' {
029c8                 | '     switch (param)
029c8     0C 8E 26 F3 | 	fle	local02, #12
029cc     30 8E 62 FD | 	jmprel	local02
029d0                 | LR__0117
029d0     30 00 90 FD | 	jmp	#LR__0118
029d4     54 00 90 FD | 	jmp	#LR__0119
029d8     78 00 90 FD | 	jmp	#LR__0120
029dc     9C 00 90 FD | 	jmp	#LR__0121
029e0     C0 00 90 FD | 	jmp	#LR__0122
029e4     E4 00 90 FD | 	jmp	#LR__0123
029e8     08 01 90 FD | 	jmp	#LR__0124
029ec     2C 01 90 FD | 	jmp	#LR__0125
029f0     50 01 90 FD | 	jmp	#LR__0126
029f4     74 01 90 FD | 	jmp	#LR__0127
029f8     98 01 90 FD | 	jmp	#LR__0128
029fc     E8 01 90 FD | 	jmp	#LR__0131
02a00     08 02 90 FD | 	jmp	#LR__0132
02a04                 | LR__0118
02a04     04 8C 06 F1 | 	add	local01, #4
02a08     46 8F C2 FA | 	rdbyte	local02, local01
02a0c     04 8C 86 F1 | 	sub	local01, #4
02a10     48 8F 0A F2 | 	cmp	local02, local03 wz
02a14     04 8C 06 51 |  if_ne	add	local01, #4
02a18     46 91 42 5C |  if_ne	wrbyte	local03, local01
02a1c     04 8C 86 51 |  if_ne	sub	local01, #4
02a20     46 75 02 56 |  if_ne	mov	arg01, local01
02a24     6C 16 B1 5D |  if_ne	call	#_state_machine_update_0572
02a28                 | '         {
02a28                 | '             machineState->selfCheckParameters.chargePump = state;
02a28                 | '             state_machine_update(machineState);
02a28                 | '         }
02a28                 | '         break;
02a28     E0 01 90 FD | 	jmp	#LR__0132
02a2c                 | LR__0119
02a2c     08 8C 06 F1 | 	add	local01, #8
02a30     46 8F C2 FA | 	rdbyte	local02, local01
02a34     08 8C 86 F1 | 	sub	local01, #8
02a38     48 8F 0A F2 | 	cmp	local02, local03 wz
02a3c     08 8C 06 51 |  if_ne	add	local01, #8
02a40     46 91 42 5C |  if_ne	wrbyte	local03, local01
02a44     08 8C 86 51 |  if_ne	sub	local01, #8
02a48     46 75 02 56 |  if_ne	mov	arg01, local01
02a4c     44 16 B1 5D |  if_ne	call	#_state_machine_update_0572
02a50                 | '         {
02a50                 | '             machineState->machineCheckParameters.switchedPower = state;
02a50                 | '             state_machine_update(machineState);
02a50                 | '         }
02a50                 | '         break;
02a50     B8 01 90 FD | 	jmp	#LR__0132
02a54                 | LR__0120
02a54     0C 8C 06 F1 | 	add	local01, #12
02a58     46 8F 02 FB | 	rdlong	local02, local01
02a5c     0C 8C 86 F1 | 	sub	local01, #12
02a60     48 8F 0A F2 | 	cmp	local02, local03 wz
02a64     0C 8C 06 51 |  if_ne	add	local01, #12
02a68     46 91 62 5C |  if_ne	wrlong	local03, local01
02a6c     0C 8C 86 51 |  if_ne	sub	local01, #12
02a70     46 75 02 56 |  if_ne	mov	arg01, local01
02a74     1C 16 B1 5D |  if_ne	call	#_state_machine_update_0572
02a78                 | '         {
02a78                 | '             machineState->machineCheckParameters.esdTravelLimit = state;
02a78                 | '             state_machine_update(machineState);
02a78                 | '         }
02a78                 | '         break;
02a78     90 01 90 FD | 	jmp	#LR__0132
02a7c                 | LR__0121
02a7c     10 8C 06 F1 | 	add	local01, #16
02a80     46 8F C2 FA | 	rdbyte	local02, local01
02a84     10 8C 86 F1 | 	sub	local01, #16
02a88     48 8F 0A F2 | 	cmp	local02, local03 wz
02a8c     10 8C 06 51 |  if_ne	add	local01, #16
02a90     46 91 42 5C |  if_ne	wrbyte	local03, local01
02a94     10 8C 86 51 |  if_ne	sub	local01, #16
02a98     46 75 02 56 |  if_ne	mov	arg01, local01
02a9c     F4 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02aa0                 | '         {
02aa0                 | '             machineState->machineCheckParameters.esdSwitch = state;
02aa0                 | '             state_machine_update(machineState);
02aa0                 | '         }
02aa0                 | '         break;
02aa0     68 01 90 FD | 	jmp	#LR__0132
02aa4                 | LR__0122
02aa4     11 8C 06 F1 | 	add	local01, #17
02aa8     46 8F C2 FA | 	rdbyte	local02, local01
02aac     11 8C 86 F1 | 	sub	local01, #17
02ab0     48 8F 0A F2 | 	cmp	local02, local03 wz
02ab4     11 8C 06 51 |  if_ne	add	local01, #17
02ab8     46 91 42 5C |  if_ne	wrbyte	local03, local01
02abc     11 8C 86 51 |  if_ne	sub	local01, #17
02ac0     46 75 02 56 |  if_ne	mov	arg01, local01
02ac4     CC 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02ac8                 | '         {
02ac8                 | '             machineState->machineCheckParameters.servoOK = state;
02ac8                 | '             state_machine_update(machineState);
02ac8                 | '         }
02ac8                 | '         break;
02ac8     40 01 90 FD | 	jmp	#LR__0132
02acc                 | LR__0123
02acc     12 8C 06 F1 | 	add	local01, #18
02ad0     46 8F C2 FA | 	rdbyte	local02, local01
02ad4     12 8C 86 F1 | 	sub	local01, #18
02ad8     48 8F 0A F2 | 	cmp	local02, local03 wz
02adc     12 8C 06 51 |  if_ne	add	local01, #18
02ae0     46 91 42 5C |  if_ne	wrbyte	local03, local01
02ae4     12 8C 86 51 |  if_ne	sub	local01, #18
02ae8     46 75 02 56 |  if_ne	mov	arg01, local01
02aec     A4 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02af0                 | '         {
02af0                 | '             machineState->machineCheckParameters.forceGaugeCom = state;
02af0                 | '             state_machine_update(machineState);
02af0                 | '         }
02af0                 | '         break;
02af0     18 01 90 FD | 	jmp	#LR__0132
02af4                 | LR__0124
02af4     13 8C 06 F1 | 	add	local01, #19
02af8     46 8F C2 FA | 	rdbyte	local02, local01
02afc     13 8C 86 F1 | 	sub	local01, #19
02b00     48 8F 0A F2 | 	cmp	local02, local03 wz
02b04     13 8C 06 51 |  if_ne	add	local01, #19
02b08     46 91 42 5C |  if_ne	wrbyte	local03, local01
02b0c     13 8C 86 51 |  if_ne	sub	local01, #19
02b10     46 75 02 56 |  if_ne	mov	arg01, local01
02b14     7C 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02b18                 | '         {
02b18                 | '             machineState->machineCheckParameters.servoCom = state;
02b18                 | '             state_machine_update(machineState);
02b18                 | '         }
02b18                 | '         break;
02b18     F0 00 90 FD | 	jmp	#LR__0132
02b1c                 | LR__0125
02b1c     14 8C 06 F1 | 	add	local01, #20
02b20     46 8F C2 FA | 	rdbyte	local02, local01
02b24     14 8C 86 F1 | 	sub	local01, #20
02b28     48 8F 0A F2 | 	cmp	local02, local03 wz
02b2c     14 8C 06 51 |  if_ne	add	local01, #20
02b30     46 91 42 5C |  if_ne	wrbyte	local03, local01
02b34     14 8C 86 51 |  if_ne	sub	local01, #20
02b38     46 75 02 56 |  if_ne	mov	arg01, local01
02b3c     54 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02b40                 | '         {
02b40                 | '             machineState->machineCheckParameters.rtcCom = state;
02b40                 | '             state_machine_update(machineState);
02b40                 | '         }
02b40                 | '         break;
02b40     C8 00 90 FD | 	jmp	#LR__0132
02b44                 | LR__0126
02b44     18 8C 06 F1 | 	add	local01, #24
02b48     46 8F 02 FB | 	rdlong	local02, local01
02b4c     18 8C 86 F1 | 	sub	local01, #24
02b50     48 8F 0A F2 | 	cmp	local02, local03 wz
02b54     18 8C 06 51 |  if_ne	add	local01, #24
02b58     46 91 62 5C |  if_ne	wrlong	local03, local01
02b5c     18 8C 86 51 |  if_ne	sub	local01, #24
02b60     46 75 02 56 |  if_ne	mov	arg01, local01
02b64     2C 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02b68                 | '         {
02b68                 | '             machineState->motionParameters.status = state;
02b68                 | '             state_machine_update(machineState);
02b68                 | '         }
02b68                 | '         break;
02b68     A0 00 90 FD | 	jmp	#LR__0132
02b6c                 | LR__0127
02b6c     1C 8C 06 F1 | 	add	local01, #28
02b70     46 8F 02 FB | 	rdlong	local02, local01
02b74     1C 8C 86 F1 | 	sub	local01, #28
02b78     48 8F 0A F2 | 	cmp	local02, local03 wz
02b7c     1C 8C 06 51 |  if_ne	add	local01, #28
02b80     46 91 62 5C |  if_ne	wrlong	local03, local01
02b84     1C 8C 86 51 |  if_ne	sub	local01, #28
02b88     46 75 02 56 |  if_ne	mov	arg01, local01
02b8c     04 15 B1 5D |  if_ne	call	#_state_machine_update_0572
02b90                 | '         {
02b90                 | '             machineState->motionParameters.condition = state;
02b90                 | '             state_machine_update(machineState);
02b90                 | '         }
02b90                 | '         break;
02b90     78 00 90 FD | 	jmp	#LR__0132
02b94                 | LR__0128
02b94     20 8C 06 F1 | 	add	local01, #32
02b98     46 8F 02 FB | 	rdlong	local02, local01
02b9c     20 8C 86 F1 | 	sub	local01, #32
02ba0     48 8F 0A F2 | 	cmp	local02, local03 wz
02ba4     40 00 90 AD |  if_e	jmp	#LR__0130
02ba8     20 8C 06 F1 | 	add	local01, #32
02bac     46 75 02 FB | 	rdlong	arg01, local01
02bb0     20 8C 86 F1 | 	sub	local01, #32
02bb4     01 74 0E F2 | 	cmp	arg01, #1 wz
02bb8     18 00 90 AD |  if_e	jmp	#LR__0129
02bbc     02 90 0E F2 | 	cmp	local03, #2 wz
02bc0     10 00 90 5D |  if_ne	jmp	#LR__0129
02bc4     4C 01 00 FF 
02bc8     86 74 06 F6 | 	mov	arg01, ##@LR__1843
02bcc     88 F2 BF FD | 	call	#_printf
02bd0                 | '             {
02bd0                 | '                 printf("Must be in test mode to run test\n");
02bd0                 | '                 break;
02bd0     38 00 90 FD | 	jmp	#LR__0132
02bd4                 | LR__0129
02bd4     20 8C 06 F1 | 	add	local01, #32
02bd8     46 91 62 FC | 	wrlong	local03, local01
02bdc     20 8C 86 F1 | 	sub	local01, #32
02be0     46 75 02 F6 | 	mov	arg01, local01
02be4     AC 14 B1 FD | 	call	#_state_machine_update_0572
02be8                 | LR__0130
02be8                 | LR__0131
02be8     24 8C 06 F1 | 	add	local01, #36
02bec     46 93 02 FB | 	rdlong	local04, local01
02bf0     24 8C 86 F1 | 	sub	local01, #36
02bf4     48 93 0A F2 | 	cmp	local04, local03 wz
02bf8     24 8C 06 51 |  if_ne	add	local01, #36
02bfc     46 91 62 5C |  if_ne	wrlong	local03, local01
02c00     24 8C 86 51 |  if_ne	sub	local01, #36
02c04     46 75 02 56 |  if_ne	mov	arg01, local01
02c08     88 14 B1 5D |  if_ne	call	#_state_machine_update_0572
02c0c                 | '         {
02c0c                 | '             machineState->function = state;
02c0c                 | '             state_machine_update(machineState);
02c0c                 | '         }
02c0c                 | '         break;
02c0c                 | LR__0132
02c0c     A8 F0 03 F6 | 	mov	ptra, fp
02c10     B3 00 A0 FD | 	call	#popregs_
02c14                 | _state_machine_set_ret
02c14     2D 00 64 FD | 	ret
02c18                 | 
02c18                 | _state_machine_check_equal
02c18     3A 3B 02 F6 | 	mov	_var01, arg01
02c1c     3B 3D 02 F6 | 	mov	_var02, arg02
02c20                 | ' {
02c20                 | '     return motionParameters1->switchedPower == motionParameters2->switchedPower &&
02c20     1D 3F C2 FA | 	rdbyte	_var03, _var01
02c24     00 40 06 F6 | 	mov	_var04, #0
02c28     1E 43 C2 FA | 	rdbyte	_var05, _var02
02c2c     21 3F 0A F2 | 	cmp	_var03, _var05 wz
02c30     F0 00 90 5D |  if_ne	jmp	#LR__0133
02c34     04 3A 06 F1 | 	add	_var01, #4
02c38     1D 45 02 FB | 	rdlong	_var06, _var01
02c3c     04 3A 86 F1 | 	sub	_var01, #4
02c40     22 47 02 F6 | 	mov	_var07, _var06
02c44     04 3C 06 F1 | 	add	_var02, #4
02c48     1E 49 02 FB | 	rdlong	_var08, _var02
02c4c     04 3C 86 F1 | 	sub	_var02, #4
02c50     24 4B 02 F6 | 	mov	_var09, _var08
02c54     25 47 0A F2 | 	cmp	_var07, _var09 wz
02c58     C8 00 90 5D |  if_ne	jmp	#LR__0133
02c5c     08 3A 06 F1 | 	add	_var01, #8
02c60     1D 4D C2 FA | 	rdbyte	_var10, _var01
02c64     08 3A 86 F1 | 	sub	_var01, #8
02c68     26 4F E2 F8 | 	getbyte	_var11, _var10, #0
02c6c     08 3C 06 F1 | 	add	_var02, #8
02c70     1E 51 C2 FA | 	rdbyte	_var12, _var02
02c74     08 3C 86 F1 | 	sub	_var02, #8
02c78     28 53 E2 F8 | 	getbyte	_var13, _var12, #0
02c7c     29 4F 0A F2 | 	cmp	_var11, _var13 wz
02c80     A0 00 90 5D |  if_ne	jmp	#LR__0133
02c84     09 3A 06 F1 | 	add	_var01, #9
02c88     1D 55 C2 FA | 	rdbyte	_var14, _var01
02c8c     09 3A 86 F1 | 	sub	_var01, #9
02c90     2A 57 E2 F8 | 	getbyte	_var15, _var14, #0
02c94     09 3C 06 F1 | 	add	_var02, #9
02c98     1E 59 C2 FA | 	rdbyte	_var16, _var02
02c9c     09 3C 86 F1 | 	sub	_var02, #9
02ca0     2C 5B E2 F8 | 	getbyte	_var17, _var16, #0
02ca4     2D 57 0A F2 | 	cmp	_var15, _var17 wz
02ca8     78 00 90 5D |  if_ne	jmp	#LR__0133
02cac     0A 3A 06 F1 | 	add	_var01, #10
02cb0     1D 5D C2 FA | 	rdbyte	_var18, _var01
02cb4     0A 3A 86 F1 | 	sub	_var01, #10
02cb8     2E 5F E2 F8 | 	getbyte	_var19, _var18, #0
02cbc     0A 3C 06 F1 | 	add	_var02, #10
02cc0     1E 61 C2 FA | 	rdbyte	_var20, _var02
02cc4     0A 3C 86 F1 | 	sub	_var02, #10
02cc8     30 63 E2 F8 | 	getbyte	_var21, _var20, #0
02ccc     31 5F 0A F2 | 	cmp	_var19, _var21 wz
02cd0     50 00 90 5D |  if_ne	jmp	#LR__0133
02cd4     0B 3A 06 F1 | 	add	_var01, #11
02cd8     1D 65 C2 FA | 	rdbyte	_var22, _var01
02cdc     0B 3A 86 F1 | 	sub	_var01, #11
02ce0     32 67 E2 F8 | 	getbyte	_var23, _var22, #0
02ce4     0B 3C 06 F1 | 	add	_var02, #11
02ce8     1E 69 C2 FA | 	rdbyte	_var24, _var02
02cec     0B 3C 86 F1 | 	sub	_var02, #11
02cf0     34 6B E2 F8 | 	getbyte	_var25, _var24, #0
02cf4     35 67 0A F2 | 	cmp	_var23, _var25 wz
02cf8     28 00 90 5D |  if_ne	jmp	#LR__0133
02cfc     0C 3A 06 F1 | 	add	_var01, #12
02d00     1D 6D C2 FA | 	rdbyte	_var26, _var01
02d04     0C 3A 86 F1 | 	sub	_var01, #12
02d08     36 6F E2 F8 | 	getbyte	_var27, _var26, #0
02d0c     0C 3C 06 F1 | 	add	_var02, #12
02d10     1E 71 C2 FA | 	rdbyte	_var28, _var02
02d14     0C 3C 86 F1 | 	sub	_var02, #12
02d18     38 73 E2 F8 | 	getbyte	_var29, _var28, #0
02d1c     39 6F 0A F2 | 	cmp	_var27, _var29 wz
02d20     01 40 06 A6 |  if_e	mov	_var04, #1
02d24                 | LR__0133
02d24     20 35 02 F6 | 	mov	result1, _var04
02d28                 | _state_machine_check_equal_ret
02d28     2D 00 64 FD | 	ret
02d2c                 | 
02d2c                 | _state_machine_motion_equal
02d2c     3A 3B 02 F6 | 	mov	_var01, arg01
02d30     3B 3D 02 F6 | 	mov	_var02, arg02
02d34                 | ' {
02d34                 | '     return motionParameters1->status == motionParameters2->status &&
02d34     1D 3F 02 FB | 	rdlong	_var03, _var01
02d38     00 40 06 F6 | 	mov	_var04, #0
02d3c     1E 43 02 FB | 	rdlong	_var05, _var02
02d40     21 3F 0A F2 | 	cmp	_var03, _var05 wz
02d44     50 00 90 5D |  if_ne	jmp	#LR__0134
02d48     08 3A 06 F1 | 	add	_var01, #8
02d4c     1D 45 02 FB | 	rdlong	_var06, _var01
02d50     08 3A 86 F1 | 	sub	_var01, #8
02d54     22 47 02 F6 | 	mov	_var07, _var06
02d58     08 3C 06 F1 | 	add	_var02, #8
02d5c     1E 49 02 FB | 	rdlong	_var08, _var02
02d60     08 3C 86 F1 | 	sub	_var02, #8
02d64     24 4B 02 F6 | 	mov	_var09, _var08
02d68     25 47 0A F2 | 	cmp	_var07, _var09 wz
02d6c     28 00 90 5D |  if_ne	jmp	#LR__0134
02d70     04 3A 06 F1 | 	add	_var01, #4
02d74     1D 4D 02 FB | 	rdlong	_var10, _var01
02d78     04 3A 86 F1 | 	sub	_var01, #4
02d7c     26 4F 02 F6 | 	mov	_var11, _var10
02d80     04 3C 06 F1 | 	add	_var02, #4
02d84     1E 51 02 FB | 	rdlong	_var12, _var02
02d88     04 3C 86 F1 | 	sub	_var02, #4
02d8c     28 53 02 F6 | 	mov	_var13, _var12
02d90     29 4F 0A F2 | 	cmp	_var11, _var13 wz
02d94     01 40 06 A6 |  if_e	mov	_var04, #1
02d98                 | LR__0134
02d98     20 35 02 F6 | 	mov	result1, _var04
02d9c                 | _state_machine_motion_equal_ret
02d9c     2D 00 64 FD | 	ret
02da0                 | 
02da0                 | _state_machine_equal
02da0     10 4C 05 F6 | 	mov	COUNT_, #16
02da4     A9 00 A0 FD | 	call	#pushregs_
02da8     3A 8D 02 F6 | 	mov	local01, arg01
02dac     3B 8F 02 F6 | 	mov	local02, arg02
02db0                 | ' {
02db0                 | '     return state_machine_self_check_equal(&(machineState1->selfCheckParameters), &(machineState2->selfCheckParameters)) &&
02db0     00 90 06 F6 | 	mov	local03, #0
02db4     04 8C 06 F1 | 	add	local01, #4
02db8     46 75 02 F6 | 	mov	arg01, local01
02dbc     04 8C 86 F1 | 	sub	local01, #4
02dc0     04 8E 06 F1 | 	add	local02, #4
02dc4     47 77 02 F6 | 	mov	arg02, local02
02dc8     04 8E 86 F1 | 	sub	local02, #4
02dcc                 | ' {
02dcc                 | '     return selfCheckParameters1->chargePump == selfCheckParameters2->chargePump;
02dcc     3A 75 C2 FA | 	rdbyte	arg01, arg01
02dd0     00 34 06 F6 | 	mov	result1, #0
02dd4     3B 77 C2 FA | 	rdbyte	arg02, arg02
02dd8     3B 75 0A F2 | 	cmp	arg01, arg02 wz
02ddc     01 34 06 A6 |  if_e	mov	result1, #1
02de0     1A 93 0A F6 | 	mov	local04, result1 wz
02de4     A8 00 90 AD |  if_e	jmp	#LR__0135
02de8     08 8C 06 F1 | 	add	local01, #8
02dec     46 75 02 F6 | 	mov	arg01, local01
02df0     08 8C 86 F1 | 	sub	local01, #8
02df4     08 8E 06 F1 | 	add	local02, #8
02df8     47 77 02 F6 | 	mov	arg02, local02
02dfc     08 8E 86 F1 | 	sub	local02, #8
02e00     14 FE BF FD | 	call	#_state_machine_check_equal
02e04     1A 95 0A F6 | 	mov	local05, result1 wz
02e08     84 00 90 AD |  if_e	jmp	#LR__0135
02e0c     18 8C 06 F1 | 	add	local01, #24
02e10     46 75 02 F6 | 	mov	arg01, local01
02e14     18 8C 86 F1 | 	sub	local01, #24
02e18     18 8E 06 F1 | 	add	local02, #24
02e1c     47 77 02 F6 | 	mov	arg02, local02
02e20     18 8E 86 F1 | 	sub	local02, #24
02e24     04 FF BF FD | 	call	#_state_machine_motion_equal
02e28     1A 97 0A F6 | 	mov	local06, result1 wz
02e2c     60 00 90 AD |  if_e	jmp	#LR__0135
02e30     46 99 02 FB | 	rdlong	local07, local01
02e34     47 9B 02 FB | 	rdlong	local08, local02
02e38     4D 99 0A F2 | 	cmp	local07, local08 wz
02e3c     50 00 90 5D |  if_ne	jmp	#LR__0135
02e40     24 8C 06 F1 | 	add	local01, #36
02e44     46 9D 02 FB | 	rdlong	local09, local01
02e48     24 8C 86 F1 | 	sub	local01, #36
02e4c     4E 9F 02 F6 | 	mov	local10, local09
02e50     24 8E 06 F1 | 	add	local02, #36
02e54     47 A1 02 FB | 	rdlong	local11, local02
02e58     24 8E 86 F1 | 	sub	local02, #36
02e5c     50 A3 02 F6 | 	mov	local12, local11
02e60     51 9F 0A F2 | 	cmp	local10, local12 wz
02e64     28 00 90 5D |  if_ne	jmp	#LR__0135
02e68     28 8C 06 F1 | 	add	local01, #40
02e6c     46 A5 02 FB | 	rdlong	local13, local01
02e70     28 8C 86 F1 | 	sub	local01, #40
02e74     52 A7 02 F6 | 	mov	local14, local13
02e78     28 8E 06 F1 | 	add	local02, #40
02e7c     47 A9 02 FB | 	rdlong	local15, local02
02e80     28 8E 86 F1 | 	sub	local02, #40
02e84     54 AB 02 F6 | 	mov	local16, local15
02e88     55 A7 0A F2 | 	cmp	local14, local16 wz
02e8c     01 90 66 A5 |  if_e	xor	local03, #1
02e90                 | LR__0135
02e90     48 35 02 F6 | 	mov	result1, local03
02e94     A8 F0 03 F6 | 	mov	ptra, fp
02e98     B3 00 A0 FD | 	call	#popregs_
02e9c                 | _state_machine_equal_ret
02e9c     2D 00 64 FD | 	ret
02ea0                 | 
02ea0                 | _display_begin
02ea0     07 4C 05 F6 | 	mov	COUNT_, #7
02ea4     A9 00 A0 FD | 	call	#pushregs_
02ea8     3A 8D 02 F6 | 	mov	local01, arg01
02eac     3B 8F 02 F6 | 	mov	local02, arg02
02eb0     3F 91 02 F6 | 	mov	local03, arg06
02eb4     40 93 02 F6 | 	mov	local04, arg07
02eb8     41 95 02 F6 | 	mov	local05, arg08
02ebc     04 8C 06 F1 | 	add	local01, #4
02ec0     46 8F 62 FC | 	wrlong	local02, local01
02ec4     04 8C 86 F1 | 	sub	local01, #4
02ec8     46 79 62 FC | 	wrlong	arg03, local01
02ecc     10 8C 06 F1 | 	add	local01, #16
02ed0     46 91 62 FC | 	wrlong	local03, local01
02ed4     08 8C 86 F1 | 	sub	local01, #8
02ed8     46 7B 62 FC | 	wrlong	arg04, local01
02edc     04 8C 06 F1 | 	add	local01, #4
02ee0     46 7D 62 FC | 	wrlong	arg05, local01
02ee4     2C 8C 06 F1 | 	add	local01, #44
02ee8     3E 75 02 F6 | 	mov	arg01, arg05
02eec     3D 77 02 F6 | 	mov	arg02, arg04
02ef0     48 79 02 F6 | 	mov	arg03, local03
02ef4     13 00 00 FF 
02ef8     10 7B 06 F6 | 	mov	arg04, ##10000
02efc     C9 96 02 F6 | 	mov	local06, objptr
02f00     46 93 01 F6 | 	mov	objptr, local01
02f04     B8 94 B1 FD | 	call	#_jm_spi_spin2_start
02f08     0C 8C 86 F1 | 	sub	local01, #12
02f0c     46 93 01 F6 | 	mov	objptr, local01
02f10     49 75 02 F6 | 	mov	arg01, local04
02f14     4A 77 02 F6 | 	mov	arg02, local05
02f18     64 78 06 F6 | 	mov	arg03, #100
02f1c     01 7A 06 F6 | 	mov	arg04, #1
02f20     D8 8E B1 FD | 	call	#_jm_i2c_spin2_setup
02f24     4B 93 01 F6 | 	mov	objptr, local06
02f28     18 8C 86 F1 | 	sub	local01, #24
02f2c     46 75 69 FC | 	wrlong	#186, local01
02f30     04 8C 06 F1 | 	add	local01, #4
02f34     46 77 69 FC | 	wrlong	#187, local01
02f38     14 8C 86 F1 | 	sub	local01, #20
02f3c     46 75 02 FB | 	rdlong	arg01, local01
02f40     58 74 62 FD | 	drvl	arg01
02f44     02 74 06 F6 | 	mov	arg01, #2
02f48     3C 2E B2 FD | 	call	#__system___waitms
02f4c     46 75 02 FB | 	rdlong	arg01, local01
02f50     04 8C 86 F1 | 	sub	local01, #4
02f54     59 74 62 FD | 	drvh	arg01
02f58     02 74 06 F6 | 	mov	arg01, #2
02f5c     28 2E B2 FD | 	call	#__system___waitms
02f60     01 00 00 FF 
02f64     E8 75 06 F6 | 	mov	arg01, ##1000
02f68     1C 2E B2 FD | 	call	#__system___waitms
02f6c     AC 00 00 FF 
02f70     A0 D6 05 F1 | 	add	ptr__dat__, ##88224
02f74     EB 76 02 F6 | 	mov	arg02, ptr__dat__
02f78     AC 00 00 FF 
02f7c     A0 D6 85 F1 | 	sub	ptr__dat__, ##88224
02f80     46 75 02 F6 | 	mov	arg01, local01
02f84     BA 78 06 F6 | 	mov	arg03, #186
02f88     10 1D B0 FD | 	call	#_display_gt9271_send_cfg
02f8c     46 75 02 FB | 	rdlong	arg01, local01
02f90     59 74 62 FD | 	drvh	arg01
02f94     58 90 62 FD | 	drvl	local03
02f98     59 8E 62 FD | 	drvh	local02
02f9c     01 74 06 F6 | 	mov	arg01, #1
02fa0     E4 2D B2 FD | 	call	#__system___waitms
02fa4     04 8C 06 F1 | 	add	local01, #4
02fa8     46 75 02 FB | 	rdlong	arg01, local01
02fac     04 8C 86 F1 | 	sub	local01, #4
02fb0     58 74 62 FD | 	drvl	arg01
02fb4     01 74 06 F6 | 	mov	arg01, #1
02fb8     CC 2D B2 FD | 	call	#__system___waitms
02fbc     59 8E 62 FD | 	drvh	local02
02fc0     0A 74 06 F6 | 	mov	arg01, #10
02fc4     C0 2D B2 FD | 	call	#__system___waitms
02fc8     01 76 06 F6 | 	mov	arg02, #1
02fcc     08 78 06 F6 | 	mov	arg03, #8
02fd0     46 75 02 F6 | 	mov	arg01, local01
02fd4     A8 28 B0 FD | 	call	#_lcdRegWrite
02fd8     46 75 02 F6 | 	mov	arg01, local01
02fdc     08 76 06 F6 | 	mov	arg02, #8
02fe0     00 29 B0 FD | 	call	#_lcdDataWrite
02fe4     64 74 06 F6 | 	mov	arg01, #100
02fe8     9C 2D B2 FD | 	call	#__system___waitms
02fec     46 75 02 F6 | 	mov	arg01, local01
02ff0     FF 76 06 F6 | 	mov	arg02, #255
02ff4     3A 97 02 F6 | 	mov	local06, arg01
02ff8     84 28 B0 FD | 	call	#_lcdRegWrite
02ffc     4B 75 02 F6 | 	mov	arg01, local06
03000     44 29 B0 FD | 	call	#_lcdDataRead
03004                 | ' {
03004                 | '   lcdRegWrite(display, reg);
03004                 | '   lcdDataWrite(display, data);
03004                 | ' }
03004                 | ' 
03004                 | ' 
03004                 | ' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
03004                 | ' {
03004                 | '   lcdRegWrite(display, reg);
03004                 | '   uint8_t data = lcdDataRead(display);
03004                 | '   return data;
03004     1A 97 E2 F8 | 	getbyte	local06, result1, #0
03008     76 96 0E F2 | 	cmp	local06, #118 wz
0300c     6C 00 90 AD |  if_e	jmp	#LR__0136
03010     46 75 02 F6 | 	mov	arg01, local01
03014     FF 76 06 F6 | 	mov	arg02, #255
03018     3A 95 02 F6 | 	mov	local05, arg01
0301c     60 28 B0 FD | 	call	#_lcdRegWrite
03020     4A 75 02 F6 | 	mov	arg01, local05
03024     20 29 B0 FD | 	call	#_lcdDataRead
03028                 | ' {
03028                 | '   lcdRegWrite(display, reg);
03028                 | '   lcdDataWrite(display, data);
03028                 | ' }
03028                 | ' 
03028                 | ' 
03028                 | ' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
03028                 | ' {
03028                 | '   lcdRegWrite(display, reg);
03028                 | '   uint8_t data = lcdDataRead(display);
03028                 | '   return data;
03028     1A 95 E2 F8 | 	getbyte	local05, result1, #0
0302c     77 94 0E F2 | 	cmp	local05, #119 wz
03030     48 00 90 AD |  if_e	jmp	#LR__0136
03034     00 74 06 F6 | 	mov	arg01, #0
03038     94 64 B2 FD | 	call	#__system___getiolock_1306
0303c     1A 75 02 F6 | 	mov	arg01, result1
03040     2C 2C B2 FD | 	call	#__system___lockmem
03044     4C 01 00 FF 
03048     A8 76 06 F6 | 	mov	arg02, ##@LR__1844
0304c     00 74 06 F6 | 	mov	arg01, #0
03050     00 78 06 F6 | 	mov	arg03, #0
03054     C0 31 B2 FD | 	call	#__system___basic_print_string
03058     00 74 06 F6 | 	mov	arg01, #0
0305c     0A 76 06 F6 | 	mov	arg02, #10
03060     00 78 06 F6 | 	mov	arg03, #0
03064     64 31 B2 FD | 	call	#__system___basic_print_char
03068     00 74 06 F6 | 	mov	arg01, #0
0306c     60 64 B2 FD | 	call	#__system___getiolock_1306
03070     1A 01 68 FC | 	wrlong	#0, result1
03074                 | '     return DISPLAY_NOT_FOUND;
03074     02 34 06 F6 | 	mov	result1, #2
03078     70 00 90 FD | 	jmp	#LR__0138
0307c                 | LR__0136
0307c     46 75 02 F6 | 	mov	arg01, local01
03080     B4 17 B0 FD | 	call	#_display_initialize
03084     1A 99 0A F6 | 	mov	local07, result1 wz
03088     5C 00 90 AD |  if_e	jmp	#LR__0137
0308c     00 74 06 F6 | 	mov	arg01, #0
03090     3C 64 B2 FD | 	call	#__system___getiolock_1306
03094     1A 75 02 F6 | 	mov	arg01, result1
03098     D4 2B B2 FD | 	call	#__system___lockmem
0309c     4C 01 00 FF 
030a0     BA 76 06 F6 | 	mov	arg02, ##@LR__1845
030a4     00 74 06 F6 | 	mov	arg01, #0
030a8     00 78 06 F6 | 	mov	arg03, #0
030ac     68 31 B2 FD | 	call	#__system___basic_print_string
030b0     00 74 06 F6 | 	mov	arg01, #0
030b4     4C 77 02 F6 | 	mov	arg02, local07
030b8     00 78 06 F6 | 	mov	arg03, #0
030bc     0A 7A 06 F6 | 	mov	arg04, #10
030c0     98 31 B2 FD | 	call	#__system___basic_print_integer
030c4     00 74 06 F6 | 	mov	arg01, #0
030c8     0A 76 06 F6 | 	mov	arg02, #10
030cc     00 78 06 F6 | 	mov	arg03, #0
030d0     F8 30 B2 FD | 	call	#__system___basic_print_char
030d4     00 74 06 F6 | 	mov	arg01, #0
030d8     F4 63 B2 FD | 	call	#__system___getiolock_1306
030dc     1A 01 68 FC | 	wrlong	#0, result1
030e0                 | '     return err;
030e0     4C 35 02 F6 | 	mov	result1, local07
030e4     04 00 90 FD | 	jmp	#LR__0138
030e8                 | LR__0137
030e8                 | '   }
030e8                 | '   return SUCCESS;
030e8     00 34 06 F6 | 	mov	result1, #0
030ec                 | LR__0138
030ec     A8 F0 03 F6 | 	mov	ptra, fp
030f0     B3 00 A0 FD | 	call	#popregs_
030f4                 | _display_begin_ret
030f4     2D 00 64 FD | 	ret
030f8                 | 
030f8                 | _display_load_image
030f8     08 4C 05 F6 | 	mov	COUNT_, #8
030fc     A9 00 A0 FD | 	call	#pushregs_
03100     3A 8D 02 F6 | 	mov	local01, arg01
03104     3B 8F 02 F6 | 	mov	local02, arg02
03108     00 74 06 F6 | 	mov	arg01, #0
0310c     C0 63 B2 FD | 	call	#__system___getiolock_1306
03110     1A 75 02 F6 | 	mov	arg01, result1
03114     58 2B B2 FD | 	call	#__system___lockmem
03118     4C 01 00 FF 
0311c     C1 76 06 F6 | 	mov	arg02, ##@LR__1846
03120     00 74 06 F6 | 	mov	arg01, #0
03124     00 78 06 F6 | 	mov	arg03, #0
03128     EC 30 B2 FD | 	call	#__system___basic_print_string
0312c     00 74 06 F6 | 	mov	arg01, #0
03130     47 77 02 F6 | 	mov	arg02, local02
03134     00 78 06 F6 | 	mov	arg03, #0
03138     DC 30 B2 FD | 	call	#__system___basic_print_string
0313c     00 74 06 F6 | 	mov	arg01, #0
03140     0A 76 06 F6 | 	mov	arg02, #10
03144     00 78 06 F6 | 	mov	arg03, #0
03148     80 30 B2 FD | 	call	#__system___basic_print_char
0314c     00 74 06 F6 | 	mov	arg01, #0
03150     7C 63 B2 FD | 	call	#__system___getiolock_1306
03154     1A 01 68 FC | 	wrlong	#0, result1
03158     14 8E 06 F1 | 	add	local02, #20
0315c     47 91 02 FB | 	rdlong	local03, local02
03160     14 8E 86 F1 | 	sub	local02, #20
03164     01 90 0E F2 | 	cmp	local03, #1 wz
03168     10 00 90 5D |  if_ne	jmp	#LR__0139
0316c     46 75 02 F6 | 	mov	arg01, local01
03170     00 76 06 F6 | 	mov	arg02, #0
03174     CC 08 B0 FD | 	call	#_display_canvas_image_start_address
03178     48 00 90 FD | 	jmp	#LR__0142
0317c                 | LR__0139
0317c     14 8E 06 F1 | 	add	local02, #20
03180     47 91 02 FB | 	rdlong	local03, local02
03184     14 8E 86 F1 | 	sub	local02, #20
03188     02 90 0E F2 | 	cmp	local03, #2 wz
0318c     14 00 90 5D |  if_ne	jmp	#LR__0140
03190     46 75 02 F6 | 	mov	arg01, local01
03194     60 09 00 FF 
03198     00 76 06 F6 | 	mov	arg02, ##1228800
0319c     A4 08 B0 FD | 	call	#_display_canvas_image_start_address
031a0     20 00 90 FD | 	jmp	#LR__0141
031a4                 | LR__0140
031a4     14 8E 06 F1 | 	add	local02, #20
031a8     47 91 02 FB | 	rdlong	local03, local02
031ac     14 8E 86 F1 | 	sub	local02, #20
031b0     03 90 0E F2 | 	cmp	local03, #3 wz
031b4     46 75 02 A6 |  if_e	mov	arg01, local01
031b8     C0 12 00 AF 
031bc     00 76 06 A6 |  if_e	mov	arg02, ##2457600
031c0     80 08 B0 AD |  if_e	call	#_display_canvas_image_start_address
031c4                 | LR__0141
031c4                 | LR__0142
031c4     4C 01 00 FF 
031c8     D0 74 06 F6 | 	mov	arg01, ##@LR__1847
031cc     00 76 06 F6 | 	mov	arg02, #0
031d0     94 EA BF FD | 	call	#_mkdir
031d4     4C 01 00 FF 
031d8     D8 74 06 F6 | 	mov	arg01, ##@LR__1848
031dc     B4 E8 BF FD | 	call	#_chdir
031e0     00 74 06 F6 | 	mov	arg01, #0
031e4     E8 62 B2 FD | 	call	#__system___getiolock_1306
031e8     1A 75 02 F6 | 	mov	arg01, result1
031ec     80 2A B2 FD | 	call	#__system___lockmem
031f0     4C 01 00 FF 
031f4     E0 76 06 F6 | 	mov	arg02, ##@LR__1849
031f8     00 74 06 F6 | 	mov	arg01, #0
031fc     00 78 06 F6 | 	mov	arg03, #0
03200     14 30 B2 FD | 	call	#__system___basic_print_string
03204     00 74 06 F6 | 	mov	arg01, #0
03208     47 77 02 F6 | 	mov	arg02, local02
0320c     00 78 06 F6 | 	mov	arg03, #0
03210     04 30 B2 FD | 	call	#__system___basic_print_string
03214     00 74 06 F6 | 	mov	arg01, #0
03218     0A 76 06 F6 | 	mov	arg02, #10
0321c     00 78 06 F6 | 	mov	arg03, #0
03220     A8 2F B2 FD | 	call	#__system___basic_print_char
03224     00 74 06 F6 | 	mov	arg01, #0
03228     A4 62 B2 FD | 	call	#__system___getiolock_1306
0322c     1A 01 68 FC | 	wrlong	#0, result1
03230     4C 01 00 FF 
03234     EF 76 06 F6 | 	mov	arg02, ##@LR__1850
03238     47 75 02 F6 | 	mov	arg01, local02
0323c     24 ED BF FD | 	call	#_fopen
03240     1A 93 0A F6 | 	mov	local04, result1 wz
03244     B4 00 90 5D |  if_ne	jmp	#LR__0143
03248     00 74 06 F6 | 	mov	arg01, #0
0324c     80 62 B2 FD | 	call	#__system___getiolock_1306
03250     1A 75 02 F6 | 	mov	arg01, result1
03254     18 2A B2 FD | 	call	#__system___lockmem
03258     4C 01 00 FF 
0325c     F1 76 06 F6 | 	mov	arg02, ##@LR__1851
03260     00 74 06 F6 | 	mov	arg01, #0
03264     00 78 06 F6 | 	mov	arg03, #0
03268     AC 2F B2 FD | 	call	#__system___basic_print_string
0326c     00 74 06 F6 | 	mov	arg01, #0
03270     47 77 02 F6 | 	mov	arg02, local02
03274     00 78 06 F6 | 	mov	arg03, #0
03278     9C 2F B2 FD | 	call	#__system___basic_print_string
0327c     4C 01 00 FF 
03280     05 77 06 F6 | 	mov	arg02, ##@LR__1852
03284     00 74 06 F6 | 	mov	arg01, #0
03288     00 78 06 F6 | 	mov	arg03, #0
0328c     88 2F B2 FD | 	call	#__system___basic_print_string
03290     00 74 06 F6 | 	mov	arg01, #0
03294     18 A2 05 F1 | 	add	ptr___system__dat__, #24
03298     D1 76 02 FB | 	rdlong	arg02, ptr___system__dat__
0329c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
032a0     00 78 06 F6 | 	mov	arg03, #0
032a4     0A 7A 06 F6 | 	mov	arg04, #10
032a8     B0 2F B2 FD | 	call	#__system___basic_print_integer
032ac     00 74 06 F6 | 	mov	arg01, #0
032b0     0A 76 06 F6 | 	mov	arg02, #10
032b4     00 78 06 F6 | 	mov	arg03, #0
032b8     10 2F B2 FD | 	call	#__system___basic_print_char
032bc     00 74 06 F6 | 	mov	arg01, #0
032c0     0C 62 B2 FD | 	call	#__system___getiolock_1306
032c4     1A 01 68 FC | 	wrlong	#0, result1
032c8     46 75 02 F6 | 	mov	arg01, local01
032cc     00 76 06 F6 | 	mov	arg02, #0
032d0     70 07 B0 FD | 	call	#_display_canvas_image_start_address
032d4     46 75 02 F6 | 	mov	arg01, local01
032d8     00 76 06 F6 | 	mov	arg02, #0
032dc     00 78 06 F6 | 	mov	arg03, #0
032e0     74 08 B0 FD | 	call	#_display_active_window_xy
032e4     46 75 02 F6 | 	mov	arg01, local01
032e8     0A 76 C6 F9 | 	decod	arg02, #10
032ec     01 00 00 FF 
032f0     58 78 06 F6 | 	mov	arg03, ##600
032f4     08 09 B0 FD | 	call	#_display_active_window_wh
032f8                 | '     display_canvas_image_start_address(display,  0 );
032f8                 | '     display_active_window_xy(display, 0, 0);
032f8                 | '     display_active_window_wh(display,  1024 ,  600 );
032f8                 | '     return;
032f8     18 01 90 FD | 	jmp	#LR__0147
032fc                 | LR__0143
032fc     18 8E 06 F1 | 	add	local02, #24
03300     47 77 02 FB | 	rdlong	arg02, local02
03304     04 8E 06 F1 | 	add	local02, #4
03308     47 79 02 FB | 	rdlong	arg03, local02
0330c     04 8E 06 F1 | 	add	local02, #4
03310     47 7B 02 FB | 	rdlong	arg04, local02
03314     04 8E 06 F1 | 	add	local02, #4
03318     47 7D 02 FB | 	rdlong	arg05, local02
0331c     46 75 02 F6 | 	mov	arg01, local01
03320     3C 0B B0 FD | 	call	#_display_put_picture_16bpp
03324     04 8E 86 F1 | 	sub	local02, #4
03328     47 95 02 FB | 	rdlong	local05, local02
0332c     04 8E 06 F1 | 	add	local02, #4
03330     47 91 02 FB | 	rdlong	local03, local02
03334     48 95 02 FD | 	qmul	local05, local03
03338     24 8E 86 F1 | 	sub	local02, #36
0333c     00 96 06 F6 | 	mov	local06, #0
03340                 | ' 
03340                 | '   for (int i = 0; i < imageSize; i++)
03340     18 98 62 FD | 	getqx	local07
03344                 | LR__0144
03344     4C 97 52 F2 | 	cmps	local06, local07 wc
03348     90 00 90 3D |  if_ae	jmp	#LR__0146
0334c     49 75 02 F6 | 	mov	arg01, local04
03350     04 EA BF FD | 	call	#_fgetc
03354     1A 95 02 F6 | 	mov	local05, result1
03358     FF FF 7F FF 
0335c     FF 95 0E F2 | 	cmp	local05, ##-1 wz
03360                 | '       break;
03360     78 00 90 AD |  if_e	jmp	#LR__0146
03364     4A 9B 02 F6 | 	mov	local08, local05
03368     49 75 02 F6 | 	mov	arg01, local04
0336c     E8 E9 BF FD | 	call	#_fgetc
03370     FF FF 7F FF 
03374     FF 35 0E F2 | 	cmp	result1, ##-1 wz
03378                 | '       break;
03378     60 00 90 AD |  if_e	jmp	#LR__0146
0337c     4D 9B 32 F9 | 	getword	local08, local08, #0
03380     08 34 66 F0 | 	shl	result1, #8
03384     1A 9B 42 F5 | 	or	local08, result1
03388     4D 91 32 F9 | 	getword	local03, local08, #0
0338c     2A 8E 06 F1 | 	add	local02, #42
03390     47 95 E2 FA | 	rdword	local05, local02
03394     2A 8E 86 F1 | 	sub	local02, #42
03398     4A 91 0A F2 | 	cmp	local03, local05 wz
0339c     28 00 90 5D |  if_ne	jmp	#LR__0145
033a0     2A 8E 06 F1 | 	add	local02, #42
033a4     47 95 E2 FA | 	rdword	local05, local02
033a8     02 8E 06 F1 | 	add	local02, #2
033ac     47 35 E2 FA | 	rdword	result1, local02
033b0     2C 8E 86 F1 | 	sub	local02, #44
033b4     1A 95 0A F2 | 	cmp	local05, result1 wz
033b8     2C 8E 06 51 |  if_ne	add	local02, #44
033bc     47 91 E2 5A |  if_ne	rdword	local03, local02
033c0     2C 8E 86 51 |  if_ne	sub	local02, #44
033c4     48 9B 02 56 |  if_ne	mov	local08, local03
033c8                 | LR__0145
033c8     46 75 02 F6 | 	mov	arg01, local01
033cc     4D 77 02 F6 | 	mov	arg02, local08
033d0     7C 26 B0 FD | 	call	#_lcdDataWrite16bbp
033d4     01 96 06 F1 | 	add	local06, #1
033d8     68 FF 9F FD | 	jmp	#LR__0144
033dc                 | LR__0146
033dc     49 75 02 F6 | 	mov	arg01, local04
033e0                 | ' {
033e0                 | '     return _closeraw(f);
033e0     88 DD BF FD | 	call	#__closeraw
033e4     46 75 02 F6 | 	mov	arg01, local01
033e8     00 76 06 F6 | 	mov	arg02, #0
033ec     54 06 B0 FD | 	call	#_display_canvas_image_start_address
033f0     46 75 02 F6 | 	mov	arg01, local01
033f4     00 76 06 F6 | 	mov	arg02, #0
033f8     00 78 06 F6 | 	mov	arg03, #0
033fc     58 07 B0 FD | 	call	#_display_active_window_xy
03400     46 75 02 F6 | 	mov	arg01, local01
03404     0A 76 C6 F9 | 	decod	arg02, #10
03408     01 00 00 FF 
0340c     58 78 06 F6 | 	mov	arg03, ##600
03410     EC 07 B0 FD | 	call	#_display_active_window_wh
03414                 | LR__0147
03414     A8 F0 03 F6 | 	mov	ptra, fp
03418     B3 00 A0 FD | 	call	#popregs_
0341c                 | _display_load_image_ret
0341c     2D 00 64 FD | 	ret
03420                 | 
03420                 | _display_bte_memory_copy_image
03420     07 4C 05 F6 | 	mov	COUNT_, #7
03424     A9 00 A0 FD | 	call	#pushregs_
03428     3A 8D 02 F6 | 	mov	local01, arg01
0342c     3B 8F 02 F6 | 	mov	local02, arg02
03430     3C 91 02 F6 | 	mov	local03, arg03
03434     3D 93 02 F6 | 	mov	local04, arg04
03438     00 94 06 F6 | 	mov	local05, #0
0343c                 | '   switch (image->page)
0343c     14 8E 06 F1 | 	add	local02, #20
03440     47 97 02 FB | 	rdlong	local06, local02
03444     14 8E 86 F1 | 	sub	local02, #20
03448     4B 99 02 F6 | 	mov	local07, local06
0344c     01 98 86 F1 | 	sub	local07, #1
03450     03 98 26 F3 | 	fle	local07, #3
03454     30 98 62 FD | 	jmprel	local07
03458                 | LR__0148
03458     0C 00 90 FD | 	jmp	#LR__0149
0345c     10 00 90 FD | 	jmp	#LR__0150
03460     18 00 90 FD | 	jmp	#LR__0151
03464     20 00 90 FD | 	jmp	#LR__0152
03468                 | LR__0149
03468     00 94 06 F6 | 	mov	local05, #0
0346c                 | '     pageAddr =  0 ;
0346c                 | '     break;
0346c     18 00 90 FD | 	jmp	#LR__0153
03470                 | LR__0150
03470     60 09 00 FF 
03474     00 94 06 F6 | 	mov	local05, ##1228800
03478                 | '     pageAddr =  1024 * 600 * 2 ;
03478                 | '     break;
03478     0C 00 90 FD | 	jmp	#LR__0153
0347c                 | LR__0151
0347c     C0 12 00 FF 
03480     00 94 06 F6 | 	mov	local05, ##2457600
03484                 | '     pageAddr =  1024 * 600 * 2 * 2 ;
03484                 | '     break;
03484     00 00 90 FD | 	jmp	#LR__0153
03488                 | LR__0152
03488                 | '     break;
03488                 | LR__0153
03488     28 8E 06 F1 | 	add	local02, #40
0348c     47 97 E2 FA | 	rdword	local06, local02
03490     28 8E 86 F1 | 	sub	local02, #40
03494     0F 96 4E F7 | 	zerox	local06, #15 wz
03498     50 00 90 AD |  if_e	jmp	#LR__0154
0349c     46 75 02 F6 | 	mov	arg01, local01
034a0     18 8E 06 F1 | 	add	local02, #24
034a4     47 7B 02 FB | 	rdlong	arg04, local02
034a8     04 8E 06 F1 | 	add	local02, #4
034ac     47 7D 02 FB | 	rdlong	arg05, local02
034b0     48 8C 06 F1 | 	add	local01, #72
034b4     46 7F 02 FB | 	rdlong	arg06, local01
034b8     04 8E 06 F1 | 	add	local02, #4
034bc     47 87 02 FB | 	rdlong	arg10, local02
034c0     04 8E 06 F1 | 	add	local02, #4
034c4     47 89 02 FB | 	rdlong	arg11, local02
034c8     04 8E 06 F1 | 	add	local02, #4
034cc     47 8B E2 FA | 	rdword	arg12, local02
034d0     4A 77 02 F6 | 	mov	arg02, local05
034d4     0A 78 C6 F9 | 	decod	arg03, #10
034d8     0A 80 C6 F9 | 	decod	arg07, #10
034dc     48 83 02 F6 | 	mov	arg08, local03
034e0     49 85 02 F6 | 	mov	arg09, local04
034e4     40 12 B0 FD | 	call	#_display_bte_memory_copy_with_chroma_key
034e8     44 00 90 FD | 	jmp	#LR__0155
034ec                 | LR__0154
034ec     46 75 02 F6 | 	mov	arg01, local01
034f0     18 8E 06 F1 | 	add	local02, #24
034f4     47 7B 02 FB | 	rdlong	arg04, local02
034f8     04 8E 06 F1 | 	add	local02, #4
034fc     47 7D 02 FB | 	rdlong	arg05, local02
03500     48 8C 06 F1 | 	add	local01, #72
03504     46 7F 02 FB | 	rdlong	arg06, local01
03508     04 8E 06 F1 | 	add	local02, #4
0350c     47 87 02 FB | 	rdlong	arg10, local02
03510     04 8E 06 F1 | 	add	local02, #4
03514     47 89 02 FB | 	rdlong	arg11, local02
03518     4A 77 02 F6 | 	mov	arg02, local05
0351c     0A 78 C6 F9 | 	decod	arg03, #10
03520     0A 80 C6 F9 | 	decod	arg07, #10
03524     48 83 02 F6 | 	mov	arg08, local03
03528     49 85 02 F6 | 	mov	arg09, local04
0352c     F8 10 B0 FD | 	call	#_display_bte_memory_copy
03530                 | LR__0155
03530     A8 F0 03 F6 | 	mov	ptra, fp
03534     B3 00 A0 FD | 	call	#popregs_
03538                 | _display_bte_memory_copy_image_ret
03538     2D 00 64 FD | 	ret
0353c                 | 
0353c                 | _display_on
0353c     02 4C 05 F6 | 	mov	COUNT_, #2
03540     A9 00 A0 FD | 	call	#pushregs_
03544     3A 8D 02 F6 | 	mov	local01, arg01
03548     00 76 0E F2 | 	cmp	arg02, #0 wz
0354c     24 00 90 AD |  if_e	jmp	#LR__0156
03550     12 76 06 F6 | 	mov	arg02, #18
03554     C0 78 06 F6 | 	mov	arg03, #192
03558     C0 8E 06 F6 | 	mov	local02, #192
0355c     46 75 02 F6 | 	mov	arg01, local01
03560     1C 23 B0 FD | 	call	#_lcdRegWrite
03564     46 75 02 F6 | 	mov	arg01, local01
03568     47 77 02 F6 | 	mov	arg02, local02
0356c     74 23 B0 FD | 	call	#_lcdDataWrite
03570     20 00 90 FD | 	jmp	#LR__0157
03574                 | LR__0156
03574     12 76 06 F6 | 	mov	arg02, #18
03578     80 78 06 F6 | 	mov	arg03, #128
0357c     80 8E 06 F6 | 	mov	local02, #128
03580     46 75 02 F6 | 	mov	arg01, local01
03584     F8 22 B0 FD | 	call	#_lcdRegWrite
03588     46 75 02 F6 | 	mov	arg01, local01
0358c     47 77 02 F6 | 	mov	arg02, local02
03590     50 23 B0 FD | 	call	#_lcdDataWrite
03594                 | LR__0157
03594     14 74 06 F6 | 	mov	arg01, #20
03598     EC 27 B2 FD | 	call	#__system___waitms
0359c     A8 F0 03 F6 | 	mov	ptra, fp
035a0     B3 00 A0 FD | 	call	#popregs_
035a4                 | _display_on_ret
035a4     2D 00 64 FD | 	ret
035a8                 | 
035a8                 | _display_lcd_horizontal_width_vertical_height
035a8     04 4C 05 F6 | 	mov	COUNT_, #4
035ac     A9 00 A0 FD | 	call	#pushregs_
035b0     3A 8D 02 F6 | 	mov	local01, arg01
035b4     3B 8F 02 F6 | 	mov	local02, arg02
035b8     3C 91 02 F6 | 	mov	local03, arg03
035bc     47 79 32 F9 | 	getword	arg03, local02, #0
035c0     3C 79 52 F6 | 	abs	arg03, arg03 wc
035c4     03 78 46 F0 | 	shr	arg03, #3
035c8     3C 79 82 F6 | 	negc	arg03, arg03
035cc     01 78 86 F1 | 	sub	arg03, #1
035d0     14 76 06 F6 | 	mov	arg02, #20
035d4     3C 93 02 F6 | 	mov	local04, arg03
035d8     46 75 02 F6 | 	mov	arg01, local01
035dc     A0 22 B0 FD | 	call	#_lcdRegWrite
035e0     46 75 02 F6 | 	mov	arg01, local01
035e4     49 77 02 F6 | 	mov	arg02, local04
035e8     F8 22 B0 FD | 	call	#_lcdDataWrite
035ec     47 8F 32 F9 | 	getword	local02, local02, #0
035f0     47 8F 52 F6 | 	abs	local02, local02 wc
035f4     07 8E 06 F5 | 	and	local02, #7
035f8     47 79 82 F6 | 	negc	arg03, local02
035fc     15 76 06 F6 | 	mov	arg02, #21
03600     3C 93 02 F6 | 	mov	local04, arg03
03604     46 75 02 F6 | 	mov	arg01, local01
03608     74 22 B0 FD | 	call	#_lcdRegWrite
0360c     46 75 02 F6 | 	mov	arg01, local01
03610     49 77 02 F6 | 	mov	arg02, local04
03614     CC 22 B0 FD | 	call	#_lcdDataWrite
03618     48 79 32 F9 | 	getword	arg03, local03, #0
0361c     01 78 86 F1 | 	sub	arg03, #1
03620     1A 76 06 F6 | 	mov	arg02, #26
03624     3C 93 02 F6 | 	mov	local04, arg03
03628     46 75 02 F6 | 	mov	arg01, local01
0362c     50 22 B0 FD | 	call	#_lcdRegWrite
03630     46 75 02 F6 | 	mov	arg01, local01
03634     49 77 02 F6 | 	mov	arg02, local04
03638     A8 22 B0 FD | 	call	#_lcdDataWrite
0363c     48 79 32 F9 | 	getword	arg03, local03, #0
03640     01 78 86 F1 | 	sub	arg03, #1
03644     08 78 C6 F0 | 	sar	arg03, #8
03648     1B 76 06 F6 | 	mov	arg02, #27
0364c     3C 93 02 F6 | 	mov	local04, arg03
03650     46 75 02 F6 | 	mov	arg01, local01
03654     28 22 B0 FD | 	call	#_lcdRegWrite
03658     46 75 02 F6 | 	mov	arg01, local01
0365c     49 77 02 F6 | 	mov	arg02, local04
03660     80 22 B0 FD | 	call	#_lcdDataWrite
03664     A8 F0 03 F6 | 	mov	ptra, fp
03668     B3 00 A0 FD | 	call	#popregs_
0366c                 | _display_lcd_horizontal_width_vertical_height_ret
0366c     2D 00 64 FD | 	ret
03670                 | 
03670                 | _display_lcd_horizontal_non_display
03670     03 4C 05 F6 | 	mov	COUNT_, #3
03674     A9 00 A0 FD | 	call	#pushregs_
03678     3A 8D 02 F6 | 	mov	local01, arg01
0367c     3B 8F 02 F6 | 	mov	local02, arg02
03680     47 79 32 F9 | 	getword	arg03, local02, #0
03684     08 78 16 F2 | 	cmp	arg03, #8 wc
03688     44 00 90 3D |  if_ae	jmp	#LR__0158
0368c     16 76 06 F6 | 	mov	arg02, #22
03690     00 78 06 F6 | 	mov	arg03, #0
03694     00 90 06 F6 | 	mov	local03, #0
03698     46 75 02 F6 | 	mov	arg01, local01
0369c     E0 21 B0 FD | 	call	#_lcdRegWrite
036a0     46 75 02 F6 | 	mov	arg01, local01
036a4     48 77 02 F6 | 	mov	arg02, local03
036a8     38 22 B0 FD | 	call	#_lcdDataWrite
036ac     17 76 06 F6 | 	mov	arg02, #23
036b0     47 79 02 F6 | 	mov	arg03, local02
036b4     3C 91 02 F6 | 	mov	local03, arg03
036b8     46 75 02 F6 | 	mov	arg01, local01
036bc     C0 21 B0 FD | 	call	#_lcdRegWrite
036c0     46 75 02 F6 | 	mov	arg01, local01
036c4     48 77 02 F6 | 	mov	arg02, local03
036c8     18 22 B0 FD | 	call	#_lcdDataWrite
036cc     5C 00 90 FD | 	jmp	#LR__0159
036d0                 | LR__0158
036d0     47 79 32 F9 | 	getword	arg03, local02, #0
036d4     3C 79 52 F6 | 	abs	arg03, arg03 wc
036d8     03 78 46 F0 | 	shr	arg03, #3
036dc     3C 79 82 F6 | 	negc	arg03, arg03
036e0     01 78 86 F1 | 	sub	arg03, #1
036e4     16 76 06 F6 | 	mov	arg02, #22
036e8     3C 91 02 F6 | 	mov	local03, arg03
036ec     46 75 02 F6 | 	mov	arg01, local01
036f0     8C 21 B0 FD | 	call	#_lcdRegWrite
036f4     46 75 02 F6 | 	mov	arg01, local01
036f8     48 77 02 F6 | 	mov	arg02, local03
036fc     E4 21 B0 FD | 	call	#_lcdDataWrite
03700     47 8F 32 F9 | 	getword	local02, local02, #0
03704     47 8F 52 F6 | 	abs	local02, local02 wc
03708     07 8E 06 F5 | 	and	local02, #7
0370c     47 79 82 F6 | 	negc	arg03, local02
03710     17 76 06 F6 | 	mov	arg02, #23
03714     3C 91 02 F6 | 	mov	local03, arg03
03718     46 75 02 F6 | 	mov	arg01, local01
0371c     60 21 B0 FD | 	call	#_lcdRegWrite
03720     46 75 02 F6 | 	mov	arg01, local01
03724     48 77 02 F6 | 	mov	arg02, local03
03728     B8 21 B0 FD | 	call	#_lcdDataWrite
0372c                 | LR__0159
0372c     A8 F0 03 F6 | 	mov	ptra, fp
03730     B3 00 A0 FD | 	call	#popregs_
03734                 | _display_lcd_horizontal_non_display_ret
03734     2D 00 64 FD | 	ret
03738                 | 
03738                 | _display_lcd_hsync_start_position
03738     02 4C 05 F6 | 	mov	COUNT_, #2
0373c     A9 00 A0 FD | 	call	#pushregs_
03740     3A 8D 02 F6 | 	mov	local01, arg01
03744     3B 8F 02 F6 | 	mov	local02, arg02
03748     47 79 32 F9 | 	getword	arg03, local02, #0
0374c     08 78 16 F2 | 	cmp	arg03, #8 wc
03750     24 00 90 3D |  if_ae	jmp	#LR__0160
03754     18 76 06 F6 | 	mov	arg02, #24
03758     00 78 06 F6 | 	mov	arg03, #0
0375c     00 8E 06 F6 | 	mov	local02, #0
03760     46 75 02 F6 | 	mov	arg01, local01
03764     18 21 B0 FD | 	call	#_lcdRegWrite
03768     46 75 02 F6 | 	mov	arg01, local01
0376c     47 77 02 F6 | 	mov	arg02, local02
03770     70 21 B0 FD | 	call	#_lcdDataWrite
03774     30 00 90 FD | 	jmp	#LR__0161
03778                 | LR__0160
03778     47 8F 32 F9 | 	getword	local02, local02, #0
0377c     47 8F 52 F6 | 	abs	local02, local02 wc
03780     03 8E 46 F0 | 	shr	local02, #3
03784     47 79 82 F6 | 	negc	arg03, local02
03788     01 78 86 F1 | 	sub	arg03, #1
0378c     18 76 06 F6 | 	mov	arg02, #24
03790     3C 8F 02 F6 | 	mov	local02, arg03
03794     46 75 02 F6 | 	mov	arg01, local01
03798     E4 20 B0 FD | 	call	#_lcdRegWrite
0379c     46 75 02 F6 | 	mov	arg01, local01
037a0     47 77 02 F6 | 	mov	arg02, local02
037a4     3C 21 B0 FD | 	call	#_lcdDataWrite
037a8                 | LR__0161
037a8     A8 F0 03 F6 | 	mov	ptra, fp
037ac     B3 00 A0 FD | 	call	#popregs_
037b0                 | _display_lcd_hsync_start_position_ret
037b0     2D 00 64 FD | 	ret
037b4                 | 
037b4                 | _display_lcd_hsync_pulse_width
037b4     02 4C 05 F6 | 	mov	COUNT_, #2
037b8     A9 00 A0 FD | 	call	#pushregs_
037bc     3A 8D 02 F6 | 	mov	local01, arg01
037c0     3B 8F 02 F6 | 	mov	local02, arg02
037c4     47 79 32 F9 | 	getword	arg03, local02, #0
037c8     08 78 16 F2 | 	cmp	arg03, #8 wc
037cc     24 00 90 3D |  if_ae	jmp	#LR__0162
037d0     19 76 06 F6 | 	mov	arg02, #25
037d4     00 78 06 F6 | 	mov	arg03, #0
037d8     00 8E 06 F6 | 	mov	local02, #0
037dc     46 75 02 F6 | 	mov	arg01, local01
037e0     9C 20 B0 FD | 	call	#_lcdRegWrite
037e4     46 75 02 F6 | 	mov	arg01, local01
037e8     47 77 02 F6 | 	mov	arg02, local02
037ec     F4 20 B0 FD | 	call	#_lcdDataWrite
037f0     30 00 90 FD | 	jmp	#LR__0163
037f4                 | LR__0162
037f4     47 8F 32 F9 | 	getword	local02, local02, #0
037f8     47 8F 52 F6 | 	abs	local02, local02 wc
037fc     03 8E 46 F0 | 	shr	local02, #3
03800     47 79 82 F6 | 	negc	arg03, local02
03804     01 78 86 F1 | 	sub	arg03, #1
03808     19 76 06 F6 | 	mov	arg02, #25
0380c     3C 8F 02 F6 | 	mov	local02, arg03
03810     46 75 02 F6 | 	mov	arg01, local01
03814     68 20 B0 FD | 	call	#_lcdRegWrite
03818     46 75 02 F6 | 	mov	arg01, local01
0381c     47 77 02 F6 | 	mov	arg02, local02
03820     C0 20 B0 FD | 	call	#_lcdDataWrite
03824                 | LR__0163
03824     A8 F0 03 F6 | 	mov	ptra, fp
03828     B3 00 A0 FD | 	call	#popregs_
0382c                 | _display_lcd_hsync_pulse_width_ret
0382c     2D 00 64 FD | 	ret
03830                 | 
03830                 | _display_lcd_vertical_non_display
03830     03 4C 05 F6 | 	mov	COUNT_, #3
03834     A9 00 A0 FD | 	call	#pushregs_
03838     3A 8D 02 F6 | 	mov	local01, arg01
0383c     3B 8F 32 F9 | 	getword	local02, arg02, #0
03840     01 8E 86 F1 | 	sub	local02, #1
03844     1C 76 06 F6 | 	mov	arg02, #28
03848     47 79 02 F6 | 	mov	arg03, local02
0384c     3C 91 02 F6 | 	mov	local03, arg03
03850     46 75 02 F6 | 	mov	arg01, local01
03854     28 20 B0 FD | 	call	#_lcdRegWrite
03858     46 75 02 F6 | 	mov	arg01, local01
0385c     48 77 02 F6 | 	mov	arg02, local03
03860     80 20 B0 FD | 	call	#_lcdDataWrite
03864     47 79 E2 F8 | 	getbyte	arg03, local02, #0
03868     08 78 46 F0 | 	shr	arg03, #8
0386c     1D 76 06 F6 | 	mov	arg02, #29
03870     3C 91 02 F6 | 	mov	local03, arg03
03874     46 75 02 F6 | 	mov	arg01, local01
03878     04 20 B0 FD | 	call	#_lcdRegWrite
0387c     46 75 02 F6 | 	mov	arg01, local01
03880     48 77 02 F6 | 	mov	arg02, local03
03884     5C 20 B0 FD | 	call	#_lcdDataWrite
03888     A8 F0 03 F6 | 	mov	ptra, fp
0388c     B3 00 A0 FD | 	call	#popregs_
03890                 | _display_lcd_vertical_non_display_ret
03890     2D 00 64 FD | 	ret
03894                 | 
03894                 | _display_image_start_address
03894     03 4C 05 F6 | 	mov	COUNT_, #3
03898     A9 00 A0 FD | 	call	#pushregs_
0389c     3A 8D 02 F6 | 	mov	local01, arg01
038a0     3B 8F 02 F6 | 	mov	local02, arg02
038a4     20 76 06 F6 | 	mov	arg02, #32
038a8     47 79 02 F6 | 	mov	arg03, local02
038ac     3C 91 02 F6 | 	mov	local03, arg03
038b0     46 75 02 F6 | 	mov	arg01, local01
038b4     C8 1F B0 FD | 	call	#_lcdRegWrite
038b8     46 75 02 F6 | 	mov	arg01, local01
038bc     48 77 02 F6 | 	mov	arg02, local03
038c0     20 20 B0 FD | 	call	#_lcdDataWrite
038c4     47 79 02 F6 | 	mov	arg03, local02
038c8     08 78 46 F0 | 	shr	arg03, #8
038cc     21 76 06 F6 | 	mov	arg02, #33
038d0     3C 91 02 F6 | 	mov	local03, arg03
038d4     46 75 02 F6 | 	mov	arg01, local01
038d8     A4 1F B0 FD | 	call	#_lcdRegWrite
038dc     46 75 02 F6 | 	mov	arg01, local01
038e0     48 77 02 F6 | 	mov	arg02, local03
038e4     FC 1F B0 FD | 	call	#_lcdDataWrite
038e8     47 79 02 F6 | 	mov	arg03, local02
038ec     10 78 46 F0 | 	shr	arg03, #16
038f0     22 76 06 F6 | 	mov	arg02, #34
038f4     3C 91 02 F6 | 	mov	local03, arg03
038f8     46 75 02 F6 | 	mov	arg01, local01
038fc     80 1F B0 FD | 	call	#_lcdRegWrite
03900     46 75 02 F6 | 	mov	arg01, local01
03904     48 77 02 F6 | 	mov	arg02, local03
03908     D8 1F B0 FD | 	call	#_lcdDataWrite
0390c     18 8E 46 F0 | 	shr	local02, #24
03910     23 76 06 F6 | 	mov	arg02, #35
03914     47 79 02 F6 | 	mov	arg03, local02
03918     3C 91 02 F6 | 	mov	local03, arg03
0391c     46 75 02 F6 | 	mov	arg01, local01
03920     5C 1F B0 FD | 	call	#_lcdRegWrite
03924     46 75 02 F6 | 	mov	arg01, local01
03928     48 77 02 F6 | 	mov	arg02, local03
0392c     B4 1F B0 FD | 	call	#_lcdDataWrite
03930     A8 F0 03 F6 | 	mov	ptra, fp
03934     B3 00 A0 FD | 	call	#popregs_
03938                 | _display_image_start_address_ret
03938     2D 00 64 FD | 	ret
0393c                 | 
0393c                 | _display_image_width
0393c     03 4C 05 F6 | 	mov	COUNT_, #3
03940     A9 00 A0 FD | 	call	#pushregs_
03944     3A 8D 02 F6 | 	mov	local01, arg01
03948     3B 8F 02 F6 | 	mov	local02, arg02
0394c     24 76 06 F6 | 	mov	arg02, #36
03950     47 79 02 F6 | 	mov	arg03, local02
03954     3C 91 02 F6 | 	mov	local03, arg03
03958     46 75 02 F6 | 	mov	arg01, local01
0395c     20 1F B0 FD | 	call	#_lcdRegWrite
03960     46 75 02 F6 | 	mov	arg01, local01
03964     48 77 02 F6 | 	mov	arg02, local03
03968     78 1F B0 FD | 	call	#_lcdDataWrite
0396c     47 79 32 F9 | 	getword	arg03, local02, #0
03970     08 78 46 F0 | 	shr	arg03, #8
03974     25 76 06 F6 | 	mov	arg02, #37
03978     3C 91 02 F6 | 	mov	local03, arg03
0397c     46 75 02 F6 | 	mov	arg01, local01
03980     FC 1E B0 FD | 	call	#_lcdRegWrite
03984     46 75 02 F6 | 	mov	arg01, local01
03988     48 77 02 F6 | 	mov	arg02, local03
0398c     54 1F B0 FD | 	call	#_lcdDataWrite
03990     A8 F0 03 F6 | 	mov	ptra, fp
03994     B3 00 A0 FD | 	call	#popregs_
03998                 | _display_image_width_ret
03998     2D 00 64 FD | 	ret
0399c                 | 
0399c                 | _display_window_start_xy
0399c     04 4C 05 F6 | 	mov	COUNT_, #4
039a0     A9 00 A0 FD | 	call	#pushregs_
039a4     3A 8D 02 F6 | 	mov	local01, arg01
039a8     3B 8F 02 F6 | 	mov	local02, arg02
039ac     3C 91 02 F6 | 	mov	local03, arg03
039b0     26 76 06 F6 | 	mov	arg02, #38
039b4     47 79 02 F6 | 	mov	arg03, local02
039b8     3C 93 02 F6 | 	mov	local04, arg03
039bc     46 75 02 F6 | 	mov	arg01, local01
039c0     BC 1E B0 FD | 	call	#_lcdRegWrite
039c4     46 75 02 F6 | 	mov	arg01, local01
039c8     49 77 02 F6 | 	mov	arg02, local04
039cc     14 1F B0 FD | 	call	#_lcdDataWrite
039d0     47 79 32 F9 | 	getword	arg03, local02, #0
039d4     08 78 46 F0 | 	shr	arg03, #8
039d8     27 76 06 F6 | 	mov	arg02, #39
039dc     3C 93 02 F6 | 	mov	local04, arg03
039e0     46 75 02 F6 | 	mov	arg01, local01
039e4     98 1E B0 FD | 	call	#_lcdRegWrite
039e8     46 75 02 F6 | 	mov	arg01, local01
039ec     49 77 02 F6 | 	mov	arg02, local04
039f0     F0 1E B0 FD | 	call	#_lcdDataWrite
039f4     28 76 06 F6 | 	mov	arg02, #40
039f8     48 79 02 F6 | 	mov	arg03, local03
039fc     3C 93 02 F6 | 	mov	local04, arg03
03a00     46 75 02 F6 | 	mov	arg01, local01
03a04     78 1E B0 FD | 	call	#_lcdRegWrite
03a08     46 75 02 F6 | 	mov	arg01, local01
03a0c     49 77 02 F6 | 	mov	arg02, local04
03a10     D0 1E B0 FD | 	call	#_lcdDataWrite
03a14     48 79 32 F9 | 	getword	arg03, local03, #0
03a18     08 78 46 F0 | 	shr	arg03, #8
03a1c     29 76 06 F6 | 	mov	arg02, #41
03a20     3C 93 02 F6 | 	mov	local04, arg03
03a24     46 75 02 F6 | 	mov	arg01, local01
03a28     54 1E B0 FD | 	call	#_lcdRegWrite
03a2c     46 75 02 F6 | 	mov	arg01, local01
03a30     49 77 02 F6 | 	mov	arg02, local04
03a34     AC 1E B0 FD | 	call	#_lcdDataWrite
03a38     A8 F0 03 F6 | 	mov	ptra, fp
03a3c     B3 00 A0 FD | 	call	#popregs_
03a40                 | _display_window_start_xy_ret
03a40     2D 00 64 FD | 	ret
03a44                 | 
03a44                 | _display_canvas_image_start_address
03a44     03 4C 05 F6 | 	mov	COUNT_, #3
03a48     A9 00 A0 FD | 	call	#pushregs_
03a4c     3A 8D 02 F6 | 	mov	local01, arg01
03a50     3B 8F 02 F6 | 	mov	local02, arg02
03a54     48 8C 06 F1 | 	add	local01, #72
03a58     46 8F 62 FC | 	wrlong	local02, local01
03a5c     48 8C 86 F1 | 	sub	local01, #72
03a60     50 76 06 F6 | 	mov	arg02, #80
03a64     47 79 02 F6 | 	mov	arg03, local02
03a68     3C 91 02 F6 | 	mov	local03, arg03
03a6c     46 75 02 F6 | 	mov	arg01, local01
03a70     0C 1E B0 FD | 	call	#_lcdRegWrite
03a74     46 75 02 F6 | 	mov	arg01, local01
03a78     48 77 02 F6 | 	mov	arg02, local03
03a7c     64 1E B0 FD | 	call	#_lcdDataWrite
03a80     47 79 02 F6 | 	mov	arg03, local02
03a84     08 78 46 F0 | 	shr	arg03, #8
03a88     51 76 06 F6 | 	mov	arg02, #81
03a8c     3C 91 02 F6 | 	mov	local03, arg03
03a90     46 75 02 F6 | 	mov	arg01, local01
03a94     E8 1D B0 FD | 	call	#_lcdRegWrite
03a98     46 75 02 F6 | 	mov	arg01, local01
03a9c     48 77 02 F6 | 	mov	arg02, local03
03aa0     40 1E B0 FD | 	call	#_lcdDataWrite
03aa4     47 79 02 F6 | 	mov	arg03, local02
03aa8     10 78 46 F0 | 	shr	arg03, #16
03aac     52 76 06 F6 | 	mov	arg02, #82
03ab0     3C 91 02 F6 | 	mov	local03, arg03
03ab4     46 75 02 F6 | 	mov	arg01, local01
03ab8     C4 1D B0 FD | 	call	#_lcdRegWrite
03abc     46 75 02 F6 | 	mov	arg01, local01
03ac0     48 77 02 F6 | 	mov	arg02, local03
03ac4     1C 1E B0 FD | 	call	#_lcdDataWrite
03ac8     18 8E 46 F0 | 	shr	local02, #24
03acc     53 76 06 F6 | 	mov	arg02, #83
03ad0     47 79 02 F6 | 	mov	arg03, local02
03ad4     3C 91 02 F6 | 	mov	local03, arg03
03ad8     46 75 02 F6 | 	mov	arg01, local01
03adc     A0 1D B0 FD | 	call	#_lcdRegWrite
03ae0     46 75 02 F6 | 	mov	arg01, local01
03ae4     48 77 02 F6 | 	mov	arg02, local03
03ae8     F8 1D B0 FD | 	call	#_lcdDataWrite
03aec     A8 F0 03 F6 | 	mov	ptra, fp
03af0     B3 00 A0 FD | 	call	#popregs_
03af4                 | _display_canvas_image_start_address_ret
03af4     2D 00 64 FD | 	ret
03af8                 | 
03af8                 | _display_canvas_image_width
03af8     03 4C 05 F6 | 	mov	COUNT_, #3
03afc     A9 00 A0 FD | 	call	#pushregs_
03b00     3A 8D 02 F6 | 	mov	local01, arg01
03b04     3B 8F 02 F6 | 	mov	local02, arg02
03b08     54 76 06 F6 | 	mov	arg02, #84
03b0c     47 79 02 F6 | 	mov	arg03, local02
03b10     3C 91 02 F6 | 	mov	local03, arg03
03b14     46 75 02 F6 | 	mov	arg01, local01
03b18     64 1D B0 FD | 	call	#_lcdRegWrite
03b1c     46 75 02 F6 | 	mov	arg01, local01
03b20     48 77 02 F6 | 	mov	arg02, local03
03b24     BC 1D B0 FD | 	call	#_lcdDataWrite
03b28     47 79 32 F9 | 	getword	arg03, local02, #0
03b2c     08 78 46 F0 | 	shr	arg03, #8
03b30     55 76 06 F6 | 	mov	arg02, #85
03b34     3C 91 02 F6 | 	mov	local03, arg03
03b38     46 75 02 F6 | 	mov	arg01, local01
03b3c     40 1D B0 FD | 	call	#_lcdRegWrite
03b40     46 75 02 F6 | 	mov	arg01, local01
03b44     48 77 02 F6 | 	mov	arg02, local03
03b48     98 1D B0 FD | 	call	#_lcdDataWrite
03b4c     A8 F0 03 F6 | 	mov	ptra, fp
03b50     B3 00 A0 FD | 	call	#popregs_
03b54                 | _display_canvas_image_width_ret
03b54     2D 00 64 FD | 	ret
03b58                 | 
03b58                 | _display_active_window_xy
03b58     04 4C 05 F6 | 	mov	COUNT_, #4
03b5c     A9 00 A0 FD | 	call	#pushregs_
03b60     3A 8D 02 F6 | 	mov	local01, arg01
03b64     3B 8F 02 F6 | 	mov	local02, arg02
03b68     3C 91 02 F6 | 	mov	local03, arg03
03b6c     56 76 06 F6 | 	mov	arg02, #86
03b70     47 79 02 F6 | 	mov	arg03, local02
03b74     3C 93 02 F6 | 	mov	local04, arg03
03b78     46 75 02 F6 | 	mov	arg01, local01
03b7c     00 1D B0 FD | 	call	#_lcdRegWrite
03b80     46 75 02 F6 | 	mov	arg01, local01
03b84     49 77 02 F6 | 	mov	arg02, local04
03b88     58 1D B0 FD | 	call	#_lcdDataWrite
03b8c     47 79 32 F9 | 	getword	arg03, local02, #0
03b90     08 78 46 F0 | 	shr	arg03, #8
03b94     57 76 06 F6 | 	mov	arg02, #87
03b98     3C 93 02 F6 | 	mov	local04, arg03
03b9c     46 75 02 F6 | 	mov	arg01, local01
03ba0     DC 1C B0 FD | 	call	#_lcdRegWrite
03ba4     46 75 02 F6 | 	mov	arg01, local01
03ba8     49 77 02 F6 | 	mov	arg02, local04
03bac     34 1D B0 FD | 	call	#_lcdDataWrite
03bb0     58 76 06 F6 | 	mov	arg02, #88
03bb4     48 79 02 F6 | 	mov	arg03, local03
03bb8     3C 93 02 F6 | 	mov	local04, arg03
03bbc     46 75 02 F6 | 	mov	arg01, local01
03bc0     BC 1C B0 FD | 	call	#_lcdRegWrite
03bc4     46 75 02 F6 | 	mov	arg01, local01
03bc8     49 77 02 F6 | 	mov	arg02, local04
03bcc     14 1D B0 FD | 	call	#_lcdDataWrite
03bd0     48 79 32 F9 | 	getword	arg03, local03, #0
03bd4     08 78 46 F0 | 	shr	arg03, #8
03bd8     59 76 06 F6 | 	mov	arg02, #89
03bdc     3C 93 02 F6 | 	mov	local04, arg03
03be0     46 75 02 F6 | 	mov	arg01, local01
03be4     98 1C B0 FD | 	call	#_lcdRegWrite
03be8     46 75 02 F6 | 	mov	arg01, local01
03bec     49 77 02 F6 | 	mov	arg02, local04
03bf0     F0 1C B0 FD | 	call	#_lcdDataWrite
03bf4     A8 F0 03 F6 | 	mov	ptra, fp
03bf8     B3 00 A0 FD | 	call	#popregs_
03bfc                 | _display_active_window_xy_ret
03bfc     2D 00 64 FD | 	ret
03c00                 | 
03c00                 | _display_active_window_wh
03c00     04 4C 05 F6 | 	mov	COUNT_, #4
03c04     A9 00 A0 FD | 	call	#pushregs_
03c08     3A 8D 02 F6 | 	mov	local01, arg01
03c0c     3B 8F 02 F6 | 	mov	local02, arg02
03c10     3C 91 02 F6 | 	mov	local03, arg03
03c14     5A 76 06 F6 | 	mov	arg02, #90
03c18     47 79 02 F6 | 	mov	arg03, local02
03c1c     3C 93 02 F6 | 	mov	local04, arg03
03c20     46 75 02 F6 | 	mov	arg01, local01
03c24     58 1C B0 FD | 	call	#_lcdRegWrite
03c28     46 75 02 F6 | 	mov	arg01, local01
03c2c     49 77 02 F6 | 	mov	arg02, local04
03c30     B0 1C B0 FD | 	call	#_lcdDataWrite
03c34     47 79 32 F9 | 	getword	arg03, local02, #0
03c38     08 78 46 F0 | 	shr	arg03, #8
03c3c     5B 76 06 F6 | 	mov	arg02, #91
03c40     3C 93 02 F6 | 	mov	local04, arg03
03c44     46 75 02 F6 | 	mov	arg01, local01
03c48     34 1C B0 FD | 	call	#_lcdRegWrite
03c4c     46 75 02 F6 | 	mov	arg01, local01
03c50     49 77 02 F6 | 	mov	arg02, local04
03c54     8C 1C B0 FD | 	call	#_lcdDataWrite
03c58     5C 76 06 F6 | 	mov	arg02, #92
03c5c     48 79 02 F6 | 	mov	arg03, local03
03c60     3C 93 02 F6 | 	mov	local04, arg03
03c64     46 75 02 F6 | 	mov	arg01, local01
03c68     14 1C B0 FD | 	call	#_lcdRegWrite
03c6c     46 75 02 F6 | 	mov	arg01, local01
03c70     49 77 02 F6 | 	mov	arg02, local04
03c74     6C 1C B0 FD | 	call	#_lcdDataWrite
03c78     48 79 32 F9 | 	getword	arg03, local03, #0
03c7c     08 78 46 F0 | 	shr	arg03, #8
03c80     5D 76 06 F6 | 	mov	arg02, #93
03c84     3C 93 02 F6 | 	mov	local04, arg03
03c88     46 75 02 F6 | 	mov	arg01, local01
03c8c     F0 1B B0 FD | 	call	#_lcdRegWrite
03c90     46 75 02 F6 | 	mov	arg01, local01
03c94     49 77 02 F6 | 	mov	arg02, local04
03c98     48 1C B0 FD | 	call	#_lcdDataWrite
03c9c     A8 F0 03 F6 | 	mov	ptra, fp
03ca0     B3 00 A0 FD | 	call	#popregs_
03ca4                 | _display_active_window_wh_ret
03ca4     2D 00 64 FD | 	ret
03ca8                 | 
03ca8                 | _display_fore_ground_color_16bpp
03ca8     03 4C 05 F6 | 	mov	COUNT_, #3
03cac     A9 00 A0 FD | 	call	#pushregs_
03cb0     3A 8D 02 F6 | 	mov	local01, arg01
03cb4     3B 8F 02 F6 | 	mov	local02, arg02
03cb8     47 79 32 F9 | 	getword	arg03, local02, #0
03cbc     08 78 46 F0 | 	shr	arg03, #8
03cc0     D2 76 06 F6 | 	mov	arg02, #210
03cc4     3C 91 02 F6 | 	mov	local03, arg03
03cc8     46 75 02 F6 | 	mov	arg01, local01
03ccc     B0 1B B0 FD | 	call	#_lcdRegWrite
03cd0     46 75 02 F6 | 	mov	arg01, local01
03cd4     48 77 02 F6 | 	mov	arg02, local03
03cd8     08 1C B0 FD | 	call	#_lcdDataWrite
03cdc     47 79 32 F9 | 	getword	arg03, local02, #0
03ce0     03 78 46 F0 | 	shr	arg03, #3
03ce4     D3 76 06 F6 | 	mov	arg02, #211
03ce8     3C 91 02 F6 | 	mov	local03, arg03
03cec     46 75 02 F6 | 	mov	arg01, local01
03cf0     8C 1B B0 FD | 	call	#_lcdRegWrite
03cf4     46 75 02 F6 | 	mov	arg01, local01
03cf8     48 77 02 F6 | 	mov	arg02, local03
03cfc     E4 1B B0 FD | 	call	#_lcdDataWrite
03d00     47 79 32 F9 | 	getword	arg03, local02, #0
03d04     03 78 66 F0 | 	shl	arg03, #3
03d08     D4 76 06 F6 | 	mov	arg02, #212
03d0c     3C 91 02 F6 | 	mov	local03, arg03
03d10     46 75 02 F6 | 	mov	arg01, local01
03d14     68 1B B0 FD | 	call	#_lcdRegWrite
03d18     46 75 02 F6 | 	mov	arg01, local01
03d1c     48 77 02 F6 | 	mov	arg02, local03
03d20     C0 1B B0 FD | 	call	#_lcdDataWrite
03d24     A8 F0 03 F6 | 	mov	ptra, fp
03d28     B3 00 A0 FD | 	call	#popregs_
03d2c                 | _display_fore_ground_color_16bpp_ret
03d2c     2D 00 64 FD | 	ret
03d30                 | 
03d30                 | _display_back_ground_color_16bpp
03d30     03 4C 05 F6 | 	mov	COUNT_, #3
03d34     A9 00 A0 FD | 	call	#pushregs_
03d38     3A 8D 02 F6 | 	mov	local01, arg01
03d3c     3B 8F 02 F6 | 	mov	local02, arg02
03d40     47 79 32 F9 | 	getword	arg03, local02, #0
03d44     08 78 46 F0 | 	shr	arg03, #8
03d48     D5 76 06 F6 | 	mov	arg02, #213
03d4c     3C 91 02 F6 | 	mov	local03, arg03
03d50     46 75 02 F6 | 	mov	arg01, local01
03d54     28 1B B0 FD | 	call	#_lcdRegWrite
03d58     46 75 02 F6 | 	mov	arg01, local01
03d5c     48 77 02 F6 | 	mov	arg02, local03
03d60     80 1B B0 FD | 	call	#_lcdDataWrite
03d64     47 79 32 F9 | 	getword	arg03, local02, #0
03d68     03 78 46 F0 | 	shr	arg03, #3
03d6c     D6 76 06 F6 | 	mov	arg02, #214
03d70     3C 91 02 F6 | 	mov	local03, arg03
03d74     46 75 02 F6 | 	mov	arg01, local01
03d78     04 1B B0 FD | 	call	#_lcdRegWrite
03d7c     46 75 02 F6 | 	mov	arg01, local01
03d80     48 77 02 F6 | 	mov	arg02, local03
03d84     5C 1B B0 FD | 	call	#_lcdDataWrite
03d88     47 79 32 F9 | 	getword	arg03, local02, #0
03d8c     03 78 66 F0 | 	shl	arg03, #3
03d90     D7 76 06 F6 | 	mov	arg02, #215
03d94     3C 91 02 F6 | 	mov	local03, arg03
03d98     46 75 02 F6 | 	mov	arg01, local01
03d9c     E0 1A B0 FD | 	call	#_lcdRegWrite
03da0     46 75 02 F6 | 	mov	arg01, local01
03da4     48 77 02 F6 | 	mov	arg02, local03
03da8     38 1B B0 FD | 	call	#_lcdDataWrite
03dac     A8 F0 03 F6 | 	mov	ptra, fp
03db0     B3 00 A0 FD | 	call	#popregs_
03db4                 | _display_back_ground_color_16bpp_ret
03db4     2D 00 64 FD | 	ret
03db8                 | 
03db8                 | _display_set_pixel_cursor
03db8     04 4C 05 F6 | 	mov	COUNT_, #4
03dbc     A9 00 A0 FD | 	call	#pushregs_
03dc0     3A 8D 02 F6 | 	mov	local01, arg01
03dc4     3B 8F 02 F6 | 	mov	local02, arg02
03dc8     3C 91 02 F6 | 	mov	local03, arg03
03dcc     5F 76 06 F6 | 	mov	arg02, #95
03dd0     47 79 02 F6 | 	mov	arg03, local02
03dd4     3C 93 02 F6 | 	mov	local04, arg03
03dd8     46 75 02 F6 | 	mov	arg01, local01
03ddc     A0 1A B0 FD | 	call	#_lcdRegWrite
03de0     46 75 02 F6 | 	mov	arg01, local01
03de4     49 77 02 F6 | 	mov	arg02, local04
03de8     F8 1A B0 FD | 	call	#_lcdDataWrite
03dec     47 79 32 F9 | 	getword	arg03, local02, #0
03df0     08 78 46 F0 | 	shr	arg03, #8
03df4     60 76 06 F6 | 	mov	arg02, #96
03df8     3C 93 02 F6 | 	mov	local04, arg03
03dfc     46 75 02 F6 | 	mov	arg01, local01
03e00     7C 1A B0 FD | 	call	#_lcdRegWrite
03e04     46 75 02 F6 | 	mov	arg01, local01
03e08     49 77 02 F6 | 	mov	arg02, local04
03e0c     D4 1A B0 FD | 	call	#_lcdDataWrite
03e10     61 76 06 F6 | 	mov	arg02, #97
03e14     48 79 02 F6 | 	mov	arg03, local03
03e18     3C 93 02 F6 | 	mov	local04, arg03
03e1c     46 75 02 F6 | 	mov	arg01, local01
03e20     5C 1A B0 FD | 	call	#_lcdRegWrite
03e24     46 75 02 F6 | 	mov	arg01, local01
03e28     49 77 02 F6 | 	mov	arg02, local04
03e2c     B4 1A B0 FD | 	call	#_lcdDataWrite
03e30     48 79 32 F9 | 	getword	arg03, local03, #0
03e34     08 78 46 F0 | 	shr	arg03, #8
03e38     62 76 06 F6 | 	mov	arg02, #98
03e3c     3C 93 02 F6 | 	mov	local04, arg03
03e40     46 75 02 F6 | 	mov	arg01, local01
03e44     38 1A B0 FD | 	call	#_lcdRegWrite
03e48     46 75 02 F6 | 	mov	arg01, local01
03e4c     49 77 02 F6 | 	mov	arg02, local04
03e50     90 1A B0 FD | 	call	#_lcdDataWrite
03e54     A8 F0 03 F6 | 	mov	ptra, fp
03e58     B3 00 A0 FD | 	call	#popregs_
03e5c                 | _display_set_pixel_cursor_ret
03e5c     2D 00 64 FD | 	ret
03e60                 | 
03e60                 | _display_put_picture_16bpp
03e60     05 4C 05 F6 | 	mov	COUNT_, #5
03e64     A9 00 A0 FD | 	call	#pushregs_
03e68     3A 8D 02 F6 | 	mov	local01, arg01
03e6c     3B 8F 02 F6 | 	mov	local02, arg02
03e70     3C 91 02 F6 | 	mov	local03, arg03
03e74     3D 93 02 F6 | 	mov	local04, arg04
03e78     3E 95 02 F6 | 	mov	local05, arg05
03e7c     46 75 02 F6 | 	mov	arg01, local01
03e80     47 77 02 F6 | 	mov	arg02, local02
03e84     48 79 02 F6 | 	mov	arg03, local03
03e88     CC FC BF FD | 	call	#_display_active_window_xy
03e8c     46 75 02 F6 | 	mov	arg01, local01
03e90     49 77 02 F6 | 	mov	arg02, local04
03e94     4A 79 02 F6 | 	mov	arg03, local05
03e98     64 FD BF FD | 	call	#_display_active_window_wh
03e9c     46 75 02 F6 | 	mov	arg01, local01
03ea0     47 77 02 F6 | 	mov	arg02, local02
03ea4     48 79 02 F6 | 	mov	arg03, local03
03ea8     0C FF BF FD | 	call	#_display_set_pixel_cursor
03eac     46 75 02 F6 | 	mov	arg01, local01
03eb0     04 76 06 F6 | 	mov	arg02, #4
03eb4     C8 19 B0 FD | 	call	#_lcdRegWrite
03eb8     A8 F0 03 F6 | 	mov	ptra, fp
03ebc     B3 00 A0 FD | 	call	#popregs_
03ec0                 | _display_put_picture_16bpp_ret
03ec0     2D 00 64 FD | 	ret
03ec4                 | 
03ec4                 | _display_text_mode
03ec4     02 4C 05 F6 | 	mov	COUNT_, #2
03ec8     A9 00 A0 FD | 	call	#pushregs_
03ecc     3A 8D 02 F6 | 	mov	local01, arg01
03ed0     00 76 0E F2 | 	cmp	arg02, #0 wz
03ed4     24 00 90 AD |  if_e	jmp	#LR__0164
03ed8     03 76 06 F6 | 	mov	arg02, #3
03edc     04 78 06 F6 | 	mov	arg03, #4
03ee0     04 8E 06 F6 | 	mov	local02, #4
03ee4     46 75 02 F6 | 	mov	arg01, local01
03ee8     94 19 B0 FD | 	call	#_lcdRegWrite
03eec     46 75 02 F6 | 	mov	arg01, local01
03ef0     47 77 02 F6 | 	mov	arg02, local02
03ef4     EC 19 B0 FD | 	call	#_lcdDataWrite
03ef8     20 00 90 FD | 	jmp	#LR__0165
03efc                 | LR__0164
03efc     03 76 06 F6 | 	mov	arg02, #3
03f00     00 78 06 F6 | 	mov	arg03, #0
03f04     00 8E 06 F6 | 	mov	local02, #0
03f08     46 75 02 F6 | 	mov	arg01, local01
03f0c     70 19 B0 FD | 	call	#_lcdRegWrite
03f10     46 75 02 F6 | 	mov	arg01, local01
03f14     47 77 02 F6 | 	mov	arg02, local02
03f18     C8 19 B0 FD | 	call	#_lcdDataWrite
03f1c                 | LR__0165
03f1c     A8 F0 03 F6 | 	mov	ptra, fp
03f20     B3 00 A0 FD | 	call	#popregs_
03f24                 | _display_text_mode_ret
03f24     2D 00 64 FD | 	ret
03f28                 | 
03f28                 | _display_set_text_cursor
03f28     04 4C 05 F6 | 	mov	COUNT_, #4
03f2c     A9 00 A0 FD | 	call	#pushregs_
03f30     3A 8D 02 F6 | 	mov	local01, arg01
03f34     3B 8F 02 F6 | 	mov	local02, arg02
03f38     3C 91 02 F6 | 	mov	local03, arg03
03f3c     63 76 06 F6 | 	mov	arg02, #99
03f40     47 79 02 F6 | 	mov	arg03, local02
03f44     3C 93 02 F6 | 	mov	local04, arg03
03f48     46 75 02 F6 | 	mov	arg01, local01
03f4c     30 19 B0 FD | 	call	#_lcdRegWrite
03f50     46 75 02 F6 | 	mov	arg01, local01
03f54     49 77 02 F6 | 	mov	arg02, local04
03f58     88 19 B0 FD | 	call	#_lcdDataWrite
03f5c     47 79 32 F9 | 	getword	arg03, local02, #0
03f60     08 78 46 F0 | 	shr	arg03, #8
03f64     64 76 06 F6 | 	mov	arg02, #100
03f68     3C 93 02 F6 | 	mov	local04, arg03
03f6c     46 75 02 F6 | 	mov	arg01, local01
03f70     0C 19 B0 FD | 	call	#_lcdRegWrite
03f74     46 75 02 F6 | 	mov	arg01, local01
03f78     49 77 02 F6 | 	mov	arg02, local04
03f7c     64 19 B0 FD | 	call	#_lcdDataWrite
03f80     65 76 06 F6 | 	mov	arg02, #101
03f84     48 79 02 F6 | 	mov	arg03, local03
03f88     3C 93 02 F6 | 	mov	local04, arg03
03f8c     46 75 02 F6 | 	mov	arg01, local01
03f90     EC 18 B0 FD | 	call	#_lcdRegWrite
03f94     46 75 02 F6 | 	mov	arg01, local01
03f98     49 77 02 F6 | 	mov	arg02, local04
03f9c     44 19 B0 FD | 	call	#_lcdDataWrite
03fa0     48 79 32 F9 | 	getword	arg03, local03, #0
03fa4     08 78 46 F0 | 	shr	arg03, #8
03fa8     66 76 06 F6 | 	mov	arg02, #102
03fac     3C 93 02 F6 | 	mov	local04, arg03
03fb0     46 75 02 F6 | 	mov	arg01, local01
03fb4     C8 18 B0 FD | 	call	#_lcdRegWrite
03fb8     46 75 02 F6 | 	mov	arg01, local01
03fbc     49 77 02 F6 | 	mov	arg02, local04
03fc0     20 19 B0 FD | 	call	#_lcdDataWrite
03fc4     A8 F0 03 F6 | 	mov	ptra, fp
03fc8     B3 00 A0 FD | 	call	#popregs_
03fcc                 | _display_set_text_cursor_ret
03fcc     2D 00 64 FD | 	ret
03fd0                 | 
03fd0                 | _display_set_text_parameter1
03fd0     02 4C 05 F6 | 	mov	COUNT_, #2
03fd4     A9 00 A0 FD | 	call	#pushregs_
03fd8     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
03fdc     06 76 66 F0 | 	shl	arg02, #6
03fe0     3C 79 E2 F8 | 	getbyte	arg03, arg03, #0
03fe4     04 78 66 F0 | 	shl	arg03, #4
03fe8     3C 77 42 F5 | 	or	arg02, arg03
03fec     3D 79 E2 F8 | 	getbyte	arg03, arg04, #0
03ff0     3B 79 42 F5 | 	or	arg03, arg02
03ff4     CC 76 06 F6 | 	mov	arg02, #204
03ff8     3A 8D 02 F6 | 	mov	local01, arg01
03ffc     3C 8F 02 F6 | 	mov	local02, arg03
04000     46 75 02 F6 | 	mov	arg01, local01
04004     78 18 B0 FD | 	call	#_lcdRegWrite
04008     46 75 02 F6 | 	mov	arg01, local01
0400c     47 77 02 F6 | 	mov	arg02, local02
04010     D0 18 B0 FD | 	call	#_lcdDataWrite
04014     A8 F0 03 F6 | 	mov	ptra, fp
04018     B3 00 A0 FD | 	call	#popregs_
0401c                 | _display_set_text_parameter1_ret
0401c     2D 00 64 FD | 	ret
04020                 | 
04020                 | _display_set_text_parameter2
04020     02 4C 05 F6 | 	mov	COUNT_, #2
04024     A9 00 A0 FD | 	call	#pushregs_
04028     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
0402c     07 76 66 F0 | 	shl	arg02, #7
04030     3C 79 E2 F8 | 	getbyte	arg03, arg03, #0
04034     06 78 66 F0 | 	shl	arg03, #6
04038     3C 77 42 F5 | 	or	arg02, arg03
0403c     3D 79 E2 F8 | 	getbyte	arg03, arg04, #0
04040     02 78 66 F0 | 	shl	arg03, #2
04044     3C 77 42 F5 | 	or	arg02, arg03
04048     3E 79 E2 F8 | 	getbyte	arg03, arg05, #0
0404c     3B 79 42 F5 | 	or	arg03, arg02
04050     CD 76 06 F6 | 	mov	arg02, #205
04054     3A 8D 02 F6 | 	mov	local01, arg01
04058     3C 8F 02 F6 | 	mov	local02, arg03
0405c     46 75 02 F6 | 	mov	arg01, local01
04060     1C 18 B0 FD | 	call	#_lcdRegWrite
04064     46 75 02 F6 | 	mov	arg01, local01
04068     47 77 02 F6 | 	mov	arg02, local02
0406c     74 18 B0 FD | 	call	#_lcdDataWrite
04070     A8 F0 03 F6 | 	mov	ptra, fp
04074     B3 00 A0 FD | 	call	#popregs_
04078                 | _display_set_text_parameter2_ret
04078     2D 00 64 FD | 	ret
0407c                 | 
0407c                 | _display_draw_string
0407c     04 4C 05 F6 | 	mov	COUNT_, #4
04080     A9 00 A0 FD | 	call	#pushregs_
04084     3A 8D 02 F6 | 	mov	local01, arg01
04088     3B 8F 02 F6 | 	mov	local02, arg02
0408c     3C 91 02 F6 | 	mov	local03, arg03
04090     3D 93 02 F6 | 	mov	local04, arg04
04094     46 75 02 F6 | 	mov	arg01, local01
04098     01 76 06 F6 | 	mov	arg02, #1
0409c     24 FE BF FD | 	call	#_display_text_mode
040a0     46 75 02 F6 | 	mov	arg01, local01
040a4     47 77 02 F6 | 	mov	arg02, local02
040a8     48 79 02 F6 | 	mov	arg03, local03
040ac     78 FE BF FD | 	call	#_display_set_text_cursor
040b0     46 75 02 F6 | 	mov	arg01, local01
040b4     04 76 06 F6 | 	mov	arg02, #4
040b8     C4 17 B0 FD | 	call	#_lcdRegWrite
040bc                 | ' {
040bc                 | '   display_text_mode(display,  (1) );
040bc                 | '   display_set_text_cursor(display, x0, y0);
040bc                 | '   display_ram_access_prepare(display);
040bc                 | '   while (*str != '\0')
040bc                 | LR__0166
040bc     49 91 CA FA | 	rdbyte	local03, local04 wz
040c0     1C 00 90 AD |  if_e	jmp	#LR__0167
040c4     46 75 02 F6 | 	mov	arg01, local01
040c8     00 1A B0 FD | 	call	#_checkWriteFifoNotFull
040cc     46 75 02 F6 | 	mov	arg01, local01
040d0     49 77 C2 FA | 	rdbyte	arg02, local04
040d4     0C 18 B0 FD | 	call	#_lcdDataWrite
040d8     01 92 06 F1 | 	add	local04, #1
040dc     DC FF 9F FD | 	jmp	#LR__0166
040e0                 | LR__0167
040e0     46 75 02 F6 | 	mov	arg01, local01
040e4     28 1A B0 FD | 	call	#_check2dBusy
040e8     46 75 02 F6 | 	mov	arg01, local01
040ec     00 76 06 F6 | 	mov	arg02, #0
040f0     D0 FD BF FD | 	call	#_display_text_mode
040f4     A8 F0 03 F6 | 	mov	ptra, fp
040f8     B3 00 A0 FD | 	call	#popregs_
040fc                 | _display_draw_string_ret
040fc     2D 00 64 FD | 	ret
04100                 | 
04100                 | _display_draw_line
04100     06 4C 05 F6 | 	mov	COUNT_, #6
04104     A9 00 A0 FD | 	call	#pushregs_
04108     3A 8D 02 F6 | 	mov	local01, arg01
0410c     3B 8F 02 F6 | 	mov	local02, arg02
04110     3C 91 02 F6 | 	mov	local03, arg03
04114     3D 93 02 F6 | 	mov	local04, arg04
04118     3E 95 02 F6 | 	mov	local05, arg05
0411c     46 75 02 F6 | 	mov	arg01, local01
04120     3F 77 02 F6 | 	mov	arg02, arg06
04124     80 FB BF FD | 	call	#_display_fore_ground_color_16bpp
04128     68 76 06 F6 | 	mov	arg02, #104
0412c     47 79 02 F6 | 	mov	arg03, local02
04130     3C 97 02 F6 | 	mov	local06, arg03
04134     46 75 02 F6 | 	mov	arg01, local01
04138     44 17 B0 FD | 	call	#_lcdRegWrite
0413c     46 75 02 F6 | 	mov	arg01, local01
04140     4B 77 02 F6 | 	mov	arg02, local06
04144     9C 17 B0 FD | 	call	#_lcdDataWrite
04148     47 79 32 F9 | 	getword	arg03, local02, #0
0414c     08 78 46 F0 | 	shr	arg03, #8
04150     69 76 06 F6 | 	mov	arg02, #105
04154     3C 97 02 F6 | 	mov	local06, arg03
04158     46 75 02 F6 | 	mov	arg01, local01
0415c     20 17 B0 FD | 	call	#_lcdRegWrite
04160     46 75 02 F6 | 	mov	arg01, local01
04164     4B 77 02 F6 | 	mov	arg02, local06
04168     78 17 B0 FD | 	call	#_lcdDataWrite
0416c     6A 76 06 F6 | 	mov	arg02, #106
04170     48 79 02 F6 | 	mov	arg03, local03
04174     3C 97 02 F6 | 	mov	local06, arg03
04178     46 75 02 F6 | 	mov	arg01, local01
0417c     00 17 B0 FD | 	call	#_lcdRegWrite
04180     46 75 02 F6 | 	mov	arg01, local01
04184     4B 77 02 F6 | 	mov	arg02, local06
04188     58 17 B0 FD | 	call	#_lcdDataWrite
0418c     48 79 32 F9 | 	getword	arg03, local03, #0
04190     08 78 46 F0 | 	shr	arg03, #8
04194     6B 76 06 F6 | 	mov	arg02, #107
04198     3C 97 02 F6 | 	mov	local06, arg03
0419c     46 75 02 F6 | 	mov	arg01, local01
041a0     DC 16 B0 FD | 	call	#_lcdRegWrite
041a4     46 75 02 F6 | 	mov	arg01, local01
041a8     4B 77 02 F6 | 	mov	arg02, local06
041ac     34 17 B0 FD | 	call	#_lcdDataWrite
041b0     6C 76 06 F6 | 	mov	arg02, #108
041b4     49 79 02 F6 | 	mov	arg03, local04
041b8     3C 97 02 F6 | 	mov	local06, arg03
041bc     46 75 02 F6 | 	mov	arg01, local01
041c0     BC 16 B0 FD | 	call	#_lcdRegWrite
041c4     46 75 02 F6 | 	mov	arg01, local01
041c8     4B 77 02 F6 | 	mov	arg02, local06
041cc     14 17 B0 FD | 	call	#_lcdDataWrite
041d0     49 79 32 F9 | 	getword	arg03, local04, #0
041d4     08 78 46 F0 | 	shr	arg03, #8
041d8     6D 76 06 F6 | 	mov	arg02, #109
041dc     3C 97 02 F6 | 	mov	local06, arg03
041e0     46 75 02 F6 | 	mov	arg01, local01
041e4     98 16 B0 FD | 	call	#_lcdRegWrite
041e8     46 75 02 F6 | 	mov	arg01, local01
041ec     4B 77 02 F6 | 	mov	arg02, local06
041f0     F0 16 B0 FD | 	call	#_lcdDataWrite
041f4     6E 76 06 F6 | 	mov	arg02, #110
041f8     4A 79 02 F6 | 	mov	arg03, local05
041fc     3C 97 02 F6 | 	mov	local06, arg03
04200     46 75 02 F6 | 	mov	arg01, local01
04204     78 16 B0 FD | 	call	#_lcdRegWrite
04208     46 75 02 F6 | 	mov	arg01, local01
0420c     4B 77 02 F6 | 	mov	arg02, local06
04210     D0 16 B0 FD | 	call	#_lcdDataWrite
04214     4A 79 32 F9 | 	getword	arg03, local05, #0
04218     08 78 46 F0 | 	shr	arg03, #8
0421c     6F 76 06 F6 | 	mov	arg02, #111
04220     3C 97 02 F6 | 	mov	local06, arg03
04224     46 75 02 F6 | 	mov	arg01, local01
04228     54 16 B0 FD | 	call	#_lcdRegWrite
0422c     46 75 02 F6 | 	mov	arg01, local01
04230     4B 77 02 F6 | 	mov	arg02, local06
04234     AC 16 B0 FD | 	call	#_lcdDataWrite
04238     67 76 06 F6 | 	mov	arg02, #103
0423c     80 78 06 F6 | 	mov	arg03, #128
04240     80 96 06 F6 | 	mov	local06, #128
04244     46 75 02 F6 | 	mov	arg01, local01
04248     34 16 B0 FD | 	call	#_lcdRegWrite
0424c     46 75 02 F6 | 	mov	arg01, local01
04250     4B 77 02 F6 | 	mov	arg02, local06
04254     8C 16 B0 FD | 	call	#_lcdDataWrite
04258     46 75 02 F6 | 	mov	arg01, local01
0425c     B0 18 B0 FD | 	call	#_check2dBusy
04260     A8 F0 03 F6 | 	mov	ptra, fp
04264     B3 00 A0 FD | 	call	#popregs_
04268                 | _display_draw_line_ret
04268     2D 00 64 FD | 	ret
0426c                 | 
0426c                 | _display_draw_square_fill
0426c     06 4C 05 F6 | 	mov	COUNT_, #6
04270     A9 00 A0 FD | 	call	#pushregs_
04274     3A 8D 02 F6 | 	mov	local01, arg01
04278     3B 8F 02 F6 | 	mov	local02, arg02
0427c     3C 91 02 F6 | 	mov	local03, arg03
04280     3D 93 02 F6 | 	mov	local04, arg04
04284     3E 95 02 F6 | 	mov	local05, arg05
04288     46 75 02 F6 | 	mov	arg01, local01
0428c     3F 77 02 F6 | 	mov	arg02, arg06
04290     14 FA BF FD | 	call	#_display_fore_ground_color_16bpp
04294     68 76 06 F6 | 	mov	arg02, #104
04298     47 79 02 F6 | 	mov	arg03, local02
0429c     3C 97 02 F6 | 	mov	local06, arg03
042a0     46 75 02 F6 | 	mov	arg01, local01
042a4     D8 15 B0 FD | 	call	#_lcdRegWrite
042a8     46 75 02 F6 | 	mov	arg01, local01
042ac     4B 77 02 F6 | 	mov	arg02, local06
042b0     30 16 B0 FD | 	call	#_lcdDataWrite
042b4     47 79 32 F9 | 	getword	arg03, local02, #0
042b8     08 78 46 F0 | 	shr	arg03, #8
042bc     69 76 06 F6 | 	mov	arg02, #105
042c0     3C 97 02 F6 | 	mov	local06, arg03
042c4     46 75 02 F6 | 	mov	arg01, local01
042c8     B4 15 B0 FD | 	call	#_lcdRegWrite
042cc     46 75 02 F6 | 	mov	arg01, local01
042d0     4B 77 02 F6 | 	mov	arg02, local06
042d4     0C 16 B0 FD | 	call	#_lcdDataWrite
042d8     6A 76 06 F6 | 	mov	arg02, #106
042dc     48 79 02 F6 | 	mov	arg03, local03
042e0     3C 97 02 F6 | 	mov	local06, arg03
042e4     46 75 02 F6 | 	mov	arg01, local01
042e8     94 15 B0 FD | 	call	#_lcdRegWrite
042ec     46 75 02 F6 | 	mov	arg01, local01
042f0     4B 77 02 F6 | 	mov	arg02, local06
042f4     EC 15 B0 FD | 	call	#_lcdDataWrite
042f8     48 79 32 F9 | 	getword	arg03, local03, #0
042fc     08 78 46 F0 | 	shr	arg03, #8
04300     6B 76 06 F6 | 	mov	arg02, #107
04304     3C 97 02 F6 | 	mov	local06, arg03
04308     46 75 02 F6 | 	mov	arg01, local01
0430c     70 15 B0 FD | 	call	#_lcdRegWrite
04310     46 75 02 F6 | 	mov	arg01, local01
04314     4B 77 02 F6 | 	mov	arg02, local06
04318     C8 15 B0 FD | 	call	#_lcdDataWrite
0431c     6C 76 06 F6 | 	mov	arg02, #108
04320     49 79 02 F6 | 	mov	arg03, local04
04324     3C 97 02 F6 | 	mov	local06, arg03
04328     46 75 02 F6 | 	mov	arg01, local01
0432c     50 15 B0 FD | 	call	#_lcdRegWrite
04330     46 75 02 F6 | 	mov	arg01, local01
04334     4B 77 02 F6 | 	mov	arg02, local06
04338     A8 15 B0 FD | 	call	#_lcdDataWrite
0433c     49 79 32 F9 | 	getword	arg03, local04, #0
04340     08 78 46 F0 | 	shr	arg03, #8
04344     6D 76 06 F6 | 	mov	arg02, #109
04348     3C 97 02 F6 | 	mov	local06, arg03
0434c     46 75 02 F6 | 	mov	arg01, local01
04350     2C 15 B0 FD | 	call	#_lcdRegWrite
04354     46 75 02 F6 | 	mov	arg01, local01
04358     4B 77 02 F6 | 	mov	arg02, local06
0435c     84 15 B0 FD | 	call	#_lcdDataWrite
04360     6E 76 06 F6 | 	mov	arg02, #110
04364     4A 79 02 F6 | 	mov	arg03, local05
04368     3C 97 02 F6 | 	mov	local06, arg03
0436c     46 75 02 F6 | 	mov	arg01, local01
04370     0C 15 B0 FD | 	call	#_lcdRegWrite
04374     46 75 02 F6 | 	mov	arg01, local01
04378     4B 77 02 F6 | 	mov	arg02, local06
0437c     64 15 B0 FD | 	call	#_lcdDataWrite
04380     4A 79 32 F9 | 	getword	arg03, local05, #0
04384     08 78 46 F0 | 	shr	arg03, #8
04388     6F 76 06 F6 | 	mov	arg02, #111
0438c     3C 97 02 F6 | 	mov	local06, arg03
04390     46 75 02 F6 | 	mov	arg01, local01
04394     E8 14 B0 FD | 	call	#_lcdRegWrite
04398     46 75 02 F6 | 	mov	arg01, local01
0439c     4B 77 02 F6 | 	mov	arg02, local06
043a0     40 15 B0 FD | 	call	#_lcdDataWrite
043a4     76 76 06 F6 | 	mov	arg02, #118
043a8     E0 78 06 F6 | 	mov	arg03, #224
043ac     E0 96 06 F6 | 	mov	local06, #224
043b0     46 75 02 F6 | 	mov	arg01, local01
043b4     C8 14 B0 FD | 	call	#_lcdRegWrite
043b8     46 75 02 F6 | 	mov	arg01, local01
043bc     4B 77 02 F6 | 	mov	arg02, local06
043c0     20 15 B0 FD | 	call	#_lcdDataWrite
043c4     46 75 02 F6 | 	mov	arg01, local01
043c8     44 17 B0 FD | 	call	#_check2dBusy
043cc     A8 F0 03 F6 | 	mov	ptra, fp
043d0     B3 00 A0 FD | 	call	#popregs_
043d4                 | _display_draw_square_fill_ret
043d4     2D 00 64 FD | 	ret
043d8                 | 
043d8                 | _display_draw_circle_square_fill
043d8     08 4C 05 F6 | 	mov	COUNT_, #8
043dc     A9 00 A0 FD | 	call	#pushregs_
043e0     3A 8D 02 F6 | 	mov	local01, arg01
043e4     3B 8F 02 F6 | 	mov	local02, arg02
043e8     3C 91 02 F6 | 	mov	local03, arg03
043ec     3D 93 02 F6 | 	mov	local04, arg04
043f0     3E 95 02 F6 | 	mov	local05, arg05
043f4     49 77 32 F9 | 	getword	arg02, local04, #0
043f8     47 75 32 F9 | 	getword	arg01, local02, #0
043fc     3A 77 82 F1 | 	sub	arg02, arg01
04400     01 76 86 F1 | 	sub	arg02, #1
04404     3B 77 52 F6 | 	abs	arg02, arg02 wc
04408     01 76 46 F0 | 	shr	arg02, #1
0440c     3B 77 82 F6 | 	negc	arg02, arg02
04410     4A 97 32 F9 | 	getword	local06, local05, #0
04414     48 75 32 F9 | 	getword	arg01, local03, #0
04418     3A 97 82 F1 | 	sub	local06, arg01
0441c     01 96 86 F1 | 	sub	local06, #1
04420     4B 75 52 F6 | 	abs	arg01, local06 wc
04424     01 74 46 F0 | 	shr	arg01, #1
04428     3A 75 82 F6 | 	negc	arg01, arg01
0442c     3F 99 32 F9 | 	getword	local07, arg06, #0
04430     3B 99 5A F2 | 	cmps	local07, arg02 wcz
04434     3B 97 02 16 |  if_a	mov	local06, arg02
04438     3F 97 02 E6 |  if_be	mov	local06, arg06
0443c     4B 9B 02 F6 | 	mov	local08, local06
04440     40 99 32 F9 | 	getword	local07, arg07, #0
04444     3A 99 5A F2 | 	cmps	local07, arg01 wcz
04448     3A 97 02 16 |  if_a	mov	local06, arg01
0444c     40 97 02 E6 |  if_be	mov	local06, arg07
04450     46 75 02 F6 | 	mov	arg01, local01
04454     41 77 02 F6 | 	mov	arg02, arg08
04458     4C F8 BF FD | 	call	#_display_fore_ground_color_16bpp
0445c     68 76 06 F6 | 	mov	arg02, #104
04460     47 79 02 F6 | 	mov	arg03, local02
04464     3C 99 02 F6 | 	mov	local07, arg03
04468     46 75 02 F6 | 	mov	arg01, local01
0446c     10 14 B0 FD | 	call	#_lcdRegWrite
04470     46 75 02 F6 | 	mov	arg01, local01
04474     4C 77 02 F6 | 	mov	arg02, local07
04478     68 14 B0 FD | 	call	#_lcdDataWrite
0447c     47 79 32 F9 | 	getword	arg03, local02, #0
04480     08 78 46 F0 | 	shr	arg03, #8
04484     69 76 06 F6 | 	mov	arg02, #105
04488     3C 99 02 F6 | 	mov	local07, arg03
0448c     46 75 02 F6 | 	mov	arg01, local01
04490     EC 13 B0 FD | 	call	#_lcdRegWrite
04494     46 75 02 F6 | 	mov	arg01, local01
04498     4C 77 02 F6 | 	mov	arg02, local07
0449c     44 14 B0 FD | 	call	#_lcdDataWrite
044a0     6A 76 06 F6 | 	mov	arg02, #106
044a4     48 79 02 F6 | 	mov	arg03, local03
044a8     3C 99 02 F6 | 	mov	local07, arg03
044ac     46 75 02 F6 | 	mov	arg01, local01
044b0     CC 13 B0 FD | 	call	#_lcdRegWrite
044b4     46 75 02 F6 | 	mov	arg01, local01
044b8     4C 77 02 F6 | 	mov	arg02, local07
044bc     24 14 B0 FD | 	call	#_lcdDataWrite
044c0     48 79 32 F9 | 	getword	arg03, local03, #0
044c4     08 78 46 F0 | 	shr	arg03, #8
044c8     6B 76 06 F6 | 	mov	arg02, #107
044cc     3C 99 02 F6 | 	mov	local07, arg03
044d0     46 75 02 F6 | 	mov	arg01, local01
044d4     A8 13 B0 FD | 	call	#_lcdRegWrite
044d8     46 75 02 F6 | 	mov	arg01, local01
044dc     4C 77 02 F6 | 	mov	arg02, local07
044e0     00 14 B0 FD | 	call	#_lcdDataWrite
044e4     6C 76 06 F6 | 	mov	arg02, #108
044e8     49 79 02 F6 | 	mov	arg03, local04
044ec     3C 99 02 F6 | 	mov	local07, arg03
044f0     46 75 02 F6 | 	mov	arg01, local01
044f4     88 13 B0 FD | 	call	#_lcdRegWrite
044f8     46 75 02 F6 | 	mov	arg01, local01
044fc     4C 77 02 F6 | 	mov	arg02, local07
04500     E0 13 B0 FD | 	call	#_lcdDataWrite
04504     49 79 32 F9 | 	getword	arg03, local04, #0
04508     08 78 46 F0 | 	shr	arg03, #8
0450c     6D 76 06 F6 | 	mov	arg02, #109
04510     3C 99 02 F6 | 	mov	local07, arg03
04514     46 75 02 F6 | 	mov	arg01, local01
04518     64 13 B0 FD | 	call	#_lcdRegWrite
0451c     46 75 02 F6 | 	mov	arg01, local01
04520     4C 77 02 F6 | 	mov	arg02, local07
04524     BC 13 B0 FD | 	call	#_lcdDataWrite
04528     6E 76 06 F6 | 	mov	arg02, #110
0452c     4A 79 02 F6 | 	mov	arg03, local05
04530     3C 99 02 F6 | 	mov	local07, arg03
04534     46 75 02 F6 | 	mov	arg01, local01
04538     44 13 B0 FD | 	call	#_lcdRegWrite
0453c     46 75 02 F6 | 	mov	arg01, local01
04540     4C 77 02 F6 | 	mov	arg02, local07
04544     9C 13 B0 FD | 	call	#_lcdDataWrite
04548     4A 79 32 F9 | 	getword	arg03, local05, #0
0454c     08 78 46 F0 | 	shr	arg03, #8
04550     6F 76 06 F6 | 	mov	arg02, #111
04554     3C 99 02 F6 | 	mov	local07, arg03
04558     46 75 02 F6 | 	mov	arg01, local01
0455c     20 13 B0 FD | 	call	#_lcdRegWrite
04560     46 75 02 F6 | 	mov	arg01, local01
04564     4C 77 02 F6 | 	mov	arg02, local07
04568     78 13 B0 FD | 	call	#_lcdDataWrite
0456c     77 76 06 F6 | 	mov	arg02, #119
04570     4D 79 02 F6 | 	mov	arg03, local08
04574     3C 99 02 F6 | 	mov	local07, arg03
04578     46 75 02 F6 | 	mov	arg01, local01
0457c     00 13 B0 FD | 	call	#_lcdRegWrite
04580     46 75 02 F6 | 	mov	arg01, local01
04584     4C 77 02 F6 | 	mov	arg02, local07
04588     58 13 B0 FD | 	call	#_lcdDataWrite
0458c     4D 79 32 F9 | 	getword	arg03, local08, #0
04590     08 78 46 F0 | 	shr	arg03, #8
04594     78 76 06 F6 | 	mov	arg02, #120
04598     3C 9B 02 F6 | 	mov	local08, arg03
0459c     46 75 02 F6 | 	mov	arg01, local01
045a0     DC 12 B0 FD | 	call	#_lcdRegWrite
045a4     46 75 02 F6 | 	mov	arg01, local01
045a8     4D 77 02 F6 | 	mov	arg02, local08
045ac     34 13 B0 FD | 	call	#_lcdDataWrite
045b0     79 76 06 F6 | 	mov	arg02, #121
045b4     4B 79 02 F6 | 	mov	arg03, local06
045b8     3C 9B 02 F6 | 	mov	local08, arg03
045bc     46 75 02 F6 | 	mov	arg01, local01
045c0     BC 12 B0 FD | 	call	#_lcdRegWrite
045c4     46 75 02 F6 | 	mov	arg01, local01
045c8     4D 77 02 F6 | 	mov	arg02, local08
045cc     14 13 B0 FD | 	call	#_lcdDataWrite
045d0     4B 79 32 F9 | 	getword	arg03, local06, #0
045d4     08 78 46 F0 | 	shr	arg03, #8
045d8     7A 76 06 F6 | 	mov	arg02, #122
045dc     3C 9B 02 F6 | 	mov	local08, arg03
045e0     46 75 02 F6 | 	mov	arg01, local01
045e4     98 12 B0 FD | 	call	#_lcdRegWrite
045e8     46 75 02 F6 | 	mov	arg01, local01
045ec     4D 77 02 F6 | 	mov	arg02, local08
045f0     F0 12 B0 FD | 	call	#_lcdDataWrite
045f4     76 76 06 F6 | 	mov	arg02, #118
045f8     F0 78 06 F6 | 	mov	arg03, #240
045fc     F0 9A 06 F6 | 	mov	local08, #240
04600     46 75 02 F6 | 	mov	arg01, local01
04604     78 12 B0 FD | 	call	#_lcdRegWrite
04608     46 75 02 F6 | 	mov	arg01, local01
0460c     4D 77 02 F6 | 	mov	arg02, local08
04610     D0 12 B0 FD | 	call	#_lcdDataWrite
04614     46 75 02 F6 | 	mov	arg01, local01
04618     F4 14 B0 FD | 	call	#_check2dBusy
0461c     A8 F0 03 F6 | 	mov	ptra, fp
04620     B3 00 A0 FD | 	call	#popregs_
04624                 | _display_draw_circle_square_fill_ret
04624     2D 00 64 FD | 	ret
04628                 | 
04628                 | _display_bte_memory_copy
04628     0A 4C 05 F6 | 	mov	COUNT_, #10
0462c     A9 00 A0 FD | 	call	#pushregs_
04630     3A 8D 02 F6 | 	mov	local01, arg01
04634     3C 8F 02 F6 | 	mov	local02, arg03
04638     3D 91 02 F6 | 	mov	local03, arg04
0463c     3E 93 02 F6 | 	mov	local04, arg05
04640     3F 95 02 F6 | 	mov	local05, arg06
04644     40 97 02 F6 | 	mov	local06, arg07
04648     41 99 02 F6 | 	mov	local07, arg08
0464c     42 9B 02 F6 | 	mov	local08, arg09
04650     43 9D 02 F6 | 	mov	local09, arg10
04654     44 9F 02 F6 | 	mov	local10, arg11
04658     46 75 02 F6 | 	mov	arg01, local01
0465c     50 15 B0 FD | 	call	#_bte_Source0_MemoryStartAddr
04660     46 75 02 F6 | 	mov	arg01, local01
04664     47 77 02 F6 | 	mov	arg02, local02
04668     EC 15 B0 FD | 	call	#_bte_Source0_ImageWidth
0466c     46 75 02 F6 | 	mov	arg01, local01
04670     48 77 02 F6 | 	mov	arg02, local03
04674     49 79 02 F6 | 	mov	arg03, local04
04678     3C 16 B0 FD | 	call	#_bte_Source0_WindowStartXY
0467c     46 75 02 F6 | 	mov	arg01, local01
04680     4A 77 02 F6 | 	mov	arg02, local05
04684     D8 16 B0 FD | 	call	#_bte_DestinationMemoryStartAddr
04688     46 75 02 F6 | 	mov	arg01, local01
0468c     4B 77 02 F6 | 	mov	arg02, local06
04690     74 17 B0 FD | 	call	#_bte_DestinationImageWidth
04694     46 75 02 F6 | 	mov	arg01, local01
04698     4C 77 02 F6 | 	mov	arg02, local07
0469c     4D 79 02 F6 | 	mov	arg03, local08
046a0     C4 17 B0 FD | 	call	#_bte_DestinationWindowStartXY
046a4     46 75 02 F6 | 	mov	arg01, local01
046a8     4E 77 02 F6 | 	mov	arg02, local09
046ac     4F 79 02 F6 | 	mov	arg03, local10
046b0     5C 18 B0 FD | 	call	#_bte_WindowSize
046b4     91 76 06 F6 | 	mov	arg02, #145
046b8     C2 78 06 F6 | 	mov	arg03, #194
046bc     C2 9E 06 F6 | 	mov	local10, #194
046c0     46 75 02 F6 | 	mov	arg01, local01
046c4     B8 11 B0 FD | 	call	#_lcdRegWrite
046c8     46 75 02 F6 | 	mov	arg01, local01
046cc     4F 77 02 F6 | 	mov	arg02, local10
046d0     10 12 B0 FD | 	call	#_lcdDataWrite
046d4     92 76 06 F6 | 	mov	arg02, #146
046d8     25 78 06 F6 | 	mov	arg03, #37
046dc     25 9E 06 F6 | 	mov	local10, #37
046e0     46 75 02 F6 | 	mov	arg01, local01
046e4     98 11 B0 FD | 	call	#_lcdRegWrite
046e8     46 75 02 F6 | 	mov	arg01, local01
046ec     4F 77 02 F6 | 	mov	arg02, local10
046f0     F0 11 B0 FD | 	call	#_lcdDataWrite
046f4     90 76 06 F6 | 	mov	arg02, #144
046f8     10 78 06 F6 | 	mov	arg03, #16
046fc     10 9E 06 F6 | 	mov	local10, #16
04700     46 75 02 F6 | 	mov	arg01, local01
04704     78 11 B0 FD | 	call	#_lcdRegWrite
04708     46 75 02 F6 | 	mov	arg01, local01
0470c     4F 77 02 F6 | 	mov	arg02, local10
04710     D0 11 B0 FD | 	call	#_lcdDataWrite
04714     46 75 02 F6 | 	mov	arg01, local01
04718     F4 13 B0 FD | 	call	#_check2dBusy
0471c     A8 F0 03 F6 | 	mov	ptra, fp
04720     B3 00 A0 FD | 	call	#popregs_
04724                 | _display_bte_memory_copy_ret
04724     2D 00 64 FD | 	ret
04728                 | 
04728                 | _display_bte_memory_copy_with_chroma_key
04728     0B 4C 05 F6 | 	mov	COUNT_, #11
0472c     A9 00 A0 FD | 	call	#pushregs_
04730     3A 8D 02 F6 | 	mov	local01, arg01
04734     3C 8F 02 F6 | 	mov	local02, arg03
04738     3D 91 02 F6 | 	mov	local03, arg04
0473c     3E 93 02 F6 | 	mov	local04, arg05
04740     3F 95 02 F6 | 	mov	local05, arg06
04744     40 97 02 F6 | 	mov	local06, arg07
04748     41 99 02 F6 | 	mov	local07, arg08
0474c     42 9B 02 F6 | 	mov	local08, arg09
04750     43 9D 02 F6 | 	mov	local09, arg10
04754     44 9F 02 F6 | 	mov	local10, arg11
04758     45 A1 02 F6 | 	mov	local11, arg12
0475c     46 75 02 F6 | 	mov	arg01, local01
04760     4C 14 B0 FD | 	call	#_bte_Source0_MemoryStartAddr
04764     46 75 02 F6 | 	mov	arg01, local01
04768     47 77 02 F6 | 	mov	arg02, local02
0476c     E8 14 B0 FD | 	call	#_bte_Source0_ImageWidth
04770     46 75 02 F6 | 	mov	arg01, local01
04774     48 77 02 F6 | 	mov	arg02, local03
04778     49 79 02 F6 | 	mov	arg03, local04
0477c     38 15 B0 FD | 	call	#_bte_Source0_WindowStartXY
04780     46 75 02 F6 | 	mov	arg01, local01
04784     4A 77 02 F6 | 	mov	arg02, local05
04788     D4 15 B0 FD | 	call	#_bte_DestinationMemoryStartAddr
0478c     46 75 02 F6 | 	mov	arg01, local01
04790     4B 77 02 F6 | 	mov	arg02, local06
04794     70 16 B0 FD | 	call	#_bte_DestinationImageWidth
04798     46 75 02 F6 | 	mov	arg01, local01
0479c     4C 77 02 F6 | 	mov	arg02, local07
047a0     4D 79 02 F6 | 	mov	arg03, local08
047a4     C0 16 B0 FD | 	call	#_bte_DestinationWindowStartXY
047a8     46 75 02 F6 | 	mov	arg01, local01
047ac     4E 77 02 F6 | 	mov	arg02, local09
047b0     4F 79 02 F6 | 	mov	arg03, local10
047b4     58 17 B0 FD | 	call	#_bte_WindowSize
047b8     46 75 02 F6 | 	mov	arg01, local01
047bc     50 77 02 F6 | 	mov	arg02, local11
047c0     6C F5 BF FD | 	call	#_display_back_ground_color_16bpp
047c4     91 76 06 F6 | 	mov	arg02, #145
047c8     05 78 06 F6 | 	mov	arg03, #5
047cc     05 A0 06 F6 | 	mov	local11, #5
047d0     46 75 02 F6 | 	mov	arg01, local01
047d4     A8 10 B0 FD | 	call	#_lcdRegWrite
047d8     46 75 02 F6 | 	mov	arg01, local01
047dc     50 77 02 F6 | 	mov	arg02, local11
047e0     00 11 B0 FD | 	call	#_lcdDataWrite
047e4     92 76 06 F6 | 	mov	arg02, #146
047e8     25 78 06 F6 | 	mov	arg03, #37
047ec     25 A0 06 F6 | 	mov	local11, #37
047f0     46 75 02 F6 | 	mov	arg01, local01
047f4     88 10 B0 FD | 	call	#_lcdRegWrite
047f8     46 75 02 F6 | 	mov	arg01, local01
047fc     50 77 02 F6 | 	mov	arg02, local11
04800     E0 10 B0 FD | 	call	#_lcdDataWrite
04804     90 76 06 F6 | 	mov	arg02, #144
04808     10 78 06 F6 | 	mov	arg03, #16
0480c     10 A0 06 F6 | 	mov	local11, #16
04810     46 75 02 F6 | 	mov	arg01, local01
04814     68 10 B0 FD | 	call	#_lcdRegWrite
04818     46 75 02 F6 | 	mov	arg01, local01
0481c     50 77 02 F6 | 	mov	arg02, local11
04820     C0 10 B0 FD | 	call	#_lcdDataWrite
04824     46 75 02 F6 | 	mov	arg01, local01
04828     E4 12 B0 FD | 	call	#_check2dBusy
0482c     A8 F0 03 F6 | 	mov	ptra, fp
04830     B3 00 A0 FD | 	call	#popregs_
04834                 | _display_bte_memory_copy_with_chroma_key_ret
04834     2D 00 64 FD | 	ret
04838                 | 
04838                 | _display_initialize
04838     03 4C 05 F6 | 	mov	COUNT_, #3
0483c     A9 00 A0 FD | 	call	#pushregs_
04840     3A 8D 02 F6 | 	mov	local01, arg01
04844     64 02 B0 FD | 	call	#_display_pll_initial
04848     00 34 0E F2 | 	cmp	result1, #0 wz
0484c     38 00 90 5D |  if_ne	jmp	#LR__0168
04850     00 74 06 F6 | 	mov	arg01, #0
04854     78 4C B2 FD | 	call	#__system___getiolock_1306
04858     1A 75 02 F6 | 	mov	arg01, result1
0485c     10 14 B2 FD | 	call	#__system___lockmem
04860     4C 01 00 FF 
04864     09 77 06 F6 | 	mov	arg02, ##@LR__1853
04868     00 74 06 F6 | 	mov	arg01, #0
0486c     00 78 06 F6 | 	mov	arg03, #0
04870     A4 19 B2 FD | 	call	#__system___basic_print_string
04874     00 74 06 F6 | 	mov	arg01, #0
04878     54 4C B2 FD | 	call	#__system___getiolock_1306
0487c     1A 01 68 FC | 	wrlong	#0, result1
04880                 | '     return DISPLAY_PLL_FAIL;
04880     03 34 06 F6 | 	mov	result1, #3
04884     18 02 90 FD | 	jmp	#LR__0170
04888                 | LR__0168
04888     46 75 02 F6 | 	mov	arg01, local01
0488c     3C 03 B0 FD | 	call	#_display_sdram_initial
04890     00 34 0E F2 | 	cmp	result1, #0 wz
04894     38 00 90 5D |  if_ne	jmp	#LR__0169
04898     00 74 06 F6 | 	mov	arg01, #0
0489c     30 4C B2 FD | 	call	#__system___getiolock_1306
048a0     1A 75 02 F6 | 	mov	arg01, result1
048a4     C8 13 B2 FD | 	call	#__system___lockmem
048a8     4C 01 00 FF 
048ac     1B 77 06 F6 | 	mov	arg02, ##@LR__1854
048b0     00 74 06 F6 | 	mov	arg01, #0
048b4     00 78 06 F6 | 	mov	arg03, #0
048b8     5C 19 B2 FD | 	call	#__system___basic_print_string
048bc     00 74 06 F6 | 	mov	arg01, #0
048c0     0C 4C B2 FD | 	call	#__system___getiolock_1306
048c4     1A 01 68 FC | 	wrlong	#0, result1
048c8                 | '     return DISPLAY_SDRAM_FAIL;
048c8     04 34 06 F6 | 	mov	result1, #4
048cc     D0 01 90 FD | 	jmp	#LR__0170
048d0                 | LR__0169
048d0     46 75 02 F6 | 	mov	arg01, local01
048d4     01 76 06 F6 | 	mov	arg02, #1
048d8     A4 0F B0 FD | 	call	#_lcdRegWrite
048dc     46 75 02 F6 | 	mov	arg01, local01
048e0     82 76 06 F6 | 	mov	arg02, #130
048e4     FC 0F B0 FD | 	call	#_lcdDataWrite
048e8     46 75 02 F6 | 	mov	arg01, local01
048ec     02 76 06 F6 | 	mov	arg02, #2
048f0     8C 0F B0 FD | 	call	#_lcdRegWrite
048f4     46 75 02 F6 | 	mov	arg01, local01
048f8     00 76 06 F6 | 	mov	arg02, #0
048fc     E4 0F B0 FD | 	call	#_lcdDataWrite
04900     46 75 02 F6 | 	mov	arg01, local01
04904     03 76 06 F6 | 	mov	arg02, #3
04908     74 0F B0 FD | 	call	#_lcdRegWrite
0490c     46 75 02 F6 | 	mov	arg01, local01
04910     00 76 06 F6 | 	mov	arg02, #0
04914     CC 0F B0 FD | 	call	#_lcdDataWrite
04918     46 75 02 F6 | 	mov	arg01, local01
0491c     10 76 06 F6 | 	mov	arg02, #16
04920     5C 0F B0 FD | 	call	#_lcdRegWrite
04924     46 75 02 F6 | 	mov	arg01, local01
04928     04 76 06 F6 | 	mov	arg02, #4
0492c     B4 0F B0 FD | 	call	#_lcdDataWrite
04930     46 75 02 F6 | 	mov	arg01, local01
04934     11 76 06 F6 | 	mov	arg02, #17
04938     44 0F B0 FD | 	call	#_lcdRegWrite
0493c     46 75 02 F6 | 	mov	arg01, local01
04940     05 76 06 F6 | 	mov	arg02, #5
04944     9C 0F B0 FD | 	call	#_lcdDataWrite
04948     46 75 02 F6 | 	mov	arg01, local01
0494c     5E 76 06 F6 | 	mov	arg02, #94
04950     2C 0F B0 FD | 	call	#_lcdRegWrite
04954     46 75 02 F6 | 	mov	arg01, local01
04958     01 76 06 F6 | 	mov	arg02, #1
0495c     84 0F B0 FD | 	call	#_lcdDataWrite
04960     92 76 06 F6 | 	mov	arg02, #146
04964     25 78 06 F6 | 	mov	arg03, #37
04968     25 8E 06 F6 | 	mov	local02, #37
0496c     46 75 02 F6 | 	mov	arg01, local01
04970     0C 0F B0 FD | 	call	#_lcdRegWrite
04974     46 75 02 F6 | 	mov	arg01, local01
04978     47 77 02 F6 | 	mov	arg02, local02
0497c     64 0F B0 FD | 	call	#_lcdDataWrite
04980     46 75 02 F6 | 	mov	arg01, local01
04984     12 76 06 F6 | 	mov	arg02, #18
04988     F4 0E B0 FD | 	call	#_lcdRegWrite
0498c     46 75 02 F6 | 	mov	arg01, local01
04990     80 76 06 F6 | 	mov	arg02, #128
04994     4C 0F B0 FD | 	call	#_lcdDataWrite
04998     46 75 02 F6 | 	mov	arg01, local01
0499c     13 76 06 F6 | 	mov	arg02, #19
049a0     DC 0E B0 FD | 	call	#_lcdRegWrite
049a4     46 75 02 F6 | 	mov	arg01, local01
049a8     C0 76 06 F6 | 	mov	arg02, #192
049ac     34 0F B0 FD | 	call	#_lcdDataWrite
049b0     46 75 02 F6 | 	mov	arg01, local01
049b4     0A 76 C6 F9 | 	decod	arg02, #10
049b8     01 00 00 FF 
049bc     58 78 06 F6 | 	mov	arg03, ##600
049c0     E4 EB BF FD | 	call	#_display_lcd_horizontal_width_vertical_height
049c4     46 75 02 F6 | 	mov	arg01, local01
049c8     A0 76 06 F6 | 	mov	arg02, #160
049cc     A0 EC BF FD | 	call	#_display_lcd_horizontal_non_display
049d0     46 75 02 F6 | 	mov	arg01, local01
049d4     A0 76 06 F6 | 	mov	arg02, #160
049d8     5C ED BF FD | 	call	#_display_lcd_hsync_start_position
049dc     46 75 02 F6 | 	mov	arg01, local01
049e0     46 76 06 F6 | 	mov	arg02, #70
049e4     CC ED BF FD | 	call	#_display_lcd_hsync_pulse_width
049e8     46 75 02 F6 | 	mov	arg01, local01
049ec     17 76 06 F6 | 	mov	arg02, #23
049f0     3C EE BF FD | 	call	#_display_lcd_vertical_non_display
049f4     0B 78 06 F6 | 	mov	arg03, #11
049f8     1E 76 06 F6 | 	mov	arg02, #30
049fc     0B 8E 06 F6 | 	mov	local02, #11
04a00     46 75 02 F6 | 	mov	arg01, local01
04a04     78 0E B0 FD | 	call	#_lcdRegWrite
04a08     46 75 02 F6 | 	mov	arg01, local01
04a0c     47 77 02 F6 | 	mov	arg02, local02
04a10     D0 0E B0 FD | 	call	#_lcdDataWrite
04a14     09 78 06 F6 | 	mov	arg03, #9
04a18     1F 76 06 F6 | 	mov	arg02, #31
04a1c     46 91 02 F6 | 	mov	local03, local01
04a20     09 8E 06 F6 | 	mov	local02, #9
04a24     48 75 02 F6 | 	mov	arg01, local03
04a28     54 0E B0 FD | 	call	#_lcdRegWrite
04a2c     48 75 02 F6 | 	mov	arg01, local03
04a30     47 77 02 F6 | 	mov	arg02, local02
04a34     AC 0E B0 FD | 	call	#_lcdDataWrite
04a38     46 75 02 F6 | 	mov	arg01, local01
04a3c     00 76 06 F6 | 	mov	arg02, #0
04a40     50 EE BF FD | 	call	#_display_image_start_address
04a44     46 75 02 F6 | 	mov	arg01, local01
04a48     0A 76 C6 F9 | 	decod	arg02, #10
04a4c     EC EE BF FD | 	call	#_display_image_width
04a50     46 75 02 F6 | 	mov	arg01, local01
04a54     00 76 06 F6 | 	mov	arg02, #0
04a58     00 78 06 F6 | 	mov	arg03, #0
04a5c     3C EF BF FD | 	call	#_display_window_start_xy
04a60     46 75 02 F6 | 	mov	arg01, local01
04a64     00 76 06 F6 | 	mov	arg02, #0
04a68     D8 EF BF FD | 	call	#_display_canvas_image_start_address
04a6c     46 75 02 F6 | 	mov	arg01, local01
04a70     0A 76 C6 F9 | 	decod	arg02, #10
04a74     80 F0 BF FD | 	call	#_display_canvas_image_width
04a78     46 75 02 F6 | 	mov	arg01, local01
04a7c     00 76 06 F6 | 	mov	arg02, #0
04a80     00 78 06 F6 | 	mov	arg03, #0
04a84     D0 F0 BF FD | 	call	#_display_active_window_xy
04a88     46 75 02 F6 | 	mov	arg01, local01
04a8c     0A 76 C6 F9 | 	decod	arg02, #10
04a90     01 00 00 FF 
04a94     58 78 06 F6 | 	mov	arg03, ##600
04a98     64 F1 BF FD | 	call	#_display_active_window_wh
04a9c                 | '   }
04a9c                 | '   lcdRegWrite(display,  0x01 );
04a9c                 | '   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0  << 5 |  0  << 3 |  0  << 2 |  1  << 1 |  0 );
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x02 );
04a9c                 | '   lcdDataWrite(display,  0  << 6 |  0  << 4 |  0  << 1);
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x03 );
04a9c                 | '   lcdDataWrite(display,  0  << 3 |  0  << 2 |  0 );
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x10 );
04a9c                 | '   lcdDataWrite(display,  0  << 7 |  0  << 6 |  0  << 4 |  1  << 2 |  0 );
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x11 );
04a9c                 | '   lcdDataWrite(display,  1  << 2 |  1 );
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x5E );
04a9c                 | '   lcdDataWrite(display,  0  << 2 |  1 );
04a9c                 | ' 
04a9c                 | '   lcdRegDataWrite(display,  0x92 ,  1  << 5 |  1  << 2 |  1 );
04a9c                 | ' 
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x12 );
04a9c                 | '   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0 );
04a9c                 | ' 
04a9c                 | '   lcdRegWrite(display,  0x13 );
04a9c                 | '   lcdDataWrite(display,  1  << 7 |  1  << 6 |  0  << 5);
04a9c                 | ' 
04a9c                 | '   display_lcd_horizontal_width_vertical_height(display,  1024 ,  600 );
04a9c                 | '   display_lcd_horizontal_non_display(display,  160 );
04a9c                 | '   display_lcd_hsync_start_position(display,  160 );
04a9c                 | '   display_lcd_hsync_pulse_width(display,  70 );
04a9c                 | '   display_lcd_vertical_non_display(display,  23 );
04a9c                 | '   display_lcd_vsync_start_position(display,  12 );
04a9c                 | '   display_lcd_vsync_pulse_width(display,  10 );
04a9c                 | ' 
04a9c                 | ' 
04a9c                 | '   display_image_start_address(display,  0 );
04a9c                 | '   display_image_width(display,  1024 );
04a9c                 | '   display_window_start_xy(display, 0, 0);
04a9c                 | '   display_canvas_image_start_address(display,  0 );
04a9c                 | '   display_canvas_image_width(display,  1024 );
04a9c                 | '   display_active_window_xy(display, 0, 0);
04a9c                 | '   display_active_window_wh(display,  1024 ,  600 );
04a9c                 | '   return SUCCESS;
04a9c     00 34 06 F6 | 	mov	result1, #0
04aa0                 | LR__0170
04aa0     A8 F0 03 F6 | 	mov	ptra, fp
04aa4     B3 00 A0 FD | 	call	#popregs_
04aa8                 | _display_initialize_ret
04aa8     2D 00 64 FD | 	ret
04aac                 | 
04aac                 | _display_pll_initial
04aac     03 4C 05 F6 | 	mov	COUNT_, #3
04ab0     A9 00 A0 FD | 	call	#pushregs_
04ab4     3A 8D 02 F6 | 	mov	local01, arg01
04ab8     05 76 06 F6 | 	mov	arg02, #5
04abc     06 78 06 F6 | 	mov	arg03, #6
04ac0     3A 8F 02 F6 | 	mov	local02, arg01
04ac4     06 90 06 F6 | 	mov	local03, #6
04ac8     47 75 02 F6 | 	mov	arg01, local02
04acc     B0 0D B0 FD | 	call	#_lcdRegWrite
04ad0     47 75 02 F6 | 	mov	arg01, local02
04ad4     48 77 02 F6 | 	mov	arg02, local03
04ad8     08 0E B0 FD | 	call	#_lcdDataWrite
04adc     06 76 06 F6 | 	mov	arg02, #6
04ae0     27 78 06 F6 | 	mov	arg03, #39
04ae4     27 90 06 F6 | 	mov	local03, #39
04ae8     46 75 02 F6 | 	mov	arg01, local01
04aec     90 0D B0 FD | 	call	#_lcdRegWrite
04af0     46 75 02 F6 | 	mov	arg01, local01
04af4     48 77 02 F6 | 	mov	arg02, local03
04af8     E8 0D B0 FD | 	call	#_lcdDataWrite
04afc     07 76 06 F6 | 	mov	arg02, #7
04b00     04 78 06 F6 | 	mov	arg03, #4
04b04     04 90 06 F6 | 	mov	local03, #4
04b08     46 75 02 F6 | 	mov	arg01, local01
04b0c     70 0D B0 FD | 	call	#_lcdRegWrite
04b10     46 75 02 F6 | 	mov	arg01, local01
04b14     48 77 02 F6 | 	mov	arg02, local03
04b18     C8 0D B0 FD | 	call	#_lcdDataWrite
04b1c     08 76 06 F6 | 	mov	arg02, #8
04b20     2F 78 06 F6 | 	mov	arg03, #47
04b24     2F 90 06 F6 | 	mov	local03, #47
04b28     46 75 02 F6 | 	mov	arg01, local01
04b2c     50 0D B0 FD | 	call	#_lcdRegWrite
04b30     46 75 02 F6 | 	mov	arg01, local01
04b34     48 77 02 F6 | 	mov	arg02, local03
04b38     A8 0D B0 FD | 	call	#_lcdDataWrite
04b3c     09 76 06 F6 | 	mov	arg02, #9
04b40     04 78 06 F6 | 	mov	arg03, #4
04b44     04 90 06 F6 | 	mov	local03, #4
04b48     46 75 02 F6 | 	mov	arg01, local01
04b4c     30 0D B0 FD | 	call	#_lcdRegWrite
04b50     46 75 02 F6 | 	mov	arg01, local01
04b54     48 77 02 F6 | 	mov	arg02, local03
04b58     88 0D B0 FD | 	call	#_lcdDataWrite
04b5c     0A 76 06 F6 | 	mov	arg02, #10
04b60     2F 78 06 F6 | 	mov	arg03, #47
04b64     2F 90 06 F6 | 	mov	local03, #47
04b68     46 75 02 F6 | 	mov	arg01, local01
04b6c     10 0D B0 FD | 	call	#_lcdRegWrite
04b70     46 75 02 F6 | 	mov	arg01, local01
04b74     48 77 02 F6 | 	mov	arg02, local03
04b78     68 0D B0 FD | 	call	#_lcdDataWrite
04b7c     01 74 06 F6 | 	mov	arg01, #1
04b80     04 12 B2 FD | 	call	#__system___waitms
04b84     46 75 02 F6 | 	mov	arg01, local01
04b88     01 76 06 F6 | 	mov	arg02, #1
04b8c     F0 0C B0 FD | 	call	#_lcdRegWrite
04b90     46 75 02 F6 | 	mov	arg01, local01
04b94     80 76 06 F6 | 	mov	arg02, #128
04b98     48 0D B0 FD | 	call	#_lcdDataWrite
04b9c     02 74 06 F6 | 	mov	arg01, #2
04ba0     E4 11 B2 FD | 	call	#__system___waitms
04ba4     46 75 02 F6 | 	mov	arg01, local01
04ba8     9C 0D B0 FD | 	call	#_lcdDataRead
04bac     1A 35 E2 F8 | 	getbyte	result1, result1, #0
04bb0     80 34 06 F5 | 	and	result1, #128
04bb4     80 34 0E F2 | 	cmp	result1, #128 wz
04bb8                 | '     return  (1) ;
04bb8     01 34 06 A6 |  if_e	mov	result1, #1
04bbc                 | '     return  (0) ;
04bbc     00 34 06 56 |  if_ne	mov	result1, #0
04bc0     A8 F0 03 F6 | 	mov	ptra, fp
04bc4     B3 00 A0 FD | 	call	#popregs_
04bc8                 | _display_pll_initial_ret
04bc8     2D 00 64 FD | 	ret
04bcc                 | 
04bcc                 | _display_sdram_initial
04bcc     03 4C 05 F6 | 	mov	COUNT_, #3
04bd0     A9 00 A0 FD | 	call	#pushregs_
04bd4     3A 8D 02 F6 | 	mov	local01, arg01
04bd8     E0 76 06 F6 | 	mov	arg02, #224
04bdc     29 78 06 F6 | 	mov	arg03, #41
04be0     3A 8F 02 F6 | 	mov	local02, arg01
04be4     29 90 06 F6 | 	mov	local03, #41
04be8     47 75 02 F6 | 	mov	arg01, local02
04bec     90 0C B0 FD | 	call	#_lcdRegWrite
04bf0     47 75 02 F6 | 	mov	arg01, local02
04bf4     48 77 02 F6 | 	mov	arg02, local03
04bf8     E8 0C B0 FD | 	call	#_lcdDataWrite
04bfc     E1 76 06 F6 | 	mov	arg02, #225
04c00     03 78 06 F6 | 	mov	arg03, #3
04c04     03 90 06 F6 | 	mov	local03, #3
04c08     46 75 02 F6 | 	mov	arg01, local01
04c0c     70 0C B0 FD | 	call	#_lcdRegWrite
04c10     46 75 02 F6 | 	mov	arg01, local01
04c14     48 77 02 F6 | 	mov	arg02, local03
04c18     C8 0C B0 FD | 	call	#_lcdDataWrite
04c1c     E2 76 06 F6 | 	mov	arg02, #226
04c20     03 00 00 FF 
04c24     51 79 06 F6 | 	mov	arg03, ##1873
04c28     03 00 00 FF 
04c2c     51 91 06 F6 | 	mov	local03, ##1873
04c30     46 75 02 F6 | 	mov	arg01, local01
04c34     48 0C B0 FD | 	call	#_lcdRegWrite
04c38     46 75 02 F6 | 	mov	arg01, local01
04c3c     48 77 02 F6 | 	mov	arg02, local03
04c40     A0 0C B0 FD | 	call	#_lcdDataWrite
04c44     E3 76 06 F6 | 	mov	arg02, #227
04c48     07 78 06 F6 | 	mov	arg03, #7
04c4c     07 90 06 F6 | 	mov	local03, #7
04c50     46 75 02 F6 | 	mov	arg01, local01
04c54     28 0C B0 FD | 	call	#_lcdRegWrite
04c58     46 75 02 F6 | 	mov	arg01, local01
04c5c     48 77 02 F6 | 	mov	arg02, local03
04c60     80 0C B0 FD | 	call	#_lcdDataWrite
04c64     E4 76 06 F6 | 	mov	arg02, #228
04c68     01 78 06 F6 | 	mov	arg03, #1
04c6c     01 90 06 F6 | 	mov	local03, #1
04c70     46 75 02 F6 | 	mov	arg01, local01
04c74     08 0C B0 FD | 	call	#_lcdRegWrite
04c78     46 75 02 F6 | 	mov	arg01, local01
04c7c     48 77 02 F6 | 	mov	arg02, local03
04c80     60 0C B0 FD | 	call	#_lcdDataWrite
04c84     46 75 02 F6 | 	mov	arg01, local01
04c88     CC 0E B0 FD | 	call	#_checkSdramReady
04c8c                 | ' {
04c8c                 | '   uint8_t CAS_Latency;
04c8c                 | '   uint16_t Auto_Refresh;
04c8c                 | ' 
04c8c                 | '   CAS_Latency = 3;
04c8c                 | '   Auto_Refresh = (64 *  120  * 1000) / (4096);
04c8c                 | '   Auto_Refresh = Auto_Refresh - 2;
04c8c                 | '   lcdRegDataWrite(display, 0xe0, 0x29);
04c8c                 | '   lcdRegDataWrite(display, 0xe1, CAS_Latency);
04c8c                 | '   lcdRegDataWrite(display, 0xe2, Auto_Refresh);
04c8c                 | '   lcdRegDataWrite(display, 0xe3, Auto_Refresh >> 8);
04c8c                 | '   lcdRegDataWrite(display, 0xe4, 0x01);
04c8c                 | ' 
04c8c                 | '   checkSdramReady(display);
04c8c                 | '   return  (1) ;
04c8c     01 34 06 F6 | 	mov	result1, #1
04c90     A8 F0 03 F6 | 	mov	ptra, fp
04c94     B3 00 A0 FD | 	call	#popregs_
04c98                 | _display_sdram_initial_ret
04c98     2D 00 64 FD | 	ret
04c9c                 | 
04c9c                 | _display_gt9271_send_cfg
04c9c     01 4C 05 F6 | 	mov	COUNT_, #1
04ca0     A9 00 A0 FD | 	call	#pushregs_
04ca4     3B 8D 02 F6 | 	mov	local01, arg02
04ca8     3C 7B 02 F6 | 	mov	arg04, arg03
04cac     40 00 00 FF 
04cb0     47 76 06 F6 | 	mov	arg02, ##32839
04cb4     46 79 02 F6 | 	mov	arg03, local01
04cb8     18 00 B0 FD | 	call	#_display_write_gt9271_touch_register
04cbc     0A 74 06 F6 | 	mov	arg01, #10
04cc0     C4 10 B2 FD | 	call	#__system___waitms
04cc4     00 34 06 F6 | 	mov	result1, #0
04cc8     A8 F0 03 F6 | 	mov	ptra, fp
04ccc     B3 00 A0 FD | 	call	#popregs_
04cd0                 | _display_gt9271_send_cfg_ret
04cd0     2D 00 64 FD | 	ret
04cd4                 | 
04cd4                 | _display_write_gt9271_touch_register
04cd4     02 4C 05 F6 | 	mov	COUNT_, #2
04cd8     A9 00 A0 FD | 	call	#pushregs_
04cdc     3A 8D 02 F6 | 	mov	local01, arg01
04ce0     2C 8C 06 F1 | 	add	local01, #44
04ce4     C9 8E 02 F6 | 	mov	local02, objptr
04ce8     46 93 01 F6 | 	mov	objptr, local01
04cec     E0 71 B1 FD | 	call	#_jm_i2c_spin2_start
04cf0     46 93 01 F6 | 	mov	objptr, local01
04cf4     18 8C 86 F1 | 	sub	local01, #24
04cf8     46 75 02 FB | 	rdlong	arg01, local01
04cfc     18 72 B1 FD | 	call	#_jm_i2c_spin2_write
04d00     18 8C 06 F1 | 	add	local01, #24
04d04     46 93 01 F6 | 	mov	objptr, local01
04d08     3B 75 32 F9 | 	getword	arg01, arg02, #0
04d0c     08 74 46 F0 | 	shr	arg01, #8
04d10     04 72 B1 FD | 	call	#_jm_i2c_spin2_write
04d14     46 93 01 F6 | 	mov	objptr, local01
04d18     2C 8C 86 F1 | 	sub	local01, #44
04d1c     3B 75 32 F9 | 	getword	arg01, arg02, #0
04d20     F4 71 B1 FD | 	call	#_jm_i2c_spin2_write
04d24     47 93 01 F6 | 	mov	objptr, local02
04d28                 | ' {
04d28                 | '   uint16_t i = 0;
04d28                 | '   display->i2cBus.start();
04d28                 | '   display->i2cBus.write(display->i2c_addr_write);
04d28                 | '   display->i2cBus.write(regAddr >> 8);
04d28                 | '   display->i2cBus.write(regAddr);
04d28                 | '   for (i = 0; i < cnt; i++, val++)
04d28     00 8E 06 F6 | 	mov	local02, #0
04d2c                 | LR__0171
04d2c     47 77 32 F9 | 	getword	arg02, local02, #0
04d30     3D 75 32 F9 | 	getword	arg01, arg04, #0
04d34     3A 77 12 F2 | 	cmp	arg02, arg01 wc
04d38     28 00 90 3D |  if_ae	jmp	#LR__0172
04d3c     2C 8C 06 F1 | 	add	local01, #44
04d40     3C 75 C2 FA | 	rdbyte	arg01, arg03
04d44     C9 76 02 F6 | 	mov	arg02, objptr
04d48     46 93 01 F6 | 	mov	objptr, local01
04d4c     C8 71 B1 FD | 	call	#_jm_i2c_spin2_write
04d50     3B 93 01 F6 | 	mov	objptr, arg02
04d54     01 8E 06 F1 | 	add	local02, #1
04d58     01 78 06 F1 | 	add	arg03, #1
04d5c     2C 8C 86 F1 | 	sub	local01, #44
04d60     C8 FF 9F FD | 	jmp	#LR__0171
04d64                 | LR__0172
04d64     2C 8C 06 F1 | 	add	local01, #44
04d68     C9 8E 02 F6 | 	mov	local02, objptr
04d6c     46 93 01 F6 | 	mov	objptr, local01
04d70     B4 72 B1 FD | 	call	#_jm_i2c_spin2_stop
04d74     47 93 01 F6 | 	mov	objptr, local02
04d78     A8 F0 03 F6 | 	mov	ptra, fp
04d7c     B3 00 A0 FD | 	call	#popregs_
04d80                 | _display_write_gt9271_touch_register_ret
04d80     2D 00 64 FD | 	ret
04d84                 | 
04d84                 | _display_read_gt9271_touch_addr
04d84     07 4C 05 F6 | 	mov	COUNT_, #7
04d88     A9 00 A0 FD | 	call	#pushregs_
04d8c     3A 8D 02 F6 | 	mov	local01, arg01
04d90     3B 8F 02 F6 | 	mov	local02, arg02
04d94     3C 91 02 F6 | 	mov	local03, arg03
04d98     3D 93 02 F6 | 	mov	local04, arg04
04d9c     2C 8C 06 F1 | 	add	local01, #44
04da0     C9 94 02 F6 | 	mov	local05, objptr
04da4     46 93 01 F6 | 	mov	objptr, local01
04da8     24 71 B1 FD | 	call	#_jm_i2c_spin2_start
04dac     46 93 01 F6 | 	mov	objptr, local01
04db0     18 8C 86 F1 | 	sub	local01, #24
04db4     46 75 02 FB | 	rdlong	arg01, local01
04db8     5C 71 B1 FD | 	call	#_jm_i2c_spin2_write
04dbc     18 8C 06 F1 | 	add	local01, #24
04dc0     46 93 01 F6 | 	mov	objptr, local01
04dc4     47 75 32 F9 | 	getword	arg01, local02, #0
04dc8     08 74 46 F0 | 	shr	arg01, #8
04dcc     48 71 B1 FD | 	call	#_jm_i2c_spin2_write
04dd0     46 93 01 F6 | 	mov	objptr, local01
04dd4     47 75 32 F9 | 	getword	arg01, local02, #0
04dd8     3C 71 B1 FD | 	call	#_jm_i2c_spin2_write
04ddc     46 93 01 F6 | 	mov	objptr, local01
04de0     EC 70 B1 FD | 	call	#_jm_i2c_spin2_start
04de4     46 93 01 F6 | 	mov	objptr, local01
04de8     14 8C 86 F1 | 	sub	local01, #20
04dec     46 75 02 FB | 	rdlong	arg01, local01
04df0     18 8C 86 F1 | 	sub	local01, #24
04df4     20 71 B1 FD | 	call	#_jm_i2c_spin2_write
04df8     4A 93 01 F6 | 	mov	objptr, local05
04dfc                 | '   {
04dfc                 | '     display->i2cBus.write(*val);
04dfc                 | '   }
04dfc                 | ' 
04dfc                 | '   display->i2cBus.stop();
04dfc                 | ' }
04dfc                 | ' 
04dfc                 | ' uint8_t display_gt9271_send_cfg(Display *display, uint8_t *buf, uint16_t cfg_len)
04dfc                 | ' {
04dfc                 | '   display_write_gt9271_touch_register(display, 0x8047, buf, cfg_len);
04dfc                 | '   _waitms(10);
04dfc                 | ' }
04dfc                 | ' 
04dfc                 | ' uint8_t display_read_gt9271_touch_addr(Display *display, uint16_t regAddr, uint8_t *pBuf, uint8_t len)
04dfc                 | ' {
04dfc                 | '   uint8_t i;
04dfc                 | '   display->i2cBus.start();
04dfc                 | ' 
04dfc                 | '   display->i2cBus.write(display->i2c_addr_write);
04dfc                 | '   display->i2cBus.write(regAddr >> 8);
04dfc                 | '   display->i2cBus.write(regAddr);
04dfc                 | '   display->i2cBus.start();
04dfc                 | '   display->i2cBus.write(display->i2c_addr_read);
04dfc                 | '   for (i = 0; i < len; i++)
04dfc     00 96 06 F6 | 	mov	local06, #0
04e00                 | LR__0173
04e00     4B 95 E2 F8 | 	getbyte	local05, local06, #0
04e04     49 8F E2 F8 | 	getbyte	local02, local04, #0
04e08     47 95 12 F2 | 	cmp	local05, local02 wc
04e0c     70 00 90 3D |  if_ae	jmp	#LR__0175
04e10     4B 95 E2 F8 | 	getbyte	local05, local06, #0
04e14     49 75 E2 F8 | 	getbyte	arg01, local04, #0
04e18     01 74 86 F1 | 	sub	arg01, #1
04e1c     3A 95 0A F2 | 	cmp	local05, arg01 wz
04e20     2C 00 90 5D |  if_ne	jmp	#LR__0174
04e24     4B 95 02 F6 | 	mov	local05, local06
04e28     48 95 02 F1 | 	add	local05, local03
04e2c     2C 8C 06 F1 | 	add	local01, #44
04e30     01 74 06 F6 | 	mov	arg01, #1
04e34     C9 92 02 F6 | 	mov	local04, objptr
04e38     46 93 01 F6 | 	mov	objptr, local01
04e3c     60 71 B1 FD | 	call	#_jm_i2c_spin2_read
04e40     49 93 01 F6 | 	mov	objptr, local04
04e44     4A 35 42 FC | 	wrbyte	result1, local05
04e48                 | '     {
04e48                 | '       pBuf[i] = display->i2cBus.read(1);
04e48                 | '       break;
04e48     2C 8C 86 F1 | 	sub	local01, #44
04e4c     30 00 90 FD | 	jmp	#LR__0175
04e50                 | LR__0174
04e50     4B 95 02 F6 | 	mov	local05, local06
04e54     48 95 02 F1 | 	add	local05, local03
04e58     2C 8C 06 F1 | 	add	local01, #44
04e5c     00 74 06 F6 | 	mov	arg01, #0
04e60     C9 98 02 F6 | 	mov	local07, objptr
04e64     46 93 01 F6 | 	mov	objptr, local01
04e68     34 71 B1 FD | 	call	#_jm_i2c_spin2_read
04e6c     4C 93 01 F6 | 	mov	objptr, local07
04e70     4A 35 42 FC | 	wrbyte	result1, local05
04e74     01 96 06 F1 | 	add	local06, #1
04e78     2C 8C 86 F1 | 	sub	local01, #44
04e7c     80 FF 9F FD | 	jmp	#LR__0173
04e80                 | LR__0175
04e80     2C 8C 06 F1 | 	add	local01, #44
04e84     C9 98 02 F6 | 	mov	local07, objptr
04e88     46 93 01 F6 | 	mov	objptr, local01
04e8c     98 71 B1 FD | 	call	#_jm_i2c_spin2_stop
04e90     4C 93 01 F6 | 	mov	objptr, local07
04e94                 | '     }
04e94                 | '     pBuf[i] = display->i2cBus.read(0);
04e94                 | '   }
04e94                 | '   display->i2cBus.stop();
04e94                 | '   return i;
04e94     4B 35 02 F6 | 	mov	result1, local06
04e98     A8 F0 03 F6 | 	mov	ptra, fp
04e9c     B3 00 A0 FD | 	call	#popregs_
04ea0                 | _display_read_gt9271_touch_addr_ret
04ea0     2D 00 64 FD | 	ret
04ea4                 | 
04ea4                 | _readGT9271TouchLocation
04ea4     17 4C 05 F6 | 	mov	COUNT_, #23
04ea8     A9 00 A0 FD | 	call	#pushregs_
04eac     78 F0 07 F1 | 	add	ptra, #120
04eb0     04 50 05 F1 | 	add	fp, #4
04eb4     A8 74 62 FC | 	wrlong	arg01, fp
04eb8     04 50 05 F1 | 	add	fp, #4
04ebc     A8 76 62 FC | 	wrlong	arg02, fp
04ec0     04 50 05 F1 | 	add	fp, #4
04ec4     A8 78 42 FC | 	wrbyte	arg03, fp
04ec8     04 50 05 F1 | 	add	fp, #4
04ecc     A8 00 48 FC | 	wrbyte	#0, fp
04ed0     04 50 05 F1 | 	add	fp, #4
04ed4     A8 00 48 FC | 	wrbyte	#0, fp
04ed8     04 50 05 F1 | 	add	fp, #4
04edc     A8 00 48 FC | 	wrbyte	#0, fp
04ee0                 | ' }
04ee0                 | ' 
04ee0                 | ' uint8_t readGT9271TouchLocation(Display *display, TouchLocation *pLoc, uint8_t num)
04ee0                 | ' {
04ee0                 | '   uint8_t retVal = 0;
04ee0                 | '   uint8_t i = 0;
04ee0                 | '   uint8_t k = 0;
04ee0                 | '   uint8_t ss[1];
04ee0                 | '   do
04ee0     10 50 85 F1 | 	sub	fp, #16
04ee4     A8 8C 0A FB | 	rdlong	local01, fp wz
04ee8     08 50 85 F1 | 	sub	fp, #8
04eec                 | '       break;
04eec     B0 08 90 AD |  if_e	jmp	#LR__0194
04ef0     0C 50 05 F1 | 	add	fp, #12
04ef4     A8 8C CA FA | 	rdbyte	local01, fp wz
04ef8     0C 50 85 F1 | 	sub	fp, #12
04efc                 | '       break;
04efc     A0 08 90 AD |  if_e	jmp	#LR__0194
04f00     1C 50 05 F1 | 	add	fp, #28
04f04     A8 00 48 FC | 	wrbyte	#0, fp
04f08     18 50 85 F1 | 	sub	fp, #24
04f0c     A8 74 02 FB | 	rdlong	arg01, fp
04f10     18 50 05 F1 | 	add	fp, #24
04f14     A8 78 02 F6 | 	mov	arg03, fp
04f18     1C 50 85 F1 | 	sub	fp, #28
04f1c     40 00 00 FF 
04f20     4E 77 06 F6 | 	mov	arg02, ##33102
04f24     01 7A 06 F6 | 	mov	arg04, #1
04f28     58 FE BF FD | 	call	#_display_read_gt9271_touch_addr
04f2c     1C 50 05 F1 | 	add	fp, #28
04f30     A8 8C C2 FA | 	rdbyte	local01, fp
04f34     04 50 05 F1 | 	add	fp, #4
04f38     A8 8C 42 FC | 	wrbyte	local01, fp
04f3c     A8 8C C2 FA | 	rdbyte	local01, fp
04f40     20 50 85 F1 | 	sub	fp, #32
04f44     0F 8C CE F7 | 	test	local01, #15 wz
04f48                 | '       break;
04f48     54 08 90 AD |  if_e	jmp	#LR__0194
04f4c     20 50 05 F1 | 	add	fp, #32
04f50     A8 8C C2 FA | 	rdbyte	local01, fp
04f54     46 8D 42 F8 | 	getnib	local01, local01, #0
04f58     04 50 05 F1 | 	add	fp, #4
04f5c     A8 8C 42 FC | 	wrbyte	local01, fp
04f60     20 50 85 F1 | 	sub	fp, #32
04f64     A8 74 02 FB | 	rdlong	arg01, fp
04f68     24 50 05 F1 | 	add	fp, #36
04f6c     A8 78 02 F6 | 	mov	arg03, fp
04f70     28 50 85 F1 | 	sub	fp, #40
04f74     40 00 00 FF 
04f78     50 77 06 F6 | 	mov	arg02, ##33104
04f7c     20 7A 06 F6 | 	mov	arg04, #32
04f80     00 FE BF FD | 	call	#_display_read_gt9271_touch_addr
04f84     04 50 05 F1 | 	add	fp, #4
04f88     A8 74 02 FB | 	rdlong	arg01, fp
04f8c     44 50 05 F1 | 	add	fp, #68
04f90     A8 78 02 F6 | 	mov	arg03, fp
04f94     48 50 85 F1 | 	sub	fp, #72
04f98     40 00 00 FF 
04f9c     70 77 06 F6 | 	mov	arg02, ##33136
04fa0     20 7A 06 F6 | 	mov	arg04, #32
04fa4     DC FD BF FD | 	call	#_display_read_gt9271_touch_addr
04fa8     04 50 05 F1 | 	add	fp, #4
04fac     A8 74 02 FB | 	rdlong	arg01, fp
04fb0     64 50 05 F1 | 	add	fp, #100
04fb4     A8 8E 02 F6 | 	mov	local02, fp
04fb8     10 90 06 F6 | 	mov	local03, #16
04fbc     40 00 00 FF 
04fc0     90 77 06 F6 | 	mov	arg02, ##33168
04fc4     47 79 02 F6 | 	mov	arg03, local02
04fc8     10 7A 06 F6 | 	mov	arg04, #16
04fcc     68 50 85 F1 | 	sub	fp, #104
04fd0     B0 FD BF FD | 	call	#_display_read_gt9271_touch_addr
04fd4     24 50 05 F1 | 	add	fp, #36
04fd8     A8 8C C2 FA | 	rdbyte	local01, fp
04fdc     24 50 85 F1 | 	sub	fp, #36
04fe0     05 8C 16 F2 | 	cmp	local01, #5 wc
04fe4     3C 01 90 3D |  if_ae	jmp	#LR__0178
04fe8                 | '     {
04fe8                 | '       for (k = 0, i = 0;
04fe8     18 50 05 F1 | 	add	fp, #24
04fec     A8 00 48 FC | 	wrbyte	#0, fp
04ff0     04 50 85 F1 | 	sub	fp, #4
04ff4     A8 00 48 FC | 	wrbyte	#0, fp
04ff8     14 50 85 F1 | 	sub	fp, #20
04ffc                 | LR__0176
04ffc     14 50 05 F1 | 	add	fp, #20
05000     A8 90 C2 FA | 	rdbyte	local03, fp
05004     14 50 85 F1 | 	sub	fp, #20
05008     48 8F E2 F8 | 	getbyte	local02, local03, #0
0500c     20 8E 16 F2 | 	cmp	local02, #32 wc
05010     10 01 90 3D |  if_ae	jmp	#LR__0177
05014     18 50 05 F1 | 	add	fp, #24
05018     A8 92 C2 FA | 	rdbyte	local04, fp
0501c     49 95 E2 F8 | 	getbyte	local05, local04, #0
05020     0C 50 85 F1 | 	sub	fp, #12
05024     A8 96 C2 FA | 	rdbyte	local06, fp
05028     0C 50 85 F1 | 	sub	fp, #12
0502c     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05030     4C 95 12 F2 | 	cmp	local05, local07 wc
05034     EC 00 90 3D |  if_ae	jmp	#LR__0177
05038     08 50 05 F1 | 	add	fp, #8
0503c     A8 90 02 FB | 	rdlong	local03, fp
05040     10 50 05 F1 | 	add	fp, #16
05044     A8 8E C2 FA | 	rdbyte	local02, fp
05048     02 8E 66 F0 | 	shl	local02, #2
0504c     48 8F 02 F1 | 	add	local02, local03
05050     04 50 85 F1 | 	sub	fp, #4
05054     A8 90 C2 FA | 	rdbyte	local03, fp
05058     48 8D E2 F8 | 	getbyte	local01, local03, #0
0505c     01 8C 06 F1 | 	add	local01, #1
05060     14 50 05 F1 | 	add	fp, #20
05064     A8 8C 02 F1 | 	add	local01, fp
05068     46 8D C2 FA | 	rdbyte	local01, local01
0506c     08 8C 66 F0 | 	shl	local01, #8
05070     48 91 E2 F8 | 	getbyte	local03, local03, #0
05074     A8 90 02 F1 | 	add	local03, fp
05078     48 91 C2 FA | 	rdbyte	local03, local03
0507c     48 8D 42 F5 | 	or	local01, local03
05080     47 8D 52 FC | 	wrword	local01, local02
05084     20 50 85 F1 | 	sub	fp, #32
05088     A8 90 02 FB | 	rdlong	local03, fp
0508c     10 50 05 F1 | 	add	fp, #16
05090     A8 8E C2 FA | 	rdbyte	local02, fp
05094     02 8E 66 F0 | 	shl	local02, #2
05098     48 8F 02 F1 | 	add	local02, local03
0509c     04 50 85 F1 | 	sub	fp, #4
050a0     A8 9A C2 FA | 	rdbyte	local08, fp
050a4     4D 9D E2 F8 | 	getbyte	local09, local08, #0
050a8     03 9C 06 F1 | 	add	local09, #3
050ac     4E 9F 02 F6 | 	mov	local10, local09
050b0     14 50 05 F1 | 	add	fp, #20
050b4     A8 A0 02 F6 | 	mov	local11, fp
050b8     A8 9E 02 F1 | 	add	local10, fp
050bc     4F 91 C2 FA | 	rdbyte	local03, local10
050c0     08 90 66 F0 | 	shl	local03, #8
050c4     4D A3 02 F6 | 	mov	local12, local08
050c8     51 A5 E2 F8 | 	getbyte	local13, local12, #0
050cc     02 A4 06 F1 | 	add	local13, #2
050d0     52 A7 02 F6 | 	mov	local14, local13
050d4     A8 A8 02 F6 | 	mov	local15, fp
050d8     A8 A6 02 F1 | 	add	local14, fp
050dc     53 AB C2 FA | 	rdbyte	local16, local14
050e0     55 91 42 F5 | 	or	local03, local16
050e4     02 8E 06 F1 | 	add	local02, #2
050e8     47 91 52 FC | 	wrword	local03, local02
050ec     10 50 85 F1 | 	sub	fp, #16
050f0     A8 AC C2 FA | 	rdbyte	local17, fp
050f4     56 AF 02 F6 | 	mov	local18, local17
050f8     56 B1 02 F6 | 	mov	local19, local17
050fc     58 B3 02 F6 | 	mov	local20, local19
05100     01 B2 06 F1 | 	add	local20, #1
05104     A8 B2 42 FC | 	wrbyte	local20, fp
05108     04 50 85 F1 | 	sub	fp, #4
0510c     A8 B4 C2 FA | 	rdbyte	local21, fp
05110     5A B7 E2 F8 | 	getbyte	local22, local21, #0
05114     08 B6 06 F1 | 	add	local22, #8
05118     A8 B6 42 FC | 	wrbyte	local22, fp
0511c     14 50 85 F1 | 	sub	fp, #20
05120     D8 FE 9F FD | 	jmp	#LR__0176
05124                 | LR__0177
05124                 | LR__0178
05124     24 50 05 F1 | 	add	fp, #36
05128     A8 8C C2 FA | 	rdbyte	local01, fp
0512c     24 50 85 F1 | 	sub	fp, #36
05130     05 8C 16 F2 | 	cmp	local01, #5 wc
05134     7C 02 90 CD |  if_b	jmp	#LR__0184
05138                 | '     {
05138                 | '       for (k = 0, i = 0;
05138     18 50 05 F1 | 	add	fp, #24
0513c     A8 00 48 FC | 	wrbyte	#0, fp
05140     04 50 85 F1 | 	sub	fp, #4
05144     A8 00 48 FC | 	wrbyte	#0, fp
05148     14 50 85 F1 | 	sub	fp, #20
0514c     D4 AF 9F FE | 	loc	pa,	#(@LR__0180-@LR__0179)
05150     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05154                 | LR__0179
05154     14 50 05 F1 | 	add	fp, #20
05158     A8 8E C2 FA | 	rdbyte	local02, fp
0515c     14 50 85 F1 | 	sub	fp, #20
05160     20 8E 16 F2 | 	cmp	local02, #32 wc
05164     10 01 90 3D |  if_ae	jmp	#LR__0181
05168     18 50 05 F1 | 	add	fp, #24
0516c     A8 92 C2 FA | 	rdbyte	local04, fp
05170     49 95 E2 F8 | 	getbyte	local05, local04, #0
05174     0C 50 85 F1 | 	sub	fp, #12
05178     A8 96 C2 FA | 	rdbyte	local06, fp
0517c     0C 50 85 F1 | 	sub	fp, #12
05180     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05184     4C 95 12 F2 | 	cmp	local05, local07 wc
05188     EC 00 90 3D |  if_ae	jmp	#LR__0181
0518c     08 50 05 F1 | 	add	fp, #8
05190     A8 B6 02 FB | 	rdlong	local22, fp
05194     10 50 05 F1 | 	add	fp, #16
05198     A8 B2 C2 FA | 	rdbyte	local20, fp
0519c     02 B2 66 F0 | 	shl	local20, #2
051a0     5B B3 02 F1 | 	add	local20, local22
051a4     04 50 85 F1 | 	sub	fp, #4
051a8     A8 A6 C2 FA | 	rdbyte	local14, fp
051ac     53 9F E2 F8 | 	getbyte	local10, local14, #0
051b0     01 9E 06 F1 | 	add	local10, #1
051b4     14 50 05 F1 | 	add	fp, #20
051b8     A8 9E 02 F1 | 	add	local10, fp
051bc     4F B5 C2 FA | 	rdbyte	local21, local10
051c0     08 B4 66 F0 | 	shl	local21, #8
051c4     53 A7 E2 F8 | 	getbyte	local14, local14, #0
051c8     A8 A6 02 F1 | 	add	local14, fp
051cc     53 AB C2 FA | 	rdbyte	local16, local14
051d0     55 B5 42 F5 | 	or	local21, local16
051d4     59 B5 52 FC | 	wrword	local21, local20
051d8     20 50 85 F1 | 	sub	fp, #32
051dc     A8 B6 02 FB | 	rdlong	local22, fp
051e0     10 50 05 F1 | 	add	fp, #16
051e4     A8 B2 C2 FA | 	rdbyte	local20, fp
051e8     02 B2 66 F0 | 	shl	local20, #2
051ec     5B B3 02 F1 | 	add	local20, local22
051f0     04 50 85 F1 | 	sub	fp, #4
051f4     A8 9A C2 FA | 	rdbyte	local08, fp
051f8     4D 9D E2 F8 | 	getbyte	local09, local08, #0
051fc     03 9C 06 F1 | 	add	local09, #3
05200     4E 9F 02 F6 | 	mov	local10, local09
05204     14 50 05 F1 | 	add	fp, #20
05208     A8 A0 02 F6 | 	mov	local11, fp
0520c     A8 9E 02 F1 | 	add	local10, fp
05210     4F B5 C2 FA | 	rdbyte	local21, local10
05214     08 B4 66 F0 | 	shl	local21, #8
05218     4D A3 02 F6 | 	mov	local12, local08
0521c     51 A5 E2 F8 | 	getbyte	local13, local12, #0
05220     02 A4 06 F1 | 	add	local13, #2
05224     52 A7 02 F6 | 	mov	local14, local13
05228     A8 A8 02 F6 | 	mov	local15, fp
0522c     A8 A6 02 F1 | 	add	local14, fp
05230     53 AB C2 FA | 	rdbyte	local16, local14
05234     55 B5 42 F5 | 	or	local21, local16
05238     02 B2 06 F1 | 	add	local20, #2
0523c     59 B5 52 FC | 	wrword	local21, local20
05240     10 50 85 F1 | 	sub	fp, #16
05244     A8 AC C2 FA | 	rdbyte	local17, fp
05248     56 AF 02 F6 | 	mov	local18, local17
0524c     56 B1 02 F6 | 	mov	local19, local17
05250     58 B3 02 F6 | 	mov	local20, local19
05254     01 B2 06 F1 | 	add	local20, #1
05258     A8 B2 42 FC | 	wrbyte	local20, fp
0525c     04 50 85 F1 | 	sub	fp, #4
05260     A8 B4 C2 FA | 	rdbyte	local21, fp
05264     5A B7 E2 F8 | 	getbyte	local22, local21, #0
05268     08 B6 06 F1 | 	add	local22, #8
0526c     A8 B6 42 FC | 	wrbyte	local22, fp
05270     14 50 85 F1 | 	sub	fp, #20
05274     DC FE 9F FD | 	jmp	#LR__0179
05278                 | LR__0180
05278                 | LR__0181
05278                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
05278                 | '       {
05278                 | '         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
05278                 | '         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
05278                 | '       }
05278                 | ' 
05278                 | '       for (k = 4, i = 0;
05278     18 50 05 F1 | 	add	fp, #24
0527c     A8 08 48 FC | 	wrbyte	#4, fp
05280     04 50 85 F1 | 	sub	fp, #4
05284     A8 00 48 FC | 	wrbyte	#0, fp
05288     14 50 85 F1 | 	sub	fp, #20
0528c                 | LR__0182
0528c     14 50 05 F1 | 	add	fp, #20
05290     A8 90 C2 FA | 	rdbyte	local03, fp
05294     14 50 85 F1 | 	sub	fp, #20
05298     48 8F E2 F8 | 	getbyte	local02, local03, #0
0529c     20 8E 16 F2 | 	cmp	local02, #32 wc
052a0     10 01 90 3D |  if_ae	jmp	#LR__0183
052a4     18 50 05 F1 | 	add	fp, #24
052a8     A8 92 C2 FA | 	rdbyte	local04, fp
052ac     49 95 E2 F8 | 	getbyte	local05, local04, #0
052b0     0C 50 85 F1 | 	sub	fp, #12
052b4     A8 96 C2 FA | 	rdbyte	local06, fp
052b8     0C 50 85 F1 | 	sub	fp, #12
052bc     4B 99 E2 F8 | 	getbyte	local07, local06, #0
052c0     4C 95 12 F2 | 	cmp	local05, local07 wc
052c4     EC 00 90 3D |  if_ae	jmp	#LR__0183
052c8     08 50 05 F1 | 	add	fp, #8
052cc     A8 B6 02 FB | 	rdlong	local22, fp
052d0     10 50 05 F1 | 	add	fp, #16
052d4     A8 B2 C2 FA | 	rdbyte	local20, fp
052d8     02 B2 66 F0 | 	shl	local20, #2
052dc     5B B3 02 F1 | 	add	local20, local22
052e0     04 50 85 F1 | 	sub	fp, #4
052e4     A8 A6 C2 FA | 	rdbyte	local14, fp
052e8     53 9F E2 F8 | 	getbyte	local10, local14, #0
052ec     01 9E 06 F1 | 	add	local10, #1
052f0     34 50 05 F1 | 	add	fp, #52
052f4     A8 9E 02 F1 | 	add	local10, fp
052f8     4F B5 C2 FA | 	rdbyte	local21, local10
052fc     08 B4 66 F0 | 	shl	local21, #8
05300     53 A7 E2 F8 | 	getbyte	local14, local14, #0
05304     A8 A6 02 F1 | 	add	local14, fp
05308     53 AB C2 FA | 	rdbyte	local16, local14
0530c     55 B5 42 F5 | 	or	local21, local16
05310     59 B5 52 FC | 	wrword	local21, local20
05314     40 50 85 F1 | 	sub	fp, #64
05318     A8 B6 02 FB | 	rdlong	local22, fp
0531c     10 50 05 F1 | 	add	fp, #16
05320     A8 B2 C2 FA | 	rdbyte	local20, fp
05324     02 B2 66 F0 | 	shl	local20, #2
05328     5B B3 02 F1 | 	add	local20, local22
0532c     04 50 85 F1 | 	sub	fp, #4
05330     A8 9A C2 FA | 	rdbyte	local08, fp
05334     4D 9D E2 F8 | 	getbyte	local09, local08, #0
05338     03 9C 06 F1 | 	add	local09, #3
0533c     4E 9F 02 F6 | 	mov	local10, local09
05340     34 50 05 F1 | 	add	fp, #52
05344     A8 A0 02 F6 | 	mov	local11, fp
05348     A8 9E 02 F1 | 	add	local10, fp
0534c     4F B5 C2 FA | 	rdbyte	local21, local10
05350     08 B4 66 F0 | 	shl	local21, #8
05354     4D A3 02 F6 | 	mov	local12, local08
05358     51 A5 E2 F8 | 	getbyte	local13, local12, #0
0535c     02 A4 06 F1 | 	add	local13, #2
05360     52 A7 02 F6 | 	mov	local14, local13
05364     A8 A8 02 F6 | 	mov	local15, fp
05368     A8 A6 02 F1 | 	add	local14, fp
0536c     53 AB C2 FA | 	rdbyte	local16, local14
05370     55 B5 42 F5 | 	or	local21, local16
05374     02 B2 06 F1 | 	add	local20, #2
05378     59 B5 52 FC | 	wrword	local21, local20
0537c     30 50 85 F1 | 	sub	fp, #48
05380     A8 AC C2 FA | 	rdbyte	local17, fp
05384     56 AF 02 F6 | 	mov	local18, local17
05388     56 B1 02 F6 | 	mov	local19, local17
0538c     58 B3 02 F6 | 	mov	local20, local19
05390     01 B2 06 F1 | 	add	local20, #1
05394     A8 B2 42 FC | 	wrbyte	local20, fp
05398     04 50 85 F1 | 	sub	fp, #4
0539c     A8 B4 C2 FA | 	rdbyte	local21, fp
053a0     5A B7 E2 F8 | 	getbyte	local22, local21, #0
053a4     08 B6 06 F1 | 	add	local22, #8
053a8     A8 B6 42 FC | 	wrbyte	local22, fp
053ac     14 50 85 F1 | 	sub	fp, #20
053b0     D8 FE 9F FD | 	jmp	#LR__0182
053b4                 | LR__0183
053b4                 | LR__0184
053b4     24 50 05 F1 | 	add	fp, #36
053b8     A8 B8 C2 FA | 	rdbyte	local23, fp
053bc     24 50 85 F1 | 	sub	fp, #36
053c0     5C 8D E2 F8 | 	getbyte	local01, local23, #0
053c4     09 8C 16 F2 | 	cmp	local01, #9 wc
053c8     C0 03 90 CD |  if_b	jmp	#LR__0193
053cc                 | '     {
053cc                 | '       for (k = 0, i = 0;
053cc     18 50 05 F1 | 	add	fp, #24
053d0     A8 00 48 FC | 	wrbyte	#0, fp
053d4     04 50 85 F1 | 	sub	fp, #4
053d8     A8 00 48 FC | 	wrbyte	#0, fp
053dc     14 50 85 F1 | 	sub	fp, #20
053e0     40 AD 9F FE | 	loc	pa,	#(@LR__0186-@LR__0185)
053e4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
053e8                 | LR__0185
053e8     14 50 05 F1 | 	add	fp, #20
053ec     A8 8E C2 FA | 	rdbyte	local02, fp
053f0     14 50 85 F1 | 	sub	fp, #20
053f4     20 8E 16 F2 | 	cmp	local02, #32 wc
053f8     10 01 90 3D |  if_ae	jmp	#LR__0187
053fc     18 50 05 F1 | 	add	fp, #24
05400     A8 92 C2 FA | 	rdbyte	local04, fp
05404     49 95 E2 F8 | 	getbyte	local05, local04, #0
05408     0C 50 85 F1 | 	sub	fp, #12
0540c     A8 96 C2 FA | 	rdbyte	local06, fp
05410     0C 50 85 F1 | 	sub	fp, #12
05414     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05418     4C 95 12 F2 | 	cmp	local05, local07 wc
0541c     EC 00 90 3D |  if_ae	jmp	#LR__0187
05420     08 50 05 F1 | 	add	fp, #8
05424     A8 B6 02 FB | 	rdlong	local22, fp
05428     10 50 05 F1 | 	add	fp, #16
0542c     A8 B2 C2 FA | 	rdbyte	local20, fp
05430     02 B2 66 F0 | 	shl	local20, #2
05434     5B B3 02 F1 | 	add	local20, local22
05438     04 50 85 F1 | 	sub	fp, #4
0543c     A8 A6 C2 FA | 	rdbyte	local14, fp
05440     53 9F E2 F8 | 	getbyte	local10, local14, #0
05444     01 9E 06 F1 | 	add	local10, #1
05448     14 50 05 F1 | 	add	fp, #20
0544c     A8 9E 02 F1 | 	add	local10, fp
05450     4F B5 C2 FA | 	rdbyte	local21, local10
05454     08 B4 66 F0 | 	shl	local21, #8
05458     53 A7 E2 F8 | 	getbyte	local14, local14, #0
0545c     A8 A6 02 F1 | 	add	local14, fp
05460     53 AB C2 FA | 	rdbyte	local16, local14
05464     55 B5 42 F5 | 	or	local21, local16
05468     59 B5 52 FC | 	wrword	local21, local20
0546c     20 50 85 F1 | 	sub	fp, #32
05470     A8 B6 02 FB | 	rdlong	local22, fp
05474     10 50 05 F1 | 	add	fp, #16
05478     A8 B2 C2 FA | 	rdbyte	local20, fp
0547c     02 B2 66 F0 | 	shl	local20, #2
05480     5B B3 02 F1 | 	add	local20, local22
05484     04 50 85 F1 | 	sub	fp, #4
05488     A8 9A C2 FA | 	rdbyte	local08, fp
0548c     4D 9D E2 F8 | 	getbyte	local09, local08, #0
05490     03 9C 06 F1 | 	add	local09, #3
05494     4E 9F 02 F6 | 	mov	local10, local09
05498     14 50 05 F1 | 	add	fp, #20
0549c     A8 A0 02 F6 | 	mov	local11, fp
054a0     A8 9E 02 F1 | 	add	local10, fp
054a4     4F B5 C2 FA | 	rdbyte	local21, local10
054a8     08 B4 66 F0 | 	shl	local21, #8
054ac     4D A3 02 F6 | 	mov	local12, local08
054b0     51 A5 E2 F8 | 	getbyte	local13, local12, #0
054b4     02 A4 06 F1 | 	add	local13, #2
054b8     52 A7 02 F6 | 	mov	local14, local13
054bc     A8 A8 02 F6 | 	mov	local15, fp
054c0     A8 A6 02 F1 | 	add	local14, fp
054c4     53 AB C2 FA | 	rdbyte	local16, local14
054c8     55 B5 42 F5 | 	or	local21, local16
054cc     02 B2 06 F1 | 	add	local20, #2
054d0     59 B5 52 FC | 	wrword	local21, local20
054d4     10 50 85 F1 | 	sub	fp, #16
054d8     A8 AC C2 FA | 	rdbyte	local17, fp
054dc     56 AF 02 F6 | 	mov	local18, local17
054e0     56 B1 02 F6 | 	mov	local19, local17
054e4     58 B3 02 F6 | 	mov	local20, local19
054e8     01 B2 06 F1 | 	add	local20, #1
054ec     A8 B2 42 FC | 	wrbyte	local20, fp
054f0     04 50 85 F1 | 	sub	fp, #4
054f4     A8 B4 C2 FA | 	rdbyte	local21, fp
054f8     5A B7 E2 F8 | 	getbyte	local22, local21, #0
054fc     08 B6 06 F1 | 	add	local22, #8
05500     A8 B6 42 FC | 	wrbyte	local22, fp
05504     14 50 85 F1 | 	sub	fp, #20
05508     DC FE 9F FD | 	jmp	#LR__0185
0550c                 | LR__0186
0550c                 | LR__0187
0550c                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
0550c                 | '       {
0550c                 | '         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
0550c                 | '         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
0550c                 | '       }
0550c                 | ' 
0550c                 | '       for (k = 4, i = 0;
0550c     18 50 05 F1 | 	add	fp, #24
05510     A8 08 48 FC | 	wrbyte	#4, fp
05514     04 50 85 F1 | 	sub	fp, #4
05518     A8 00 48 FC | 	wrbyte	#0, fp
0551c     14 50 85 F1 | 	sub	fp, #20
05520     00 AC 9F FE | 	loc	pa,	#(@LR__0189-@LR__0188)
05524     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05528                 | LR__0188
05528     14 50 05 F1 | 	add	fp, #20
0552c     A8 8E C2 FA | 	rdbyte	local02, fp
05530     14 50 85 F1 | 	sub	fp, #20
05534     20 8E 16 F2 | 	cmp	local02, #32 wc
05538     10 01 90 3D |  if_ae	jmp	#LR__0190
0553c     18 50 05 F1 | 	add	fp, #24
05540     A8 92 C2 FA | 	rdbyte	local04, fp
05544     49 95 E2 F8 | 	getbyte	local05, local04, #0
05548     0C 50 85 F1 | 	sub	fp, #12
0554c     A8 96 C2 FA | 	rdbyte	local06, fp
05550     0C 50 85 F1 | 	sub	fp, #12
05554     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05558     4C 95 12 F2 | 	cmp	local05, local07 wc
0555c     EC 00 90 3D |  if_ae	jmp	#LR__0190
05560     08 50 05 F1 | 	add	fp, #8
05564     A8 B6 02 FB | 	rdlong	local22, fp
05568     10 50 05 F1 | 	add	fp, #16
0556c     A8 B2 C2 FA | 	rdbyte	local20, fp
05570     02 B2 66 F0 | 	shl	local20, #2
05574     5B B3 02 F1 | 	add	local20, local22
05578     04 50 85 F1 | 	sub	fp, #4
0557c     A8 A6 C2 FA | 	rdbyte	local14, fp
05580     53 9F E2 F8 | 	getbyte	local10, local14, #0
05584     01 9E 06 F1 | 	add	local10, #1
05588     34 50 05 F1 | 	add	fp, #52
0558c     A8 9E 02 F1 | 	add	local10, fp
05590     4F B5 C2 FA | 	rdbyte	local21, local10
05594     08 B4 66 F0 | 	shl	local21, #8
05598     53 A7 E2 F8 | 	getbyte	local14, local14, #0
0559c     A8 A6 02 F1 | 	add	local14, fp
055a0     53 AB C2 FA | 	rdbyte	local16, local14
055a4     55 B5 42 F5 | 	or	local21, local16
055a8     59 B5 52 FC | 	wrword	local21, local20
055ac     40 50 85 F1 | 	sub	fp, #64
055b0     A8 B6 02 FB | 	rdlong	local22, fp
055b4     10 50 05 F1 | 	add	fp, #16
055b8     A8 B2 C2 FA | 	rdbyte	local20, fp
055bc     02 B2 66 F0 | 	shl	local20, #2
055c0     5B B3 02 F1 | 	add	local20, local22
055c4     04 50 85 F1 | 	sub	fp, #4
055c8     A8 9A C2 FA | 	rdbyte	local08, fp
055cc     4D 9D E2 F8 | 	getbyte	local09, local08, #0
055d0     03 9C 06 F1 | 	add	local09, #3
055d4     4E 9F 02 F6 | 	mov	local10, local09
055d8     34 50 05 F1 | 	add	fp, #52
055dc     A8 A0 02 F6 | 	mov	local11, fp
055e0     A8 9E 02 F1 | 	add	local10, fp
055e4     4F B5 C2 FA | 	rdbyte	local21, local10
055e8     08 B4 66 F0 | 	shl	local21, #8
055ec     4D A3 02 F6 | 	mov	local12, local08
055f0     51 A5 E2 F8 | 	getbyte	local13, local12, #0
055f4     02 A4 06 F1 | 	add	local13, #2
055f8     52 A7 02 F6 | 	mov	local14, local13
055fc     A8 A8 02 F6 | 	mov	local15, fp
05600     A8 A6 02 F1 | 	add	local14, fp
05604     53 AB C2 FA | 	rdbyte	local16, local14
05608     55 B5 42 F5 | 	or	local21, local16
0560c     02 B2 06 F1 | 	add	local20, #2
05610     59 B5 52 FC | 	wrword	local21, local20
05614     30 50 85 F1 | 	sub	fp, #48
05618     A8 AC C2 FA | 	rdbyte	local17, fp
0561c     56 AF 02 F6 | 	mov	local18, local17
05620     56 B1 02 F6 | 	mov	local19, local17
05624     58 B3 02 F6 | 	mov	local20, local19
05628     01 B2 06 F1 | 	add	local20, #1
0562c     A8 B2 42 FC | 	wrbyte	local20, fp
05630     04 50 85 F1 | 	sub	fp, #4
05634     A8 B4 C2 FA | 	rdbyte	local21, fp
05638     5A B7 E2 F8 | 	getbyte	local22, local21, #0
0563c     08 B6 06 F1 | 	add	local22, #8
05640     A8 B6 42 FC | 	wrbyte	local22, fp
05644     14 50 85 F1 | 	sub	fp, #20
05648     DC FE 9F FD | 	jmp	#LR__0188
0564c                 | LR__0189
0564c                 | LR__0190
0564c                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
0564c                 | '       {
0564c                 | '         pLoc[k].x = tbuf1[i + 1] << 8 | tbuf1[i + 0];
0564c                 | '         pLoc[k].y = tbuf1[i + 3] << 8 | tbuf1[i + 2];
0564c                 | '       }
0564c                 | ' 
0564c                 | '       for (k = 8, i = 0;
0564c     18 50 05 F1 | 	add	fp, #24
05650     A8 10 48 FC | 	wrbyte	#8, fp
05654     00 B8 06 F6 | 	mov	local23, #0
05658     04 50 85 F1 | 	sub	fp, #4
0565c     A8 00 48 FC | 	wrbyte	#0, fp
05660     14 50 85 F1 | 	sub	fp, #20
05664                 | LR__0191
05664     14 50 05 F1 | 	add	fp, #20
05668     A8 90 C2 FA | 	rdbyte	local03, fp
0566c     14 50 85 F1 | 	sub	fp, #20
05670     48 8F E2 F8 | 	getbyte	local02, local03, #0
05674     10 8E 16 F2 | 	cmp	local02, #16 wc
05678     10 01 90 3D |  if_ae	jmp	#LR__0192
0567c     18 50 05 F1 | 	add	fp, #24
05680     A8 92 C2 FA | 	rdbyte	local04, fp
05684     49 95 E2 F8 | 	getbyte	local05, local04, #0
05688     0C 50 85 F1 | 	sub	fp, #12
0568c     A8 96 C2 FA | 	rdbyte	local06, fp
05690     0C 50 85 F1 | 	sub	fp, #12
05694     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05698     4C 95 12 F2 | 	cmp	local05, local07 wc
0569c     EC 00 90 3D |  if_ae	jmp	#LR__0192
056a0     08 50 05 F1 | 	add	fp, #8
056a4     A8 B6 02 FB | 	rdlong	local22, fp
056a8     10 50 05 F1 | 	add	fp, #16
056ac     A8 B2 C2 FA | 	rdbyte	local20, fp
056b0     02 B2 66 F0 | 	shl	local20, #2
056b4     5B B3 02 F1 | 	add	local20, local22
056b8     04 50 85 F1 | 	sub	fp, #4
056bc     A8 A6 C2 FA | 	rdbyte	local14, fp
056c0     53 9F E2 F8 | 	getbyte	local10, local14, #0
056c4     01 9E 06 F1 | 	add	local10, #1
056c8     54 50 05 F1 | 	add	fp, #84
056cc     A8 9E 02 F1 | 	add	local10, fp
056d0     4F B5 C2 FA | 	rdbyte	local21, local10
056d4     08 B4 66 F0 | 	shl	local21, #8
056d8     53 A7 E2 F8 | 	getbyte	local14, local14, #0
056dc     A8 A6 02 F1 | 	add	local14, fp
056e0     53 AB C2 FA | 	rdbyte	local16, local14
056e4     55 B5 42 F5 | 	or	local21, local16
056e8     59 B5 52 FC | 	wrword	local21, local20
056ec     60 50 85 F1 | 	sub	fp, #96
056f0     A8 B6 02 FB | 	rdlong	local22, fp
056f4     10 50 05 F1 | 	add	fp, #16
056f8     A8 B2 C2 FA | 	rdbyte	local20, fp
056fc     02 B2 66 F0 | 	shl	local20, #2
05700     5B B3 02 F1 | 	add	local20, local22
05704     04 50 85 F1 | 	sub	fp, #4
05708     A8 9A C2 FA | 	rdbyte	local08, fp
0570c     4D 9D E2 F8 | 	getbyte	local09, local08, #0
05710     03 9C 06 F1 | 	add	local09, #3
05714     4E 9F 02 F6 | 	mov	local10, local09
05718     54 50 05 F1 | 	add	fp, #84
0571c     A8 A0 02 F6 | 	mov	local11, fp
05720     A8 9E 02 F1 | 	add	local10, fp
05724     4F B5 C2 FA | 	rdbyte	local21, local10
05728     08 B4 66 F0 | 	shl	local21, #8
0572c     4D A3 02 F6 | 	mov	local12, local08
05730     51 A5 E2 F8 | 	getbyte	local13, local12, #0
05734     02 A4 06 F1 | 	add	local13, #2
05738     52 A7 02 F6 | 	mov	local14, local13
0573c     A8 A8 02 F6 | 	mov	local15, fp
05740     A8 A6 02 F1 | 	add	local14, fp
05744     53 AB C2 FA | 	rdbyte	local16, local14
05748     55 B5 42 F5 | 	or	local21, local16
0574c     02 B2 06 F1 | 	add	local20, #2
05750     59 B5 52 FC | 	wrword	local21, local20
05754     50 50 85 F1 | 	sub	fp, #80
05758     A8 AC C2 FA | 	rdbyte	local17, fp
0575c     56 AF 02 F6 | 	mov	local18, local17
05760     56 B1 02 F6 | 	mov	local19, local17
05764     58 B3 02 F6 | 	mov	local20, local19
05768     01 B2 06 F1 | 	add	local20, #1
0576c     A8 B2 42 FC | 	wrbyte	local20, fp
05770     04 50 85 F1 | 	sub	fp, #4
05774     A8 B4 C2 FA | 	rdbyte	local21, fp
05778     5A B7 E2 F8 | 	getbyte	local22, local21, #0
0577c     08 B6 06 F1 | 	add	local22, #8
05780     A8 B6 42 FC | 	wrbyte	local22, fp
05784     14 50 85 F1 | 	sub	fp, #20
05788     D8 FE 9F FD | 	jmp	#LR__0191
0578c                 | LR__0192
0578c                 | LR__0193
0578c     24 50 05 F1 | 	add	fp, #36
05790     A8 8C C2 FA | 	rdbyte	local01, fp
05794     14 50 85 F1 | 	sub	fp, #20
05798     A8 8C 42 FC | 	wrbyte	local01, fp
0579c     10 50 85 F1 | 	sub	fp, #16
057a0                 | LR__0194
057a0     1C 50 05 F1 | 	add	fp, #28
057a4     A8 00 48 FC | 	wrbyte	#0, fp
057a8     18 50 85 F1 | 	sub	fp, #24
057ac     A8 74 02 FB | 	rdlong	arg01, fp
057b0     18 50 05 F1 | 	add	fp, #24
057b4     A8 78 02 F6 | 	mov	arg03, fp
057b8     1C 50 85 F1 | 	sub	fp, #28
057bc     40 00 00 FF 
057c0     4E 77 06 F6 | 	mov	arg02, ##33102
057c4     01 7A 06 F6 | 	mov	arg04, #1
057c8     08 F5 BF FD | 	call	#_display_write_gt9271_touch_register
057cc                 | ' 
057cc                 | '   ss[0] = 0;
057cc                 | '   display_write_gt9271_touch_register(display, 0x814e, ss, 1);
057cc                 | ' 
057cc                 | '   return retVal;
057cc     10 50 05 F1 | 	add	fp, #16
057d0     A8 34 C2 FA | 	rdbyte	result1, fp
057d4     10 50 85 F1 | 	sub	fp, #16
057d8     A8 F0 03 F6 | 	mov	ptra, fp
057dc     B3 00 A0 FD | 	call	#popregs_
057e0                 | _readGT9271TouchLocation_ret
057e0     2D 00 64 FD | 	ret
057e4                 | 
057e4                 | _display_update_touch
057e4     02 4C 05 F6 | 	mov	COUNT_, #2
057e8     A9 00 A0 FD | 	call	#pushregs_
057ec     3A 8D 02 F6 | 	mov	local01, arg01
057f0     20 8C 06 F1 | 	add	local01, #32
057f4     46 77 02 F6 | 	mov	arg02, local01
057f8     01 78 06 F6 | 	mov	arg03, #1
057fc     A4 F6 BF FD | 	call	#_readGT9271TouchLocation
05800     1A 8F E2 F8 | 	getbyte	local02, result1, #0
05804     04 8C 06 F1 | 	add	local01, #4
05808     46 35 E2 FA | 	rdword	result1, local01
0580c     04 8C 86 F1 | 	sub	local01, #4
05810     46 79 E2 FA | 	rdword	arg03, local01
05814     20 8C 86 F1 | 	sub	local01, #32
05818     3C 35 0A F2 | 	cmp	result1, arg03 wz
0581c     1C 00 90 5D |  if_ne	jmp	#LR__0195
05820     26 8C 06 F1 | 	add	local01, #38
05824     46 35 E2 FA | 	rdword	result1, local01
05828     04 8C 86 F1 | 	sub	local01, #4
0582c     46 79 E2 FA | 	rdword	arg03, local01
05830     22 8C 86 F1 | 	sub	local01, #34
05834     3C 35 0A F2 | 	cmp	result1, arg03 wz
05838     10 00 90 AD |  if_e	jmp	#LR__0196
0583c                 | LR__0195
0583c     28 8C 06 F1 | 	add	local01, #40
05840     46 8F 62 FC | 	wrlong	local02, local01
05844     28 8C 86 F1 | 	sub	local01, #40
05848     0C 00 90 FD | 	jmp	#LR__0197
0584c                 | LR__0196
0584c     28 8C 06 F1 | 	add	local01, #40
05850     46 01 68 FC | 	wrlong	#0, local01
05854     28 8C 86 F1 | 	sub	local01, #40
05858                 | LR__0197
05858     24 8C 06 F1 | 	add	local01, #36
0585c     46 75 02 F6 | 	mov	arg01, local01
05860     04 8C 86 F1 | 	sub	local01, #4
05864     46 77 02 F6 | 	mov	arg02, local01
05868     04 78 06 F6 | 	mov	arg03, #4
0586c     E8 02 B2 FD | 	call	#__system____builtin_memmove
05870                 | '   {
05870                 | '     display->locationCount = 0;
05870                 | '   }
05870                 | '   display->lastLocation[0] = display->location[0];
05870                 | '   return touchCount;
05870     47 35 02 F6 | 	mov	result1, local02
05874     A8 F0 03 F6 | 	mov	ptra, fp
05878     B3 00 A0 FD | 	call	#popregs_
0587c                 | _display_update_touch_ret
0587c     2D 00 64 FD | 	ret
05880                 | 
05880                 | _lcdRegWrite
05880     03 4C 05 F6 | 	mov	COUNT_, #3
05884     A9 00 A0 FD | 	call	#pushregs_
05888     3A 8D 02 F6 | 	mov	local01, arg01
0588c     3B 8F 02 F6 | 	mov	local02, arg02
05890     46 75 02 FB | 	rdlong	arg01, local01
05894     58 74 62 FD | 	drvl	arg01
05898     38 8C 06 F1 | 	add	local01, #56
0589c     01 74 06 F6 | 	mov	arg01, #1
058a0     00 76 06 F6 | 	mov	arg02, #0
058a4     08 78 06 F6 | 	mov	arg03, #8
058a8     C9 90 02 F6 | 	mov	local03, objptr
058ac     46 93 01 F6 | 	mov	objptr, local01
058b0     BC 6D B1 FD | 	call	#_jm_spi_spin2_shiftout
058b4     46 93 01 F6 | 	mov	objptr, local01
058b8     38 8C 86 F1 | 	sub	local01, #56
058bc     47 77 E2 F8 | 	getbyte	arg02, local02, #0
058c0     01 74 06 F6 | 	mov	arg01, #1
058c4     08 78 06 F6 | 	mov	arg03, #8
058c8     A4 6D B1 FD | 	call	#_jm_spi_spin2_shiftout
058cc     48 93 01 F6 | 	mov	objptr, local03
058d0     46 75 02 FB | 	rdlong	arg01, local01
058d4     59 74 62 FD | 	drvh	arg01
058d8     A8 F0 03 F6 | 	mov	ptra, fp
058dc     B3 00 A0 FD | 	call	#popregs_
058e0                 | _lcdRegWrite_ret
058e0     2D 00 64 FD | 	ret
058e4                 | 
058e4                 | _lcdDataWrite
058e4     03 4C 05 F6 | 	mov	COUNT_, #3
058e8     A9 00 A0 FD | 	call	#pushregs_
058ec     3A 8D 02 F6 | 	mov	local01, arg01
058f0     3B 8F 02 F6 | 	mov	local02, arg02
058f4     46 75 02 FB | 	rdlong	arg01, local01
058f8     58 74 62 FD | 	drvl	arg01
058fc     38 8C 06 F1 | 	add	local01, #56
05900     01 74 06 F6 | 	mov	arg01, #1
05904     80 76 06 F6 | 	mov	arg02, #128
05908     08 78 06 F6 | 	mov	arg03, #8
0590c     C9 90 02 F6 | 	mov	local03, objptr
05910     46 93 01 F6 | 	mov	objptr, local01
05914     58 6D B1 FD | 	call	#_jm_spi_spin2_shiftout
05918     46 93 01 F6 | 	mov	objptr, local01
0591c     38 8C 86 F1 | 	sub	local01, #56
05920     47 77 E2 F8 | 	getbyte	arg02, local02, #0
05924     01 74 06 F6 | 	mov	arg01, #1
05928     08 78 06 F6 | 	mov	arg03, #8
0592c     40 6D B1 FD | 	call	#_jm_spi_spin2_shiftout
05930     48 93 01 F6 | 	mov	objptr, local03
05934     46 75 02 FB | 	rdlong	arg01, local01
05938     59 74 62 FD | 	drvh	arg01
0593c     A8 F0 03 F6 | 	mov	ptra, fp
05940     B3 00 A0 FD | 	call	#popregs_
05944                 | _lcdDataWrite_ret
05944     2D 00 64 FD | 	ret
05948                 | 
05948                 | _lcdDataRead
05948     02 4C 05 F6 | 	mov	COUNT_, #2
0594c     A9 00 A0 FD | 	call	#pushregs_
05950     3A 8D 02 F6 | 	mov	local01, arg01
05954     46 75 02 FB | 	rdlong	arg01, local01
05958     58 74 62 FD | 	drvl	arg01
0595c     38 8C 06 F1 | 	add	local01, #56
05960     01 74 06 F6 | 	mov	arg01, #1
05964     C0 76 06 F6 | 	mov	arg02, #192
05968     08 78 06 F6 | 	mov	arg03, #8
0596c     C9 8E 02 F6 | 	mov	local02, objptr
05970     46 93 01 F6 | 	mov	objptr, local01
05974     F8 6C B1 FD | 	call	#_jm_spi_spin2_shiftout
05978     30 8C 86 F1 | 	sub	local01, #48
0597c     46 75 02 FB | 	rdlong	arg01, local01
05980     59 74 62 FD | 	drvh	arg01
05984     30 8C 06 F1 | 	add	local01, #48
05988     01 74 06 F6 | 	mov	arg01, #1
0598c     08 76 06 F6 | 	mov	arg02, #8
05990     46 93 01 F6 | 	mov	objptr, local01
05994     20 6C B1 FD | 	call	#_jm_spi_spin2_shiftin
05998     47 93 01 F6 | 	mov	objptr, local02
0599c     38 8C 86 F1 | 	sub	local01, #56
059a0     46 75 02 FB | 	rdlong	arg01, local01
059a4     59 74 62 FD | 	drvh	arg01
059a8                 | ' {
059a8                 | '   _pinl(display->xnscs);
059a8                 | ' 
059a8                 | ' 
059a8                 | ' 
059a8                 | ' 
059a8                 | '   display->spi.shiftout(1, 0x80 , (uint32_t)8);
059a8                 | '   display->spi.shiftout(1,data, (uint32_t)8);
059a8                 | '   _pinh(display->xnscs);
059a8                 | ' }
059a8                 | ' 
059a8                 | ' 
059a8                 | ' uint8_t lcdDataRead(Display *display)
059a8                 | ' {
059a8                 | '   _pinl(display->xnscs);
059a8                 | ' 
059a8                 | ' 
059a8                 | '   display->spi.shiftout(1, 0xc0 , (uint32_t)8);
059a8                 | '   _pinh(display->spi_mosi);
059a8                 | ' 
059a8                 | ' 
059a8                 | '   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
059a8                 | '   _pinh(display->xnscs);
059a8                 | '   return data;
059a8     A8 F0 03 F6 | 	mov	ptra, fp
059ac     B3 00 A0 FD | 	call	#popregs_
059b0                 | _lcdDataRead_ret
059b0     2D 00 64 FD | 	ret
059b4                 | 
059b4                 | _lcdStatusRead
059b4     02 4C 05 F6 | 	mov	COUNT_, #2
059b8     A9 00 A0 FD | 	call	#pushregs_
059bc     3A 8D 02 F6 | 	mov	local01, arg01
059c0     46 75 02 FB | 	rdlong	arg01, local01
059c4     58 74 62 FD | 	drvl	arg01
059c8     38 8C 06 F1 | 	add	local01, #56
059cc     01 74 06 F6 | 	mov	arg01, #1
059d0     40 76 06 F6 | 	mov	arg02, #64
059d4     08 78 06 F6 | 	mov	arg03, #8
059d8     C9 8E 02 F6 | 	mov	local02, objptr
059dc     46 93 01 F6 | 	mov	objptr, local01
059e0     8C 6C B1 FD | 	call	#_jm_spi_spin2_shiftout
059e4     30 8C 86 F1 | 	sub	local01, #48
059e8     46 75 02 FB | 	rdlong	arg01, local01
059ec     59 74 62 FD | 	drvh	arg01
059f0     30 8C 06 F1 | 	add	local01, #48
059f4     01 74 06 F6 | 	mov	arg01, #1
059f8     08 76 06 F6 | 	mov	arg02, #8
059fc     46 93 01 F6 | 	mov	objptr, local01
05a00     B4 6B B1 FD | 	call	#_jm_spi_spin2_shiftin
05a04     47 93 01 F6 | 	mov	objptr, local02
05a08     38 8C 86 F1 | 	sub	local01, #56
05a0c     46 75 02 FB | 	rdlong	arg01, local01
05a10     59 74 62 FD | 	drvh	arg01
05a14                 | ' }
05a14                 | ' 
05a14                 | ' 
05a14                 | ' uint8_t lcdStatusRead(Display *display)
05a14                 | ' {
05a14                 | '   _pinl(display->xnscs);
05a14                 | ' 
05a14                 | ' 
05a14                 | '   display->spi.shiftout(1, 0x40 , (uint32_t)8);
05a14                 | '   _pinh(display->spi_mosi);
05a14                 | ' 
05a14                 | ' 
05a14                 | '   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
05a14                 | '   _pinh(display->xnscs);
05a14                 | '   return data;
05a14     A8 F0 03 F6 | 	mov	ptra, fp
05a18     B3 00 A0 FD | 	call	#popregs_
05a1c                 | _lcdStatusRead_ret
05a1c     2D 00 64 FD | 	ret
05a20                 | 
05a20                 | _lcdRegDataWrite
05a20     02 4C 05 F6 | 	mov	COUNT_, #2
05a24     A9 00 A0 FD | 	call	#pushregs_
05a28     3A 8D 02 F6 | 	mov	local01, arg01
05a2c     3C 8F 02 F6 | 	mov	local02, arg03
05a30     46 75 02 F6 | 	mov	arg01, local01
05a34     48 FE BF FD | 	call	#_lcdRegWrite
05a38     46 75 02 F6 | 	mov	arg01, local01
05a3c     47 77 02 F6 | 	mov	arg02, local02
05a40     A0 FE BF FD | 	call	#_lcdDataWrite
05a44     A8 F0 03 F6 | 	mov	ptra, fp
05a48     B3 00 A0 FD | 	call	#popregs_
05a4c                 | _lcdRegDataWrite_ret
05a4c     2D 00 64 FD | 	ret
05a50                 | 
05a50                 | _lcdDataWrite16bbp
05a50     03 4C 05 F6 | 	mov	COUNT_, #3
05a54     A9 00 A0 FD | 	call	#pushregs_
05a58     3A 8D 02 F6 | 	mov	local01, arg01
05a5c     3B 8F 02 F6 | 	mov	local02, arg02
05a60     46 75 02 FB | 	rdlong	arg01, local01
05a64     58 74 62 FD | 	drvl	arg01
05a68     38 8C 06 F1 | 	add	local01, #56
05a6c     01 74 06 F6 | 	mov	arg01, #1
05a70     80 76 06 F6 | 	mov	arg02, #128
05a74     08 78 06 F6 | 	mov	arg03, #8
05a78     C9 90 02 F6 | 	mov	local03, objptr
05a7c     46 93 01 F6 | 	mov	objptr, local01
05a80     EC 6B B1 FD | 	call	#_jm_spi_spin2_shiftout
05a84     46 93 01 F6 | 	mov	objptr, local01
05a88     47 77 32 F9 | 	getword	arg02, local02, #0
05a8c     01 74 06 F6 | 	mov	arg01, #1
05a90     08 78 06 F6 | 	mov	arg03, #8
05a94     D8 6B B1 FD | 	call	#_jm_spi_spin2_shiftout
05a98     46 93 01 F6 | 	mov	objptr, local01
05a9c     38 8C 86 F1 | 	sub	local01, #56
05aa0     47 77 32 F9 | 	getword	arg02, local02, #0
05aa4     08 76 46 F0 | 	shr	arg02, #8
05aa8     01 74 06 F6 | 	mov	arg01, #1
05aac     08 78 06 F6 | 	mov	arg03, #8
05ab0     BC 6B B1 FD | 	call	#_jm_spi_spin2_shiftout
05ab4     48 93 01 F6 | 	mov	objptr, local03
05ab8     46 75 02 FB | 	rdlong	arg01, local01
05abc     59 74 62 FD | 	drvh	arg01
05ac0     A8 F0 03 F6 | 	mov	ptra, fp
05ac4     B3 00 A0 FD | 	call	#popregs_
05ac8                 | _lcdDataWrite16bbp_ret
05ac8     2D 00 64 FD | 	ret
05acc                 | 
05acc                 | _checkWriteFifoNotFull
05acc     02 4C 05 F6 | 	mov	COUNT_, #2
05ad0     A9 00 A0 FD | 	call	#pushregs_
05ad4     3A 8D 02 F6 | 	mov	local01, arg01
05ad8                 | ' {
05ad8                 | '   uint16_t i;
05ad8                 | '   for (i = 0; i < 10000; i++)
05ad8     00 8E 06 F6 | 	mov	local02, #0
05adc                 | LR__0198
05adc     47 35 32 F9 | 	getword	result1, local02, #0
05ae0     13 00 00 FF 
05ae4     10 35 16 F2 | 	cmp	result1, ##10000 wc
05ae8     18 00 90 3D |  if_ae	jmp	#LR__0199
05aec     46 75 02 F6 | 	mov	arg01, local01
05af0     C0 FE BF FD | 	call	#_lcdStatusRead
05af4     1A 35 E2 F8 | 	getbyte	result1, result1, #0
05af8     80 34 CE F7 | 	test	result1, #128 wz
05afc                 | '     {
05afc                 | '       break;
05afc     01 8E 06 51 |  if_ne	add	local02, #1
05b00     D8 FF 9F 5D |  if_ne	jmp	#LR__0198
05b04                 | LR__0199
05b04     A8 F0 03 F6 | 	mov	ptra, fp
05b08     B3 00 A0 FD | 	call	#popregs_
05b0c                 | _checkWriteFifoNotFull_ret
05b0c     2D 00 64 FD | 	ret
05b10                 | 
05b10                 | _check2dBusy
05b10     02 4C 05 F6 | 	mov	COUNT_, #2
05b14     A9 00 A0 FD | 	call	#pushregs_
05b18     3A 8D 02 F6 | 	mov	local01, arg01
05b1c                 | ' {
05b1c                 | '   uint32_t i;
05b1c                 | '   for (i = 0; i < 1000000; i++)
05b1c     00 8E 06 F6 | 	mov	local02, #0
05b20                 | LR__0200
05b20     A1 07 00 FF 
05b24     40 8E 16 F2 | 	cmp	local02, ##1000000 wc
05b28     20 00 90 3D |  if_ae	jmp	#LR__0201
05b2c     01 74 06 F6 | 	mov	arg01, #1
05b30     CC 02 B2 FD | 	call	#__system___waitus
05b34     46 75 02 F6 | 	mov	arg01, local01
05b38     78 FE BF FD | 	call	#_lcdStatusRead
05b3c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
05b40     08 34 CE F7 | 	test	result1, #8 wz
05b44                 | '     {
05b44                 | '       break;
05b44     01 8E 06 51 |  if_ne	add	local02, #1
05b48     D4 FF 9F 5D |  if_ne	jmp	#LR__0200
05b4c                 | LR__0201
05b4c     A8 F0 03 F6 | 	mov	ptra, fp
05b50     B3 00 A0 FD | 	call	#popregs_
05b54                 | _check2dBusy_ret
05b54     2D 00 64 FD | 	ret
05b58                 | 
05b58                 | _checkSdramReady
05b58     02 4C 05 F6 | 	mov	COUNT_, #2
05b5c     A9 00 A0 FD | 	call	#pushregs_
05b60     3A 8D 02 F6 | 	mov	local01, arg01
05b64                 | ' {
05b64                 | '   uint32_t i;
05b64                 | '   for (i = 0; i < 1000000; i++)
05b64     00 8E 06 F6 | 	mov	local02, #0
05b68                 | LR__0202
05b68     A1 07 00 FF 
05b6c     40 8E 16 F2 | 	cmp	local02, ##1000000 wc
05b70     2C 00 90 3D |  if_ae	jmp	#LR__0203
05b74     01 74 06 F6 | 	mov	arg01, #1
05b78     0C 02 B2 FD | 	call	#__system___waitms
05b7c     46 75 02 F6 | 	mov	arg01, local01
05b80     30 FE BF FD | 	call	#_lcdStatusRead
05b84     1A 35 E2 F8 | 	getbyte	result1, result1, #0
05b88     04 34 06 F5 | 	and	result1, #4
05b8c     04 34 0E F2 | 	cmp	result1, #4 wz
05b90                 | '     {
05b90                 | '       return  (1) ;
05b90     01 34 06 A6 |  if_e	mov	result1, #1
05b94     0C 00 90 AD |  if_e	jmp	#LR__0204
05b98     01 8E 06 F1 | 	add	local02, #1
05b9c     C8 FF 9F FD | 	jmp	#LR__0202
05ba0                 | LR__0203
05ba0                 | '     }
05ba0                 | '   }
05ba0                 | '   return  (0) ;
05ba0     00 34 06 F6 | 	mov	result1, #0
05ba4                 | LR__0204
05ba4     A8 F0 03 F6 | 	mov	ptra, fp
05ba8     B3 00 A0 FD | 	call	#popregs_
05bac                 | _checkSdramReady_ret
05bac     2D 00 64 FD | 	ret
05bb0                 | 
05bb0                 | _bte_Source0_MemoryStartAddr
05bb0     03 4C 05 F6 | 	mov	COUNT_, #3
05bb4     A9 00 A0 FD | 	call	#pushregs_
05bb8     3A 8D 02 F6 | 	mov	local01, arg01
05bbc     3B 8F 02 F6 | 	mov	local02, arg02
05bc0     93 76 06 F6 | 	mov	arg02, #147
05bc4     47 79 02 F6 | 	mov	arg03, local02
05bc8     3C 91 02 F6 | 	mov	local03, arg03
05bcc     46 75 02 F6 | 	mov	arg01, local01
05bd0     AC FC BF FD | 	call	#_lcdRegWrite
05bd4     46 75 02 F6 | 	mov	arg01, local01
05bd8     48 77 02 F6 | 	mov	arg02, local03
05bdc     04 FD BF FD | 	call	#_lcdDataWrite
05be0     47 79 02 F6 | 	mov	arg03, local02
05be4     08 78 46 F0 | 	shr	arg03, #8
05be8     94 76 06 F6 | 	mov	arg02, #148
05bec     3C 91 02 F6 | 	mov	local03, arg03
05bf0     46 75 02 F6 | 	mov	arg01, local01
05bf4     88 FC BF FD | 	call	#_lcdRegWrite
05bf8     46 75 02 F6 | 	mov	arg01, local01
05bfc     48 77 02 F6 | 	mov	arg02, local03
05c00     E0 FC BF FD | 	call	#_lcdDataWrite
05c04     47 79 02 F6 | 	mov	arg03, local02
05c08     10 78 46 F0 | 	shr	arg03, #16
05c0c     95 76 06 F6 | 	mov	arg02, #149
05c10     3C 91 02 F6 | 	mov	local03, arg03
05c14     46 75 02 F6 | 	mov	arg01, local01
05c18     64 FC BF FD | 	call	#_lcdRegWrite
05c1c     46 75 02 F6 | 	mov	arg01, local01
05c20     48 77 02 F6 | 	mov	arg02, local03
05c24     BC FC BF FD | 	call	#_lcdDataWrite
05c28     18 8E 46 F0 | 	shr	local02, #24
05c2c     96 76 06 F6 | 	mov	arg02, #150
05c30     47 79 02 F6 | 	mov	arg03, local02
05c34     3C 91 02 F6 | 	mov	local03, arg03
05c38     46 75 02 F6 | 	mov	arg01, local01
05c3c     40 FC BF FD | 	call	#_lcdRegWrite
05c40     46 75 02 F6 | 	mov	arg01, local01
05c44     48 77 02 F6 | 	mov	arg02, local03
05c48     98 FC BF FD | 	call	#_lcdDataWrite
05c4c     A8 F0 03 F6 | 	mov	ptra, fp
05c50     B3 00 A0 FD | 	call	#popregs_
05c54                 | _bte_Source0_MemoryStartAddr_ret
05c54     2D 00 64 FD | 	ret
05c58                 | 
05c58                 | _bte_Source0_ImageWidth
05c58     03 4C 05 F6 | 	mov	COUNT_, #3
05c5c     A9 00 A0 FD | 	call	#pushregs_
05c60     3A 8D 02 F6 | 	mov	local01, arg01
05c64     3B 8F 02 F6 | 	mov	local02, arg02
05c68     97 76 06 F6 | 	mov	arg02, #151
05c6c     47 79 02 F6 | 	mov	arg03, local02
05c70     3C 91 02 F6 | 	mov	local03, arg03
05c74     46 75 02 F6 | 	mov	arg01, local01
05c78     04 FC BF FD | 	call	#_lcdRegWrite
05c7c     46 75 02 F6 | 	mov	arg01, local01
05c80     48 77 02 F6 | 	mov	arg02, local03
05c84     5C FC BF FD | 	call	#_lcdDataWrite
05c88     47 79 32 F9 | 	getword	arg03, local02, #0
05c8c     08 78 46 F0 | 	shr	arg03, #8
05c90     98 76 06 F6 | 	mov	arg02, #152
05c94     3C 91 02 F6 | 	mov	local03, arg03
05c98     46 75 02 F6 | 	mov	arg01, local01
05c9c     E0 FB BF FD | 	call	#_lcdRegWrite
05ca0     46 75 02 F6 | 	mov	arg01, local01
05ca4     48 77 02 F6 | 	mov	arg02, local03
05ca8     38 FC BF FD | 	call	#_lcdDataWrite
05cac     A8 F0 03 F6 | 	mov	ptra, fp
05cb0     B3 00 A0 FD | 	call	#popregs_
05cb4                 | _bte_Source0_ImageWidth_ret
05cb4     2D 00 64 FD | 	ret
05cb8                 | 
05cb8                 | _bte_Source0_WindowStartXY
05cb8     04 4C 05 F6 | 	mov	COUNT_, #4
05cbc     A9 00 A0 FD | 	call	#pushregs_
05cc0     3A 8D 02 F6 | 	mov	local01, arg01
05cc4     3B 8F 02 F6 | 	mov	local02, arg02
05cc8     3C 91 02 F6 | 	mov	local03, arg03
05ccc     99 76 06 F6 | 	mov	arg02, #153
05cd0     47 79 02 F6 | 	mov	arg03, local02
05cd4     3C 93 02 F6 | 	mov	local04, arg03
05cd8     46 75 02 F6 | 	mov	arg01, local01
05cdc     A0 FB BF FD | 	call	#_lcdRegWrite
05ce0     46 75 02 F6 | 	mov	arg01, local01
05ce4     49 77 02 F6 | 	mov	arg02, local04
05ce8     F8 FB BF FD | 	call	#_lcdDataWrite
05cec     47 79 32 F9 | 	getword	arg03, local02, #0
05cf0     08 78 46 F0 | 	shr	arg03, #8
05cf4     9A 76 06 F6 | 	mov	arg02, #154
05cf8     3C 93 02 F6 | 	mov	local04, arg03
05cfc     46 75 02 F6 | 	mov	arg01, local01
05d00     7C FB BF FD | 	call	#_lcdRegWrite
05d04     46 75 02 F6 | 	mov	arg01, local01
05d08     49 77 02 F6 | 	mov	arg02, local04
05d0c     D4 FB BF FD | 	call	#_lcdDataWrite
05d10     9B 76 06 F6 | 	mov	arg02, #155
05d14     48 79 02 F6 | 	mov	arg03, local03
05d18     3C 93 02 F6 | 	mov	local04, arg03
05d1c     46 75 02 F6 | 	mov	arg01, local01
05d20     5C FB BF FD | 	call	#_lcdRegWrite
05d24     46 75 02 F6 | 	mov	arg01, local01
05d28     49 77 02 F6 | 	mov	arg02, local04
05d2c     B4 FB BF FD | 	call	#_lcdDataWrite
05d30     48 79 32 F9 | 	getword	arg03, local03, #0
05d34     08 78 46 F0 | 	shr	arg03, #8
05d38     9C 76 06 F6 | 	mov	arg02, #156
05d3c     3C 93 02 F6 | 	mov	local04, arg03
05d40     46 75 02 F6 | 	mov	arg01, local01
05d44     38 FB BF FD | 	call	#_lcdRegWrite
05d48     46 75 02 F6 | 	mov	arg01, local01
05d4c     49 77 02 F6 | 	mov	arg02, local04
05d50     90 FB BF FD | 	call	#_lcdDataWrite
05d54     A8 F0 03 F6 | 	mov	ptra, fp
05d58     B3 00 A0 FD | 	call	#popregs_
05d5c                 | _bte_Source0_WindowStartXY_ret
05d5c     2D 00 64 FD | 	ret
05d60                 | 
05d60                 | _bte_DestinationMemoryStartAddr
05d60     03 4C 05 F6 | 	mov	COUNT_, #3
05d64     A9 00 A0 FD | 	call	#pushregs_
05d68     3A 8D 02 F6 | 	mov	local01, arg01
05d6c     3B 8F 02 F6 | 	mov	local02, arg02
05d70     A7 76 06 F6 | 	mov	arg02, #167
05d74     47 79 02 F6 | 	mov	arg03, local02
05d78     3C 91 02 F6 | 	mov	local03, arg03
05d7c     46 75 02 F6 | 	mov	arg01, local01
05d80     FC FA BF FD | 	call	#_lcdRegWrite
05d84     46 75 02 F6 | 	mov	arg01, local01
05d88     48 77 02 F6 | 	mov	arg02, local03
05d8c     54 FB BF FD | 	call	#_lcdDataWrite
05d90     47 79 02 F6 | 	mov	arg03, local02
05d94     08 78 46 F0 | 	shr	arg03, #8
05d98     A8 76 06 F6 | 	mov	arg02, #168
05d9c     3C 91 02 F6 | 	mov	local03, arg03
05da0     46 75 02 F6 | 	mov	arg01, local01
05da4     D8 FA BF FD | 	call	#_lcdRegWrite
05da8     46 75 02 F6 | 	mov	arg01, local01
05dac     48 77 02 F6 | 	mov	arg02, local03
05db0     30 FB BF FD | 	call	#_lcdDataWrite
05db4     47 79 02 F6 | 	mov	arg03, local02
05db8     10 78 46 F0 | 	shr	arg03, #16
05dbc     A9 76 06 F6 | 	mov	arg02, #169
05dc0     3C 91 02 F6 | 	mov	local03, arg03
05dc4     46 75 02 F6 | 	mov	arg01, local01
05dc8     B4 FA BF FD | 	call	#_lcdRegWrite
05dcc     46 75 02 F6 | 	mov	arg01, local01
05dd0     48 77 02 F6 | 	mov	arg02, local03
05dd4     0C FB BF FD | 	call	#_lcdDataWrite
05dd8     18 8E 46 F0 | 	shr	local02, #24
05ddc     AA 76 06 F6 | 	mov	arg02, #170
05de0     47 79 02 F6 | 	mov	arg03, local02
05de4     3C 91 02 F6 | 	mov	local03, arg03
05de8     46 75 02 F6 | 	mov	arg01, local01
05dec     90 FA BF FD | 	call	#_lcdRegWrite
05df0     46 75 02 F6 | 	mov	arg01, local01
05df4     48 77 02 F6 | 	mov	arg02, local03
05df8     E8 FA BF FD | 	call	#_lcdDataWrite
05dfc     A8 F0 03 F6 | 	mov	ptra, fp
05e00     B3 00 A0 FD | 	call	#popregs_
05e04                 | _bte_DestinationMemoryStartAddr_ret
05e04     2D 00 64 FD | 	ret
05e08                 | 
05e08                 | _bte_DestinationImageWidth
05e08     03 4C 05 F6 | 	mov	COUNT_, #3
05e0c     A9 00 A0 FD | 	call	#pushregs_
05e10     3A 8D 02 F6 | 	mov	local01, arg01
05e14     3B 8F 02 F6 | 	mov	local02, arg02
05e18     AB 76 06 F6 | 	mov	arg02, #171
05e1c     47 79 02 F6 | 	mov	arg03, local02
05e20     3C 91 02 F6 | 	mov	local03, arg03
05e24     46 75 02 F6 | 	mov	arg01, local01
05e28     54 FA BF FD | 	call	#_lcdRegWrite
05e2c     46 75 02 F6 | 	mov	arg01, local01
05e30     48 77 02 F6 | 	mov	arg02, local03
05e34     AC FA BF FD | 	call	#_lcdDataWrite
05e38     47 79 32 F9 | 	getword	arg03, local02, #0
05e3c     08 78 46 F0 | 	shr	arg03, #8
05e40     AC 76 06 F6 | 	mov	arg02, #172
05e44     3C 91 02 F6 | 	mov	local03, arg03
05e48     46 75 02 F6 | 	mov	arg01, local01
05e4c     30 FA BF FD | 	call	#_lcdRegWrite
05e50     46 75 02 F6 | 	mov	arg01, local01
05e54     48 77 02 F6 | 	mov	arg02, local03
05e58     88 FA BF FD | 	call	#_lcdDataWrite
05e5c     A8 F0 03 F6 | 	mov	ptra, fp
05e60     B3 00 A0 FD | 	call	#popregs_
05e64                 | _bte_DestinationImageWidth_ret
05e64     2D 00 64 FD | 	ret
05e68                 | 
05e68                 | _bte_DestinationWindowStartXY
05e68     04 4C 05 F6 | 	mov	COUNT_, #4
05e6c     A9 00 A0 FD | 	call	#pushregs_
05e70     3A 8D 02 F6 | 	mov	local01, arg01
05e74     3B 8F 02 F6 | 	mov	local02, arg02
05e78     3C 91 02 F6 | 	mov	local03, arg03
05e7c     AD 76 06 F6 | 	mov	arg02, #173
05e80     47 79 02 F6 | 	mov	arg03, local02
05e84     3C 93 02 F6 | 	mov	local04, arg03
05e88     46 75 02 F6 | 	mov	arg01, local01
05e8c     F0 F9 BF FD | 	call	#_lcdRegWrite
05e90     46 75 02 F6 | 	mov	arg01, local01
05e94     49 77 02 F6 | 	mov	arg02, local04
05e98     48 FA BF FD | 	call	#_lcdDataWrite
05e9c     47 79 32 F9 | 	getword	arg03, local02, #0
05ea0     08 78 46 F0 | 	shr	arg03, #8
05ea4     AE 76 06 F6 | 	mov	arg02, #174
05ea8     3C 93 02 F6 | 	mov	local04, arg03
05eac     46 75 02 F6 | 	mov	arg01, local01
05eb0     CC F9 BF FD | 	call	#_lcdRegWrite
05eb4     46 75 02 F6 | 	mov	arg01, local01
05eb8     49 77 02 F6 | 	mov	arg02, local04
05ebc     24 FA BF FD | 	call	#_lcdDataWrite
05ec0     AF 76 06 F6 | 	mov	arg02, #175
05ec4     48 79 02 F6 | 	mov	arg03, local03
05ec8     3C 93 02 F6 | 	mov	local04, arg03
05ecc     46 75 02 F6 | 	mov	arg01, local01
05ed0     AC F9 BF FD | 	call	#_lcdRegWrite
05ed4     46 75 02 F6 | 	mov	arg01, local01
05ed8     49 77 02 F6 | 	mov	arg02, local04
05edc     04 FA BF FD | 	call	#_lcdDataWrite
05ee0     48 79 32 F9 | 	getword	arg03, local03, #0
05ee4     08 78 46 F0 | 	shr	arg03, #8
05ee8     B0 76 06 F6 | 	mov	arg02, #176
05eec     3C 93 02 F6 | 	mov	local04, arg03
05ef0     46 75 02 F6 | 	mov	arg01, local01
05ef4     88 F9 BF FD | 	call	#_lcdRegWrite
05ef8     46 75 02 F6 | 	mov	arg01, local01
05efc     49 77 02 F6 | 	mov	arg02, local04
05f00     E0 F9 BF FD | 	call	#_lcdDataWrite
05f04     A8 F0 03 F6 | 	mov	ptra, fp
05f08     B3 00 A0 FD | 	call	#popregs_
05f0c                 | _bte_DestinationWindowStartXY_ret
05f0c     2D 00 64 FD | 	ret
05f10                 | 
05f10                 | _bte_WindowSize
05f10     04 4C 05 F6 | 	mov	COUNT_, #4
05f14     A9 00 A0 FD | 	call	#pushregs_
05f18     3A 8D 02 F6 | 	mov	local01, arg01
05f1c     3B 8F 02 F6 | 	mov	local02, arg02
05f20     3C 91 02 F6 | 	mov	local03, arg03
05f24     B1 76 06 F6 | 	mov	arg02, #177
05f28     47 79 02 F6 | 	mov	arg03, local02
05f2c     3C 93 02 F6 | 	mov	local04, arg03
05f30     46 75 02 F6 | 	mov	arg01, local01
05f34     48 F9 BF FD | 	call	#_lcdRegWrite
05f38     46 75 02 F6 | 	mov	arg01, local01
05f3c     49 77 02 F6 | 	mov	arg02, local04
05f40     A0 F9 BF FD | 	call	#_lcdDataWrite
05f44     47 79 32 F9 | 	getword	arg03, local02, #0
05f48     08 78 46 F0 | 	shr	arg03, #8
05f4c     B2 76 06 F6 | 	mov	arg02, #178
05f50     3C 93 02 F6 | 	mov	local04, arg03
05f54     46 75 02 F6 | 	mov	arg01, local01
05f58     24 F9 BF FD | 	call	#_lcdRegWrite
05f5c     46 75 02 F6 | 	mov	arg01, local01
05f60     49 77 02 F6 | 	mov	arg02, local04
05f64     7C F9 BF FD | 	call	#_lcdDataWrite
05f68     B3 76 06 F6 | 	mov	arg02, #179
05f6c     48 79 02 F6 | 	mov	arg03, local03
05f70     3C 93 02 F6 | 	mov	local04, arg03
05f74     46 75 02 F6 | 	mov	arg01, local01
05f78     04 F9 BF FD | 	call	#_lcdRegWrite
05f7c     46 75 02 F6 | 	mov	arg01, local01
05f80     49 77 02 F6 | 	mov	arg02, local04
05f84     5C F9 BF FD | 	call	#_lcdDataWrite
05f88     48 79 32 F9 | 	getword	arg03, local03, #0
05f8c     08 78 46 F0 | 	shr	arg03, #8
05f90     B4 76 06 F6 | 	mov	arg02, #180
05f94     3C 93 02 F6 | 	mov	local04, arg03
05f98     46 75 02 F6 | 	mov	arg01, local01
05f9c     E0 F8 BF FD | 	call	#_lcdRegWrite
05fa0     46 75 02 F6 | 	mov	arg01, local01
05fa4     49 77 02 F6 | 	mov	arg02, local04
05fa8     38 F9 BF FD | 	call	#_lcdDataWrite
05fac     A8 F0 03 F6 | 	mov	ptra, fp
05fb0     B3 00 A0 FD | 	call	#popregs_
05fb4                 | _bte_WindowSize_ret
05fb4     2D 00 64 FD | 	ret
05fb8                 | 
05fb8                 | _strcpy
05fb8     3A 3B 02 F6 | 	mov	_var01, arg01
05fbc     00 76 0E F2 | 	cmp	arg02, #0 wz
05fc0     3A 35 02 A6 |  if_e	mov	result1, arg01
05fc4     20 00 90 AD |  if_e	jmp	#_strcpy_ret
05fc8     48 A0 9F FE | 	loc	pa,	#(@LR__0206-@LR__0205)
05fcc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05fd0                 | '         do {
05fd0                 | LR__0205
05fd0     3B 35 CA FA | 	rdbyte	result1, arg02 wz
05fd4     1D 35 42 FC | 	wrbyte	result1, _var01
05fd8     01 76 06 F1 | 	add	arg02, #1
05fdc     01 3A 06 F1 | 	add	_var01, #1
05fe0     EC FF 9F 5D |  if_ne	jmp	#LR__0205
05fe4                 | LR__0206
05fe4                 | ' 	return(dst);
05fe4     3A 35 02 F6 | 	mov	result1, arg01
05fe8                 | _strcpy_ret
05fe8     2D 00 64 FD | 	ret
05fec                 | 
05fec                 | _strncpy
05fec     3A 3B 02 F6 | 	mov	_var01, arg01
05ff0     30 A0 9F FE | 	loc	pa,	#(@LR__0208-@LR__0207)
05ff4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05ff8                 | ' 
05ff8                 | ' 	dscan = dst;
05ff8                 | ' 	sscan = src;
05ff8                 | ' 	count = n;
05ff8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
05ff8                 | LR__0207
05ff8     01 78 86 F1 | 	sub	arg03, #1
05ffc     00 78 56 F2 | 	cmps	arg03, #0 wc
06000     18 00 90 CD |  if_b	jmp	#LR__0209
06004     3B 35 C2 FA | 	rdbyte	result1, arg02
06008     1D 35 42 FC | 	wrbyte	result1, _var01
0600c     01 76 06 F1 | 	add	arg02, #1
06010     1D 35 CA FA | 	rdbyte	result1, _var01 wz
06014                 | ' 		continue;
06014     01 3A 06 F1 | 	add	_var01, #1
06018     DC FF 9F 5D |  if_ne	jmp	#LR__0207
0601c                 | LR__0208
0601c                 | LR__0209
0601c     F8 9F 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
06020     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06024                 | ' 	while (--count >= 0)
06024                 | LR__0210
06024     01 78 86 F1 | 	sub	arg03, #1
06028     00 78 56 F2 | 	cmps	arg03, #0 wc
0602c     1D 3D 02 36 |  if_ae	mov	_var02, _var01
06030     01 3A 06 31 |  if_ae	add	_var01, #1
06034     1E 01 48 3C |  if_ae	wrbyte	#0, _var02
06038     E8 FF 9F 3D |  if_ae	jmp	#LR__0210
0603c                 | LR__0211
0603c                 | ' 		*dscan++ = '\0';
0603c                 | ' 	return(dst);
0603c     3A 35 02 F6 | 	mov	result1, arg01
06040                 | _strncpy_ret
06040     2D 00 64 FD | 	ret
06044                 | 
06044                 | _strcat
06044     00 76 4E F2 | 	cmps	arg02, #0 wz
06048     30 00 90 AD |  if_e	jmp	#LR__0215
0604c                 | ' 	{
0604c                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
0604c     3A 3B 02 F6 | 	mov	_var01, arg01
06050     D0 9F 9F FE | 	loc	pa,	#(@LR__0214-@LR__0212)
06054     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06058                 | LR__0212
06058     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
0605c                 | ' 		continue;
0605c     01 3A 06 51 |  if_ne	add	_var01, #1
06060     F4 FF 9F 5D |  if_ne	jmp	#LR__0212
06064                 | ' 	    while ((*dscan++ = *sscan++) != '\0')
06064                 | LR__0213
06064     3B 3D C2 FA | 	rdbyte	_var02, arg02
06068     1D 3D 42 FC | 	wrbyte	_var02, _var01
0606c     01 76 06 F1 | 	add	arg02, #1
06070     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
06074                 | ' 			continue;
06074     01 3A 06 F1 | 	add	_var01, #1
06078     E8 FF 9F 5D |  if_ne	jmp	#LR__0213
0607c                 | LR__0214
0607c                 | LR__0215
0607c                 | ' 	}
0607c                 | ' 	return(dst);
0607c     3A 35 02 F6 | 	mov	result1, arg01
06080                 | _strcat_ret
06080     2D 00 64 FD | 	ret
06084                 | 
06084                 | _strncat
06084     3A 3B 02 F6 | 	mov	_var01, arg01
06088     3B 3D 02 F6 | 	mov	_var02, arg02
0608c     3C 3F 02 F6 | 	mov	_var03, arg03
06090     1E 41 0A F6 | 	mov	_var04, _var02 wz
06094     6C 00 90 AD |  if_e	jmp	#LR__0220
06098     01 3E 16 F2 | 	cmp	_var03, #1 wc
0609c     64 00 90 CD |  if_b	jmp	#LR__0220
060a0                 | ' 	{
060a0                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
060a0     1D 43 02 F6 | 	mov	_var05, _var01
060a4     A8 9F 9F FE | 	loc	pa,	#(@LR__0218-@LR__0216)
060a8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
060ac                 | LR__0216
060ac     21 45 CA FA | 	rdbyte	_var06, _var05 wz
060b0                 | ' 		continue;
060b0     01 42 06 51 |  if_ne	add	_var05, #1
060b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0216
060b8     1F 47 02 F6 | 	mov	_var07, _var03
060bc                 | ' 	    count = n;
060bc                 | ' 	    while ((c = *sscan++) != '\0' && --count >= 0)
060bc                 | LR__0217
060bc     20 49 02 F6 | 	mov	_var08, _var04
060c0     20 4B 02 F6 | 	mov	_var09, _var04
060c4     01 4A 06 F1 | 	add	_var09, #1
060c8     25 41 02 F6 | 	mov	_var04, _var09
060cc     24 4D C2 FA | 	rdbyte	_var10, _var08
060d0     26 45 02 F6 | 	mov	_var06, _var10
060d4     07 44 4E F7 | 	zerox	_var06, #7 wz
060d8     20 00 90 AD |  if_e	jmp	#LR__0219
060dc     23 4F 02 F6 | 	mov	_var11, _var07
060e0     01 4E 86 F1 | 	sub	_var11, #1
060e4     27 47 02 F6 | 	mov	_var07, _var11
060e8     00 46 56 F2 | 	cmps	_var07, #0 wc
060ec     21 45 02 36 |  if_ae	mov	_var06, _var05
060f0     01 42 06 31 |  if_ae	add	_var05, #1
060f4     22 4D 42 3C |  if_ae	wrbyte	_var10, _var06
060f8     C0 FF 9F 3D |  if_ae	jmp	#LR__0217
060fc                 | LR__0218
060fc                 | LR__0219
060fc     00 44 06 F6 | 	mov	_var06, #0
06100     21 01 48 FC | 	wrbyte	#0, _var05
06104                 | LR__0220
06104                 | ' 		*dscan++ = c;
06104                 | ' 	    *dscan = '\0';
06104                 | ' 	}
06104                 | ' 	return(dst);
06104     1D 35 02 F6 | 	mov	result1, _var01
06108                 | _strncat_ret
06108     2D 00 64 FD | 	ret
0610c                 | 
0610c                 | _strcmp
0610c     3A 3B 0A F6 | 	mov	_var01, arg01 wz
06110     14 00 90 5D |  if_ne	jmp	#LR__0221
06114                 | '             return scan2 ? -1 : 0;
06114     00 76 0E F2 | 	cmp	arg02, #0 wz
06118     01 3C 66 56 |  if_ne	neg	_var02, #1
0611c     00 3C 06 A6 |  if_e	mov	_var02, #0
06120     1E 35 02 F6 | 	mov	result1, _var02
06124     64 00 90 FD | 	jmp	#_strcmp_ret
06128                 | LR__0221
06128     00 76 0E F2 | 	cmp	arg02, #0 wz
0612c     01 34 06 A6 |  if_e	mov	result1, #1
06130     58 00 90 AD |  if_e	jmp	#_strcmp_ret
06134     F0 9E 9F FE | 	loc	pa,	#(@LR__0223-@LR__0222)
06138     8C 00 A0 FD | 	call	#FCACHE_LOAD_
0613c                 | ' 
0613c                 | ' 	do {
0613c                 | LR__0222
0613c     1D 3F CA FA | 	rdbyte	_var03, _var01 wz
06140     3B 41 02 F6 | 	mov	_var04, arg02
06144     3B 43 02 F6 | 	mov	_var05, arg02
06148     01 42 06 F1 | 	add	_var05, #1
0614c     21 77 02 F6 | 	mov	arg02, _var05
06150     20 3D C2 FA | 	rdbyte	_var02, _var04
06154     01 3A 06 F1 | 	add	_var01, #1
06158     08 00 90 AD |  if_e	jmp	#LR__0224
0615c     1E 3F 0A F2 | 	cmp	_var03, _var02 wz
06160     D8 FF 9F AD |  if_e	jmp	#LR__0222
06164                 | LR__0223
06164                 | LR__0224
06164     1E 3F 0A F2 | 	cmp	_var03, _var02 wz
06168                 | ' 		return(0);
06168     00 34 06 A6 |  if_e	mov	result1, #0
0616c     1C 00 90 AD |  if_e	jmp	#_strcmp_ret
06170     00 3E 0E F2 | 	cmp	_var03, #0 wz
06174                 | ' 		return(-1);
06174     01 34 66 A6 |  if_e	neg	result1, #1
06178     10 00 90 AD |  if_e	jmp	#_strcmp_ret
0617c     00 3C 0E F2 | 	cmp	_var02, #0 wz
06180                 | ' 		return(1);
06180     01 34 06 A6 |  if_e	mov	result1, #1
06184                 | ' 		return(c1 - c2);
06184     1F 35 02 56 |  if_ne	mov	result1, _var03
06188     1E 35 82 51 |  if_ne	sub	result1, _var02
0618c                 | _strcmp_ret
0618c     2D 00 64 FD | 	ret
06190                 | 
06190                 | _strncmp
06190     3A 3B 0A F6 | 	mov	_var01, arg01 wz
06194     14 00 90 5D |  if_ne	jmp	#LR__0225
06198                 | ' 		return scan2 ? -1 : 0;
06198     00 76 0E F2 | 	cmp	arg02, #0 wz
0619c     01 3C 66 56 |  if_ne	neg	_var02, #1
061a0     00 3C 06 A6 |  if_e	mov	_var02, #0
061a4     1E 35 02 F6 | 	mov	result1, _var02
061a8     88 00 90 FD | 	jmp	#_strncmp_ret
061ac                 | LR__0225
061ac     00 76 0E F2 | 	cmp	arg02, #0 wz
061b0     01 34 06 A6 |  if_e	mov	result1, #1
061b4     7C 00 90 AD |  if_e	jmp	#_strncmp_ret
061b8     3C 3F 02 F6 | 	mov	_var03, arg03
061bc     7C 9E 9F FE | 	loc	pa,	#(@LR__0227-@LR__0226)
061c0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
061c4                 | ' 	count = n;
061c4                 | ' 	do {
061c4                 | LR__0226
061c4     1D 41 C2 FA | 	rdbyte	_var04, _var01
061c8     3B 43 02 F6 | 	mov	_var05, arg02
061cc     3B 45 02 F6 | 	mov	_var06, arg02
061d0     01 44 06 F1 | 	add	_var06, #1
061d4     22 77 02 F6 | 	mov	arg02, _var06
061d8     21 47 C2 FA | 	rdbyte	_var07, _var05
061dc     1F 3D 02 F6 | 	mov	_var02, _var03
061e0     01 3C 86 F1 | 	sub	_var02, #1
061e4     1E 3F 02 F6 | 	mov	_var03, _var02
061e8     00 3E 56 F2 | 	cmps	_var03, #0 wc
061ec     01 3A 06 F1 | 	add	_var01, #1
061f0     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
061f4     08 00 90 2D |  if_nc_and_z	jmp	#LR__0228
061f8     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
061fc     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0226
06200                 | LR__0227
06200                 | LR__0228
06200     00 3E 56 F2 | 	cmps	_var03, #0 wc
06204                 | ' 		return(0);
06204     00 34 06 C6 |  if_b	mov	result1, #0
06208     28 00 90 CD |  if_b	jmp	#_strncmp_ret
0620c     23 41 0A F2 | 	cmp	_var04, _var07 wz
06210                 | ' 		return(0);
06210     00 34 06 A6 |  if_e	mov	result1, #0
06214     1C 00 90 AD |  if_e	jmp	#_strncmp_ret
06218     00 40 0E F2 | 	cmp	_var04, #0 wz
0621c                 | ' 		return(-1);
0621c     01 34 66 A6 |  if_e	neg	result1, #1
06220     10 00 90 AD |  if_e	jmp	#_strncmp_ret
06224     00 46 0E F2 | 	cmp	_var07, #0 wz
06228                 | ' 		return(1);
06228     01 34 06 A6 |  if_e	mov	result1, #1
0622c                 | ' 		return(c1 - c2);
0622c     20 35 02 56 |  if_ne	mov	result1, _var04
06230     23 35 82 51 |  if_ne	sub	result1, _var07
06234                 | _strncmp_ret
06234     2D 00 64 FD | 	ret
06238                 | 
06238                 | _strrchr
06238     00 3A 06 F6 | 	mov	_var01, #0
0623c     DC 9D 9F FE | 	loc	pa,	#(@LR__0230-@LR__0229)
06240     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06244                 | ' 
06244                 | ' 	place =  (0) ;
06244                 | ' 	while ((c = *s++) != 0)
06244                 | LR__0229
06244     3A 3D CA FA | 	rdbyte	_var02, arg01 wz
06248     01 74 06 F1 | 	add	arg01, #1
0624c     10 00 90 AD |  if_e	jmp	#LR__0231
06250     3B 3D 0A F2 | 	cmp	_var02, arg02 wz
06254     3A 3B 02 A6 |  if_e	mov	_var01, arg01
06258     01 3A 86 A1 |  if_e	sub	_var01, #1
0625c     E4 FF 9F FD | 	jmp	#LR__0229
06260                 | LR__0230
06260                 | LR__0231
06260     00 76 0E F2 | 	cmp	arg02, #0 wz
06264     01 74 86 A1 |  if_e	sub	arg01, #1
06268     3A 3B 02 A6 |  if_e	mov	_var01, arg01
0626c                 | ' 		place = (--s);
0626c                 | ' 	return (char *)place;
0626c     1D 35 02 F6 | 	mov	result1, _var01
06270                 | _strrchr_ret
06270     2D 00 64 FD | 	ret
06274                 | 
06274                 | _strlen
06274     3A 3B 0A F6 | 	mov	_var01, arg01 wz
06278     1D 3D 02 F6 | 	mov	_var02, _var01
0627c     01 3C 06 F1 | 	add	_var02, #1
06280     1E 3F 02 F6 | 	mov	_var03, _var02
06284     00 34 06 A6 |  if_e	mov	result1, #0
06288     1C 00 90 AD |  if_e	jmp	#_strlen_ret
0628c     7C 9D 9F FE | 	loc	pa,	#(@LR__0233-@LR__0232)
06290     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06294                 | ' 	while (*scan++ != '\0')
06294                 | LR__0232
06294     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
06298                 | ' 		continue;
06298     01 3A 06 F1 | 	add	_var01, #1
0629c     F4 FF 9F 5D |  if_ne	jmp	#LR__0232
062a0                 | LR__0233
062a0                 | ' 	return (size_t)((long)scan - (long)start);
062a0     1F 3B 82 F1 | 	sub	_var01, _var03
062a4     1D 35 02 F6 | 	mov	result1, _var01
062a8                 | _strlen_ret
062a8     2D 00 64 FD | 	ret
062ac                 | 
062ac                 | _json_create
062ac     01 4C 05 F6 | 	mov	COUNT_, #1
062b0     A9 00 A0 FD | 	call	#pushregs_
062b4     24 F0 07 F1 | 	add	ptra, #36
062b8     3A 8D 02 F6 | 	mov	local01, arg01
062bc     10 50 05 F1 | 	add	fp, #16
062c0     A8 76 62 FC | 	wrlong	arg02, fp
062c4     04 50 05 F1 | 	add	fp, #4
062c8     A8 78 62 FC | 	wrlong	arg03, fp
062cc     14 50 85 F1 | 	sub	fp, #20
062d0     C9 74 02 F6 | 	mov	arg01, objptr
062d4     0A 77 02 F6 | 	mov	arg02, ptr__poolInit_
062d8     5C F9 B1 FD | 	call	#__system___make_methodptr
062dc     1C 50 05 F1 | 	add	fp, #28
062e0     A8 34 62 FC | 	wrlong	result1, fp
062e4     1C 50 85 F1 | 	sub	fp, #28
062e8     C9 74 02 F6 | 	mov	arg01, objptr
062ec     09 77 02 F6 | 	mov	arg02, ptr__poolAlloc_
062f0     44 F9 B1 FD | 	call	#__system___make_methodptr
062f4     20 50 05 F1 | 	add	fp, #32
062f8     A8 34 62 FC | 	wrlong	result1, fp
062fc                 | ' {
062fc                 | '     jsonStaticPool_t spool;
062fc                 | '     spool.mem = mem;
062fc                 | '     spool.qty = qty;
062fc                 | '     spool.pool.init = poolInit;
062fc                 | '     spool.pool.alloc = poolAlloc;
062fc                 | '     return json_createWithPool(str, &spool.pool);
062fc     04 50 85 F1 | 	sub	fp, #4
06300     A8 76 02 F6 | 	mov	arg02, fp
06304     1C 50 85 F1 | 	sub	fp, #28
06308     46 75 02 F6 | 	mov	arg01, local01
0630c     70 00 B0 FD | 	call	#_json_createWithPool
06310     A8 F0 03 F6 | 	mov	ptra, fp
06314     B3 00 A0 FD | 	call	#popregs_
06318                 | _json_create_ret
06318     2D 00 64 FD | 	ret
0631c                 | 
0631c                 | _json_getProperty
0631c     02 4C 05 F6 | 	mov	COUNT_, #2
06320     A9 00 A0 FD | 	call	#pushregs_
06324     3A 8D 02 F6 | 	mov	local01, arg01
06328     3B 8F 02 F6 | 	mov	local02, arg02
0632c                 | '     for (sibling = obj->u.c.child; sibling; sibling = sibling->sibling)
0632c     08 8C 06 F1 | 	add	local01, #8
06330     46 8D 0A FB | 	rdlong	local01, local01 wz
06334     38 00 90 AD |  if_e	jmp	#LR__0236
06338                 | LR__0234
06338     04 8C 06 F1 | 	add	local01, #4
0633c     46 35 0A FB | 	rdlong	result1, local01 wz
06340     04 8C 86 F1 | 	sub	local01, #4
06344     20 00 90 AD |  if_e	jmp	#LR__0235
06348     04 8C 06 F1 | 	add	local01, #4
0634c     46 75 02 FB | 	rdlong	arg01, local01
06350     04 8C 86 F1 | 	sub	local01, #4
06354     47 77 02 F6 | 	mov	arg02, local02
06358     B0 FD BF FD | 	call	#_strcmp
0635c     00 34 0E F2 | 	cmp	result1, #0 wz
06360                 | '             return sibling;
06360     46 35 02 A6 |  if_e	mov	result1, local01
06364     0C 00 90 AD |  if_e	jmp	#LR__0237
06368                 | LR__0235
06368     46 8D 0A FB | 	rdlong	local01, local01 wz
0636c     C8 FF 9F 5D |  if_ne	jmp	#LR__0234
06370                 | LR__0236
06370                 | '     return 0;
06370     00 34 06 F6 | 	mov	result1, #0
06374                 | LR__0237
06374     A8 F0 03 F6 | 	mov	ptra, fp
06378     B3 00 A0 FD | 	call	#popregs_
0637c                 | _json_getProperty_ret
0637c     2D 00 64 FD | 	ret
06380                 | 
06380                 | _json_createWithPool
06380     06 4C 05 F6 | 	mov	COUNT_, #6
06384     A9 00 A0 FD | 	call	#pushregs_
06388     3B 8D 02 F6 | 	mov	local01, arg02
0638c                 | ' {
0638c                 | '     return goWhile(str, " \n\r\t\f");
0638c     57 01 00 FF 
06390     C6 77 06 F6 | 	mov	arg02, ##@LR__2294
06394     D0 31 B1 FD | 	call	#_goWhile
06398     1A 8F 0A F6 | 	mov	local02, result1 wz
0639c     18 00 90 AD |  if_e	jmp	#LR__0238
063a0     47 75 C2 FA | 	rdbyte	arg01, local02
063a4     7B 74 0E F2 | 	cmp	arg01, #123 wz
063a8     20 00 90 AD |  if_e	jmp	#LR__0239
063ac     47 75 C2 FA | 	rdbyte	arg01, local02
063b0     5B 74 0E F2 | 	cmp	arg01, #91 wz
063b4     14 00 90 AD |  if_e	jmp	#LR__0239
063b8                 | LR__0238
063b8     4C 01 00 FF 
063bc     2F 75 06 F6 | 	mov	arg01, ##@LR__1855
063c0     94 BA BF FD | 	call	#_printf
063c4                 | '     {
063c4                 | '         printf("Error: json_createWithPool: invalid json string(missing opening {/[.\n");
063c4                 | '         return 0;
063c4     00 34 06 F6 | 	mov	result1, #0
063c8     74 00 90 FD | 	jmp	#LR__0241
063cc                 | LR__0239
063cc     46 75 02 FB | 	rdlong	arg01, local01
063d0     3A 91 02 FB | 	rdlong	local03, arg01
063d4     04 74 06 F1 | 	add	arg01, #4
063d8     3A 93 02 FB | 	rdlong	local04, arg01
063dc     46 75 02 F6 | 	mov	arg01, local01
063e0     C9 94 02 F6 | 	mov	local05, objptr
063e4     48 93 01 F6 | 	mov	objptr, local03
063e8     2D 92 62 FD | 	call	local04
063ec     4A 93 01 F6 | 	mov	objptr, local05
063f0     1A 97 02 F6 | 	mov	local06, result1
063f4     04 96 06 F1 | 	add	local06, #4
063f8     4B 01 68 FC | 	wrlong	#0, local06
063fc     04 96 86 F1 | 	sub	local06, #4
06400     4B 01 68 FC | 	wrlong	#0, local06
06404     08 96 06 F1 | 	add	local06, #8
06408     4B 01 68 FC | 	wrlong	#0, local06
0640c     08 96 86 F1 | 	sub	local06, #8
06410     46 79 02 F6 | 	mov	arg03, local01
06414     47 75 02 F6 | 	mov	arg01, local02
06418     4B 77 02 F6 | 	mov	arg02, local06
0641c     38 38 B1 FD | 	call	#_objValue
06420     00 34 0E F2 | 	cmp	result1, #0 wz
06424     14 00 90 5D |  if_ne	jmp	#LR__0240
06428     4C 01 00 FF 
0642c     75 75 06 F6 | 	mov	arg01, ##@LR__1856
06430     24 BA BF FD | 	call	#_printf
06434                 | '     {
06434                 | '         printf("Error: json_createWithPool: invalid json string.\n");
06434                 | '         return 0;
06434     00 34 06 F6 | 	mov	result1, #0
06438     04 00 90 FD | 	jmp	#LR__0241
0643c                 | LR__0240
0643c                 | '     }
0643c                 | '     return obj;
0643c     4B 35 02 F6 | 	mov	result1, local06
06440                 | LR__0241
06440     A8 F0 03 F6 | 	mov	ptra, fp
06444     B3 00 A0 FD | 	call	#popregs_
06448                 | _json_createWithPool_ret
06448     2D 00 64 FD | 	ret
0644c                 | 
0644c                 | _motion_quartet_init
0644c     01 4C 05 F6 | 	mov	COUNT_, #1
06450     A9 00 A0 FD | 	call	#pushregs_
06454     3A 8D 02 F6 | 	mov	local01, arg01
06458     4C 01 00 FF 
0645c     A7 77 06 F6 | 	mov	arg02, ##@LR__1857
06460     46 75 02 F6 | 	mov	arg01, local01
06464     80 F7 B1 FD | 	call	#__system____builtin_strcpy
06468     34 8C 06 F1 | 	add	local01, #52
0646c     46 01 68 FC | 	wrlong	#0, local01
06470     34 8C 86 F1 | 	sub	local01, #52
06474     00 76 06 F6 | 	mov	arg02, #0
06478     AC 9B 9F FE | 	loc	pa,	#(@LR__0243-@LR__0242)
0647c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06480                 | ' {
06480                 | '     __builtin_strcpy(quartet->name, "") ;
06480                 | '     quartet->function = 0;
06480                 | '     for (int i = 0; i <  10 ; i++)
06480                 | LR__0242
06480     0A 76 56 F2 | 	cmps	arg02, #10 wc
06484     20 00 90 3D |  if_ae	jmp	#LR__0244
06488     3B 75 02 F6 | 	mov	arg01, arg02
0648c     02 74 66 F0 | 	shl	arg01, #2
06490     38 8C 06 F1 | 	add	local01, #56
06494     46 75 02 F1 | 	add	arg01, local01
06498     3A 01 68 FC | 	wrlong	#0, arg01
0649c     01 76 06 F1 | 	add	arg02, #1
064a0     38 8C 86 F1 | 	sub	local01, #56
064a4     D8 FF 9F FD | 	jmp	#LR__0242
064a8                 | LR__0243
064a8                 | LR__0244
064a8     60 8C 06 F1 | 	add	local01, #96
064ac     46 01 68 FC | 	wrlong	#0, local01
064b0     A8 F0 03 F6 | 	mov	ptra, fp
064b4     B3 00 A0 FD | 	call	#popregs_
064b8                 | _motion_quartet_init_ret
064b8     2D 00 64 FD | 	ret
064bc                 | 
064bc                 | _motion_set_init
064bc     02 4C 05 F6 | 	mov	COUNT_, #2
064c0     A9 00 A0 FD | 	call	#pushregs_
064c4     3A 8D 02 F6 | 	mov	local01, arg01
064c8     4C 01 00 FF 
064cc     A9 77 06 F6 | 	mov	arg02, ##@LR__1858
064d0     46 75 02 F6 | 	mov	arg01, local01
064d4     10 F7 B1 FD | 	call	#__system____builtin_strcpy
064d8     34 8C 06 F1 | 	add	local01, #52
064dc     46 01 68 FC | 	wrlong	#0, local01
064e0     04 8C 06 F1 | 	add	local01, #4
064e4     46 75 02 F6 | 	mov	arg01, local01
064e8     4C 01 00 FF 
064ec     AB 77 06 F6 | 	mov	arg02, ##@LR__1859
064f0     F4 F6 B1 FD | 	call	#__system____builtin_strcpy
064f4     0C 8C 06 F1 | 	add	local01, #12
064f8     46 01 68 FC | 	wrlong	#0, local01
064fc     04 8C 06 F1 | 	add	local01, #4
06500     46 01 68 FC | 	wrlong	#0, local01
06504     48 8C 86 F1 | 	sub	local01, #72
06508     00 8E 06 F6 | 	mov	local02, #0
0650c                 | ' {
0650c                 | '     __builtin_strcpy(set->name, "") ;
0650c                 | '     set->number = 0;
0650c                 | '     __builtin_strcpy(set->type, "") ;
0650c                 | '     set->executions = 0;
0650c                 | '     set->quartetCount = 0;
0650c                 | '     for (int i = 0; i <  10 ; i++)
0650c                 | LR__0245
0650c     0A 8E 56 F2 | 	cmps	local02, #10 wc
06510     20 00 90 3D |  if_ae	jmp	#LR__0246
06514     64 8E 06 FD | 	qmul	local02, #100
06518     4C 8C 06 F1 | 	add	local01, #76
0651c     18 74 62 FD | 	getqx	arg01
06520     46 75 02 F1 | 	add	arg01, local01
06524     24 FF BF FD | 	call	#_motion_quartet_init
06528     01 8E 06 F1 | 	add	local02, #1
0652c     4C 8C 86 F1 | 	sub	local01, #76
06530     D8 FF 9F FD | 	jmp	#LR__0245
06534                 | LR__0246
06534     A8 F0 03 F6 | 	mov	ptra, fp
06538     B3 00 A0 FD | 	call	#popregs_
0653c                 | _motion_set_init_ret
0653c     2D 00 64 FD | 	ret
06540                 | 
06540                 | _motion_profile_init
06540     02 4C 05 F6 | 	mov	COUNT_, #2
06544     A9 00 A0 FD | 	call	#pushregs_
06548     3A 8D 02 F6 | 	mov	local01, arg01
0654c     4C 01 00 FF 
06550     AD 77 06 F6 | 	mov	arg02, ##@LR__1860
06554     46 75 02 F6 | 	mov	arg01, local01
06558     8C F6 B1 FD | 	call	#__system____builtin_strcpy
0655c     34 8C 06 F1 | 	add	local01, #52
06560     46 01 68 FC | 	wrlong	#0, local01
06564     04 8C 06 F1 | 	add	local01, #4
06568     46 01 68 FC | 	wrlong	#0, local01
0656c     38 8C 86 F1 | 	sub	local01, #56
06570     00 8E 06 F6 | 	mov	local02, #0
06574                 | ' {
06574                 | '     __builtin_strcpy(profile->name, "") ;
06574                 | '     profile->number = 0;
06574                 | '     profile->setCount = 0;
06574                 | '     for (int i = 0; i <  15 ; i++)
06574                 | LR__0247
06574     0F 8E 56 F2 | 	cmps	local02, #15 wc
06578     24 00 90 3D |  if_ae	jmp	#LR__0248
0657c     02 00 00 FF 
06580     34 8E 06 FD | 	qmul	local02, ##1076
06584     3C 8C 06 F1 | 	add	local01, #60
06588     18 74 62 FD | 	getqx	arg01
0658c     46 75 02 F1 | 	add	arg01, local01
06590     28 FF BF FD | 	call	#_motion_set_init
06594     01 8E 06 F1 | 	add	local02, #1
06598     3C 8C 86 F1 | 	sub	local01, #60
0659c     D4 FF 9F FD | 	jmp	#LR__0247
065a0                 | LR__0248
065a0     A8 F0 03 F6 | 	mov	ptra, fp
065a4     B3 00 A0 FD | 	call	#popregs_
065a8                 | _motion_profile_init_ret
065a8     2D 00 64 FD | 	ret
065ac                 | 
065ac                 | _machine_profile_to_json
065ac     03 4C 05 F6 | 	mov	COUNT_, #3
065b0     A9 00 A0 FD | 	call	#pushregs_
065b4     3A 8D 02 F6 | 	mov	local01, arg01
065b8     3B 8F 02 F6 | 	mov	local02, arg02
065bc     4C 01 00 FF 
065c0     AF 77 06 F6 | 	mov	arg02, ##@LR__1861
065c4     47 75 02 F6 | 	mov	arg01, local02
065c8     98 B9 BF FD | 	call	#_fopen
065cc     1A 91 0A F6 | 	mov	local03, result1 wz
065d0     58 00 90 5D |  if_ne	jmp	#LR__0249
065d4     00 74 06 F6 | 	mov	arg01, #0
065d8     F4 2E B2 FD | 	call	#__system___getiolock_1306
065dc     1A 75 02 F6 | 	mov	arg01, result1
065e0     8C F6 B1 FD | 	call	#__system___lockmem
065e4     4C 01 00 FF 
065e8     B1 77 06 F6 | 	mov	arg02, ##@LR__1862
065ec     00 74 06 F6 | 	mov	arg01, #0
065f0     00 78 06 F6 | 	mov	arg03, #0
065f4     20 FC B1 FD | 	call	#__system___basic_print_string
065f8     00 74 06 F6 | 	mov	arg01, #0
065fc     47 77 02 F6 | 	mov	arg02, local02
06600     00 78 06 F6 | 	mov	arg03, #0
06604     10 FC B1 FD | 	call	#__system___basic_print_string
06608     00 74 06 F6 | 	mov	arg01, #0
0660c     0A 76 06 F6 | 	mov	arg02, #10
06610     00 78 06 F6 | 	mov	arg03, #0
06614     B4 FB B1 FD | 	call	#__system___basic_print_char
06618     00 74 06 F6 | 	mov	arg01, #0
0661c     B0 2E B2 FD | 	call	#__system___getiolock_1306
06620     1A 01 68 FC | 	wrlong	#0, result1
06624                 | '         return JSON_FILE_ERROR;
06624     C9 34 06 F6 | 	mov	result1, #201
06628     F8 00 90 FD | 	jmp	#LR__0250
0662c                 | LR__0249
0662c     4C 01 00 FF 
06630     C5 77 06 F6 | 	mov	arg02, ##@LR__1863
06634     48 75 02 F6 | 	mov	arg01, local03
06638     A0 B8 BF FD | 	call	#_fprintf
0663c     4C 01 00 FF 
06640     C7 77 06 F6 | 	mov	arg02, ##@LR__1864
06644     48 75 02 F6 | 	mov	arg01, local03
06648     46 79 02 F6 | 	mov	arg03, local01
0664c     08 DB B0 FD | 	call	#_string_to_json_0663
06650     00 74 06 F6 | 	mov	arg01, #0
06654     78 2E B2 FD | 	call	#__system___getiolock_1306
06658     1A 75 02 F6 | 	mov	arg01, result1
0665c     10 F6 B1 FD | 	call	#__system___lockmem
06660     4C 01 00 FF 
06664     CC 77 06 F6 | 	mov	arg02, ##@LR__1865
06668     00 74 06 F6 | 	mov	arg01, #0
0666c     00 78 06 F6 | 	mov	arg03, #0
06670     A4 FB B1 FD | 	call	#__system___basic_print_string
06674     00 74 06 F6 | 	mov	arg01, #0
06678     46 77 02 F6 | 	mov	arg02, local01
0667c     00 78 06 F6 | 	mov	arg03, #0
06680     94 FB B1 FD | 	call	#__system___basic_print_string
06684     00 74 06 F6 | 	mov	arg01, #0
06688     0A 76 06 F6 | 	mov	arg02, #10
0668c     00 78 06 F6 | 	mov	arg03, #0
06690     38 FB B1 FD | 	call	#__system___basic_print_char
06694     00 74 06 F6 | 	mov	arg01, #0
06698     34 2E B2 FD | 	call	#__system___getiolock_1306
0669c     1A 01 68 FC | 	wrlong	#0, result1
066a0     4C 01 00 FF 
066a4     DB 77 06 F6 | 	mov	arg02, ##@LR__1866
066a8     48 75 02 F6 | 	mov	arg01, local03
066ac     2C B8 BF FD | 	call	#_fprintf
066b0     4C 01 00 FF 
066b4     DD 77 06 F6 | 	mov	arg02, ##@LR__1867
066b8     14 8C 06 F1 | 	add	local01, #20
066bc     46 79 02 FB | 	rdlong	arg03, local01
066c0     48 75 02 F6 | 	mov	arg01, local03
066c4     54 DA B0 FD | 	call	#_int_to_json_0662
066c8     4C 01 00 FF 
066cc     E4 77 06 F6 | 	mov	arg02, ##@LR__1868
066d0     48 75 02 F6 | 	mov	arg01, local03
066d4     04 B8 BF FD | 	call	#_fprintf
066d8     04 8C 06 F1 | 	add	local01, #4
066dc     46 77 02 F6 | 	mov	arg02, local01
066e0     48 75 02 F6 | 	mov	arg01, local03
066e4     98 DF B0 FD | 	call	#_machine_configuration_to_json_0681
066e8     4C 01 00 FF 
066ec     E6 77 06 F6 | 	mov	arg02, ##@LR__1869
066f0     48 75 02 F6 | 	mov	arg01, local03
066f4     E4 B7 BF FD | 	call	#_fprintf
066f8     64 8C 06 F1 | 	add	local01, #100
066fc     48 75 02 F6 | 	mov	arg01, local03
06700     46 77 02 F6 | 	mov	arg02, local01
06704     A8 E1 B0 FD | 	call	#_machine_performance_to_json_0682
06708     4C 01 00 FF 
0670c     E8 77 06 F6 | 	mov	arg02, ##@LR__1870
06710     48 75 02 F6 | 	mov	arg01, local03
06714     C4 B7 BF FD | 	call	#_fprintf
06718     48 75 02 F6 | 	mov	arg01, local03
0671c                 | ' {
0671c                 | '     return _closeraw(f);
0671c     4C AA BF FD | 	call	#__closeraw
06720                 | '     fprintf(file, ",");
06720                 | ' 
06720                 | '     int_to_json(file, "Number", settings->number);
06720                 | '     fprintf(file, ",");
06720                 | ' 
06720                 | '     machine_configuration_to_json(file, &(settings->configuration));
06720                 | '     fprintf(file, ",");
06720                 | ' 
06720                 | '     machine_performance_to_json(file, &(settings->performance));
06720                 | '     fprintf(file, "}");
06720                 | '     fclose(file);
06720                 | '     return SUCCESS;
06720     00 34 06 F6 | 	mov	result1, #0
06724                 | LR__0250
06724     A8 F0 03 F6 | 	mov	ptra, fp
06728     B3 00 A0 FD | 	call	#popregs_
0672c                 | _machine_profile_to_json_ret
0672c     2D 00 64 FD | 	ret
06730                 | 
06730                 | _test_profile_to_json
06730     03 4C 05 F6 | 	mov	COUNT_, #3
06734     A9 00 A0 FD | 	call	#pushregs_
06738     3A 8D 02 F6 | 	mov	local01, arg01
0673c     3B 8F 02 F6 | 	mov	local02, arg02
06740     4C 01 00 FF 
06744     EA 77 06 F6 | 	mov	arg02, ##@LR__1871
06748     47 75 02 F6 | 	mov	arg01, local02
0674c     14 B8 BF FD | 	call	#_fopen
06750     1A 91 0A F6 | 	mov	local03, result1 wz
06754     58 00 90 5D |  if_ne	jmp	#LR__0251
06758     00 74 06 F6 | 	mov	arg01, #0
0675c     70 2D B2 FD | 	call	#__system___getiolock_1306
06760     1A 75 02 F6 | 	mov	arg01, result1
06764     08 F5 B1 FD | 	call	#__system___lockmem
06768     4C 01 00 FF 
0676c     EC 77 06 F6 | 	mov	arg02, ##@LR__1872
06770     00 74 06 F6 | 	mov	arg01, #0
06774     00 78 06 F6 | 	mov	arg03, #0
06778     9C FA B1 FD | 	call	#__system___basic_print_string
0677c     00 74 06 F6 | 	mov	arg01, #0
06780     47 77 02 F6 | 	mov	arg02, local02
06784     00 78 06 F6 | 	mov	arg03, #0
06788     8C FA B1 FD | 	call	#__system___basic_print_string
0678c     00 74 06 F6 | 	mov	arg01, #0
06790     0A 76 06 F6 | 	mov	arg02, #10
06794     00 78 06 F6 | 	mov	arg03, #0
06798     30 FA B1 FD | 	call	#__system___basic_print_char
0679c     00 74 06 F6 | 	mov	arg01, #0
067a0     2C 2D B2 FD | 	call	#__system___getiolock_1306
067a4     1A 01 68 FC | 	wrlong	#0, result1
067a8                 | '         return JSON_FILE_ERROR;
067a8     C9 34 06 F6 | 	mov	result1, #201
067ac     FC 00 90 FD | 	jmp	#LR__0252
067b0                 | LR__0251
067b0     4D 01 00 FF 
067b4     01 76 06 F6 | 	mov	arg02, ##@LR__1873
067b8     48 75 02 F6 | 	mov	arg01, local03
067bc     1C B7 BF FD | 	call	#_fprintf
067c0     4D 01 00 FF 
067c4     03 76 06 F6 | 	mov	arg02, ##@LR__1874
067c8     46 79 02 FB | 	rdlong	arg03, local01
067cc     48 75 02 F6 | 	mov	arg01, local03
067d0     84 D9 B0 FD | 	call	#_string_to_json_0663
067d4     4D 01 00 FF 
067d8     08 76 06 F6 | 	mov	arg02, ##@LR__1875
067dc     04 8C 06 F1 | 	add	local01, #4
067e0     46 79 02 FB | 	rdlong	arg03, local01
067e4     48 75 02 F6 | 	mov	arg01, local03
067e8     30 D9 B0 FD | 	call	#_int_to_json_0662
067ec     4D 01 00 FF 
067f0     1D 76 06 F6 | 	mov	arg02, ##@LR__1876
067f4     48 75 02 F6 | 	mov	arg01, local03
067f8     E0 B6 BF FD | 	call	#_fprintf
067fc     4D 01 00 FF 
06800     1F 76 06 F6 | 	mov	arg02, ##@LR__1877
06804     04 8C 06 F1 | 	add	local01, #4
06808     46 79 02 FB | 	rdlong	arg03, local01
0680c     48 75 02 F6 | 	mov	arg01, local03
06810     44 D9 B0 FD | 	call	#_string_to_json_0663
06814     4D 01 00 FF 
06818     34 76 06 F6 | 	mov	arg02, ##@LR__1878
0681c     48 75 02 F6 | 	mov	arg01, local03
06820     B8 B6 BF FD | 	call	#_fprintf
06824     4D 01 00 FF 
06828     36 76 06 F6 | 	mov	arg02, ##@LR__1879
0682c     04 8C 06 F1 | 	add	local01, #4
06830     46 8F 02 FB | 	rdlong	local02, local01
06834     47 79 02 FB | 	rdlong	arg03, local02
06838     48 75 02 F6 | 	mov	arg01, local03
0683c     18 D9 B0 FD | 	call	#_string_to_json_0663
06840     4D 01 00 FF 
06844     4A 76 06 F6 | 	mov	arg02, ##@LR__1880
06848     48 75 02 F6 | 	mov	arg01, local03
0684c     8C B6 BF FD | 	call	#_fprintf
06850     46 8F 02 FB | 	rdlong	local02, local01
06854     4D 01 00 FF 
06858     4C 76 06 F6 | 	mov	arg02, ##@LR__1881
0685c     47 79 02 FB | 	rdlong	arg03, local02
06860     48 75 02 F6 | 	mov	arg01, local03
06864     F0 D8 B0 FD | 	call	#_string_to_json_0663
06868     4D 01 00 FF 
0686c     60 76 06 F6 | 	mov	arg02, ##@LR__1882
06870     48 75 02 F6 | 	mov	arg01, local03
06874     64 B6 BF FD | 	call	#_fprintf
06878     4D 01 00 FF 
0687c     62 76 06 F6 | 	mov	arg02, ##@LR__1883
06880     08 8C 06 F1 | 	add	local01, #8
06884     46 79 02 FB | 	rdlong	arg03, local01
06888     48 75 02 F6 | 	mov	arg01, local03
0688c     C8 D8 B0 FD | 	call	#_string_to_json_0663
06890     4D 01 00 FF 
06894     6A 76 06 F6 | 	mov	arg02, ##@LR__1884
06898     48 75 02 F6 | 	mov	arg01, local03
0689c     3C B6 BF FD | 	call	#_fprintf
068a0     48 75 02 F6 | 	mov	arg01, local03
068a4                 | ' {
068a4                 | '     return _closeraw(f);
068a4     C4 A8 BF FD | 	call	#__closeraw
068a8                 | '     }
068a8                 | ' 
068a8                 | '     fprintf(file, "{");
068a8                 | '     string_to_json(file, "Name", test->name);
068a8                 | ' 
068a8                 | '     int_to_json(file, "Sample Serial Number", test->sampleSN);
068a8                 | '     fprintf(file, ",");
068a8                 | ' 
068a8                 | '     string_to_json(file, "Machine Profile Name", test->machineProfile->name);
068a8                 | '     fprintf(file, ",");
068a8                 | ' 
068a8                 | '     string_to_json(file, "Sample Profile Name", test->sampleProfile->name);
068a8                 | '     fprintf(file, ",");
068a8                 | ' 
068a8                 | '     string_to_json(file, "Motion Profile Name", test->sampleProfile->name);
068a8                 | '     fprintf(file, ",");
068a8                 | ' 
068a8                 | '     string_to_json(file, "Comment", test->comment);
068a8                 | '     fprintf(file, "}");
068a8                 | '     fclose(file);
068a8                 | '     return SUCCESS;
068a8     00 34 06 F6 | 	mov	result1, #0
068ac                 | LR__0252
068ac     A8 F0 03 F6 | 	mov	ptra, fp
068b0     B3 00 A0 FD | 	call	#popregs_
068b4                 | _test_profile_to_json_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | _motion_profile_to_json
068b8     04 4C 05 F6 | 	mov	COUNT_, #4
068bc     A9 00 A0 FD | 	call	#pushregs_
068c0     3A 8D 02 F6 | 	mov	local01, arg01
068c4     3B 8F 02 F6 | 	mov	local02, arg02
068c8     4D 01 00 FF 
068cc     6C 76 06 F6 | 	mov	arg02, ##@LR__1885
068d0     47 75 02 F6 | 	mov	arg01, local02
068d4     8C B6 BF FD | 	call	#_fopen
068d8     1A 91 0A F6 | 	mov	local03, result1 wz
068dc     58 00 90 5D |  if_ne	jmp	#LR__0253
068e0     00 74 06 F6 | 	mov	arg01, #0
068e4     E8 2B B2 FD | 	call	#__system___getiolock_1306
068e8     1A 75 02 F6 | 	mov	arg01, result1
068ec     80 F3 B1 FD | 	call	#__system___lockmem
068f0     4D 01 00 FF 
068f4     6E 76 06 F6 | 	mov	arg02, ##@LR__1886
068f8     00 74 06 F6 | 	mov	arg01, #0
068fc     00 78 06 F6 | 	mov	arg03, #0
06900     14 F9 B1 FD | 	call	#__system___basic_print_string
06904     00 74 06 F6 | 	mov	arg01, #0
06908     47 77 02 F6 | 	mov	arg02, local02
0690c     00 78 06 F6 | 	mov	arg03, #0
06910     04 F9 B1 FD | 	call	#__system___basic_print_string
06914     00 74 06 F6 | 	mov	arg01, #0
06918     0A 76 06 F6 | 	mov	arg02, #10
0691c     00 78 06 F6 | 	mov	arg03, #0
06920     A8 F8 B1 FD | 	call	#__system___basic_print_char
06924     00 74 06 F6 | 	mov	arg01, #0
06928     A4 2B B2 FD | 	call	#__system___getiolock_1306
0692c     1A 01 68 FC | 	wrlong	#0, result1
06930                 | '         return JSON_FILE_ERROR;
06930     C9 34 06 F6 | 	mov	result1, #201
06934     5C 01 90 FD | 	jmp	#LR__0256
06938                 | LR__0253
06938     4D 01 00 FF 
0693c     83 76 06 F6 | 	mov	arg02, ##@LR__1887
06940     48 75 02 F6 | 	mov	arg01, local03
06944     94 B5 BF FD | 	call	#_fprintf
06948     4D 01 00 FF 
0694c     85 76 06 F6 | 	mov	arg02, ##@LR__1888
06950     48 75 02 F6 | 	mov	arg01, local03
06954     46 79 02 F6 | 	mov	arg03, local01
06958     FC D7 B0 FD | 	call	#_string_to_json_0663
0695c     4D 01 00 FF 
06960     8A 76 06 F6 | 	mov	arg02, ##@LR__1889
06964     48 75 02 F6 | 	mov	arg01, local03
06968     70 B5 BF FD | 	call	#_fprintf
0696c     4D 01 00 FF 
06970     8C 76 06 F6 | 	mov	arg02, ##@LR__1890
06974     34 8C 06 F1 | 	add	local01, #52
06978     46 79 02 FB | 	rdlong	arg03, local01
0697c     34 8C 86 F1 | 	sub	local01, #52
06980     48 75 02 F6 | 	mov	arg01, local03
06984     94 D7 B0 FD | 	call	#_int_to_json_0662
06988     4D 01 00 FF 
0698c     93 76 06 F6 | 	mov	arg02, ##@LR__1891
06990     48 75 02 F6 | 	mov	arg01, local03
06994     44 B5 BF FD | 	call	#_fprintf
06998     48 75 02 F6 | 	mov	arg01, local03
0699c     4D 01 00 FF 
069a0     95 76 06 F6 | 	mov	arg02, ##@LR__1892
069a4     34 B5 BF FD | 	call	#_fprintf
069a8     00 92 06 F6 | 	mov	local04, #0
069ac                 | '     }
069ac                 | ' 
069ac                 | '     fprintf(file, "{");
069ac                 | ' 
069ac                 | '     string_to_json(file, "Name", motion->name);
069ac                 | '     fprintf(file, ",");
069ac                 | ' 
069ac                 | '     int_to_json(file, "Number", motion->number);
069ac                 | '     fprintf(file, ",");
069ac                 | ' 
069ac                 | '     fprintf(file, "\"Motion Sets\":[");
069ac                 | '     for (int i = 0; i < motion->setCount; i++)
069ac                 | LR__0254
069ac     38 8C 06 F1 | 	add	local01, #56
069b0     46 75 02 FB | 	rdlong	arg01, local01
069b4     38 8C 86 F1 | 	sub	local01, #56
069b8     3A 93 52 F2 | 	cmps	local04, arg01 wc
069bc     B8 00 90 3D |  if_ae	jmp	#LR__0255
069c0     00 74 06 F6 | 	mov	arg01, #0
069c4     08 2B B2 FD | 	call	#__system___getiolock_1306
069c8     1A 75 02 F6 | 	mov	arg01, result1
069cc     A0 F2 B1 FD | 	call	#__system___lockmem
069d0     4D 01 00 FF 
069d4     A5 76 06 F6 | 	mov	arg02, ##@LR__1893
069d8     00 74 06 F6 | 	mov	arg01, #0
069dc     00 78 06 F6 | 	mov	arg03, #0
069e0     34 F8 B1 FD | 	call	#__system___basic_print_string
069e4     02 00 00 FF 
069e8     34 92 06 FD | 	qmul	local04, ##1076
069ec     3C 8C 06 F1 | 	add	local01, #60
069f0     00 74 06 F6 | 	mov	arg01, #0
069f4     00 78 06 F6 | 	mov	arg03, #0
069f8     18 76 62 FD | 	getqx	arg02
069fc     46 77 02 F1 | 	add	arg02, local01
06a00     14 F8 B1 FD | 	call	#__system___basic_print_string
06a04     00 74 06 F6 | 	mov	arg01, #0
06a08     0A 76 06 F6 | 	mov	arg02, #10
06a0c     00 78 06 F6 | 	mov	arg03, #0
06a10     B8 F7 B1 FD | 	call	#__system___basic_print_char
06a14     00 74 06 F6 | 	mov	arg01, #0
06a18     B4 2A B2 FD | 	call	#__system___getiolock_1306
06a1c     02 00 00 FF 
06a20     34 92 06 FD | 	qmul	local04, ##1076
06a24     1A 01 68 FC | 	wrlong	#0, result1
06a28     4D 01 00 FF 
06a2c     BA 76 06 F6 | 	mov	arg02, ##@LR__1894
06a30     48 75 02 F6 | 	mov	arg01, local03
06a34     18 8E 62 FD | 	getqx	local02
06a38     46 8F 02 F1 | 	add	local02, local01
06a3c     F8 79 02 F6 | 	mov	arg03, ptra
06a40     61 8F 66 FC | 	wrlong	local02, ptra++
06a44     94 B4 BF FD | 	call	#_fprintf
06a48     04 F0 87 F1 | 	sub	ptra, #4
06a4c     04 8C 86 F1 | 	sub	local01, #4
06a50     46 8F 02 FB | 	rdlong	local02, local01
06a54     38 8C 86 F1 | 	sub	local01, #56
06a58     01 8E 86 F1 | 	sub	local02, #1
06a5c     47 93 52 F2 | 	cmps	local04, local02 wc
06a60     4D 01 00 CF 
06a64     BF 76 06 C6 |  if_b	mov	arg02, ##@LR__1895
06a68     48 75 02 C6 |  if_b	mov	arg01, local03
06a6c     6C B4 BF CD |  if_b	call	#_fprintf
06a70     01 92 06 F1 | 	add	local04, #1
06a74     34 FF 9F FD | 	jmp	#LR__0254
06a78                 | LR__0255
06a78     4D 01 00 FF 
06a7c     C1 76 06 F6 | 	mov	arg02, ##@LR__1896
06a80     48 75 02 F6 | 	mov	arg01, local03
06a84     54 B4 BF FD | 	call	#_fprintf
06a88     48 75 02 F6 | 	mov	arg01, local03
06a8c                 | ' {
06a8c                 | '     return _closeraw(f);
06a8c     DC A6 BF FD | 	call	#__closeraw
06a90                 | '         {
06a90                 | '             fprintf(file, ",");
06a90                 | '         }
06a90                 | '     }
06a90                 | '     fprintf(file, "]}");
06a90                 | '     fclose(file);
06a90                 | '     return SUCCESS;
06a90     00 34 06 F6 | 	mov	result1, #0
06a94                 | LR__0256
06a94     A8 F0 03 F6 | 	mov	ptra, fp
06a98     B3 00 A0 FD | 	call	#popregs_
06a9c                 | _motion_profile_to_json_ret
06a9c     2D 00 64 FD | 	ret
06aa0                 | 
06aa0                 | _motion_set_to_json
06aa0     04 4C 05 F6 | 	mov	COUNT_, #4
06aa4     A9 00 A0 FD | 	call	#pushregs_
06aa8     3A 8D 02 F6 | 	mov	local01, arg01
06aac     3B 8F 02 F6 | 	mov	local02, arg02
06ab0     4D 01 00 FF 
06ab4     C4 76 06 F6 | 	mov	arg02, ##@LR__1897
06ab8     47 75 02 F6 | 	mov	arg01, local02
06abc     A4 B4 BF FD | 	call	#_fopen
06ac0     1A 91 0A F6 | 	mov	local03, result1 wz
06ac4     58 00 90 5D |  if_ne	jmp	#LR__0257
06ac8     00 74 06 F6 | 	mov	arg01, #0
06acc     00 2A B2 FD | 	call	#__system___getiolock_1306
06ad0     1A 75 02 F6 | 	mov	arg01, result1
06ad4     98 F1 B1 FD | 	call	#__system___lockmem
06ad8     4D 01 00 FF 
06adc     C6 76 06 F6 | 	mov	arg02, ##@LR__1898
06ae0     00 74 06 F6 | 	mov	arg01, #0
06ae4     00 78 06 F6 | 	mov	arg03, #0
06ae8     2C F7 B1 FD | 	call	#__system___basic_print_string
06aec     00 74 06 F6 | 	mov	arg01, #0
06af0     47 77 02 F6 | 	mov	arg02, local02
06af4     00 78 06 F6 | 	mov	arg03, #0
06af8     1C F7 B1 FD | 	call	#__system___basic_print_string
06afc     00 74 06 F6 | 	mov	arg01, #0
06b00     0A 76 06 F6 | 	mov	arg02, #10
06b04     00 78 06 F6 | 	mov	arg03, #0
06b08     C0 F6 B1 FD | 	call	#__system___basic_print_char
06b0c     00 74 06 F6 | 	mov	arg01, #0
06b10     BC 29 B2 FD | 	call	#__system___getiolock_1306
06b14     1A 01 68 FC | 	wrlong	#0, result1
06b18                 | '         return JSON_FILE_ERROR;
06b18     C9 34 06 F6 | 	mov	result1, #201
06b1c     4C 01 90 FD | 	jmp	#LR__0260
06b20                 | LR__0257
06b20     4D 01 00 FF 
06b24     DB 76 06 F6 | 	mov	arg02, ##@LR__1899
06b28     48 75 02 F6 | 	mov	arg01, local03
06b2c     AC B3 BF FD | 	call	#_fprintf
06b30     4D 01 00 FF 
06b34     DD 76 06 F6 | 	mov	arg02, ##@LR__1900
06b38     48 75 02 F6 | 	mov	arg01, local03
06b3c     46 79 02 F6 | 	mov	arg03, local01
06b40     14 D6 B0 FD | 	call	#_string_to_json_0663
06b44     4D 01 00 FF 
06b48     E2 76 06 F6 | 	mov	arg02, ##@LR__1901
06b4c     48 75 02 F6 | 	mov	arg01, local03
06b50     88 B3 BF FD | 	call	#_fprintf
06b54     4D 01 00 FF 
06b58     E4 76 06 F6 | 	mov	arg02, ##@LR__1902
06b5c     34 8C 06 F1 | 	add	local01, #52
06b60     46 79 02 FB | 	rdlong	arg03, local01
06b64     48 75 02 F6 | 	mov	arg01, local03
06b68     B0 D5 B0 FD | 	call	#_int_to_json_0662
06b6c     4D 01 00 FF 
06b70     EB 76 06 F6 | 	mov	arg02, ##@LR__1903
06b74     48 75 02 F6 | 	mov	arg01, local03
06b78     60 B3 BF FD | 	call	#_fprintf
06b7c     4D 01 00 FF 
06b80     ED 76 06 F6 | 	mov	arg02, ##@LR__1904
06b84     04 8C 06 F1 | 	add	local01, #4
06b88     46 79 02 F6 | 	mov	arg03, local01
06b8c     48 75 02 F6 | 	mov	arg01, local03
06b90     C4 D5 B0 FD | 	call	#_string_to_json_0663
06b94     4D 01 00 FF 
06b98     F2 76 06 F6 | 	mov	arg02, ##@LR__1905
06b9c     48 75 02 F6 | 	mov	arg01, local03
06ba0     38 B3 BF FD | 	call	#_fprintf
06ba4     4D 01 00 FF 
06ba8     F4 76 06 F6 | 	mov	arg02, ##@LR__1906
06bac     0C 8C 06 F1 | 	add	local01, #12
06bb0     46 79 02 FB | 	rdlong	arg03, local01
06bb4     44 8C 86 F1 | 	sub	local01, #68
06bb8     48 75 02 F6 | 	mov	arg01, local03
06bbc     5C D5 B0 FD | 	call	#_int_to_json_0662
06bc0     4D 01 00 FF 
06bc4     FF 76 06 F6 | 	mov	arg02, ##@LR__1907
06bc8     48 75 02 F6 | 	mov	arg01, local03
06bcc     0C B3 BF FD | 	call	#_fprintf
06bd0     48 75 02 F6 | 	mov	arg01, local03
06bd4     4D 01 00 FF 
06bd8     01 77 06 F6 | 	mov	arg02, ##@LR__1908
06bdc     FC B2 BF FD | 	call	#_fprintf
06be0     00 92 06 F6 | 	mov	local04, #0
06be4                 | '     }
06be4                 | ' 
06be4                 | '     fprintf(file, "{");
06be4                 | ' 
06be4                 | '     string_to_json(file, "Name", set->name);
06be4                 | '     fprintf(file, ",");
06be4                 | ' 
06be4                 | '     int_to_json(file, "Number", set->number);
06be4                 | '     fprintf(file, ",");
06be4                 | ' 
06be4                 | '     string_to_json(file, "Type", set->type);
06be4                 | '     fprintf(file, ",");
06be4                 | ' 
06be4                 | '     int_to_json(file, "Executions", set->executions);
06be4                 | '     fprintf(file, ",");
06be4                 | ' 
06be4                 | ' 
06be4                 | '     fprintf(file, "\"Quartets\":[");
06be4                 | '     for (int i = 0; i < set->quartetCount; i++)
06be4                 | LR__0258
06be4     48 8C 06 F1 | 	add	local01, #72
06be8     46 77 02 FB | 	rdlong	arg02, local01
06bec     48 8C 86 F1 | 	sub	local01, #72
06bf0     3B 93 52 F2 | 	cmps	local04, arg02 wc
06bf4     58 00 90 3D |  if_ae	jmp	#LR__0259
06bf8     64 92 06 FD | 	qmul	local04, #100
06bfc     4D 01 00 FF 
06c00     0E 77 06 F6 | 	mov	arg02, ##@LR__1909
06c04     4C 8C 06 F1 | 	add	local01, #76
06c08     48 75 02 F6 | 	mov	arg01, local03
06c0c     18 8E 62 FD | 	getqx	local02
06c10     46 8F 02 F1 | 	add	local02, local01
06c14     F8 79 02 F6 | 	mov	arg03, ptra
06c18     61 8F 66 FC | 	wrlong	local02, ptra++
06c1c     BC B2 BF FD | 	call	#_fprintf
06c20     04 F0 87 F1 | 	sub	ptra, #4
06c24     04 8C 86 F1 | 	sub	local01, #4
06c28     46 8F 02 FB | 	rdlong	local02, local01
06c2c     48 8C 86 F1 | 	sub	local01, #72
06c30     01 8E 86 F1 | 	sub	local02, #1
06c34     47 93 52 F2 | 	cmps	local04, local02 wc
06c38     4D 01 00 CF 
06c3c     13 77 06 C6 |  if_b	mov	arg02, ##@LR__1910
06c40     48 75 02 C6 |  if_b	mov	arg01, local03
06c44     94 B2 BF CD |  if_b	call	#_fprintf
06c48     01 92 06 F1 | 	add	local04, #1
06c4c     94 FF 9F FD | 	jmp	#LR__0258
06c50                 | LR__0259
06c50     4D 01 00 FF 
06c54     15 77 06 F6 | 	mov	arg02, ##@LR__1911
06c58     48 75 02 F6 | 	mov	arg01, local03
06c5c     7C B2 BF FD | 	call	#_fprintf
06c60     48 75 02 F6 | 	mov	arg01, local03
06c64                 | ' {
06c64                 | '     return _closeraw(f);
06c64     04 A5 BF FD | 	call	#__closeraw
06c68                 | '         {
06c68                 | '             fprintf(file, ",");
06c68                 | '         }
06c68                 | '     }
06c68                 | '     fprintf(file, "]}");
06c68                 | '     fclose(file);
06c68                 | '     return SUCCESS;
06c68     00 34 06 F6 | 	mov	result1, #0
06c6c                 | LR__0260
06c6c     A8 F0 03 F6 | 	mov	ptra, fp
06c70     B3 00 A0 FD | 	call	#popregs_
06c74                 | _motion_set_to_json_ret
06c74     2D 00 64 FD | 	ret
06c78                 | 
06c78                 | _motion_quartet_to_json
06c78     02 4C 05 F6 | 	mov	COUNT_, #2
06c7c     A9 00 A0 FD | 	call	#pushregs_
06c80     C4 F1 07 F1 | 	add	ptra, #452
06c84     04 50 05 F1 | 	add	fp, #4
06c88     A8 74 62 FC | 	wrlong	arg01, fp
06c8c     04 50 05 F1 | 	add	fp, #4
06c90     A8 76 62 FC | 	wrlong	arg02, fp
06c94     08 50 85 F1 | 	sub	fp, #8
06c98     4D 01 00 FF 
06c9c     18 8D 06 F6 | 	mov	local01, ##@LR__1912
06ca0     3B 75 02 F6 | 	mov	arg01, arg02
06ca4     46 77 02 F6 | 	mov	arg02, local01
06ca8     B8 B2 BF FD | 	call	#_fopen
06cac     0C 50 05 F1 | 	add	fp, #12
06cb0     A8 34 62 FC | 	wrlong	result1, fp
06cb4     0C 50 85 F1 | 	sub	fp, #12
06cb8     00 34 0E F2 | 	cmp	result1, #0 wz
06cbc     60 00 90 5D |  if_ne	jmp	#LR__0261
06cc0     00 74 06 F6 | 	mov	arg01, #0
06cc4     08 28 B2 FD | 	call	#__system___getiolock_1306
06cc8     1A 75 02 F6 | 	mov	arg01, result1
06ccc     A0 EF B1 FD | 	call	#__system___lockmem
06cd0     4D 01 00 FF 
06cd4     1A 77 06 F6 | 	mov	arg02, ##@LR__1913
06cd8     00 74 06 F6 | 	mov	arg01, #0
06cdc     00 78 06 F6 | 	mov	arg03, #0
06ce0     34 F5 B1 FD | 	call	#__system___basic_print_string
06ce4     08 50 05 F1 | 	add	fp, #8
06ce8     A8 76 02 FB | 	rdlong	arg02, fp
06cec     08 50 85 F1 | 	sub	fp, #8
06cf0     00 74 06 F6 | 	mov	arg01, #0
06cf4     00 78 06 F6 | 	mov	arg03, #0
06cf8     1C F5 B1 FD | 	call	#__system___basic_print_string
06cfc     00 74 06 F6 | 	mov	arg01, #0
06d00     0A 76 06 F6 | 	mov	arg02, #10
06d04     00 78 06 F6 | 	mov	arg03, #0
06d08     C0 F4 B1 FD | 	call	#__system___basic_print_char
06d0c     00 74 06 F6 | 	mov	arg01, #0
06d10     BC 27 B2 FD | 	call	#__system___getiolock_1306
06d14     1A 01 68 FC | 	wrlong	#0, result1
06d18                 | '         return JSON_FILE_ERROR;
06d18     C9 34 06 F6 | 	mov	result1, #201
06d1c     EC 01 90 FD | 	jmp	#LR__0264
06d20                 | LR__0261
06d20     0C 50 05 F1 | 	add	fp, #12
06d24     A8 74 02 FB | 	rdlong	arg01, fp
06d28     0C 50 85 F1 | 	sub	fp, #12
06d2c     4D 01 00 FF 
06d30     2F 77 06 F6 | 	mov	arg02, ##@LR__1914
06d34     A4 B1 BF FD | 	call	#_fprintf
06d38     0C 50 05 F1 | 	add	fp, #12
06d3c     A8 74 02 FB | 	rdlong	arg01, fp
06d40     4D 01 00 FF 
06d44     31 77 06 F6 | 	mov	arg02, ##@LR__1915
06d48     08 50 85 F1 | 	sub	fp, #8
06d4c     A8 78 02 FB | 	rdlong	arg03, fp
06d50     04 50 85 F1 | 	sub	fp, #4
06d54     00 D4 B0 FD | 	call	#_string_to_json_0663
06d58     0C 50 05 F1 | 	add	fp, #12
06d5c     A8 74 02 FB | 	rdlong	arg01, fp
06d60     0C 50 85 F1 | 	sub	fp, #12
06d64     4D 01 00 FF 
06d68     36 77 06 F6 | 	mov	arg02, ##@LR__1916
06d6c     6C B1 BF FD | 	call	#_fprintf
06d70     0C 50 05 F1 | 	add	fp, #12
06d74     A8 74 02 FB | 	rdlong	arg01, fp
06d78     4D 01 00 FF 
06d7c     38 77 06 F6 | 	mov	arg02, ##@LR__1917
06d80     08 50 85 F1 | 	sub	fp, #8
06d84     A8 78 02 FB | 	rdlong	arg03, fp
06d88     04 50 85 F1 | 	sub	fp, #4
06d8c     34 78 06 F1 | 	add	arg03, #52
06d90     3C 79 02 FB | 	rdlong	arg03, arg03
06d94     84 D3 B0 FD | 	call	#_int_to_json_0662
06d98     0C 50 05 F1 | 	add	fp, #12
06d9c     A8 74 02 FB | 	rdlong	arg01, fp
06da0     0C 50 85 F1 | 	sub	fp, #12
06da4     4D 01 00 FF 
06da8     41 77 06 F6 | 	mov	arg02, ##@LR__1918
06dac     2C B1 BF FD | 	call	#_fprintf
06db0     10 50 05 F1 | 	add	fp, #16
06db4     A8 74 02 F6 | 	mov	arg01, fp
06db8     0C 50 85 F1 | 	sub	fp, #12
06dbc     A8 76 02 FB | 	rdlong	arg02, fp
06dc0     04 50 85 F1 | 	sub	fp, #4
06dc4     34 76 06 F1 | 	add	arg02, #52
06dc8     3B 77 02 FB | 	rdlong	arg02, arg02
06dcc     44 8C B0 FD | 	call	#_get_function_info
06dd0     0C 50 05 F1 | 	add	fp, #12
06dd4     A8 74 02 FB | 	rdlong	arg01, fp
06dd8     0C 50 85 F1 | 	sub	fp, #12
06ddc     4D 01 00 FF 
06de0     43 77 06 F6 | 	mov	arg02, ##@LR__1919
06de4     F4 B0 BF FD | 	call	#_fprintf
06de8     C0 51 05 F1 | 	add	fp, #448
06dec     A8 00 68 FC | 	wrlong	#0, fp
06df0     C0 51 85 F1 | 	sub	fp, #448
06df4                 | '     }
06df4                 | '     fprintf(file, "{");
06df4                 | '     string_to_json(file, "Name", quartet->name);
06df4                 | '     fprintf(file, ",");
06df4                 | ' 
06df4                 | '     int_to_json(file, "Function", quartet->function);
06df4                 | '     fprintf(file, ",");
06df4                 | ' 
06df4                 | '     FunctionInfo info;
06df4                 | '     get_function_info(&info, quartet->function);
06df4                 | '     fprintf(file, "\"Parameters\":[");
06df4                 | '     for (int i = 0; i < info.args_count; i++)
06df4                 | LR__0262
06df4     C0 51 05 F1 | 	add	fp, #448
06df8     A8 76 02 FB | 	rdlong	arg02, fp
06dfc     94 51 85 F1 | 	sub	fp, #404
06e00     A8 74 02 FB | 	rdlong	arg01, fp
06e04     2C 50 85 F1 | 	sub	fp, #44
06e08     3A 77 52 F2 | 	cmps	arg02, arg01 wc
06e0c     90 00 90 3D |  if_ae	jmp	#LR__0263
06e10     0C 50 05 F1 | 	add	fp, #12
06e14     A8 74 02 FB | 	rdlong	arg01, fp
06e18     4D 01 00 FF 
06e1c     52 77 06 F6 | 	mov	arg02, ##@LR__1920
06e20     08 50 85 F1 | 	sub	fp, #8
06e24     A8 8C 02 FB | 	rdlong	local01, fp
06e28     BC 51 05 F1 | 	add	fp, #444
06e2c     A8 78 02 FB | 	rdlong	arg03, fp
06e30     C0 51 85 F1 | 	sub	fp, #448
06e34     02 78 66 F0 | 	shl	arg03, #2
06e38     38 8C 06 F1 | 	add	local01, #56
06e3c     46 79 02 F1 | 	add	arg03, local01
06e40     3C 8D 02 FB | 	rdlong	local01, arg03
06e44     F8 79 02 F6 | 	mov	arg03, ptra
06e48     61 8D 66 FC | 	wrlong	local01, ptra++
06e4c     8C B0 BF FD | 	call	#_fprintf
06e50     04 F0 87 F1 | 	sub	ptra, #4
06e54     2C 50 05 F1 | 	add	fp, #44
06e58     A8 8C 02 FB | 	rdlong	local01, fp
06e5c     01 8C 86 F1 | 	sub	local01, #1
06e60     94 51 05 F1 | 	add	fp, #404
06e64     A8 8E 02 FB | 	rdlong	local02, fp
06e68     C0 51 85 F1 | 	sub	fp, #448
06e6c     46 8F 52 F2 | 	cmps	local02, local01 wc
06e70     0C 50 05 C1 |  if_b	add	fp, #12
06e74     A8 74 02 CB |  if_b	rdlong	arg01, fp
06e78     0C 50 85 C1 |  if_b	sub	fp, #12
06e7c     4D 01 00 CF 
06e80     55 77 06 C6 |  if_b	mov	arg02, ##@LR__1921
06e84     54 B0 BF CD |  if_b	call	#_fprintf
06e88     C0 51 05 F1 | 	add	fp, #448
06e8c     A8 8E 02 FB | 	rdlong	local02, fp
06e90     01 8E 06 F1 | 	add	local02, #1
06e94     A8 8E 62 FC | 	wrlong	local02, fp
06e98     C0 51 85 F1 | 	sub	fp, #448
06e9c     54 FF 9F FD | 	jmp	#LR__0262
06ea0                 | LR__0263
06ea0     0C 50 05 F1 | 	add	fp, #12
06ea4     A8 74 02 FB | 	rdlong	arg01, fp
06ea8     0C 50 85 F1 | 	sub	fp, #12
06eac     4D 01 00 FF 
06eb0     57 77 06 F6 | 	mov	arg02, ##@LR__1922
06eb4     24 B0 BF FD | 	call	#_fprintf
06eb8     0C 50 05 F1 | 	add	fp, #12
06ebc     A8 74 02 FB | 	rdlong	arg01, fp
06ec0     4D 01 00 FF 
06ec4     5A 77 06 F6 | 	mov	arg02, ##@LR__1923
06ec8     08 50 85 F1 | 	sub	fp, #8
06ecc     A8 8E 02 FB | 	rdlong	local02, fp
06ed0     04 50 85 F1 | 	sub	fp, #4
06ed4     60 8E 06 F1 | 	add	local02, #96
06ed8     47 79 02 FB | 	rdlong	arg03, local02
06edc     00 D2 B0 FD | 	call	#_double_to_json_0661
06ee0     0C 50 05 F1 | 	add	fp, #12
06ee4     A8 74 02 FB | 	rdlong	arg01, fp
06ee8     0C 50 85 F1 | 	sub	fp, #12
06eec     4D 01 00 FF 
06ef0     60 77 06 F6 | 	mov	arg02, ##@LR__1924
06ef4     E4 AF BF FD | 	call	#_fprintf
06ef8     0C 50 05 F1 | 	add	fp, #12
06efc     A8 74 02 FB | 	rdlong	arg01, fp
06f00     0C 50 85 F1 | 	sub	fp, #12
06f04                 | ' {
06f04                 | '     return _closeraw(f);
06f04     64 A2 BF FD | 	call	#__closeraw
06f08                 | '         {
06f08                 | '             fprintf(file, ",");
06f08                 | '         }
06f08                 | '     }
06f08                 | '     fprintf(file, "],");
06f08                 | '     double_to_json(file, "Dwell", quartet->dwell);
06f08                 | '     fprintf(file, "}");
06f08                 | '     fclose(file);
06f08                 | '     return SUCCESS;
06f08     00 34 06 F6 | 	mov	result1, #0
06f0c                 | LR__0264
06f0c     A8 F0 03 F6 | 	mov	ptra, fp
06f10     B3 00 A0 FD | 	call	#popregs_
06f14                 | _motion_quartet_to_json_ret
06f14     2D 00 64 FD | 	ret
06f18                 | 
06f18                 | _json_to_machine_profile
06f18     07 4C 05 F6 | 	mov	COUNT_, #7
06f1c     A9 00 A0 FD | 	call	#pushregs_
06f20     3A 8D 02 F6 | 	mov	local01, arg01
06f24     3B 8F 02 F6 | 	mov	local02, arg02
06f28     4D 01 00 FF 
06f2c     62 77 06 F6 | 	mov	arg02, ##@LR__1925
06f30     47 75 02 F6 | 	mov	arg01, local02
06f34     2C B0 BF FD | 	call	#_fopen
06f38     1A 91 0A F6 | 	mov	local03, result1 wz
06f3c     54 00 90 5D |  if_ne	jmp	#LR__0265
06f40     00 74 06 F6 | 	mov	arg01, #0
06f44     88 25 B2 FD | 	call	#__system___getiolock_1306
06f48     1A 75 02 F6 | 	mov	arg01, result1
06f4c     20 ED B1 FD | 	call	#__system___lockmem
06f50     4D 01 00 FF 
06f54     64 77 06 F6 | 	mov	arg02, ##@LR__1926
06f58     00 74 06 F6 | 	mov	arg01, #0
06f5c     00 78 06 F6 | 	mov	arg03, #0
06f60     B4 F2 B1 FD | 	call	#__system___basic_print_string
06f64     00 74 06 F6 | 	mov	arg01, #0
06f68     47 77 02 F6 | 	mov	arg02, local02
06f6c     00 78 06 F6 | 	mov	arg03, #0
06f70     A4 F2 B1 FD | 	call	#__system___basic_print_string
06f74     00 74 06 F6 | 	mov	arg01, #0
06f78     0A 76 06 F6 | 	mov	arg02, #10
06f7c     00 78 06 F6 | 	mov	arg03, #0
06f80     48 F2 B1 FD | 	call	#__system___basic_print_char
06f84     00 74 06 F6 | 	mov	arg01, #0
06f88     44 25 B2 FD | 	call	#__system___getiolock_1306
06f8c     1A 01 68 FC | 	wrlong	#0, result1
06f90                 | '         return;
06f90     E0 02 90 FD | 	jmp	#LR__0273
06f94                 | LR__0265
06f94     B8 00 00 FF 
06f98     CC D6 05 F1 | 	add	ptr__dat__, ##94412
06f9c     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
06fa0     B8 00 00 FF 
06fa4     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
06fa8     48 75 02 F6 | 	mov	arg01, local03
06fac     00 76 06 F6 | 	mov	arg02, #0
06fb0     02 78 06 F6 | 	mov	arg03, #2
06fb4     18 B2 BF FD | 	call	#_fseek
06fb8     48 75 02 F6 | 	mov	arg01, local03
06fbc     6C B2 BF FD | 	call	#_ftell
06fc0     1A 93 02 F6 | 	mov	local04, result1
06fc4     48 75 02 F6 | 	mov	arg01, local03
06fc8     00 76 06 F6 | 	mov	arg02, #0
06fcc     00 78 06 F6 | 	mov	arg03, #0
06fd0     FC B1 BF FD | 	call	#_fseek
06fd4     AC 00 00 FF 
06fd8     5A D7 05 F1 | 	add	ptr__dat__, ##88410
06fdc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
06fe0     AC 00 00 FF 
06fe4     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
06fe8     49 77 02 F6 | 	mov	arg02, local04
06fec     01 78 06 F6 | 	mov	arg03, #1
06ff0     48 7B 02 F6 | 	mov	arg04, local03
06ff4     54 B1 BF FD | 	call	#_fread
06ff8     48 75 02 F6 | 	mov	arg01, local03
06ffc                 | ' {
06ffc                 | '     return _closeraw(f);
06ffc     6C A1 BF FD | 	call	#__closeraw
07000     AC 00 00 FF 
07004     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07008     EB 92 02 F1 | 	add	local04, ptr__dat__
0700c     49 01 48 FC | 	wrbyte	#0, local04
07010     00 74 06 F6 | 	mov	arg01, #0
07014     AC 00 00 FF 
07018     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
0701c     B0 24 B2 FD | 	call	#__system___getiolock_1306
07020     1A 75 02 F6 | 	mov	arg01, result1
07024     48 EC B1 FD | 	call	#__system___lockmem
07028     AC 00 00 FF 
0702c     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07030     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07034     AC 00 00 FF 
07038     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
0703c     00 74 06 F6 | 	mov	arg01, #0
07040     00 78 06 F6 | 	mov	arg03, #0
07044     D0 F1 B1 FD | 	call	#__system___basic_print_string
07048     00 74 06 F6 | 	mov	arg01, #0
0704c     0A 76 06 F6 | 	mov	arg02, #10
07050     00 78 06 F6 | 	mov	arg03, #0
07054     74 F1 B1 FD | 	call	#__system___basic_print_char
07058     00 74 06 F6 | 	mov	arg01, #0
0705c     70 24 B2 FD | 	call	#__system___getiolock_1306
07060     1A 01 68 FC | 	wrlong	#0, result1
07064     44 00 90 5D |  if_ne	jmp	#LR__0266
07068     00 74 06 F6 | 	mov	arg01, #0
0706c     60 24 B2 FD | 	call	#__system___getiolock_1306
07070     1A 75 02 F6 | 	mov	arg01, result1
07074     F8 EB B1 FD | 	call	#__system___lockmem
07078     4D 01 00 FF 
0707c     78 77 06 F6 | 	mov	arg02, ##@LR__1927
07080     00 74 06 F6 | 	mov	arg01, #0
07084     00 78 06 F6 | 	mov	arg03, #0
07088     8C F1 B1 FD | 	call	#__system___basic_print_string
0708c     00 74 06 F6 | 	mov	arg01, #0
07090     0A 76 06 F6 | 	mov	arg02, #10
07094     00 78 06 F6 | 	mov	arg03, #0
07098     30 F1 B1 FD | 	call	#__system___basic_print_char
0709c     00 74 06 F6 | 	mov	arg01, #0
070a0     2C 24 B2 FD | 	call	#__system___getiolock_1306
070a4     1A 01 68 FC | 	wrlong	#0, result1
070a8                 | '         return;
070a8     C8 01 90 FD | 	jmp	#LR__0273
070ac                 | LR__0266
070ac     AC 00 00 FF 
070b0     5A D7 05 F1 | 	add	ptr__dat__, ##88410
070b4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
070b8     03 00 00 FF 
070bc     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
070c0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
070c4     C8 78 06 F6 | 	mov	arg03, #200
070c8     B0 00 00 FF 
070cc     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
070d0     D8 F1 BF FD | 	call	#_json_create
070d4     1A 95 0A F6 | 	mov	local05, result1 wz
070d8     10 00 90 AD |  if_e	jmp	#LR__0267
070dc     4A 75 02 F6 | 	mov	arg01, local05
070e0                 | ' {
070e0                 | '     return json->type;
070e0     10 74 06 F1 | 	add	arg01, #16
070e4     3A 35 0A FB | 	rdlong	result1, arg01 wz
070e8     44 00 90 AD |  if_e	jmp	#LR__0268
070ec                 | LR__0267
070ec     00 74 06 F6 | 	mov	arg01, #0
070f0     DC 23 B2 FD | 	call	#__system___getiolock_1306
070f4     1A 75 02 F6 | 	mov	arg01, result1
070f8     74 EB B1 FD | 	call	#__system___lockmem
070fc     4D 01 00 FF 
07100     90 77 06 F6 | 	mov	arg02, ##@LR__1928
07104     00 74 06 F6 | 	mov	arg01, #0
07108     00 78 06 F6 | 	mov	arg03, #0
0710c     08 F1 B1 FD | 	call	#__system___basic_print_string
07110     00 74 06 F6 | 	mov	arg01, #0
07114     0A 76 06 F6 | 	mov	arg02, #10
07118     00 78 06 F6 | 	mov	arg03, #0
0711c     AC F0 B1 FD | 	call	#__system___basic_print_char
07120     00 74 06 F6 | 	mov	arg01, #0
07124     A8 23 B2 FD | 	call	#__system___getiolock_1306
07128     1A 01 68 FC | 	wrlong	#0, result1
0712c                 | '         return;
0712c     44 01 90 FD | 	jmp	#LR__0273
07130                 | LR__0268
07130     4D 01 00 FF 
07134     B3 77 06 F6 | 	mov	arg02, ##@LR__1929
07138     4A 75 02 F6 | 	mov	arg01, local05
0713c     54 D0 B0 FD | 	call	#_json_property_to_string_0665
07140     1A 77 02 F6 | 	mov	arg02, result1
07144     46 75 02 F6 | 	mov	arg01, local01
07148     14 78 06 F6 | 	mov	arg03, #20
0714c     9C EE BF FD | 	call	#_strncpy
07150     4D 01 00 FF 
07154     B8 77 06 F6 | 	mov	arg02, ##@LR__1930
07158     4A 75 02 F6 | 	mov	arg01, local05
0715c     C4 D0 B0 FD | 	call	#_json_property_to_int_0667
07160     14 8C 06 F1 | 	add	local01, #20
07164     46 35 62 FC | 	wrlong	result1, local01
07168     14 8C 86 F1 | 	sub	local01, #20
0716c     4D 01 00 FF 
07170     BF 77 06 F6 | 	mov	arg02, ##@LR__1931
07174     4A 75 02 F6 | 	mov	arg01, local05
07178     A0 F1 BF FD | 	call	#_json_getProperty
0717c     1A 97 0A F6 | 	mov	local06, result1 wz
07180     10 00 90 AD |  if_e	jmp	#LR__0269
07184     4B 75 02 F6 | 	mov	arg01, local06
07188                 | ' {
07188                 | '     return json->type;
07188     10 74 06 F1 | 	add	arg01, #16
0718c     3A 35 0A FB | 	rdlong	result1, arg01 wz
07190     40 00 90 AD |  if_e	jmp	#LR__0270
07194                 | LR__0269
07194     00 74 06 F6 | 	mov	arg01, #0
07198     34 23 B2 FD | 	call	#__system___getiolock_1306
0719c     1A 75 02 F6 | 	mov	arg01, result1
071a0     CC EA B1 FD | 	call	#__system___lockmem
071a4     4D 01 00 FF 
071a8     CD 77 06 F6 | 	mov	arg02, ##@LR__1932
071ac     00 74 06 F6 | 	mov	arg01, #0
071b0     00 78 06 F6 | 	mov	arg03, #0
071b4     60 F0 B1 FD | 	call	#__system___basic_print_string
071b8     00 74 06 F6 | 	mov	arg01, #0
071bc     0A 76 06 F6 | 	mov	arg02, #10
071c0     00 78 06 F6 | 	mov	arg03, #0
071c4     04 F0 B1 FD | 	call	#__system___basic_print_char
071c8     00 74 06 F6 | 	mov	arg01, #0
071cc     00 23 B2 FD | 	call	#__system___getiolock_1306
071d0     1A 01 68 FC | 	wrlong	#0, result1
071d4                 | LR__0270
071d4     18 8C 06 F1 | 	add	local01, #24
071d8     46 77 02 F6 | 	mov	arg02, local01
071dc     18 8C 86 F1 | 	sub	local01, #24
071e0     4B 75 02 F6 | 	mov	arg01, local06
071e4     64 D2 B0 FD | 	call	#_json_to_machine_configuration_0679
071e8     4E 01 00 FF 
071ec     07 76 06 F6 | 	mov	arg02, ##@LR__1933
071f0     4A 75 02 F6 | 	mov	arg01, local05
071f4     24 F1 BF FD | 	call	#_json_getProperty
071f8     1A 99 0A F6 | 	mov	local07, result1 wz
071fc     10 00 90 AD |  if_e	jmp	#LR__0271
07200     4C 75 02 F6 | 	mov	arg01, local07
07204                 | ' {
07204                 | '     return json->type;
07204     10 74 06 F1 | 	add	arg01, #16
07208     3A 35 0A FB | 	rdlong	result1, arg01 wz
0720c     40 00 90 AD |  if_e	jmp	#LR__0272
07210                 | LR__0271
07210     00 74 06 F6 | 	mov	arg01, #0
07214     B8 22 B2 FD | 	call	#__system___getiolock_1306
07218     1A 75 02 F6 | 	mov	arg01, result1
0721c     50 EA B1 FD | 	call	#__system___lockmem
07220     4E 01 00 FF 
07224     13 76 06 F6 | 	mov	arg02, ##@LR__1934
07228     00 74 06 F6 | 	mov	arg01, #0
0722c     00 78 06 F6 | 	mov	arg03, #0
07230     E4 EF B1 FD | 	call	#__system___basic_print_string
07234     00 74 06 F6 | 	mov	arg01, #0
07238     0A 76 06 F6 | 	mov	arg02, #10
0723c     00 78 06 F6 | 	mov	arg03, #0
07240     88 EF B1 FD | 	call	#__system___basic_print_char
07244     00 74 06 F6 | 	mov	arg01, #0
07248     84 22 B2 FD | 	call	#__system___getiolock_1306
0724c     1A 01 68 FC | 	wrlong	#0, result1
07250                 | LR__0272
07250     7C 8C 06 F1 | 	add	local01, #124
07254     46 77 02 F6 | 	mov	arg02, local01
07258     4C 75 02 F6 | 	mov	arg01, local07
0725c     60 D3 B0 FD | 	call	#_json_to_machine_performance_0680
07260     B8 00 00 FF 
07264     CC D6 05 F1 | 	add	ptr__dat__, ##94412
07268     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
0726c     B8 00 00 FF 
07270     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
07274                 | LR__0273
07274     A8 F0 03 F6 | 	mov	ptra, fp
07278     B3 00 A0 FD | 	call	#popregs_
0727c                 | _json_to_machine_profile_ret
0727c     2D 00 64 FD | 	ret
07280                 | 
07280                 | _json_to_sample_profile
07280     03 4C 05 F6 | 	mov	COUNT_, #3
07284     A9 00 A0 FD | 	call	#pushregs_
07288     3A 8D 02 F6 | 	mov	local01, arg01
0728c     3B 8F 02 F6 | 	mov	local02, arg02
07290     4E 01 00 FF 
07294     47 76 06 F6 | 	mov	arg02, ##@LR__1935
07298     47 75 02 F6 | 	mov	arg01, local02
0729c     C4 AC BF FD | 	call	#_fopen
072a0     1A 91 0A F6 | 	mov	local03, result1 wz
072a4     54 00 90 5D |  if_ne	jmp	#LR__0274
072a8     00 74 06 F6 | 	mov	arg01, #0
072ac     20 22 B2 FD | 	call	#__system___getiolock_1306
072b0     1A 75 02 F6 | 	mov	arg01, result1
072b4     B8 E9 B1 FD | 	call	#__system___lockmem
072b8     4E 01 00 FF 
072bc     49 76 06 F6 | 	mov	arg02, ##@LR__1936
072c0     00 74 06 F6 | 	mov	arg01, #0
072c4     00 78 06 F6 | 	mov	arg03, #0
072c8     4C EF B1 FD | 	call	#__system___basic_print_string
072cc     00 74 06 F6 | 	mov	arg01, #0
072d0     47 77 02 F6 | 	mov	arg02, local02
072d4     00 78 06 F6 | 	mov	arg03, #0
072d8     3C EF B1 FD | 	call	#__system___basic_print_string
072dc     00 74 06 F6 | 	mov	arg01, #0
072e0     0A 76 06 F6 | 	mov	arg02, #10
072e4     00 78 06 F6 | 	mov	arg03, #0
072e8     E0 EE B1 FD | 	call	#__system___basic_print_char
072ec     00 74 06 F6 | 	mov	arg01, #0
072f0     DC 21 B2 FD | 	call	#__system___getiolock_1306
072f4     1A 01 68 FC | 	wrlong	#0, result1
072f8                 | '         return ;
072f8     F4 01 90 FD | 	jmp	#LR__0275
072fc                 | LR__0274
072fc     B8 00 00 FF 
07300     CC D6 05 F1 | 	add	ptr__dat__, ##94412
07304     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07308     B8 00 00 FF 
0730c     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
07310     48 75 02 F6 | 	mov	arg01, local03
07314     00 76 06 F6 | 	mov	arg02, #0
07318     02 78 06 F6 | 	mov	arg03, #2
0731c     B0 AE BF FD | 	call	#_fseek
07320     48 75 02 F6 | 	mov	arg01, local03
07324     04 AF BF FD | 	call	#_ftell
07328     1A 8F 02 F6 | 	mov	local02, result1
0732c     48 75 02 F6 | 	mov	arg01, local03
07330     00 76 06 F6 | 	mov	arg02, #0
07334     00 78 06 F6 | 	mov	arg03, #0
07338     94 AE BF FD | 	call	#_fseek
0733c     AC 00 00 FF 
07340     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07344     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07348     AC 00 00 FF 
0734c     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07350     47 77 02 F6 | 	mov	arg02, local02
07354     01 78 06 F6 | 	mov	arg03, #1
07358     48 7B 02 F6 | 	mov	arg04, local03
0735c     EC AD BF FD | 	call	#_fread
07360     48 75 02 F6 | 	mov	arg01, local03
07364                 | ' {
07364                 | '     return _closeraw(f);
07364     04 9E BF FD | 	call	#__closeraw
07368     AC 00 00 FF 
0736c     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07370     EB 8E 02 F1 | 	add	local02, ptr__dat__
07374     47 01 48 FC | 	wrbyte	#0, local02
07378     00 74 06 F6 | 	mov	arg01, #0
0737c     AC 00 00 FF 
07380     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07384     48 21 B2 FD | 	call	#__system___getiolock_1306
07388     1A 75 02 F6 | 	mov	arg01, result1
0738c     E0 E8 B1 FD | 	call	#__system___lockmem
07390     AC 00 00 FF 
07394     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07398     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0739c     AC 00 00 FF 
073a0     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
073a4     00 74 06 F6 | 	mov	arg01, #0
073a8     00 78 06 F6 | 	mov	arg03, #0
073ac     68 EE B1 FD | 	call	#__system___basic_print_string
073b0     00 74 06 F6 | 	mov	arg01, #0
073b4     0A 76 06 F6 | 	mov	arg02, #10
073b8     00 78 06 F6 | 	mov	arg03, #0
073bc     0C EE B1 FD | 	call	#__system___basic_print_char
073c0     00 74 06 F6 | 	mov	arg01, #0
073c4     08 21 B2 FD | 	call	#__system___getiolock_1306
073c8     1A 01 68 FC | 	wrlong	#0, result1
073cc     AC 00 00 FF 
073d0     5A D7 05 F1 | 	add	ptr__dat__, ##88410
073d4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
073d8     03 00 00 FF 
073dc     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
073e0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
073e4     B0 00 00 FF 
073e8     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
073ec     C8 78 06 F6 | 	mov	arg03, #200
073f0     B8 EE BF FD | 	call	#_json_create
073f4     1A 91 02 F6 | 	mov	local03, result1
073f8     46 8F 02 FB | 	rdlong	local02, local01
073fc     4E 01 00 FF 
07400     5D 76 06 F6 | 	mov	arg02, ##@LR__1937
07404     48 75 02 F6 | 	mov	arg01, local03
07408     88 CD B0 FD | 	call	#_json_property_to_string_0665
0740c     1A 77 02 F6 | 	mov	arg02, result1
07410     47 75 02 F6 | 	mov	arg01, local02
07414     32 78 06 F6 | 	mov	arg03, #50
07418     D0 EB BF FD | 	call	#_strncpy
0741c     4E 01 00 FF 
07420     62 76 06 F6 | 	mov	arg02, ##@LR__1938
07424     48 75 02 F6 | 	mov	arg01, local03
07428     F8 CD B0 FD | 	call	#_json_property_to_int_0667
0742c     04 8C 06 F1 | 	add	local01, #4
07430     46 35 62 FC | 	wrlong	result1, local01
07434     4E 01 00 FF 
07438     69 76 06 F6 | 	mov	arg02, ##@LR__1939
0743c     48 75 02 F6 | 	mov	arg01, local03
07440     8C CE B0 FD | 	call	#_json_property_to_double_0669
07444     04 8C 06 F1 | 	add	local01, #4
07448     46 35 62 FC | 	wrlong	result1, local01
0744c     4E 01 00 FF 
07450     70 76 06 F6 | 	mov	arg02, ##@LR__1940
07454     48 75 02 F6 | 	mov	arg01, local03
07458     74 CE B0 FD | 	call	#_json_property_to_double_0669
0745c     04 8C 06 F1 | 	add	local01, #4
07460     46 35 62 FC | 	wrlong	result1, local01
07464     4E 01 00 FF 
07468     7C 76 06 F6 | 	mov	arg02, ##@LR__1941
0746c     48 75 02 F6 | 	mov	arg01, local03
07470     5C CE B0 FD | 	call	#_json_property_to_double_0669
07474     04 8C 06 F1 | 	add	local01, #4
07478     46 35 62 FC | 	wrlong	result1, local01
0747c     4E 01 00 FF 
07480     89 76 06 F6 | 	mov	arg02, ##@LR__1942
07484     48 75 02 F6 | 	mov	arg01, local03
07488     44 CE B0 FD | 	call	#_json_property_to_double_0669
0748c     04 8C 06 F1 | 	add	local01, #4
07490     46 35 62 FC | 	wrlong	result1, local01
07494     4E 01 00 FF 
07498     9A 76 06 F6 | 	mov	arg02, ##@LR__1943
0749c     48 75 02 F6 | 	mov	arg01, local03
074a0     2C CE B0 FD | 	call	#_json_property_to_double_0669
074a4     04 8C 06 F1 | 	add	local01, #4
074a8     46 35 62 FC | 	wrlong	result1, local01
074ac     4E 01 00 FF 
074b0     A3 76 06 F6 | 	mov	arg02, ##@LR__1944
074b4     48 75 02 F6 | 	mov	arg01, local03
074b8     14 CE B0 FD | 	call	#_json_property_to_double_0669
074bc     04 8C 06 F1 | 	add	local01, #4
074c0     46 35 62 FC | 	wrlong	result1, local01
074c4     4E 01 00 FF 
074c8     B5 76 06 F6 | 	mov	arg02, ##@LR__1945
074cc     48 75 02 F6 | 	mov	arg01, local03
074d0     FC CD B0 FD | 	call	#_json_property_to_double_0669
074d4     04 8C 06 F1 | 	add	local01, #4
074d8     46 35 62 FC | 	wrlong	result1, local01
074dc     B8 00 00 FF 
074e0     CC D6 05 F1 | 	add	ptr__dat__, ##94412
074e4     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
074e8     B8 00 00 FF 
074ec     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
074f0                 | LR__0275
074f0     A8 F0 03 F6 | 	mov	ptra, fp
074f4     B3 00 A0 FD | 	call	#popregs_
074f8                 | _json_to_sample_profile_ret
074f8     2D 00 64 FD | 	ret
074fc                 | 
074fc                 | _json_to_test_profile
074fc     03 4C 05 F6 | 	mov	COUNT_, #3
07500     A9 00 A0 FD | 	call	#pushregs_
07504     3A 8D 02 F6 | 	mov	local01, arg01
07508     3B 8F 02 F6 | 	mov	local02, arg02
0750c     00 74 06 F6 | 	mov	arg01, #0
07510     BC 1F B2 FD | 	call	#__system___getiolock_1306
07514     1A 75 02 F6 | 	mov	arg01, result1
07518     54 E7 B1 FD | 	call	#__system___lockmem
0751c     4E 01 00 FF 
07520     CB 76 06 F6 | 	mov	arg02, ##@LR__1946
07524     00 74 06 F6 | 	mov	arg01, #0
07528     00 78 06 F6 | 	mov	arg03, #0
0752c     E8 EC B1 FD | 	call	#__system___basic_print_string
07530     00 74 06 F6 | 	mov	arg01, #0
07534     0A 76 06 F6 | 	mov	arg02, #10
07538     00 78 06 F6 | 	mov	arg03, #0
0753c     8C EC B1 FD | 	call	#__system___basic_print_char
07540     00 74 06 F6 | 	mov	arg01, #0
07544     88 1F B2 FD | 	call	#__system___getiolock_1306
07548     1A 01 68 FC | 	wrlong	#0, result1
0754c     4E 01 00 FF 
07550     D7 76 06 F6 | 	mov	arg02, ##@LR__1947
07554     46 75 02 F6 | 	mov	arg01, local01
07558     08 AA BF FD | 	call	#_fopen
0755c     1A 91 02 F6 | 	mov	local03, result1
07560     00 74 06 F6 | 	mov	arg01, #0
07564     68 1F B2 FD | 	call	#__system___getiolock_1306
07568     1A 75 02 F6 | 	mov	arg01, result1
0756c     00 E7 B1 FD | 	call	#__system___lockmem
07570     4E 01 00 FF 
07574     D9 76 06 F6 | 	mov	arg02, ##@LR__1948
07578     00 74 06 F6 | 	mov	arg01, #0
0757c     00 78 06 F6 | 	mov	arg03, #0
07580     94 EC B1 FD | 	call	#__system___basic_print_string
07584     00 74 06 F6 | 	mov	arg01, #0
07588     0A 76 06 F6 | 	mov	arg02, #10
0758c     00 78 06 F6 | 	mov	arg03, #0
07590     38 EC B1 FD | 	call	#__system___basic_print_char
07594     00 74 06 F6 | 	mov	arg01, #0
07598     34 1F B2 FD | 	call	#__system___getiolock_1306
0759c     1A 01 68 FC | 	wrlong	#0, result1
075a0     00 90 0E F2 | 	cmp	local03, #0 wz
075a4     54 00 90 5D |  if_ne	jmp	#LR__0276
075a8     00 74 06 F6 | 	mov	arg01, #0
075ac     20 1F B2 FD | 	call	#__system___getiolock_1306
075b0     1A 75 02 F6 | 	mov	arg01, result1
075b4     B8 E6 B1 FD | 	call	#__system___lockmem
075b8     4E 01 00 FF 
075bc     E4 76 06 F6 | 	mov	arg02, ##@LR__1949
075c0     00 74 06 F6 | 	mov	arg01, #0
075c4     00 78 06 F6 | 	mov	arg03, #0
075c8     4C EC B1 FD | 	call	#__system___basic_print_string
075cc     00 74 06 F6 | 	mov	arg01, #0
075d0     46 77 02 F6 | 	mov	arg02, local01
075d4     00 78 06 F6 | 	mov	arg03, #0
075d8     3C EC B1 FD | 	call	#__system___basic_print_string
075dc     00 74 06 F6 | 	mov	arg01, #0
075e0     0A 76 06 F6 | 	mov	arg02, #10
075e4     00 78 06 F6 | 	mov	arg03, #0
075e8     E0 EB B1 FD | 	call	#__system___basic_print_char
075ec     00 74 06 F6 | 	mov	arg01, #0
075f0     DC 1E B2 FD | 	call	#__system___getiolock_1306
075f4     1A 01 68 FC | 	wrlong	#0, result1
075f8                 | '         return;
075f8     EC 01 90 FD | 	jmp	#LR__0277
075fc                 | LR__0276
075fc     B8 00 00 FF 
07600     CC D6 05 F1 | 	add	ptr__dat__, ##94412
07604     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07608     B8 00 00 FF 
0760c     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
07610     48 75 02 F6 | 	mov	arg01, local03
07614     00 76 06 F6 | 	mov	arg02, #0
07618     02 78 06 F6 | 	mov	arg03, #2
0761c     B0 AB BF FD | 	call	#_fseek
07620     48 75 02 F6 | 	mov	arg01, local03
07624     04 AC BF FD | 	call	#_ftell
07628     1A 8D 02 F6 | 	mov	local01, result1
0762c     48 75 02 F6 | 	mov	arg01, local03
07630     00 76 06 F6 | 	mov	arg02, #0
07634     00 78 06 F6 | 	mov	arg03, #0
07638     94 AB BF FD | 	call	#_fseek
0763c     00 74 06 F6 | 	mov	arg01, #0
07640     8C 1E B2 FD | 	call	#__system___getiolock_1306
07644     1A 75 02 F6 | 	mov	arg01, result1
07648     24 E6 B1 FD | 	call	#__system___lockmem
0764c     4E 01 00 FF 
07650     F8 76 06 F6 | 	mov	arg02, ##@LR__1950
07654     00 74 06 F6 | 	mov	arg01, #0
07658     00 78 06 F6 | 	mov	arg03, #0
0765c     B8 EB B1 FD | 	call	#__system___basic_print_string
07660     00 74 06 F6 | 	mov	arg01, #0
07664     0A 76 06 F6 | 	mov	arg02, #10
07668     00 78 06 F6 | 	mov	arg03, #0
0766c     5C EB B1 FD | 	call	#__system___basic_print_char
07670     00 74 06 F6 | 	mov	arg01, #0
07674     58 1E B2 FD | 	call	#__system___getiolock_1306
07678     1A 01 68 FC | 	wrlong	#0, result1
0767c     AC 00 00 FF 
07680     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07684     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07688     AC 00 00 FF 
0768c     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07690     46 77 02 F6 | 	mov	arg02, local01
07694     01 78 06 F6 | 	mov	arg03, #1
07698     48 7B 02 F6 | 	mov	arg04, local03
0769c     AC AA BF FD | 	call	#_fread
076a0     48 75 02 F6 | 	mov	arg01, local03
076a4                 | ' {
076a4                 | '     return _closeraw(f);
076a4     C4 9A BF FD | 	call	#__closeraw
076a8     AC 00 00 FF 
076ac     5A D7 05 F1 | 	add	ptr__dat__, ##88410
076b0     EB 8C 02 F1 | 	add	local01, ptr__dat__
076b4     46 01 48 FC | 	wrbyte	#0, local01
076b8     00 74 06 F6 | 	mov	arg01, #0
076bc     AC 00 00 FF 
076c0     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
076c4     08 1E B2 FD | 	call	#__system___getiolock_1306
076c8     1A 75 02 F6 | 	mov	arg01, result1
076cc     A0 E5 B1 FD | 	call	#__system___lockmem
076d0     AC 00 00 FF 
076d4     5A D7 05 F1 | 	add	ptr__dat__, ##88410
076d8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
076dc     AC 00 00 FF 
076e0     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
076e4     00 74 06 F6 | 	mov	arg01, #0
076e8     00 78 06 F6 | 	mov	arg03, #0
076ec     28 EB B1 FD | 	call	#__system___basic_print_string
076f0     00 74 06 F6 | 	mov	arg01, #0
076f4     0A 76 06 F6 | 	mov	arg02, #10
076f8     00 78 06 F6 | 	mov	arg03, #0
076fc     CC EA B1 FD | 	call	#__system___basic_print_char
07700     00 74 06 F6 | 	mov	arg01, #0
07704     C8 1D B2 FD | 	call	#__system___getiolock_1306
07708     1A 01 68 FC | 	wrlong	#0, result1
0770c     AC 00 00 FF 
07710     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07714     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07718     03 00 00 FF 
0771c     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
07720     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07724     B0 00 00 FF 
07728     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
0772c     C8 78 06 F6 | 	mov	arg03, #200
07730     78 EB BF FD | 	call	#_json_create
07734     1A 91 02 F6 | 	mov	local03, result1
07738     47 8D 02 FB | 	rdlong	local01, local02
0773c     4E 01 00 FF 
07740     04 77 06 F6 | 	mov	arg02, ##@LR__1951
07744     48 75 02 F6 | 	mov	arg01, local03
07748     48 CA B0 FD | 	call	#_json_property_to_string_0665
0774c     1A 77 02 F6 | 	mov	arg02, result1
07750     46 75 02 F6 | 	mov	arg01, local01
07754     32 78 06 F6 | 	mov	arg03, #50
07758     90 E8 BF FD | 	call	#_strncpy
0775c     4E 01 00 FF 
07760     09 77 06 F6 | 	mov	arg02, ##@LR__1952
07764     48 75 02 F6 | 	mov	arg01, local03
07768     B8 CA B0 FD | 	call	#_json_property_to_int_0667
0776c     04 8E 06 F1 | 	add	local02, #4
07770     47 35 62 FC | 	wrlong	result1, local02
07774     4E 01 00 FF 
07778     1E 77 06 F6 | 	mov	arg02, ##@LR__1953
0777c     48 75 02 F6 | 	mov	arg01, local03
07780     10 CA B0 FD | 	call	#_json_property_to_string_0665
07784     1A 77 02 F6 | 	mov	arg02, result1
07788     04 8E 06 F1 | 	add	local02, #4
0778c     47 75 02 FB | 	rdlong	arg01, local02
07790     84 F7 BF FD | 	call	#_json_to_machine_profile
07794     4E 01 00 FF 
07798     33 77 06 F6 | 	mov	arg02, ##@LR__1954
0779c     48 75 02 F6 | 	mov	arg01, local03
077a0     F0 C9 B0 FD | 	call	#_json_property_to_string_0665
077a4     1A 77 02 F6 | 	mov	arg02, result1
077a8     04 8E 06 F1 | 	add	local02, #4
077ac     47 75 02 FB | 	rdlong	arg01, local02
077b0     CC FA BF FD | 	call	#_json_to_sample_profile
077b4     4E 01 00 FF 
077b8     47 77 06 F6 | 	mov	arg02, ##@LR__1955
077bc     48 75 02 F6 | 	mov	arg01, local03
077c0     D0 C9 B0 FD | 	call	#_json_property_to_string_0665
077c4     1A 75 02 F6 | 	mov	arg01, result1
077c8     04 8E 06 F1 | 	add	local02, #4
077cc     47 77 02 FB | 	rdlong	arg02, local02
077d0     20 00 B0 FD | 	call	#_json_to_motion_profile
077d4     B8 00 00 FF 
077d8     CC D6 05 F1 | 	add	ptr__dat__, ##94412
077dc     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
077e0     B8 00 00 FF 
077e4     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
077e8                 | LR__0277
077e8     A8 F0 03 F6 | 	mov	ptra, fp
077ec     B3 00 A0 FD | 	call	#popregs_
077f0                 | _json_to_test_profile_ret
077f0     2D 00 64 FD | 	ret
077f4                 | 
077f4                 | _json_to_motion_profile
077f4     02 4C 05 F6 | 	mov	COUNT_, #2
077f8     A9 00 A0 FD | 	call	#pushregs_
077fc     01 00 00 FF 
07800     14 F1 07 F1 | 	add	ptra, ##788
07804     A8 74 62 FC | 	wrlong	arg01, fp
07808     04 50 05 F1 | 	add	fp, #4
0780c     A8 76 62 FC | 	wrlong	arg02, fp
07810     04 50 85 F1 | 	sub	fp, #4
07814     A8 74 02 FB | 	rdlong	arg01, fp
07818     4E 01 00 FF 
0781c     5B 77 06 F6 | 	mov	arg02, ##@LR__1956
07820     40 A7 BF FD | 	call	#_fopen
07824     08 50 05 F1 | 	add	fp, #8
07828     A8 34 62 FC | 	wrlong	result1, fp
0782c     08 50 85 F1 | 	sub	fp, #8
07830     00 34 0E F2 | 	cmp	result1, #0 wz
07834     54 00 90 5D |  if_ne	jmp	#LR__0278
07838     00 74 06 F6 | 	mov	arg01, #0
0783c     90 1C B2 FD | 	call	#__system___getiolock_1306
07840     1A 75 02 F6 | 	mov	arg01, result1
07844     28 E4 B1 FD | 	call	#__system___lockmem
07848     4E 01 00 FF 
0784c     5D 77 06 F6 | 	mov	arg02, ##@LR__1957
07850     00 74 06 F6 | 	mov	arg01, #0
07854     00 78 06 F6 | 	mov	arg03, #0
07858     BC E9 B1 FD | 	call	#__system___basic_print_string
0785c     A8 76 02 FB | 	rdlong	arg02, fp
07860     00 74 06 F6 | 	mov	arg01, #0
07864     00 78 06 F6 | 	mov	arg03, #0
07868     AC E9 B1 FD | 	call	#__system___basic_print_string
0786c     00 74 06 F6 | 	mov	arg01, #0
07870     0A 76 06 F6 | 	mov	arg02, #10
07874     00 78 06 F6 | 	mov	arg03, #0
07878     50 E9 B1 FD | 	call	#__system___basic_print_char
0787c     00 74 06 F6 | 	mov	arg01, #0
07880     4C 1C B2 FD | 	call	#__system___getiolock_1306
07884     1A 01 68 FC | 	wrlong	#0, result1
07888                 | '         return;
07888     E4 03 90 FD | 	jmp	#LR__0283
0788c                 | LR__0278
0788c     00 74 06 F6 | 	mov	arg01, #0
07890     3C 1C B2 FD | 	call	#__system___getiolock_1306
07894     1A 75 02 F6 | 	mov	arg01, result1
07898     D4 E3 B1 FD | 	call	#__system___lockmem
0789c     4E 01 00 FF 
078a0     71 77 06 F6 | 	mov	arg02, ##@LR__1958
078a4     00 74 06 F6 | 	mov	arg01, #0
078a8     00 78 06 F6 | 	mov	arg03, #0
078ac     68 E9 B1 FD | 	call	#__system___basic_print_string
078b0     00 74 06 F6 | 	mov	arg01, #0
078b4     0A 76 06 F6 | 	mov	arg02, #10
078b8     00 78 06 F6 | 	mov	arg03, #0
078bc     0C E9 B1 FD | 	call	#__system___basic_print_char
078c0     00 74 06 F6 | 	mov	arg01, #0
078c4     08 1C B2 FD | 	call	#__system___getiolock_1306
078c8     1A 01 68 FC | 	wrlong	#0, result1
078cc     B8 00 00 FF 
078d0     CC D6 05 F1 | 	add	ptr__dat__, ##94412
078d4     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
078d8     B8 00 00 FF 
078dc     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
078e0     08 50 05 F1 | 	add	fp, #8
078e4     A8 74 02 FB | 	rdlong	arg01, fp
078e8     08 50 85 F1 | 	sub	fp, #8
078ec     00 76 06 F6 | 	mov	arg02, #0
078f0     02 78 06 F6 | 	mov	arg03, #2
078f4     D8 A8 BF FD | 	call	#_fseek
078f8     08 50 05 F1 | 	add	fp, #8
078fc     A8 74 02 FB | 	rdlong	arg01, fp
07900     08 50 85 F1 | 	sub	fp, #8
07904     24 A9 BF FD | 	call	#_ftell
07908     0C 50 05 F1 | 	add	fp, #12
0790c     A8 34 62 FC | 	wrlong	result1, fp
07910     04 50 85 F1 | 	sub	fp, #4
07914     A8 74 02 FB | 	rdlong	arg01, fp
07918     08 50 85 F1 | 	sub	fp, #8
0791c     00 76 06 F6 | 	mov	arg02, #0
07920     00 78 06 F6 | 	mov	arg03, #0
07924     A8 A8 BF FD | 	call	#_fseek
07928     AC 00 00 FF 
0792c     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07930     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07934     AC 00 00 FF 
07938     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
0793c     0C 50 05 F1 | 	add	fp, #12
07940     A8 76 02 FB | 	rdlong	arg02, fp
07944     04 50 85 F1 | 	sub	fp, #4
07948     A8 7A 02 FB | 	rdlong	arg04, fp
0794c     08 50 85 F1 | 	sub	fp, #8
07950     01 78 06 F6 | 	mov	arg03, #1
07954     F4 A7 BF FD | 	call	#_fread
07958     08 50 05 F1 | 	add	fp, #8
0795c     A8 74 02 FB | 	rdlong	arg01, fp
07960     08 50 85 F1 | 	sub	fp, #8
07964                 | ' {
07964                 | '     return _closeraw(f);
07964     04 98 BF FD | 	call	#__closeraw
07968     0C 50 05 F1 | 	add	fp, #12
0796c     A8 74 02 FB | 	rdlong	arg01, fp
07970     0C 50 85 F1 | 	sub	fp, #12
07974     AC 00 00 FF 
07978     5A D7 05 F1 | 	add	ptr__dat__, ##88410
0797c     EB 74 02 F1 | 	add	arg01, ptr__dat__
07980     3A 01 48 FC | 	wrbyte	#0, arg01
07984     00 74 06 F6 | 	mov	arg01, #0
07988     AC 00 00 FF 
0798c     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07990     3C 1B B2 FD | 	call	#__system___getiolock_1306
07994     1A 75 02 F6 | 	mov	arg01, result1
07998     D4 E2 B1 FD | 	call	#__system___lockmem
0799c     AC 00 00 FF 
079a0     5A D7 05 F1 | 	add	ptr__dat__, ##88410
079a4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
079a8     AC 00 00 FF 
079ac     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
079b0     00 74 06 F6 | 	mov	arg01, #0
079b4     00 78 06 F6 | 	mov	arg03, #0
079b8     5C E8 B1 FD | 	call	#__system___basic_print_string
079bc     00 74 06 F6 | 	mov	arg01, #0
079c0     0A 76 06 F6 | 	mov	arg02, #10
079c4     00 78 06 F6 | 	mov	arg03, #0
079c8     00 E8 B1 FD | 	call	#__system___basic_print_char
079cc     00 74 06 F6 | 	mov	arg01, #0
079d0     FC 1A B2 FD | 	call	#__system___getiolock_1306
079d4     1A 01 68 FC | 	wrlong	#0, result1
079d8     AC 00 00 FF 
079dc     5A D7 05 F1 | 	add	ptr__dat__, ##88410
079e0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
079e4     03 00 00 FF 
079e8     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
079ec     EB 76 02 F6 | 	mov	arg02, ptr__dat__
079f0     B0 00 00 FF 
079f4     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
079f8     C8 78 06 F6 | 	mov	arg03, #200
079fc     AC E8 BF FD | 	call	#_json_create
07a00     10 50 05 F1 | 	add	fp, #16
07a04     A8 34 62 FC | 	wrlong	result1, fp
07a08     0C 50 85 F1 | 	sub	fp, #12
07a0c     A8 8C 02 FB | 	rdlong	local01, fp
07a10     1A 75 02 F6 | 	mov	arg01, result1
07a14     04 50 85 F1 | 	sub	fp, #4
07a18     4E 01 00 FF 
07a1c     7D 77 06 F6 | 	mov	arg02, ##@LR__1959
07a20     70 C7 B0 FD | 	call	#_json_property_to_string_0665
07a24     1A 77 02 F6 | 	mov	arg02, result1
07a28     46 75 02 F6 | 	mov	arg01, local01
07a2c     32 78 06 F6 | 	mov	arg03, #50
07a30     B8 E5 BF FD | 	call	#_strncpy
07a34     04 50 05 F1 | 	add	fp, #4
07a38     A8 8C 02 FB | 	rdlong	local01, fp
07a3c     0C 50 05 F1 | 	add	fp, #12
07a40     A8 74 02 FB | 	rdlong	arg01, fp
07a44     10 50 85 F1 | 	sub	fp, #16
07a48     4E 01 00 FF 
07a4c     82 77 06 F6 | 	mov	arg02, ##@LR__1960
07a50     D0 C7 B0 FD | 	call	#_json_property_to_int_0667
07a54     34 8C 06 F1 | 	add	local01, #52
07a58     46 35 62 FC | 	wrlong	result1, local01
07a5c     10 50 05 F1 | 	add	fp, #16
07a60     A8 74 02 FB | 	rdlong	arg01, fp
07a64     10 50 85 F1 | 	sub	fp, #16
07a68     4E 01 00 FF 
07a6c     89 77 06 F6 | 	mov	arg02, ##@LR__1961
07a70     A8 E8 BF FD | 	call	#_json_getProperty
07a74     14 50 05 F1 | 	add	fp, #20
07a78     A8 34 62 FC | 	wrlong	result1, fp
07a7c     04 50 05 F1 | 	add	fp, #4
07a80     A8 00 68 FC | 	wrlong	#0, fp
07a84     04 50 85 F1 | 	sub	fp, #4
07a88     A8 74 02 FB | 	rdlong	arg01, fp
07a8c                 | ' {
07a8c                 | '     return json->u.c.child;
07a8c     08 74 06 F1 | 	add	arg01, #8
07a90     3A 8D 02 FB | 	rdlong	local01, arg01
07a94     01 00 00 FF 
07a98     F8 50 05 F1 | 	add	fp, ##760
07a9c     A8 8C 62 FC | 	wrlong	local01, fp
07aa0     01 00 00 FF 
07aa4     0C 51 85 F1 | 	sub	fp, ##780
07aa8                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
07aa8                 | LR__0279
07aa8     01 00 00 FF 
07aac     0C 51 05 F1 | 	add	fp, ##780
07ab0     A8 8C 0A FB | 	rdlong	local01, fp wz
07ab4     01 00 00 FF 
07ab8     0C 51 85 F1 | 	sub	fp, ##780
07abc     70 00 90 AD |  if_e	jmp	#LR__0280
07ac0     18 50 05 F1 | 	add	fp, #24
07ac4     A8 8C 02 FB | 	rdlong	local01, fp
07ac8     32 8C 06 FD | 	qmul	local01, #50
07acc     04 50 05 F1 | 	add	fp, #4
07ad0                 | ' {
07ad0                 | '     return property->u.value;
07ad0     32 78 06 F6 | 	mov	arg03, #50
07ad4     18 8C 62 FD | 	getqx	local01
07ad8     A8 8C 02 F1 | 	add	local01, fp
07adc     01 00 00 FF 
07ae0     F0 50 05 F1 | 	add	fp, ##752
07ae4     A8 74 02 FB | 	rdlong	arg01, fp
07ae8     01 00 00 FF 
07aec     0C 51 85 F1 | 	sub	fp, ##780
07af0     08 74 06 F1 | 	add	arg01, #8
07af4     3A 77 02 FB | 	rdlong	arg02, arg01
07af8     46 75 02 F6 | 	mov	arg01, local01
07afc     EC E4 BF FD | 	call	#_strncpy
07b00     18 50 05 F1 | 	add	fp, #24
07b04     A8 8C 02 FB | 	rdlong	local01, fp
07b08     01 8C 06 F1 | 	add	local01, #1
07b0c     A8 8C 62 FC | 	wrlong	local01, fp
07b10     01 00 00 FF 
07b14     F4 50 05 F1 | 	add	fp, ##756
07b18     A8 74 02 FB | 	rdlong	arg01, fp
07b1c                 | ' {
07b1c                 | '     return json->sibling;
07b1c     3A 35 02 FB | 	rdlong	result1, arg01
07b20     A8 34 62 FC | 	wrlong	result1, fp
07b24     01 00 00 FF 
07b28     0C 51 85 F1 | 	sub	fp, ##780
07b2c     78 FF 9F FD | 	jmp	#LR__0279
07b30                 | LR__0280
07b30     04 50 05 F1 | 	add	fp, #4
07b34     A8 8C 02 FB | 	rdlong	local01, fp
07b38     14 50 05 F1 | 	add	fp, #20
07b3c     A8 8E 02 FB | 	rdlong	local02, fp
07b40     38 8C 06 F1 | 	add	local01, #56
07b44     46 8F 62 FC | 	wrlong	local02, local01
07b48     01 00 00 FF 
07b4c     F8 50 05 F1 | 	add	fp, ##760
07b50     A8 00 68 FC | 	wrlong	#0, fp
07b54     01 00 00 FF 
07b58     10 51 85 F1 | 	sub	fp, ##784
07b5c                 | '     {
07b5c                 | '         strncpy(filenames[index], json_getValue(property),  50 );
07b5c                 | '         index++;
07b5c                 | '     }
07b5c                 | '     profile->setCount = index;
07b5c                 | ' 
07b5c                 | '     for (int i = 0; i < profile->setCount; i++)
07b5c                 | LR__0281
07b5c     04 50 05 F1 | 	add	fp, #4
07b60     A8 8C 02 FB | 	rdlong	local01, fp
07b64     01 00 00 FF 
07b68     0C 51 05 F1 | 	add	fp, ##780
07b6c     A8 8E 02 FB | 	rdlong	local02, fp
07b70     01 00 00 FF 
07b74     10 51 85 F1 | 	sub	fp, ##784
07b78     38 8C 06 F1 | 	add	local01, #56
07b7c     46 8D 02 FB | 	rdlong	local01, local01
07b80     46 8F 52 F2 | 	cmps	local02, local01 wc
07b84     D4 00 90 3D |  if_ae	jmp	#LR__0282
07b88     00 74 06 F6 | 	mov	arg01, #0
07b8c     40 19 B2 FD | 	call	#__system___getiolock_1306
07b90     1A 75 02 F6 | 	mov	arg01, result1
07b94     D8 E0 B1 FD | 	call	#__system___lockmem
07b98     4E 01 00 FF 
07b9c     95 77 06 F6 | 	mov	arg02, ##@LR__1962
07ba0     00 74 06 F6 | 	mov	arg01, #0
07ba4     00 78 06 F6 | 	mov	arg03, #0
07ba8     6C E6 B1 FD | 	call	#__system___basic_print_string
07bac     01 00 00 FF 
07bb0     10 51 05 F1 | 	add	fp, ##784
07bb4     A8 8E 02 FB | 	rdlong	local02, fp
07bb8     32 8E 06 FD | 	qmul	local02, #50
07bbc     01 00 00 FF 
07bc0     F4 50 85 F1 | 	sub	fp, ##756
07bc4     00 74 06 F6 | 	mov	arg01, #0
07bc8     00 78 06 F6 | 	mov	arg03, #0
07bcc     18 76 62 FD | 	getqx	arg02
07bd0     A8 76 02 F1 | 	add	arg02, fp
07bd4     1C 50 85 F1 | 	sub	fp, #28
07bd8     3C E6 B1 FD | 	call	#__system___basic_print_string
07bdc     00 74 06 F6 | 	mov	arg01, #0
07be0     0A 76 06 F6 | 	mov	arg02, #10
07be4     00 78 06 F6 | 	mov	arg03, #0
07be8     E0 E5 B1 FD | 	call	#__system___basic_print_char
07bec     00 74 06 F6 | 	mov	arg01, #0
07bf0     DC 18 B2 FD | 	call	#__system___getiolock_1306
07bf4     1A 01 68 FC | 	wrlong	#0, result1
07bf8     01 00 00 FF 
07bfc     10 51 05 F1 | 	add	fp, ##784
07c00     A8 8E 02 FB | 	rdlong	local02, fp
07c04     32 8E 06 FD | 	qmul	local02, #50
07c08     18 74 62 FD | 	getqx	arg01
07c0c     02 00 00 FF 
07c10     34 8E 06 FD | 	qmul	local02, ##1076
07c14     01 00 00 FF 
07c18     F4 50 85 F1 | 	sub	fp, ##756
07c1c     A8 74 02 F1 | 	add	arg01, fp
07c20     18 50 85 F1 | 	sub	fp, #24
07c24     A8 8E 02 FB | 	rdlong	local02, fp
07c28     04 50 85 F1 | 	sub	fp, #4
07c2c     3C 8E 06 F1 | 	add	local02, #60
07c30     18 76 62 FD | 	getqx	arg02
07c34     47 77 02 F1 | 	add	arg02, local02
07c38     40 00 B0 FD | 	call	#_json_to_motion_set
07c3c     01 00 00 FF 
07c40     10 51 05 F1 | 	add	fp, ##784
07c44     A8 8E 02 FB | 	rdlong	local02, fp
07c48     01 8E 06 F1 | 	add	local02, #1
07c4c     A8 8E 62 FC | 	wrlong	local02, fp
07c50     01 00 00 FF 
07c54     10 51 85 F1 | 	sub	fp, ##784
07c58     00 FF 9F FD | 	jmp	#LR__0281
07c5c                 | LR__0282
07c5c     B8 00 00 FF 
07c60     CC D6 05 F1 | 	add	ptr__dat__, ##94412
07c64     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
07c68     B8 00 00 FF 
07c6c     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
07c70                 | LR__0283
07c70     A8 F0 03 F6 | 	mov	ptra, fp
07c74     B3 00 A0 FD | 	call	#popregs_
07c78                 | _json_to_motion_profile_ret
07c78     2D 00 64 FD | 	ret
07c7c                 | 
07c7c                 | _json_to_motion_set
07c7c     02 4C 05 F6 | 	mov	COUNT_, #2
07c80     A9 00 A0 FD | 	call	#pushregs_
07c84     01 00 00 FF 
07c88     18 F0 07 F1 | 	add	ptra, ##536
07c8c     A8 74 62 FC | 	wrlong	arg01, fp
07c90     04 50 05 F1 | 	add	fp, #4
07c94     A8 76 62 FC | 	wrlong	arg02, fp
07c98     04 50 85 F1 | 	sub	fp, #4
07c9c     A8 74 02 FB | 	rdlong	arg01, fp
07ca0     4E 01 00 FF 
07ca4     AE 77 06 F6 | 	mov	arg02, ##@LR__1963
07ca8     B8 A2 BF FD | 	call	#_fopen
07cac     08 50 05 F1 | 	add	fp, #8
07cb0     A8 34 62 FC | 	wrlong	result1, fp
07cb4     08 50 85 F1 | 	sub	fp, #8
07cb8     00 34 0E F2 | 	cmp	result1, #0 wz
07cbc     54 00 90 5D |  if_ne	jmp	#LR__0284
07cc0     00 74 06 F6 | 	mov	arg01, #0
07cc4     08 18 B2 FD | 	call	#__system___getiolock_1306
07cc8     1A 75 02 F6 | 	mov	arg01, result1
07ccc     A0 DF B1 FD | 	call	#__system___lockmem
07cd0     4E 01 00 FF 
07cd4     B0 77 06 F6 | 	mov	arg02, ##@LR__1964
07cd8     00 74 06 F6 | 	mov	arg01, #0
07cdc     00 78 06 F6 | 	mov	arg03, #0
07ce0     34 E5 B1 FD | 	call	#__system___basic_print_string
07ce4     A8 76 02 FB | 	rdlong	arg02, fp
07ce8     00 74 06 F6 | 	mov	arg01, #0
07cec     00 78 06 F6 | 	mov	arg03, #0
07cf0     24 E5 B1 FD | 	call	#__system___basic_print_string
07cf4     00 74 06 F6 | 	mov	arg01, #0
07cf8     0A 76 06 F6 | 	mov	arg02, #10
07cfc     00 78 06 F6 | 	mov	arg03, #0
07d00     C8 E4 B1 FD | 	call	#__system___basic_print_char
07d04     00 74 06 F6 | 	mov	arg01, #0
07d08     C4 17 B2 FD | 	call	#__system___getiolock_1306
07d0c     1A 01 68 FC | 	wrlong	#0, result1
07d10                 | '         return;
07d10     FC 03 90 FD | 	jmp	#LR__0289
07d14                 | LR__0284
07d14     B8 00 00 FF 
07d18     CC D6 05 F1 | 	add	ptr__dat__, ##94412
07d1c     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07d20     B8 00 00 FF 
07d24     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
07d28     08 50 05 F1 | 	add	fp, #8
07d2c     A8 74 02 FB | 	rdlong	arg01, fp
07d30     08 50 85 F1 | 	sub	fp, #8
07d34     00 76 06 F6 | 	mov	arg02, #0
07d38     02 78 06 F6 | 	mov	arg03, #2
07d3c     90 A4 BF FD | 	call	#_fseek
07d40     08 50 05 F1 | 	add	fp, #8
07d44     A8 74 02 FB | 	rdlong	arg01, fp
07d48     08 50 85 F1 | 	sub	fp, #8
07d4c     DC A4 BF FD | 	call	#_ftell
07d50     0C 50 05 F1 | 	add	fp, #12
07d54     A8 34 62 FC | 	wrlong	result1, fp
07d58     04 50 85 F1 | 	sub	fp, #4
07d5c     A8 74 02 FB | 	rdlong	arg01, fp
07d60     08 50 85 F1 | 	sub	fp, #8
07d64     00 76 06 F6 | 	mov	arg02, #0
07d68     00 78 06 F6 | 	mov	arg03, #0
07d6c     60 A4 BF FD | 	call	#_fseek
07d70     AC 00 00 FF 
07d74     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07d78     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07d7c     AC 00 00 FF 
07d80     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07d84     0C 50 05 F1 | 	add	fp, #12
07d88     A8 76 02 FB | 	rdlong	arg02, fp
07d8c     04 50 85 F1 | 	sub	fp, #4
07d90     A8 7A 02 FB | 	rdlong	arg04, fp
07d94     08 50 85 F1 | 	sub	fp, #8
07d98     01 78 06 F6 | 	mov	arg03, #1
07d9c     AC A3 BF FD | 	call	#_fread
07da0     08 50 05 F1 | 	add	fp, #8
07da4     A8 74 02 FB | 	rdlong	arg01, fp
07da8     08 50 85 F1 | 	sub	fp, #8
07dac                 | ' {
07dac                 | '     return _closeraw(f);
07dac     BC 93 BF FD | 	call	#__closeraw
07db0     0C 50 05 F1 | 	add	fp, #12
07db4     A8 74 02 FB | 	rdlong	arg01, fp
07db8     0C 50 85 F1 | 	sub	fp, #12
07dbc     AC 00 00 FF 
07dc0     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07dc4     EB 74 02 F1 | 	add	arg01, ptr__dat__
07dc8     3A 01 48 FC | 	wrbyte	#0, arg01
07dcc     00 74 06 F6 | 	mov	arg01, #0
07dd0     AC 00 00 FF 
07dd4     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07dd8     F4 16 B2 FD | 	call	#__system___getiolock_1306
07ddc     1A 75 02 F6 | 	mov	arg01, result1
07de0     8C DE B1 FD | 	call	#__system___lockmem
07de4     AC 00 00 FF 
07de8     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07dec     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07df0     AC 00 00 FF 
07df4     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
07df8     00 74 06 F6 | 	mov	arg01, #0
07dfc     00 78 06 F6 | 	mov	arg03, #0
07e00     14 E4 B1 FD | 	call	#__system___basic_print_string
07e04     00 74 06 F6 | 	mov	arg01, #0
07e08     0A 76 06 F6 | 	mov	arg02, #10
07e0c     00 78 06 F6 | 	mov	arg03, #0
07e10     B8 E3 B1 FD | 	call	#__system___basic_print_char
07e14     00 74 06 F6 | 	mov	arg01, #0
07e18     B4 16 B2 FD | 	call	#__system___getiolock_1306
07e1c     1A 01 68 FC | 	wrlong	#0, result1
07e20     AC 00 00 FF 
07e24     5A D7 05 F1 | 	add	ptr__dat__, ##88410
07e28     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07e2c     03 00 00 FF 
07e30     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
07e34     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07e38     B0 00 00 FF 
07e3c     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
07e40     C8 78 06 F6 | 	mov	arg03, #200
07e44     64 E4 BF FD | 	call	#_json_create
07e48     10 50 05 F1 | 	add	fp, #16
07e4c     A8 34 62 FC | 	wrlong	result1, fp
07e50     0C 50 85 F1 | 	sub	fp, #12
07e54     A8 8C 02 FB | 	rdlong	local01, fp
07e58     1A 75 02 F6 | 	mov	arg01, result1
07e5c     04 50 85 F1 | 	sub	fp, #4
07e60     4E 01 00 FF 
07e64     C4 77 06 F6 | 	mov	arg02, ##@LR__1965
07e68     28 C3 B0 FD | 	call	#_json_property_to_string_0665
07e6c     1A 77 02 F6 | 	mov	arg02, result1
07e70     46 75 02 F6 | 	mov	arg01, local01
07e74     32 78 06 F6 | 	mov	arg03, #50
07e78     70 E1 BF FD | 	call	#_strncpy
07e7c     04 50 05 F1 | 	add	fp, #4
07e80     A8 8C 02 FB | 	rdlong	local01, fp
07e84     0C 50 05 F1 | 	add	fp, #12
07e88     A8 74 02 FB | 	rdlong	arg01, fp
07e8c     10 50 85 F1 | 	sub	fp, #16
07e90     4E 01 00 FF 
07e94     C9 77 06 F6 | 	mov	arg02, ##@LR__1966
07e98     88 C3 B0 FD | 	call	#_json_property_to_int_0667
07e9c     34 8C 06 F1 | 	add	local01, #52
07ea0     46 35 62 FC | 	wrlong	result1, local01
07ea4     04 50 05 F1 | 	add	fp, #4
07ea8     A8 8C 02 FB | 	rdlong	local01, fp
07eac     38 8C 06 F1 | 	add	local01, #56
07eb0     0C 50 05 F1 | 	add	fp, #12
07eb4     A8 74 02 FB | 	rdlong	arg01, fp
07eb8     10 50 85 F1 | 	sub	fp, #16
07ebc     4E 01 00 FF 
07ec0     D0 77 06 F6 | 	mov	arg02, ##@LR__1967
07ec4     CC C2 B0 FD | 	call	#_json_property_to_string_0665
07ec8     1A 77 02 F6 | 	mov	arg02, result1
07ecc     46 75 02 F6 | 	mov	arg01, local01
07ed0     0A 78 06 F6 | 	mov	arg03, #10
07ed4     14 E1 BF FD | 	call	#_strncpy
07ed8     04 50 05 F1 | 	add	fp, #4
07edc     A8 8C 02 FB | 	rdlong	local01, fp
07ee0     0C 50 05 F1 | 	add	fp, #12
07ee4     A8 74 02 FB | 	rdlong	arg01, fp
07ee8     10 50 85 F1 | 	sub	fp, #16
07eec     4E 01 00 FF 
07ef0     D5 77 06 F6 | 	mov	arg02, ##@LR__1968
07ef4     2C C3 B0 FD | 	call	#_json_property_to_int_0667
07ef8     44 8C 06 F1 | 	add	local01, #68
07efc     46 35 62 FC | 	wrlong	result1, local01
07f00     10 50 05 F1 | 	add	fp, #16
07f04     A8 74 02 FB | 	rdlong	arg01, fp
07f08     10 50 85 F1 | 	sub	fp, #16
07f0c     4E 01 00 FF 
07f10     E0 77 06 F6 | 	mov	arg02, ##@LR__1969
07f14     04 E4 BF FD | 	call	#_json_getProperty
07f18     01 00 00 FF 
07f1c     08 50 05 F1 | 	add	fp, ##520
07f20     A8 34 62 FC | 	wrlong	result1, fp
07f24     04 50 05 F1 | 	add	fp, #4
07f28     A8 00 68 FC | 	wrlong	#0, fp
07f2c     04 50 85 F1 | 	sub	fp, #4
07f30     A8 74 02 FB | 	rdlong	arg01, fp
07f34                 | ' {
07f34                 | '     return json->u.c.child;
07f34     08 74 06 F1 | 	add	arg01, #8
07f38     3A 8D 02 FB | 	rdlong	local01, arg01
07f3c     08 50 05 F1 | 	add	fp, #8
07f40     A8 8C 62 FC | 	wrlong	local01, fp
07f44     01 00 00 FF 
07f48     10 50 85 F1 | 	sub	fp, ##528
07f4c                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
07f4c                 | LR__0285
07f4c     01 00 00 FF 
07f50     10 50 05 F1 | 	add	fp, ##528
07f54     A8 8C 0A FB | 	rdlong	local01, fp wz
07f58     01 00 00 FF 
07f5c     10 50 85 F1 | 	sub	fp, ##528
07f60     70 00 90 AD |  if_e	jmp	#LR__0286
07f64     01 00 00 FF 
07f68     0C 50 05 F1 | 	add	fp, ##524
07f6c     A8 8C 02 FB | 	rdlong	local01, fp
07f70     32 8C 06 FD | 	qmul	local01, #50
07f74     F8 51 85 F1 | 	sub	fp, #504
07f78                 | ' {
07f78                 | '     return property->u.value;
07f78     32 78 06 F6 | 	mov	arg03, #50
07f7c     18 8C 62 FD | 	getqx	local01
07f80     A8 8C 02 F1 | 	add	local01, fp
07f84     FC 51 05 F1 | 	add	fp, #508
07f88     A8 74 02 FB | 	rdlong	arg01, fp
07f8c     01 00 00 FF 
07f90     10 50 85 F1 | 	sub	fp, ##528
07f94     08 74 06 F1 | 	add	arg01, #8
07f98     3A 77 02 FB | 	rdlong	arg02, arg01
07f9c     46 75 02 F6 | 	mov	arg01, local01
07fa0     48 E0 BF FD | 	call	#_strncpy
07fa4     01 00 00 FF 
07fa8     0C 50 05 F1 | 	add	fp, ##524
07fac     A8 8C 02 FB | 	rdlong	local01, fp
07fb0     01 8C 06 F1 | 	add	local01, #1
07fb4     A8 8C 62 FC | 	wrlong	local01, fp
07fb8     04 50 05 F1 | 	add	fp, #4
07fbc     A8 74 02 FB | 	rdlong	arg01, fp
07fc0                 | ' {
07fc0                 | '     return json->sibling;
07fc0     3A 35 02 FB | 	rdlong	result1, arg01
07fc4     A8 34 62 FC | 	wrlong	result1, fp
07fc8     01 00 00 FF 
07fcc     10 50 85 F1 | 	sub	fp, ##528
07fd0     78 FF 9F FD | 	jmp	#LR__0285
07fd4                 | LR__0286
07fd4     04 50 05 F1 | 	add	fp, #4
07fd8     A8 8C 02 FB | 	rdlong	local01, fp
07fdc     01 00 00 FF 
07fe0     08 50 05 F1 | 	add	fp, ##520
07fe4     A8 8E 02 FB | 	rdlong	local02, fp
07fe8     48 8C 06 F1 | 	add	local01, #72
07fec     46 8F 62 FC | 	wrlong	local02, local01
07ff0     08 50 05 F1 | 	add	fp, #8
07ff4     A8 00 68 FC | 	wrlong	#0, fp
07ff8     01 00 00 FF 
07ffc     14 50 85 F1 | 	sub	fp, ##532
08000                 | '     {
08000                 | '         strncpy(filenames[index], json_getValue(property),  50 );
08000                 | '         index++;
08000                 | '     }
08000                 | '     set->quartetCount = index;
08000                 | ' 
08000                 | '     for (int i = 0; i < set->quartetCount; i++)
08000                 | LR__0287
08000     04 50 05 F1 | 	add	fp, #4
08004     A8 8C 02 FB | 	rdlong	local01, fp
08008     01 00 00 FF 
0800c     10 50 05 F1 | 	add	fp, ##528
08010     A8 8E 02 FB | 	rdlong	local02, fp
08014     01 00 00 FF 
08018     14 50 85 F1 | 	sub	fp, ##532
0801c     48 8C 06 F1 | 	add	local01, #72
08020     46 8D 02 FB | 	rdlong	local01, local01
08024     46 8F 52 F2 | 	cmps	local02, local01 wc
08028     D0 00 90 3D |  if_ae	jmp	#LR__0288
0802c     00 74 06 F6 | 	mov	arg01, #0
08030     9C 14 B2 FD | 	call	#__system___getiolock_1306
08034     1A 75 02 F6 | 	mov	arg01, result1
08038     34 DC B1 FD | 	call	#__system___lockmem
0803c     4E 01 00 FF 
08040     E9 77 06 F6 | 	mov	arg02, ##@LR__1970
08044     00 74 06 F6 | 	mov	arg01, #0
08048     00 78 06 F6 | 	mov	arg03, #0
0804c     C8 E1 B1 FD | 	call	#__system___basic_print_string
08050     01 00 00 FF 
08054     14 50 05 F1 | 	add	fp, ##532
08058     A8 8E 02 FB | 	rdlong	local02, fp
0805c     32 8E 06 FD | 	qmul	local02, #50
08060     01 00 00 FF 
08064     00 50 85 F1 | 	sub	fp, ##512
08068     00 74 06 F6 | 	mov	arg01, #0
0806c     00 78 06 F6 | 	mov	arg03, #0
08070     18 76 62 FD | 	getqx	arg02
08074     A8 76 02 F1 | 	add	arg02, fp
08078     14 50 85 F1 | 	sub	fp, #20
0807c     98 E1 B1 FD | 	call	#__system___basic_print_string
08080     00 74 06 F6 | 	mov	arg01, #0
08084     0A 76 06 F6 | 	mov	arg02, #10
08088     00 78 06 F6 | 	mov	arg03, #0
0808c     3C E1 B1 FD | 	call	#__system___basic_print_char
08090     00 74 06 F6 | 	mov	arg01, #0
08094     38 14 B2 FD | 	call	#__system___getiolock_1306
08098     1A 01 68 FC | 	wrlong	#0, result1
0809c     01 00 00 FF 
080a0     14 50 05 F1 | 	add	fp, ##532
080a4     A8 8E 02 FB | 	rdlong	local02, fp
080a8     32 8E 06 FD | 	qmul	local02, #50
080ac     18 74 62 FD | 	getqx	arg01
080b0     64 8E 06 FD | 	qmul	local02, #100
080b4     01 00 00 FF 
080b8     00 50 85 F1 | 	sub	fp, ##512
080bc     A8 74 02 F1 | 	add	arg01, fp
080c0     10 50 85 F1 | 	sub	fp, #16
080c4     A8 8E 02 FB | 	rdlong	local02, fp
080c8     04 50 85 F1 | 	sub	fp, #4
080cc     4C 8E 06 F1 | 	add	local02, #76
080d0     18 76 62 FD | 	getqx	arg02
080d4     47 77 02 F1 | 	add	arg02, local02
080d8     40 00 B0 FD | 	call	#_json_to_motion_quartet
080dc     01 00 00 FF 
080e0     14 50 05 F1 | 	add	fp, ##532
080e4     A8 8E 02 FB | 	rdlong	local02, fp
080e8     01 8E 06 F1 | 	add	local02, #1
080ec     A8 8E 62 FC | 	wrlong	local02, fp
080f0     01 00 00 FF 
080f4     14 50 85 F1 | 	sub	fp, ##532
080f8     04 FF 9F FD | 	jmp	#LR__0287
080fc                 | LR__0288
080fc     B8 00 00 FF 
08100     CC D6 05 F1 | 	add	ptr__dat__, ##94412
08104     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
08108     B8 00 00 FF 
0810c     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
08110                 | LR__0289
08110     A8 F0 03 F6 | 	mov	ptra, fp
08114     B3 00 A0 FD | 	call	#popregs_
08118                 | _json_to_motion_set_ret
08118     2D 00 64 FD | 	ret
0811c                 | 
0811c                 | _json_to_motion_quartet
0811c     03 4C 05 F6 | 	mov	COUNT_, #3
08120     A9 00 A0 FD | 	call	#pushregs_
08124     3A 8D 02 F6 | 	mov	local01, arg01
08128     3B 8F 02 F6 | 	mov	local02, arg02
0812c     00 74 06 F6 | 	mov	arg01, #0
08130     9C 13 B2 FD | 	call	#__system___getiolock_1306
08134     1A 75 02 F6 | 	mov	arg01, result1
08138     34 DB B1 FD | 	call	#__system___lockmem
0813c     4E 01 00 FF 
08140     FE 77 06 F6 | 	mov	arg02, ##@LR__1971
08144     00 74 06 F6 | 	mov	arg01, #0
08148     00 78 06 F6 | 	mov	arg03, #0
0814c     C8 E0 B1 FD | 	call	#__system___basic_print_string
08150     00 74 06 F6 | 	mov	arg01, #0
08154     0A 76 06 F6 | 	mov	arg02, #10
08158     00 78 06 F6 | 	mov	arg03, #0
0815c     6C E0 B1 FD | 	call	#__system___basic_print_char
08160     00 74 06 F6 | 	mov	arg01, #0
08164     68 13 B2 FD | 	call	#__system___getiolock_1306
08168     1A 01 68 FC | 	wrlong	#0, result1
0816c     4F 01 00 FF 
08170     0B 76 06 F6 | 	mov	arg02, ##@LR__1972
08174     46 75 02 F6 | 	mov	arg01, local01
08178     E8 9D BF FD | 	call	#_fopen
0817c     1A 91 0A F6 | 	mov	local03, result1 wz
08180     54 00 90 5D |  if_ne	jmp	#LR__0290
08184     00 74 06 F6 | 	mov	arg01, #0
08188     44 13 B2 FD | 	call	#__system___getiolock_1306
0818c     1A 75 02 F6 | 	mov	arg01, result1
08190     DC DA B1 FD | 	call	#__system___lockmem
08194     4F 01 00 FF 
08198     0D 76 06 F6 | 	mov	arg02, ##@LR__1973
0819c     00 74 06 F6 | 	mov	arg01, #0
081a0     00 78 06 F6 | 	mov	arg03, #0
081a4     70 E0 B1 FD | 	call	#__system___basic_print_string
081a8     00 74 06 F6 | 	mov	arg01, #0
081ac     46 77 02 F6 | 	mov	arg02, local01
081b0     00 78 06 F6 | 	mov	arg03, #0
081b4     60 E0 B1 FD | 	call	#__system___basic_print_string
081b8     00 74 06 F6 | 	mov	arg01, #0
081bc     0A 76 06 F6 | 	mov	arg02, #10
081c0     00 78 06 F6 | 	mov	arg03, #0
081c4     04 E0 B1 FD | 	call	#__system___basic_print_char
081c8     00 74 06 F6 | 	mov	arg01, #0
081cc     00 13 B2 FD | 	call	#__system___getiolock_1306
081d0     1A 01 68 FC | 	wrlong	#0, result1
081d4                 | '         return;
081d4     68 03 90 FD | 	jmp	#LR__0291
081d8                 | LR__0290
081d8     00 74 06 F6 | 	mov	arg01, #0
081dc     F0 12 B2 FD | 	call	#__system___getiolock_1306
081e0     1A 75 02 F6 | 	mov	arg01, result1
081e4     88 DA B1 FD | 	call	#__system___lockmem
081e8     4F 01 00 FF 
081ec     21 76 06 F6 | 	mov	arg02, ##@LR__1974
081f0     00 74 06 F6 | 	mov	arg01, #0
081f4     00 78 06 F6 | 	mov	arg03, #0
081f8     1C E0 B1 FD | 	call	#__system___basic_print_string
081fc     00 74 06 F6 | 	mov	arg01, #0
08200     0A 76 06 F6 | 	mov	arg02, #10
08204     00 78 06 F6 | 	mov	arg03, #0
08208     C0 DF B1 FD | 	call	#__system___basic_print_char
0820c     00 74 06 F6 | 	mov	arg01, #0
08210     BC 12 B2 FD | 	call	#__system___getiolock_1306
08214     1A 01 68 FC | 	wrlong	#0, result1
08218     B8 00 00 FF 
0821c     CC D6 05 F1 | 	add	ptr__dat__, ##94412
08220     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
08224     B8 00 00 FF 
08228     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
0822c     48 75 02 F6 | 	mov	arg01, local03
08230     00 76 06 F6 | 	mov	arg02, #0
08234     02 78 06 F6 | 	mov	arg03, #2
08238     94 9F BF FD | 	call	#_fseek
0823c     48 75 02 F6 | 	mov	arg01, local03
08240     E8 9F BF FD | 	call	#_ftell
08244     1A 8D 02 F6 | 	mov	local01, result1
08248     48 75 02 F6 | 	mov	arg01, local03
0824c     00 76 06 F6 | 	mov	arg02, #0
08250     00 78 06 F6 | 	mov	arg03, #0
08254     78 9F BF FD | 	call	#_fseek
08258     AC 00 00 FF 
0825c     5A D7 05 F1 | 	add	ptr__dat__, ##88410
08260     EB 74 02 F6 | 	mov	arg01, ptr__dat__
08264     AC 00 00 FF 
08268     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
0826c     46 77 02 F6 | 	mov	arg02, local01
08270     01 78 06 F6 | 	mov	arg03, #1
08274     48 7B 02 F6 | 	mov	arg04, local03
08278     D0 9E BF FD | 	call	#_fread
0827c     48 75 02 F6 | 	mov	arg01, local03
08280                 | ' {
08280                 | '     return _closeraw(f);
08280     E8 8E BF FD | 	call	#__closeraw
08284     AC 00 00 FF 
08288     5A D7 05 F1 | 	add	ptr__dat__, ##88410
0828c     EB 8C 02 F1 | 	add	local01, ptr__dat__
08290     46 01 48 FC | 	wrbyte	#0, local01
08294     00 74 06 F6 | 	mov	arg01, #0
08298     AC 00 00 FF 
0829c     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
082a0     2C 12 B2 FD | 	call	#__system___getiolock_1306
082a4     1A 75 02 F6 | 	mov	arg01, result1
082a8     C4 D9 B1 FD | 	call	#__system___lockmem
082ac     AC 00 00 FF 
082b0     5A D7 05 F1 | 	add	ptr__dat__, ##88410
082b4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
082b8     AC 00 00 FF 
082bc     5A D7 85 F1 | 	sub	ptr__dat__, ##88410
082c0     00 74 06 F6 | 	mov	arg01, #0
082c4     00 78 06 F6 | 	mov	arg03, #0
082c8     4C DF B1 FD | 	call	#__system___basic_print_string
082cc     00 74 06 F6 | 	mov	arg01, #0
082d0     0A 76 06 F6 | 	mov	arg02, #10
082d4     00 78 06 F6 | 	mov	arg03, #0
082d8     F0 DE B1 FD | 	call	#__system___basic_print_char
082dc     00 74 06 F6 | 	mov	arg01, #0
082e0     EC 11 B2 FD | 	call	#__system___getiolock_1306
082e4     1A 01 68 FC | 	wrlong	#0, result1
082e8     AC 00 00 FF 
082ec     5A D7 05 F1 | 	add	ptr__dat__, ##88410
082f0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
082f4     03 00 00 FF 
082f8     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
082fc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
08300     B0 00 00 FF 
08304     2C D7 85 F1 | 	sub	ptr__dat__, ##90412
08308     C8 78 06 F6 | 	mov	arg03, #200
0830c     9C DF BF FD | 	call	#_json_create
08310     1A 91 02 F6 | 	mov	local03, result1
08314     00 74 06 F6 | 	mov	arg01, #0
08318     B4 11 B2 FD | 	call	#__system___getiolock_1306
0831c     1A 75 02 F6 | 	mov	arg01, result1
08320     4C D9 B1 FD | 	call	#__system___lockmem
08324     4F 01 00 FF 
08328     2D 76 06 F6 | 	mov	arg02, ##@LR__1975
0832c     00 74 06 F6 | 	mov	arg01, #0
08330     00 78 06 F6 | 	mov	arg03, #0
08334     E0 DE B1 FD | 	call	#__system___basic_print_string
08338     00 74 06 F6 | 	mov	arg01, #0
0833c     0A 76 06 F6 | 	mov	arg02, #10
08340     00 78 06 F6 | 	mov	arg03, #0
08344     84 DE B1 FD | 	call	#__system___basic_print_char
08348     00 74 06 F6 | 	mov	arg01, #0
0834c     80 11 B2 FD | 	call	#__system___getiolock_1306
08350     1A 01 68 FC | 	wrlong	#0, result1
08354     4F 01 00 FF 
08358     3A 76 06 F6 | 	mov	arg02, ##@LR__1976
0835c     48 75 02 F6 | 	mov	arg01, local03
08360     30 BE B0 FD | 	call	#_json_property_to_string_0665
08364     1A 77 02 F6 | 	mov	arg02, result1
08368     47 75 02 F6 | 	mov	arg01, local02
0836c     32 78 06 F6 | 	mov	arg03, #50
08370     78 DC BF FD | 	call	#_strncpy
08374     00 74 06 F6 | 	mov	arg01, #0
08378     54 11 B2 FD | 	call	#__system___getiolock_1306
0837c     1A 75 02 F6 | 	mov	arg01, result1
08380     EC D8 B1 FD | 	call	#__system___lockmem
08384     4F 01 00 FF 
08388     3F 76 06 F6 | 	mov	arg02, ##@LR__1977
0838c     00 74 06 F6 | 	mov	arg01, #0
08390     00 78 06 F6 | 	mov	arg03, #0
08394     80 DE B1 FD | 	call	#__system___basic_print_string
08398     00 74 06 F6 | 	mov	arg01, #0
0839c     0A 76 06 F6 | 	mov	arg02, #10
083a0     00 78 06 F6 | 	mov	arg03, #0
083a4     24 DE B1 FD | 	call	#__system___basic_print_char
083a8     00 74 06 F6 | 	mov	arg01, #0
083ac     20 11 B2 FD | 	call	#__system___getiolock_1306
083b0     1A 01 68 FC | 	wrlong	#0, result1
083b4     4F 01 00 FF 
083b8     50 76 06 F6 | 	mov	arg02, ##@LR__1978
083bc     48 75 02 F6 | 	mov	arg01, local03
083c0     60 BE B0 FD | 	call	#_json_property_to_int_0667
083c4     1A 8D 02 F6 | 	mov	local01, result1
083c8     34 8E 06 F1 | 	add	local02, #52
083cc     47 8D 62 FC | 	wrlong	local01, local02
083d0     00 74 06 F6 | 	mov	arg01, #0
083d4     F8 10 B2 FD | 	call	#__system___getiolock_1306
083d8     1A 75 02 F6 | 	mov	arg01, result1
083dc     90 D8 B1 FD | 	call	#__system___lockmem
083e0     4F 01 00 FF 
083e4     59 76 06 F6 | 	mov	arg02, ##@LR__1979
083e8     00 74 06 F6 | 	mov	arg01, #0
083ec     00 78 06 F6 | 	mov	arg03, #0
083f0     24 DE B1 FD | 	call	#__system___basic_print_string
083f4     00 74 06 F6 | 	mov	arg01, #0
083f8     0A 76 06 F6 | 	mov	arg02, #10
083fc     00 78 06 F6 | 	mov	arg03, #0
08400     C8 DD B1 FD | 	call	#__system___basic_print_char
08404     00 74 06 F6 | 	mov	arg01, #0
08408     C4 10 B2 FD | 	call	#__system___getiolock_1306
0840c     1A 01 68 FC | 	wrlong	#0, result1
08410     04 8E 06 F1 | 	add	local02, #4
08414     47 75 02 F6 | 	mov	arg01, local02
08418     4F 01 00 FF 
0841c     6C 78 06 F6 | 	mov	arg03, ##@LR__1980
08420     48 77 02 F6 | 	mov	arg02, local03
08424     44 BF B0 FD | 	call	#_json_property_to_double_array_0673
08428     00 74 06 F6 | 	mov	arg01, #0
0842c     A0 10 B2 FD | 	call	#__system___getiolock_1306
08430     1A 75 02 F6 | 	mov	arg01, result1
08434     38 D8 B1 FD | 	call	#__system___lockmem
08438     4F 01 00 FF 
0843c     77 76 06 F6 | 	mov	arg02, ##@LR__1981
08440     00 74 06 F6 | 	mov	arg01, #0
08444     00 78 06 F6 | 	mov	arg03, #0
08448     CC DD B1 FD | 	call	#__system___basic_print_string
0844c     47 77 02 FB | 	rdlong	arg02, local02
08450     00 74 06 F6 | 	mov	arg01, #0
08454     00 78 06 F6 | 	mov	arg03, #0
08458     66 7A 06 F6 | 	mov	arg04, #102
0845c     10 FC B1 FD | 	call	#__system___basic_print_float
08460     4F 01 00 FF 
08464     83 76 06 F6 | 	mov	arg02, ##@LR__1982
08468     00 74 06 F6 | 	mov	arg01, #0
0846c     00 78 06 F6 | 	mov	arg03, #0
08470     A4 DD B1 FD | 	call	#__system___basic_print_string
08474     00 74 06 F6 | 	mov	arg01, #0
08478     0A 76 06 F6 | 	mov	arg02, #10
0847c     00 78 06 F6 | 	mov	arg03, #0
08480     48 DD B1 FD | 	call	#__system___basic_print_char
08484     00 74 06 F6 | 	mov	arg01, #0
08488     44 10 B2 FD | 	call	#__system___getiolock_1306
0848c     1A 01 68 FC | 	wrlong	#0, result1
08490     00 74 06 F6 | 	mov	arg01, #0
08494     38 10 B2 FD | 	call	#__system___getiolock_1306
08498     1A 75 02 F6 | 	mov	arg01, result1
0849c     D0 D7 B1 FD | 	call	#__system___lockmem
084a0     4F 01 00 FF 
084a4     85 76 06 F6 | 	mov	arg02, ##@LR__1983
084a8     00 74 06 F6 | 	mov	arg01, #0
084ac     00 78 06 F6 | 	mov	arg03, #0
084b0     64 DD B1 FD | 	call	#__system___basic_print_string
084b4     00 74 06 F6 | 	mov	arg01, #0
084b8     0A 76 06 F6 | 	mov	arg02, #10
084bc     00 78 06 F6 | 	mov	arg03, #0
084c0     08 DD B1 FD | 	call	#__system___basic_print_char
084c4     00 74 06 F6 | 	mov	arg01, #0
084c8     04 10 B2 FD | 	call	#__system___getiolock_1306
084cc     1A 01 68 FC | 	wrlong	#0, result1
084d0     4F 01 00 FF 
084d4     93 76 06 F6 | 	mov	arg02, ##@LR__1984
084d8     48 75 02 F6 | 	mov	arg01, local03
084dc     F0 BD B0 FD | 	call	#_json_property_to_double_0669
084e0     1A 91 02 F6 | 	mov	local03, result1
084e4     28 8E 06 F1 | 	add	local02, #40
084e8     47 91 62 FC | 	wrlong	local03, local02
084ec     00 74 06 F6 | 	mov	arg01, #0
084f0     DC 0F B2 FD | 	call	#__system___getiolock_1306
084f4     1A 75 02 F6 | 	mov	arg01, result1
084f8     74 D7 B1 FD | 	call	#__system___lockmem
084fc     4F 01 00 FF 
08500     99 76 06 F6 | 	mov	arg02, ##@LR__1985
08504     00 74 06 F6 | 	mov	arg01, #0
08508     00 78 06 F6 | 	mov	arg03, #0
0850c     08 DD B1 FD | 	call	#__system___basic_print_string
08510     00 74 06 F6 | 	mov	arg01, #0
08514     0A 76 06 F6 | 	mov	arg02, #10
08518     00 78 06 F6 | 	mov	arg03, #0
0851c     AC DC B1 FD | 	call	#__system___basic_print_char
08520     00 74 06 F6 | 	mov	arg01, #0
08524     A8 0F B2 FD | 	call	#__system___getiolock_1306
08528     1A 01 68 FC | 	wrlong	#0, result1
0852c     B8 00 00 FF 
08530     CC D6 05 F1 | 	add	ptr__dat__, ##94412
08534     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
08538     B8 00 00 FF 
0853c     CC D6 85 F1 | 	sub	ptr__dat__, ##94412
08540                 | LR__0291
08540     A8 F0 03 F6 | 	mov	ptra, fp
08544     B3 00 A0 FD | 	call	#popregs_
08548                 | _json_to_motion_quartet_ret
08548     2D 00 64 FD | 	ret
0854c                 | 
0854c                 | _json_print_machine_profile
0854c     01 4C 05 F6 | 	mov	COUNT_, #1
08550     A9 00 A0 FD | 	call	#pushregs_
08554     3A 8D 02 F6 | 	mov	local01, arg01
08558     00 74 06 F6 | 	mov	arg01, #0
0855c     70 0F B2 FD | 	call	#__system___getiolock_1306
08560     1A 75 02 F6 | 	mov	arg01, result1
08564     08 D7 B1 FD | 	call	#__system___lockmem
08568     4F 01 00 FF 
0856c     9E 76 06 F6 | 	mov	arg02, ##@LR__1986
08570     00 74 06 F6 | 	mov	arg01, #0
08574     00 78 06 F6 | 	mov	arg03, #0
08578     9C DC B1 FD | 	call	#__system___basic_print_string
0857c     00 74 06 F6 | 	mov	arg01, #0
08580     46 77 02 F6 | 	mov	arg02, local01
08584     00 78 06 F6 | 	mov	arg03, #0
08588     8C DC B1 FD | 	call	#__system___basic_print_string
0858c     00 74 06 F6 | 	mov	arg01, #0
08590     0A 76 06 F6 | 	mov	arg02, #10
08594     00 78 06 F6 | 	mov	arg03, #0
08598     30 DC B1 FD | 	call	#__system___basic_print_char
0859c     00 74 06 F6 | 	mov	arg01, #0
085a0     2C 0F B2 FD | 	call	#__system___getiolock_1306
085a4     1A 01 68 FC | 	wrlong	#0, result1
085a8     00 74 06 F6 | 	mov	arg01, #0
085ac     20 0F B2 FD | 	call	#__system___getiolock_1306
085b0     1A 75 02 F6 | 	mov	arg01, result1
085b4     B8 D6 B1 FD | 	call	#__system___lockmem
085b8     4F 01 00 FF 
085bc     A4 76 06 F6 | 	mov	arg02, ##@LR__1987
085c0     00 74 06 F6 | 	mov	arg01, #0
085c4     00 78 06 F6 | 	mov	arg03, #0
085c8     4C DC B1 FD | 	call	#__system___basic_print_string
085cc     14 8C 06 F1 | 	add	local01, #20
085d0     46 77 02 FB | 	rdlong	arg02, local01
085d4     00 74 06 F6 | 	mov	arg01, #0
085d8     00 78 06 F6 | 	mov	arg03, #0
085dc     0A 7A 06 F6 | 	mov	arg04, #10
085e0     78 DC B1 FD | 	call	#__system___basic_print_integer
085e4     00 74 06 F6 | 	mov	arg01, #0
085e8     0A 76 06 F6 | 	mov	arg02, #10
085ec     00 78 06 F6 | 	mov	arg03, #0
085f0     D8 DB B1 FD | 	call	#__system___basic_print_char
085f4     00 74 06 F6 | 	mov	arg01, #0
085f8     D4 0E B2 FD | 	call	#__system___getiolock_1306
085fc     1A 01 68 FC | 	wrlong	#0, result1
08600     04 8C 06 F1 | 	add	local01, #4
08604     46 75 02 F6 | 	mov	arg01, local01
08608     E4 C3 B0 FD | 	call	#_json_print_machine_configuration_0696
0860c     64 8C 06 F1 | 	add	local01, #100
08610     46 75 02 F6 | 	mov	arg01, local01
08614     40 C8 B0 FD | 	call	#_json_print_machine_performance_0697
08618     A8 F0 03 F6 | 	mov	ptra, fp
0861c     B3 00 A0 FD | 	call	#popregs_
08620                 | _json_print_machine_profile_ret
08620     2D 00 64 FD | 	ret
08624                 | 
08624                 | _json_print_motion_profile
08624     02 4C 05 F6 | 	mov	COUNT_, #2
08628     A9 00 A0 FD | 	call	#pushregs_
0862c     3A 8D 02 F6 | 	mov	local01, arg01
08630     00 74 06 F6 | 	mov	arg01, #0
08634     98 0E B2 FD | 	call	#__system___getiolock_1306
08638     1A 75 02 F6 | 	mov	arg01, result1
0863c     30 D6 B1 FD | 	call	#__system___lockmem
08640     4F 01 00 FF 
08644     AC 76 06 F6 | 	mov	arg02, ##@LR__1988
08648     00 74 06 F6 | 	mov	arg01, #0
0864c     00 78 06 F6 | 	mov	arg03, #0
08650     C4 DB B1 FD | 	call	#__system___basic_print_string
08654     00 74 06 F6 | 	mov	arg01, #0
08658     46 77 02 F6 | 	mov	arg02, local01
0865c     00 78 06 F6 | 	mov	arg03, #0
08660     B4 DB B1 FD | 	call	#__system___basic_print_string
08664     00 74 06 F6 | 	mov	arg01, #0
08668     0A 76 06 F6 | 	mov	arg02, #10
0866c     00 78 06 F6 | 	mov	arg03, #0
08670     58 DB B1 FD | 	call	#__system___basic_print_char
08674     00 74 06 F6 | 	mov	arg01, #0
08678     54 0E B2 FD | 	call	#__system___getiolock_1306
0867c     1A 01 68 FC | 	wrlong	#0, result1
08680     00 74 06 F6 | 	mov	arg01, #0
08684     48 0E B2 FD | 	call	#__system___getiolock_1306
08688     1A 75 02 F6 | 	mov	arg01, result1
0868c     E0 D5 B1 FD | 	call	#__system___lockmem
08690     4F 01 00 FF 
08694     B2 76 06 F6 | 	mov	arg02, ##@LR__1989
08698     00 74 06 F6 | 	mov	arg01, #0
0869c     00 78 06 F6 | 	mov	arg03, #0
086a0     74 DB B1 FD | 	call	#__system___basic_print_string
086a4     34 8C 06 F1 | 	add	local01, #52
086a8     46 77 02 FB | 	rdlong	arg02, local01
086ac     34 8C 86 F1 | 	sub	local01, #52
086b0     00 74 06 F6 | 	mov	arg01, #0
086b4     00 78 06 F6 | 	mov	arg03, #0
086b8     0A 7A 06 F6 | 	mov	arg04, #10
086bc     9C DB B1 FD | 	call	#__system___basic_print_integer
086c0     00 74 06 F6 | 	mov	arg01, #0
086c4     0A 76 06 F6 | 	mov	arg02, #10
086c8     00 78 06 F6 | 	mov	arg03, #0
086cc     FC DA B1 FD | 	call	#__system___basic_print_char
086d0     00 74 06 F6 | 	mov	arg01, #0
086d4     F8 0D B2 FD | 	call	#__system___getiolock_1306
086d8     1A 01 68 FC | 	wrlong	#0, result1
086dc     00 74 06 F6 | 	mov	arg01, #0
086e0     EC 0D B2 FD | 	call	#__system___getiolock_1306
086e4     1A 75 02 F6 | 	mov	arg01, result1
086e8     84 D5 B1 FD | 	call	#__system___lockmem
086ec     4F 01 00 FF 
086f0     BA 76 06 F6 | 	mov	arg02, ##@LR__1990
086f4     00 74 06 F6 | 	mov	arg01, #0
086f8     00 78 06 F6 | 	mov	arg03, #0
086fc     18 DB B1 FD | 	call	#__system___basic_print_string
08700     00 74 06 F6 | 	mov	arg01, #0
08704     0A 76 06 F6 | 	mov	arg02, #10
08708     00 78 06 F6 | 	mov	arg03, #0
0870c     BC DA B1 FD | 	call	#__system___basic_print_char
08710     00 74 06 F6 | 	mov	arg01, #0
08714     B8 0D B2 FD | 	call	#__system___getiolock_1306
08718     1A 01 68 FC | 	wrlong	#0, result1
0871c     00 8E 06 F6 | 	mov	local02, #0
08720                 | '     for (int i = 0; i < profile->setCount; i++)
08720                 | LR__0292
08720     38 8C 06 F1 | 	add	local01, #56
08724     46 75 02 FB | 	rdlong	arg01, local01
08728     38 8C 86 F1 | 	sub	local01, #56
0872c     3A 8F 52 F2 | 	cmps	local02, arg01 wc
08730     24 00 90 3D |  if_ae	jmp	#LR__0293
08734     02 00 00 FF 
08738     34 8E 06 FD | 	qmul	local02, ##1076
0873c     3C 8C 06 F1 | 	add	local01, #60
08740     18 74 62 FD | 	getqx	arg01
08744     46 75 02 F1 | 	add	arg01, local01
08748     40 CC B0 FD | 	call	#_json_print_motion_set
0874c     01 8E 06 F1 | 	add	local02, #1
08750     3C 8C 86 F1 | 	sub	local01, #60
08754     C8 FF 9F FD | 	jmp	#LR__0292
08758                 | LR__0293
08758     A8 F0 03 F6 | 	mov	ptra, fp
0875c     B3 00 A0 FD | 	call	#popregs_
08760                 | _json_print_motion_profile_ret
08760     2D 00 64 FD | 	ret
08764                 | 
08764                 | _raw_to_force
08764     01 4C 05 F6 | 	mov	COUNT_, #1
08768     A9 00 A0 FD | 	call	#pushregs_
0876c     3B 8D 02 F6 | 	mov	local01, arg02
08770                 | ' {
08770                 | '     return  __builtin_round(raw - configuration->forceGaugeZeroFactor)  / (configuration->forceGaugeScaleFactor);
08770     60 8C 06 F1 | 	add	local01, #96
08774     46 35 02 FB | 	rdlong	result1, local01
08778     1A 75 82 F1 | 	sub	arg01, result1
0877c     74 EF B1 FD | 	call	#__system___float_fromint
08780     1A 75 02 F6 | 	mov	arg01, result1
08784     01 76 06 F6 | 	mov	arg02, #1
08788     8C F7 B1 FD | 	call	#__system___float_tointeger
0878c     1A 75 02 F6 | 	mov	arg01, result1
08790     60 EF B1 FD | 	call	#__system___float_fromint
08794     1A 75 02 F6 | 	mov	arg01, result1
08798     04 8C 86 F1 | 	sub	local01, #4
0879c     46 77 02 FB | 	rdlong	arg02, local01
087a0     A4 F4 B1 FD | 	call	#__system___float_div
087a4     1A 75 02 F6 | 	mov	arg01, result1
087a8     00 76 06 F6 | 	mov	arg02, #0
087ac     68 F7 B1 FD | 	call	#__system___float_tointeger
087b0     A8 F0 03 F6 | 	mov	ptra, fp
087b4     B3 00 A0 FD | 	call	#popregs_
087b8                 | _raw_to_force_ret
087b8     2D 00 64 FD | 	ret
087bc                 | 
087bc                 | _force_gauge_get_raw
087bc     03 4C 05 F6 | 	mov	COUNT_, #3
087c0     A9 00 A0 FD | 	call	#pushregs_
087c4     3A 8D 02 F6 | 	mov	local01, arg01
087c8     3B 8F 0A F6 | 	mov	local02, arg02 wz
087cc     47 01 68 5C |  if_ne	wrlong	#0, local02
087d0     46 75 02 F6 | 	mov	arg01, local01
087d4     01 76 06 F6 | 	mov	arg02, #1
087d8     20 18 B1 FD | 	call	#_read_register_1711
087dc     1A 35 E2 F8 | 	getbyte	result1, result1, #0
087e0     D8 34 0E F2 | 	cmp	result1, #216 wz
087e4     50 00 90 AD |  if_e	jmp	#LR__0294
087e8     00 74 06 F6 | 	mov	arg01, #0
087ec     E0 0C B2 FD | 	call	#__system___getiolock_1306
087f0     1A 75 02 F6 | 	mov	arg01, result1
087f4     78 D4 B1 FD | 	call	#__system___lockmem
087f8     4F 01 00 FF 
087fc     C0 76 06 F6 | 	mov	arg02, ##@LR__1991
08800     00 74 06 F6 | 	mov	arg01, #0
08804     00 78 06 F6 | 	mov	arg03, #0
08808     0C DA B1 FD | 	call	#__system___basic_print_string
0880c     00 74 06 F6 | 	mov	arg01, #0
08810     0A 76 06 F6 | 	mov	arg02, #10
08814     00 78 06 F6 | 	mov	arg03, #0
08818     B0 D9 B1 FD | 	call	#__system___basic_print_char
0881c     00 74 06 F6 | 	mov	arg01, #0
08820     AC 0C B2 FD | 	call	#__system___getiolock_1306
08824     1A 01 68 FC | 	wrlong	#0, result1
08828     00 8E 0E F2 | 	cmp	local02, #0 wz
0882c     47 31 69 5C |  if_ne	wrlong	#152, local02
08830                 | '         seterror(err,FORCEGAUGE_CONNECTION_LOST);
08830                 | '         return 0;
08830     00 34 06 F6 | 	mov	result1, #0
08834     74 00 90 FD | 	jmp	#LR__0295
08838                 | LR__0294
08838     46 75 02 F6 | 	mov	arg01, local01
0883c     02 76 06 F6 | 	mov	arg02, #2
08840     B8 17 B1 FD | 	call	#_read_register_1711
08844     0C 8C 06 F1 | 	add	local01, #12
08848     55 74 06 F6 | 	mov	arg01, #85
0884c     C9 8E 02 F6 | 	mov	local02, objptr
08850     46 93 01 F6 | 	mov	objptr, local01
08854     FC 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08858     46 93 01 F6 | 	mov	objptr, local01
0885c     10 74 06 F6 | 	mov	arg01, #16
08860     F0 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08864     46 93 01 F6 | 	mov	objptr, local01
08868     64 74 06 F6 | 	mov	arg01, #100
0886c     60 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
08870     46 93 01 F6 | 	mov	objptr, local01
08874     64 74 06 F6 | 	mov	arg01, #100
08878     54 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0887c     1A 91 02 F6 | 	mov	local03, result1
08880     46 93 01 F6 | 	mov	objptr, local01
08884     64 74 06 F6 | 	mov	arg01, #100
08888     44 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0888c     08 34 66 F0 | 	shl	result1, #8
08890     1A 91 42 F5 | 	or	local03, result1
08894     64 74 06 F6 | 	mov	arg01, #100
08898     46 93 01 F6 | 	mov	objptr, local01
0889c     30 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
088a0     47 93 01 F6 | 	mov	objptr, local02
088a4     10 34 66 F0 | 	shl	result1, #16
088a8                 | '     forceRaw |= forceGauge->serial.rxtime(100) << 8;
088a8                 | '     forceRaw |= forceGauge->serial.rxtime(100) << 16;
088a8                 | '     return forceRaw;
088a8     48 35 42 F5 | 	or	result1, local03
088ac                 | LR__0295
088ac     A8 F0 03 F6 | 	mov	ptra, fp
088b0     B3 00 A0 FD | 	call	#popregs_
088b4                 | _force_gauge_get_raw_ret
088b4     2D 00 64 FD | 	ret
088b8                 | 
088b8                 | _force_gauge_begin
088b8     04 4C 05 F6 | 	mov	COUNT_, #4
088bc     A9 00 A0 FD | 	call	#pushregs_
088c0     3A 8D 02 F6 | 	mov	local01, arg01
088c4     3B 8F 02 F6 | 	mov	local02, arg02
088c8     3C 91 02 F6 | 	mov	local03, arg03
088cc     64 74 06 F6 | 	mov	arg01, #100
088d0     B4 D4 B1 FD | 	call	#__system___waitms
088d4     0C 8C 06 F1 | 	add	local01, #12
088d8     47 75 02 F6 | 	mov	arg01, local02
088dc     48 77 02 F6 | 	mov	arg02, local03
088e0     03 78 06 F6 | 	mov	arg03, #3
088e4     4B 00 00 FF 
088e8     00 7A 06 F6 | 	mov	arg04, ##38400
088ec     C9 90 02 F6 | 	mov	local03, objptr
088f0     46 93 01 F6 | 	mov	objptr, local01
088f4     70 37 B1 FD | 	call	#_jm_fullduplexserial_spin2_start
088f8     46 93 01 F6 | 	mov	objptr, local01
088fc     55 74 06 F6 | 	mov	arg01, #85
08900     50 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08904     46 93 01 F6 | 	mov	objptr, local01
08908     0C 8C 86 F1 | 	sub	local01, #12
0890c     06 74 06 F6 | 	mov	arg01, #6
08910     40 3A B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08914     48 93 01 F6 | 	mov	objptr, local03
08918     64 74 06 F6 | 	mov	arg01, #100
0891c     68 D4 B1 FD | 	call	#__system___waitms
08920     46 75 02 F6 | 	mov	arg01, local01
08924     01 76 06 F6 | 	mov	arg02, #1
08928     D8 78 06 F6 | 	mov	arg03, #216
0892c     78 16 B1 FD | 	call	#_write_register_1709
08930     46 75 02 F6 | 	mov	arg01, local01
08934     02 76 06 F6 | 	mov	arg02, #2
08938     40 78 06 F6 | 	mov	arg03, #64
0893c     68 16 B1 FD | 	call	#_write_register_1709
08940     46 75 02 F6 | 	mov	arg01, local01
08944     04 76 06 F6 | 	mov	arg02, #4
08948     77 78 06 F6 | 	mov	arg03, #119
0894c     58 16 B1 FD | 	call	#_write_register_1709
08950     46 75 02 F6 | 	mov	arg01, local01
08954     01 76 06 F6 | 	mov	arg02, #1
08958     A0 16 B1 FD | 	call	#_read_register_1711
0895c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
08960     D8 34 0E F2 | 	cmp	result1, #216 wz
08964                 | '     {
08964                 | '         return FORCEGAUGE_NOT_RESPONDING;
08964     97 34 06 56 |  if_ne	mov	result1, #151
08968     64 00 90 5D |  if_ne	jmp	#LR__0296
0896c     46 75 02 F6 | 	mov	arg01, local01
08970     02 76 06 F6 | 	mov	arg02, #2
08974     84 16 B1 FD | 	call	#_read_register_1711
08978     1A 35 E2 F8 | 	getbyte	result1, result1, #0
0897c     40 34 0E F2 | 	cmp	result1, #64 wz
08980                 | '     {
08980                 | '         return FORCEGAUGE_NOT_RESPONDING;
08980     97 34 06 56 |  if_ne	mov	result1, #151
08984     48 00 90 5D |  if_ne	jmp	#LR__0296
08988     46 75 02 F6 | 	mov	arg01, local01
0898c     04 76 06 F6 | 	mov	arg02, #4
08990     68 16 B1 FD | 	call	#_read_register_1711
08994     1A 35 E2 F8 | 	getbyte	result1, result1, #0
08998     77 34 0E F2 | 	cmp	result1, #119 wz
0899c                 | '     {
0899c                 | '         return FORCEGAUGE_NOT_RESPONDING;
0899c     97 34 06 56 |  if_ne	mov	result1, #151
089a0     2C 00 90 5D |  if_ne	jmp	#LR__0296
089a4     0C 8C 06 F1 | 	add	local01, #12
089a8     46 93 02 F6 | 	mov	local04, local01
089ac     55 74 06 F6 | 	mov	arg01, #85
089b0     C9 90 02 F6 | 	mov	local03, objptr
089b4     49 93 01 F6 | 	mov	objptr, local04
089b8     98 39 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
089bc     46 93 01 F6 | 	mov	objptr, local01
089c0     08 74 06 F6 | 	mov	arg01, #8
089c4     8C 39 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
089c8     48 93 01 F6 | 	mov	objptr, local03
089cc                 | '     }
089cc                 | ' 
089cc                 | '     forceGauge->serial.tx(0x55);
089cc                 | '     forceGauge->serial.tx(0x08);
089cc                 | '     return SUCCESS;
089cc     00 34 06 F6 | 	mov	result1, #0
089d0                 | LR__0296
089d0     A8 F0 03 F6 | 	mov	ptra, fp
089d4     B3 00 A0 FD | 	call	#popregs_
089d8                 | _force_gauge_begin_ret
089d8     2D 00 64 FD | 	ret
089dc                 | 
089dc                 | _module_animation_switch_page_up
089dc     02 4C 05 F6 | 	mov	COUNT_, #2
089e0     A9 00 A0 FD | 	call	#pushregs_
089e4     3A 8D 02 F6 | 	mov	local01, arg01
089e8     64 8E 06 F6 | 	mov	local02, #100
089ec                 | ' 
089ec                 | '     for (int i = movePx; i <  600  - movePx; i += movePx)
089ec                 | LR__0297
089ec     F4 8F 56 F2 | 	cmps	local02, #500 wc
089f0     6C 00 90 3D |  if_ae	jmp	#LR__0298
089f4     46 75 02 F6 | 	mov	arg01, local01
089f8     20 1C 00 FF 
089fc     00 76 06 F6 | 	mov	arg02, ##3686400
08a00     0A 78 C6 F9 | 	decod	arg03, #10
08a04     00 7A 06 F6 | 	mov	arg04, #0
08a08     47 7D 02 F6 | 	mov	arg05, local02
08a0c     00 7E 06 F6 | 	mov	arg06, #0
08a10     0A 80 C6 F9 | 	decod	arg07, #10
08a14     00 82 06 F6 | 	mov	arg08, #0
08a18     F4 85 06 F6 | 	mov	arg09, #500
08a1c     0A 86 C6 F9 | 	decod	arg10, #10
08a20     64 88 06 F6 | 	mov	arg11, #100
08a24     00 BC BF FD | 	call	#_display_bte_memory_copy
08a28     46 75 02 F6 | 	mov	arg01, local01
08a2c     00 76 06 F6 | 	mov	arg02, #0
08a30     0A 78 C6 F9 | 	decod	arg03, #10
08a34     00 7A 06 F6 | 	mov	arg04, #0
08a38     64 7C 06 F6 | 	mov	arg05, #100
08a3c     00 7E 06 F6 | 	mov	arg06, #0
08a40     0A 80 C6 F9 | 	decod	arg07, #10
08a44     00 82 06 F6 | 	mov	arg08, #0
08a48     00 84 06 F6 | 	mov	arg09, #0
08a4c     0A 86 C6 F9 | 	decod	arg10, #10
08a50     F4 89 06 F6 | 	mov	arg11, #500
08a54     D0 BB BF FD | 	call	#_display_bte_memory_copy
08a58     64 8E 06 F1 | 	add	local02, #100
08a5c     8C FF 9F FD | 	jmp	#LR__0297
08a60                 | LR__0298
08a60     46 75 02 F6 | 	mov	arg01, local01
08a64     20 1C 00 FF 
08a68     00 76 06 F6 | 	mov	arg02, ##3686400
08a6c     0A 78 C6 F9 | 	decod	arg03, #10
08a70     00 7A 06 F6 | 	mov	arg04, #0
08a74     00 7C 06 F6 | 	mov	arg05, #0
08a78     00 7E 06 F6 | 	mov	arg06, #0
08a7c     0A 80 C6 F9 | 	decod	arg07, #10
08a80     00 82 06 F6 | 	mov	arg08, #0
08a84     00 84 06 F6 | 	mov	arg09, #0
08a88     0A 86 C6 F9 | 	decod	arg10, #10
08a8c     01 00 00 FF 
08a90     58 88 06 F6 | 	mov	arg11, ##600
08a94     90 BB BF FD | 	call	#_display_bte_memory_copy
08a98     A8 F0 03 F6 | 	mov	ptra, fp
08a9c     B3 00 A0 FD | 	call	#popregs_
08aa0                 | _module_animation_switch_page_up_ret
08aa0     2D 00 64 FD | 	ret
08aa4                 | 
08aa4                 | _module_animation_switch_page_down
08aa4     02 4C 05 F6 | 	mov	COUNT_, #2
08aa8     A9 00 A0 FD | 	call	#pushregs_
08aac     3A 8D 02 F6 | 	mov	local01, arg01
08ab0     28 8E 06 F6 | 	mov	local02, #40
08ab4                 | '     for (int i = movePx; i <  600  - movePx; i += movePx)
08ab4                 | LR__0299
08ab4     01 00 00 FF 
08ab8     30 8E 56 F2 | 	cmps	local02, ##560 wc
08abc     44 00 90 3D |  if_ae	jmp	#LR__0300
08ac0     46 75 02 F6 | 	mov	arg01, local01
08ac4     01 00 00 FF 
08ac8     58 7C 06 F6 | 	mov	arg05, ##600
08acc     47 7D 82 F1 | 	sub	arg05, local02
08ad0     20 1C 00 FF 
08ad4     00 76 06 F6 | 	mov	arg02, ##3686400
08ad8     0A 78 C6 F9 | 	decod	arg03, #10
08adc     00 7A 06 F6 | 	mov	arg04, #0
08ae0     00 7E 06 F6 | 	mov	arg06, #0
08ae4     0A 80 C6 F9 | 	decod	arg07, #10
08ae8     00 82 06 F6 | 	mov	arg08, #0
08aec     00 84 06 F6 | 	mov	arg09, #0
08af0     0A 86 C6 F9 | 	decod	arg10, #10
08af4     47 89 02 F6 | 	mov	arg11, local02
08af8     2C BB BF FD | 	call	#_display_bte_memory_copy
08afc     28 8E 06 F1 | 	add	local02, #40
08b00     B0 FF 9F FD | 	jmp	#LR__0299
08b04                 | LR__0300
08b04     46 75 02 F6 | 	mov	arg01, local01
08b08     20 1C 00 FF 
08b0c     00 76 06 F6 | 	mov	arg02, ##3686400
08b10     0A 78 C6 F9 | 	decod	arg03, #10
08b14     00 7A 06 F6 | 	mov	arg04, #0
08b18     00 7C 06 F6 | 	mov	arg05, #0
08b1c     00 7E 06 F6 | 	mov	arg06, #0
08b20     0A 80 C6 F9 | 	decod	arg07, #10
08b24     00 82 06 F6 | 	mov	arg08, #0
08b28     00 84 06 F6 | 	mov	arg09, #0
08b2c     0A 86 C6 F9 | 	decod	arg10, #10
08b30     01 00 00 FF 
08b34     58 88 06 F6 | 	mov	arg11, ##600
08b38     EC BA BF FD | 	call	#_display_bte_memory_copy
08b3c     A8 F0 03 F6 | 	mov	ptra, fp
08b40     B3 00 A0 FD | 	call	#popregs_
08b44                 | _module_animation_switch_page_down_ret
08b44     2D 00 64 FD | 	ret
08b48                 | 
08b48                 | _module_init
08b48     03 4C 05 F6 | 	mov	COUNT_, #3
08b4c     A9 00 A0 FD | 	call	#pushregs_
08b50     3A 8D 02 F6 | 	mov	local01, arg01
08b54     3B 8F 02 F6 | 	mov	local02, arg02
08b58     46 8F 62 FC | 	wrlong	local02, local01
08b5c     CC 8C 06 F1 | 	add	local01, #204
08b60     46 01 68 FC | 	wrlong	#0, local01
08b64     18 8C 06 F1 | 	add	local01, #24
08b68     46 01 68 FC | 	wrlong	#0, local01
08b6c     34 8C 06 F1 | 	add	local01, #52
08b70     46 03 48 FC | 	wrbyte	#1, local01
08b74     04 8C 06 F1 | 	add	local01, #4
08b78     46 01 68 FC | 	wrlong	#0, local01
08b7c     04 8C 06 F1 | 	add	local01, #4
08b80     46 C9 68 FC | 	wrlong	#100, local01
08b84     14 8C 06 F1 | 	add	local01, #20
08b88     46 01 68 FC | 	wrlong	#0, local01
08b8c     04 8C 06 F1 | 	add	local01, #4
08b90     46 01 68 FC | 	wrlong	#0, local01
08b94     04 8C 06 F1 | 	add	local01, #4
08b98     46 01 68 FC | 	wrlong	#0, local01
08b9c     54 8C 86 F1 | 	sub	local01, #84
08ba0     46 01 68 FC | 	wrlong	#0, local01
08ba4     04 8C 06 F1 | 	add	local01, #4
08ba8     46 01 68 FC | 	wrlong	#0, local01
08bac     04 8C 06 F1 | 	add	local01, #4
08bb0     46 01 68 FC | 	wrlong	#0, local01
08bb4     04 8C 06 F1 | 	add	local01, #4
08bb8     46 01 68 FC | 	wrlong	#0, local01
08bbc     04 8C 06 F1 | 	add	local01, #4
08bc0     46 01 68 FC | 	wrlong	#0, local01
08bc4     04 8C 06 F1 | 	add	local01, #4
08bc8     46 01 68 FC | 	wrlong	#0, local01
08bcc     04 8C 06 F1 | 	add	local01, #4
08bd0     46 01 68 FC | 	wrlong	#0, local01
08bd4     04 8C 06 F1 | 	add	local01, #4
08bd8     46 01 68 FC | 	wrlong	#0, local01
08bdc     04 8C 06 F1 | 	add	local01, #4
08be0     FF FF FF FF 
08be4     46 FF 6B FC | 	wrlong	##-1, local01
08be8     20 8C 06 F1 | 	add	local01, #32
08bec     46 01 68 FC | 	wrlong	#0, local01
08bf0     C9 74 02 F6 | 	mov	arg01, objptr
08bf4     06 77 02 F6 | 	mov	arg02, ptr__module_animation_touch_1725_
08bf8     3C D0 B1 FD | 	call	#__system___make_methodptr
08bfc     04 8C 06 F1 | 	add	local01, #4
08c00     46 35 62 FC | 	wrlong	result1, local01
08c04     04 8C 06 F1 | 	add	local01, #4
08c08     46 01 68 FC | 	wrlong	#0, local01
08c0c     30 8D 86 F1 | 	sub	local01, #304
08c10     00 8E 0E F2 | 	cmp	local02, #0 wz
08c14     7C 00 90 AD |  if_e	jmp	#LR__0303
08c18     E4 8E 06 F1 | 	add	local02, #228
08c1c     47 91 02 FB | 	rdlong	local03, local02
08c20     E4 8E 86 F1 | 	sub	local02, #228
08c24     32 90 56 F2 | 	cmps	local03, #50 wc
08c28     28 00 90 3D |  if_ae	jmp	#LR__0301
08c2c     E4 8E 06 F1 | 	add	local02, #228
08c30     47 91 02 FB | 	rdlong	local03, local02
08c34     01 90 06 F1 | 	add	local03, #1
08c38     47 91 62 FC | 	wrlong	local03, local02
08c3c     01 90 86 F1 | 	sub	local03, #1
08c40     02 90 66 F0 | 	shl	local03, #2
08c44     E0 8E 86 F1 | 	sub	local02, #224
08c48     47 91 02 F1 | 	add	local03, local02
08c4c     48 8D 62 FC | 	wrlong	local01, local03
08c50     40 00 90 FD | 	jmp	#LR__0302
08c54                 | LR__0301
08c54     00 74 06 F6 | 	mov	arg01, #0
08c58     74 08 B2 FD | 	call	#__system___getiolock_1306
08c5c     1A 75 02 F6 | 	mov	arg01, result1
08c60     0C D0 B1 FD | 	call	#__system___lockmem
08c64     4F 01 00 FF 
08c68     DB 76 06 F6 | 	mov	arg02, ##@LR__1992
08c6c     00 74 06 F6 | 	mov	arg01, #0
08c70     00 78 06 F6 | 	mov	arg03, #0
08c74     A0 D5 B1 FD | 	call	#__system___basic_print_string
08c78     00 74 06 F6 | 	mov	arg01, #0
08c7c     0A 76 06 F6 | 	mov	arg02, #10
08c80     00 78 06 F6 | 	mov	arg03, #0
08c84     44 D5 B1 FD | 	call	#__system___basic_print_char
08c88     00 74 06 F6 | 	mov	arg01, #0
08c8c     40 08 B2 FD | 	call	#__system___getiolock_1306
08c90     1A 01 68 FC | 	wrlong	#0, result1
08c94                 | LR__0302
08c94                 | LR__0303
08c94     A8 F0 03 F6 | 	mov	ptra, fp
08c98     B3 00 A0 FD | 	call	#popregs_
08c9c                 | _module_init_ret
08c9c     2D 00 64 FD | 	ret
08ca0                 | 
08ca0                 | _module_update_check
08ca0     05 4C 05 F6 | 	mov	COUNT_, #5
08ca4     A9 00 A0 FD | 	call	#pushregs_
08ca8                 | _module_update_check_enter
08ca8     3A 8D 02 F6 | 	mov	local01, arg01
08cac     3B 8F 02 F6 | 	mov	local02, arg02
08cb0     3C 91 02 F6 | 	mov	local03, arg03
08cb4     CC 8E 06 F1 | 	add	local02, #204
08cb8     47 93 02 FB | 	rdlong	local04, local02
08cbc     CC 8E 86 F1 | 	sub	local02, #204
08cc0     08 92 0E F2 | 	cmp	local04, #8 wz
08cc4     D0 8E 06 A1 |  if_e	add	local02, #208
08cc8     47 91 02 AB |  if_e	rdlong	local03, local02
08ccc     D0 8E 86 A1 |  if_e	sub	local02, #208
08cd0     00 94 06 F6 | 	mov	local05, #0
08cd4                 | '     {
08cd4                 | '         arg = module->data.ptr;
08cd4                 | '     }
08cd4                 | '     for (int i = 0; i < module->numChildren; i++)
08cd4                 | LR__0304
08cd4     E4 8E 06 F1 | 	add	local02, #228
08cd8     47 93 02 FB | 	rdlong	local04, local02
08cdc     E4 8E 86 F1 | 	sub	local02, #228
08ce0     49 95 52 F2 | 	cmps	local05, local04 wc
08ce4     2C 00 90 3D |  if_ae	jmp	#LR__0305
08ce8     46 75 02 F6 | 	mov	arg01, local01
08cec     4A 93 02 F6 | 	mov	local04, local05
08cf0     02 92 66 F0 | 	shl	local04, #2
08cf4     04 8E 06 F1 | 	add	local02, #4
08cf8     47 93 02 F1 | 	add	local04, local02
08cfc     49 77 02 FB | 	rdlong	arg02, local04
08d00     48 79 02 F6 | 	mov	arg03, local03
08d04     98 FF BF FD | 	call	#_module_update_check
08d08     01 94 06 F1 | 	add	local05, #1
08d0c     04 8E 86 F1 | 	sub	local02, #4
08d10     C0 FF 9F FD | 	jmp	#LR__0304
08d14                 | LR__0305
08d14     38 8F 06 F1 | 	add	local02, #312
08d18     47 75 02 FB | 	rdlong	arg01, local02
08d1c     38 8F 86 F1 | 	sub	local02, #312
08d20     00 76 06 F6 | 	mov	arg02, #0
08d24     80 CF B1 FD | 	call	#__system___funcptr_cmp
08d28     00 34 0E F2 | 	cmp	result1, #0 wz
08d2c     34 00 90 AD |  if_e	jmp	#LR__0306
08d30     38 8F 06 F1 | 	add	local02, #312
08d34     47 93 02 FB | 	rdlong	local04, local02
08d38     38 8F 86 F1 | 	sub	local02, #312
08d3c     49 95 02 FB | 	rdlong	local05, local04
08d40     04 92 06 F1 | 	add	local04, #4
08d44     49 93 02 FB | 	rdlong	local04, local04
08d48     46 75 02 F6 | 	mov	arg01, local01
08d4c     47 77 02 F6 | 	mov	arg02, local02
08d50     48 79 02 F6 | 	mov	arg03, local03
08d54     C9 90 02 F6 | 	mov	local03, objptr
08d58     4A 93 01 F6 | 	mov	objptr, local05
08d5c     2D 92 62 FD | 	call	local04
08d60     48 93 01 F6 | 	mov	objptr, local03
08d64                 | LR__0306
08d64     A8 F0 03 F6 | 	mov	ptra, fp
08d68     B3 00 A0 FD | 	call	#popregs_
08d6c                 | _module_update_check_ret
08d6c     2D 00 64 FD | 	ret
08d70                 | 
08d70                 | _module_touch_check
08d70     12 4C 05 F6 | 	mov	COUNT_, #18
08d74     A9 00 A0 FD | 	call	#pushregs_
08d78                 | _module_touch_check_enter
08d78     3A 8D 02 F6 | 	mov	local01, arg01
08d7c     3B 8F 02 F6 | 	mov	local02, arg02
08d80     3C 91 02 F6 | 	mov	local03, arg03
08d84     28 8E 06 F1 | 	add	local02, #40
08d88     47 77 0A FB | 	rdlong	arg02, local02 wz
08d8c     28 8E 86 F1 | 	sub	local02, #40
08d90     18 8D 06 51 |  if_ne	add	local01, #280
08d94     46 93 C2 5A |  if_ne	rdbyte	local04, local01
08d98     18 8D 86 51 |  if_ne	sub	local01, #280
08d9c     00 92 4E 52 |  if_ne	cmps	local04, #0 wz
08da0                 | '     {
08da0                 | '         return 0;
08da0     00 34 06 A6 |  if_e	mov	result1, #0
08da4     38 02 90 AD |  if_e	jmp	#LR__0313
08da8     CC 8C 06 F1 | 	add	local01, #204
08dac     46 95 02 FB | 	rdlong	local05, local01
08db0     CC 8C 86 F1 | 	sub	local01, #204
08db4     08 94 0E F2 | 	cmp	local05, #8 wz
08db8     D0 8C 06 A1 |  if_e	add	local01, #208
08dbc     46 91 02 AB |  if_e	rdlong	local03, local01
08dc0     D0 8C 86 A1 |  if_e	sub	local01, #208
08dc4     00 96 06 F6 | 	mov	local06, #0
08dc8     00 98 06 F6 | 	mov	local07, #0
08dcc                 | '     for (int i = 0; i < root->numChildren; i++)
08dcc                 | LR__0307
08dcc     E4 8C 06 F1 | 	add	local01, #228
08dd0     46 95 02 FB | 	rdlong	local05, local01
08dd4     E4 8C 86 F1 | 	sub	local01, #228
08dd8     4A 99 52 F2 | 	cmps	local07, local05 wc
08ddc     34 00 90 3D |  if_ae	jmp	#LR__0308
08de0     4C 93 02 F6 | 	mov	local04, local07
08de4     02 92 66 F0 | 	shl	local04, #2
08de8     04 8C 06 F1 | 	add	local01, #4
08dec     46 93 02 F1 | 	add	local04, local01
08df0     49 75 02 FB | 	rdlong	arg01, local04
08df4     47 77 02 F6 | 	mov	arg02, local02
08df8     48 79 02 F6 | 	mov	arg03, local03
08dfc     70 FF BF FD | 	call	#_module_touch_check
08e00     1A 9B 02 F6 | 	mov	local08, result1
08e04     1A 97 02 F1 | 	add	local06, result1
08e08     01 98 06 F1 | 	add	local07, #1
08e0c     04 8C 86 F1 | 	sub	local01, #4
08e10     B8 FF 9F FD | 	jmp	#LR__0307
08e14                 | LR__0308
08e14     34 8D 06 F1 | 	add	local01, #308
08e18     46 75 02 FB | 	rdlong	arg01, local01
08e1c     00 76 06 F6 | 	mov	arg02, #0
08e20     84 CE B1 FD | 	call	#__system___funcptr_cmp
08e24     00 34 0E F2 | 	cmp	result1, #0 wz
08e28     20 8E 06 F1 | 	add	local02, #32
08e2c     47 93 E2 FA | 	rdword	local04, local02
08e30     20 8E 86 F1 | 	sub	local02, #32
08e34     0A 94 C6 F9 | 	decod	local05, #10
08e38     49 95 82 F1 | 	sub	local05, local04
08e3c     4C 8C 86 F1 | 	sub	local01, #76
08e40     46 93 02 FB | 	rdlong	local04, local01
08e44     E8 8C 86 F1 | 	sub	local01, #232
08e48     49 95 5A F2 | 	cmps	local05, local04 wcz
08e4c     8C 01 90 ED |  if_be	jmp	#LR__0312
08e50     20 8E 06 F1 | 	add	local02, #32
08e54     47 9D E2 FA | 	rdword	local09, local02
08e58     20 8E 86 F1 | 	sub	local02, #32
08e5c     4E 9F 32 F9 | 	getword	local10, local09, #0
08e60     0A A0 C6 F9 | 	decod	local11, #10
08e64     4F A1 82 F1 | 	sub	local11, local10
08e68     E8 8C 06 F1 | 	add	local01, #232
08e6c     46 A3 02 FB | 	rdlong	local12, local01
08e70     51 A5 02 F6 | 	mov	local13, local12
08e74     08 8C 06 F1 | 	add	local01, #8
08e78     46 A7 02 FB | 	rdlong	local14, local01
08e7c     F0 8C 86 F1 | 	sub	local01, #240
08e80     53 A9 02 F6 | 	mov	local15, local14
08e84     53 A5 02 F1 | 	add	local13, local14
08e88     52 A1 52 F2 | 	cmps	local11, local13 wc
08e8c     4C 01 90 3D |  if_ae	jmp	#LR__0312
08e90     22 8E 06 F1 | 	add	local02, #34
08e94     47 AB E2 FA | 	rdword	local16, local02
08e98     22 8E 86 F1 | 	sub	local02, #34
08e9c     55 AD 32 F9 | 	getword	local17, local16, #0
08ea0     01 00 00 FF 
08ea4     58 94 06 F6 | 	mov	local05, ##600
08ea8     56 95 82 F1 | 	sub	local05, local17
08eac     EC 8C 06 F1 | 	add	local01, #236
08eb0     46 AF 02 FB | 	rdlong	local18, local01
08eb4     EC 8C 86 F1 | 	sub	local01, #236
08eb8     57 93 02 F6 | 	mov	local04, local18
08ebc     49 95 5A F2 | 	cmps	local05, local04 wcz
08ec0     18 01 90 ED |  if_be	jmp	#LR__0311
08ec4     22 8E 06 F1 | 	add	local02, #34
08ec8     47 9D E2 FA | 	rdword	local09, local02
08ecc     22 8E 86 F1 | 	sub	local02, #34
08ed0     4E 9F 32 F9 | 	getword	local10, local09, #0
08ed4     01 00 00 FF 
08ed8     58 A0 06 F6 | 	mov	local11, ##600
08edc     4F A1 82 F1 | 	sub	local11, local10
08ee0     EC 8C 06 F1 | 	add	local01, #236
08ee4     46 A3 02 FB | 	rdlong	local12, local01
08ee8     51 A5 02 F6 | 	mov	local13, local12
08eec     08 8C 06 F1 | 	add	local01, #8
08ef0     46 A7 02 FB | 	rdlong	local14, local01
08ef4     F4 8C 86 F1 | 	sub	local01, #244
08ef8     53 A9 02 F6 | 	mov	local15, local14
08efc     53 A5 02 F1 | 	add	local13, local14
08f00     52 A1 52 F2 | 	cmps	local11, local13 wc
08f04     D4 00 90 3D |  if_ae	jmp	#LR__0311
08f08     34 8D 06 F1 | 	add	local01, #308
08f0c     46 75 02 FB | 	rdlong	arg01, local01
08f10     34 8D 86 F1 | 	sub	local01, #308
08f14     00 AC 06 F6 | 	mov	local17, #0
08f18     00 76 06 F6 | 	mov	arg02, #0
08f1c     88 CD B1 FD | 	call	#__system___funcptr_cmp
08f20     1A 95 0A F6 | 	mov	local05, result1 wz
08f24     B4 00 90 AD |  if_e	jmp	#LR__0310
08f28     74 CB B1 FD | 	call	#__system___getms
08f2c     1C 8D 06 F1 | 	add	local01, #284
08f30     46 35 62 FC | 	wrlong	result1, local01
08f34     18 8C 06 F1 | 	add	local01, #24
08f38     46 93 02 FB | 	rdlong	local04, local01
08f3c     49 95 02 F6 | 	mov	local05, local04
08f40     4A AD 02 FB | 	rdlong	local17, local05
08f44     04 94 06 F1 | 	add	local05, #4
08f48     4A AF 02 FB | 	rdlong	local18, local05
08f4c     57 AB 02 F6 | 	mov	local16, local18
08f50     10 8C 86 F1 | 	sub	local01, #16
08f54     46 A1 02 FB | 	rdlong	local11, local01
08f58     48 9F 02 F6 | 	mov	local10, local03
08f5c     50 75 02 F6 | 	mov	arg01, local11
08f60     4F 77 02 F6 | 	mov	arg02, local10
08f64     C9 9C 02 F6 | 	mov	local09, objptr
08f68     56 93 01 F6 | 	mov	objptr, local17
08f6c     2D AA 62 FD | 	call	local16
08f70     4E 93 01 F6 | 	mov	objptr, local09
08f74     01 96 06 F1 | 	add	local06, #1
08f78     08 8C 06 F1 | 	add	local01, #8
08f7c     46 75 02 FB | 	rdlong	arg01, local01
08f80     2C 8D 86 F1 | 	sub	local01, #300
08f84     00 AC 06 F6 | 	mov	local17, #0
08f88     00 76 06 F6 | 	mov	arg02, #0
08f8c     18 CD B1 FD | 	call	#__system___funcptr_cmp
08f90     1A 95 0A F6 | 	mov	local05, result1 wz
08f94     44 00 90 AD |  if_e	jmp	#LR__0309
08f98     2C 8D 06 F1 | 	add	local01, #300
08f9c     46 93 02 FB | 	rdlong	local04, local01
08fa0     2C 8D 86 F1 | 	sub	local01, #300
08fa4     49 95 02 F6 | 	mov	local05, local04
08fa8     4A AD 02 FB | 	rdlong	local17, local05
08fac     04 94 06 F1 | 	add	local05, #4
08fb0     4A AF 02 FB | 	rdlong	local18, local05
08fb4     04 94 86 F1 | 	sub	local05, #4
08fb8     57 AB 02 F6 | 	mov	local16, local18
08fbc     47 A1 02 F6 | 	mov	local11, local02
08fc0     46 9F 02 F6 | 	mov	local10, local01
08fc4     50 75 02 F6 | 	mov	arg01, local11
08fc8     4F 77 02 F6 | 	mov	arg02, local10
08fcc     C9 9C 02 F6 | 	mov	local09, objptr
08fd0     56 93 01 F6 | 	mov	objptr, local17
08fd4     2D AA 62 FD | 	call	local16
08fd8     4E 93 01 F6 | 	mov	objptr, local09
08fdc                 | LR__0309
08fdc                 | LR__0310
08fdc                 | LR__0311
08fdc                 | LR__0312
08fdc                 | '                 {
08fdc                 | '                     root->touchAnimate(display, root);
08fdc                 | '                 }
08fdc                 | '             }
08fdc                 | '         }
08fdc                 | '     }
08fdc                 | '     return touchCount;
08fdc     4B 35 02 F6 | 	mov	result1, local06
08fe0                 | LR__0313
08fe0     A8 F0 03 F6 | 	mov	ptra, fp
08fe4     B3 00 A0 FD | 	call	#popregs_
08fe8                 | _module_touch_check_ret
08fe8     2D 00 64 FD | 	ret
08fec                 | 
08fec                 | _module_copy
08fec     CC 76 06 F1 | 	add	arg02, #204
08ff0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ff4     CC 74 06 F1 | 	add	arg01, #204
08ff8     3A 3B 62 FC | 	wrlong	_var01, arg01
08ffc     1C 76 06 F1 | 	add	arg02, #28
09000     3B 3B 02 FB | 	rdlong	_var01, arg02
09004     1C 74 06 F1 | 	add	arg01, #28
09008     3A 3B 62 FC | 	wrlong	_var01, arg01
0900c     04 76 06 F1 | 	add	arg02, #4
09010     3B 3B 02 FB | 	rdlong	_var01, arg02
09014     04 74 06 F1 | 	add	arg01, #4
09018     3A 3B 62 FC | 	wrlong	_var01, arg01
0901c     04 76 06 F1 | 	add	arg02, #4
09020     3B 3B 02 FB | 	rdlong	_var01, arg02
09024     04 74 06 F1 | 	add	arg01, #4
09028     3A 3B 62 FC | 	wrlong	_var01, arg01
0902c     04 76 06 F1 | 	add	arg02, #4
09030     3B 3B 02 FB | 	rdlong	_var01, arg02
09034     04 74 06 F1 | 	add	arg01, #4
09038     3A 3B 62 FC | 	wrlong	_var01, arg01
0903c     04 76 06 F1 | 	add	arg02, #4
09040     3B 3B 02 FB | 	rdlong	_var01, arg02
09044     04 74 06 F1 | 	add	arg01, #4
09048     3A 3B 62 FC | 	wrlong	_var01, arg01
0904c     04 76 06 F1 | 	add	arg02, #4
09050     3B 3B 02 FB | 	rdlong	_var01, arg02
09054     04 74 06 F1 | 	add	arg01, #4
09058     3A 3B 62 FC | 	wrlong	_var01, arg01
0905c     04 76 06 F1 | 	add	arg02, #4
09060     3B 3B 02 FB | 	rdlong	_var01, arg02
09064     04 74 06 F1 | 	add	arg01, #4
09068     3A 3B 62 FC | 	wrlong	_var01, arg01
0906c     04 76 06 F1 | 	add	arg02, #4
09070     3B 3B 02 FB | 	rdlong	_var01, arg02
09074     04 74 06 F1 | 	add	arg01, #4
09078     3A 3B 62 FC | 	wrlong	_var01, arg01
0907c     04 76 06 F1 | 	add	arg02, #4
09080     3B 3B 02 FB | 	rdlong	_var01, arg02
09084     04 74 06 F1 | 	add	arg01, #4
09088     3A 3B 62 FC | 	wrlong	_var01, arg01
0908c     04 76 06 F1 | 	add	arg02, #4
09090     3B 3B 02 FB | 	rdlong	_var01, arg02
09094     04 74 06 F1 | 	add	arg01, #4
09098     3A 3B 62 FC | 	wrlong	_var01, arg01
0909c     04 76 06 F1 | 	add	arg02, #4
090a0     3B 3B 02 FB | 	rdlong	_var01, arg02
090a4     04 74 06 F1 | 	add	arg01, #4
090a8     3A 3B 62 FC | 	wrlong	_var01, arg01
090ac                 | _module_copy_ret
090ac     2D 00 64 FD | 	ret
090b0                 | 
090b0                 | _module_set_image
090b0     CC 74 06 F1 | 	add	arg01, #204
090b4     3A 05 68 FC | 	wrlong	#2, arg01
090b8     04 74 06 F1 | 	add	arg01, #4
090bc     3A 77 62 FC | 	wrlong	arg02, arg01
090c0     20 76 06 F1 | 	add	arg02, #32
090c4     3B 3B 02 FB | 	rdlong	_var01, arg02
090c8     20 74 06 F1 | 	add	arg01, #32
090cc     3A 3B 62 FC | 	wrlong	_var01, arg01
090d0     04 76 06 F1 | 	add	arg02, #4
090d4     3B 3B 02 FB | 	rdlong	_var01, arg02
090d8     04 74 06 F1 | 	add	arg01, #4
090dc     3A 3B 62 FC | 	wrlong	_var01, arg01
090e0                 | _module_set_image_ret
090e0     2D 00 64 FD | 	ret
090e4                 | 
090e4                 | _module_set_text
090e4     CC 74 06 F1 | 	add	arg01, #204
090e8     3A 03 68 FC | 	wrlong	#1, arg01
090ec     04 74 06 F1 | 	add	arg01, #4
090f0     3A 77 62 FC | 	wrlong	arg02, arg01
090f4     04 74 06 F1 | 	add	arg01, #4
090f8     3A 03 68 FC | 	wrlong	#1, arg01
090fc     08 74 06 F1 | 	add	arg01, #8
09100     3A 03 68 FC | 	wrlong	#1, arg01
09104     04 74 06 F1 | 	add	arg01, #4
09108     3A 09 68 FC | 	wrlong	#4, arg01
0910c     08 74 86 F1 | 	sub	arg01, #8
09110     3A 01 48 FC | 	wrbyte	#0, arg01
09114     D8 74 86 F1 | 	sub	arg01, #216
09118     24 00 B0 FD | 	call	#_module_text_fit
0911c                 | _module_set_text_ret
0911c     2D 00 64 FD | 	ret
09120                 | 
09120                 | _module_text_get
09120     CC 74 06 F1 | 	add	arg01, #204
09124     3A 3B 02 FB | 	rdlong	_var01, arg01
09128     CC 74 86 F1 | 	sub	arg01, #204
0912c     01 3A 0E F2 | 	cmp	_var01, #1 wz
09130                 | '     {
09130                 | '         return module->data.text.value;
09130     D0 74 06 A1 |  if_e	add	arg01, #208
09134     3A 35 02 AB |  if_e	rdlong	result1, arg01
09138                 | '     }
09138                 | '     return  (0) ;
09138     00 34 06 56 |  if_ne	mov	result1, #0
0913c                 | _module_text_get_ret
0913c     2D 00 64 FD | 	ret
09140                 | 
09140                 | _module_text_fit
09140     05 4C 05 F6 | 	mov	COUNT_, #5
09144     A9 00 A0 FD | 	call	#pushregs_
09148     3A 8D 02 F6 | 	mov	local01, arg01
0914c                 | ' {
0914c                 | '     switch (module->data.text.font)
0914c     D4 8C 06 F1 | 	add	local01, #212
09150     46 8F 02 FB | 	rdlong	local02, local01
09154     D4 8C 86 F1 | 	sub	local01, #212
09158     47 91 02 F6 | 	mov	local03, local02
0915c     03 90 26 F3 | 	fle	local03, #3
09160     30 90 62 FD | 	jmprel	local03
09164                 | LR__0314
09164     68 00 90 FD | 	jmp	#LR__0317
09168     30 00 90 FD | 	jmp	#LR__0316
0916c     04 00 90 FD | 	jmp	#LR__0315
09170     88 00 90 FD | 	jmp	#LR__0318
09174                 | LR__0315
09174     D0 8C 06 F1 | 	add	local01, #208
09178     46 75 02 FB | 	rdlong	arg01, local01
0917c     F4 D0 BF FD | 	call	#_strlen
09180     04 34 66 F0 | 	shl	result1, #4
09184     20 8C 06 F1 | 	add	local01, #32
09188     46 35 62 FC | 	wrlong	result1, local01
0918c     04 8C 06 F1 | 	add	local01, #4
09190     46 41 68 FC | 	wrlong	#32, local01
09194     F4 8C 86 F1 | 	sub	local01, #244
09198                 | '         module->w = strlen(module->data.text.value) * 16;
09198                 | '         module->h = 32;
09198                 | '         break;
09198     60 00 90 FD | 	jmp	#LR__0318
0919c                 | LR__0316
0919c     D0 8C 06 F1 | 	add	local01, #208
091a0     46 75 02 FB | 	rdlong	arg01, local01
091a4     CC D0 BF FD | 	call	#_strlen
091a8     1A 91 02 F6 | 	mov	local03, result1
091ac     01 90 66 F0 | 	shl	local03, #1
091b0     1A 91 02 F1 | 	add	local03, result1
091b4     02 90 66 F0 | 	shl	local03, #2
091b8     20 8C 06 F1 | 	add	local01, #32
091bc     46 91 62 FC | 	wrlong	local03, local01
091c0     04 8C 06 F1 | 	add	local01, #4
091c4     46 31 68 FC | 	wrlong	#24, local01
091c8     F4 8C 86 F1 | 	sub	local01, #244
091cc                 | '         module->w = strlen(module->data.text.value) * 12;
091cc                 | '         module->h = 24;
091cc                 | '         break;
091cc     2C 00 90 FD | 	jmp	#LR__0318
091d0                 | LR__0317
091d0     D0 8C 06 F1 | 	add	local01, #208
091d4     46 75 02 FB | 	rdlong	arg01, local01
091d8     98 D0 BF FD | 	call	#_strlen
091dc     1A 93 02 F6 | 	mov	local04, result1
091e0     03 92 66 F0 | 	shl	local04, #3
091e4     20 8C 06 F1 | 	add	local01, #32
091e8     46 93 62 FC | 	wrlong	local04, local01
091ec     10 94 06 F6 | 	mov	local05, #16
091f0     04 8C 06 F1 | 	add	local01, #4
091f4     46 21 68 FC | 	wrlong	#16, local01
091f8     F4 8C 86 F1 | 	sub	local01, #244
091fc                 | '         module->w = strlen(module->data.text.value) * 8;
091fc                 | '         module->h = 16;
091fc                 | '         break;
091fc                 | LR__0318
091fc     D8 8C 06 F1 | 	add	local01, #216
09200     46 8F CA FA | 	rdbyte	local02, local01 wz
09204     D8 8C 86 F1 | 	sub	local01, #216
09208     F4 8C 06 51 |  if_ne	add	local01, #244
0920c     46 8F 02 5B |  if_ne	rdlong	local02, local01
09210     02 8E 06 51 |  if_ne	add	local02, #2
09214     46 8F 62 5C |  if_ne	wrlong	local02, local01
09218     A8 F0 03 F6 | 	mov	ptra, fp
0921c     B3 00 A0 FD | 	call	#popregs_
09220                 | _module_text_fit_ret
09220     2D 00 64 FD | 	ret
09224                 | 
09224                 | _module_text_font
09224     02 4C 05 F6 | 	mov	COUNT_, #2
09228     A9 00 A0 FD | 	call	#pushregs_
0922c     3A 8D 02 F6 | 	mov	local01, arg01
09230     CC 8C 06 F1 | 	add	local01, #204
09234     46 8F 02 FB | 	rdlong	local02, local01
09238     CC 8C 86 F1 | 	sub	local01, #204
0923c     01 8E 0E F2 | 	cmp	local02, #1 wz
09240                 | '         return;
09240     04 01 90 5D |  if_ne	jmp	#LR__0323
09244     FF FF 7F FF 
09248     FF 77 0E F2 | 	cmp	arg02, ##-1 wz
0924c     F0 00 90 5D |  if_ne	jmp	#LR__0321
09250     F4 8C 06 F1 | 	add	local01, #244
09254     46 8F 02 FB | 	rdlong	local02, local01
09258     F4 8C 86 F1 | 	sub	local01, #244
0925c     20 8E 56 F2 | 	cmps	local02, #32 wc
09260     74 00 90 CD |  if_b	jmp	#LR__0319
09264     D0 8C 06 F1 | 	add	local01, #208
09268     46 75 02 FB | 	rdlong	arg01, local01
0926c     04 D0 BF FD | 	call	#_strlen
09270     1A 8F 02 F6 | 	mov	local02, result1
09274     04 8E 66 F0 | 	shl	local02, #4
09278     20 8C 06 F1 | 	add	local01, #32
0927c     46 77 02 FB | 	rdlong	arg02, local01
09280     F0 8C 86 F1 | 	sub	local01, #240
09284     47 77 5A F2 | 	cmps	arg02, local02 wcz
09288     D4 8C 06 11 |  if_a	add	local01, #212
0928c     46 05 68 1C |  if_a	wrlong	#2, local01
09290     B4 00 90 1D |  if_a	jmp	#LR__0322
09294     D0 8C 06 F1 | 	add	local01, #208
09298     46 75 02 FB | 	rdlong	arg01, local01
0929c     D4 CF BF FD | 	call	#_strlen
092a0     1A 8F 02 F6 | 	mov	local02, result1
092a4     01 8E 66 F0 | 	shl	local02, #1
092a8     1A 8F 02 F1 | 	add	local02, result1
092ac     02 8E 66 F0 | 	shl	local02, #2
092b0     20 8C 06 F1 | 	add	local01, #32
092b4     46 35 02 FB | 	rdlong	result1, local01
092b8     F0 8C 86 F1 | 	sub	local01, #240
092bc     47 35 5A F2 | 	cmps	result1, local02 wcz
092c0     D4 8C 06 11 |  if_a	add	local01, #212
092c4     46 03 68 1C |  if_a	wrlong	#1, local01
092c8     7C 00 90 1D |  if_a	jmp	#LR__0322
092cc     D4 8C 06 F1 | 	add	local01, #212
092d0     46 01 68 FC | 	wrlong	#0, local01
092d4     70 00 90 FD | 	jmp	#LR__0322
092d8                 | LR__0319
092d8     46 8F 02 FB | 	rdlong	local02, local01
092dc     F4 8E 06 F1 | 	add	local02, #244
092e0     47 8F 02 FB | 	rdlong	local02, local02
092e4     18 8E 56 F2 | 	cmps	local02, #24 wc
092e8     48 00 90 CD |  if_b	jmp	#LR__0320
092ec     46 8F 02 FB | 	rdlong	local02, local01
092f0     D0 8C 06 F1 | 	add	local01, #208
092f4     46 75 02 FB | 	rdlong	arg01, local01
092f8     D0 8C 86 F1 | 	sub	local01, #208
092fc     74 CF BF FD | 	call	#_strlen
09300     1A 77 02 F6 | 	mov	arg02, result1
09304     01 76 66 F0 | 	shl	arg02, #1
09308     1A 77 02 F1 | 	add	arg02, result1
0930c     02 76 66 F0 | 	shl	arg02, #2
09310     F0 8E 06 F1 | 	add	local02, #240
09314     47 8F 02 FB | 	rdlong	local02, local02
09318     3B 8F 5A F2 | 	cmps	local02, arg02 wcz
0931c     D4 8C 06 11 |  if_a	add	local01, #212
09320     46 03 68 1C |  if_a	wrlong	#1, local01
09324     20 00 90 1D |  if_a	jmp	#LR__0322
09328     D4 8C 06 F1 | 	add	local01, #212
0932c     46 01 68 FC | 	wrlong	#0, local01
09330     14 00 90 FD | 	jmp	#LR__0322
09334                 | LR__0320
09334     D4 8C 06 F1 | 	add	local01, #212
09338     46 01 68 FC | 	wrlong	#0, local01
0933c     08 00 90 FD | 	jmp	#LR__0322
09340                 | LR__0321
09340     D4 8C 06 F1 | 	add	local01, #212
09344     46 77 62 FC | 	wrlong	arg02, local01
09348                 | LR__0322
09348                 | LR__0323
09348     A8 F0 03 F6 | 	mov	ptra, fp
0934c     B3 00 A0 FD | 	call	#popregs_
09350                 | _module_text_font_ret
09350     2D 00 64 FD | 	ret
09354                 | 
09354                 | _module_text_font_width
09354     03 4C 05 F6 | 	mov	COUNT_, #3
09358     A9 00 A0 FD | 	call	#pushregs_
0935c     3A 8D 02 F6 | 	mov	local01, arg01
09360     CC 8C 06 F1 | 	add	local01, #204
09364     46 8F 02 FB | 	rdlong	local02, local01
09368     CC 8C 86 F1 | 	sub	local01, #204
0936c     01 8E 0E F2 | 	cmp	local02, #1 wz
09370                 | '         return 0;
09370     00 34 06 56 |  if_ne	mov	result1, #0
09374     74 00 90 5D |  if_ne	jmp	#LR__0329
09378                 | '     switch (module->data.text.font)
09378     D4 8C 06 F1 | 	add	local01, #212
0937c     46 91 02 FB | 	rdlong	local03, local01
09380     D4 8C 86 F1 | 	sub	local01, #212
09384     03 90 26 F3 | 	fle	local03, #3
09388     30 90 62 FD | 	jmprel	local03
0938c                 | LR__0324
0938c     44 00 90 FD | 	jmp	#LR__0327
09390     1C 00 90 FD | 	jmp	#LR__0326
09394     04 00 90 FD | 	jmp	#LR__0325
09398     4C 00 90 FD | 	jmp	#LR__0328
0939c                 | LR__0325
0939c                 | '         return strlen(module->data.text.value) * 16;
0939c     D0 8C 06 F1 | 	add	local01, #208
093a0     46 75 02 FB | 	rdlong	arg01, local01
093a4     CC CE BF FD | 	call	#_strlen
093a8     04 34 66 F0 | 	shl	result1, #4
093ac     3C 00 90 FD | 	jmp	#LR__0329
093b0                 | LR__0326
093b0                 | '         return strlen(module->data.text.value) * 12;
093b0     D0 8C 06 F1 | 	add	local01, #208
093b4     46 75 02 FB | 	rdlong	arg01, local01
093b8     B8 CE BF FD | 	call	#_strlen
093bc     1A 91 02 F6 | 	mov	local03, result1
093c0     01 90 66 F0 | 	shl	local03, #1
093c4     1A 91 02 F1 | 	add	local03, result1
093c8     02 90 66 F0 | 	shl	local03, #2
093cc     48 35 02 F6 | 	mov	result1, local03
093d0     18 00 90 FD | 	jmp	#LR__0329
093d4                 | LR__0327
093d4                 | '         return strlen(module->data.text.value) * 8;
093d4     D0 8C 06 F1 | 	add	local01, #208
093d8     46 75 02 FB | 	rdlong	arg01, local01
093dc     94 CE BF FD | 	call	#_strlen
093e0     03 34 66 F0 | 	shl	result1, #3
093e4     04 00 90 FD | 	jmp	#LR__0329
093e8                 | LR__0328
093e8                 | '     }
093e8                 | '     return 0;
093e8     00 34 06 F6 | 	mov	result1, #0
093ec                 | LR__0329
093ec     A8 F0 03 F6 | 	mov	ptra, fp
093f0     B3 00 A0 FD | 	call	#popregs_
093f4                 | _module_text_font_width_ret
093f4     2D 00 64 FD | 	ret
093f8                 | 
093f8                 | _module_text_font_height
093f8     3A 3B 02 F6 | 	mov	_var01, arg01
093fc     CC 3A 06 F1 | 	add	_var01, #204
09400     1D 3D 02 FB | 	rdlong	_var02, _var01
09404     CC 3A 86 F1 | 	sub	_var01, #204
09408     01 3C 0E F2 | 	cmp	_var02, #1 wz
0940c                 | '         return 0;
0940c     00 34 06 56 |  if_ne	mov	result1, #0
09410     3C 00 90 5D |  if_ne	jmp	#_module_text_font_height_ret
09414                 | '     switch (module->data.text.font)
09414     D4 3A 06 F1 | 	add	_var01, #212
09418     1D 3F 02 FB | 	rdlong	_var03, _var01
0941c     03 3E 26 F3 | 	fle	_var03, #3
09420     30 3E 62 FD | 	jmprel	_var03
09424                 | LR__0330
09424     1C 00 90 FD | 	jmp	#LR__0333
09428     10 00 90 FD | 	jmp	#LR__0332
0942c     04 00 90 FD | 	jmp	#LR__0331
09430     18 00 90 FD | 	jmp	#LR__0334
09434                 | LR__0331
09434                 | '         return 32;
09434     20 34 06 F6 | 	mov	result1, #32
09438     14 00 90 FD | 	jmp	#_module_text_font_height_ret
0943c                 | LR__0332
0943c                 | '         return 24;
0943c     18 34 06 F6 | 	mov	result1, #24
09440     0C 00 90 FD | 	jmp	#_module_text_font_height_ret
09444                 | LR__0333
09444                 | '         return 16;
09444     10 34 06 F6 | 	mov	result1, #16
09448     04 00 90 FD | 	jmp	#_module_text_font_height_ret
0944c                 | LR__0334
0944c                 | '     }
0944c                 | '     return 0;
0944c     00 34 06 F6 | 	mov	result1, #0
09450                 | _module_text_font_height_ret
09450     2D 00 64 FD | 	ret
09454                 | 
09454                 | _module_add_border
09454     14 75 06 F1 | 	add	arg01, #276
09458     3A 77 62 FC | 	wrlong	arg02, arg01
0945c     14 74 06 F1 | 	add	arg01, #20
09460     3A 79 62 FC | 	wrlong	arg03, arg01
09464     3C 77 02 F6 | 	mov	arg02, arg03
09468     01 76 66 F0 | 	shl	arg02, #1
0946c     38 74 86 F1 | 	sub	arg01, #56
09470     3A 3B 02 FB | 	rdlong	_var01, arg01
09474     3B 3B 02 F1 | 	add	_var01, arg02
09478     3A 3B 62 FC | 	wrlong	_var01, arg01
0947c     01 78 66 F0 | 	shl	arg03, #1
09480     04 74 06 F1 | 	add	arg01, #4
09484     3A 3B 02 FB | 	rdlong	_var01, arg01
09488     3C 3B 02 F1 | 	add	_var01, arg03
0948c     3A 3B 62 FC | 	wrlong	_var01, arg01
09490                 | _module_add_border_ret
09490     2D 00 64 FD | 	ret
09494                 | 
09494                 | _module_align_inner_top
09494     3A 3B 02 FB | 	rdlong	_var01, arg01
09498     1D 3D 02 F6 | 	mov	_var02, _var01
0949c     EC 3A 06 F1 | 	add	_var01, #236
094a0     1D 3B 02 FB | 	rdlong	_var01, _var01
094a4     FC 3C 06 F1 | 	add	_var02, #252
094a8     1E 3D 02 FB | 	rdlong	_var02, _var02
094ac     1E 3B 02 F1 | 	add	_var01, _var02
094b0     EC 74 06 F1 | 	add	arg01, #236
094b4     3A 3B 62 FC | 	wrlong	_var01, arg01
094b8                 | _module_align_inner_top_ret
094b8     2D 00 64 FD | 	ret
094bc                 | 
094bc                 | _module_align_inner_left
094bc     3A 3B 02 FB | 	rdlong	_var01, arg01
094c0     1D 3D 02 F6 | 	mov	_var02, _var01
094c4     E8 3A 06 F1 | 	add	_var01, #232
094c8     1D 3B 02 FB | 	rdlong	_var01, _var01
094cc     F8 3C 06 F1 | 	add	_var02, #248
094d0     1E 3D 02 FB | 	rdlong	_var02, _var02
094d4     1E 3B 02 F1 | 	add	_var01, _var02
094d8     E8 74 06 F1 | 	add	arg01, #232
094dc     3A 3B 62 FC | 	wrlong	_var01, arg01
094e0                 | _module_align_inner_left_ret
094e0     2D 00 64 FD | 	ret
094e4                 | 
094e4                 | _module_align_inner_right
094e4     3A 3B 02 FB | 	rdlong	_var01, arg01
094e8     1D 3D 02 F6 | 	mov	_var02, _var01
094ec     E8 3A 06 F1 | 	add	_var01, #232
094f0     1D 3B 02 FB | 	rdlong	_var01, _var01
094f4     F0 3C 06 F1 | 	add	_var02, #240
094f8     1E 3D 02 FB | 	rdlong	_var02, _var02
094fc     1E 3B 02 F1 | 	add	_var01, _var02
09500     F0 74 06 F1 | 	add	arg01, #240
09504     3A 3D 02 FB | 	rdlong	_var02, arg01
09508     F0 74 86 F1 | 	sub	arg01, #240
0950c     1E 3B 82 F1 | 	sub	_var01, _var02
09510     3A 3D 02 FB | 	rdlong	_var02, arg01
09514     F8 3C 06 F1 | 	add	_var02, #248
09518     1E 3D 02 FB | 	rdlong	_var02, _var02
0951c     1E 3B 82 F1 | 	sub	_var01, _var02
09520     E8 74 06 F1 | 	add	arg01, #232
09524     3A 3B 62 FC | 	wrlong	_var01, arg01
09528                 | _module_align_inner_right_ret
09528     2D 00 64 FD | 	ret
0952c                 | 
0952c                 | _module_align_inner_bottom
0952c     3A 3B 02 FB | 	rdlong	_var01, arg01
09530     1D 3D 02 F6 | 	mov	_var02, _var01
09534     EC 3A 06 F1 | 	add	_var01, #236
09538     1D 3B 02 FB | 	rdlong	_var01, _var01
0953c     F4 3C 06 F1 | 	add	_var02, #244
09540     1E 3D 02 FB | 	rdlong	_var02, _var02
09544     1E 3B 02 F1 | 	add	_var01, _var02
09548     F4 74 06 F1 | 	add	arg01, #244
0954c     3A 3D 02 FB | 	rdlong	_var02, arg01
09550     F4 74 86 F1 | 	sub	arg01, #244
09554     1E 3B 82 F1 | 	sub	_var01, _var02
09558     3A 3D 02 FB | 	rdlong	_var02, arg01
0955c     FC 3C 06 F1 | 	add	_var02, #252
09560     1E 3D 02 FB | 	rdlong	_var02, _var02
09564     1E 3B 82 F1 | 	sub	_var01, _var02
09568     EC 74 06 F1 | 	add	arg01, #236
0956c     3A 3B 62 FC | 	wrlong	_var01, arg01
09570                 | _module_align_inner_bottom_ret
09570     2D 00 64 FD | 	ret
09574                 | 
09574                 | _module_align_middle
09574     3A 3B 02 FB | 	rdlong	_var01, arg01
09578     1D 3D 02 F6 | 	mov	_var02, _var01
0957c     F4 3C 06 F1 | 	add	_var02, #244
09580     1E 3D 02 FB | 	rdlong	_var02, _var02
09584     1E 3D 52 F6 | 	abs	_var02, _var02 wc
09588     01 3C 46 F0 | 	shr	_var02, #1
0958c     1E 3D 82 F6 | 	negc	_var02, _var02
09590     EC 3A 06 F1 | 	add	_var01, #236
09594     1D 3B 02 FB | 	rdlong	_var01, _var01
09598     1E 3B 02 F1 | 	add	_var01, _var02
0959c     F4 74 06 F1 | 	add	arg01, #244
095a0     3A 3D 02 FB | 	rdlong	_var02, arg01
095a4     1E 3D 52 F6 | 	abs	_var02, _var02 wc
095a8     01 3C 46 F0 | 	shr	_var02, #1
095ac     1E 3D 82 F6 | 	negc	_var02, _var02
095b0     1E 3B 82 F1 | 	sub	_var01, _var02
095b4     08 74 86 F1 | 	sub	arg01, #8
095b8     3A 3B 62 FC | 	wrlong	_var01, arg01
095bc                 | _module_align_middle_ret
095bc     2D 00 64 FD | 	ret
095c0                 | 
095c0                 | _module_align_center_sector
095c0     3A E1 02 FB | 	rdlong	muldiva_, arg01
095c4     70 E3 02 F6 | 	mov	muldivb_, muldiva_
095c8     F8 E2 06 F1 | 	add	muldivb_, #248
095cc     71 E3 02 FB | 	rdlong	muldivb_, muldivb_
095d0     01 E2 66 F0 | 	shl	muldivb_, #1
095d4     F0 E0 06 F1 | 	add	muldiva_, #240
095d8     70 E1 02 FB | 	rdlong	muldiva_, muldiva_
095dc     71 E1 82 F1 | 	sub	muldiva_, muldivb_
095e0     70 77 02 FD | 	qmul	arg02, muldiva_
095e4     3A E1 02 FB | 	rdlong	muldiva_, arg01
095e8     70 E3 02 F6 | 	mov	muldivb_, muldiva_
095ec     E8 E0 06 F1 | 	add	muldiva_, #232
095f0     70 77 02 FB | 	rdlong	arg02, muldiva_
095f4     F8 E2 06 F1 | 	add	muldivb_, #248
095f8     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
095fc     70 77 02 F1 | 	add	arg02, muldiva_
09600     3C E3 02 F6 | 	mov	muldivb_, arg03
09604     18 E0 62 FD | 	getqx	muldiva_
09608     BB 00 A0 FD | 	call	#divide_
0960c     71 77 02 F1 | 	add	arg02, muldivb_
09610     F0 74 06 F1 | 	add	arg01, #240
09614     3A E1 02 FB | 	rdlong	muldiva_, arg01
09618     70 E1 52 F6 | 	abs	muldiva_, muldiva_ wc
0961c     01 E0 46 F0 | 	shr	muldiva_, #1
09620     70 E1 82 F6 | 	negc	muldiva_, muldiva_
09624     70 77 82 F1 | 	sub	arg02, muldiva_
09628     08 74 86 F1 | 	sub	arg01, #8
0962c     3A 77 62 FC | 	wrlong	arg02, arg01
09630                 | _module_align_center_sector_ret
09630     2D 00 64 FD | 	ret
09634                 | 
09634                 | _module_align_space_even
09634     3A 3B 02 FB | 	rdlong	_var01, arg01
09638     F0 74 06 F1 | 	add	arg01, #240
0963c     3A 3D 02 FB | 	rdlong	_var02, arg01
09640     1E 79 02 FD | 	qmul	arg03, _var02
09644     1D E1 02 F6 | 	mov	muldiva_, _var01
09648     F0 E0 06 F1 | 	add	muldiva_, #240
0964c     70 E1 02 FB | 	rdlong	muldiva_, muldiva_
09650     18 E2 62 FD | 	getqx	muldivb_
09654     71 E1 82 F1 | 	sub	muldiva_, muldivb_
09658     70 77 02 FD | 	qmul	arg02, muldiva_
0965c     01 78 06 F1 | 	add	arg03, #1
09660     3C E3 02 F6 | 	mov	muldivb_, arg03
09664     18 E0 62 FD | 	getqx	muldiva_
09668     BB 00 A0 FD | 	call	#divide_
0966c     01 76 86 F1 | 	sub	arg02, #1
09670     1E 77 02 FD | 	qmul	arg02, _var02
09674     E8 3A 06 F1 | 	add	_var01, #232
09678     1D 3D 02 FB | 	rdlong	_var02, _var01
0967c     71 3D 02 F1 | 	add	_var02, muldivb_
09680     08 74 86 F1 | 	sub	arg01, #8
09684     18 3A 62 FD | 	getqx	_var01
09688     1D 3D 02 F1 | 	add	_var02, _var01
0968c     3A 3D 62 FC | 	wrlong	_var02, arg01
09690                 | _module_align_space_even_ret
09690     2D 00 64 FD | 	ret
09694                 | 
09694                 | _module_align_above
09694     EC 76 06 F1 | 	add	arg02, #236
09698     3B 3B 02 FB | 	rdlong	_var01, arg02
0969c     F4 74 06 F1 | 	add	arg01, #244
096a0     3A 3D 02 FB | 	rdlong	_var02, arg01
096a4     1E 3B 82 F1 | 	sub	_var01, _var02
096a8     18 76 06 F1 | 	add	arg02, #24
096ac     3B 3D 02 FB | 	rdlong	_var02, arg02
096b0     1E 3B 82 F1 | 	sub	_var01, _var02
096b4     08 74 86 F1 | 	sub	arg01, #8
096b8     3A 3B 62 FC | 	wrlong	_var01, arg01
096bc                 | _module_align_above_ret
096bc     2D 00 64 FD | 	ret
096c0                 | 
096c0                 | _module_align_left
096c0     E8 76 06 F1 | 	add	arg02, #232
096c4     3B 3B 02 FB | 	rdlong	_var01, arg02
096c8     F0 74 06 F1 | 	add	arg01, #240
096cc     3A 3D 02 FB | 	rdlong	_var02, arg01
096d0     1E 3B 82 F1 | 	sub	_var01, _var02
096d4     18 76 06 F1 | 	add	arg02, #24
096d8     3B 3D 02 FB | 	rdlong	_var02, arg02
096dc     1E 3B 82 F1 | 	sub	_var01, _var02
096e0     08 74 86 F1 | 	sub	arg01, #8
096e4     3A 3B 62 FC | 	wrlong	_var01, arg01
096e8                 | _module_align_left_ret
096e8     2D 00 64 FD | 	ret
096ec                 | 
096ec                 | _module_align_below
096ec     EC 76 06 F1 | 	add	arg02, #236
096f0     3B 3B 02 FB | 	rdlong	_var01, arg02
096f4     08 76 06 F1 | 	add	arg02, #8
096f8     3B 3D 02 FB | 	rdlong	_var02, arg02
096fc     1E 3B 02 F1 | 	add	_var01, _var02
09700     10 76 06 F1 | 	add	arg02, #16
09704     3B 3D 02 FB | 	rdlong	_var02, arg02
09708     1E 3B 02 F1 | 	add	_var01, _var02
0970c     EC 74 06 F1 | 	add	arg01, #236
09710     3A 3B 62 FC | 	wrlong	_var01, arg01
09714                 | _module_align_below_ret
09714     2D 00 64 FD | 	ret
09718                 | 
09718                 | _module_align_right
09718     E8 76 06 F1 | 	add	arg02, #232
0971c     3B 3B 02 FB | 	rdlong	_var01, arg02
09720     08 76 06 F1 | 	add	arg02, #8
09724     3B 3D 02 FB | 	rdlong	_var02, arg02
09728     1E 3B 02 F1 | 	add	_var01, _var02
0972c     10 76 06 F1 | 	add	arg02, #16
09730     3B 3D 02 FB | 	rdlong	_var02, arg02
09734     1E 3B 02 F1 | 	add	_var01, _var02
09738     E8 74 06 F1 | 	add	arg01, #232
0973c     3A 3B 62 FC | 	wrlong	_var01, arg01
09740                 | _module_align_right_ret
09740     2D 00 64 FD | 	ret
09744                 | 
09744                 | _module_fit_width
09744     3A 3B 02 FB | 	rdlong	_var01, arg01
09748     1D 3D 02 F6 | 	mov	_var02, _var01
0974c     F0 3A 06 F1 | 	add	_var01, #240
09750     1D 3B 02 FB | 	rdlong	_var01, _var01
09754     F8 3C 06 F1 | 	add	_var02, #248
09758     1E 3D 02 FB | 	rdlong	_var02, _var02
0975c     1E 3B 82 F1 | 	sub	_var01, _var02
09760     3A 3D 02 FB | 	rdlong	_var02, arg01
09764     F8 3C 06 F1 | 	add	_var02, #248
09768     1E 3D 02 FB | 	rdlong	_var02, _var02
0976c     1E 3B 82 F1 | 	sub	_var01, _var02
09770     F0 74 06 F1 | 	add	arg01, #240
09774     3A 3B 62 FC | 	wrlong	_var01, arg01
09778                 | _module_fit_width_ret
09778     2D 00 64 FD | 	ret
0977c                 | 
0977c                 | _module_fit_space_even
0977c     3A E3 02 FB | 	rdlong	muldivb_, arg01
09780     00 75 06 F1 | 	add	arg01, #256
09784     3A E1 02 FB | 	rdlong	muldiva_, arg01
09788     70 77 02 FD | 	qmul	arg02, muldiva_
0978c     71 E1 02 F6 | 	mov	muldiva_, muldivb_
09790     00 E1 06 F1 | 	add	muldiva_, #256
09794     70 3B 02 FB | 	rdlong	_var01, muldiva_
09798     01 3A 66 F0 | 	shl	_var01, #1
0979c     F0 E2 06 F1 | 	add	muldivb_, #240
097a0     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
097a4     1D E1 82 F1 | 	sub	muldiva_, _var01
097a8     3B E3 02 F6 | 	mov	muldivb_, arg02
097ac     18 3A 62 FD | 	getqx	_var01
097b0     1D E1 82 F1 | 	sub	muldiva_, _var01
097b4     BB 00 A0 FD | 	call	#divide_
097b8     10 74 86 F1 | 	sub	arg01, #16
097bc     3A E3 62 FC | 	wrlong	muldivb_, arg01
097c0                 | _module_fit_space_even_ret
097c0     2D 00 64 FD | 	ret
097c4                 | 
097c4                 | _module_fit_space_even_verticle
097c4     3A E3 02 FB | 	rdlong	muldivb_, arg01
097c8     04 75 06 F1 | 	add	arg01, #260
097cc     3A E1 02 FB | 	rdlong	muldiva_, arg01
097d0     70 77 02 FD | 	qmul	arg02, muldiva_
097d4     71 E1 02 F6 | 	mov	muldiva_, muldivb_
097d8     04 E1 06 F1 | 	add	muldiva_, #260
097dc     70 3B 02 FB | 	rdlong	_var01, muldiva_
097e0     01 3A 66 F0 | 	shl	_var01, #1
097e4     F4 E2 06 F1 | 	add	muldivb_, #244
097e8     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
097ec     1D E1 82 F1 | 	sub	muldiva_, _var01
097f0     3B E3 02 F6 | 	mov	muldivb_, arg02
097f4     18 3A 62 FD | 	getqx	_var01
097f8     1D E1 82 F1 | 	sub	muldiva_, _var01
097fc     BB 00 A0 FD | 	call	#divide_
09800     10 74 86 F1 | 	sub	arg01, #16
09804     3A E3 62 FC | 	wrlong	muldivb_, arg01
09808                 | _module_fit_space_even_verticle_ret
09808     2D 00 64 FD | 	ret
0980c                 | 
0980c                 | _module_fit_height
0980c     3A 3B 02 FB | 	rdlong	_var01, arg01
09810     1D 3D 02 F6 | 	mov	_var02, _var01
09814     F4 3A 06 F1 | 	add	_var01, #244
09818     1D 3B 02 FB | 	rdlong	_var01, _var01
0981c     FC 3C 06 F1 | 	add	_var02, #252
09820     1E 3D 02 FB | 	rdlong	_var02, _var02
09824     1E 3B 82 F1 | 	sub	_var01, _var02
09828     3A 3D 02 FB | 	rdlong	_var02, arg01
0982c     FC 3C 06 F1 | 	add	_var02, #252
09830     1E 3D 02 FB | 	rdlong	_var02, _var02
09834     1E 3B 82 F1 | 	sub	_var01, _var02
09838     F4 74 06 F1 | 	add	arg01, #244
0983c     3A 3B 62 FC | 	wrlong	_var01, arg01
09840                 | _module_fit_height_ret
09840     2D 00 64 FD | 	ret
09844                 | 
09844                 | _module_fit_below
09844     03 4C 05 F6 | 	mov	COUNT_, #3
09848     A9 00 A0 FD | 	call	#pushregs_
0984c     3A 8D 02 F6 | 	mov	local01, arg01
09850     3B 8F 02 F6 | 	mov	local02, arg02
09854     46 75 02 F6 | 	mov	arg01, local01
09858     47 77 02 F6 | 	mov	arg02, local02
0985c     8C FE BF FD | 	call	#_module_align_below
09860     46 77 02 FB | 	rdlong	arg02, local01
09864     3B 75 02 F6 | 	mov	arg01, arg02
09868     EC 8E 06 F1 | 	add	local02, #236
0986c     47 91 02 FB | 	rdlong	local03, local02
09870     EC 74 06 F1 | 	add	arg01, #236
09874     3A 75 02 FB | 	rdlong	arg01, arg01
09878     3A 91 82 F1 | 	sub	local03, arg01
0987c     F4 76 06 F1 | 	add	arg02, #244
09880     3B 77 02 FB | 	rdlong	arg02, arg02
09884     48 77 82 F1 | 	sub	arg02, local03
09888     08 8E 06 F1 | 	add	local02, #8
0988c     47 91 02 FB | 	rdlong	local03, local02
09890     48 77 82 F1 | 	sub	arg02, local03
09894     10 8E 06 F1 | 	add	local02, #16
09898     47 91 02 FB | 	rdlong	local03, local02
0989c     48 77 82 F1 | 	sub	arg02, local03
098a0     46 91 02 FB | 	rdlong	local03, local01
098a4     FC 90 06 F1 | 	add	local03, #252
098a8     48 91 02 FB | 	rdlong	local03, local03
098ac     48 77 82 F1 | 	sub	arg02, local03
098b0     F4 8C 06 F1 | 	add	local01, #244
098b4     46 77 62 FC | 	wrlong	arg02, local01
098b8     A8 F0 03 F6 | 	mov	ptra, fp
098bc     B3 00 A0 FD | 	call	#popregs_
098c0                 | _module_fit_below_ret
098c0     2D 00 64 FD | 	ret
098c4                 | 
098c4                 | _module_fit_right
098c4     3A 3B 02 FB | 	rdlong	_var01, arg01
098c8     1D 3D 02 F6 | 	mov	_var02, _var01
098cc     E8 76 06 F1 | 	add	arg02, #232
098d0     3B 3F 02 FB | 	rdlong	_var03, arg02
098d4     E8 3C 06 F1 | 	add	_var02, #232
098d8     1E 3D 02 FB | 	rdlong	_var02, _var02
098dc     1E 3F 82 F1 | 	sub	_var03, _var02
098e0     F0 3A 06 F1 | 	add	_var01, #240
098e4     1D 3D 02 FB | 	rdlong	_var02, _var01
098e8     1F 3D 82 F1 | 	sub	_var02, _var03
098ec     08 76 06 F1 | 	add	arg02, #8
098f0     3B 3F 02 FB | 	rdlong	_var03, arg02
098f4     1F 3D 82 F1 | 	sub	_var02, _var03
098f8     10 76 06 F1 | 	add	arg02, #16
098fc     3B 3F 02 FB | 	rdlong	_var03, arg02
09900     1F 3D 82 F1 | 	sub	_var02, _var03
09904     3A 3F 02 FB | 	rdlong	_var03, arg01
09908     F8 3E 06 F1 | 	add	_var03, #248
0990c     1F 3F 02 FB | 	rdlong	_var03, _var03
09910     1F 3D 82 F1 | 	sub	_var02, _var03
09914     F0 74 06 F1 | 	add	arg01, #240
09918     3A 3D 62 FC | 	wrlong	_var02, arg01
0991c                 | _module_fit_right_ret
0991c     2D 00 64 FD | 	ret
09920                 | 
09920                 | _module_draw
09920     13 4C 05 F6 | 	mov	COUNT_, #19
09924     A9 00 A0 FD | 	call	#pushregs_
09928                 | _module_draw_enter
09928     3A 8D 02 F6 | 	mov	local01, arg01
0992c     3B 8F 02 F6 | 	mov	local02, arg02
09930     18 8F 06 F1 | 	add	local02, #280
09934     47 35 CA FA | 	rdbyte	result1, local02 wz
09938     18 8F 86 F1 | 	sub	local02, #280
0993c                 | '     {
0993c                 | '         return;
0993c     48 05 90 AD |  if_e	jmp	#LR__0358
09940     30 8F 06 F1 | 	add	local02, #304
09944     47 75 02 FB | 	rdlong	arg01, local02
09948     00 76 06 F6 | 	mov	arg02, #0
0994c     58 C3 B1 FD | 	call	#__system___funcptr_cmp
09950     00 34 0E F2 | 	cmp	result1, #0 wz
09954     46 75 02 56 |  if_ne	mov	arg01, local01
09958     20 1C 00 5F 
0995c     00 76 06 56 |  if_ne	mov	arg02, ##3686400
09960     E0 A0 BF 5D |  if_ne	call	#_display_canvas_image_start_address
09964                 | '     {
09964                 | '         display_canvas_image_start_address(display,  1024 * 600 * 2 * 3 );
09964                 | '     }
09964                 | '     switch (module->type)
09964     64 8E 86 F1 | 	sub	local02, #100
09968     47 91 02 FB | 	rdlong	local03, local02
0996c     CC 8E 86 F1 | 	sub	local02, #204
09970     48 93 02 F6 | 	mov	local04, local03
09974     01 92 86 F1 | 	sub	local04, #1
09978     07 92 26 F3 | 	fle	local04, #7
0997c     30 92 62 FD | 	jmprel	local04
09980                 | LR__0335
09980     1C 00 90 FD | 	jmp	#LR__0336
09984     D4 02 90 FD | 	jmp	#LR__0348
09988     F8 02 90 FD | 	jmp	#LR__0349
0998c     30 03 90 FD | 	jmp	#LR__0350
09990     74 03 90 FD | 	jmp	#LR__0351
09994     E4 03 90 FD | 	jmp	#LR__0352
09998     14 04 90 FD | 	jmp	#LR__0353
0999c     50 04 90 FD | 	jmp	#LR__0354
099a0                 | LR__0336
099a0     00 94 06 F6 | 	mov	local05, #0
099a4     EC 8E 06 F1 | 	add	local02, #236
099a8     47 97 02 FB | 	rdlong	local06, local02
099ac     EC 8E 86 F1 | 	sub	local02, #236
099b0     47 75 02 F6 | 	mov	arg01, local02
099b4     9C F9 BF FD | 	call	#_module_text_font_width
099b8     1A 99 02 F6 | 	mov	local07, result1
099bc     47 75 02 F6 | 	mov	arg01, local02
099c0     34 FA BF FD | 	call	#_module_text_font_height
099c4     1A 9B 02 F6 | 	mov	local08, result1
099c8                 | '         switch (module->data.text.alignmentH)
099c8     DC 8E 06 F1 | 	add	local02, #220
099cc     47 9D 02 FB | 	rdlong	local09, local02
099d0     DC 8E 86 F1 | 	sub	local02, #220
099d4     4E 9F 02 F6 | 	mov	local10, local09
099d8     01 9E 86 F1 | 	sub	local10, #1
099dc     03 9E 26 F3 | 	fle	local10, #3
099e0     30 9E 62 FD | 	jmprel	local10
099e4                 | LR__0337
099e4     0C 00 90 FD | 	jmp	#LR__0338
099e8     24 00 90 FD | 	jmp	#LR__0339
099ec     50 00 90 FD | 	jmp	#LR__0340
099f0     84 00 90 FD | 	jmp	#LR__0341
099f4                 | LR__0338
099f4     E8 8E 06 F1 | 	add	local02, #232
099f8     47 95 02 FB | 	rdlong	local05, local02
099fc     10 8E 06 F1 | 	add	local02, #16
09a00     47 A1 02 FB | 	rdlong	local11, local02
09a04     F8 8E 86 F1 | 	sub	local02, #248
09a08     50 95 02 F1 | 	add	local05, local11
09a0c                 | '             x = module->x + module->px;
09a0c                 | '             break;
09a0c     68 00 90 FD | 	jmp	#LR__0341
09a10                 | LR__0339
09a10     F0 8E 06 F1 | 	add	local02, #240
09a14     47 9D 02 FB | 	rdlong	local09, local02
09a18     4C 9D 82 F1 | 	sub	local09, local07
09a1c     4E A3 52 F6 | 	abs	local12, local09 wc
09a20     01 A2 46 F0 | 	shr	local12, #1
09a24     51 A3 82 F6 | 	negc	local12, local12
09a28     08 8E 86 F1 | 	sub	local02, #8
09a2c     47 A5 02 FB | 	rdlong	local13, local02
09a30     E8 8E 86 F1 | 	sub	local02, #232
09a34     52 95 02 F6 | 	mov	local05, local13
09a38     51 95 02 F1 | 	add	local05, local12
09a3c                 | '             x = module->x + (module->w - width) / 2;
09a3c                 | '             break;
09a3c     38 00 90 FD | 	jmp	#LR__0341
09a40                 | LR__0340
09a40     E8 8E 06 F1 | 	add	local02, #232
09a44     47 A7 02 FB | 	rdlong	local14, local02
09a48     53 A9 02 F6 | 	mov	local15, local14
09a4c     08 8E 06 F1 | 	add	local02, #8
09a50     47 A3 02 FB | 	rdlong	local12, local02
09a54     51 A1 02 F6 | 	mov	local11, local12
09a58     51 A9 02 F1 | 	add	local15, local12
09a5c     4C A9 82 F1 | 	sub	local15, local07
09a60     08 8E 06 F1 | 	add	local02, #8
09a64     47 AB 02 FB | 	rdlong	local16, local02
09a68     F8 8E 86 F1 | 	sub	local02, #248
09a6c     55 A5 02 F6 | 	mov	local13, local16
09a70     52 A9 82 F1 | 	sub	local15, local13
09a74     54 95 02 F6 | 	mov	local05, local15
09a78                 | '             x = module->x + module->w - width - module->px;
09a78                 | '             break;
09a78                 | LR__0341
09a78                 | '         }
09a78                 | ' 
09a78                 | '         switch (module->data.text.alignmentV)
09a78     E0 8E 06 F1 | 	add	local02, #224
09a7c     47 9D 02 FB | 	rdlong	local09, local02
09a80     E0 8E 86 F1 | 	sub	local02, #224
09a84     4E AD 02 F6 | 	mov	local17, local09
09a88     04 AC 86 F1 | 	sub	local17, #4
09a8c     03 AC 26 F3 | 	fle	local17, #3
09a90     30 AC 62 FD | 	jmprel	local17
09a94                 | LR__0342
09a94     0C 00 90 FD | 	jmp	#LR__0343
09a98     24 00 90 FD | 	jmp	#LR__0344
09a9c     4C 00 90 FD | 	jmp	#LR__0345
09aa0     80 00 90 FD | 	jmp	#LR__0346
09aa4                 | LR__0343
09aa4     EC 8E 06 F1 | 	add	local02, #236
09aa8     47 97 02 FB | 	rdlong	local06, local02
09aac     10 8E 06 F1 | 	add	local02, #16
09ab0     47 A1 02 FB | 	rdlong	local11, local02
09ab4     FC 8E 86 F1 | 	sub	local02, #252
09ab8     50 97 02 F1 | 	add	local06, local11
09abc                 | '             y = module->y + module->py;
09abc                 | '             break;
09abc     64 00 90 FD | 	jmp	#LR__0346
09ac0                 | LR__0344
09ac0     F4 8E 06 F1 | 	add	local02, #244
09ac4     47 A7 02 FB | 	rdlong	local14, local02
09ac8     4D A7 82 F1 | 	sub	local14, local08
09acc     53 A3 52 F6 | 	abs	local12, local14 wc
09ad0     01 A2 46 F0 | 	shr	local12, #1
09ad4     51 A3 82 F6 | 	negc	local12, local12
09ad8     08 8E 86 F1 | 	sub	local02, #8
09adc     47 97 02 FB | 	rdlong	local06, local02
09ae0     EC 8E 86 F1 | 	sub	local02, #236
09ae4     51 97 02 F1 | 	add	local06, local12
09ae8                 | '             y = module->y + (module->h - height) / 2;
09ae8                 | '             break;
09ae8     38 00 90 FD | 	jmp	#LR__0346
09aec                 | LR__0345
09aec     EC 8E 06 F1 | 	add	local02, #236
09af0     47 A7 02 FB | 	rdlong	local14, local02
09af4     53 A9 02 F6 | 	mov	local15, local14
09af8     08 8E 06 F1 | 	add	local02, #8
09afc     47 A3 02 FB | 	rdlong	local12, local02
09b00     51 A1 02 F6 | 	mov	local11, local12
09b04     51 A9 02 F1 | 	add	local15, local12
09b08     4D A9 82 F1 | 	sub	local15, local08
09b0c     08 8E 06 F1 | 	add	local02, #8
09b10     47 AB 02 FB | 	rdlong	local16, local02
09b14     FC 8E 86 F1 | 	sub	local02, #252
09b18     55 A5 02 F6 | 	mov	local13, local16
09b1c     52 A9 82 F1 | 	sub	local15, local13
09b20     54 97 02 F6 | 	mov	local06, local15
09b24                 | '             y = module->y + module->h - height - module->py;
09b24                 | '             break;
09b24                 | LR__0346
09b24     D4 8E 06 F1 | 	add	local02, #212
09b28     47 79 02 FB | 	rdlong	arg03, local02
09b2c     D4 8E 86 F1 | 	sub	local02, #212
09b30     46 75 02 F6 | 	mov	arg01, local01
09b34     00 76 06 F6 | 	mov	arg02, #0
09b38     00 7A 06 F6 | 	mov	arg04, #0
09b3c     90 A4 BF FD | 	call	#_display_set_text_parameter1
09b40     46 75 02 F6 | 	mov	arg01, local01
09b44     00 76 06 F6 | 	mov	arg02, #0
09b48     00 78 06 F6 | 	mov	arg03, #0
09b4c     00 7A 06 F6 | 	mov	arg04, #0
09b50     00 7C 06 F6 | 	mov	arg05, #0
09b54     C8 A4 BF FD | 	call	#_display_set_text_parameter2
09b58     47 A9 02 F6 | 	mov	local15, local02
09b5c     0C 8F 06 F1 | 	add	local02, #268
09b60     47 A7 02 FB | 	rdlong	local14, local02
09b64     0C 8F 86 F1 | 	sub	local02, #268
09b68     47 75 02 F6 | 	mov	arg01, local02
09b6c     E0 06 B1 FD | 	call	#_get_radius_1739
09b70     1A 7B 02 F6 | 	mov	arg04, result1
09b74     46 75 02 F6 | 	mov	arg01, local01
09b78     54 77 02 F6 | 	mov	arg02, local15
09b7c     53 79 02 F6 | 	mov	arg03, local14
09b80     30 07 B1 FD | 	call	#_draw_border_rectangle_rounded_1741
09b84     00 34 0E F2 | 	cmp	result1, #0 wz
09b88     44 00 90 5D |  if_ne	jmp	#LR__0347
09b8c     E8 8E 06 F1 | 	add	local02, #232
09b90     47 77 02 FB | 	rdlong	arg02, local02
09b94     04 8E 06 F1 | 	add	local02, #4
09b98     47 79 02 FB | 	rdlong	arg03, local02
09b9c     3B 7B 02 F6 | 	mov	arg04, arg02
09ba0     04 8E 06 F1 | 	add	local02, #4
09ba4     47 AB 02 FB | 	rdlong	local16, local02
09ba8     55 7B 02 F1 | 	add	arg04, local16
09bac     3C 7D 02 F6 | 	mov	arg05, arg03
09bb0     04 8E 06 F1 | 	add	local02, #4
09bb4     47 AD 02 FB | 	rdlong	local17, local02
09bb8     56 7D 02 F1 | 	add	arg05, local17
09bbc     18 8E 06 F1 | 	add	local02, #24
09bc0     47 7F 02 FB | 	rdlong	arg06, local02
09bc4     0C 8F 86 F1 | 	sub	local02, #268
09bc8     46 75 02 F6 | 	mov	arg01, local01
09bcc     9C A6 BF FD | 	call	#_display_draw_square_fill
09bd0                 | LR__0347
09bd0     10 8F 06 F1 | 	add	local02, #272
09bd4     47 77 02 FB | 	rdlong	arg02, local02
09bd8     04 8E 86 F1 | 	sub	local02, #4
09bdc     47 79 02 FB | 	rdlong	arg03, local02
09be0     3C AD 02 F6 | 	mov	local17, arg03
09be4     46 75 02 F6 | 	mov	arg01, local01
09be8     BC A0 BF FD | 	call	#_display_fore_ground_color_16bpp
09bec     46 75 02 F6 | 	mov	arg01, local01
09bf0     56 77 02 F6 | 	mov	arg02, local17
09bf4     38 A1 BF FD | 	call	#_display_back_ground_color_16bpp
09bf8     3C 8E 86 F1 | 	sub	local02, #60
09bfc     47 7B 02 FB | 	rdlong	arg04, local02
09c00     46 75 02 F6 | 	mov	arg01, local01
09c04     4A 77 02 F6 | 	mov	arg02, local05
09c08     4B 79 02 F6 | 	mov	arg03, local06
09c0c     6C A4 BF FD | 	call	#_display_draw_string
09c10     08 8E 06 F1 | 	add	local02, #8
09c14     47 9D CA FA | 	rdbyte	local09, local02 wz
09c18     D8 8E 86 F1 | 	sub	local02, #216
09c1c     D0 01 90 AD |  if_e	jmp	#LR__0354
09c20     4B 79 02 F6 | 	mov	arg03, local06
09c24     4D 79 02 F1 | 	add	arg03, local08
09c28     01 78 06 F1 | 	add	arg03, #1
09c2c     4A 7B 02 F6 | 	mov	arg04, local05
09c30     4C 7B 02 F1 | 	add	arg04, local07
09c34     4D 97 02 F1 | 	add	local06, local08
09c38     01 96 06 F1 | 	add	local06, #1
09c3c     10 8F 06 F1 | 	add	local02, #272
09c40     47 7F 02 FB | 	rdlong	arg06, local02
09c44     10 8F 86 F1 | 	sub	local02, #272
09c48     46 75 02 F6 | 	mov	arg01, local01
09c4c     4A 77 02 F6 | 	mov	arg02, local05
09c50     4B 7D 02 F6 | 	mov	arg05, local06
09c54     A8 A4 BF FD | 	call	#_display_draw_line
09c58                 | '             display_draw_line(display, x, y + height + 1, x + width, y + height + 1, module->foregroundColor);
09c58                 | '         break;
09c58     94 01 90 FD | 	jmp	#LR__0354
09c5c                 | LR__0348
09c5c     D0 8E 06 F1 | 	add	local02, #208
09c60     47 77 02 FB | 	rdlong	arg02, local02
09c64     18 8E 06 F1 | 	add	local02, #24
09c68     47 79 02 FB | 	rdlong	arg03, local02
09c6c     04 8E 06 F1 | 	add	local02, #4
09c70     47 7B 02 FB | 	rdlong	arg04, local02
09c74     EC 8E 86 F1 | 	sub	local02, #236
09c78     46 75 02 F6 | 	mov	arg01, local01
09c7c     A0 97 BF FD | 	call	#_display_bte_memory_copy_image
09c80                 | '     {
09c80                 | '         display_bte_memory_copy_image(display, module->data.image, module->x, module->y);
09c80                 | '         break;
09c80     6C 01 90 FD | 	jmp	#LR__0354
09c84                 | LR__0349
09c84     E8 8E 06 F1 | 	add	local02, #232
09c88     47 77 02 FB | 	rdlong	arg02, local02
09c8c     04 8E 06 F1 | 	add	local02, #4
09c90     47 79 02 FB | 	rdlong	arg03, local02
09c94     3B 7B 02 F6 | 	mov	arg04, arg02
09c98     04 8E 06 F1 | 	add	local02, #4
09c9c     47 AB 02 FB | 	rdlong	local16, local02
09ca0     55 7B 02 F1 | 	add	arg04, local16
09ca4     3C 7D 02 F6 | 	mov	arg05, arg03
09ca8     20 8E 06 F1 | 	add	local02, #32
09cac     47 7F 02 FB | 	rdlong	arg06, local02
09cb0     10 8F 86 F1 | 	sub	local02, #272
09cb4     46 75 02 F6 | 	mov	arg01, local01
09cb8     44 A4 BF FD | 	call	#_display_draw_line
09cbc                 | '     {
09cbc                 | '         display_draw_line(display, module->x, module->y, module->x + module->w, module->y, module->foregroundColor);
09cbc                 | '         break;
09cbc     30 01 90 FD | 	jmp	#LR__0354
09cc0                 | LR__0350
09cc0     E8 8E 06 F1 | 	add	local02, #232
09cc4     47 77 02 FB | 	rdlong	arg02, local02
09cc8     04 8E 06 F1 | 	add	local02, #4
09ccc     47 79 02 FB | 	rdlong	arg03, local02
09cd0     3B 7B 02 F6 | 	mov	arg04, arg02
09cd4     04 8E 06 F1 | 	add	local02, #4
09cd8     47 AB 02 FB | 	rdlong	local16, local02
09cdc     55 7B 02 F1 | 	add	arg04, local16
09ce0     3C 7D 02 F6 | 	mov	arg05, arg03
09ce4     04 8E 06 F1 | 	add	local02, #4
09ce8     47 AD 02 FB | 	rdlong	local17, local02
09cec     56 7D 02 F1 | 	add	arg05, local17
09cf0     1C 8E 06 F1 | 	add	local02, #28
09cf4     47 7F 02 FB | 	rdlong	arg06, local02
09cf8     10 8F 86 F1 | 	sub	local02, #272
09cfc     46 75 02 F6 | 	mov	arg01, local01
09d00     68 A5 BF FD | 	call	#_display_draw_square_fill
09d04                 | '     {
09d04                 | '         display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->foregroundColor);
09d04                 | '         break;
09d04     E8 00 90 FD | 	jmp	#LR__0354
09d08                 | LR__0351
09d08     47 75 02 F6 | 	mov	arg01, local02
09d0c     40 05 B1 FD | 	call	#_get_radius_1739
09d10     1A AD 02 F6 | 	mov	local17, result1
09d14     47 77 02 F6 | 	mov	arg02, local02
09d18     10 8F 06 F1 | 	add	local02, #272
09d1c     47 79 02 FB | 	rdlong	arg03, local02
09d20     46 75 02 F6 | 	mov	arg01, local01
09d24     56 7B 02 F6 | 	mov	arg04, local17
09d28     88 05 B1 FD | 	call	#_draw_border_rectangle_rounded_1741
09d2c     28 8E 86 F1 | 	sub	local02, #40
09d30     47 77 02 FB | 	rdlong	arg02, local02
09d34     04 8E 06 F1 | 	add	local02, #4
09d38     47 79 02 FB | 	rdlong	arg03, local02
09d3c     3B 7B 02 F6 | 	mov	arg04, arg02
09d40     04 8E 06 F1 | 	add	local02, #4
09d44     47 AB 02 FB | 	rdlong	local16, local02
09d48     55 7B 02 F1 | 	add	arg04, local16
09d4c     3C 7D 02 F6 | 	mov	arg05, arg03
09d50     04 8E 06 F1 | 	add	local02, #4
09d54     47 AB 02 FB | 	rdlong	local16, local02
09d58     55 7D 02 F1 | 	add	arg05, local16
09d5c     1C 8E 06 F1 | 	add	local02, #28
09d60     47 83 02 FB | 	rdlong	arg08, local02
09d64     10 8F 86 F1 | 	sub	local02, #272
09d68     46 75 02 F6 | 	mov	arg01, local01
09d6c     56 7F 02 F6 | 	mov	arg06, local17
09d70     56 81 02 F6 | 	mov	arg07, local17
09d74     60 A6 BF FD | 	call	#_display_draw_circle_square_fill
09d78                 | '     {
09d78                 | '         radius = get_radius(module);
09d78                 | '         draw_border_rectangle_rounded(display, module, module->foregroundColor, radius);
09d78                 | '         display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, module->foregroundColor);
09d78                 | '         break;
09d78     74 00 90 FD | 	jmp	#LR__0354
09d7c                 | LR__0352
09d7c     3C 8F 06 F1 | 	add	local02, #316
09d80     47 9D 02 FB | 	rdlong	local09, local02
09d84     3C 8F 86 F1 | 	sub	local02, #316
09d88     4E A9 02 FB | 	rdlong	local15, local09
09d8c     04 9C 06 F1 | 	add	local09, #4
09d90     4E A7 02 FB | 	rdlong	local14, local09
09d94     46 75 02 F6 | 	mov	arg01, local01
09d98     47 77 02 F6 | 	mov	arg02, local02
09d9c     C9 AC 02 F6 | 	mov	local17, objptr
09da0     54 93 01 F6 | 	mov	objptr, local15
09da4     2D A6 62 FD | 	call	local14
09da8     56 93 01 F6 | 	mov	objptr, local17
09dac                 | '     {
09dac                 | '         module->draw(display, module);
09dac                 | '         break;
09dac     40 00 90 FD | 	jmp	#LR__0354
09db0                 | LR__0353
09db0     3C 8F 06 F1 | 	add	local02, #316
09db4     47 A1 02 FB | 	rdlong	local11, local02
09db8     3C 8F 86 F1 | 	sub	local02, #316
09dbc     50 9D 02 F6 | 	mov	local09, local11
09dc0     4E A9 02 FB | 	rdlong	local15, local09
09dc4     04 9C 06 F1 | 	add	local09, #4
09dc8     4E A3 02 FB | 	rdlong	local12, local09
09dcc     51 A7 02 F6 | 	mov	local14, local12
09dd0     46 A5 02 F6 | 	mov	local13, local01
09dd4     47 AB 02 F6 | 	mov	local16, local02
09dd8     52 75 02 F6 | 	mov	arg01, local13
09ddc     55 77 02 F6 | 	mov	arg02, local16
09de0     C9 AE 02 F6 | 	mov	local18, objptr
09de4     54 93 01 F6 | 	mov	objptr, local15
09de8     2D A6 62 FD | 	call	local14
09dec     57 93 01 F6 | 	mov	objptr, local18
09df0                 | '     {
09df0                 | '         module->draw(display, module);
09df0                 | '         break;
09df0                 | LR__0354
09df0     00 B0 06 F6 | 	mov	local19, #0
09df4                 | '     }
09df4                 | '     }
09df4                 | ' 
09df4                 | '     for (int i = 0; i < module->numChildren; i++)
09df4                 | LR__0355
09df4     E4 8E 06 F1 | 	add	local02, #228
09df8     47 91 02 FB | 	rdlong	local03, local02
09dfc     E4 8E 86 F1 | 	sub	local02, #228
09e00     48 B1 52 F2 | 	cmps	local19, local03 wc
09e04     28 00 90 3D |  if_ae	jmp	#LR__0356
09e08     46 75 02 F6 | 	mov	arg01, local01
09e0c     58 A1 02 F6 | 	mov	local11, local19
09e10     02 A0 66 F0 | 	shl	local11, #2
09e14     04 8E 06 F1 | 	add	local02, #4
09e18     47 A1 02 F1 | 	add	local11, local02
09e1c     50 77 02 FB | 	rdlong	arg02, local11
09e20     FC FA BF FD | 	call	#_module_draw
09e24     01 B0 06 F1 | 	add	local19, #1
09e28     04 8E 86 F1 | 	sub	local02, #4
09e2c     C4 FF 9F FD | 	jmp	#LR__0355
09e30                 | LR__0356
09e30     30 8F 06 F1 | 	add	local02, #304
09e34     47 75 02 FB | 	rdlong	arg01, local02
09e38     30 8F 86 F1 | 	sub	local02, #304
09e3c     00 76 06 F6 | 	mov	arg02, #0
09e40     64 BE B1 FD | 	call	#__system___funcptr_cmp
09e44     00 34 0E F2 | 	cmp	result1, #0 wz
09e48     3C 00 90 AD |  if_e	jmp	#LR__0357
09e4c     30 8F 06 F1 | 	add	local02, #304
09e50     47 91 02 FB | 	rdlong	local03, local02
09e54     30 8F 86 F1 | 	sub	local02, #304
09e58     48 9D 02 FB | 	rdlong	local09, local03
09e5c     04 90 06 F1 | 	add	local03, #4
09e60     48 A9 02 FB | 	rdlong	local15, local03
09e64     46 75 02 F6 | 	mov	arg01, local01
09e68     47 77 02 F6 | 	mov	arg02, local02
09e6c     C9 AA 02 F6 | 	mov	local16, objptr
09e70     4E 93 01 F6 | 	mov	objptr, local09
09e74     2D A8 62 FD | 	call	local15
09e78     55 93 01 F6 | 	mov	objptr, local16
09e7c     46 75 02 F6 | 	mov	arg01, local01
09e80     00 76 06 F6 | 	mov	arg02, #0
09e84     BC 9B BF FD | 	call	#_display_canvas_image_start_address
09e88                 | LR__0357
09e88                 | LR__0358
09e88     A8 F0 03 F6 | 	mov	ptra, fp
09e8c     B3 00 A0 FD | 	call	#popregs_
09e90                 | _module_draw_ret
09e90     2D 00 64 FD | 	ret
09e94                 | 
09e94                 | _keyboard_create
09e94     17 01 00 FF 
09e98     A0 D6 05 F1 | 	add	ptr__dat__, ##143008
09e9c     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
09ea0     04 D6 05 F1 | 	add	ptr__dat__, #4
09ea4     EB 76 62 FC | 	wrlong	arg02, ptr__dat__
09ea8     04 D6 05 F1 | 	add	ptr__dat__, #4
09eac     EB 74 02 F6 | 	mov	arg01, ptr__dat__
09eb0     17 01 00 FF 
09eb4     A8 D6 85 F1 | 	sub	ptr__dat__, ##143016
09eb8     4F 01 00 FF 
09ebc     F4 76 06 F6 | 	mov	arg02, ##@LR__1993
09ec0     F4 C0 BF FD | 	call	#_strcpy
09ec4                 | ' }
09ec4                 | ' 
09ec4                 | ' 
09ec4                 | ' Keyboard *keyboard_create(Display *display, Images *images)
09ec4                 | ' {
09ec4                 | '     staticKeyboard.display = display;
09ec4                 | '     staticKeyboard.images = images;
09ec4                 | '     strcpy(staticKeyboard.keyboard_buffer, "");
09ec4                 | '     return &staticKeyboard;
09ec4     17 01 00 FF 
09ec8     A0 D6 05 F1 | 	add	ptr__dat__, ##143008
09ecc     EB 34 02 F6 | 	mov	result1, ptr__dat__
09ed0     17 01 00 FF 
09ed4     A0 D6 85 F1 | 	sub	ptr__dat__, ##143008
09ed8                 | _keyboard_create_ret
09ed8     2D 00 64 FD | 	ret
09edc                 | 
09edc                 | _keyboard_get_input
09edc     07 4C 05 F6 | 	mov	COUNT_, #7
09ee0     A9 00 A0 FD | 	call	#pushregs_
09ee4     3A 8D 02 F6 | 	mov	local01, arg01
09ee8     3B 8F 02 F6 | 	mov	local02, arg02
09eec     00 74 06 F6 | 	mov	arg01, #0
09ef0     DC F5 B1 FD | 	call	#__system___getiolock_1306
09ef4     1A 75 02 F6 | 	mov	arg01, result1
09ef8     74 BD B1 FD | 	call	#__system___lockmem
09efc     4F 01 00 FF 
09f00     F6 76 06 F6 | 	mov	arg02, ##@LR__1994
09f04     00 74 06 F6 | 	mov	arg01, #0
09f08     00 78 06 F6 | 	mov	arg03, #0
09f0c     08 C3 B1 FD | 	call	#__system___basic_print_string
09f10     00 74 06 F6 | 	mov	arg01, #0
09f14     47 77 02 F6 | 	mov	arg02, local02
09f18     00 78 06 F6 | 	mov	arg03, #0
09f1c     F8 C2 B1 FD | 	call	#__system___basic_print_string
09f20     00 74 06 F6 | 	mov	arg01, #0
09f24     0A 76 06 F6 | 	mov	arg02, #10
09f28     00 78 06 F6 | 	mov	arg03, #0
09f2c     9C C2 B1 FD | 	call	#__system___basic_print_char
09f30     00 74 06 F6 | 	mov	arg01, #0
09f34     98 F5 B1 FD | 	call	#__system___getiolock_1306
09f38     1A 01 68 FC | 	wrlong	#0, result1
09f3c     5A 8C 06 F1 | 	add	local01, #90
09f40     46 01 48 FC | 	wrbyte	#0, local01
09f44     52 8C 86 F1 | 	sub	local01, #82
09f48     46 75 02 F6 | 	mov	arg01, local01
09f4c     4F 01 00 FF 
09f50     08 77 06 F6 | 	mov	arg02, ##@LR__1995
09f54     60 C0 BF FD | 	call	#_strcpy
09f58     34 8C 06 F1 | 	add	local01, #52
09f5c     46 75 02 F6 | 	mov	arg01, local01
09f60     3C 8C 86 F1 | 	sub	local01, #60
09f64     47 77 02 F6 | 	mov	arg02, local02
09f68     4C C0 BF FD | 	call	#_strcpy
09f6c     46 75 02 FB | 	rdlong	arg01, local01
09f70     00 76 06 F6 | 	mov	arg02, #0
09f74     0A 78 C6 F9 | 	decod	arg03, #10
09f78     00 7A 06 F6 | 	mov	arg04, #0
09f7c     00 7C 06 F6 | 	mov	arg05, #0
09f80     C0 12 00 FF 
09f84     00 7E 06 F6 | 	mov	arg06, ##2457600
09f88     0A 80 C6 F9 | 	decod	arg07, #10
09f8c     00 82 06 F6 | 	mov	arg08, #0
09f90     00 84 06 F6 | 	mov	arg09, #0
09f94     0A 86 C6 F9 | 	decod	arg10, #10
09f98     01 00 00 FF 
09f9c     58 88 06 F6 | 	mov	arg11, ##600
09fa0     84 A6 BF FD | 	call	#_display_bte_memory_copy
09fa4     5C 8C 06 F1 | 	add	local01, #92
09fa8     46 91 02 F6 | 	mov	local03, local01
09fac     48 75 02 F6 | 	mov	arg01, local03
09fb0     00 76 06 F6 | 	mov	arg02, #0
09fb4     90 EB BF FD | 	call	#_module_init
09fb8     40 8D 06 F1 | 	add	local01, #320
09fbc     46 8F 02 F6 | 	mov	local02, local01
09fc0     47 75 02 F6 | 	mov	arg01, local02
09fc4     48 77 02 F6 | 	mov	arg02, local03
09fc8     7C EB BF FD | 	call	#_module_init
09fcc     47 75 02 F6 | 	mov	arg01, local02
09fd0     CC 74 06 F1 | 	add	arg01, #204
09fd4     3A 09 68 FC | 	wrlong	#4, arg01
09fd8     24 74 06 F1 | 	add	arg01, #36
09fdc     02 00 80 FF 
09fe0     3A 01 68 FC | 	wrlong	##1024, arg01
09fe4     04 74 06 F1 | 	add	arg01, #4
09fe8     3A 37 6A FC | 	wrlong	#283, arg01
09fec     47 75 02 F6 | 	mov	arg01, local02
09ff0     E8 74 06 F1 | 	add	arg01, #232
09ff4     3A 01 68 FC | 	wrlong	#0, arg01
09ff8     04 74 06 F1 | 	add	arg01, #4
09ffc     3A 79 6A FC | 	wrlong	#316, arg01
0a000     47 75 02 F6 | 	mov	arg01, local02
0a004     F8 74 06 F1 | 	add	arg01, #248
0a008     3A 15 68 FC | 	wrlong	#10, arg01
0a00c     04 74 06 F1 | 	add	arg01, #4
0a010     3A 15 68 FC | 	wrlong	#10, arg01
0a014     47 75 02 F6 | 	mov	arg01, local02
0a018     10 78 06 F6 | 	mov	arg03, #16
0a01c     10 75 06 F1 | 	add	arg01, #272
0a020     3A 21 68 FC | 	wrlong	#16, arg01
0a024     04 74 86 F1 | 	sub	arg01, #4
0a028     3A 21 68 FC | 	wrlong	#16, arg01
0a02c     40 8D 06 F1 | 	add	local01, #320
0a030     46 93 02 F6 | 	mov	local04, local01
0a034     49 75 02 F6 | 	mov	arg01, local04
0a038     47 77 02 F6 | 	mov	arg02, local02
0a03c     08 EB BF FD | 	call	#_module_init
0a040     49 75 02 F6 | 	mov	arg01, local04
0a044     0A 76 C6 F9 | 	decod	arg02, #10
0a048     28 78 06 F6 | 	mov	arg03, #40
0a04c     CC 74 06 F1 | 	add	arg01, #204
0a050     3A 09 68 FC | 	wrlong	#4, arg01
0a054     24 74 06 F1 | 	add	arg01, #36
0a058     02 00 80 FF 
0a05c     3A 01 68 FC | 	wrlong	##1024, arg01
0a060     04 74 06 F1 | 	add	arg01, #4
0a064     3A 51 68 FC | 	wrlong	#40, arg01
0a068     00 8E 06 F6 | 	mov	local02, #0
0a06c     20 CF 21 FF 
0a070     00 94 06 F6 | 	mov	local05, ##1134444544
0a074     28 74 06 F6 | 	mov	arg01, #40
0a078     78 D6 B1 FD | 	call	#__system___float_fromint
0a07c     1A 77 02 F6 | 	mov	arg02, result1
0a080     4A 75 02 F6 | 	mov	arg01, local05
0a084     1F 76 E6 F4 | 	bitnot	arg02, #31
0a088     98 D6 B1 FD | 	call	#__system___float_add
0a08c     1A 75 02 F6 | 	mov	arg01, result1
0a090     00 76 06 F6 | 	mov	arg02, #0
0a094     80 DE B1 FD | 	call	#__system___float_tointeger
0a098     49 75 02 F6 | 	mov	arg01, local04
0a09c     E8 74 06 F1 | 	add	arg01, #232
0a0a0     3A 8F 62 FC | 	wrlong	local02, arg01
0a0a4     04 74 06 F1 | 	add	arg01, #4
0a0a8     3A 35 62 FC | 	wrlong	result1, arg01
0a0ac     49 75 02 F6 | 	mov	arg01, local04
0a0b0     00 78 06 F6 | 	mov	arg03, #0
0a0b4     10 75 06 F1 | 	add	arg01, #272
0a0b8     3A 01 68 FC | 	wrlong	#0, arg01
0a0bc     04 74 86 F1 | 	sub	arg01, #4
0a0c0     3A 01 68 FC | 	wrlong	#0, arg01
0a0c4     40 8D 06 F1 | 	add	local01, #320
0a0c8     46 8F 02 F6 | 	mov	local02, local01
0a0cc     47 75 02 F6 | 	mov	arg01, local02
0a0d0     49 77 02 F6 | 	mov	arg02, local04
0a0d4     70 EA BF FD | 	call	#_module_init
0a0d8     01 00 00 FF 
0a0dc     E0 8D 86 F1 | 	sub	local01, ##992
0a0e0     46 77 02 F6 | 	mov	arg02, local01
0a0e4     3C 8C 86 F1 | 	sub	local01, #60
0a0e8     47 75 02 F6 | 	mov	arg01, local02
0a0ec     F4 EF BF FD | 	call	#_module_set_text
0a0f0     47 75 02 F6 | 	mov	arg01, local02
0a0f4     02 76 06 F6 | 	mov	arg02, #2
0a0f8     28 F1 BF FD | 	call	#_module_text_font
0a0fc     47 75 02 F6 | 	mov	arg01, local02
0a100     3C F0 BF FD | 	call	#_module_text_fit
0a104     47 75 02 F6 | 	mov	arg01, local02
0a108     01 76 06 F6 | 	mov	arg02, #1
0a10c     02 78 06 F6 | 	mov	arg03, #2
0a110     AC F4 BF FD | 	call	#_module_align_center_sector
0a114     47 75 02 F6 | 	mov	arg01, local02
0a118     58 F4 BF FD | 	call	#_module_align_middle
0a11c     47 75 02 F6 | 	mov	arg01, local02
0a120     00 78 06 F6 | 	mov	arg03, #0
0a124     10 75 06 F1 | 	add	arg01, #272
0a128     7F 00 80 FF 
0a12c     3A FF 6B FC | 	wrlong	##65535, arg01
0a130     04 74 86 F1 | 	sub	arg01, #4
0a134     3A 01 68 FC | 	wrlong	#0, arg01
0a138     46 75 02 F6 | 	mov	arg01, local01
0a13c     0A 76 06 F6 | 	mov	arg02, #10
0a140     00 7A 06 F6 | 	mov	arg04, #0
0a144     00 D0 1F FF 
0a148     00 7C 06 F6 | 	mov	arg05, ##1067450368
0a14c     88 03 B1 FD | 	call	#_createKey_1793
0a150     1A 95 02 F6 | 	mov	local05, result1
0a154     46 75 02 F6 | 	mov	arg01, local01
0a158     0B 76 06 F6 | 	mov	arg02, #11
0a15c     4A 79 02 F6 | 	mov	arg03, local05
0a160     00 7A 06 F6 | 	mov	arg04, #0
0a164     00 C0 1F FF 
0a168     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a16c     68 03 B1 FD | 	call	#_createKey_1793
0a170     1A 79 02 F6 | 	mov	arg03, result1
0a174     46 75 02 F6 | 	mov	arg01, local01
0a178     0C 76 06 F6 | 	mov	arg02, #12
0a17c     00 7A 06 F6 | 	mov	arg04, #0
0a180     00 C0 1F FF 
0a184     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a188     4C 03 B1 FD | 	call	#_createKey_1793
0a18c     1A 79 02 F6 | 	mov	arg03, result1
0a190     46 75 02 F6 | 	mov	arg01, local01
0a194     0D 76 06 F6 | 	mov	arg02, #13
0a198     00 7A 06 F6 | 	mov	arg04, #0
0a19c     00 C0 1F FF 
0a1a0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1a4     30 03 B1 FD | 	call	#_createKey_1793
0a1a8     1A 79 02 F6 | 	mov	arg03, result1
0a1ac     46 75 02 F6 | 	mov	arg01, local01
0a1b0     0E 76 06 F6 | 	mov	arg02, #14
0a1b4     00 7A 06 F6 | 	mov	arg04, #0
0a1b8     00 C0 1F FF 
0a1bc     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1c0     14 03 B1 FD | 	call	#_createKey_1793
0a1c4     1A 79 02 F6 | 	mov	arg03, result1
0a1c8     46 75 02 F6 | 	mov	arg01, local01
0a1cc     0F 76 06 F6 | 	mov	arg02, #15
0a1d0     00 7A 06 F6 | 	mov	arg04, #0
0a1d4     00 C0 1F FF 
0a1d8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1dc     F8 02 B1 FD | 	call	#_createKey_1793
0a1e0     1A 79 02 F6 | 	mov	arg03, result1
0a1e4     46 75 02 F6 | 	mov	arg01, local01
0a1e8     10 76 06 F6 | 	mov	arg02, #16
0a1ec     00 7A 06 F6 | 	mov	arg04, #0
0a1f0     00 C0 1F FF 
0a1f4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1f8     DC 02 B1 FD | 	call	#_createKey_1793
0a1fc     1A 79 02 F6 | 	mov	arg03, result1
0a200     46 75 02 F6 | 	mov	arg01, local01
0a204     11 76 06 F6 | 	mov	arg02, #17
0a208     00 7A 06 F6 | 	mov	arg04, #0
0a20c     00 C0 1F FF 
0a210     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a214     C0 02 B1 FD | 	call	#_createKey_1793
0a218     1A 79 02 F6 | 	mov	arg03, result1
0a21c     46 75 02 F6 | 	mov	arg01, local01
0a220     12 76 06 F6 | 	mov	arg02, #18
0a224     00 7A 06 F6 | 	mov	arg04, #0
0a228     00 C0 1F FF 
0a22c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a230     A4 02 B1 FD | 	call	#_createKey_1793
0a234     1A 79 02 F6 | 	mov	arg03, result1
0a238     46 75 02 F6 | 	mov	arg01, local01
0a23c     13 76 06 F6 | 	mov	arg02, #19
0a240     00 7A 06 F6 | 	mov	arg04, #0
0a244     00 C0 1F FF 
0a248     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a24c     88 02 B1 FD | 	call	#_createKey_1793
0a250     1A 79 02 F6 | 	mov	arg03, result1
0a254     46 75 02 F6 | 	mov	arg01, local01
0a258     14 76 06 F6 | 	mov	arg02, #20
0a25c     00 7A 06 F6 | 	mov	arg04, #0
0a260     00 C0 1F FF 
0a264     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a268     6C 02 B1 FD | 	call	#_createKey_1793
0a26c     46 75 02 F6 | 	mov	arg01, local01
0a270     15 76 06 F6 | 	mov	arg02, #21
0a274     00 78 06 F6 | 	mov	arg03, #0
0a278     4A 7B 02 F6 | 	mov	arg04, local05
0a27c     00 E0 1F FF 
0a280     00 7C 06 F6 | 	mov	arg05, ##1069547520
0a284     50 02 B1 FD | 	call	#_createKey_1793
0a288     1A 79 02 F6 | 	mov	arg03, result1
0a28c     46 75 02 F6 | 	mov	arg01, local01
0a290     16 76 06 F6 | 	mov	arg02, #22
0a294     4A 7B 02 F6 | 	mov	arg04, local05
0a298     00 C0 1F FF 
0a29c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2a0     34 02 B1 FD | 	call	#_createKey_1793
0a2a4     1A 79 02 F6 | 	mov	arg03, result1
0a2a8     46 75 02 F6 | 	mov	arg01, local01
0a2ac     17 76 06 F6 | 	mov	arg02, #23
0a2b0     4A 7B 02 F6 | 	mov	arg04, local05
0a2b4     00 C0 1F FF 
0a2b8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2bc     18 02 B1 FD | 	call	#_createKey_1793
0a2c0     1A 79 02 F6 | 	mov	arg03, result1
0a2c4     46 75 02 F6 | 	mov	arg01, local01
0a2c8     18 76 06 F6 | 	mov	arg02, #24
0a2cc     4A 7B 02 F6 | 	mov	arg04, local05
0a2d0     00 C0 1F FF 
0a2d4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2d8     FC 01 B1 FD | 	call	#_createKey_1793
0a2dc     1A 79 02 F6 | 	mov	arg03, result1
0a2e0     46 75 02 F6 | 	mov	arg01, local01
0a2e4     19 76 06 F6 | 	mov	arg02, #25
0a2e8     4A 7B 02 F6 | 	mov	arg04, local05
0a2ec     00 C0 1F FF 
0a2f0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2f4     E0 01 B1 FD | 	call	#_createKey_1793
0a2f8     1A 79 02 F6 | 	mov	arg03, result1
0a2fc     46 75 02 F6 | 	mov	arg01, local01
0a300     1A 76 06 F6 | 	mov	arg02, #26
0a304     4A 7B 02 F6 | 	mov	arg04, local05
0a308     00 C0 1F FF 
0a30c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a310     C4 01 B1 FD | 	call	#_createKey_1793
0a314     1A 79 02 F6 | 	mov	arg03, result1
0a318     46 75 02 F6 | 	mov	arg01, local01
0a31c     1B 76 06 F6 | 	mov	arg02, #27
0a320     4A 7B 02 F6 | 	mov	arg04, local05
0a324     00 C0 1F FF 
0a328     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a32c     A8 01 B1 FD | 	call	#_createKey_1793
0a330     1A 79 02 F6 | 	mov	arg03, result1
0a334     46 75 02 F6 | 	mov	arg01, local01
0a338     1C 76 06 F6 | 	mov	arg02, #28
0a33c     4A 7B 02 F6 | 	mov	arg04, local05
0a340     00 C0 1F FF 
0a344     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a348     8C 01 B1 FD | 	call	#_createKey_1793
0a34c     1A 79 02 F6 | 	mov	arg03, result1
0a350     46 75 02 F6 | 	mov	arg01, local01
0a354     1D 76 06 F6 | 	mov	arg02, #29
0a358     4A 7B 02 F6 | 	mov	arg04, local05
0a35c     00 C0 1F FF 
0a360     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a364     70 01 B1 FD | 	call	#_createKey_1793
0a368     1A 79 02 F6 | 	mov	arg03, result1
0a36c     46 75 02 F6 | 	mov	arg01, local01
0a370     1E 76 06 F6 | 	mov	arg02, #30
0a374     4A 7B 02 F6 | 	mov	arg04, local05
0a378     00 C0 1F FF 
0a37c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a380     54 01 B1 FD | 	call	#_createKey_1793
0a384     1A 79 02 F6 | 	mov	arg03, result1
0a388     46 75 02 F6 | 	mov	arg01, local01
0a38c     1F 76 06 F6 | 	mov	arg02, #31
0a390     4A 7B 02 F6 | 	mov	arg04, local05
0a394     00 E0 1F FF 
0a398     00 7C 06 F6 | 	mov	arg05, ##1069547520
0a39c     38 01 B1 FD | 	call	#_createKey_1793
0a3a0     1A 95 02 F6 | 	mov	local05, result1
0a3a4     46 75 02 F6 | 	mov	arg01, local01
0a3a8     20 76 06 F6 | 	mov	arg02, #32
0a3ac     00 78 06 F6 | 	mov	arg03, #0
0a3b0     4A 7B 02 F6 | 	mov	arg04, local05
0a3b4     00 08 20 FF 
0a3b8     00 7C 06 F6 | 	mov	arg05, ##1074790400
0a3bc     18 01 B1 FD | 	call	#_createKey_1793
0a3c0     1A 79 02 F6 | 	mov	arg03, result1
0a3c4     46 75 02 F6 | 	mov	arg01, local01
0a3c8     21 76 06 F6 | 	mov	arg02, #33
0a3cc     4A 7B 02 F6 | 	mov	arg04, local05
0a3d0     00 C0 1F FF 
0a3d4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a3d8     FC 00 B1 FD | 	call	#_createKey_1793
0a3dc     1A 79 02 F6 | 	mov	arg03, result1
0a3e0     46 75 02 F6 | 	mov	arg01, local01
0a3e4     22 76 06 F6 | 	mov	arg02, #34
0a3e8     4A 7B 02 F6 | 	mov	arg04, local05
0a3ec     00 C0 1F FF 
0a3f0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a3f4     E0 00 B1 FD | 	call	#_createKey_1793
0a3f8     1A 79 02 F6 | 	mov	arg03, result1
0a3fc     46 75 02 F6 | 	mov	arg01, local01
0a400     23 76 06 F6 | 	mov	arg02, #35
0a404     4A 7B 02 F6 | 	mov	arg04, local05
0a408     00 C0 1F FF 
0a40c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a410     C4 00 B1 FD | 	call	#_createKey_1793
0a414     1A 79 02 F6 | 	mov	arg03, result1
0a418     46 75 02 F6 | 	mov	arg01, local01
0a41c     24 76 06 F6 | 	mov	arg02, #36
0a420     4A 7B 02 F6 | 	mov	arg04, local05
0a424     00 C0 1F FF 
0a428     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a42c     A8 00 B1 FD | 	call	#_createKey_1793
0a430     1A 79 02 F6 | 	mov	arg03, result1
0a434     46 75 02 F6 | 	mov	arg01, local01
0a438     25 76 06 F6 | 	mov	arg02, #37
0a43c     4A 7B 02 F6 | 	mov	arg04, local05
0a440     00 C0 1F FF 
0a444     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a448     8C 00 B1 FD | 	call	#_createKey_1793
0a44c     1A 79 02 F6 | 	mov	arg03, result1
0a450     46 75 02 F6 | 	mov	arg01, local01
0a454     26 76 06 F6 | 	mov	arg02, #38
0a458     4A 7B 02 F6 | 	mov	arg04, local05
0a45c     00 C0 1F FF 
0a460     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a464     70 00 B1 FD | 	call	#_createKey_1793
0a468     1A 79 02 F6 | 	mov	arg03, result1
0a46c     46 75 02 F6 | 	mov	arg01, local01
0a470     27 76 06 F6 | 	mov	arg02, #39
0a474     4A 7B 02 F6 | 	mov	arg04, local05
0a478     00 C0 1F FF 
0a47c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a480     54 00 B1 FD | 	call	#_createKey_1793
0a484     1A 79 02 F6 | 	mov	arg03, result1
0a488     46 75 02 F6 | 	mov	arg01, local01
0a48c     28 76 06 F6 | 	mov	arg02, #40
0a490     4A 7B 02 F6 | 	mov	arg04, local05
0a494     00 C0 1F FF 
0a498     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a49c     38 00 B1 FD | 	call	#_createKey_1793
0a4a0     1A 79 02 F6 | 	mov	arg03, result1
0a4a4     46 75 02 F6 | 	mov	arg01, local01
0a4a8     29 76 06 F6 | 	mov	arg02, #41
0a4ac     4A 7B 02 F6 | 	mov	arg04, local05
0a4b0     00 C0 1F FF 
0a4b4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a4b8     1C 00 B1 FD | 	call	#_createKey_1793
0a4bc     1A 97 02 F6 | 	mov	local06, result1
0a4c0     46 75 02 F6 | 	mov	arg01, local01
0a4c4     2A 76 06 F6 | 	mov	arg02, #42
0a4c8     00 78 06 F6 | 	mov	arg03, #0
0a4cc     4B 7B 02 F6 | 	mov	arg04, local06
0a4d0     00 18 20 FF 
0a4d4     00 7C 06 F6 | 	mov	arg05, ##1076887552
0a4d8     FC FF B0 FD | 	call	#_createKey_1793
0a4dc     1A 79 02 F6 | 	mov	arg03, result1
0a4e0     46 75 02 F6 | 	mov	arg01, local01
0a4e4     2B 76 06 F6 | 	mov	arg02, #43
0a4e8     4B 7B 02 F6 | 	mov	arg04, local06
0a4ec     00 D0 1F FF 
0a4f0     00 7C 06 F6 | 	mov	arg05, ##1067450368
0a4f4     E0 FF B0 FD | 	call	#_createKey_1793
0a4f8     1A 79 02 F6 | 	mov	arg03, result1
0a4fc     46 75 02 F6 | 	mov	arg01, local01
0a500     2C 76 06 F6 | 	mov	arg02, #44
0a504     4B 7B 02 F6 | 	mov	arg04, local06
0a508     00 20 20 FF 
0a50c     00 7C 06 F6 | 	mov	arg05, ##1077936128
0a510     C4 FF B0 FD | 	call	#_createKey_1793
0a514     1A 79 02 F6 | 	mov	arg03, result1
0a518     46 75 02 F6 | 	mov	arg01, local01
0a51c     2D 76 06 F6 | 	mov	arg02, #45
0a520     4B 7B 02 F6 | 	mov	arg04, local06
0a524     00 D0 1F FF 
0a528     00 7C 06 F6 | 	mov	arg05, ##1067450368
0a52c     A8 FF B0 FD | 	call	#_createKey_1793
0a530     1A 79 02 F6 | 	mov	arg03, result1
0a534     46 75 02 F6 | 	mov	arg01, local01
0a538     2E 76 06 F6 | 	mov	arg02, #46
0a53c     4B 7B 02 F6 | 	mov	arg04, local06
0a540     1E 7C C6 F9 | 	decod	arg05, #30
0a544     90 FF B0 FD | 	call	#_createKey_1793
0a548     46 75 02 F6 | 	mov	arg01, local01
0a54c     07 76 06 F6 | 	mov	arg02, #7
0a550     4A 79 02 F6 | 	mov	arg03, local05
0a554     00 7A 06 F6 | 	mov	arg04, #0
0a558     00 C0 1F FF 
0a55c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a560     74 FF B0 FD | 	call	#_createKey_1793
0a564     1A 79 02 F6 | 	mov	arg03, result1
0a568     46 75 02 F6 | 	mov	arg01, local01
0a56c     08 76 06 F6 | 	mov	arg02, #8
0a570     00 7A 06 F6 | 	mov	arg04, #0
0a574     00 C0 1F FF 
0a578     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a57c     58 FF B0 FD | 	call	#_createKey_1793
0a580     1A 79 02 F6 | 	mov	arg03, result1
0a584     46 75 02 F6 | 	mov	arg01, local01
0a588     09 76 06 F6 | 	mov	arg02, #9
0a58c     00 7A 06 F6 | 	mov	arg04, #0
0a590     00 C0 1F FF 
0a594     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a598     3C FF B0 FD | 	call	#_createKey_1793
0a59c     1A 97 02 F6 | 	mov	local06, result1
0a5a0     46 75 02 F6 | 	mov	arg01, local01
0a5a4     04 76 06 F6 | 	mov	arg02, #4
0a5a8     4A 79 02 F6 | 	mov	arg03, local05
0a5ac     4B 7B 02 F6 | 	mov	arg04, local06
0a5b0     00 C0 1F FF 
0a5b4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a5b8     1C FF B0 FD | 	call	#_createKey_1793
0a5bc     1A 79 02 F6 | 	mov	arg03, result1
0a5c0     46 75 02 F6 | 	mov	arg01, local01
0a5c4     05 76 06 F6 | 	mov	arg02, #5
0a5c8     4B 7B 02 F6 | 	mov	arg04, local06
0a5cc     00 C0 1F FF 
0a5d0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a5d4     00 FF B0 FD | 	call	#_createKey_1793
0a5d8     1A 99 02 F6 | 	mov	local07, result1
0a5dc     46 75 02 F6 | 	mov	arg01, local01
0a5e0     06 76 06 F6 | 	mov	arg02, #6
0a5e4     4C 79 02 F6 | 	mov	arg03, local07
0a5e8     4B 7B 02 F6 | 	mov	arg04, local06
0a5ec     00 C0 1F FF 
0a5f0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a5f4     E0 FE B0 FD | 	call	#_createKey_1793
0a5f8     46 75 02 F6 | 	mov	arg01, local01
0a5fc     01 76 06 F6 | 	mov	arg02, #1
0a600     4A 79 02 F6 | 	mov	arg03, local05
0a604     4C 7B 02 F6 | 	mov	arg04, local07
0a608     00 C0 1F FF 
0a60c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a610     C4 FE B0 FD | 	call	#_createKey_1793
0a614     1A 79 02 F6 | 	mov	arg03, result1
0a618     46 75 02 F6 | 	mov	arg01, local01
0a61c     02 76 06 F6 | 	mov	arg02, #2
0a620     4C 7B 02 F6 | 	mov	arg04, local07
0a624     00 C0 1F FF 
0a628     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a62c     A8 FE B0 FD | 	call	#_createKey_1793
0a630     1A 79 02 F6 | 	mov	arg03, result1
0a634     46 75 02 F6 | 	mov	arg01, local01
0a638     03 76 06 F6 | 	mov	arg02, #3
0a63c     4C 7B 02 F6 | 	mov	arg04, local07
0a640     00 C0 1F FF 
0a644     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a648     8C FE B0 FD | 	call	#_createKey_1793
0a64c     1A 7B 02 F6 | 	mov	arg04, result1
0a650     46 75 02 F6 | 	mov	arg01, local01
0a654     00 76 06 F6 | 	mov	arg02, #0
0a658     4A 79 02 F6 | 	mov	arg03, local05
0a65c     00 30 20 FF 
0a660     00 7C 06 F6 | 	mov	arg05, ##1080033280
0a664     70 FE B0 FD | 	call	#_createKey_1793
0a668     5A 8C 06 F1 | 	add	local01, #90
0a66c     46 01 48 FC | 	wrbyte	#0, local01
0a670     5A 8C 86 F1 | 	sub	local01, #90
0a674     46 75 02 FB | 	rdlong	arg01, local01
0a678     48 77 02 F6 | 	mov	arg02, local03
0a67c     A0 F2 BF FD | 	call	#_module_draw
0a680                 | ' 
0a680                 | ' 
0a680                 | '     display_bte_memory_copy(keyboard->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
0a680                 | ' 
0a680                 | ' 
0a680                 | '     Module *root = &(keyboard->root);
0a680                 | '     module_init(root,  (0) );
0a680                 | ' 
0a680                 | '     Module *background = &(keyboard->background);
0a680                 | '     module_init(background, root);
0a680                 | '     module_set_rectangle(background,  1024 , 283.5);
0a680                 | '     module_set_position(background, 0,  600  - 283.5);
0a680                 | '     module_set_padding(background, padding, padding);
0a680                 | '     module_set_color(background,  0x0010 ,  0x0010 );
0a680                 | ' 
0a680                 | '     Module *topBar = &(keyboard->topbar);
0a680                 | '     module_init(topBar, background);
0a680                 | '     module_set_rectangle(topBar,  1024 , topBarSize);
0a680                 | '     module_set_position(topBar, 0,  600  - 283.5 - topBarSize);
0a680                 | '     module_set_color(topBar,  0x0000 ,  0x0000 );
0a680                 | ' 
0a680                 | '     Module *topBarText = &(keyboard->topbarPrompt);
0a680                 | '     module_init(topBarText, topBar);
0a680                 | '     module_set_text(topBarText, keyboard->prompt);
0a680                 | '     module_text_font(topBarText,  2 );
0a680                 | '     module_text_fit(topBarText);
0a680                 | '     module_align_center(topBarText);
0a680                 | '     module_align_middle(topBarText);
0a680                 | '     module_set_color(topBarText,  0xffff ,  0x0000 );
0a680                 | ' 
0a680                 | '     Module *tab = createKey(keyboard, key_tab,  (0) ,  (0) , 1.25);
0a680                 | '     Module *q = createKey(keyboard, key_q, tab,  (0) , 1);
0a680                 | '     Module *w = createKey(keyboard, key_w, q,  (0) , 1);
0a680                 | '     Module *e = createKey(keyboard, key_e, w,  (0) , 1);
0a680                 | '     Module *r = createKey(keyboard, key_r, e,  (0) , 1);
0a680                 | '     Module *t = createKey(keyboard, key_t, r,  (0) , 1);
0a680                 | '     Module *y = createKey(keyboard, key_y, t,  (0) , 1);
0a680                 | '     Module *u = createKey(keyboard, key_u, y,  (0) , 1);
0a680                 | '     Module *i = createKey(keyboard, key_i, u,  (0) , 1);
0a680                 | '     Module *o = createKey(keyboard, key_o, i,  (0) , 1);
0a680                 | '     Module *p = createKey(keyboard, key_p, o,  (0) , 1);
0a680                 | ' 
0a680                 | '     Module *minus = createKey(keyboard, key_minus,  (0) , tab, 1.5);
0a680                 | '     Module *a = createKey(keyboard, key_a, minus, tab, 1);
0a680                 | '     Module *s = createKey(keyboard, key_s, a, tab, 1);
0a680                 | '     Module *d = createKey(keyboard, key_d, s, tab, 1);
0a680                 | '     Module *f = createKey(keyboard, key_f, d, tab, 1);
0a680                 | '     Module *g = createKey(keyboard, key_g, f, tab, 1);
0a680                 | '     Module *h = createKey(keyboard, key_h, g, tab, 1);
0a680                 | '     Module *j = createKey(keyboard, key_j, h, tab, 1);
0a680                 | '     Module *k = createKey(keyboard, key_k, j, tab, 1);
0a680                 | '     Module *l = createKey(keyboard, key_l, k, tab, 1);
0a680                 | '     Module *del = createKey(keyboard, key_del, l, tab, 1.5);
0a680                 | ' 
0a680                 | '     Module *shift = createKey(keyboard, key_shift,  (0) , del, 2.25);
0a680                 | '     Module *z = createKey(keyboard, key_z, shift, del, 1);
0a680                 | '     Module *x = createKey(keyboard, key_x, z, del, 1);
0a680                 | '     Module *c = createKey(keyboard, key_c, x, del, 1);
0a680                 | '     Module *v = createKey(keyboard, key_v, c, del, 1);
0a680                 | '     Module *b = createKey(keyboard, key_b, v, del, 1);
0a680                 | '     Module *n = createKey(keyboard, key_n, b, del, 1);
0a680                 | '     Module *m = createKey(keyboard, key_m, n, del, 1);
0a680                 | '     Module *comma = createKey(keyboard, key_comma, m, del, 1);
0a680                 | '     Module *period = createKey(keyboard, key_period, comma, del, 1);
0a680                 | ' 
0a680                 | '     Module *cancel = createKey(keyboard, key_cancel,  (0) , period, 2.75);
0a680                 | '     Module *left = createKey(keyboard, key_left, cancel, period, 1.25);
0a680                 | '     Module *space = createKey(keyboard, key_space, left, period, 3);
0a680                 | '     Module *right = createKey(keyboard, key_right, space, period, 1.25);
0a680                 | '     Module *submit = createKey(keyboard, key_submit, right, period, 2);
0a680                 | ' 
0a680                 | '     Module *seven = createKey(keyboard, key_7, del,  (0) , 1);
0a680                 | '     Module *eight = createKey(keyboard, key_8, seven,  (0) , 1);
0a680                 | '     Module *nine = createKey(keyboard, key_9, eight,  (0) , 1);
0a680                 | ' 
0a680                 | '     Module *four = createKey(keyboard, key_4, del, nine, 1);
0a680                 | '     Module *five = createKey(keyboard, key_5, four, nine, 1);
0a680                 | '     Module *six = createKey(keyboard, key_6, five, nine, 1);
0a680                 | ' 
0a680                 | '     Module *one = createKey(keyboard, key_1, del, five, 1);
0a680                 | '     Module *two = createKey(keyboard, key_2, one, five, 1);
0a680                 | '     Module *three = createKey(keyboard, key_3, two, five, 1);
0a680                 | ' 
0a680                 | '     createKey(keyboard, key_0, del, three, 3.5);
0a680                 | ' 
0a680                 | '     keyboard->keyboard_complete =  (0) ;
0a680                 | ' 
0a680                 | '     module_draw(keyboard->display, root);
0a680                 | '     while (!keyboard->keyboard_complete)
0a680                 | LR__0359
0a680     5A 8C 06 F1 | 	add	local01, #90
0a684     46 99 CA FA | 	rdbyte	local07, local01 wz
0a688     5A 8C 86 F1 | 	sub	local01, #90
0a68c     60 00 90 5D |  if_ne	jmp	#LR__0361
0a690     46 75 02 FB | 	rdlong	arg01, local01
0a694     49 77 02 F6 | 	mov	arg02, local04
0a698     84 F2 BF FD | 	call	#_module_draw
0a69c                 | '     {
0a69c                 | ' 
0a69c                 | '         module_draw(keyboard->display, topBar);
0a69c                 | '         do
0a69c                 | LR__0360
0a69c     46 75 02 FB | 	rdlong	arg01, local01
0a6a0     40 B1 BF FD | 	call	#_display_update_touch
0a6a4     46 77 02 FB | 	rdlong	arg02, local01
0a6a8     46 79 02 F6 | 	mov	arg03, local01
0a6ac     48 75 02 F6 | 	mov	arg01, local03
0a6b0     BC E6 BF FD | 	call	#_module_touch_check
0a6b4     00 34 0E F2 | 	cmp	result1, #0 wz
0a6b8     E0 FF 9F AD |  if_e	jmp	#LR__0360
0a6bc     08 8C 06 F1 | 	add	local01, #8
0a6c0     46 77 02 F6 | 	mov	arg02, local01
0a6c4     08 8C 86 F1 | 	sub	local01, #8
0a6c8     47 75 02 F6 | 	mov	arg01, local02
0a6cc     D0 74 06 F1 | 	add	arg01, #208
0a6d0     3A 77 62 FC | 	wrlong	arg02, arg01
0a6d4     47 75 02 F6 | 	mov	arg01, local02
0a6d8     01 76 06 F6 | 	mov	arg02, #1
0a6dc     02 78 06 F6 | 	mov	arg03, #2
0a6e0     DC EE BF FD | 	call	#_module_align_center_sector
0a6e4     47 75 02 F6 | 	mov	arg01, local02
0a6e8     88 EE BF FD | 	call	#_module_align_middle
0a6ec     90 FF 9F FD | 	jmp	#LR__0359
0a6f0                 | LR__0361
0a6f0     46 75 02 FB | 	rdlong	arg01, local01
0a6f4     C0 12 00 FF 
0a6f8     00 76 06 F6 | 	mov	arg02, ##2457600
0a6fc     0A 78 C6 F9 | 	decod	arg03, #10
0a700     00 7A 06 F6 | 	mov	arg04, #0
0a704     00 7C 06 F6 | 	mov	arg05, #0
0a708     00 7E 06 F6 | 	mov	arg06, #0
0a70c     0A 80 C6 F9 | 	decod	arg07, #10
0a710     00 82 06 F6 | 	mov	arg08, #0
0a714     00 84 06 F6 | 	mov	arg09, #0
0a718     0A 86 C6 F9 | 	decod	arg10, #10
0a71c     01 00 00 FF 
0a720     58 88 06 F6 | 	mov	arg11, ##600
0a724     00 9F BF FD | 	call	#_display_bte_memory_copy
0a728                 | ' 
0a728                 | '         module_text_update(topBarText, keyboard->keyboard_buffer);
0a728                 | '         module_align_center(topBarText);
0a728                 | '         module_align_middle(topBarText);
0a728                 | '     }
0a728                 | '     display_bte_memory_copy(keyboard->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
0a728                 | ' 
0a728                 | '     return keyboard->keyboard_buffer;
0a728     08 8C 06 F1 | 	add	local01, #8
0a72c     46 35 02 F6 | 	mov	result1, local01
0a730     A8 F0 03 F6 | 	mov	ptra, fp
0a734     B3 00 A0 FD | 	call	#popregs_
0a738                 | _keyboard_get_input_ret
0a738     2D 00 64 FD | 	ret
0a73c                 | 
0a73c                 | _navigation_page_init
0a73c     03 4C 05 F6 | 	mov	COUNT_, #3
0a740     A9 00 A0 FD | 	call	#pushregs_
0a744     3A 8D 02 F6 | 	mov	local01, arg01
0a748     04 8C 06 F1 | 	add	local01, #4
0a74c     46 77 62 FC | 	wrlong	arg02, local01
0a750     04 8C 06 F1 | 	add	local01, #4
0a754     46 79 62 FC | 	wrlong	arg03, local01
0a758     08 8C 06 F1 | 	add	local01, #8
0a75c     46 8F 02 F6 | 	mov	local02, local01
0a760     47 75 02 F6 | 	mov	arg01, local02
0a764     00 76 06 F6 | 	mov	arg02, #0
0a768     DC E3 BF FD | 	call	#_module_init
0a76c     40 8D 06 F1 | 	add	local01, #320
0a770     46 91 02 F6 | 	mov	local03, local01
0a774     48 75 02 F6 | 	mov	arg01, local03
0a778     47 77 02 F6 | 	mov	arg02, local02
0a77c     C8 E3 BF FD | 	call	#_module_init
0a780     48 75 02 F6 | 	mov	arg01, local03
0a784     CC 74 06 F1 | 	add	arg01, #204
0a788     3A 09 68 FC | 	wrlong	#4, arg01
0a78c     24 74 06 F1 | 	add	arg01, #36
0a790     02 00 80 FF 
0a794     3A 01 68 FC | 	wrlong	##1024, arg01
0a798     04 74 06 F1 | 	add	arg01, #4
0a79c     01 00 80 FF 
0a7a0     3A B1 68 FC | 	wrlong	##600, arg01
0a7a4     48 75 02 F6 | 	mov	arg01, local03
0a7a8     E8 74 06 F1 | 	add	arg01, #232
0a7ac     3A 01 68 FC | 	wrlong	#0, arg01
0a7b0     04 74 06 F1 | 	add	arg01, #4
0a7b4     3A 01 68 FC | 	wrlong	#0, arg01
0a7b8     48 75 02 F6 | 	mov	arg01, local03
0a7bc     F8 74 06 F1 | 	add	arg01, #248
0a7c0     3A 65 68 FC | 	wrlong	#50, arg01
0a7c4     04 74 06 F1 | 	add	arg01, #4
0a7c8     3A 65 68 FC | 	wrlong	#50, arg01
0a7cc     48 75 02 F6 | 	mov	arg01, local03
0a7d0     01 00 00 FF 
0a7d4     73 78 06 F6 | 	mov	arg03, ##627
0a7d8     10 75 06 F1 | 	add	arg01, #272
0a7dc     01 00 80 FF 
0a7e0     3A E7 68 FC | 	wrlong	##627, arg01
0a7e4     04 74 86 F1 | 	sub	arg01, #4
0a7e8     01 00 80 FF 
0a7ec     3A E7 68 FC | 	wrlong	##627, arg01
0a7f0     C9 74 02 F6 | 	mov	arg01, objptr
0a7f4     04 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_down_
0a7f8     3C B4 B1 FD | 	call	#__system___make_methodptr
0a7fc     48 75 02 F6 | 	mov	arg01, local03
0a800     30 75 06 F1 | 	add	arg01, #304
0a804     3A 35 62 FC | 	wrlong	result1, arg01
0a808     40 8D 06 F1 | 	add	local01, #320
0a80c     46 8F 02 F6 | 	mov	local02, local01
0a810     47 75 02 F6 | 	mov	arg01, local02
0a814     48 77 02 F6 | 	mov	arg02, local03
0a818     2C E3 BF FD | 	call	#_module_init
0a81c     01 00 00 FF 
0a820     88 8C 86 F1 | 	sub	local01, ##648
0a824     46 77 02 FB | 	rdlong	arg02, local01
0a828     90 76 06 F1 | 	add	arg02, #144
0a82c     47 75 02 F6 | 	mov	arg01, local02
0a830     7C E8 BF FD | 	call	#_module_set_image
0a834     47 75 02 F6 | 	mov	arg01, local02
0a838     58 EC BF FD | 	call	#_module_align_inner_top
0a83c     47 75 02 F6 | 	mov	arg01, local02
0a840     01 76 06 F6 | 	mov	arg02, #1
0a844     04 78 06 F6 | 	mov	arg03, #4
0a848     E8 ED BF FD | 	call	#_module_align_space_even
0a84c     C9 74 02 F6 | 	mov	arg01, objptr
0a850     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0a854     E0 B3 B1 FD | 	call	#__system___make_methodptr
0a858     47 75 02 F6 | 	mov	arg01, local02
0a85c     00 78 06 F6 | 	mov	arg03, #0
0a860     34 75 06 F1 | 	add	arg01, #308
0a864     3A 35 62 FC | 	wrlong	result1, arg01
0a868     10 74 86 F1 | 	sub	arg01, #16
0a86c     3A 01 68 FC | 	wrlong	#0, arg01
0a870     01 00 00 FF 
0a874     C8 8D 06 F1 | 	add	local01, ##968
0a878     46 75 02 F6 | 	mov	arg01, local01
0a87c     47 77 02 F6 | 	mov	arg02, local02
0a880     C4 E2 BF FD | 	call	#_module_init
0a884     B8 00 00 FF 
0a888     CD D6 05 F1 | 	add	ptr__dat__, ##94413
0a88c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a890     B8 00 00 FF 
0a894     CD D6 85 F1 | 	sub	ptr__dat__, ##94413
0a898     46 75 02 F6 | 	mov	arg01, local01
0a89c     44 E8 BF FD | 	call	#_module_set_text
0a8a0     46 75 02 F6 | 	mov	arg01, local01
0a8a4     02 76 06 F6 | 	mov	arg02, #2
0a8a8     78 E9 BF FD | 	call	#_module_text_font
0a8ac     46 75 02 F6 | 	mov	arg01, local01
0a8b0     8C E8 BF FD | 	call	#_module_text_fit
0a8b4     46 75 02 F6 | 	mov	arg01, local01
0a8b8     10 75 06 F1 | 	add	arg01, #272
0a8bc     7F 00 80 FF 
0a8c0     3A FF 6B FC | 	wrlong	##65535, arg01
0a8c4     04 74 86 F1 | 	sub	arg01, #4
0a8c8     01 00 80 FF 
0a8cc     3A E7 68 FC | 	wrlong	##627, arg01
0a8d0     46 77 02 FB | 	rdlong	arg02, local01
0a8d4     46 75 02 F6 | 	mov	arg01, local01
0a8d8     10 EE BF FD | 	call	#_module_align_below
0a8dc     46 75 02 F6 | 	mov	arg01, local01
0a8e0     01 76 06 F6 | 	mov	arg02, #1
0a8e4     02 78 06 F6 | 	mov	arg03, #2
0a8e8     D4 EC BF FD | 	call	#_module_align_center_sector
0a8ec     40 8D 06 F1 | 	add	local01, #320
0a8f0     46 8F 02 F6 | 	mov	local02, local01
0a8f4     47 75 02 F6 | 	mov	arg01, local02
0a8f8     48 77 02 F6 | 	mov	arg02, local03
0a8fc     48 E2 BF FD | 	call	#_module_init
0a900     02 00 00 FF 
0a904     08 8D 86 F1 | 	sub	local01, ##1288
0a908     46 77 02 FB | 	rdlong	arg02, local01
0a90c     60 76 06 F1 | 	add	arg02, #96
0a910     47 75 02 F6 | 	mov	arg01, local02
0a914     98 E7 BF FD | 	call	#_module_set_image
0a918     47 75 02 F6 | 	mov	arg01, local02
0a91c     74 EB BF FD | 	call	#_module_align_inner_top
0a920     47 75 02 F6 | 	mov	arg01, local02
0a924     02 76 06 F6 | 	mov	arg02, #2
0a928     04 78 06 F6 | 	mov	arg03, #4
0a92c     04 ED BF FD | 	call	#_module_align_space_even
0a930     C9 74 02 F6 | 	mov	arg01, objptr
0a934     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0a938     FC B2 B1 FD | 	call	#__system___make_methodptr
0a93c     47 75 02 F6 | 	mov	arg01, local02
0a940     01 78 06 F6 | 	mov	arg03, #1
0a944     34 75 06 F1 | 	add	arg01, #308
0a948     3A 35 62 FC | 	wrlong	result1, arg01
0a94c     10 74 86 F1 | 	sub	arg01, #16
0a950     3A 03 68 FC | 	wrlong	#1, arg01
0a954     03 00 00 FF 
0a958     48 8C 06 F1 | 	add	local01, ##1608
0a95c     46 75 02 F6 | 	mov	arg01, local01
0a960     47 77 02 F6 | 	mov	arg02, local02
0a964     E0 E1 BF FD | 	call	#_module_init
0a968     B8 00 00 FF 
0a96c     D4 D6 05 F1 | 	add	ptr__dat__, ##94420
0a970     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a974     B8 00 00 FF 
0a978     D4 D6 85 F1 | 	sub	ptr__dat__, ##94420
0a97c     46 75 02 F6 | 	mov	arg01, local01
0a980     60 E7 BF FD | 	call	#_module_set_text
0a984     46 75 02 F6 | 	mov	arg01, local01
0a988     02 76 06 F6 | 	mov	arg02, #2
0a98c     94 E8 BF FD | 	call	#_module_text_font
0a990     46 75 02 F6 | 	mov	arg01, local01
0a994     A8 E7 BF FD | 	call	#_module_text_fit
0a998     46 75 02 F6 | 	mov	arg01, local01
0a99c     10 75 06 F1 | 	add	arg01, #272
0a9a0     7F 00 80 FF 
0a9a4     3A FF 6B FC | 	wrlong	##65535, arg01
0a9a8     04 74 86 F1 | 	sub	arg01, #4
0a9ac     01 00 80 FF 
0a9b0     3A E7 68 FC | 	wrlong	##627, arg01
0a9b4     46 77 02 FB | 	rdlong	arg02, local01
0a9b8     46 75 02 F6 | 	mov	arg01, local01
0a9bc     2C ED BF FD | 	call	#_module_align_below
0a9c0     46 75 02 F6 | 	mov	arg01, local01
0a9c4     01 76 06 F6 | 	mov	arg02, #1
0a9c8     02 78 06 F6 | 	mov	arg03, #2
0a9cc     F0 EB BF FD | 	call	#_module_align_center_sector
0a9d0     40 8D 06 F1 | 	add	local01, #320
0a9d4     46 8F 02 F6 | 	mov	local02, local01
0a9d8     47 75 02 F6 | 	mov	arg01, local02
0a9dc     48 77 02 F6 | 	mov	arg02, local03
0a9e0     64 E1 BF FD | 	call	#_module_init
0a9e4     03 00 00 FF 
0a9e8     88 8D 86 F1 | 	sub	local01, ##1928
0a9ec     46 77 02 FB | 	rdlong	arg02, local01
0a9f0     C0 76 06 F1 | 	add	arg02, #192
0a9f4     47 75 02 F6 | 	mov	arg01, local02
0a9f8     B4 E6 BF FD | 	call	#_module_set_image
0a9fc     47 75 02 F6 | 	mov	arg01, local02
0aa00     90 EA BF FD | 	call	#_module_align_inner_top
0aa04     47 75 02 F6 | 	mov	arg01, local02
0aa08     03 76 06 F6 | 	mov	arg02, #3
0aa0c     04 78 06 F6 | 	mov	arg03, #4
0aa10     20 EC BF FD | 	call	#_module_align_space_even
0aa14     C9 74 02 F6 | 	mov	arg01, objptr
0aa18     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0aa1c     18 B2 B1 FD | 	call	#__system___make_methodptr
0aa20     47 75 02 F6 | 	mov	arg01, local02
0aa24     02 78 06 F6 | 	mov	arg03, #2
0aa28     34 75 06 F1 | 	add	arg01, #308
0aa2c     3A 35 62 FC | 	wrlong	result1, arg01
0aa30     10 74 86 F1 | 	sub	arg01, #16
0aa34     3A 05 68 FC | 	wrlong	#2, arg01
0aa38     04 00 00 FF 
0aa3c     C8 8C 06 F1 | 	add	local01, ##2248
0aa40     46 75 02 F6 | 	mov	arg01, local01
0aa44     47 77 02 F6 | 	mov	arg02, local02
0aa48     FC E0 BF FD | 	call	#_module_init
0aa4c     B8 00 00 FF 
0aa50     DB D6 05 F1 | 	add	ptr__dat__, ##94427
0aa54     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0aa58     B8 00 00 FF 
0aa5c     DB D6 85 F1 | 	sub	ptr__dat__, ##94427
0aa60     46 75 02 F6 | 	mov	arg01, local01
0aa64     7C E6 BF FD | 	call	#_module_set_text
0aa68     46 75 02 F6 | 	mov	arg01, local01
0aa6c     02 76 06 F6 | 	mov	arg02, #2
0aa70     B0 E7 BF FD | 	call	#_module_text_font
0aa74     46 75 02 F6 | 	mov	arg01, local01
0aa78     C4 E6 BF FD | 	call	#_module_text_fit
0aa7c     46 75 02 F6 | 	mov	arg01, local01
0aa80     10 75 06 F1 | 	add	arg01, #272
0aa84     7F 00 80 FF 
0aa88     3A FF 6B FC | 	wrlong	##65535, arg01
0aa8c     04 74 86 F1 | 	sub	arg01, #4
0aa90     01 00 80 FF 
0aa94     3A E7 68 FC | 	wrlong	##627, arg01
0aa98     46 77 02 FB | 	rdlong	arg02, local01
0aa9c     46 75 02 F6 | 	mov	arg01, local01
0aaa0     48 EC BF FD | 	call	#_module_align_below
0aaa4     46 75 02 F6 | 	mov	arg01, local01
0aaa8     01 76 06 F6 | 	mov	arg02, #1
0aaac     02 78 06 F6 | 	mov	arg03, #2
0aab0     0C EB BF FD | 	call	#_module_align_center_sector
0aab4     40 8D 06 F1 | 	add	local01, #320
0aab8     46 8F 02 F6 | 	mov	local02, local01
0aabc     47 75 02 F6 | 	mov	arg01, local02
0aac0     48 77 02 F6 | 	mov	arg02, local03
0aac4     80 E0 BF FD | 	call	#_module_init
0aac8     05 00 00 FF 
0aacc     08 8C 86 F1 | 	sub	local01, ##2568
0aad0     46 77 02 FB | 	rdlong	arg02, local01
0aad4     F0 76 06 F1 | 	add	arg02, #240
0aad8     47 75 02 F6 | 	mov	arg01, local02
0aadc     D0 E5 BF FD | 	call	#_module_set_image
0aae0     47 75 02 F6 | 	mov	arg01, local02
0aae4     AC E9 BF FD | 	call	#_module_align_inner_top
0aae8     47 75 02 F6 | 	mov	arg01, local02
0aaec     04 76 06 F6 | 	mov	arg02, #4
0aaf0     04 78 06 F6 | 	mov	arg03, #4
0aaf4     3C EB BF FD | 	call	#_module_align_space_even
0aaf8     C9 74 02 F6 | 	mov	arg01, objptr
0aafc     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0ab00     34 B1 B1 FD | 	call	#__system___make_methodptr
0ab04     47 75 02 F6 | 	mov	arg01, local02
0ab08     04 78 06 F6 | 	mov	arg03, #4
0ab0c     34 75 06 F1 | 	add	arg01, #308
0ab10     3A 35 62 FC | 	wrlong	result1, arg01
0ab14     10 74 86 F1 | 	sub	arg01, #16
0ab18     3A 09 68 FC | 	wrlong	#4, arg01
0ab1c     05 00 00 FF 
0ab20     48 8D 06 F1 | 	add	local01, ##2888
0ab24     46 75 02 F6 | 	mov	arg01, local01
0ab28     47 77 02 F6 | 	mov	arg02, local02
0ab2c     18 E0 BF FD | 	call	#_module_init
0ab30     B8 00 00 FF 
0ab34     E0 D6 05 F1 | 	add	ptr__dat__, ##94432
0ab38     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ab3c     B8 00 00 FF 
0ab40     E0 D6 85 F1 | 	sub	ptr__dat__, ##94432
0ab44     46 75 02 F6 | 	mov	arg01, local01
0ab48     98 E5 BF FD | 	call	#_module_set_text
0ab4c     46 75 02 F6 | 	mov	arg01, local01
0ab50     02 76 06 F6 | 	mov	arg02, #2
0ab54     CC E6 BF FD | 	call	#_module_text_font
0ab58     46 75 02 F6 | 	mov	arg01, local01
0ab5c     E0 E5 BF FD | 	call	#_module_text_fit
0ab60     46 75 02 F6 | 	mov	arg01, local01
0ab64     10 75 06 F1 | 	add	arg01, #272
0ab68     7F 00 80 FF 
0ab6c     3A FF 6B FC | 	wrlong	##65535, arg01
0ab70     04 74 86 F1 | 	sub	arg01, #4
0ab74     01 00 80 FF 
0ab78     3A E7 68 FC | 	wrlong	##627, arg01
0ab7c     46 77 02 FB | 	rdlong	arg02, local01
0ab80     46 75 02 F6 | 	mov	arg01, local01
0ab84     64 EB BF FD | 	call	#_module_align_below
0ab88     46 75 02 F6 | 	mov	arg01, local01
0ab8c     01 76 06 F6 | 	mov	arg02, #1
0ab90     02 78 06 F6 | 	mov	arg03, #2
0ab94     28 EA BF FD | 	call	#_module_align_center_sector
0ab98     40 8D 06 F1 | 	add	local01, #320
0ab9c     46 8F 02 F6 | 	mov	local02, local01
0aba0     47 75 02 F6 | 	mov	arg01, local02
0aba4     48 77 02 F6 | 	mov	arg02, local03
0aba8     9C DF BF FD | 	call	#_module_init
0abac     47 75 02 F6 | 	mov	arg01, local02
0abb0     CC 74 06 F1 | 	add	arg01, #204
0abb4     3A 0B 68 FC | 	wrlong	#5, arg01
0abb8     24 74 06 F1 | 	add	arg01, #36
0abbc     3A 91 69 FC | 	wrlong	#200, arg01
0abc0     04 74 06 F1 | 	add	arg01, #4
0abc4     3A 91 69 FC | 	wrlong	#200, arg01
0abc8     47 75 02 F6 | 	mov	arg01, local02
0abcc     10 75 06 F1 | 	add	arg01, #272
0abd0     63 00 80 FF 
0abd4     3A 31 68 FC | 	wrlong	##50712, arg01
0abd8     04 74 86 F1 | 	sub	arg01, #4
0abdc     01 00 80 FF 
0abe0     3A E7 68 FC | 	wrlong	##627, arg01
0abe4     47 75 02 F6 | 	mov	arg01, local02
0abe8     40 E9 BF FD | 	call	#_module_align_inner_bottom
0abec     47 75 02 F6 | 	mov	arg01, local02
0abf0     01 76 06 F6 | 	mov	arg02, #1
0abf4     04 78 06 F6 | 	mov	arg03, #4
0abf8     38 EA BF FD | 	call	#_module_align_space_even
0abfc     C9 74 02 F6 | 	mov	arg01, objptr
0ac00     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0ac04     30 B0 B1 FD | 	call	#__system___make_methodptr
0ac08     47 75 02 F6 | 	mov	arg01, local02
0ac0c     03 78 06 F6 | 	mov	arg03, #3
0ac10     34 75 06 F1 | 	add	arg01, #308
0ac14     3A 35 62 FC | 	wrlong	result1, arg01
0ac18     10 74 86 F1 | 	sub	arg01, #16
0ac1c     3A 07 68 FC | 	wrlong	#3, arg01
0ac20     40 8D 06 F1 | 	add	local01, #320
0ac24     46 75 02 F6 | 	mov	arg01, local01
0ac28     47 77 02 F6 | 	mov	arg02, local02
0ac2c     18 DF BF FD | 	call	#_module_init
0ac30     B8 00 00 FF 
0ac34     EA D6 05 F1 | 	add	ptr__dat__, ##94442
0ac38     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ac3c     B8 00 00 FF 
0ac40     EA D6 85 F1 | 	sub	ptr__dat__, ##94442
0ac44     46 75 02 F6 | 	mov	arg01, local01
0ac48     98 E4 BF FD | 	call	#_module_set_text
0ac4c     46 75 02 F6 | 	mov	arg01, local01
0ac50     02 76 06 F6 | 	mov	arg02, #2
0ac54     CC E5 BF FD | 	call	#_module_text_font
0ac58     46 75 02 F6 | 	mov	arg01, local01
0ac5c     E0 E4 BF FD | 	call	#_module_text_fit
0ac60     46 75 02 F6 | 	mov	arg01, local01
0ac64     10 75 06 F1 | 	add	arg01, #272
0ac68     7F 00 80 FF 
0ac6c     3A FF 6B FC | 	wrlong	##65535, arg01
0ac70     04 74 86 F1 | 	sub	arg01, #4
0ac74     01 00 80 FF 
0ac78     3A E7 68 FC | 	wrlong	##627, arg01
0ac7c     46 77 02 FB | 	rdlong	arg02, local01
0ac80     46 75 02 F6 | 	mov	arg01, local01
0ac84     64 EA BF FD | 	call	#_module_align_below
0ac88     46 75 02 F6 | 	mov	arg01, local01
0ac8c     01 76 06 F6 | 	mov	arg02, #1
0ac90     02 78 06 F6 | 	mov	arg03, #2
0ac94     28 E9 BF FD | 	call	#_module_align_center_sector
0ac98     40 8D 06 F1 | 	add	local01, #320
0ac9c     46 8F 02 F6 | 	mov	local02, local01
0aca0     47 75 02 F6 | 	mov	arg01, local02
0aca4     48 77 02 F6 | 	mov	arg02, local03
0aca8     9C DE BF FD | 	call	#_module_init
0acac     47 75 02 F6 | 	mov	arg01, local02
0acb0     CC 74 06 F1 | 	add	arg01, #204
0acb4     3A 0B 68 FC | 	wrlong	#5, arg01
0acb8     24 74 06 F1 | 	add	arg01, #36
0acbc     3A 91 69 FC | 	wrlong	#200, arg01
0acc0     04 74 06 F1 | 	add	arg01, #4
0acc4     3A 91 69 FC | 	wrlong	#200, arg01
0acc8     47 75 02 F6 | 	mov	arg01, local02
0accc     10 75 06 F1 | 	add	arg01, #272
0acd0     63 00 80 FF 
0acd4     3A 31 68 FC | 	wrlong	##50712, arg01
0acd8     04 74 86 F1 | 	sub	arg01, #4
0acdc     01 00 80 FF 
0ace0     3A E7 68 FC | 	wrlong	##627, arg01
0ace4     47 75 02 F6 | 	mov	arg01, local02
0ace8     40 E8 BF FD | 	call	#_module_align_inner_bottom
0acec     47 75 02 F6 | 	mov	arg01, local02
0acf0     02 76 06 F6 | 	mov	arg02, #2
0acf4     04 78 06 F6 | 	mov	arg03, #4
0acf8     38 E9 BF FD | 	call	#_module_align_space_even
0acfc     C9 74 02 F6 | 	mov	arg01, objptr
0ad00     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0743_
0ad04     30 AF B1 FD | 	call	#__system___make_methodptr
0ad08     47 75 02 F6 | 	mov	arg01, local02
0ad0c     05 78 06 F6 | 	mov	arg03, #5
0ad10     34 75 06 F1 | 	add	arg01, #308
0ad14     3A 35 62 FC | 	wrlong	result1, arg01
0ad18     10 74 86 F1 | 	sub	arg01, #16
0ad1c     3A 0B 68 FC | 	wrlong	#5, arg01
0ad20     40 8D 06 F1 | 	add	local01, #320
0ad24     46 75 02 F6 | 	mov	arg01, local01
0ad28     47 77 02 F6 | 	mov	arg02, local02
0ad2c     18 DE BF FD | 	call	#_module_init
0ad30     B8 00 00 FF 
0ad34     F3 D6 05 F1 | 	add	ptr__dat__, ##94451
0ad38     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ad3c     B8 00 00 FF 
0ad40     F3 D6 85 F1 | 	sub	ptr__dat__, ##94451
0ad44     46 75 02 F6 | 	mov	arg01, local01
0ad48     98 E3 BF FD | 	call	#_module_set_text
0ad4c     46 75 02 F6 | 	mov	arg01, local01
0ad50     02 76 06 F6 | 	mov	arg02, #2
0ad54     CC E4 BF FD | 	call	#_module_text_font
0ad58     46 75 02 F6 | 	mov	arg01, local01
0ad5c     E0 E3 BF FD | 	call	#_module_text_fit
0ad60     46 75 02 F6 | 	mov	arg01, local01
0ad64     10 75 06 F1 | 	add	arg01, #272
0ad68     7F 00 80 FF 
0ad6c     3A FF 6B FC | 	wrlong	##65535, arg01
0ad70     04 74 86 F1 | 	sub	arg01, #4
0ad74     01 00 80 FF 
0ad78     3A E7 68 FC | 	wrlong	##627, arg01
0ad7c     46 77 02 FB | 	rdlong	arg02, local01
0ad80     46 75 02 F6 | 	mov	arg01, local01
0ad84     64 E9 BF FD | 	call	#_module_align_below
0ad88     46 75 02 F6 | 	mov	arg01, local01
0ad8c     01 76 06 F6 | 	mov	arg02, #1
0ad90     02 78 06 F6 | 	mov	arg03, #2
0ad94     28 E8 BF FD | 	call	#_module_align_center_sector
0ad98     A8 F0 03 F6 | 	mov	ptra, fp
0ad9c     B3 00 A0 FD | 	call	#popregs_
0ada0                 | _navigation_page_init_ret
0ada0     2D 00 64 FD | 	ret
0ada4                 | 
0ada4                 | _navigation_page_run
0ada4     01 4C 05 F6 | 	mov	COUNT_, #1
0ada8     A9 00 A0 FD | 	call	#pushregs_
0adac     3A 8D 02 F6 | 	mov	local01, arg01
0adb0     00 74 06 F6 | 	mov	arg01, #0
0adb4     18 E7 B1 FD | 	call	#__system___getiolock_1306
0adb8     1A 75 02 F6 | 	mov	arg01, result1
0adbc     B0 AE B1 FD | 	call	#__system___lockmem
0adc0     4F 01 00 FF 
0adc4     0A 77 06 F6 | 	mov	arg02, ##@LR__1996
0adc8     00 74 06 F6 | 	mov	arg01, #0
0adcc     00 78 06 F6 | 	mov	arg03, #0
0add0     44 B4 B1 FD | 	call	#__system___basic_print_string
0add4     00 74 06 F6 | 	mov	arg01, #0
0add8     0A 76 06 F6 | 	mov	arg02, #10
0addc     00 78 06 F6 | 	mov	arg03, #0
0ade0     E8 B3 B1 FD | 	call	#__system___basic_print_char
0ade4     00 74 06 F6 | 	mov	arg01, #0
0ade8     E4 E6 B1 FD | 	call	#__system___getiolock_1306
0adec     1A 01 68 FC | 	wrlong	#0, result1
0adf0     46 01 48 FC | 	wrbyte	#0, local01
0adf4     04 8C 06 F1 | 	add	local01, #4
0adf8     46 75 02 FB | 	rdlong	arg01, local01
0adfc     0C 8C 06 F1 | 	add	local01, #12
0ae00     46 77 02 F6 | 	mov	arg02, local01
0ae04     10 8C 86 F1 | 	sub	local01, #16
0ae08     14 EB BF FD | 	call	#_module_draw
0ae0c     00 74 06 F6 | 	mov	arg01, #0
0ae10     BC E6 B1 FD | 	call	#__system___getiolock_1306
0ae14     1A 75 02 F6 | 	mov	arg01, result1
0ae18     54 AE B1 FD | 	call	#__system___lockmem
0ae1c     4F 01 00 FF 
0ae20     23 77 06 F6 | 	mov	arg02, ##@LR__1997
0ae24     00 74 06 F6 | 	mov	arg01, #0
0ae28     00 78 06 F6 | 	mov	arg03, #0
0ae2c     E8 B3 B1 FD | 	call	#__system___basic_print_string
0ae30     00 74 06 F6 | 	mov	arg01, #0
0ae34     0A 76 06 F6 | 	mov	arg02, #10
0ae38     00 78 06 F6 | 	mov	arg03, #0
0ae3c     8C B3 B1 FD | 	call	#__system___basic_print_char
0ae40     00 74 06 F6 | 	mov	arg01, #0
0ae44     88 E6 B1 FD | 	call	#__system___getiolock_1306
0ae48     1A 01 68 FC | 	wrlong	#0, result1
0ae4c                 | '     while (!page->complete)
0ae4c                 | LR__0362
0ae4c     46 75 CA FA | 	rdbyte	arg01, local01 wz
0ae50     2C 00 90 5D |  if_ne	jmp	#LR__0363
0ae54     04 8C 06 F1 | 	add	local01, #4
0ae58     46 75 02 FB | 	rdlong	arg01, local01
0ae5c     84 A9 BF FD | 	call	#_display_update_touch
0ae60     0C 8C 06 F1 | 	add	local01, #12
0ae64     46 75 02 F6 | 	mov	arg01, local01
0ae68     0C 8C 86 F1 | 	sub	local01, #12
0ae6c     46 77 02 FB | 	rdlong	arg02, local01
0ae70     04 8C 86 F1 | 	sub	local01, #4
0ae74     46 79 02 F6 | 	mov	arg03, local01
0ae78     F4 DE BF FD | 	call	#_module_touch_check
0ae7c     CC FF 9F FD | 	jmp	#LR__0362
0ae80                 | LR__0363
0ae80                 | '     {
0ae80                 | '         display_update_touch(page->display);
0ae80                 | '         module_touch_check(&(page->root), page->display, page);
0ae80                 | '     }
0ae80                 | '     return page->newPage;
0ae80     0C 8C 06 F1 | 	add	local01, #12
0ae84     46 35 02 FB | 	rdlong	result1, local01
0ae88     A8 F0 03 F6 | 	mov	ptra, fp
0ae8c     B3 00 A0 FD | 	call	#popregs_
0ae90                 | _navigation_page_run_ret
0ae90     2D 00 64 FD | 	ret
0ae94                 | 
0ae94                 | _loading_overlay_display
0ae94     02 4C 05 F6 | 	mov	COUNT_, #2
0ae98     A9 00 A0 FD | 	call	#pushregs_
0ae9c     3A 8D 02 F6 | 	mov	local01, arg01
0aea0     3B 8F 02 F6 | 	mov	local02, arg02
0aea4     46 75 02 F6 | 	mov	arg01, local01
0aea8     00 76 06 F6 | 	mov	arg02, #0
0aeac     02 78 06 F6 | 	mov	arg03, #2
0aeb0     00 7A 06 F6 | 	mov	arg04, #0
0aeb4     18 91 BF FD | 	call	#_display_set_text_parameter1
0aeb8     46 75 02 F6 | 	mov	arg01, local01
0aebc     00 76 06 F6 | 	mov	arg02, #0
0aec0     00 78 06 F6 | 	mov	arg03, #0
0aec4     00 7A 06 F6 | 	mov	arg04, #0
0aec8     00 7C 06 F6 | 	mov	arg05, #0
0aecc     50 91 BF FD | 	call	#_display_set_text_parameter2
0aed0     46 75 02 F6 | 	mov	arg01, local01
0aed4     06 77 06 F6 | 	mov	arg02, #262
0aed8     C8 78 06 F6 | 	mov	arg03, #200
0aedc     01 00 00 FF 
0aee0     FA 7A 06 F6 | 	mov	arg04, ##762
0aee4     90 7D 06 F6 | 	mov	arg05, #400
0aee8     32 7E 06 F6 | 	mov	arg06, #50
0aeec     32 80 06 F6 | 	mov	arg07, #50
0aef0     1D 00 00 FF 
0aef4     74 83 06 F6 | 	mov	arg08, ##15220
0aef8     DC 94 BF FD | 	call	#_display_draw_circle_square_fill
0aefc     00 76 06 F6 | 	mov	arg02, #0
0af00     1D 00 00 FF 
0af04     74 79 06 F6 | 	mov	arg03, ##15220
0af08     46 75 02 F6 | 	mov	arg01, local01
0af0c     98 8D BF FD | 	call	#_display_fore_ground_color_16bpp
0af10     46 75 02 F6 | 	mov	arg01, local01
0af14     1D 00 00 FF 
0af18     74 77 06 F6 | 	mov	arg02, ##15220
0af1c     10 8E BF FD | 	call	#_display_back_ground_color_16bpp
0af20     47 75 02 F6 | 	mov	arg01, local02
0af24     4C B3 BF FD | 	call	#_strlen
0af28     03 34 66 F0 | 	shl	result1, #3
0af2c     09 76 C6 F9 | 	decod	arg02, #9
0af30     1A 77 82 F1 | 	sub	arg02, result1
0af34     46 75 02 F6 | 	mov	arg01, local01
0af38     1C 79 06 F6 | 	mov	arg03, #284
0af3c     47 7B 02 F6 | 	mov	arg04, local02
0af40     38 91 BF FD | 	call	#_display_draw_string
0af44     00 74 06 F6 | 	mov	arg01, #0
0af48     84 E5 B1 FD | 	call	#__system___getiolock_1306
0af4c     1A 75 02 F6 | 	mov	arg01, result1
0af50     1C AD B1 FD | 	call	#__system___lockmem
0af54     4F 01 00 FF 
0af58     35 77 06 F6 | 	mov	arg02, ##@LR__1998
0af5c     00 74 06 F6 | 	mov	arg01, #0
0af60     00 78 06 F6 | 	mov	arg03, #0
0af64     B0 B2 B1 FD | 	call	#__system___basic_print_string
0af68     00 74 06 F6 | 	mov	arg01, #0
0af6c     0A 76 06 F6 | 	mov	arg02, #10
0af70     00 78 06 F6 | 	mov	arg03, #0
0af74     54 B2 B1 FD | 	call	#__system___basic_print_char
0af78     4F 01 00 FF 
0af7c     47 77 06 F6 | 	mov	arg02, ##@LR__1999
0af80     00 74 06 F6 | 	mov	arg01, #0
0af84     00 78 06 F6 | 	mov	arg03, #0
0af88     8C B2 B1 FD | 	call	#__system___basic_print_string
0af8c     00 74 06 F6 | 	mov	arg01, #0
0af90     47 77 02 F6 | 	mov	arg02, local02
0af94     00 78 06 F6 | 	mov	arg03, #0
0af98     7C B2 B1 FD | 	call	#__system___basic_print_string
0af9c     00 74 06 F6 | 	mov	arg01, #0
0afa0     0A 76 06 F6 | 	mov	arg02, #10
0afa4     00 78 06 F6 | 	mov	arg03, #0
0afa8     20 B2 B1 FD | 	call	#__system___basic_print_char
0afac     4F 01 00 FF 
0afb0     56 77 06 F6 | 	mov	arg02, ##@LR__2000
0afb4     00 74 06 F6 | 	mov	arg01, #0
0afb8     00 78 06 F6 | 	mov	arg03, #0
0afbc     58 B2 B1 FD | 	call	#__system___basic_print_string
0afc0     00 74 06 F6 | 	mov	arg01, #0
0afc4     0A 76 06 F6 | 	mov	arg02, #10
0afc8     00 78 06 F6 | 	mov	arg03, #0
0afcc     FC B1 B1 FD | 	call	#__system___basic_print_char
0afd0     00 74 06 F6 | 	mov	arg01, #0
0afd4     F8 E4 B1 FD | 	call	#__system___getiolock_1306
0afd8     1A 01 68 FC | 	wrlong	#0, result1
0afdc     A8 F0 03 F6 | 	mov	ptra, fp
0afe0     B3 00 A0 FD | 	call	#popregs_
0afe4                 | _loading_overlay_display_ret
0afe4     2D 00 64 FD | 	ret
0afe8                 | 
0afe8                 | _monitor_begin
0afe8     10 74 06 F1 | 	add	arg01, #16
0afec     3A 79 62 FC | 	wrlong	arg03, arg01
0aff0     04 74 86 F1 | 	sub	arg01, #4
0aff4     3A 77 62 FC | 	wrlong	arg02, arg01
0aff8     0C 74 86 F1 | 	sub	arg01, #12
0affc     B8 00 00 FF 
0b000     04 D7 05 F1 | 	add	ptr__dat__, ##94468
0b004     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0b008     3C 93 61 FC | 	wrlong	objptr, arg03
0b00c     04 78 06 F1 | 	add	arg03, #4
0b010     3C 11 62 FC | 	wrlong	ptr__monitor_cog_0769_, arg03
0b014     04 78 06 F1 | 	add	arg03, #4
0b018     3C 75 62 FC | 	wrlong	arg01, arg03
0b01c     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0b020     B8 00 00 FF 
0b024     04 D7 85 F1 | 	sub	ptr__dat__, ##94468
0b028     1E 34 06 F6 | 	mov	result1, #30
0b02c     28 78 62 FD | 	setq	arg03
0b030     C6 34 F2 FC | 	coginit	result1, entryptr__ wc
0b034     01 34 66 C6 |  if_b	neg	result1, #1
0b038     14 74 06 F1 | 	add	arg01, #20
0b03c     3A 35 62 FC | 	wrlong	result1, arg01
0b040     FF FF 7F FF 
0b044     FF 35 0E F2 | 	cmp	result1, ##-1 wz
0b048                 | '     {
0b048                 | '         return  (1) ;
0b048     01 34 06 56 |  if_ne	mov	result1, #1
0b04c                 | '     }
0b04c                 | '     return  (0) ;
0b04c     00 34 06 A6 |  if_e	mov	result1, #0
0b050                 | _monitor_begin_ret
0b050     2D 00 64 FD | 	ret
0b054                 | 
0b054                 | _navkey_begin
0b054     03 4C 05 F6 | 	mov	COUNT_, #3
0b058     A9 00 A0 FD | 	call	#pushregs_
0b05c     3A 8D 02 F6 | 	mov	local01, arg01
0b060     3E 8F 02 F6 | 	mov	local02, arg05
0b064     6C 8C 06 F1 | 	add	local01, #108
0b068     46 7B 42 FC | 	wrbyte	arg04, local01
0b06c     6C 8C 86 F1 | 	sub	local01, #108
0b070     3B 75 02 F6 | 	mov	arg01, arg02
0b074     3C 77 02 F6 | 	mov	arg02, arg03
0b078     0A 78 06 F6 | 	mov	arg03, #10
0b07c     01 7A 06 F6 | 	mov	arg04, #1
0b080     C9 90 02 F6 | 	mov	local03, objptr
0b084     46 93 01 F6 | 	mov	objptr, local01
0b088     70 0D B1 FD | 	call	#_jm_i2c_spin2_setup
0b08c     48 93 01 F6 | 	mov	objptr, local03
0b090     46 75 02 F6 | 	mov	arg01, local01
0b094     00 76 06 F6 | 	mov	arg02, #0
0b098     80 78 06 F6 | 	mov	arg03, #128
0b09c     B8 F6 B0 FD | 	call	#_writeNavKey8_1906
0b0a0     64 74 06 F6 | 	mov	arg01, #100
0b0a4     E0 AC B1 FD | 	call	#__system___waitms
0b0a8     46 75 02 F6 | 	mov	arg01, local01
0b0ac     00 76 06 F6 | 	mov	arg02, #0
0b0b0     47 79 02 F6 | 	mov	arg03, local02
0b0b4     A0 F6 B0 FD | 	call	#_writeNavKey8_1906
0b0b8     72 8C 06 F1 | 	add	local01, #114
0b0bc     46 8F 42 FC | 	wrbyte	local02, local01
0b0c0     A8 F0 03 F6 | 	mov	ptra, fp
0b0c4     B3 00 A0 FD | 	call	#popregs_
0b0c8                 | _navkey_begin_ret
0b0c8     2D 00 64 FD | 	ret
0b0cc                 | 
0b0cc                 | _navkey_update_status
0b0cc     01 4C 05 F6 | 	mov	COUNT_, #1
0b0d0     A9 00 A0 FD | 	call	#pushregs_
0b0d4     3A 8D 02 F6 | 	mov	local01, arg01
0b0d8     06 76 06 F6 | 	mov	arg02, #6
0b0dc     C0 F5 B0 FD | 	call	#_readNavKeyInt_1903
0b0e0     1A 77 02 F6 | 	mov	arg02, result1
0b0e4     0F 76 66 F7 | 	signx	arg02, #15
0b0e8     01 76 06 F5 | 	and	arg02, #1
0b0ec     14 8C 06 F1 | 	add	local01, #20
0b0f0     46 77 62 FC | 	wrlong	arg02, local01
0b0f4     1A 77 02 F6 | 	mov	arg02, result1
0b0f8     0F 76 66 F7 | 	signx	arg02, #15
0b0fc     02 76 06 F5 | 	and	arg02, #2
0b100     04 8C 06 F1 | 	add	local01, #4
0b104     46 77 62 FC | 	wrlong	arg02, local01
0b108     1A 77 02 F6 | 	mov	arg02, result1
0b10c     0F 76 66 F7 | 	signx	arg02, #15
0b110     04 76 06 F5 | 	and	arg02, #4
0b114     04 8C 06 F1 | 	add	local01, #4
0b118     46 77 62 FC | 	wrlong	arg02, local01
0b11c     1A 77 02 F6 | 	mov	arg02, result1
0b120     0F 76 66 F7 | 	signx	arg02, #15
0b124     08 76 06 F5 | 	and	arg02, #8
0b128     04 8C 06 F1 | 	add	local01, #4
0b12c     46 77 62 FC | 	wrlong	arg02, local01
0b130     1A 77 02 F6 | 	mov	arg02, result1
0b134     0F 76 66 F7 | 	signx	arg02, #15
0b138     10 76 06 F5 | 	and	arg02, #16
0b13c     04 8C 06 F1 | 	add	local01, #4
0b140     46 77 62 FC | 	wrlong	arg02, local01
0b144     1A 77 02 F6 | 	mov	arg02, result1
0b148     0F 76 66 F7 | 	signx	arg02, #15
0b14c     20 76 06 F5 | 	and	arg02, #32
0b150     04 8C 06 F1 | 	add	local01, #4
0b154     46 77 62 FC | 	wrlong	arg02, local01
0b158     1A 77 02 F6 | 	mov	arg02, result1
0b15c     0F 76 66 F7 | 	signx	arg02, #15
0b160     40 76 06 F5 | 	and	arg02, #64
0b164     04 8C 06 F1 | 	add	local01, #4
0b168     46 77 62 FC | 	wrlong	arg02, local01
0b16c     1A 77 02 F6 | 	mov	arg02, result1
0b170     0F 76 66 F7 | 	signx	arg02, #15
0b174     80 76 06 F5 | 	and	arg02, #128
0b178     04 8C 06 F1 | 	add	local01, #4
0b17c     46 77 62 FC | 	wrlong	arg02, local01
0b180     1A 77 02 F6 | 	mov	arg02, result1
0b184     0F 76 66 F7 | 	signx	arg02, #15
0b188     00 77 06 F5 | 	and	arg02, #256
0b18c     04 8C 06 F1 | 	add	local01, #4
0b190     46 77 62 FC | 	wrlong	arg02, local01
0b194     1A 77 02 F6 | 	mov	arg02, result1
0b198     0F 76 66 F7 | 	signx	arg02, #15
0b19c     01 00 00 FF 
0b1a0     00 76 06 F5 | 	and	arg02, ##512
0b1a4     04 8C 06 F1 | 	add	local01, #4
0b1a8     46 77 62 FC | 	wrlong	arg02, local01
0b1ac     1A 77 02 F6 | 	mov	arg02, result1
0b1b0     0F 76 66 F7 | 	signx	arg02, #15
0b1b4     02 00 00 FF 
0b1b8     00 76 06 F5 | 	and	arg02, ##1024
0b1bc     04 8C 06 F1 | 	add	local01, #4
0b1c0     46 77 62 FC | 	wrlong	arg02, local01
0b1c4     1A 77 02 F6 | 	mov	arg02, result1
0b1c8     0F 76 66 F7 | 	signx	arg02, #15
0b1cc     04 00 00 FF 
0b1d0     00 76 06 F5 | 	and	arg02, ##2048
0b1d4     04 8C 06 F1 | 	add	local01, #4
0b1d8     46 77 62 FC | 	wrlong	arg02, local01
0b1dc     1A 77 02 F6 | 	mov	arg02, result1
0b1e0     0F 76 66 F7 | 	signx	arg02, #15
0b1e4     08 00 00 FF 
0b1e8     00 76 06 F5 | 	and	arg02, ##4096
0b1ec     04 8C 06 F1 | 	add	local01, #4
0b1f0     46 77 62 FC | 	wrlong	arg02, local01
0b1f4     1A 77 02 F6 | 	mov	arg02, result1
0b1f8     0F 76 66 F7 | 	signx	arg02, #15
0b1fc     10 00 00 FF 
0b200     00 76 06 F5 | 	and	arg02, ##8192
0b204     04 8C 06 F1 | 	add	local01, #4
0b208     46 77 62 FC | 	wrlong	arg02, local01
0b20c     0F 34 66 F7 | 	signx	result1, #15
0b210     20 00 00 FF 
0b214     00 34 06 F5 | 	and	result1, ##16384
0b218     04 8C 06 F1 | 	add	local01, #4
0b21c     46 35 62 FC | 	wrlong	result1, local01
0b220     A8 F0 03 F6 | 	mov	ptra, fp
0b224     B3 00 A0 FD | 	call	#popregs_
0b228                 | _navkey_update_status_ret
0b228     2D 00 64 FD | 	ret
0b22c                 | 
0b22c                 | _navkey_write_max
0b22c     01 4C 05 F6 | 	mov	COUNT_, #1
0b230     A9 00 A0 FD | 	call	#pushregs_
0b234     3A 8D 02 F6 | 	mov	local01, arg01
0b238     3B 75 02 F6 | 	mov	arg01, arg02
0b23c     B4 C4 B1 FD | 	call	#__system___float_fromint
0b240     1A 79 02 F6 | 	mov	arg03, result1
0b244     46 75 02 F6 | 	mov	arg01, local01
0b248     0E 76 06 F6 | 	mov	arg02, #14
0b24c     18 F6 B0 FD | 	call	#_writeNavKeyFloat_1909
0b250     A8 F0 03 F6 | 	mov	ptra, fp
0b254     B3 00 A0 FD | 	call	#popregs_
0b258                 | _navkey_write_max_ret
0b258     2D 00 64 FD | 	ret
0b25c                 | 
0b25c                 | _navkey_write_min
0b25c     01 4C 05 F6 | 	mov	COUNT_, #1
0b260     A9 00 A0 FD | 	call	#pushregs_
0b264     3A 8D 02 F6 | 	mov	local01, arg01
0b268     3B 75 02 F6 | 	mov	arg01, arg02
0b26c     84 C4 B1 FD | 	call	#__system___float_fromint
0b270     1A 79 02 F6 | 	mov	arg03, result1
0b274     46 75 02 F6 | 	mov	arg01, local01
0b278     12 76 06 F6 | 	mov	arg02, #18
0b27c     E8 F5 B0 FD | 	call	#_writeNavKeyFloat_1909
0b280     A8 F0 03 F6 | 	mov	ptra, fp
0b284     B3 00 A0 FD | 	call	#popregs_
0b288                 | _navkey_write_min_ret
0b288     2D 00 64 FD | 	ret
0b28c                 | 
0b28c                 | _motion_state_window_init
0b28c     04 4C 05 F6 | 	mov	COUNT_, #4
0b290     A9 00 A0 FD | 	call	#pushregs_
0b294     3A 8D 02 F6 | 	mov	local01, arg01
0b298     46 79 62 FC | 	wrlong	arg03, local01
0b29c     3B 75 02 F6 | 	mov	arg01, arg02
0b2a0     CC 74 06 F1 | 	add	arg01, #204
0b2a4     3A 11 68 FC | 	wrlong	#8, arg01
0b2a8     04 74 06 F1 | 	add	arg01, #4
0b2ac     3A 8D 62 FC | 	wrlong	local01, arg01
0b2b0     04 8C 06 F1 | 	add	local01, #4
0b2b4     46 8F 02 F6 | 	mov	local02, local01
0b2b8     47 75 02 F6 | 	mov	arg01, local02
0b2bc     88 D8 BF FD | 	call	#_module_init
0b2c0     47 75 02 F6 | 	mov	arg01, local02
0b2c4     CC 74 06 F1 | 	add	arg01, #204
0b2c8     3A 0B 68 FC | 	wrlong	#5, arg01
0b2cc     24 74 06 F1 | 	add	arg01, #36
0b2d0     3A 01 68 FC | 	wrlong	#0, arg01
0b2d4     04 74 06 F1 | 	add	arg01, #4
0b2d8     3A 01 68 FC | 	wrlong	#0, arg01
0b2dc     47 75 02 F6 | 	mov	arg01, local02
0b2e0     0F 76 CE F9 | 	bmask	arg02, #15
0b2e4     01 78 06 F6 | 	mov	arg03, #1
0b2e8     68 E1 BF FD | 	call	#_module_add_border
0b2ec     47 75 02 F6 | 	mov	arg01, local02
0b2f0     18 E5 BF FD | 	call	#_module_fit_height
0b2f4     47 75 02 F6 | 	mov	arg01, local02
0b2f8     48 E4 BF FD | 	call	#_module_fit_width
0b2fc     47 75 02 F6 | 	mov	arg01, local02
0b300     F8 74 06 F1 | 	add	arg01, #248
0b304     3A 15 68 FC | 	wrlong	#10, arg01
0b308     04 74 06 F1 | 	add	arg01, #4
0b30c     3A 15 68 FC | 	wrlong	#10, arg01
0b310     47 75 02 F6 | 	mov	arg01, local02
0b314     01 00 00 FF 
0b318     73 78 06 F6 | 	mov	arg03, ##627
0b31c     10 75 06 F1 | 	add	arg01, #272
0b320     1D 00 80 FF 
0b324     3A E9 6A FC | 	wrlong	##15220, arg01
0b328     04 74 86 F1 | 	sub	arg01, #4
0b32c     01 00 80 FF 
0b330     3A E7 68 FC | 	wrlong	##627, arg01
0b334     47 75 02 F6 | 	mov	arg01, local02
0b338     80 E1 BF FD | 	call	#_module_align_inner_left
0b33c     47 75 02 F6 | 	mov	arg01, local02
0b340     50 E1 BF FD | 	call	#_module_align_inner_top
0b344     40 8D 06 F1 | 	add	local01, #320
0b348     46 91 02 F6 | 	mov	local03, local01
0b34c     48 75 02 F6 | 	mov	arg01, local03
0b350     47 77 02 F6 | 	mov	arg02, local02
0b354     F0 D7 BF FD | 	call	#_module_init
0b358     48 75 02 F6 | 	mov	arg01, local03
0b35c     0A 78 06 F6 | 	mov	arg03, #10
0b360     00 75 06 F1 | 	add	arg01, #256
0b364     3A 15 68 FC | 	wrlong	#10, arg01
0b368     04 74 06 F1 | 	add	arg01, #4
0b36c     3A 15 68 FC | 	wrlong	#10, arg01
0b370     56 01 00 FF 
0b374     68 D6 05 F1 | 	add	ptr__dat__, ##175208
0b378     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b37c     56 01 00 FF 
0b380     68 D6 85 F1 | 	sub	ptr__dat__, ##175208
0b384     48 75 02 F6 | 	mov	arg01, local03
0b388     58 DD BF FD | 	call	#_module_set_text
0b38c     48 75 02 F6 | 	mov	arg01, local03
0b390     01 76 06 F6 | 	mov	arg02, #1
0b394     8C DE BF FD | 	call	#_module_text_font
0b398     48 75 02 F6 | 	mov	arg01, local03
0b39c     A0 DD BF FD | 	call	#_module_text_fit
0b3a0     48 79 02 FB | 	rdlong	arg03, local03
0b3a4     10 79 06 F1 | 	add	arg03, #272
0b3a8     3C 79 02 FB | 	rdlong	arg03, arg03
0b3ac     48 75 02 F6 | 	mov	arg01, local03
0b3b0     10 75 06 F1 | 	add	arg01, #272
0b3b4     7F 00 80 FF 
0b3b8     3A FF 6B FC | 	wrlong	##65535, arg01
0b3bc     04 74 86 F1 | 	sub	arg01, #4
0b3c0     3A 79 62 FC | 	wrlong	arg03, arg01
0b3c4     48 75 02 F6 | 	mov	arg01, local03
0b3c8     01 76 06 F6 | 	mov	arg02, #1
0b3cc     02 78 06 F6 | 	mov	arg03, #2
0b3d0     EC E1 BF FD | 	call	#_module_align_center_sector
0b3d4     48 75 02 F6 | 	mov	arg01, local03
0b3d8     B8 E0 BF FD | 	call	#_module_align_inner_top
0b3dc     40 8D 06 F1 | 	add	local01, #320
0b3e0     46 93 02 F6 | 	mov	local04, local01
0b3e4     49 75 02 F6 | 	mov	arg01, local04
0b3e8     47 77 02 F6 | 	mov	arg02, local02
0b3ec     58 D7 BF FD | 	call	#_module_init
0b3f0     49 75 02 F6 | 	mov	arg01, local04
0b3f4     0A 78 06 F6 | 	mov	arg03, #10
0b3f8     00 75 06 F1 | 	add	arg01, #256
0b3fc     3A 15 68 FC | 	wrlong	#10, arg01
0b400     04 74 06 F1 | 	add	arg01, #4
0b404     3A 15 68 FC | 	wrlong	#10, arg01
0b408     56 01 00 FF 
0b40c     61 D6 05 F1 | 	add	ptr__dat__, ##175201
0b410     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b414     56 01 00 FF 
0b418     61 D6 85 F1 | 	sub	ptr__dat__, ##175201
0b41c     49 75 02 F6 | 	mov	arg01, local04
0b420     C0 DC BF FD | 	call	#_module_set_text
0b424     49 75 02 F6 | 	mov	arg01, local04
0b428     01 76 06 F6 | 	mov	arg02, #1
0b42c     F4 DD BF FD | 	call	#_module_text_font
0b430     49 75 02 F6 | 	mov	arg01, local04
0b434     08 DD BF FD | 	call	#_module_text_fit
0b438     49 79 02 FB | 	rdlong	arg03, local04
0b43c     10 79 06 F1 | 	add	arg03, #272
0b440     3C 79 02 FB | 	rdlong	arg03, arg03
0b444     49 75 02 F6 | 	mov	arg01, local04
0b448     10 75 06 F1 | 	add	arg01, #272
0b44c     7F 00 80 FF 
0b450     3A FF 6B FC | 	wrlong	##65535, arg01
0b454     04 74 86 F1 | 	sub	arg01, #4
0b458     3A 79 62 FC | 	wrlong	arg03, arg01
0b45c     49 75 02 F6 | 	mov	arg01, local04
0b460     48 77 02 F6 | 	mov	arg02, local03
0b464     58 E2 BF FD | 	call	#_module_align_left
0b468     49 75 02 F6 | 	mov	arg01, local04
0b46c     24 E0 BF FD | 	call	#_module_align_inner_top
0b470     40 8D 06 F1 | 	add	local01, #320
0b474     46 75 02 F6 | 	mov	arg01, local01
0b478     47 77 02 F6 | 	mov	arg02, local02
0b47c     C8 D6 BF FD | 	call	#_module_init
0b480     46 75 02 F6 | 	mov	arg01, local01
0b484     0A 78 06 F6 | 	mov	arg03, #10
0b488     00 75 06 F1 | 	add	arg01, #256
0b48c     3A 15 68 FC | 	wrlong	#10, arg01
0b490     04 74 06 F1 | 	add	arg01, #4
0b494     3A 15 68 FC | 	wrlong	#10, arg01
0b498     56 01 00 FF 
0b49c     72 D6 05 F1 | 	add	ptr__dat__, ##175218
0b4a0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b4a4     56 01 00 FF 
0b4a8     72 D6 85 F1 | 	sub	ptr__dat__, ##175218
0b4ac     46 75 02 F6 | 	mov	arg01, local01
0b4b0     30 DC BF FD | 	call	#_module_set_text
0b4b4     46 75 02 F6 | 	mov	arg01, local01
0b4b8     01 76 06 F6 | 	mov	arg02, #1
0b4bc     64 DD BF FD | 	call	#_module_text_font
0b4c0     46 75 02 F6 | 	mov	arg01, local01
0b4c4     78 DC BF FD | 	call	#_module_text_fit
0b4c8     49 79 02 FB | 	rdlong	arg03, local04
0b4cc     10 79 06 F1 | 	add	arg03, #272
0b4d0     3C 79 02 FB | 	rdlong	arg03, arg03
0b4d4     46 75 02 F6 | 	mov	arg01, local01
0b4d8     10 75 06 F1 | 	add	arg01, #272
0b4dc     7F 00 80 FF 
0b4e0     3A FF 6B FC | 	wrlong	##65535, arg01
0b4e4     04 74 86 F1 | 	sub	arg01, #4
0b4e8     3A 79 62 FC | 	wrlong	arg03, arg01
0b4ec     46 75 02 F6 | 	mov	arg01, local01
0b4f0     48 77 02 F6 | 	mov	arg02, local03
0b4f4     20 E2 BF FD | 	call	#_module_align_right
0b4f8     46 75 02 F6 | 	mov	arg01, local01
0b4fc     94 DF BF FD | 	call	#_module_align_inner_top
0b500     40 8D 06 F1 | 	add	local01, #320
0b504     46 91 02 F6 | 	mov	local03, local01
0b508     48 75 02 F6 | 	mov	arg01, local03
0b50c     47 77 02 F6 | 	mov	arg02, local02
0b510     34 D6 BF FD | 	call	#_module_init
0b514     48 75 02 F6 | 	mov	arg01, local03
0b518     CC 74 06 F1 | 	add	arg01, #204
0b51c     3A 0B 68 FC | 	wrlong	#5, arg01
0b520     24 74 06 F1 | 	add	arg01, #36
0b524     3A 01 68 FC | 	wrlong	#0, arg01
0b528     04 74 06 F1 | 	add	arg01, #4
0b52c     3A 01 68 FC | 	wrlong	#0, arg01
0b530     48 75 02 F6 | 	mov	arg01, local03
0b534     10 75 06 F1 | 	add	arg01, #272
0b538     43 00 80 FF 
0b53c     3A E1 6B FC | 	wrlong	##34800, arg01
0b540     04 74 86 F1 | 	sub	arg01, #4
0b544     43 00 80 FF 
0b548     3A E1 6B FC | 	wrlong	##34800, arg01
0b54c     48 75 02 F6 | 	mov	arg01, local03
0b550     7C 00 00 FF 
0b554     00 76 06 F6 | 	mov	arg02, ##63488
0b558     03 78 06 F6 | 	mov	arg03, #3
0b55c     F4 DE BF FD | 	call	#_module_add_border
0b560     48 75 02 F6 | 	mov	arg01, local03
0b564     0A 78 06 F6 | 	mov	arg03, #10
0b568     00 75 06 F1 | 	add	arg01, #256
0b56c     3A 15 68 FC | 	wrlong	#10, arg01
0b570     04 74 06 F1 | 	add	arg01, #4
0b574     3A 15 68 FC | 	wrlong	#10, arg01
0b578     48 75 02 F6 | 	mov	arg01, local03
0b57c     03 76 06 F6 | 	mov	arg02, #3
0b580     F8 E1 BF FD | 	call	#_module_fit_space_even
0b584     48 75 02 F6 | 	mov	arg01, local03
0b588     49 77 02 F6 | 	mov	arg02, local04
0b58c     B4 E2 BF FD | 	call	#_module_fit_below
0b590     48 75 02 F6 | 	mov	arg01, local03
0b594     01 76 06 F6 | 	mov	arg02, #1
0b598     03 78 06 F6 | 	mov	arg03, #3
0b59c     94 E0 BF FD | 	call	#_module_align_space_even
0b5a0     C9 74 02 F6 | 	mov	arg01, objptr
0b5a4     D2 76 02 F6 | 	mov	arg02, ptr__button_callback_1934_
0b5a8     8C A6 B1 FD | 	call	#__system___make_methodptr
0b5ac     48 75 02 F6 | 	mov	arg01, local03
0b5b0     00 78 06 F6 | 	mov	arg03, #0
0b5b4     34 75 06 F1 | 	add	arg01, #308
0b5b8     3A 35 62 FC | 	wrlong	result1, arg01
0b5bc     10 74 86 F1 | 	sub	arg01, #16
0b5c0     3A 01 68 FC | 	wrlong	#0, arg01
0b5c4     C9 74 02 F6 | 	mov	arg01, objptr
0b5c8     18 77 02 F6 | 	mov	arg02, ptr__update_status_1940_
0b5cc     68 A6 B1 FD | 	call	#__system___make_methodptr
0b5d0     48 75 02 F6 | 	mov	arg01, local03
0b5d4     38 75 06 F1 | 	add	arg01, #312
0b5d8     3A 35 62 FC | 	wrlong	result1, arg01
0b5dc     40 8D 06 F1 | 	add	local01, #320
0b5e0     46 75 02 F6 | 	mov	arg01, local01
0b5e4     48 77 02 F6 | 	mov	arg02, local03
0b5e8     5C D5 BF FD | 	call	#_module_init
0b5ec     55 01 00 FF 
0b5f0     EC D7 05 F1 | 	add	ptr__dat__, ##175084
0b5f4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b5f8     55 01 00 FF 
0b5fc     EC D7 85 F1 | 	sub	ptr__dat__, ##175084
0b600     46 75 02 F6 | 	mov	arg01, local01
0b604     DC DA BF FD | 	call	#_module_set_text
0b608     46 75 02 F6 | 	mov	arg01, local01
0b60c     01 76 06 F6 | 	mov	arg02, #1
0b610     10 DC BF FD | 	call	#_module_text_font
0b614     46 75 02 F6 | 	mov	arg01, local01
0b618     24 DB BF FD | 	call	#_module_text_fit
0b61c     46 75 02 F6 | 	mov	arg01, local01
0b620     20 E1 BF FD | 	call	#_module_fit_width
0b624     46 91 02 FB | 	rdlong	local03, local01
0b628     10 91 06 F1 | 	add	local03, #272
0b62c     48 79 02 FB | 	rdlong	arg03, local03
0b630     46 75 02 F6 | 	mov	arg01, local01
0b634     10 75 06 F1 | 	add	arg01, #272
0b638     7F 00 80 FF 
0b63c     3A FF 6B FC | 	wrlong	##65535, arg01
0b640     04 74 86 F1 | 	sub	arg01, #4
0b644     3A 79 62 FC | 	wrlong	arg03, arg01
0b648     46 75 02 F6 | 	mov	arg01, local01
0b64c     CC 74 06 F1 | 	add	arg01, #204
0b650     3A 91 02 FB | 	rdlong	local03, arg01
0b654     CC 74 86 F1 | 	sub	arg01, #204
0b658     01 90 0E F2 | 	cmp	local03, #1 wz
0b65c                 | '         return;
0b65c     DC 74 06 A1 |  if_e	add	arg01, #220
0b660     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b664     46 75 02 F6 | 	mov	arg01, local01
0b668     50 DE BF FD | 	call	#_module_align_inner_left
0b66c     46 75 02 F6 | 	mov	arg01, local01
0b670     00 DF BF FD | 	call	#_module_align_middle
0b674     40 8D 06 F1 | 	add	local01, #320
0b678     46 91 02 F6 | 	mov	local03, local01
0b67c     48 75 02 F6 | 	mov	arg01, local03
0b680     47 77 02 F6 | 	mov	arg02, local02
0b684     C0 D4 BF FD | 	call	#_module_init
0b688     48 75 02 F6 | 	mov	arg01, local03
0b68c     CC 74 06 F1 | 	add	arg01, #204
0b690     3A 0B 68 FC | 	wrlong	#5, arg01
0b694     24 74 06 F1 | 	add	arg01, #36
0b698     3A 01 68 FC | 	wrlong	#0, arg01
0b69c     04 74 06 F1 | 	add	arg01, #4
0b6a0     3A 01 68 FC | 	wrlong	#0, arg01
0b6a4     48 75 02 F6 | 	mov	arg01, local03
0b6a8     10 75 06 F1 | 	add	arg01, #272
0b6ac     43 00 80 FF 
0b6b0     3A E1 6B FC | 	wrlong	##34800, arg01
0b6b4     04 74 86 F1 | 	sub	arg01, #4
0b6b8     43 00 80 FF 
0b6bc     3A E1 6B FC | 	wrlong	##34800, arg01
0b6c0     48 75 02 F6 | 	mov	arg01, local03
0b6c4     00 75 06 F1 | 	add	arg01, #256
0b6c8     3A 15 68 FC | 	wrlong	#10, arg01
0b6cc     04 74 06 F1 | 	add	arg01, #4
0b6d0     3A 15 68 FC | 	wrlong	#10, arg01
0b6d4     48 75 02 F6 | 	mov	arg01, local03
0b6d8     02 78 06 F6 | 	mov	arg03, #2
0b6dc     F8 74 06 F1 | 	add	arg01, #248
0b6e0     3A 05 68 FC | 	wrlong	#2, arg01
0b6e4     04 74 06 F1 | 	add	arg01, #4
0b6e8     3A 05 68 FC | 	wrlong	#2, arg01
0b6ec     48 75 02 F6 | 	mov	arg01, local03
0b6f0     03 76 06 F6 | 	mov	arg02, #3
0b6f4     84 E0 BF FD | 	call	#_module_fit_space_even
0b6f8     48 75 02 F6 | 	mov	arg01, local03
0b6fc     49 77 02 F6 | 	mov	arg02, local04
0b700     40 E1 BF FD | 	call	#_module_fit_below
0b704     48 75 02 F6 | 	mov	arg01, local03
0b708     02 76 06 F6 | 	mov	arg02, #2
0b70c     03 78 06 F6 | 	mov	arg03, #3
0b710     20 DF BF FD | 	call	#_module_align_space_even
0b714     C9 74 02 F6 | 	mov	arg01, objptr
0b718     0C 77 02 F6 | 	mov	arg02, ptr__update_condition_1946_
0b71c     18 A5 B1 FD | 	call	#__system___make_methodptr
0b720     48 75 02 F6 | 	mov	arg01, local03
0b724     38 75 06 F1 | 	add	arg01, #312
0b728     3A 35 62 FC | 	wrlong	result1, arg01
0b72c     40 8D 06 F1 | 	add	local01, #320
0b730     46 75 02 F6 | 	mov	arg01, local01
0b734     48 77 02 F6 | 	mov	arg02, local03
0b738     0C D4 BF FD | 	call	#_module_init
0b73c     56 01 00 FF 
0b740     42 D6 05 F1 | 	add	ptr__dat__, ##175170
0b744     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b748     56 01 00 FF 
0b74c     42 D6 85 F1 | 	sub	ptr__dat__, ##175170
0b750     46 75 02 F6 | 	mov	arg01, local01
0b754     8C D9 BF FD | 	call	#_module_set_text
0b758     46 75 02 F6 | 	mov	arg01, local01
0b75c     01 76 06 F6 | 	mov	arg02, #1
0b760     C0 DA BF FD | 	call	#_module_text_font
0b764     46 75 02 F6 | 	mov	arg01, local01
0b768     D4 D9 BF FD | 	call	#_module_text_fit
0b76c     46 75 02 F6 | 	mov	arg01, local01
0b770     D0 DF BF FD | 	call	#_module_fit_width
0b774     46 91 02 FB | 	rdlong	local03, local01
0b778     10 91 06 F1 | 	add	local03, #272
0b77c     48 79 02 FB | 	rdlong	arg03, local03
0b780     46 75 02 F6 | 	mov	arg01, local01
0b784     10 75 06 F1 | 	add	arg01, #272
0b788     7F 00 80 FF 
0b78c     3A FF 6B FC | 	wrlong	##65535, arg01
0b790     04 74 86 F1 | 	sub	arg01, #4
0b794     3A 79 62 FC | 	wrlong	arg03, arg01
0b798     46 75 02 F6 | 	mov	arg01, local01
0b79c     CC 74 06 F1 | 	add	arg01, #204
0b7a0     3A 91 02 FB | 	rdlong	local03, arg01
0b7a4     CC 74 86 F1 | 	sub	arg01, #204
0b7a8     01 90 0E F2 | 	cmp	local03, #1 wz
0b7ac                 | '         return;
0b7ac     DC 74 06 A1 |  if_e	add	arg01, #220
0b7b0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b7b4     46 75 02 F6 | 	mov	arg01, local01
0b7b8     00 DD BF FD | 	call	#_module_align_inner_left
0b7bc     46 75 02 F6 | 	mov	arg01, local01
0b7c0     B0 DD BF FD | 	call	#_module_align_middle
0b7c4     40 8D 06 F1 | 	add	local01, #320
0b7c8     46 91 02 F6 | 	mov	local03, local01
0b7cc     48 75 02 F6 | 	mov	arg01, local03
0b7d0     47 77 02 F6 | 	mov	arg02, local02
0b7d4     70 D3 BF FD | 	call	#_module_init
0b7d8     48 75 02 F6 | 	mov	arg01, local03
0b7dc     CC 74 06 F1 | 	add	arg01, #204
0b7e0     3A 0B 68 FC | 	wrlong	#5, arg01
0b7e4     24 74 06 F1 | 	add	arg01, #36
0b7e8     3A 01 68 FC | 	wrlong	#0, arg01
0b7ec     04 74 06 F1 | 	add	arg01, #4
0b7f0     3A 01 68 FC | 	wrlong	#0, arg01
0b7f4     48 75 02 F6 | 	mov	arg01, local03
0b7f8     10 75 06 F1 | 	add	arg01, #272
0b7fc     43 00 80 FF 
0b800     3A E1 6B FC | 	wrlong	##34800, arg01
0b804     04 74 86 F1 | 	sub	arg01, #4
0b808     43 00 80 FF 
0b80c     3A E1 6B FC | 	wrlong	##34800, arg01
0b810     48 75 02 F6 | 	mov	arg01, local03
0b814     0A 78 06 F6 | 	mov	arg03, #10
0b818     00 75 06 F1 | 	add	arg01, #256
0b81c     3A 15 68 FC | 	wrlong	#10, arg01
0b820     04 74 06 F1 | 	add	arg01, #4
0b824     3A 15 68 FC | 	wrlong	#10, arg01
0b828     48 75 02 F6 | 	mov	arg01, local03
0b82c     03 76 06 F6 | 	mov	arg02, #3
0b830     48 DF BF FD | 	call	#_module_fit_space_even
0b834     48 75 02 F6 | 	mov	arg01, local03
0b838     49 77 02 F6 | 	mov	arg02, local04
0b83c     04 E0 BF FD | 	call	#_module_fit_below
0b840     48 75 02 F6 | 	mov	arg01, local03
0b844     03 76 06 F6 | 	mov	arg02, #3
0b848     03 78 06 F6 | 	mov	arg03, #3
0b84c     E4 DD BF FD | 	call	#_module_align_space_even
0b850     C9 74 02 F6 | 	mov	arg01, objptr
0b854     D2 76 02 F6 | 	mov	arg02, ptr__button_callback_1934_
0b858     DC A3 B1 FD | 	call	#__system___make_methodptr
0b85c     48 75 02 F6 | 	mov	arg01, local03
0b860     02 78 06 F6 | 	mov	arg03, #2
0b864     34 75 06 F1 | 	add	arg01, #308
0b868     3A 35 62 FC | 	wrlong	result1, arg01
0b86c     10 74 86 F1 | 	sub	arg01, #16
0b870     3A 05 68 FC | 	wrlong	#2, arg01
0b874     C9 74 02 F6 | 	mov	arg01, objptr
0b878     13 77 02 F6 | 	mov	arg02, ptr__update_mode_1952_
0b87c     B8 A3 B1 FD | 	call	#__system___make_methodptr
0b880     48 75 02 F6 | 	mov	arg01, local03
0b884     38 75 06 F1 | 	add	arg01, #312
0b888     3A 35 62 FC | 	wrlong	result1, arg01
0b88c     40 8D 06 F1 | 	add	local01, #320
0b890     46 75 02 F6 | 	mov	arg01, local01
0b894     48 77 02 F6 | 	mov	arg02, local03
0b898     AC D2 BF FD | 	call	#_module_init
0b89c     56 01 00 FF 
0b8a0     51 D6 05 F1 | 	add	ptr__dat__, ##175185
0b8a4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b8a8     56 01 00 FF 
0b8ac     51 D6 85 F1 | 	sub	ptr__dat__, ##175185
0b8b0     46 75 02 F6 | 	mov	arg01, local01
0b8b4     2C D8 BF FD | 	call	#_module_set_text
0b8b8     46 75 02 F6 | 	mov	arg01, local01
0b8bc     01 76 06 F6 | 	mov	arg02, #1
0b8c0     60 D9 BF FD | 	call	#_module_text_font
0b8c4     46 75 02 F6 | 	mov	arg01, local01
0b8c8     74 D8 BF FD | 	call	#_module_text_fit
0b8cc     46 75 02 F6 | 	mov	arg01, local01
0b8d0     70 DE BF FD | 	call	#_module_fit_width
0b8d4     46 93 02 FB | 	rdlong	local04, local01
0b8d8     10 93 06 F1 | 	add	local04, #272
0b8dc     49 79 02 FB | 	rdlong	arg03, local04
0b8e0     46 75 02 F6 | 	mov	arg01, local01
0b8e4     10 75 06 F1 | 	add	arg01, #272
0b8e8     7F 00 80 FF 
0b8ec     3A FF 6B FC | 	wrlong	##65535, arg01
0b8f0     04 74 86 F1 | 	sub	arg01, #4
0b8f4     3A 79 62 FC | 	wrlong	arg03, arg01
0b8f8     46 75 02 F6 | 	mov	arg01, local01
0b8fc     CC 74 06 F1 | 	add	arg01, #204
0b900     3A 93 02 FB | 	rdlong	local04, arg01
0b904     CC 74 86 F1 | 	sub	arg01, #204
0b908     01 92 0E F2 | 	cmp	local04, #1 wz
0b90c                 | '         return;
0b90c     DC 74 06 A1 |  if_e	add	arg01, #220
0b910     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b914     46 75 02 F6 | 	mov	arg01, local01
0b918     A0 DB BF FD | 	call	#_module_align_inner_left
0b91c     46 75 02 F6 | 	mov	arg01, local01
0b920     50 DC BF FD | 	call	#_module_align_middle
0b924     A8 F0 03 F6 | 	mov	ptra, fp
0b928     B3 00 A0 FD | 	call	#popregs_
0b92c                 | _motion_state_window_init_ret
0b92c     2D 00 64 FD | 	ret
0b930                 | 
0b930                 | _function_window_init
0b930     05 4C 05 F6 | 	mov	COUNT_, #5
0b934     A9 00 A0 FD | 	call	#pushregs_
0b938     3A 8D 02 F6 | 	mov	local01, arg01
0b93c     46 79 62 FC | 	wrlong	arg03, local01
0b940     3B 75 02 F6 | 	mov	arg01, arg02
0b944     CC 74 06 F1 | 	add	arg01, #204
0b948     3A 11 68 FC | 	wrlong	#8, arg01
0b94c     04 74 06 F1 | 	add	arg01, #4
0b950     3A 8D 62 FC | 	wrlong	local01, arg01
0b954     24 8C 06 F1 | 	add	local01, #36
0b958     46 8F 02 F6 | 	mov	local02, local01
0b95c     47 75 02 F6 | 	mov	arg01, local02
0b960     E4 D1 BF FD | 	call	#_module_init
0b964     47 75 02 F6 | 	mov	arg01, local02
0b968     CC 74 06 F1 | 	add	arg01, #204
0b96c     3A 0B 68 FC | 	wrlong	#5, arg01
0b970     24 74 06 F1 | 	add	arg01, #36
0b974     3A 01 68 FC | 	wrlong	#0, arg01
0b978     04 74 06 F1 | 	add	arg01, #4
0b97c     3A 01 68 FC | 	wrlong	#0, arg01
0b980     47 75 02 F6 | 	mov	arg01, local02
0b984     0F 76 CE F9 | 	bmask	arg02, #15
0b988     01 78 06 F6 | 	mov	arg03, #1
0b98c     C4 DA BF FD | 	call	#_module_add_border
0b990     47 75 02 F6 | 	mov	arg01, local02
0b994     74 DE BF FD | 	call	#_module_fit_height
0b998     47 75 02 F6 | 	mov	arg01, local02
0b99c     A4 DD BF FD | 	call	#_module_fit_width
0b9a0     47 75 02 F6 | 	mov	arg01, local02
0b9a4     F8 74 06 F1 | 	add	arg01, #248
0b9a8     3A 0B 68 FC | 	wrlong	#5, arg01
0b9ac     04 74 06 F1 | 	add	arg01, #4
0b9b0     3A 0B 68 FC | 	wrlong	#5, arg01
0b9b4     47 75 02 F6 | 	mov	arg01, local02
0b9b8     01 00 00 FF 
0b9bc     73 78 06 F6 | 	mov	arg03, ##627
0b9c0     10 75 06 F1 | 	add	arg01, #272
0b9c4     1D 00 80 FF 
0b9c8     3A E9 6A FC | 	wrlong	##15220, arg01
0b9cc     04 74 86 F1 | 	sub	arg01, #4
0b9d0     01 00 80 FF 
0b9d4     3A E7 68 FC | 	wrlong	##627, arg01
0b9d8     47 75 02 F6 | 	mov	arg01, local02
0b9dc     DC DA BF FD | 	call	#_module_align_inner_left
0b9e0     47 75 02 F6 | 	mov	arg01, local02
0b9e4     AC DA BF FD | 	call	#_module_align_inner_top
0b9e8     40 8D 06 F1 | 	add	local01, #320
0b9ec     46 91 02 F6 | 	mov	local03, local01
0b9f0     48 75 02 F6 | 	mov	arg01, local03
0b9f4     47 77 02 F6 | 	mov	arg02, local02
0b9f8     4C D1 BF FD | 	call	#_module_init
0b9fc     48 75 02 F6 | 	mov	arg01, local03
0ba00     08 78 06 F6 | 	mov	arg03, #8
0ba04     F8 74 06 F1 | 	add	arg01, #248
0ba08     3A 11 68 FC | 	wrlong	#8, arg01
0ba0c     04 74 06 F1 | 	add	arg01, #4
0ba10     3A 11 68 FC | 	wrlong	#8, arg01
0ba14     48 75 02 F6 | 	mov	arg01, local03
0ba18     00 75 06 F1 | 	add	arg01, #256
0ba1c     3A 11 68 FC | 	wrlong	#8, arg01
0ba20     04 74 06 F1 | 	add	arg01, #4
0ba24     3A 11 68 FC | 	wrlong	#8, arg01
0ba28     60 8D 86 F1 | 	sub	local01, #352
0ba2c     46 77 02 F6 | 	mov	arg02, local01
0ba30     48 75 02 F6 | 	mov	arg01, local03
0ba34     AC D6 BF FD | 	call	#_module_set_text
0ba38     48 75 02 F6 | 	mov	arg01, local03
0ba3c     01 76 06 F6 | 	mov	arg02, #1
0ba40     E0 D7 BF FD | 	call	#_module_text_font
0ba44     48 79 02 FB | 	rdlong	arg03, local03
0ba48     10 79 06 F1 | 	add	arg03, #272
0ba4c     3C 79 02 FB | 	rdlong	arg03, arg03
0ba50     48 75 02 F6 | 	mov	arg01, local03
0ba54     10 75 06 F1 | 	add	arg01, #272
0ba58     7F 00 80 FF 
0ba5c     3A FF 6B FC | 	wrlong	##65535, arg01
0ba60     04 74 86 F1 | 	sub	arg01, #4
0ba64     3A 79 62 FC | 	wrlong	arg03, arg01
0ba68     48 75 02 F6 | 	mov	arg01, local03
0ba6c     CC 74 06 F1 | 	add	arg01, #204
0ba70     3A 77 02 FB | 	rdlong	arg02, arg01
0ba74     CC 74 86 F1 | 	sub	arg01, #204
0ba78     01 76 0E F2 | 	cmp	arg02, #1 wz
0ba7c                 | '         return;
0ba7c     DC 74 06 A1 |  if_e	add	arg01, #220
0ba80     3A 05 68 AC |  if_e	wrlong	#2, arg01
0ba84     48 75 02 F6 | 	mov	arg01, local03
0ba88     08 DA BF FD | 	call	#_module_align_inner_top
0ba8c     C9 74 02 F6 | 	mov	arg01, objptr
0ba90     0F 77 02 F6 | 	mov	arg02, ptr__update_header_2010_
0ba94     A0 A1 B1 FD | 	call	#__system___make_methodptr
0ba98     48 75 02 F6 | 	mov	arg01, local03
0ba9c     38 75 06 F1 | 	add	arg01, #312
0baa0     3A 35 62 FC | 	wrlong	result1, arg01
0baa4     01 00 00 FF 
0baa8     A0 8C 06 F1 | 	add	local01, ##672
0baac     46 93 02 F6 | 	mov	local04, local01
0bab0     49 75 02 F6 | 	mov	arg01, local04
0bab4     47 77 02 F6 | 	mov	arg02, local02
0bab8     8C D0 BF FD | 	call	#_module_init
0babc     49 75 02 F6 | 	mov	arg01, local04
0bac0     00 78 06 F6 | 	mov	arg03, #0
0bac4     F8 74 06 F1 | 	add	arg01, #248
0bac8     3A 01 68 FC | 	wrlong	#0, arg01
0bacc     04 74 06 F1 | 	add	arg01, #4
0bad0     3A 01 68 FC | 	wrlong	#0, arg01
0bad4     49 75 02 F6 | 	mov	arg01, local04
0bad8     68 DC BF FD | 	call	#_module_fit_width
0badc     49 75 02 F6 | 	mov	arg01, local04
0bae0     48 77 02 F6 | 	mov	arg02, local03
0bae4     5C DD BF FD | 	call	#_module_fit_below
0bae8     49 75 02 F6 | 	mov	arg01, local04
0baec     CC D9 BF FD | 	call	#_module_align_inner_left
0baf0     49 75 02 F6 | 	mov	arg01, local04
0baf4     48 77 02 F6 | 	mov	arg02, local03
0baf8     F0 DB BF FD | 	call	#_module_align_below
0bafc     40 8D 06 F1 | 	add	local01, #320
0bb00     46 8F 02 F6 | 	mov	local02, local01
0bb04     47 75 02 F6 | 	mov	arg01, local02
0bb08     49 77 02 F6 | 	mov	arg02, local04
0bb0c     38 D0 BF FD | 	call	#_module_init
0bb10     56 01 00 FF 
0bb14     77 D6 05 F1 | 	add	ptr__dat__, ##175223
0bb18     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bb1c     56 01 00 FF 
0bb20     77 D6 85 F1 | 	sub	ptr__dat__, ##175223
0bb24     47 75 02 F6 | 	mov	arg01, local02
0bb28     B8 D5 BF FD | 	call	#_module_set_text
0bb2c     47 75 02 F6 | 	mov	arg01, local02
0bb30     10 75 06 F1 | 	add	arg01, #272
0bb34     7F 00 80 FF 
0bb38     3A FF 6B FC | 	wrlong	##65535, arg01
0bb3c     04 74 86 F1 | 	sub	arg01, #4
0bb40     43 00 80 FF 
0bb44     3A E1 6B FC | 	wrlong	##34800, arg01
0bb48     47 75 02 F6 | 	mov	arg01, local02
0bb4c     00 75 06 F1 | 	add	arg01, #256
0bb50     3A 11 68 FC | 	wrlong	#8, arg01
0bb54     04 74 06 F1 | 	add	arg01, #4
0bb58     3A 11 68 FC | 	wrlong	#8, arg01
0bb5c     47 75 02 F6 | 	mov	arg01, local02
0bb60     CC 74 06 F1 | 	add	arg01, #204
0bb64     3A 91 02 FB | 	rdlong	local03, arg01
0bb68     CC 74 86 F1 | 	sub	arg01, #204
0bb6c     01 90 0E F2 | 	cmp	local03, #1 wz
0bb70                 | '         return;
0bb70     DC 74 06 A1 |  if_e	add	arg01, #220
0bb74     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bb78     47 75 02 F6 | 	mov	arg01, local02
0bb7c     CC 74 06 F1 | 	add	arg01, #204
0bb80     3A 91 02 FB | 	rdlong	local03, arg01
0bb84     CC 74 86 F1 | 	sub	arg01, #204
0bb88     01 90 0E F2 | 	cmp	local03, #1 wz
0bb8c                 | '         return;
0bb8c     E0 74 06 A1 |  if_e	add	arg01, #224
0bb90     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bb94     47 75 02 F6 | 	mov	arg01, local02
0bb98     00 76 06 F6 | 	mov	arg02, #0
0bb9c     03 78 06 F6 | 	mov	arg03, #3
0bba0     B0 D8 BF FD | 	call	#_module_add_border
0bba4     47 75 02 F6 | 	mov	arg01, local02
0bba8     03 76 06 F6 | 	mov	arg02, #3
0bbac     CC DB BF FD | 	call	#_module_fit_space_even
0bbb0     47 75 02 F6 | 	mov	arg01, local02
0bbb4     03 76 06 F6 | 	mov	arg02, #3
0bbb8     08 DC BF FD | 	call	#_module_fit_space_even_verticle
0bbbc     47 75 02 F6 | 	mov	arg01, local02
0bbc0     01 76 06 F6 | 	mov	arg02, #1
0bbc4     03 78 06 F6 | 	mov	arg03, #3
0bbc8     68 DA BF FD | 	call	#_module_align_space_even
0bbcc     47 75 02 F6 | 	mov	arg01, local02
0bbd0     C0 D8 BF FD | 	call	#_module_align_inner_top
0bbd4     C9 74 02 F6 | 	mov	arg01, objptr
0bbd8     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0bbdc     58 A0 B1 FD | 	call	#__system___make_methodptr
0bbe0     47 75 02 F6 | 	mov	arg01, local02
0bbe4     00 78 06 F6 | 	mov	arg03, #0
0bbe8     34 75 06 F1 | 	add	arg01, #308
0bbec     3A 35 62 FC | 	wrlong	result1, arg01
0bbf0     10 74 86 F1 | 	sub	arg01, #16
0bbf4     3A 01 68 FC | 	wrlong	#0, arg01
0bbf8     C9 74 02 F6 | 	mov	arg01, objptr
0bbfc     14 77 02 F6 | 	mov	arg02, ptr__update_off_2015_
0bc00     34 A0 B1 FD | 	call	#__system___make_methodptr
0bc04     47 75 02 F6 | 	mov	arg01, local02
0bc08     38 75 06 F1 | 	add	arg01, #312
0bc0c     3A 35 62 FC | 	wrlong	result1, arg01
0bc10     40 8D 06 F1 | 	add	local01, #320
0bc14     46 75 02 F6 | 	mov	arg01, local01
0bc18     49 77 02 F6 | 	mov	arg02, local04
0bc1c     28 CF BF FD | 	call	#_module_init
0bc20     46 75 02 F6 | 	mov	arg01, local01
0bc24     47 77 02 F6 | 	mov	arg02, local02
0bc28     C0 D3 BF FD | 	call	#_module_copy
0bc2c     56 01 00 FF 
0bc30     7B D6 05 F1 | 	add	ptr__dat__, ##175227
0bc34     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bc38     56 01 00 FF 
0bc3c     7B D6 85 F1 | 	sub	ptr__dat__, ##175227
0bc40     46 75 02 F6 | 	mov	arg01, local01
0bc44     9C D4 BF FD | 	call	#_module_set_text
0bc48     46 75 02 F6 | 	mov	arg01, local01
0bc4c     CC 74 06 F1 | 	add	arg01, #204
0bc50     3A 91 02 FB | 	rdlong	local03, arg01
0bc54     CC 74 86 F1 | 	sub	arg01, #204
0bc58     01 90 0E F2 | 	cmp	local03, #1 wz
0bc5c                 | '         return;
0bc5c     DC 74 06 A1 |  if_e	add	arg01, #220
0bc60     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bc64     46 75 02 F6 | 	mov	arg01, local01
0bc68     CC 74 06 F1 | 	add	arg01, #204
0bc6c     3A 91 02 FB | 	rdlong	local03, arg01
0bc70     CC 74 86 F1 | 	sub	arg01, #204
0bc74     01 90 0E F2 | 	cmp	local03, #1 wz
0bc78                 | '         return;
0bc78     E0 74 06 A1 |  if_e	add	arg01, #224
0bc7c     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bc80     46 75 02 F6 | 	mov	arg01, local01
0bc84     00 76 06 F6 | 	mov	arg02, #0
0bc88     03 78 06 F6 | 	mov	arg03, #3
0bc8c     C4 D7 BF FD | 	call	#_module_add_border
0bc90     46 75 02 F6 | 	mov	arg01, local01
0bc94     03 76 06 F6 | 	mov	arg02, #3
0bc98     E0 DA BF FD | 	call	#_module_fit_space_even
0bc9c     46 75 02 F6 | 	mov	arg01, local01
0bca0     03 76 06 F6 | 	mov	arg02, #3
0bca4     1C DB BF FD | 	call	#_module_fit_space_even_verticle
0bca8     46 75 02 F6 | 	mov	arg01, local01
0bcac     02 76 06 F6 | 	mov	arg02, #2
0bcb0     03 78 06 F6 | 	mov	arg03, #3
0bcb4     7C D9 BF FD | 	call	#_module_align_space_even
0bcb8     C9 74 02 F6 | 	mov	arg01, objptr
0bcbc     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0bcc0     74 9F B1 FD | 	call	#__system___make_methodptr
0bcc4     46 75 02 F6 | 	mov	arg01, local01
0bcc8     01 78 06 F6 | 	mov	arg03, #1
0bccc     34 75 06 F1 | 	add	arg01, #308
0bcd0     3A 35 62 FC | 	wrlong	result1, arg01
0bcd4     10 74 86 F1 | 	sub	arg01, #16
0bcd8     3A 03 68 FC | 	wrlong	#1, arg01
0bcdc     C9 74 02 F6 | 	mov	arg01, objptr
0bce0     11 77 02 F6 | 	mov	arg02, ptr__update_incremental_2020_
0bce4     50 9F B1 FD | 	call	#__system___make_methodptr
0bce8     46 75 02 F6 | 	mov	arg01, local01
0bcec     38 75 06 F1 | 	add	arg01, #312
0bcf0     3A 35 62 FC | 	wrlong	result1, arg01
0bcf4     40 8D 06 F1 | 	add	local01, #320
0bcf8     46 75 02 F6 | 	mov	arg01, local01
0bcfc     49 77 02 F6 | 	mov	arg02, local04
0bd00     44 CE BF FD | 	call	#_module_init
0bd04     46 75 02 F6 | 	mov	arg01, local01
0bd08     47 77 02 F6 | 	mov	arg02, local02
0bd0c     DC D2 BF FD | 	call	#_module_copy
0bd10     56 01 00 FF 
0bd14     80 D6 05 F1 | 	add	ptr__dat__, ##175232
0bd18     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bd1c     56 01 00 FF 
0bd20     80 D6 85 F1 | 	sub	ptr__dat__, ##175232
0bd24     46 75 02 F6 | 	mov	arg01, local01
0bd28     B8 D3 BF FD | 	call	#_module_set_text
0bd2c     46 75 02 F6 | 	mov	arg01, local01
0bd30     CC 74 06 F1 | 	add	arg01, #204
0bd34     3A 91 02 FB | 	rdlong	local03, arg01
0bd38     CC 74 86 F1 | 	sub	arg01, #204
0bd3c     01 90 0E F2 | 	cmp	local03, #1 wz
0bd40                 | '         return;
0bd40     DC 74 06 A1 |  if_e	add	arg01, #220
0bd44     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bd48     46 75 02 F6 | 	mov	arg01, local01
0bd4c     CC 74 06 F1 | 	add	arg01, #204
0bd50     3A 91 02 FB | 	rdlong	local03, arg01
0bd54     CC 74 86 F1 | 	sub	arg01, #204
0bd58     01 90 0E F2 | 	cmp	local03, #1 wz
0bd5c                 | '         return;
0bd5c     E0 74 06 A1 |  if_e	add	arg01, #224
0bd60     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bd64     46 75 02 F6 | 	mov	arg01, local01
0bd68     00 76 06 F6 | 	mov	arg02, #0
0bd6c     03 78 06 F6 | 	mov	arg03, #3
0bd70     E0 D6 BF FD | 	call	#_module_add_border
0bd74     46 75 02 F6 | 	mov	arg01, local01
0bd78     03 76 06 F6 | 	mov	arg02, #3
0bd7c     FC D9 BF FD | 	call	#_module_fit_space_even
0bd80     46 75 02 F6 | 	mov	arg01, local01
0bd84     03 76 06 F6 | 	mov	arg02, #3
0bd88     38 DA BF FD | 	call	#_module_fit_space_even_verticle
0bd8c     46 75 02 F6 | 	mov	arg01, local01
0bd90     03 76 06 F6 | 	mov	arg02, #3
0bd94     03 78 06 F6 | 	mov	arg03, #3
0bd98     98 D8 BF FD | 	call	#_module_align_space_even
0bd9c     C9 74 02 F6 | 	mov	arg01, objptr
0bda0     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0bda4     90 9E B1 FD | 	call	#__system___make_methodptr
0bda8     46 75 02 F6 | 	mov	arg01, local01
0bdac     02 78 06 F6 | 	mov	arg03, #2
0bdb0     34 75 06 F1 | 	add	arg01, #308
0bdb4     3A 35 62 FC | 	wrlong	result1, arg01
0bdb8     10 74 86 F1 | 	sub	arg01, #16
0bdbc     3A 05 68 FC | 	wrlong	#2, arg01
0bdc0     C9 74 02 F6 | 	mov	arg01, objptr
0bdc4     0D 77 02 F6 | 	mov	arg02, ptr__update_continuous_2025_
0bdc8     6C 9E B1 FD | 	call	#__system___make_methodptr
0bdcc     46 75 02 F6 | 	mov	arg01, local01
0bdd0     38 75 06 F1 | 	add	arg01, #312
0bdd4     3A 35 62 FC | 	wrlong	result1, arg01
0bdd8     40 8D 06 F1 | 	add	local01, #320
0bddc     46 95 02 F6 | 	mov	local05, local01
0bde0     4A 75 02 F6 | 	mov	arg01, local05
0bde4     49 77 02 F6 | 	mov	arg02, local04
0bde8     5C CD BF FD | 	call	#_module_init
0bdec     4A 75 02 F6 | 	mov	arg01, local05
0bdf0     47 77 02 F6 | 	mov	arg02, local02
0bdf4     F4 D1 BF FD | 	call	#_module_copy
0bdf8     56 01 00 FF 
0bdfc     85 D6 05 F1 | 	add	ptr__dat__, ##175237
0be00     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0be04     56 01 00 FF 
0be08     85 D6 85 F1 | 	sub	ptr__dat__, ##175237
0be0c     4A 75 02 F6 | 	mov	arg01, local05
0be10     D0 D2 BF FD | 	call	#_module_set_text
0be14     4A 75 02 F6 | 	mov	arg01, local05
0be18     CC 74 06 F1 | 	add	arg01, #204
0be1c     3A 91 02 FB | 	rdlong	local03, arg01
0be20     CC 74 86 F1 | 	sub	arg01, #204
0be24     01 90 0E F2 | 	cmp	local03, #1 wz
0be28                 | '         return;
0be28     DC 74 06 A1 |  if_e	add	arg01, #220
0be2c     3A 05 68 AC |  if_e	wrlong	#2, arg01
0be30     4A 75 02 F6 | 	mov	arg01, local05
0be34     CC 74 06 F1 | 	add	arg01, #204
0be38     3A 91 02 FB | 	rdlong	local03, arg01
0be3c     CC 74 86 F1 | 	sub	arg01, #204
0be40     01 90 0E F2 | 	cmp	local03, #1 wz
0be44                 | '         return;
0be44     E0 74 06 A1 |  if_e	add	arg01, #224
0be48     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0be4c     4A 75 02 F6 | 	mov	arg01, local05
0be50     00 76 06 F6 | 	mov	arg02, #0
0be54     03 78 06 F6 | 	mov	arg03, #3
0be58     F8 D5 BF FD | 	call	#_module_add_border
0be5c     4A 75 02 F6 | 	mov	arg01, local05
0be60     03 76 06 F6 | 	mov	arg02, #3
0be64     14 D9 BF FD | 	call	#_module_fit_space_even
0be68     4A 75 02 F6 | 	mov	arg01, local05
0be6c     03 76 06 F6 | 	mov	arg02, #3
0be70     50 D9 BF FD | 	call	#_module_fit_space_even_verticle
0be74     4A 75 02 F6 | 	mov	arg01, local05
0be78     01 76 06 F6 | 	mov	arg02, #1
0be7c     03 78 06 F6 | 	mov	arg03, #3
0be80     B0 D7 BF FD | 	call	#_module_align_space_even
0be84     4A 75 02 F6 | 	mov	arg01, local05
0be88     47 77 02 F6 | 	mov	arg02, local02
0be8c     5C D8 BF FD | 	call	#_module_align_below
0be90     C9 74 02 F6 | 	mov	arg01, objptr
0be94     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0be98     9C 9D B1 FD | 	call	#__system___make_methodptr
0be9c     4A 75 02 F6 | 	mov	arg01, local05
0bea0     03 78 06 F6 | 	mov	arg03, #3
0bea4     34 75 06 F1 | 	add	arg01, #308
0bea8     3A 35 62 FC | 	wrlong	result1, arg01
0beac     10 74 86 F1 | 	sub	arg01, #16
0beb0     3A 07 68 FC | 	wrlong	#3, arg01
0beb4     C9 74 02 F6 | 	mov	arg01, objptr
0beb8     15 77 02 F6 | 	mov	arg02, ptr__update_positional_2030_
0bebc     78 9D B1 FD | 	call	#__system___make_methodptr
0bec0     4A 75 02 F6 | 	mov	arg01, local05
0bec4     38 75 06 F1 | 	add	arg01, #312
0bec8     3A 35 62 FC | 	wrlong	result1, arg01
0becc     40 8D 06 F1 | 	add	local01, #320
0bed0     46 91 02 F6 | 	mov	local03, local01
0bed4     48 75 02 F6 | 	mov	arg01, local03
0bed8     49 77 02 F6 | 	mov	arg02, local04
0bedc     68 CC BF FD | 	call	#_module_init
0bee0     48 75 02 F6 | 	mov	arg01, local03
0bee4     4A 77 02 F6 | 	mov	arg02, local05
0bee8     00 D1 BF FD | 	call	#_module_copy
0beec     56 01 00 FF 
0bef0     8A D6 05 F1 | 	add	ptr__dat__, ##175242
0bef4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bef8     56 01 00 FF 
0befc     8A D6 85 F1 | 	sub	ptr__dat__, ##175242
0bf00     48 75 02 F6 | 	mov	arg01, local03
0bf04     DC D1 BF FD | 	call	#_module_set_text
0bf08     48 75 02 F6 | 	mov	arg01, local03
0bf0c     CC 74 06 F1 | 	add	arg01, #204
0bf10     3A 35 02 FB | 	rdlong	result1, arg01
0bf14     CC 74 86 F1 | 	sub	arg01, #204
0bf18     01 34 0E F2 | 	cmp	result1, #1 wz
0bf1c                 | '         return;
0bf1c     DC 74 06 A1 |  if_e	add	arg01, #220
0bf20     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bf24     48 75 02 F6 | 	mov	arg01, local03
0bf28     CC 74 06 F1 | 	add	arg01, #204
0bf2c     3A 77 02 FB | 	rdlong	arg02, arg01
0bf30     CC 74 86 F1 | 	sub	arg01, #204
0bf34     01 76 0E F2 | 	cmp	arg02, #1 wz
0bf38                 | '         return;
0bf38     E0 74 06 A1 |  if_e	add	arg01, #224
0bf3c     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bf40     48 75 02 F6 | 	mov	arg01, local03
0bf44     00 76 06 F6 | 	mov	arg02, #0
0bf48     03 78 06 F6 | 	mov	arg03, #3
0bf4c     04 D5 BF FD | 	call	#_module_add_border
0bf50     48 75 02 F6 | 	mov	arg01, local03
0bf54     03 76 06 F6 | 	mov	arg02, #3
0bf58     20 D8 BF FD | 	call	#_module_fit_space_even
0bf5c     48 75 02 F6 | 	mov	arg01, local03
0bf60     03 76 06 F6 | 	mov	arg02, #3
0bf64     5C D8 BF FD | 	call	#_module_fit_space_even_verticle
0bf68     48 75 02 F6 | 	mov	arg01, local03
0bf6c     02 76 06 F6 | 	mov	arg02, #2
0bf70     03 78 06 F6 | 	mov	arg03, #3
0bf74     BC D6 BF FD | 	call	#_module_align_space_even
0bf78     C9 74 02 F6 | 	mov	arg01, objptr
0bf7c     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0bf80     B4 9C B1 FD | 	call	#__system___make_methodptr
0bf84     48 75 02 F6 | 	mov	arg01, local03
0bf88     04 78 06 F6 | 	mov	arg03, #4
0bf8c     34 75 06 F1 | 	add	arg01, #308
0bf90     3A 35 62 FC | 	wrlong	result1, arg01
0bf94     10 74 86 F1 | 	sub	arg01, #16
0bf98     3A 09 68 FC | 	wrlong	#4, arg01
0bf9c     C9 74 02 F6 | 	mov	arg01, objptr
0bfa0     10 77 02 F6 | 	mov	arg02, ptr__update_home_2035_
0bfa4     90 9C B1 FD | 	call	#__system___make_methodptr
0bfa8     48 75 02 F6 | 	mov	arg01, local03
0bfac     38 75 06 F1 | 	add	arg01, #312
0bfb0     3A 35 62 FC | 	wrlong	result1, arg01
0bfb4     40 8D 06 F1 | 	add	local01, #320
0bfb8     46 75 02 F6 | 	mov	arg01, local01
0bfbc     49 77 02 F6 | 	mov	arg02, local04
0bfc0     84 CB BF FD | 	call	#_module_init
0bfc4     46 75 02 F6 | 	mov	arg01, local01
0bfc8     48 77 02 F6 | 	mov	arg02, local03
0bfcc     1C D0 BF FD | 	call	#_module_copy
0bfd0     56 01 00 FF 
0bfd4     8F D6 05 F1 | 	add	ptr__dat__, ##175247
0bfd8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bfdc     56 01 00 FF 
0bfe0     8F D6 85 F1 | 	sub	ptr__dat__, ##175247
0bfe4     46 75 02 F6 | 	mov	arg01, local01
0bfe8     F8 D0 BF FD | 	call	#_module_set_text
0bfec     46 75 02 F6 | 	mov	arg01, local01
0bff0     CC 74 06 F1 | 	add	arg01, #204
0bff4     3A 91 02 FB | 	rdlong	local03, arg01
0bff8     CC 74 86 F1 | 	sub	arg01, #204
0bffc     01 90 0E F2 | 	cmp	local03, #1 wz
0c000                 | '         return;
0c000     DC 74 06 A1 |  if_e	add	arg01, #220
0c004     3A 05 68 AC |  if_e	wrlong	#2, arg01
0c008     46 75 02 F6 | 	mov	arg01, local01
0c00c     CC 74 06 F1 | 	add	arg01, #204
0c010     3A 91 02 FB | 	rdlong	local03, arg01
0c014     CC 74 86 F1 | 	sub	arg01, #204
0c018     01 90 0E F2 | 	cmp	local03, #1 wz
0c01c                 | '         return;
0c01c     E0 74 06 A1 |  if_e	add	arg01, #224
0c020     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0c024     46 75 02 F6 | 	mov	arg01, local01
0c028     00 76 06 F6 | 	mov	arg02, #0
0c02c     03 78 06 F6 | 	mov	arg03, #3
0c030     20 D4 BF FD | 	call	#_module_add_border
0c034     46 75 02 F6 | 	mov	arg01, local01
0c038     03 76 06 F6 | 	mov	arg02, #3
0c03c     3C D7 BF FD | 	call	#_module_fit_space_even
0c040     46 75 02 F6 | 	mov	arg01, local01
0c044     03 76 06 F6 | 	mov	arg02, #3
0c048     78 D7 BF FD | 	call	#_module_fit_space_even_verticle
0c04c     46 75 02 F6 | 	mov	arg01, local01
0c050     03 76 06 F6 | 	mov	arg02, #3
0c054     03 78 06 F6 | 	mov	arg03, #3
0c058     D8 D5 BF FD | 	call	#_module_align_space_even
0c05c     C9 74 02 F6 | 	mov	arg01, objptr
0c060     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0c064     D0 9B B1 FD | 	call	#__system___make_methodptr
0c068     46 75 02 F6 | 	mov	arg01, local01
0c06c     06 78 06 F6 | 	mov	arg03, #6
0c070     34 75 06 F1 | 	add	arg01, #308
0c074     3A 35 62 FC | 	wrlong	result1, arg01
0c078     10 74 86 F1 | 	sub	arg01, #16
0c07c     3A 0D 68 FC | 	wrlong	#6, arg01
0c080     C9 74 02 F6 | 	mov	arg01, objptr
0c084     0E 77 02 F6 | 	mov	arg02, ptr__update_force_2045_
0c088     AC 9B B1 FD | 	call	#__system___make_methodptr
0c08c     46 75 02 F6 | 	mov	arg01, local01
0c090     38 75 06 F1 | 	add	arg01, #312
0c094     3A 35 62 FC | 	wrlong	result1, arg01
0c098     40 8D 06 F1 | 	add	local01, #320
0c09c     46 75 02 F6 | 	mov	arg01, local01
0c0a0     49 77 02 F6 | 	mov	arg02, local04
0c0a4     A0 CA BF FD | 	call	#_module_init
0c0a8     46 75 02 F6 | 	mov	arg01, local01
0c0ac     47 77 02 F6 | 	mov	arg02, local02
0c0b0     38 CF BF FD | 	call	#_module_copy
0c0b4     56 01 00 FF 
0c0b8     94 D6 05 F1 | 	add	ptr__dat__, ##175252
0c0bc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0c0c0     56 01 00 FF 
0c0c4     94 D6 85 F1 | 	sub	ptr__dat__, ##175252
0c0c8     46 75 02 F6 | 	mov	arg01, local01
0c0cc     14 D0 BF FD | 	call	#_module_set_text
0c0d0     46 75 02 F6 | 	mov	arg01, local01
0c0d4     CC 74 06 F1 | 	add	arg01, #204
0c0d8     3A 93 02 FB | 	rdlong	local04, arg01
0c0dc     CC 74 86 F1 | 	sub	arg01, #204
0c0e0     01 92 0E F2 | 	cmp	local04, #1 wz
0c0e4                 | '         return;
0c0e4     DC 74 06 A1 |  if_e	add	arg01, #220
0c0e8     3A 05 68 AC |  if_e	wrlong	#2, arg01
0c0ec     46 75 02 F6 | 	mov	arg01, local01
0c0f0     CC 74 06 F1 | 	add	arg01, #204
0c0f4     3A 93 02 FB | 	rdlong	local04, arg01
0c0f8     CC 74 86 F1 | 	sub	arg01, #204
0c0fc     01 92 0E F2 | 	cmp	local04, #1 wz
0c100                 | '         return;
0c100     E0 74 06 A1 |  if_e	add	arg01, #224
0c104     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0c108     46 75 02 F6 | 	mov	arg01, local01
0c10c     00 76 06 F6 | 	mov	arg02, #0
0c110     03 78 06 F6 | 	mov	arg03, #3
0c114     3C D3 BF FD | 	call	#_module_add_border
0c118     46 75 02 F6 | 	mov	arg01, local01
0c11c     03 76 06 F6 | 	mov	arg02, #3
0c120     58 D6 BF FD | 	call	#_module_fit_space_even
0c124     46 75 02 F6 | 	mov	arg01, local01
0c128     03 76 06 F6 | 	mov	arg02, #3
0c12c     94 D6 BF FD | 	call	#_module_fit_space_even_verticle
0c130     46 75 02 F6 | 	mov	arg01, local01
0c134     02 76 06 F6 | 	mov	arg02, #2
0c138     03 78 06 F6 | 	mov	arg03, #3
0c13c     F4 D4 BF FD | 	call	#_module_align_space_even
0c140     46 75 02 F6 | 	mov	arg01, local01
0c144     4A 77 02 F6 | 	mov	arg02, local05
0c148     A0 D5 BF FD | 	call	#_module_align_below
0c14c     C9 74 02 F6 | 	mov	arg01, objptr
0c150     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_2006_
0c154     E0 9A B1 FD | 	call	#__system___make_methodptr
0c158     46 75 02 F6 | 	mov	arg01, local01
0c15c     05 78 06 F6 | 	mov	arg03, #5
0c160     34 75 06 F1 | 	add	arg01, #308
0c164     3A 35 62 FC | 	wrlong	result1, arg01
0c168     10 74 86 F1 | 	sub	arg01, #16
0c16c     3A 0B 68 FC | 	wrlong	#5, arg01
0c170     C9 74 02 F6 | 	mov	arg01, objptr
0c174     12 77 02 F6 | 	mov	arg02, ptr__update_length_2040_
0c178     BC 9A B1 FD | 	call	#__system___make_methodptr
0c17c     38 8D 06 F1 | 	add	local01, #312
0c180     46 35 62 FC | 	wrlong	result1, local01
0c184     A8 F0 03 F6 | 	mov	ptra, fp
0c188     B3 00 A0 FD | 	call	#popregs_
0c18c                 | _function_window_init_ret
0c18c     2D 00 64 FD | 	ret
0c190                 | 
0c190                 | _module_set_graph
0c190     04 4C 05 F6 | 	mov	COUNT_, #4
0c194     A9 00 A0 FD | 	call	#pushregs_
0c198     3A 8D 02 F6 | 	mov	local01, arg01
0c19c     3B 8F 02 F6 | 	mov	local02, arg02
0c1a0     3C 91 02 F6 | 	mov	local03, arg03
0c1a4     3D 93 02 F6 | 	mov	local04, arg04
0c1a8     CC 8C 06 F1 | 	add	local01, #204
0c1ac     46 0D 68 FC | 	wrlong	#6, local01
0c1b0     C9 74 02 F6 | 	mov	arg01, objptr
0c1b4     07 77 02 F6 | 	mov	arg02, ptr__module_graph_draw_2071_
0c1b8     7C 9A B1 FD | 	call	#__system___make_methodptr
0c1bc     70 8C 06 F1 | 	add	local01, #112
0c1c0     46 35 62 FC | 	wrlong	result1, local01
0c1c4     6C 8C 86 F1 | 	sub	local01, #108
0c1c8     46 8F 62 FC | 	wrlong	local02, local01
0c1cc     D0 8C 86 F1 | 	sub	local01, #208
0c1d0     6A 8E 06 F1 | 	add	local02, #106
0c1d4     47 03 48 FC | 	wrbyte	#1, local02
0c1d8     1E 8E 86 F1 | 	sub	local02, #30
0c1dc     47 75 02 F6 | 	mov	arg01, local02
0c1e0     48 77 02 F6 | 	mov	arg02, local03
0c1e4     14 78 06 F6 | 	mov	arg03, #20
0c1e8     00 9E BF FD | 	call	#_strncpy
0c1ec     14 8E 06 F1 | 	add	local02, #20
0c1f0     47 75 02 F6 | 	mov	arg01, local02
0c1f4     49 77 02 F6 | 	mov	arg02, local04
0c1f8     0A 78 06 F6 | 	mov	arg03, #10
0c1fc     EC 9D BF FD | 	call	#_strncpy
0c200     0C 8E 06 F1 | 	add	local02, #12
0c204     47 75 02 F6 | 	mov	arg01, local02
0c208     46 77 02 F6 | 	mov	arg02, local01
0c20c     38 C9 BF FD | 	call	#_module_init
0c210     47 75 02 F6 | 	mov	arg01, local02
0c214     0A 78 06 F6 | 	mov	arg03, #10
0c218     00 75 06 F1 | 	add	arg01, #256
0c21c     3A 15 68 FC | 	wrlong	#10, arg01
0c220     04 74 06 F1 | 	add	arg01, #4
0c224     3A 15 68 FC | 	wrlong	#10, arg01
0c228     47 75 02 F6 | 	mov	arg01, local02
0c22c     20 8E 86 F1 | 	sub	local02, #32
0c230     47 77 02 F6 | 	mov	arg02, local02
0c234     AC CE BF FD | 	call	#_module_set_text
0c238     20 8E 06 F1 | 	add	local02, #32
0c23c     47 75 02 F6 | 	mov	arg01, local02
0c240     02 76 06 F6 | 	mov	arg02, #2
0c244     DC CF BF FD | 	call	#_module_text_font
0c248     40 8F 06 F1 | 	add	local02, #320
0c24c     47 75 02 F6 | 	mov	arg01, local02
0c250     EC CE BF FD | 	call	#_module_text_fit
0c254     40 8F 86 F1 | 	sub	local02, #320
0c258     47 75 02 F6 | 	mov	arg01, local02
0c25c     47 93 02 FB | 	rdlong	local04, local02
0c260     10 93 06 F1 | 	add	local04, #272
0c264     49 79 02 FB | 	rdlong	arg03, local04
0c268     10 75 06 F1 | 	add	arg01, #272
0c26c     7F 00 80 FF 
0c270     3A FF 6B FC | 	wrlong	##65535, arg01
0c274     04 74 86 F1 | 	sub	arg01, #4
0c278     3A 79 62 FC | 	wrlong	arg03, arg01
0c27c     47 75 02 F6 | 	mov	arg01, local02
0c280     10 D2 BF FD | 	call	#_module_align_inner_top
0c284     47 75 02 F6 | 	mov	arg01, local02
0c288     01 76 06 F6 | 	mov	arg02, #1
0c28c     02 78 06 F6 | 	mov	arg03, #2
0c290     2C D3 BF FD | 	call	#_module_align_center_sector
0c294     47 75 02 F6 | 	mov	arg01, local02
0c298     CC 74 06 F1 | 	add	arg01, #204
0c29c     3A 93 02 FB | 	rdlong	local04, arg01
0c2a0     CC 74 86 F1 | 	sub	arg01, #204
0c2a4     01 92 0E F2 | 	cmp	local04, #1 wz
0c2a8                 | '         return;
0c2a8     D8 74 06 A1 |  if_e	add	arg01, #216
0c2ac     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0c2b0     40 8F 06 F1 | 	add	local02, #320
0c2b4     47 75 02 F6 | 	mov	arg01, local02
0c2b8     46 77 02 F6 | 	mov	arg02, local01
0c2bc     88 C8 BF FD | 	call	#_module_init
0c2c0     03 00 00 FF 
0c2c4     80 8F 06 F1 | 	add	local02, ##1920
0c2c8     47 75 02 F6 | 	mov	arg01, local02
0c2cc     4F 01 00 FF 
0c2d0     68 77 06 F6 | 	mov	arg02, ##@LR__2001
0c2d4     04 00 00 FF 
0c2d8     20 8F 86 F1 | 	sub	local02, ##2336
0c2dc     47 93 02 FB | 	rdlong	local04, local02
0c2e0     F8 79 02 F6 | 	mov	arg03, ptra
0c2e4     61 93 66 FC | 	wrlong	local04, ptra++
0c2e8     A8 5A BF FD | 	call	#_sprintf
0c2ec     04 F0 87 F1 | 	sub	ptra, #4
0c2f0     A0 8F 06 F1 | 	add	local02, #416
0c2f4     47 75 02 F6 | 	mov	arg01, local02
0c2f8     03 78 06 F6 | 	mov	arg03, #3
0c2fc     00 75 06 F1 | 	add	arg01, #256
0c300     3A 07 68 FC | 	wrlong	#3, arg01
0c304     04 74 06 F1 | 	add	arg01, #4
0c308     3A 07 68 FC | 	wrlong	#3, arg01
0c30c     47 75 02 F6 | 	mov	arg01, local02
0c310     03 00 00 FF 
0c314     80 8F 06 F1 | 	add	local02, ##1920
0c318     47 77 02 F6 | 	mov	arg02, local02
0c31c     C4 CD BF FD | 	call	#_module_set_text
0c320     03 00 00 FF 
0c324     80 8F 86 F1 | 	sub	local02, ##1920
0c328     47 75 02 F6 | 	mov	arg01, local02
0c32c     00 76 06 F6 | 	mov	arg02, #0
0c330     F0 CE BF FD | 	call	#_module_text_font
0c334     47 75 02 F6 | 	mov	arg01, local02
0c338     04 CE BF FD | 	call	#_module_text_fit
0c33c     47 75 02 F6 | 	mov	arg01, local02
0c340     47 93 02 FB | 	rdlong	local04, local02
0c344     10 93 06 F1 | 	add	local04, #272
0c348     49 79 02 FB | 	rdlong	arg03, local04
0c34c     10 75 06 F1 | 	add	arg01, #272
0c350     7F 00 80 FF 
0c354     3A FF 6B FC | 	wrlong	##65535, arg01
0c358     04 74 86 F1 | 	sub	arg01, #4
0c35c     3A 79 62 FC | 	wrlong	arg03, arg01
0c360     47 75 02 F6 | 	mov	arg01, local02
0c364     C4 D1 BF FD | 	call	#_module_align_inner_bottom
0c368     47 75 02 F6 | 	mov	arg01, local02
0c36c     4C D1 BF FD | 	call	#_module_align_inner_left
0c370     47 75 02 F6 | 	mov	arg01, local02
0c374     CC 74 06 F1 | 	add	arg01, #204
0c378     3A 93 02 FB | 	rdlong	local04, arg01
0c37c     CC 74 86 F1 | 	sub	arg01, #204
0c380     01 92 0E F2 | 	cmp	local04, #1 wz
0c384                 | '         return;
0c384     DC 74 06 A1 |  if_e	add	arg01, #220
0c388     3A 03 68 AC |  if_e	wrlong	#1, arg01
0c38c     03 00 00 FF 
0c390     8C 8F 06 F1 | 	add	local02, ##1932
0c394     47 75 02 F6 | 	mov	arg01, local02
0c398     4F 01 00 FF 
0c39c     6D 77 06 F6 | 	mov	arg02, ##@LR__2002
0c3a0     04 00 00 FF 
0c3a4     30 8F 86 F1 | 	sub	local02, ##2352
0c3a8     47 93 02 FB | 	rdlong	local04, local02
0c3ac     F8 79 02 F6 | 	mov	arg03, ptra
0c3b0     61 93 66 FC | 	wrlong	local04, ptra++
0c3b4     DC 59 BF FD | 	call	#_sprintf
0c3b8     04 F0 87 F1 | 	sub	ptra, #4
0c3bc     01 00 00 FF 
0c3c0     E4 8E 06 F1 | 	add	local02, ##740
0c3c4     47 75 02 F6 | 	mov	arg01, local02
0c3c8     46 77 02 F6 | 	mov	arg02, local01
0c3cc     78 C7 BF FD | 	call	#_module_init
0c3d0     47 75 02 F6 | 	mov	arg01, local02
0c3d4     03 78 06 F6 | 	mov	arg03, #3
0c3d8     00 75 06 F1 | 	add	arg01, #256
0c3dc     3A 07 68 FC | 	wrlong	#3, arg01
0c3e0     04 74 06 F1 | 	add	arg01, #4
0c3e4     3A 07 68 FC | 	wrlong	#3, arg01
0c3e8     47 75 02 F6 | 	mov	arg01, local02
0c3ec     03 00 00 FF 
0c3f0     4C 8E 06 F1 | 	add	local02, ##1612
0c3f4     47 77 02 F6 | 	mov	arg02, local02
0c3f8     E8 CC BF FD | 	call	#_module_set_text
0c3fc     03 00 00 FF 
0c400     4C 8E 86 F1 | 	sub	local02, ##1612
0c404     47 75 02 F6 | 	mov	arg01, local02
0c408     00 76 06 F6 | 	mov	arg02, #0
0c40c     14 CE BF FD | 	call	#_module_text_font
0c410     47 75 02 F6 | 	mov	arg01, local02
0c414     28 CD BF FD | 	call	#_module_text_fit
0c418     47 75 02 F6 | 	mov	arg01, local02
0c41c     9C D0 BF FD | 	call	#_module_align_inner_left
0c420     47 75 02 F6 | 	mov	arg01, local02
0c424     CC 74 06 F1 | 	add	arg01, #204
0c428     3A 93 02 FB | 	rdlong	local04, arg01
0c42c     CC 74 86 F1 | 	sub	arg01, #204
0c430     01 92 0E F2 | 	cmp	local04, #1 wz
0c434                 | '         return;
0c434     DC 74 06 A1 |  if_e	add	arg01, #220
0c438     3A 03 68 AC |  if_e	wrlong	#1, arg01
0c43c     47 75 02 F6 | 	mov	arg01, local02
0c440     47 93 02 FB | 	rdlong	local04, local02
0c444     10 93 06 F1 | 	add	local04, #272
0c448     49 79 02 FB | 	rdlong	arg03, local04
0c44c     10 75 06 F1 | 	add	arg01, #272
0c450     7F 00 80 FF 
0c454     3A FF 6B FC | 	wrlong	##65535, arg01
0c458     04 74 86 F1 | 	sub	arg01, #4
0c45c     3A 79 62 FC | 	wrlong	arg03, arg01
0c460     47 75 02 F6 | 	mov	arg01, local02
0c464     01 00 00 FF 
0c468     80 8E 86 F1 | 	sub	local02, ##640
0c46c     47 77 02 F6 | 	mov	arg02, local02
0c470     78 D2 BF FD | 	call	#_module_align_below
0c474     01 00 00 FF 
0c478     C0 8F 06 F1 | 	add	local02, ##960
0c47c     47 75 02 F6 | 	mov	arg01, local02
0c480     46 77 02 F6 | 	mov	arg02, local01
0c484     C0 C6 BF FD | 	call	#_module_init
0c488     47 75 02 F6 | 	mov	arg01, local02
0c48c     01 00 00 FF 
0c490     C0 8F 86 F1 | 	sub	local02, ##960
0c494     47 77 02 F6 | 	mov	arg02, local02
0c498     50 D2 BF FD | 	call	#_module_align_below
0c49c     01 00 00 FF 
0c4a0     C0 8F 06 F1 | 	add	local02, ##960
0c4a4     47 75 02 F6 | 	mov	arg01, local02
0c4a8     01 00 00 FF 
0c4ac     C0 8F 86 F1 | 	sub	local02, ##960
0c4b0     47 77 02 F6 | 	mov	arg02, local02
0c4b4     8C D3 BF FD | 	call	#_module_fit_below
0c4b8     01 00 00 FF 
0c4bc     C0 8F 06 F1 | 	add	local02, ##960
0c4c0     47 75 02 F6 | 	mov	arg01, local02
0c4c4     01 00 00 FF 
0c4c8     80 8E 86 F1 | 	sub	local02, ##640
0c4cc     47 77 02 F6 | 	mov	arg02, local02
0c4d0     F0 D3 BF FD | 	call	#_module_fit_right
0c4d4     01 00 00 FF 
0c4d8     80 8E 06 F1 | 	add	local02, ##640
0c4dc     47 75 02 F6 | 	mov	arg01, local02
0c4e0     01 00 00 FF 
0c4e4     80 8E 86 F1 | 	sub	local02, ##640
0c4e8     47 77 02 F6 | 	mov	arg02, local02
0c4ec     28 D2 BF FD | 	call	#_module_align_right
0c4f0     01 00 00 FF 
0c4f4     80 8E 06 F1 | 	add	local02, ##640
0c4f8     47 75 02 F6 | 	mov	arg01, local02
0c4fc     47 93 02 FB | 	rdlong	local04, local02
0c500     49 91 02 F6 | 	mov	local03, local04
0c504     10 91 06 F1 | 	add	local03, #272
0c508     48 77 02 FB | 	rdlong	arg02, local03
0c50c     0C 93 06 F1 | 	add	local04, #268
0c510     49 79 02 FB | 	rdlong	arg03, local04
0c514     10 75 06 F1 | 	add	arg01, #272
0c518     3A 77 62 FC | 	wrlong	arg02, arg01
0c51c     04 74 86 F1 | 	sub	arg01, #4
0c520     3A 79 62 FC | 	wrlong	arg03, arg01
0c524     40 8F 06 F1 | 	add	local02, #320
0c528     47 75 02 F6 | 	mov	arg01, local02
0c52c     46 77 02 F6 | 	mov	arg02, local01
0c530     14 C6 BF FD | 	call	#_module_init
0c534     47 75 02 F6 | 	mov	arg01, local02
0c538     0A 78 06 F6 | 	mov	arg03, #10
0c53c     00 75 06 F1 | 	add	arg01, #256
0c540     3A 15 68 FC | 	wrlong	#10, arg01
0c544     04 74 06 F1 | 	add	arg01, #4
0c548     3A 15 68 FC | 	wrlong	#10, arg01
0c54c     47 75 02 F6 | 	mov	arg01, local02
0c550     02 00 00 FF 
0c554     0C 8F 86 F1 | 	sub	local02, ##1292
0c558     47 77 02 F6 | 	mov	arg02, local02
0c55c     84 CB BF FD | 	call	#_module_set_text
0c560     02 00 00 FF 
0c564     0C 8F 06 F1 | 	add	local02, ##1292
0c568     47 75 02 F6 | 	mov	arg01, local02
0c56c     02 76 06 F6 | 	mov	arg02, #2
0c570     B0 CC BF FD | 	call	#_module_text_font
0c574     47 75 02 F6 | 	mov	arg01, local02
0c578     47 93 02 FB | 	rdlong	local04, local02
0c57c     10 93 06 F1 | 	add	local04, #272
0c580     49 79 02 FB | 	rdlong	arg03, local04
0c584     10 75 06 F1 | 	add	arg01, #272
0c588     7F 00 80 FF 
0c58c     3A FF 6B FC | 	wrlong	##65535, arg01
0c590     04 74 86 F1 | 	sub	arg01, #4
0c594     3A 79 62 FC | 	wrlong	arg03, arg01
0c598     47 75 02 F6 | 	mov	arg01, local02
0c59c     F4 CE BF FD | 	call	#_module_align_inner_top
0c5a0     47 75 02 F6 | 	mov	arg01, local02
0c5a4     14 CF BF FD | 	call	#_module_align_inner_left
0c5a8     40 8F 06 F1 | 	add	local02, #320
0c5ac     47 75 02 F6 | 	mov	arg01, local02
0c5b0     01 00 00 FF 
0c5b4     80 8E 86 F1 | 	sub	local02, ##640
0c5b8     47 77 02 F6 | 	mov	arg02, local02
0c5bc     88 C5 BF FD | 	call	#_module_init
0c5c0     01 00 00 FF 
0c5c4     80 8E 06 F1 | 	add	local02, ##640
0c5c8     47 75 02 F6 | 	mov	arg01, local02
0c5cc     CC 74 06 F1 | 	add	arg01, #204
0c5d0     3A 09 68 FC | 	wrlong	#4, arg01
0c5d4     24 74 06 F1 | 	add	arg01, #36
0c5d8     3A 01 68 FC | 	wrlong	#0, arg01
0c5dc     04 74 06 F1 | 	add	arg01, #4
0c5e0     3A 01 68 FC | 	wrlong	#0, arg01
0c5e4     47 75 02 F6 | 	mov	arg01, local02
0c5e8     58 D1 BF FD | 	call	#_module_fit_width
0c5ec     47 75 02 F6 | 	mov	arg01, local02
0c5f0     01 76 06 F6 | 	mov	arg02, #1
0c5f4     02 78 06 F6 | 	mov	arg03, #2
0c5f8     C4 CF BF FD | 	call	#_module_align_center_sector
0c5fc     47 75 02 F6 | 	mov	arg01, local02
0c600     70 CF BF FD | 	call	#_module_align_middle
0c604     47 75 02 F6 | 	mov	arg01, local02
0c608     0F 78 CE F9 | 	bmask	arg03, #15
0c60c     10 75 06 F1 | 	add	arg01, #272
0c610     7F 00 80 FF 
0c614     3A FF 6B FC | 	wrlong	##65535, arg01
0c618     04 74 86 F1 | 	sub	arg01, #4
0c61c     7F 00 80 FF 
0c620     3A FF 6B FC | 	wrlong	##65535, arg01
0c624     40 8F 06 F1 | 	add	local02, #320
0c628     47 75 02 F6 | 	mov	arg01, local02
0c62c     01 00 00 FF 
0c630     C0 8F 86 F1 | 	sub	local02, ##960
0c634     47 77 02 F6 | 	mov	arg02, local02
0c638     0C C5 BF FD | 	call	#_module_init
0c63c     01 00 00 FF 
0c640     C0 8F 06 F1 | 	add	local02, ##960
0c644     47 75 02 F6 | 	mov	arg01, local02
0c648     CC 74 06 F1 | 	add	arg01, #204
0c64c     3A 09 68 FC | 	wrlong	#4, arg01
0c650     24 74 06 F1 | 	add	arg01, #36
0c654     3A 01 68 FC | 	wrlong	#0, arg01
0c658     04 74 06 F1 | 	add	arg01, #4
0c65c     3A 01 68 FC | 	wrlong	#0, arg01
0c660     47 75 02 F6 | 	mov	arg01, local02
0c664     A4 D1 BF FD | 	call	#_module_fit_height
0c668     47 75 02 F6 | 	mov	arg01, local02
0c66c     4C CE BF FD | 	call	#_module_align_inner_left
0c670     47 75 02 F6 | 	mov	arg01, local02
0c674     1C CE BF FD | 	call	#_module_align_inner_top
0c678     10 8F 06 F1 | 	add	local02, #272
0c67c     7F 00 80 FF 
0c680     47 FF 6B FC | 	wrlong	##65535, local02
0c684     04 8E 86 F1 | 	sub	local02, #4
0c688     7F 00 80 FF 
0c68c     47 FF 6B FC | 	wrlong	##65535, local02
0c690     A8 F0 03 F6 | 	mov	ptra, fp
0c694     B3 00 A0 FD | 	call	#popregs_
0c698                 | _module_set_graph_ret
0c698     2D 00 64 FD | 	ret
0c69c                 | 
0c69c                 | _module_graph_insert
0c69c     03 4C 05 F6 | 	mov	COUNT_, #3
0c6a0     A9 00 A0 FD | 	call	#pushregs_
0c6a4     3B 8D 02 F6 | 	mov	local01, arg02
0c6a8     D0 74 06 F1 | 	add	arg01, #208
0c6ac     3A 8F 02 FB | 	rdlong	local02, arg01
0c6b0     08 8E 06 F1 | 	add	local02, #8
0c6b4     47 77 02 FB | 	rdlong	arg02, local02
0c6b8     08 8E 86 F1 | 	sub	local02, #8
0c6bc     46 75 02 F6 | 	mov	arg01, local01
0c6c0     01 78 66 F6 | 	neg	arg03, #1
0c6c4     B8 B7 B1 FD | 	call	#__system___float_cmp
0c6c8     01 34 56 F2 | 	cmps	result1, #1 wc
0c6cc     30 00 90 3D |  if_ae	jmp	#LR__0364
0c6d0     0C 8E 06 F1 | 	add	local02, #12
0c6d4     47 77 02 FB | 	rdlong	arg02, local02
0c6d8     0C 8E 86 F1 | 	sub	local02, #12
0c6dc     46 75 02 F6 | 	mov	arg01, local01
0c6e0     01 78 06 F6 | 	mov	arg03, #1
0c6e4     98 B7 B1 FD | 	call	#__system___float_cmp
0c6e8     00 34 56 F2 | 	cmps	result1, #0 wc
0c6ec                 | '     {
0c6ec                 | '         return;
0c6ec     47 91 02 3B |  if_ae	rdlong	local03, local02
0c6f0     04 8E 06 31 |  if_ae	add	local02, #4
0c6f4     47 91 62 3C |  if_ae	wrlong	local03, local02
0c6f8     04 8E 86 31 |  if_ae	sub	local02, #4
0c6fc     47 8D 62 3C |  if_ae	wrlong	local01, local02
0c700                 | LR__0364
0c700     A8 F0 03 F6 | 	mov	ptra, fp
0c704     B3 00 A0 FD | 	call	#popregs_
0c708                 | _module_graph_insert_ret
0c708     2D 00 64 FD | 	ret
0c70c                 | 
0c70c                 | _status_page_init
0c70c     08 4C 05 F6 | 	mov	COUNT_, #8
0c710     A9 00 A0 FD | 	call	#pushregs_
0c714     3A 8D 02 F6 | 	mov	local01, arg01
0c718     04 8C 06 F1 | 	add	local01, #4
0c71c     46 77 62 FC | 	wrlong	arg02, local01
0c720     04 8C 06 F1 | 	add	local01, #4
0c724     46 79 62 FC | 	wrlong	arg03, local01
0c728     04 8C 06 F1 | 	add	local01, #4
0c72c     46 7B 62 FC | 	wrlong	arg04, local01
0c730     04 8C 06 F1 | 	add	local01, #4
0c734     46 7D 62 FC | 	wrlong	arg05, local01
0c738     04 8C 06 F1 | 	add	local01, #4
0c73c     46 7F 62 FC | 	wrlong	arg06, local01
0c740     04 8C 06 F1 | 	add	local01, #4
0c744     46 8F 02 F6 | 	mov	local02, local01
0c748     47 75 02 F6 | 	mov	arg01, local02
0c74c     00 76 06 F6 | 	mov	arg02, #0
0c750     F4 C3 BF FD | 	call	#_module_init
0c754     40 8D 06 F1 | 	add	local01, #320
0c758     46 91 02 F6 | 	mov	local03, local01
0c75c     48 75 02 F6 | 	mov	arg01, local03
0c760     47 77 02 F6 | 	mov	arg02, local02
0c764     E0 C3 BF FD | 	call	#_module_init
0c768     48 75 02 F6 | 	mov	arg01, local03
0c76c     CC 74 06 F1 | 	add	arg01, #204
0c770     3A 0B 68 FC | 	wrlong	#5, arg01
0c774     24 74 06 F1 | 	add	arg01, #36
0c778     02 00 80 FF 
0c77c     3A 01 68 FC | 	wrlong	##1024, arg01
0c780     04 74 06 F1 | 	add	arg01, #4
0c784     01 00 80 FF 
0c788     3A B1 68 FC | 	wrlong	##600, arg01
0c78c     48 75 02 F6 | 	mov	arg01, local03
0c790     E8 74 06 F1 | 	add	arg01, #232
0c794     3A 01 68 FC | 	wrlong	#0, arg01
0c798     04 74 06 F1 | 	add	arg01, #4
0c79c     3A 01 68 FC | 	wrlong	#0, arg01
0c7a0     48 75 02 F6 | 	mov	arg01, local03
0c7a4     F8 74 06 F1 | 	add	arg01, #248
0c7a8     3A 15 68 FC | 	wrlong	#10, arg01
0c7ac     04 74 06 F1 | 	add	arg01, #4
0c7b0     3A 15 68 FC | 	wrlong	#10, arg01
0c7b4     48 75 02 F6 | 	mov	arg01, local03
0c7b8     01 00 00 FF 
0c7bc     73 78 06 F6 | 	mov	arg03, ##627
0c7c0     10 75 06 F1 | 	add	arg01, #272
0c7c4     01 00 80 FF 
0c7c8     3A E7 68 FC | 	wrlong	##627, arg01
0c7cc     04 74 86 F1 | 	sub	arg01, #4
0c7d0     01 00 80 FF 
0c7d4     3A E7 68 FC | 	wrlong	##627, arg01
0c7d8     C9 74 02 F6 | 	mov	arg01, objptr
0c7dc     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
0c7e0     54 94 B1 FD | 	call	#__system___make_methodptr
0c7e4     48 75 02 F6 | 	mov	arg01, local03
0c7e8     30 75 06 F1 | 	add	arg01, #304
0c7ec     3A 35 62 FC | 	wrlong	result1, arg01
0c7f0     40 8D 06 F1 | 	add	local01, #320
0c7f4     46 8F 02 F6 | 	mov	local02, local01
0c7f8     47 75 02 F6 | 	mov	arg01, local02
0c7fc     48 77 02 F6 | 	mov	arg02, local03
0c800     44 C3 BF FD | 	call	#_module_init
0c804     01 00 00 FF 
0c808     84 8C 86 F1 | 	sub	local01, ##644
0c80c     46 77 02 FB | 	rdlong	arg02, local01
0c810     30 76 06 F1 | 	add	arg02, #48
0c814     47 75 02 F6 | 	mov	arg01, local02
0c818     94 C8 BF FD | 	call	#_module_set_image
0c81c     47 75 02 F6 | 	mov	arg01, local02
0c820     70 CC BF FD | 	call	#_module_align_inner_top
0c824     47 75 02 F6 | 	mov	arg01, local02
0c828     B8 CC BF FD | 	call	#_module_align_inner_right
0c82c     C9 74 02 F6 | 	mov	arg01, objptr
0c830     D9 76 02 F6 | 	mov	arg02, ptr__button_navigation_0785_
0c834     00 94 B1 FD | 	call	#__system___make_methodptr
0c838     00 78 06 F6 | 	mov	arg03, #0
0c83c     34 8F 06 F1 | 	add	local02, #308
0c840     47 35 62 FC | 	wrlong	result1, local02
0c844     10 8E 86 F1 | 	sub	local02, #16
0c848     47 01 68 FC | 	wrlong	#0, local02
0c84c     01 00 00 FF 
0c850     C4 8D 06 F1 | 	add	local01, ##964
0c854     46 93 02 F6 | 	mov	local04, local01
0c858     49 75 02 F6 | 	mov	arg01, local04
0c85c     48 77 02 F6 | 	mov	arg02, local03
0c860     E4 C2 BF FD | 	call	#_module_init
0c864     49 75 02 F6 | 	mov	arg01, local04
0c868     F8 74 06 F1 | 	add	arg01, #248
0c86c     3A 11 68 FC | 	wrlong	#8, arg01
0c870     04 74 06 F1 | 	add	arg01, #4
0c874     3A 11 68 FC | 	wrlong	#8, arg01
0c878     49 75 02 F6 | 	mov	arg01, local04
0c87c     0F 76 CE F9 | 	bmask	arg02, #15
0c880     01 78 06 F6 | 	mov	arg03, #1
0c884     CC CB BF FD | 	call	#_module_add_border
0c888     49 75 02 F6 | 	mov	arg01, local04
0c88c     00 75 06 F1 | 	add	arg01, #256
0c890     3A 15 68 FC | 	wrlong	#10, arg01
0c894     04 74 06 F1 | 	add	arg01, #4
0c898     3A 15 68 FC | 	wrlong	#10, arg01
0c89c     49 75 02 F6 | 	mov	arg01, local04
0c8a0     CC 74 06 F1 | 	add	arg01, #204
0c8a4     3A 0B 68 FC | 	wrlong	#5, arg01
0c8a8     24 74 06 F1 | 	add	arg01, #36
0c8ac     3A 01 68 FC | 	wrlong	#0, arg01
0c8b0     04 74 06 F1 | 	add	arg01, #4
0c8b4     3A 01 68 FC | 	wrlong	#0, arg01
0c8b8     49 75 02 F6 | 	mov	arg01, local04
0c8bc     03 76 06 F6 | 	mov	arg02, #3
0c8c0     B8 CE BF FD | 	call	#_module_fit_space_even
0c8c4     49 75 02 F6 | 	mov	arg01, local04
0c8c8     40 CF BF FD | 	call	#_module_fit_height
0c8cc     49 75 02 F6 | 	mov	arg01, local04
0c8d0     F8 74 06 F1 | 	add	arg01, #248
0c8d4     3A 11 68 FC | 	wrlong	#8, arg01
0c8d8     04 74 06 F1 | 	add	arg01, #4
0c8dc     3A 11 68 FC | 	wrlong	#8, arg01
0c8e0     49 75 02 F6 | 	mov	arg01, local04
0c8e4     01 00 00 FF 
0c8e8     73 78 06 F6 | 	mov	arg03, ##627
0c8ec     10 75 06 F1 | 	add	arg01, #272
0c8f0     1D 00 80 FF 
0c8f4     3A E9 6A FC | 	wrlong	##15220, arg01
0c8f8     04 74 86 F1 | 	sub	arg01, #4
0c8fc     01 00 80 FF 
0c900     3A E7 68 FC | 	wrlong	##627, arg01
0c904     49 75 02 F6 | 	mov	arg01, local04
0c908     B0 CB BF FD | 	call	#_module_align_inner_left
0c90c     49 75 02 F6 | 	mov	arg01, local04
0c910     80 CB BF FD | 	call	#_module_align_inner_top
0c914     40 8D 06 F1 | 	add	local01, #320
0c918     46 95 02 F6 | 	mov	local05, local01
0c91c     4A 75 02 F6 | 	mov	arg01, local05
0c920     49 77 02 F6 | 	mov	arg02, local04
0c924     20 C2 BF FD | 	call	#_module_init
0c928     4A 75 02 F6 | 	mov	arg01, local05
0c92c     00 78 06 F6 | 	mov	arg03, #0
0c930     F8 74 06 F1 | 	add	arg01, #248
0c934     3A 01 68 FC | 	wrlong	#0, arg01
0c938     04 74 06 F1 | 	add	arg01, #4
0c93c     3A 01 68 FC | 	wrlong	#0, arg01
0c940     4A 75 02 F6 | 	mov	arg01, local05
0c944     74 CB BF FD | 	call	#_module_align_inner_left
0c948     4A 75 02 F6 | 	mov	arg01, local05
0c94c     44 CB BF FD | 	call	#_module_align_inner_top
0c950     4A 75 02 F6 | 	mov	arg01, local05
0c954     EC CD BF FD | 	call	#_module_fit_width
0c958     4A 75 02 F6 | 	mov	arg01, local05
0c95c     AC CE BF FD | 	call	#_module_fit_height
0c960     40 8D 06 F1 | 	add	local01, #320
0c964     46 8F 02 F6 | 	mov	local02, local01
0c968     47 75 02 F6 | 	mov	arg01, local02
0c96c     49 77 02 F6 | 	mov	arg02, local04
0c970     D4 C1 BF FD | 	call	#_module_init
0c974     DA 00 00 FF 
0c978     59 D6 05 F1 | 	add	ptr__dat__, ##111705
0c97c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0c980     DA 00 00 FF 
0c984     59 D6 85 F1 | 	sub	ptr__dat__, ##111705
0c988     47 75 02 F6 | 	mov	arg01, local02
0c98c     54 C7 BF FD | 	call	#_module_set_text
0c990     47 75 02 F6 | 	mov	arg01, local02
0c994     08 78 06 F6 | 	mov	arg03, #8
0c998     00 75 06 F1 | 	add	arg01, #256
0c99c     3A 11 68 FC | 	wrlong	#8, arg01
0c9a0     04 74 06 F1 | 	add	arg01, #4
0c9a4     3A 11 68 FC | 	wrlong	#8, arg01
0c9a8     47 75 02 F6 | 	mov	arg01, local02
0c9ac     02 76 06 F6 | 	mov	arg02, #2
0c9b0     70 C8 BF FD | 	call	#_module_text_font
0c9b4     47 75 02 F6 | 	mov	arg01, local02
0c9b8     84 C7 BF FD | 	call	#_module_text_fit
0c9bc     47 75 02 F6 | 	mov	arg01, local02
0c9c0     10 75 06 F1 | 	add	arg01, #272
0c9c4     7F 00 80 FF 
0c9c8     3A FF 6B FC | 	wrlong	##65535, arg01
0c9cc     04 74 86 F1 | 	sub	arg01, #4
0c9d0     1D 00 80 FF 
0c9d4     3A E9 6A FC | 	wrlong	##15220, arg01
0c9d8     47 75 02 F6 | 	mov	arg01, local02
0c9dc     B4 CA BF FD | 	call	#_module_align_inner_top
0c9e0     47 75 02 F6 | 	mov	arg01, local02
0c9e4     01 76 06 F6 | 	mov	arg02, #1
0c9e8     02 78 06 F6 | 	mov	arg03, #2
0c9ec     D0 CB BF FD | 	call	#_module_align_center_sector
0c9f0     47 75 02 F6 | 	mov	arg01, local02
0c9f4     CC 74 06 F1 | 	add	arg01, #204
0c9f8     3A 77 02 FB | 	rdlong	arg02, arg01
0c9fc     CC 74 86 F1 | 	sub	arg01, #204
0ca00     01 76 0E F2 | 	cmp	arg02, #1 wz
0ca04                 | '         return;
0ca04     D8 74 06 A1 |  if_e	add	arg01, #216
0ca08     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0ca0c     40 8D 06 F1 | 	add	local01, #320
0ca10     46 97 02 F6 | 	mov	local06, local01
0ca14     4B 75 02 F6 | 	mov	arg01, local06
0ca18     49 77 02 F6 | 	mov	arg02, local04
0ca1c     28 C1 BF FD | 	call	#_module_init
0ca20     4B 75 02 F6 | 	mov	arg01, local06
0ca24     08 78 06 F6 | 	mov	arg03, #8
0ca28     00 75 06 F1 | 	add	arg01, #256
0ca2c     3A 11 68 FC | 	wrlong	#8, arg01
0ca30     04 74 06 F1 | 	add	arg01, #4
0ca34     3A 11 68 FC | 	wrlong	#8, arg01
0ca38     DA 00 00 FF 
0ca3c     67 D6 05 F1 | 	add	ptr__dat__, ##111719
0ca40     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ca44     DA 00 00 FF 
0ca48     67 D6 85 F1 | 	sub	ptr__dat__, ##111719
0ca4c     4B 75 02 F6 | 	mov	arg01, local06
0ca50     90 C6 BF FD | 	call	#_module_set_text
0ca54     4B 75 02 F6 | 	mov	arg01, local06
0ca58     01 76 06 F6 | 	mov	arg02, #1
0ca5c     C4 C7 BF FD | 	call	#_module_text_font
0ca60     4B 75 02 F6 | 	mov	arg01, local06
0ca64     1D 00 00 FF 
0ca68     74 79 06 F6 | 	mov	arg03, ##15220
0ca6c     10 75 06 F1 | 	add	arg01, #272
0ca70     7F 00 80 FF 
0ca74     3A FF 6B FC | 	wrlong	##65535, arg01
0ca78     04 74 86 F1 | 	sub	arg01, #4
0ca7c     1D 00 80 FF 
0ca80     3A E9 6A FC | 	wrlong	##15220, arg01
0ca84     4B 75 02 F6 | 	mov	arg01, local06
0ca88     47 77 02 F6 | 	mov	arg02, local02
0ca8c     5C CC BF FD | 	call	#_module_align_below
0ca90     4B 75 02 F6 | 	mov	arg01, local06
0ca94     24 CA BF FD | 	call	#_module_align_inner_left
0ca98     40 8D 06 F1 | 	add	local01, #320
0ca9c     46 99 02 F6 | 	mov	local07, local01
0caa0     4C 75 02 F6 | 	mov	arg01, local07
0caa4     4A 77 02 F6 | 	mov	arg02, local05
0caa8     9C C0 BF FD | 	call	#_module_init
0caac     04 00 00 FF 
0cab0     C4 8C 86 F1 | 	sub	local01, ##2244
0cab4     46 77 02 FB | 	rdlong	arg02, local01
0cab8     80 77 06 F1 | 	add	arg02, #384
0cabc     4C 75 02 F6 | 	mov	arg01, local07
0cac0     EC C5 BF FD | 	call	#_module_set_image
0cac4     4C 75 02 F6 | 	mov	arg01, local07
0cac8     47 77 02 F6 | 	mov	arg02, local02
0cacc     1C CC BF FD | 	call	#_module_align_below
0cad0     4C 75 02 F6 | 	mov	arg01, local07
0cad4     0C CA BF FD | 	call	#_module_align_inner_right
0cad8     05 00 00 FF 
0cadc     04 8C 06 F1 | 	add	local01, ##2564
0cae0     46 8F 02 F6 | 	mov	local02, local01
0cae4     47 75 02 F6 | 	mov	arg01, local02
0cae8     49 77 02 F6 | 	mov	arg02, local04
0caec     58 C0 BF FD | 	call	#_module_init
0caf0     47 75 02 F6 | 	mov	arg01, local02
0caf4     4B 77 02 F6 | 	mov	arg02, local06
0caf8     F0 C4 BF FD | 	call	#_module_copy
0cafc     DA 00 00 FF 
0cb00     73 D6 05 F1 | 	add	ptr__dat__, ##111731
0cb04     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cb08     DA 00 00 FF 
0cb0c     73 D6 85 F1 | 	sub	ptr__dat__, ##111731
0cb10     47 75 02 F6 | 	mov	arg01, local02
0cb14     CC C5 BF FD | 	call	#_module_set_text
0cb18     47 75 02 F6 | 	mov	arg01, local02
0cb1c     01 76 06 F6 | 	mov	arg02, #1
0cb20     00 C7 BF FD | 	call	#_module_text_font
0cb24     47 75 02 F6 | 	mov	arg01, local02
0cb28     4B 77 02 F6 | 	mov	arg02, local06
0cb2c     BC CB BF FD | 	call	#_module_align_below
0cb30     40 8D 06 F1 | 	add	local01, #320
0cb34     46 99 02 F6 | 	mov	local07, local01
0cb38     4C 75 02 F6 | 	mov	arg01, local07
0cb3c     4A 77 02 F6 | 	mov	arg02, local05
0cb40     04 C0 BF FD | 	call	#_module_init
0cb44     05 00 00 FF 
0cb48     44 8D 86 F1 | 	sub	local01, ##2884
0cb4c     46 77 02 FB | 	rdlong	arg02, local01
0cb50     80 77 06 F1 | 	add	arg02, #384
0cb54     4C 75 02 F6 | 	mov	arg01, local07
0cb58     54 C5 BF FD | 	call	#_module_set_image
0cb5c     4C 75 02 F6 | 	mov	arg01, local07
0cb60     4B 77 02 F6 | 	mov	arg02, local06
0cb64     84 CB BF FD | 	call	#_module_align_below
0cb68     4C 75 02 F6 | 	mov	arg01, local07
0cb6c     74 C9 BF FD | 	call	#_module_align_inner_right
0cb70     06 00 00 FF 
0cb74     84 8C 06 F1 | 	add	local01, ##3204
0cb78     46 9B 02 F6 | 	mov	local08, local01
0cb7c     4D 75 02 F6 | 	mov	arg01, local08
0cb80     49 77 02 F6 | 	mov	arg02, local04
0cb84     C0 BF BF FD | 	call	#_module_init
0cb88     4D 75 02 F6 | 	mov	arg01, local08
0cb8c     4B 77 02 F6 | 	mov	arg02, local06
0cb90     58 C4 BF FD | 	call	#_module_copy
0cb94     DA 00 00 FF 
0cb98     82 D6 05 F1 | 	add	ptr__dat__, ##111746
0cb9c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cba0     DA 00 00 FF 
0cba4     82 D6 85 F1 | 	sub	ptr__dat__, ##111746
0cba8     4D 75 02 F6 | 	mov	arg01, local08
0cbac     34 C5 BF FD | 	call	#_module_set_text
0cbb0     4D 75 02 F6 | 	mov	arg01, local08
0cbb4     01 76 06 F6 | 	mov	arg02, #1
0cbb8     68 C6 BF FD | 	call	#_module_text_font
0cbbc     4D 75 02 F6 | 	mov	arg01, local08
0cbc0     47 77 02 F6 | 	mov	arg02, local02
0cbc4     24 CB BF FD | 	call	#_module_align_below
0cbc8     40 8D 06 F1 | 	add	local01, #320
0cbcc     46 99 02 F6 | 	mov	local07, local01
0cbd0     4C 75 02 F6 | 	mov	arg01, local07
0cbd4     4A 77 02 F6 | 	mov	arg02, local05
0cbd8     6C BF BF FD | 	call	#_module_init
0cbdc     06 00 00 FF 
0cbe0     C4 8D 86 F1 | 	sub	local01, ##3524
0cbe4     46 77 02 FB | 	rdlong	arg02, local01
0cbe8     80 77 06 F1 | 	add	arg02, #384
0cbec     4C 75 02 F6 | 	mov	arg01, local07
0cbf0     BC C4 BF FD | 	call	#_module_set_image
0cbf4     4C 75 02 F6 | 	mov	arg01, local07
0cbf8     47 77 02 F6 | 	mov	arg02, local02
0cbfc     EC CA BF FD | 	call	#_module_align_below
0cc00     4C 75 02 F6 | 	mov	arg01, local07
0cc04     DC C8 BF FD | 	call	#_module_align_inner_right
0cc08     07 00 00 FF 
0cc0c     04 8D 06 F1 | 	add	local01, ##3844
0cc10     46 8F 02 F6 | 	mov	local02, local01
0cc14     47 75 02 F6 | 	mov	arg01, local02
0cc18     49 77 02 F6 | 	mov	arg02, local04
0cc1c     28 BF BF FD | 	call	#_module_init
0cc20     47 75 02 F6 | 	mov	arg01, local02
0cc24     4B 77 02 F6 | 	mov	arg02, local06
0cc28     C0 C3 BF FD | 	call	#_module_copy
0cc2c     DA 00 00 FF 
0cc30     8D D6 05 F1 | 	add	ptr__dat__, ##111757
0cc34     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cc38     DA 00 00 FF 
0cc3c     8D D6 85 F1 | 	sub	ptr__dat__, ##111757
0cc40     47 75 02 F6 | 	mov	arg01, local02
0cc44     9C C4 BF FD | 	call	#_module_set_text
0cc48     47 75 02 F6 | 	mov	arg01, local02
0cc4c     01 76 06 F6 | 	mov	arg02, #1
0cc50     D0 C5 BF FD | 	call	#_module_text_font
0cc54     47 75 02 F6 | 	mov	arg01, local02
0cc58     4D 77 02 F6 | 	mov	arg02, local08
0cc5c     8C CA BF FD | 	call	#_module_align_below
0cc60     40 8D 06 F1 | 	add	local01, #320
0cc64     46 99 02 F6 | 	mov	local07, local01
0cc68     4C 75 02 F6 | 	mov	arg01, local07
0cc6c     4A 77 02 F6 | 	mov	arg02, local05
0cc70     D4 BE BF FD | 	call	#_module_init
0cc74     08 00 00 FF 
0cc78     44 8C 86 F1 | 	sub	local01, ##4164
0cc7c     46 77 02 FB | 	rdlong	arg02, local01
0cc80     80 77 06 F1 | 	add	arg02, #384
0cc84     4C 75 02 F6 | 	mov	arg01, local07
0cc88     24 C4 BF FD | 	call	#_module_set_image
0cc8c     4C 75 02 F6 | 	mov	arg01, local07
0cc90     4D 77 02 F6 | 	mov	arg02, local08
0cc94     54 CA BF FD | 	call	#_module_align_below
0cc98     4C 75 02 F6 | 	mov	arg01, local07
0cc9c     44 C8 BF FD | 	call	#_module_align_inner_right
0cca0     08 00 00 FF 
0cca4     84 8D 06 F1 | 	add	local01, ##4484
0cca8     46 9B 02 F6 | 	mov	local08, local01
0ccac     4D 75 02 F6 | 	mov	arg01, local08
0ccb0     49 77 02 F6 | 	mov	arg02, local04
0ccb4     90 BE BF FD | 	call	#_module_init
0ccb8     4D 75 02 F6 | 	mov	arg01, local08
0ccbc     4B 77 02 F6 | 	mov	arg02, local06
0ccc0     28 C3 BF FD | 	call	#_module_copy
0ccc4     DA 00 00 FF 
0ccc8     97 D6 05 F1 | 	add	ptr__dat__, ##111767
0cccc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ccd0     DA 00 00 FF 
0ccd4     97 D6 85 F1 | 	sub	ptr__dat__, ##111767
0ccd8     4D 75 02 F6 | 	mov	arg01, local08
0ccdc     04 C4 BF FD | 	call	#_module_set_text
0cce0     4D 75 02 F6 | 	mov	arg01, local08
0cce4     01 76 06 F6 | 	mov	arg02, #1
0cce8     38 C5 BF FD | 	call	#_module_text_font
0ccec     4D 75 02 F6 | 	mov	arg01, local08
0ccf0     47 77 02 F6 | 	mov	arg02, local02
0ccf4     F4 C9 BF FD | 	call	#_module_align_below
0ccf8     40 8D 06 F1 | 	add	local01, #320
0ccfc     46 99 02 F6 | 	mov	local07, local01
0cd00     4C 75 02 F6 | 	mov	arg01, local07
0cd04     4A 77 02 F6 | 	mov	arg02, local05
0cd08     3C BE BF FD | 	call	#_module_init
0cd0c     09 00 00 FF 
0cd10     C4 8C 86 F1 | 	sub	local01, ##4804
0cd14     46 77 02 FB | 	rdlong	arg02, local01
0cd18     80 77 06 F1 | 	add	arg02, #384
0cd1c     4C 75 02 F6 | 	mov	arg01, local07
0cd20     8C C3 BF FD | 	call	#_module_set_image
0cd24     4C 75 02 F6 | 	mov	arg01, local07
0cd28     47 77 02 F6 | 	mov	arg02, local02
0cd2c     BC C9 BF FD | 	call	#_module_align_below
0cd30     4C 75 02 F6 | 	mov	arg01, local07
0cd34     AC C7 BF FD | 	call	#_module_align_inner_right
0cd38     0A 00 00 FF 
0cd3c     04 8C 06 F1 | 	add	local01, ##5124
0cd40     46 8F 02 F6 | 	mov	local02, local01
0cd44     47 75 02 F6 | 	mov	arg01, local02
0cd48     49 77 02 F6 | 	mov	arg02, local04
0cd4c     F8 BD BF FD | 	call	#_module_init
0cd50     47 75 02 F6 | 	mov	arg01, local02
0cd54     4B 77 02 F6 | 	mov	arg02, local06
0cd58     90 C2 BF FD | 	call	#_module_copy
0cd5c     DA 00 00 FF 
0cd60     A1 D6 05 F1 | 	add	ptr__dat__, ##111777
0cd64     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cd68     DA 00 00 FF 
0cd6c     A1 D6 85 F1 | 	sub	ptr__dat__, ##111777
0cd70     47 75 02 F6 | 	mov	arg01, local02
0cd74     6C C3 BF FD | 	call	#_module_set_text
0cd78     47 75 02 F6 | 	mov	arg01, local02
0cd7c     01 76 06 F6 | 	mov	arg02, #1
0cd80     A0 C4 BF FD | 	call	#_module_text_font
0cd84     47 75 02 F6 | 	mov	arg01, local02
0cd88     4D 77 02 F6 | 	mov	arg02, local08
0cd8c     5C C9 BF FD | 	call	#_module_align_below
0cd90     40 8D 06 F1 | 	add	local01, #320
0cd94     46 99 02 F6 | 	mov	local07, local01
0cd98     4C 75 02 F6 | 	mov	arg01, local07
0cd9c     4A 77 02 F6 | 	mov	arg02, local05
0cda0     A4 BD BF FD | 	call	#_module_init
0cda4     0A 00 00 FF 
0cda8     44 8D 86 F1 | 	sub	local01, ##5444
0cdac     46 77 02 FB | 	rdlong	arg02, local01
0cdb0     80 77 06 F1 | 	add	arg02, #384
0cdb4     4C 75 02 F6 | 	mov	arg01, local07
0cdb8     F4 C2 BF FD | 	call	#_module_set_image
0cdbc     4C 75 02 F6 | 	mov	arg01, local07
0cdc0     4D 77 02 F6 | 	mov	arg02, local08
0cdc4     24 C9 BF FD | 	call	#_module_align_below
0cdc8     4C 75 02 F6 | 	mov	arg01, local07
0cdcc     14 C7 BF FD | 	call	#_module_align_inner_right
0cdd0     0B 00 00 FF 
0cdd4     84 8C 06 F1 | 	add	local01, ##5764
0cdd8     46 9B 02 F6 | 	mov	local08, local01
0cddc     4D 75 02 F6 | 	mov	arg01, local08
0cde0     49 77 02 F6 | 	mov	arg02, local04
0cde4     60 BD BF FD | 	call	#_module_init
0cde8     4D 75 02 F6 | 	mov	arg01, local08
0cdec     4B 77 02 F6 | 	mov	arg02, local06
0cdf0     F8 C1 BF FD | 	call	#_module_copy
0cdf4     DA 00 00 FF 
0cdf8     AD D6 05 F1 | 	add	ptr__dat__, ##111789
0cdfc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ce00     DA 00 00 FF 
0ce04     AD D6 85 F1 | 	sub	ptr__dat__, ##111789
0ce08     4D 75 02 F6 | 	mov	arg01, local08
0ce0c     D4 C2 BF FD | 	call	#_module_set_text
0ce10     4D 75 02 F6 | 	mov	arg01, local08
0ce14     01 76 06 F6 | 	mov	arg02, #1
0ce18     08 C4 BF FD | 	call	#_module_text_font
0ce1c     4D 75 02 F6 | 	mov	arg01, local08
0ce20     47 77 02 F6 | 	mov	arg02, local02
0ce24     C4 C8 BF FD | 	call	#_module_align_below
0ce28     40 8D 06 F1 | 	add	local01, #320
0ce2c     46 99 02 F6 | 	mov	local07, local01
0ce30     4C 75 02 F6 | 	mov	arg01, local07
0ce34     4A 77 02 F6 | 	mov	arg02, local05
0ce38     0C BD BF FD | 	call	#_module_init
0ce3c     0B 00 00 FF 
0ce40     C4 8D 86 F1 | 	sub	local01, ##6084
0ce44     46 77 02 FB | 	rdlong	arg02, local01
0ce48     80 77 06 F1 | 	add	arg02, #384
0ce4c     4C 75 02 F6 | 	mov	arg01, local07
0ce50     5C C2 BF FD | 	call	#_module_set_image
0ce54     4C 75 02 F6 | 	mov	arg01, local07
0ce58     47 77 02 F6 | 	mov	arg02, local02
0ce5c     8C C8 BF FD | 	call	#_module_align_below
0ce60     4C 75 02 F6 | 	mov	arg01, local07
0ce64     7C C6 BF FD | 	call	#_module_align_inner_right
0ce68     0C 00 00 FF 
0ce6c     04 8D 06 F1 | 	add	local01, ##6404
0ce70     46 75 02 F6 | 	mov	arg01, local01
0ce74     49 77 02 F6 | 	mov	arg02, local04
0ce78     CC BC BF FD | 	call	#_module_init
0ce7c     46 75 02 F6 | 	mov	arg01, local01
0ce80     4B 77 02 F6 | 	mov	arg02, local06
0ce84     64 C1 BF FD | 	call	#_module_copy
0ce88     DA 00 00 FF 
0ce8c     B8 D6 05 F1 | 	add	ptr__dat__, ##111800
0ce90     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ce94     DA 00 00 FF 
0ce98     B8 D6 85 F1 | 	sub	ptr__dat__, ##111800
0ce9c     46 75 02 F6 | 	mov	arg01, local01
0cea0     40 C2 BF FD | 	call	#_module_set_text
0cea4     46 75 02 F6 | 	mov	arg01, local01
0cea8     01 76 06 F6 | 	mov	arg02, #1
0ceac     74 C3 BF FD | 	call	#_module_text_font
0ceb0     46 75 02 F6 | 	mov	arg01, local01
0ceb4     4D 77 02 F6 | 	mov	arg02, local08
0ceb8     30 C8 BF FD | 	call	#_module_align_below
0cebc     40 8D 06 F1 | 	add	local01, #320
0cec0     46 99 02 F6 | 	mov	local07, local01
0cec4     4C 75 02 F6 | 	mov	arg01, local07
0cec8     4A 77 02 F6 | 	mov	arg02, local05
0cecc     78 BC BF FD | 	call	#_module_init
0ced0     0D 00 00 FF 
0ced4     44 8C 86 F1 | 	sub	local01, ##6724
0ced8     46 77 02 FB | 	rdlong	arg02, local01
0cedc     80 77 06 F1 | 	add	arg02, #384
0cee0     4C 75 02 F6 | 	mov	arg01, local07
0cee4     C8 C1 BF FD | 	call	#_module_set_image
0cee8     4C 75 02 F6 | 	mov	arg01, local07
0ceec     4D 77 02 F6 | 	mov	arg02, local08
0cef0     F8 C7 BF FD | 	call	#_module_align_below
0cef4     4C 75 02 F6 | 	mov	arg01, local07
0cef8     E8 C5 BF FD | 	call	#_module_align_inner_right
0cefc     0D 00 00 FF 
0cf00     84 8D 06 F1 | 	add	local01, ##7044
0cf04     46 9B 02 F6 | 	mov	local08, local01
0cf08     4D 75 02 F6 | 	mov	arg01, local08
0cf0c     48 77 02 F6 | 	mov	arg02, local03
0cf10     34 BC BF FD | 	call	#_module_init
0cf14     4D 75 02 F6 | 	mov	arg01, local08
0cf18     F8 74 06 F1 | 	add	arg01, #248
0cf1c     3A 11 68 FC | 	wrlong	#8, arg01
0cf20     04 74 06 F1 | 	add	arg01, #4
0cf24     3A 11 68 FC | 	wrlong	#8, arg01
0cf28     4D 75 02 F6 | 	mov	arg01, local08
0cf2c     0F 76 CE F9 | 	bmask	arg02, #15
0cf30     01 78 06 F6 | 	mov	arg03, #1
0cf34     1C C5 BF FD | 	call	#_module_add_border
0cf38     4D 75 02 F6 | 	mov	arg01, local08
0cf3c     00 75 06 F1 | 	add	arg01, #256
0cf40     3A 15 68 FC | 	wrlong	#10, arg01
0cf44     04 74 06 F1 | 	add	arg01, #4
0cf48     3A 15 68 FC | 	wrlong	#10, arg01
0cf4c     4D 75 02 F6 | 	mov	arg01, local08
0cf50     CC 74 06 F1 | 	add	arg01, #204
0cf54     3A 0B 68 FC | 	wrlong	#5, arg01
0cf58     24 74 06 F1 | 	add	arg01, #36
0cf5c     3A 01 68 FC | 	wrlong	#0, arg01
0cf60     04 74 06 F1 | 	add	arg01, #4
0cf64     3A 01 68 FC | 	wrlong	#0, arg01
0cf68     4D 75 02 F6 | 	mov	arg01, local08
0cf6c     03 76 06 F6 | 	mov	arg02, #3
0cf70     08 C8 BF FD | 	call	#_module_fit_space_even
0cf74     4D 75 02 F6 | 	mov	arg01, local08
0cf78     F8 74 06 F1 | 	add	arg01, #248
0cf7c     3A 11 68 FC | 	wrlong	#8, arg01
0cf80     04 74 06 F1 | 	add	arg01, #4
0cf84     3A 11 68 FC | 	wrlong	#8, arg01
0cf88     4D 75 02 F6 | 	mov	arg01, local08
0cf8c     7C C8 BF FD | 	call	#_module_fit_height
0cf90     4D 75 02 F6 | 	mov	arg01, local08
0cf94     01 00 00 FF 
0cf98     73 78 06 F6 | 	mov	arg03, ##627
0cf9c     10 75 06 F1 | 	add	arg01, #272
0cfa0     1D 00 80 FF 
0cfa4     3A E9 6A FC | 	wrlong	##15220, arg01
0cfa8     04 74 86 F1 | 	sub	arg01, #4
0cfac     01 00 80 FF 
0cfb0     3A E7 68 FC | 	wrlong	##627, arg01
0cfb4     4D 75 02 F6 | 	mov	arg01, local08
0cfb8     49 77 02 F6 | 	mov	arg02, local04
0cfbc     58 C7 BF FD | 	call	#_module_align_right
0cfc0     4D 75 02 F6 | 	mov	arg01, local08
0cfc4     CC C4 BF FD | 	call	#_module_align_inner_top
0cfc8     40 8D 06 F1 | 	add	local01, #320
0cfcc     46 8F 02 F6 | 	mov	local02, local01
0cfd0     47 75 02 F6 | 	mov	arg01, local02
0cfd4     4D 77 02 F6 | 	mov	arg02, local08
0cfd8     6C BB BF FD | 	call	#_module_init
0cfdc     DA 00 00 FF 
0cfe0     C3 D6 05 F1 | 	add	ptr__dat__, ##111811
0cfe4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cfe8     DA 00 00 FF 
0cfec     C3 D6 85 F1 | 	sub	ptr__dat__, ##111811
0cff0     47 75 02 F6 | 	mov	arg01, local02
0cff4     EC C0 BF FD | 	call	#_module_set_text
0cff8     47 75 02 F6 | 	mov	arg01, local02
0cffc     08 78 06 F6 | 	mov	arg03, #8
0d000     00 75 06 F1 | 	add	arg01, #256
0d004     3A 11 68 FC | 	wrlong	#8, arg01
0d008     04 74 06 F1 | 	add	arg01, #4
0d00c     3A 11 68 FC | 	wrlong	#8, arg01
0d010     47 75 02 F6 | 	mov	arg01, local02
0d014     02 76 06 F6 | 	mov	arg02, #2
0d018     08 C2 BF FD | 	call	#_module_text_font
0d01c     47 75 02 F6 | 	mov	arg01, local02
0d020     1C C1 BF FD | 	call	#_module_text_fit
0d024     47 75 02 F6 | 	mov	arg01, local02
0d028     10 75 06 F1 | 	add	arg01, #272
0d02c     7F 00 80 FF 
0d030     3A FF 6B FC | 	wrlong	##65535, arg01
0d034     04 74 86 F1 | 	sub	arg01, #4
0d038     1D 00 80 FF 
0d03c     3A E9 6A FC | 	wrlong	##15220, arg01
0d040     47 75 02 F6 | 	mov	arg01, local02
0d044     4C C4 BF FD | 	call	#_module_align_inner_top
0d048     47 75 02 F6 | 	mov	arg01, local02
0d04c     01 76 06 F6 | 	mov	arg02, #1
0d050     02 78 06 F6 | 	mov	arg03, #2
0d054     68 C5 BF FD | 	call	#_module_align_center_sector
0d058     47 75 02 F6 | 	mov	arg01, local02
0d05c     CC 74 06 F1 | 	add	arg01, #204
0d060     3A 99 02 FB | 	rdlong	local07, arg01
0d064     CC 74 86 F1 | 	sub	arg01, #204
0d068     01 98 0E F2 | 	cmp	local07, #1 wz
0d06c                 | '         return;
0d06c     D8 74 06 A1 |  if_e	add	arg01, #216
0d070     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0d074     40 8D 06 F1 | 	add	local01, #320
0d078     46 97 02 F6 | 	mov	local06, local01
0d07c     4B 75 02 F6 | 	mov	arg01, local06
0d080     4D 77 02 F6 | 	mov	arg02, local08
0d084     C0 BA BF FD | 	call	#_module_init
0d088     4B 75 02 F6 | 	mov	arg01, local06
0d08c     08 78 06 F6 | 	mov	arg03, #8
0d090     00 75 06 F1 | 	add	arg01, #256
0d094     3A 11 68 FC | 	wrlong	#8, arg01
0d098     04 74 06 F1 | 	add	arg01, #4
0d09c     3A 11 68 FC | 	wrlong	#8, arg01
0d0a0     DA 00 00 FF 
0d0a4     D0 D6 05 F1 | 	add	ptr__dat__, ##111824
0d0a8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0d0ac     DA 00 00 FF 
0d0b0     D0 D6 85 F1 | 	sub	ptr__dat__, ##111824
0d0b4     4B 75 02 F6 | 	mov	arg01, local06
0d0b8     28 C0 BF FD | 	call	#_module_set_text
0d0bc     4B 75 02 F6 | 	mov	arg01, local06
0d0c0     01 76 06 F6 | 	mov	arg02, #1
0d0c4     5C C1 BF FD | 	call	#_module_text_font
0d0c8     4B 75 02 F6 | 	mov	arg01, local06
0d0cc     70 C0 BF FD | 	call	#_module_text_fit
0d0d0     4B 75 02 F6 | 	mov	arg01, local06
0d0d4     1D 00 00 FF 
0d0d8     74 79 06 F6 | 	mov	arg03, ##15220
0d0dc     10 75 06 F1 | 	add	arg01, #272
0d0e0     7F 00 80 FF 
0d0e4     3A FF 6B FC | 	wrlong	##65535, arg01
0d0e8     04 74 86 F1 | 	sub	arg01, #4
0d0ec     1D 00 80 FF 
0d0f0     3A E9 6A FC | 	wrlong	##15220, arg01
0d0f4     4B 75 02 F6 | 	mov	arg01, local06
0d0f8     47 77 02 F6 | 	mov	arg02, local02
0d0fc     EC C5 BF FD | 	call	#_module_align_below
0d100     4B 75 02 F6 | 	mov	arg01, local06
0d104     B4 C3 BF FD | 	call	#_module_align_inner_left
0d108     40 8D 06 F1 | 	add	local01, #320
0d10c     46 99 02 F6 | 	mov	local07, local01
0d110     4C 75 02 F6 | 	mov	arg01, local07
0d114     4D 77 02 F6 | 	mov	arg02, local08
0d118     2C BA BF FD | 	call	#_module_init
0d11c     4C 75 02 F6 | 	mov	arg01, local07
0d120     4B 77 02 F6 | 	mov	arg02, local06
0d124     C4 BE BF FD | 	call	#_module_copy
0d128     1A 00 00 FF 
0d12c     70 8C 06 F1 | 	add	local01, ##13424
0d130     46 77 02 F6 | 	mov	arg02, local01
0d134     4C 75 02 F6 | 	mov	arg01, local07
0d138     A8 BF BF FD | 	call	#_module_set_text
0d13c     4C 75 02 F6 | 	mov	arg01, local07
0d140     01 76 06 F6 | 	mov	arg02, #1
0d144     DC C0 BF FD | 	call	#_module_text_font
0d148     4C 75 02 F6 | 	mov	arg01, local07
0d14c     F0 BF BF FD | 	call	#_module_text_fit
0d150     4C 75 02 F6 | 	mov	arg01, local07
0d154     4B 77 02 F6 | 	mov	arg02, local06
0d158     68 C7 BF FD | 	call	#_module_fit_right
0d15c     4C 75 02 F6 | 	mov	arg01, local07
0d160     4B 77 02 F6 | 	mov	arg02, local06
0d164     B0 C5 BF FD | 	call	#_module_align_right
0d168     4C 75 02 F6 | 	mov	arg01, local07
0d16c     CC 74 06 F1 | 	add	arg01, #204
0d170     3A 99 02 FB | 	rdlong	local07, arg01
0d174     CC 74 86 F1 | 	sub	arg01, #204
0d178     01 98 0E F2 | 	cmp	local07, #1 wz
0d17c                 | '         return;
0d17c     DC 74 06 A1 |  if_e	add	arg01, #220
0d180     3A 07 68 AC |  if_e	wrlong	#3, arg01
0d184     19 00 00 FF 
0d188     30 8D 86 F1 | 	sub	local01, ##13104
0d18c     46 8F 02 F6 | 	mov	local02, local01
0d190     47 75 02 F6 | 	mov	arg01, local02
0d194     4D 77 02 F6 | 	mov	arg02, local08
0d198     AC B9 BF FD | 	call	#_module_init
0d19c     47 75 02 F6 | 	mov	arg01, local02
0d1a0     08 78 06 F6 | 	mov	arg03, #8
0d1a4     00 75 06 F1 | 	add	arg01, #256
0d1a8     3A 11 68 FC | 	wrlong	#8, arg01
0d1ac     04 74 06 F1 | 	add	arg01, #4
0d1b0     3A 11 68 FC | 	wrlong	#8, arg01
0d1b4     DA 00 00 FF 
0d1b8     DA D6 05 F1 | 	add	ptr__dat__, ##111834
0d1bc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0d1c0     DA 00 00 FF 
0d1c4     DA D6 85 F1 | 	sub	ptr__dat__, ##111834
0d1c8     47 75 02 F6 | 	mov	arg01, local02
0d1cc     14 BF BF FD | 	call	#_module_set_text
0d1d0     47 75 02 F6 | 	mov	arg01, local02
0d1d4     01 76 06 F6 | 	mov	arg02, #1
0d1d8     48 C0 BF FD | 	call	#_module_text_font
0d1dc     47 75 02 F6 | 	mov	arg01, local02
0d1e0     5C BF BF FD | 	call	#_module_text_fit
0d1e4     47 75 02 F6 | 	mov	arg01, local02
0d1e8     1D 00 00 FF 
0d1ec     74 79 06 F6 | 	mov	arg03, ##15220
0d1f0     10 75 06 F1 | 	add	arg01, #272
0d1f4     7F 00 80 FF 
0d1f8     3A FF 6B FC | 	wrlong	##65535, arg01
0d1fc     04 74 86 F1 | 	sub	arg01, #4
0d200     1D 00 80 FF 
0d204     3A E9 6A FC | 	wrlong	##15220, arg01
0d208     47 75 02 F6 | 	mov	arg01, local02
0d20c     4B 77 02 F6 | 	mov	arg02, local06
0d210     D8 C4 BF FD | 	call	#_module_align_below
0d214     47 75 02 F6 | 	mov	arg01, local02
0d218     A0 C2 BF FD | 	call	#_module_align_inner_left
0d21c     40 8D 06 F1 | 	add	local01, #320
0d220     46 99 02 F6 | 	mov	local07, local01
0d224     4C 75 02 F6 | 	mov	arg01, local07
0d228     4D 77 02 F6 | 	mov	arg02, local08
0d22c     18 B9 BF FD | 	call	#_module_init
0d230     4C 75 02 F6 | 	mov	arg01, local07
0d234     47 77 02 F6 | 	mov	arg02, local02
0d238     B0 BD BF FD | 	call	#_module_copy
0d23c     19 00 00 FF 
0d240     04 8C 06 F1 | 	add	local01, ##12804
0d244     46 77 02 F6 | 	mov	arg02, local01
0d248     4C 75 02 F6 | 	mov	arg01, local07
0d24c     94 BE BF FD | 	call	#_module_set_text
0d250     4C 75 02 F6 | 	mov	arg01, local07
0d254     01 76 06 F6 | 	mov	arg02, #1
0d258     C8 BF BF FD | 	call	#_module_text_font
0d25c     4C 75 02 F6 | 	mov	arg01, local07
0d260     DC BE BF FD | 	call	#_module_text_fit
0d264     4C 75 02 F6 | 	mov	arg01, local07
0d268     47 77 02 F6 | 	mov	arg02, local02
0d26c     54 C6 BF FD | 	call	#_module_fit_right
0d270     4C 75 02 F6 | 	mov	arg01, local07
0d274     47 77 02 F6 | 	mov	arg02, local02
0d278     9C C4 BF FD | 	call	#_module_align_right
0d27c     4C 75 02 F6 | 	mov	arg01, local07
0d280     CC 74 06 F1 | 	add	arg01, #204
0d284     3A 99 02 FB | 	rdlong	local07, arg01
0d288     CC 74 86 F1 | 	sub	arg01, #204
0d28c     01 98 0E F2 | 	cmp	local07, #1 wz
0d290                 | '         return;
0d290     DC 74 06 A1 |  if_e	add	arg01, #220
0d294     3A 07 68 AC |  if_e	wrlong	#3, arg01
0d298     18 00 00 FF 
0d29c     C4 8C 86 F1 | 	sub	local01, ##12484
0d2a0     46 99 02 F6 | 	mov	local07, local01
0d2a4     4C 75 02 F6 | 	mov	arg01, local07
0d2a8     4D 77 02 F6 | 	mov	arg02, local08
0d2ac     98 B8 BF FD | 	call	#_module_init
0d2b0     4C 75 02 F6 | 	mov	arg01, local07
0d2b4     00 75 06 F1 | 	add	arg01, #256
0d2b8     3A 15 68 FC | 	wrlong	#10, arg01
0d2bc     04 74 06 F1 | 	add	arg01, #4
0d2c0     3A 15 68 FC | 	wrlong	#10, arg01
0d2c4     4C 75 02 F6 | 	mov	arg01, local07
0d2c8     F0 74 06 F1 | 	add	arg01, #240
0d2cc     3A 01 68 FC | 	wrlong	#0, arg01
0d2d0     04 74 06 F1 | 	add	arg01, #4
0d2d4     3A 91 69 FC | 	wrlong	#200, arg01
0d2d8     4C 75 02 F6 | 	mov	arg01, local07
0d2dc     47 77 02 F6 | 	mov	arg02, local02
0d2e0     08 C4 BF FD | 	call	#_module_align_below
0d2e4     4C 75 02 F6 | 	mov	arg01, local07
0d2e8     D0 C1 BF FD | 	call	#_module_align_inner_left
0d2ec     4C 97 02 FB | 	rdlong	local06, local07
0d2f0     10 97 06 F1 | 	add	local06, #272
0d2f4     4B 77 02 FB | 	rdlong	arg02, local06
0d2f8     4C 97 02 FB | 	rdlong	local06, local07
0d2fc     0C 97 06 F1 | 	add	local06, #268
0d300     4B 79 02 FB | 	rdlong	arg03, local06
0d304     4C 75 02 F6 | 	mov	arg01, local07
0d308     10 75 06 F1 | 	add	arg01, #272
0d30c     3A 77 62 FC | 	wrlong	arg02, arg01
0d310     04 74 86 F1 | 	sub	arg01, #4
0d314     3A 79 62 FC | 	wrlong	arg03, arg01
0d318     4C 75 02 F6 | 	mov	arg01, local07
0d31c     24 C4 BF FD | 	call	#_module_fit_width
0d320     40 8D 06 F1 | 	add	local01, #320
0d324     46 77 02 F6 | 	mov	arg02, local01
0d328     4F 01 00 FF 
0d32c     72 79 06 F6 | 	mov	arg03, ##@LR__2003
0d330     4F 01 00 FF 
0d334     7B 7B 06 F6 | 	mov	arg04, ##@LR__2004
0d338     4C 75 02 F6 | 	mov	arg01, local07
0d33c     50 EE BF FD | 	call	#_module_set_graph
0d340     4C 75 02 F6 | 	mov	arg01, local07
0d344     00 90 60 FF 
0d348     00 78 06 F6 | 	mov	arg03, ##-1054867456
0d34c     D0 74 06 F1 | 	add	arg01, #208
0d350     3A 75 02 FB | 	rdlong	arg01, arg01
0d354     08 74 06 F1 | 	add	arg01, #8
0d358     00 90 A0 FF 
0d35c     3A 01 68 FC | 	wrlong	##1092616192, arg01
0d360     04 74 06 F1 | 	add	arg01, #4
0d364     00 90 E0 FF 
0d368     3A 01 68 FC | 	wrlong	##-1054867456, arg01
0d36c     04 00 00 FF 
0d370     44 8D 06 F1 | 	add	local01, ##2372
0d374     46 97 02 F6 | 	mov	local06, local01
0d378     4B 75 02 F6 | 	mov	arg01, local06
0d37c     4D 77 02 F6 | 	mov	arg02, local08
0d380     C4 B7 BF FD | 	call	#_module_init
0d384     4B 75 02 F6 | 	mov	arg01, local06
0d388     00 75 06 F1 | 	add	arg01, #256
0d38c     3A 15 68 FC | 	wrlong	#10, arg01
0d390     04 74 06 F1 | 	add	arg01, #4
0d394     3A 15 68 FC | 	wrlong	#10, arg01
0d398     4B 75 02 F6 | 	mov	arg01, local06
0d39c     F0 74 06 F1 | 	add	arg01, #240
0d3a0     3A 01 68 FC | 	wrlong	#0, arg01
0d3a4     04 74 06 F1 | 	add	arg01, #4
0d3a8     3A 91 69 FC | 	wrlong	#200, arg01
0d3ac     4B 75 02 F6 | 	mov	arg01, local06
0d3b0     4C 77 02 F6 | 	mov	arg02, local07
0d3b4     34 C3 BF FD | 	call	#_module_align_below
0d3b8     EC 96 06 F1 | 	add	local06, #236
0d3bc     4B 99 02 FB | 	rdlong	local07, local06
0d3c0     0A 98 06 F1 | 	add	local07, #10
0d3c4     4B 99 62 FC | 	wrlong	local07, local06
0d3c8     EC 96 86 F1 | 	sub	local06, #236
0d3cc     4B 75 02 F6 | 	mov	arg01, local06
0d3d0     E8 C0 BF FD | 	call	#_module_align_inner_left
0d3d4     4B 9B 02 FB | 	rdlong	local08, local06
0d3d8     10 9B 06 F1 | 	add	local08, #272
0d3dc     4D 77 02 FB | 	rdlong	arg02, local08
0d3e0     4B 9B 02 FB | 	rdlong	local08, local06
0d3e4     0C 9B 06 F1 | 	add	local08, #268
0d3e8     4D 79 02 FB | 	rdlong	arg03, local08
0d3ec     4B 75 02 F6 | 	mov	arg01, local06
0d3f0     10 75 06 F1 | 	add	arg01, #272
0d3f4     3A 77 62 FC | 	wrlong	arg02, arg01
0d3f8     04 74 86 F1 | 	sub	arg01, #4
0d3fc     3A 79 62 FC | 	wrlong	arg03, arg01
0d400     4B 75 02 F6 | 	mov	arg01, local06
0d404     3C C3 BF FD | 	call	#_module_fit_width
0d408     40 8D 06 F1 | 	add	local01, #320
0d40c     46 77 02 F6 | 	mov	arg02, local01
0d410     4F 01 00 FF 
0d414     7E 79 06 F6 | 	mov	arg03, ##@LR__2005
0d418     4F 01 00 FF 
0d41c     84 7B 06 F6 | 	mov	arg04, ##@LR__2006
0d420     4B 75 02 F6 | 	mov	arg01, local06
0d424     68 ED BF FD | 	call	#_module_set_graph
0d428     00 50 60 FF 
0d42c     00 78 06 F6 | 	mov	arg03, ##-1063256064
0d430     D0 96 06 F1 | 	add	local06, #208
0d434     4B 97 02 FB | 	rdlong	local06, local06
0d438     08 96 06 F1 | 	add	local06, #8
0d43c     00 50 A0 FF 
0d440     4B 01 68 FC | 	wrlong	##1084227584, local06
0d444     04 96 06 F1 | 	add	local06, #4
0d448     00 50 E0 FF 
0d44c     4B 01 68 FC | 	wrlong	##-1063256064, local06
0d450     04 00 00 FF 
0d454     44 8D 06 F1 | 	add	local01, ##2372
0d458     46 8F 02 F6 | 	mov	local02, local01
0d45c     47 75 02 F6 | 	mov	arg01, local02
0d460     48 77 02 F6 | 	mov	arg02, local03
0d464     E0 B6 BF FD | 	call	#_module_init
0d468     47 75 02 F6 | 	mov	arg01, local02
0d46c     F8 74 06 F1 | 	add	arg01, #248
0d470     3A 11 68 FC | 	wrlong	#8, arg01
0d474     04 74 06 F1 | 	add	arg01, #4
0d478     3A 11 68 FC | 	wrlong	#8, arg01
0d47c     47 75 02 F6 | 	mov	arg01, local02
0d480     00 75 06 F1 | 	add	arg01, #256
0d484     3A 15 68 FC | 	wrlong	#10, arg01
0d488     04 74 06 F1 | 	add	arg01, #4
0d48c     3A 15 68 FC | 	wrlong	#10, arg01
0d490     47 75 02 F6 | 	mov	arg01, local02
0d494     F0 74 06 F1 | 	add	arg01, #240
0d498     3A 01 68 FC | 	wrlong	#0, arg01
0d49c     04 74 06 F1 | 	add	arg01, #4
0d4a0     3A 91 69 FC | 	wrlong	#200, arg01
0d4a4     47 75 02 F6 | 	mov	arg01, local02
0d4a8     03 76 06 F6 | 	mov	arg02, #3
0d4ac     CC C2 BF FD | 	call	#_module_fit_space_even
0d4b0     47 75 02 F6 | 	mov	arg01, local02
0d4b4     03 76 06 F6 | 	mov	arg02, #3
0d4b8     03 78 06 F6 | 	mov	arg03, #3
0d4bc     74 C1 BF FD | 	call	#_module_align_space_even
0d4c0     47 75 02 F6 | 	mov	arg01, local02
0d4c4     64 C0 BF FD | 	call	#_module_align_inner_bottom
0d4c8     40 8D 06 F1 | 	add	local01, #320
0d4cc     46 75 02 F6 | 	mov	arg01, local01
0d4d0     1C 00 00 FF 
0d4d4     58 8D 86 F1 | 	sub	local01, ##14680
0d4d8     46 79 02 FB | 	rdlong	arg03, local01
0d4dc     47 77 02 F6 | 	mov	arg02, local02
0d4e0     4C E4 BF FD | 	call	#_function_window_init
0d4e4     22 00 00 FF 
0d4e8     FC 8D 06 F1 | 	add	local01, ##17916
0d4ec     46 9B 02 F6 | 	mov	local08, local01
0d4f0     4D 75 02 F6 | 	mov	arg01, local08
0d4f4     48 77 02 F6 | 	mov	arg02, local03
0d4f8     4C B6 BF FD | 	call	#_module_init
0d4fc     4D 75 02 F6 | 	mov	arg01, local08
0d500     F8 74 06 F1 | 	add	arg01, #248
0d504     3A 11 68 FC | 	wrlong	#8, arg01
0d508     04 74 06 F1 | 	add	arg01, #4
0d50c     3A 11 68 FC | 	wrlong	#8, arg01
0d510     4D 75 02 F6 | 	mov	arg01, local08
0d514     00 75 06 F1 | 	add	arg01, #256
0d518     3A 15 68 FC | 	wrlong	#10, arg01
0d51c     04 74 06 F1 | 	add	arg01, #4
0d520     3A 15 68 FC | 	wrlong	#10, arg01
0d524     4D 75 02 F6 | 	mov	arg01, local08
0d528     F0 74 06 F1 | 	add	arg01, #240
0d52c     3A 01 68 FC | 	wrlong	#0, arg01
0d530     04 74 06 F1 | 	add	arg01, #4
0d534     3A DD 68 FC | 	wrlong	#110, arg01
0d538     4D 75 02 F6 | 	mov	arg01, local08
0d53c     03 76 06 F6 | 	mov	arg02, #3
0d540     38 C2 BF FD | 	call	#_module_fit_space_even
0d544     4D 75 02 F6 | 	mov	arg01, local08
0d548     03 76 06 F6 | 	mov	arg02, #3
0d54c     03 78 06 F6 | 	mov	arg03, #3
0d550     E0 C0 BF FD | 	call	#_module_align_space_even
0d554     4D 75 02 F6 | 	mov	arg01, local08
0d558     47 77 02 F6 | 	mov	arg02, local02
0d55c     34 C1 BF FD | 	call	#_module_align_above
0d560     40 8D 06 F1 | 	add	local01, #320
0d564     46 75 02 F6 | 	mov	arg01, local01
0d568     23 00 00 FF 
0d56c     3C 8D 86 F1 | 	sub	local01, ##18236
0d570     46 79 02 FB | 	rdlong	arg03, local01
0d574     4D 77 02 F6 | 	mov	arg02, local08
0d578     10 DD BF FD | 	call	#_motion_state_window_init
0d57c     A8 F0 03 F6 | 	mov	ptra, fp
0d580     B3 00 A0 FD | 	call	#popregs_
0d584                 | _status_page_init_ret
0d584     2D 00 64 FD | 	ret
0d588                 | 
0d588                 | _status_page_run
0d588     08 4C 05 F6 | 	mov	COUNT_, #8
0d58c     A9 00 A0 FD | 	call	#pushregs_
0d590     70 F0 07 F1 | 	add	ptra, #112
0d594     A8 74 62 FC | 	wrlong	arg01, fp
0d598     DA 00 00 FF 
0d59c     58 D6 05 F1 | 	add	ptr__dat__, ##111704
0d5a0     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
0d5a4     DA 00 00 FF 
0d5a8     58 D6 85 F1 | 	sub	ptr__dat__, ##111704
0d5ac     A8 8C 02 FB | 	rdlong	local01, fp
0d5b0     04 8C 06 F1 | 	add	local01, #4
0d5b4     46 75 02 FB | 	rdlong	arg01, local01
0d5b8     A8 76 02 FB | 	rdlong	arg02, fp
0d5bc     18 76 06 F1 | 	add	arg02, #24
0d5c0     5C C3 BF FD | 	call	#_module_draw
0d5c4     04 50 05 F1 | 	add	fp, #4
0d5c8     A8 74 02 F6 | 	mov	arg01, fp
0d5cc     04 50 85 F1 | 	sub	fp, #4
0d5d0     A8 78 02 FB | 	rdlong	arg03, fp
0d5d4     08 78 06 F1 | 	add	arg03, #8
0d5d8     3C 77 02 FB | 	rdlong	arg02, arg03
0d5dc     30 78 06 F6 | 	mov	arg03, #48
0d5e0     74 85 B1 FD | 	call	#__system____builtin_memmove
0d5e4     34 50 05 F1 | 	add	fp, #52
0d5e8     A8 02 48 FC | 	wrbyte	#1, fp
0d5ec     04 50 05 F1 | 	add	fp, #4
0d5f0     A8 02 48 FC | 	wrbyte	#1, fp
0d5f4     04 50 05 F1 | 	add	fp, #4
0d5f8     A8 00 68 FC | 	wrlong	#0, fp
0d5fc     3C 50 85 F1 | 	sub	fp, #60
0d600                 | ' 
0d600                 | '     while (!complete)
0d600                 | LR__0365
0d600     DA 00 00 FF 
0d604     58 D6 05 F1 | 	add	ptr__dat__, ##111704
0d608     EB 8E CA FA | 	rdbyte	local02, ptr__dat__ wz
0d60c     DA 00 00 FF 
0d610     58 D6 85 F1 | 	sub	ptr__dat__, ##111704
0d614     D8 07 90 5D |  if_ne	jmp	#LR__0394
0d618     40 50 05 F1 | 	add	fp, #64
0d61c     A8 74 02 F6 | 	mov	arg01, fp
0d620     40 50 85 F1 | 	sub	fp, #64
0d624     A8 8E 02 FB | 	rdlong	local02, fp
0d628     08 8E 06 F1 | 	add	local02, #8
0d62c     47 77 02 FB | 	rdlong	arg02, local02
0d630     30 78 06 F6 | 	mov	arg03, #48
0d634     20 85 B1 FD | 	call	#__system____builtin_memmove
0d638     44 50 05 F1 | 	add	fp, #68
0d63c     A8 8E C2 FA | 	rdbyte	local02, fp
0d640     3C 50 85 F1 | 	sub	fp, #60
0d644     A8 90 C2 FA | 	rdbyte	local03, fp
0d648     08 50 85 F1 | 	sub	fp, #8
0d64c     48 8F 0A F2 | 	cmp	local02, local03 wz
0d650     34 50 05 A1 |  if_e	add	fp, #52
0d654     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d658     34 50 85 A1 |  if_e	sub	fp, #52
0d65c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d660     5C 00 90 AD |  if_e	jmp	#LR__0368
0d664     38 50 05 F1 | 	add	fp, #56
0d668     A8 02 48 FC | 	wrbyte	#1, fp
0d66c     0C 50 05 F1 | 	add	fp, #12
0d670     A8 8E CA FA | 	rdbyte	local02, fp wz
0d674     44 50 85 F1 | 	sub	fp, #68
0d678     24 00 90 AD |  if_e	jmp	#LR__0366
0d67c     A8 74 02 FB | 	rdlong	arg01, fp
0d680     04 00 00 FF 
0d684     D8 74 06 F1 | 	add	arg01, ##2264
0d688     A8 90 02 FB | 	rdlong	local03, fp
0d68c     14 90 06 F1 | 	add	local03, #20
0d690     48 77 02 FB | 	rdlong	arg02, local03
0d694     50 77 06 F1 | 	add	arg02, #336
0d698     14 BA BF FD | 	call	#_module_set_image
0d69c     20 00 90 FD | 	jmp	#LR__0367
0d6a0                 | LR__0366
0d6a0     A8 74 02 FB | 	rdlong	arg01, fp
0d6a4     04 00 00 FF 
0d6a8     D8 74 06 F1 | 	add	arg01, ##2264
0d6ac     A8 90 02 FB | 	rdlong	local03, fp
0d6b0     14 90 06 F1 | 	add	local03, #20
0d6b4     48 77 02 FB | 	rdlong	arg02, local03
0d6b8     80 77 06 F1 | 	add	arg02, #384
0d6bc     F0 B9 BF FD | 	call	#_module_set_image
0d6c0                 | LR__0367
0d6c0                 | LR__0368
0d6c0     48 50 05 F1 | 	add	fp, #72
0d6c4     A8 8E C2 FA | 	rdbyte	local02, fp
0d6c8     3C 50 85 F1 | 	sub	fp, #60
0d6cc     A8 90 C2 FA | 	rdbyte	local03, fp
0d6d0     0C 50 85 F1 | 	sub	fp, #12
0d6d4     48 8F 0A F2 | 	cmp	local02, local03 wz
0d6d8     34 50 05 A1 |  if_e	add	fp, #52
0d6dc     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d6e0     34 50 85 A1 |  if_e	sub	fp, #52
0d6e4     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d6e8     6C 00 90 AD |  if_e	jmp	#LR__0371
0d6ec     38 50 05 F1 | 	add	fp, #56
0d6f0     A8 02 48 FC | 	wrbyte	#1, fp
0d6f4     38 50 85 F1 | 	sub	fp, #56
0d6f8     A8 8E 02 FB | 	rdlong	local02, fp
0d6fc     08 8E 06 F1 | 	add	local02, #8
0d700     47 8D 02 FB | 	rdlong	local01, local02
0d704     08 8C 06 F1 | 	add	local01, #8
0d708     46 91 CA FA | 	rdbyte	local03, local01 wz
0d70c     28 00 90 AD |  if_e	jmp	#LR__0369
0d710     A8 74 02 FB | 	rdlong	arg01, fp
0d714     05 00 00 FF 
0d718     58 75 06 F1 | 	add	arg01, ##2904
0d71c     A8 90 02 FB | 	rdlong	local03, fp
0d720     14 90 06 F1 | 	add	local03, #20
0d724     48 93 02 FB | 	rdlong	local04, local03
0d728     50 93 06 F1 | 	add	local04, #336
0d72c     49 77 02 F6 | 	mov	arg02, local04
0d730     7C B9 BF FD | 	call	#_module_set_image
0d734     20 00 90 FD | 	jmp	#LR__0370
0d738                 | LR__0369
0d738     A8 74 02 FB | 	rdlong	arg01, fp
0d73c     05 00 00 FF 
0d740     58 75 06 F1 | 	add	arg01, ##2904
0d744     A8 90 02 FB | 	rdlong	local03, fp
0d748     14 90 06 F1 | 	add	local03, #20
0d74c     48 77 02 FB | 	rdlong	arg02, local03
0d750     80 77 06 F1 | 	add	arg02, #384
0d754     58 B9 BF FD | 	call	#_module_set_image
0d758                 | LR__0370
0d758                 | LR__0371
0d758     4C 50 05 F1 | 	add	fp, #76
0d75c     A8 8E 02 FB | 	rdlong	local02, fp
0d760     3C 50 85 F1 | 	sub	fp, #60
0d764     A8 90 02 FB | 	rdlong	local03, fp
0d768     10 50 85 F1 | 	sub	fp, #16
0d76c     48 8F 0A F2 | 	cmp	local02, local03 wz
0d770     34 50 05 A1 |  if_e	add	fp, #52
0d774     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d778     34 50 85 A1 |  if_e	sub	fp, #52
0d77c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d780     24 01 90 AD |  if_e	jmp	#LR__0377
0d784     38 50 05 F1 | 	add	fp, #56
0d788     A8 02 48 FC | 	wrbyte	#1, fp
0d78c     38 50 85 F1 | 	sub	fp, #56
0d790     A8 8E 02 FB | 	rdlong	local02, fp
0d794     08 8E 06 F1 | 	add	local02, #8
0d798     47 8D 02 FB | 	rdlong	local01, local02
0d79c     0C 8C 06 F1 | 	add	local01, #12
0d7a0     46 91 0A FB | 	rdlong	local03, local01 wz
0d7a4     44 00 90 5D |  if_ne	jmp	#LR__0372
0d7a8     A8 74 02 FB | 	rdlong	arg01, fp
0d7ac     08 00 00 FF 
0d7b0     58 74 06 F1 | 	add	arg01, ##4184
0d7b4     A8 90 02 FB | 	rdlong	local03, fp
0d7b8     14 90 06 F1 | 	add	local03, #20
0d7bc     48 77 02 FB | 	rdlong	arg02, local03
0d7c0     50 77 06 F1 | 	add	arg02, #336
0d7c4     E8 B8 BF FD | 	call	#_module_set_image
0d7c8     A8 74 02 FB | 	rdlong	arg01, fp
0d7cc     09 00 00 FF 
0d7d0     D8 74 06 F1 | 	add	arg01, ##4824
0d7d4     A8 90 02 FB | 	rdlong	local03, fp
0d7d8     14 90 06 F1 | 	add	local03, #20
0d7dc     48 77 02 FB | 	rdlong	arg02, local03
0d7e0     50 77 06 F1 | 	add	arg02, #336
0d7e4     C8 B8 BF FD | 	call	#_module_set_image
0d7e8     BC 00 90 FD | 	jmp	#LR__0376
0d7ec                 | LR__0372
0d7ec     A8 8E 02 FB | 	rdlong	local02, fp
0d7f0     08 8E 06 F1 | 	add	local02, #8
0d7f4     47 8D 02 FB | 	rdlong	local01, local02
0d7f8     0C 8C 06 F1 | 	add	local01, #12
0d7fc     46 91 02 FB | 	rdlong	local03, local01
0d800     02 90 0E F2 | 	cmp	local03, #2 wz
0d804     44 00 90 5D |  if_ne	jmp	#LR__0373
0d808     A8 74 02 FB | 	rdlong	arg01, fp
0d80c     08 00 00 FF 
0d810     58 74 06 F1 | 	add	arg01, ##4184
0d814     A8 90 02 FB | 	rdlong	local03, fp
0d818     14 90 06 F1 | 	add	local03, #20
0d81c     48 77 02 FB | 	rdlong	arg02, local03
0d820     50 77 06 F1 | 	add	arg02, #336
0d824     88 B8 BF FD | 	call	#_module_set_image
0d828     A8 74 02 FB | 	rdlong	arg01, fp
0d82c     09 00 00 FF 
0d830     D8 74 06 F1 | 	add	arg01, ##4824
0d834     A8 90 02 FB | 	rdlong	local03, fp
0d838     14 90 06 F1 | 	add	local03, #20
0d83c     48 77 02 FB | 	rdlong	arg02, local03
0d840     80 77 06 F1 | 	add	arg02, #384
0d844     68 B8 BF FD | 	call	#_module_set_image
0d848     5C 00 90 FD | 	jmp	#LR__0375
0d84c                 | LR__0373
0d84c     A8 8E 02 FB | 	rdlong	local02, fp
0d850     08 8E 06 F1 | 	add	local02, #8
0d854     47 8D 02 FB | 	rdlong	local01, local02
0d858     0C 8C 06 F1 | 	add	local01, #12
0d85c     46 91 02 FB | 	rdlong	local03, local01
0d860     01 90 0E F2 | 	cmp	local03, #1 wz
0d864     40 00 90 5D |  if_ne	jmp	#LR__0374
0d868     A8 74 02 FB | 	rdlong	arg01, fp
0d86c     08 00 00 FF 
0d870     58 74 06 F1 | 	add	arg01, ##4184
0d874     A8 90 02 FB | 	rdlong	local03, fp
0d878     14 90 06 F1 | 	add	local03, #20
0d87c     48 77 02 FB | 	rdlong	arg02, local03
0d880     80 77 06 F1 | 	add	arg02, #384
0d884     28 B8 BF FD | 	call	#_module_set_image
0d888     A8 74 02 FB | 	rdlong	arg01, fp
0d88c     09 00 00 FF 
0d890     D8 74 06 F1 | 	add	arg01, ##4824
0d894     A8 90 02 FB | 	rdlong	local03, fp
0d898     14 90 06 F1 | 	add	local03, #20
0d89c     48 77 02 FB | 	rdlong	arg02, local03
0d8a0     50 77 06 F1 | 	add	arg02, #336
0d8a4     08 B8 BF FD | 	call	#_module_set_image
0d8a8                 | LR__0374
0d8a8                 | LR__0375
0d8a8                 | LR__0376
0d8a8                 | LR__0377
0d8a8     50 50 05 F1 | 	add	fp, #80
0d8ac     A8 8E C2 FA | 	rdbyte	local02, fp
0d8b0     3C 50 85 F1 | 	sub	fp, #60
0d8b4     A8 90 C2 FA | 	rdbyte	local03, fp
0d8b8     14 50 85 F1 | 	sub	fp, #20
0d8bc     48 8F 0A F2 | 	cmp	local02, local03 wz
0d8c0     34 50 05 A1 |  if_e	add	fp, #52
0d8c4     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d8c8     34 50 85 A1 |  if_e	sub	fp, #52
0d8cc     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d8d0     68 00 90 AD |  if_e	jmp	#LR__0380
0d8d4     38 50 05 F1 | 	add	fp, #56
0d8d8     A8 02 48 FC | 	wrbyte	#1, fp
0d8dc     38 50 85 F1 | 	sub	fp, #56
0d8e0     A8 8E 02 FB | 	rdlong	local02, fp
0d8e4     08 8E 06 F1 | 	add	local02, #8
0d8e8     47 8D 02 FB | 	rdlong	local01, local02
0d8ec     10 8C 06 F1 | 	add	local01, #16
0d8f0     46 91 CA FA | 	rdbyte	local03, local01 wz
0d8f4     24 00 90 AD |  if_e	jmp	#LR__0378
0d8f8     A8 74 02 FB | 	rdlong	arg01, fp
0d8fc     06 00 00 FF 
0d900     D8 75 06 F1 | 	add	arg01, ##3544
0d904     A8 90 02 FB | 	rdlong	local03, fp
0d908     14 90 06 F1 | 	add	local03, #20
0d90c     48 77 02 FB | 	rdlong	arg02, local03
0d910     50 77 06 F1 | 	add	arg02, #336
0d914     98 B7 BF FD | 	call	#_module_set_image
0d918     20 00 90 FD | 	jmp	#LR__0379
0d91c                 | LR__0378
0d91c     A8 74 02 FB | 	rdlong	arg01, fp
0d920     06 00 00 FF 
0d924     D8 75 06 F1 | 	add	arg01, ##3544
0d928     A8 90 02 FB | 	rdlong	local03, fp
0d92c     14 90 06 F1 | 	add	local03, #20
0d930     48 77 02 FB | 	rdlong	arg02, local03
0d934     80 77 06 F1 | 	add	arg02, #384
0d938     74 B7 BF FD | 	call	#_module_set_image
0d93c                 | LR__0379
0d93c                 | LR__0380
0d93c     51 50 05 F1 | 	add	fp, #81
0d940     A8 8E C2 FA | 	rdbyte	local02, fp
0d944     3C 50 85 F1 | 	sub	fp, #60
0d948     A8 90 C2 FA | 	rdbyte	local03, fp
0d94c     15 50 85 F1 | 	sub	fp, #21
0d950     48 8F 0A F2 | 	cmp	local02, local03 wz
0d954     34 50 05 A1 |  if_e	add	fp, #52
0d958     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d95c     34 50 85 A1 |  if_e	sub	fp, #52
0d960     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d964     68 00 90 AD |  if_e	jmp	#LR__0383
0d968     38 50 05 F1 | 	add	fp, #56
0d96c     A8 02 48 FC | 	wrbyte	#1, fp
0d970     38 50 85 F1 | 	sub	fp, #56
0d974     A8 8E 02 FB | 	rdlong	local02, fp
0d978     08 8E 06 F1 | 	add	local02, #8
0d97c     47 8D 02 FB | 	rdlong	local01, local02
0d980     11 8C 06 F1 | 	add	local01, #17
0d984     46 91 CA FA | 	rdbyte	local03, local01 wz
0d988     24 00 90 AD |  if_e	jmp	#LR__0381
0d98c     A8 74 02 FB | 	rdlong	arg01, fp
0d990     0A 00 00 FF 
0d994     58 75 06 F1 | 	add	arg01, ##5464
0d998     A8 90 02 FB | 	rdlong	local03, fp
0d99c     14 90 06 F1 | 	add	local03, #20
0d9a0     48 77 02 FB | 	rdlong	arg02, local03
0d9a4     50 77 06 F1 | 	add	arg02, #336
0d9a8     04 B7 BF FD | 	call	#_module_set_image
0d9ac     20 00 90 FD | 	jmp	#LR__0382
0d9b0                 | LR__0381
0d9b0     A8 74 02 FB | 	rdlong	arg01, fp
0d9b4     0A 00 00 FF 
0d9b8     58 75 06 F1 | 	add	arg01, ##5464
0d9bc     A8 90 02 FB | 	rdlong	local03, fp
0d9c0     14 90 06 F1 | 	add	local03, #20
0d9c4     48 77 02 FB | 	rdlong	arg02, local03
0d9c8     80 77 06 F1 | 	add	arg02, #384
0d9cc     E0 B6 BF FD | 	call	#_module_set_image
0d9d0                 | LR__0382
0d9d0                 | LR__0383
0d9d0     52 50 05 F1 | 	add	fp, #82
0d9d4     A8 8E C2 FA | 	rdbyte	local02, fp
0d9d8     3C 50 85 F1 | 	sub	fp, #60
0d9dc     A8 90 C2 FA | 	rdbyte	local03, fp
0d9e0     16 50 85 F1 | 	sub	fp, #22
0d9e4     48 8F 0A F2 | 	cmp	local02, local03 wz
0d9e8     34 50 05 A1 |  if_e	add	fp, #52
0d9ec     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d9f0     34 50 85 A1 |  if_e	sub	fp, #52
0d9f4     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d9f8     68 00 90 AD |  if_e	jmp	#LR__0386
0d9fc     38 50 05 F1 | 	add	fp, #56
0da00     A8 02 48 FC | 	wrbyte	#1, fp
0da04     38 50 85 F1 | 	sub	fp, #56
0da08     A8 8E 02 FB | 	rdlong	local02, fp
0da0c     08 8E 06 F1 | 	add	local02, #8
0da10     47 8D 02 FB | 	rdlong	local01, local02
0da14     12 8C 06 F1 | 	add	local01, #18
0da18     46 91 CA FA | 	rdbyte	local03, local01 wz
0da1c     24 00 90 AD |  if_e	jmp	#LR__0384
0da20     A8 74 02 FB | 	rdlong	arg01, fp
0da24     0B 00 00 FF 
0da28     D8 75 06 F1 | 	add	arg01, ##6104
0da2c     A8 90 02 FB | 	rdlong	local03, fp
0da30     14 90 06 F1 | 	add	local03, #20
0da34     48 77 02 FB | 	rdlong	arg02, local03
0da38     50 77 06 F1 | 	add	arg02, #336
0da3c     70 B6 BF FD | 	call	#_module_set_image
0da40     20 00 90 FD | 	jmp	#LR__0385
0da44                 | LR__0384
0da44     A8 74 02 FB | 	rdlong	arg01, fp
0da48     0B 00 00 FF 
0da4c     D8 75 06 F1 | 	add	arg01, ##6104
0da50     A8 90 02 FB | 	rdlong	local03, fp
0da54     14 90 06 F1 | 	add	local03, #20
0da58     48 77 02 FB | 	rdlong	arg02, local03
0da5c     80 77 06 F1 | 	add	arg02, #384
0da60     4C B6 BF FD | 	call	#_module_set_image
0da64                 | LR__0385
0da64                 | LR__0386
0da64     53 50 05 F1 | 	add	fp, #83
0da68     A8 8E C2 FA | 	rdbyte	local02, fp
0da6c     3C 50 85 F1 | 	sub	fp, #60
0da70     A8 96 C2 FA | 	rdbyte	local06, fp
0da74     17 50 85 F1 | 	sub	fp, #23
0da78     4B 91 E2 F8 | 	getbyte	local03, local06, #0
0da7c     48 8F 0A F2 | 	cmp	local02, local03 wz
0da80     34 50 05 A1 |  if_e	add	fp, #52
0da84     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0da88     34 50 85 A1 |  if_e	sub	fp, #52
0da8c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0da90     78 00 90 AD |  if_e	jmp	#LR__0389
0da94     38 50 05 F1 | 	add	fp, #56
0da98     A8 02 48 FC | 	wrbyte	#1, fp
0da9c     38 50 85 F1 | 	sub	fp, #56
0daa0     A8 8E 02 FB | 	rdlong	local02, fp
0daa4     08 8E 06 F1 | 	add	local02, #8
0daa8     47 8D 02 FB | 	rdlong	local01, local02
0daac     13 8C 06 F1 | 	add	local01, #19
0dab0     46 97 CA FA | 	rdbyte	local06, local01 wz
0dab4     2C 00 90 AD |  if_e	jmp	#LR__0387
0dab8     A8 74 02 FB | 	rdlong	arg01, fp
0dabc     0D 00 00 FF 
0dac0     58 74 06 F1 | 	add	arg01, ##6744
0dac4     A8 90 02 FB | 	rdlong	local03, fp
0dac8     14 90 06 F1 | 	add	local03, #20
0dacc     48 95 02 FB | 	rdlong	local05, local03
0dad0     4A 93 02 F6 | 	mov	local04, local05
0dad4     50 93 06 F1 | 	add	local04, #336
0dad8     49 77 02 F6 | 	mov	arg02, local04
0dadc     D0 B5 BF FD | 	call	#_module_set_image
0dae0     28 00 90 FD | 	jmp	#LR__0388
0dae4                 | LR__0387
0dae4     A8 74 02 FB | 	rdlong	arg01, fp
0dae8     0D 00 00 FF 
0daec     58 74 06 F1 | 	add	arg01, ##6744
0daf0     A8 90 02 FB | 	rdlong	local03, fp
0daf4     14 90 06 F1 | 	add	local03, #20
0daf8     48 95 02 FB | 	rdlong	local05, local03
0dafc     4A 93 02 F6 | 	mov	local04, local05
0db00     80 93 06 F1 | 	add	local04, #384
0db04     49 77 02 F6 | 	mov	arg02, local04
0db08     A4 B5 BF FD | 	call	#_module_set_image
0db0c                 | LR__0388
0db0c                 | LR__0389
0db0c     A8 74 02 FB | 	rdlong	arg01, fp
0db10     18 74 06 F1 | 	add	arg01, #24
0db14     A8 90 02 FB | 	rdlong	local03, fp
0db18     04 90 06 F1 | 	add	local03, #4
0db1c     48 77 02 FB | 	rdlong	arg02, local03
0db20     A8 78 02 FB | 	rdlong	arg03, fp
0db24     48 B2 BF FD | 	call	#_module_touch_check
0db28     A8 8C 02 FB | 	rdlong	local01, fp
0db2c     04 8C 06 F1 | 	add	local01, #4
0db30     46 75 02 FB | 	rdlong	arg01, local01
0db34     A8 76 02 FB | 	rdlong	arg02, fp
0db38     18 76 06 F1 | 	add	arg02, #24
0db3c     A8 78 02 FB | 	rdlong	arg03, fp
0db40     5C B1 BF FD | 	call	#_module_update_check
0db44     38 50 05 F1 | 	add	fp, #56
0db48     A8 8E CA FA | 	rdbyte	local02, fp wz
0db4c     38 50 85 F1 | 	sub	fp, #56
0db50     28 00 90 AD |  if_e	jmp	#LR__0390
0db54     A8 8C 02 FB | 	rdlong	local01, fp
0db58     04 8C 06 F1 | 	add	local01, #4
0db5c     46 75 02 FB | 	rdlong	arg01, local01
0db60     A8 76 02 FB | 	rdlong	arg02, fp
0db64     01 00 00 FF 
0db68     D8 77 06 F1 | 	add	arg02, ##984
0db6c     B0 BD BF FD | 	call	#_module_draw
0db70     38 50 05 F1 | 	add	fp, #56
0db74     A8 00 48 FC | 	wrbyte	#0, fp
0db78     38 50 85 F1 | 	sub	fp, #56
0db7c                 | LR__0390
0db7c                 | '         {
0db7c                 | '             module_draw(page->display, &(page->machineStateWindow));
0db7c                 | '             updateMachineState =  (0) ;
0db7c                 | '         }
0db7c                 | '         while (display_update_touch(page->display) == 0 && state_machine_equal(page->stateMachine, &currentState))
0db7c                 | LR__0391
0db7c     A8 8C 02 FB | 	rdlong	local01, fp
0db80     04 8C 06 F1 | 	add	local01, #4
0db84     46 75 02 FB | 	rdlong	arg01, local01
0db88     58 7C BF FD | 	call	#_display_update_touch
0db8c     00 34 0E F2 | 	cmp	result1, #0 wz
0db90     30 02 90 5D |  if_ne	jmp	#LR__0393
0db94     A8 90 02 FB | 	rdlong	local03, fp
0db98     08 90 06 F1 | 	add	local03, #8
0db9c     48 75 02 FB | 	rdlong	arg01, local03
0dba0     40 50 05 F1 | 	add	fp, #64
0dba4     A8 76 02 F6 | 	mov	arg02, fp
0dba8     40 50 85 F1 | 	sub	fp, #64
0dbac     F0 51 BF FD | 	call	#_state_machine_equal
0dbb0     00 34 0E F2 | 	cmp	result1, #0 wz
0dbb4     0C 02 90 AD |  if_e	jmp	#LR__0393
0dbb8     E4 7E B1 FD | 	call	#__system___getms
0dbbc     1A 8F 02 F6 | 	mov	local02, result1
0dbc0     3C 50 05 F1 | 	add	fp, #60
0dbc4     A8 90 02 FB | 	rdlong	local03, fp
0dbc8     3C 50 85 F1 | 	sub	fp, #60
0dbcc     48 8F 82 F1 | 	sub	local02, local03
0dbd0     65 8E 16 F2 | 	cmp	local02, #101 wc
0dbd4     10 01 90 CD |  if_b	jmp	#LR__0392
0dbd8     C4 7E B1 FD | 	call	#__system___getms
0dbdc     3C 50 05 F1 | 	add	fp, #60
0dbe0     A8 34 62 FC | 	wrlong	result1, fp
0dbe4     3C 50 85 F1 | 	sub	fp, #60
0dbe8     A8 8E 02 FB | 	rdlong	local02, fp
0dbec     29 00 00 FF 
0dbf0     DC 8F 06 F1 | 	add	local02, ##21468
0dbf4     4F 01 00 FF 
0dbf8     86 8D 06 F6 | 	mov	local01, ##@LR__2007
0dbfc     A8 96 02 FB | 	rdlong	local06, fp
0dc00     10 96 06 F1 | 	add	local06, #16
0dc04     4B 95 02 FB | 	rdlong	local05, local06
0dc08     04 94 06 F1 | 	add	local05, #4
0dc0c     4A 75 02 FB | 	rdlong	arg01, local05
0dc10     A8 94 02 FB | 	rdlong	local05, fp
0dc14     0C 94 06 F1 | 	add	local05, #12
0dc18     4A 77 02 FB | 	rdlong	arg02, local05
0dc1c     18 76 06 F1 | 	add	arg02, #24
0dc20     FC 23 B0 FD | 	call	#_steps_to_mm
0dc24     1A 91 02 F6 | 	mov	local03, result1
0dc28     47 75 02 F6 | 	mov	arg01, local02
0dc2c     46 77 02 F6 | 	mov	arg02, local01
0dc30     F8 79 02 F6 | 	mov	arg03, ptra
0dc34     61 91 66 FC | 	wrlong	local03, ptra++
0dc38     58 41 BF FD | 	call	#_sprintf
0dc3c     04 F0 87 F1 | 	sub	ptra, #4
0dc40     A8 8E 02 FB | 	rdlong	local02, fp
0dc44     29 00 00 FF 
0dc48     C8 8F 06 F1 | 	add	local02, ##21448
0dc4c     4F 01 00 FF 
0dc50     8E 8D 06 F6 | 	mov	local01, ##@LR__2008
0dc54     A8 96 02 FB | 	rdlong	local06, fp
0dc58     10 96 06 F1 | 	add	local06, #16
0dc5c     4B 95 02 FB | 	rdlong	local05, local06
0dc60     4A 75 02 FB | 	rdlong	arg01, local05
0dc64     A8 94 02 FB | 	rdlong	local05, fp
0dc68     0C 94 06 F1 | 	add	local05, #12
0dc6c     4A 99 02 FB | 	rdlong	local07, local05
0dc70     18 98 06 F1 | 	add	local07, #24
0dc74     4C 77 02 F6 | 	mov	arg02, local07
0dc78     E8 AA BF FD | 	call	#_raw_to_force
0dc7c     1A 75 02 F6 | 	mov	arg01, result1
0dc80     70 9A B1 FD | 	call	#__system___float_fromint
0dc84     1A 75 02 F6 | 	mov	arg01, result1
0dc88     00 3D 22 FF 
0dc8c     00 76 06 F6 | 	mov	arg02, ##1148846080
0dc90     B4 9F B1 FD | 	call	#__system___float_div
0dc94     1A 91 02 F6 | 	mov	local03, result1
0dc98     47 75 02 F6 | 	mov	arg01, local02
0dc9c     46 77 02 F6 | 	mov	arg02, local01
0dca0     F8 79 02 F6 | 	mov	arg03, ptra
0dca4     61 91 66 FC | 	wrlong	local03, ptra++
0dca8     E8 40 BF FD | 	call	#_sprintf
0dcac     04 F0 87 F1 | 	sub	ptra, #4
0dcb0     A8 8C 02 FB | 	rdlong	local01, fp
0dcb4     04 8C 06 F1 | 	add	local01, #4
0dcb8     46 75 02 FB | 	rdlong	arg01, local01
0dcbc     A8 76 02 FB | 	rdlong	arg02, fp
0dcc0     0F 00 00 FF 
0dcc4     58 77 06 F1 | 	add	arg02, ##8024
0dcc8     54 BC BF FD | 	call	#_module_draw
0dccc     A8 8C 02 FB | 	rdlong	local01, fp
0dcd0     04 8C 06 F1 | 	add	local01, #4
0dcd4     46 75 02 FB | 	rdlong	arg01, local01
0dcd8     A8 76 02 FB | 	rdlong	arg02, fp
0dcdc     10 00 00 FF 
0dce0     D8 77 06 F1 | 	add	arg02, ##8664
0dce4     38 BC BF FD | 	call	#_module_draw
0dce8                 | LR__0392
0dce8     A8 8E 02 FB | 	rdlong	local02, fp
0dcec     11 00 00 FF 
0dcf0     18 8F 06 F1 | 	add	local02, ##8984
0dcf4     A8 90 02 FB | 	rdlong	local03, fp
0dcf8     10 90 06 F1 | 	add	local03, #16
0dcfc     48 97 02 FB | 	rdlong	local06, local03
0dd00     04 96 06 F1 | 	add	local06, #4
0dd04     4B 75 02 FB | 	rdlong	arg01, local06
0dd08     A8 96 02 FB | 	rdlong	local06, fp
0dd0c     0C 96 06 F1 | 	add	local06, #12
0dd10     4B 77 02 FB | 	rdlong	arg02, local06
0dd14     18 76 06 F1 | 	add	arg02, #24
0dd18     04 23 B0 FD | 	call	#_steps_to_mm
0dd1c     1A 77 02 F6 | 	mov	arg02, result1
0dd20     47 75 02 F6 | 	mov	arg01, local02
0dd24     74 E9 BF FD | 	call	#_module_graph_insert
0dd28     A8 8C 02 FB | 	rdlong	local01, fp
0dd2c     04 8C 06 F1 | 	add	local01, #4
0dd30     46 75 02 FB | 	rdlong	arg01, local01
0dd34     A8 76 02 FB | 	rdlong	arg02, fp
0dd38     11 00 00 FF 
0dd3c     18 77 06 F1 | 	add	arg02, ##8984
0dd40     DC BB BF FD | 	call	#_module_draw
0dd44     A8 8E 02 FB | 	rdlong	local02, fp
0dd48     16 00 00 FF 
0dd4c     9C 8F 06 F1 | 	add	local02, ##11676
0dd50     A8 90 02 FB | 	rdlong	local03, fp
0dd54     10 90 06 F1 | 	add	local03, #16
0dd58     48 97 02 FB | 	rdlong	local06, local03
0dd5c     4B 75 02 FB | 	rdlong	arg01, local06
0dd60     A8 96 02 FB | 	rdlong	local06, fp
0dd64     0C 96 06 F1 | 	add	local06, #12
0dd68     4B 93 02 FB | 	rdlong	local04, local06
0dd6c     49 95 02 F6 | 	mov	local05, local04
0dd70     18 94 06 F1 | 	add	local05, #24
0dd74     4A 9B 02 F6 | 	mov	local08, local05
0dd78     4D 77 02 F6 | 	mov	arg02, local08
0dd7c     E4 A9 BF FD | 	call	#_raw_to_force
0dd80     1A 75 02 F6 | 	mov	arg01, result1
0dd84     6C 99 B1 FD | 	call	#__system___float_fromint
0dd88     1A 75 02 F6 | 	mov	arg01, result1
0dd8c     00 3D 22 FF 
0dd90     00 76 06 F6 | 	mov	arg02, ##1148846080
0dd94     B0 9E B1 FD | 	call	#__system___float_div
0dd98     1A 77 02 F6 | 	mov	arg02, result1
0dd9c     47 75 02 F6 | 	mov	arg01, local02
0dda0     F8 E8 BF FD | 	call	#_module_graph_insert
0dda4     A8 8C 02 FB | 	rdlong	local01, fp
0dda8     04 8C 06 F1 | 	add	local01, #4
0ddac     46 75 02 FB | 	rdlong	arg01, local01
0ddb0     A8 76 02 FB | 	rdlong	arg02, fp
0ddb4     16 00 00 FF 
0ddb8     9C 77 06 F1 | 	add	arg02, ##11676
0ddbc     60 BB BF FD | 	call	#_module_draw
0ddc0     B8 FD 9F FD | 	jmp	#LR__0391
0ddc4                 | LR__0393
0ddc4     04 50 05 F1 | 	add	fp, #4
0ddc8     A8 74 02 F6 | 	mov	arg01, fp
0ddcc     3C 50 05 F1 | 	add	fp, #60
0ddd0     A8 76 02 F6 | 	mov	arg02, fp
0ddd4     40 50 85 F1 | 	sub	fp, #64
0ddd8     30 78 06 F6 | 	mov	arg03, #48
0dddc     78 7D B1 FD | 	call	#__system____builtin_memmove
0dde0     34 50 05 F1 | 	add	fp, #52
0dde4     A8 00 48 FC | 	wrbyte	#0, fp
0dde8     34 50 85 F1 | 	sub	fp, #52
0ddec     10 F8 9F FD | 	jmp	#LR__0365
0ddf0                 | LR__0394
0ddf0     A8 F0 03 F6 | 	mov	ptra, fp
0ddf4     B3 00 A0 FD | 	call	#popregs_
0ddf8                 | _status_page_run_ret
0ddf8     2D 00 64 FD | 	ret
0ddfc                 | 
0ddfc                 | _control_begin
0ddfc     3A 77 62 FC | 	wrlong	arg02, arg01
0de00     04 74 06 F1 | 	add	arg01, #4
0de04     3A 7B 62 FC | 	wrlong	arg04, arg01
0de08     04 74 06 F1 | 	add	arg01, #4
0de0c     3A 79 62 FC | 	wrlong	arg03, arg01
0de10     08 74 86 F1 | 	sub	arg01, #8
0de14     DA 00 00 FF 
0de18     E8 D6 05 F1 | 	add	ptr__dat__, ##111848
0de1c     EB 7A 02 F6 | 	mov	arg04, ptr__dat__
0de20     3D 93 61 FC | 	wrlong	objptr, arg04
0de24     04 7A 06 F1 | 	add	arg04, #4
0de28     3D D5 61 FC | 	wrlong	ptr__control_cog_0848_, arg04
0de2c     04 7A 06 F1 | 	add	arg04, #4
0de30     3D 75 62 FC | 	wrlong	arg01, arg04
0de34     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0de38     DA 00 00 FF 
0de3c     E8 D6 85 F1 | 	sub	ptr__dat__, ##111848
0de40     1E 34 06 F6 | 	mov	result1, #30
0de44     28 78 62 FD | 	setq	arg03
0de48     C6 34 F2 FC | 	coginit	result1, entryptr__ wc
0de4c     01 34 66 C6 |  if_b	neg	result1, #1
0de50     1F 00 00 FF 
0de54     54 75 06 F1 | 	add	arg01, ##16212
0de58     3A 35 62 FC | 	wrlong	result1, arg01
0de5c     FF FF 7F FF 
0de60     FF 35 0E F2 | 	cmp	result1, ##-1 wz
0de64                 | '     {
0de64                 | '         return  (1) ;
0de64     01 34 06 56 |  if_ne	mov	result1, #1
0de68                 | '     }
0de68                 | '     return  (0) ;
0de68     00 34 06 A6 |  if_e	mov	result1, #0
0de6c                 | _control_begin_ret
0de6c     2D 00 64 FD | 	ret
0de70                 | 
0de70                 | _automatic_page_init
0de70     05 4C 05 F6 | 	mov	COUNT_, #5
0de74     A9 00 A0 FD | 	call	#pushregs_
0de78     3A 8D 02 F6 | 	mov	local01, arg01
0de7c     46 77 62 FC | 	wrlong	arg02, local01
0de80     04 8C 06 F1 | 	add	local01, #4
0de84     46 79 62 FC | 	wrlong	arg03, local01
0de88     04 8C 06 F1 | 	add	local01, #4
0de8c     46 7B 62 FC | 	wrlong	arg04, local01
0de90     04 8C 06 F1 | 	add	local01, #4
0de94     46 7D 62 FC | 	wrlong	arg05, local01
0de98     08 8C 06 F1 | 	add	local01, #8
0de9c     46 8F 02 F6 | 	mov	local02, local01
0dea0     47 75 02 F6 | 	mov	arg01, local02
0dea4     00 76 06 F6 | 	mov	arg02, #0
0dea8     9C AC BF FD | 	call	#_module_init
0deac     40 8D 06 F1 | 	add	local01, #320
0deb0     46 91 02 F6 | 	mov	local03, local01
0deb4     48 75 02 F6 | 	mov	arg01, local03
0deb8     47 77 02 F6 | 	mov	arg02, local02
0debc     88 AC BF FD | 	call	#_module_init
0dec0     48 75 02 F6 | 	mov	arg01, local03
0dec4     CC 74 06 F1 | 	add	arg01, #204
0dec8     3A 0B 68 FC | 	wrlong	#5, arg01
0decc     24 74 06 F1 | 	add	arg01, #36
0ded0     02 00 80 FF 
0ded4     3A 01 68 FC | 	wrlong	##1024, arg01
0ded8     04 74 06 F1 | 	add	arg01, #4
0dedc     01 00 80 FF 
0dee0     3A B1 68 FC | 	wrlong	##600, arg01
0dee4     48 75 02 F6 | 	mov	arg01, local03
0dee8     E8 74 06 F1 | 	add	arg01, #232
0deec     3A 01 68 FC | 	wrlong	#0, arg01
0def0     04 74 06 F1 | 	add	arg01, #4
0def4     3A 01 68 FC | 	wrlong	#0, arg01
0def8     48 75 02 F6 | 	mov	arg01, local03
0defc     F8 74 06 F1 | 	add	arg01, #248
0df00     3A 29 68 FC | 	wrlong	#20, arg01
0df04     04 74 06 F1 | 	add	arg01, #4
0df08     3A 29 68 FC | 	wrlong	#20, arg01
0df0c     48 75 02 F6 | 	mov	arg01, local03
0df10     01 00 00 FF 
0df14     73 78 06 F6 | 	mov	arg03, ##627
0df18     10 75 06 F1 | 	add	arg01, #272
0df1c     01 00 80 FF 
0df20     3A E7 68 FC | 	wrlong	##627, arg01
0df24     04 74 86 F1 | 	sub	arg01, #4
0df28     01 00 80 FF 
0df2c     3A E7 68 FC | 	wrlong	##627, arg01
0df30     C9 74 02 F6 | 	mov	arg01, objptr
0df34     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
0df38     FC 7C B1 FD | 	call	#__system___make_methodptr
0df3c     48 75 02 F6 | 	mov	arg01, local03
0df40     30 75 06 F1 | 	add	arg01, #304
0df44     3A 35 62 FC | 	wrlong	result1, arg01
0df48     40 8D 06 F1 | 	add	local01, #320
0df4c     46 93 02 F6 | 	mov	local04, local01
0df50     49 75 02 F6 | 	mov	arg01, local04
0df54     48 77 02 F6 | 	mov	arg02, local03
0df58     EC AB BF FD | 	call	#_module_init
0df5c     49 75 02 F6 | 	mov	arg01, local04
0df60     CC 74 06 F1 | 	add	arg01, #204
0df64     3A 0B 68 FC | 	wrlong	#5, arg01
0df68     24 74 06 F1 | 	add	arg01, #36
0df6c     3A AB 6A FC | 	wrlong	#341, arg01
0df70     04 74 06 F1 | 	add	arg01, #4
0df74     3A 01 68 FC | 	wrlong	#0, arg01
0df78     49 75 02 F6 | 	mov	arg01, local04
0df7c     8C B8 BF FD | 	call	#_module_fit_height
0df80     49 75 02 F6 | 	mov	arg01, local04
0df84     F8 74 06 F1 | 	add	arg01, #248
0df88     3A 29 68 FC | 	wrlong	#20, arg01
0df8c     04 74 06 F1 | 	add	arg01, #4
0df90     3A 29 68 FC | 	wrlong	#20, arg01
0df94     49 75 02 F6 | 	mov	arg01, local04
0df98     00 75 06 F1 | 	add	arg01, #256
0df9c     3A 15 68 FC | 	wrlong	#10, arg01
0dfa0     04 74 06 F1 | 	add	arg01, #4
0dfa4     3A 15 68 FC | 	wrlong	#10, arg01
0dfa8     49 75 02 F6 | 	mov	arg01, local04
0dfac     10 75 06 F1 | 	add	arg01, #272
0dfb0     1D 00 80 FF 
0dfb4     3A E9 6A FC | 	wrlong	##15220, arg01
0dfb8     04 74 86 F1 | 	sub	arg01, #4
0dfbc     01 00 80 FF 
0dfc0     3A E7 68 FC | 	wrlong	##627, arg01
0dfc4     49 75 02 F6 | 	mov	arg01, local04
0dfc8     01 76 06 F6 | 	mov	arg02, #1
0dfcc     02 78 06 F6 | 	mov	arg03, #2
0dfd0     EC B5 BF FD | 	call	#_module_align_center_sector
0dfd4     49 75 02 F6 | 	mov	arg01, local04
0dfd8     B8 B4 BF FD | 	call	#_module_align_inner_top
0dfdc     40 8D 06 F1 | 	add	local01, #320
0dfe0     46 8F 02 F6 | 	mov	local02, local01
0dfe4     47 75 02 F6 | 	mov	arg01, local02
0dfe8     49 77 02 F6 | 	mov	arg02, local04
0dfec     58 AB BF FD | 	call	#_module_init
0dff0     47 75 02 F6 | 	mov	arg01, local02
0dff4     05 78 06 F6 | 	mov	arg03, #5
0dff8     00 75 06 F1 | 	add	arg01, #256
0dffc     3A 0B 68 FC | 	wrlong	#5, arg01
0e000     04 74 06 F1 | 	add	arg01, #4
0e004     3A 0B 68 FC | 	wrlong	#5, arg01
0e008     FC 00 00 FF 
0e00c     C0 D6 05 F1 | 	add	ptr__dat__, ##129216
0e010     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e014     FC 00 00 FF 
0e018     C0 D6 85 F1 | 	sub	ptr__dat__, ##129216
0e01c     47 75 02 F6 | 	mov	arg01, local02
0e020     C0 B0 BF FD | 	call	#_module_set_text
0e024     47 75 02 F6 | 	mov	arg01, local02
0e028     02 76 06 F6 | 	mov	arg02, #2
0e02c     F4 B1 BF FD | 	call	#_module_text_font
0e030     47 75 02 F6 | 	mov	arg01, local02
0e034     08 B1 BF FD | 	call	#_module_text_fit
0e038     47 75 02 F6 | 	mov	arg01, local02
0e03c     CC 74 06 F1 | 	add	arg01, #204
0e040     3A 79 02 FB | 	rdlong	arg03, arg01
0e044     CC 74 86 F1 | 	sub	arg01, #204
0e048     01 78 0E F2 | 	cmp	arg03, #1 wz
0e04c                 | '         return;
0e04c     D8 74 06 A1 |  if_e	add	arg01, #216
0e050     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0e054     47 75 02 F6 | 	mov	arg01, local02
0e058     10 75 06 F1 | 	add	arg01, #272
0e05c     3A 01 68 FC | 	wrlong	#0, arg01
0e060     04 74 86 F1 | 	sub	arg01, #4
0e064     1D 00 80 FF 
0e068     3A E9 6A FC | 	wrlong	##15220, arg01
0e06c     47 75 02 F6 | 	mov	arg01, local02
0e070     20 B4 BF FD | 	call	#_module_align_inner_top
0e074     47 75 02 F6 | 	mov	arg01, local02
0e078     01 76 06 F6 | 	mov	arg02, #1
0e07c     02 78 06 F6 | 	mov	arg03, #2
0e080     3C B5 BF FD | 	call	#_module_align_center_sector
0e084     40 8D 06 F1 | 	add	local01, #320
0e088     46 95 02 F6 | 	mov	local05, local01
0e08c     4A 75 02 F6 | 	mov	arg01, local05
0e090     49 77 02 F6 | 	mov	arg02, local04
0e094     B0 AA BF FD | 	call	#_module_init
0e098     4A 75 02 F6 | 	mov	arg01, local05
0e09c     05 78 06 F6 | 	mov	arg03, #5
0e0a0     00 75 06 F1 | 	add	arg01, #256
0e0a4     3A 0B 68 FC | 	wrlong	#5, arg01
0e0a8     04 74 06 F1 | 	add	arg01, #4
0e0ac     3A 0B 68 FC | 	wrlong	#5, arg01
0e0b0     04 00 00 FF 
0e0b4     C0 8C 06 F1 | 	add	local01, ##2240
0e0b8     46 77 02 F6 | 	mov	arg02, local01
0e0bc     4A 75 02 F6 | 	mov	arg01, local05
0e0c0     20 B0 BF FD | 	call	#_module_set_text
0e0c4     4A 75 02 F6 | 	mov	arg01, local05
0e0c8     01 76 06 F6 | 	mov	arg02, #1
0e0cc     54 B1 BF FD | 	call	#_module_text_font
0e0d0     4A 75 02 F6 | 	mov	arg01, local05
0e0d4     68 B0 BF FD | 	call	#_module_text_fit
0e0d8     4A 75 02 F6 | 	mov	arg01, local05
0e0dc     64 B6 BF FD | 	call	#_module_fit_width
0e0e0     4A 75 02 F6 | 	mov	arg01, local05
0e0e4     CC 74 06 F1 | 	add	arg01, #204
0e0e8     3A 79 02 FB | 	rdlong	arg03, arg01
0e0ec     CC 74 86 F1 | 	sub	arg01, #204
0e0f0     01 78 0E F2 | 	cmp	arg03, #1 wz
0e0f4                 | '         return;
0e0f4     DC 74 06 A1 |  if_e	add	arg01, #220
0e0f8     3A 05 68 AC |  if_e	wrlong	#2, arg01
0e0fc     4A 75 02 F6 | 	mov	arg01, local05
0e100     47 77 02 F6 | 	mov	arg02, local02
0e104     E4 B5 BF FD | 	call	#_module_align_below
0e108     4A 75 02 F6 | 	mov	arg01, local05
0e10c     01 76 06 F6 | 	mov	arg02, #1
0e110     02 78 06 F6 | 	mov	arg03, #2
0e114     A8 B4 BF FD | 	call	#_module_align_center_sector
0e118     4A 8F 02 FB | 	rdlong	local02, local05
0e11c     10 8F 06 F1 | 	add	local02, #272
0e120     47 79 02 FB | 	rdlong	arg03, local02
0e124     4A 75 02 F6 | 	mov	arg01, local05
0e128     10 75 06 F1 | 	add	arg01, #272
0e12c     3A 01 68 FC | 	wrlong	#0, arg01
0e130     04 74 86 F1 | 	sub	arg01, #4
0e134     3A 79 62 FC | 	wrlong	arg03, arg01
0e138     C9 74 02 F6 | 	mov	arg01, objptr
0e13c     16 77 02 F6 | 	mov	arg02, ptr__update_profileName_0884_
0e140     F4 7A B1 FD | 	call	#__system___make_methodptr
0e144     4A 75 02 F6 | 	mov	arg01, local05
0e148     38 75 06 F1 | 	add	arg01, #312
0e14c     3A 35 62 FC | 	wrlong	result1, arg01
0e150     03 00 00 FF 
0e154     80 8D 86 F1 | 	sub	local01, ##1920
0e158     46 8F 02 F6 | 	mov	local02, local01
0e15c     47 75 02 F6 | 	mov	arg01, local02
0e160     49 77 02 F6 | 	mov	arg02, local04
0e164     E0 A9 BF FD | 	call	#_module_init
0e168     03 00 00 FF 
0e16c     B4 8D 06 F1 | 	add	local01, ##1972
0e170     46 77 02 F6 | 	mov	arg02, local01
0e174     47 75 02 F6 | 	mov	arg01, local02
0e178     68 AF BF FD | 	call	#_module_set_text
0e17c     47 75 02 F6 | 	mov	arg01, local02
0e180     01 76 06 F6 | 	mov	arg02, #1
0e184     9C B0 BF FD | 	call	#_module_text_font
0e188     47 75 02 F6 | 	mov	arg01, local02
0e18c     B0 AF BF FD | 	call	#_module_text_fit
0e190     47 75 02 F6 | 	mov	arg01, local02
0e194     CC 74 06 F1 | 	add	arg01, #204
0e198     3A 79 02 FB | 	rdlong	arg03, arg01
0e19c     CC 74 86 F1 | 	sub	arg01, #204
0e1a0     01 78 0E F2 | 	cmp	arg03, #1 wz
0e1a4                 | '         return;
0e1a4     DC 74 06 A1 |  if_e	add	arg01, #220
0e1a8     3A 05 68 AC |  if_e	wrlong	#2, arg01
0e1ac     47 75 02 F6 | 	mov	arg01, local02
0e1b0     90 B5 BF FD | 	call	#_module_fit_width
0e1b4     47 75 02 F6 | 	mov	arg01, local02
0e1b8     01 76 06 F6 | 	mov	arg02, #1
0e1bc     02 78 06 F6 | 	mov	arg03, #2
0e1c0     FC B3 BF FD | 	call	#_module_align_center_sector
0e1c4     47 75 02 F6 | 	mov	arg01, local02
0e1c8     4A 77 02 F6 | 	mov	arg02, local05
0e1cc     1C B5 BF FD | 	call	#_module_align_below
0e1d0     47 95 02 FB | 	rdlong	local05, local02
0e1d4     10 95 06 F1 | 	add	local05, #272
0e1d8     4A 79 02 FB | 	rdlong	arg03, local05
0e1dc     47 75 02 F6 | 	mov	arg01, local02
0e1e0     10 75 06 F1 | 	add	arg01, #272
0e1e4     3A 01 68 FC | 	wrlong	#0, arg01
0e1e8     04 74 86 F1 | 	sub	arg01, #4
0e1ec     3A 79 62 FC | 	wrlong	arg03, arg01
0e1f0     C9 74 02 F6 | 	mov	arg01, objptr
0e1f4     17 77 02 F6 | 	mov	arg02, ptr__update_profileNumber_0887_
0e1f8     3C 7A B1 FD | 	call	#__system___make_methodptr
0e1fc     38 8F 06 F1 | 	add	local02, #312
0e200     47 35 62 FC | 	wrlong	result1, local02
0e204     03 00 00 FF 
0e208     74 8C 86 F1 | 	sub	local01, ##1652
0e20c     46 8F 02 F6 | 	mov	local02, local01
0e210     47 75 02 F6 | 	mov	arg01, local02
0e214     49 77 02 F6 | 	mov	arg02, local04
0e218     2C A9 BF FD | 	call	#_module_init
0e21c     47 75 02 F6 | 	mov	arg01, local02
0e220     CC 74 06 F1 | 	add	arg01, #204
0e224     3A 0B 68 FC | 	wrlong	#5, arg01
0e228     24 74 06 F1 | 	add	arg01, #36
0e22c     3A C9 68 FC | 	wrlong	#100, arg01
0e230     04 74 06 F1 | 	add	arg01, #4
0e234     3A 65 68 FC | 	wrlong	#50, arg01
0e238     47 75 02 F6 | 	mov	arg01, local02
0e23c     10 75 06 F1 | 	add	arg01, #272
0e240     43 00 80 FF 
0e244     3A E1 6B FC | 	wrlong	##34800, arg01
0e248     04 74 86 F1 | 	sub	arg01, #4
0e24c     43 00 80 FF 
0e250     3A E1 6B FC | 	wrlong	##34800, arg01
0e254     47 75 02 F6 | 	mov	arg01, local02
0e258     F8 74 06 F1 | 	add	arg01, #248
0e25c     3A 29 68 FC | 	wrlong	#20, arg01
0e260     04 74 06 F1 | 	add	arg01, #4
0e264     3A 29 68 FC | 	wrlong	#20, arg01
0e268     47 75 02 F6 | 	mov	arg01, local02
0e26c     01 76 06 F6 | 	mov	arg02, #1
0e270     02 78 06 F6 | 	mov	arg03, #2
0e274     BC B3 BF FD | 	call	#_module_align_space_even
0e278     47 75 02 F6 | 	mov	arg01, local02
0e27c     AC B2 BF FD | 	call	#_module_align_inner_bottom
0e280     C9 74 02 F6 | 	mov	arg01, objptr
0e284     DD 76 02 F6 | 	mov	arg02, ptr__button_open_0881_
0e288     AC 79 B1 FD | 	call	#__system___make_methodptr
0e28c     47 75 02 F6 | 	mov	arg01, local02
0e290     00 78 06 F6 | 	mov	arg03, #0
0e294     34 75 06 F1 | 	add	arg01, #308
0e298     3A 35 62 FC | 	wrlong	result1, arg01
0e29c     10 74 86 F1 | 	sub	arg01, #16
0e2a0     3A 01 68 FC | 	wrlong	#0, arg01
0e2a4     40 8D 06 F1 | 	add	local01, #320
0e2a8     46 75 02 F6 | 	mov	arg01, local01
0e2ac     47 77 02 F6 | 	mov	arg02, local02
0e2b0     94 A8 BF FD | 	call	#_module_init
0e2b4     FC 00 00 FF 
0e2b8     D1 D6 05 F1 | 	add	ptr__dat__, ##129233
0e2bc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e2c0     FC 00 00 FF 
0e2c4     D1 D6 85 F1 | 	sub	ptr__dat__, ##129233
0e2c8     46 75 02 F6 | 	mov	arg01, local01
0e2cc     14 AE BF FD | 	call	#_module_set_text
0e2d0     46 75 02 F6 | 	mov	arg01, local01
0e2d4     02 76 06 F6 | 	mov	arg02, #2
0e2d8     48 AF BF FD | 	call	#_module_text_font
0e2dc     46 75 02 F6 | 	mov	arg01, local01
0e2e0     5C AE BF FD | 	call	#_module_text_fit
0e2e4     46 75 02 F6 | 	mov	arg01, local01
0e2e8     01 76 06 F6 | 	mov	arg02, #1
0e2ec     02 78 06 F6 | 	mov	arg03, #2
0e2f0     CC B2 BF FD | 	call	#_module_align_center_sector
0e2f4     46 75 02 F6 | 	mov	arg01, local01
0e2f8     78 B2 BF FD | 	call	#_module_align_middle
0e2fc     46 95 02 FB | 	rdlong	local05, local01
0e300     10 95 06 F1 | 	add	local05, #272
0e304     4A 79 02 FB | 	rdlong	arg03, local05
0e308     46 75 02 F6 | 	mov	arg01, local01
0e30c     10 75 06 F1 | 	add	arg01, #272
0e310     3A 01 68 FC | 	wrlong	#0, arg01
0e314     04 74 86 F1 | 	sub	arg01, #4
0e318     3A 79 62 FC | 	wrlong	arg03, arg01
0e31c     40 8D 06 F1 | 	add	local01, #320
0e320     46 8F 02 F6 | 	mov	local02, local01
0e324     47 75 02 F6 | 	mov	arg01, local02
0e328     49 77 02 F6 | 	mov	arg02, local04
0e32c     18 A8 BF FD | 	call	#_module_init
0e330     47 75 02 F6 | 	mov	arg01, local02
0e334     CC 74 06 F1 | 	add	arg01, #204
0e338     3A 0B 68 FC | 	wrlong	#5, arg01
0e33c     24 74 06 F1 | 	add	arg01, #36
0e340     3A C9 68 FC | 	wrlong	#100, arg01
0e344     04 74 06 F1 | 	add	arg01, #4
0e348     3A 65 68 FC | 	wrlong	#50, arg01
0e34c     47 75 02 F6 | 	mov	arg01, local02
0e350     10 75 06 F1 | 	add	arg01, #272
0e354     43 00 80 FF 
0e358     3A E1 6B FC | 	wrlong	##34800, arg01
0e35c     04 74 86 F1 | 	sub	arg01, #4
0e360     43 00 80 FF 
0e364     3A E1 6B FC | 	wrlong	##34800, arg01
0e368     47 75 02 F6 | 	mov	arg01, local02
0e36c     F8 74 06 F1 | 	add	arg01, #248
0e370     3A 29 68 FC | 	wrlong	#20, arg01
0e374     04 74 06 F1 | 	add	arg01, #4
0e378     3A 29 68 FC | 	wrlong	#20, arg01
0e37c     47 75 02 F6 | 	mov	arg01, local02
0e380     02 76 06 F6 | 	mov	arg02, #2
0e384     02 78 06 F6 | 	mov	arg03, #2
0e388     A8 B2 BF FD | 	call	#_module_align_space_even
0e38c     47 75 02 F6 | 	mov	arg01, local02
0e390     98 B1 BF FD | 	call	#_module_align_inner_bottom
0e394     C9 74 02 F6 | 	mov	arg01, objptr
0e398     E2 76 02 F6 | 	mov	arg02, ptr__button_run_0876_
0e39c     98 78 B1 FD | 	call	#__system___make_methodptr
0e3a0     47 75 02 F6 | 	mov	arg01, local02
0e3a4     00 78 06 F6 | 	mov	arg03, #0
0e3a8     34 75 06 F1 | 	add	arg01, #308
0e3ac     3A 35 62 FC | 	wrlong	result1, arg01
0e3b0     10 74 86 F1 | 	sub	arg01, #16
0e3b4     3A 01 68 FC | 	wrlong	#0, arg01
0e3b8     40 8D 06 F1 | 	add	local01, #320
0e3bc     46 75 02 F6 | 	mov	arg01, local01
0e3c0     47 77 02 F6 | 	mov	arg02, local02
0e3c4     80 A7 BF FD | 	call	#_module_init
0e3c8     FC 00 00 FF 
0e3cc     D6 D6 05 F1 | 	add	ptr__dat__, ##129238
0e3d0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e3d4     FC 00 00 FF 
0e3d8     D6 D6 85 F1 | 	sub	ptr__dat__, ##129238
0e3dc     46 75 02 F6 | 	mov	arg01, local01
0e3e0     00 AD BF FD | 	call	#_module_set_text
0e3e4     46 75 02 F6 | 	mov	arg01, local01
0e3e8     02 76 06 F6 | 	mov	arg02, #2
0e3ec     34 AE BF FD | 	call	#_module_text_font
0e3f0     46 75 02 F6 | 	mov	arg01, local01
0e3f4     48 AD BF FD | 	call	#_module_text_fit
0e3f8     46 75 02 F6 | 	mov	arg01, local01
0e3fc     01 76 06 F6 | 	mov	arg02, #1
0e400     02 78 06 F6 | 	mov	arg03, #2
0e404     B8 B1 BF FD | 	call	#_module_align_center_sector
0e408     46 75 02 F6 | 	mov	arg01, local01
0e40c     64 B1 BF FD | 	call	#_module_align_middle
0e410     46 95 02 FB | 	rdlong	local05, local01
0e414     10 95 06 F1 | 	add	local05, #272
0e418     4A 79 02 FB | 	rdlong	arg03, local05
0e41c     46 75 02 F6 | 	mov	arg01, local01
0e420     10 75 06 F1 | 	add	arg01, #272
0e424     3A 01 68 FC | 	wrlong	#0, arg01
0e428     04 74 86 F1 | 	sub	arg01, #4
0e42c     3A 79 62 FC | 	wrlong	arg03, arg01
0e430     40 8D 06 F1 | 	add	local01, #320
0e434     46 75 02 F6 | 	mov	arg01, local01
0e438     48 77 02 F6 | 	mov	arg02, local03
0e43c     08 A7 BF FD | 	call	#_module_init
0e440     46 75 02 F6 | 	mov	arg01, local01
0e444     CC 74 06 F1 | 	add	arg01, #204
0e448     3A 0B 68 FC | 	wrlong	#5, arg01
0e44c     24 74 06 F1 | 	add	arg01, #36
0e450     3A C9 68 FC | 	wrlong	#100, arg01
0e454     04 74 06 F1 | 	add	arg01, #4
0e458     3A C9 68 FC | 	wrlong	#100, arg01
0e45c     46 75 02 F6 | 	mov	arg01, local01
0e460     10 75 06 F1 | 	add	arg01, #272
0e464     43 00 80 FF 
0e468     3A E1 6B FC | 	wrlong	##34800, arg01
0e46c     04 74 86 F1 | 	sub	arg01, #4
0e470     43 00 80 FF 
0e474     3A E1 6B FC | 	wrlong	##34800, arg01
0e478     46 75 02 F6 | 	mov	arg01, local01
0e47c     14 78 06 F6 | 	mov	arg03, #20
0e480     F8 74 06 F1 | 	add	arg01, #248
0e484     3A 29 68 FC | 	wrlong	#20, arg01
0e488     04 74 06 F1 | 	add	arg01, #4
0e48c     3A 29 68 FC | 	wrlong	#20, arg01
0e490     46 75 02 F6 | 	mov	arg01, local01
0e494     4C B0 BF FD | 	call	#_module_align_inner_right
0e498     46 75 02 F6 | 	mov	arg01, local01
0e49c     F4 AF BF FD | 	call	#_module_align_inner_top
0e4a0     C9 74 02 F6 | 	mov	arg01, objptr
0e4a4     D8 76 02 F6 | 	mov	arg02, ptr__button_nav_0878_
0e4a8     8C 77 B1 FD | 	call	#__system___make_methodptr
0e4ac     34 8D 06 F1 | 	add	local01, #308
0e4b0     46 35 62 FC | 	wrlong	result1, local01
0e4b4     10 8C 86 F1 | 	sub	local01, #16
0e4b8     46 01 68 FC | 	wrlong	#0, local01
0e4bc     A8 F0 03 F6 | 	mov	ptra, fp
0e4c0     B3 00 A0 FD | 	call	#popregs_
0e4c4                 | _automatic_page_init_ret
0e4c4     2D 00 64 FD | 	ret
0e4c8                 | 
0e4c8                 | _automatic_page_run
0e4c8     01 4C 05 F6 | 	mov	COUNT_, #1
0e4cc     A9 00 A0 FD | 	call	#pushregs_
0e4d0     3A 8D 02 F6 | 	mov	local01, arg01
0e4d4     10 8C 06 F1 | 	add	local01, #16
0e4d8     46 01 48 FC | 	wrbyte	#0, local01
0e4dc     10 8C 86 F1 | 	sub	local01, #16
0e4e0     46 75 02 FB | 	rdlong	arg01, local01
0e4e4     14 8C 06 F1 | 	add	local01, #20
0e4e8     46 77 02 F6 | 	mov	arg02, local01
0e4ec     14 8C 86 F1 | 	sub	local01, #20
0e4f0     2C B4 BF FD | 	call	#_module_draw
0e4f4                 | ' {
0e4f4                 | '     page->complete =  (0) ;
0e4f4                 | '     module_draw(page->display, &(page->root));
0e4f4                 | ' 
0e4f4                 | '     while (!page->complete)
0e4f4                 | LR__0395
0e4f4     10 8C 06 F1 | 	add	local01, #16
0e4f8     46 35 CA FA | 	rdbyte	result1, local01 wz
0e4fc     10 8C 86 F1 | 	sub	local01, #16
0e500     44 00 90 5D |  if_ne	jmp	#LR__0397
0e504     14 8C 06 F1 | 	add	local01, #20
0e508     46 75 02 F6 | 	mov	arg01, local01
0e50c     14 8C 86 F1 | 	sub	local01, #20
0e510     46 77 02 FB | 	rdlong	arg02, local01
0e514     46 79 02 F6 | 	mov	arg03, local01
0e518     54 A8 BF FD | 	call	#_module_touch_check
0e51c     46 75 02 FB | 	rdlong	arg01, local01
0e520     14 8C 06 F1 | 	add	local01, #20
0e524     46 77 02 F6 | 	mov	arg02, local01
0e528     14 8C 86 F1 | 	sub	local01, #20
0e52c     46 79 02 F6 | 	mov	arg03, local01
0e530     6C A7 BF FD | 	call	#_module_update_check
0e534                 | '     {
0e534                 | '         module_touch_check(&(page->root), page->display, page);
0e534                 | '         module_update_check(page->display, &(page->root), page);
0e534                 | '         while (display_update_touch(page->display) == 0)
0e534                 | LR__0396
0e534     46 75 02 FB | 	rdlong	arg01, local01
0e538     A8 72 BF FD | 	call	#_display_update_touch
0e53c     00 34 0E F2 | 	cmp	result1, #0 wz
0e540     F0 FF 9F AD |  if_e	jmp	#LR__0396
0e544     AC FF 9F FD | 	jmp	#LR__0395
0e548                 | LR__0397
0e548     A8 F0 03 F6 | 	mov	ptra, fp
0e54c     B3 00 A0 FD | 	call	#popregs_
0e550                 | _automatic_page_run_ret
0e550     2D 00 64 FD | 	ret
0e554                 | 
0e554                 | _explorer_create
0e554     FC 00 00 FF 
0e558     F0 D6 05 F1 | 	add	ptr__dat__, ##129264
0e55c     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
0e560     FC D6 05 F1 | 	add	ptr__dat__, #252
0e564     EB 76 62 FC | 	wrlong	arg02, ptr__dat__
0e568     04 D6 05 F1 | 	add	ptr__dat__, #4
0e56c     EB 78 62 FC | 	wrlong	arg03, ptr__dat__
0e570     18 00 00 FF 
0e574     C8 D6 05 F1 | 	add	ptr__dat__, ##12488
0e578     EB 74 02 F6 | 	mov	arg01, ptr__dat__
0e57c     15 01 00 FF 
0e580     B8 D6 85 F1 | 	sub	ptr__dat__, ##142008
0e584     3E 77 02 F6 | 	mov	arg02, arg05
0e588     2C 7A BF FD | 	call	#_strcpy
0e58c     FC 00 00 FF 
0e590     F4 D7 05 F1 | 	add	ptr__dat__, ##129524
0e594     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
0e598     00 D7 85 F1 | 	sub	ptr__dat__, #256
0e59c     EB 7A 62 FC | 	wrlong	arg04, ptr__dat__
0e5a0     19 00 00 FF 
0e5a4     28 D6 05 F1 | 	add	ptr__dat__, ##12840
0e5a8     EB 00 68 FC | 	wrlong	#0, ptr__dat__
0e5ac     04 D6 05 F1 | 	add	ptr__dat__, #4
0e5b0     FF FF FF FF 
0e5b4     EB FE 6B FC | 	wrlong	##-1, ptr__dat__
0e5b8                 | ' {
0e5b8                 | '     staticExplorer.display = display;
0e5b8                 | '     staticExplorer.x = x;
0e5b8                 | '     staticExplorer.y = y;
0e5b8                 | '     strcpy(staticExplorer.pathBuffer, path);
0e5b8                 | '     staticExplorer.complete =  (0) ;
0e5b8                 | '     staticExplorer.mode = mode;
0e5b8                 | '     staticExplorer.page = 0;
0e5b8                 | '     staticExplorer.selection = -1;
0e5b8                 | '     return &staticExplorer;
0e5b8     19 00 00 FF 
0e5bc     30 D6 85 F1 | 	sub	ptr__dat__, ##12848
0e5c0     EB 34 02 F6 | 	mov	result1, ptr__dat__
0e5c4     FC 00 00 FF 
0e5c8     F0 D6 85 F1 | 	sub	ptr__dat__, ##129264
0e5cc                 | _explorer_create_ret
0e5cc     2D 00 64 FD | 	ret
0e5d0                 | 
0e5d0                 | _explorer_run
0e5d0     2A 4C 05 F6 | 	mov	COUNT_, #42
0e5d4     A9 00 A0 FD | 	call	#pushregs_
0e5d8     3A 8D 02 F6 | 	mov	local01, arg01
0e5dc     46 75 02 FB | 	rdlong	arg01, local01
0e5e0     C0 12 00 FF 
0e5e4     00 8E 06 F6 | 	mov	local02, ##2457600
0e5e8     0A 90 C6 F9 | 	decod	local03, #10
0e5ec     00 92 06 F6 | 	mov	local04, #0
0e5f0     00 94 06 F6 | 	mov	local05, #0
0e5f4     0A 96 C6 F9 | 	decod	local06, #10
0e5f8     01 00 00 FF 
0e5fc     58 98 06 F6 | 	mov	local07, ##600
0e600     00 76 06 F6 | 	mov	arg02, #0
0e604     0A 78 C6 F9 | 	decod	arg03, #10
0e608     00 7A 06 F6 | 	mov	arg04, #0
0e60c     00 7C 06 F6 | 	mov	arg05, #0
0e610     C0 12 00 FF 
0e614     00 7E 06 F6 | 	mov	arg06, ##2457600
0e618     0A 80 C6 F9 | 	decod	arg07, #10
0e61c     00 82 06 F6 | 	mov	arg08, #0
0e620     00 84 06 F6 | 	mov	arg09, #0
0e624     0A 86 C6 F9 | 	decod	arg10, #10
0e628     01 00 00 FF 
0e62c     58 88 06 F6 | 	mov	arg11, ##600
0e630     F4 5F BF FD | 	call	#_display_bte_memory_copy
0e634     4B 9A 06 F6 | 	mov	local08, #75
0e638     20 9C 06 F6 | 	mov	local09, #32
0e63c     0A 9E 06 F6 | 	mov	local10, #10
0e640     04 8D 06 F1 | 	add	local01, #260
0e644     46 01 48 FC | 	wrbyte	#0, local01
0e648     04 8C 06 F1 | 	add	local01, #4
0e64c     46 A1 02 F6 | 	mov	local11, local01
0e650     50 75 02 F6 | 	mov	arg01, local11
0e654     00 76 06 F6 | 	mov	arg02, #0
0e658     EC A4 BF FD | 	call	#_module_init
0e65c     40 8D 06 F1 | 	add	local01, #320
0e660     46 A3 02 F6 | 	mov	local12, local01
0e664     51 75 02 F6 | 	mov	arg01, local12
0e668     50 77 02 F6 | 	mov	arg02, local11
0e66c     D8 A4 BF FD | 	call	#_module_init
0e670     51 75 02 F6 | 	mov	arg01, local12
0e674     CC 74 06 F1 | 	add	arg01, #204
0e678     3A 0B 68 FC | 	wrlong	#5, arg01
0e67c     24 74 06 F1 | 	add	arg01, #36
0e680     01 00 80 FF 
0e684     3A 01 6A FC | 	wrlong	##768, arg01
0e688     04 74 06 F1 | 	add	arg01, #4
0e68c     3A 21 6B FC | 	wrlong	#400, arg01
0e690     4C 8D 86 F1 | 	sub	local01, #332
0e694     46 77 02 FB | 	rdlong	arg02, local01
0e698     04 8C 06 F1 | 	add	local01, #4
0e69c     46 79 02 FB | 	rdlong	arg03, local01
0e6a0     51 75 02 F6 | 	mov	arg01, local12
0e6a4     E8 74 06 F1 | 	add	arg01, #232
0e6a8     3A 77 62 FC | 	wrlong	arg02, arg01
0e6ac     04 74 06 F1 | 	add	arg01, #4
0e6b0     3A 79 62 FC | 	wrlong	arg03, arg01
0e6b4     51 75 02 F6 | 	mov	arg01, local12
0e6b8     F8 74 06 F1 | 	add	arg01, #248
0e6bc     3A 3D 68 FC | 	wrlong	#30, arg01
0e6c0     04 74 06 F1 | 	add	arg01, #4
0e6c4     3A 15 68 FC | 	wrlong	#10, arg01
0e6c8     51 75 02 F6 | 	mov	arg01, local12
0e6cc     10 75 06 F1 | 	add	arg01, #272
0e6d0     63 00 80 FF 
0e6d4     3A 31 68 FC | 	wrlong	##50712, arg01
0e6d8     04 74 86 F1 | 	sub	arg01, #4
0e6dc     63 00 80 FF 
0e6e0     3A 31 68 FC | 	wrlong	##50712, arg01
0e6e4     51 75 02 F6 | 	mov	arg01, local12
0e6e8     00 76 06 F6 | 	mov	arg02, #0
0e6ec     01 78 06 F6 | 	mov	arg03, #1
0e6f0     60 AD BF FD | 	call	#_module_add_border
0e6f4     51 75 02 F6 | 	mov	arg01, local12
0e6f8     08 75 06 F1 | 	add	arg01, #264
0e6fc     3A 29 68 FC | 	wrlong	#20, arg01
0e700     01 00 00 FF 
0e704     88 8C 06 F1 | 	add	local01, ##648
0e708     46 A5 02 F6 | 	mov	local13, local01
0e70c     52 75 02 F6 | 	mov	arg01, local13
0e710     51 77 02 F6 | 	mov	arg02, local12
0e714     30 A4 BF FD | 	call	#_module_init
0e718     52 75 02 F6 | 	mov	arg01, local13
0e71c     0A 78 06 F6 | 	mov	arg03, #10
0e720     00 75 06 F1 | 	add	arg01, #256
0e724     3A 15 68 FC | 	wrlong	#10, arg01
0e728     04 74 06 F1 | 	add	arg01, #4
0e72c     3A 15 68 FC | 	wrlong	#10, arg01
0e730     17 00 00 FF 
0e734     40 8C 06 F1 | 	add	local01, ##11840
0e738     46 77 02 F6 | 	mov	arg02, local01
0e73c     52 75 02 F6 | 	mov	arg01, local13
0e740     A0 A9 BF FD | 	call	#_module_set_text
0e744     52 75 02 F6 | 	mov	arg01, local13
0e748     02 76 06 F6 | 	mov	arg02, #2
0e74c     D4 AA BF FD | 	call	#_module_text_font
0e750     52 75 02 F6 | 	mov	arg01, local13
0e754     E8 A9 BF FD | 	call	#_module_text_fit
0e758     52 75 02 F6 | 	mov	arg01, local13
0e75c     E4 AF BF FD | 	call	#_module_fit_width
0e760     52 79 02 FB | 	rdlong	arg03, local13
0e764     10 79 06 F1 | 	add	arg03, #272
0e768     3C 79 02 FB | 	rdlong	arg03, arg03
0e76c     52 75 02 F6 | 	mov	arg01, local13
0e770     10 75 06 F1 | 	add	arg01, #272
0e774     3A 01 68 FC | 	wrlong	#0, arg01
0e778     04 74 86 F1 | 	sub	arg01, #4
0e77c     3A 79 62 FC | 	wrlong	arg03, arg01
0e780     52 75 02 F6 | 	mov	arg01, local13
0e784     0C AD BF FD | 	call	#_module_align_inner_top
0e788     52 75 02 F6 | 	mov	arg01, local13
0e78c     01 76 06 F6 | 	mov	arg02, #1
0e790     02 78 06 F6 | 	mov	arg03, #2
0e794     28 AE BF FD | 	call	#_module_align_center_sector
0e798     52 75 02 F6 | 	mov	arg01, local13
0e79c     CC 74 06 F1 | 	add	arg01, #204
0e7a0     3A 35 02 FB | 	rdlong	result1, arg01
0e7a4     CC 74 86 F1 | 	sub	arg01, #204
0e7a8     01 34 0E F2 | 	cmp	result1, #1 wz
0e7ac                 | '         return;
0e7ac     DC 74 06 A1 |  if_e	add	arg01, #220
0e7b0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0e7b4     52 75 02 F6 | 	mov	arg01, local13
0e7b8     CC 74 06 F1 | 	add	arg01, #204
0e7bc     3A A7 02 FB | 	rdlong	local14, arg01
0e7c0     CC 74 86 F1 | 	sub	arg01, #204
0e7c4     01 A6 0E F2 | 	cmp	local14, #1 wz
0e7c8                 | '         return;
0e7c8     D8 74 06 A1 |  if_e	add	arg01, #216
0e7cc     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0e7d0     16 00 00 FF 
0e7d4     00 8D 86 F1 | 	sub	local01, ##11520
0e7d8     46 A9 02 F6 | 	mov	local15, local01
0e7dc     54 75 02 F6 | 	mov	arg01, local15
0e7e0     51 77 02 F6 | 	mov	arg02, local12
0e7e4     60 A3 BF FD | 	call	#_module_init
0e7e8     54 75 02 F6 | 	mov	arg01, local15
0e7ec     00 75 06 F1 | 	add	arg01, #256
0e7f0     3A 15 68 FC | 	wrlong	#10, arg01
0e7f4     04 74 06 F1 | 	add	arg01, #4
0e7f8     3A 15 68 FC | 	wrlong	#10, arg01
0e7fc     21 00 00 FF 
0e800     74 D6 05 F1 | 	add	ptr__dat__, ##17012
0e804     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e808     21 00 00 FF 
0e80c     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
0e810     54 75 02 F6 | 	mov	arg01, local15
0e814     98 A8 BF FD | 	call	#_module_set_image
0e818     54 75 02 F6 | 	mov	arg01, local15
0e81c     74 AC BF FD | 	call	#_module_align_inner_top
0e820     54 75 02 F6 | 	mov	arg01, local15
0e824     94 AC BF FD | 	call	#_module_align_inner_left
0e828     54 75 02 F6 | 	mov	arg01, local15
0e82c     7C 00 00 FF 
0e830     00 78 06 F6 | 	mov	arg03, ##63488
0e834     10 75 06 F1 | 	add	arg01, #272
0e838     7C 00 80 FF 
0e83c     3A 01 68 FC | 	wrlong	##63488, arg01
0e840     04 74 86 F1 | 	sub	arg01, #4
0e844     7C 00 80 FF 
0e848     3A 01 68 FC | 	wrlong	##63488, arg01
0e84c     C9 74 02 F6 | 	mov	arg01, objptr
0e850     D4 76 02 F6 | 	mov	arg02, ptr__button_delete_0912_
0e854     E0 73 B1 FD | 	call	#__system___make_methodptr
0e858     54 75 02 F6 | 	mov	arg01, local15
0e85c     00 78 06 F6 | 	mov	arg03, #0
0e860     34 75 06 F1 | 	add	arg01, #308
0e864     3A 35 62 FC | 	wrlong	result1, arg01
0e868     10 74 86 F1 | 	sub	arg01, #16
0e86c     3A 01 68 FC | 	wrlong	#0, arg01
0e870     40 8D 06 F1 | 	add	local01, #320
0e874     46 AB 02 F6 | 	mov	local16, local01
0e878     55 75 02 F6 | 	mov	arg01, local16
0e87c     51 77 02 F6 | 	mov	arg02, local12
0e880     C4 A2 BF FD | 	call	#_module_init
0e884     55 75 02 F6 | 	mov	arg01, local16
0e888     CC 74 06 F1 | 	add	arg01, #204
0e88c     3A 0B 68 FC | 	wrlong	#5, arg01
0e890     24 74 06 F1 | 	add	arg01, #36
0e894     3A 97 68 FC | 	wrlong	#75, arg01
0e898     04 74 06 F1 | 	add	arg01, #4
0e89c     3A 41 68 FC | 	wrlong	#32, arg01
0e8a0     55 75 02 F6 | 	mov	arg01, local16
0e8a4     01 76 06 F6 | 	mov	arg02, #1
0e8a8     06 78 06 F6 | 	mov	arg03, #6
0e8ac     10 AD BF FD | 	call	#_module_align_center_sector
0e8b0     55 75 02 F6 | 	mov	arg01, local16
0e8b4     74 AC BF FD | 	call	#_module_align_inner_bottom
0e8b8     55 79 02 FB | 	rdlong	arg03, local16
0e8bc     10 79 06 F1 | 	add	arg03, #272
0e8c0     3C 79 02 FB | 	rdlong	arg03, arg03
0e8c4     55 75 02 F6 | 	mov	arg01, local16
0e8c8     10 75 06 F1 | 	add	arg01, #272
0e8cc     7C 00 80 FF 
0e8d0     3A 01 68 FC | 	wrlong	##63488, arg01
0e8d4     04 74 86 F1 | 	sub	arg01, #4
0e8d8     3A 79 62 FC | 	wrlong	arg03, arg01
0e8dc     55 75 02 F6 | 	mov	arg01, local16
0e8e0     0A 78 06 F6 | 	mov	arg03, #10
0e8e4     00 75 06 F1 | 	add	arg01, #256
0e8e8     3A 15 68 FC | 	wrlong	#10, arg01
0e8ec     04 74 06 F1 | 	add	arg01, #4
0e8f0     3A 15 68 FC | 	wrlong	#10, arg01
0e8f4     C9 74 02 F6 | 	mov	arg01, objptr
0e8f8     D3 76 02 F6 | 	mov	arg02, ptr__button_cancel_0914_
0e8fc     38 73 B1 FD | 	call	#__system___make_methodptr
0e900     55 75 02 F6 | 	mov	arg01, local16
0e904     00 78 06 F6 | 	mov	arg03, #0
0e908     34 75 06 F1 | 	add	arg01, #308
0e90c     3A 35 62 FC | 	wrlong	result1, arg01
0e910     10 74 86 F1 | 	sub	arg01, #16
0e914     3A 01 68 FC | 	wrlong	#0, arg01
0e918     40 8D 06 F1 | 	add	local01, #320
0e91c     46 AD 02 F6 | 	mov	local17, local01
0e920     56 75 02 F6 | 	mov	arg01, local17
0e924     55 77 02 F6 | 	mov	arg02, local16
0e928     1C A2 BF FD | 	call	#_module_init
0e92c     FC 00 00 FF 
0e930     DB D6 05 F1 | 	add	ptr__dat__, ##129243
0e934     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e938     FC 00 00 FF 
0e93c     DB D6 85 F1 | 	sub	ptr__dat__, ##129243
0e940     56 75 02 F6 | 	mov	arg01, local17
0e944     9C A7 BF FD | 	call	#_module_set_text
0e948     56 75 02 F6 | 	mov	arg01, local17
0e94c     00 76 06 F6 | 	mov	arg02, #0
0e950     D0 A8 BF FD | 	call	#_module_text_font
0e954     56 75 02 F6 | 	mov	arg01, local17
0e958     E4 A7 BF FD | 	call	#_module_text_fit
0e95c     56 75 02 F6 | 	mov	arg01, local17
0e960     01 76 06 F6 | 	mov	arg02, #1
0e964     02 78 06 F6 | 	mov	arg03, #2
0e968     54 AC BF FD | 	call	#_module_align_center_sector
0e96c     56 75 02 F6 | 	mov	arg01, local17
0e970     00 AC BF FD | 	call	#_module_align_middle
0e974     56 79 02 FB | 	rdlong	arg03, local17
0e978     10 79 06 F1 | 	add	arg03, #272
0e97c     3C 79 02 FB | 	rdlong	arg03, arg03
0e980     56 75 02 F6 | 	mov	arg01, local17
0e984     10 75 06 F1 | 	add	arg01, #272
0e988     3A 01 68 FC | 	wrlong	#0, arg01
0e98c     04 74 86 F1 | 	sub	arg01, #4
0e990     3A 79 62 FC | 	wrlong	arg03, arg01
0e994     40 8D 06 F1 | 	add	local01, #320
0e998     46 AF 02 F6 | 	mov	local18, local01
0e99c     57 75 02 F6 | 	mov	arg01, local18
0e9a0     51 77 02 F6 | 	mov	arg02, local12
0e9a4     A0 A1 BF FD | 	call	#_module_init
0e9a8     57 75 02 F6 | 	mov	arg01, local18
0e9ac     55 77 02 F6 | 	mov	arg02, local16
0e9b0     38 A6 BF FD | 	call	#_module_copy
0e9b4     57 75 02 F6 | 	mov	arg01, local18
0e9b8     55 77 02 F6 | 	mov	arg02, local16
0e9bc     58 AD BF FD | 	call	#_module_align_right
0e9c0     57 75 02 F6 | 	mov	arg01, local18
0e9c4     7F 00 00 FF 
0e9c8     E0 79 06 F6 | 	mov	arg03, ##65504
0e9cc     10 75 06 F1 | 	add	arg01, #272
0e9d0     7F 00 80 FF 
0e9d4     3A C1 6B FC | 	wrlong	##65504, arg01
0e9d8     04 74 86 F1 | 	sub	arg01, #4
0e9dc     7F 00 80 FF 
0e9e0     3A C1 6B FC | 	wrlong	##65504, arg01
0e9e4     C9 74 02 F6 | 	mov	arg01, objptr
0e9e8     D6 76 02 F6 | 	mov	arg02, ptr__button_dotdot_0917_
0e9ec     48 72 B1 FD | 	call	#__system___make_methodptr
0e9f0     57 75 02 F6 | 	mov	arg01, local18
0e9f4     00 78 06 F6 | 	mov	arg03, #0
0e9f8     34 75 06 F1 | 	add	arg01, #308
0e9fc     3A 35 62 FC | 	wrlong	result1, arg01
0ea00     10 74 86 F1 | 	sub	arg01, #16
0ea04     3A 01 68 FC | 	wrlong	#0, arg01
0ea08     40 8D 06 F1 | 	add	local01, #320
0ea0c     46 B1 02 F6 | 	mov	local19, local01
0ea10     58 75 02 F6 | 	mov	arg01, local19
0ea14     57 77 02 F6 | 	mov	arg02, local18
0ea18     2C A1 BF FD | 	call	#_module_init
0ea1c     FC 00 00 FF 
0ea20     E2 D6 05 F1 | 	add	ptr__dat__, ##129250
0ea24     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ea28     FC 00 00 FF 
0ea2c     E2 D6 85 F1 | 	sub	ptr__dat__, ##129250
0ea30     58 75 02 F6 | 	mov	arg01, local19
0ea34     AC A6 BF FD | 	call	#_module_set_text
0ea38     58 75 02 F6 | 	mov	arg01, local19
0ea3c     00 76 06 F6 | 	mov	arg02, #0
0ea40     E0 A7 BF FD | 	call	#_module_text_font
0ea44     58 75 02 F6 | 	mov	arg01, local19
0ea48     F4 A6 BF FD | 	call	#_module_text_fit
0ea4c     58 75 02 F6 | 	mov	arg01, local19
0ea50     01 76 06 F6 | 	mov	arg02, #1
0ea54     02 78 06 F6 | 	mov	arg03, #2
0ea58     64 AB BF FD | 	call	#_module_align_center_sector
0ea5c     58 75 02 F6 | 	mov	arg01, local19
0ea60     10 AB BF FD | 	call	#_module_align_middle
0ea64     58 79 02 FB | 	rdlong	arg03, local19
0ea68     10 79 06 F1 | 	add	arg03, #272
0ea6c     3C 79 02 FB | 	rdlong	arg03, arg03
0ea70     58 75 02 F6 | 	mov	arg01, local19
0ea74     10 75 06 F1 | 	add	arg01, #272
0ea78     3A 01 68 FC | 	wrlong	#0, arg01
0ea7c     04 74 86 F1 | 	sub	arg01, #4
0ea80     3A 79 62 FC | 	wrlong	arg03, arg01
0ea84     40 8D 06 F1 | 	add	local01, #320
0ea88     46 B3 02 F6 | 	mov	local20, local01
0ea8c     59 75 02 F6 | 	mov	arg01, local20
0ea90     51 77 02 F6 | 	mov	arg02, local12
0ea94     B0 A0 BF FD | 	call	#_module_init
0ea98     59 75 02 F6 | 	mov	arg01, local20
0ea9c     57 77 02 F6 | 	mov	arg02, local18
0eaa0     48 A5 BF FD | 	call	#_module_copy
0eaa4     59 75 02 F6 | 	mov	arg01, local20
0eaa8     57 77 02 F6 | 	mov	arg02, local18
0eaac     68 AC BF FD | 	call	#_module_align_right
0eab0     C9 74 02 F6 | 	mov	arg01, objptr
0eab4     DF 76 02 F6 | 	mov	arg02, ptr__button_prev_0919_
0eab8     7C 71 B1 FD | 	call	#__system___make_methodptr
0eabc     59 75 02 F6 | 	mov	arg01, local20
0eac0     00 78 06 F6 | 	mov	arg03, #0
0eac4     34 75 06 F1 | 	add	arg01, #308
0eac8     3A 35 62 FC | 	wrlong	result1, arg01
0eacc     10 74 86 F1 | 	sub	arg01, #16
0ead0     3A 01 68 FC | 	wrlong	#0, arg01
0ead4     40 8D 06 F1 | 	add	local01, #320
0ead8     46 B5 02 F6 | 	mov	local21, local01
0eadc     5A 75 02 F6 | 	mov	arg01, local21
0eae0     59 77 02 F6 | 	mov	arg02, local20
0eae4     60 A0 BF FD | 	call	#_module_init
0eae8     FC 00 00 FF 
0eaec     E5 D6 05 F1 | 	add	ptr__dat__, ##129253
0eaf0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0eaf4     FC 00 00 FF 
0eaf8     E5 D6 85 F1 | 	sub	ptr__dat__, ##129253
0eafc     5A 75 02 F6 | 	mov	arg01, local21
0eb00     E0 A5 BF FD | 	call	#_module_set_text
0eb04     5A 75 02 F6 | 	mov	arg01, local21
0eb08     00 76 06 F6 | 	mov	arg02, #0
0eb0c     14 A7 BF FD | 	call	#_module_text_font
0eb10     5A 75 02 F6 | 	mov	arg01, local21
0eb14     28 A6 BF FD | 	call	#_module_text_fit
0eb18     5A 75 02 F6 | 	mov	arg01, local21
0eb1c     01 76 06 F6 | 	mov	arg02, #1
0eb20     02 78 06 F6 | 	mov	arg03, #2
0eb24     98 AA BF FD | 	call	#_module_align_center_sector
0eb28     5A 75 02 F6 | 	mov	arg01, local21
0eb2c     44 AA BF FD | 	call	#_module_align_middle
0eb30     5A 79 02 FB | 	rdlong	arg03, local21
0eb34     10 79 06 F1 | 	add	arg03, #272
0eb38     3C 79 02 FB | 	rdlong	arg03, arg03
0eb3c     5A 75 02 F6 | 	mov	arg01, local21
0eb40     10 75 06 F1 | 	add	arg01, #272
0eb44     3A 01 68 FC | 	wrlong	#0, arg01
0eb48     04 74 86 F1 | 	sub	arg01, #4
0eb4c     3A 79 62 FC | 	wrlong	arg03, arg01
0eb50     40 8D 06 F1 | 	add	local01, #320
0eb54     46 B7 02 F6 | 	mov	local22, local01
0eb58     5B 75 02 F6 | 	mov	arg01, local22
0eb5c     51 77 02 F6 | 	mov	arg02, local12
0eb60     E4 9F BF FD | 	call	#_module_init
0eb64     5B 75 02 F6 | 	mov	arg01, local22
0eb68     59 77 02 F6 | 	mov	arg02, local20
0eb6c     7C A4 BF FD | 	call	#_module_copy
0eb70     5B 75 02 F6 | 	mov	arg01, local22
0eb74     59 77 02 F6 | 	mov	arg02, local20
0eb78     9C AB BF FD | 	call	#_module_align_right
0eb7c     C9 74 02 F6 | 	mov	arg01, objptr
0eb80     DC 76 02 F6 | 	mov	arg02, ptr__button_next_0921_
0eb84     B0 70 B1 FD | 	call	#__system___make_methodptr
0eb88     5B 75 02 F6 | 	mov	arg01, local22
0eb8c     00 78 06 F6 | 	mov	arg03, #0
0eb90     34 75 06 F1 | 	add	arg01, #308
0eb94     3A 35 62 FC | 	wrlong	result1, arg01
0eb98     10 74 86 F1 | 	sub	arg01, #16
0eb9c     3A 01 68 FC | 	wrlong	#0, arg01
0eba0     40 8D 06 F1 | 	add	local01, #320
0eba4     46 B9 02 F6 | 	mov	local23, local01
0eba8     5C 75 02 F6 | 	mov	arg01, local23
0ebac     5B 77 02 F6 | 	mov	arg02, local22
0ebb0     94 9F BF FD | 	call	#_module_init
0ebb4     FC 00 00 FF 
0ebb8     E7 D6 05 F1 | 	add	ptr__dat__, ##129255
0ebbc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ebc0     FC 00 00 FF 
0ebc4     E7 D6 85 F1 | 	sub	ptr__dat__, ##129255
0ebc8     5C 75 02 F6 | 	mov	arg01, local23
0ebcc     14 A5 BF FD | 	call	#_module_set_text
0ebd0     5C 75 02 F6 | 	mov	arg01, local23
0ebd4     00 76 06 F6 | 	mov	arg02, #0
0ebd8     48 A6 BF FD | 	call	#_module_text_font
0ebdc     5C 75 02 F6 | 	mov	arg01, local23
0ebe0     5C A5 BF FD | 	call	#_module_text_fit
0ebe4     5C 75 02 F6 | 	mov	arg01, local23
0ebe8     01 76 06 F6 | 	mov	arg02, #1
0ebec     02 78 06 F6 | 	mov	arg03, #2
0ebf0     CC A9 BF FD | 	call	#_module_align_center_sector
0ebf4     5C 75 02 F6 | 	mov	arg01, local23
0ebf8     78 A9 BF FD | 	call	#_module_align_middle
0ebfc     5C 79 02 FB | 	rdlong	arg03, local23
0ec00     10 79 06 F1 | 	add	arg03, #272
0ec04     3C 79 02 FB | 	rdlong	arg03, arg03
0ec08     5C 75 02 F6 | 	mov	arg01, local23
0ec0c     10 75 06 F1 | 	add	arg01, #272
0ec10     3A 01 68 FC | 	wrlong	#0, arg01
0ec14     04 74 86 F1 | 	sub	arg01, #4
0ec18     3A 79 62 FC | 	wrlong	arg03, arg01
0ec1c     40 8D 06 F1 | 	add	local01, #320
0ec20     46 BB 02 F6 | 	mov	local24, local01
0ec24     5D 75 02 F6 | 	mov	arg01, local24
0ec28     51 77 02 F6 | 	mov	arg02, local12
0ec2c     18 9F BF FD | 	call	#_module_init
0ec30     5D 75 02 F6 | 	mov	arg01, local24
0ec34     5B 77 02 F6 | 	mov	arg02, local22
0ec38     B0 A3 BF FD | 	call	#_module_copy
0ec3c     5D 75 02 F6 | 	mov	arg01, local24
0ec40     05 76 06 F6 | 	mov	arg02, #5
0ec44     06 78 06 F6 | 	mov	arg03, #6
0ec48     74 A9 BF FD | 	call	#_module_align_center_sector
0ec4c     5D 79 02 FB | 	rdlong	arg03, local24
0ec50     10 79 06 F1 | 	add	arg03, #272
0ec54     3C 79 02 FB | 	rdlong	arg03, arg03
0ec58     5D 75 02 F6 | 	mov	arg01, local24
0ec5c     10 75 06 F1 | 	add	arg01, #272
0ec60     03 00 80 FF 
0ec64     3A C1 6B FC | 	wrlong	##2016, arg01
0ec68     04 74 86 F1 | 	sub	arg01, #4
0ec6c     3A 79 62 FC | 	wrlong	arg03, arg01
0ec70     C9 74 02 F6 | 	mov	arg01, objptr
0ec74     D5 76 02 F6 | 	mov	arg02, ptr__button_done_0923_
0ec78     BC 6F B1 FD | 	call	#__system___make_methodptr
0ec7c     5D 75 02 F6 | 	mov	arg01, local24
0ec80     00 78 06 F6 | 	mov	arg03, #0
0ec84     34 75 06 F1 | 	add	arg01, #308
0ec88     3A 35 62 FC | 	wrlong	result1, arg01
0ec8c     10 74 86 F1 | 	sub	arg01, #16
0ec90     3A 01 68 FC | 	wrlong	#0, arg01
0ec94     40 8D 06 F1 | 	add	local01, #320
0ec98     46 BD 02 F6 | 	mov	local25, local01
0ec9c     5E 75 02 F6 | 	mov	arg01, local25
0eca0     5D 77 02 F6 | 	mov	arg02, local24
0eca4     A0 9E BF FD | 	call	#_module_init
0eca8     FC 00 00 FF 
0ecac     E9 D6 05 F1 | 	add	ptr__dat__, ##129257
0ecb0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ecb4     FC 00 00 FF 
0ecb8     E9 D6 85 F1 | 	sub	ptr__dat__, ##129257
0ecbc     5E 75 02 F6 | 	mov	arg01, local25
0ecc0     20 A4 BF FD | 	call	#_module_set_text
0ecc4     5E 75 02 F6 | 	mov	arg01, local25
0ecc8     00 76 06 F6 | 	mov	arg02, #0
0eccc     54 A5 BF FD | 	call	#_module_text_font
0ecd0     5E 75 02 F6 | 	mov	arg01, local25
0ecd4     68 A4 BF FD | 	call	#_module_text_fit
0ecd8     5E 75 02 F6 | 	mov	arg01, local25
0ecdc     01 76 06 F6 | 	mov	arg02, #1
0ece0     02 78 06 F6 | 	mov	arg03, #2
0ece4     D8 A8 BF FD | 	call	#_module_align_center_sector
0ece8     5E 75 02 F6 | 	mov	arg01, local25
0ecec     84 A8 BF FD | 	call	#_module_align_middle
0ecf0     5E 79 02 FB | 	rdlong	arg03, local25
0ecf4     10 79 06 F1 | 	add	arg03, #272
0ecf8     3C 79 02 FB | 	rdlong	arg03, arg03
0ecfc     5E 75 02 F6 | 	mov	arg01, local25
0ed00     10 75 06 F1 | 	add	arg01, #272
0ed04     3A 01 68 FC | 	wrlong	#0, arg01
0ed08     04 74 86 F1 | 	sub	arg01, #4
0ed0c     3A 79 62 FC | 	wrlong	arg03, arg01
0ed10     40 8D 06 F1 | 	add	local01, #320
0ed14     46 BF 02 F6 | 	mov	local26, local01
0ed18     5F 75 02 F6 | 	mov	arg01, local26
0ed1c     51 77 02 F6 | 	mov	arg02, local12
0ed20     24 9E BF FD | 	call	#_module_init
0ed24     5F 75 02 F6 | 	mov	arg01, local26
0ed28     52 77 02 F6 | 	mov	arg02, local13
0ed2c     BC A9 BF FD | 	call	#_module_align_below
0ed30     5F 75 02 F6 | 	mov	arg01, local26
0ed34     52 77 02 F6 | 	mov	arg02, local13
0ed38     08 AB BF FD | 	call	#_module_fit_below
0ed3c     5F 75 02 F6 | 	mov	arg01, local26
0ed40     00 AA BF FD | 	call	#_module_fit_width
0ed44     5F 75 02 F6 | 	mov	arg01, local26
0ed48     70 A7 BF FD | 	call	#_module_align_inner_left
0ed4c     5F 75 02 F6 | 	mov	arg01, local26
0ed50     5F C1 02 FB | 	rdlong	local27, local26
0ed54     10 C1 06 F1 | 	add	local27, #272
0ed58     60 77 02 FB | 	rdlong	arg02, local27
0ed5c     5F C3 02 FB | 	rdlong	local28, local26
0ed60     0C C3 06 F1 | 	add	local28, #268
0ed64     61 C5 02 FB | 	rdlong	local29, local28
0ed68     0C C3 86 F1 | 	sub	local28, #268
0ed6c     62 79 02 F6 | 	mov	arg03, local29
0ed70     10 75 06 F1 | 	add	arg01, #272
0ed74     3A 77 62 FC | 	wrlong	arg02, arg01
0ed78     04 74 86 F1 | 	sub	arg01, #4
0ed7c     3A 79 62 FC | 	wrlong	arg03, arg01
0ed80     52 C7 02 F6 | 	mov	local30, local13
0ed84     00 C8 06 F6 | 	mov	local31, #0
0ed88     00 CA 06 F6 | 	mov	local32, #0
0ed8c                 | '     for (int i = 0; i <  2 ; i++)
0ed8c     09 00 00 FF 
0ed90     88 8C 86 F1 | 	sub	local01, ##4744
0ed94                 | LR__0398
0ed94     02 CA 56 F2 | 	cmps	local32, #2 wc
0ed98     B8 01 90 3D |  if_ae	jmp	#LR__0401
0ed9c     00 CC 06 F6 | 	mov	local33, #0
0eda0                 | '     {
0eda0                 | '         Module *file;
0eda0                 | '         for (int j = 0; j <  6 ; j++)
0eda0                 | LR__0399
0eda0     06 CC 56 F2 | 	cmps	local33, #6 wc
0eda4     98 01 90 3D |  if_ae	jmp	#LR__0400
0eda8     64 CF 02 F6 | 	mov	local34, local31
0edac     02 CE 66 F0 | 	shl	local34, #2
0edb0     64 CF 02 F1 | 	add	local34, local31
0edb4     06 CE 66 F0 | 	shl	local34, #6
0edb8     09 00 00 FF 
0edbc     C8 8D 06 F1 | 	add	local01, ##5064
0edc0     46 CF 02 F1 | 	add	local34, local01
0edc4     67 75 02 F6 | 	mov	arg01, local34
0edc8     5F 77 02 F6 | 	mov	arg02, local26
0edcc     78 9D BF FD | 	call	#_module_init
0edd0     67 75 02 F6 | 	mov	arg01, local34
0edd4     00 75 06 F1 | 	add	arg01, #256
0edd8     3A 15 68 FC | 	wrlong	#10, arg01
0eddc     04 74 06 F1 | 	add	arg01, #4
0ede0     3A 15 68 FC | 	wrlong	#10, arg01
0ede4     67 75 02 F6 | 	mov	arg01, local34
0ede8     CC 74 06 F1 | 	add	arg01, #204
0edec     3A 09 68 FC | 	wrlong	#4, arg01
0edf0     24 74 06 F1 | 	add	arg01, #36
0edf4     3A C9 68 FC | 	wrlong	#100, arg01
0edf8     04 74 06 F1 | 	add	arg01, #4
0edfc     3A C9 68 FC | 	wrlong	#100, arg01
0ee00     67 C3 02 FB | 	rdlong	local28, local34
0ee04     10 C3 06 F1 | 	add	local28, #272
0ee08     61 79 02 FB | 	rdlong	arg03, local28
0ee0c     67 75 02 F6 | 	mov	arg01, local34
0ee10     10 75 06 F1 | 	add	arg01, #272
0ee14     7C 00 80 FF 
0ee18     3A 01 68 FC | 	wrlong	##63488, arg01
0ee1c     04 74 86 F1 | 	sub	arg01, #4
0ee20     3A 79 62 FC | 	wrlong	arg03, arg01
0ee24     67 75 02 F6 | 	mov	arg01, local34
0ee28     63 77 02 F6 | 	mov	arg02, local30
0ee2c     BC A8 BF FD | 	call	#_module_align_below
0ee30     66 77 02 F6 | 	mov	arg02, local33
0ee34     01 76 06 F1 | 	add	arg02, #1
0ee38     67 75 02 F6 | 	mov	arg01, local34
0ee3c     06 78 06 F6 | 	mov	arg03, #6
0ee40     F0 A7 BF FD | 	call	#_module_align_space_even
0ee44     67 75 02 F6 | 	mov	arg01, local34
0ee48     18 75 06 F1 | 	add	arg01, #280
0ee4c     3A 01 48 FC | 	wrbyte	#0, arg01
0ee50     64 D1 02 F6 | 	mov	local35, local31
0ee54     02 D0 66 F0 | 	shl	local35, #2
0ee58     64 D1 02 F1 | 	add	local35, local31
0ee5c     06 D0 66 F0 | 	shl	local35, #6
0ee60     07 00 00 FF 
0ee64     00 8D 06 F1 | 	add	local01, ##3840
0ee68     46 C1 02 F6 | 	mov	local27, local01
0ee6c     46 D1 02 F1 | 	add	local35, local01
0ee70     68 75 02 F6 | 	mov	arg01, local35
0ee74     67 77 02 F6 | 	mov	arg02, local34
0ee78     CC 9C BF FD | 	call	#_module_init
0ee7c     64 8F 02 F6 | 	mov	local02, local31
0ee80     02 8E 66 F0 | 	shl	local02, #2
0ee84     64 8F 02 F1 | 	add	local02, local31
0ee88     02 8E 66 F0 | 	shl	local02, #2
0ee8c     11 00 00 FF 
0ee90     C0 8C 86 F1 | 	sub	local01, ##8896
0ee94     46 8F 02 F1 | 	add	local02, local01
0ee98     68 75 02 F6 | 	mov	arg01, local35
0ee9c     47 77 02 F6 | 	mov	arg02, local02
0eea0     40 A2 BF FD | 	call	#_module_set_text
0eea4     68 75 02 F6 | 	mov	arg01, local35
0eea8     00 76 06 F6 | 	mov	arg02, #0
0eeac     74 A3 BF FD | 	call	#_module_text_font
0eeb0     68 75 02 F6 | 	mov	arg01, local35
0eeb4     88 A2 BF FD | 	call	#_module_text_fit
0eeb8     68 75 02 F6 | 	mov	arg01, local35
0eebc     00 75 06 F1 | 	add	arg01, #256
0eec0     3A 15 68 FC | 	wrlong	#10, arg01
0eec4     04 74 06 F1 | 	add	arg01, #4
0eec8     3A 15 68 FC | 	wrlong	#10, arg01
0eecc     68 C3 02 FB | 	rdlong	local28, local35
0eed0     0C C3 06 F1 | 	add	local28, #268
0eed4     61 C5 02 FB | 	rdlong	local29, local28
0eed8     0C C3 86 F1 | 	sub	local28, #268
0eedc     68 75 02 F6 | 	mov	arg01, local35
0eee0     10 75 06 F1 | 	add	arg01, #272
0eee4     3A 01 68 FC | 	wrlong	#0, arg01
0eee8     04 74 86 F1 | 	sub	arg01, #4
0eeec     3A C5 62 FC | 	wrlong	local29, arg01
0eef0     68 75 02 F6 | 	mov	arg01, local35
0eef4     4C A8 BF FD | 	call	#_module_fit_width
0eef8     68 75 02 F6 | 	mov	arg01, local35
0eefc     01 76 06 F6 | 	mov	arg02, #1
0ef00     02 78 06 F6 | 	mov	arg03, #2
0ef04     B8 A6 BF FD | 	call	#_module_align_center_sector
0ef08     68 75 02 F6 | 	mov	arg01, local35
0ef0c     CC 74 06 F1 | 	add	arg01, #204
0ef10     3A A7 02 FB | 	rdlong	local14, arg01
0ef14     CC 74 86 F1 | 	sub	arg01, #204
0ef18     01 A6 0E F2 | 	cmp	local14, #1 wz
0ef1c                 | '         return;
0ef1c     DC 74 06 A1 |  if_e	add	arg01, #220
0ef20     3A 05 68 AC |  if_e	wrlong	#2, arg01
0ef24     68 75 02 F6 | 	mov	arg01, local35
0ef28     68 77 02 FB | 	rdlong	arg02, local35
0ef2c     BC A7 BF FD | 	call	#_module_align_below
0ef30     01 C8 06 F1 | 	add	local31, #1
0ef34     01 CC 06 F1 | 	add	local33, #1
0ef38     08 8C 86 F1 | 	sub	local01, #8
0ef3c     60 FE 9F FD | 	jmp	#LR__0399
0ef40                 | LR__0400
0ef40     04 CE 06 F1 | 	add	local34, #4
0ef44     67 C7 02 FB | 	rdlong	local30, local34
0ef48     04 CE 86 F1 | 	sub	local34, #4
0ef4c     01 CA 06 F1 | 	add	local32, #1
0ef50     40 FE 9F FD | 	jmp	#LR__0398
0ef54                 | LR__0401
0ef54                 | '         {
0ef54                 | '             file = &(explorer->fileModule[index]);
0ef54                 | '             module_init(file, subroot);
0ef54                 | '             module_set_margin(file, padding, padding);
0ef54                 | '             module_set_rectangle(file, 100, 100);
0ef54                 | '             module_set_color(file,  0xf800 , file->parent->foregroundColor);
0ef54                 | '             module_align_below(file, below);
0ef54                 | '             module_align_space_even(file, (j + 1),  6 );
0ef54                 | '             module_set_visable(file,  (0) );
0ef54                 | ' 
0ef54                 | '             Module *text = &(explorer->fileText[index]);
0ef54                 | '             module_init(text, file);
0ef54                 | '             module_set_text(text, explorer->files[index]);
0ef54                 | '             module_text_font(text,  0 );
0ef54                 | '             module_text_fit(text);
0ef54                 | '             module_set_margin(text, padding, padding);
0ef54                 | '             module_set_color(text,  0x0000 , text->parent->backgroundColor);
0ef54                 | '             module_fit_width(text);
0ef54                 | '             module_align_center(text);
0ef54                 | '             module_text_align(text, MODULE_TEXT_ALIGN_INNER_CENTER);
0ef54                 | '             module_align_below(text, text->parent);
0ef54                 | '             index++;
0ef54                 | '         }
0ef54                 | '         below = file->child[0];
0ef54                 | '     }
0ef54                 | ' 
0ef54                 | '     while (!explorer->complete)
0ef54                 | LR__0402
0ef54     04 8D 06 F1 | 	add	local01, #260
0ef58     46 35 CA FA | 	rdbyte	result1, local01 wz
0ef5c     04 8D 86 F1 | 	sub	local01, #260
0ef60     CC 03 90 5D |  if_ne	jmp	#LR__0415
0ef64     18 00 00 FF 
0ef68     C8 8D 06 F1 | 	add	local01, ##12744
0ef6c     46 75 02 F6 | 	mov	arg01, local01
0ef70     20 2B BF FD | 	call	#_chdir
0ef74     46 75 02 F6 | 	mov	arg01, local01
0ef78     18 00 00 FF 
0ef7c     C8 8D 86 F1 | 	sub	local01, ##12744
0ef80     F4 1A BF FD | 	call	#_opendir
0ef84     1A D3 0A F6 | 	mov	local36, result1 wz
0ef88     64 00 90 5D |  if_ne	jmp	#LR__0403
0ef8c     00 74 06 F6 | 	mov	arg01, #0
0ef90     3C A5 B1 FD | 	call	#__system___getiolock_1306
0ef94     1A 75 02 F6 | 	mov	arg01, result1
0ef98     D4 6C B1 FD | 	call	#__system___lockmem
0ef9c     4F 01 00 FF 
0efa0     95 77 06 F6 | 	mov	arg02, ##@LR__2009
0efa4     00 74 06 F6 | 	mov	arg01, #0
0efa8     00 78 06 F6 | 	mov	arg03, #0
0efac     68 72 B1 FD | 	call	#__system___basic_print_string
0efb0     00 74 06 F6 | 	mov	arg01, #0
0efb4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
0efb8     D1 76 02 FB | 	rdlong	arg02, ptr___system__dat__
0efbc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0efc0     00 78 06 F6 | 	mov	arg03, #0
0efc4     0A 7A 06 F6 | 	mov	arg04, #10
0efc8     90 72 B1 FD | 	call	#__system___basic_print_integer
0efcc     00 74 06 F6 | 	mov	arg01, #0
0efd0     0A 76 06 F6 | 	mov	arg02, #10
0efd4     00 78 06 F6 | 	mov	arg03, #0
0efd8     F0 71 B1 FD | 	call	#__system___basic_print_char
0efdc     00 74 06 F6 | 	mov	arg01, #0
0efe0     EC A4 B1 FD | 	call	#__system___getiolock_1306
0efe4     1A 01 68 FC | 	wrlong	#0, result1
0efe8                 | '             return  (0) ;
0efe8     00 34 06 F6 | 	mov	result1, #0
0efec     6C 04 90 FD | 	jmp	#LR__0418
0eff0                 | LR__0403
0eff0     00 D4 06 F6 | 	mov	local37, #0
0eff4                 | '         }
0eff4                 | ' 
0eff4                 | '         for (int i = 0; i < explorer->page *  ( 6 * 2 ) ; i++)
0eff4                 | LR__0404
0eff4     19 00 00 FF 
0eff8     2C 8C 06 F1 | 	add	local01, ##12844
0effc     46 75 02 FB | 	rdlong	arg01, local01
0f000     19 00 00 FF 
0f004     2C 8C 86 F1 | 	sub	local01, ##12844
0f008     3A D7 02 F6 | 	mov	local38, arg01
0f00c     01 D6 66 F0 | 	shl	local38, #1
0f010     3A D7 02 F1 | 	add	local38, arg01
0f014     02 D6 66 F0 | 	shl	local38, #2
0f018     6B D5 52 F2 | 	cmps	local37, local38 wc
0f01c     14 00 90 3D |  if_ae	jmp	#LR__0405
0f020     69 75 02 F6 | 	mov	arg01, local36
0f024     98 1B BF FD | 	call	#_readdir
0f028     00 34 0E F2 | 	cmp	result1, #0 wz
0f02c                 | '             {
0f02c                 | '                 break;
0f02c     01 D4 06 51 |  if_ne	add	local37, #1
0f030     C0 FF 9F 5D |  if_ne	jmp	#LR__0404
0f034                 | LR__0405
0f034     00 D8 06 F6 | 	mov	local39, #0
0f038                 | '             }
0f038                 | '         }
0f038                 | ' 
0f038                 | '         for (int i = 0; i <  ( 6 * 2 ) ; i++)
0f038                 | LR__0406
0f038     0C D8 56 F2 | 	cmps	local39, #12 wc
0f03c     6C 02 90 3D |  if_ae	jmp	#LR__0413
0f040     6C D7 02 F6 | 	mov	local38, local39
0f044     02 D6 66 F0 | 	shl	local38, #2
0f048     04 BE 06 F1 | 	add	local26, #4
0f04c     5F DB 02 F6 | 	mov	local40, local26
0f050     5F D7 02 F1 | 	add	local38, local26
0f054     6B DD 02 FB | 	rdlong	local41, local38
0f058     69 75 02 F6 | 	mov	arg01, local36
0f05c     60 1B BF FD | 	call	#_readdir
0f060     1A DF 0A F6 | 	mov	local42, result1 wz
0f064     04 BE 86 F1 | 	sub	local26, #4
0f068     14 02 90 AD |  if_e	jmp	#LR__0411
0f06c     6C 75 02 F6 | 	mov	arg01, local39
0f070     02 74 66 F0 | 	shl	arg01, #2
0f074     6C 75 02 F1 | 	add	arg01, local39
0f078     02 74 66 F0 | 	shl	arg01, #2
0f07c     08 8C 06 F1 | 	add	local01, #8
0f080     46 75 02 F1 | 	add	arg01, local01
0f084     6F 77 02 F6 | 	mov	arg02, local42
0f088     2C 6F BF FD | 	call	#_strcpy
0f08c     00 74 06 F6 | 	mov	arg01, #0
0f090     3C A4 B1 FD | 	call	#__system___getiolock_1306
0f094     1A 75 02 F6 | 	mov	arg01, result1
0f098     D4 6B B1 FD | 	call	#__system___lockmem
0f09c     4F 01 00 FF 
0f0a0     9D 77 06 F6 | 	mov	arg02, ##@LR__2010
0f0a4     00 74 06 F6 | 	mov	arg01, #0
0f0a8     00 78 06 F6 | 	mov	arg03, #0
0f0ac     68 71 B1 FD | 	call	#__system___basic_print_string
0f0b0     6C 91 02 F6 | 	mov	local03, local39
0f0b4     02 90 66 F0 | 	shl	local03, #2
0f0b8     6C 91 02 F1 | 	add	local03, local39
0f0bc     02 90 66 F0 | 	shl	local03, #2
0f0c0     46 93 02 F6 | 	mov	local04, local01
0f0c4     46 91 02 F1 | 	add	local03, local01
0f0c8     48 95 02 F6 | 	mov	local05, local03
0f0cc     00 74 06 F6 | 	mov	arg01, #0
0f0d0     4A 77 02 F6 | 	mov	arg02, local05
0f0d4     00 78 06 F6 | 	mov	arg03, #0
0f0d8     3C 71 B1 FD | 	call	#__system___basic_print_string
0f0dc     00 74 06 F6 | 	mov	arg01, #0
0f0e0     0A 76 06 F6 | 	mov	arg02, #10
0f0e4     00 78 06 F6 | 	mov	arg03, #0
0f0e8     E0 70 B1 FD | 	call	#__system___basic_print_char
0f0ec     00 74 06 F6 | 	mov	arg01, #0
0f0f0     DC A3 B1 FD | 	call	#__system___getiolock_1306
0f0f4     1A 01 68 FC | 	wrlong	#0, result1
0f0f8     00 8E 06 F6 | 	mov	local02, #0
0f0fc     6F 75 02 F6 | 	mov	arg01, local42
0f100     98 85 B0 FD | 	call	#_isFile_0909
0f104     00 34 0E F2 | 	cmp	result1, #0 wz
0f108     08 8C 86 F1 | 	sub	local01, #8
0f10c     20 00 90 AD |  if_e	jmp	#LR__0407
0f110     21 00 00 FF 
0f114     A4 D6 05 F1 | 	add	ptr__dat__, ##17060
0f118     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0f11c     21 00 00 FF 
0f120     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
0f124     6E 75 02 F6 | 	mov	arg01, local41
0f128     84 9F BF FD | 	call	#_module_set_image
0f12c     1C 00 90 FD | 	jmp	#LR__0408
0f130                 | LR__0407
0f130     21 00 00 FF 
0f134     D4 D6 05 F1 | 	add	ptr__dat__, ##17108
0f138     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0f13c     21 00 00 FF 
0f140     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
0f144     6E 75 02 F6 | 	mov	arg01, local41
0f148     64 9F BF FD | 	call	#_module_set_image
0f14c                 | LR__0408
0f14c     6E 75 02 F6 | 	mov	arg01, local41
0f150     64 78 06 F6 | 	mov	arg03, #100
0f154     F0 74 06 F1 | 	add	arg01, #240
0f158     3A C9 68 FC | 	wrlong	#100, arg01
0f15c     04 74 06 F1 | 	add	arg01, #4
0f160     3A C9 68 FC | 	wrlong	#100, arg01
0f164     6E 75 02 F6 | 	mov	arg01, local41
0f168     01 76 06 F6 | 	mov	arg02, #1
0f16c     18 75 06 F1 | 	add	arg01, #280
0f170     3A 03 48 FC | 	wrbyte	#1, arg01
0f174     19 00 00 FF 
0f178     30 8C 06 F1 | 	add	local01, ##12848
0f17c     46 D7 02 FB | 	rdlong	local38, local01
0f180     19 00 00 FF 
0f184     30 8C 86 F1 | 	sub	local01, ##12848
0f188     6C D7 0A F2 | 	cmp	local38, local39 wz
0f18c     9C 00 90 5D |  if_ne	jmp	#LR__0409
0f190     00 74 06 F6 | 	mov	arg01, #0
0f194     38 A3 B1 FD | 	call	#__system___getiolock_1306
0f198     1A 75 02 F6 | 	mov	arg01, result1
0f19c     D0 6A B1 FD | 	call	#__system___lockmem
0f1a0     4F 01 00 FF 
0f1a4     A4 77 06 F6 | 	mov	arg02, ##@LR__2011
0f1a8     00 74 06 F6 | 	mov	arg01, #0
0f1ac     00 78 06 F6 | 	mov	arg03, #0
0f1b0     64 70 B1 FD | 	call	#__system___basic_print_string
0f1b4     19 00 00 FF 
0f1b8     30 8C 06 F1 | 	add	local01, ##12848
0f1bc     46 77 02 FB | 	rdlong	arg02, local01
0f1c0     19 00 00 FF 
0f1c4     30 8C 86 F1 | 	sub	local01, ##12848
0f1c8     0A 90 06 F6 | 	mov	local03, #10
0f1cc     00 74 06 F6 | 	mov	arg01, #0
0f1d0     00 78 06 F6 | 	mov	arg03, #0
0f1d4     0A 7A 06 F6 | 	mov	arg04, #10
0f1d8     80 70 B1 FD | 	call	#__system___basic_print_integer
0f1dc     00 74 06 F6 | 	mov	arg01, #0
0f1e0     0A 76 06 F6 | 	mov	arg02, #10
0f1e4     00 78 06 F6 | 	mov	arg03, #0
0f1e8     E0 6F B1 FD | 	call	#__system___basic_print_char
0f1ec     00 74 06 F6 | 	mov	arg01, #0
0f1f0     DC A2 B1 FD | 	call	#__system___getiolock_1306
0f1f4     1A 01 68 FC | 	wrlong	#0, result1
0f1f8     00 8E 06 F6 | 	mov	local02, #0
0f1fc     04 DC 06 F1 | 	add	local41, #4
0f200     6E 75 02 FB | 	rdlong	arg01, local41
0f204     04 DC 86 F1 | 	sub	local41, #4
0f208     63 00 00 FF 
0f20c     18 78 06 F6 | 	mov	arg03, ##50712
0f210     10 75 06 F1 | 	add	arg01, #272
0f214     03 00 80 FF 
0f218     3A C1 6B FC | 	wrlong	##2016, arg01
0f21c     04 74 86 F1 | 	sub	arg01, #4
0f220     63 00 80 FF 
0f224     3A 31 68 FC | 	wrlong	##50712, arg01
0f228     28 00 90 FD | 	jmp	#LR__0410
0f22c                 | LR__0409
0f22c     04 DC 06 F1 | 	add	local41, #4
0f230     6E 75 02 FB | 	rdlong	arg01, local41
0f234     04 DC 86 F1 | 	sub	local41, #4
0f238     63 00 00 FF 
0f23c     18 78 06 F6 | 	mov	arg03, ##50712
0f240     10 75 06 F1 | 	add	arg01, #272
0f244     3A 01 68 FC | 	wrlong	#0, arg01
0f248     04 74 86 F1 | 	sub	arg01, #4
0f24c     63 00 80 FF 
0f250     3A 31 68 FC | 	wrlong	##50712, arg01
0f254                 | LR__0410
0f254     C9 74 02 F6 | 	mov	arg01, objptr
0f258     D7 76 02 F6 | 	mov	arg02, ptr__button_files_0927_
0f25c     D8 69 B1 FD | 	call	#__system___make_methodptr
0f260     1A 77 02 F6 | 	mov	arg02, result1
0f264     6E 75 02 F6 | 	mov	arg01, local41
0f268     6C 79 02 F6 | 	mov	arg03, local39
0f26c     34 75 06 F1 | 	add	arg01, #308
0f270     3A 77 62 FC | 	wrlong	arg02, arg01
0f274     10 74 86 F1 | 	sub	arg01, #16
0f278     3A 79 62 FC | 	wrlong	arg03, arg01
0f27c     24 00 90 FD | 	jmp	#LR__0412
0f280                 | LR__0411
0f280     6E 75 02 F6 | 	mov	arg01, local41
0f284     00 76 06 F6 | 	mov	arg02, #0
0f288     18 75 06 F1 | 	add	arg01, #280
0f28c     3A 01 48 FC | 	wrbyte	#0, arg01
0f290     00 78 06 F6 | 	mov	arg03, #0
0f294     34 DD 06 F1 | 	add	local41, #308
0f298     6E 01 68 FC | 	wrlong	#0, local41
0f29c     10 DC 86 F1 | 	sub	local41, #16
0f2a0     6E 01 68 FC | 	wrlong	#0, local41
0f2a4                 | LR__0412
0f2a4     01 D8 06 F1 | 	add	local39, #1
0f2a8     8C FD 9F FD | 	jmp	#LR__0406
0f2ac                 | LR__0413
0f2ac     69 75 02 F6 | 	mov	arg01, local36
0f2b0     A4 18 BF FD | 	call	#_closedir
0f2b4     46 75 02 FB | 	rdlong	arg01, local01
0f2b8     50 77 02 F6 | 	mov	arg02, local11
0f2bc     60 A6 BF FD | 	call	#_module_draw
0f2c0     00 74 06 F6 | 	mov	arg01, #0
0f2c4     08 A2 B1 FD | 	call	#__system___getiolock_1306
0f2c8     1A 75 02 F6 | 	mov	arg01, result1
0f2cc     A0 69 B1 FD | 	call	#__system___lockmem
0f2d0     4F 01 00 FF 
0f2d4     B0 77 06 F6 | 	mov	arg02, ##@LR__2012
0f2d8     00 74 06 F6 | 	mov	arg01, #0
0f2dc     00 78 06 F6 | 	mov	arg03, #0
0f2e0     34 6F B1 FD | 	call	#__system___basic_print_string
0f2e4     00 74 06 F6 | 	mov	arg01, #0
0f2e8     0A 76 06 F6 | 	mov	arg02, #10
0f2ec     00 78 06 F6 | 	mov	arg03, #0
0f2f0     D8 6E B1 FD | 	call	#__system___basic_print_char
0f2f4     01 C2 06 F6 | 	mov	local28, #1
0f2f8     00 74 06 F6 | 	mov	arg01, #0
0f2fc     D0 A1 B1 FD | 	call	#__system___getiolock_1306
0f300     1A 01 68 FC | 	wrlong	#0, result1
0f304     00 C4 06 F6 | 	mov	local29, #0
0f308                 | '         do
0f308                 | LR__0414
0f308     46 75 02 FB | 	rdlong	arg01, local01
0f30c     D4 64 BF FD | 	call	#_display_update_touch
0f310     46 77 02 FB | 	rdlong	arg02, local01
0f314     46 C1 02 F6 | 	mov	local27, local01
0f318     50 75 02 F6 | 	mov	arg01, local11
0f31c     60 79 02 F6 | 	mov	arg03, local27
0f320     4C 9A BF FD | 	call	#_module_touch_check
0f324     00 34 0E F2 | 	cmp	result1, #0 wz
0f328     DC FF 9F AD |  if_e	jmp	#LR__0414
0f32c     24 FC 9F FD | 	jmp	#LR__0402
0f330                 | LR__0415
0f330     46 75 02 FB | 	rdlong	arg01, local01
0f334     C0 12 00 FF 
0f338     00 76 06 F6 | 	mov	arg02, ##2457600
0f33c     0A 78 C6 F9 | 	decod	arg03, #10
0f340     00 7A 06 F6 | 	mov	arg04, #0
0f344     00 7C 06 F6 | 	mov	arg05, #0
0f348     00 7E 06 F6 | 	mov	arg06, #0
0f34c     0A 80 C6 F9 | 	decod	arg07, #10
0f350     00 82 06 F6 | 	mov	arg08, #0
0f354     00 84 06 F6 | 	mov	arg09, #0
0f358     0A 86 C6 F9 | 	decod	arg10, #10
0f35c     01 00 00 FF 
0f360     58 88 06 F6 | 	mov	arg11, ##600
0f364     C0 52 BF FD | 	call	#_display_bte_memory_copy
0f368     04 8C 06 F1 | 	add	local01, #4
0f36c     46 D7 0A FB | 	rdlong	local38, local01 wz
0f370     04 8C 86 F1 | 	sub	local01, #4
0f374     88 00 90 5D |  if_ne	jmp	#LR__0417
0f378     19 00 00 FF 
0f37c     30 8C 06 F1 | 	add	local01, ##12848
0f380     46 D7 02 FB | 	rdlong	local38, local01
0f384     19 00 00 FF 
0f388     30 8C 86 F1 | 	sub	local01, ##12848
0f38c     FF FF 7F FF 
0f390     FF D7 0E F2 | 	cmp	local38, ##-1 wz
0f394     20 00 90 5D |  if_ne	jmp	#LR__0416
0f398     18 00 00 FF 
0f39c     C8 8D 06 F1 | 	add	local01, ##12744
0f3a0     46 75 02 F6 | 	mov	arg01, local01
0f3a4     4F 01 00 FF 
0f3a8     BD 77 06 F6 | 	mov	arg02, ##@LR__2013
0f3ac     08 6C BF FD | 	call	#_strcpy
0f3b0                 | '         {
0f3b0                 | '             strcpy(explorer->pathBuffer, "");
0f3b0                 | '             return explorer->pathBuffer;
0f3b0     46 35 02 F6 | 	mov	result1, local01
0f3b4     A4 00 90 FD | 	jmp	#LR__0418
0f3b8                 | LR__0416
0f3b8     18 00 00 FF 
0f3bc     C8 8D 06 F1 | 	add	local01, ##12744
0f3c0     46 75 02 F6 | 	mov	arg01, local01
0f3c4     4F 01 00 FF 
0f3c8     BF 77 06 F6 | 	mov	arg02, ##@LR__2014
0f3cc     74 6C BF FD | 	call	#_strcat
0f3d0     46 75 02 F6 | 	mov	arg01, local01
0f3d4     68 8C 06 F1 | 	add	local01, #104
0f3d8     46 C1 02 FB | 	rdlong	local27, local01
0f3dc     60 77 02 F6 | 	mov	arg02, local27
0f3e0     02 76 66 F0 | 	shl	arg02, #2
0f3e4     60 77 02 F1 | 	add	arg02, local27
0f3e8     02 76 66 F0 | 	shl	arg02, #2
0f3ec     19 00 00 FF 
0f3f0     28 8C 86 F1 | 	sub	local01, ##12840
0f3f4     46 77 02 F1 | 	add	arg02, local01
0f3f8     48 6C BF FD | 	call	#_strcat
0f3fc     08 8C 86 F1 | 	sub	local01, #8
0f400                 | LR__0417
0f400     00 74 06 F6 | 	mov	arg01, #0
0f404     C8 A0 B1 FD | 	call	#__system___getiolock_1306
0f408     1A 75 02 F6 | 	mov	arg01, result1
0f40c     60 68 B1 FD | 	call	#__system___lockmem
0f410     4F 01 00 FF 
0f414     C1 77 06 F6 | 	mov	arg02, ##@LR__2015
0f418     00 74 06 F6 | 	mov	arg01, #0
0f41c     00 78 06 F6 | 	mov	arg03, #0
0f420     F4 6D B1 FD | 	call	#__system___basic_print_string
0f424     18 00 00 FF 
0f428     C8 8D 06 F1 | 	add	local01, ##12744
0f42c     46 77 02 F6 | 	mov	arg02, local01
0f430     00 74 06 F6 | 	mov	arg01, #0
0f434     00 78 06 F6 | 	mov	arg03, #0
0f438     DC 6D B1 FD | 	call	#__system___basic_print_string
0f43c     00 74 06 F6 | 	mov	arg01, #0
0f440     0A 76 06 F6 | 	mov	arg02, #10
0f444     00 78 06 F6 | 	mov	arg03, #0
0f448     80 6D B1 FD | 	call	#__system___basic_print_char
0f44c     00 74 06 F6 | 	mov	arg01, #0
0f450     7C A0 B1 FD | 	call	#__system___getiolock_1306
0f454     1A 01 68 FC | 	wrlong	#0, result1
0f458                 | '     return explorer->pathBuffer;
0f458     46 35 02 F6 | 	mov	result1, local01
0f45c                 | LR__0418
0f45c     A8 F0 03 F6 | 	mov	ptra, fp
0f460     B3 00 A0 FD | 	call	#popregs_
0f464                 | _explorer_run_ret
0f464     2D 00 64 FD | 	ret
0f468                 | 
0f468                 | _selection_init
0f468     07 4C 05 F6 | 	mov	COUNT_, #7
0f46c     A9 00 A0 FD | 	call	#pushregs_
0f470     3A 8D 02 F6 | 	mov	local01, arg01
0f474     3B 8F 02 F6 | 	mov	local02, arg02
0f478     04 8C 06 F1 | 	add	local01, #4
0f47c     46 91 02 F6 | 	mov	local03, local01
0f480     48 75 02 F6 | 	mov	arg01, local03
0f484     00 76 06 F6 | 	mov	arg02, #0
0f488     BC 96 BF FD | 	call	#_module_init
0f48c     40 8D 06 F1 | 	add	local01, #320
0f490     46 93 02 F6 | 	mov	local04, local01
0f494     49 75 02 F6 | 	mov	arg01, local04
0f498     48 77 02 F6 | 	mov	arg02, local03
0f49c     A8 96 BF FD | 	call	#_module_init
0f4a0     49 75 02 F6 | 	mov	arg01, local04
0f4a4     CC 74 06 F1 | 	add	arg01, #204
0f4a8     3A 0B 68 FC | 	wrlong	#5, arg01
0f4ac     24 74 06 F1 | 	add	arg01, #36
0f4b0     3A 21 6B FC | 	wrlong	#400, arg01
0f4b4     04 74 06 F1 | 	add	arg01, #4
0f4b8     3A 01 68 FC | 	wrlong	#0, arg01
0f4bc     49 75 02 F6 | 	mov	arg01, local04
0f4c0     E8 74 06 F1 | 	add	arg01, #232
0f4c4     3A 71 6A FC | 	wrlong	#312, arg01
0f4c8     04 74 06 F1 | 	add	arg01, #4
0f4cc     3A C9 68 FC | 	wrlong	#100, arg01
0f4d0     49 75 02 F6 | 	mov	arg01, local04
0f4d4     F8 74 06 F1 | 	add	arg01, #248
0f4d8     3A 15 68 FC | 	wrlong	#10, arg01
0f4dc     04 74 06 F1 | 	add	arg01, #4
0f4e0     3A 15 68 FC | 	wrlong	#10, arg01
0f4e4     49 75 02 F6 | 	mov	arg01, local04
0f4e8     10 75 06 F1 | 	add	arg01, #272
0f4ec     63 00 80 FF 
0f4f0     3A 31 68 FC | 	wrlong	##50712, arg01
0f4f4     04 74 86 F1 | 	sub	arg01, #4
0f4f8     3A 3F 68 FC | 	wrlong	#31, arg01
0f4fc     49 75 02 F6 | 	mov	arg01, local04
0f500     00 76 06 F6 | 	mov	arg02, #0
0f504     01 78 06 F6 | 	mov	arg03, #1
0f508     48 9F BF FD | 	call	#_module_add_border
0f50c     40 8D 06 F1 | 	add	local01, #320
0f510     46 91 02 F6 | 	mov	local03, local01
0f514     48 75 02 F6 | 	mov	arg01, local03
0f518     49 77 02 F6 | 	mov	arg02, local04
0f51c     28 96 BF FD | 	call	#_module_init
0f520     48 75 02 F6 | 	mov	arg01, local03
0f524     0A 78 06 F6 | 	mov	arg03, #10
0f528     00 75 06 F1 | 	add	arg01, #256
0f52c     3A 15 68 FC | 	wrlong	#10, arg01
0f530     04 74 06 F1 | 	add	arg01, #4
0f534     3A 15 68 FC | 	wrlong	#10, arg01
0f538     56 01 00 FF 
0f53c     99 D6 05 F1 | 	add	ptr__dat__, ##175257
0f540     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0f544     56 01 00 FF 
0f548     99 D6 85 F1 | 	sub	ptr__dat__, ##175257
0f54c     48 75 02 F6 | 	mov	arg01, local03
0f550     90 9B BF FD | 	call	#_module_set_text
0f554     48 75 02 F6 | 	mov	arg01, local03
0f558     02 76 06 F6 | 	mov	arg02, #2
0f55c     C4 9C BF FD | 	call	#_module_text_font
0f560     48 75 02 F6 | 	mov	arg01, local03
0f564     D8 9B BF FD | 	call	#_module_text_fit
0f568     48 79 02 FB | 	rdlong	arg03, local03
0f56c     10 79 06 F1 | 	add	arg03, #272
0f570     3C 79 02 FB | 	rdlong	arg03, arg03
0f574     48 75 02 F6 | 	mov	arg01, local03
0f578     10 75 06 F1 | 	add	arg01, #272
0f57c     3A 01 68 FC | 	wrlong	#0, arg01
0f580     04 74 86 F1 | 	sub	arg01, #4
0f584     3A 79 62 FC | 	wrlong	arg03, arg01
0f588     48 75 02 F6 | 	mov	arg01, local03
0f58c     04 9F BF FD | 	call	#_module_align_inner_top
0f590     48 75 02 F6 | 	mov	arg01, local03
0f594     01 76 06 F6 | 	mov	arg02, #1
0f598     02 78 06 F6 | 	mov	arg03, #2
0f59c     20 A0 BF FD | 	call	#_module_align_center_sector
0f5a0     48 75 02 F6 | 	mov	arg01, local03
0f5a4     CC 74 06 F1 | 	add	arg01, #204
0f5a8     3A 95 02 FB | 	rdlong	local05, arg01
0f5ac     CC 74 86 F1 | 	sub	arg01, #204
0f5b0     01 94 0E F2 | 	cmp	local05, #1 wz
0f5b4                 | '         return;
0f5b4     D8 74 06 A1 |  if_e	add	arg01, #216
0f5b8     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0f5bc     00 96 06 F6 | 	mov	local06, #0
0f5c0                 | ' 
0f5c0                 | ' 
0f5c0                 | '     Module *root = &(selection->root);
0f5c0                 | '     module_init(root,  (0) );
0f5c0                 | ' 
0f5c0                 | ' 
0f5c0                 | '     Module *window = &(selection->window);
0f5c0                 | '     module_init(window, root);
0f5c0                 | '     module_set_rectangle_circle(window,  400 , 0);
0f5c0                 | '     module_set_position(window, x, y);
0f5c0                 | '     module_set_padding(window, padding, padding);
0f5c0                 | '     module_set_color(window,  0xC618 ,  0x001f );
0f5c0                 | '     module_add_border(window,  0x0000 , 1);
0f5c0                 | ' 
0f5c0                 | ' 
0f5c0                 | '     Module *title = &(selection->title);
0f5c0                 | '     module_init(title, window);
0f5c0                 | '     module_set_margin(title, padding, padding);
0f5c0                 | '     module_set_text(title, selectBuffer);
0f5c0                 | '     module_text_font(title,  2 );
0f5c0                 | '     module_text_fit(title);
0f5c0                 | '     module_set_color(title,  0x0000 , title->parent->foregroundColor);
0f5c0                 | '     module_align_inner_top(title);
0f5c0                 | '     module_align_center(title);
0f5c0                 | '     module_text_underline(title);
0f5c0                 | ' 
0f5c0                 | '     Module *below = title;
0f5c0                 | '     for (int i = 0; i <  10 ; i++)
0f5c0     01 00 00 FF 
0f5c4     84 8C 86 F1 | 	sub	local01, ##644
0f5c8                 | LR__0419
0f5c8     0A 96 56 F2 | 	cmps	local06, #10 wc
0f5cc     48 01 90 3D |  if_ae	jmp	#LR__0420
0f5d0     4B 99 02 F6 | 	mov	local07, local06
0f5d4     02 98 66 F0 | 	shl	local07, #2
0f5d8     4B 99 02 F1 | 	add	local07, local06
0f5dc     06 98 66 F0 | 	shl	local07, #6
0f5e0     01 00 00 FF 
0f5e4     C4 8D 06 F1 | 	add	local01, ##964
0f5e8     46 99 02 F1 | 	add	local07, local01
0f5ec     4C 75 02 F6 | 	mov	arg01, local07
0f5f0     49 77 02 F6 | 	mov	arg02, local04
0f5f4     50 95 BF FD | 	call	#_module_init
0f5f8     4B 77 02 F6 | 	mov	arg02, local06
0f5fc     02 76 66 F0 | 	shl	arg02, #2
0f600     4B 77 02 F1 | 	add	arg02, local06
0f604     02 76 66 F0 | 	shl	arg02, #2
0f608     06 00 00 FF 
0f60c     80 8C 06 F1 | 	add	local01, ##3200
0f610     46 77 02 F1 | 	add	arg02, local01
0f614     4C 75 02 F6 | 	mov	arg01, local07
0f618     C8 9A BF FD | 	call	#_module_set_text
0f61c     4C 75 02 F6 | 	mov	arg01, local07
0f620     01 76 06 F6 | 	mov	arg02, #1
0f624     FC 9B BF FD | 	call	#_module_text_font
0f628     4C 75 02 F6 | 	mov	arg01, local07
0f62c     F0 74 06 F1 | 	add	arg01, #240
0f630     3A 01 68 FC | 	wrlong	#0, arg01
0f634     04 74 06 F1 | 	add	arg01, #4
0f638     3A 51 68 FC | 	wrlong	#40, arg01
0f63c     4C 75 02 F6 | 	mov	arg01, local07
0f640     00 A1 BF FD | 	call	#_module_fit_width
0f644     4C 75 02 F6 | 	mov	arg01, local07
0f648     00 75 06 F1 | 	add	arg01, #256
0f64c     3A 15 68 FC | 	wrlong	#10, arg01
0f650     04 74 06 F1 | 	add	arg01, #4
0f654     3A 15 68 FC | 	wrlong	#10, arg01
0f658     4C 79 02 FB | 	rdlong	arg03, local07
0f65c     10 79 06 F1 | 	add	arg03, #272
0f660     3C 79 02 FB | 	rdlong	arg03, arg03
0f664     4C 75 02 F6 | 	mov	arg01, local07
0f668     10 75 06 F1 | 	add	arg01, #272
0f66c     3A 01 68 FC | 	wrlong	#0, arg01
0f670     04 74 86 F1 | 	sub	arg01, #4
0f674     3A 79 62 FC | 	wrlong	arg03, arg01
0f678     4C 75 02 F6 | 	mov	arg01, local07
0f67c     3C 9E BF FD | 	call	#_module_align_inner_left
0f680     4C 75 02 F6 | 	mov	arg01, local07
0f684     48 77 02 F6 | 	mov	arg02, local03
0f688     60 A0 BF FD | 	call	#_module_align_below
0f68c     4C 75 02 F6 | 	mov	arg01, local07
0f690     00 76 06 F6 | 	mov	arg02, #0
0f694     01 78 06 F6 | 	mov	arg03, #1
0f698     B8 9D BF FD | 	call	#_module_add_border
0f69c     4C 75 02 F6 | 	mov	arg01, local07
0f6a0     CC 74 06 F1 | 	add	arg01, #204
0f6a4     3A 95 02 FB | 	rdlong	local05, arg01
0f6a8     CC 74 86 F1 | 	sub	arg01, #204
0f6ac     01 94 0E F2 | 	cmp	local05, #1 wz
0f6b0                 | '         return;
0f6b0     DC 74 06 A1 |  if_e	add	arg01, #220
0f6b4     3A 05 68 AC |  if_e	wrlong	#2, arg01
0f6b8     4C 75 02 F6 | 	mov	arg01, local07
0f6bc     CC 74 06 F1 | 	add	arg01, #204
0f6c0     3A 95 02 FB | 	rdlong	local05, arg01
0f6c4     CC 74 86 F1 | 	sub	arg01, #204
0f6c8     01 94 0E F2 | 	cmp	local05, #1 wz
0f6cc                 | '         return;
0f6cc     E0 74 06 A1 |  if_e	add	arg01, #224
0f6d0     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0f6d4     4C 75 02 F6 | 	mov	arg01, local07
0f6d8     18 75 06 F1 | 	add	arg01, #280
0f6dc     3A 01 48 FC | 	wrbyte	#0, arg01
0f6e0     C9 74 02 F6 | 	mov	arg01, objptr
0f6e4     E9 76 02 F6 | 	mov	arg02, ptr__check_buttons_2079_
0f6e8     4C 65 B1 FD | 	call	#__system___make_methodptr
0f6ec     4C 75 02 F6 | 	mov	arg01, local07
0f6f0     4B 79 02 F6 | 	mov	arg03, local06
0f6f4     34 75 06 F1 | 	add	arg01, #308
0f6f8     3A 35 62 FC | 	wrlong	result1, arg01
0f6fc     10 74 86 F1 | 	sub	arg01, #16
0f700     3A 79 62 FC | 	wrlong	arg03, arg01
0f704     4C 91 02 F6 | 	mov	local03, local07
0f708     01 96 06 F1 | 	add	local06, #1
0f70c     08 00 00 FF 
0f710     44 8C 86 F1 | 	sub	local01, ##4164
0f714     B0 FE 9F FD | 	jmp	#LR__0419
0f718                 | LR__0420
0f718     F4 92 06 F1 | 	add	local04, #244
0f71c     49 C9 68 FC | 	wrlong	#100, local04
0f720     08 00 00 FF 
0f724     0C 8D 06 F1 | 	add	local01, ##4364
0f728     46 01 68 FC | 	wrlong	#0, local01
0f72c     04 8C 06 F1 | 	add	local01, #4
0f730     FF FF FF FF 
0f734     46 FF 6B FC | 	wrlong	##-1, local01
0f738     08 00 00 FF 
0f73c     10 8D 86 F1 | 	sub	local01, ##4368
0f740     46 8F 62 FC | 	wrlong	local02, local01
0f744     A8 F0 03 F6 | 	mov	ptra, fp
0f748     B3 00 A0 FD | 	call	#popregs_
0f74c                 | _selection_init_ret
0f74c     2D 00 64 FD | 	ret
0f750                 | 
0f750                 | _selection_add_option
0f750     03 4C 05 F6 | 	mov	COUNT_, #3
0f754     A9 00 A0 FD | 	call	#pushregs_
0f758     3A 8D 02 F6 | 	mov	local01, arg01
0f75c     3B 8F 02 F6 | 	mov	local02, arg02
0f760     00 74 06 F6 | 	mov	arg01, #0
0f764     68 9D B1 FD | 	call	#__system___getiolock_1306
0f768     1A 75 02 F6 | 	mov	arg01, result1
0f76c     00 65 B1 FD | 	call	#__system___lockmem
0f770     4F 01 00 FF 
0f774     C7 77 06 F6 | 	mov	arg02, ##@LR__2016
0f778     00 74 06 F6 | 	mov	arg01, #0
0f77c     00 78 06 F6 | 	mov	arg03, #0
0f780     94 6A B1 FD | 	call	#__system___basic_print_string
0f784     00 74 06 F6 | 	mov	arg01, #0
0f788     0A 76 06 F6 | 	mov	arg02, #10
0f78c     00 78 06 F6 | 	mov	arg03, #0
0f790     38 6A B1 FD | 	call	#__system___basic_print_char
0f794     00 74 06 F6 | 	mov	arg01, #0
0f798     34 9D B1 FD | 	call	#__system___getiolock_1306
0f79c     1A 01 68 FC | 	wrlong	#0, result1
0f7a0     08 00 00 FF 
0f7a4     0C 8D 06 F1 | 	add	local01, ##4364
0f7a8     46 79 02 FB | 	rdlong	arg03, local01
0f7ac     3C 91 02 F6 | 	mov	local03, arg03
0f7b0     02 90 66 F0 | 	shl	local03, #2
0f7b4     3C 91 02 F1 | 	add	local03, arg03
0f7b8     06 90 66 F0 | 	shl	local03, #6
0f7bc     06 00 00 FF 
0f7c0     48 8D 86 F1 | 	sub	local01, ##3400
0f7c4     46 91 02 F1 | 	add	local03, local01
0f7c8     3C 75 02 F6 | 	mov	arg01, arg03
0f7cc     02 74 66 F0 | 	shl	arg01, #2
0f7d0     3C 75 02 F1 | 	add	arg01, arg03
0f7d4     02 74 66 F0 | 	shl	arg01, #2
0f7d8     06 00 00 FF 
0f7dc     80 8C 06 F1 | 	add	local01, ##3200
0f7e0     46 75 02 F1 | 	add	arg01, local01
0f7e4     47 77 02 F6 | 	mov	arg02, local02
0f7e8     14 78 06 F6 | 	mov	arg03, #20
0f7ec     FC 67 BF FD | 	call	#_strncpy
0f7f0     48 75 02 F6 | 	mov	arg01, local03
0f7f4     01 76 06 F6 | 	mov	arg02, #1
0f7f8     18 75 06 F1 | 	add	arg01, #280
0f7fc     3A 03 48 FC | 	wrbyte	#1, arg01
0f800     C8 8C 06 F1 | 	add	local01, #200
0f804     46 8F 02 FB | 	rdlong	local02, local01
0f808     01 8E 06 F1 | 	add	local02, #1
0f80c     46 8F 62 FC | 	wrlong	local02, local01
0f810     EC 90 06 F1 | 	add	local03, #236
0f814     48 8F 02 FB | 	rdlong	local02, local03
0f818     08 90 06 F1 | 	add	local03, #8
0f81c     48 75 02 FB | 	rdlong	arg01, local03
0f820     3A 8F 02 F1 | 	add	local02, arg01
0f824     08 90 06 F1 | 	add	local03, #8
0f828     48 91 02 FB | 	rdlong	local03, local03
0f82c     48 8F 02 F1 | 	add	local02, local03
0f830     07 00 00 FF 
0f834     D4 8C 86 F1 | 	sub	local01, ##3796
0f838     46 8F 62 FC | 	wrlong	local02, local01
0f83c     00 74 06 F6 | 	mov	arg01, #0
0f840     8C 9C B1 FD | 	call	#__system___getiolock_1306
0f844     1A 75 02 F6 | 	mov	arg01, result1
0f848     24 64 B1 FD | 	call	#__system___lockmem
0f84c     4F 01 00 FF 
0f850     D5 77 06 F6 | 	mov	arg02, ##@LR__2017
0f854     00 74 06 F6 | 	mov	arg01, #0
0f858     00 78 06 F6 | 	mov	arg03, #0
0f85c     B8 69 B1 FD | 	call	#__system___basic_print_string
0f860     00 74 06 F6 | 	mov	arg01, #0
0f864     0A 76 06 F6 | 	mov	arg02, #10
0f868     00 78 06 F6 | 	mov	arg03, #0
0f86c     5C 69 B1 FD | 	call	#__system___basic_print_char
0f870     00 74 06 F6 | 	mov	arg01, #0
0f874     58 9C B1 FD | 	call	#__system___getiolock_1306
0f878     1A 01 68 FC | 	wrlong	#0, result1
0f87c     A8 F0 03 F6 | 	mov	ptra, fp
0f880     B3 00 A0 FD | 	call	#popregs_
0f884                 | _selection_add_option_ret
0f884     2D 00 64 FD | 	ret
0f888                 | 
0f888                 | _selection_run
0f888     01 4C 05 F6 | 	mov	COUNT_, #1
0f88c     A9 00 A0 FD | 	call	#pushregs_
0f890     3A 8D 02 F6 | 	mov	local01, arg01
0f894     46 75 02 FB | 	rdlong	arg01, local01
0f898     00 76 06 F6 | 	mov	arg02, #0
0f89c     0A 78 C6 F9 | 	decod	arg03, #10
0f8a0     00 7A 06 F6 | 	mov	arg04, #0
0f8a4     00 7C 06 F6 | 	mov	arg05, #0
0f8a8     C0 12 00 FF 
0f8ac     00 7E 06 F6 | 	mov	arg06, ##2457600
0f8b0     0A 80 C6 F9 | 	decod	arg07, #10
0f8b4     00 82 06 F6 | 	mov	arg08, #0
0f8b8     00 84 06 F6 | 	mov	arg09, #0
0f8bc     0A 86 C6 F9 | 	decod	arg10, #10
0f8c0     01 00 00 FF 
0f8c4     58 88 06 F6 | 	mov	arg11, ##600
0f8c8     5C 4D BF FD | 	call	#_display_bte_memory_copy
0f8cc     46 75 02 FB | 	rdlong	arg01, local01
0f8d0     04 8C 06 F1 | 	add	local01, #4
0f8d4     46 77 02 F6 | 	mov	arg02, local01
0f8d8     04 8C 86 F1 | 	sub	local01, #4
0f8dc     40 A0 BF FD | 	call	#_module_draw
0f8e0                 | ' {
0f8e0                 | ' 
0f8e0                 | '     display_bte_memory_copy(selection->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
0f8e0                 | '     module_draw(selection->display, &(selection->root));
0f8e0                 | ' 
0f8e0                 | '     do
0f8e0                 | LR__0421
0f8e0     46 75 02 FB | 	rdlong	arg01, local01
0f8e4     FC 5E BF FD | 	call	#_display_update_touch
0f8e8     04 8C 06 F1 | 	add	local01, #4
0f8ec     46 75 02 F6 | 	mov	arg01, local01
0f8f0     04 8C 86 F1 | 	sub	local01, #4
0f8f4     46 77 02 FB | 	rdlong	arg02, local01
0f8f8     46 79 02 F6 | 	mov	arg03, local01
0f8fc     70 94 BF FD | 	call	#_module_touch_check
0f900     00 34 0E F2 | 	cmp	result1, #0 wz
0f904     D8 FF 9F AD |  if_e	jmp	#LR__0421
0f908     00 74 06 F6 | 	mov	arg01, #0
0f90c     C0 9B B1 FD | 	call	#__system___getiolock_1306
0f910     1A 75 02 F6 | 	mov	arg01, result1
0f914     58 63 B1 FD | 	call	#__system___lockmem
0f918     4F 01 00 FF 
0f91c     E8 77 06 F6 | 	mov	arg02, ##@LR__2018
0f920     00 74 06 F6 | 	mov	arg01, #0
0f924     00 78 06 F6 | 	mov	arg03, #0
0f928     EC 68 B1 FD | 	call	#__system___basic_print_string
0f92c     08 00 00 FF 
0f930     10 8D 06 F1 | 	add	local01, ##4368
0f934     46 77 02 FB | 	rdlong	arg02, local01
0f938     08 00 00 FF 
0f93c     10 8D 86 F1 | 	sub	local01, ##4368
0f940     00 74 06 F6 | 	mov	arg01, #0
0f944     00 78 06 F6 | 	mov	arg03, #0
0f948     0A 7A 06 F6 | 	mov	arg04, #10
0f94c     0C 69 B1 FD | 	call	#__system___basic_print_integer
0f950     00 74 06 F6 | 	mov	arg01, #0
0f954     0A 76 06 F6 | 	mov	arg02, #10
0f958     00 78 06 F6 | 	mov	arg03, #0
0f95c     6C 68 B1 FD | 	call	#__system___basic_print_char
0f960     00 74 06 F6 | 	mov	arg01, #0
0f964     68 9B B1 FD | 	call	#__system___getiolock_1306
0f968     1A 01 68 FC | 	wrlong	#0, result1
0f96c     46 75 02 FB | 	rdlong	arg01, local01
0f970     C0 12 00 FF 
0f974     00 76 06 F6 | 	mov	arg02, ##2457600
0f978     0A 78 C6 F9 | 	decod	arg03, #10
0f97c     00 7A 06 F6 | 	mov	arg04, #0
0f980     00 7C 06 F6 | 	mov	arg05, #0
0f984     00 7E 06 F6 | 	mov	arg06, #0
0f988     0A 80 C6 F9 | 	decod	arg07, #10
0f98c     00 82 06 F6 | 	mov	arg08, #0
0f990     00 84 06 F6 | 	mov	arg09, #0
0f994     0A 86 C6 F9 | 	decod	arg10, #10
0f998     01 00 00 FF 
0f99c     58 88 06 F6 | 	mov	arg11, ##600
0f9a0     84 4C BF FD | 	call	#_display_bte_memory_copy
0f9a4                 | ' 
0f9a4                 | ' 
0f9a4                 | '     display_bte_memory_copy(selection->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
0f9a4                 | '     return selection->selected;
0f9a4     08 00 00 FF 
0f9a8     10 8D 06 F1 | 	add	local01, ##4368
0f9ac     46 35 02 FB | 	rdlong	result1, local01
0f9b0     A8 F0 03 F6 | 	mov	ptra, fp
0f9b4     B3 00 A0 FD | 	call	#popregs_
0f9b8                 | _selection_run_ret
0f9b8     2D 00 64 FD | 	ret
0f9bc                 | 
0f9bc                 | _run_motion_profile_init
0f9bc     3A 01 68 FC | 	wrlong	#0, arg01
0f9c0     04 74 06 F1 | 	add	arg01, #4
0f9c4     3A 01 68 FC | 	wrlong	#0, arg01
0f9c8     04 74 06 F1 | 	add	arg01, #4
0f9cc     3A 01 68 FC | 	wrlong	#0, arg01
0f9d0     04 74 06 F1 | 	add	arg01, #4
0f9d4     3A 01 48 FC | 	wrbyte	#0, arg01
0f9d8     01 74 06 F1 | 	add	arg01, #1
0f9dc     3A 01 48 FC | 	wrbyte	#0, arg01
0f9e0     01 74 06 F1 | 	add	arg01, #1
0f9e4     3A 01 48 FC | 	wrbyte	#0, arg01
0f9e8     02 74 06 F1 | 	add	arg01, #2
0f9ec     3A 01 68 FC | 	wrlong	#0, arg01
0f9f0     0C 74 06 F1 | 	add	arg01, #12
0f9f4     3A 01 68 FC | 	wrlong	#0, arg01
0f9f8     04 74 06 F1 | 	add	arg01, #4
0f9fc     3A 01 68 FC | 	wrlong	#0, arg01
0fa00     08 74 86 F1 | 	sub	arg01, #8
0fa04     3A 01 68 FC | 	wrlong	#0, arg01
0fa08     04 74 86 F1 | 	sub	arg01, #4
0fa0c     3A 01 68 FC | 	wrlong	#0, arg01
0fa10                 | _run_motion_profile_init_ret
0fa10     2D 00 64 FD | 	ret
0fa14                 | 
0fa14                 | _get_function_info
0fa14     02 4C 05 F6 | 	mov	COUNT_, #2
0fa18     A9 00 A0 FD | 	call	#pushregs_
0fa1c     3A 8D 02 F6 | 	mov	local01, arg01
0fa20     3B 8F 0A F6 | 	mov	local02, arg02 wz
0fa24                 | ' {
0fa24                 | '     switch (id)
0fa24     0C 00 90 AD |  if_e	jmp	#LR__0422
0fa28     01 8E 0E F2 | 	cmp	local02, #1 wz
0fa2c     64 00 90 AD |  if_e	jmp	#LR__0423
0fa30     E4 00 90 FD | 	jmp	#LR__0424
0fa34                 | LR__0422
0fa34     46 01 68 FC | 	wrlong	#0, local01
0fa38     04 8C 06 F1 | 	add	local01, #4
0fa3c     46 75 02 F6 | 	mov	arg01, local01
0fa40     4F 01 00 FF 
0fa44     F3 77 06 F6 | 	mov	arg02, ##@LR__2019
0fa48     0A 78 06 F6 | 	mov	arg03, #10
0fa4c     9C 65 BF FD | 	call	#_strncpy
0fa50     14 8C 06 F1 | 	add	local01, #20
0fa54     46 01 68 FC | 	wrlong	#0, local01
0fa58     04 8C 06 F1 | 	add	local01, #4
0fa5c     46 05 68 FC | 	wrlong	#2, local01
0fa60     04 8C 06 F1 | 	add	local01, #4
0fa64     46 75 02 F6 | 	mov	arg01, local01
0fa68     4F 01 00 FF 
0fa6c     F8 77 06 F6 | 	mov	arg02, ##@LR__2020
0fa70     14 78 06 F6 | 	mov	arg03, #20
0fa74     74 65 BF FD | 	call	#_strncpy
0fa78     14 8C 06 F1 | 	add	local01, #20
0fa7c     50 01 00 FF 
0fa80     01 76 06 F6 | 	mov	arg02, ##@LR__2021
0fa84     46 75 02 F6 | 	mov	arg01, local01
0fa88     14 78 06 F6 | 	mov	arg03, #20
0fa8c     5C 65 BF FD | 	call	#_strncpy
0fa90                 | '     {
0fa90                 | '         info->id = QUARTET_FUNC_LINE;
0fa90                 | ' 
0fa90                 | '         strncpy(info->name, "Line",  10 );
0fa90                 | ' 
0fa90                 | '         info->func =  (0) ;
0fa90                 | ' 
0fa90                 | '         info->args_count = 2;
0fa90                 | '         strncpy(info->args[0], "distance",  20 );
0fa90                 | '         strncpy(info->args[1], "strain rate",  20 );
0fa90                 | '         break;
0fa90     AC 00 90 FD | 	jmp	#LR__0425
0fa94                 | LR__0423
0fa94     46 03 68 FC | 	wrlong	#1, local01
0fa98     04 8C 06 F1 | 	add	local01, #4
0fa9c     46 75 02 F6 | 	mov	arg01, local01
0faa0     50 01 00 FF 
0faa4     0D 76 06 F6 | 	mov	arg02, ##@LR__2022
0faa8     0A 78 06 F6 | 	mov	arg03, #10
0faac     3C 65 BF FD | 	call	#_strncpy
0fab0     C9 74 02 F6 | 	mov	arg01, objptr
0fab4     0B 77 02 F6 | 	mov	arg02, ptr__sigmoid_
0fab8     7C 61 B1 FD | 	call	#__system___make_methodptr
0fabc     14 8C 06 F1 | 	add	local01, #20
0fac0     46 35 62 FC | 	wrlong	result1, local01
0fac4     04 8C 06 F1 | 	add	local01, #4
0fac8     46 07 68 FC | 	wrlong	#3, local01
0facc     04 8C 06 F1 | 	add	local01, #4
0fad0     46 75 02 F6 | 	mov	arg01, local01
0fad4     50 01 00 FF 
0fad8     15 76 06 F6 | 	mov	arg02, ##@LR__2023
0fadc     14 78 06 F6 | 	mov	arg03, #20
0fae0     08 65 BF FD | 	call	#_strncpy
0fae4     14 8C 06 F1 | 	add	local01, #20
0fae8     46 75 02 F6 | 	mov	arg01, local01
0faec     50 01 00 FF 
0faf0     1E 76 06 F6 | 	mov	arg02, ##@LR__2024
0faf4     14 78 06 F6 | 	mov	arg03, #20
0faf8     F0 64 BF FD | 	call	#_strncpy
0fafc     14 8C 06 F1 | 	add	local01, #20
0fb00     50 01 00 FF 
0fb04     2A 76 06 F6 | 	mov	arg02, ##@LR__2025
0fb08     46 75 02 F6 | 	mov	arg01, local01
0fb0c     14 78 06 F6 | 	mov	arg03, #20
0fb10     D8 64 BF FD | 	call	#_strncpy
0fb14                 | '     {
0fb14                 | '         info->id = QUARTET_FUNC_SIGMOIDAL;
0fb14                 | ' 
0fb14                 | '         strncpy(info->name, "Sigmoid",  10 );
0fb14                 | ' 
0fb14                 | '         info->func = sigmoid;
0fb14                 | ' 
0fb14                 | '         info->args_count = 3;
0fb14                 | '         strncpy(info->args[0], "distance",  20 );
0fb14                 | '         strncpy(info->args[1], "strain rate",  20 );
0fb14                 | '         strncpy(info->args[2], "error",  20 );
0fb14                 | '         break;
0fb14     28 00 90 FD | 	jmp	#LR__0425
0fb18                 | LR__0424
0fb18     46 03 68 FC | 	wrlong	#1, local01
0fb1c     04 8C 06 F1 | 	add	local01, #4
0fb20     46 75 02 F6 | 	mov	arg01, local01
0fb24     50 01 00 FF 
0fb28     30 76 06 F6 | 	mov	arg02, ##@LR__2026
0fb2c     B8 60 B1 FD | 	call	#__system____builtin_strcpy
0fb30     14 8C 06 F1 | 	add	local01, #20
0fb34     46 01 68 FC | 	wrlong	#0, local01
0fb38     04 8C 06 F1 | 	add	local01, #4
0fb3c     46 01 68 FC | 	wrlong	#0, local01
0fb40                 | '         info->id = QUARTET_FUNC_SIGMOIDAL;
0fb40                 | ' 
0fb40                 | '         __builtin_strcpy(info->name, "") ;
0fb40                 | ' 
0fb40                 | '         info->func =  (0) ;
0fb40                 | ' 
0fb40                 | '         info->args_count = 0;
0fb40                 | '         break;
0fb40                 | LR__0425
0fb40     A8 F0 03 F6 | 	mov	ptra, fp
0fb44     B3 00 A0 FD | 	call	#popregs_
0fb48                 | _get_function_info_ret
0fb48     2D 00 64 FD | 	ret
0fb4c                 | 
0fb4c                 | _position_profile
0fb4c     02 4C 05 F6 | 	mov	COUNT_, #2
0fb50     A9 00 A0 FD | 	call	#pushregs_
0fb54     3B 8D 02 F6 | 	mov	local01, arg02
0fb58     46 35 02 FB | 	rdlong	result1, local01
0fb5c     02 00 00 FF 
0fb60     34 34 06 FD | 	qmul	result1, ##1076
0fb64     3C 8F 02 F6 | 	mov	local02, arg03
0fb68     3C 8E 06 F1 | 	add	local02, #60
0fb6c     46 77 02 F6 | 	mov	arg02, local01
0fb70     18 78 62 FD | 	getqx	arg03
0fb74     47 79 02 F1 | 	add	arg03, local02
0fb78     58 00 B0 FD | 	call	#_position_set
0fb7c     1A 79 02 F6 | 	mov	arg03, result1
0fb80     0D 8C 06 F1 | 	add	local01, #13
0fb84     46 35 CA FA | 	rdbyte	result1, local01 wz
0fb88     0D 8C 86 F1 | 	sub	local01, #13
0fb8c     3C 8E 86 F1 | 	sub	local02, #60
0fb90     18 00 90 AD |  if_e	jmp	#LR__0426
0fb94     46 35 02 FB | 	rdlong	result1, local01
0fb98     01 34 06 F1 | 	add	result1, #1
0fb9c     46 35 62 FC | 	wrlong	result1, local01
0fba0     0D 8C 06 F1 | 	add	local01, #13
0fba4     46 01 48 FC | 	wrbyte	#0, local01
0fba8     0D 8C 86 F1 | 	sub	local01, #13
0fbac                 | LR__0426
0fbac     46 35 02 FB | 	rdlong	result1, local01
0fbb0     38 8E 06 F1 | 	add	local02, #56
0fbb4     47 8F 02 FB | 	rdlong	local02, local02
0fbb8     47 35 52 F2 | 	cmps	result1, local02 wc
0fbbc     0C 8C 06 31 |  if_ae	add	local01, #12
0fbc0     46 03 48 3C |  if_ae	wrbyte	#1, local01
0fbc4                 | '     {
0fbc4                 | '         run->profileComplete =  (1) ;
0fbc4                 | '     }
0fbc4                 | '     return position;
0fbc4     3C 35 02 F6 | 	mov	result1, arg03
0fbc8     A8 F0 03 F6 | 	mov	ptra, fp
0fbcc     B3 00 A0 FD | 	call	#popregs_
0fbd0                 | _position_profile_ret
0fbd0     2D 00 64 FD | 	ret
0fbd4                 | 
0fbd4                 | _position_set
0fbd4     02 4C 05 F6 | 	mov	COUNT_, #2
0fbd8     A9 00 A0 FD | 	call	#pushregs_
0fbdc     3B 8D 02 F6 | 	mov	local01, arg02
0fbe0     08 8C 06 F1 | 	add	local01, #8
0fbe4     46 35 02 FB | 	rdlong	result1, local01
0fbe8     64 34 06 FD | 	qmul	result1, #100
0fbec     3C 8F 02 F6 | 	mov	local02, arg03
0fbf0     4C 8E 06 F1 | 	add	local02, #76
0fbf4     18 78 62 FD | 	getqx	arg03
0fbf8     47 79 02 F1 | 	add	arg03, local02
0fbfc     A8 00 B0 FD | 	call	#_position_quartet
0fc00     1A 79 02 F6 | 	mov	arg03, result1
0fc04     06 8C 06 F1 | 	add	local01, #6
0fc08     46 35 CA FA | 	rdbyte	result1, local01 wz
0fc0c     0E 8C 86 F1 | 	sub	local01, #14
0fc10     4C 8E 86 F1 | 	sub	local02, #76
0fc14     1C 00 90 AD |  if_e	jmp	#LR__0427
0fc18     08 8C 06 F1 | 	add	local01, #8
0fc1c     46 35 02 FB | 	rdlong	result1, local01
0fc20     01 34 06 F1 | 	add	result1, #1
0fc24     46 35 62 FC | 	wrlong	result1, local01
0fc28     06 8C 06 F1 | 	add	local01, #6
0fc2c     46 01 48 FC | 	wrbyte	#0, local01
0fc30     0E 8C 86 F1 | 	sub	local01, #14
0fc34                 | LR__0427
0fc34     08 8C 06 F1 | 	add	local01, #8
0fc38     46 77 02 FB | 	rdlong	arg02, local01
0fc3c     08 8C 86 F1 | 	sub	local01, #8
0fc40     48 8E 06 F1 | 	add	local02, #72
0fc44     47 35 02 FB | 	rdlong	result1, local02
0fc48     48 8E 86 F1 | 	sub	local02, #72
0fc4c     1A 77 52 F2 | 	cmps	arg02, result1 wc
0fc50     1C 00 90 CD |  if_b	jmp	#LR__0428
0fc54     04 8C 06 F1 | 	add	local01, #4
0fc58     46 35 02 FB | 	rdlong	result1, local01
0fc5c     01 34 06 F1 | 	add	result1, #1
0fc60     46 35 62 FC | 	wrlong	result1, local01
0fc64     04 8C 06 F1 | 	add	local01, #4
0fc68     46 01 68 FC | 	wrlong	#0, local01
0fc6c     08 8C 86 F1 | 	sub	local01, #8
0fc70                 | LR__0428
0fc70     04 8C 06 F1 | 	add	local01, #4
0fc74     46 77 02 FB | 	rdlong	arg02, local01
0fc78     04 8C 86 F1 | 	sub	local01, #4
0fc7c     44 8E 06 F1 | 	add	local02, #68
0fc80     47 8F 02 FB | 	rdlong	local02, local02
0fc84     47 77 52 F2 | 	cmps	arg02, local02 wc
0fc88     0D 8C 06 31 |  if_ae	add	local01, #13
0fc8c     46 03 48 3C |  if_ae	wrbyte	#1, local01
0fc90     09 8C 86 31 |  if_ae	sub	local01, #9
0fc94     46 01 68 3C |  if_ae	wrlong	#0, local01
0fc98                 | '     {
0fc98                 | ' 
0fc98                 | '         run->setComplete =  (1) ;
0fc98                 | '         run->currentExecution = 0;
0fc98                 | '     }
0fc98                 | '     return position;
0fc98     3C 35 02 F6 | 	mov	result1, arg03
0fc9c     A8 F0 03 F6 | 	mov	ptra, fp
0fca0     B3 00 A0 FD | 	call	#popregs_
0fca4                 | _position_set_ret
0fca4     2D 00 64 FD | 	ret
0fca8                 | 
0fca8                 | _position_quartet
0fca8     03 4C 05 F6 | 	mov	COUNT_, #3
0fcac     A9 00 A0 FD | 	call	#pushregs_
0fcb0     C8 F1 07 F1 | 	add	ptra, #456
0fcb4     04 50 05 F1 | 	add	fp, #4
0fcb8     A8 74 62 FC | 	wrlong	arg01, fp
0fcbc     04 50 05 F1 | 	add	fp, #4
0fcc0     A8 76 62 FC | 	wrlong	arg02, fp
0fcc4     04 50 05 F1 | 	add	fp, #4
0fcc8     A8 78 62 FC | 	wrlong	arg03, fp
0fccc     04 50 05 F1 | 	add	fp, #4
0fcd0     A8 74 02 F6 | 	mov	arg01, fp
0fcd4     10 50 85 F1 | 	sub	fp, #16
0fcd8     3C 77 02 F6 | 	mov	arg02, arg03
0fcdc     34 76 06 F1 | 	add	arg02, #52
0fce0     3B 77 02 FB | 	rdlong	arg02, arg02
0fce4     2C FD BF FD | 	call	#_get_function_info
0fce8     28 50 05 F1 | 	add	fp, #40
0fcec     A8 74 02 FB | 	rdlong	arg01, fp
0fcf0     28 50 85 F1 | 	sub	fp, #40
0fcf4     00 76 06 F6 | 	mov	arg02, #0
0fcf8     AC 5F B1 FD | 	call	#__system___funcptr_cmp
0fcfc     00 34 0E F2 | 	cmp	result1, #0 wz
0fd00     68 00 90 5D |  if_ne	jmp	#LR__0429
0fd04     08 50 05 F1 | 	add	fp, #8
0fd08     A8 34 02 FB | 	rdlong	result1, fp
0fd0c     04 50 85 F1 | 	sub	fp, #4
0fd10     A8 76 02 FB | 	rdlong	arg02, fp
0fd14     10 34 06 F1 | 	add	result1, #16
0fd18     1A 77 62 FC | 	wrlong	arg02, result1
0fd1c     04 50 05 F1 | 	add	fp, #4
0fd20     A8 76 02 FB | 	rdlong	arg02, fp
0fd24     3B 8D 02 F6 | 	mov	local01, arg02
0fd28     1C 76 06 F1 | 	add	arg02, #28
0fd2c     3B 75 02 FB | 	rdlong	arg01, arg02
0fd30     04 50 05 F1 | 	add	fp, #4
0fd34     A8 76 02 FB | 	rdlong	arg02, fp
0fd38     0C 50 85 F1 | 	sub	fp, #12
0fd3c     38 76 06 F1 | 	add	arg02, #56
0fd40     3B 77 02 FB | 	rdlong	arg02, arg02
0fd44     DC 79 B1 FD | 	call	#__system___float_add
0fd48     1C 8C 06 F1 | 	add	local01, #28
0fd4c     46 35 62 FC | 	wrlong	result1, local01
0fd50     08 50 05 F1 | 	add	fp, #8
0fd54     A8 8C 02 FB | 	rdlong	local01, fp
0fd58     08 50 85 F1 | 	sub	fp, #8
0fd5c     0E 8C 06 F1 | 	add	local01, #14
0fd60     46 03 48 FC | 	wrbyte	#1, local01
0fd64                 | '     {
0fd64                 | ' 
0fd64                 | '         run->lastQuartetTime = t;
0fd64                 | '         run->lastQuartetDistance += quartet->parameters[0];
0fd64                 | '         run->quartetComplete =  (1) ;
0fd64                 | '         return 0;
0fd64     00 34 06 F6 | 	mov	result1, #0
0fd68     38 01 90 FD | 	jmp	#LR__0431
0fd6c                 | LR__0429
0fd6c     28 50 05 F1 | 	add	fp, #40
0fd70     A8 8C 02 FB | 	rdlong	local01, fp
0fd74     46 8F 02 FB | 	rdlong	local02, local01
0fd78     04 8C 06 F1 | 	add	local01, #4
0fd7c     46 8D 02 FB | 	rdlong	local01, local01
0fd80     24 50 85 F1 | 	sub	fp, #36
0fd84     A8 74 02 FB | 	rdlong	arg01, fp
0fd88     04 50 05 F1 | 	add	fp, #4
0fd8c     A8 76 02 FB | 	rdlong	arg02, fp
0fd90     08 50 85 F1 | 	sub	fp, #8
0fd94     10 76 06 F1 | 	add	arg02, #16
0fd98     3B 77 02 FB | 	rdlong	arg02, arg02
0fd9c     1F 76 E6 F4 | 	bitnot	arg02, #31
0fda0     80 79 B1 FD | 	call	#__system___float_add
0fda4     1A 75 02 F6 | 	mov	arg01, result1
0fda8     0C 50 05 F1 | 	add	fp, #12
0fdac     A8 76 02 FB | 	rdlong	arg02, fp
0fdb0     0C 50 85 F1 | 	sub	fp, #12
0fdb4     38 76 06 F1 | 	add	arg02, #56
0fdb8     C9 90 02 F6 | 	mov	local03, objptr
0fdbc     47 93 01 F6 | 	mov	objptr, local02
0fdc0     2D 8C 62 FD | 	call	local01
0fdc4     48 93 01 F6 | 	mov	objptr, local03
0fdc8     C0 51 05 F1 | 	add	fp, #448
0fdcc     A8 34 62 FC | 	wrlong	result1, fp
0fdd0     B8 51 85 F1 | 	sub	fp, #440
0fdd4     A8 8C 02 FB | 	rdlong	local01, fp
0fdd8     1C 8C 06 F1 | 	add	local01, #28
0fddc     46 91 02 FB | 	rdlong	local03, local01
0fde0     BC 51 05 F1 | 	add	fp, #444
0fde4     A8 90 62 FC | 	wrlong	local03, fp
0fde8     04 50 85 F1 | 	sub	fp, #4
0fdec     A8 74 02 FB | 	rdlong	arg01, fp
0fdf0     B4 51 85 F1 | 	sub	fp, #436
0fdf4     A8 90 02 FB | 	rdlong	local03, fp
0fdf8     0C 50 85 F1 | 	sub	fp, #12
0fdfc     38 90 06 F1 | 	add	local03, #56
0fe00     48 77 02 FB | 	rdlong	arg02, local03
0fe04     1F 76 E6 F4 | 	bitnot	arg02, #31
0fe08     18 79 B1 FD | 	call	#__system___float_add
0fe0c     1F 34 06 F4 | 	bitl	result1, #31
0fe10     1A 75 02 F6 | 	mov	arg01, result1
0fe14     66 E6 1E FF 
0fe18     CD 76 06 F6 | 	mov	arg02, ##1036831949
0fe1c     01 78 06 F6 | 	mov	arg03, #1
0fe20     5C 80 B1 FD | 	call	#__system___float_cmp
0fe24     00 34 56 F2 | 	cmps	result1, #0 wc
0fe28     60 00 90 3D |  if_ae	jmp	#LR__0430
0fe2c     08 50 05 F1 | 	add	fp, #8
0fe30     A8 8C 02 FB | 	rdlong	local01, fp
0fe34     04 50 85 F1 | 	sub	fp, #4
0fe38     A8 90 02 FB | 	rdlong	local03, fp
0fe3c     10 8C 06 F1 | 	add	local01, #16
0fe40     46 91 62 FC | 	wrlong	local03, local01
0fe44     04 50 05 F1 | 	add	fp, #4
0fe48     A8 90 02 FB | 	rdlong	local03, fp
0fe4c     48 8D 02 F6 | 	mov	local01, local03
0fe50     1C 90 06 F1 | 	add	local03, #28
0fe54     48 75 02 FB | 	rdlong	arg01, local03
0fe58     04 50 05 F1 | 	add	fp, #4
0fe5c     A8 90 02 FB | 	rdlong	local03, fp
0fe60     0C 50 85 F1 | 	sub	fp, #12
0fe64     38 90 06 F1 | 	add	local03, #56
0fe68     48 77 02 FB | 	rdlong	arg02, local03
0fe6c     B4 78 B1 FD | 	call	#__system___float_add
0fe70     1C 8C 06 F1 | 	add	local01, #28
0fe74     46 35 62 FC | 	wrlong	result1, local01
0fe78     08 50 05 F1 | 	add	fp, #8
0fe7c     A8 8C 02 FB | 	rdlong	local01, fp
0fe80     08 50 85 F1 | 	sub	fp, #8
0fe84     0E 8C 06 F1 | 	add	local01, #14
0fe88     46 03 48 FC | 	wrbyte	#1, local01
0fe8c                 | LR__0430
0fe8c                 | '     {
0fe8c                 | '         run->lastQuartetTime = t;
0fe8c                 | '         run->lastQuartetDistance += quartet->parameters[0];
0fe8c                 | '         run->quartetComplete =  (1) ;
0fe8c                 | '     }
0fe8c                 | '     return lastQuartetDistance + position;
0fe8c     C4 51 05 F1 | 	add	fp, #452
0fe90     A8 74 02 FB | 	rdlong	arg01, fp
0fe94     04 50 85 F1 | 	sub	fp, #4
0fe98     A8 76 02 FB | 	rdlong	arg02, fp
0fe9c     C0 51 85 F1 | 	sub	fp, #448
0fea0     80 78 B1 FD | 	call	#__system___float_add
0fea4                 | LR__0431
0fea4     A8 F0 03 F6 | 	mov	ptra, fp
0fea8     B3 00 A0 FD | 	call	#popregs_
0feac                 | _position_quartet_ret
0feac     2D 00 64 FD | 	ret
0feb0                 | 
0feb0                 | _sigmoid
0feb0     06 4C 05 F6 | 	mov	COUNT_, #6
0feb4     A9 00 A0 FD | 	call	#pushregs_
0feb8     3A 8D 02 F6 | 	mov	local01, arg01
0febc     3B 8F 02 FB | 	rdlong	local02, arg02
0fec0     04 76 06 F1 | 	add	arg02, #4
0fec4     3B 91 02 FB | 	rdlong	local03, arg02
0fec8     04 76 06 F1 | 	add	arg02, #4
0fecc     3B 93 02 FB | 	rdlong	local04, arg02
0fed0     01 94 06 F6 | 	mov	local05, #1
0fed4     47 75 02 F6 | 	mov	arg01, local02
0fed8     00 76 06 F6 | 	mov	arg02, #0
0fedc     01 78 06 F6 | 	mov	arg03, #1
0fee0     9C 7F B1 FD | 	call	#__system___float_cmp
0fee4     00 34 56 F2 | 	cmps	result1, #0 wc
0fee8     01 94 66 C6 |  if_b	neg	local05, #1
0feec     1F 8E E6 C4 |  if_b	bitnot	local02, #31
0fef0     48 75 02 F6 | 	mov	arg01, local03
0fef4     00 40 20 FF 
0fef8     00 76 06 F6 | 	mov	arg02, ##1082130432
0fefc     28 7B B1 FD | 	call	#__system___float_mul
0ff00     1A 75 02 F6 | 	mov	arg01, result1
0ff04     47 77 02 F6 | 	mov	arg02, local02
0ff08     3C 7D B1 FD | 	call	#__system___float_div
0ff0c     1A 91 02 F6 | 	mov	local03, result1
0ff10     47 75 02 F6 | 	mov	arg01, local02
0ff14     49 77 02 F6 | 	mov	arg02, local04
0ff18     2C 7D B1 FD | 	call	#__system___float_div
0ff1c     1A 75 02 F6 | 	mov	arg01, result1
0ff20     00 C0 1F FF 
0ff24     00 76 06 F6 | 	mov	arg02, ##1065353216
0ff28     1F 76 E6 F4 | 	bitnot	arg02, #31
0ff2c     F4 77 B1 FD | 	call	#__system___float_add
0ff30     1A 77 02 F6 | 	mov	arg02, result1
0ff34     FC 16 20 FF 
0ff38     54 74 06 F6 | 	mov	arg01, ##1076754516
0ff3c     E0 84 B1 FD | 	call	#__system____builtin_logbase
0ff40     1A 75 02 F6 | 	mov	arg01, result1
0ff44     48 77 02 F6 | 	mov	arg02, local03
0ff48     FC 7C B1 FD | 	call	#__system___float_div
0ff4c     1A 97 02 F6 | 	mov	local06, result1
0ff50     00 C0 5F FF 
0ff54     00 74 06 F6 | 	mov	arg01, ##-1082130432
0ff58     48 77 02 F6 | 	mov	arg02, local03
0ff5c     C8 7A B1 FD | 	call	#__system___float_mul
0ff60     1A 91 02 F6 | 	mov	local03, result1
0ff64     46 75 02 F6 | 	mov	arg01, local01
0ff68     4B 77 02 F6 | 	mov	arg02, local06
0ff6c     1F 76 E6 F4 | 	bitnot	arg02, #31
0ff70     B0 77 B1 FD | 	call	#__system___float_add
0ff74     1A 77 02 F6 | 	mov	arg02, result1
0ff78     48 75 02 F6 | 	mov	arg01, local03
0ff7c     A8 7A B1 FD | 	call	#__system___float_mul
0ff80     1A 77 02 F6 | 	mov	arg02, result1
0ff84     FC 16 20 FF 
0ff88     54 74 06 F6 | 	mov	arg01, ##1076754516
0ff8c     D4 83 B1 FD | 	call	#__system____builtin_powf
0ff90     1A 77 02 F6 | 	mov	arg02, result1
0ff94     00 C0 1F FF 
0ff98     00 74 06 F6 | 	mov	arg01, ##1065353216
0ff9c     84 77 B1 FD | 	call	#__system___float_add
0ffa0     1A 77 02 F6 | 	mov	arg02, result1
0ffa4     47 75 02 F6 | 	mov	arg01, local02
0ffa8     9C 7C B1 FD | 	call	#__system___float_div
0ffac     1A 97 02 F6 | 	mov	local06, result1
0ffb0     4B 75 02 F6 | 	mov	arg01, local06
0ffb4     1F 74 06 F4 | 	bitl	arg01, #31
0ffb8     47 77 02 F6 | 	mov	arg02, local02
0ffbc     1F 76 06 F4 | 	bitl	arg02, #31
0ffc0     1F 76 E6 F4 | 	bitnot	arg02, #31
0ffc4     5C 77 B1 FD | 	call	#__system___float_add
0ffc8     1F 34 06 F4 | 	bitl	result1, #31
0ffcc     1A 75 02 F6 | 	mov	arg01, result1
0ffd0     1F 92 06 F4 | 	bitl	local04, #31
0ffd4     49 77 02 F6 | 	mov	arg02, local04
0ffd8     01 78 06 F6 | 	mov	arg03, #1
0ffdc     A0 7E B1 FD | 	call	#__system___float_cmp
0ffe0     00 34 56 F2 | 	cmps	result1, #0 wc
0ffe4     18 00 90 3D |  if_ae	jmp	#LR__0432
0ffe8                 | '     {
0ffe8                 | '         return dir * distance;
0ffe8     4A 75 02 F6 | 	mov	arg01, local05
0ffec     04 77 B1 FD | 	call	#__system___float_fromint
0fff0     1A 75 02 F6 | 	mov	arg01, result1
0fff4     47 77 02 F6 | 	mov	arg02, local02
0fff8     2C 7A B1 FD | 	call	#__system___float_mul
0fffc     14 00 90 FD | 	jmp	#LR__0433
10000                 | LR__0432
10000                 | '     }
10000                 | '     return dir * position;
10000     4A 75 02 F6 | 	mov	arg01, local05
10004     EC 76 B1 FD | 	call	#__system___float_fromint
10008     1A 75 02 F6 | 	mov	arg01, result1
1000c     4B 77 02 F6 | 	mov	arg02, local06
10010     14 7A B1 FD | 	call	#__system___float_mul
10014                 | LR__0433
10014     A8 F0 03 F6 | 	mov	ptra, fp
10018     B3 00 A0 FD | 	call	#popregs_
1001c                 | _sigmoid_ret
1001c     2D 00 64 FD | 	ret
10020                 | 
10020                 | _steps_to_mm
10020     02 4C 05 F6 | 	mov	COUNT_, #2
10024     A9 00 A0 FD | 	call	#pushregs_
10028     3B 8D 02 F6 | 	mov	local01, arg02
1002c                 | ' {
1002c                 | '     return steps * (config->gearDiameter * 3.14159) / config->positionEncoderStepsPerRev;
1002c     C4 76 B1 FD | 	call	#__system___float_fromint
10030     1A 8F 02 F6 | 	mov	local02, result1
10034     1C 8C 06 F1 | 	add	local01, #28
10038     46 75 02 FB | 	rdlong	arg01, local01
1003c     87 24 20 FF 
10040     D0 77 06 F6 | 	mov	arg02, ##1078530000
10044     E0 79 B1 FD | 	call	#__system___float_mul
10048     1A 77 02 F6 | 	mov	arg02, result1
1004c     47 75 02 F6 | 	mov	arg01, local02
10050     D4 79 B1 FD | 	call	#__system___float_mul
10054     1A 75 02 F6 | 	mov	arg01, result1
10058     28 8C 06 F1 | 	add	local01, #40
1005c     46 77 02 FB | 	rdlong	arg02, local01
10060     E4 7B B1 FD | 	call	#__system___float_div
10064     A8 F0 03 F6 | 	mov	ptra, fp
10068     B3 00 A0 FD | 	call	#popregs_
1006c                 | _steps_to_mm_ret
1006c     2D 00 64 FD | 	ret
10070                 | 
10070                 | _mm_to_steps
10070     02 4C 05 F6 | 	mov	COUNT_, #2
10074     A9 00 A0 FD | 	call	#pushregs_
10078     3B 8D 02 F6 | 	mov	local01, arg02
1007c                 | ' {
1007c                 | '     return (int) __builtin_round(mm * (double)config->positionEncoderStepsPerRev / (double)(config->gearDiameter * 3.14159)) ;
1007c     44 8C 06 F1 | 	add	local01, #68
10080     46 77 02 FB | 	rdlong	arg02, local01
10084     A0 79 B1 FD | 	call	#__system___float_mul
10088     1A 8F 02 F6 | 	mov	local02, result1
1008c     28 8C 86 F1 | 	sub	local01, #40
10090     46 75 02 FB | 	rdlong	arg01, local01
10094     87 24 20 FF 
10098     D0 77 06 F6 | 	mov	arg02, ##1078530000
1009c     88 79 B1 FD | 	call	#__system___float_mul
100a0     1A 77 02 F6 | 	mov	arg02, result1
100a4     47 75 02 F6 | 	mov	arg01, local02
100a8     9C 7B B1 FD | 	call	#__system___float_div
100ac     1A 75 02 F6 | 	mov	arg01, result1
100b0     01 76 06 F6 | 	mov	arg02, #1
100b4     60 7E B1 FD | 	call	#__system___float_tointeger
100b8     A8 F0 03 F6 | 	mov	ptra, fp
100bc     B3 00 A0 FD | 	call	#popregs_
100c0                 | _mm_to_steps_ret
100c0     2D 00 64 FD | 	ret
100c4                 | 
100c4                 | _test_profile_page_init
100c4     07 4C 05 F6 | 	mov	COUNT_, #7
100c8     A9 00 A0 FD | 	call	#pushregs_
100cc     3A 8D 02 F6 | 	mov	local01, arg01
100d0     04 8C 06 F1 | 	add	local01, #4
100d4     46 77 62 FC | 	wrlong	arg02, local01
100d8     04 8C 06 F1 | 	add	local01, #4
100dc     46 79 62 FC | 	wrlong	arg03, local01
100e0     04 8C 06 F1 | 	add	local01, #4
100e4     FF FF FF FF 
100e8     46 FF 6B FC | 	wrlong	##-1, local01
100ec     04 8C 06 F1 | 	add	local01, #4
100f0     46 75 02 F6 | 	mov	arg01, local01
100f4     50 01 00 FF 
100f8     32 76 06 F6 | 	mov	arg02, ##@LR__2027
100fc     E8 5A B1 FD | 	call	#__system____builtin_strcpy
10100     64 8C 06 F1 | 	add	local01, #100
10104     46 75 02 F6 | 	mov	arg01, local01
10108     50 01 00 FF 
1010c     36 76 06 F6 | 	mov	arg02, ##@LR__2028
10110     D4 5A B1 FD | 	call	#__system____builtin_strcpy
10114     22 00 00 FF 
10118     0C 8C 06 F1 | 	add	local01, ##17420
1011c     46 8F 02 F6 | 	mov	local02, local01
10120     47 75 02 F6 | 	mov	arg01, local02
10124     00 76 06 F6 | 	mov	arg02, #0
10128     1C 8A BF FD | 	call	#_module_init
1012c     40 8D 06 F1 | 	add	local01, #320
10130     46 91 02 F6 | 	mov	local03, local01
10134     48 75 02 F6 | 	mov	arg01, local03
10138     47 77 02 F6 | 	mov	arg02, local02
1013c     08 8A BF FD | 	call	#_module_init
10140     48 75 02 F6 | 	mov	arg01, local03
10144     CC 74 06 F1 | 	add	arg01, #204
10148     3A 0B 68 FC | 	wrlong	#5, arg01
1014c     24 74 06 F1 | 	add	arg01, #36
10150     02 00 80 FF 
10154     3A 01 68 FC | 	wrlong	##1024, arg01
10158     04 74 06 F1 | 	add	arg01, #4
1015c     01 00 80 FF 
10160     3A B1 68 FC | 	wrlong	##600, arg01
10164     48 75 02 F6 | 	mov	arg01, local03
10168     E8 74 06 F1 | 	add	arg01, #232
1016c     3A 01 68 FC | 	wrlong	#0, arg01
10170     04 74 06 F1 | 	add	arg01, #4
10174     3A 01 68 FC | 	wrlong	#0, arg01
10178     48 75 02 F6 | 	mov	arg01, local03
1017c     F8 74 06 F1 | 	add	arg01, #248
10180     3A 15 68 FC | 	wrlong	#10, arg01
10184     04 74 06 F1 | 	add	arg01, #4
10188     3A 15 68 FC | 	wrlong	#10, arg01
1018c     48 75 02 F6 | 	mov	arg01, local03
10190     01 00 00 FF 
10194     73 78 06 F6 | 	mov	arg03, ##627
10198     10 75 06 F1 | 	add	arg01, #272
1019c     01 00 80 FF 
101a0     3A E7 68 FC | 	wrlong	##627, arg01
101a4     04 74 86 F1 | 	sub	arg01, #4
101a8     01 00 80 FF 
101ac     3A E7 68 FC | 	wrlong	##627, arg01
101b0     C9 74 02 F6 | 	mov	arg01, objptr
101b4     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
101b8     7C 5A B1 FD | 	call	#__system___make_methodptr
101bc     48 75 02 F6 | 	mov	arg01, local03
101c0     30 75 06 F1 | 	add	arg01, #304
101c4     3A 35 62 FC | 	wrlong	result1, arg01
101c8     40 8D 06 F1 | 	add	local01, #320
101cc     46 93 02 F6 | 	mov	local04, local01
101d0     49 75 02 F6 | 	mov	arg01, local04
101d4     48 77 02 F6 | 	mov	arg02, local03
101d8     6C 89 BF FD | 	call	#_module_init
101dc     49 75 02 F6 | 	mov	arg01, local04
101e0     CC 74 06 F1 | 	add	arg01, #204
101e4     3A 0B 68 FC | 	wrlong	#5, arg01
101e8     24 74 06 F1 | 	add	arg01, #36
101ec     3A AB 6A FC | 	wrlong	#341, arg01
101f0     04 74 06 F1 | 	add	arg01, #4
101f4     3A 01 68 FC | 	wrlong	#0, arg01
101f8     49 75 02 F6 | 	mov	arg01, local04
101fc     0C 96 BF FD | 	call	#_module_fit_height
10200     49 75 02 F6 | 	mov	arg01, local04
10204     F8 74 06 F1 | 	add	arg01, #248
10208     3A 15 68 FC | 	wrlong	#10, arg01
1020c     04 74 06 F1 | 	add	arg01, #4
10210     3A 15 68 FC | 	wrlong	#10, arg01
10214     49 75 02 F6 | 	mov	arg01, local04
10218     10 75 06 F1 | 	add	arg01, #272
1021c     1D 00 80 FF 
10220     3A E9 6A FC | 	wrlong	##15220, arg01
10224     04 74 86 F1 | 	sub	arg01, #4
10228     01 00 80 FF 
1022c     3A E7 68 FC | 	wrlong	##627, arg01
10230     49 75 02 F6 | 	mov	arg01, local04
10234     0F 76 CE F9 | 	bmask	arg02, #15
10238     01 78 06 F6 | 	mov	arg03, #1
1023c     14 92 BF FD | 	call	#_module_add_border
10240     49 75 02 F6 | 	mov	arg01, local04
10244     74 92 BF FD | 	call	#_module_align_inner_left
10248     49 75 02 F6 | 	mov	arg01, local04
1024c     44 92 BF FD | 	call	#_module_align_inner_top
10250     49 75 02 F6 | 	mov	arg01, local04
10254     0A 78 06 F6 | 	mov	arg03, #10
10258     00 75 06 F1 | 	add	arg01, #256
1025c     3A 15 68 FC | 	wrlong	#10, arg01
10260     04 74 06 F1 | 	add	arg01, #4
10264     3A 15 68 FC | 	wrlong	#10, arg01
10268     40 8D 06 F1 | 	add	local01, #320
1026c     46 8F 02 F6 | 	mov	local02, local01
10270     47 75 02 F6 | 	mov	arg01, local02
10274     49 77 02 F6 | 	mov	arg02, local04
10278     CC 88 BF FD | 	call	#_module_init
1027c     47 75 02 F6 | 	mov	arg01, local02
10280     CC 74 06 F1 | 	add	arg01, #204
10284     3A 0B 68 FC | 	wrlong	#5, arg01
10288     24 74 06 F1 | 	add	arg01, #36
1028c     3A C9 68 FC | 	wrlong	#100, arg01
10290     04 74 06 F1 | 	add	arg01, #4
10294     3A 65 68 FC | 	wrlong	#50, arg01
10298     47 75 02 F6 | 	mov	arg01, local02
1029c     10 75 06 F1 | 	add	arg01, #272
102a0     43 00 80 FF 
102a4     3A E1 6B FC | 	wrlong	##34800, arg01
102a8     04 74 86 F1 | 	sub	arg01, #4
102ac     43 00 80 FF 
102b0     3A E1 6B FC | 	wrlong	##34800, arg01
102b4     47 75 02 F6 | 	mov	arg01, local02
102b8     F8 74 06 F1 | 	add	arg01, #248
102bc     3A 15 68 FC | 	wrlong	#10, arg01
102c0     04 74 06 F1 | 	add	arg01, #4
102c4     3A 15 68 FC | 	wrlong	#10, arg01
102c8     47 75 02 F6 | 	mov	arg01, local02
102cc     01 76 06 F6 | 	mov	arg02, #1
102d0     02 78 06 F6 | 	mov	arg03, #2
102d4     5C 93 BF FD | 	call	#_module_align_space_even
102d8     47 75 02 F6 | 	mov	arg01, local02
102dc     B4 91 BF FD | 	call	#_module_align_inner_top
102e0     C9 74 02 F6 | 	mov	arg01, objptr
102e4     DE 76 02 F6 | 	mov	arg02, ptr__button_open_1009_
102e8     4C 59 B1 FD | 	call	#__system___make_methodptr
102ec     47 75 02 F6 | 	mov	arg01, local02
102f0     00 78 06 F6 | 	mov	arg03, #0
102f4     34 75 06 F1 | 	add	arg01, #308
102f8     3A 35 62 FC | 	wrlong	result1, arg01
102fc     10 74 86 F1 | 	sub	arg01, #16
10300     3A 01 68 FC | 	wrlong	#0, arg01
10304     40 8D 06 F1 | 	add	local01, #320
10308     46 95 02 F6 | 	mov	local05, local01
1030c     4A 75 02 F6 | 	mov	arg01, local05
10310     47 77 02 F6 | 	mov	arg02, local02
10314     30 88 BF FD | 	call	#_module_init
10318     15 01 00 FF 
1031c     24 D7 05 F1 | 	add	ptr__dat__, ##142116
10320     EB 76 02 F6 | 	mov	arg02, ptr__dat__
10324     15 01 00 FF 
10328     24 D7 85 F1 | 	sub	ptr__dat__, ##142116
1032c     4A 75 02 F6 | 	mov	arg01, local05
10330     B0 8D BF FD | 	call	#_module_set_text
10334     4A 75 02 F6 | 	mov	arg01, local05
10338     01 76 66 F6 | 	neg	arg02, #1
1033c     E4 8E BF FD | 	call	#_module_text_font
10340     4A 75 02 F6 | 	mov	arg01, local05
10344     F8 8D BF FD | 	call	#_module_text_fit
10348     4A 75 02 F6 | 	mov	arg01, local05
1034c     01 76 06 F6 | 	mov	arg02, #1
10350     02 78 06 F6 | 	mov	arg03, #2
10354     68 92 BF FD | 	call	#_module_align_center_sector
10358     4A 75 02 F6 | 	mov	arg01, local05
1035c     14 92 BF FD | 	call	#_module_align_middle
10360     4A 79 02 FB | 	rdlong	arg03, local05
10364     10 79 06 F1 | 	add	arg03, #272
10368     3C 79 02 FB | 	rdlong	arg03, arg03
1036c     4A 75 02 F6 | 	mov	arg01, local05
10370     10 75 06 F1 | 	add	arg01, #272
10374     3A 01 68 FC | 	wrlong	#0, arg01
10378     04 74 86 F1 | 	sub	arg01, #4
1037c     3A 79 62 FC | 	wrlong	arg03, arg01
10380     40 8D 06 F1 | 	add	local01, #320
10384     46 97 02 F6 | 	mov	local06, local01
10388     4B 75 02 F6 | 	mov	arg01, local06
1038c     49 77 02 F6 | 	mov	arg02, local04
10390     B4 87 BF FD | 	call	#_module_init
10394     4B 75 02 F6 | 	mov	arg01, local06
10398     47 77 02 F6 | 	mov	arg02, local02
1039c     4C 8C BF FD | 	call	#_module_copy
103a0     4B 75 02 F6 | 	mov	arg01, local06
103a4     02 76 06 F6 | 	mov	arg02, #2
103a8     02 78 06 F6 | 	mov	arg03, #2
103ac     84 92 BF FD | 	call	#_module_align_space_even
103b0     C9 74 02 F6 | 	mov	arg01, objptr
103b4     DB 76 02 F6 | 	mov	arg02, ptr__button_new_1017_
103b8     7C 58 B1 FD | 	call	#__system___make_methodptr
103bc     4B 75 02 F6 | 	mov	arg01, local06
103c0     00 78 06 F6 | 	mov	arg03, #0
103c4     34 75 06 F1 | 	add	arg01, #308
103c8     3A 35 62 FC | 	wrlong	result1, arg01
103cc     10 74 86 F1 | 	sub	arg01, #16
103d0     3A 01 68 FC | 	wrlong	#0, arg01
103d4     40 8D 06 F1 | 	add	local01, #320
103d8     46 75 02 F6 | 	mov	arg01, local01
103dc     4B 77 02 F6 | 	mov	arg02, local06
103e0     64 87 BF FD | 	call	#_module_init
103e4     46 75 02 F6 | 	mov	arg01, local01
103e8     4A 77 02 F6 | 	mov	arg02, local05
103ec     FC 8B BF FD | 	call	#_module_copy
103f0     15 01 00 FF 
103f4     29 D7 05 F1 | 	add	ptr__dat__, ##142121
103f8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
103fc     15 01 00 FF 
10400     29 D7 85 F1 | 	sub	ptr__dat__, ##142121
10404     46 75 02 F6 | 	mov	arg01, local01
10408     D8 8C BF FD | 	call	#_module_set_text
1040c     46 75 02 F6 | 	mov	arg01, local01
10410     01 76 66 F6 | 	neg	arg02, #1
10414     0C 8E BF FD | 	call	#_module_text_font
10418     46 75 02 F6 | 	mov	arg01, local01
1041c     20 8D BF FD | 	call	#_module_text_fit
10420     46 75 02 F6 | 	mov	arg01, local01
10424     01 76 06 F6 | 	mov	arg02, #1
10428     02 78 06 F6 | 	mov	arg03, #2
1042c     90 91 BF FD | 	call	#_module_align_center_sector
10430     40 8D 06 F1 | 	add	local01, #320
10434     46 99 02 F6 | 	mov	local07, local01
10438     4C 75 02 F6 | 	mov	arg01, local07
1043c     49 77 02 F6 | 	mov	arg02, local04
10440     04 87 BF FD | 	call	#_module_init
10444     4C 75 02 F6 | 	mov	arg01, local07
10448     47 77 02 F6 | 	mov	arg02, local02
1044c     9C 8B BF FD | 	call	#_module_copy
10450     4C 75 02 F6 | 	mov	arg01, local07
10454     01 76 06 F6 | 	mov	arg02, #1
10458     02 78 06 F6 | 	mov	arg03, #2
1045c     60 91 BF FD | 	call	#_module_align_center_sector
10460     4C 75 02 F6 | 	mov	arg01, local07
10464     C4 90 BF FD | 	call	#_module_align_inner_bottom
10468     C9 74 02 F6 | 	mov	arg01, objptr
1046c     E3 76 02 F6 | 	mov	arg02, ptr__button_save_1032_
10470     C4 57 B1 FD | 	call	#__system___make_methodptr
10474     4C 75 02 F6 | 	mov	arg01, local07
10478     00 78 06 F6 | 	mov	arg03, #0
1047c     34 75 06 F1 | 	add	arg01, #308
10480     3A 35 62 FC | 	wrlong	result1, arg01
10484     10 74 86 F1 | 	sub	arg01, #16
10488     3A 01 68 FC | 	wrlong	#0, arg01
1048c     40 8D 06 F1 | 	add	local01, #320
10490     46 75 02 F6 | 	mov	arg01, local01
10494     4C 77 02 F6 | 	mov	arg02, local07
10498     AC 86 BF FD | 	call	#_module_init
1049c     46 75 02 F6 | 	mov	arg01, local01
104a0     4A 77 02 F6 | 	mov	arg02, local05
104a4     44 8B BF FD | 	call	#_module_copy
104a8     15 01 00 FF 
104ac     2D D7 05 F1 | 	add	ptr__dat__, ##142125
104b0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
104b4     15 01 00 FF 
104b8     2D D7 85 F1 | 	sub	ptr__dat__, ##142125
104bc     46 75 02 F6 | 	mov	arg01, local01
104c0     20 8C BF FD | 	call	#_module_set_text
104c4     46 75 02 F6 | 	mov	arg01, local01
104c8     01 76 66 F6 | 	neg	arg02, #1
104cc     54 8D BF FD | 	call	#_module_text_font
104d0     46 75 02 F6 | 	mov	arg01, local01
104d4     68 8C BF FD | 	call	#_module_text_fit
104d8     46 75 02 F6 | 	mov	arg01, local01
104dc     01 76 06 F6 | 	mov	arg02, #1
104e0     02 78 06 F6 | 	mov	arg03, #2
104e4     D8 90 BF FD | 	call	#_module_align_center_sector
104e8     46 75 02 F6 | 	mov	arg01, local01
104ec     84 90 BF FD | 	call	#_module_align_middle
104f0     40 8D 06 F1 | 	add	local01, #320
104f4     46 99 02 F6 | 	mov	local07, local01
104f8     4C 75 02 F6 | 	mov	arg01, local07
104fc     48 77 02 F6 | 	mov	arg02, local03
10500     44 86 BF FD | 	call	#_module_init
10504     27 00 00 FF 
10508     B8 8D 86 F1 | 	sub	local01, ##20408
1050c     46 77 02 FB | 	rdlong	arg02, local01
10510     30 76 06 F1 | 	add	arg02, #48
10514     4C 75 02 F6 | 	mov	arg01, local07
10518     94 8B BF FD | 	call	#_module_set_image
1051c     4C 75 02 F6 | 	mov	arg01, local07
10520     70 8F BF FD | 	call	#_module_align_inner_top
10524     4C 75 02 F6 | 	mov	arg01, local07
10528     B8 8F BF FD | 	call	#_module_align_inner_right
1052c     C9 74 02 F6 | 	mov	arg01, objptr
10530     DA 76 02 F6 | 	mov	arg02, ptr__button_navigation_1002_
10534     00 57 B1 FD | 	call	#__system___make_methodptr
10538     00 78 06 F6 | 	mov	arg03, #0
1053c     34 99 06 F1 | 	add	local07, #308
10540     4C 35 62 FC | 	wrlong	result1, local07
10544     10 98 86 F1 | 	sub	local07, #16
10548     4C 01 68 FC | 	wrlong	#0, local07
1054c     29 00 00 FF 
10550     38 8C 06 F1 | 	add	local01, ##21048
10554     46 99 02 F6 | 	mov	local07, local01
10558     4C 75 02 F6 | 	mov	arg01, local07
1055c     48 77 02 F6 | 	mov	arg02, local03
10560     E4 85 BF FD | 	call	#_module_init
10564     4C 75 02 F6 | 	mov	arg01, local07
10568     00 75 06 F1 | 	add	arg01, #256
1056c     3A 15 68 FC | 	wrlong	#10, arg01
10570     04 74 06 F1 | 	add	arg01, #4
10574     3A 15 68 FC | 	wrlong	#10, arg01
10578     4C 75 02 F6 | 	mov	arg01, local07
1057c     F0 74 06 F1 | 	add	arg01, #240
10580     01 00 80 FF 
10584     3A 01 68 FC | 	wrlong	##512, arg01
10588     04 74 06 F1 | 	add	arg01, #4
1058c     3A 1D 6A FC | 	wrlong	#270, arg01
10590     4C 75 02 F6 | 	mov	arg01, local07
10594     49 77 02 F6 | 	mov	arg02, local04
10598     7C 91 BF FD | 	call	#_module_align_right
1059c     4C 75 02 F6 | 	mov	arg01, local07
105a0     F0 8E BF FD | 	call	#_module_align_inner_top
105a4     4C 95 02 FB | 	rdlong	local05, local07
105a8     10 95 06 F1 | 	add	local05, #272
105ac     4A 77 02 FB | 	rdlong	arg02, local05
105b0     4C 95 02 FB | 	rdlong	local05, local07
105b4     0C 95 06 F1 | 	add	local05, #268
105b8     4A 79 02 FB | 	rdlong	arg03, local05
105bc     4C 75 02 F6 | 	mov	arg01, local07
105c0     10 75 06 F1 | 	add	arg01, #272
105c4     3A 77 62 FC | 	wrlong	arg02, arg01
105c8     04 74 86 F1 | 	sub	arg01, #4
105cc     3A 79 62 FC | 	wrlong	arg03, arg01
105d0     40 8D 06 F1 | 	add	local01, #320
105d4     46 77 02 F6 | 	mov	arg02, local01
105d8     50 01 00 FF 
105dc     38 78 06 F6 | 	mov	arg03, ##@LR__2029
105e0     50 01 00 FF 
105e4     4A 7A 06 F6 | 	mov	arg04, ##@LR__2030
105e8     4C 75 02 F6 | 	mov	arg01, local07
105ec     A0 BB BF FD | 	call	#_module_set_graph
105f0     00 50 60 FF 
105f4     00 78 06 F6 | 	mov	arg03, ##-1063256064
105f8     D0 98 06 F1 | 	add	local07, #208
105fc     4C 99 02 FB | 	rdlong	local07, local07
10600     08 98 06 F1 | 	add	local07, #8
10604     00 50 A0 FF 
10608     4C 01 68 FC | 	wrlong	##1084227584, local07
1060c     04 98 06 F1 | 	add	local07, #4
10610     00 50 E0 FF 
10614     4C 01 68 FC | 	wrlong	##-1063256064, local07
10618     04 00 00 FF 
1061c     44 8D 06 F1 | 	add	local01, ##2372
10620     46 99 02 F6 | 	mov	local07, local01
10624     4C 75 02 F6 | 	mov	arg01, local07
10628     49 77 02 F6 | 	mov	arg02, local04
1062c     18 85 BF FD | 	call	#_module_init
10630     4C 75 02 F6 | 	mov	arg01, local07
10634     4B 77 02 F6 | 	mov	arg02, local06
10638     B0 90 BF FD | 	call	#_module_align_below
1063c     4C 75 02 F6 | 	mov	arg01, local07
10640     4B 77 02 F6 | 	mov	arg02, local06
10644     FC 91 BF FD | 	call	#_module_fit_below
10648     4C 75 02 F6 | 	mov	arg01, local07
1064c     F4 90 BF FD | 	call	#_module_fit_width
10650     4C 75 02 F6 | 	mov	arg01, local07
10654     64 8E BF FD | 	call	#_module_align_inner_left
10658     4C 97 02 FB | 	rdlong	local06, local07
1065c     10 97 06 F1 | 	add	local06, #272
10660     4B 77 02 FB | 	rdlong	arg02, local06
10664     4C 97 02 FB | 	rdlong	local06, local07
10668     0C 97 06 F1 | 	add	local06, #268
1066c     4B 79 02 FB | 	rdlong	arg03, local06
10670     4C 75 02 F6 | 	mov	arg01, local07
10674     10 75 06 F1 | 	add	arg01, #272
10678     3A 77 62 FC | 	wrlong	arg02, arg01
1067c     04 74 86 F1 | 	sub	arg01, #4
10680     3A 79 62 FC | 	wrlong	arg03, arg01
10684     4C 75 02 F6 | 	mov	arg01, local07
10688     00 78 06 F6 | 	mov	arg03, #0
1068c     F8 74 06 F1 | 	add	arg01, #248
10690     3A 01 68 FC | 	wrlong	#0, arg01
10694     04 74 06 F1 | 	add	arg01, #4
10698     3A 01 68 FC | 	wrlong	#0, arg01
1069c     05 00 00 FF 
106a0     C4 8D 86 F1 | 	sub	local01, ##3012
106a4     46 97 02 F6 | 	mov	local06, local01
106a8     4B 75 02 F6 | 	mov	arg01, local06
106ac     4C 77 02 F6 | 	mov	arg02, local07
106b0     94 84 BF FD | 	call	#_module_init
106b4     4B 75 02 F6 | 	mov	arg01, local06
106b8     0A 78 06 F6 | 	mov	arg03, #10
106bc     00 75 06 F1 | 	add	arg01, #256
106c0     3A 01 68 FC | 	wrlong	#0, arg01
106c4     04 74 06 F1 | 	add	arg01, #4
106c8     3A 15 68 FC | 	wrlong	#10, arg01
106cc     13 00 00 FF 
106d0     28 8C 06 F1 | 	add	local01, ##9768
106d4     46 77 02 F6 | 	mov	arg02, local01
106d8     3B 00 00 FF 
106dc     28 8D 86 F1 | 	sub	local01, ##30504
106e0     4B 75 02 F6 | 	mov	arg01, local06
106e4     FC 89 BF FD | 	call	#_module_set_text
106e8     4B 75 02 F6 | 	mov	arg01, local06
106ec     02 76 06 F6 | 	mov	arg02, #2
106f0     30 8B BF FD | 	call	#_module_text_font
106f4     4B 75 02 F6 | 	mov	arg01, local06
106f8     44 8A BF FD | 	call	#_module_text_fit
106fc     4B 75 02 F6 | 	mov	arg01, local06
10700     40 90 BF FD | 	call	#_module_fit_width
10704     4B 75 02 F6 | 	mov	arg01, local06
10708     CC 74 06 F1 | 	add	arg01, #204
1070c     3A 95 02 FB | 	rdlong	local05, arg01
10710     CC 74 86 F1 | 	sub	arg01, #204
10714     01 94 0E F2 | 	cmp	local05, #1 wz
10718                 | '         return;
10718     DC 74 06 A1 |  if_e	add	arg01, #220
1071c     3A 03 68 AC |  if_e	wrlong	#1, arg01
10720     4B 75 02 F6 | 	mov	arg01, local06
10724     10 75 06 F1 | 	add	arg01, #272
10728     7F 00 80 FF 
1072c     3A FF 6B FC | 	wrlong	##65535, arg01
10730     04 74 86 F1 | 	sub	arg01, #4
10734     1D 00 80 FF 
10738     3A E9 6A FC | 	wrlong	##15220, arg01
1073c     4B 75 02 F6 | 	mov	arg01, local06
10740     50 8D BF FD | 	call	#_module_align_inner_top
10744     4B 75 02 F6 | 	mov	arg01, local06
10748     01 76 06 F6 | 	mov	arg02, #1
1074c     02 78 06 F6 | 	mov	arg03, #2
10750     6C 8E BF FD | 	call	#_module_align_center_sector
10754     00 94 06 F6 | 	mov	local05, #0
10758                 | ' 
10758                 | ' 
10758                 | '     Module *root = &(page->root);
10758                 | '     module_init(root,  (0) );
10758                 | ' 
10758                 | '     Module *background = &(page->background);
10758                 | '     module_init(background, root);
10758                 | '     module_set_rectangle_circle(background,  1024 ,  600 );
10758                 | '     module_set_position(background, 0, 0);
10758                 | '     module_set_padding(background, padding, padding);
10758                 | '     module_set_color(background,  0x0273 ,  0x0273 );
10758                 | '     module_animate_draw(background, module_animation_switch_page_up);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *editWindow = &(page->editWindow);
10758                 | '     module_init(editWindow, background);
10758                 | '     module_set_rectangle_circle(editWindow,  1024  / 3, 0);
10758                 | '     module_fit_height(editWindow);
10758                 | '     module_set_padding(editWindow, padding, padding);
10758                 | '     module_set_color(editWindow,  0x3B74 ,  0x0273 );
10758                 | '     module_add_border(editWindow,  0xffff , 1);
10758                 | '     module_align_inner_left(editWindow);
10758                 | '     module_align_inner_top(editWindow);
10758                 | '     module_set_margin(editWindow, 10, 10);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *openButton = &(page->openButton);
10758                 | '     module_init(openButton, editWindow);
10758                 | '     module_set_rectangle_circle(openButton, 100, 50);
10758                 | '     module_set_color(openButton,  0x87f0 ,  0x87f0 );
10758                 | '     module_set_padding(openButton, padding, padding);
10758                 | '     module_align_space_even(openButton, 1, 2);
10758                 | '     module_align_inner_top(openButton);
10758                 | '     module_touch_callback(openButton, button_open, 0);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *openText = &(page->openText);
10758                 | '     module_init(openText, openButton);
10758                 | '     module_set_text(openText, openTextBuffer);
10758                 | '     module_text_font(openText, -1);
10758                 | '     module_text_fit(openText);
10758                 | '     module_align_center(openText);
10758                 | '     module_align_middle(openText);
10758                 | '     module_set_color(openText,  0x0000 , openText->parent->foregroundColor);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *newButton = &(page->newButton);
10758                 | '     module_init(newButton, editWindow);
10758                 | '     module_copy(newButton, openButton);
10758                 | '     module_align_space_even(newButton, 2, 2);
10758                 | '     module_touch_callback(newButton, button_new, 0);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *newText = &(page->newText);
10758                 | '     module_init(newText, newButton);
10758                 | '     module_copy(newText, openText);
10758                 | '     module_set_text(newText, newTextBuffer);
10758                 | '     module_text_font(newText, -1);
10758                 | '     module_text_fit(newText);
10758                 | '     module_align_center(newText);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *saveButton = &(page->saveButton);
10758                 | '     module_init(saveButton, editWindow);
10758                 | '     module_copy(saveButton, openButton);
10758                 | '     module_align_center(saveButton);
10758                 | '     module_align_inner_bottom(saveButton);
10758                 | '     module_touch_callback(saveButton, button_save, 0);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *saveText = &(page->saveText);
10758                 | '     module_init(saveText, saveButton);
10758                 | '     module_copy(saveText, openText);
10758                 | '     module_set_text(saveText, saveTextBuffer);
10758                 | '     module_text_font(saveText, -1);
10758                 | '     module_text_fit(saveText);
10758                 | '     module_align_center(saveText);
10758                 | '     module_align_middle(saveText);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *navigationButton = &(page->navigationButton);
10758                 | '     module_init(navigationButton, background);
10758                 | '     module_set_image(navigationButton, &(page->images->navigationImage));
10758                 | '     module_align_inner_top(navigationButton);
10758                 | '     module_align_inner_right(navigationButton);
10758                 | '     module_touch_callback(navigationButton, button_navigation, 0);
10758                 | ' 
10758                 | '     Module *graphPositionContainer = &(page->graphPositionContainer);
10758                 | '     module_init(graphPositionContainer, background);
10758                 | '     module_set_margin(graphPositionContainer, 10, 10);
10758                 | '     module_set_size(graphPositionContainer,  1024  / 2,  600  / 2 - padding * 3);
10758                 | '     module_align_right(graphPositionContainer, editWindow);
10758                 | '     module_align_inner_top(graphPositionContainer);
10758                 | '     module_set_color(graphPositionContainer, graphPositionContainer->parent->foregroundColor, graphPositionContainer->parent->backgroundColor);
10758                 | '     module_set_graph(graphPositionContainer, &(page->graphPosition), "Position Vs. Time", "mm");
10758                 | '     module_graph_set_range(graphPositionContainer, 5, -5);
10758                 | ' 
10758                 | '     Module *subroot = &(page->subroot);
10758                 | '     module_init(subroot, editWindow);
10758                 | '     module_align_below(subroot, newButton);
10758                 | '     module_fit_below(subroot, newButton);
10758                 | '     module_fit_width(subroot);
10758                 | '     module_align_inner_left(subroot);
10758                 | '     module_set_color(subroot, subroot->parent->foregroundColor, subroot->parent->backgroundColor);
10758                 | '     module_set_padding(subroot, 0, 0);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *editWindowTitle = &(page->editWindowTitle);
10758                 | '     module_init(editWindowTitle, subroot);
10758                 | '     module_set_margin(editWindowTitle, 0, 10);
10758                 | '     module_set_text(editWindowTitle, page->editWindowTitleBuffer);
10758                 | '     module_text_font(editWindowTitle,  2 );
10758                 | '     module_text_fit(editWindowTitle);
10758                 | '     module_fit_width(editWindowTitle);
10758                 | '     module_text_align(editWindowTitle, MODULE_TEXT_ALIGN_INNER_LEFT);
10758                 | '     module_set_color(editWindowTitle,  0xffff ,  0x3B74 );
10758                 | '     module_align_inner_top(editWindowTitle);
10758                 | '     module_align_center(editWindowTitle);
10758                 | ' 
10758                 | ' 
10758                 | '     Module *below = editWindowTitle;
10758                 | '     for (int i = 0; i < 20; i++)
10758                 | LR__0434
10758     14 94 56 F2 | 	cmps	local05, #20 wc
1075c     88 01 90 3D |  if_ae	jmp	#LR__0435
10760     4A 93 02 F6 | 	mov	local04, local05
10764     02 92 66 F0 | 	shl	local04, #2
10768     4A 93 02 F1 | 	add	local04, local05
1076c     06 92 66 F0 | 	shl	local04, #6
10770     2F 00 00 FF 
10774     04 8C 06 F1 | 	add	local01, ##24068
10778     46 93 02 F1 | 	add	local04, local01
1077c     49 75 02 F6 | 	mov	arg01, local04
10780     4C 77 02 F6 | 	mov	arg02, local07
10784     C0 83 BF FD | 	call	#_module_init
10788     4A 75 02 F6 | 	mov	arg01, local05
1078c     04 74 66 F0 | 	shl	arg01, #4
10790     4A 75 82 F1 | 	sub	arg01, local05
10794     01 74 66 F0 | 	shl	arg01, #1
10798     0C 00 00 FF 
1079c     44 8D 06 F1 | 	add	local01, ##6468
107a0     46 75 02 F1 | 	add	arg01, local01
107a4     50 01 00 FF 
107a8     4D 76 06 F6 | 	mov	arg02, ##@LR__2031
107ac     38 54 B1 FD | 	call	#__system____builtin_strcpy
107b0     4A 77 02 F6 | 	mov	arg02, local05
107b4     04 76 66 F0 | 	shl	arg02, #4
107b8     4A 77 82 F1 | 	sub	arg02, local05
107bc     01 76 66 F0 | 	shl	arg02, #1
107c0     46 77 02 F1 | 	add	arg02, local01
107c4     49 75 02 F6 | 	mov	arg01, local04
107c8     18 89 BF FD | 	call	#_module_set_text
107cc     49 75 02 F6 | 	mov	arg01, local04
107d0     01 76 06 F6 | 	mov	arg02, #1
107d4     4C 8A BF FD | 	call	#_module_text_font
107d8     49 75 02 F6 | 	mov	arg01, local04
107dc     F0 74 06 F1 | 	add	arg01, #240
107e0     3A 01 68 FC | 	wrlong	#0, arg01
107e4     04 74 06 F1 | 	add	arg01, #4
107e8     3A 41 68 FC | 	wrlong	#32, arg01
107ec     49 75 02 F6 | 	mov	arg01, local04
107f0     50 8F BF FD | 	call	#_module_fit_width
107f4     49 75 02 F6 | 	mov	arg01, local04
107f8     08 75 06 F1 | 	add	arg01, #264
107fc     3A 0B 68 FC | 	wrlong	#5, arg01
10800     49 75 02 F6 | 	mov	arg01, local04
10804     CC 74 06 F1 | 	add	arg01, #204
10808     3A 91 02 FB | 	rdlong	local03, arg01
1080c     CC 74 86 F1 | 	sub	arg01, #204
10810     01 90 0E F2 | 	cmp	local03, #1 wz
10814                 | '         return;
10814     DC 74 06 A1 |  if_e	add	arg01, #220
10818     3A 03 68 AC |  if_e	wrlong	#1, arg01
1081c     49 75 02 F6 | 	mov	arg01, local04
10820     CC 74 06 F1 | 	add	arg01, #204
10824     3A 91 02 FB | 	rdlong	local03, arg01
10828     CC 74 86 F1 | 	sub	arg01, #204
1082c     01 90 0E F2 | 	cmp	local03, #1 wz
10830                 | '         return;
10830     E0 74 06 A1 |  if_e	add	arg01, #224
10834     3A 0B 68 AC |  if_e	wrlong	#5, arg01
10838     49 75 02 F6 | 	mov	arg01, local04
1083c     4B 77 02 F6 | 	mov	arg02, local06
10840     A8 8E BF FD | 	call	#_module_align_below
10844     49 75 02 F6 | 	mov	arg01, local04
10848     70 8C BF FD | 	call	#_module_align_inner_left
1084c     49 75 02 F6 | 	mov	arg01, local04
10850     63 00 00 FF 
10854     18 78 06 F6 | 	mov	arg03, ##50712
10858     10 75 06 F1 | 	add	arg01, #272
1085c     3A 01 68 FC | 	wrlong	#0, arg01
10860     04 74 86 F1 | 	sub	arg01, #4
10864     63 00 80 FF 
10868     3A 31 68 FC | 	wrlong	##50712, arg01
1086c     C9 74 02 F6 | 	mov	arg01, objptr
10870     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1041_
10874     C0 53 B1 FD | 	call	#__system___make_methodptr
10878     49 75 02 F6 | 	mov	arg01, local04
1087c     34 75 06 F1 | 	add	arg01, #308
10880     3A 35 62 FC | 	wrlong	result1, arg01
10884     10 74 86 F1 | 	sub	arg01, #16
10888     3A 01 68 FC | 	wrlong	#0, arg01
1088c     49 75 02 F6 | 	mov	arg01, local04
10890     00 76 06 F6 | 	mov	arg02, #0
10894     02 78 06 F6 | 	mov	arg03, #2
10898     B8 8B BF FD | 	call	#_module_add_border
1089c     49 75 02 F6 | 	mov	arg01, local04
108a0     00 75 06 F1 | 	add	arg01, #256
108a4     3A 15 68 FC | 	wrlong	#10, arg01
108a8     04 74 06 F1 | 	add	arg01, #4
108ac     3A 15 68 FC | 	wrlong	#10, arg01
108b0     49 75 02 F6 | 	mov	arg01, local04
108b4     00 78 06 F6 | 	mov	arg03, #0
108b8     F8 74 06 F1 | 	add	arg01, #248
108bc     3A 15 68 FC | 	wrlong	#10, arg01
108c0     04 74 06 F1 | 	add	arg01, #4
108c4     3A 01 68 FC | 	wrlong	#0, arg01
108c8     49 75 02 F6 | 	mov	arg01, local04
108cc     18 75 06 F1 | 	add	arg01, #280
108d0     3A 01 48 FC | 	wrbyte	#0, arg01
108d4     49 97 02 F6 | 	mov	local06, local04
108d8     01 94 06 F1 | 	add	local05, #1
108dc     3B 00 00 FF 
108e0     48 8D 86 F1 | 	sub	local01, ##30536
108e4     70 FE 9F FD | 	jmp	#LR__0434
108e8                 | LR__0435
108e8     A8 F0 03 F6 | 	mov	ptra, fp
108ec     B3 00 A0 FD | 	call	#popregs_
108f0                 | _test_profile_page_init_ret
108f0     2D 00 64 FD | 	ret
108f4                 | 
108f4                 | _test_profile_page_run
108f4     1C 4C 05 F6 | 	mov	COUNT_, #28
108f8     A9 00 A0 FD | 	call	#pushregs_
108fc     3A 8D 02 F6 | 	mov	local01, arg01
10900     15 01 00 FF 
10904     54 D7 05 F1 | 	add	ptr__dat__, ##142164
10908     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
1090c     15 01 00 FF 
10910     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
10914     00 74 06 F6 | 	mov	arg01, #0
10918     B4 8B B1 FD | 	call	#__system___getiolock_1306
1091c     1A 75 02 F6 | 	mov	arg01, result1
10920     4C 53 B1 FD | 	call	#__system___lockmem
10924     50 01 00 FF 
10928     4F 76 06 F6 | 	mov	arg02, ##@LR__2032
1092c     00 74 06 F6 | 	mov	arg01, #0
10930     00 78 06 F6 | 	mov	arg03, #0
10934     E0 58 B1 FD | 	call	#__system___basic_print_string
10938     00 74 06 F6 | 	mov	arg01, #0
1093c     0A 76 06 F6 | 	mov	arg02, #10
10940     00 78 06 F6 | 	mov	arg03, #0
10944     84 58 B1 FD | 	call	#__system___basic_print_char
10948     00 74 06 F6 | 	mov	arg01, #0
1094c     80 8B B1 FD | 	call	#__system___getiolock_1306
10950     1A 01 68 FC | 	wrlong	#0, result1
10954     04 8C 06 F1 | 	add	local01, #4
10958     46 75 02 FB | 	rdlong	arg01, local01
1095c     22 00 00 FF 
10960     7C 8C 06 F1 | 	add	local01, ##17532
10964     46 77 02 F6 | 	mov	arg02, local01
10968     22 00 00 FF 
1096c     80 8C 86 F1 | 	sub	local01, ##17536
10970     AC 8F BF FD | 	call	#_module_draw
10974     01 8E 66 F6 | 	neg	local02, #1
10978                 | '     while (!complete)
10978                 | LR__0436
10978     15 01 00 FF 
1097c     54 D7 05 F1 | 	add	ptr__dat__, ##142164
10980     EB 34 CA FA | 	rdbyte	result1, ptr__dat__ wz
10984     15 01 00 FF 
10988     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
1098c     20 09 90 5D |  if_ne	jmp	#LR__0452
10990     00 74 06 F6 | 	mov	arg01, #0
10994     38 8B B1 FD | 	call	#__system___getiolock_1306
10998     1A 75 02 F6 | 	mov	arg01, result1
1099c     D0 52 B1 FD | 	call	#__system___lockmem
109a0     50 01 00 FF 
109a4     69 76 06 F6 | 	mov	arg02, ##@LR__2033
109a8     00 74 06 F6 | 	mov	arg01, #0
109ac     00 78 06 F6 | 	mov	arg03, #0
109b0     64 58 B1 FD | 	call	#__system___basic_print_string
109b4     1A 91 02 F6 | 	mov	local03, result1
109b8     0C 8C 06 F1 | 	add	local01, #12
109bc     46 77 02 FB | 	rdlong	arg02, local01
109c0     0A 92 06 F6 | 	mov	local04, #10
109c4     00 74 06 F6 | 	mov	arg01, #0
109c8     00 78 06 F6 | 	mov	arg03, #0
109cc     0A 7A 06 F6 | 	mov	arg04, #10
109d0     88 58 B1 FD | 	call	#__system___basic_print_integer
109d4     1A 95 02 F6 | 	mov	local05, result1
109d8     00 74 06 F6 | 	mov	arg01, #0
109dc     0A 76 06 F6 | 	mov	arg02, #10
109e0     00 78 06 F6 | 	mov	arg03, #0
109e4     E4 57 B1 FD | 	call	#__system___basic_print_char
109e8     01 96 06 F6 | 	mov	local06, #1
109ec     00 74 06 F6 | 	mov	arg01, #0
109f0     DC 8A B1 FD | 	call	#__system___getiolock_1306
109f4     1A 01 68 FC | 	wrlong	#0, result1
109f8     00 34 06 F6 | 	mov	result1, #0
109fc     00 98 06 F6 | 	mov	local07, #0
10a00     46 9B 02 FB | 	rdlong	local08, local01
10a04     0C 8C 86 F1 | 	sub	local01, #12
10a08     47 9B 0A F2 | 	cmp	local08, local02 wz
10a0c     4C 00 90 AD |  if_e	jmp	#LR__0439
10a10     00 9C 06 F6 | 	mov	local09, #0
10a14                 | '         {
10a14                 | '             for (int i = 0; i < 20; i++)
10a14                 | LR__0437
10a14     14 9C 56 F2 | 	cmps	local09, #20 wc
10a18     40 00 90 3D |  if_ae	jmp	#LR__0438
10a1c     4E 9B 02 F6 | 	mov	local08, local09
10a20     02 9A 66 F0 | 	shl	local08, #2
10a24     2E 00 00 FF 
10a28     C8 8C 06 F1 | 	add	local01, ##23752
10a2c     46 91 02 F6 | 	mov	local03, local01
10a30     46 9B 02 F1 | 	add	local08, local01
10a34     4D 75 02 FB | 	rdlong	arg01, local08
10a38     00 76 06 F6 | 	mov	arg02, #0
10a3c     18 75 06 F1 | 	add	arg01, #280
10a40     3A 01 48 FC | 	wrbyte	#0, arg01
10a44     4E 9B 02 F6 | 	mov	local08, local09
10a48     01 9A 06 F1 | 	add	local08, #1
10a4c     4D 9D 02 F6 | 	mov	local09, local08
10a50     2E 00 00 FF 
10a54     C8 8C 86 F1 | 	sub	local01, ##23752
10a58     B8 FF 9F FD | 	jmp	#LR__0437
10a5c                 | LR__0438
10a5c                 | LR__0439
10a5c                 | '             {
10a5c                 | '                 module_set_visable(page->subroot.child[i],  (0) );
10a5c                 | '             }
10a5c                 | '         }
10a5c                 | '         switch (page->mode)
10a5c     0C 8C 06 F1 | 	add	local01, #12
10a60     46 9F 02 FB | 	rdlong	local10, local01
10a64     0C 8C 86 F1 | 	sub	local01, #12
10a68     4F A1 02 F6 | 	mov	local11, local10
10a6c     04 A0 26 F3 | 	fle	local11, #4
10a70     30 A0 62 FD | 	jmprel	local11
10a74                 | LR__0440
10a74     10 00 90 FD | 	jmp	#LR__0441
10a78     F4 03 90 FD | 	jmp	#LR__0445
10a7c     CC 07 90 FD | 	jmp	#LR__0450
10a80     C8 07 90 FD | 	jmp	#LR__0450
10a84     C4 07 90 FD | 	jmp	#LR__0449
10a88                 | LR__0441
10a88     00 8E 0E F2 | 	cmp	local02, #0 wz
10a8c     90 00 90 AD |  if_e	jmp	#LR__0442
10a90     3B 00 00 FF 
10a94     28 8D 06 F1 | 	add	local01, ##30504
10a98     46 75 02 F6 | 	mov	arg01, local01
10a9c     50 01 00 FF 
10aa0     6F 76 06 F6 | 	mov	arg02, ##@LR__2034
10aa4     40 51 B1 FD | 	call	#__system____builtin_strcpy
10aa8     3B 00 00 FF 
10aac     24 8D 86 F1 | 	sub	local01, ##30500
10ab0     46 75 02 FB | 	rdlong	arg01, local01
10ab4     22 00 00 FF 
10ab8     7C 8C 06 F1 | 	add	local01, ##17532
10abc     46 77 02 F6 | 	mov	arg02, local01
10ac0     5C 8E BF FD | 	call	#_module_draw
10ac4     00 74 06 F6 | 	mov	arg01, #0
10ac8     04 8A B1 FD | 	call	#__system___getiolock_1306
10acc     1A 75 02 F6 | 	mov	arg01, result1
10ad0     9C 51 B1 FD | 	call	#__system___lockmem
10ad4     50 01 00 FF 
10ad8     77 76 06 F6 | 	mov	arg02, ##@LR__2035
10adc     00 74 06 F6 | 	mov	arg01, #0
10ae0     00 78 06 F6 | 	mov	arg03, #0
10ae4     30 57 B1 FD | 	call	#__system___basic_print_string
10ae8     21 00 00 FF 
10aec     F8 8D 86 F1 | 	sub	local01, ##17400
10af0     46 77 02 F6 | 	mov	arg02, local01
10af4     88 8C 86 F1 | 	sub	local01, #136
10af8     00 74 06 F6 | 	mov	arg01, #0
10afc     00 78 06 F6 | 	mov	arg03, #0
10b00     14 57 B1 FD | 	call	#__system___basic_print_string
10b04     00 74 06 F6 | 	mov	arg01, #0
10b08     0A 76 06 F6 | 	mov	arg02, #10
10b0c     00 78 06 F6 | 	mov	arg03, #0
10b10     B8 56 B1 FD | 	call	#__system___basic_print_char
10b14     00 74 06 F6 | 	mov	arg01, #0
10b18     B4 89 B1 FD | 	call	#__system___getiolock_1306
10b1c     1A 01 68 FC | 	wrlong	#0, result1
10b20                 | LR__0442
10b20     00 74 06 F6 | 	mov	arg01, #0
10b24     A8 89 B1 FD | 	call	#__system___getiolock_1306
10b28     1A 75 02 F6 | 	mov	arg01, result1
10b2c     40 51 B1 FD | 	call	#__system___lockmem
10b30     50 01 00 FF 
10b34     85 76 06 F6 | 	mov	arg02, ##@LR__2036
10b38     00 74 06 F6 | 	mov	arg01, #0
10b3c     00 78 06 F6 | 	mov	arg03, #0
10b40     D4 56 B1 FD | 	call	#__system___basic_print_string
10b44     00 74 06 F6 | 	mov	arg01, #0
10b48     0A 76 06 F6 | 	mov	arg02, #10
10b4c     00 78 06 F6 | 	mov	arg03, #0
10b50     78 56 B1 FD | 	call	#__system___basic_print_char
10b54     00 74 06 F6 | 	mov	arg01, #0
10b58     74 89 B1 FD | 	call	#__system___getiolock_1306
10b5c     1A 01 68 FC | 	wrlong	#0, result1
10b60     00 A2 06 F6 | 	mov	local12, #0
10b64     2F 00 00 FF 
10b68     04 8C 06 F1 | 	add	local01, ##24068
10b6c     46 A5 02 F6 | 	mov	local13, local01
10b70     0C 00 00 FF 
10b74     44 8D 06 F1 | 	add	local01, ##6468
10b78     46 75 02 F6 | 	mov	arg01, local01
10b7c     50 01 00 FF 
10b80     8D 76 06 F6 | 	mov	arg02, ##@LR__2037
10b84     3B 00 00 FF 
10b88     C0 8C 86 F1 | 	sub	local01, ##30400
10b8c     F8 79 02 F6 | 	mov	arg03, ptra
10b90     61 8D 66 FC | 	wrlong	local01, ptra++
10b94     FC 11 BF FD | 	call	#_sprintf
10b98     04 F0 87 F1 | 	sub	ptra, #4
10b9c     C9 74 02 F6 | 	mov	arg01, objptr
10ba0     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1041_
10ba4     90 50 B1 FD | 	call	#__system___make_methodptr
10ba8     52 75 02 F6 | 	mov	arg01, local13
10bac     00 78 06 F6 | 	mov	arg03, #0
10bb0     34 75 06 F1 | 	add	arg01, #308
10bb4     3A 35 62 FC | 	wrlong	result1, arg01
10bb8     10 74 86 F1 | 	sub	arg01, #16
10bbc     3A 01 68 FC | 	wrlong	#0, arg01
10bc0     52 75 02 F6 | 	mov	arg01, local13
10bc4     01 76 06 F6 | 	mov	arg02, #1
10bc8     18 75 06 F1 | 	add	arg01, #280
10bcc     3A 03 48 FC | 	wrbyte	#1, arg01
10bd0     00 74 06 F6 | 	mov	arg01, #0
10bd4     F8 88 B1 FD | 	call	#__system___getiolock_1306
10bd8     1A 75 02 F6 | 	mov	arg01, result1
10bdc     90 50 B1 FD | 	call	#__system___lockmem
10be0     50 01 00 FF 
10be4     96 76 06 F6 | 	mov	arg02, ##@LR__2038
10be8     00 74 06 F6 | 	mov	arg01, #0
10bec     00 78 06 F6 | 	mov	arg03, #0
10bf0     24 56 B1 FD | 	call	#__system___basic_print_string
10bf4     51 A7 02 F6 | 	mov	local14, local12
10bf8     04 A6 66 F0 | 	shl	local14, #4
10bfc     51 A7 82 F1 | 	sub	local14, local12
10c00     01 A6 66 F0 | 	shl	local14, #1
10c04     3B 00 00 FF 
10c08     C0 8C 06 F1 | 	add	local01, ##30400
10c0c     46 A9 02 F6 | 	mov	local15, local01
10c10     46 A7 02 F1 | 	add	local14, local01
10c14     53 AB 02 F6 | 	mov	local16, local14
10c18     00 74 06 F6 | 	mov	arg01, #0
10c1c     55 77 02 F6 | 	mov	arg02, local16
10c20     00 78 06 F6 | 	mov	arg03, #0
10c24     F0 55 B1 FD | 	call	#__system___basic_print_string
10c28     00 74 06 F6 | 	mov	arg01, #0
10c2c     0A 76 06 F6 | 	mov	arg02, #10
10c30     00 78 06 F6 | 	mov	arg03, #0
10c34     94 55 B1 FD | 	call	#__system___basic_print_char
10c38     00 74 06 F6 | 	mov	arg01, #0
10c3c     90 88 B1 FD | 	call	#__system___getiolock_1306
10c40     1A 01 68 FC | 	wrlong	#0, result1
10c44     01 A2 06 F1 | 	add	local12, #1
10c48     51 AD 02 F6 | 	mov	local17, local12
10c4c     02 AC 66 F0 | 	shl	local17, #2
10c50     51 AD 02 F1 | 	add	local17, local12
10c54     06 AC 66 F0 | 	shl	local17, #6
10c58     0C 00 00 FF 
10c5c     44 8D 86 F1 | 	sub	local01, ##6468
10c60     46 AD 02 F1 | 	add	local17, local01
10c64     0D 00 00 FF 
10c68     9C 8D 06 F1 | 	add	local01, ##7068
10c6c     46 75 02 F6 | 	mov	arg01, local01
10c70     3C 00 00 FF 
10c74     E4 8C 86 F1 | 	sub	local01, ##30948
10c78     46 77 02 FB | 	rdlong	arg02, local01
10c7c     94 ED BF FD | 	call	#_get_function_info
10c80     51 75 02 F6 | 	mov	arg01, local12
10c84     04 74 66 F0 | 	shl	arg01, #4
10c88     51 75 82 F1 | 	sub	arg01, local12
10c8c     01 74 66 F0 | 	shl	arg01, #1
10c90     3B 00 00 FF 
10c94     8C 8C 06 F1 | 	add	local01, ##30348
10c98     46 75 02 F1 | 	add	arg01, local01
10c9c     50 01 00 FF 
10ca0     9C 76 06 F6 | 	mov	arg02, ##@LR__2039
10ca4     01 00 00 FF 
10ca8     5C 8C 06 F1 | 	add	local01, ##604
10cac     F8 79 02 F6 | 	mov	arg03, ptra
10cb0     61 8D 66 FC | 	wrlong	local01, ptra++
10cb4     DC 10 BF FD | 	call	#_sprintf
10cb8     04 F0 87 F1 | 	sub	ptra, #4
10cbc     C9 74 02 F6 | 	mov	arg01, objptr
10cc0     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1041_
10cc4     70 4F B1 FD | 	call	#__system___make_methodptr
10cc8     56 75 02 F6 | 	mov	arg01, local17
10ccc     34 75 06 F1 | 	add	arg01, #308
10cd0     3A 35 62 FC | 	wrlong	result1, arg01
10cd4     10 74 86 F1 | 	sub	arg01, #16
10cd8     3A 03 68 FC | 	wrlong	#1, arg01
10cdc     56 75 02 F6 | 	mov	arg01, local17
10ce0     18 75 06 F1 | 	add	arg01, #280
10ce4     3A 03 48 FC | 	wrbyte	#1, arg01
10ce8     01 A2 06 F1 | 	add	local12, #1
10cec     00 AE 06 F6 | 	mov	local18, #0
10cf0                 | ' 
10cf0                 | '             paramIndex++;
10cf0                 | '             Module *funcModule = &(page->profileParameters[paramIndex]);
10cf0                 | '             get_function_info(&(page->info), page->quartet.function);
10cf0                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Function: %s", page->info.name);
10cf0                 | '             module_touch_callback(funcModule, button_quartet,  1 );
10cf0                 | '             module_set_visable(funcModule,  (1) );
10cf0                 | ' 
10cf0                 | '             paramIndex++;
10cf0                 | '             for (int i = 0; i < page->info.args_count; i++)
10cf0     3C 00 00 FF 
10cf4     A4 8D 86 F1 | 	sub	local01, ##31140
10cf8                 | LR__0443
10cf8     3C 00 00 FF 
10cfc     BC 8D 06 F1 | 	add	local01, ##31164
10d00     46 9B 02 FB | 	rdlong	local08, local01
10d04     3C 00 00 FF 
10d08     BC 8D 86 F1 | 	sub	local01, ##31164
10d0c     4D AF 52 F2 | 	cmps	local18, local08 wc
10d10     C8 00 90 3D |  if_ae	jmp	#LR__0444
10d14     51 B1 02 F6 | 	mov	local19, local12
10d18     02 B0 66 F0 | 	shl	local19, #2
10d1c     51 B1 02 F1 | 	add	local19, local12
10d20     06 B0 66 F0 | 	shl	local19, #6
10d24     2F 00 00 FF 
10d28     04 8C 06 F1 | 	add	local01, ##24068
10d2c     46 B1 02 F1 | 	add	local19, local01
10d30     51 75 02 F6 | 	mov	arg01, local12
10d34     04 74 66 F0 | 	shl	arg01, #4
10d38     51 75 82 F1 | 	sub	arg01, local12
10d3c     01 74 66 F0 | 	shl	arg01, #1
10d40     0C 00 00 FF 
10d44     44 8D 06 F1 | 	add	local01, ##6468
10d48     46 75 02 F1 | 	add	arg01, local01
10d4c     50 01 00 FF 
10d50     A9 76 06 F6 | 	mov	arg02, ##@LR__2040
10d54     57 AB 02 F6 | 	mov	local16, local18
10d58     02 AA 66 F0 | 	shl	local16, #2
10d5c     57 AB 02 F1 | 	add	local16, local18
10d60     02 AA 66 F0 | 	shl	local16, #2
10d64     01 00 00 FF 
10d68     78 8C 06 F1 | 	add	local01, ##632
10d6c     46 AB 02 F1 | 	add	local16, local01
10d70     57 A7 02 F6 | 	mov	local14, local18
10d74     02 A6 66 F0 | 	shl	local14, #2
10d78     3C 00 00 FF 
10d7c     00 8D 86 F1 | 	sub	local01, ##30976
10d80     46 A9 02 F6 | 	mov	local15, local01
10d84     46 A7 02 F1 | 	add	local14, local01
10d88     53 93 02 FB | 	rdlong	local04, local14
10d8c     F8 79 02 F6 | 	mov	arg03, ptra
10d90     61 AB 66 FC | 	wrlong	local16, ptra++
10d94     61 93 66 FC | 	wrlong	local04, ptra++
10d98     F8 0F BF FD | 	call	#_sprintf
10d9c     08 F0 87 F1 | 	sub	ptra, #8
10da0     C9 74 02 F6 | 	mov	arg01, objptr
10da4     E1 76 02 F6 | 	mov	arg02, ptr__button_quartet_parameters_1046_
10da8     8C 4E B1 FD | 	call	#__system___make_methodptr
10dac     58 75 02 F6 | 	mov	arg01, local19
10db0     34 75 06 F1 | 	add	arg01, #308
10db4     3A 35 62 FC | 	wrlong	result1, arg01
10db8     10 74 86 F1 | 	sub	arg01, #16
10dbc     3A AF 62 FC | 	wrlong	local18, arg01
10dc0     58 75 02 F6 | 	mov	arg01, local19
10dc4     18 75 06 F1 | 	add	arg01, #280
10dc8     3A 03 48 FC | 	wrbyte	#1, arg01
10dcc     01 A2 06 F1 | 	add	local12, #1
10dd0     01 AE 06 F1 | 	add	local18, #1
10dd4     C0 8C 86 F1 | 	sub	local01, #192
10dd8     1C FF 9F FD | 	jmp	#LR__0443
10ddc                 | LR__0444
10ddc     51 B3 02 F6 | 	mov	local20, local12
10de0     02 B2 66 F0 | 	shl	local20, #2
10de4     51 B3 02 F1 | 	add	local20, local12
10de8     06 B2 66 F0 | 	shl	local20, #6
10dec     2F 00 00 FF 
10df0     04 8C 06 F1 | 	add	local01, ##24068
10df4     46 B3 02 F1 | 	add	local20, local01
10df8     51 75 02 F6 | 	mov	arg01, local12
10dfc     04 74 66 F0 | 	shl	arg01, #4
10e00     51 75 82 F1 | 	sub	arg01, local12
10e04     01 74 66 F0 | 	shl	arg01, #1
10e08     0C 00 00 FF 
10e0c     44 8D 06 F1 | 	add	local01, ##6468
10e10     46 75 02 F1 | 	add	arg01, local01
10e14     50 01 00 FF 
10e18     B7 76 06 F6 | 	mov	arg02, ##@LR__2041
10e1c     3B 00 00 FF 
10e20     60 8C 86 F1 | 	sub	local01, ##30304
10e24     46 95 02 FB | 	rdlong	local05, local01
10e28     E8 8C 86 F1 | 	sub	local01, #232
10e2c     F8 79 02 F6 | 	mov	arg03, ptra
10e30     61 95 66 FC | 	wrlong	local05, ptra++
10e34     5C 0F BF FD | 	call	#_sprintf
10e38     04 F0 87 F1 | 	sub	ptra, #4
10e3c     C9 74 02 F6 | 	mov	arg01, objptr
10e40     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1041_
10e44     F0 4D B1 FD | 	call	#__system___make_methodptr
10e48     59 75 02 F6 | 	mov	arg01, local20
10e4c     02 78 06 F6 | 	mov	arg03, #2
10e50     34 75 06 F1 | 	add	arg01, #308
10e54     3A 35 62 FC | 	wrlong	result1, arg01
10e58     10 74 86 F1 | 	sub	arg01, #16
10e5c     3A 05 68 FC | 	wrlong	#2, arg01
10e60     59 75 02 F6 | 	mov	arg01, local20
10e64     18 75 06 F1 | 	add	arg01, #280
10e68     3A 03 48 FC | 	wrbyte	#1, arg01
10e6c                 | '             {
10e6c                 | '                 Module *paramModule = &(page->profileParameters[paramIndex]);
10e6c                 | '                 sprintf(page->profileParametersBuffer[paramIndex], "    %s: %0.3f", page->info.args[i], page->quartet.parameters[i]);
10e6c                 | '                 module_touch_callback(paramModule, button_quartet_parameters, i);
10e6c                 | '                 module_set_visable(paramModule,  (1) );
10e6c                 | '                 paramIndex++;
10e6c                 | '             }
10e6c                 | ' 
10e6c                 | '             Module *dwellModule = &(page->profileParameters[paramIndex]);
10e6c                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Dwell (ms): %0.3f", page->quartet.dwell);
10e6c                 | '             module_touch_callback(dwellModule, button_quartet,  2 );
10e6c                 | '             module_set_visable(dwellModule,  (1) );
10e6c                 | '             break;
10e6c     DC 03 90 FD | 	jmp	#LR__0450
10e70                 | LR__0445
10e70     01 8E 0E F2 | 	cmp	local02, #1 wz
10e74     3C 00 90 AD |  if_e	jmp	#LR__0446
10e78     3B 00 00 FF 
10e7c     28 8D 06 F1 | 	add	local01, ##30504
10e80     46 75 02 F6 | 	mov	arg01, local01
10e84     50 01 00 FF 
10e88     C9 76 06 F6 | 	mov	arg02, ##@LR__2042
10e8c     58 4D B1 FD | 	call	#__system____builtin_strcpy
10e90     3B 00 00 FF 
10e94     24 8D 86 F1 | 	sub	local01, ##30500
10e98     46 75 02 FB | 	rdlong	arg01, local01
10e9c     22 00 00 FF 
10ea0     7C 8C 06 F1 | 	add	local01, ##17532
10ea4     46 77 02 F6 | 	mov	arg02, local01
10ea8     22 00 00 FF 
10eac     80 8C 86 F1 | 	sub	local01, ##17536
10eb0     6C 8A BF FD | 	call	#_module_draw
10eb4                 | LR__0446
10eb4     00 74 06 F6 | 	mov	arg01, #0
10eb8     14 86 B1 FD | 	call	#__system___getiolock_1306
10ebc     1A 75 02 F6 | 	mov	arg01, result1
10ec0     AC 4D B1 FD | 	call	#__system___lockmem
10ec4     50 01 00 FF 
10ec8     CD 76 06 F6 | 	mov	arg02, ##@LR__2043
10ecc     00 74 06 F6 | 	mov	arg01, #0
10ed0     00 78 06 F6 | 	mov	arg03, #0
10ed4     40 53 B1 FD | 	call	#__system___basic_print_string
10ed8     00 74 06 F6 | 	mov	arg01, #0
10edc     0A 76 06 F6 | 	mov	arg02, #10
10ee0     00 78 06 F6 | 	mov	arg03, #0
10ee4     E4 52 B1 FD | 	call	#__system___basic_print_char
10ee8     00 74 06 F6 | 	mov	arg01, #0
10eec     E0 85 B1 FD | 	call	#__system___getiolock_1306
10ef0     1A 01 68 FC | 	wrlong	#0, result1
10ef4     00 B4 06 F6 | 	mov	local21, #0
10ef8     2F 00 00 FF 
10efc     04 8C 06 F1 | 	add	local01, ##24068
10f00     46 B7 02 F6 | 	mov	local22, local01
10f04     0C 00 00 FF 
10f08     44 8D 06 F1 | 	add	local01, ##6468
10f0c     46 75 02 F6 | 	mov	arg01, local01
10f10     50 01 00 FF 
10f14     D1 76 06 F6 | 	mov	arg02, ##@LR__2044
10f18     3B 00 00 FF 
10f1c     5C 8C 86 F1 | 	sub	local01, ##30300
10f20     F8 79 02 F6 | 	mov	arg03, ptra
10f24     61 8D 66 FC | 	wrlong	local01, ptra++
10f28     68 0E BF FD | 	call	#_sprintf
10f2c     04 F0 87 F1 | 	sub	ptra, #4
10f30     C9 74 02 F6 | 	mov	arg01, objptr
10f34     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1056_
10f38     FC 4C B1 FD | 	call	#__system___make_methodptr
10f3c     5B 75 02 F6 | 	mov	arg01, local22
10f40     34 75 06 F1 | 	add	arg01, #308
10f44     3A 35 62 FC | 	wrlong	result1, arg01
10f48     10 74 86 F1 | 	sub	arg01, #16
10f4c     3A 01 68 FC | 	wrlong	#0, arg01
10f50     5B 75 02 F6 | 	mov	arg01, local22
10f54     18 75 06 F1 | 	add	arg01, #280
10f58     3A 03 48 FC | 	wrbyte	#1, arg01
10f5c     01 B4 06 F1 | 	add	local21, #1
10f60     5A B9 02 F6 | 	mov	local23, local21
10f64     02 B8 66 F0 | 	shl	local23, #2
10f68     5A B9 02 F1 | 	add	local23, local21
10f6c     06 B8 66 F0 | 	shl	local23, #6
10f70     2E 00 00 FF 
10f74     18 8D 06 F1 | 	add	local01, ##23832
10f78     46 B9 02 F1 | 	add	local23, local01
10f7c     5A 75 02 F6 | 	mov	arg01, local21
10f80     04 74 66 F0 | 	shl	arg01, #4
10f84     5A 75 82 F1 | 	sub	arg01, local21
10f88     01 74 66 F0 | 	shl	arg01, #1
10f8c     0C 00 00 FF 
10f90     44 8D 06 F1 | 	add	local01, ##6468
10f94     46 75 02 F1 | 	add	arg01, local01
10f98     50 01 00 FF 
10f9c     DA 76 06 F6 | 	mov	arg02, ##@LR__2045
10fa0     3B 00 00 FF 
10fa4     28 8C 86 F1 | 	sub	local01, ##30248
10fa8     46 95 02 FB | 	rdlong	local05, local01
10fac     F8 79 02 F6 | 	mov	arg03, ptra
10fb0     61 95 66 FC | 	wrlong	local05, ptra++
10fb4     DC 0D BF FD | 	call	#_sprintf
10fb8     04 F0 87 F1 | 	sub	ptra, #4
10fbc     C9 74 02 F6 | 	mov	arg01, objptr
10fc0     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1056_
10fc4     70 4C B1 FD | 	call	#__system___make_methodptr
10fc8     5C 75 02 F6 | 	mov	arg01, local23
10fcc     34 75 06 F1 | 	add	arg01, #308
10fd0     3A 35 62 FC | 	wrlong	result1, arg01
10fd4     10 74 86 F1 | 	sub	arg01, #16
10fd8     3A 03 68 FC | 	wrlong	#1, arg01
10fdc     5C 75 02 F6 | 	mov	arg01, local23
10fe0     18 75 06 F1 | 	add	arg01, #280
10fe4     3A 03 48 FC | 	wrbyte	#1, arg01
10fe8     01 B4 06 F1 | 	add	local21, #1
10fec     5A BB 02 F6 | 	mov	local24, local21
10ff0     02 BA 66 F0 | 	shl	local24, #2
10ff4     5A BB 02 F1 | 	add	local24, local21
10ff8     06 BA 66 F0 | 	shl	local24, #6
10ffc     2E 00 00 FF 
11000     E4 8C 06 F1 | 	add	local01, ##23780
11004     46 BB 02 F1 | 	add	local24, local01
11008     5A 75 02 F6 | 	mov	arg01, local21
1100c     04 74 66 F0 | 	shl	arg01, #4
11010     5A 75 82 F1 | 	sub	arg01, local21
11014     01 74 66 F0 | 	shl	arg01, #1
11018     0C 00 00 FF 
1101c     44 8D 06 F1 | 	add	local01, ##6468
11020     46 75 02 F1 | 	add	arg01, local01
11024     50 01 00 FF 
11028     E5 76 06 F6 | 	mov	arg02, ##@LR__2046
1102c     3B 00 00 FF 
11030     24 8C 86 F1 | 	sub	local01, ##30244
11034     F8 79 02 F6 | 	mov	arg03, ptra
11038     61 8D 66 FC | 	wrlong	local01, ptra++
1103c     54 0D BF FD | 	call	#_sprintf
11040     04 F0 87 F1 | 	sub	ptra, #4
11044     C9 74 02 F6 | 	mov	arg01, objptr
11048     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1056_
1104c     E8 4B B1 FD | 	call	#__system___make_methodptr
11050     5D 75 02 F6 | 	mov	arg01, local24
11054     34 75 06 F1 | 	add	arg01, #308
11058     3A 35 62 FC | 	wrlong	result1, arg01
1105c     10 74 86 F1 | 	sub	arg01, #16
11060     3A 05 68 FC | 	wrlong	#2, arg01
11064     5D 75 02 F6 | 	mov	arg01, local24
11068     18 75 06 F1 | 	add	arg01, #280
1106c     3A 03 48 FC | 	wrbyte	#1, arg01
11070     01 B4 06 F1 | 	add	local21, #1
11074     5A BD 02 F6 | 	mov	local25, local21
11078     02 BC 66 F0 | 	shl	local25, #2
1107c     5A BD 02 F1 | 	add	local25, local21
11080     06 BC 66 F0 | 	shl	local25, #6
11084     2E 00 00 FF 
11088     E0 8C 06 F1 | 	add	local01, ##23776
1108c     46 BD 02 F1 | 	add	local25, local01
11090     5A 75 02 F6 | 	mov	arg01, local21
11094     04 74 66 F0 | 	shl	arg01, #4
11098     5A 75 82 F1 | 	sub	arg01, local21
1109c     01 74 66 F0 | 	shl	arg01, #1
110a0     0C 00 00 FF 
110a4     44 8D 06 F1 | 	add	local01, ##6468
110a8     46 75 02 F1 | 	add	arg01, local01
110ac     50 01 00 FF 
110b0     EE 76 06 F6 | 	mov	arg02, ##@LR__2047
110b4     3B 00 00 FF 
110b8     18 8C 86 F1 | 	sub	local01, ##30232
110bc     46 95 02 FB | 	rdlong	local05, local01
110c0     30 8D 86 F1 | 	sub	local01, #304
110c4     F8 79 02 F6 | 	mov	arg03, ptra
110c8     61 95 66 FC | 	wrlong	local05, ptra++
110cc     C4 0C BF FD | 	call	#_sprintf
110d0     04 F0 87 F1 | 	sub	ptra, #4
110d4     C9 74 02 F6 | 	mov	arg01, objptr
110d8     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1056_
110dc     58 4B B1 FD | 	call	#__system___make_methodptr
110e0     5E 75 02 F6 | 	mov	arg01, local25
110e4     03 78 06 F6 | 	mov	arg03, #3
110e8     34 75 06 F1 | 	add	arg01, #308
110ec     3A 35 62 FC | 	wrlong	result1, arg01
110f0     10 74 86 F1 | 	sub	arg01, #16
110f4     3A 07 68 FC | 	wrlong	#3, arg01
110f8     5E 75 02 F6 | 	mov	arg01, local25
110fc     18 75 06 F1 | 	add	arg01, #280
11100     3A 03 48 FC | 	wrbyte	#1, arg01
11104     00 BE 06 F6 | 	mov	local26, #0
11108                 | ' 
11108                 | '             Module *nameModule = &(page->profileParameters[paramIndex]);
11108                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Name: %s", page->set.name);
11108                 | '             module_touch_callback(nameModule, button_set,  0 );
11108                 | '             module_set_visable(nameModule,  (1) );
11108                 | ' 
11108                 | '             paramIndex++;
11108                 | '             Module *numberModule = &(page->profileParameters[paramIndex]);
11108                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Number: %d", page->set.number);
11108                 | '             module_touch_callback(numberModule, button_set,  1 );
11108                 | '             module_set_visable(numberModule,  (1) );
11108                 | ' 
11108                 | '             paramIndex++;
11108                 | '             Module *typeModule = &(page->profileParameters[paramIndex]);
11108                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Type: %s", page->set.type);
11108                 | '             module_touch_callback(typeModule, button_set,  2 );
11108                 | '             module_set_visable(typeModule,  (1) );
11108                 | ' 
11108                 | '             paramIndex++;
11108                 | '             Module *executionsModule = &(page->profileParameters[paramIndex]);
11108                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Executions: %d", page->set.executions);
11108                 | '             module_touch_callback(executionsModule, button_set,  3 );
11108                 | '             module_set_visable(executionsModule,  (1) );
11108                 | ' 
11108                 | '             for (int i = 0; i < page->set.quartetCount; i++)
11108                 | LR__0447
11108     34 8D 06 F1 | 	add	local01, #308
1110c     46 9B 02 FB | 	rdlong	local08, local01
11110     34 8D 86 F1 | 	sub	local01, #308
11114     4D BF 52 F2 | 	cmps	local26, local08 wc
11118     AC 00 90 3D |  if_ae	jmp	#LR__0448
1111c     64 BE 06 FD | 	qmul	local26, #100
11120     01 B4 06 F1 | 	add	local21, #1
11124     5A C1 02 F6 | 	mov	local27, local21
11128     02 C0 66 F0 | 	shl	local27, #2
1112c     5A C1 02 F1 | 	add	local27, local21
11130     06 C0 66 F0 | 	shl	local27, #6
11134     2F 00 00 FF 
11138     04 8C 06 F1 | 	add	local01, ##24068
1113c     46 C1 02 F1 | 	add	local27, local01
11140     5A 75 02 F6 | 	mov	arg01, local21
11144     04 74 66 F0 | 	shl	arg01, #4
11148     5A 75 82 F1 | 	sub	arg01, local21
1114c     01 74 66 F0 | 	shl	arg01, #1
11150     0C 00 00 FF 
11154     44 8D 06 F1 | 	add	local01, ##6468
11158     46 75 02 F1 | 	add	arg01, local01
1115c     50 01 00 FF 
11160     FD 76 06 F6 | 	mov	arg02, ##@LR__2048
11164     3B 00 00 FF 
11168     10 8C 86 F1 | 	sub	local01, ##30224
1116c     46 A9 02 F6 | 	mov	local15, local01
11170     18 A6 62 FD | 	getqx	local14
11174     46 A7 02 F1 | 	add	local14, local01
11178     53 AB 02 F6 | 	mov	local16, local14
1117c     F8 79 02 F6 | 	mov	arg03, ptra
11180     61 AB 66 FC | 	wrlong	local16, ptra++
11184     0C 0C BF FD | 	call	#_sprintf
11188     04 F0 87 F1 | 	sub	ptra, #4
1118c     C9 74 02 F6 | 	mov	arg01, objptr
11190     E7 76 02 F6 | 	mov	arg02, ptr__button_set_remove_
11194     A0 4A B1 FD | 	call	#__system___make_methodptr
11198     60 75 02 F6 | 	mov	arg01, local27
1119c     5F 79 02 F6 | 	mov	arg03, local26
111a0     34 75 06 F1 | 	add	arg01, #308
111a4     3A 35 62 FC | 	wrlong	result1, arg01
111a8     10 74 86 F1 | 	sub	arg01, #16
111ac     3A 79 62 FC | 	wrlong	arg03, arg01
111b0     60 75 02 F6 | 	mov	arg01, local27
111b4     18 75 06 F1 | 	add	arg01, #280
111b8     3A 03 48 FC | 	wrbyte	#1, arg01
111bc     01 BE 06 F1 | 	add	local26, #1
111c0     38 8D 86 F1 | 	sub	local01, #312
111c4     40 FF 9F FD | 	jmp	#LR__0447
111c8                 | LR__0448
111c8     01 B4 06 F1 | 	add	local21, #1
111cc     5A C3 02 F6 | 	mov	local28, local21
111d0     02 C2 66 F0 | 	shl	local28, #2
111d4     5A C3 02 F1 | 	add	local28, local21
111d8     06 C2 66 F0 | 	shl	local28, #6
111dc     2F 00 00 FF 
111e0     04 8C 06 F1 | 	add	local01, ##24068
111e4     46 C3 02 F1 | 	add	local28, local01
111e8     5A 75 02 F6 | 	mov	arg01, local21
111ec     04 74 66 F0 | 	shl	arg01, #4
111f0     5A 75 82 F1 | 	sub	arg01, local21
111f4     01 74 66 F0 | 	shl	arg01, #1
111f8     0C 00 00 FF 
111fc     44 8D 06 F1 | 	add	local01, ##6468
11200     46 75 02 F1 | 	add	arg01, local01
11204     50 01 00 FF 
11208     00 77 06 F6 | 	mov	arg02, ##@LR__2049
1120c     84 0B BF FD | 	call	#_sprintf
11210     C9 74 02 F6 | 	mov	arg01, objptr
11214     E5 76 02 F6 | 	mov	arg02, ptr__button_set_add_
11218     1C 4A B1 FD | 	call	#__system___make_methodptr
1121c     61 75 02 F6 | 	mov	arg01, local28
11220     00 78 06 F6 | 	mov	arg03, #0
11224     34 75 06 F1 | 	add	arg01, #308
11228     3A 35 62 FC | 	wrlong	result1, arg01
1122c     10 74 86 F1 | 	sub	arg01, #16
11230     3A 01 68 FC | 	wrlong	#0, arg01
11234     61 75 02 F6 | 	mov	arg01, local28
11238     18 75 06 F1 | 	add	arg01, #280
1123c     3A 03 48 FC | 	wrbyte	#1, arg01
11240                 | '             {
11240                 | '                 paramIndex++;
11240                 | '                 Module *quartetModule = &(page->profileParameters[paramIndex]);
11240                 | '                 sprintf(page->profileParametersBuffer[paramIndex], "%s", page->set.quartets[i].name);
11240                 | '                 module_touch_callback(quartetModule, button_set_remove, i);
11240                 | '                 module_set_visable(quartetModule,  (1) );
11240                 | '             }
11240                 | ' 
11240                 | '             paramIndex++;
11240                 | '             Module *quartetModule = &(page->profileParameters[paramIndex]);
11240                 | '             sprintf(page->profileParametersBuffer[paramIndex], "New Quartet");
11240                 | '             module_touch_callback(quartetModule, button_set_add, 0);
11240                 | '             module_set_visable(quartetModule,  (1) );
11240                 | '             break;
11240     3B 00 00 FF 
11244     48 8D 86 F1 | 	sub	local01, ##30536
11248     00 00 90 FD | 	jmp	#LR__0450
1124c                 | '         {
1124c                 | '             break;
1124c                 | '         {
1124c                 | '             break;
1124c                 | LR__0449
1124c                 | '             break;
1124c                 | LR__0450
1124c     0C 8C 06 F1 | 	add	local01, #12
11250     46 8F 02 FB | 	rdlong	local02, local01
11254     08 8C 86 F1 | 	sub	local01, #8
11258     46 75 02 FB | 	rdlong	arg01, local01
1125c     2E 00 00 FF 
11260     C0 8C 06 F1 | 	add	local01, ##23744
11264     46 77 02 F6 | 	mov	arg02, local01
11268     2E 00 00 FF 
1126c     C4 8C 86 F1 | 	sub	local01, ##23748
11270     AC 86 BF FD | 	call	#_module_draw
11274                 | '         }
11274                 | '         lastMode = page->mode;
11274                 | '         module_draw(page->display, &(page->subroot));
11274                 | '         do
11274                 | LR__0451
11274     04 8C 06 F1 | 	add	local01, #4
11278     46 75 02 FB | 	rdlong	arg01, local01
1127c     64 45 BF FD | 	call	#_display_update_touch
11280     22 00 00 FF 
11284     7C 8C 06 F1 | 	add	local01, ##17532
11288     46 75 02 F6 | 	mov	arg01, local01
1128c     22 00 00 FF 
11290     7C 8C 86 F1 | 	sub	local01, ##17532
11294     46 77 02 FB | 	rdlong	arg02, local01
11298     04 8C 86 F1 | 	sub	local01, #4
1129c     46 79 02 F6 | 	mov	arg03, local01
112a0     CC 7A BF FD | 	call	#_module_touch_check
112a4     00 34 0E F2 | 	cmp	result1, #0 wz
112a8     C8 FF 9F AD |  if_e	jmp	#LR__0451
112ac     C8 F6 9F FD | 	jmp	#LR__0436
112b0                 | LR__0452
112b0     A8 F0 03 F6 | 	mov	ptra, fp
112b4     B3 00 A0 FD | 	call	#popregs_
112b8                 | _test_profile_page_run_ret
112b8     2D 00 64 FD | 	ret
112bc                 | 
112bc                 | _mad_begin
112bc     07 4C 05 F6 | 	mov	COUNT_, #7
112c0     A9 00 A0 FD | 	call	#pushregs_
112c4     3C F0 07 F1 | 	add	ptra, #60
112c8     00 74 06 F6 | 	mov	arg01, #0
112cc     00 82 B1 FD | 	call	#__system___getiolock_1306
112d0     1A 75 02 F6 | 	mov	arg01, result1
112d4     98 49 B1 FD | 	call	#__system___lockmem
112d8     50 01 00 FF 
112dc     0C 77 06 F6 | 	mov	arg02, ##@LR__2050
112e0     00 74 06 F6 | 	mov	arg01, #0
112e4     00 78 06 F6 | 	mov	arg03, #0
112e8     2C 4F B1 FD | 	call	#__system___basic_print_string
112ec     00 74 06 F6 | 	mov	arg01, #0
112f0     0A 76 06 F6 | 	mov	arg02, #10
112f4     00 78 06 F6 | 	mov	arg03, #0
112f8     D0 4E B1 FD | 	call	#__system___basic_print_char
112fc     00 74 06 F6 | 	mov	arg01, #0
11300     CC 81 B1 FD | 	call	#__system___getiolock_1306
11304     1A 01 68 FC | 	wrlong	#0, result1
11308     00 74 06 F6 | 	mov	arg01, #0
1130c     C0 81 B1 FD | 	call	#__system___getiolock_1306
11310     1A 75 02 F6 | 	mov	arg01, result1
11314     58 49 B1 FD | 	call	#__system___lockmem
11318     50 01 00 FF 
1131c     1C 77 06 F6 | 	mov	arg02, ##@LR__2051
11320     00 74 06 F6 | 	mov	arg01, #0
11324     00 78 06 F6 | 	mov	arg03, #0
11328     EC 4E B1 FD | 	call	#__system___basic_print_string
1132c     00 74 06 F6 | 	mov	arg01, #0
11330     0A 76 06 F6 | 	mov	arg02, #10
11334     00 78 06 F6 | 	mov	arg03, #0
11338     90 4E B1 FD | 	call	#__system___basic_print_char
1133c     00 74 06 F6 | 	mov	arg01, #0
11340     8C 81 B1 FD | 	call	#__system___getiolock_1306
11344     1A 01 68 FC | 	wrlong	#0, result1
11348     B0 74 B0 FD | 	call	#_BSP_W25Qx_Reset_1137
1134c                 | ' {
1134c                 | ' 	BSP_W25Qx_Reset();
1134c                 | ' 	return BSP_W25Qx_GetStatus();
1134c     F4 74 B0 FD | 	call	#_BSP_W25Qx_GetStatus_1138
11350     00 74 06 F6 | 	mov	arg01, #0
11354     78 81 B1 FD | 	call	#__system___getiolock_1306
11358     1A 75 02 F6 | 	mov	arg01, result1
1135c     10 49 B1 FD | 	call	#__system___lockmem
11360     50 01 00 FF 
11364     27 77 06 F6 | 	mov	arg02, ##@LR__2052
11368     00 74 06 F6 | 	mov	arg01, #0
1136c     00 78 06 F6 | 	mov	arg03, #0
11370     A4 4E B1 FD | 	call	#__system___basic_print_string
11374     00 74 06 F6 | 	mov	arg01, #0
11378     0A 76 06 F6 | 	mov	arg02, #10
1137c     00 78 06 F6 | 	mov	arg03, #0
11380     48 4E B1 FD | 	call	#__system___basic_print_char
11384     00 74 06 F6 | 	mov	arg01, #0
11388     44 81 B1 FD | 	call	#__system___getiolock_1306
1138c     1A 01 68 FC | 	wrlong	#0, result1
11390     A8 74 02 F6 | 	mov	arg01, fp
11394     84 09 B0 FD | 	call	#_BSP_W25Qx_Read_ID
11398     00 74 06 F6 | 	mov	arg01, #0
1139c     30 81 B1 FD | 	call	#__system___getiolock_1306
113a0     1A 75 02 F6 | 	mov	arg01, result1
113a4     C8 48 B1 FD | 	call	#__system___lockmem
113a8     50 01 00 FF 
113ac     32 77 06 F6 | 	mov	arg02, ##@LR__2053
113b0     00 74 06 F6 | 	mov	arg01, #0
113b4     00 78 06 F6 | 	mov	arg03, #0
113b8     5C 4E B1 FD | 	call	#__system___basic_print_string
113bc     00 74 06 F6 | 	mov	arg01, #0
113c0     0C 81 B1 FD | 	call	#__system___getiolock_1306
113c4     1A 01 68 FC | 	wrlong	#0, result1
113c8     04 50 05 F1 | 	add	fp, #4
113cc     A8 00 68 FC | 	wrlong	#0, fp
113d0     04 50 85 F1 | 	sub	fp, #4
113d4                 | ' 	for(int i=0;i<2;i++)
113d4                 | LR__0453
113d4     04 50 05 F1 | 	add	fp, #4
113d8     A8 74 02 FB | 	rdlong	arg01, fp
113dc     04 50 85 F1 | 	sub	fp, #4
113e0     02 74 56 F2 | 	cmps	arg01, #2 wc
113e4     44 00 90 3D |  if_ae	jmp	#LR__0454
113e8     50 01 00 FF 
113ec     43 75 06 F6 | 	mov	arg01, ##@LR__2054
113f0     04 50 05 F1 | 	add	fp, #4
113f4     A8 8C 02 FB | 	rdlong	local01, fp
113f8     04 50 85 F1 | 	sub	fp, #4
113fc     A8 8C 02 F1 | 	add	local01, fp
11400     46 8F C2 FA | 	rdbyte	local02, local01
11404     F8 77 02 F6 | 	mov	arg02, ptra
11408     61 8F 66 FC | 	wrlong	local02, ptra++
1140c     48 0A BF FD | 	call	#_printf
11410     04 F0 87 F1 | 	sub	ptra, #4
11414     04 50 05 F1 | 	add	fp, #4
11418     A8 8E 02 FB | 	rdlong	local02, fp
1141c     01 8E 06 F1 | 	add	local02, #1
11420     A8 8E 62 FC | 	wrlong	local02, fp
11424     04 50 85 F1 | 	sub	fp, #4
11428     A8 FF 9F FD | 	jmp	#LR__0453
1142c                 | LR__0454
1142c     00 74 06 F6 | 	mov	arg01, #0
11430     9C 80 B1 FD | 	call	#__system___getiolock_1306
11434     1A 75 02 F6 | 	mov	arg01, result1
11438     34 48 B1 FD | 	call	#__system___lockmem
1143c     50 01 00 FF 
11440     4B 77 06 F6 | 	mov	arg02, ##@LR__2055
11444     00 74 06 F6 | 	mov	arg01, #0
11448     00 78 06 F6 | 	mov	arg03, #0
1144c     C8 4D B1 FD | 	call	#__system___basic_print_string
11450     00 74 06 F6 | 	mov	arg01, #0
11454     0A 76 06 F6 | 	mov	arg02, #10
11458     00 78 06 F6 | 	mov	arg03, #0
1145c     6C 4D B1 FD | 	call	#__system___basic_print_char
11460     00 74 06 F6 | 	mov	arg01, #0
11464     68 80 B1 FD | 	call	#__system___getiolock_1306
11468     1A 01 68 FC | 	wrlong	#0, result1
1146c     00 74 06 F6 | 	mov	arg01, #0
11470     48 0C B0 FD | 	call	#_BSP_W25Qx_Erase_Block
11474     08 50 05 F1 | 	add	fp, #8
11478     A8 0A 68 FC | 	wrlong	#5, fp
1147c     04 50 05 F1 | 	add	fp, #4
11480     A8 04 68 FC | 	wrlong	#2, fp
11484     04 50 05 F1 | 	add	fp, #4
11488     A8 C8 68 FC | 	wrlong	#100, fp
1148c     08 50 85 F1 | 	sub	fp, #8
11490     A8 8E 02 F6 | 	mov	local02, fp
11494     18 50 05 F1 | 	add	fp, #24
11498     A8 8E 62 FC | 	wrlong	local02, fp
1149c     0C 50 85 F1 | 	sub	fp, #12
114a0     A8 90 02 F6 | 	mov	local03, fp
114a4     10 50 05 F1 | 	add	fp, #16
114a8     A8 90 62 FC | 	wrlong	local03, fp
114ac     04 50 05 F1 | 	add	fp, #4
114b0     A8 00 68 FC | 	wrlong	#0, fp
114b4     28 50 85 F1 | 	sub	fp, #40
114b8     84 EB 9E FE | 	loc	pa,	#(@LR__0456-@LR__0455)
114bc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
114c0                 | ' 
114c0                 | '   uint8_t *wData= data1.raw;
114c0                 | '   uint8_t *rData= data2.raw;
114c0                 | ' 
114c0                 | ' 
114c0                 | '   for(int i =0;i< 12 ;i++)
114c0                 | LR__0455
114c0     28 50 05 F1 | 	add	fp, #40
114c4     A8 90 02 FB | 	rdlong	local03, fp
114c8     28 50 85 F1 | 	sub	fp, #40
114cc     0C 90 56 F2 | 	cmps	local03, #12 wc
114d0     2C 00 90 3D |  if_ae	jmp	#LR__0457
114d4     24 50 05 F1 | 	add	fp, #36
114d8     A8 90 02 FB | 	rdlong	local03, fp
114dc     04 50 05 F1 | 	add	fp, #4
114e0     A8 8E 02 FB | 	rdlong	local02, fp
114e4     48 8F 02 F1 | 	add	local02, local03
114e8     47 01 48 FC | 	wrbyte	#0, local02
114ec     A8 90 02 FB | 	rdlong	local03, fp
114f0     01 90 06 F1 | 	add	local03, #1
114f4     A8 90 62 FC | 	wrlong	local03, fp
114f8     28 50 85 F1 | 	sub	fp, #40
114fc     C0 FF 9F FD | 	jmp	#LR__0455
11500                 | LR__0456
11500                 | LR__0457
11500     20 50 05 F1 | 	add	fp, #32
11504     A8 74 02 FB | 	rdlong	arg01, fp
11508     20 50 85 F1 | 	sub	fp, #32
1150c     00 76 06 F6 | 	mov	arg02, #0
11510     0C 78 06 F6 | 	mov	arg03, #12
11514     40 09 B0 FD | 	call	#_BSP_W25Qx_Write
11518     64 74 06 F6 | 	mov	arg01, #100
1151c     68 48 B1 FD | 	call	#__system___waitms
11520     24 50 05 F1 | 	add	fp, #36
11524     A8 74 02 FB | 	rdlong	arg01, fp
11528     24 50 85 F1 | 	sub	fp, #36
1152c     00 76 06 F6 | 	mov	arg02, #0
11530     0C 78 06 F6 | 	mov	arg03, #12
11534     60 08 B0 FD | 	call	#_BSP_W25Qx_Read
11538     00 74 06 F6 | 	mov	arg01, #0
1153c     90 7F B1 FD | 	call	#__system___getiolock_1306
11540     1A 75 02 F6 | 	mov	arg01, result1
11544     28 47 B1 FD | 	call	#__system___lockmem
11548     50 01 00 FF 
1154c     4D 77 06 F6 | 	mov	arg02, ##@LR__2056
11550     00 74 06 F6 | 	mov	arg01, #0
11554     00 78 06 F6 | 	mov	arg03, #0
11558     BC 4C B1 FD | 	call	#__system___basic_print_string
1155c     00 74 06 F6 | 	mov	arg01, #0
11560     0A 76 06 F6 | 	mov	arg02, #10
11564     00 78 06 F6 | 	mov	arg03, #0
11568     60 4C B1 FD | 	call	#__system___basic_print_char
1156c     00 74 06 F6 | 	mov	arg01, #0
11570     5C 7F B1 FD | 	call	#__system___getiolock_1306
11574     1A 01 68 FC | 	wrlong	#0, result1
11578     2C 50 05 F1 | 	add	fp, #44
1157c     A8 00 68 FC | 	wrlong	#0, fp
11580     2C 50 85 F1 | 	sub	fp, #44
11584                 | ' 	for(int i =0;i< 12 ;i++)
11584                 | LR__0458
11584     2C 50 05 F1 | 	add	fp, #44
11588     A8 90 02 FB | 	rdlong	local03, fp
1158c     2C 50 85 F1 | 	sub	fp, #44
11590     0C 90 56 F2 | 	cmps	local03, #12 wc
11594     4C 00 90 3D |  if_ae	jmp	#LR__0459
11598     50 01 00 FF 
1159c     60 75 06 F6 | 	mov	arg01, ##@LR__2057
115a0     24 50 05 F1 | 	add	fp, #36
115a4     A8 90 02 FB | 	rdlong	local03, fp
115a8     08 50 05 F1 | 	add	fp, #8
115ac     A8 8E 02 FB | 	rdlong	local02, fp
115b0     2C 50 85 F1 | 	sub	fp, #44
115b4     48 8F 02 F1 | 	add	local02, local03
115b8     47 8F C2 FA | 	rdbyte	local02, local02
115bc     F8 77 02 F6 | 	mov	arg02, ptra
115c0     61 8F 66 FC | 	wrlong	local02, ptra++
115c4     90 08 BF FD | 	call	#_printf
115c8     04 F0 87 F1 | 	sub	ptra, #4
115cc     2C 50 05 F1 | 	add	fp, #44
115d0     A8 90 02 FB | 	rdlong	local03, fp
115d4     01 90 06 F1 | 	add	local03, #1
115d8     A8 90 62 FC | 	wrlong	local03, fp
115dc     2C 50 85 F1 | 	sub	fp, #44
115e0     A0 FF 9F FD | 	jmp	#LR__0458
115e4                 | LR__0459
115e4     00 74 06 F6 | 	mov	arg01, #0
115e8     E4 7E B1 FD | 	call	#__system___getiolock_1306
115ec     1A 75 02 F6 | 	mov	arg01, result1
115f0     7C 46 B1 FD | 	call	#__system___lockmem
115f4     50 01 00 FF 
115f8     69 77 06 F6 | 	mov	arg02, ##@LR__2058
115fc     00 74 06 F6 | 	mov	arg01, #0
11600     00 78 06 F6 | 	mov	arg03, #0
11604     10 4C B1 FD | 	call	#__system___basic_print_string
11608     00 74 06 F6 | 	mov	arg01, #0
1160c     0A 76 06 F6 | 	mov	arg02, #10
11610     00 78 06 F6 | 	mov	arg03, #0
11614     B4 4B B1 FD | 	call	#__system___basic_print_char
11618     50 01 00 FF 
1161c     6B 77 06 F6 | 	mov	arg02, ##@LR__2059
11620     00 74 06 F6 | 	mov	arg01, #0
11624     00 78 06 F6 | 	mov	arg03, #0
11628     EC 4B B1 FD | 	call	#__system___basic_print_string
1162c     00 74 06 F6 | 	mov	arg01, #0
11630     0A 76 06 F6 | 	mov	arg02, #10
11634     00 78 06 F6 | 	mov	arg03, #0
11638     90 4B B1 FD | 	call	#__system___basic_print_char
1163c     00 74 06 F6 | 	mov	arg01, #0
11640     8C 7E B1 FD | 	call	#__system___getiolock_1306
11644     1A 01 68 FC | 	wrlong	#0, result1
11648     00 74 06 F6 | 	mov	arg01, #0
1164c     80 7E B1 FD | 	call	#__system___getiolock_1306
11650     1A 75 02 F6 | 	mov	arg01, result1
11654     18 46 B1 FD | 	call	#__system___lockmem
11658     50 01 00 FF 
1165c     6D 77 06 F6 | 	mov	arg02, ##@LR__2060
11660     00 74 06 F6 | 	mov	arg01, #0
11664     00 78 06 F6 | 	mov	arg03, #0
11668     AC 4B B1 FD | 	call	#__system___basic_print_string
1166c     14 50 05 F1 | 	add	fp, #20
11670     A8 76 02 FB | 	rdlong	arg02, fp
11674     14 50 85 F1 | 	sub	fp, #20
11678     00 74 06 F6 | 	mov	arg01, #0
1167c     00 78 06 F6 | 	mov	arg03, #0
11680     0A 7A 06 F6 | 	mov	arg04, #10
11684     D4 4B B1 FD | 	call	#__system___basic_print_integer
11688     50 01 00 FF 
1168c     77 77 06 F6 | 	mov	arg02, ##@LR__2061
11690     00 74 06 F6 | 	mov	arg01, #0
11694     00 78 06 F6 | 	mov	arg03, #0
11698     7C 4B B1 FD | 	call	#__system___basic_print_string
1169c     18 50 05 F1 | 	add	fp, #24
116a0     A8 76 02 FB | 	rdlong	arg02, fp
116a4     18 50 85 F1 | 	sub	fp, #24
116a8     00 74 06 F6 | 	mov	arg01, #0
116ac     00 78 06 F6 | 	mov	arg03, #0
116b0     0A 7A 06 F6 | 	mov	arg04, #10
116b4     A4 4B B1 FD | 	call	#__system___basic_print_integer
116b8     50 01 00 FF 
116bc     79 77 06 F6 | 	mov	arg02, ##@LR__2062
116c0     00 74 06 F6 | 	mov	arg01, #0
116c4     00 78 06 F6 | 	mov	arg03, #0
116c8     4C 4B B1 FD | 	call	#__system___basic_print_string
116cc     1C 50 05 F1 | 	add	fp, #28
116d0     A8 76 02 FB | 	rdlong	arg02, fp
116d4     1C 50 85 F1 | 	sub	fp, #28
116d8     00 74 06 F6 | 	mov	arg01, #0
116dc     00 78 06 F6 | 	mov	arg03, #0
116e0     0A 7A 06 F6 | 	mov	arg04, #10
116e4     74 4B B1 FD | 	call	#__system___basic_print_integer
116e8     00 74 06 F6 | 	mov	arg01, #0
116ec     0A 76 06 F6 | 	mov	arg02, #10
116f0     00 78 06 F6 | 	mov	arg03, #0
116f4     D4 4A B1 FD | 	call	#__system___basic_print_char
116f8     00 74 06 F6 | 	mov	arg01, #0
116fc     D0 7D B1 FD | 	call	#__system___getiolock_1306
11700     1A 01 68 FC | 	wrlong	#0, result1
11704                 | '   return;
11704     BC 03 90 FD | 	jmp	#LR__0470
11708                 | '     return;
11708                 | '   {
11708                 | '     loading_overlay_display(&display, "Monitor Failed, please reset", OVERLAY_TYPE_LOADING);
11708                 | '     return;
11708                 | '   {
11708                 | '     loading_overlay_display(&display, "ControlSystem Failed, please reset", OVERLAY_TYPE_LOADING);
11708                 | '     return;
11708                 | ' 
11708                 | '   Page currentPage = PAGE_TEST_PROFILE;
11708                 | '   while (1)
11708                 | LR__0460
11708                 | '   {
11708                 | '     switch (currentPage)
11708     30 50 05 F1 | 	add	fp, #48
1170c     A8 90 02 FB | 	rdlong	local03, fp
11710     30 50 85 F1 | 	sub	fp, #48
11714     48 93 02 F6 | 	mov	local04, local03
11718     06 92 26 F3 | 	fle	local04, #6
1171c     30 92 62 FD | 	jmprel	local04
11720                 | LR__0461
11720     18 00 90 FD | 	jmp	#LR__0462
11724     B0 00 90 FD | 	jmp	#LR__0463
11728     30 01 90 FD | 	jmp	#LR__0464
1172c     74 02 90 FD | 	jmp	#LR__0466
11730     C4 01 90 FD | 	jmp	#LR__0465
11734     F4 02 90 FD | 	jmp	#LR__0467
11738     0C 03 90 FD | 	jmp	#LR__0468
1173c                 | LR__0462
1173c     00 74 06 F6 | 	mov	arg01, #0
11740     8C 7D B1 FD | 	call	#__system___getiolock_1306
11744     1A 75 02 F6 | 	mov	arg01, result1
11748     24 45 B1 FD | 	call	#__system___lockmem
1174c     51 01 00 FF 
11750     4D 76 06 F6 | 	mov	arg02, ##@LR__2072
11754     00 74 06 F6 | 	mov	arg01, #0
11758     00 78 06 F6 | 	mov	arg03, #0
1175c     B8 4A B1 FD | 	call	#__system___basic_print_string
11760     00 74 06 F6 | 	mov	arg01, #0
11764     0A 76 06 F6 | 	mov	arg02, #10
11768     00 78 06 F6 | 	mov	arg03, #0
1176c     5C 4A B1 FD | 	call	#__system___basic_print_char
11770     00 74 06 F6 | 	mov	arg01, #0
11774     58 7D B1 FD | 	call	#__system___getiolock_1306
11778     1A 01 68 FC | 	wrlong	#0, result1
1177c     21 00 00 FF 
11780     04 D7 05 F1 | 	add	ptr__dat__, ##17156
11784     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11788     21 00 00 FF 
1178c     04 D7 85 F1 | 	sub	ptr__dat__, ##17156
11790     F4 BD BF FD | 	call	#_status_page_run
11794     00 74 06 F6 | 	mov	arg01, #0
11798     34 7D B1 FD | 	call	#__system___getiolock_1306
1179c     1A 75 02 F6 | 	mov	arg01, result1
117a0     CC 44 B1 FD | 	call	#__system___lockmem
117a4     51 01 00 FF 
117a8     61 76 06 F6 | 	mov	arg02, ##@LR__2073
117ac     00 74 06 F6 | 	mov	arg01, #0
117b0     00 78 06 F6 | 	mov	arg03, #0
117b4     60 4A B1 FD | 	call	#__system___basic_print_string
117b8     00 74 06 F6 | 	mov	arg01, #0
117bc     0A 76 06 F6 | 	mov	arg02, #10
117c0     00 78 06 F6 | 	mov	arg03, #0
117c4     04 4A B1 FD | 	call	#__system___basic_print_char
117c8     00 74 06 F6 | 	mov	arg01, #0
117cc     00 7D B1 FD | 	call	#__system___getiolock_1306
117d0     1A 01 68 FC | 	wrlong	#0, result1
117d4                 | '       break;
117d4     70 02 90 FD | 	jmp	#LR__0469
117d8                 | LR__0463
117d8     00 74 06 F6 | 	mov	arg01, #0
117dc     F0 7C B1 FD | 	call	#__system___getiolock_1306
117e0     1A 75 02 F6 | 	mov	arg01, result1
117e4     88 44 B1 FD | 	call	#__system___lockmem
117e8     51 01 00 FF 
117ec     75 76 06 F6 | 	mov	arg02, ##@LR__2074
117f0     00 74 06 F6 | 	mov	arg01, #0
117f4     00 78 06 F6 | 	mov	arg03, #0
117f8     1C 4A B1 FD | 	call	#__system___basic_print_string
117fc     00 74 06 F6 | 	mov	arg01, #0
11800     0A 76 06 F6 | 	mov	arg02, #10
11804     00 78 06 F6 | 	mov	arg03, #0
11808     C0 49 B1 FD | 	call	#__system___basic_print_char
1180c     00 74 06 F6 | 	mov	arg01, #0
11810     BC 7C B1 FD | 	call	#__system___getiolock_1306
11814     1A 01 68 FC | 	wrlong	#0, result1
11818     00 74 06 F6 | 	mov	arg01, #0
1181c     B0 7C B1 FD | 	call	#__system___getiolock_1306
11820     1A 75 02 F6 | 	mov	arg01, result1
11824     48 44 B1 FD | 	call	#__system___lockmem
11828     51 01 00 FF 
1182c     89 76 06 F6 | 	mov	arg02, ##@LR__2075
11830     00 74 06 F6 | 	mov	arg01, #0
11834     00 78 06 F6 | 	mov	arg03, #0
11838     DC 49 B1 FD | 	call	#__system___basic_print_string
1183c     00 74 06 F6 | 	mov	arg01, #0
11840     0A 76 06 F6 | 	mov	arg02, #10
11844     00 78 06 F6 | 	mov	arg03, #0
11848     80 49 B1 FD | 	call	#__system___basic_print_char
1184c     00 74 06 F6 | 	mov	arg01, #0
11850     7C 7C B1 FD | 	call	#__system___getiolock_1306
11854     1A 01 68 FC | 	wrlong	#0, result1
11858                 | '       break;
11858     EC 01 90 FD | 	jmp	#LR__0469
1185c                 | LR__0464
1185c     00 74 06 F6 | 	mov	arg01, #0
11860     6C 7C B1 FD | 	call	#__system___getiolock_1306
11864     1A 75 02 F6 | 	mov	arg01, result1
11868     04 44 B1 FD | 	call	#__system___lockmem
1186c     51 01 00 FF 
11870     9D 76 06 F6 | 	mov	arg02, ##@LR__2076
11874     00 74 06 F6 | 	mov	arg01, #0
11878     00 78 06 F6 | 	mov	arg03, #0
1187c     98 49 B1 FD | 	call	#__system___basic_print_string
11880     00 74 06 F6 | 	mov	arg01, #0
11884     0A 76 06 F6 | 	mov	arg02, #10
11888     00 78 06 F6 | 	mov	arg03, #0
1188c     3C 49 B1 FD | 	call	#__system___basic_print_char
11890     00 74 06 F6 | 	mov	arg01, #0
11894     38 7C B1 FD | 	call	#__system___getiolock_1306
11898     1A 01 68 FC | 	wrlong	#0, result1
1189c     4B 00 00 FF 
118a0     04 D7 05 F1 | 	add	ptr__dat__, ##38660
118a4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
118a8     4B 00 00 FF 
118ac     04 D7 85 F1 | 	sub	ptr__dat__, ##38660
118b0     14 CC BF FD | 	call	#_automatic_page_run
118b4     00 74 06 F6 | 	mov	arg01, #0
118b8     14 7C B1 FD | 	call	#__system___getiolock_1306
118bc     1A 75 02 F6 | 	mov	arg01, result1
118c0     AC 43 B1 FD | 	call	#__system___lockmem
118c4     51 01 00 FF 
118c8     B7 76 06 F6 | 	mov	arg02, ##@LR__2077
118cc     00 74 06 F6 | 	mov	arg01, #0
118d0     00 78 06 F6 | 	mov	arg03, #0
118d4     40 49 B1 FD | 	call	#__system___basic_print_string
118d8     00 74 06 F6 | 	mov	arg01, #0
118dc     0A 76 06 F6 | 	mov	arg02, #10
118e0     00 78 06 F6 | 	mov	arg03, #0
118e4     E4 48 B1 FD | 	call	#__system___basic_print_char
118e8     00 74 06 F6 | 	mov	arg01, #0
118ec     E0 7B B1 FD | 	call	#__system___getiolock_1306
118f0     1A 01 68 FC | 	wrlong	#0, result1
118f4                 | '       break;
118f4     50 01 90 FD | 	jmp	#LR__0469
118f8                 | LR__0465
118f8     00 74 06 F6 | 	mov	arg01, #0
118fc     D0 7B B1 FD | 	call	#__system___getiolock_1306
11900     1A 75 02 F6 | 	mov	arg01, result1
11904     68 43 B1 FD | 	call	#__system___lockmem
11908     51 01 00 FF 
1190c     CE 76 06 F6 | 	mov	arg02, ##@LR__2078
11910     00 74 06 F6 | 	mov	arg01, #0
11914     00 78 06 F6 | 	mov	arg03, #0
11918     FC 48 B1 FD | 	call	#__system___basic_print_string
1191c     00 74 06 F6 | 	mov	arg01, #0
11920     0A 76 06 F6 | 	mov	arg02, #10
11924     00 78 06 F6 | 	mov	arg03, #0
11928     A0 48 B1 FD | 	call	#__system___basic_print_char
1192c     00 74 06 F6 | 	mov	arg01, #0
11930     9C 7B B1 FD | 	call	#__system___getiolock_1306
11934     1A 01 68 FC | 	wrlong	#0, result1
11938     34 50 05 F1 | 	add	fp, #52
1193c     A8 00 48 FC | 	wrbyte	#0, fp
11940     A8 92 CA FA | 	rdbyte	local04, fp wz
11944     34 50 85 F1 | 	sub	fp, #52
11948     1F 00 00 5F 
1194c     CC D7 05 51 |  if_ne	add	ptr__dat__, ##16332
11950     EB 74 02 56 |  if_ne	mov	arg01, ptr__dat__
11954     1F 00 00 5F 
11958     CC D7 85 51 |  if_ne	sub	ptr__dat__, ##16332
1195c     40 11 B0 5D |  if_ne	call	#_write_machine_profile_0340
11960     00 74 06 F6 | 	mov	arg01, #0
11964     68 7B B1 FD | 	call	#__system___getiolock_1306
11968     1A 75 02 F6 | 	mov	arg01, result1
1196c     00 43 B1 FD | 	call	#__system___lockmem
11970     51 01 00 FF 
11974     F0 76 06 F6 | 	mov	arg02, ##@LR__2079
11978     00 74 06 F6 | 	mov	arg01, #0
1197c     00 78 06 F6 | 	mov	arg03, #0
11980     94 48 B1 FD | 	call	#__system___basic_print_string
11984     00 74 06 F6 | 	mov	arg01, #0
11988     0A 76 06 F6 | 	mov	arg02, #10
1198c     00 78 06 F6 | 	mov	arg03, #0
11990     38 48 B1 FD | 	call	#__system___basic_print_char
11994     00 74 06 F6 | 	mov	arg01, #0
11998     34 7B B1 FD | 	call	#__system___getiolock_1306
1199c     1A 01 68 FC | 	wrlong	#0, result1
119a0                 | '       break;
119a0     A4 00 90 FD | 	jmp	#LR__0469
119a4                 | LR__0466
119a4     00 74 06 F6 | 	mov	arg01, #0
119a8     24 7B B1 FD | 	call	#__system___getiolock_1306
119ac     1A 75 02 F6 | 	mov	arg01, result1
119b0     BC 42 B1 FD | 	call	#__system___lockmem
119b4     51 01 00 FF 
119b8     0F 77 06 F6 | 	mov	arg02, ##@LR__2080
119bc     00 74 06 F6 | 	mov	arg01, #0
119c0     00 78 06 F6 | 	mov	arg03, #0
119c4     50 48 B1 FD | 	call	#__system___basic_print_string
119c8     00 74 06 F6 | 	mov	arg01, #0
119cc     0A 76 06 F6 | 	mov	arg02, #10
119d0     00 78 06 F6 | 	mov	arg03, #0
119d4     F4 47 B1 FD | 	call	#__system___basic_print_char
119d8     00 74 06 F6 | 	mov	arg01, #0
119dc     F0 7A B1 FD | 	call	#__system___getiolock_1306
119e0     1A 01 68 FC | 	wrlong	#0, result1
119e4     00 74 06 F6 | 	mov	arg01, #0
119e8     E4 7A B1 FD | 	call	#__system___getiolock_1306
119ec     1A 75 02 F6 | 	mov	arg01, result1
119f0     7C 42 B1 FD | 	call	#__system___lockmem
119f4     51 01 00 FF 
119f8     28 77 06 F6 | 	mov	arg02, ##@LR__2081
119fc     00 74 06 F6 | 	mov	arg01, #0
11a00     00 78 06 F6 | 	mov	arg03, #0
11a04     10 48 B1 FD | 	call	#__system___basic_print_string
11a08     00 74 06 F6 | 	mov	arg01, #0
11a0c     0A 76 06 F6 | 	mov	arg02, #10
11a10     00 78 06 F6 | 	mov	arg03, #0
11a14     B4 47 B1 FD | 	call	#__system___basic_print_char
11a18     00 74 06 F6 | 	mov	arg01, #0
11a1c     B0 7A B1 FD | 	call	#__system___getiolock_1306
11a20     1A 01 68 FC | 	wrlong	#0, result1
11a24     00 8C 06 F6 | 	mov	local01, #0
11a28                 | '       break;
11a28     1C 00 90 FD | 	jmp	#LR__0469
11a2c                 | LR__0467
11a2c     5B 00 00 FF 
11a30     68 D7 05 F1 | 	add	ptr__dat__, ##46952
11a34     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11a38     5B 00 00 FF 
11a3c     68 D7 85 F1 | 	sub	ptr__dat__, ##46952
11a40     B0 EE BF FD | 	call	#_test_profile_page_run
11a44                 | '     {
11a44                 | '       test_profile_page_run(&testProfilePage);
11a44                 | '       break;
11a44     00 00 90 FD | 	jmp	#LR__0469
11a48                 | LR__0468
11a48                 | '       break;
11a48                 | LR__0469
11a48     00 74 06 F6 | 	mov	arg01, #0
11a4c     80 7A B1 FD | 	call	#__system___getiolock_1306
11a50     1A 75 02 F6 | 	mov	arg01, result1
11a54     18 42 B1 FD | 	call	#__system___lockmem
11a58     51 01 00 FF 
11a5c     3E 77 06 F6 | 	mov	arg02, ##@LR__2082
11a60     00 74 06 F6 | 	mov	arg01, #0
11a64     00 78 06 F6 | 	mov	arg03, #0
11a68     AC 47 B1 FD | 	call	#__system___basic_print_string
11a6c     1A 95 02 F6 | 	mov	local05, result1
11a70     00 74 06 F6 | 	mov	arg01, #0
11a74     0A 76 06 F6 | 	mov	arg02, #10
11a78     00 78 06 F6 | 	mov	arg03, #0
11a7c     4C 47 B1 FD | 	call	#__system___basic_print_char
11a80     01 8E 06 F6 | 	mov	local02, #1
11a84     00 74 06 F6 | 	mov	arg01, #0
11a88     44 7A B1 FD | 	call	#__system___getiolock_1306
11a8c     1A 01 68 FC | 	wrlong	#0, result1
11a90     00 96 06 F6 | 	mov	local06, #0
11a94     A1 00 00 FF 
11a98     CC D7 05 F1 | 	add	ptr__dat__, ##82892
11a9c     EB 98 02 F6 | 	mov	local07, ptr__dat__
11aa0     4C 75 02 F6 | 	mov	arg01, local07
11aa4     A1 00 00 FF 
11aa8     CC D7 85 F1 | 	sub	ptr__dat__, ##82892
11aac     F4 92 BF FD | 	call	#_navigation_page_run
11ab0     1A 91 02 F6 | 	mov	local03, result1
11ab4     30 50 05 F1 | 	add	fp, #48
11ab8     A8 90 62 FC | 	wrlong	local03, fp
11abc     30 50 85 F1 | 	sub	fp, #48
11ac0     44 FC 9F FD | 	jmp	#LR__0460
11ac4                 | LR__0470
11ac4     A8 F0 03 F6 | 	mov	ptra, fp
11ac8     B3 00 A0 FD | 	call	#popregs_
11acc                 | _mad_begin_ret
11acc     2D 00 64 FD | 	ret
11ad0                 | 
11ad0                 | _atof
11ad0     06 4C 05 F6 | 	mov	COUNT_, #6
11ad4     A9 00 A0 FD | 	call	#pushregs_
11ad8     3A 8D 02 F6 | 	mov	local01, arg01
11adc     00 8E 06 F6 | 	mov	local02, #0
11ae0     00 C0 1F FF 
11ae4     00 90 06 F6 | 	mov	local03, ##1065353216
11ae8                 | ' 
11ae8                 | '     while (isspace(*str))
11ae8     56 01 00 FF 
11aec     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
11af0     28 E5 9E FE | 	loc	pa,	#(@LR__0472-@LR__0471)
11af4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
11af8                 | LR__0471
11af8     46 75 C2 FA | 	rdbyte	arg01, local01
11afc                 | ' {
11afc                 | '   return  (__ctype_get(c) & 0x10 ) ;
11afc     80 74 36 F3 | 	fle	arg01, #128 wc
11b00                 | '     return __ctype[c];
11b00     EB 74 02 F1 | 	add	arg01, ptr__dat__
11b04     3A 35 C2 FA | 	rdbyte	result1, arg01
11b08     10 34 CE F7 | 	test	result1, #16 wz
11b0c     01 8C 06 51 |  if_ne	add	local01, #1
11b10     E4 FF 9F 5D |  if_ne	jmp	#LR__0471
11b14                 | LR__0472
11b14     56 01 00 FF 
11b18     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
11b1c     46 93 C2 FA | 	rdbyte	local04, local01
11b20     2D 92 0E F2 | 	cmp	local04, #45 wz
11b24     01 94 C6 F6 | 	negz	local05, #1
11b28     49 97 02 F6 | 	mov	local06, local04
11b2c     2D 96 0E F2 | 	cmp	local06, #45 wz
11b30     46 93 C2 5A |  if_ne	rdbyte	local04, local01
11b34     2B 92 0E 52 |  if_ne	cmp	local04, #43 wz
11b38     01 8C 06 A1 |  if_e	add	local01, #1
11b3c                 | '         str++;
11b3c                 | ' 
11b3c                 | '     while (isdigit(*str))
11b3c                 | LR__0473
11b3c     46 75 C2 FA | 	rdbyte	arg01, local01
11b40                 | ' {
11b40                 | '   return  (__ctype_get(c) & 0x02 ) ;
11b40     80 74 36 F3 | 	fle	arg01, #128 wc
11b44                 | '     return __ctype[c];
11b44     56 01 00 FF 
11b48     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
11b4c     EB 74 02 F1 | 	add	arg01, ptr__dat__
11b50     3A 35 C2 FA | 	rdbyte	result1, arg01
11b54     56 01 00 FF 
11b58     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
11b5c     02 34 CE F7 | 	test	result1, #2 wz
11b60     38 00 90 AD |  if_e	jmp	#LR__0474
11b64     00 90 20 FF 
11b68     00 74 06 F6 | 	mov	arg01, ##1092616192
11b6c     47 77 02 F6 | 	mov	arg02, local02
11b70     B4 5E B1 FD | 	call	#__system___float_mul
11b74     1A 97 02 F6 | 	mov	local06, result1
11b78     46 75 C2 FA | 	rdbyte	arg01, local01
11b7c     30 74 86 F1 | 	sub	arg01, #48
11b80     70 5B B1 FD | 	call	#__system___float_fromint
11b84     1A 77 02 F6 | 	mov	arg02, result1
11b88     4B 75 02 F6 | 	mov	arg01, local06
11b8c     94 5B B1 FD | 	call	#__system___float_add
11b90     1A 8F 02 F6 | 	mov	local02, result1
11b94     01 8C 06 F1 | 	add	local01, #1
11b98     A0 FF 9F FD | 	jmp	#LR__0473
11b9c                 | LR__0474
11b9c     46 97 C2 FA | 	rdbyte	local06, local01
11ba0     2E 96 0E F2 | 	cmp	local06, #46 wz
11ba4     01 8C 06 A1 |  if_e	add	local01, #1
11ba8                 | '         str++;
11ba8                 | ' 
11ba8                 | '     while (isdigit(*str))
11ba8                 | LR__0475
11ba8     46 75 C2 FA | 	rdbyte	arg01, local01
11bac                 | ' {
11bac                 | '   return  (__ctype_get(c) & 0x02 ) ;
11bac     80 74 36 F3 | 	fle	arg01, #128 wc
11bb0                 | '     return __ctype[c];
11bb0     56 01 00 FF 
11bb4     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
11bb8     EB 74 02 F1 | 	add	arg01, ptr__dat__
11bbc     3A 35 C2 FA | 	rdbyte	result1, arg01
11bc0     56 01 00 FF 
11bc4     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
11bc8     02 34 CE F7 | 	test	result1, #2 wz
11bcc     4C 00 90 AD |  if_e	jmp	#LR__0476
11bd0     00 90 20 FF 
11bd4     00 74 06 F6 | 	mov	arg01, ##1092616192
11bd8     47 77 02 F6 | 	mov	arg02, local02
11bdc     48 5E B1 FD | 	call	#__system___float_mul
11be0     1A 97 02 F6 | 	mov	local06, result1
11be4     46 75 C2 FA | 	rdbyte	arg01, local01
11be8     30 74 86 F1 | 	sub	arg01, #48
11bec     04 5B B1 FD | 	call	#__system___float_fromint
11bf0     1A 77 02 F6 | 	mov	arg02, result1
11bf4     4B 75 02 F6 | 	mov	arg01, local06
11bf8     28 5B B1 FD | 	call	#__system___float_add
11bfc     1A 8F 02 F6 | 	mov	local02, result1
11c00     48 75 02 F6 | 	mov	arg01, local03
11c04     00 90 20 FF 
11c08     00 76 06 F6 | 	mov	arg02, ##1092616192
11c0c     18 5E B1 FD | 	call	#__system___float_mul
11c10     1A 91 02 F6 | 	mov	local03, result1
11c14     01 8C 06 F1 | 	add	local01, #1
11c18     8C FF 9F FD | 	jmp	#LR__0475
11c1c                 | LR__0476
11c1c                 | '     {
11c1c                 | '         number = 10.0 * number + (*str - '0');
11c1c                 | '         power *= 10.0;
11c1c                 | '         str++;
11c1c                 | '     }
11c1c                 | ' 
11c1c                 | '     return sign * number / power;
11c1c     4A 75 02 F6 | 	mov	arg01, local05
11c20     D0 5A B1 FD | 	call	#__system___float_fromint
11c24     1A 75 02 F6 | 	mov	arg01, result1
11c28     47 77 02 F6 | 	mov	arg02, local02
11c2c     F8 5D B1 FD | 	call	#__system___float_mul
11c30     1A 75 02 F6 | 	mov	arg01, result1
11c34     48 77 02 F6 | 	mov	arg02, local03
11c38     0C 60 B1 FD | 	call	#__system___float_div
11c3c     A8 F0 03 F6 | 	mov	ptra, fp
11c40     B3 00 A0 FD | 	call	#popregs_
11c44                 | _atof_ret
11c44     2D 00 64 FD | 	ret
11c48                 | 
11c48                 | _main
11c48     01 4C 05 F6 | 	mov	COUNT_, #1
11c4c     A9 00 A0 FD | 	call	#pushregs_
11c50     51 01 00 FF 
11c54     51 8D 06 F6 | 	mov	local01, ##@LR__2083
11c58                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
11c58                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
11c58                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
11c58     3D 74 06 F6 | 	mov	arg01, #61
11c5c     3C 76 06 F6 | 	mov	arg02, #60
11c60     3B 78 06 F6 | 	mov	arg03, #59
11c64     3A 7A 06 F6 | 	mov	arg04, #58
11c68     CC F5 BE FD | 	call	#__vfs_open_sdcardx
11c6c     1A 77 02 F6 | 	mov	arg02, result1
11c70     46 75 02 F6 | 	mov	arg01, local01
11c74     D0 73 B0 FD | 	call	#__mount
11c78     40 F6 BF FD | 	call	#_mad_begin
11c7c                 | ' {
11c7c                 | ' 
11c7c                 | ' 
11c7c                 | '     mount("/sd", _vfs_open_sdcard());
11c7c                 | ' 
11c7c                 | '     mad_begin();
11c7c                 | '     while (1)
11c7c                 | LR__0477
11c7c     FC FF 9F FD | 	jmp	#LR__0477
11c80                 | '         ;
11c80                 | '     return 0;
11c80     A8 F0 03 F6 | 	mov	ptra, fp
11c84     B3 00 A0 FD | 	call	#popregs_
11c88                 | _main_ret
11c88     2D 00 64 FD | 	ret
11c8c                 | 
11c8c                 | _BSP_W25Qx_WriteEnable
11c8c     00 4C 05 F6 | 	mov	COUNT_, #0
11c90     A9 00 A0 FD | 	call	#pushregs_
11c94     0C F0 07 F1 | 	add	ptra, #12
11c98     04 50 05 F1 | 	add	fp, #4
11c9c     A8 0C 48 FC | 	wrbyte	#6, fp
11ca0     04 50 85 F1 | 	sub	fp, #4
11ca4     F8 3D B1 FD | 	call	#__system___getms
11ca8     08 50 05 F1 | 	add	fp, #8
11cac     A8 34 62 FC | 	wrlong	result1, fp
11cb0     58 52 64 FD | 	drvl	#41
11cb4     04 50 85 F1 | 	sub	fp, #4
11cb8     A8 76 02 F6 | 	mov	arg02, fp
11cbc     04 50 85 F1 | 	sub	fp, #4
11cc0     00 74 06 F6 | 	mov	arg01, #0
11cc4     01 78 06 F6 | 	mov	arg03, #1
11cc8     01 00 00 FF 
11ccc     E8 7B 06 F6 | 	mov	arg04, ##1000
11cd0     40 6C B0 FD | 	call	#_HAL_SPI_Transmit_1142
11cd4     29 74 06 F6 | 	mov	arg01, #41
11cd8     59 52 64 FD | 	drvh	#41
11cdc                 | ' {
11cdc                 | ' 	uint8_t cmd[] = { 0x06 };
11cdc                 | ' 	uint32_t tickstart =  _getms() ;
11cdc                 | ' 
11cdc                 | ' 
11cdc                 | ' 	W25Qx_Enable();
11cdc                 | ' 
11cdc                 | ' 	HAL_SPI_Transmit( (0) , cmd, 1,  1000 );
11cdc                 | ' 
11cdc                 | ' 	W25Qx_Disable();
11cdc                 | ' 
11cdc                 | ' 
11cdc                 | ' 	while(BSP_W25Qx_GetStatus() ==  ((uint8_t)0x02) );
11cdc                 | LR__0478
11cdc     64 6B B0 FD | 	call	#_BSP_W25Qx_GetStatus_1138
11ce0     1A 35 E2 F8 | 	getbyte	result1, result1, #0
11ce4     02 34 0E F2 | 	cmp	result1, #2 wz
11ce8     F0 FF 9F AD |  if_e	jmp	#LR__0478
11cec     B0 3D B1 FD | 	call	#__system___getms
11cf0     08 50 05 F1 | 	add	fp, #8
11cf4     A8 7A 02 FB | 	rdlong	arg04, fp
11cf8     08 50 85 F1 | 	sub	fp, #8
11cfc     3D 35 82 F1 | 	sub	result1, arg04
11d00     01 00 00 FF 
11d04     E9 35 16 F2 | 	cmp	result1, ##1001 wc
11d08                 | '     {
11d08                 | ' 			return  ((uint8_t)0x03) ;
11d08     03 34 06 36 |  if_ae	mov	result1, #3
11d0c                 | '     }
11d0c                 | ' 	}
11d0c                 | ' 
11d0c                 | ' 	return  ((uint8_t)0x00) ;
11d0c     00 34 06 C6 |  if_b	mov	result1, #0
11d10     A8 F0 03 F6 | 	mov	ptra, fp
11d14     B3 00 A0 FD | 	call	#popregs_
11d18                 | _BSP_W25Qx_WriteEnable_ret
11d18     2D 00 64 FD | 	ret
11d1c                 | 
11d1c                 | _BSP_W25Qx_Read_ID
11d1c     00 4C 05 F6 | 	mov	COUNT_, #0
11d20     A9 00 A0 FD | 	call	#pushregs_
11d24     08 F0 07 F1 | 	add	ptra, #8
11d28     A8 74 62 FC | 	wrlong	arg01, fp
11d2c     04 50 05 F1 | 	add	fp, #4
11d30     A8 20 49 FC | 	wrbyte	#144, fp
11d34     01 50 05 F1 | 	add	fp, #1
11d38     A8 00 48 FC | 	wrbyte	#0, fp
11d3c     01 50 05 F1 | 	add	fp, #1
11d40     A8 00 48 FC | 	wrbyte	#0, fp
11d44     01 50 05 F1 | 	add	fp, #1
11d48     A8 00 48 FC | 	wrbyte	#0, fp
11d4c     58 52 64 FD | 	drvl	#41
11d50     03 50 85 F1 | 	sub	fp, #3
11d54     A8 76 02 F6 | 	mov	arg02, fp
11d58     04 50 85 F1 | 	sub	fp, #4
11d5c     00 74 06 F6 | 	mov	arg01, #0
11d60     04 78 06 F6 | 	mov	arg03, #4
11d64     01 00 00 FF 
11d68     E8 7B 06 F6 | 	mov	arg04, ##1000
11d6c     A4 6B B0 FD | 	call	#_HAL_SPI_Transmit_1142
11d70     A8 76 02 FB | 	rdlong	arg02, fp
11d74     00 74 06 F6 | 	mov	arg01, #0
11d78     02 78 06 F6 | 	mov	arg03, #2
11d7c     01 00 00 FF 
11d80     E8 7B 06 F6 | 	mov	arg04, ##1000
11d84     38 6B B0 FD | 	call	#_HAL_SPI_Receive_1140
11d88     59 52 64 FD | 	drvh	#41
11d8c     A8 F0 03 F6 | 	mov	ptra, fp
11d90     B3 00 A0 FD | 	call	#popregs_
11d94                 | _BSP_W25Qx_Read_ID_ret
11d94     2D 00 64 FD | 	ret
11d98                 | 
11d98                 | _BSP_W25Qx_Read
11d98     00 4C 05 F6 | 	mov	COUNT_, #0
11d9c     A9 00 A0 FD | 	call	#pushregs_
11da0     14 F0 07 F1 | 	add	ptra, #20
11da4     04 50 05 F1 | 	add	fp, #4
11da8     A8 74 62 FC | 	wrlong	arg01, fp
11dac     04 50 05 F1 | 	add	fp, #4
11db0     A8 76 62 FC | 	wrlong	arg02, fp
11db4     04 50 05 F1 | 	add	fp, #4
11db8     A8 78 62 FC | 	wrlong	arg03, fp
11dbc     04 50 05 F1 | 	add	fp, #4
11dc0     A8 06 48 FC | 	wrbyte	#3, fp
11dc4     08 50 85 F1 | 	sub	fp, #8
11dc8     A8 34 02 FB | 	rdlong	result1, fp
11dcc     10 34 46 F0 | 	shr	result1, #16
11dd0     09 50 05 F1 | 	add	fp, #9
11dd4     A8 34 42 FC | 	wrbyte	result1, fp
11dd8     09 50 85 F1 | 	sub	fp, #9
11ddc     A8 34 02 FB | 	rdlong	result1, fp
11de0     08 34 46 F0 | 	shr	result1, #8
11de4     0A 50 05 F1 | 	add	fp, #10
11de8     A8 34 42 FC | 	wrbyte	result1, fp
11dec     0A 50 85 F1 | 	sub	fp, #10
11df0     A8 7A 02 FB | 	rdlong	arg04, fp
11df4     0B 50 05 F1 | 	add	fp, #11
11df8     A8 7A 42 FC | 	wrbyte	arg04, fp
11dfc     58 52 64 FD | 	drvl	#41
11e00     03 50 85 F1 | 	sub	fp, #3
11e04     A8 76 02 F6 | 	mov	arg02, fp
11e08     10 50 85 F1 | 	sub	fp, #16
11e0c     00 74 06 F6 | 	mov	arg01, #0
11e10     04 78 06 F6 | 	mov	arg03, #4
11e14     01 00 00 FF 
11e18     E8 7B 06 F6 | 	mov	arg04, ##1000
11e1c     F4 6A B0 FD | 	call	#_HAL_SPI_Transmit_1142
11e20     04 50 05 F1 | 	add	fp, #4
11e24     A8 76 02 FB | 	rdlong	arg02, fp
11e28     08 50 05 F1 | 	add	fp, #8
11e2c     A8 78 02 FB | 	rdlong	arg03, fp
11e30     0C 50 85 F1 | 	sub	fp, #12
11e34     00 74 06 F6 | 	mov	arg01, #0
11e38     01 00 00 FF 
11e3c     E8 7B 06 F6 | 	mov	arg04, ##1000
11e40     7C 6A B0 FD | 	call	#_HAL_SPI_Receive_1140
11e44     59 52 64 FD | 	drvh	#41
11e48                 | ' {
11e48                 | ' 	uint8_t cmd[4] = { 0x90 ,0x00,0x00,0x00};
11e48                 | ' 
11e48                 | ' 	W25Qx_Enable();
11e48                 | ' 
11e48                 | ' 	HAL_SPI_Transmit( (0) , cmd, 4,  1000 );
11e48                 | ' 
11e48                 | ' 	HAL_SPI_Receive( (0) ,ID, 2,  1000 );
11e48                 | ' 	W25Qx_Disable();
11e48                 | ' 
11e48                 | ' }
11e48                 | ' #line 123 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/Serial/W25QXX.c"
11e48                 | ' uint8_t BSP_W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t size)
11e48                 | ' {
11e48                 | ' 	uint8_t cmd[4];
11e48                 | ' 
11e48                 | ' 
11e48                 | ' 	cmd[0] =  0x03 ;
11e48                 | ' 	cmd[1] = (uint8_t)(ReadAddr >> 16);
11e48                 | ' 	cmd[2] = (uint8_t)(ReadAddr >> 8);
11e48                 | ' 	cmd[3] = (uint8_t)(ReadAddr);
11e48                 | ' 
11e48                 | ' 	W25Qx_Enable();
11e48                 | ' 
11e48                 | ' 	HAL_SPI_Transmit( (0) , cmd, 4,  1000 );
11e48                 | ' 
11e48                 | ' 	HAL_SPI_Receive( (0) , pData,size, 1000 );
11e48                 | ' 	W25Qx_Disable();
11e48                 | ' 	return  ((uint8_t)0x00) ;
11e48     00 34 06 F6 | 	mov	result1, #0
11e4c     A8 F0 03 F6 | 	mov	ptra, fp
11e50     B3 00 A0 FD | 	call	#popregs_
11e54                 | _BSP_W25Qx_Read_ret
11e54     2D 00 64 FD | 	ret
11e58                 | 
11e58                 | _BSP_W25Qx_Write
11e58     02 4C 05 F6 | 	mov	COUNT_, #2
11e5c     A9 00 A0 FD | 	call	#pushregs_
11e60     24 F0 07 F1 | 	add	ptra, #36
11e64     04 50 05 F1 | 	add	fp, #4
11e68     A8 74 62 FC | 	wrlong	arg01, fp
11e6c     04 50 05 F1 | 	add	fp, #4
11e70     A8 76 62 FC | 	wrlong	arg02, fp
11e74     04 50 05 F1 | 	add	fp, #4
11e78     A8 78 62 FC | 	wrlong	arg03, fp
11e7c     0C 50 85 F1 | 	sub	fp, #12
11e80     1C 3C B1 FD | 	call	#__system___getms
11e84     20 50 05 F1 | 	add	fp, #32
11e88     A8 34 62 FC | 	wrlong	result1, fp
11e8c     04 50 85 F1 | 	sub	fp, #4
11e90     A8 00 68 FC | 	wrlong	#0, fp
11e94     1C 50 85 F1 | 	sub	fp, #28
11e98     98 E1 9E FE | 	loc	pa,	#(@LR__0480-@LR__0479)
11e9c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
11ea0                 | ' }
11ea0                 | ' #line 146 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/Serial/W25QXX.c"
11ea0                 | ' uint8_t BSP_W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t size)
11ea0                 | ' {
11ea0                 | ' 	uint8_t cmd[4];
11ea0                 | ' 	uint32_t end_addr, current_size, current_addr;
11ea0                 | ' 	uint32_t tickstart =  _getms() ;
11ea0                 | ' 
11ea0                 | ' 
11ea0                 | '   current_addr = 0;
11ea0                 | ' 
11ea0                 | '   while (current_addr <= WriteAddr)
11ea0                 | LR__0479
11ea0     1C 50 05 F1 | 	add	fp, #28
11ea4     A8 34 02 FB | 	rdlong	result1, fp
11ea8     14 50 85 F1 | 	sub	fp, #20
11eac     A8 8C 02 FB | 	rdlong	local01, fp
11eb0     08 50 85 F1 | 	sub	fp, #8
11eb4     46 35 1A F2 | 	cmp	result1, local01 wcz
11eb8     18 00 90 1D |  if_a	jmp	#LR__0481
11ebc     1C 50 05 F1 | 	add	fp, #28
11ec0     A8 8C 02 FB | 	rdlong	local01, fp
11ec4     00 8D 06 F1 | 	add	local01, #256
11ec8     A8 8C 62 FC | 	wrlong	local01, fp
11ecc     1C 50 85 F1 | 	sub	fp, #28
11ed0     CC FF 9F FD | 	jmp	#LR__0479
11ed4                 | LR__0480
11ed4                 | LR__0481
11ed4     1C 50 05 F1 | 	add	fp, #28
11ed8     A8 8E 02 FB | 	rdlong	local02, fp
11edc     14 50 85 F1 | 	sub	fp, #20
11ee0     A8 8C 02 FB | 	rdlong	local01, fp
11ee4     46 8F 82 F1 | 	sub	local02, local01
11ee8     10 50 05 F1 | 	add	fp, #16
11eec     A8 8E 62 FC | 	wrlong	local02, fp
11ef0     0C 50 85 F1 | 	sub	fp, #12
11ef4     A8 8C 02 FB | 	rdlong	local01, fp
11ef8     0C 50 85 F1 | 	sub	fp, #12
11efc     46 8F 1A F2 | 	cmp	local02, local01 wcz
11f00     0C 50 05 11 |  if_a	add	fp, #12
11f04     A8 8E 02 1B |  if_a	rdlong	local02, fp
11f08     0C 50 05 11 |  if_a	add	fp, #12
11f0c     A8 8E 62 1C |  if_a	wrlong	local02, fp
11f10     18 50 85 11 |  if_a	sub	fp, #24
11f14     08 50 05 F1 | 	add	fp, #8
11f18     A8 8E 02 FB | 	rdlong	local02, fp
11f1c     14 50 05 F1 | 	add	fp, #20
11f20     A8 8E 62 FC | 	wrlong	local02, fp
11f24     14 50 85 F1 | 	sub	fp, #20
11f28     A8 8E 02 FB | 	rdlong	local02, fp
11f2c     04 50 05 F1 | 	add	fp, #4
11f30     A8 8C 02 FB | 	rdlong	local01, fp
11f34     46 8F 02 F1 | 	add	local02, local01
11f38     08 50 05 F1 | 	add	fp, #8
11f3c     A8 8E 62 FC | 	wrlong	local02, fp
11f40     14 50 85 F1 | 	sub	fp, #20
11f44                 | '   {
11f44                 | '     current_size = size;
11f44                 | '   }
11f44                 | ' 
11f44                 | ' 
11f44                 | '   current_addr = WriteAddr;
11f44                 | '   end_addr = WriteAddr + size;
11f44                 | ' 
11f44                 | ' 
11f44                 | '   do
11f44                 | LR__0482
11f44     10 50 05 F1 | 	add	fp, #16
11f48     A8 04 48 FC | 	wrbyte	#2, fp
11f4c     0C 50 05 F1 | 	add	fp, #12
11f50     A8 8E 02 FB | 	rdlong	local02, fp
11f54     10 8E 46 F0 | 	shr	local02, #16
11f58     0B 50 85 F1 | 	sub	fp, #11
11f5c     A8 8E 42 FC | 	wrbyte	local02, fp
11f60     0B 50 05 F1 | 	add	fp, #11
11f64     A8 8E 02 FB | 	rdlong	local02, fp
11f68     08 8E 46 F0 | 	shr	local02, #8
11f6c     0A 50 85 F1 | 	sub	fp, #10
11f70     A8 8E 42 FC | 	wrbyte	local02, fp
11f74     0A 50 05 F1 | 	add	fp, #10
11f78     A8 8E 02 FB | 	rdlong	local02, fp
11f7c     09 50 85 F1 | 	sub	fp, #9
11f80     A8 8E 42 FC | 	wrbyte	local02, fp
11f84     13 50 85 F1 | 	sub	fp, #19
11f88     00 FD BF FD | 	call	#_BSP_W25Qx_WriteEnable
11f8c     58 52 64 FD | 	drvl	#41
11f90     10 50 05 F1 | 	add	fp, #16
11f94     A8 76 02 F6 | 	mov	arg02, fp
11f98     10 50 85 F1 | 	sub	fp, #16
11f9c     00 74 06 F6 | 	mov	arg01, #0
11fa0     04 78 06 F6 | 	mov	arg03, #4
11fa4     01 00 00 FF 
11fa8     E8 7B 06 F6 | 	mov	arg04, ##1000
11fac     64 69 B0 FD | 	call	#_HAL_SPI_Transmit_1142
11fb0     04 50 05 F1 | 	add	fp, #4
11fb4     A8 76 02 FB | 	rdlong	arg02, fp
11fb8     14 50 05 F1 | 	add	fp, #20
11fbc     A8 78 02 FB | 	rdlong	arg03, fp
11fc0     18 50 85 F1 | 	sub	fp, #24
11fc4     00 74 06 F6 | 	mov	arg01, #0
11fc8     01 00 00 FF 
11fcc     E8 7B 06 F6 | 	mov	arg04, ##1000
11fd0     40 69 B0 FD | 	call	#_HAL_SPI_Transmit_1142
11fd4     29 74 06 F6 | 	mov	arg01, #41
11fd8     59 52 64 FD | 	drvh	#41
11fdc                 | '   {
11fdc                 | ' 
11fdc                 | ' 		cmd[0] =  0x02 ;
11fdc                 | ' 		cmd[1] = (uint8_t)(current_addr >> 16);
11fdc                 | ' 		cmd[2] = (uint8_t)(current_addr >> 8);
11fdc                 | ' 		cmd[3] = (uint8_t)(current_addr);
11fdc                 | ' 
11fdc                 | ' 
11fdc                 | ' 		BSP_W25Qx_WriteEnable();
11fdc                 | ' 
11fdc                 | ' 		W25Qx_Enable();
11fdc                 | ' 
11fdc                 | '     HAL_SPI_Transmit( (0) ,cmd, 4,  1000 );
11fdc                 | ' 
11fdc                 | ' 
11fdc                 | '     HAL_SPI_Transmit( (0) , pData,current_size,  1000 );
11fdc                 | ' 			W25Qx_Disable();
11fdc                 | ' 
11fdc                 | ' 		while(BSP_W25Qx_GetStatus() ==  ((uint8_t)0x02) );
11fdc                 | LR__0483
11fdc     64 68 B0 FD | 	call	#_BSP_W25Qx_GetStatus_1138
11fe0     1A 8F E2 F8 | 	getbyte	local02, result1, #0
11fe4     02 8E 0E F2 | 	cmp	local02, #2 wz
11fe8     F0 FF 9F AD |  if_e	jmp	#LR__0483
11fec     B0 3A B1 FD | 	call	#__system___getms
11ff0     20 50 05 F1 | 	add	fp, #32
11ff4     A8 8C 02 FB | 	rdlong	local01, fp
11ff8     20 50 85 F1 | 	sub	fp, #32
11ffc     46 35 82 F1 | 	sub	result1, local01
12000     01 00 00 FF 
12004     E9 35 16 F2 | 	cmp	result1, ##1001 wc
12008                 | ' 			{
12008                 | ' 				return  ((uint8_t)0x03) ;
12008     03 34 06 36 |  if_ae	mov	result1, #3
1200c     A0 00 90 3D |  if_ae	jmp	#LR__0486
12010     1C 50 05 F1 | 	add	fp, #28
12014     A8 8E 02 FB | 	rdlong	local02, fp
12018     04 50 85 F1 | 	sub	fp, #4
1201c     A8 8C 02 FB | 	rdlong	local01, fp
12020     46 8F 02 F1 | 	add	local02, local01
12024     04 50 05 F1 | 	add	fp, #4
12028     A8 8E 62 FC | 	wrlong	local02, fp
1202c     18 50 85 F1 | 	sub	fp, #24
12030     A8 8E 02 FB | 	rdlong	local02, fp
12034     14 50 05 F1 | 	add	fp, #20
12038     A8 8C 02 FB | 	rdlong	local01, fp
1203c     46 8F 02 F1 | 	add	local02, local01
12040     14 50 85 F1 | 	sub	fp, #20
12044     A8 8E 62 FC | 	wrlong	local02, fp
12048     18 50 05 F1 | 	add	fp, #24
1204c     A8 8E 02 FB | 	rdlong	local02, fp
12050     00 8F 06 F1 | 	add	local02, #256
12054     08 50 85 F1 | 	sub	fp, #8
12058     A8 8C 02 FB | 	rdlong	local01, fp
1205c     14 50 85 F1 | 	sub	fp, #20
12060     46 8F 1A F2 | 	cmp	local02, local01 wcz
12064     1C 00 90 ED |  if_be	jmp	#LR__0484
12068     14 50 05 F1 | 	add	fp, #20
1206c     A8 8E 02 FB | 	rdlong	local02, fp
12070     08 50 05 F1 | 	add	fp, #8
12074     A8 8C 02 FB | 	rdlong	local01, fp
12078     1C 50 85 F1 | 	sub	fp, #28
1207c     46 8F 82 F1 | 	sub	local02, local01
12080     04 00 90 FD | 	jmp	#LR__0485
12084                 | LR__0484
12084     00 8F 06 F6 | 	mov	local02, #256
12088                 | LR__0485
12088     18 50 05 F1 | 	add	fp, #24
1208c     A8 8E 62 FC | 	wrlong	local02, fp
12090     04 50 05 F1 | 	add	fp, #4
12094     A8 8E 02 FB | 	rdlong	local02, fp
12098     08 50 85 F1 | 	sub	fp, #8
1209c     A8 8C 02 FB | 	rdlong	local01, fp
120a0     14 50 85 F1 | 	sub	fp, #20
120a4     46 8F 12 F2 | 	cmp	local02, local01 wc
120a8     98 FE 9F CD |  if_b	jmp	#LR__0482
120ac                 | ' 
120ac                 | ' 
120ac                 | ' 	return  ((uint8_t)0x00) ;
120ac     00 34 06 F6 | 	mov	result1, #0
120b0                 | LR__0486
120b0     A8 F0 03 F6 | 	mov	ptra, fp
120b4     B3 00 A0 FD | 	call	#popregs_
120b8                 | _BSP_W25Qx_Write_ret
120b8     2D 00 64 FD | 	ret
120bc                 | 
120bc                 | _BSP_W25Qx_Erase_Block
120bc     01 4C 05 F6 | 	mov	COUNT_, #1
120c0     A9 00 A0 FD | 	call	#pushregs_
120c4     10 F0 07 F1 | 	add	ptra, #16
120c8     04 50 05 F1 | 	add	fp, #4
120cc     A8 74 62 FC | 	wrlong	arg01, fp
120d0     04 50 85 F1 | 	sub	fp, #4
120d4     C8 39 B1 FD | 	call	#__system___getms
120d8     0C 50 05 F1 | 	add	fp, #12
120dc     A8 34 62 FC | 	wrlong	result1, fp
120e0     04 50 85 F1 | 	sub	fp, #4
120e4     A8 40 48 FC | 	wrbyte	#32, fp
120e8     04 50 85 F1 | 	sub	fp, #4
120ec     A8 34 02 FB | 	rdlong	result1, fp
120f0     10 34 46 F0 | 	shr	result1, #16
120f4     05 50 05 F1 | 	add	fp, #5
120f8     A8 34 42 FC | 	wrbyte	result1, fp
120fc     05 50 85 F1 | 	sub	fp, #5
12100     A8 34 02 FB | 	rdlong	result1, fp
12104     08 34 46 F0 | 	shr	result1, #8
12108     06 50 05 F1 | 	add	fp, #6
1210c     A8 34 42 FC | 	wrbyte	result1, fp
12110     06 50 85 F1 | 	sub	fp, #6
12114     A8 8C 02 FB | 	rdlong	local01, fp
12118     07 50 05 F1 | 	add	fp, #7
1211c     A8 8C 42 FC | 	wrbyte	local01, fp
12120     0B 50 85 F1 | 	sub	fp, #11
12124     64 FB BF FD | 	call	#_BSP_W25Qx_WriteEnable
12128     58 52 64 FD | 	drvl	#41
1212c     08 50 05 F1 | 	add	fp, #8
12130     A8 76 02 F6 | 	mov	arg02, fp
12134     08 50 85 F1 | 	sub	fp, #8
12138     00 74 06 F6 | 	mov	arg01, #0
1213c     04 78 06 F6 | 	mov	arg03, #4
12140     01 00 00 FF 
12144     E8 7B 06 F6 | 	mov	arg04, ##1000
12148     C8 67 B0 FD | 	call	#_HAL_SPI_Transmit_1142
1214c     29 74 06 F6 | 	mov	arg01, #41
12150     59 52 64 FD | 	drvh	#41
12154                 | ' }
12154                 | ' #line 214 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/Serial/W25QXX.c"
12154                 | ' uint8_t BSP_W25Qx_Erase_Block(uint32_t Address)
12154                 | ' {
12154                 | ' 	uint8_t cmd[4];
12154                 | ' 	uint32_t tickstart =  _getms() ;
12154                 | ' 	cmd[0] =  0x20 ;
12154                 | ' 	cmd[1] = (uint8_t)(Address >> 16);
12154                 | ' 	cmd[2] = (uint8_t)(Address >> 8);
12154                 | ' 	cmd[3] = (uint8_t)(Address);
12154                 | ' 
12154                 | ' 
12154                 | ' 	BSP_W25Qx_WriteEnable();
12154                 | ' 
12154                 | ' 
12154                 | ' 	W25Qx_Enable();
12154                 | ' 
12154                 | ' 	HAL_SPI_Transmit( (0) , cmd, 4,  1000 );
12154                 | ' 
12154                 | ' 	W25Qx_Disable();
12154                 | ' 
12154                 | ' 
12154                 | ' 	while(BSP_W25Qx_GetStatus() ==  ((uint8_t)0x02) );
12154                 | LR__0487
12154     EC 66 B0 FD | 	call	#_BSP_W25Qx_GetStatus_1138
12158     1A 8D E2 F8 | 	getbyte	local01, result1, #0
1215c     02 8C 0E F2 | 	cmp	local01, #2 wz
12160     F0 FF 9F AD |  if_e	jmp	#LR__0487
12164     38 39 B1 FD | 	call	#__system___getms
12168     0C 50 05 F1 | 	add	fp, #12
1216c     A8 8C 02 FB | 	rdlong	local01, fp
12170     0C 50 85 F1 | 	sub	fp, #12
12174     46 35 82 F1 | 	sub	result1, local01
12178     05 00 00 FF 
1217c     B9 35 16 F2 | 	cmp	result1, ##3001 wc
12180                 | '     {
12180                 | ' 			return  ((uint8_t)0x03) ;
12180     03 34 06 36 |  if_ae	mov	result1, #3
12184                 | '     }
12184                 | ' 	}
12184                 | ' 	return  ((uint8_t)0x00) ;
12184     00 34 06 C6 |  if_b	mov	result1, #0
12188     A8 F0 03 F6 | 	mov	ptra, fp
1218c     B3 00 A0 FD | 	call	#popregs_
12190                 | _BSP_W25Qx_Erase_Block_ret
12190     2D 00 64 FD | 	ret
12194                 | 
12194                 | _load_images_0339
12194     20 00 00 FF 
12198     94 D6 05 F1 | 	add	ptr__dat__, ##16532
1219c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
121a0     20 00 00 FF 
121a4     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
121a8     51 01 00 FF 
121ac     55 77 06 F6 | 	mov	arg02, ##@LR__2084
121b0     34 3A B1 FD | 	call	#__system____builtin_strcpy
121b4     20 00 00 FF 
121b8     A8 D6 05 F1 | 	add	ptr__dat__, ##16552
121bc     EB 04 68 FC | 	wrlong	#2, ptr__dat__
121c0     0C D6 05 F1 | 	add	ptr__dat__, #12
121c4     02 00 80 FF 
121c8     EB 04 68 FC | 	wrlong	##1026, ptr__dat__
121cc     04 D6 05 F1 | 	add	ptr__dat__, #4
121d0     EB 38 6A FC | 	wrlong	#284, ptr__dat__
121d4     0C D6 85 F1 | 	sub	ptr__dat__, #12
121d8     EB 00 68 FC | 	wrlong	#0, ptr__dat__
121dc     01 00 00 FF 
121e0     58 74 06 F6 | 	mov	arg01, ##600
121e4     0C D6 05 F1 | 	add	ptr__dat__, #12
121e8     EB 34 02 FB | 	rdlong	result1, ptr__dat__
121ec     1A 75 82 F1 | 	sub	arg01, result1
121f0     08 D6 85 F1 | 	sub	ptr__dat__, #8
121f4     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
121f8     0C D6 05 F1 | 	add	ptr__dat__, #12
121fc     EB 00 58 FC | 	wrword	#0, ptr__dat__
12200     02 D6 05 F1 | 	add	ptr__dat__, #2
12204     EB 00 58 FC | 	wrword	#0, ptr__dat__
12208     02 D6 05 F1 | 	add	ptr__dat__, #2
1220c     EB 00 58 FC | 	wrword	#0, ptr__dat__
12210     20 00 00 FF 
12214     C0 D6 85 F1 | 	sub	ptr__dat__, ##16576
12218     00 74 06 F6 | 	mov	arg01, #0
1221c     B0 72 B1 FD | 	call	#__system___getiolock_1306
12220     1A 75 02 F6 | 	mov	arg01, result1
12224     48 3A B1 FD | 	call	#__system___lockmem
12228     51 01 00 FF 
1222c     62 77 06 F6 | 	mov	arg02, ##@LR__2085
12230     00 74 06 F6 | 	mov	arg01, #0
12234     00 78 06 F6 | 	mov	arg03, #0
12238     DC 3F B1 FD | 	call	#__system___basic_print_string
1223c     20 00 00 FF 
12240     94 D6 05 F1 | 	add	ptr__dat__, ##16532
12244     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12248     20 00 00 FF 
1224c     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
12250     00 74 06 F6 | 	mov	arg01, #0
12254     00 78 06 F6 | 	mov	arg03, #0
12258     BC 3F B1 FD | 	call	#__system___basic_print_string
1225c     00 74 06 F6 | 	mov	arg01, #0
12260     0A 76 06 F6 | 	mov	arg02, #10
12264     00 78 06 F6 | 	mov	arg03, #0
12268     60 3F B1 FD | 	call	#__system___basic_print_char
1226c     00 74 06 F6 | 	mov	arg01, #0
12270     5C 72 B1 FD | 	call	#__system___getiolock_1306
12274     1A 01 68 FC | 	wrlong	#0, result1
12278     20 00 00 FF 
1227c     F4 D6 05 F1 | 	add	ptr__dat__, ##16628
12280     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12284     20 00 00 FF 
12288     F4 D6 85 F1 | 	sub	ptr__dat__, ##16628
1228c     51 01 00 FF 
12290     68 77 06 F6 | 	mov	arg02, ##@LR__2086
12294     50 39 B1 FD | 	call	#__system____builtin_strcpy
12298     20 00 00 FF 
1229c     08 D7 05 F1 | 	add	ptr__dat__, ##16648
122a0     EB 04 68 FC | 	wrlong	#2, ptr__dat__
122a4     0C D6 05 F1 | 	add	ptr__dat__, #12
122a8     EB 90 69 FC | 	wrlong	#200, ptr__dat__
122ac     04 D6 05 F1 | 	add	ptr__dat__, #4
122b0     EB 90 69 FC | 	wrlong	#200, ptr__dat__
122b4     0C D6 85 F1 | 	sub	ptr__dat__, #12
122b8     EB 00 68 FC | 	wrlong	#0, ptr__dat__
122bc     04 D6 05 F1 | 	add	ptr__dat__, #4
122c0     EB 00 68 FC | 	wrlong	#0, ptr__dat__
122c4     0C D6 05 F1 | 	add	ptr__dat__, #12
122c8     7C 00 80 FF 
122cc     EB 00 58 FC | 	wrword	##63488, ptr__dat__
122d0     02 D6 05 F1 | 	add	ptr__dat__, #2
122d4     EB 00 58 FC | 	wrword	#0, ptr__dat__
122d8     02 D6 05 F1 | 	add	ptr__dat__, #2
122dc     63 00 80 FF 
122e0     EB 30 58 FC | 	wrword	##50712, ptr__dat__
122e4     34 D6 05 F1 | 	add	ptr__dat__, #52
122e8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
122ec     20 00 00 FF 
122f0     54 D7 85 F1 | 	sub	ptr__dat__, ##16724
122f4     51 01 00 FF 
122f8     73 77 06 F6 | 	mov	arg02, ##@LR__2087
122fc     E8 38 B1 FD | 	call	#__system____builtin_strcpy
12300     20 00 00 FF 
12304     68 D7 05 F1 | 	add	ptr__dat__, ##16744
12308     EB 04 68 FC | 	wrlong	#2, ptr__dat__
1230c     0C D6 05 F1 | 	add	ptr__dat__, #12
12310     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12314     04 D6 05 F1 | 	add	ptr__dat__, #4
12318     EB 90 69 FC | 	wrlong	#200, ptr__dat__
1231c     0C D6 85 F1 | 	sub	ptr__dat__, #12
12320     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12324     04 D6 05 F1 | 	add	ptr__dat__, #4
12328     EB 00 68 FC | 	wrlong	#0, ptr__dat__
1232c     0C D6 05 F1 | 	add	ptr__dat__, #12
12330     7C 00 80 FF 
12334     EB 00 58 FC | 	wrword	##63488, ptr__dat__
12338     02 D6 05 F1 | 	add	ptr__dat__, #2
1233c     EB 00 58 FC | 	wrword	#0, ptr__dat__
12340     02 D6 05 F1 | 	add	ptr__dat__, #2
12344     63 00 80 FF 
12348     EB 30 58 FC | 	wrword	##50712, ptr__dat__
1234c     5C D6 85 F1 | 	sub	ptr__dat__, #92
12350     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12354     20 00 00 FF 
12358     24 D7 85 F1 | 	sub	ptr__dat__, ##16676
1235c     51 01 00 FF 
12360     7C 77 06 F6 | 	mov	arg02, ##@LR__2088
12364     80 38 B1 FD | 	call	#__system____builtin_strcpy
12368     20 00 00 FF 
1236c     38 D7 05 F1 | 	add	ptr__dat__, ##16696
12370     EB 04 68 FC | 	wrlong	#2, ptr__dat__
12374     0C D6 05 F1 | 	add	ptr__dat__, #12
12378     EB 90 69 FC | 	wrlong	#200, ptr__dat__
1237c     04 D6 05 F1 | 	add	ptr__dat__, #4
12380     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12384     0C D6 85 F1 | 	sub	ptr__dat__, #12
12388     EB 20 6B FC | 	wrlong	#400, ptr__dat__
1238c     04 D6 05 F1 | 	add	ptr__dat__, #4
12390     EB 00 68 FC | 	wrlong	#0, ptr__dat__
12394     0C D6 05 F1 | 	add	ptr__dat__, #12
12398     7C 00 80 FF 
1239c     EB 00 58 FC | 	wrword	##63488, ptr__dat__
123a0     02 D6 05 F1 | 	add	ptr__dat__, #2
123a4     EB 00 58 FC | 	wrword	#0, ptr__dat__
123a8     02 D6 05 F1 | 	add	ptr__dat__, #2
123ac     63 00 80 FF 
123b0     EB 30 58 FC | 	wrword	##50712, ptr__dat__
123b4     34 D6 05 F1 | 	add	ptr__dat__, #52
123b8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
123bc     20 00 00 FF 
123c0     84 D7 85 F1 | 	sub	ptr__dat__, ##16772
123c4     51 01 00 FF 
123c8     87 77 06 F6 | 	mov	arg02, ##@LR__2089
123cc     18 38 B1 FD | 	call	#__system____builtin_strcpy
123d0     20 00 00 FF 
123d4     98 D7 05 F1 | 	add	ptr__dat__, ##16792
123d8     EB 04 68 FC | 	wrlong	#2, ptr__dat__
123dc     0C D6 05 F1 | 	add	ptr__dat__, #12
123e0     EB 90 69 FC | 	wrlong	#200, ptr__dat__
123e4     04 D6 05 F1 | 	add	ptr__dat__, #4
123e8     EB 90 69 FC | 	wrlong	#200, ptr__dat__
123ec     0C D6 85 F1 | 	sub	ptr__dat__, #12
123f0     01 00 80 FF 
123f4     EB B0 68 FC | 	wrlong	##600, ptr__dat__
123f8     04 D6 05 F1 | 	add	ptr__dat__, #4
123fc     EB 00 68 FC | 	wrlong	#0, ptr__dat__
12400     0C D6 05 F1 | 	add	ptr__dat__, #12
12404     7C 00 80 FF 
12408     EB 00 58 FC | 	wrword	##63488, ptr__dat__
1240c     02 D6 05 F1 | 	add	ptr__dat__, #2
12410     EB 00 58 FC | 	wrword	#0, ptr__dat__
12414     02 D6 05 F1 | 	add	ptr__dat__, #2
12418     63 00 80 FF 
1241c     EB 30 58 FC | 	wrword	##50712, ptr__dat__
12420     04 D6 05 F1 | 	add	ptr__dat__, #4
12424     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12428     20 00 00 FF 
1242c     B4 D7 85 F1 | 	sub	ptr__dat__, ##16820
12430     51 01 00 FF 
12434     91 77 06 F6 | 	mov	arg02, ##@LR__2090
12438     AC 37 B1 FD | 	call	#__system____builtin_strcpy
1243c     20 00 00 FF 
12440     C8 D7 05 F1 | 	add	ptr__dat__, ##16840
12444     EB 04 68 FC | 	wrlong	#2, ptr__dat__
12448     0C D6 05 F1 | 	add	ptr__dat__, #12
1244c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12450     04 D6 05 F1 | 	add	ptr__dat__, #4
12454     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12458     0C D6 85 F1 | 	sub	ptr__dat__, #12
1245c     01 00 80 FF 
12460     EB 40 6A FC | 	wrlong	##800, ptr__dat__
12464     04 D6 05 F1 | 	add	ptr__dat__, #4
12468     EB 00 68 FC | 	wrlong	#0, ptr__dat__
1246c     0C D6 05 F1 | 	add	ptr__dat__, #12
12470     7C 00 80 FF 
12474     EB 00 58 FC | 	wrword	##63488, ptr__dat__
12478     02 D6 05 F1 | 	add	ptr__dat__, #2
1247c     EB 00 58 FC | 	wrword	#0, ptr__dat__
12480     02 D6 05 F1 | 	add	ptr__dat__, #2
12484     63 00 80 FF 
12488     EB 30 58 FC | 	wrword	##50712, ptr__dat__
1248c     1C D7 85 F1 | 	sub	ptr__dat__, #284
12490     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12494     20 00 00 FF 
12498     C4 D6 85 F1 | 	sub	ptr__dat__, ##16580
1249c     51 01 00 FF 
124a0     9B 77 06 F6 | 	mov	arg02, ##@LR__2091
124a4     40 37 B1 FD | 	call	#__system____builtin_strcpy
124a8     20 00 00 FF 
124ac     D8 D6 05 F1 | 	add	ptr__dat__, ##16600
124b0     EB 04 68 FC | 	wrlong	#2, ptr__dat__
124b4     0C D6 05 F1 | 	add	ptr__dat__, #12
124b8     EB C8 68 FC | 	wrlong	#100, ptr__dat__
124bc     04 D6 05 F1 | 	add	ptr__dat__, #4
124c0     EB C8 68 FC | 	wrlong	#100, ptr__dat__
124c4     0C D6 85 F1 | 	sub	ptr__dat__, #12
124c8     EB 00 68 FC | 	wrlong	#0, ptr__dat__
124cc     04 D6 05 F1 | 	add	ptr__dat__, #4
124d0     EB 90 69 FC | 	wrlong	#200, ptr__dat__
124d4     0C D6 05 F1 | 	add	ptr__dat__, #12
124d8     7C 00 80 FF 
124dc     EB 00 58 FC | 	wrword	##63488, ptr__dat__
124e0     02 D6 05 F1 | 	add	ptr__dat__, #2
124e4     EB 00 58 FC | 	wrword	#0, ptr__dat__
124e8     02 D6 05 F1 | 	add	ptr__dat__, #2
124ec     63 00 80 FF 
124f0     EB 30 58 FC | 	wrword	##50712, ptr__dat__
124f4     F4 D6 05 F1 | 	add	ptr__dat__, #244
124f8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
124fc     20 00 00 FF 
12500     E4 D7 85 F1 | 	sub	ptr__dat__, ##16868
12504     51 01 00 FF 
12508     A3 77 06 F6 | 	mov	arg02, ##@LR__2092
1250c     D8 36 B1 FD | 	call	#__system____builtin_strcpy
12510     20 00 00 FF 
12514     F8 D7 05 F1 | 	add	ptr__dat__, ##16888
12518     EB 04 68 FC | 	wrlong	#2, ptr__dat__
1251c     0C D6 05 F1 | 	add	ptr__dat__, #12
12520     EB 32 68 FC | 	wrlong	#25, ptr__dat__
12524     04 D6 05 F1 | 	add	ptr__dat__, #4
12528     EB 32 68 FC | 	wrlong	#25, ptr__dat__
1252c     0C D6 85 F1 | 	sub	ptr__dat__, #12
12530     EB C8 68 FC | 	wrlong	#100, ptr__dat__
12534     04 D6 05 F1 | 	add	ptr__dat__, #4
12538     EB 90 69 FC | 	wrlong	#200, ptr__dat__
1253c     0C D6 05 F1 | 	add	ptr__dat__, #12
12540     7C 00 80 FF 
12544     EB 00 58 FC | 	wrword	##63488, ptr__dat__
12548     02 D6 05 F1 | 	add	ptr__dat__, #2
1254c     EB 00 58 FC | 	wrword	#0, ptr__dat__
12550     02 D6 05 F1 | 	add	ptr__dat__, #2
12554     EB 00 58 FC | 	wrword	#0, ptr__dat__
12558     04 D6 05 F1 | 	add	ptr__dat__, #4
1255c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12560     21 00 00 FF 
12564     14 D6 85 F1 | 	sub	ptr__dat__, ##16916
12568     51 01 00 FF 
1256c     AD 77 06 F6 | 	mov	arg02, ##@LR__2093
12570     74 36 B1 FD | 	call	#__system____builtin_strcpy
12574     21 00 00 FF 
12578     28 D6 05 F1 | 	add	ptr__dat__, ##16936
1257c     EB 04 68 FC | 	wrlong	#2, ptr__dat__
12580     0C D6 05 F1 | 	add	ptr__dat__, #12
12584     EB 32 68 FC | 	wrlong	#25, ptr__dat__
12588     04 D6 05 F1 | 	add	ptr__dat__, #4
1258c     EB 32 68 FC | 	wrlong	#25, ptr__dat__
12590     0C D6 85 F1 | 	sub	ptr__dat__, #12
12594     EB C8 68 FC | 	wrlong	#100, ptr__dat__
12598     04 D6 05 F1 | 	add	ptr__dat__, #4
1259c     EB C2 69 FC | 	wrlong	#225, ptr__dat__
125a0     0C D6 05 F1 | 	add	ptr__dat__, #12
125a4     03 00 80 FF 
125a8     EB C0 5B FC | 	wrword	##2016, ptr__dat__
125ac     02 D6 05 F1 | 	add	ptr__dat__, #2
125b0     EB 00 58 FC | 	wrword	#0, ptr__dat__
125b4     02 D6 05 F1 | 	add	ptr__dat__, #2
125b8     EB 00 58 FC | 	wrword	#0, ptr__dat__
125bc     04 D6 05 F1 | 	add	ptr__dat__, #4
125c0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
125c4     21 00 00 FF 
125c8     44 D6 85 F1 | 	sub	ptr__dat__, ##16964
125cc     51 01 00 FF 
125d0     B4 77 06 F6 | 	mov	arg02, ##@LR__2094
125d4     10 36 B1 FD | 	call	#__system____builtin_strcpy
125d8     21 00 00 FF 
125dc     58 D6 05 F1 | 	add	ptr__dat__, ##16984
125e0     EB 04 68 FC | 	wrlong	#2, ptr__dat__
125e4     0C D6 05 F1 | 	add	ptr__dat__, #12
125e8     EB 32 68 FC | 	wrlong	#25, ptr__dat__
125ec     04 D6 05 F1 | 	add	ptr__dat__, #4
125f0     EB 32 68 FC | 	wrlong	#25, ptr__dat__
125f4     0C D6 85 F1 | 	sub	ptr__dat__, #12
125f8     EB C8 68 FC | 	wrlong	#100, ptr__dat__
125fc     04 D6 05 F1 | 	add	ptr__dat__, #4
12600     EB F4 69 FC | 	wrlong	#250, ptr__dat__
12604     0C D6 05 F1 | 	add	ptr__dat__, #12
12608     7F 00 80 FF 
1260c     EB FE 5B FC | 	wrword	##65535, ptr__dat__
12610     02 D6 05 F1 | 	add	ptr__dat__, #2
12614     EB 00 58 FC | 	wrword	#0, ptr__dat__
12618     02 D6 05 F1 | 	add	ptr__dat__, #2
1261c     EB 00 58 FC | 	wrword	#0, ptr__dat__
12620     04 D6 05 F1 | 	add	ptr__dat__, #4
12624     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12628     21 00 00 FF 
1262c     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
12630     51 01 00 FF 
12634     BC 77 06 F6 | 	mov	arg02, ##@LR__2095
12638     AC 35 B1 FD | 	call	#__system____builtin_strcpy
1263c     21 00 00 FF 
12640     88 D6 05 F1 | 	add	ptr__dat__, ##17032
12644     EB 04 68 FC | 	wrlong	#2, ptr__dat__
12648     0C D6 05 F1 | 	add	ptr__dat__, #12
1264c     EB 32 68 FC | 	wrlong	#25, ptr__dat__
12650     04 D6 05 F1 | 	add	ptr__dat__, #4
12654     EB 32 68 FC | 	wrlong	#25, ptr__dat__
12658     0C D6 85 F1 | 	sub	ptr__dat__, #12
1265c     EB C8 68 FC | 	wrlong	#100, ptr__dat__
12660     04 D6 05 F1 | 	add	ptr__dat__, #4
12664     EB 26 6A FC | 	wrlong	#275, ptr__dat__
12668     0C D6 05 F1 | 	add	ptr__dat__, #12
1266c     7F 00 80 FF 
12670     EB FE 5B FC | 	wrword	##65535, ptr__dat__
12674     02 D6 05 F1 | 	add	ptr__dat__, #2
12678     EB 00 58 FC | 	wrword	#0, ptr__dat__
1267c     02 D6 05 F1 | 	add	ptr__dat__, #2
12680     EB 00 58 FC | 	wrword	#0, ptr__dat__
12684     04 D6 05 F1 | 	add	ptr__dat__, #4
12688     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1268c     21 00 00 FF 
12690     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
12694     51 01 00 FF 
12698     C8 77 06 F6 | 	mov	arg02, ##@LR__2096
1269c     48 35 B1 FD | 	call	#__system____builtin_strcpy
126a0     21 00 00 FF 
126a4     B8 D6 05 F1 | 	add	ptr__dat__, ##17080
126a8     EB 04 68 FC | 	wrlong	#2, ptr__dat__
126ac     0C D6 05 F1 | 	add	ptr__dat__, #12
126b0     EB AE 68 FC | 	wrlong	#87, ptr__dat__
126b4     04 D6 05 F1 | 	add	ptr__dat__, #4
126b8     EB C8 68 FC | 	wrlong	#100, ptr__dat__
126bc     0C D6 85 F1 | 	sub	ptr__dat__, #12
126c0     EB 2C 69 FC | 	wrlong	#150, ptr__dat__
126c4     04 D6 05 F1 | 	add	ptr__dat__, #4
126c8     EB 90 69 FC | 	wrlong	#200, ptr__dat__
126cc     0C D6 05 F1 | 	add	ptr__dat__, #12
126d0     7F 00 80 FF 
126d4     EB FE 5B FC | 	wrword	##65535, ptr__dat__
126d8     02 D6 05 F1 | 	add	ptr__dat__, #2
126dc     EB 00 58 FC | 	wrword	#0, ptr__dat__
126e0     02 D6 05 F1 | 	add	ptr__dat__, #2
126e4     EB 00 58 FC | 	wrword	#0, ptr__dat__
126e8     04 D6 05 F1 | 	add	ptr__dat__, #4
126ec     EB 74 02 F6 | 	mov	arg01, ptr__dat__
126f0     21 00 00 FF 
126f4     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
126f8     51 01 00 FF 
126fc     D1 77 06 F6 | 	mov	arg02, ##@LR__2097
12700     E4 34 B1 FD | 	call	#__system____builtin_strcpy
12704     21 00 00 FF 
12708     E8 D6 05 F1 | 	add	ptr__dat__, ##17128
1270c     EB 04 68 FC | 	wrlong	#2, ptr__dat__
12710     0C D6 05 F1 | 	add	ptr__dat__, #12
12714     EB C8 68 FC | 	wrlong	#100, ptr__dat__
12718     04 D6 05 F1 | 	add	ptr__dat__, #4
1271c     EB A0 68 FC | 	wrlong	#80, ptr__dat__
12720     0C D6 85 F1 | 	sub	ptr__dat__, #12
12724     EB F4 69 FC | 	wrlong	#250, ptr__dat__
12728     04 D6 05 F1 | 	add	ptr__dat__, #4
1272c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
12730     0C D6 05 F1 | 	add	ptr__dat__, #12
12734     7F 00 80 FF 
12738     EB FE 5B FC | 	wrword	##65535, ptr__dat__
1273c     02 D6 05 F1 | 	add	ptr__dat__, #2
12740     EB 00 58 FC | 	wrword	#0, ptr__dat__
12744     02 D6 05 F1 | 	add	ptr__dat__, #2
12748     EB 00 58 FC | 	wrword	#0, ptr__dat__
1274c     01 00 00 FF 
12750     80 D7 85 F1 | 	sub	ptr__dat__, ##896
12754     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12758     1F 00 00 FF 
1275c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12760     51 01 00 FF 
12764     DC 77 06 F6 | 	mov	arg02, ##@LR__2098
12768     01 78 06 F6 | 	mov	arg03, #1
1276c     24 87 BF FD | 	call	#_loading_overlay_display
12770     1F 00 00 FF 
12774     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12778     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1277c     44 D7 05 F1 | 	add	ptr__dat__, #324
12780     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12784     20 00 00 FF 
12788     C4 D6 85 F1 | 	sub	ptr__dat__, ##16580
1278c     68 09 BF FD | 	call	#_display_load_image
12790     1F 00 00 FF 
12794     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12798     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1279c     1F 00 00 FF 
127a0     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
127a4     51 01 00 FF 
127a8     EF 77 06 F6 | 	mov	arg02, ##@LR__2099
127ac     01 78 06 F6 | 	mov	arg03, #1
127b0     E0 86 BF FD | 	call	#_loading_overlay_display
127b4     1F 00 00 FF 
127b8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
127bc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
127c0     74 D7 05 F1 | 	add	ptr__dat__, #372
127c4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
127c8     20 00 00 FF 
127cc     F4 D6 85 F1 | 	sub	ptr__dat__, ##16628
127d0     24 09 BF FD | 	call	#_display_load_image
127d4     1F 00 00 FF 
127d8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
127dc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
127e0     1F 00 00 FF 
127e4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
127e8     52 01 00 FF 
127ec     0A 76 06 F6 | 	mov	arg02, ##@LR__2100
127f0     01 78 06 F6 | 	mov	arg03, #1
127f4     9C 86 BF FD | 	call	#_loading_overlay_display
127f8     1F 00 00 FF 
127fc     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12800     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12804     D4 D7 05 F1 | 	add	ptr__dat__, #468
12808     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1280c     20 00 00 FF 
12810     54 D7 85 F1 | 	sub	ptr__dat__, ##16724
12814     E0 08 BF FD | 	call	#_display_load_image
12818     1F 00 00 FF 
1281c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12820     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12824     1F 00 00 FF 
12828     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1282c     52 01 00 FF 
12830     28 76 06 F6 | 	mov	arg02, ##@LR__2101
12834     01 78 06 F6 | 	mov	arg03, #1
12838     58 86 BF FD | 	call	#_loading_overlay_display
1283c     1F 00 00 FF 
12840     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12844     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12848     A4 D7 05 F1 | 	add	ptr__dat__, #420
1284c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12850     20 00 00 FF 
12854     24 D7 85 F1 | 	sub	ptr__dat__, ##16676
12858     9C 08 BF FD | 	call	#_display_load_image
1285c     1F 00 00 FF 
12860     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12864     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12868     1F 00 00 FF 
1286c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12870     52 01 00 FF 
12874     43 76 06 F6 | 	mov	arg02, ##@LR__2102
12878     01 78 06 F6 | 	mov	arg03, #1
1287c     14 86 BF FD | 	call	#_loading_overlay_display
12880     1F 00 00 FF 
12884     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12888     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1288c     01 00 00 FF 
12890     04 D6 05 F1 | 	add	ptr__dat__, ##516
12894     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12898     20 00 00 FF 
1289c     84 D7 85 F1 | 	sub	ptr__dat__, ##16772
128a0     54 08 BF FD | 	call	#_display_load_image
128a4     1F 00 00 FF 
128a8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
128ac     EB 74 02 F6 | 	mov	arg01, ptr__dat__
128b0     1F 00 00 FF 
128b4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
128b8     52 01 00 FF 
128bc     61 76 06 F6 | 	mov	arg02, ##@LR__2103
128c0     01 78 06 F6 | 	mov	arg03, #1
128c4     CC 85 BF FD | 	call	#_loading_overlay_display
128c8     1F 00 00 FF 
128cc     80 D7 05 F1 | 	add	ptr__dat__, ##16256
128d0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
128d4     01 00 00 FF 
128d8     34 D6 05 F1 | 	add	ptr__dat__, ##564
128dc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
128e0     20 00 00 FF 
128e4     B4 D7 85 F1 | 	sub	ptr__dat__, ##16820
128e8     0C 08 BF FD | 	call	#_display_load_image
128ec     1F 00 00 FF 
128f0     80 D7 05 F1 | 	add	ptr__dat__, ##16256
128f4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
128f8     1F 00 00 FF 
128fc     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12900     52 01 00 FF 
12904     7B 76 06 F6 | 	mov	arg02, ##@LR__2104
12908     01 78 06 F6 | 	mov	arg03, #1
1290c     84 85 BF FD | 	call	#_loading_overlay_display
12910     1F 00 00 FF 
12914     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12918     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1291c     01 00 00 FF 
12920     64 D6 05 F1 | 	add	ptr__dat__, ##612
12924     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12928     20 00 00 FF 
1292c     E4 D7 85 F1 | 	sub	ptr__dat__, ##16868
12930     C4 07 BF FD | 	call	#_display_load_image
12934     1F 00 00 FF 
12938     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1293c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12940     1F 00 00 FF 
12944     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12948     52 01 00 FF 
1294c     97 76 06 F6 | 	mov	arg02, ##@LR__2105
12950     01 78 06 F6 | 	mov	arg03, #1
12954     3C 85 BF FD | 	call	#_loading_overlay_display
12958     1F 00 00 FF 
1295c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12960     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12964     01 00 00 FF 
12968     94 D6 05 F1 | 	add	ptr__dat__, ##660
1296c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12970     21 00 00 FF 
12974     14 D6 85 F1 | 	sub	ptr__dat__, ##16916
12978     7C 07 BF FD | 	call	#_display_load_image
1297c     1F 00 00 FF 
12980     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12984     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12988     1F 00 00 FF 
1298c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12990     52 01 00 FF 
12994     B2 76 06 F6 | 	mov	arg02, ##@LR__2106
12998     01 78 06 F6 | 	mov	arg03, #1
1299c     F4 84 BF FD | 	call	#_loading_overlay_display
129a0     1F 00 00 FF 
129a4     80 D7 05 F1 | 	add	ptr__dat__, ##16256
129a8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
129ac     01 00 00 FF 
129b0     C4 D6 05 F1 | 	add	ptr__dat__, ##708
129b4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
129b8     21 00 00 FF 
129bc     44 D6 85 F1 | 	sub	ptr__dat__, ##16964
129c0     34 07 BF FD | 	call	#_display_load_image
129c4     1F 00 00 FF 
129c8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
129cc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
129d0     1F 00 00 FF 
129d4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
129d8     52 01 00 FF 
129dc     CC 76 06 F6 | 	mov	arg02, ##@LR__2107
129e0     01 78 06 F6 | 	mov	arg03, #1
129e4     AC 84 BF FD | 	call	#_loading_overlay_display
129e8     1F 00 00 FF 
129ec     80 D7 05 F1 | 	add	ptr__dat__, ##16256
129f0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
129f4     01 00 00 FF 
129f8     F4 D6 05 F1 | 	add	ptr__dat__, ##756
129fc     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12a00     21 00 00 FF 
12a04     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
12a08     EC 06 BF FD | 	call	#_display_load_image
12a0c     1F 00 00 FF 
12a10     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12a14     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12a18     1F 00 00 FF 
12a1c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12a20     52 01 00 FF 
12a24     EA 76 06 F6 | 	mov	arg02, ##@LR__2108
12a28     01 78 06 F6 | 	mov	arg03, #1
12a2c     64 84 BF FD | 	call	#_loading_overlay_display
12a30     1F 00 00 FF 
12a34     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12a38     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12a3c     01 00 00 FF 
12a40     24 D7 05 F1 | 	add	ptr__dat__, ##804
12a44     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12a48     21 00 00 FF 
12a4c     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
12a50     A4 06 BF FD | 	call	#_display_load_image
12a54     1F 00 00 FF 
12a58     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12a5c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12a60     1F 00 00 FF 
12a64     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12a68     52 01 00 FF 
12a6c     05 77 06 F6 | 	mov	arg02, ##@LR__2109
12a70     01 78 06 F6 | 	mov	arg03, #1
12a74     1C 84 BF FD | 	call	#_loading_overlay_display
12a78     1F 00 00 FF 
12a7c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12a80     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12a84     01 00 00 FF 
12a88     54 D7 05 F1 | 	add	ptr__dat__, ##852
12a8c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12a90     21 00 00 FF 
12a94     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
12a98     5C 06 BF FD | 	call	#_display_load_image
12a9c                 | _load_images_0339_ret
12a9c     2D 00 64 FD | 	ret
12aa0                 | 
12aa0                 | _write_machine_profile_0340
12aa0     01 4C 05 F6 | 	mov	COUNT_, #1
12aa4     A9 00 A0 FD | 	call	#pushregs_
12aa8     3A 8D 02 F6 | 	mov	local01, arg01
12aac     52 01 00 FF 
12ab0     22 75 06 F6 | 	mov	arg01, ##@LR__2110
12ab4     00 76 06 F6 | 	mov	arg02, #0
12ab8     AC F1 BE FD | 	call	#_mkdir
12abc     00 74 06 F6 | 	mov	arg01, #0
12ac0     0C 6A B1 FD | 	call	#__system___getiolock_1306
12ac4     1A 75 02 F6 | 	mov	arg01, result1
12ac8     A4 31 B1 FD | 	call	#__system___lockmem
12acc     52 01 00 FF 
12ad0     2F 77 06 F6 | 	mov	arg02, ##@LR__2111
12ad4     00 74 06 F6 | 	mov	arg01, #0
12ad8     00 78 06 F6 | 	mov	arg03, #0
12adc     38 37 B1 FD | 	call	#__system___basic_print_string
12ae0     00 74 06 F6 | 	mov	arg01, #0
12ae4     0A 76 06 F6 | 	mov	arg02, #10
12ae8     00 78 06 F6 | 	mov	arg03, #0
12aec     DC 36 B1 FD | 	call	#__system___basic_print_char
12af0     00 74 06 F6 | 	mov	arg01, #0
12af4     D8 69 B1 FD | 	call	#__system___getiolock_1306
12af8     1A 01 68 FC | 	wrlong	#0, result1
12afc     52 01 00 FF 
12b00     58 77 06 F6 | 	mov	arg02, ##@LR__2112
12b04     46 75 02 F6 | 	mov	arg01, local01
12b08     A0 3A BF FD | 	call	#_machine_profile_to_json
12b0c     A8 F0 03 F6 | 	mov	ptra, fp
12b10     B3 00 A0 FD | 	call	#popregs_
12b14                 | _write_machine_profile_0340_ret
12b14     2D 00 64 FD | 	ret
12b18                 | 
12b18                 | _load_machine_profile_0341
12b18     52 01 00 FF 
12b1c     71 75 06 F6 | 	mov	arg01, ##@LR__2113
12b20     00 76 06 F6 | 	mov	arg02, #0
12b24     04 EE BE FD | 	call	#_access
12b28     00 34 0E F2 | 	cmp	result1, #0 wz
12b2c     7C 00 90 5D |  if_ne	jmp	#LR__0488
12b30     00 74 06 F6 | 	mov	arg01, #0
12b34     98 69 B1 FD | 	call	#__system___getiolock_1306
12b38     1A 75 02 F6 | 	mov	arg01, result1
12b3c     30 31 B1 FD | 	call	#__system___lockmem
12b40     52 01 00 FF 
12b44     8A 77 06 F6 | 	mov	arg02, ##@LR__2114
12b48     00 74 06 F6 | 	mov	arg01, #0
12b4c     00 78 06 F6 | 	mov	arg03, #0
12b50     C4 36 B1 FD | 	call	#__system___basic_print_string
12b54     00 74 06 F6 | 	mov	arg01, #0
12b58     0A 76 06 F6 | 	mov	arg02, #10
12b5c     00 78 06 F6 | 	mov	arg03, #0
12b60     68 36 B1 FD | 	call	#__system___basic_print_char
12b64     00 74 06 F6 | 	mov	arg01, #0
12b68     64 69 B1 FD | 	call	#__system___getiolock_1306
12b6c     1A 01 68 FC | 	wrlong	#0, result1
12b70     1F 00 00 FF 
12b74     CC D7 05 F1 | 	add	ptr__dat__, ##16332
12b78     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12b7c     1F 00 00 FF 
12b80     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12b84     52 01 00 FF 
12b88     A3 77 06 F6 | 	mov	arg02, ##@LR__2115
12b8c     88 43 BF FD | 	call	#_json_to_machine_profile
12b90     1F 00 00 FF 
12b94     CC D7 05 F1 | 	add	ptr__dat__, ##16332
12b98     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12b9c     1F 00 00 FF 
12ba0     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12ba4     A4 59 BF FD | 	call	#_json_print_machine_profile
12ba8                 | '     json_to_machine_profile(&machineProfile, "/sd/settings/Default.mcp");
12ba8                 | '     json_print_machine_profile(&machineProfile);
12ba8                 | '     return;
12ba8     A8 01 90 FD | 	jmp	#LR__0489
12bac                 | LR__0488
12bac     00 74 06 F6 | 	mov	arg01, #0
12bb0     1C 69 B1 FD | 	call	#__system___getiolock_1306
12bb4     1A 75 02 F6 | 	mov	arg01, result1
12bb8     B4 30 B1 FD | 	call	#__system___lockmem
12bbc     52 01 00 FF 
12bc0     BC 77 06 F6 | 	mov	arg02, ##@LR__2116
12bc4     00 74 06 F6 | 	mov	arg01, #0
12bc8     00 78 06 F6 | 	mov	arg03, #0
12bcc     48 36 B1 FD | 	call	#__system___basic_print_string
12bd0     00 74 06 F6 | 	mov	arg01, #0
12bd4     0A 76 06 F6 | 	mov	arg02, #10
12bd8     00 78 06 F6 | 	mov	arg03, #0
12bdc     EC 35 B1 FD | 	call	#__system___basic_print_char
12be0     00 74 06 F6 | 	mov	arg01, #0
12be4     E8 68 B1 FD | 	call	#__system___getiolock_1306
12be8     1A 01 68 FC | 	wrlong	#0, result1
12bec     1F 00 00 FF 
12bf0     CC D7 05 F1 | 	add	ptr__dat__, ##16332
12bf4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12bf8     1F 00 00 FF 
12bfc     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12c00     52 01 00 FF 
12c04     E7 77 06 F6 | 	mov	arg02, ##@LR__2117
12c08     DC 2F B1 FD | 	call	#__system____builtin_strcpy
12c0c     1F 00 00 FF 
12c10     E0 D7 05 F1 | 	add	ptr__dat__, ##16352
12c14     EB 02 68 FC | 	wrlong	#1, ptr__dat__
12c18     04 D6 05 F1 | 	add	ptr__dat__, #4
12c1c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12c20     1F 00 00 FF 
12c24     E4 D7 85 F1 | 	sub	ptr__dat__, ##16356
12c28     52 01 00 FF 
12c2c     F6 77 06 F6 | 	mov	arg02, ##@LR__2118
12c30     B4 2F B1 FD | 	call	#__system____builtin_strcpy
12c34     1F 00 00 FF 
12c38     F8 D7 05 F1 | 	add	ptr__dat__, ##16376
12c3c     3D 3A A0 FF 
12c40     EB C2 69 FC | 	wrlong	##1081375457, ptr__dat__
12c44     04 D6 05 F1 | 	add	ptr__dat__, #4
12c48     20 CE A2 FF 
12c4c     EB 00 68 FC | 	wrlong	##1167867904, ptr__dat__
12c50     04 D6 05 F1 | 	add	ptr__dat__, #4
12c54     00 10 A1 FF 
12c58     EB 00 68 FC | 	wrlong	##1109393408, ptr__dat__
12c5c     04 D6 05 F1 | 	add	ptr__dat__, #4
12c60     00 00 A0 FF 
12c64     EB 00 68 FC | 	wrlong	##1073741824, ptr__dat__
12c68     04 D6 05 F1 | 	add	ptr__dat__, #4
12c6c     4C 4F 9D FF 
12c70     EB BA 69 FC | 	wrlong	##983472349, ptr__dat__
12c74     04 D6 05 F1 | 	add	ptr__dat__, #4
12c78     6C 87 9F FF 
12c7c     EB 2E 6A FC | 	wrlong	##1057937687, ptr__dat__
12c80     04 D6 05 F1 | 	add	ptr__dat__, #4
12c84     99 0B A1 FF 
12c88     EB 66 6A FC | 	wrlong	##1108816691, ptr__dat__
12c8c     04 D6 05 F1 | 	add	ptr__dat__, #4
12c90     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12c94     20 00 00 FF 
12c98     14 D6 85 F1 | 	sub	ptr__dat__, ##16404
12c9c     52 01 00 FF 
12ca0     FE 77 06 F6 | 	mov	arg02, ##@LR__2119
12ca4     40 2F B1 FD | 	call	#__system____builtin_strcpy
12ca8     20 00 00 FF 
12cac     28 D6 05 F1 | 	add	ptr__dat__, ##16424
12cb0     00 00 A3 FF 
12cb4     EB 00 68 FC | 	wrlong	##1174405120, ptr__dat__
12cb8     04 D6 05 F1 | 	add	ptr__dat__, #4
12cbc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12cc0     20 00 00 FF 
12cc4     2C D6 85 F1 | 	sub	ptr__dat__, ##16428
12cc8     53 01 00 FF 
12ccc     0A 76 06 F6 | 	mov	arg02, ##@LR__2120
12cd0     14 2F B1 FD | 	call	#__system____builtin_strcpy
12cd4     20 00 00 FF 
12cd8     40 D6 05 F1 | 	add	ptr__dat__, ##16448
12cdc     00 C0 9F FF 
12ce0     EB 00 68 FC | 	wrlong	##1065353216, ptr__dat__
12ce4     04 D6 05 F1 | 	add	ptr__dat__, #4
12ce8     EB 00 68 FC | 	wrlong	#0, ptr__dat__
12cec     04 D6 05 F1 | 	add	ptr__dat__, #4
12cf0     EB 11 9E FF 
12cf4     EB 14 6A FC | 	wrlong	##1008981770, ptr__dat__
12cf8     04 D6 05 F1 | 	add	ptr__dat__, #4
12cfc     00 25 A1 FF 
12d00     EB 00 68 FC | 	wrlong	##1112145920, ptr__dat__
12d04     04 D6 05 F1 | 	add	ptr__dat__, #4
12d08     40 A4 A1 FF 
12d0c     EB 00 68 FC | 	wrlong	##1128824832, ptr__dat__
12d10     04 D6 05 F1 | 	add	ptr__dat__, #4
12d14     80 64 A1 FF 
12d18     EB 00 68 FC | 	wrlong	##1120468992, ptr__dat__
12d1c     04 D6 05 F1 | 	add	ptr__dat__, #4
12d20     00 30 A0 FF 
12d24     EB 00 68 FC | 	wrlong	##1080033280, ptr__dat__
12d28     04 D6 05 F1 | 	add	ptr__dat__, #4
12d2c     33 23 A0 FF 
12d30     EB CC 68 FC | 	wrlong	##1078355558, ptr__dat__
12d34     04 D6 05 F1 | 	add	ptr__dat__, #4
12d38     00 80 9F FF 
12d3c     EB 00 68 FC | 	wrlong	##1056964608, ptr__dat__
12d40     94 D6 85 F1 | 	sub	ptr__dat__, #148
12d44     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12d48     1F 00 00 FF 
12d4c     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12d50     4C FD BF FD | 	call	#_write_machine_profile_0340
12d54                 | LR__0489
12d54                 | _load_machine_profile_0341_ret
12d54     2D 00 64 FD | 	ret
12d58                 | 
12d58                 | _static_test_profile_0343
12d58     01 4C 05 F6 | 	mov	COUNT_, #1
12d5c     A9 00 A0 FD | 	call	#pushregs_
12d60     53 01 00 FF 
12d64     11 74 06 F6 | 	mov	arg01, ##@LR__2121
12d68     00 76 06 F6 | 	mov	arg02, #0
12d6c     F8 EE BE FD | 	call	#_mkdir
12d70     1F 00 00 FF 
12d74     48 75 06 F6 | 	mov	arg01, ##16200
12d78                 | '     return _gc_alloc(size);
12d78     10 76 06 F6 | 	mov	arg02, #16
12d7c     CC 5A B1 FD | 	call	#__system___gc_doalloc
12d80     1A 8D 02 F6 | 	mov	local01, result1
12d84     53 01 00 FF 
12d88     1E 76 06 F6 | 	mov	arg02, ##@LR__2122
12d8c     46 75 02 F6 | 	mov	arg01, local01
12d90     54 2E B1 FD | 	call	#__system____builtin_strcpy
12d94     34 8C 06 F1 | 	add	local01, #52
12d98     46 03 68 FC | 	wrlong	#1, local01
12d9c     04 8C 06 F1 | 	add	local01, #4
12da0     46 05 68 FC | 	wrlong	#2, local01
12da4     04 8C 06 F1 | 	add	local01, #4
12da8     46 75 02 F6 | 	mov	arg01, local01
12dac     53 01 00 FF 
12db0     34 76 06 F6 | 	mov	arg02, ##@LR__2123
12db4     30 2E B1 FD | 	call	#__system____builtin_strcpy
12db8     34 8C 06 F1 | 	add	local01, #52
12dbc     46 03 68 FC | 	wrlong	#1, local01
12dc0     10 8C 06 F1 | 	add	local01, #16
12dc4     46 05 68 FC | 	wrlong	#2, local01
12dc8     04 8C 06 F1 | 	add	local01, #4
12dcc     46 05 68 FC | 	wrlong	#2, local01
12dd0     04 8C 06 F1 | 	add	local01, #4
12dd4     46 75 02 F6 | 	mov	arg01, local01
12dd8     53 01 00 FF 
12ddc     4B 76 06 F6 | 	mov	arg02, ##@LR__2124
12de0     04 2E B1 FD | 	call	#__system____builtin_strcpy
12de4     34 8C 06 F1 | 	add	local01, #52
12de8     46 03 68 FC | 	wrlong	#1, local01
12dec     04 8C 06 F1 | 	add	local01, #4
12df0     00 90 A0 FF 
12df4     46 01 68 FC | 	wrlong	##1092616192, local01
12df8     04 8C 06 F1 | 	add	local01, #4
12dfc     00 D0 A0 FF 
12e00     46 01 68 FC | 	wrlong	##1101004800, local01
12e04     04 8C 06 F1 | 	add	local01, #4
12e08     66 E6 9E FF 
12e0c     46 9B 69 FC | 	wrlong	##1036831949, local01
12e10     20 8C 06 F1 | 	add	local01, #32
12e14     00 50 A0 FF 
12e18     46 01 68 FC | 	wrlong	##1084227584, local01
12e1c     04 8C 06 F1 | 	add	local01, #4
12e20     46 75 02 F6 | 	mov	arg01, local01
12e24     53 01 00 FF 
12e28     61 76 06 F6 | 	mov	arg02, ##@LR__2125
12e2c     B8 2D B1 FD | 	call	#__system____builtin_strcpy
12e30     34 8C 06 F1 | 	add	local01, #52
12e34     46 03 68 FC | 	wrlong	#1, local01
12e38     04 8C 06 F1 | 	add	local01, #4
12e3c     00 90 E0 FF 
12e40     46 01 68 FC | 	wrlong	##-1054867456, local01
12e44     04 8C 06 F1 | 	add	local01, #4
12e48     00 00 A0 FF 
12e4c     46 01 68 FC | 	wrlong	##1073741824, local01
12e50     04 8C 06 F1 | 	add	local01, #4
12e54     66 E6 9E FF 
12e58     46 9B 69 FC | 	wrlong	##1036831949, local01
12e5c     20 8C 06 F1 | 	add	local01, #32
12e60     00 50 A0 FF 
12e64     46 01 68 FC | 	wrlong	##1084227584, local01
12e68     01 00 00 FF 
12e6c     24 8D 06 F1 | 	add	local01, ##804
12e70     46 75 02 F6 | 	mov	arg01, local01
12e74     53 01 00 FF 
12e78     77 76 06 F6 | 	mov	arg02, ##@LR__2126
12e7c     68 2D B1 FD | 	call	#__system____builtin_strcpy
12e80     34 8C 06 F1 | 	add	local01, #52
12e84     46 05 68 FC | 	wrlong	#2, local01
12e88     10 8C 06 F1 | 	add	local01, #16
12e8c     46 03 68 FC | 	wrlong	#1, local01
12e90     04 8C 06 F1 | 	add	local01, #4
12e94     46 05 68 FC | 	wrlong	#2, local01
12e98     04 8C 06 F1 | 	add	local01, #4
12e9c     46 75 02 F6 | 	mov	arg01, local01
12ea0     53 01 00 FF 
12ea4     8E 76 06 F6 | 	mov	arg02, ##@LR__2127
12ea8     3C 2D B1 FD | 	call	#__system____builtin_strcpy
12eac     34 8C 06 F1 | 	add	local01, #52
12eb0     46 03 68 FC | 	wrlong	#1, local01
12eb4     04 8C 06 F1 | 	add	local01, #4
12eb8     00 90 A0 FF 
12ebc     46 01 68 FC | 	wrlong	##1092616192, local01
12ec0     04 8C 06 F1 | 	add	local01, #4
12ec4     00 10 A1 FF 
12ec8     46 01 68 FC | 	wrlong	##1109393408, local01
12ecc     04 8C 06 F1 | 	add	local01, #4
12ed0     66 E6 9E FF 
12ed4     46 9B 69 FC | 	wrlong	##1036831949, local01
12ed8     20 8C 06 F1 | 	add	local01, #32
12edc     00 50 A0 FF 
12ee0     46 01 68 FC | 	wrlong	##1084227584, local01
12ee4     04 8C 06 F1 | 	add	local01, #4
12ee8     46 75 02 F6 | 	mov	arg01, local01
12eec     53 01 00 FF 
12ef0     A4 76 06 F6 | 	mov	arg02, ##@LR__2128
12ef4     F0 2C B1 FD | 	call	#__system____builtin_strcpy
12ef8     34 8C 06 F1 | 	add	local01, #52
12efc     46 03 68 FC | 	wrlong	#1, local01
12f00     04 8C 06 F1 | 	add	local01, #4
12f04     00 90 E0 FF 
12f08     46 01 68 FC | 	wrlong	##-1054867456, local01
12f0c     04 8C 06 F1 | 	add	local01, #4
12f10     00 90 A0 FF 
12f14     46 01 68 FC | 	wrlong	##1092616192, local01
12f18     04 8C 06 F1 | 	add	local01, #4
12f1c     66 E6 9E FF 
12f20     46 9B 69 FC | 	wrlong	##1036831949, local01
12f24     20 8C 06 F1 | 	add	local01, #32
12f28     00 50 A0 FF 
12f2c     46 01 68 FC | 	wrlong	##1084227584, local01
12f30     02 00 00 FF 
12f34     80 8D 86 F1 | 	sub	local01, ##1408
12f38     46 75 02 F6 | 	mov	arg01, local01
12f3c     46 77 02 F6 | 	mov	arg02, local01
12f40     74 39 BF FD | 	call	#_motion_profile_to_json
12f44     3C 8C 06 F1 | 	add	local01, #60
12f48     46 75 02 F6 | 	mov	arg01, local01
12f4c     46 77 02 F6 | 	mov	arg02, local01
12f50     4C 3B BF FD | 	call	#_motion_set_to_json
12f54     02 00 00 FF 
12f58     34 8C 06 F1 | 	add	local01, ##1076
12f5c     46 75 02 F6 | 	mov	arg01, local01
12f60     46 77 02 F6 | 	mov	arg02, local01
12f64     38 3B BF FD | 	call	#_motion_set_to_json
12f68     01 00 00 FF 
12f6c     E8 8D 86 F1 | 	sub	local01, ##1000
12f70     46 75 02 F6 | 	mov	arg01, local01
12f74     46 77 02 F6 | 	mov	arg02, local01
12f78     FC 3C BF FD | 	call	#_motion_quartet_to_json
12f7c     64 8C 06 F1 | 	add	local01, #100
12f80     46 75 02 F6 | 	mov	arg01, local01
12f84     46 77 02 F6 | 	mov	arg02, local01
12f88     EC 3C BF FD | 	call	#_motion_quartet_to_json
12f8c     01 00 00 FF 
12f90     D0 8D 06 F1 | 	add	local01, ##976
12f94     46 75 02 F6 | 	mov	arg01, local01
12f98     46 77 02 F6 | 	mov	arg02, local01
12f9c     D8 3C BF FD | 	call	#_motion_quartet_to_json
12fa0     64 8C 06 F1 | 	add	local01, #100
12fa4     46 75 02 F6 | 	mov	arg01, local01
12fa8     46 77 02 F6 | 	mov	arg02, local01
12fac     02 00 00 FF 
12fb0     20 8D 86 F1 | 	sub	local01, ##1312
12fb4     C0 3C BF FD | 	call	#_motion_quartet_to_json
12fb8     46 75 02 F6 | 	mov	arg01, local01
12fbc     64 56 BF FD | 	call	#_json_print_motion_profile
12fc0                 | '   __builtin_strcpy(profile->name, "/sd/profiles/Test1.mp") ;
12fc0                 | ' 
12fc0                 | '   profile->number = 1;
12fc0                 | '   profile->setCount = 2;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[0].name, "/sd/profiles/Set_1.set") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].number = 1;
12fc0                 | '   profile->sets[0].executions = 2;
12fc0                 | '   profile->sets[0].quartetCount = 2;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[0].quartets[0].name, "/sd/profiles/qrt1.qrt") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[0].parameters[0] = 10;
12fc0                 | '   profile->sets[0].quartets[0].parameters[1] = 20;
12fc0                 | '   profile->sets[0].quartets[0].parameters[2] = 0.1;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[0].dwell = 5;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[0].quartets[1].name, "/sd/profiles/qrt2.qrt") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[1].parameters[0] = -10;
12fc0                 | '   profile->sets[0].quartets[1].parameters[1] = 2;
12fc0                 | '   profile->sets[0].quartets[1].parameters[2] = 0.1;
12fc0                 | ' 
12fc0                 | '   profile->sets[0].quartets[1].dwell = 5;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[1].name, "/sd/profiles/Set_2.set") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].number = 2;
12fc0                 | '   profile->sets[1].executions = 1;
12fc0                 | '   profile->sets[1].quartetCount = 2;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[1].quartets[0].name, "/sd/profiles/qrt3.qrt") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[0].parameters[0] = 10;
12fc0                 | '   profile->sets[1].quartets[0].parameters[1] = 40;
12fc0                 | '   profile->sets[1].quartets[0].parameters[2] = 0.1;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[0].dwell = 5;
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   __builtin_strcpy(profile->sets[1].quartets[1].name, "/sd/profiles/qrt4.qrt") ;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[1].parameters[0] = -10;
12fc0                 | '   profile->sets[1].quartets[1].parameters[1] = 10;
12fc0                 | '   profile->sets[1].quartets[1].parameters[2] = 0.1;
12fc0                 | ' 
12fc0                 | '   profile->sets[1].quartets[1].dwell = 5;
12fc0                 | ' 
12fc0                 | '   motion_profile_to_json(profile, profile->name);
12fc0                 | '   motion_set_to_json(&(profile->sets[0]), profile->sets[0].name);
12fc0                 | '   motion_set_to_json(&(profile->sets[1]), profile->sets[1].name);
12fc0                 | '   motion_quartet_to_json(&(profile->sets[0].quartets[0]), profile->sets[0].quartets[0].name);
12fc0                 | '   motion_quartet_to_json(&(profile->sets[0].quartets[1]), profile->sets[0].quartets[1].name);
12fc0                 | '   motion_quartet_to_json(&(profile->sets[1].quartets[0]), profile->sets[1].quartets[0].name);
12fc0                 | '   motion_quartet_to_json(&(profile->sets[1].quartets[1]), profile->sets[1].quartets[1].name);
12fc0                 | '   json_print_motion_profile(profile);
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | ' 
12fc0                 | '   return  (0) ;
12fc0     00 34 06 F6 | 	mov	result1, #0
12fc4     A8 F0 03 F6 | 	mov	ptra, fp
12fc8     B3 00 A0 FD | 	call	#popregs_
12fcc                 | _static_test_profile_0343_ret
12fcc     2D 00 64 FD | 	ret
12fd0                 | 
12fd0                 | _start_display_0345
12fd0     01 4C 05 F6 | 	mov	COUNT_, #1
12fd4     A9 00 A0 FD | 	call	#pushregs_
12fd8     1F 00 00 FF 
12fdc     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12fe0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12fe4     1F 00 00 FF 
12fe8     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12fec     36 76 06 F6 | 	mov	arg02, #54
12ff0     37 78 06 F6 | 	mov	arg03, #55
12ff4     34 7A 06 F6 | 	mov	arg04, #52
12ff8     35 7C 06 F6 | 	mov	arg05, #53
12ffc     33 7E 06 F6 | 	mov	arg06, #51
13000     38 80 06 F6 | 	mov	arg07, #56
13004     39 82 06 F6 | 	mov	arg08, #57
13008     94 FE BE FD | 	call	#_display_begin
1300c     1A 8D 0A F6 | 	mov	local01, result1 wz
13010     5C 00 90 AD |  if_e	jmp	#LR__0490
13014     00 74 06 F6 | 	mov	arg01, #0
13018     B4 64 B1 FD | 	call	#__system___getiolock_1306
1301c     1A 75 02 F6 | 	mov	arg01, result1
13020     4C 2C B1 FD | 	call	#__system___lockmem
13024     53 01 00 FF 
13028     BA 76 06 F6 | 	mov	arg02, ##@LR__2129
1302c     00 74 06 F6 | 	mov	arg01, #0
13030     00 78 06 F6 | 	mov	arg03, #0
13034     E0 31 B1 FD | 	call	#__system___basic_print_string
13038     00 74 06 F6 | 	mov	arg01, #0
1303c     46 77 02 F6 | 	mov	arg02, local01
13040     00 78 06 F6 | 	mov	arg03, #0
13044     0A 7A 06 F6 | 	mov	arg04, #10
13048     10 32 B1 FD | 	call	#__system___basic_print_integer
1304c     00 74 06 F6 | 	mov	arg01, #0
13050     0A 76 06 F6 | 	mov	arg02, #10
13054     00 78 06 F6 | 	mov	arg03, #0
13058     70 31 B1 FD | 	call	#__system___basic_print_char
1305c     00 74 06 F6 | 	mov	arg01, #0
13060     6C 64 B1 FD | 	call	#__system___getiolock_1306
13064     1A 01 68 FC | 	wrlong	#0, result1
13068                 | '     return  (0) ;
13068     00 34 06 F6 | 	mov	result1, #0
1306c     D0 00 90 FD | 	jmp	#LR__0491
13070                 | LR__0490
13070     1F 00 00 FF 
13074     80 D7 05 F1 | 	add	ptr__dat__, ##16256
13078     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1307c     1F 00 00 FF 
13080     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
13084     01 76 06 F6 | 	mov	arg02, #1
13088     B0 04 BF FD | 	call	#_display_on
1308c     1F 00 00 FF 
13090     80 D7 05 F1 | 	add	ptr__dat__, ##16256
13094     EB 74 02 F6 | 	mov	arg01, ptr__dat__
13098     1F 00 00 FF 
1309c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
130a0     00 76 06 F6 | 	mov	arg02, #0
130a4     9C 09 BF FD | 	call	#_display_canvas_image_start_address
130a8     1F 00 00 FF 
130ac     80 D7 05 F1 | 	add	ptr__dat__, ##16256
130b0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
130b4     1F 00 00 FF 
130b8     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
130bc     0A 76 C6 F9 | 	decod	arg02, #10
130c0     34 0A BF FD | 	call	#_display_canvas_image_width
130c4     1F 00 00 FF 
130c8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
130cc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
130d0     1F 00 00 FF 
130d4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
130d8     00 76 06 F6 | 	mov	arg02, #0
130dc     00 78 06 F6 | 	mov	arg03, #0
130e0     74 0A BF FD | 	call	#_display_active_window_xy
130e4     1F 00 00 FF 
130e8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
130ec     EB 74 02 F6 | 	mov	arg01, ptr__dat__
130f0     1F 00 00 FF 
130f4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
130f8     0A 76 C6 F9 | 	decod	arg02, #10
130fc     01 00 00 FF 
13100     58 78 06 F6 | 	mov	arg03, ##600
13104     F8 0A BF FD | 	call	#_display_active_window_wh
13108     1F 00 00 FF 
1310c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
13110     EB 74 02 F6 | 	mov	arg01, ptr__dat__
13114     1F 00 00 FF 
13118     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1311c     00 76 06 F6 | 	mov	arg02, #0
13120     00 78 06 F6 | 	mov	arg03, #0
13124     09 7A CE F9 | 	bmask	arg04, #9
13128     01 00 00 FF 
1312c     57 7C 06 F6 | 	mov	arg05, ##599
13130     01 00 00 FF 
13134     73 7E 06 F6 | 	mov	arg06, ##627
13138     30 11 BF FD | 	call	#_display_draw_square_fill
1313c                 | '   }
1313c                 | ' 
1313c                 | '   display_on(&display,  (1) );
1313c                 | ' 
1313c                 | ' 
1313c                 | '   display_canvas_image_start_address(&display,  0 );
1313c                 | '   display_canvas_image_width(&display,  1024 );
1313c                 | '   display_active_window_xy(&display, 0, 0);
1313c                 | '   display_active_window_wh(&display,  1024 ,  600 );
1313c                 | '   display_draw_square_fill(&display, 0, 0,  1024  - 1,  600  - 1,  0x0273 );
1313c                 | '   return  (1) ;
1313c     01 34 06 F6 | 	mov	result1, #1
13140                 | LR__0491
13140     A8 F0 03 F6 | 	mov	ptra, fp
13144     B3 00 A0 FD | 	call	#popregs_
13148                 | _start_display_0345_ret
13148     2D 00 64 FD | 	ret
1314c                 | 
1314c                 | _stat
1314c     07 4C 05 F6 | 	mov	COUNT_, #7
13150     A9 00 A0 FD | 	call	#pushregs_
13154     3A 79 02 F6 | 	mov	arg03, arg01
13158     3B 8D 02 F6 | 	mov	local01, arg02
1315c                 | '     return tmpname;
1315c     16 01 00 FF 
13160     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
13164     EB 8E 02 F6 | 	mov	local02, ptr__dat__
13168     47 75 02 F6 | 	mov	arg01, local02
1316c     3C 77 02 F6 | 	mov	arg02, arg03
13170     00 78 06 F6 | 	mov	arg03, #0
13174     16 01 00 FF 
13178     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
1317c     3C 5B B0 FD | 	call	#___getvfsforfile
13180     1A 91 0A F6 | 	mov	local03, result1 wz
13184     34 90 06 51 |  if_ne	add	local03, #52
13188     48 75 02 5B |  if_ne	rdlong	arg01, local03
1318c     34 90 86 51 |  if_ne	sub	local03, #52
13190     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
13194                 | ' #line 22 "C:/flexprop/include/libc/unix/stat.c"
13194                 | '         return _seterror( 16 );
13194     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
13198     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1319c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
131a0     01 34 66 A6 |  if_e	neg	result1, #1
131a4     5C 00 90 AD |  if_e	jmp	#LR__0492
131a8     46 75 02 F6 | 	mov	arg01, local01
131ac     00 76 06 F6 | 	mov	arg02, #0
131b0     30 78 06 F6 | 	mov	arg03, #48
131b4     3A 93 02 F6 | 	mov	local04, arg01
131b8     99 00 A0 FD | 	call	#\builtin_bytefill_
131bc     49 35 02 F6 | 	mov	result1, local04
131c0     47 77 CA FA | 	rdbyte	arg02, local02 wz
131c4     08 8C 06 A1 |  if_e	add	local01, #8
131c8     08 00 80 AF 
131cc     46 FF 6B AC |  if_e	wrlong	##4607, local01
131d0                 | ' #line 29 "C:/flexprop/include/libc/unix/stat.c"
131d0                 | '         buf->st_mode =  0010000  | 0777;
131d0                 | '         return 0;
131d0     00 34 06 A6 |  if_e	mov	result1, #0
131d4     2C 00 90 AD |  if_e	jmp	#LR__0492
131d8     34 90 06 F1 | 	add	local03, #52
131dc     48 77 02 FB | 	rdlong	arg02, local03
131e0     3B 95 02 FB | 	rdlong	local05, arg02
131e4     04 76 06 F1 | 	add	arg02, #4
131e8     3B 97 02 FB | 	rdlong	local06, arg02
131ec     47 75 02 F6 | 	mov	arg01, local02
131f0     46 77 02 F6 | 	mov	arg02, local01
131f4     C9 98 02 F6 | 	mov	local07, objptr
131f8     4A 93 01 F6 | 	mov	objptr, local05
131fc     2D 96 62 FD | 	call	local06
13200     4C 93 01 F6 | 	mov	objptr, local07
13204                 | '     }
13204                 | ' #line 39 "C:/flexprop/include/libc/unix/stat.c"
13204                 | '     r = v->stat(name, buf);
13204                 | ' #line 43 "C:/flexprop/include/libc/unix/stat.c"
13204                 | '     return r;
13204                 | LR__0492
13204     A8 F0 03 F6 | 	mov	ptra, fp
13208     B3 00 A0 FD | 	call	#popregs_
1320c                 | _stat_ret
1320c     2D 00 64 FD | 	ret
13210                 | 
13210                 | __rxtxioctl_0495
13210     02 4C 05 F6 | 	mov	COUNT_, #2
13214     A9 00 A0 FD | 	call	#pushregs_
13218     3B 8D 02 F6 | 	mov	local01, arg02
1321c     3C 8F 02 F6 | 	mov	local02, arg03
13220                 | '     switch (req) {
13220     00 8D 0E F2 | 	cmp	local01, #256 wz
13224     0C 00 90 AD |  if_e	jmp	#LR__0493
13228     01 8D 0E F2 | 	cmp	local01, #257 wz
1322c     1C 00 90 AD |  if_e	jmp	#LR__0494
13230     30 00 90 FD | 	jmp	#LR__0495
13234                 | LR__0493
13234     08 A2 05 F1 | 	add	ptr___system__dat__, #8
13238     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
1323c     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
13240     47 35 62 FC | 	wrlong	result1, local02
13244                 | '         *argl = _getrxtxflags();
13244                 | '         return 0;
13244     00 34 06 F6 | 	mov	result1, #0
13248     28 00 90 FD | 	jmp	#LR__0496
1324c                 | LR__0494
1324c     47 75 02 FB | 	rdlong	arg01, local02
13250     08 A2 05 F1 | 	add	ptr___system__dat__, #8
13254     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
13258     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
1325c                 | '         _setrxtxflags(*argl);
1325c                 | '         return 0;
1325c     00 34 06 F6 | 	mov	result1, #0
13260     10 00 90 FD | 	jmp	#LR__0496
13264                 | LR__0495
13264                 | '         return _seterror( 10 );
13264     18 A2 05 F1 | 	add	ptr___system__dat__, #24
13268     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
1326c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
13270     01 34 66 F6 | 	neg	result1, #1
13274                 | LR__0496
13274     A8 F0 03 F6 | 	mov	ptra, fp
13278     B3 00 A0 FD | 	call	#popregs_
1327c                 | __rxtxioctl_0495_ret
1327c     2D 00 64 FD | 	ret
13280                 | 
13280                 | ___dummy_flush_0496
13280                 | ' {
13280                 | '     return 0;
13280     00 34 06 F6 | 	mov	result1, #0
13284                 | ___dummy_flush_0496_ret
13284     2D 00 64 FD | 	ret
13288                 | 
13288                 | __vfswrite
13288     09 4C 05 F6 | 	mov	COUNT_, #9
1328c     A9 00 A0 FD | 	call	#pushregs_
13290     3A 8D 02 F6 | 	mov	local01, arg01
13294     3B 8F 02 F6 | 	mov	local02, arg02
13298     3C 91 02 F6 | 	mov	local03, arg03
1329c     47 93 02 F6 | 	mov	local04, local02
132a0     08 8C 06 F1 | 	add	local01, #8
132a4     46 75 02 FB | 	rdlong	arg01, local01
132a8     08 8C 86 F1 | 	sub	local01, #8
132ac     02 74 CE F7 | 	test	arg01, #2 wz
132b0                 | '         return _seterror( 6 );
132b0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
132b4     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
132b8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
132bc     01 34 66 A6 |  if_e	neg	result1, #1
132c0     5C 01 90 AD |  if_e	jmp	#LR__0503
132c4     08 8C 06 F1 | 	add	local01, #8
132c8     46 35 02 FB | 	rdlong	result1, local01
132cc     08 8C 86 F1 | 	sub	local01, #8
132d0     40 34 CE F7 | 	test	result1, #64 wz
132d4     5C 00 90 AD |  if_e	jmp	#LR__0498
132d8     08 8C 06 F1 | 	add	local01, #8
132dc     46 35 02 FB | 	rdlong	result1, local01
132e0     08 8C 86 F1 | 	sub	local01, #8
132e4     80 34 CE F7 | 	test	result1, #128 wz
132e8     48 00 90 AD |  if_e	jmp	#LR__0497
132ec     2C 8C 06 F1 | 	add	local01, #44
132f0     46 79 02 FB | 	rdlong	arg03, local01
132f4     2C 8C 86 F1 | 	sub	local01, #44
132f8     3C 95 02 FB | 	rdlong	local05, arg03
132fc     04 78 06 F1 | 	add	arg03, #4
13300     3C 97 02 FB | 	rdlong	local06, arg03
13304     46 75 02 F6 | 	mov	arg01, local01
13308     00 76 06 F6 | 	mov	arg02, #0
1330c     02 78 06 F6 | 	mov	arg03, #2
13310     C9 98 02 F6 | 	mov	local07, objptr
13314     4A 93 01 F6 | 	mov	objptr, local05
13318     2D 96 62 FD | 	call	local06
1331c     4C 93 01 F6 | 	mov	objptr, local07
13320     08 8C 06 F1 | 	add	local01, #8
13324     46 99 02 FB | 	rdlong	local07, local01
13328     80 98 26 F5 | 	andn	local07, #128
1332c     46 99 62 FC | 	wrlong	local07, local01
13330     08 8C 86 F1 | 	sub	local01, #8
13334                 | LR__0497
13334                 | LR__0498
13334     14 8C 06 F1 | 	add	local01, #20
13338     46 99 0A FB | 	rdlong	local07, local01 wz
1333c     14 8C 86 F1 | 	sub	local01, #20
13340     74 00 90 AD |  if_e	jmp	#LR__0500
13344     14 8C 06 F1 | 	add	local01, #20
13348     46 99 02 FB | 	rdlong	local07, local01
1334c     14 8C 86 F1 | 	sub	local01, #20
13350     4C 95 02 FB | 	rdlong	local05, local07
13354     04 98 06 F1 | 	add	local07, #4
13358     4C 97 02 FB | 	rdlong	local06, local07
1335c     47 77 02 F6 | 	mov	arg02, local02
13360     48 79 02 F6 | 	mov	arg03, local03
13364     46 75 02 F6 | 	mov	arg01, local01
13368     C9 98 02 F6 | 	mov	local07, objptr
1336c     4A 93 01 F6 | 	mov	objptr, local05
13370     2D 96 62 FD | 	call	local06
13374     4C 93 01 F6 | 	mov	objptr, local07
13378     1A 9B 02 F6 | 	mov	local08, result1
1337c     00 9A 56 F2 | 	cmps	local08, #0 wc
13380     2C 00 90 3D |  if_ae	jmp	#LR__0499
13384     08 8C 06 F1 | 	add	local01, #8
13388     46 99 02 FB | 	rdlong	local07, local01
1338c     20 98 46 F5 | 	or	local07, #32
13390     46 99 62 FC | 	wrlong	local07, local01
13394                 | '             f->state |=  (0x20) ;
13394                 | '             return _seterror(r);
13394     18 A2 05 F1 | 	add	ptr___system__dat__, #24
13398     D1 9A 62 FC | 	wrlong	local08, ptr___system__dat__
1339c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
133a0     00 9A 0E F2 | 	cmp	local08, #0 wz
133a4     01 34 66 56 |  if_ne	neg	result1, #1
133a8     00 34 06 A6 |  if_e	mov	result1, #0
133ac     70 00 90 FD | 	jmp	#LR__0503
133b0                 | LR__0499
133b0                 | '         }
133b0                 | '         return r;
133b0     4D 35 02 F6 | 	mov	result1, local08
133b4     68 00 90 FD | 	jmp	#LR__0503
133b8                 | LR__0500
133b8     18 8C 06 F1 | 	add	local01, #24
133bc     46 9D 0A FB | 	rdlong	local09, local01 wz
133c0     18 8C 86 F1 | 	sub	local01, #24
133c4                 | '         return _seterror( 6 );
133c4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
133c8     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
133cc     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
133d0     01 34 66 A6 |  if_e	neg	result1, #1
133d4     48 00 90 AD |  if_e	jmp	#LR__0503
133d8     00 9A 06 F6 | 	mov	local08, #0
133dc                 | '     }
133dc                 | '     r = 0;
133dc                 | '     while (count > 0) {
133dc                 | LR__0501
133dc     01 90 16 F2 | 	cmp	local03, #1 wc
133e0     38 00 90 CD |  if_b	jmp	#LR__0502
133e4     4E 99 02 F6 | 	mov	local07, local09
133e8     4C 95 02 FB | 	rdlong	local05, local07
133ec     04 98 06 F1 | 	add	local07, #4
133f0     4C 97 02 FB | 	rdlong	local06, local07
133f4     49 75 C2 FA | 	rdbyte	arg01, local04
133f8     46 77 02 F6 | 	mov	arg02, local01
133fc     C9 98 02 F6 | 	mov	local07, objptr
13400     4A 93 01 F6 | 	mov	objptr, local05
13404     2D 96 62 FD | 	call	local06
13408     4C 93 01 F6 | 	mov	objptr, local07
1340c     1A 9B 02 F1 | 	add	local08, result1
13410     01 90 86 F1 | 	sub	local03, #1
13414     01 92 06 F1 | 	add	local04, #1
13418     C0 FF 9F FD | 	jmp	#LR__0501
1341c                 | LR__0502
1341c                 | '         r += (*tx)(*buf++, f);
1341c                 | '         --count;
1341c                 | '     }
1341c                 | '     return r;
1341c     4D 35 02 F6 | 	mov	result1, local08
13420                 | LR__0503
13420     A8 F0 03 F6 | 	mov	ptra, fp
13424     B3 00 A0 FD | 	call	#popregs_
13428                 | __vfswrite_ret
13428     2D 00 64 FD | 	ret
1342c                 | 
1342c                 | __vfsread
1342c     0B 4C 05 F6 | 	mov	COUNT_, #11
13430     A9 00 A0 FD | 	call	#pushregs_
13434     28 F0 07 F1 | 	add	ptra, #40
13438     04 50 05 F1 | 	add	fp, #4
1343c     A8 74 62 FC | 	wrlong	arg01, fp
13440     04 50 05 F1 | 	add	fp, #4
13444     A8 76 62 FC | 	wrlong	arg02, fp
13448     04 50 05 F1 | 	add	fp, #4
1344c     A8 78 62 FC | 	wrlong	arg03, fp
13450     04 50 85 F1 | 	sub	fp, #4
13454     A8 8C 02 FB | 	rdlong	local01, fp
13458     14 50 05 F1 | 	add	fp, #20
1345c     A8 8C 62 FC | 	wrlong	local01, fp
13460     04 50 05 F1 | 	add	fp, #4
13464     A8 00 68 FC | 	wrlong	#0, fp
13468     1C 50 85 F1 | 	sub	fp, #28
1346c     A8 8E 02 FB | 	rdlong	local02, fp
13470     04 50 85 F1 | 	sub	fp, #4
13474     08 8E 06 F1 | 	add	local02, #8
13478     47 8D 02 FB | 	rdlong	local01, local02
1347c     01 8C CE F7 | 	test	local01, #1 wz
13480                 | ' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
13480                 | '         return _seterror( 6 );
13480     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
13484     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
13488     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
1348c     01 34 66 A6 |  if_e	neg	result1, #1
13490     70 02 90 AD |  if_e	jmp	#LR__0510
13494     04 50 05 F1 | 	add	fp, #4
13498     A8 8C 02 FB | 	rdlong	local01, fp
1349c     04 50 85 F1 | 	sub	fp, #4
134a0     10 8C 06 F1 | 	add	local01, #16
134a4     46 8D 0A FB | 	rdlong	local01, local01 wz
134a8     AC 00 90 AD |  if_e	jmp	#LR__0505
134ac     04 50 05 F1 | 	add	fp, #4
134b0     A8 74 02 FB | 	rdlong	arg01, fp
134b4     3A 8F 02 F6 | 	mov	local02, arg01
134b8     10 8E 06 F1 | 	add	local02, #16
134bc     47 8D 02 FB | 	rdlong	local01, local02
134c0     46 8F 02 FB | 	rdlong	local02, local01
134c4     04 8C 06 F1 | 	add	local01, #4
134c8     46 8D 02 FB | 	rdlong	local01, local01
134cc     04 50 05 F1 | 	add	fp, #4
134d0     A8 76 02 FB | 	rdlong	arg02, fp
134d4     04 50 05 F1 | 	add	fp, #4
134d8     A8 78 02 FB | 	rdlong	arg03, fp
134dc     0C 50 85 F1 | 	sub	fp, #12
134e0     C9 90 02 F6 | 	mov	local03, objptr
134e4     47 93 01 F6 | 	mov	objptr, local02
134e8     2D 8C 62 FD | 	call	local01
134ec     48 93 01 F6 | 	mov	objptr, local03
134f0     10 50 05 F1 | 	add	fp, #16
134f4     A8 34 62 FC | 	wrlong	result1, fp
134f8     10 50 85 F1 | 	sub	fp, #16
134fc     00 34 56 F2 | 	cmps	result1, #0 wc
13500     44 00 90 3D |  if_ae	jmp	#LR__0504
13504     04 50 05 F1 | 	add	fp, #4
13508     A8 90 02 FB | 	rdlong	local03, fp
1350c     48 8D 02 F6 | 	mov	local01, local03
13510     08 90 06 F1 | 	add	local03, #8
13514     48 91 02 FB | 	rdlong	local03, local03
13518     20 90 46 F5 | 	or	local03, #32
1351c     08 8C 06 F1 | 	add	local01, #8
13520     46 91 62 FC | 	wrlong	local03, local01
13524                 | '             f->state |=  (0x20) ;
13524                 | '             return _seterror(r);
13524     0C 50 05 F1 | 	add	fp, #12
13528     A8 74 0A FB | 	rdlong	arg01, fp wz
1352c     10 50 85 F1 | 	sub	fp, #16
13530     18 A2 05 F1 | 	add	ptr___system__dat__, #24
13534     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
13538     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
1353c     01 34 66 56 |  if_ne	neg	result1, #1
13540     00 34 06 A6 |  if_e	mov	result1, #0
13544     BC 01 90 FD | 	jmp	#LR__0510
13548                 | LR__0504
13548                 | '         }
13548                 | '         return r;
13548     10 50 05 F1 | 	add	fp, #16
1354c     A8 34 02 FB | 	rdlong	result1, fp
13550     10 50 85 F1 | 	sub	fp, #16
13554     AC 01 90 FD | 	jmp	#LR__0510
13558                 | LR__0505
13558     04 50 05 F1 | 	add	fp, #4
1355c     A8 8C 02 FB | 	rdlong	local01, fp
13560     1C 8C 06 F1 | 	add	local01, #28
13564     46 8D 0A FB | 	rdlong	local01, local01 wz
13568     14 50 05 F1 | 	add	fp, #20
1356c     A8 8C 62 FC | 	wrlong	local01, fp
13570     18 50 85 F1 | 	sub	fp, #24
13574                 | '         return _seterror( 6 );
13574     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
13578     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1357c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
13580     01 34 66 A6 |  if_e	neg	result1, #1
13584     7C 01 90 AD |  if_e	jmp	#LR__0510
13588     04 50 05 F1 | 	add	fp, #4
1358c     A8 8C 02 FB | 	rdlong	local01, fp
13590     04 50 85 F1 | 	sub	fp, #4
13594     24 8C 06 F1 | 	add	local01, #36
13598     46 93 0A FB | 	rdlong	local04, local01 wz
1359c     90 00 90 AD |  if_e	jmp	#LR__0507
135a0     04 50 05 F1 | 	add	fp, #4
135a4     A8 94 02 FB | 	rdlong	local05, fp
135a8     4A 97 02 F6 | 	mov	local06, local05
135ac     24 96 06 F1 | 	add	local06, #36
135b0     4B 99 02 FB | 	rdlong	local07, local06
135b4     4C 8D 02 F6 | 	mov	local01, local07
135b8     46 8F 02 FB | 	rdlong	local02, local01
135bc     04 8C 06 F1 | 	add	local01, #4
135c0     46 9B 02 FB | 	rdlong	local08, local01
135c4     4D 93 02 F6 | 	mov	local04, local08
135c8     4A 9D 02 F6 | 	mov	local09, local05
135cc     00 9F 06 F6 | 	mov	local10, #256
135d0     20 50 05 F1 | 	add	fp, #32
135d4     A8 A0 02 F6 | 	mov	local11, fp
135d8     4E 75 02 F6 | 	mov	arg01, local09
135dc     00 77 06 F6 | 	mov	arg02, #256
135e0     50 79 02 F6 | 	mov	arg03, local11
135e4     C9 90 02 F6 | 	mov	local03, objptr
135e8     47 93 01 F6 | 	mov	objptr, local02
135ec     24 50 85 F1 | 	sub	fp, #36
135f0     2D 92 62 FD | 	call	local04
135f4     48 93 01 F6 | 	mov	objptr, local03
135f8     10 50 05 F1 | 	add	fp, #16
135fc     A8 34 62 FC | 	wrlong	result1, fp
13600     1A 8F 0A F6 | 	mov	local02, result1 wz
13604     10 50 85 F1 | 	sub	fp, #16
13608     24 00 90 5D |  if_ne	jmp	#LR__0506
1360c     24 50 05 F1 | 	add	fp, #36
13610     A8 96 02 FB | 	rdlong	local06, fp
13614     24 50 85 F1 | 	sub	fp, #36
13618     4B 93 02 F6 | 	mov	local04, local06
1361c     02 92 0E F5 | 	and	local04, #2 wz
13620     01 8C 06 56 |  if_ne	mov	local01, #1
13624     20 50 05 51 |  if_ne	add	fp, #32
13628     A8 02 68 5C |  if_ne	wrlong	#1, fp
1362c     20 50 85 51 |  if_ne	sub	fp, #32
13630                 | LR__0506
13630                 | LR__0507
13630     10 50 05 F1 | 	add	fp, #16
13634     A8 00 68 FC | 	wrlong	#0, fp
13638     10 50 85 F1 | 	sub	fp, #16
1363c                 | '             break_on_nl = 1;
1363c                 | '         }
1363c                 | '     }
1363c                 | '     r = 0;
1363c                 | '     while (count > 0) {
1363c                 | LR__0508
1363c     0C 50 05 F1 | 	add	fp, #12
13640     A8 8C 02 FB | 	rdlong	local01, fp
13644     0C 50 85 F1 | 	sub	fp, #12
13648     01 8C 16 F2 | 	cmp	local01, #1 wc
1364c     A8 00 90 CD |  if_b	jmp	#LR__0509
13650     18 50 05 F1 | 	add	fp, #24
13654     A8 8C 02 FB | 	rdlong	local01, fp
13658     46 8F 02 FB | 	rdlong	local02, local01
1365c     04 8C 06 F1 | 	add	local01, #4
13660     46 93 02 FB | 	rdlong	local04, local01
13664     14 50 85 F1 | 	sub	fp, #20
13668     A8 74 02 FB | 	rdlong	arg01, fp
1366c     04 50 85 F1 | 	sub	fp, #4
13670     C9 9A 02 F6 | 	mov	local08, objptr
13674     47 93 01 F6 | 	mov	objptr, local02
13678     2D 92 62 FD | 	call	local04
1367c     4D 93 01 F6 | 	mov	objptr, local08
13680     14 50 05 F1 | 	add	fp, #20
13684     A8 34 62 FC | 	wrlong	result1, fp
13688     14 50 85 F1 | 	sub	fp, #20
1368c     00 34 56 F2 | 	cmps	result1, #0 wc
13690     64 00 90 CD |  if_b	jmp	#LR__0509
13694     1C 50 05 F1 | 	add	fp, #28
13698     A8 8E 02 FB | 	rdlong	local02, fp
1369c     47 93 02 F6 | 	mov	local04, local02
136a0     01 92 06 F1 | 	add	local04, #1
136a4     A8 92 62 FC | 	wrlong	local04, fp
136a8     08 50 85 F1 | 	sub	fp, #8
136ac     A8 94 02 FB | 	rdlong	local05, fp
136b0     47 95 42 FC | 	wrbyte	local05, local02
136b4     04 50 85 F1 | 	sub	fp, #4
136b8     A8 8C 02 FB | 	rdlong	local01, fp
136bc     01 8C 06 F1 | 	add	local01, #1
136c0     A8 8C 62 FC | 	wrlong	local01, fp
136c4     04 50 85 F1 | 	sub	fp, #4
136c8     A8 8C 02 FB | 	rdlong	local01, fp
136cc     01 8C 86 F1 | 	sub	local01, #1
136d0     A8 8C 62 FC | 	wrlong	local01, fp
136d4     14 50 05 F1 | 	add	fp, #20
136d8     A8 8C 0A FB | 	rdlong	local01, fp wz
136dc     20 50 85 F1 | 	sub	fp, #32
136e0     58 FF 9F AD |  if_e	jmp	#LR__0508
136e4     14 50 05 F1 | 	add	fp, #20
136e8     A8 92 02 FB | 	rdlong	local04, fp
136ec     14 50 85 F1 | 	sub	fp, #20
136f0     0A 92 0E F2 | 	cmp	local04, #10 wz
136f4                 | '             break;
136f4     44 FF 9F 5D |  if_ne	jmp	#LR__0508
136f8                 | LR__0509
136f8                 | '         }
136f8                 | '     }
136f8                 | '     return r;
136f8     10 50 05 F1 | 	add	fp, #16
136fc     A8 34 02 FB | 	rdlong	result1, fp
13700     10 50 85 F1 | 	sub	fp, #16
13704                 | LR__0510
13704     A8 F0 03 F6 | 	mov	ptra, fp
13708     B3 00 A0 FD | 	call	#popregs_
1370c                 | __vfsread_ret
1370c     2D 00 64 FD | 	ret
13710                 | 
13710                 | __dofmt
13710     0A 4C 05 F6 | 	mov	COUNT_, #10
13714     A9 00 A0 FD | 	call	#pushregs_
13718     3C F0 07 F1 | 	add	ptra, #60
1371c     04 50 05 F1 | 	add	fp, #4
13720     A8 74 62 FC | 	wrlong	arg01, fp
13724     04 50 05 F1 | 	add	fp, #4
13728     A8 76 62 FC | 	wrlong	arg02, fp
1372c     04 50 05 F1 | 	add	fp, #4
13730     A8 78 62 FC | 	wrlong	arg03, fp
13734     00 8C 06 F6 | 	mov	local01, #0
13738     10 50 05 F1 | 	add	fp, #16
1373c     A8 00 68 FC | 	wrlong	#0, fp
13740     08 50 05 F1 | 	add	fp, #8
13744     A8 00 68 FC | 	wrlong	#0, fp
13748     04 50 05 F1 | 	add	fp, #4
1374c     A8 00 68 FC | 	wrlong	#0, fp
13750     08 50 05 F1 | 	add	fp, #8
13754     A8 00 68 FC | 	wrlong	#0, fp
13758     30 50 85 F1 | 	sub	fp, #48
1375c                 | ' #line 150 "C:/flexprop/include/libsys/dofmt.c"
1375c                 | '     for(;;) {
1375c                 | LR__0511
1375c     08 50 05 F1 | 	add	fp, #8
13760     A8 8C 02 FB | 	rdlong	local01, fp
13764     46 75 02 F6 | 	mov	arg01, local01
13768     01 74 06 F1 | 	add	arg01, #1
1376c     A8 74 62 FC | 	wrlong	arg01, fp
13770     46 8D CA FA | 	rdbyte	local01, local01 wz
13774     08 50 05 F1 | 	add	fp, #8
13778     A8 8C 62 FC | 	wrlong	local01, fp
1377c     10 50 85 F1 | 	sub	fp, #16
13780     A8 06 90 AD |  if_e	jmp	#LR__0534
13784     10 50 05 F1 | 	add	fp, #16
13788     A8 8C 02 FB | 	rdlong	local01, fp
1378c     10 50 85 F1 | 	sub	fp, #16
13790     25 8C 0E F2 | 	cmp	local01, #37 wz
13794     68 00 90 AD |  if_e	jmp	#LR__0512
13798     04 50 05 F1 | 	add	fp, #4
1379c     A8 8C 02 FB | 	rdlong	local01, fp
137a0     46 8F 02 FB | 	rdlong	local02, local01
137a4     04 8C 06 F1 | 	add	local01, #4
137a8     46 8D 02 FB | 	rdlong	local01, local01
137ac     0C 50 05 F1 | 	add	fp, #12
137b0     A8 74 02 FB | 	rdlong	arg01, fp
137b4     10 50 85 F1 | 	sub	fp, #16
137b8     C9 90 02 F6 | 	mov	local03, objptr
137bc     47 93 01 F6 | 	mov	objptr, local02
137c0     2D 8C 62 FD | 	call	local01
137c4     48 93 01 F6 | 	mov	objptr, local03
137c8     14 50 05 F1 | 	add	fp, #20
137cc     A8 34 62 FC | 	wrlong	result1, fp
137d0     14 50 85 F1 | 	sub	fp, #20
137d4     00 34 56 F2 | 	cmps	result1, #0 wc
137d8     14 50 05 C1 |  if_b	add	fp, #20
137dc     A8 34 02 CB |  if_b	rdlong	result1, fp
137e0     14 50 85 C1 |  if_b	sub	fp, #20
137e4     50 06 90 CD |  if_b	jmp	#LR__0535
137e8     1C 50 05 F1 | 	add	fp, #28
137ec     A8 90 02 FB | 	rdlong	local03, fp
137f0     01 90 06 F1 | 	add	local03, #1
137f4     A8 90 62 FC | 	wrlong	local03, fp
137f8     1C 50 85 F1 | 	sub	fp, #28
137fc                 | '             bytes_written++;
137fc                 | '             continue;
137fc     5C FF 9F FD | 	jmp	#LR__0511
13800                 | LR__0512
13800     08 50 05 F1 | 	add	fp, #8
13804     A8 74 02 FB | 	rdlong	arg01, fp
13808     18 50 05 F1 | 	add	fp, #24
1380c     A8 76 02 F6 | 	mov	arg02, fp
13810     20 50 85 F1 | 	sub	fp, #32
13814     C8 51 B0 FD | 	call	#_parseflags_1172
13818     08 50 05 F1 | 	add	fp, #8
1381c     A8 34 62 FC | 	wrlong	result1, fp
13820     18 50 05 F1 | 	add	fp, #24
13824     A8 8C 02 FB | 	rdlong	local01, fp
13828     18 8C 46 F0 | 	shr	local01, #24
1382c     03 8C 06 F5 | 	and	local01, #3
13830     10 50 05 F1 | 	add	fp, #16
13834     A8 8C 62 FC | 	wrlong	local01, fp
13838     28 50 85 F1 | 	sub	fp, #40
1383c     A8 74 02 F6 | 	mov	arg01, fp
13840     04 50 05 F1 | 	add	fp, #4
13844     A8 76 02 FB | 	rdlong	arg02, fp
13848     0C 50 85 F1 | 	sub	fp, #12
1384c     18 51 B0 FD | 	call	#_parseint_1165
13850     24 50 05 F1 | 	add	fp, #36
13854     A8 34 62 FC | 	wrlong	result1, fp
13858     1C 50 85 F1 | 	sub	fp, #28
1385c     A8 8E 02 FB | 	rdlong	local02, fp
13860     47 8D CA FA | 	rdbyte	local01, local02 wz
13864     08 50 05 F1 | 	add	fp, #8
13868     A8 8C 62 FC | 	wrlong	local01, fp
1386c     10 50 85 F1 | 	sub	fp, #16
13870     B8 05 90 AD |  if_e	jmp	#LR__0534
13874     10 50 05 F1 | 	add	fp, #16
13878     A8 8C 02 FB | 	rdlong	local01, fp
1387c     10 50 85 F1 | 	sub	fp, #16
13880     2E 8C 0E F2 | 	cmp	local01, #46 wz
13884     4C 00 90 5D |  if_ne	jmp	#LR__0513
13888     08 50 05 F1 | 	add	fp, #8
1388c     A8 90 02 FB | 	rdlong	local03, fp
13890     01 90 06 F1 | 	add	local03, #1
13894     A8 90 62 FC | 	wrlong	local03, fp
13898     A8 74 02 F6 | 	mov	arg01, fp
1389c     04 50 05 F1 | 	add	fp, #4
138a0     A8 76 02 FB | 	rdlong	arg02, fp
138a4     0C 50 85 F1 | 	sub	fp, #12
138a8     BC 50 B0 FD | 	call	#_parseint_1165
138ac     01 34 06 F1 | 	add	result1, #1
138b0     28 50 05 F1 | 	add	fp, #40
138b4     A8 34 62 FC | 	wrlong	result1, fp
138b8     20 50 85 F1 | 	sub	fp, #32
138bc     A8 8E 02 FB | 	rdlong	local02, fp
138c0     47 8D CA FA | 	rdbyte	local01, local02 wz
138c4     08 50 05 F1 | 	add	fp, #8
138c8     A8 8C 62 FC | 	wrlong	local01, fp
138cc     10 50 85 F1 | 	sub	fp, #16
138d0     58 05 90 AD |  if_e	jmp	#LR__0534
138d4                 | LR__0513
138d4     08 50 05 F1 | 	add	fp, #8
138d8     A8 74 02 FB | 	rdlong	arg01, fp
138dc     24 50 05 F1 | 	add	fp, #36
138e0     A8 76 02 F6 | 	mov	arg02, fp
138e4     2C 50 85 F1 | 	sub	fp, #44
138e8     A4 51 B0 FD | 	call	#_parsesize_1176
138ec     08 50 05 F1 | 	add	fp, #8
138f0     A8 34 62 FC | 	wrlong	result1, fp
138f4     1A 8D 02 F6 | 	mov	local01, result1
138f8     01 8C 06 F1 | 	add	local01, #1
138fc     A8 8C 62 FC | 	wrlong	local01, fp
13900     1A 8D CA FA | 	rdbyte	local01, result1 wz
13904     08 50 05 F1 | 	add	fp, #8
13908     A8 8C 62 FC | 	wrlong	local01, fp
1390c     10 50 85 F1 | 	sub	fp, #16
13910     18 05 90 AD |  if_e	jmp	#LR__0534
13914     10 50 05 F1 | 	add	fp, #16
13918     A8 8C 02 FB | 	rdlong	local01, fp
1391c     10 50 85 F1 | 	sub	fp, #16
13920     25 8C 0E F2 | 	cmp	local01, #37 wz
13924     2C 00 90 5D |  if_ne	jmp	#LR__0514
13928     04 50 05 F1 | 	add	fp, #4
1392c     A8 74 02 FB | 	rdlong	arg01, fp
13930     1C 50 05 F1 | 	add	fp, #28
13934     A8 76 02 FB | 	rdlong	arg02, fp
13938     20 50 85 F1 | 	sub	fp, #32
1393c     25 78 06 F6 | 	mov	arg03, #37
13940     7C 29 B1 FD | 	call	#__system___fmtchar
13944     14 50 05 F1 | 	add	fp, #20
13948     A8 34 62 FC | 	wrlong	result1, fp
1394c     14 50 85 F1 | 	sub	fp, #20
13950                 | '             q = _fmtchar(fn, flags, '%');
13950                 | '             continue;
13950     08 FE 9F FD | 	jmp	#LR__0511
13954                 | LR__0514
13954     14 50 05 F1 | 	add	fp, #20
13958     A8 00 68 FC | 	wrlong	#0, fp
1395c     08 50 85 F1 | 	sub	fp, #8
13960     A8 92 02 FB | 	rdlong	local04, fp
13964     49 91 02 FB | 	rdlong	local03, local04
13968     48 8D 02 FB | 	rdlong	local01, local03
1396c     49 95 02 F6 | 	mov	local05, local04
13970     49 97 02 F6 | 	mov	local06, local04
13974     4B 99 02 F6 | 	mov	local07, local06
13978     4C 91 02 FB | 	rdlong	local03, local07
1397c     04 90 06 F1 | 	add	local03, #4
13980     4A 91 62 FC | 	wrlong	local03, local05
13984     28 50 05 F1 | 	add	fp, #40
13988     A8 8C 62 FC | 	wrlong	local01, fp
1398c     24 50 85 F1 | 	sub	fp, #36
13990     A8 8C 02 FB | 	rdlong	local01, fp
13994     10 50 85 F1 | 	sub	fp, #16
13998     41 8C 56 F2 | 	cmps	local01, #65 wc
1399c     48 00 90 CD |  if_b	jmp	#LR__0515
139a0     10 50 05 F1 | 	add	fp, #16
139a4     A8 9A 02 FB | 	rdlong	local08, fp
139a8     10 50 85 F1 | 	sub	fp, #16
139ac     4D 9D 02 F6 | 	mov	local09, local08
139b0     5B 9C 56 F2 | 	cmps	local09, #91 wc
139b4     30 00 90 3D |  if_ae	jmp	#LR__0515
139b8     20 50 05 F1 | 	add	fp, #32
139bc     A8 8C 02 FB | 	rdlong	local01, fp
139c0     1D 8C 26 F4 | 	bith	local01, #29
139c4     A8 8C 62 FC | 	wrlong	local01, fp
139c8     10 50 85 F1 | 	sub	fp, #16
139cc     A8 8E 02 FB | 	rdlong	local02, fp
139d0     41 8E 86 F1 | 	sub	local02, #65
139d4     A8 8E 62 FC | 	wrlong	local02, fp
139d8     47 8D 02 F6 | 	mov	local01, local02
139dc     61 8C 06 F1 | 	add	local01, #97
139e0     A8 8C 62 FC | 	wrlong	local01, fp
139e4     10 50 85 F1 | 	sub	fp, #16
139e8                 | LR__0515
139e8     28 50 05 F1 | 	add	fp, #40
139ec     A8 8C 02 FB | 	rdlong	local01, fp
139f0     28 50 85 F1 | 	sub	fp, #40
139f4     00 8C 56 F2 | 	cmps	local01, #0 wc
139f8     28 50 05 C1 |  if_b	add	fp, #40
139fc     A8 00 68 CC |  if_b	wrlong	#0, fp
13a00     28 50 85 C1 |  if_b	sub	fp, #40
13a04     28 50 05 F1 | 	add	fp, #40
13a08     A8 8C 02 FB | 	rdlong	local01, fp
13a0c     28 50 85 F1 | 	sub	fp, #40
13a10     40 8C 56 F2 | 	cmps	local01, #64 wc
13a14     28 50 05 31 |  if_ae	add	fp, #40
13a18     A8 7E 68 3C |  if_ae	wrlong	#63, fp
13a1c     28 50 85 31 |  if_ae	sub	fp, #40
13a20     24 50 05 F1 | 	add	fp, #36
13a24     A8 8C 02 FB | 	rdlong	local01, fp
13a28     24 50 85 F1 | 	sub	fp, #36
13a2c     00 8C 56 F2 | 	cmps	local01, #0 wc
13a30     34 00 90 3D |  if_ae	jmp	#LR__0516
13a34     24 50 05 F1 | 	add	fp, #36
13a38     A8 8C 02 FB | 	rdlong	local01, fp
13a3c     46 8D 62 F6 | 	neg	local01, local01
13a40     A8 8C 62 FC | 	wrlong	local01, fp
13a44     04 50 85 F1 | 	sub	fp, #4
13a48     A8 8C 02 FB | 	rdlong	local01, fp
13a4c     36 8C 06 F4 | 	bitl	local01, #54
13a50     A8 8C 62 FC | 	wrlong	local01, fp
13a54     16 8C 26 F4 | 	bith	local01, #22
13a58     A8 8C 62 FC | 	wrlong	local01, fp
13a5c     10 50 05 F1 | 	add	fp, #16
13a60     A8 02 68 FC | 	wrlong	#1, fp
13a64     30 50 85 F1 | 	sub	fp, #48
13a68                 | LR__0516
13a68     20 50 05 F1 | 	add	fp, #32
13a6c     A8 8C 02 FB | 	rdlong	local01, fp
13a70     04 50 05 F1 | 	add	fp, #4
13a74     A8 9C 02 FB | 	rdlong	local09, fp
13a78     08 9C 66 F0 | 	shl	local09, #8
13a7c     4E 8D 42 F5 | 	or	local01, local09
13a80     04 50 85 F1 | 	sub	fp, #4
13a84     A8 8C 62 FC | 	wrlong	local01, fp
13a88     08 50 05 F1 | 	add	fp, #8
13a8c     A8 9C 02 FB | 	rdlong	local09, fp
13a90     10 9C 66 F0 | 	shl	local09, #16
13a94     4E 8D 42 F5 | 	or	local01, local09
13a98     08 50 85 F1 | 	sub	fp, #8
13a9c     A8 8C 62 FC | 	wrlong	local01, fp
13aa0                 | '             width = -width;
13aa0                 | '             flags &= ~( 0x3 << (22) );
13aa0                 | '             flags |= ( 1 << (22) );
13aa0                 | '             padchar =  1 ;
13aa0                 | '         }
13aa0                 | '         flags = flags | (width <<  (8) );
13aa0                 | '         flags = flags | (prec <<  (16) );
13aa0                 | '         switch (c) {
13aa0     10 50 85 F1 | 	sub	fp, #16
13aa4     A8 9E 02 FB | 	rdlong	local10, fp
13aa8     10 50 85 F1 | 	sub	fp, #16
13aac     63 9E 0E F2 | 	cmp	local10, #99 wz
13ab0     54 00 90 AD |  if_e	jmp	#LR__0517
13ab4     73 9E 0E F2 | 	cmp	local10, #115 wz
13ab8     7C 00 90 AD |  if_e	jmp	#LR__0518
13abc     64 9E 0E F2 | 	cmp	local10, #100 wz
13ac0     D8 00 90 AD |  if_e	jmp	#LR__0520
13ac4     69 9E 0E F2 | 	cmp	local10, #105 wz
13ac8     D0 00 90 AD |  if_e	jmp	#LR__0521
13acc     75 9E 0E F2 | 	cmp	local10, #117 wz
13ad0     C8 00 90 AD |  if_e	jmp	#LR__0522
13ad4     6F 9E 0E F2 | 	cmp	local10, #111 wz
13ad8     6C 01 90 AD |  if_e	jmp	#LR__0524
13adc     78 9E 0E F2 | 	cmp	local10, #120 wz
13ae0     FC 01 90 AD |  if_e	jmp	#LR__0526
13ae4     61 9E 0E F2 | 	cmp	local10, #97 wz
13ae8     84 02 90 AD |  if_e	jmp	#LR__0528
13aec     65 9E 0E F2 | 	cmp	local10, #101 wz
13af0     7C 02 90 AD |  if_e	jmp	#LR__0529
13af4     66 9E 0E F2 | 	cmp	local10, #102 wz
13af8     74 02 90 AD |  if_e	jmp	#LR__0530
13afc     67 9E 0E F2 | 	cmp	local10, #103 wz
13b00     6C 02 90 AD |  if_e	jmp	#LR__0531
13b04     A4 02 90 FD | 	jmp	#LR__0532
13b08                 | LR__0517
13b08     04 50 05 F1 | 	add	fp, #4
13b0c     A8 74 02 FB | 	rdlong	arg01, fp
13b10     1C 50 05 F1 | 	add	fp, #28
13b14     A8 76 02 FB | 	rdlong	arg02, fp
13b18     14 50 05 F1 | 	add	fp, #20
13b1c     A8 78 02 FB | 	rdlong	arg03, fp
13b20     34 50 85 F1 | 	sub	fp, #52
13b24     98 27 B1 FD | 	call	#__system___fmtchar
13b28     14 50 05 F1 | 	add	fp, #20
13b2c     A8 34 62 FC | 	wrlong	result1, fp
13b30     14 50 85 F1 | 	sub	fp, #20
13b34                 | '             q = _fmtchar(fn, flags, val);
13b34                 | '             break;
13b34     B0 02 90 FD | 	jmp	#LR__0533
13b38                 | LR__0518
13b38     28 50 05 F1 | 	add	fp, #40
13b3c     A8 8C 0A FB | 	rdlong	local01, fp wz
13b40     28 50 85 F1 | 	sub	fp, #40
13b44     24 00 90 AD |  if_e	jmp	#LR__0519
13b48     20 50 05 F1 | 	add	fp, #32
13b4c     A8 8C 02 FB | 	rdlong	local01, fp
13b50     08 50 05 F1 | 	add	fp, #8
13b54     A8 9C 02 FB | 	rdlong	local09, fp
13b58     01 9C 86 F1 | 	sub	local09, #1
13b5c     4E 8D 42 F5 | 	or	local01, local09
13b60     08 50 85 F1 | 	sub	fp, #8
13b64     A8 8C 62 FC | 	wrlong	local01, fp
13b68     20 50 85 F1 | 	sub	fp, #32
13b6c                 | LR__0519
13b6c     04 50 05 F1 | 	add	fp, #4
13b70     A8 74 02 FB | 	rdlong	arg01, fp
13b74     1C 50 05 F1 | 	add	fp, #28
13b78     A8 76 02 FB | 	rdlong	arg02, fp
13b7c     14 50 05 F1 | 	add	fp, #20
13b80     A8 78 02 FB | 	rdlong	arg03, fp
13b84     34 50 85 F1 | 	sub	fp, #52
13b88     94 27 B1 FD | 	call	#__system___fmtstr
13b8c     14 50 05 F1 | 	add	fp, #20
13b90     A8 34 62 FC | 	wrlong	result1, fp
13b94     14 50 85 F1 | 	sub	fp, #20
13b98                 | '             break;
13b98     4C 02 90 FD | 	jmp	#LR__0533
13b9c                 | LR__0520
13b9c                 | LR__0521
13b9c                 | LR__0522
13b9c     10 50 05 F1 | 	add	fp, #16
13ba0     A8 8C 02 FB | 	rdlong	local01, fp
13ba4     10 50 85 F1 | 	sub	fp, #16
13ba8     75 8C 0E F2 | 	cmp	local01, #117 wz
13bac     20 50 05 A1 |  if_e	add	fp, #32
13bb0     A8 8C 02 AB |  if_e	rdlong	local01, fp
13bb4     3A 8C 26 A4 |  if_e	bith	local01, #58
13bb8     A8 8C 62 AC |  if_e	wrlong	local01, fp
13bbc     20 50 85 A1 |  if_e	sub	fp, #32
13bc0     28 50 05 F1 | 	add	fp, #40
13bc4     A8 8C 0A FB | 	rdlong	local01, fp wz
13bc8     28 50 85 F1 | 	sub	fp, #40
13bcc     44 00 90 5D |  if_ne	jmp	#LR__0523
13bd0     30 50 05 F1 | 	add	fp, #48
13bd4     A8 9C 02 FB | 	rdlong	local09, fp
13bd8     30 50 85 F1 | 	sub	fp, #48
13bdc     02 9C 0E F2 | 	cmp	local09, #2 wz
13be0     30 00 90 5D |  if_ne	jmp	#LR__0523
13be4     20 50 05 F1 | 	add	fp, #32
13be8     A8 8E 02 FB | 	rdlong	local02, fp
13bec     47 8D 02 F6 | 	mov	local01, local02
13bf0     04 50 05 F1 | 	add	fp, #4
13bf4     A8 9A 02 FB | 	rdlong	local08, fp
13bf8     4D 9D 02 F6 | 	mov	local09, local08
13bfc     01 9C 06 F1 | 	add	local09, #1
13c00     10 9C 66 F0 | 	shl	local09, #16
13c04     4E 8D 42 F5 | 	or	local01, local09
13c08     04 50 85 F1 | 	sub	fp, #4
13c0c     A8 8C 62 FC | 	wrlong	local01, fp
13c10     20 50 85 F1 | 	sub	fp, #32
13c14                 | LR__0523
13c14     04 50 05 F1 | 	add	fp, #4
13c18     A8 74 02 FB | 	rdlong	arg01, fp
13c1c     1C 50 05 F1 | 	add	fp, #28
13c20     A8 76 02 FB | 	rdlong	arg02, fp
13c24     14 50 05 F1 | 	add	fp, #20
13c28     A8 78 02 FB | 	rdlong	arg03, fp
13c2c     34 50 85 F1 | 	sub	fp, #52
13c30     0A 7A 06 F6 | 	mov	arg04, #10
13c34     D4 27 B1 FD | 	call	#__system___fmtnum
13c38     14 50 05 F1 | 	add	fp, #20
13c3c     A8 34 62 FC | 	wrlong	result1, fp
13c40     14 50 85 F1 | 	sub	fp, #20
13c44                 | '                 flags |= ((width+1)<< (16) );
13c44                 | '             }
13c44                 | '             q = _fmtnum(fn, flags, val, 10);
13c44                 | '             break;
13c44     A0 01 90 FD | 	jmp	#LR__0533
13c48                 | LR__0524
13c48     20 50 05 F1 | 	add	fp, #32
13c4c     A8 8C 02 FB | 	rdlong	local01, fp
13c50     3A 8C 26 F4 | 	bith	local01, #58
13c54     A8 8C 62 FC | 	wrlong	local01, fp
13c58     08 50 05 F1 | 	add	fp, #8
13c5c     A8 8C 0A FB | 	rdlong	local01, fp wz
13c60     28 50 85 F1 | 	sub	fp, #40
13c64     44 00 90 5D |  if_ne	jmp	#LR__0525
13c68     30 50 05 F1 | 	add	fp, #48
13c6c     A8 9C 02 FB | 	rdlong	local09, fp
13c70     30 50 85 F1 | 	sub	fp, #48
13c74     02 9C 0E F2 | 	cmp	local09, #2 wz
13c78     30 00 90 5D |  if_ne	jmp	#LR__0525
13c7c     20 50 05 F1 | 	add	fp, #32
13c80     A8 8E 02 FB | 	rdlong	local02, fp
13c84     47 8D 02 F6 | 	mov	local01, local02
13c88     04 50 05 F1 | 	add	fp, #4
13c8c     A8 9A 02 FB | 	rdlong	local08, fp
13c90     4D 9D 02 F6 | 	mov	local09, local08
13c94     01 9C 06 F1 | 	add	local09, #1
13c98     10 9C 66 F0 | 	shl	local09, #16
13c9c     4E 8D 42 F5 | 	or	local01, local09
13ca0     04 50 85 F1 | 	sub	fp, #4
13ca4     A8 8C 62 FC | 	wrlong	local01, fp
13ca8     20 50 85 F1 | 	sub	fp, #32
13cac                 | LR__0525
13cac     04 50 05 F1 | 	add	fp, #4
13cb0     A8 74 02 FB | 	rdlong	arg01, fp
13cb4     1C 50 05 F1 | 	add	fp, #28
13cb8     A8 76 02 FB | 	rdlong	arg02, fp
13cbc     14 50 05 F1 | 	add	fp, #20
13cc0     A8 78 02 FB | 	rdlong	arg03, fp
13cc4     34 50 85 F1 | 	sub	fp, #52
13cc8     08 7A 06 F6 | 	mov	arg04, #8
13ccc     3C 27 B1 FD | 	call	#__system___fmtnum
13cd0     14 50 05 F1 | 	add	fp, #20
13cd4     A8 34 62 FC | 	wrlong	result1, fp
13cd8     14 50 85 F1 | 	sub	fp, #20
13cdc                 | '                 flags |= ((width+1)<< (16) );
13cdc                 | '             }
13cdc                 | '             q = _fmtnum(fn, flags, val, 8);
13cdc                 | '             break;
13cdc     08 01 90 FD | 	jmp	#LR__0533
13ce0                 | LR__0526
13ce0     28 50 05 F1 | 	add	fp, #40
13ce4     A8 8C 0A FB | 	rdlong	local01, fp wz
13ce8     28 50 85 F1 | 	sub	fp, #40
13cec     44 00 90 5D |  if_ne	jmp	#LR__0527
13cf0     30 50 05 F1 | 	add	fp, #48
13cf4     A8 9C 02 FB | 	rdlong	local09, fp
13cf8     30 50 85 F1 | 	sub	fp, #48
13cfc     02 9C 0E F2 | 	cmp	local09, #2 wz
13d00     30 00 90 5D |  if_ne	jmp	#LR__0527
13d04     20 50 05 F1 | 	add	fp, #32
13d08     A8 8E 02 FB | 	rdlong	local02, fp
13d0c     47 8D 02 F6 | 	mov	local01, local02
13d10     04 50 05 F1 | 	add	fp, #4
13d14     A8 9A 02 FB | 	rdlong	local08, fp
13d18     4D 9D 02 F6 | 	mov	local09, local08
13d1c     01 9C 06 F1 | 	add	local09, #1
13d20     10 9C 66 F0 | 	shl	local09, #16
13d24     4E 8D 42 F5 | 	or	local01, local09
13d28     04 50 85 F1 | 	sub	fp, #4
13d2c     A8 8C 62 FC | 	wrlong	local01, fp
13d30     20 50 85 F1 | 	sub	fp, #32
13d34                 | LR__0527
13d34     20 50 05 F1 | 	add	fp, #32
13d38     A8 76 02 FB | 	rdlong	arg02, fp
13d3c     3A 76 26 F4 | 	bith	arg02, #58
13d40     A8 76 62 FC | 	wrlong	arg02, fp
13d44     1C 50 85 F1 | 	sub	fp, #28
13d48     A8 74 02 FB | 	rdlong	arg01, fp
13d4c     30 50 05 F1 | 	add	fp, #48
13d50     A8 78 02 FB | 	rdlong	arg03, fp
13d54     34 50 85 F1 | 	sub	fp, #52
13d58     10 7A 06 F6 | 	mov	arg04, #16
13d5c     AC 26 B1 FD | 	call	#__system___fmtnum
13d60     14 50 05 F1 | 	add	fp, #20
13d64     A8 34 62 FC | 	wrlong	result1, fp
13d68     14 50 85 F1 | 	sub	fp, #20
13d6c                 | '                 flags |= ((width+1)<< (16) );
13d6c                 | '             }
13d6c                 | '             flags |=  3  <<  (26) ;
13d6c                 | '             q = _fmtnum(fn, flags, val, 16);
13d6c                 | '             break;
13d6c     78 00 90 FD | 	jmp	#LR__0533
13d70                 | LR__0528
13d70                 | LR__0529
13d70                 | LR__0530
13d70                 | LR__0531
13d70     04 50 05 F1 | 	add	fp, #4
13d74     A8 74 02 FB | 	rdlong	arg01, fp
13d78     1C 50 05 F1 | 	add	fp, #28
13d7c     A8 76 02 FB | 	rdlong	arg02, fp
13d80     14 50 05 F1 | 	add	fp, #20
13d84     A8 78 02 FB | 	rdlong	arg03, fp
13d88                 | '     v.i = x;
13d88                 | '     return v.f;
13d88     24 50 85 F1 | 	sub	fp, #36
13d8c     A8 94 02 FB | 	rdlong	local05, fp
13d90     10 50 85 F1 | 	sub	fp, #16
13d94     4A 7B 02 F6 | 	mov	arg04, local05
13d98     84 29 B1 FD | 	call	#__system___fmtfloat
13d9c     14 50 05 F1 | 	add	fp, #20
13da0     A8 34 62 FC | 	wrlong	result1, fp
13da4     14 50 85 F1 | 	sub	fp, #20
13da8                 | '             q = _fmtfloat(fn, flags, _asfloat(val), c);
13da8                 | '             break;
13da8     3C 00 90 FD | 	jmp	#LR__0533
13dac                 | LR__0532
13dac     04 50 05 F1 | 	add	fp, #4
13db0     A8 74 02 FB | 	rdlong	arg01, fp
13db4     1C 50 05 F1 | 	add	fp, #28
13db8     A8 8E 02 FB | 	rdlong	local02, fp
13dbc     20 50 85 F1 | 	sub	fp, #32
13dc0     53 01 00 FF 
13dc4     D2 9A 06 F6 | 	mov	local08, ##@LR__2130
13dc8     4D 9D 02 F6 | 	mov	local09, local08
13dcc     47 77 02 F6 | 	mov	arg02, local02
13dd0     4E 79 02 F6 | 	mov	arg03, local09
13dd4     48 25 B1 FD | 	call	#__system___fmtstr
13dd8     1A 8D 02 F6 | 	mov	local01, result1
13ddc     14 50 05 F1 | 	add	fp, #20
13de0     A8 8C 62 FC | 	wrlong	local01, fp
13de4     14 50 85 F1 | 	sub	fp, #20
13de8                 | '             q = _fmtstr(fn, flags, "???");
13de8                 | '             break;
13de8                 | LR__0533
13de8     14 50 05 F1 | 	add	fp, #20
13dec     A8 8C 02 FB | 	rdlong	local01, fp
13df0     14 50 85 F1 | 	sub	fp, #20
13df4     00 8C 56 F2 | 	cmps	local01, #0 wc
13df8                 | '             return q;
13df8     14 50 05 C1 |  if_b	add	fp, #20
13dfc     A8 34 02 CB |  if_b	rdlong	result1, fp
13e00     14 50 85 C1 |  if_b	sub	fp, #20
13e04     30 00 90 CD |  if_b	jmp	#LR__0535
13e08     1C 50 05 F1 | 	add	fp, #28
13e0c     A8 8C 02 FB | 	rdlong	local01, fp
13e10     08 50 85 F1 | 	sub	fp, #8
13e14     A8 9A 02 FB | 	rdlong	local08, fp
13e18     4D 8D 02 F1 | 	add	local01, local08
13e1c     08 50 05 F1 | 	add	fp, #8
13e20     A8 8C 62 FC | 	wrlong	local01, fp
13e24     1C 50 85 F1 | 	sub	fp, #28
13e28     30 F9 9F FD | 	jmp	#LR__0511
13e2c                 | LR__0534
13e2c                 | '         }
13e2c                 | '         bytes_written += q;
13e2c                 | '     }
13e2c                 | '     return bytes_written;
13e2c     1C 50 05 F1 | 	add	fp, #28
13e30     A8 34 02 FB | 	rdlong	result1, fp
13e34     1C 50 85 F1 | 	sub	fp, #28
13e38                 | LR__0535
13e38     A8 F0 03 F6 | 	mov	ptra, fp
13e3c     B3 00 A0 FD | 	call	#popregs_
13e40                 | __dofmt_ret
13e40     2D 00 64 FD | 	ret
13e44                 | 
13e44                 | _state_machine_check_0569
13e44     08 4C 05 F6 | 	mov	COUNT_, #8
13e48     A9 00 A0 FD | 	call	#pushregs_
13e4c     1C F0 07 F1 | 	add	ptra, #28
13e50     3A 8D 02 F6 | 	mov	local01, arg01
13e54     04 74 06 F1 | 	add	arg01, #4
13e58     3A 03 48 FC | 	wrbyte	#1, arg01
13e5c     3A 75 CA FA | 	rdbyte	arg01, arg01 wz
13e60     01 34 06 56 |  if_ne	mov	result1, #1
13e64     00 34 06 A6 |  if_e	mov	result1, #0
13e68                 | '     {
13e68                 | '         newState = STATE_SELFCHECK;
13e68                 | '     }
13e68                 | ' 
13e68                 | '     return newState;
13e68     01 34 0E F2 | 	cmp	result1, #1 wz
13e6c                 | '     {
13e6c                 | '         return newState;
13e6c     94 00 90 5D |  if_ne	jmp	#LR__0537
13e70     0C 50 05 F1 | 	add	fp, #12
13e74     A8 74 02 F6 | 	mov	arg01, fp
13e78     0C 50 85 F1 | 	sub	fp, #12
13e7c     08 8C 06 F1 | 	add	local01, #8
13e80     46 77 02 F6 | 	mov	arg02, local01
13e84     10 78 06 F6 | 	mov	arg03, #16
13e88     CC 1C B1 FD | 	call	#__system____builtin_memmove
13e8c     0C 50 05 F1 | 	add	fp, #12
13e90     A8 8E CA FA | 	rdbyte	local02, fp wz
13e94     0C 50 85 F1 | 	sub	fp, #12
13e98     64 00 90 AD |  if_e	jmp	#LR__0536
13e9c     10 50 05 F1 | 	add	fp, #16
13ea0     A8 90 0A FB | 	rdlong	local03, fp wz
13ea4     10 50 85 F1 | 	sub	fp, #16
13ea8     54 00 90 5D |  if_ne	jmp	#LR__0536
13eac     14 50 05 F1 | 	add	fp, #20
13eb0     A8 92 CA FA | 	rdbyte	local04, fp wz
13eb4     14 50 85 F1 | 	sub	fp, #20
13eb8     44 00 90 AD |  if_e	jmp	#LR__0536
13ebc     15 50 05 F1 | 	add	fp, #21
13ec0     A8 94 CA FA | 	rdbyte	local05, fp wz
13ec4     15 50 85 F1 | 	sub	fp, #21
13ec8     34 00 90 AD |  if_e	jmp	#LR__0536
13ecc     16 50 05 F1 | 	add	fp, #22
13ed0     A8 96 CA FA | 	rdbyte	local06, fp wz
13ed4     16 50 85 F1 | 	sub	fp, #22
13ed8     24 00 90 AD |  if_e	jmp	#LR__0536
13edc     17 50 05 F1 | 	add	fp, #23
13ee0     A8 98 CA FA | 	rdbyte	local07, fp wz
13ee4     17 50 85 F1 | 	sub	fp, #23
13ee8     14 00 90 AD |  if_e	jmp	#LR__0536
13eec     18 50 05 F1 | 	add	fp, #24
13ef0     A8 9A CA FA | 	rdbyte	local08, fp wz
13ef4     18 50 85 F1 | 	sub	fp, #24
13ef8                 | '         params.esdTravelLimit == MOTION_LIMIT_OK &&
13ef8                 | '         params.esdSwitch &&
13ef8                 | '         params.servoOK &&
13ef8                 | '         params.forceGaugeCom &&
13ef8                 | '         params.servoCom &&
13ef8                 | '         params.rtcCom)
13ef8                 | '     {
13ef8                 | '         return STATE_MOTION;
13ef8     02 34 06 56 |  if_ne	mov	result1, #2
13efc     04 00 90 5D |  if_ne	jmp	#LR__0537
13f00                 | LR__0536
13f00                 | '     {
13f00                 | ' 
13f00                 | '         return STATE_MACHINECHECK;
13f00     01 34 06 F6 | 	mov	result1, #1
13f04                 | LR__0537
13f04     A8 F0 03 F6 | 	mov	ptra, fp
13f08     B3 00 A0 FD | 	call	#popregs_
13f0c                 | _state_machine_check_0569_ret
13f0c     2D 00 64 FD | 	ret
13f10                 | 
13f10                 | _state_machine_motion_0571
13f10     04 4C 05 F6 | 	mov	COUNT_, #4
13f14     A9 00 A0 FD | 	call	#pushregs_
13f18     3A 8D 02 F6 | 	mov	local01, arg01
13f1c     24 FF BF FD | 	call	#_state_machine_check_0569
13f20     1A 8F 02 F6 | 	mov	local02, result1
13f24     02 8E 0E F2 | 	cmp	local02, #2 wz
13f28     58 00 90 AD |  if_e	jmp	#LR__0541
13f2c     46 35 02 FB | 	rdlong	result1, local01
13f30     02 34 0E F2 | 	cmp	result1, #2 wz
13f34     30 00 90 5D |  if_ne	jmp	#LR__0539
13f38     0C 8C 06 F1 | 	add	local01, #12
13f3c     46 35 0A FB | 	rdlong	result1, local01 wz
13f40     0C 8C 86 F1 | 	sub	local01, #12
13f44     10 00 90 5D |  if_ne	jmp	#LR__0538
13f48     10 8C 06 F1 | 	add	local01, #16
13f4c     46 35 CA FA | 	rdbyte	result1, local01 wz
13f50     10 8C 86 F1 | 	sub	local01, #16
13f54     10 00 90 5D |  if_ne	jmp	#LR__0539
13f58                 | LR__0538
13f58     18 8C 06 F1 | 	add	local01, #24
13f5c     46 09 68 FC | 	wrlong	#4, local01
13f60     18 8C 86 F1 | 	sub	local01, #24
13f64     0C 00 90 FD | 	jmp	#LR__0540
13f68                 | LR__0539
13f68     18 8C 06 F1 | 	add	local01, #24
13f6c     46 01 68 FC | 	wrlong	#0, local01
13f70     18 8C 86 F1 | 	sub	local01, #24
13f74                 | LR__0540
13f74     20 8C 06 F1 | 	add	local01, #32
13f78     46 01 68 FC | 	wrlong	#0, local01
13f7c                 | '         {
13f7c                 | '             machineState->motionParameters.status = STATUS_DISABLED;
13f7c                 | '         }
13f7c                 | ' 
13f7c                 | '         machineState->motionParameters.mode = MODE_MANUAL;
13f7c                 | '         return newState;
13f7c     47 35 02 F6 | 	mov	result1, local02
13f80     04 01 90 FD | 	jmp	#LR__0554
13f84                 | LR__0541
13f84     18 8C 06 F1 | 	add	local01, #24
13f88     46 91 0A FB | 	rdlong	local03, local01 wz
13f8c     18 8C 86 F1 | 	sub	local01, #24
13f90     E8 00 90 AD |  if_e	jmp	#LR__0552
13f94                 | '     {
13f94                 | '         switch (machineState->motionParameters.condition)
13f94     1C 8C 06 F1 | 	add	local01, #28
13f98     46 93 02 FB | 	rdlong	local04, local01
13f9c     1C 8C 86 F1 | 	sub	local01, #28
13fa0     09 92 26 F3 | 	fle	local04, #9
13fa4     30 92 62 FD | 	jmprel	local04
13fa8                 | LR__0542
13fa8     24 00 90 FD | 	jmp	#LR__0543
13fac     2C 00 90 FD | 	jmp	#LR__0544
13fb0     34 00 90 FD | 	jmp	#LR__0545
13fb4     3C 00 90 FD | 	jmp	#LR__0546
13fb8     44 00 90 FD | 	jmp	#LR__0547
13fbc     4C 00 90 FD | 	jmp	#LR__0548
13fc0     54 00 90 FD | 	jmp	#LR__0549
13fc4     5C 00 90 FD | 	jmp	#LR__0550
13fc8     84 00 90 FD | 	jmp	#LR__0551
13fcc     B4 00 90 FD | 	jmp	#LR__0553
13fd0                 | LR__0543
13fd0     18 8C 06 F1 | 	add	local01, #24
13fd4     46 05 68 FC | 	wrlong	#2, local01
13fd8                 | '             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
13fd8                 | '             break;
13fd8     A8 00 90 FD | 	jmp	#LR__0553
13fdc                 | LR__0544
13fdc     18 8C 06 F1 | 	add	local01, #24
13fe0     46 05 68 FC | 	wrlong	#2, local01
13fe4                 | '             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
13fe4                 | '             break;
13fe4     9C 00 90 FD | 	jmp	#LR__0553
13fe8                 | LR__0545
13fe8     18 8C 06 F1 | 	add	local01, #24
13fec     46 07 68 FC | 	wrlong	#3, local01
13ff0                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13ff0                 | '             break;
13ff0     90 00 90 FD | 	jmp	#LR__0553
13ff4                 | LR__0546
13ff4     18 8C 06 F1 | 	add	local01, #24
13ff8     46 07 68 FC | 	wrlong	#3, local01
13ffc                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13ffc                 | '             break;
13ffc     84 00 90 FD | 	jmp	#LR__0553
14000                 | LR__0547
14000     18 8C 06 F1 | 	add	local01, #24
14004     46 07 68 FC | 	wrlong	#3, local01
14008                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
14008                 | '             break;
14008     78 00 90 FD | 	jmp	#LR__0553
1400c                 | LR__0548
1400c     18 8C 06 F1 | 	add	local01, #24
14010     46 07 68 FC | 	wrlong	#3, local01
14014                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
14014                 | '             break;
14014     6C 00 90 FD | 	jmp	#LR__0553
14018                 | LR__0549
14018     18 8C 06 F1 | 	add	local01, #24
1401c     46 07 68 FC | 	wrlong	#3, local01
14020                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
14020                 | '             break;
14020     60 00 90 FD | 	jmp	#LR__0553
14024                 | LR__0550
14024     18 8C 06 F1 | 	add	local01, #24
14028     46 93 02 FB | 	rdlong	local04, local01
1402c     18 8C 86 F1 | 	sub	local01, #24
14030     01 92 0E F2 | 	cmp	local04, #1 wz
14034     4C 00 90 AD |  if_e	jmp	#LR__0553
14038     18 8C 06 F1 | 	add	local01, #24
1403c     46 93 0A FB | 	rdlong	local04, local01 wz
14040     18 8C 86 F1 | 	sub	local01, #24
14044     18 8C 06 51 |  if_ne	add	local01, #24
14048     46 03 68 5C |  if_ne	wrlong	#1, local01
1404c                 | '             {
1404c                 | ' 
1404c                 | '                 machineState->motionParameters.status = STATUS_ENABLED;
1404c                 | '             }
1404c                 | '             break;
1404c     34 00 90 FD | 	jmp	#LR__0553
14050                 | LR__0551
14050     18 8C 06 F1 | 	add	local01, #24
14054     46 93 02 FB | 	rdlong	local04, local01
14058     18 8C 86 F1 | 	sub	local01, #24
1405c     01 92 0E F2 | 	cmp	local04, #1 wz
14060     20 00 90 AD |  if_e	jmp	#LR__0553
14064     18 8C 06 F1 | 	add	local01, #24
14068     46 93 0A FB | 	rdlong	local04, local01 wz
1406c     18 8C 86 F1 | 	sub	local01, #24
14070     18 8C 06 51 |  if_ne	add	local01, #24
14074     46 03 68 5C |  if_ne	wrlong	#1, local01
14078                 | '             {
14078                 | ' 
14078                 | '                 machineState->motionParameters.status = STATUS_ENABLED;
14078                 | '             }
14078                 | '             break;
14078     08 00 90 FD | 	jmp	#LR__0553
1407c                 | LR__0552
1407c     20 8C 06 F1 | 	add	local01, #32
14080     46 01 68 FC | 	wrlong	#0, local01
14084                 | LR__0553
14084                 | '     {
14084                 | '         machineState->motionParameters.mode = MODE_MANUAL;
14084                 | '     }
14084                 | ' 
14084                 | '     return STATE_MOTION;
14084     02 34 06 F6 | 	mov	result1, #2
14088                 | LR__0554
14088     A8 F0 03 F6 | 	mov	ptra, fp
1408c     B3 00 A0 FD | 	call	#popregs_
14090                 | _state_machine_motion_0571_ret
14090     2D 00 64 FD | 	ret
14094                 | 
14094                 | _state_machine_update_0572
14094     01 4C 05 F6 | 	mov	COUNT_, #1
14098     A9 00 A0 FD | 	call	#pushregs_
1409c     3A 8D 02 F6 | 	mov	local01, arg01
140a0                 | ' {
140a0                 | '     while(!_locktry(machineState->lock));
140a0     2C 8C 06 F1 | 	add	local01, #44
140a4     64 BF 9E FE | 	loc	pa,	#(@LR__0556-@LR__0555)
140a8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
140ac                 | LR__0555
140ac     46 75 02 FB | 	rdlong	arg01, local01
140b0     06 74 72 FD | 	locktry	arg01 wc
140b4     F4 FF 9F 3D |  if_ae	jmp	#LR__0555
140b8                 | LR__0556
140b8     2C 8C 86 F1 | 	sub	local01, #44
140bc     46 75 02 F6 | 	mov	arg01, local01
140c0     4C FE BF FD | 	call	#_state_machine_motion_0571
140c4     46 35 62 FC | 	wrlong	result1, local01
140c8     2C 8C 06 F1 | 	add	local01, #44
140cc     46 75 02 FB | 	rdlong	arg01, local01
140d0     07 74 72 FD | 	lockrel	arg01 wc
140d4     A8 F0 03 F6 | 	mov	ptra, fp
140d8     B3 00 A0 FD | 	call	#popregs_
140dc                 | _state_machine_update_0572_ret
140dc     2D 00 64 FD | 	ret
140e0                 | 
140e0                 | _double_to_json_0661
140e0     03 4C 05 F6 | 	mov	COUNT_, #3
140e4     A9 00 A0 FD | 	call	#pushregs_
140e8     53 01 00 FF 
140ec     D6 8C 06 F6 | 	mov	local01, ##@LR__2131
140f0     3B 8F 02 F6 | 	mov	local02, arg02
140f4     3C 91 02 F6 | 	mov	local03, arg03
140f8     46 77 02 F6 | 	mov	arg02, local01
140fc     F8 79 02 F6 | 	mov	arg03, ptra
14100     61 8F 66 FC | 	wrlong	local02, ptra++
14104     61 91 66 FC | 	wrlong	local03, ptra++
14108     D0 DD BE FD | 	call	#_fprintf
1410c     08 F0 87 F1 | 	sub	ptra, #8
14110     A8 F0 03 F6 | 	mov	ptra, fp
14114     B3 00 A0 FD | 	call	#popregs_
14118                 | _double_to_json_0661_ret
14118     2D 00 64 FD | 	ret
1411c                 | 
1411c                 | _int_to_json_0662
1411c     03 4C 05 F6 | 	mov	COUNT_, #3
14120     A9 00 A0 FD | 	call	#pushregs_
14124     53 01 00 FF 
14128     DE 8C 06 F6 | 	mov	local01, ##@LR__2132
1412c     3B 8F 02 F6 | 	mov	local02, arg02
14130     3C 91 02 F6 | 	mov	local03, arg03
14134     46 77 02 F6 | 	mov	arg02, local01
14138     F8 79 02 F6 | 	mov	arg03, ptra
1413c     61 8F 66 FC | 	wrlong	local02, ptra++
14140     61 91 66 FC | 	wrlong	local03, ptra++
14144     94 DD BE FD | 	call	#_fprintf
14148     08 F0 87 F1 | 	sub	ptra, #8
1414c     A8 F0 03 F6 | 	mov	ptra, fp
14150     B3 00 A0 FD | 	call	#popregs_
14154                 | _int_to_json_0662_ret
14154     2D 00 64 FD | 	ret
14158                 | 
14158                 | _string_to_json_0663
14158     03 4C 05 F6 | 	mov	COUNT_, #3
1415c     A9 00 A0 FD | 	call	#pushregs_
14160     53 01 00 FF 
14164     E6 8C 06 F6 | 	mov	local01, ##@LR__2133
14168     3B 8F 02 F6 | 	mov	local02, arg02
1416c     3C 91 02 F6 | 	mov	local03, arg03
14170     46 77 02 F6 | 	mov	arg02, local01
14174     F8 79 02 F6 | 	mov	arg03, ptra
14178     61 8F 66 FC | 	wrlong	local02, ptra++
1417c     61 91 66 FC | 	wrlong	local03, ptra++
14180     58 DD BE FD | 	call	#_fprintf
14184     08 F0 87 F1 | 	sub	ptra, #8
14188     A8 F0 03 F6 | 	mov	ptra, fp
1418c     B3 00 A0 FD | 	call	#popregs_
14190                 | _string_to_json_0663_ret
14190     2D 00 64 FD | 	ret
14194                 | 
14194                 | _json_property_to_string_0665
14194     02 4C 05 F6 | 	mov	COUNT_, #2
14198     A9 00 A0 FD | 	call	#pushregs_
1419c     3B 8D 02 F6 | 	mov	local01, arg02
141a0     78 21 BF FD | 	call	#_json_getProperty
141a4     1A 8F 0A F6 | 	mov	local02, result1 wz
141a8     64 00 90 5D |  if_ne	jmp	#LR__0557
141ac     00 74 06 F6 | 	mov	arg01, #0
141b0     1C 53 B1 FD | 	call	#__system___getiolock_1306
141b4     1A 75 02 F6 | 	mov	arg01, result1
141b8     B4 1A B1 FD | 	call	#__system___lockmem
141bc     53 01 00 FF 
141c0     F0 76 06 F6 | 	mov	arg02, ##@LR__2134
141c4     00 74 06 F6 | 	mov	arg01, #0
141c8     00 78 06 F6 | 	mov	arg03, #0
141cc     48 20 B1 FD | 	call	#__system___basic_print_string
141d0     00 74 06 F6 | 	mov	arg01, #0
141d4     46 77 02 F6 | 	mov	arg02, local01
141d8     00 78 06 F6 | 	mov	arg03, #0
141dc     38 20 B1 FD | 	call	#__system___basic_print_string
141e0     53 01 00 FF 
141e4     FC 76 06 F6 | 	mov	arg02, ##@LR__2135
141e8     00 74 06 F6 | 	mov	arg01, #0
141ec     00 78 06 F6 | 	mov	arg03, #0
141f0     24 20 B1 FD | 	call	#__system___basic_print_string
141f4     00 74 06 F6 | 	mov	arg01, #0
141f8     0A 76 06 F6 | 	mov	arg02, #10
141fc     00 78 06 F6 | 	mov	arg03, #0
14200     C8 1F B1 FD | 	call	#__system___basic_print_char
14204     00 74 06 F6 | 	mov	arg01, #0
14208     C4 52 B1 FD | 	call	#__system___getiolock_1306
1420c     1A 01 68 FC | 	wrlong	#0, result1
14210                 | LR__0557
14210                 | '     }
14210                 | '     return json_getValue(property);
14210                 | ' {
14210                 | '     return property->u.value;
14210     08 8E 06 F1 | 	add	local02, #8
14214     47 35 02 FB | 	rdlong	result1, local02
14218     A8 F0 03 F6 | 	mov	ptra, fp
1421c     B3 00 A0 FD | 	call	#popregs_
14220                 | _json_property_to_string_0665_ret
14220     2D 00 64 FD | 	ret
14224                 | 
14224                 | _json_property_to_int_0667
14224     02 4C 05 F6 | 	mov	COUNT_, #2
14228     A9 00 A0 FD | 	call	#pushregs_
1422c     3B 8D 02 F6 | 	mov	local01, arg02
14230     E8 20 BF FD | 	call	#_json_getProperty
14234     1A 8F 0A F6 | 	mov	local02, result1 wz
14238     14 00 90 AD |  if_e	jmp	#LR__0558
1423c     47 75 02 F6 | 	mov	arg01, local02
14240                 | ' {
14240                 | '     return json->type;
14240     10 74 06 F1 | 	add	arg01, #16
14244     3A 35 02 FB | 	rdlong	result1, arg01
14248     04 34 0E F2 | 	cmp	result1, #4 wz
1424c     64 00 90 AD |  if_e	jmp	#LR__0559
14250                 | LR__0558
14250     00 74 06 F6 | 	mov	arg01, #0
14254     78 52 B1 FD | 	call	#__system___getiolock_1306
14258     1A 75 02 F6 | 	mov	arg01, result1
1425c     10 1A B1 FD | 	call	#__system___lockmem
14260     53 01 00 FF 
14264     14 77 06 F6 | 	mov	arg02, ##@LR__2136
14268     00 74 06 F6 | 	mov	arg01, #0
1426c     00 78 06 F6 | 	mov	arg03, #0
14270     A4 1F B1 FD | 	call	#__system___basic_print_string
14274     00 74 06 F6 | 	mov	arg01, #0
14278     46 77 02 F6 | 	mov	arg02, local01
1427c     00 78 06 F6 | 	mov	arg03, #0
14280     94 1F B1 FD | 	call	#__system___basic_print_string
14284     53 01 00 FF 
14288     20 77 06 F6 | 	mov	arg02, ##@LR__2137
1428c     00 74 06 F6 | 	mov	arg01, #0
14290     00 78 06 F6 | 	mov	arg03, #0
14294     80 1F B1 FD | 	call	#__system___basic_print_string
14298     00 74 06 F6 | 	mov	arg01, #0
1429c     0A 76 06 F6 | 	mov	arg02, #10
142a0     00 78 06 F6 | 	mov	arg03, #0
142a4     24 1F B1 FD | 	call	#__system___basic_print_char
142a8     00 74 06 F6 | 	mov	arg01, #0
142ac     20 52 B1 FD | 	call	#__system___getiolock_1306
142b0     1A 01 68 FC | 	wrlong	#0, result1
142b4                 | LR__0559
142b4                 | '     }
142b4                 | '     return (int)json_getInteger(property);
142b4     47 75 02 F6 | 	mov	arg01, local02
142b8                 | ' {
142b8                 | '     return atoi(property->u.value);
142b8     08 74 06 F1 | 	add	arg01, #8
142bc     3A 75 02 FB | 	rdlong	arg01, arg01
142c0                 | ' {
142c0                 | '   return (int)atol(str);
142c0     B0 DF BE FD | 	call	#_atol
142c4     A8 F0 03 F6 | 	mov	ptra, fp
142c8     B3 00 A0 FD | 	call	#popregs_
142cc                 | _json_property_to_int_0667_ret
142cc     2D 00 64 FD | 	ret
142d0                 | 
142d0                 | _json_property_to_double_0669
142d0     02 4C 05 F6 | 	mov	COUNT_, #2
142d4     A9 00 A0 FD | 	call	#pushregs_
142d8     3B 8D 02 F6 | 	mov	local01, arg02
142dc     3C 20 BF FD | 	call	#_json_getProperty
142e0     1A 8F 0A F6 | 	mov	local02, result1 wz
142e4     14 00 90 AD |  if_e	jmp	#LR__0560
142e8     47 75 02 F6 | 	mov	arg01, local02
142ec                 | ' {
142ec                 | '     return json->type;
142ec     10 74 06 F1 | 	add	arg01, #16
142f0     3A 35 02 FB | 	rdlong	result1, arg01
142f4     05 34 0E F2 | 	cmp	result1, #5 wz
142f8     54 00 90 AD |  if_e	jmp	#LR__0561
142fc                 | LR__0560
142fc     00 74 06 F6 | 	mov	arg01, #0
14300     CC 51 B1 FD | 	call	#__system___getiolock_1306
14304     1A 75 02 F6 | 	mov	arg01, result1
14308     64 19 B1 FD | 	call	#__system___lockmem
1430c     53 01 00 FF 
14310     38 77 06 F6 | 	mov	arg02, ##@LR__2138
14314     00 74 06 F6 | 	mov	arg01, #0
14318     00 78 06 F6 | 	mov	arg03, #0
1431c     F8 1E B1 FD | 	call	#__system___basic_print_string
14320     00 74 06 F6 | 	mov	arg01, #0
14324     46 77 02 F6 | 	mov	arg02, local01
14328     00 78 06 F6 | 	mov	arg03, #0
1432c     E8 1E B1 FD | 	call	#__system___basic_print_string
14330     53 01 00 FF 
14334     44 77 06 F6 | 	mov	arg02, ##@LR__2139
14338     00 74 06 F6 | 	mov	arg01, #0
1433c     00 78 06 F6 | 	mov	arg03, #0
14340     D4 1E B1 FD | 	call	#__system___basic_print_string
14344     00 74 06 F6 | 	mov	arg01, #0
14348     84 51 B1 FD | 	call	#__system___getiolock_1306
1434c     1A 01 68 FC | 	wrlong	#0, result1
14350                 | LR__0561
14350                 | '     }
14350                 | '     return json_getReal(property);
14350     47 75 02 F6 | 	mov	arg01, local02
14354                 | ' {
14354                 | '     return atof(property->u.value);
14354     08 74 06 F1 | 	add	arg01, #8
14358     3A 75 02 FB | 	rdlong	arg01, arg01
1435c     70 D7 BF FD | 	call	#_atof
14360     A8 F0 03 F6 | 	mov	ptra, fp
14364     B3 00 A0 FD | 	call	#popregs_
14368                 | _json_property_to_double_0669_ret
14368     2D 00 64 FD | 	ret
1436c                 | 
1436c                 | _json_property_to_double_array_0673
1436c     04 4C 05 F6 | 	mov	COUNT_, #4
14370     A9 00 A0 FD | 	call	#pushregs_
14374     3A 8D 02 F6 | 	mov	local01, arg01
14378     3B 75 02 F6 | 	mov	arg01, arg02
1437c     3C 77 02 F6 | 	mov	arg02, arg03
14380     98 1F BF FD | 	call	#_json_getProperty
14384     00 8E 06 F6 | 	mov	local02, #0
14388                 | ' {
14388                 | '     return json->u.c.child;
14388     08 34 06 F1 | 	add	result1, #8
1438c     1A 35 02 FB | 	rdlong	result1, result1
14390     1A 91 0A F6 | 	mov	local03, result1 wz
14394                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
14394     A4 00 90 AD |  if_e	jmp	#LR__0563
14398                 | LR__0562
14398     47 93 02 F6 | 	mov	local04, local02
1439c     02 92 66 F0 | 	shl	local04, #2
143a0     46 93 02 F1 | 	add	local04, local01
143a4     48 75 02 F6 | 	mov	arg01, local03
143a8                 | ' {
143a8                 | '     return atof(property->u.value);
143a8     08 74 06 F1 | 	add	arg01, #8
143ac     3A 75 02 FB | 	rdlong	arg01, arg01
143b0     1C D7 BF FD | 	call	#_atof
143b4     49 35 62 FC | 	wrlong	result1, local04
143b8     00 74 06 F6 | 	mov	arg01, #0
143bc     10 51 B1 FD | 	call	#__system___getiolock_1306
143c0     1A 75 02 F6 | 	mov	arg01, result1
143c4     A8 18 B1 FD | 	call	#__system___lockmem
143c8     53 01 00 FF 
143cc     5C 77 06 F6 | 	mov	arg02, ##@LR__2140
143d0     00 74 06 F6 | 	mov	arg01, #0
143d4     00 78 06 F6 | 	mov	arg03, #0
143d8     3C 1E B1 FD | 	call	#__system___basic_print_string
143dc     47 93 02 F6 | 	mov	local04, local02
143e0     02 92 66 F0 | 	shl	local04, #2
143e4     46 93 02 F1 | 	add	local04, local01
143e8     49 77 02 FB | 	rdlong	arg02, local04
143ec     00 74 06 F6 | 	mov	arg01, #0
143f0     00 78 06 F6 | 	mov	arg03, #0
143f4     66 7A 06 F6 | 	mov	arg04, #102
143f8     74 3C B1 FD | 	call	#__system___basic_print_float
143fc     53 01 00 FF 
14400     63 77 06 F6 | 	mov	arg02, ##@LR__2141
14404     00 74 06 F6 | 	mov	arg01, #0
14408     00 78 06 F6 | 	mov	arg03, #0
1440c     08 1E B1 FD | 	call	#__system___basic_print_string
14410     00 74 06 F6 | 	mov	arg01, #0
14414     0A 76 06 F6 | 	mov	arg02, #10
14418     00 78 06 F6 | 	mov	arg03, #0
1441c     AC 1D B1 FD | 	call	#__system___basic_print_char
14420     00 74 06 F6 | 	mov	arg01, #0
14424     A8 50 B1 FD | 	call	#__system___getiolock_1306
14428     1A 01 68 FC | 	wrlong	#0, result1
1442c     01 8E 06 F1 | 	add	local02, #1
14430                 | ' {
14430                 | '     return json->sibling;
14430     48 35 02 FB | 	rdlong	result1, local03
14434     1A 91 0A F6 | 	mov	local03, result1 wz
14438     5C FF 9F 5D |  if_ne	jmp	#LR__0562
1443c                 | LR__0563
1443c                 | '         index++;
1443c                 | '     }
1443c                 | ' 
1443c                 | '     return index;
1443c     47 35 02 F6 | 	mov	result1, local02
14440     A8 F0 03 F6 | 	mov	ptra, fp
14444     B3 00 A0 FD | 	call	#popregs_
14448                 | _json_property_to_double_array_0673_ret
14448     2D 00 64 FD | 	ret
1444c                 | 
1444c                 | _json_to_machine_configuration_0679
1444c     02 4C 05 F6 | 	mov	COUNT_, #2
14450     A9 00 A0 FD | 	call	#pushregs_
14454     3A 8D 02 F6 | 	mov	local01, arg01
14458     3B 8F 02 F6 | 	mov	local02, arg02
1445c     53 01 00 FF 
14460     65 77 06 F6 | 	mov	arg02, ##@LR__2142
14464     46 75 02 F6 | 	mov	arg01, local01
14468     28 FD BF FD | 	call	#_json_property_to_string_0665
1446c     1A 77 02 F6 | 	mov	arg02, result1
14470     47 75 02 F6 | 	mov	arg01, local02
14474     14 78 06 F6 | 	mov	arg03, #20
14478     70 1B BF FD | 	call	#_strncpy
1447c     53 01 00 FF 
14480     70 77 06 F6 | 	mov	arg02, ##@LR__2143
14484     46 75 02 F6 | 	mov	arg01, local01
14488     44 FE BF FD | 	call	#_json_property_to_double_0669
1448c     18 8E 06 F1 | 	add	local02, #24
14490     47 35 62 FC | 	wrlong	result1, local02
14494     53 01 00 FF 
14498     7E 77 06 F6 | 	mov	arg02, ##@LR__2144
1449c     46 75 02 F6 | 	mov	arg01, local01
144a0     2C FE BF FD | 	call	#_json_property_to_double_0669
144a4     04 8E 86 F1 | 	sub	local02, #4
144a8     47 35 62 FC | 	wrlong	result1, local02
144ac     53 01 00 FF 
144b0     8F 77 06 F6 | 	mov	arg02, ##@LR__2145
144b4     46 75 02 F6 | 	mov	arg01, local01
144b8     14 FE BF FD | 	call	#_json_property_to_double_0669
144bc     08 8E 06 F1 | 	add	local02, #8
144c0     47 35 62 FC | 	wrlong	result1, local02
144c4     53 01 00 FF 
144c8     9D 77 06 F6 | 	mov	arg02, ##@LR__2146
144cc     46 75 02 F6 | 	mov	arg01, local01
144d0     FC FD BF FD | 	call	#_json_property_to_double_0669
144d4     04 8E 06 F1 | 	add	local02, #4
144d8     47 35 62 FC | 	wrlong	result1, local02
144dc     53 01 00 FF 
144e0     A8 77 06 F6 | 	mov	arg02, ##@LR__2147
144e4     46 75 02 F6 | 	mov	arg01, local01
144e8     E4 FD BF FD | 	call	#_json_property_to_double_0669
144ec     04 8E 06 F1 | 	add	local02, #4
144f0     47 35 62 FC | 	wrlong	result1, local02
144f4     53 01 00 FF 
144f8     B8 77 06 F6 | 	mov	arg02, ##@LR__2148
144fc     46 75 02 F6 | 	mov	arg01, local01
14500     CC FD BF FD | 	call	#_json_property_to_double_0669
14504     04 8E 06 F1 | 	add	local02, #4
14508     47 35 62 FC | 	wrlong	result1, local02
1450c     53 01 00 FF 
14510     C6 77 06 F6 | 	mov	arg02, ##@LR__2149
14514     46 75 02 F6 | 	mov	arg01, local01
14518     B4 FD BF FD | 	call	#_json_property_to_double_0669
1451c     04 8E 06 F1 | 	add	local02, #4
14520     47 35 62 FC | 	wrlong	result1, local02
14524     04 8E 06 F1 | 	add	local02, #4
14528     53 01 00 FF 
1452c     CB 77 06 F6 | 	mov	arg02, ##@LR__2150
14530     46 75 02 F6 | 	mov	arg01, local01
14534     5C FC BF FD | 	call	#_json_property_to_string_0665
14538     1A 77 02 F6 | 	mov	arg02, result1
1453c     47 75 02 F6 | 	mov	arg01, local02
14540     14 78 06 F6 | 	mov	arg03, #20
14544     A4 1A BF FD | 	call	#_strncpy
14548     53 01 00 FF 
1454c     E1 77 06 F6 | 	mov	arg02, ##@LR__2151
14550     46 75 02 F6 | 	mov	arg01, local01
14554     78 FD BF FD | 	call	#_json_property_to_double_0669
14558     14 8E 06 F1 | 	add	local02, #20
1455c     47 35 62 FC | 	wrlong	result1, local02
14560     04 8E 06 F1 | 	add	local02, #4
14564     53 01 00 FF 
14568     FF 77 06 F6 | 	mov	arg02, ##@LR__2152
1456c     46 75 02 F6 | 	mov	arg01, local01
14570     20 FC BF FD | 	call	#_json_property_to_string_0665
14574     1A 77 02 F6 | 	mov	arg02, result1
14578     47 75 02 F6 | 	mov	arg01, local02
1457c     14 78 06 F6 | 	mov	arg03, #20
14580     68 1A BF FD | 	call	#_strncpy
14584     54 01 00 FF 
14588     0B 76 06 F6 | 	mov	arg02, ##@LR__2153
1458c     46 75 02 F6 | 	mov	arg01, local01
14590     3C FD BF FD | 	call	#_json_property_to_double_0669
14594     14 8E 06 F1 | 	add	local02, #20
14598     47 35 62 FC | 	wrlong	result1, local02
1459c     54 01 00 FF 
145a0     24 76 06 F6 | 	mov	arg02, ##@LR__2154
145a4     46 75 02 F6 | 	mov	arg01, local01
145a8     78 FC BF FD | 	call	#_json_property_to_int_0667
145ac     04 8E 06 F1 | 	add	local02, #4
145b0     47 35 62 FC | 	wrlong	result1, local02
145b4     A8 F0 03 F6 | 	mov	ptra, fp
145b8     B3 00 A0 FD | 	call	#popregs_
145bc                 | _json_to_machine_configuration_0679_ret
145bc     2D 00 64 FD | 	ret
145c0                 | 
145c0                 | _json_to_machine_performance_0680
145c0     02 4C 05 F6 | 	mov	COUNT_, #2
145c4     A9 00 A0 FD | 	call	#pushregs_
145c8     3A 8D 02 F6 | 	mov	local01, arg01
145cc     3B 8F 02 F6 | 	mov	local02, arg02
145d0     54 01 00 FF 
145d4     3C 76 06 F6 | 	mov	arg02, ##@LR__2155
145d8     46 75 02 F6 | 	mov	arg01, local01
145dc     F0 FC BF FD | 	call	#_json_property_to_double_0669
145e0     47 35 62 FC | 	wrlong	result1, local02
145e4     54 01 00 FF 
145e8     4D 76 06 F6 | 	mov	arg02, ##@LR__2156
145ec     46 75 02 F6 | 	mov	arg01, local01
145f0     DC FC BF FD | 	call	#_json_property_to_double_0669
145f4     04 8E 06 F1 | 	add	local02, #4
145f8     47 35 62 FC | 	wrlong	result1, local02
145fc     54 01 00 FF 
14600     5E 76 06 F6 | 	mov	arg02, ##@LR__2157
14604     46 75 02 F6 | 	mov	arg01, local01
14608     C4 FC BF FD | 	call	#_json_property_to_double_0669
1460c     04 8E 06 F1 | 	add	local02, #4
14610     47 35 62 FC | 	wrlong	result1, local02
14614     54 01 00 FF 
14618     6F 76 06 F6 | 	mov	arg02, ##@LR__2158
1461c     46 75 02 F6 | 	mov	arg01, local01
14620     AC FC BF FD | 	call	#_json_property_to_double_0669
14624     04 8E 06 F1 | 	add	local02, #4
14628     47 35 62 FC | 	wrlong	result1, local02
1462c     54 01 00 FF 
14630     84 76 06 F6 | 	mov	arg02, ##@LR__2159
14634     46 75 02 F6 | 	mov	arg01, local01
14638     94 FC BF FD | 	call	#_json_property_to_double_0669
1463c     04 8E 06 F1 | 	add	local02, #4
14640     47 35 62 FC | 	wrlong	result1, local02
14644     54 01 00 FF 
14648     9A 76 06 F6 | 	mov	arg02, ##@LR__2160
1464c     46 75 02 F6 | 	mov	arg01, local01
14650     7C FC BF FD | 	call	#_json_property_to_double_0669
14654     04 8E 06 F1 | 	add	local02, #4
14658     47 35 62 FC | 	wrlong	result1, local02
1465c     54 01 00 FF 
14660     B4 76 06 F6 | 	mov	arg02, ##@LR__2161
14664     46 75 02 F6 | 	mov	arg01, local01
14668     64 FC BF FD | 	call	#_json_property_to_double_0669
1466c     04 8E 06 F1 | 	add	local02, #4
14670     47 35 62 FC | 	wrlong	result1, local02
14674     A8 F0 03 F6 | 	mov	ptra, fp
14678     B3 00 A0 FD | 	call	#popregs_
1467c                 | _json_to_machine_performance_0680_ret
1467c     2D 00 64 FD | 	ret
14680                 | 
14680                 | _machine_configuration_to_json_0681
14680     02 4C 05 F6 | 	mov	COUNT_, #2
14684     A9 00 A0 FD | 	call	#pushregs_
14688     3A 8D 02 F6 | 	mov	local01, arg01
1468c     3B 8F 02 F6 | 	mov	local02, arg02
14690     54 01 00 FF 
14694     CF 76 06 F6 | 	mov	arg02, ##@LR__2162
14698     46 75 02 F6 | 	mov	arg01, local01
1469c     3C D8 BE FD | 	call	#_fprintf
146a0     54 01 00 FF 
146a4     E1 76 06 F6 | 	mov	arg02, ##@LR__2163
146a8     46 75 02 F6 | 	mov	arg01, local01
146ac     47 79 02 F6 | 	mov	arg03, local02
146b0     A4 FA BF FD | 	call	#_string_to_json_0663
146b4     54 01 00 FF 
146b8     EC 76 06 F6 | 	mov	arg02, ##@LR__2164
146bc     46 75 02 F6 | 	mov	arg01, local01
146c0     18 D8 BE FD | 	call	#_fprintf
146c4     54 01 00 FF 
146c8     EE 76 06 F6 | 	mov	arg02, ##@LR__2165
146cc     18 8E 06 F1 | 	add	local02, #24
146d0     47 79 02 FB | 	rdlong	arg03, local02
146d4     46 75 02 F6 | 	mov	arg01, local01
146d8     04 FA BF FD | 	call	#_double_to_json_0661
146dc     54 01 00 FF 
146e0     FC 76 06 F6 | 	mov	arg02, ##@LR__2166
146e4     46 75 02 F6 | 	mov	arg01, local01
146e8     F0 D7 BE FD | 	call	#_fprintf
146ec     54 01 00 FF 
146f0     FE 76 06 F6 | 	mov	arg02, ##@LR__2167
146f4     04 8E 86 F1 | 	sub	local02, #4
146f8     47 79 02 FB | 	rdlong	arg03, local02
146fc     46 75 02 F6 | 	mov	arg01, local01
14700     DC F9 BF FD | 	call	#_double_to_json_0661
14704     54 01 00 FF 
14708     0F 77 06 F6 | 	mov	arg02, ##@LR__2168
1470c     46 75 02 F6 | 	mov	arg01, local01
14710     C8 D7 BE FD | 	call	#_fprintf
14714     54 01 00 FF 
14718     11 77 06 F6 | 	mov	arg02, ##@LR__2169
1471c     08 8E 06 F1 | 	add	local02, #8
14720     47 79 02 FB | 	rdlong	arg03, local02
14724     46 75 02 F6 | 	mov	arg01, local01
14728     B4 F9 BF FD | 	call	#_double_to_json_0661
1472c     54 01 00 FF 
14730     1F 77 06 F6 | 	mov	arg02, ##@LR__2170
14734     46 75 02 F6 | 	mov	arg01, local01
14738     A0 D7 BE FD | 	call	#_fprintf
1473c     54 01 00 FF 
14740     21 77 06 F6 | 	mov	arg02, ##@LR__2171
14744     04 8E 06 F1 | 	add	local02, #4
14748     47 79 02 FB | 	rdlong	arg03, local02
1474c     46 75 02 F6 | 	mov	arg01, local01
14750     8C F9 BF FD | 	call	#_double_to_json_0661
14754     54 01 00 FF 
14758     2C 77 06 F6 | 	mov	arg02, ##@LR__2172
1475c     46 75 02 F6 | 	mov	arg01, local01
14760     78 D7 BE FD | 	call	#_fprintf
14764     54 01 00 FF 
14768     2E 77 06 F6 | 	mov	arg02, ##@LR__2173
1476c     04 8E 06 F1 | 	add	local02, #4
14770     47 79 02 FB | 	rdlong	arg03, local02
14774     46 75 02 F6 | 	mov	arg01, local01
14778     64 F9 BF FD | 	call	#_double_to_json_0661
1477c     54 01 00 FF 
14780     3E 77 06 F6 | 	mov	arg02, ##@LR__2174
14784     46 75 02 F6 | 	mov	arg01, local01
14788     50 D7 BE FD | 	call	#_fprintf
1478c     54 01 00 FF 
14790     40 77 06 F6 | 	mov	arg02, ##@LR__2175
14794     04 8E 06 F1 | 	add	local02, #4
14798     47 79 02 FB | 	rdlong	arg03, local02
1479c     46 75 02 F6 | 	mov	arg01, local01
147a0     3C F9 BF FD | 	call	#_double_to_json_0661
147a4     54 01 00 FF 
147a8     4E 77 06 F6 | 	mov	arg02, ##@LR__2176
147ac     46 75 02 F6 | 	mov	arg01, local01
147b0     28 D7 BE FD | 	call	#_fprintf
147b4     54 01 00 FF 
147b8     50 77 06 F6 | 	mov	arg02, ##@LR__2177
147bc     04 8E 06 F1 | 	add	local02, #4
147c0     47 79 02 FB | 	rdlong	arg03, local02
147c4     46 75 02 F6 | 	mov	arg01, local01
147c8     14 F9 BF FD | 	call	#_double_to_json_0661
147cc     54 01 00 FF 
147d0     55 77 06 F6 | 	mov	arg02, ##@LR__2178
147d4     46 75 02 F6 | 	mov	arg01, local01
147d8     00 D7 BE FD | 	call	#_fprintf
147dc     54 01 00 FF 
147e0     57 77 06 F6 | 	mov	arg02, ##@LR__2179
147e4     04 8E 06 F1 | 	add	local02, #4
147e8     47 79 02 F6 | 	mov	arg03, local02
147ec     46 75 02 F6 | 	mov	arg01, local01
147f0     64 F9 BF FD | 	call	#_string_to_json_0663
147f4     54 01 00 FF 
147f8     6D 77 06 F6 | 	mov	arg02, ##@LR__2180
147fc     46 75 02 F6 | 	mov	arg01, local01
14800     D8 D6 BE FD | 	call	#_fprintf
14804     54 01 00 FF 
14808     6F 77 06 F6 | 	mov	arg02, ##@LR__2181
1480c     14 8E 06 F1 | 	add	local02, #20
14810     47 79 02 FB | 	rdlong	arg03, local02
14814     46 75 02 F6 | 	mov	arg01, local01
14818     C4 F8 BF FD | 	call	#_double_to_json_0661
1481c     54 01 00 FF 
14820     8D 77 06 F6 | 	mov	arg02, ##@LR__2182
14824     46 75 02 F6 | 	mov	arg01, local01
14828     B0 D6 BE FD | 	call	#_fprintf
1482c     54 01 00 FF 
14830     8F 77 06 F6 | 	mov	arg02, ##@LR__2183
14834     04 8E 06 F1 | 	add	local02, #4
14838     47 79 02 F6 | 	mov	arg03, local02
1483c     46 75 02 F6 | 	mov	arg01, local01
14840     14 F9 BF FD | 	call	#_string_to_json_0663
14844     54 01 00 FF 
14848     9B 77 06 F6 | 	mov	arg02, ##@LR__2184
1484c     46 75 02 F6 | 	mov	arg01, local01
14850     88 D6 BE FD | 	call	#_fprintf
14854     54 01 00 FF 
14858     9D 77 06 F6 | 	mov	arg02, ##@LR__2185
1485c     14 8E 06 F1 | 	add	local02, #20
14860     47 79 02 FB | 	rdlong	arg03, local02
14864     46 75 02 F6 | 	mov	arg01, local01
14868     74 F8 BF FD | 	call	#_double_to_json_0661
1486c     54 01 00 FF 
14870     B6 77 06 F6 | 	mov	arg02, ##@LR__2186
14874     46 75 02 F6 | 	mov	arg01, local01
14878     60 D6 BE FD | 	call	#_fprintf
1487c     54 01 00 FF 
14880     B8 77 06 F6 | 	mov	arg02, ##@LR__2187
14884     04 8E 06 F1 | 	add	local02, #4
14888     47 79 02 FB | 	rdlong	arg03, local02
1488c     46 75 02 F6 | 	mov	arg01, local01
14890     88 F8 BF FD | 	call	#_int_to_json_0662
14894     54 01 00 FF 
14898     D0 77 06 F6 | 	mov	arg02, ##@LR__2188
1489c     46 75 02 F6 | 	mov	arg01, local01
148a0     38 D6 BE FD | 	call	#_fprintf
148a4     A8 F0 03 F6 | 	mov	ptra, fp
148a8     B3 00 A0 FD | 	call	#popregs_
148ac                 | _machine_configuration_to_json_0681_ret
148ac     2D 00 64 FD | 	ret
148b0                 | 
148b0                 | _machine_performance_to_json_0682
148b0     02 4C 05 F6 | 	mov	COUNT_, #2
148b4     A9 00 A0 FD | 	call	#pushregs_
148b8     3A 8D 02 F6 | 	mov	local01, arg01
148bc     3B 8F 02 F6 | 	mov	local02, arg02
148c0     54 01 00 FF 
148c4     D2 77 06 F6 | 	mov	arg02, ##@LR__2189
148c8     46 75 02 F6 | 	mov	arg01, local01
148cc     0C D6 BE FD | 	call	#_fprintf
148d0     54 01 00 FF 
148d4     E2 77 06 F6 | 	mov	arg02, ##@LR__2190
148d8     47 79 02 FB | 	rdlong	arg03, local02
148dc     46 75 02 F6 | 	mov	arg01, local01
148e0     FC F7 BF FD | 	call	#_double_to_json_0661
148e4     54 01 00 FF 
148e8     F3 77 06 F6 | 	mov	arg02, ##@LR__2191
148ec     46 75 02 F6 | 	mov	arg01, local01
148f0     E8 D5 BE FD | 	call	#_fprintf
148f4     54 01 00 FF 
148f8     F5 77 06 F6 | 	mov	arg02, ##@LR__2192
148fc     04 8E 06 F1 | 	add	local02, #4
14900     47 79 02 FB | 	rdlong	arg03, local02
14904     46 75 02 F6 | 	mov	arg01, local01
14908     D4 F7 BF FD | 	call	#_double_to_json_0661
1490c     55 01 00 FF 
14910     06 76 06 F6 | 	mov	arg02, ##@LR__2193
14914     46 75 02 F6 | 	mov	arg01, local01
14918     C0 D5 BE FD | 	call	#_fprintf
1491c     55 01 00 FF 
14920     08 76 06 F6 | 	mov	arg02, ##@LR__2194
14924     04 8E 06 F1 | 	add	local02, #4
14928     47 79 02 FB | 	rdlong	arg03, local02
1492c     46 75 02 F6 | 	mov	arg01, local01
14930     AC F7 BF FD | 	call	#_double_to_json_0661
14934     55 01 00 FF 
14938     19 76 06 F6 | 	mov	arg02, ##@LR__2195
1493c     46 75 02 F6 | 	mov	arg01, local01
14940     98 D5 BE FD | 	call	#_fprintf
14944     55 01 00 FF 
14948     1B 76 06 F6 | 	mov	arg02, ##@LR__2196
1494c     04 8E 06 F1 | 	add	local02, #4
14950     47 79 02 FB | 	rdlong	arg03, local02
14954     46 75 02 F6 | 	mov	arg01, local01
14958     84 F7 BF FD | 	call	#_double_to_json_0661
1495c     55 01 00 FF 
14960     30 76 06 F6 | 	mov	arg02, ##@LR__2197
14964     46 75 02 F6 | 	mov	arg01, local01
14968     70 D5 BE FD | 	call	#_fprintf
1496c     55 01 00 FF 
14970     32 76 06 F6 | 	mov	arg02, ##@LR__2198
14974     04 8E 06 F1 | 	add	local02, #4
14978     47 79 02 FB | 	rdlong	arg03, local02
1497c     46 75 02 F6 | 	mov	arg01, local01
14980     5C F7 BF FD | 	call	#_double_to_json_0661
14984     55 01 00 FF 
14988     48 76 06 F6 | 	mov	arg02, ##@LR__2199
1498c     46 75 02 F6 | 	mov	arg01, local01
14990     48 D5 BE FD | 	call	#_fprintf
14994     55 01 00 FF 
14998     4A 76 06 F6 | 	mov	arg02, ##@LR__2200
1499c     04 8E 06 F1 | 	add	local02, #4
149a0     47 79 02 FB | 	rdlong	arg03, local02
149a4     46 75 02 F6 | 	mov	arg01, local01
149a8     34 F7 BF FD | 	call	#_double_to_json_0661
149ac     55 01 00 FF 
149b0     64 76 06 F6 | 	mov	arg02, ##@LR__2201
149b4     46 75 02 F6 | 	mov	arg01, local01
149b8     20 D5 BE FD | 	call	#_fprintf
149bc     55 01 00 FF 
149c0     66 76 06 F6 | 	mov	arg02, ##@LR__2202
149c4     04 8E 06 F1 | 	add	local02, #4
149c8     47 79 02 FB | 	rdlong	arg03, local02
149cc     46 75 02 F6 | 	mov	arg01, local01
149d0     0C F7 BF FD | 	call	#_double_to_json_0661
149d4     55 01 00 FF 
149d8     81 76 06 F6 | 	mov	arg02, ##@LR__2203
149dc     46 75 02 F6 | 	mov	arg01, local01
149e0     F8 D4 BE FD | 	call	#_fprintf
149e4     A8 F0 03 F6 | 	mov	ptra, fp
149e8     B3 00 A0 FD | 	call	#popregs_
149ec                 | _machine_performance_to_json_0682_ret
149ec     2D 00 64 FD | 	ret
149f0                 | 
149f0                 | _json_print_machine_configuration_0696
149f0     01 4C 05 F6 | 	mov	COUNT_, #1
149f4     A9 00 A0 FD | 	call	#pushregs_
149f8     3A 8D 02 F6 | 	mov	local01, arg01
149fc     00 74 06 F6 | 	mov	arg01, #0
14a00     CC 4A B1 FD | 	call	#__system___getiolock_1306
14a04     1A 75 02 F6 | 	mov	arg01, result1
14a08     64 12 B1 FD | 	call	#__system___lockmem
14a0c     55 01 00 FF 
14a10     83 76 06 F6 | 	mov	arg02, ##@LR__2204
14a14     00 74 06 F6 | 	mov	arg01, #0
14a18     00 78 06 F6 | 	mov	arg03, #0
14a1c     F8 17 B1 FD | 	call	#__system___basic_print_string
14a20     00 74 06 F6 | 	mov	arg01, #0
14a24     0A 76 06 F6 | 	mov	arg02, #10
14a28     00 78 06 F6 | 	mov	arg03, #0
14a2c     9C 17 B1 FD | 	call	#__system___basic_print_char
14a30     00 74 06 F6 | 	mov	arg01, #0
14a34     98 4A B1 FD | 	call	#__system___getiolock_1306
14a38     1A 01 68 FC | 	wrlong	#0, result1
14a3c     00 74 06 F6 | 	mov	arg01, #0
14a40     8C 4A B1 FD | 	call	#__system___getiolock_1306
14a44     1A 75 02 F6 | 	mov	arg01, result1
14a48     24 12 B1 FD | 	call	#__system___lockmem
14a4c     55 01 00 FF 
14a50     9A 76 06 F6 | 	mov	arg02, ##@LR__2205
14a54     00 74 06 F6 | 	mov	arg01, #0
14a58     00 78 06 F6 | 	mov	arg03, #0
14a5c     B8 17 B1 FD | 	call	#__system___basic_print_string
14a60     00 74 06 F6 | 	mov	arg01, #0
14a64     46 77 02 F6 | 	mov	arg02, local01
14a68     00 78 06 F6 | 	mov	arg03, #0
14a6c     A8 17 B1 FD | 	call	#__system___basic_print_string
14a70     00 74 06 F6 | 	mov	arg01, #0
14a74     0A 76 06 F6 | 	mov	arg02, #10
14a78     00 78 06 F6 | 	mov	arg03, #0
14a7c     4C 17 B1 FD | 	call	#__system___basic_print_char
14a80     00 74 06 F6 | 	mov	arg01, #0
14a84     48 4A B1 FD | 	call	#__system___getiolock_1306
14a88     1A 01 68 FC | 	wrlong	#0, result1
14a8c     00 74 06 F6 | 	mov	arg01, #0
14a90     3C 4A B1 FD | 	call	#__system___getiolock_1306
14a94     1A 75 02 F6 | 	mov	arg01, result1
14a98     D4 11 B1 FD | 	call	#__system___lockmem
14a9c     55 01 00 FF 
14aa0     AB 76 06 F6 | 	mov	arg02, ##@LR__2206
14aa4     00 74 06 F6 | 	mov	arg01, #0
14aa8     00 78 06 F6 | 	mov	arg03, #0
14aac     68 17 B1 FD | 	call	#__system___basic_print_string
14ab0     14 8C 06 F1 | 	add	local01, #20
14ab4     46 77 02 FB | 	rdlong	arg02, local01
14ab8     00 74 06 F6 | 	mov	arg01, #0
14abc     00 78 06 F6 | 	mov	arg03, #0
14ac0     66 7A 06 F6 | 	mov	arg04, #102
14ac4     A8 35 B1 FD | 	call	#__system___basic_print_float
14ac8     00 74 06 F6 | 	mov	arg01, #0
14acc     0A 76 06 F6 | 	mov	arg02, #10
14ad0     00 78 06 F6 | 	mov	arg03, #0
14ad4     F4 16 B1 FD | 	call	#__system___basic_print_char
14ad8     00 74 06 F6 | 	mov	arg01, #0
14adc     F0 49 B1 FD | 	call	#__system___getiolock_1306
14ae0     1A 01 68 FC | 	wrlong	#0, result1
14ae4     00 74 06 F6 | 	mov	arg01, #0
14ae8     E4 49 B1 FD | 	call	#__system___getiolock_1306
14aec     1A 75 02 F6 | 	mov	arg01, result1
14af0     7C 11 B1 FD | 	call	#__system___lockmem
14af4     55 01 00 FF 
14af8     C0 76 06 F6 | 	mov	arg02, ##@LR__2207
14afc     00 74 06 F6 | 	mov	arg01, #0
14b00     00 78 06 F6 | 	mov	arg03, #0
14b04     10 17 B1 FD | 	call	#__system___basic_print_string
14b08     04 8C 06 F1 | 	add	local01, #4
14b0c     46 77 02 FB | 	rdlong	arg02, local01
14b10     00 74 06 F6 | 	mov	arg01, #0
14b14     00 78 06 F6 | 	mov	arg03, #0
14b18     66 7A 06 F6 | 	mov	arg04, #102
14b1c     50 35 B1 FD | 	call	#__system___basic_print_float
14b20     00 74 06 F6 | 	mov	arg01, #0
14b24     0A 76 06 F6 | 	mov	arg02, #10
14b28     00 78 06 F6 | 	mov	arg03, #0
14b2c     9C 16 B1 FD | 	call	#__system___basic_print_char
14b30     00 74 06 F6 | 	mov	arg01, #0
14b34     98 49 B1 FD | 	call	#__system___getiolock_1306
14b38     1A 01 68 FC | 	wrlong	#0, result1
14b3c     00 74 06 F6 | 	mov	arg01, #0
14b40     8C 49 B1 FD | 	call	#__system___getiolock_1306
14b44     1A 75 02 F6 | 	mov	arg01, result1
14b48     24 11 B1 FD | 	call	#__system___lockmem
14b4c     55 01 00 FF 
14b50     D2 76 06 F6 | 	mov	arg02, ##@LR__2208
14b54     00 74 06 F6 | 	mov	arg01, #0
14b58     00 78 06 F6 | 	mov	arg03, #0
14b5c     B8 16 B1 FD | 	call	#__system___basic_print_string
14b60     08 8C 06 F1 | 	add	local01, #8
14b64     46 77 02 FB | 	rdlong	arg02, local01
14b68     00 74 06 F6 | 	mov	arg01, #0
14b6c     00 78 06 F6 | 	mov	arg03, #0
14b70     66 7A 06 F6 | 	mov	arg04, #102
14b74     F8 34 B1 FD | 	call	#__system___basic_print_float
14b78     00 74 06 F6 | 	mov	arg01, #0
14b7c     0A 76 06 F6 | 	mov	arg02, #10
14b80     00 78 06 F6 | 	mov	arg03, #0
14b84     44 16 B1 FD | 	call	#__system___basic_print_char
14b88     00 74 06 F6 | 	mov	arg01, #0
14b8c     40 49 B1 FD | 	call	#__system___getiolock_1306
14b90     1A 01 68 FC | 	wrlong	#0, result1
14b94     00 74 06 F6 | 	mov	arg01, #0
14b98     34 49 B1 FD | 	call	#__system___getiolock_1306
14b9c     1A 75 02 F6 | 	mov	arg01, result1
14ba0     CC 10 B1 FD | 	call	#__system___lockmem
14ba4     55 01 00 FF 
14ba8     E2 76 06 F6 | 	mov	arg02, ##@LR__2209
14bac     00 74 06 F6 | 	mov	arg01, #0
14bb0     00 78 06 F6 | 	mov	arg03, #0
14bb4     60 16 B1 FD | 	call	#__system___basic_print_string
14bb8     04 8C 06 F1 | 	add	local01, #4
14bbc     46 77 02 FB | 	rdlong	arg02, local01
14bc0     00 74 06 F6 | 	mov	arg01, #0
14bc4     00 78 06 F6 | 	mov	arg03, #0
14bc8     66 7A 06 F6 | 	mov	arg04, #102
14bcc     A0 34 B1 FD | 	call	#__system___basic_print_float
14bd0     00 74 06 F6 | 	mov	arg01, #0
14bd4     0A 76 06 F6 | 	mov	arg02, #10
14bd8     00 78 06 F6 | 	mov	arg03, #0
14bdc     EC 15 B1 FD | 	call	#__system___basic_print_char
14be0     00 74 06 F6 | 	mov	arg01, #0
14be4     E8 48 B1 FD | 	call	#__system___getiolock_1306
14be8     1A 01 68 FC | 	wrlong	#0, result1
14bec     00 74 06 F6 | 	mov	arg01, #0
14bf0     DC 48 B1 FD | 	call	#__system___getiolock_1306
14bf4     1A 75 02 F6 | 	mov	arg01, result1
14bf8     74 10 B1 FD | 	call	#__system___lockmem
14bfc     55 01 00 FF 
14c00     F7 76 06 F6 | 	mov	arg02, ##@LR__2210
14c04     00 74 06 F6 | 	mov	arg01, #0
14c08     00 78 06 F6 | 	mov	arg03, #0
14c0c     08 16 B1 FD | 	call	#__system___basic_print_string
14c10     04 8C 06 F1 | 	add	local01, #4
14c14     46 77 02 FB | 	rdlong	arg02, local01
14c18     00 74 06 F6 | 	mov	arg01, #0
14c1c     00 78 06 F6 | 	mov	arg03, #0
14c20     66 7A 06 F6 | 	mov	arg04, #102
14c24     48 34 B1 FD | 	call	#__system___basic_print_float
14c28     00 74 06 F6 | 	mov	arg01, #0
14c2c     0A 76 06 F6 | 	mov	arg02, #10
14c30     00 78 06 F6 | 	mov	arg03, #0
14c34     94 15 B1 FD | 	call	#__system___basic_print_char
14c38     00 74 06 F6 | 	mov	arg01, #0
14c3c     90 48 B1 FD | 	call	#__system___getiolock_1306
14c40     1A 01 68 FC | 	wrlong	#0, result1
14c44     00 74 06 F6 | 	mov	arg01, #0
14c48     84 48 B1 FD | 	call	#__system___getiolock_1306
14c4c     1A 75 02 F6 | 	mov	arg01, result1
14c50     1C 10 B1 FD | 	call	#__system___lockmem
14c54     55 01 00 FF 
14c58     0A 77 06 F6 | 	mov	arg02, ##@LR__2211
14c5c     00 74 06 F6 | 	mov	arg01, #0
14c60     00 78 06 F6 | 	mov	arg03, #0
14c64     B0 15 B1 FD | 	call	#__system___basic_print_string
14c68     04 8C 06 F1 | 	add	local01, #4
14c6c     46 77 02 FB | 	rdlong	arg02, local01
14c70     00 74 06 F6 | 	mov	arg01, #0
14c74     00 78 06 F6 | 	mov	arg03, #0
14c78     66 7A 06 F6 | 	mov	arg04, #102
14c7c     F0 33 B1 FD | 	call	#__system___basic_print_float
14c80     00 74 06 F6 | 	mov	arg01, #0
14c84     0A 76 06 F6 | 	mov	arg02, #10
14c88     00 78 06 F6 | 	mov	arg03, #0
14c8c     3C 15 B1 FD | 	call	#__system___basic_print_char
14c90     00 74 06 F6 | 	mov	arg01, #0
14c94     38 48 B1 FD | 	call	#__system___getiolock_1306
14c98     1A 01 68 FC | 	wrlong	#0, result1
14c9c     00 74 06 F6 | 	mov	arg01, #0
14ca0     2C 48 B1 FD | 	call	#__system___getiolock_1306
14ca4     1A 75 02 F6 | 	mov	arg01, result1
14ca8     C4 0F B1 FD | 	call	#__system___lockmem
14cac     55 01 00 FF 
14cb0     15 77 06 F6 | 	mov	arg02, ##@LR__2212
14cb4     00 74 06 F6 | 	mov	arg01, #0
14cb8     00 78 06 F6 | 	mov	arg03, #0
14cbc     58 15 B1 FD | 	call	#__system___basic_print_string
14cc0     04 8C 06 F1 | 	add	local01, #4
14cc4     46 77 02 F6 | 	mov	arg02, local01
14cc8     00 74 06 F6 | 	mov	arg01, #0
14ccc     00 78 06 F6 | 	mov	arg03, #0
14cd0     44 15 B1 FD | 	call	#__system___basic_print_string
14cd4     00 74 06 F6 | 	mov	arg01, #0
14cd8     0A 76 06 F6 | 	mov	arg02, #10
14cdc     00 78 06 F6 | 	mov	arg03, #0
14ce0     E8 14 B1 FD | 	call	#__system___basic_print_char
14ce4     00 74 06 F6 | 	mov	arg01, #0
14ce8     E4 47 B1 FD | 	call	#__system___getiolock_1306
14cec     1A 01 68 FC | 	wrlong	#0, result1
14cf0     00 74 06 F6 | 	mov	arg01, #0
14cf4     D8 47 B1 FD | 	call	#__system___getiolock_1306
14cf8     1A 75 02 F6 | 	mov	arg01, result1
14cfc     70 0F B1 FD | 	call	#__system___lockmem
14d00     55 01 00 FF 
14d04     2F 77 06 F6 | 	mov	arg02, ##@LR__2213
14d08     00 74 06 F6 | 	mov	arg01, #0
14d0c     00 78 06 F6 | 	mov	arg03, #0
14d10     04 15 B1 FD | 	call	#__system___basic_print_string
14d14     14 8C 06 F1 | 	add	local01, #20
14d18     46 77 02 FB | 	rdlong	arg02, local01
14d1c     00 74 06 F6 | 	mov	arg01, #0
14d20     00 78 06 F6 | 	mov	arg03, #0
14d24     66 7A 06 F6 | 	mov	arg04, #102
14d28     44 33 B1 FD | 	call	#__system___basic_print_float
14d2c     00 74 06 F6 | 	mov	arg01, #0
14d30     0A 76 06 F6 | 	mov	arg02, #10
14d34     00 78 06 F6 | 	mov	arg03, #0
14d38     90 14 B1 FD | 	call	#__system___basic_print_char
14d3c     00 74 06 F6 | 	mov	arg01, #0
14d40     8C 47 B1 FD | 	call	#__system___getiolock_1306
14d44     1A 01 68 FC | 	wrlong	#0, result1
14d48     00 74 06 F6 | 	mov	arg01, #0
14d4c     80 47 B1 FD | 	call	#__system___getiolock_1306
14d50     1A 75 02 F6 | 	mov	arg01, result1
14d54     18 0F B1 FD | 	call	#__system___lockmem
14d58     55 01 00 FF 
14d5c     50 77 06 F6 | 	mov	arg02, ##@LR__2214
14d60     00 74 06 F6 | 	mov	arg01, #0
14d64     00 78 06 F6 | 	mov	arg03, #0
14d68     AC 14 B1 FD | 	call	#__system___basic_print_string
14d6c     04 8C 06 F1 | 	add	local01, #4
14d70     46 77 02 F6 | 	mov	arg02, local01
14d74     00 74 06 F6 | 	mov	arg01, #0
14d78     00 78 06 F6 | 	mov	arg03, #0
14d7c     98 14 B1 FD | 	call	#__system___basic_print_string
14d80     00 74 06 F6 | 	mov	arg01, #0
14d84     0A 76 06 F6 | 	mov	arg02, #10
14d88     00 78 06 F6 | 	mov	arg03, #0
14d8c     3C 14 B1 FD | 	call	#__system___basic_print_char
14d90     00 74 06 F6 | 	mov	arg01, #0
14d94     38 47 B1 FD | 	call	#__system___getiolock_1306
14d98     1A 01 68 FC | 	wrlong	#0, result1
14d9c     00 74 06 F6 | 	mov	arg01, #0
14da0     2C 47 B1 FD | 	call	#__system___getiolock_1306
14da4     1A 75 02 F6 | 	mov	arg01, result1
14da8     C4 0E B1 FD | 	call	#__system___lockmem
14dac     55 01 00 FF 
14db0     61 77 06 F6 | 	mov	arg02, ##@LR__2215
14db4     00 74 06 F6 | 	mov	arg01, #0
14db8     00 78 06 F6 | 	mov	arg03, #0
14dbc     58 14 B1 FD | 	call	#__system___basic_print_string
14dc0     14 8C 06 F1 | 	add	local01, #20
14dc4     46 77 02 FB | 	rdlong	arg02, local01
14dc8     00 74 06 F6 | 	mov	arg01, #0
14dcc     00 78 06 F6 | 	mov	arg03, #0
14dd0     66 7A 06 F6 | 	mov	arg04, #102
14dd4     98 32 B1 FD | 	call	#__system___basic_print_float
14dd8     00 74 06 F6 | 	mov	arg01, #0
14ddc     0A 76 06 F6 | 	mov	arg02, #10
14de0     00 78 06 F6 | 	mov	arg03, #0
14de4     E4 13 B1 FD | 	call	#__system___basic_print_char
14de8     00 74 06 F6 | 	mov	arg01, #0
14dec     E0 46 B1 FD | 	call	#__system___getiolock_1306
14df0     1A 01 68 FC | 	wrlong	#0, result1
14df4     00 74 06 F6 | 	mov	arg01, #0
14df8     D4 46 B1 FD | 	call	#__system___getiolock_1306
14dfc     1A 75 02 F6 | 	mov	arg01, result1
14e00     6C 0E B1 FD | 	call	#__system___lockmem
14e04     55 01 00 FF 
14e08     7D 77 06 F6 | 	mov	arg02, ##@LR__2216
14e0c     00 74 06 F6 | 	mov	arg01, #0
14e10     00 78 06 F6 | 	mov	arg03, #0
14e14     00 14 B1 FD | 	call	#__system___basic_print_string
14e18     04 8C 06 F1 | 	add	local01, #4
14e1c     46 77 02 FB | 	rdlong	arg02, local01
14e20     00 74 06 F6 | 	mov	arg01, #0
14e24     00 78 06 F6 | 	mov	arg03, #0
14e28     0A 7A 06 F6 | 	mov	arg04, #10
14e2c     2C 14 B1 FD | 	call	#__system___basic_print_integer
14e30     00 74 06 F6 | 	mov	arg01, #0
14e34     0A 76 06 F6 | 	mov	arg02, #10
14e38     00 78 06 F6 | 	mov	arg03, #0
14e3c     8C 13 B1 FD | 	call	#__system___basic_print_char
14e40     00 74 06 F6 | 	mov	arg01, #0
14e44     88 46 B1 FD | 	call	#__system___getiolock_1306
14e48     1A 01 68 FC | 	wrlong	#0, result1
14e4c     A8 F0 03 F6 | 	mov	ptra, fp
14e50     B3 00 A0 FD | 	call	#popregs_
14e54                 | _json_print_machine_configuration_0696_ret
14e54     2D 00 64 FD | 	ret
14e58                 | 
14e58                 | _json_print_machine_performance_0697
14e58     01 4C 05 F6 | 	mov	COUNT_, #1
14e5c     A9 00 A0 FD | 	call	#pushregs_
14e60     3A 8D 02 F6 | 	mov	local01, arg01
14e64     00 74 06 F6 | 	mov	arg01, #0
14e68     64 46 B1 FD | 	call	#__system___getiolock_1306
14e6c     1A 75 02 F6 | 	mov	arg01, result1
14e70     FC 0D B1 FD | 	call	#__system___lockmem
14e74     55 01 00 FF 
14e78     98 77 06 F6 | 	mov	arg02, ##@LR__2217
14e7c     00 74 06 F6 | 	mov	arg01, #0
14e80     00 78 06 F6 | 	mov	arg03, #0
14e84     90 13 B1 FD | 	call	#__system___basic_print_string
14e88     00 74 06 F6 | 	mov	arg01, #0
14e8c     0A 76 06 F6 | 	mov	arg02, #10
14e90     00 78 06 F6 | 	mov	arg03, #0
14e94     34 13 B1 FD | 	call	#__system___basic_print_char
14e98     00 74 06 F6 | 	mov	arg01, #0
14e9c     30 46 B1 FD | 	call	#__system___getiolock_1306
14ea0     1A 01 68 FC | 	wrlong	#0, result1
14ea4     00 74 06 F6 | 	mov	arg01, #0
14ea8     24 46 B1 FD | 	call	#__system___getiolock_1306
14eac     1A 75 02 F6 | 	mov	arg01, result1
14eb0     BC 0D B1 FD | 	call	#__system___lockmem
14eb4     55 01 00 FF 
14eb8     AD 77 06 F6 | 	mov	arg02, ##@LR__2218
14ebc     00 74 06 F6 | 	mov	arg01, #0
14ec0     00 78 06 F6 | 	mov	arg03, #0
14ec4     50 13 B1 FD | 	call	#__system___basic_print_string
14ec8     46 77 02 FB | 	rdlong	arg02, local01
14ecc     00 74 06 F6 | 	mov	arg01, #0
14ed0     00 78 06 F6 | 	mov	arg03, #0
14ed4     66 7A 06 F6 | 	mov	arg04, #102
14ed8     94 31 B1 FD | 	call	#__system___basic_print_float
14edc     00 74 06 F6 | 	mov	arg01, #0
14ee0     0A 76 06 F6 | 	mov	arg02, #10
14ee4     00 78 06 F6 | 	mov	arg03, #0
14ee8     E0 12 B1 FD | 	call	#__system___basic_print_char
14eec     00 74 06 F6 | 	mov	arg01, #0
14ef0     DC 45 B1 FD | 	call	#__system___getiolock_1306
14ef4     1A 01 68 FC | 	wrlong	#0, result1
14ef8     00 74 06 F6 | 	mov	arg01, #0
14efc     D0 45 B1 FD | 	call	#__system___getiolock_1306
14f00     1A 75 02 F6 | 	mov	arg01, result1
14f04     68 0D B1 FD | 	call	#__system___lockmem
14f08     55 01 00 FF 
14f0c     BF 77 06 F6 | 	mov	arg02, ##@LR__2219
14f10     00 74 06 F6 | 	mov	arg01, #0
14f14     00 78 06 F6 | 	mov	arg03, #0
14f18     FC 12 B1 FD | 	call	#__system___basic_print_string
14f1c     04 8C 06 F1 | 	add	local01, #4
14f20     46 77 02 FB | 	rdlong	arg02, local01
14f24     00 74 06 F6 | 	mov	arg01, #0
14f28     00 78 06 F6 | 	mov	arg03, #0
14f2c     66 7A 06 F6 | 	mov	arg04, #102
14f30     3C 31 B1 FD | 	call	#__system___basic_print_float
14f34     00 74 06 F6 | 	mov	arg01, #0
14f38     0A 76 06 F6 | 	mov	arg02, #10
14f3c     00 78 06 F6 | 	mov	arg03, #0
14f40     88 12 B1 FD | 	call	#__system___basic_print_char
14f44     00 74 06 F6 | 	mov	arg01, #0
14f48     84 45 B1 FD | 	call	#__system___getiolock_1306
14f4c     1A 01 68 FC | 	wrlong	#0, result1
14f50     00 74 06 F6 | 	mov	arg01, #0
14f54     78 45 B1 FD | 	call	#__system___getiolock_1306
14f58     1A 75 02 F6 | 	mov	arg01, result1
14f5c     10 0D B1 FD | 	call	#__system___lockmem
14f60     55 01 00 FF 
14f64     D1 77 06 F6 | 	mov	arg02, ##@LR__2220
14f68     00 74 06 F6 | 	mov	arg01, #0
14f6c     00 78 06 F6 | 	mov	arg03, #0
14f70     A4 12 B1 FD | 	call	#__system___basic_print_string
14f74     04 8C 06 F1 | 	add	local01, #4
14f78     46 77 02 FB | 	rdlong	arg02, local01
14f7c     00 74 06 F6 | 	mov	arg01, #0
14f80     00 78 06 F6 | 	mov	arg03, #0
14f84     66 7A 06 F6 | 	mov	arg04, #102
14f88     E4 30 B1 FD | 	call	#__system___basic_print_float
14f8c     00 74 06 F6 | 	mov	arg01, #0
14f90     0A 76 06 F6 | 	mov	arg02, #10
14f94     00 78 06 F6 | 	mov	arg03, #0
14f98     30 12 B1 FD | 	call	#__system___basic_print_char
14f9c     00 74 06 F6 | 	mov	arg01, #0
14fa0     2C 45 B1 FD | 	call	#__system___getiolock_1306
14fa4     1A 01 68 FC | 	wrlong	#0, result1
14fa8     00 74 06 F6 | 	mov	arg01, #0
14fac     20 45 B1 FD | 	call	#__system___getiolock_1306
14fb0     1A 75 02 F6 | 	mov	arg01, result1
14fb4     B8 0C B1 FD | 	call	#__system___lockmem
14fb8     55 01 00 FF 
14fbc     E3 77 06 F6 | 	mov	arg02, ##@LR__2221
14fc0     00 74 06 F6 | 	mov	arg01, #0
14fc4     00 78 06 F6 | 	mov	arg03, #0
14fc8     4C 12 B1 FD | 	call	#__system___basic_print_string
14fcc     04 8C 06 F1 | 	add	local01, #4
14fd0     46 77 02 FB | 	rdlong	arg02, local01
14fd4     00 74 06 F6 | 	mov	arg01, #0
14fd8     00 78 06 F6 | 	mov	arg03, #0
14fdc     66 7A 06 F6 | 	mov	arg04, #102
14fe0     8C 30 B1 FD | 	call	#__system___basic_print_float
14fe4     00 74 06 F6 | 	mov	arg01, #0
14fe8     0A 76 06 F6 | 	mov	arg02, #10
14fec     00 78 06 F6 | 	mov	arg03, #0
14ff0     D8 11 B1 FD | 	call	#__system___basic_print_char
14ff4     00 74 06 F6 | 	mov	arg01, #0
14ff8     D4 44 B1 FD | 	call	#__system___getiolock_1306
14ffc     1A 01 68 FC | 	wrlong	#0, result1
15000     00 74 06 F6 | 	mov	arg01, #0
15004     C8 44 B1 FD | 	call	#__system___getiolock_1306
15008     1A 75 02 F6 | 	mov	arg01, result1
1500c     60 0C B1 FD | 	call	#__system___lockmem
15010     55 01 00 FF 
15014     F9 77 06 F6 | 	mov	arg02, ##@LR__2222
15018     00 74 06 F6 | 	mov	arg01, #0
1501c     00 78 06 F6 | 	mov	arg03, #0
15020     F4 11 B1 FD | 	call	#__system___basic_print_string
15024     04 8C 06 F1 | 	add	local01, #4
15028     46 77 02 FB | 	rdlong	arg02, local01
1502c     00 74 06 F6 | 	mov	arg01, #0
15030     00 78 06 F6 | 	mov	arg03, #0
15034     66 7A 06 F6 | 	mov	arg04, #102
15038     34 30 B1 FD | 	call	#__system___basic_print_float
1503c     00 74 06 F6 | 	mov	arg01, #0
15040     0A 76 06 F6 | 	mov	arg02, #10
15044     00 78 06 F6 | 	mov	arg03, #0
15048     80 11 B1 FD | 	call	#__system___basic_print_char
1504c     00 74 06 F6 | 	mov	arg01, #0
15050     7C 44 B1 FD | 	call	#__system___getiolock_1306
15054     1A 01 68 FC | 	wrlong	#0, result1
15058     00 74 06 F6 | 	mov	arg01, #0
1505c     70 44 B1 FD | 	call	#__system___getiolock_1306
15060     1A 75 02 F6 | 	mov	arg01, result1
15064     08 0C B1 FD | 	call	#__system___lockmem
15068     56 01 00 FF 
1506c     0F 76 06 F6 | 	mov	arg02, ##@LR__2223
15070     00 74 06 F6 | 	mov	arg01, #0
15074     00 78 06 F6 | 	mov	arg03, #0
15078     9C 11 B1 FD | 	call	#__system___basic_print_string
1507c     04 8C 06 F1 | 	add	local01, #4
15080     46 77 02 FB | 	rdlong	arg02, local01
15084     00 74 06 F6 | 	mov	arg01, #0
15088     00 78 06 F6 | 	mov	arg03, #0
1508c     66 7A 06 F6 | 	mov	arg04, #102
15090     DC 2F B1 FD | 	call	#__system___basic_print_float
15094     00 74 06 F6 | 	mov	arg01, #0
15098     0A 76 06 F6 | 	mov	arg02, #10
1509c     00 78 06 F6 | 	mov	arg03, #0
150a0     28 11 B1 FD | 	call	#__system___basic_print_char
150a4     00 74 06 F6 | 	mov	arg01, #0
150a8     24 44 B1 FD | 	call	#__system___getiolock_1306
150ac     1A 01 68 FC | 	wrlong	#0, result1
150b0     00 74 06 F6 | 	mov	arg01, #0
150b4     18 44 B1 FD | 	call	#__system___getiolock_1306
150b8     1A 75 02 F6 | 	mov	arg01, result1
150bc     B0 0B B1 FD | 	call	#__system___lockmem
150c0     56 01 00 FF 
150c4     29 76 06 F6 | 	mov	arg02, ##@LR__2224
150c8     00 74 06 F6 | 	mov	arg01, #0
150cc     00 78 06 F6 | 	mov	arg03, #0
150d0     44 11 B1 FD | 	call	#__system___basic_print_string
150d4     04 8C 06 F1 | 	add	local01, #4
150d8     46 77 02 FB | 	rdlong	arg02, local01
150dc     00 74 06 F6 | 	mov	arg01, #0
150e0     00 78 06 F6 | 	mov	arg03, #0
150e4     66 7A 06 F6 | 	mov	arg04, #102
150e8     84 2F B1 FD | 	call	#__system___basic_print_float
150ec     00 74 06 F6 | 	mov	arg01, #0
150f0     0A 76 06 F6 | 	mov	arg02, #10
150f4     00 78 06 F6 | 	mov	arg03, #0
150f8     D0 10 B1 FD | 	call	#__system___basic_print_char
150fc     00 74 06 F6 | 	mov	arg01, #0
15100     CC 43 B1 FD | 	call	#__system___getiolock_1306
15104     1A 01 68 FC | 	wrlong	#0, result1
15108     A8 F0 03 F6 | 	mov	ptra, fp
1510c     B3 00 A0 FD | 	call	#popregs_
15110                 | _json_print_machine_performance_0697_ret
15110     2D 00 64 FD | 	ret
15114                 | 
15114                 | _json_print_quartet
15114     02 4C 05 F6 | 	mov	COUNT_, #2
15118     A9 00 A0 FD | 	call	#pushregs_
1511c     B8 F1 07 F1 | 	add	ptra, #440
15120     A8 74 62 FC | 	wrlong	arg01, fp
15124     00 74 06 F6 | 	mov	arg01, #0
15128     A4 43 B1 FD | 	call	#__system___getiolock_1306
1512c     1A 75 02 F6 | 	mov	arg01, result1
15130     3C 0B B1 FD | 	call	#__system___lockmem
15134     56 01 00 FF 
15138     47 76 06 F6 | 	mov	arg02, ##@LR__2225
1513c     00 74 06 F6 | 	mov	arg01, #0
15140     00 78 06 F6 | 	mov	arg03, #0
15144     D0 10 B1 FD | 	call	#__system___basic_print_string
15148     A8 76 02 FB | 	rdlong	arg02, fp
1514c     00 74 06 F6 | 	mov	arg01, #0
15150     00 78 06 F6 | 	mov	arg03, #0
15154     C0 10 B1 FD | 	call	#__system___basic_print_string
15158     00 74 06 F6 | 	mov	arg01, #0
1515c     0A 76 06 F6 | 	mov	arg02, #10
15160     00 78 06 F6 | 	mov	arg03, #0
15164     64 10 B1 FD | 	call	#__system___basic_print_char
15168     00 74 06 F6 | 	mov	arg01, #0
1516c     60 43 B1 FD | 	call	#__system___getiolock_1306
15170     1A 01 68 FC | 	wrlong	#0, result1
15174     00 74 06 F6 | 	mov	arg01, #0
15178     54 43 B1 FD | 	call	#__system___getiolock_1306
1517c     1A 75 02 F6 | 	mov	arg01, result1
15180     EC 0A B1 FD | 	call	#__system___lockmem
15184     56 01 00 FF 
15188     55 76 06 F6 | 	mov	arg02, ##@LR__2226
1518c     00 74 06 F6 | 	mov	arg01, #0
15190     00 78 06 F6 | 	mov	arg03, #0
15194     80 10 B1 FD | 	call	#__system___basic_print_string
15198     A8 7A 02 FB | 	rdlong	arg04, fp
1519c     34 7A 06 F1 | 	add	arg04, #52
151a0     3D 77 02 FB | 	rdlong	arg02, arg04
151a4     00 74 06 F6 | 	mov	arg01, #0
151a8     00 78 06 F6 | 	mov	arg03, #0
151ac     0A 7A 06 F6 | 	mov	arg04, #10
151b0     A8 10 B1 FD | 	call	#__system___basic_print_integer
151b4     00 74 06 F6 | 	mov	arg01, #0
151b8     0A 76 06 F6 | 	mov	arg02, #10
151bc     00 78 06 F6 | 	mov	arg03, #0
151c0     08 10 B1 FD | 	call	#__system___basic_print_char
151c4     00 74 06 F6 | 	mov	arg01, #0
151c8     04 43 B1 FD | 	call	#__system___getiolock_1306
151cc     1A 01 68 FC | 	wrlong	#0, result1
151d0     00 74 06 F6 | 	mov	arg01, #0
151d4     F8 42 B1 FD | 	call	#__system___getiolock_1306
151d8     1A 75 02 F6 | 	mov	arg01, result1
151dc     90 0A B1 FD | 	call	#__system___lockmem
151e0     56 01 00 FF 
151e4     67 76 06 F6 | 	mov	arg02, ##@LR__2227
151e8     00 74 06 F6 | 	mov	arg01, #0
151ec     00 78 06 F6 | 	mov	arg03, #0
151f0     24 10 B1 FD | 	call	#__system___basic_print_string
151f4     A8 7A 02 FB | 	rdlong	arg04, fp
151f8     60 7A 06 F1 | 	add	arg04, #96
151fc     3D 77 02 FB | 	rdlong	arg02, arg04
15200     00 74 06 F6 | 	mov	arg01, #0
15204     00 78 06 F6 | 	mov	arg03, #0
15208     66 7A 06 F6 | 	mov	arg04, #102
1520c     60 2E B1 FD | 	call	#__system___basic_print_float
15210     00 74 06 F6 | 	mov	arg01, #0
15214     0A 76 06 F6 | 	mov	arg02, #10
15218     00 78 06 F6 | 	mov	arg03, #0
1521c     AC 0F B1 FD | 	call	#__system___basic_print_char
15220     00 74 06 F6 | 	mov	arg01, #0
15224     A8 42 B1 FD | 	call	#__system___getiolock_1306
15228     1A 01 68 FC | 	wrlong	#0, result1
1522c     04 50 05 F1 | 	add	fp, #4
15230     A8 74 02 F6 | 	mov	arg01, fp
15234     04 50 85 F1 | 	sub	fp, #4
15238     A8 76 02 FB | 	rdlong	arg02, fp
1523c     34 76 06 F1 | 	add	arg02, #52
15240     3B 77 02 FB | 	rdlong	arg02, arg02
15244     CC A7 BF FD | 	call	#_get_function_info
15248     00 74 06 F6 | 	mov	arg01, #0
1524c     80 42 B1 FD | 	call	#__system___getiolock_1306
15250     1A 75 02 F6 | 	mov	arg01, result1
15254     18 0A B1 FD | 	call	#__system___lockmem
15258     56 01 00 FF 
1525c     76 76 06 F6 | 	mov	arg02, ##@LR__2228
15260     00 74 06 F6 | 	mov	arg01, #0
15264     00 78 06 F6 | 	mov	arg03, #0
15268     AC 0F B1 FD | 	call	#__system___basic_print_string
1526c     00 74 06 F6 | 	mov	arg01, #0
15270     5C 42 B1 FD | 	call	#__system___getiolock_1306
15274     1A 01 68 FC | 	wrlong	#0, result1
15278     B4 51 05 F1 | 	add	fp, #436
1527c     A8 00 68 FC | 	wrlong	#0, fp
15280     B4 51 85 F1 | 	sub	fp, #436
15284                 | '     for (int i = 0; i < info.args_count; i++)
15284                 | LR__0564
15284     B4 51 05 F1 | 	add	fp, #436
15288     A8 74 02 FB | 	rdlong	arg01, fp
1528c     94 51 85 F1 | 	sub	fp, #404
15290     A8 8C 02 FB | 	rdlong	local01, fp
15294     20 50 85 F1 | 	sub	fp, #32
15298     46 75 52 F2 | 	cmps	arg01, local01 wc
1529c     B4 00 90 3D |  if_ae	jmp	#LR__0566
152a0     00 74 06 F6 | 	mov	arg01, #0
152a4     28 42 B1 FD | 	call	#__system___getiolock_1306
152a8     1A 75 02 F6 | 	mov	arg01, result1
152ac     C0 09 B1 FD | 	call	#__system___lockmem
152b0     A8 7A 02 FB | 	rdlong	arg04, fp
152b4     B4 51 05 F1 | 	add	fp, #436
152b8     A8 78 02 FB | 	rdlong	arg03, fp
152bc     B4 51 85 F1 | 	sub	fp, #436
152c0     02 78 66 F0 | 	shl	arg03, #2
152c4     38 7A 06 F1 | 	add	arg04, #56
152c8     3D 79 02 F1 | 	add	arg03, arg04
152cc     3C 77 02 FB | 	rdlong	arg02, arg03
152d0     00 74 06 F6 | 	mov	arg01, #0
152d4     00 78 06 F6 | 	mov	arg03, #0
152d8     66 7A 06 F6 | 	mov	arg04, #102
152dc     90 2D B1 FD | 	call	#__system___basic_print_float
152e0     00 74 06 F6 | 	mov	arg01, #0
152e4     E8 41 B1 FD | 	call	#__system___getiolock_1306
152e8     1A 01 68 FC | 	wrlong	#0, result1
152ec     20 50 05 F1 | 	add	fp, #32
152f0     A8 74 02 FB | 	rdlong	arg01, fp
152f4     01 74 86 F1 | 	sub	arg01, #1
152f8     94 51 05 F1 | 	add	fp, #404
152fc     A8 8E 02 FB | 	rdlong	local02, fp
15300     B4 51 85 F1 | 	sub	fp, #436
15304     3A 8F 52 F2 | 	cmps	local02, arg01 wc
15308     30 00 90 3D |  if_ae	jmp	#LR__0565
1530c     00 74 06 F6 | 	mov	arg01, #0
15310     BC 41 B1 FD | 	call	#__system___getiolock_1306
15314     1A 75 02 F6 | 	mov	arg01, result1
15318     54 09 B1 FD | 	call	#__system___lockmem
1531c     56 01 00 FF 
15320     8B 76 06 F6 | 	mov	arg02, ##@LR__2229
15324     00 74 06 F6 | 	mov	arg01, #0
15328     00 78 06 F6 | 	mov	arg03, #0
1532c     E8 0E B1 FD | 	call	#__system___basic_print_string
15330     00 74 06 F6 | 	mov	arg01, #0
15334     98 41 B1 FD | 	call	#__system___getiolock_1306
15338     1A 01 68 FC | 	wrlong	#0, result1
1533c                 | LR__0565
1533c     B4 51 05 F1 | 	add	fp, #436
15340     A8 8E 02 FB | 	rdlong	local02, fp
15344     01 8E 06 F1 | 	add	local02, #1
15348     A8 8E 62 FC | 	wrlong	local02, fp
1534c     B4 51 85 F1 | 	sub	fp, #436
15350     30 FF 9F FD | 	jmp	#LR__0564
15354                 | LR__0566
15354     00 74 06 F6 | 	mov	arg01, #0
15358     74 41 B1 FD | 	call	#__system___getiolock_1306
1535c     1A 75 02 F6 | 	mov	arg01, result1
15360     0C 09 B1 FD | 	call	#__system___lockmem
15364     00 74 06 F6 | 	mov	arg01, #0
15368     0A 76 06 F6 | 	mov	arg02, #10
1536c     00 78 06 F6 | 	mov	arg03, #0
15370     58 0E B1 FD | 	call	#__system___basic_print_char
15374     00 74 06 F6 | 	mov	arg01, #0
15378     54 41 B1 FD | 	call	#__system___getiolock_1306
1537c     1A 01 68 FC | 	wrlong	#0, result1
15380     A8 F0 03 F6 | 	mov	ptra, fp
15384     B3 00 A0 FD | 	call	#popregs_
15388                 | _json_print_quartet_ret
15388     2D 00 64 FD | 	ret
1538c                 | 
1538c                 | _json_print_motion_set
1538c     02 4C 05 F6 | 	mov	COUNT_, #2
15390     A9 00 A0 FD | 	call	#pushregs_
15394     3A 8D 02 F6 | 	mov	local01, arg01
15398     00 74 06 F6 | 	mov	arg01, #0
1539c     30 41 B1 FD | 	call	#__system___getiolock_1306
153a0     1A 75 02 F6 | 	mov	arg01, result1
153a4     C8 08 B1 FD | 	call	#__system___lockmem
153a8     56 01 00 FF 
153ac     8D 76 06 F6 | 	mov	arg02, ##@LR__2230
153b0     00 74 06 F6 | 	mov	arg01, #0
153b4     00 78 06 F6 | 	mov	arg03, #0
153b8     5C 0E B1 FD | 	call	#__system___basic_print_string
153bc     00 74 06 F6 | 	mov	arg01, #0
153c0     46 77 02 F6 | 	mov	arg02, local01
153c4     00 78 06 F6 | 	mov	arg03, #0
153c8     4C 0E B1 FD | 	call	#__system___basic_print_string
153cc     00 74 06 F6 | 	mov	arg01, #0
153d0     0A 76 06 F6 | 	mov	arg02, #10
153d4     00 78 06 F6 | 	mov	arg03, #0
153d8     F0 0D B1 FD | 	call	#__system___basic_print_char
153dc     00 74 06 F6 | 	mov	arg01, #0
153e0     EC 40 B1 FD | 	call	#__system___getiolock_1306
153e4     1A 01 68 FC | 	wrlong	#0, result1
153e8     00 74 06 F6 | 	mov	arg01, #0
153ec     E0 40 B1 FD | 	call	#__system___getiolock_1306
153f0     1A 75 02 F6 | 	mov	arg01, result1
153f4     78 08 B1 FD | 	call	#__system___lockmem
153f8     56 01 00 FF 
153fc     97 76 06 F6 | 	mov	arg02, ##@LR__2231
15400     00 74 06 F6 | 	mov	arg01, #0
15404     00 78 06 F6 | 	mov	arg03, #0
15408     0C 0E B1 FD | 	call	#__system___basic_print_string
1540c     34 8C 06 F1 | 	add	local01, #52
15410     46 77 02 FB | 	rdlong	arg02, local01
15414     00 74 06 F6 | 	mov	arg01, #0
15418     00 78 06 F6 | 	mov	arg03, #0
1541c     0A 7A 06 F6 | 	mov	arg04, #10
15420     38 0E B1 FD | 	call	#__system___basic_print_integer
15424     00 74 06 F6 | 	mov	arg01, #0
15428     0A 76 06 F6 | 	mov	arg02, #10
1542c     00 78 06 F6 | 	mov	arg03, #0
15430     98 0D B1 FD | 	call	#__system___basic_print_char
15434     00 74 06 F6 | 	mov	arg01, #0
15438     94 40 B1 FD | 	call	#__system___getiolock_1306
1543c     1A 01 68 FC | 	wrlong	#0, result1
15440     00 74 06 F6 | 	mov	arg01, #0
15444     88 40 B1 FD | 	call	#__system___getiolock_1306
15448     1A 75 02 F6 | 	mov	arg01, result1
1544c     20 08 B1 FD | 	call	#__system___lockmem
15450     56 01 00 FF 
15454     A3 76 06 F6 | 	mov	arg02, ##@LR__2232
15458     00 74 06 F6 | 	mov	arg01, #0
1545c     00 78 06 F6 | 	mov	arg03, #0
15460     B4 0D B1 FD | 	call	#__system___basic_print_string
15464     04 8C 06 F1 | 	add	local01, #4
15468     46 77 02 F6 | 	mov	arg02, local01
1546c     00 74 06 F6 | 	mov	arg01, #0
15470     00 78 06 F6 | 	mov	arg03, #0
15474     A0 0D B1 FD | 	call	#__system___basic_print_string
15478     00 74 06 F6 | 	mov	arg01, #0
1547c     0A 76 06 F6 | 	mov	arg02, #10
15480     00 78 06 F6 | 	mov	arg03, #0
15484     44 0D B1 FD | 	call	#__system___basic_print_char
15488     00 74 06 F6 | 	mov	arg01, #0
1548c     40 40 B1 FD | 	call	#__system___getiolock_1306
15490     1A 01 68 FC | 	wrlong	#0, result1
15494     00 74 06 F6 | 	mov	arg01, #0
15498     34 40 B1 FD | 	call	#__system___getiolock_1306
1549c     1A 75 02 F6 | 	mov	arg01, result1
154a0     CC 07 B1 FD | 	call	#__system___lockmem
154a4     56 01 00 FF 
154a8     AD 76 06 F6 | 	mov	arg02, ##@LR__2233
154ac     00 74 06 F6 | 	mov	arg01, #0
154b0     00 78 06 F6 | 	mov	arg03, #0
154b4     60 0D B1 FD | 	call	#__system___basic_print_string
154b8     0C 8C 06 F1 | 	add	local01, #12
154bc     46 77 02 FB | 	rdlong	arg02, local01
154c0     44 8C 86 F1 | 	sub	local01, #68
154c4     00 74 06 F6 | 	mov	arg01, #0
154c8     00 78 06 F6 | 	mov	arg03, #0
154cc     0A 7A 06 F6 | 	mov	arg04, #10
154d0     88 0D B1 FD | 	call	#__system___basic_print_integer
154d4     00 74 06 F6 | 	mov	arg01, #0
154d8     0A 76 06 F6 | 	mov	arg02, #10
154dc     00 78 06 F6 | 	mov	arg03, #0
154e0     E8 0C B1 FD | 	call	#__system___basic_print_char
154e4     00 74 06 F6 | 	mov	arg01, #0
154e8     E4 3F B1 FD | 	call	#__system___getiolock_1306
154ec     1A 01 68 FC | 	wrlong	#0, result1
154f0     00 74 06 F6 | 	mov	arg01, #0
154f4     D8 3F B1 FD | 	call	#__system___getiolock_1306
154f8     1A 75 02 F6 | 	mov	arg01, result1
154fc     70 07 B1 FD | 	call	#__system___lockmem
15500     56 01 00 FF 
15504     BD 76 06 F6 | 	mov	arg02, ##@LR__2234
15508     00 74 06 F6 | 	mov	arg01, #0
1550c     00 78 06 F6 | 	mov	arg03, #0
15510     04 0D B1 FD | 	call	#__system___basic_print_string
15514     00 74 06 F6 | 	mov	arg01, #0
15518     0A 76 06 F6 | 	mov	arg02, #10
1551c     00 78 06 F6 | 	mov	arg03, #0
15520     A8 0C B1 FD | 	call	#__system___basic_print_char
15524     00 74 06 F6 | 	mov	arg01, #0
15528     A4 3F B1 FD | 	call	#__system___getiolock_1306
1552c     1A 01 68 FC | 	wrlong	#0, result1
15530     00 8E 06 F6 | 	mov	local02, #0
15534                 | '     for (int i = 0; i < set->quartetCount; i++)
15534                 | LR__0567
15534     48 8C 06 F1 | 	add	local01, #72
15538     46 75 02 FB | 	rdlong	arg01, local01
1553c     48 8C 86 F1 | 	sub	local01, #72
15540     3A 8F 52 F2 | 	cmps	local02, arg01 wc
15544     20 00 90 3D |  if_ae	jmp	#LR__0568
15548     64 8E 06 FD | 	qmul	local02, #100
1554c     4C 8C 06 F1 | 	add	local01, #76
15550     18 74 62 FD | 	getqx	arg01
15554     46 75 02 F1 | 	add	arg01, local01
15558     B8 FB BF FD | 	call	#_json_print_quartet
1555c     01 8E 06 F1 | 	add	local02, #1
15560     4C 8C 86 F1 | 	sub	local01, #76
15564     CC FF 9F FD | 	jmp	#LR__0567
15568                 | LR__0568
15568     A8 F0 03 F6 | 	mov	ptra, fp
1556c     B3 00 A0 FD | 	call	#popregs_
15570                 | _json_print_motion_set_ret
15570     2D 00 64 FD | 	ret
15574                 | 
15574                 | _check_buttons_0743
15574     0C 76 06 F1 | 	add	arg02, #12
15578     3B 75 62 FC | 	wrlong	arg01, arg02
1557c     0C 76 86 F1 | 	sub	arg02, #12
15580     3B 03 48 FC | 	wrbyte	#1, arg02
15584                 | _check_buttons_0743_ret
15584     2D 00 64 FD | 	ret
15588                 | 
15588                 | _monitor_cog_0769
15588     0B 4C 05 F6 | 	mov	COUNT_, #11
1558c     A9 00 A0 FD | 	call	#pushregs_
15590     18 F0 07 F1 | 	add	ptra, #24
15594     A8 74 62 FC | 	wrlong	arg01, fp
15598     56 01 00 FF 
1559c     CB 8C 06 F6 | 	mov	local01, ##@LR__2235
155a0     28 74 06 F6 | 	mov	arg01, #40
155a4     2A 76 06 F6 | 	mov	arg02, #42
155a8     29 78 06 F6 | 	mov	arg03, #41
155ac     27 7A 06 F6 | 	mov	arg04, #39
155b0     84 BC BE FD | 	call	#__vfs_open_sdcardx
155b4     1A 77 02 F6 | 	mov	arg02, result1
155b8     46 75 02 F6 | 	mov	arg01, local01
155bc     88 3A B0 FD | 	call	#__mount
155c0     D8 00 00 FF 
155c4     08 D7 05 F1 | 	add	ptr__dat__, ##110856
155c8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
155cc     D8 00 00 FF 
155d0     08 D7 85 F1 | 	sub	ptr__dat__, ##110856
155d4     0F 76 06 F6 | 	mov	arg02, #15
155d8     10 78 06 F6 | 	mov	arg03, #16
155dc     D8 32 BF FD | 	call	#_force_gauge_begin
155e0     00 34 0E F2 | 	cmp	result1, #0 wz
155e4     1C 00 90 5D |  if_ne	jmp	#LR__0569
155e8     A8 8E 02 FB | 	rdlong	local02, fp
155ec     0C 8E 06 F1 | 	add	local02, #12
155f0     47 75 02 FB | 	rdlong	arg01, local02
155f4     05 76 06 F6 | 	mov	arg02, #5
155f8     01 78 06 F6 | 	mov	arg03, #1
155fc     B4 D3 BE FD | 	call	#_state_machine_set
15600     18 00 90 FD | 	jmp	#LR__0570
15604                 | LR__0569
15604     A8 8E 02 FB | 	rdlong	local02, fp
15608     0C 8E 06 F1 | 	add	local02, #12
1560c     47 75 02 FB | 	rdlong	arg01, local02
15610     05 76 06 F6 | 	mov	arg02, #5
15614     00 78 06 F6 | 	mov	arg03, #0
15618     98 D3 BE FD | 	call	#_state_machine_set
1561c                 | LR__0570
1561c     DA 00 00 FF 
15620     3C D6 05 F1 | 	add	ptr__dat__, ##111676
15624     14 74 06 F6 | 	mov	arg01, #20
15628     13 76 06 F6 | 	mov	arg02, #19
1562c     01 78 66 F6 | 	neg	arg03, #1
15630     00 7A 06 F6 | 	mov	arg04, #0
15634     00 7C 06 F6 | 	mov	arg05, #0
15638     3C FF 7F FF 
1563c     60 7F 06 F6 | 	mov	arg06, ##-100000
15640     C3 00 00 FF 
15644     A0 80 06 F6 | 	mov	arg07, ##100000
15648     C9 8C 02 F6 | 	mov	local01, objptr
1564c     EB 92 01 F6 | 	mov	objptr, ptr__dat__
15650     DA 00 00 FF 
15654     3C D6 85 F1 | 	sub	ptr__dat__, ##111676
15658     C0 70 B0 FD | 	call	#_jm_quadrature_spin2_start
1565c     46 93 01 F6 | 	mov	objptr, local01
15660     1A 8D 02 F6 | 	mov	local01, result1
15664     14 E0 06 FB | 	rdlong	muldiva_, #20
15668     10 8C 06 F1 | 	add	local01, #16
1566c     46 E3 02 FB | 	rdlong	muldivb_, local01
15670     BB 00 A0 FD | 	call	#divide_
15674     04 50 05 F1 | 	add	fp, #4
15678     A8 E2 62 FC | 	wrlong	muldivb_, fp
1567c     04 50 85 F1 | 	sub	fp, #4
15680     00 74 06 F6 | 	mov	arg01, #0
15684     48 3E B1 FD | 	call	#__system___getiolock_1306
15688     1A 75 02 F6 | 	mov	arg01, result1
1568c     E0 05 B1 FD | 	call	#__system___lockmem
15690     56 01 00 FF 
15694     CF 76 06 F6 | 	mov	arg02, ##@LR__2236
15698     00 74 06 F6 | 	mov	arg01, #0
1569c     00 78 06 F6 | 	mov	arg03, #0
156a0     74 0B B1 FD | 	call	#__system___basic_print_string
156a4     A8 8C 02 FB | 	rdlong	local01, fp
156a8     10 8C 06 F1 | 	add	local01, #16
156ac     46 77 02 FB | 	rdlong	arg02, local01
156b0     00 74 06 F6 | 	mov	arg01, #0
156b4     00 78 06 F6 | 	mov	arg03, #0
156b8     0A 7A 06 F6 | 	mov	arg04, #10
156bc     9C 0B B1 FD | 	call	#__system___basic_print_integer
156c0     56 01 00 FF 
156c4     E7 76 06 F6 | 	mov	arg02, ##@LR__2237
156c8     00 74 06 F6 | 	mov	arg01, #0
156cc     00 78 06 F6 | 	mov	arg03, #0
156d0     44 0B B1 FD | 	call	#__system___basic_print_string
156d4     04 50 05 F1 | 	add	fp, #4
156d8     A8 76 02 FB | 	rdlong	arg02, fp
156dc     04 50 85 F1 | 	sub	fp, #4
156e0     0A 90 06 F6 | 	mov	local03, #10
156e4     00 74 06 F6 | 	mov	arg01, #0
156e8     00 78 06 F6 | 	mov	arg03, #0
156ec     0A 7A 06 F6 | 	mov	arg04, #10
156f0     68 0B B1 FD | 	call	#__system___basic_print_integer
156f4     1A 93 02 F6 | 	mov	local04, result1
156f8     00 74 06 F6 | 	mov	arg01, #0
156fc     0A 76 06 F6 | 	mov	arg02, #10
15700     00 78 06 F6 | 	mov	arg03, #0
15704     C4 0A B1 FD | 	call	#__system___basic_print_char
15708     01 94 06 F6 | 	mov	local05, #1
1570c     00 74 06 F6 | 	mov	arg01, #0
15710     BC 3D B1 FD | 	call	#__system___getiolock_1306
15714     1A 01 68 FC | 	wrlong	#0, result1
15718     00 34 06 F6 | 	mov	result1, #0
1571c     00 96 06 F6 | 	mov	local06, #0
15720     00 8C 06 F6 | 	mov	local01, #0
15724     08 50 05 F1 | 	add	fp, #8
15728     A8 00 68 FC | 	wrlong	#0, fp
1572c     08 50 85 F1 | 	sub	fp, #8
15730     D8 00 00 FF 
15734     04 D7 05 F1 | 	add	ptr__dat__, ##110852
15738     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
1573c     D8 00 00 FF 
15740     04 D7 85 F1 | 	sub	ptr__dat__, ##110852
15744                 | '     FILE *file =  (0) ;
15744                 | ' 
15744                 | '     monitorWriteData =  (0) ;
15744                 | '     while (1)
15744                 | LR__0571
15744     1A 34 62 FD | 	getct	result1
15748     04 50 05 F1 | 	add	fp, #4
1574c     A8 8E 02 FB | 	rdlong	local02, fp
15750     47 35 02 F1 | 	add	result1, local02
15754     08 50 05 F1 | 	add	fp, #8
15758     A8 34 62 FC | 	wrlong	result1, fp
1575c     D8 00 00 FF 
15760     08 D7 05 F1 | 	add	ptr__dat__, ##110856
15764     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15768     D8 00 00 FF 
1576c     08 D7 85 F1 | 	sub	ptr__dat__, ##110856
15770     04 50 05 F1 | 	add	fp, #4
15774     A8 76 02 F6 | 	mov	arg02, fp
15778     10 50 85 F1 | 	sub	fp, #16
1577c     3C 30 BF FD | 	call	#_force_gauge_get_raw
15780     14 50 05 F1 | 	add	fp, #20
15784     A8 34 62 FC | 	wrlong	result1, fp
15788     04 50 85 F1 | 	sub	fp, #4
1578c     A8 8C 0A FB | 	rdlong	local01, fp wz
15790     10 50 85 F1 | 	sub	fp, #16
15794     18 00 90 5D |  if_ne	jmp	#LR__0572
15798     A8 8C 02 FB | 	rdlong	local01, fp
1579c     14 50 05 F1 | 	add	fp, #20
157a0     A8 8E 02 FB | 	rdlong	local02, fp
157a4     14 50 85 F1 | 	sub	fp, #20
157a8     46 8F 62 FC | 	wrlong	local02, local01
157ac     C8 00 90 FD | 	jmp	#LR__0575
157b0                 | LR__0572
157b0     00 74 06 F6 | 	mov	arg01, #0
157b4     18 3D B1 FD | 	call	#__system___getiolock_1306
157b8     1A 75 02 F6 | 	mov	arg01, result1
157bc     B0 04 B1 FD | 	call	#__system___lockmem
157c0     56 01 00 FF 
157c4     F9 76 06 F6 | 	mov	arg02, ##@LR__2238
157c8     00 74 06 F6 | 	mov	arg01, #0
157cc     00 78 06 F6 | 	mov	arg03, #0
157d0     44 0A B1 FD | 	call	#__system___basic_print_string
157d4     00 74 06 F6 | 	mov	arg01, #0
157d8     0A 76 06 F6 | 	mov	arg02, #10
157dc     00 78 06 F6 | 	mov	arg03, #0
157e0     E8 09 B1 FD | 	call	#__system___basic_print_char
157e4     00 74 06 F6 | 	mov	arg01, #0
157e8     E4 3C B1 FD | 	call	#__system___getiolock_1306
157ec     1A 01 68 FC | 	wrlong	#0, result1
157f0     D8 00 00 FF 
157f4     08 D7 05 F1 | 	add	ptr__dat__, ##110856
157f8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
157fc     D8 00 00 FF 
15800     08 D7 85 F1 | 	sub	ptr__dat__, ##110856
15804     3A 99 02 F6 | 	mov	local07, arg01
15808     0C 98 06 F1 | 	add	local07, #12
1580c     C9 9A 02 F6 | 	mov	local08, objptr
15810     4C 93 01 F6 | 	mov	objptr, local07
15814     0C 6A B0 FD | 	call	#_jm_fullduplexserial_spin2_stop
15818     4D 93 01 F6 | 	mov	objptr, local08
1581c     D8 00 00 FF 
15820     08 D7 05 F1 | 	add	ptr__dat__, ##110856
15824     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15828     D8 00 00 FF 
1582c     08 D7 85 F1 | 	sub	ptr__dat__, ##110856
15830     0F 76 06 F6 | 	mov	arg02, #15
15834     10 78 06 F6 | 	mov	arg03, #16
15838     7C 30 BF FD | 	call	#_force_gauge_begin
1583c     00 34 0E F2 | 	cmp	result1, #0 wz
15840     1C 00 90 5D |  if_ne	jmp	#LR__0573
15844     A8 8E 02 FB | 	rdlong	local02, fp
15848     0C 8E 06 F1 | 	add	local02, #12
1584c     47 75 02 FB | 	rdlong	arg01, local02
15850     05 76 06 F6 | 	mov	arg02, #5
15854     01 78 06 F6 | 	mov	arg03, #1
15858     58 D1 BE FD | 	call	#_state_machine_set
1585c     18 00 90 FD | 	jmp	#LR__0574
15860                 | LR__0573
15860     A8 8E 02 FB | 	rdlong	local02, fp
15864     0C 8E 06 F1 | 	add	local02, #12
15868     47 75 02 FB | 	rdlong	arg01, local02
1586c     05 76 06 F6 | 	mov	arg02, #5
15870     00 78 06 F6 | 	mov	arg03, #0
15874     3C D1 BE FD | 	call	#_state_machine_set
15878                 | LR__0574
15878                 | LR__0575
15878     A8 8C 02 FB | 	rdlong	local01, fp
1587c     DA 00 00 FF 
15880     3C D6 05 F1 | 	add	ptr__dat__, ##111676
15884     C9 9C 02 F6 | 	mov	local09, objptr
15888     EB 92 01 F6 | 	mov	objptr, ptr__dat__
1588c     DA 00 00 FF 
15890     3C D6 85 F1 | 	sub	ptr__dat__, ##111676
15894     B0 6F B0 FD | 	call	#_jm_quadrature_spin2_value
15898     4E 93 01 F6 | 	mov	objptr, local09
1589c     1A 8F 02 F6 | 	mov	local02, result1
158a0     04 8C 06 F1 | 	add	local01, #4
158a4     46 8F 62 FC | 	wrlong	local02, local01
158a8     A8 8C 02 FB | 	rdlong	local01, fp
158ac     F0 01 B1 FD | 	call	#__system___getms
158b0     08 8C 06 F1 | 	add	local01, #8
158b4     46 35 62 FC | 	wrlong	result1, local01
158b8     D8 00 00 FF 
158bc     04 D7 05 F1 | 	add	ptr__dat__, ##110852
158c0     EB 8C CA FA | 	rdbyte	local01, ptr__dat__ wz
158c4     D8 00 00 FF 
158c8     04 D7 85 F1 | 	sub	ptr__dat__, ##110852
158cc     34 01 90 AD |  if_e	jmp	#LR__0578
158d0     08 50 05 F1 | 	add	fp, #8
158d4     A8 8C 0A FB | 	rdlong	local01, fp wz
158d8     08 50 85 F1 | 	sub	fp, #8
158dc     D0 00 90 5D |  if_ne	jmp	#LR__0577
158e0     56 01 00 FF 
158e4     2B 75 06 F6 | 	mov	arg01, ##@LR__2239
158e8     56 01 00 FF 
158ec     38 77 06 F6 | 	mov	arg02, ##@LR__2240
158f0     70 C6 BE FD | 	call	#_fopen
158f4     08 50 05 F1 | 	add	fp, #8
158f8     A8 34 62 FC | 	wrlong	result1, fp
158fc     08 50 85 F1 | 	sub	fp, #8
15900     00 34 0E F2 | 	cmp	result1, #0 wz
15904     44 00 90 5D |  if_ne	jmp	#LR__0576
15908     00 74 06 F6 | 	mov	arg01, #0
1590c     C0 3B B1 FD | 	call	#__system___getiolock_1306
15910     1A 75 02 F6 | 	mov	arg01, result1
15914     58 03 B1 FD | 	call	#__system___lockmem
15918     56 01 00 FF 
1591c     3A 77 06 F6 | 	mov	arg02, ##@LR__2241
15920     00 74 06 F6 | 	mov	arg01, #0
15924     00 78 06 F6 | 	mov	arg03, #0
15928     EC 08 B1 FD | 	call	#__system___basic_print_string
1592c     00 74 06 F6 | 	mov	arg01, #0
15930     0A 76 06 F6 | 	mov	arg02, #10
15934     00 78 06 F6 | 	mov	arg03, #0
15938     90 08 B1 FD | 	call	#__system___basic_print_char
1593c     00 74 06 F6 | 	mov	arg01, #0
15940     8C 3B B1 FD | 	call	#__system___getiolock_1306
15944     1A 01 68 FC | 	wrlong	#0, result1
15948     2C 01 90 FD | 	jmp	#LR__0580
1594c                 | LR__0576
1594c     00 74 06 F6 | 	mov	arg01, #0
15950     7C 3B B1 FD | 	call	#__system___getiolock_1306
15954     1A 75 02 F6 | 	mov	arg01, result1
15958     14 03 B1 FD | 	call	#__system___lockmem
1595c     56 01 00 FF 
15960     4E 77 06 F6 | 	mov	arg02, ##@LR__2242
15964     00 74 06 F6 | 	mov	arg01, #0
15968     00 78 06 F6 | 	mov	arg03, #0
1596c     A8 08 B1 FD | 	call	#__system___basic_print_string
15970     00 74 06 F6 | 	mov	arg01, #0
15974     0A 76 06 F6 | 	mov	arg02, #10
15978     00 78 06 F6 | 	mov	arg03, #0
1597c     4C 08 B1 FD | 	call	#__system___basic_print_char
15980     01 9E 06 F6 | 	mov	local10, #1
15984     00 74 06 F6 | 	mov	arg01, #0
15988     44 3B B1 FD | 	call	#__system___getiolock_1306
1598c     1A 01 68 FC | 	wrlong	#0, result1
15990     00 A0 06 F6 | 	mov	local11, #0
15994     08 50 05 F1 | 	add	fp, #8
15998     A8 74 02 FB | 	rdlong	arg01, fp
1599c     08 50 85 F1 | 	sub	fp, #8
159a0     56 01 00 FF 
159a4     5B 77 06 F6 | 	mov	arg02, ##@LR__2243
159a8     30 C5 BE FD | 	call	#_fprintf
159ac     C8 00 90 FD | 	jmp	#LR__0580
159b0                 | LR__0577
159b0     08 50 05 F1 | 	add	fp, #8
159b4     A8 74 02 FB | 	rdlong	arg01, fp
159b8     08 50 85 F1 | 	sub	fp, #8
159bc     56 01 00 FF 
159c0     93 77 06 F6 | 	mov	arg02, ##@LR__2244
159c4     A8 9E 02 FB | 	rdlong	local10, fp
159c8     08 9E 06 F1 | 	add	local10, #8
159cc     4F 9D 02 FB | 	rdlong	local09, local10
159d0     A8 92 02 FB | 	rdlong	local04, fp
159d4     49 9F 02 FB | 	rdlong	local10, local04
159d8     04 92 06 F1 | 	add	local04, #4
159dc     49 95 02 FB | 	rdlong	local05, local04
159e0     04 92 86 F1 | 	sub	local04, #4
159e4     4A A1 02 F6 | 	mov	local11, local05
159e8     F8 79 02 F6 | 	mov	arg03, ptra
159ec     61 9D 66 FC | 	wrlong	local09, ptra++
159f0     61 9F 66 FC | 	wrlong	local10, ptra++
159f4     61 A1 66 FC | 	wrlong	local11, ptra++
159f8     E0 C4 BE FD | 	call	#_fprintf
159fc     0C F0 87 F1 | 	sub	ptra, #12
15a00     74 00 90 FD | 	jmp	#LR__0580
15a04                 | LR__0578
15a04     08 50 05 F1 | 	add	fp, #8
15a08     A8 8C 0A FB | 	rdlong	local01, fp wz
15a0c     08 50 85 F1 | 	sub	fp, #8
15a10     64 00 90 AD |  if_e	jmp	#LR__0579
15a14     00 74 06 F6 | 	mov	arg01, #0
15a18     B4 3A B1 FD | 	call	#__system___getiolock_1306
15a1c     1A 75 02 F6 | 	mov	arg01, result1
15a20     4C 02 B1 FD | 	call	#__system___lockmem
15a24     56 01 00 FF 
15a28     9D 77 06 F6 | 	mov	arg02, ##@LR__2245
15a2c     00 74 06 F6 | 	mov	arg01, #0
15a30     00 78 06 F6 | 	mov	arg03, #0
15a34     E0 07 B1 FD | 	call	#__system___basic_print_string
15a38     00 74 06 F6 | 	mov	arg01, #0
15a3c     0A 76 06 F6 | 	mov	arg02, #10
15a40     00 78 06 F6 | 	mov	arg03, #0
15a44     84 07 B1 FD | 	call	#__system___basic_print_char
15a48     01 9E 06 F6 | 	mov	local10, #1
15a4c     00 74 06 F6 | 	mov	arg01, #0
15a50     7C 3A B1 FD | 	call	#__system___getiolock_1306
15a54     1A 01 68 FC | 	wrlong	#0, result1
15a58     00 A0 06 F6 | 	mov	local11, #0
15a5c     08 50 05 F1 | 	add	fp, #8
15a60     A8 74 02 FB | 	rdlong	arg01, fp
15a64     08 50 85 F1 | 	sub	fp, #8
15a68                 | ' {
15a68                 | '     return _closeraw(f);
15a68     00 B7 BE FD | 	call	#__closeraw
15a6c     08 50 05 F1 | 	add	fp, #8
15a70     A8 00 68 FC | 	wrlong	#0, fp
15a74     08 50 85 F1 | 	sub	fp, #8
15a78                 | LR__0579
15a78                 | LR__0580
15a78     1A 8C 62 FD | 	getct	local01
15a7c     0C 50 05 F1 | 	add	fp, #12
15a80     A8 8E 02 FB | 	rdlong	local02, fp
15a84     0C 50 85 F1 | 	sub	fp, #12
15a88     46 8F 12 F2 | 	cmp	local02, local01 wc
15a8c     B4 FC 9F CD |  if_b	jmp	#LR__0571
15a90     0C 50 05 F1 | 	add	fp, #12
15a94     A8 74 02 FB | 	rdlong	arg01, fp
15a98     0C 50 85 F1 | 	sub	fp, #12
15a9c     00 74 66 FA | 	addct1	arg01, #0
15aa0     24 22 60 FD | 	waitct1
15aa4     9C FC 9F FD | 	jmp	#LR__0571
15aa8     A8 F0 03 F6 | 	mov	ptra, fp
15aac     B3 00 A0 FD | 	call	#popregs_
15ab0                 | _monitor_cog_0769_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | _button_navigation_0785
15ab4     DA 00 00 FF 
15ab8     58 D6 05 F1 | 	add	ptr__dat__, ##111704
15abc     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
15ac0     DA 00 00 FF 
15ac4     58 D6 85 F1 | 	sub	ptr__dat__, ##111704
15ac8                 | _button_navigation_0785_ret
15ac8     2D 00 64 FD | 	ret
15acc                 | 
15acc                 | _move_servo_0833
15acc     09 4C 05 F6 | 	mov	COUNT_, #9
15ad0     A9 00 A0 FD | 	call	#pushregs_
15ad4     3A 8D 02 F6 | 	mov	local01, arg01
15ad8     3B 8F 02 F6 | 	mov	local02, arg02
15adc     3C 91 02 F6 | 	mov	local03, arg03
15ae0     01 92 06 F6 | 	mov	local04, #1
15ae4                 | '     switch (type)
15ae4     47 95 02 F6 | 	mov	local05, local02
15ae8     04 94 26 F3 | 	fle	local05, #4
15aec     30 94 62 FD | 	jmprel	local05
15af0                 | LR__0581
15af0     34 00 90 FD | 	jmp	#LR__0583
15af4     D0 00 90 FD | 	jmp	#LR__0584
15af8     18 01 90 FD | 	jmp	#LR__0585
15afc     04 00 90 FD | 	jmp	#LR__0582
15b00     74 01 90 FD | 	jmp	#LR__0586
15b04                 | LR__0582
15b04     FA 00 00 FF 
15b08     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
15b0c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15b10     FA 00 00 FF 
15b14     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
15b18     03 76 06 F6 | 	mov	arg02, #3
15b1c     00 78 06 F6 | 	mov	arg03, #0
15b20     9C CA BE FD | 	call	#_dyn4_send_command
15b24                 | '         dyn4_send_command(&dyn4,  0x03 , 0);
15b24                 | '         break;
15b24     50 01 90 FD | 	jmp	#LR__0586
15b28                 | LR__0583
15b28     00 74 06 F6 | 	mov	arg01, #0
15b2c     A0 39 B1 FD | 	call	#__system___getiolock_1306
15b30     1A 75 02 F6 | 	mov	arg01, result1
15b34     38 01 B1 FD | 	call	#__system___lockmem
15b38     56 01 00 FF 
15b3c     AA 77 06 F6 | 	mov	arg02, ##@LR__2246
15b40     00 74 06 F6 | 	mov	arg01, #0
15b44     00 78 06 F6 | 	mov	arg03, #0
15b48     CC 06 B1 FD | 	call	#__system___basic_print_string
15b4c     00 74 06 F6 | 	mov	arg01, #0
15b50     0A 76 06 F6 | 	mov	arg02, #10
15b54     00 78 06 F6 | 	mov	arg03, #0
15b58     70 06 B1 FD | 	call	#__system___basic_print_char
15b5c     00 74 06 F6 | 	mov	arg01, #0
15b60     6C 39 B1 FD | 	call	#__system___getiolock_1306
15b64     1A 01 68 FC | 	wrlong	#0, result1
15b68     48 75 02 F6 | 	mov	arg01, local03
15b6c     84 1B B1 FD | 	call	#__system___float_fromint
15b70     1A 75 02 F6 | 	mov	arg01, result1
15b74     00 3D 22 FF 
15b78     00 76 06 F6 | 	mov	arg02, ##1148846080
15b7c     C8 20 B1 FD | 	call	#__system___float_div
15b80     1A 75 02 F6 | 	mov	arg01, result1
15b84     46 77 02 FB | 	rdlong	arg02, local01
15b88     18 76 06 F1 | 	add	arg02, #24
15b8c     E0 A4 BF FD | 	call	#_mm_to_steps
15b90     04 8C 06 F1 | 	add	local01, #4
15b94     46 95 02 FB | 	rdlong	local05, local01
15b98     04 94 06 F1 | 	add	local05, #4
15b9c     4A 95 02 FB | 	rdlong	local05, local05
15ba0     4A 35 02 F1 | 	add	result1, local05
15ba4     1A 79 02 F6 | 	mov	arg03, result1
15ba8     FA 00 00 FF 
15bac     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
15bb0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15bb4     FA 00 00 FF 
15bb8     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
15bbc     01 76 06 F6 | 	mov	arg02, #1
15bc0     FC C9 BE FD | 	call	#_dyn4_send_command
15bc4                 | '         dyn4_send_command(&dyn4,  0x01 , positionSteps);
15bc4                 | '         break;
15bc4     B0 00 90 FD | 	jmp	#LR__0586
15bc8                 | LR__0584
15bc8     48 75 02 F6 | 	mov	arg01, local03
15bcc     24 1B B1 FD | 	call	#__system___float_fromint
15bd0     1A 75 02 F6 | 	mov	arg01, result1
15bd4     00 3D 22 FF 
15bd8     00 76 06 F6 | 	mov	arg02, ##1148846080
15bdc     68 20 B1 FD | 	call	#__system___float_div
15be0     1A 75 02 F6 | 	mov	arg01, result1
15be4     46 77 02 FB | 	rdlong	arg02, local01
15be8     18 76 06 F1 | 	add	arg02, #24
15bec     80 A4 BF FD | 	call	#_mm_to_steps
15bf0     1A 79 02 F6 | 	mov	arg03, result1
15bf4     FA 00 00 FF 
15bf8     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
15bfc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15c00     FA 00 00 FF 
15c04     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
15c08     01 76 06 F6 | 	mov	arg02, #1
15c0c     B0 C9 BE FD | 	call	#_dyn4_send_command
15c10                 | '         dyn4_send_command(&dyn4,  0x01 , deltaSteps);
15c10                 | '         break;
15c10     64 00 90 FD | 	jmp	#LR__0586
15c14                 | LR__0585
15c14     48 75 02 F6 | 	mov	arg01, local03
15c18     D8 1A B1 FD | 	call	#__system___float_fromint
15c1c     1A 75 02 F6 | 	mov	arg01, result1
15c20     00 3D 22 FF 
15c24     00 76 06 F6 | 	mov	arg02, ##1148846080
15c28     1C 20 B1 FD | 	call	#__system___float_div
15c2c     1A 75 02 F6 | 	mov	arg01, result1
15c30     00 A0 1F FF 
15c34     00 76 06 F6 | 	mov	arg02, ##1061158912
15c38     EC 1D B1 FD | 	call	#__system___float_mul
15c3c     1A 75 02 F6 | 	mov	arg01, result1
15c40     00 76 06 F6 | 	mov	arg02, #0
15c44     D0 22 B1 FD | 	call	#__system___float_tointeger
15c48     1A 97 02 F6 | 	mov	local06, result1
15c4c     FA 00 00 FF 
15c50     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
15c54     EB 98 02 F6 | 	mov	local07, ptr__dat__
15c58     0A 9A 06 F6 | 	mov	local08, #10
15c5c     4B 9D 02 F6 | 	mov	local09, local06
15c60     4C 75 02 F6 | 	mov	arg01, local07
15c64     0A 76 06 F6 | 	mov	arg02, #10
15c68     4E 79 02 F6 | 	mov	arg03, local09
15c6c     FA 00 00 FF 
15c70     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
15c74     48 C9 BE FD | 	call	#_dyn4_send_command
15c78                 | LR__0586
15c78                 | '         dyn4_send_command(&dyn4,  0x0A , rpm);
15c78                 | '     }
15c78                 | '     }
15c78                 | ' 
15c78                 | '     return  (1) ;
15c78     01 34 06 F6 | 	mov	result1, #1
15c7c     A8 F0 03 F6 | 	mov	ptra, fp
15c80     B3 00 A0 FD | 	call	#popregs_
15c84                 | _move_servo_0833_ret
15c84     2D 00 64 FD | 	ret
15c88                 | 
15c88                 | _control_cog_0848
15c88     0C 4C 05 F6 | 	mov	COUNT_, #12
15c8c     A9 00 A0 FD | 	call	#pushregs_
15c90     C8 F0 07 F1 | 	add	ptra, #200
15c94     A8 74 62 FC | 	wrlong	arg01, fp
15c98                 | ' {
15c98                 | ' 
15c98                 | '     while (!mcp23017_begin(&mcp,  0 ,  26 ,  0 ))
15c98                 | LR__0587
15c98     FC 00 00 FF 
15c9c     8C D6 05 F1 | 	add	ptr__dat__, ##129164
15ca0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15ca4     FC 00 00 FF 
15ca8     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
15cac     00 76 06 F6 | 	mov	arg02, #0
15cb0     1A 78 06 F6 | 	mov	arg03, #26
15cb4     00 7A 06 F6 | 	mov	arg04, #0
15cb8     7C C6 BE FD | 	call	#_mcp23017_begin
15cbc     00 34 0E F2 | 	cmp	result1, #0 wz
15cc0     4C 00 90 5D |  if_ne	jmp	#LR__0588
15cc4     00 74 06 F6 | 	mov	arg01, #0
15cc8     04 38 B1 FD | 	call	#__system___getiolock_1306
15ccc     1A 75 02 F6 | 	mov	arg01, result1
15cd0     9C FF B0 FD | 	call	#__system___lockmem
15cd4     56 01 00 FF 
15cd8     BA 77 06 F6 | 	mov	arg02, ##@LR__2247
15cdc     00 74 06 F6 | 	mov	arg01, #0
15ce0     00 78 06 F6 | 	mov	arg03, #0
15ce4     30 05 B1 FD | 	call	#__system___basic_print_string
15ce8     00 74 06 F6 | 	mov	arg01, #0
15cec     0A 76 06 F6 | 	mov	arg02, #10
15cf0     00 78 06 F6 | 	mov	arg03, #0
15cf4     D4 04 B1 FD | 	call	#__system___basic_print_char
15cf8     00 74 06 F6 | 	mov	arg01, #0
15cfc     D0 37 B1 FD | 	call	#__system___getiolock_1306
15d00     1A 01 68 FC | 	wrlong	#0, result1
15d04     64 74 06 F6 | 	mov	arg01, #100
15d08     7C 00 B1 FD | 	call	#__system___waitms
15d0c     88 FF 9F FD | 	jmp	#LR__0587
15d10                 | LR__0588
15d10     FA 00 00 FF 
15d14     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
15d18     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15d1c     FA 00 00 FF 
15d20     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
15d24     0E 76 06 F6 | 	mov	arg02, #14
15d28     0C 78 06 F6 | 	mov	arg03, #12
15d2c     00 7A 06 F6 | 	mov	arg04, #0
15d30     D0 C7 BE FD | 	call	#_dyn4_begin
15d34     FC 00 00 FF 
15d38     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15d3c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15d40     FC 00 00 FF 
15d44     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15d48     1D 76 06 F6 | 	mov	arg02, #29
15d4c     1C 78 06 F6 | 	mov	arg03, #28
15d50     24 7A 06 F6 | 	mov	arg04, #36
15d54     00 7C 06 F6 | 	mov	arg05, #0
15d58     F8 52 BF FD | 	call	#_navkey_begin
15d5c     FC 00 00 FF 
15d60     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15d64     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15d68     FC 00 00 FF 
15d6c     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15d70     00 78 06 F6 | 	mov	arg03, #0
15d74     0A 76 06 F6 | 	mov	arg02, #10
15d78     3C 4A B0 FD | 	call	#_writeNavKey32_1907
15d7c     FC 00 00 FF 
15d80     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15d84     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15d88     FC 00 00 FF 
15d8c     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15d90     C3 00 00 FF 
15d94     A0 76 06 F6 | 	mov	arg02, ##100000
15d98     90 54 BF FD | 	call	#_navkey_write_max
15d9c     FC 00 00 FF 
15da0     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15da4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15da8     FC 00 00 FF 
15dac     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15db0     3C FF 7F FF 
15db4     60 77 06 F6 | 	mov	arg02, ##-100000
15db8     A0 54 BF FD | 	call	#_navkey_write_min
15dbc     FC 00 00 FF 
15dc0     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15dc4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15dc8     FC 00 00 FF 
15dcc     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15dd0     01 78 06 F6 | 	mov	arg03, #1
15dd4     16 76 06 F6 | 	mov	arg02, #22
15dd8     DC 49 B0 FD | 	call	#_writeNavKey32_1907
15ddc     FC 00 00 FF 
15de0     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15de4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15de8     FC 00 00 FF 
15dec     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15df0     2C 79 06 F6 | 	mov	arg03, #300
15df4     1D 76 06 F6 | 	mov	arg02, #29
15df8     5C 49 B0 FD | 	call	#_writeNavKey8_1906
15dfc     FC 00 00 FF 
15e00     14 D6 05 F1 | 	add	ptr__dat__, ##129044
15e04     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15e08     FC 00 00 FF 
15e0c     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
15e10     00 78 06 F6 | 	mov	arg03, #0
15e14     0A 76 06 F6 | 	mov	arg02, #10
15e18     9C 49 B0 FD | 	call	#_writeNavKey32_1907
15e1c     04 50 05 F1 | 	add	fp, #4
15e20     A8 74 02 F6 | 	mov	arg01, fp
15e24     04 50 85 F1 | 	sub	fp, #4
15e28     A8 78 02 FB | 	rdlong	arg03, fp
15e2c     08 78 06 F1 | 	add	arg03, #8
15e30     3C 77 02 FB | 	rdlong	arg02, arg03
15e34     30 78 06 F6 | 	mov	arg03, #48
15e38     1C FD B0 FD | 	call	#__system____builtin_memmove
15e3c     01 00 00 FF 
15e40     E8 75 06 F6 | 	mov	arg01, ##1000
15e44     40 FF B0 FD | 	call	#__system___waitms
15e48     00 74 06 F6 | 	mov	arg01, #0
15e4c     80 36 B1 FD | 	call	#__system___getiolock_1306
15e50     1A 75 02 F6 | 	mov	arg01, result1
15e54     18 FE B0 FD | 	call	#__system___lockmem
15e58     56 01 00 FF 
15e5c     E3 77 06 F6 | 	mov	arg02, ##@LR__2248
15e60     00 74 06 F6 | 	mov	arg01, #0
15e64     00 78 06 F6 | 	mov	arg03, #0
15e68     AC 03 B1 FD | 	call	#__system___basic_print_string
15e6c     00 74 06 F6 | 	mov	arg01, #0
15e70     0A 76 06 F6 | 	mov	arg02, #10
15e74     00 78 06 F6 | 	mov	arg03, #0
15e78     50 03 B1 FD | 	call	#__system___basic_print_char
15e7c     00 74 06 F6 | 	mov	arg01, #0
15e80     4C 36 B1 FD | 	call	#__system___getiolock_1306
15e84     1A 01 68 FC | 	wrlong	#0, result1
15e88     34 50 05 F1 | 	add	fp, #52
15e8c     A8 00 68 FC | 	wrlong	#0, fp
15e90     04 50 05 F1 | 	add	fp, #4
15e94     A8 00 68 FC | 	wrlong	#0, fp
15e98     04 50 05 F1 | 	add	fp, #4
15e9c     A8 02 48 FC | 	wrbyte	#1, fp
15ea0     04 50 05 F1 | 	add	fp, #4
15ea4     A8 00 68 FC | 	wrlong	#0, fp
15ea8     40 50 85 F1 | 	sub	fp, #64
15eac     A8 8C 02 FB | 	rdlong	local01, fp
15eb0     04 8C 06 F1 | 	add	local01, #4
15eb4     46 8D 02 FB | 	rdlong	local01, local01
15eb8     46 8D 02 FB | 	rdlong	local01, local01
15ebc     A8 34 02 FB | 	rdlong	result1, fp
15ec0     04 34 06 F1 | 	add	result1, #4
15ec4     1A 35 02 FB | 	rdlong	result1, result1
15ec8     04 34 06 F1 | 	add	result1, #4
15ecc     1A 8F 02 FB | 	rdlong	local02, result1
15ed0     A8 90 02 FB | 	rdlong	local03, fp
15ed4     04 90 06 F1 | 	add	local03, #4
15ed8     48 93 02 FB | 	rdlong	local04, local03
15edc     08 92 06 F1 | 	add	local04, #8
15ee0     49 95 02 FB | 	rdlong	local05, local04
15ee4     44 50 05 F1 | 	add	fp, #68
15ee8     A8 8C 62 FC | 	wrlong	local01, fp
15eec     04 50 05 F1 | 	add	fp, #4
15ef0     A8 8E 62 FC | 	wrlong	local02, fp
15ef4     04 50 05 F1 | 	add	fp, #4
15ef8     A8 94 62 FC | 	wrlong	local05, fp
15efc     4C 50 85 F1 | 	sub	fp, #76
15f00                 | '     MonitorData lastData = *control->monitorData;
15f00                 | '     while (1)
15f00                 | LR__0589
15f00     50 50 05 F1 | 	add	fp, #80
15f04     A8 74 02 F6 | 	mov	arg01, fp
15f08     50 50 85 F1 | 	sub	fp, #80
15f0c     A8 94 02 FB | 	rdlong	local05, fp
15f10     08 94 06 F1 | 	add	local05, #8
15f14     4A 77 02 FB | 	rdlong	arg02, local05
15f18     30 78 06 F6 | 	mov	arg03, #48
15f1c     38 FC B0 FD | 	call	#__system____builtin_memmove
15f20     A8 8E 02 FB | 	rdlong	local02, fp
15f24     04 8E 06 F1 | 	add	local02, #4
15f28     47 95 02 FB | 	rdlong	local05, local02
15f2c     4A 8D 02 FB | 	rdlong	local01, local05
15f30     A8 94 02 FB | 	rdlong	local05, fp
15f34     04 94 06 F1 | 	add	local05, #4
15f38     4A 91 02 FB | 	rdlong	local03, local05
15f3c     04 90 06 F1 | 	add	local03, #4
15f40     48 8F 02 FB | 	rdlong	local02, local03
15f44     A8 90 02 FB | 	rdlong	local03, fp
15f48     04 90 06 F1 | 	add	local03, #4
15f4c     48 97 02 FB | 	rdlong	local06, local03
15f50     4B 93 02 F6 | 	mov	local04, local06
15f54     08 92 06 F1 | 	add	local04, #8
15f58     49 99 02 FB | 	rdlong	local07, local04
15f5c     80 50 05 F1 | 	add	fp, #128
15f60     A8 8C 62 FC | 	wrlong	local01, fp
15f64     04 50 05 F1 | 	add	fp, #4
15f68     A8 8E 62 FC | 	wrlong	local02, fp
15f6c     04 50 05 F1 | 	add	fp, #4
15f70     A8 98 62 FC | 	wrlong	local07, fp
15f74     88 50 85 F1 | 	sub	fp, #136
15f78     A8 8E 02 FB | 	rdlong	local02, fp
15f7c     04 8E 06 F1 | 	add	local02, #4
15f80     47 95 02 FB | 	rdlong	local05, local02
15f84     4A 75 02 FB | 	rdlong	arg01, local05
15f88     A8 94 02 FB | 	rdlong	local05, fp
15f8c     4A 77 02 FB | 	rdlong	arg02, local05
15f90     18 76 06 F1 | 	add	arg02, #24
15f94     CC 27 BF FD | 	call	#_raw_to_force
15f98     8C 50 05 F1 | 	add	fp, #140
15f9c     A8 34 62 FC | 	wrlong	result1, fp
15fa0     04 50 05 F1 | 	add	fp, #4
15fa4     A8 74 02 F6 | 	mov	arg01, fp
15fa8     90 50 85 F1 | 	sub	fp, #144
15fac     A8 94 02 FB | 	rdlong	local05, fp
15fb0     4A 93 02 FB | 	rdlong	local04, local05
15fb4     7C 92 06 F1 | 	add	local04, #124
15fb8     49 77 02 F6 | 	mov	arg02, local04
15fbc     1C 78 06 F6 | 	mov	arg03, #28
15fc0     94 FB B0 FD | 	call	#__system____builtin_memmove
15fc4     FC 00 00 FF 
15fc8     8C D6 05 F1 | 	add	ptr__dat__, ##129164
15fcc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15fd0     FC 00 00 FF 
15fd4     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
15fd8     58 C4 BE FD | 	call	#_mcp_update_register
15fdc     FC 00 00 FF 
15fe0     8C D6 05 F1 | 	add	ptr__dat__, ##129164
15fe4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15fe8     FC 00 00 FF 
15fec     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
15ff0     06 76 06 F6 | 	mov	arg02, #6
15ff4     00 78 06 F6 | 	mov	arg03, #0
15ff8     01 7A 06 F6 | 	mov	arg04, #1
15ffc     74 C4 BE FD | 	call	#_mcp_set_pin
16000     54 50 05 F1 | 	add	fp, #84
16004     A8 8C CA FA | 	rdbyte	local01, fp wz
16008     54 50 85 F1 | 	sub	fp, #84
1600c     28 00 90 AD |  if_e	jmp	#LR__0590
16010     FC 00 00 FF 
16014     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16018     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1601c     FC 00 00 FF 
16020     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16024     04 76 06 F6 | 	mov	arg02, #4
16028     00 78 06 F6 | 	mov	arg03, #0
1602c     00 7A 06 F6 | 	mov	arg04, #0
16030     40 C4 BE FD | 	call	#_mcp_set_pin
16034     24 00 90 FD | 	jmp	#LR__0591
16038                 | LR__0590
16038     FC 00 00 FF 
1603c     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16040     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16044     FC 00 00 FF 
16048     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
1604c     04 76 06 F6 | 	mov	arg02, #4
16050     00 78 06 F6 | 	mov	arg03, #0
16054     00 7A 06 F6 | 	mov	arg04, #0
16058     18 C4 BE FD | 	call	#_mcp_set_pin
1605c                 | LR__0591
1605c     FC 00 00 FF 
16060     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16064     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16068     FC 00 00 FF 
1606c     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16070     03 76 06 F6 | 	mov	arg02, #3
16074     00 78 06 F6 | 	mov	arg03, #0
16078     60 C4 BE FD | 	call	#_mcp_get_pin
1607c     07 34 4E F7 | 	zerox	result1, #7 wz
16080     1C 00 90 5D |  if_ne	jmp	#LR__0592
16084     A8 8E 02 FB | 	rdlong	local02, fp
16088     08 8E 06 F1 | 	add	local02, #8
1608c     47 75 02 FB | 	rdlong	arg01, local02
16090     01 76 06 F6 | 	mov	arg02, #1
16094     01 78 06 F6 | 	mov	arg03, #1
16098     18 C9 BE FD | 	call	#_state_machine_set
1609c     18 00 90 FD | 	jmp	#LR__0593
160a0                 | LR__0592
160a0     A8 8E 02 FB | 	rdlong	local02, fp
160a4     08 8E 06 F1 | 	add	local02, #8
160a8     47 75 02 FB | 	rdlong	arg01, local02
160ac     01 76 06 F6 | 	mov	arg02, #1
160b0     00 78 06 F6 | 	mov	arg03, #0
160b4     FC C8 BE FD | 	call	#_state_machine_set
160b8                 | LR__0593
160b8     FC 00 00 FF 
160bc     8C D6 05 F1 | 	add	ptr__dat__, ##129164
160c0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
160c4     FC 00 00 FF 
160c8     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
160cc     01 76 06 F6 | 	mov	arg02, #1
160d0     00 78 06 F6 | 	mov	arg03, #0
160d4     04 C4 BE FD | 	call	#_mcp_get_pin
160d8     07 34 4E F7 | 	zerox	result1, #7 wz
160dc     1C 00 90 5D |  if_ne	jmp	#LR__0594
160e0     A8 8E 02 FB | 	rdlong	local02, fp
160e4     08 8E 06 F1 | 	add	local02, #8
160e8     47 75 02 FB | 	rdlong	arg01, local02
160ec     02 76 06 F6 | 	mov	arg02, #2
160f0     02 78 06 F6 | 	mov	arg03, #2
160f4     BC C8 BE FD | 	call	#_state_machine_set
160f8     5C 00 90 FD | 	jmp	#LR__0597
160fc                 | LR__0594
160fc     FC 00 00 FF 
16100     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16104     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16108     FC 00 00 FF 
1610c     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16110     00 76 06 F6 | 	mov	arg02, #0
16114     00 78 06 F6 | 	mov	arg03, #0
16118     C0 C3 BE FD | 	call	#_mcp_get_pin
1611c     07 34 4E F7 | 	zerox	result1, #7 wz
16120     1C 00 90 5D |  if_ne	jmp	#LR__0595
16124     A8 8E 02 FB | 	rdlong	local02, fp
16128     08 8E 06 F1 | 	add	local02, #8
1612c     47 75 02 FB | 	rdlong	arg01, local02
16130     02 76 06 F6 | 	mov	arg02, #2
16134     01 78 06 F6 | 	mov	arg03, #1
16138     78 C8 BE FD | 	call	#_state_machine_set
1613c     18 00 90 FD | 	jmp	#LR__0596
16140                 | LR__0595
16140     A8 8E 02 FB | 	rdlong	local02, fp
16144     08 8E 06 F1 | 	add	local02, #8
16148     47 75 02 FB | 	rdlong	arg01, local02
1614c     02 76 06 F6 | 	mov	arg02, #2
16150     00 78 06 F6 | 	mov	arg03, #0
16154     5C C8 BE FD | 	call	#_state_machine_set
16158                 | LR__0596
16158                 | LR__0597
16158     FC 00 00 FF 
1615c     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16160     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16164     FC 00 00 FF 
16168     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
1616c     03 76 06 F6 | 	mov	arg02, #3
16170     01 78 06 F6 | 	mov	arg03, #1
16174     64 C3 BE FD | 	call	#_mcp_get_pin
16178     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1617c     01 34 0E F2 | 	cmp	result1, #1 wz
16180     1C 00 90 5D |  if_ne	jmp	#LR__0598
16184     A8 8E 02 FB | 	rdlong	local02, fp
16188     08 8E 06 F1 | 	add	local02, #8
1618c     47 75 02 FB | 	rdlong	arg01, local02
16190     03 76 06 F6 | 	mov	arg02, #3
16194     01 78 06 F6 | 	mov	arg03, #1
16198     18 C8 BE FD | 	call	#_state_machine_set
1619c     18 00 90 FD | 	jmp	#LR__0599
161a0                 | LR__0598
161a0     A8 8E 02 FB | 	rdlong	local02, fp
161a4     08 8E 06 F1 | 	add	local02, #8
161a8     47 75 02 FB | 	rdlong	arg01, local02
161ac     03 76 06 F6 | 	mov	arg02, #3
161b0     00 78 06 F6 | 	mov	arg03, #0
161b4     FC C7 BE FD | 	call	#_state_machine_set
161b8                 | LR__0599
161b8     FC 00 00 FF 
161bc     8C D6 05 F1 | 	add	ptr__dat__, ##129164
161c0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
161c4     FC 00 00 FF 
161c8     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
161cc     02 76 06 F6 | 	mov	arg02, #2
161d0     00 78 06 F6 | 	mov	arg03, #0
161d4     04 C3 BE FD | 	call	#_mcp_get_pin
161d8     1A 35 E2 F8 | 	getbyte	result1, result1, #0
161dc     01 34 0E F2 | 	cmp	result1, #1 wz
161e0     1C 00 90 5D |  if_ne	jmp	#LR__0600
161e4     A8 8E 02 FB | 	rdlong	local02, fp
161e8     08 8E 06 F1 | 	add	local02, #8
161ec     47 75 02 FB | 	rdlong	arg01, local02
161f0     04 76 06 F6 | 	mov	arg02, #4
161f4     01 78 06 F6 | 	mov	arg03, #1
161f8     B8 C7 BE FD | 	call	#_state_machine_set
161fc     18 00 90 FD | 	jmp	#LR__0601
16200                 | LR__0600
16200     A8 8E 02 FB | 	rdlong	local02, fp
16204     08 8E 06 F1 | 	add	local02, #8
16208     47 75 02 FB | 	rdlong	arg01, local02
1620c     04 76 06 F6 | 	mov	arg02, #4
16210     00 78 06 F6 | 	mov	arg03, #0
16214     9C C7 BE FD | 	call	#_state_machine_set
16218                 | LR__0601
16218     FA 00 00 FF 
1621c     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
16220     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16224     FA 00 00 FF 
16228     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
1622c     AC 50 05 F1 | 	add	fp, #172
16230     A8 76 02 F6 | 	mov	arg02, fp
16234     AC 50 85 F1 | 	sub	fp, #172
16238     3C C6 BE FD | 	call	#_dyn4_get_status
1623c     00 34 0E F2 | 	cmp	result1, #0 wz
16240     38 00 90 AD |  if_e	jmp	#LR__0602
16244     40 50 05 F1 | 	add	fp, #64
16248     A8 8C 02 FB | 	rdlong	local01, fp
1624c     01 8C 06 F1 | 	add	local01, #1
16250     A8 8C 62 FC | 	wrlong	local01, fp
16254     40 50 85 F1 | 	sub	fp, #64
16258     04 8C 56 F2 | 	cmps	local01, #4 wc
1625c     40 00 90 CD |  if_b	jmp	#LR__0603
16260     A8 8E 02 FB | 	rdlong	local02, fp
16264     08 8E 06 F1 | 	add	local02, #8
16268     47 75 02 FB | 	rdlong	arg01, local02
1626c     06 76 06 F6 | 	mov	arg02, #6
16270     00 78 06 F6 | 	mov	arg03, #0
16274     3C C7 BE FD | 	call	#_state_machine_set
16278     24 00 90 FD | 	jmp	#LR__0603
1627c                 | LR__0602
1627c     40 50 05 F1 | 	add	fp, #64
16280     A8 00 68 FC | 	wrlong	#0, fp
16284     40 50 85 F1 | 	sub	fp, #64
16288     A8 8E 02 FB | 	rdlong	local02, fp
1628c     08 8E 06 F1 | 	add	local02, #8
16290     47 75 02 FB | 	rdlong	arg01, local02
16294     06 76 06 F6 | 	mov	arg02, #6
16298     01 78 06 F6 | 	mov	arg03, #1
1629c     14 C7 BE FD | 	call	#_state_machine_set
162a0                 | LR__0603
162a0     8C 50 05 F1 | 	add	fp, #140
162a4     A8 8C 02 FB | 	rdlong	local01, fp
162a8     8C 50 85 F1 | 	sub	fp, #140
162ac     00 8C 56 F2 | 	cmps	local01, #0 wc
162b0     6C 00 90 CD |  if_b	jmp	#LR__0604
162b4     8C 50 05 F1 | 	add	fp, #140
162b8     A8 74 02 FB | 	rdlong	arg01, fp
162bc     8C 50 85 F1 | 	sub	fp, #140
162c0     30 14 B1 FD | 	call	#__system___float_fromint
162c4     1A 95 02 F6 | 	mov	local05, result1
162c8     A0 50 05 F1 | 	add	fp, #160
162cc     A8 74 02 FB | 	rdlong	arg01, fp
162d0     A0 50 85 F1 | 	sub	fp, #160
162d4     00 3D 22 FF 
162d8     00 76 06 F6 | 	mov	arg02, ##1148846080
162dc     48 17 B1 FD | 	call	#__system___float_mul
162e0     1A 91 02 F6 | 	mov	local03, result1
162e4     01 92 66 F6 | 	neg	local04, #1
162e8     4A 75 02 F6 | 	mov	arg01, local05
162ec     48 77 02 F6 | 	mov	arg02, local03
162f0     01 78 66 F6 | 	neg	arg03, #1
162f4     88 1B B1 FD | 	call	#__system___float_cmp
162f8     01 34 56 F2 | 	cmps	result1, #1 wc
162fc     20 00 90 CD |  if_b	jmp	#LR__0604
16300     A8 8E 02 FB | 	rdlong	local02, fp
16304     08 8E 06 F1 | 	add	local02, #8
16308     47 75 02 FB | 	rdlong	arg01, local02
1630c     02 94 06 F6 | 	mov	local05, #2
16310     09 76 06 F6 | 	mov	arg02, #9
16314     02 78 06 F6 | 	mov	arg03, #2
16318     98 C6 BE FD | 	call	#_state_machine_set
1631c     C0 01 90 FD | 	jmp	#LR__0615
16320                 | LR__0604
16320     8C 50 05 F1 | 	add	fp, #140
16324     A8 8C 02 FB | 	rdlong	local01, fp
16328     8C 50 85 F1 | 	sub	fp, #140
1632c     00 8C 56 F2 | 	cmps	local01, #0 wc
16330     70 00 90 3D |  if_ae	jmp	#LR__0605
16334     8C 50 05 F1 | 	add	fp, #140
16338     A8 74 02 FB | 	rdlong	arg01, fp
1633c     8C 50 85 F1 | 	sub	fp, #140
16340     B0 13 B1 FD | 	call	#__system___float_fromint
16344     1A 95 02 F6 | 	mov	local05, result1
16348     A4 50 05 F1 | 	add	fp, #164
1634c     A8 74 02 FB | 	rdlong	arg01, fp
16350     A4 50 85 F1 | 	sub	fp, #164
16354     1F 74 E6 F4 | 	bitnot	arg01, #31
16358     00 3D 22 FF 
1635c     00 76 06 F6 | 	mov	arg02, ##1148846080
16360     C4 16 B1 FD | 	call	#__system___float_mul
16364     1A 91 02 F6 | 	mov	local03, result1
16368     01 92 06 F6 | 	mov	local04, #1
1636c     4A 75 02 F6 | 	mov	arg01, local05
16370     48 77 02 F6 | 	mov	arg02, local03
16374     01 78 06 F6 | 	mov	arg03, #1
16378     04 1B B1 FD | 	call	#__system___float_cmp
1637c     00 34 56 F2 | 	cmps	result1, #0 wc
16380     20 00 90 3D |  if_ae	jmp	#LR__0605
16384     A8 8E 02 FB | 	rdlong	local02, fp
16388     08 8E 06 F1 | 	add	local02, #8
1638c     47 75 02 FB | 	rdlong	arg01, local02
16390     03 94 06 F6 | 	mov	local05, #3
16394     09 76 06 F6 | 	mov	arg02, #9
16398     03 78 06 F6 | 	mov	arg03, #3
1639c     14 C6 BE FD | 	call	#_state_machine_set
163a0     3C 01 90 FD | 	jmp	#LR__0614
163a4                 | LR__0605
163a4     FC 00 00 FF 
163a8     8C D6 05 F1 | 	add	ptr__dat__, ##129164
163ac     EB 74 02 F6 | 	mov	arg01, ptr__dat__
163b0     FC 00 00 FF 
163b4     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
163b8     01 90 06 F6 | 	mov	local03, #1
163bc     04 76 06 F6 | 	mov	arg02, #4
163c0     01 78 06 F6 | 	mov	arg03, #1
163c4     14 C1 BE FD | 	call	#_mcp_get_pin
163c8     1A 35 E2 F8 | 	getbyte	result1, result1, #0
163cc     01 34 0E F2 | 	cmp	result1, #1 wz
163d0     20 00 90 5D |  if_ne	jmp	#LR__0606
163d4     A8 8E 02 FB | 	rdlong	local02, fp
163d8     08 8E 06 F1 | 	add	local02, #8
163dc     47 75 02 FB | 	rdlong	arg01, local02
163e0     04 94 06 F6 | 	mov	local05, #4
163e4     09 76 06 F6 | 	mov	arg02, #9
163e8     04 78 06 F6 | 	mov	arg03, #4
163ec     C4 C5 BE FD | 	call	#_state_machine_set
163f0     EC 00 90 FD | 	jmp	#LR__0613
163f4                 | LR__0606
163f4     FC 00 00 FF 
163f8     8C D6 05 F1 | 	add	ptr__dat__, ##129164
163fc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16400     FC 00 00 FF 
16404     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16408     01 90 06 F6 | 	mov	local03, #1
1640c     05 76 06 F6 | 	mov	arg02, #5
16410     01 78 06 F6 | 	mov	arg03, #1
16414     C4 C0 BE FD | 	call	#_mcp_get_pin
16418     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1641c     01 34 0E F2 | 	cmp	result1, #1 wz
16420     20 00 90 5D |  if_ne	jmp	#LR__0607
16424     A8 8E 02 FB | 	rdlong	local02, fp
16428     08 8E 06 F1 | 	add	local02, #8
1642c     47 75 02 FB | 	rdlong	arg01, local02
16430     05 94 06 F6 | 	mov	local05, #5
16434     09 76 06 F6 | 	mov	arg02, #9
16438     05 78 06 F6 | 	mov	arg03, #5
1643c     74 C5 BE FD | 	call	#_state_machine_set
16440     9C 00 90 FD | 	jmp	#LR__0612
16444                 | LR__0607
16444     FC 00 00 FF 
16448     8C D6 05 F1 | 	add	ptr__dat__, ##129164
1644c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16450     FC 00 00 FF 
16454     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16458     01 90 06 F6 | 	mov	local03, #1
1645c     06 76 06 F6 | 	mov	arg02, #6
16460     01 78 06 F6 | 	mov	arg03, #1
16464     74 C0 BE FD | 	call	#_mcp_get_pin
16468     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1646c     01 34 0E F2 | 	cmp	result1, #1 wz
16470     20 00 90 5D |  if_ne	jmp	#LR__0608
16474     A8 8E 02 FB | 	rdlong	local02, fp
16478     08 8E 06 F1 | 	add	local02, #8
1647c     47 75 02 FB | 	rdlong	arg01, local02
16480     06 94 06 F6 | 	mov	local05, #6
16484     09 76 06 F6 | 	mov	arg02, #9
16488     06 78 06 F6 | 	mov	arg03, #6
1648c     24 C5 BE FD | 	call	#_state_machine_set
16490     4C 00 90 FD | 	jmp	#LR__0611
16494                 | LR__0608
16494     B4 50 05 F1 | 	add	fp, #180
16498     A8 8C CA FA | 	rdbyte	local01, fp wz
1649c     B4 50 85 F1 | 	sub	fp, #180
164a0     20 00 90 5D |  if_ne	jmp	#LR__0609
164a4     A8 8E 02 FB | 	rdlong	local02, fp
164a8     08 8E 06 F1 | 	add	local02, #8
164ac     47 75 02 FB | 	rdlong	arg01, local02
164b0     07 94 06 F6 | 	mov	local05, #7
164b4     09 76 06 F6 | 	mov	arg02, #9
164b8     07 78 06 F6 | 	mov	arg03, #7
164bc     F4 C4 BE FD | 	call	#_state_machine_set
164c0     1C 00 90 FD | 	jmp	#LR__0610
164c4                 | LR__0609
164c4     A8 8E 02 FB | 	rdlong	local02, fp
164c8     08 8E 06 F1 | 	add	local02, #8
164cc     47 75 02 FB | 	rdlong	arg01, local02
164d0     08 94 06 F6 | 	mov	local05, #8
164d4     09 76 06 F6 | 	mov	arg02, #9
164d8     08 78 06 F6 | 	mov	arg03, #8
164dc     D4 C4 BE FD | 	call	#_state_machine_set
164e0                 | LR__0610
164e0                 | LR__0611
164e0                 | LR__0612
164e0                 | LR__0613
164e0                 | LR__0614
164e0                 | LR__0615
164e0     50 50 05 F1 | 	add	fp, #80
164e4     A8 8C 02 FB | 	rdlong	local01, fp
164e8     50 50 85 F1 | 	sub	fp, #80
164ec     02 8C 0E F2 | 	cmp	local01, #2 wz
164f0     10 0E 90 5D |  if_ne	jmp	#LR__0665
164f4     04 50 05 F1 | 	add	fp, #4
164f8     A8 8C 02 FB | 	rdlong	local01, fp
164fc     04 50 85 F1 | 	sub	fp, #4
16500     02 8C 0E F2 | 	cmp	local01, #2 wz
16504     3C 50 05 A1 |  if_e	add	fp, #60
16508     A8 90 C2 AA |  if_e	rdbyte	local03, fp
1650c     3C 50 85 A1 |  if_e	sub	fp, #60
16510     48 95 0A A6 |  if_e	mov	local05, local03 wz
16514     68 50 05 F1 | 	add	fp, #104
16518     A8 8C 0A FB | 	rdlong	local01, fp wz
1651c     68 50 85 F1 | 	sub	fp, #104
16520     14 00 90 5D |  if_ne	jmp	#LR__0616
16524     A8 74 02 FB | 	rdlong	arg01, fp
16528     03 76 06 F6 | 	mov	arg02, #3
1652c     00 78 06 F6 | 	mov	arg03, #0
16530     98 F5 BF FD | 	call	#_move_servo_0833
16534     DC 0D 90 FD | 	jmp	#LR__0666
16538                 | LR__0616
16538     1C 50 05 F1 | 	add	fp, #28
1653c     A8 8C 02 FB | 	rdlong	local01, fp
16540     1C 50 85 F1 | 	sub	fp, #28
16544     01 8C 0E F2 | 	cmp	local01, #1 wz
16548     3C 50 05 A1 |  if_e	add	fp, #60
1654c     A8 90 C2 AA |  if_e	rdbyte	local03, fp
16550     3C 50 85 A1 |  if_e	sub	fp, #60
16554     48 95 0A A6 |  if_e	mov	local05, local03 wz
16558     70 50 05 F1 | 	add	fp, #112
1655c     A8 8C 0A FB | 	rdlong	local01, fp wz
16560     70 50 85 F1 | 	sub	fp, #112
16564     1C 0C 90 5D |  if_ne	jmp	#LR__0662
16568     24 50 05 F1 | 	add	fp, #36
1656c     A8 8E 0A FB | 	rdlong	local02, fp wz
16570     24 50 85 F1 | 	sub	fp, #36
16574     3C 50 05 A1 |  if_e	add	fp, #60
16578     A8 90 C2 AA |  if_e	rdbyte	local03, fp
1657c     3C 50 85 A1 |  if_e	sub	fp, #60
16580     48 95 0A A6 |  if_e	mov	local05, local03 wz
16584     FC 00 00 FF 
16588     14 D6 05 F1 | 	add	ptr__dat__, ##129044
1658c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16590     FC 00 00 FF 
16594     14 D6 85 F1 | 	sub	ptr__dat__, ##129044
16598     30 4B BF FD | 	call	#_navkey_update_status
1659c     FC 00 00 FF 
165a0     48 D6 05 F1 | 	add	ptr__dat__, ##129096
165a4     EB 8C 02 FB | 	rdlong	local01, ptr__dat__
165a8     FC 00 00 FF 
165ac     48 D6 85 F1 | 	sub	ptr__dat__, ##129096
165b0     01 8C 56 F2 | 	cmps	local01, #1 wc
165b4     20 01 90 CD |  if_b	jmp	#LR__0626
165b8     6C 50 05 F1 | 	add	fp, #108
165bc     A8 8C 02 FB | 	rdlong	local01, fp
165c0     6C 50 85 F1 | 	sub	fp, #108
165c4     07 8C 0E F2 | 	cmp	local01, #7 wz
165c8     E0 00 90 5D |  if_ne	jmp	#LR__0624
165cc                 | '                         {
165cc                 | ' 
165cc                 | '                             switch (currentMachineState.function)
165cc     74 50 05 F1 | 	add	fp, #116
165d0     A8 9A 02 FB | 	rdlong	local08, fp
165d4     74 50 85 F1 | 	sub	fp, #116
165d8     07 9A 26 F3 | 	fle	local08, #7
165dc     30 9A 62 FD | 	jmprel	local08
165e0                 | LR__0617
165e0     1C 00 90 FD | 	jmp	#LR__0618
165e4     34 00 90 FD | 	jmp	#LR__0619
165e8     4C 00 90 FD | 	jmp	#LR__0620
165ec     64 00 90 FD | 	jmp	#LR__0621
165f0     7C 00 90 FD | 	jmp	#LR__0622
165f4     E0 00 90 FD | 	jmp	#LR__0625
165f8     DC 00 90 FD | 	jmp	#LR__0625
165fc     8C 00 90 FD | 	jmp	#LR__0623
16600                 | LR__0618
16600     A8 8E 02 FB | 	rdlong	local02, fp
16604     08 8E 06 F1 | 	add	local02, #8
16608     47 95 02 FB | 	rdlong	local05, local02
1660c     01 92 06 F6 | 	mov	local04, #1
16610     24 94 06 F1 | 	add	local05, #36
16614     4A 03 68 FC | 	wrlong	#1, local05
16618                 | '                                 control->stateMachine->function = FUNC_MANUAL_INCREMENTAL_JOG;
16618                 | '                                 break;
16618     BC 00 90 FD | 	jmp	#LR__0625
1661c                 | LR__0619
1661c     A8 8E 02 FB | 	rdlong	local02, fp
16620     08 8E 06 F1 | 	add	local02, #8
16624     47 95 02 FB | 	rdlong	local05, local02
16628     02 92 06 F6 | 	mov	local04, #2
1662c     24 94 06 F1 | 	add	local05, #36
16630     4A 05 68 FC | 	wrlong	#2, local05
16634                 | '                                 control->stateMachine->function = FUNC_MANUAL_CONTINUOUS_JOG;
16634                 | '                                 break;
16634     A0 00 90 FD | 	jmp	#LR__0625
16638                 | LR__0620
16638     A8 8E 02 FB | 	rdlong	local02, fp
1663c     08 8E 06 F1 | 	add	local02, #8
16640     47 95 02 FB | 	rdlong	local05, local02
16644     03 92 06 F6 | 	mov	local04, #3
16648     24 94 06 F1 | 	add	local05, #36
1664c     4A 07 68 FC | 	wrlong	#3, local05
16650                 | '                                 control->stateMachine->function = FUNC_MANUAL_POSITIONAL_MOVE;
16650                 | '                                 break;
16650     84 00 90 FD | 	jmp	#LR__0625
16654                 | LR__0621
16654     A8 8E 02 FB | 	rdlong	local02, fp
16658     08 8E 06 F1 | 	add	local02, #8
1665c     47 95 02 FB | 	rdlong	local05, local02
16660     04 92 06 F6 | 	mov	local04, #4
16664     24 94 06 F1 | 	add	local05, #36
16668     4A 09 68 FC | 	wrlong	#4, local05
1666c                 | '                                 control->stateMachine->function = FUNC_MANUAL_HOME;
1666c                 | '                                 break;
1666c     68 00 90 FD | 	jmp	#LR__0625
16670                 | LR__0622
16670     A8 8E 02 FB | 	rdlong	local02, fp
16674     08 8E 06 F1 | 	add	local02, #8
16678     47 95 02 FB | 	rdlong	local05, local02
1667c     00 92 06 F6 | 	mov	local04, #0
16680     24 94 06 F1 | 	add	local05, #36
16684     4A 01 68 FC | 	wrlong	#0, local05
16688                 | '                                 control->stateMachine->function = FUNC_MANUAL_OFF;
16688                 | '                                 break;
16688     4C 00 90 FD | 	jmp	#LR__0625
1668c                 | '                                 break;
1668c                 | '                                 break;
1668c                 | LR__0623
1668c     A8 8E 02 FB | 	rdlong	local02, fp
16690     08 8E 06 F1 | 	add	local02, #8
16694     47 91 02 FB | 	rdlong	local03, local02
16698     48 95 02 F6 | 	mov	local05, local03
1669c     00 92 06 F6 | 	mov	local04, #0
166a0     24 94 06 F1 | 	add	local05, #36
166a4     4A 01 68 FC | 	wrlong	#0, local05
166a8                 | '                                 control->stateMachine->function = FUNC_MANUAL_OFF;
166a8                 | '                                 break;
166a8     2C 00 90 FD | 	jmp	#LR__0625
166ac                 | LR__0624
166ac     A8 8C 02 FB | 	rdlong	local01, fp
166b0     08 8C 06 F1 | 	add	local01, #8
166b4     46 8F 02 FB | 	rdlong	local02, local01
166b8     1C 8E 06 F1 | 	add	local02, #28
166bc     47 91 02 FB | 	rdlong	local03, local02
166c0     08 90 0E F2 | 	cmp	local03, #8 wz
166c4     A8 8C 02 AB |  if_e	rdlong	local01, fp
166c8     08 8C 06 A1 |  if_e	add	local01, #8
166cc     46 8F 02 AB |  if_e	rdlong	local02, local01
166d0     24 8E 06 A1 |  if_e	add	local02, #36
166d4     47 01 68 AC |  if_e	wrlong	#0, local02
166d8                 | LR__0625
166d8                 | LR__0626
166d8                 | '                         {
166d8                 | '                             control->stateMachine->function = FUNC_MANUAL_OFF;
166d8                 | '                         }
166d8                 | '                     }
166d8                 | ' 
166d8                 | ' 
166d8                 | '                     switch (currentMachineState.function)
166d8     74 50 05 F1 | 	add	fp, #116
166dc     A8 8C 02 FB | 	rdlong	local01, fp
166e0     74 50 85 F1 | 	sub	fp, #116
166e4     46 9D 02 F6 | 	mov	local09, local01
166e8     07 9C 26 F3 | 	fle	local09, #7
166ec     30 9C 62 FD | 	jmprel	local09
166f0                 | LR__0627
166f0     1C 00 90 FD | 	jmp	#LR__0628
166f4     2C 00 90 FD | 	jmp	#LR__0629
166f8     6C 02 90 FD | 	jmp	#LR__0636
166fc     38 04 90 FD | 	jmp	#LR__0642
16700     00 06 90 FD | 	jmp	#LR__0647
16704     94 08 90 FD | 	jmp	#LR__0655
16708     A4 08 90 FD | 	jmp	#LR__0656
1670c     04 0C 90 FD | 	jmp	#LR__0666
16710                 | LR__0628
16710     A8 74 02 FB | 	rdlong	arg01, fp
16714     03 76 06 F6 | 	mov	arg02, #3
16718     00 78 06 F6 | 	mov	arg03, #0
1671c     AC F3 BF FD | 	call	#_move_servo_0833
16720                 | '                         move_servo(control, MOVE_STOP, 0);
16720                 | '                         break;
16720     F0 0B 90 FD | 	jmp	#LR__0666
16724                 | LR__0629
16724     28 50 05 F1 | 	add	fp, #40
16728     A8 8E 02 FB | 	rdlong	local02, fp
1672c     28 50 85 F1 | 	sub	fp, #40
16730     01 8E 0E F2 | 	cmp	local02, #1 wz
16734     3C 50 05 A1 |  if_e	add	fp, #60
16738     A8 92 C2 AA |  if_e	rdbyte	local04, fp
1673c     3C 50 85 A1 |  if_e	sub	fp, #60
16740     00 92 4E A2 |  if_e	cmps	local04, #0 wz
16744     28 00 90 AD |  if_e	jmp	#LR__0630
16748     A8 74 02 FB | 	rdlong	arg01, fp
1674c     03 76 06 F6 | 	mov	arg02, #3
16750     00 78 06 F6 | 	mov	arg03, #0
16754     74 F3 BF FD | 	call	#_move_servo_0833
16758     A8 8E 02 FB | 	rdlong	local02, fp
1675c     08 8E 06 F1 | 	add	local02, #8
16760     47 95 02 FB | 	rdlong	local05, local02
16764     28 94 06 F1 | 	add	local05, #40
16768     01 00 80 FF 
1676c     4A D1 6B FC | 	wrlong	##1000, local05
16770                 | LR__0630
16770     FC 00 00 FF 
16774     40 D6 05 F1 | 	add	ptr__dat__, ##129088
16778     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
1677c     FC 00 00 FF 
16780     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
16784     01 8E 56 F2 | 	cmps	local02, #1 wc
16788     5C 00 90 CD |  if_b	jmp	#LR__0632
1678c     A8 8E 02 FB | 	rdlong	local02, fp
16790     08 8E 06 F1 | 	add	local02, #8
16794     47 95 02 FB | 	rdlong	local05, local02
16798     28 94 06 F1 | 	add	local05, #40
1679c     4A 93 02 FB | 	rdlong	local04, local05
167a0     13 00 00 FF 
167a4     10 93 56 F2 | 	cmps	local04, ##10000 wc
167a8     3C 00 90 3D |  if_ae	jmp	#LR__0631
167ac     A8 92 02 FB | 	rdlong	local04, fp
167b0     08 92 06 F1 | 	add	local04, #8
167b4     49 97 02 FB | 	rdlong	local06, local04
167b8     28 96 06 F1 | 	add	local06, #40
167bc     4B 9F 02 FB | 	rdlong	local10, local06
167c0     4F A1 02 F6 | 	mov	local11, local10
167c4     50 99 52 F6 | 	abs	local07, local11 wc
167c8     0A 98 16 FD | 	qdiv	local07, #10
167cc     A8 8E 02 FB | 	rdlong	local02, fp
167d0     08 8E 06 F1 | 	add	local02, #8
167d4     47 95 02 FB | 	rdlong	local05, local02
167d8     28 94 06 F1 | 	add	local05, #40
167dc     18 A2 62 FD | 	getqx	local12
167e0     51 A3 82 F6 | 	negc	local12, local12
167e4     4A A3 62 FC | 	wrlong	local12, local05
167e8                 | LR__0631
167e8                 | LR__0632
167e8     FC 00 00 FF 
167ec     38 D6 05 F1 | 	add	ptr__dat__, ##129080
167f0     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
167f4     FC 00 00 FF 
167f8     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
167fc     01 8E 56 F2 | 	cmps	local02, #1 wc
16800     58 00 90 CD |  if_b	jmp	#LR__0634
16804     A8 8E 02 FB | 	rdlong	local02, fp
16808     08 8E 06 F1 | 	add	local02, #8
1680c     47 95 02 FB | 	rdlong	local05, local02
16810     28 94 06 F1 | 	add	local05, #40
16814     4A 97 02 FB | 	rdlong	local06, local05
16818     0B 96 56 F2 | 	cmps	local06, #11 wc
1681c     3C 00 90 CD |  if_b	jmp	#LR__0633
16820     A8 8E 02 FB | 	rdlong	local02, fp
16824     08 8E 06 F1 | 	add	local02, #8
16828     47 95 02 FB | 	rdlong	local05, local02
1682c     A8 92 02 FB | 	rdlong	local04, fp
16830     08 92 06 F1 | 	add	local04, #8
16834     49 97 02 FB | 	rdlong	local06, local04
16838     28 96 06 F1 | 	add	local06, #40
1683c     4B 9F 02 FB | 	rdlong	local10, local06
16840     4F A1 02 F6 | 	mov	local11, local10
16844     50 A3 02 F6 | 	mov	local12, local11
16848     02 A2 66 F0 | 	shl	local12, #2
1684c     50 A3 02 F1 | 	add	local12, local11
16850     01 A2 66 F0 | 	shl	local12, #1
16854     28 94 06 F1 | 	add	local05, #40
16858     4A A3 62 FC | 	wrlong	local12, local05
1685c                 | LR__0633
1685c                 | LR__0634
1685c     FC 00 00 FF 
16860     28 D6 05 F1 | 	add	ptr__dat__, ##129064
16864     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16868     FC 00 00 FF 
1686c     28 D6 85 F1 | 	sub	ptr__dat__, ##129064
16870     01 8E 56 F2 | 	cmps	local02, #1 wc
16874     64 00 90 CD |  if_b	jmp	#LR__0635
16878     00 74 06 F6 | 	mov	arg01, #0
1687c     50 2C B1 FD | 	call	#__system___getiolock_1306
16880     1A 75 02 F6 | 	mov	arg01, result1
16884     E8 F3 B0 FD | 	call	#__system___lockmem
16888     56 01 00 FF 
1688c     F7 77 06 F6 | 	mov	arg02, ##@LR__2249
16890     00 74 06 F6 | 	mov	arg01, #0
16894     00 78 06 F6 | 	mov	arg03, #0
16898     7C F9 B0 FD | 	call	#__system___basic_print_string
1689c     00 74 06 F6 | 	mov	arg01, #0
168a0     0A 76 06 F6 | 	mov	arg02, #10
168a4     00 78 06 F6 | 	mov	arg03, #0
168a8     20 F9 B0 FD | 	call	#__system___basic_print_char
168ac     00 74 06 F6 | 	mov	arg01, #0
168b0     1C 2C B1 FD | 	call	#__system___getiolock_1306
168b4     1A 01 68 FC | 	wrlong	#0, result1
168b8     A8 74 02 FB | 	rdlong	arg01, fp
168bc     3A 93 02 F6 | 	mov	local04, arg01
168c0     08 92 06 F1 | 	add	local04, #8
168c4     49 97 02 FB | 	rdlong	local06, local04
168c8     28 96 06 F1 | 	add	local06, #40
168cc     4B A3 02 FB | 	rdlong	local12, local06
168d0     00 76 06 F6 | 	mov	arg02, #0
168d4     51 79 02 F6 | 	mov	arg03, local12
168d8     F0 F1 BF FD | 	call	#_move_servo_0833
168dc                 | LR__0635
168dc     FC 00 00 FF 
168e0     30 D6 05 F1 | 	add	ptr__dat__, ##129072
168e4     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
168e8     FC 00 00 FF 
168ec     30 D6 85 F1 | 	sub	ptr__dat__, ##129072
168f0     01 8E 56 F2 | 	cmps	local02, #1 wc
168f4     1C 0A 90 CD |  if_b	jmp	#LR__0666
168f8     00 74 06 F6 | 	mov	arg01, #0
168fc     D0 2B B1 FD | 	call	#__system___getiolock_1306
16900     1A 75 02 F6 | 	mov	arg01, result1
16904     68 F3 B0 FD | 	call	#__system___lockmem
16908     57 01 00 FF 
1690c     03 76 06 F6 | 	mov	arg02, ##@LR__2250
16910     00 74 06 F6 | 	mov	arg01, #0
16914     00 78 06 F6 | 	mov	arg03, #0
16918     FC F8 B0 FD | 	call	#__system___basic_print_string
1691c     00 74 06 F6 | 	mov	arg01, #0
16920     0A 76 06 F6 | 	mov	arg02, #10
16924     00 78 06 F6 | 	mov	arg03, #0
16928     A0 F8 B0 FD | 	call	#__system___basic_print_char
1692c     00 74 06 F6 | 	mov	arg01, #0
16930     9C 2B B1 FD | 	call	#__system___getiolock_1306
16934     1A 01 68 FC | 	wrlong	#0, result1
16938     A8 74 02 FB | 	rdlong	arg01, fp
1693c     3A 93 02 F6 | 	mov	local04, arg01
16940     08 92 06 F1 | 	add	local04, #8
16944     49 97 02 FB | 	rdlong	local06, local04
16948     28 96 06 F1 | 	add	local06, #40
1694c     4B 9F 02 FB | 	rdlong	local10, local06
16950     4F A1 02 F6 | 	mov	local11, local10
16954     50 A3 62 F6 | 	neg	local12, local11
16958     00 76 06 F6 | 	mov	arg02, #0
1695c     51 79 02 F6 | 	mov	arg03, local12
16960     68 F1 BF FD | 	call	#_move_servo_0833
16964                 | '                             move_servo(control, MOVE_RELATIVE, -1 * control->stateMachine->functionData);
16964                 | '                         }
16964                 | '                         break;
16964     AC 09 90 FD | 	jmp	#LR__0666
16968                 | LR__0636
16968     28 50 05 F1 | 	add	fp, #40
1696c     A8 94 02 FB | 	rdlong	local05, fp
16970     28 50 85 F1 | 	sub	fp, #40
16974     02 94 0E F2 | 	cmp	local05, #2 wz
16978     3C 50 05 A1 |  if_e	add	fp, #60
1697c     A8 92 C2 AA |  if_e	rdbyte	local04, fp
16980     3C 50 85 A1 |  if_e	sub	fp, #60
16984     49 91 0A A6 |  if_e	mov	local03, local04 wz
16988     28 00 90 AD |  if_e	jmp	#LR__0637
1698c     A8 74 02 FB | 	rdlong	arg01, fp
16990     03 76 06 F6 | 	mov	arg02, #3
16994     00 78 06 F6 | 	mov	arg03, #0
16998     30 F1 BF FD | 	call	#_move_servo_0833
1699c     A8 8E 02 FB | 	rdlong	local02, fp
169a0     08 8E 06 F1 | 	add	local02, #8
169a4     47 95 02 FB | 	rdlong	local05, local02
169a8     28 94 06 F1 | 	add	local05, #40
169ac     13 00 80 FF 
169b0     4A 21 6A FC | 	wrlong	##10000, local05
169b4                 | LR__0637
169b4     FC 00 00 FF 
169b8     40 D6 05 F1 | 	add	ptr__dat__, ##129088
169bc     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
169c0     FC 00 00 FF 
169c4     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
169c8     01 8E 56 F2 | 	cmps	local02, #1 wc
169cc     38 00 90 CD |  if_b	jmp	#LR__0638
169d0     A8 8E 02 FB | 	rdlong	local02, fp
169d4     08 8E 06 F1 | 	add	local02, #8
169d8     47 95 02 FB | 	rdlong	local05, local02
169dc     A8 96 02 FB | 	rdlong	local06, fp
169e0     08 96 06 F1 | 	add	local06, #8
169e4     4B A3 02 FB | 	rdlong	local12, local06
169e8     51 99 02 F6 | 	mov	local07, local12
169ec     28 98 06 F1 | 	add	local07, #40
169f0     4C A1 02 FB | 	rdlong	local11, local07
169f4     50 93 02 F6 | 	mov	local04, local11
169f8     01 00 00 FF 
169fc     E8 93 86 F1 | 	sub	local04, ##1000
16a00     28 94 06 F1 | 	add	local05, #40
16a04     4A 93 62 FC | 	wrlong	local04, local05
16a08                 | LR__0638
16a08     FC 00 00 FF 
16a0c     38 D6 05 F1 | 	add	ptr__dat__, ##129080
16a10     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16a14     FC 00 00 FF 
16a18     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
16a1c     01 8E 56 F2 | 	cmps	local02, #1 wc
16a20     38 00 90 CD |  if_b	jmp	#LR__0639
16a24     A8 8E 02 FB | 	rdlong	local02, fp
16a28     08 8E 06 F1 | 	add	local02, #8
16a2c     47 95 02 FB | 	rdlong	local05, local02
16a30     A8 96 02 FB | 	rdlong	local06, fp
16a34     08 96 06 F1 | 	add	local06, #8
16a38     4B A3 02 FB | 	rdlong	local12, local06
16a3c     51 99 02 F6 | 	mov	local07, local12
16a40     28 98 06 F1 | 	add	local07, #40
16a44     4C A1 02 FB | 	rdlong	local11, local07
16a48     50 93 02 F6 | 	mov	local04, local11
16a4c     01 00 00 FF 
16a50     E8 93 06 F1 | 	add	local04, ##1000
16a54     28 94 06 F1 | 	add	local05, #40
16a58     4A 93 62 FC | 	wrlong	local04, local05
16a5c                 | LR__0639
16a5c     FC 00 00 FF 
16a60     2C D6 05 F1 | 	add	ptr__dat__, ##129068
16a64     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16a68     FC 00 00 FF 
16a6c     2C D6 85 F1 | 	sub	ptr__dat__, ##129068
16a70     01 8E 56 F2 | 	cmps	local02, #1 wc
16a74     24 00 90 CD |  if_b	jmp	#LR__0640
16a78     A8 74 02 FB | 	rdlong	arg01, fp
16a7c     3A 93 02 F6 | 	mov	local04, arg01
16a80     08 92 06 F1 | 	add	local04, #8
16a84     49 97 02 FB | 	rdlong	local06, local04
16a88     28 96 06 F1 | 	add	local06, #40
16a8c     4B A3 02 FB | 	rdlong	local12, local06
16a90     02 76 06 F6 | 	mov	arg02, #2
16a94     51 79 02 F6 | 	mov	arg03, local12
16a98     30 F0 BF FD | 	call	#_move_servo_0833
16a9c                 | LR__0640
16a9c     FC 00 00 FF 
16aa0     34 D6 05 F1 | 	add	ptr__dat__, ##129076
16aa4     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16aa8     FC 00 00 FF 
16aac     34 D6 85 F1 | 	sub	ptr__dat__, ##129076
16ab0     01 8E 56 F2 | 	cmps	local02, #1 wc
16ab4     2C 00 90 CD |  if_b	jmp	#LR__0641
16ab8     A8 74 02 FB | 	rdlong	arg01, fp
16abc     3A 93 02 F6 | 	mov	local04, arg01
16ac0     08 92 06 F1 | 	add	local04, #8
16ac4     49 97 02 FB | 	rdlong	local06, local04
16ac8     28 96 06 F1 | 	add	local06, #40
16acc     4B 9F 02 FB | 	rdlong	local10, local06
16ad0     4F A1 02 F6 | 	mov	local11, local10
16ad4     50 A3 62 F6 | 	neg	local12, local11
16ad8     02 76 06 F6 | 	mov	arg02, #2
16adc     51 79 02 F6 | 	mov	arg03, local12
16ae0     E8 EF BF FD | 	call	#_move_servo_0833
16ae4                 | LR__0641
16ae4     FC 00 00 FF 
16ae8     28 D6 05 F1 | 	add	ptr__dat__, ##129064
16aec     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16af0     FC 00 00 FF 
16af4     28 D6 85 F1 | 	sub	ptr__dat__, ##129064
16af8     01 8E 56 F2 | 	cmps	local02, #1 wc
16afc     A8 74 02 3B |  if_ae	rdlong	arg01, fp
16b00     03 76 06 36 |  if_ae	mov	arg02, #3
16b04     00 78 06 36 |  if_ae	mov	arg03, #0
16b08     C0 EF BF 3D |  if_ae	call	#_move_servo_0833
16b0c     FC 00 00 FF 
16b10     30 D6 05 F1 | 	add	ptr__dat__, ##129072
16b14     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16b18     FC 00 00 FF 
16b1c     30 D6 85 F1 | 	sub	ptr__dat__, ##129072
16b20     01 8E 56 F2 | 	cmps	local02, #1 wc
16b24     A8 74 02 3B |  if_ae	rdlong	arg01, fp
16b28     03 76 06 36 |  if_ae	mov	arg02, #3
16b2c     00 78 06 36 |  if_ae	mov	arg03, #0
16b30     98 EF BF 3D |  if_ae	call	#_move_servo_0833
16b34                 | '                         {
16b34                 | '                             move_servo(control, MOVE_STOP, 0);
16b34                 | '                         }
16b34                 | '                         break;
16b34     DC 07 90 FD | 	jmp	#LR__0666
16b38                 | LR__0642
16b38     28 50 05 F1 | 	add	fp, #40
16b3c     A8 8E 02 FB | 	rdlong	local02, fp
16b40     28 50 85 F1 | 	sub	fp, #40
16b44     03 8E 0E F2 | 	cmp	local02, #3 wz
16b48     3C 50 05 A1 |  if_e	add	fp, #60
16b4c     A8 92 C2 AA |  if_e	rdbyte	local04, fp
16b50     3C 50 85 A1 |  if_e	sub	fp, #60
16b54     00 92 4E A2 |  if_e	cmps	local04, #0 wz
16b58     7C 00 90 AD |  if_e	jmp	#LR__0643
16b5c     A8 74 02 FB | 	rdlong	arg01, fp
16b60     03 76 06 F6 | 	mov	arg02, #3
16b64     00 78 06 F6 | 	mov	arg03, #0
16b68     60 EF BF FD | 	call	#_move_servo_0833
16b6c     A8 8E 02 FB | 	rdlong	local02, fp
16b70     08 8E 06 F1 | 	add	local02, #8
16b74     47 95 02 FB | 	rdlong	local05, local02
16b78     A8 96 02 FB | 	rdlong	local06, fp
16b7c     04 96 06 F1 | 	add	local06, #4
16b80     4B 99 02 FB | 	rdlong	local07, local06
16b84     04 98 06 F1 | 	add	local07, #4
16b88     4C 75 02 FB | 	rdlong	arg01, local07
16b8c     A8 98 02 FB | 	rdlong	local07, fp
16b90     4C A3 02 FB | 	rdlong	local12, local07
16b94     18 A2 06 F1 | 	add	local12, #24
16b98     51 A1 02 F6 | 	mov	local11, local12
16b9c     50 77 02 F6 | 	mov	arg02, local11
16ba0     7C 94 BF FD | 	call	#_steps_to_mm
16ba4     1A 75 02 F6 | 	mov	arg01, result1
16ba8     00 3D 22 FF 
16bac     00 76 06 F6 | 	mov	arg02, ##1148846080
16bb0     94 10 B1 FD | 	call	#__system___float_div
16bb4     1A 75 02 F6 | 	mov	arg01, result1
16bb8     01 76 06 F6 | 	mov	arg02, #1
16bbc     58 13 B1 FD | 	call	#__system___float_tointeger
16bc0     01 00 00 FF 
16bc4     E8 35 06 FD | 	qmul	result1, ##1000
16bc8     18 A2 86 F1 | 	sub	local12, #24
16bcc     28 94 06 F1 | 	add	local05, #40
16bd0     18 96 62 FD | 	getqx	local06
16bd4     4A 97 62 FC | 	wrlong	local06, local05
16bd8                 | LR__0643
16bd8     FC 00 00 FF 
16bdc     40 D6 05 F1 | 	add	ptr__dat__, ##129088
16be0     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16be4     FC 00 00 FF 
16be8     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
16bec     01 8E 56 F2 | 	cmps	local02, #1 wc
16bf0     38 00 90 CD |  if_b	jmp	#LR__0644
16bf4     A8 8E 02 FB | 	rdlong	local02, fp
16bf8     08 8E 06 F1 | 	add	local02, #8
16bfc     47 95 02 FB | 	rdlong	local05, local02
16c00     A8 96 02 FB | 	rdlong	local06, fp
16c04     08 96 06 F1 | 	add	local06, #8
16c08     4B A3 02 FB | 	rdlong	local12, local06
16c0c     51 99 02 F6 | 	mov	local07, local12
16c10     28 98 06 F1 | 	add	local07, #40
16c14     4C A1 02 FB | 	rdlong	local11, local07
16c18     50 93 02 F6 | 	mov	local04, local11
16c1c     01 00 00 FF 
16c20     E8 93 86 F1 | 	sub	local04, ##1000
16c24     28 94 06 F1 | 	add	local05, #40
16c28     4A 93 62 FC | 	wrlong	local04, local05
16c2c                 | LR__0644
16c2c     FC 00 00 FF 
16c30     38 D6 05 F1 | 	add	ptr__dat__, ##129080
16c34     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16c38     FC 00 00 FF 
16c3c     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
16c40     01 8E 56 F2 | 	cmps	local02, #1 wc
16c44     38 00 90 CD |  if_b	jmp	#LR__0645
16c48     A8 8E 02 FB | 	rdlong	local02, fp
16c4c     08 8E 06 F1 | 	add	local02, #8
16c50     47 95 02 FB | 	rdlong	local05, local02
16c54     A8 96 02 FB | 	rdlong	local06, fp
16c58     08 96 06 F1 | 	add	local06, #8
16c5c     4B A3 02 FB | 	rdlong	local12, local06
16c60     51 99 02 F6 | 	mov	local07, local12
16c64     28 98 06 F1 | 	add	local07, #40
16c68     4C A1 02 FB | 	rdlong	local11, local07
16c6c     50 93 02 F6 | 	mov	local04, local11
16c70     01 00 00 FF 
16c74     E8 93 06 F1 | 	add	local04, ##1000
16c78     28 94 06 F1 | 	add	local05, #40
16c7c     4A 93 62 FC | 	wrlong	local04, local05
16c80                 | LR__0645
16c80     FC 00 00 FF 
16c84     28 D6 05 F1 | 	add	ptr__dat__, ##129064
16c88     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16c8c     FC 00 00 FF 
16c90     28 D6 85 F1 | 	sub	ptr__dat__, ##129064
16c94     01 8E 56 F2 | 	cmps	local02, #1 wc
16c98     24 00 90 CD |  if_b	jmp	#LR__0646
16c9c     A8 74 02 FB | 	rdlong	arg01, fp
16ca0     3A 93 02 F6 | 	mov	local04, arg01
16ca4     08 92 06 F1 | 	add	local04, #8
16ca8     49 97 02 FB | 	rdlong	local06, local04
16cac     28 96 06 F1 | 	add	local06, #40
16cb0     4B A3 02 FB | 	rdlong	local12, local06
16cb4     01 76 06 F6 | 	mov	arg02, #1
16cb8     51 79 02 F6 | 	mov	arg03, local12
16cbc     0C EE BF FD | 	call	#_move_servo_0833
16cc0                 | LR__0646
16cc0     FC 00 00 FF 
16cc4     30 D6 05 F1 | 	add	ptr__dat__, ##129072
16cc8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16ccc     FC 00 00 FF 
16cd0     30 D6 85 F1 | 	sub	ptr__dat__, ##129072
16cd4     01 8E 56 F2 | 	cmps	local02, #1 wc
16cd8     38 06 90 CD |  if_b	jmp	#LR__0666
16cdc     A8 74 02 FB | 	rdlong	arg01, fp
16ce0     3A 93 02 F6 | 	mov	local04, arg01
16ce4     08 92 06 F1 | 	add	local04, #8
16ce8     49 97 02 FB | 	rdlong	local06, local04
16cec     28 96 06 F1 | 	add	local06, #40
16cf0     4B A3 02 FB | 	rdlong	local12, local06
16cf4     01 76 06 F6 | 	mov	arg02, #1
16cf8     51 79 02 F6 | 	mov	arg03, local12
16cfc     CC ED BF FD | 	call	#_move_servo_0833
16d00                 | '                         {
16d00                 | '                             move_servo(control, MOVE_ABSOLUTE, control->stateMachine->functionData);
16d00                 | '                         }
16d00                 | '                         break;
16d00     10 06 90 FD | 	jmp	#LR__0666
16d04                 | LR__0647
16d04     28 50 05 F1 | 	add	fp, #40
16d08     A8 94 02 FB | 	rdlong	local05, fp
16d0c     28 50 85 F1 | 	sub	fp, #40
16d10     04 94 0E F2 | 	cmp	local05, #4 wz
16d14     3C 50 05 A1 |  if_e	add	fp, #60
16d18     A8 92 C2 AA |  if_e	rdbyte	local04, fp
16d1c     3C 50 85 A1 |  if_e	sub	fp, #60
16d20     49 91 0A A6 |  if_e	mov	local03, local04 wz
16d24     24 00 90 AD |  if_e	jmp	#LR__0648
16d28     A8 74 02 FB | 	rdlong	arg01, fp
16d2c     03 76 06 F6 | 	mov	arg02, #3
16d30     00 78 06 F6 | 	mov	arg03, #0
16d34     94 ED BF FD | 	call	#_move_servo_0833
16d38     A8 8E 02 FB | 	rdlong	local02, fp
16d3c     08 8E 06 F1 | 	add	local02, #8
16d40     47 95 02 FB | 	rdlong	local05, local02
16d44     28 94 06 F1 | 	add	local05, #40
16d48     4A 01 68 FC | 	wrlong	#0, local05
16d4c                 | LR__0648
16d4c     FC 00 00 FF 
16d50     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16d54     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16d58     FC 00 00 FF 
16d5c     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16d60     05 76 06 F6 | 	mov	arg02, #5
16d64     01 78 06 F6 | 	mov	arg03, #1
16d68     70 B7 BE FD | 	call	#_mcp_get_pin
16d6c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
16d70     01 34 0E F2 | 	cmp	result1, #1 wz
16d74     60 00 90 5D |  if_ne	jmp	#LR__0649
16d78     A8 90 02 FB | 	rdlong	local03, fp
16d7c     08 90 06 F1 | 	add	local03, #8
16d80     48 93 02 FB | 	rdlong	local04, local03
16d84     28 92 06 F1 | 	add	local04, #40
16d88     49 A3 02 FB | 	rdlong	local12, local04
16d8c     02 A2 0E F2 | 	cmp	local12, #2 wz
16d90     44 00 90 5D |  if_ne	jmp	#LR__0649
16d94     A8 74 02 FB | 	rdlong	arg01, fp
16d98     03 76 06 F6 | 	mov	arg02, #3
16d9c     00 78 06 F6 | 	mov	arg03, #0
16da0     28 ED BF FD | 	call	#_move_servo_0833
16da4     64 74 06 F6 | 	mov	arg01, #100
16da8     DC EF B0 FD | 	call	#__system___waitms
16dac     A8 74 02 FB | 	rdlong	arg01, fp
16db0     02 76 06 F6 | 	mov	arg02, #2
16db4     FD FF 7F FF 
16db8     24 78 06 F6 | 	mov	arg03, ##-1500
16dbc     0C ED BF FD | 	call	#_move_servo_0833
16dc0     A8 8E 02 FB | 	rdlong	local02, fp
16dc4     08 8E 06 F1 | 	add	local02, #8
16dc8     47 95 02 FB | 	rdlong	local05, local02
16dcc     28 94 06 F1 | 	add	local05, #40
16dd0     4A 07 68 FC | 	wrlong	#3, local05
16dd4     38 01 90 FD | 	jmp	#LR__0653
16dd8                 | LR__0649
16dd8     FC 00 00 FF 
16ddc     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16de0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16de4     FC 00 00 FF 
16de8     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16dec     05 76 06 F6 | 	mov	arg02, #5
16df0     01 78 06 F6 | 	mov	arg03, #1
16df4     E4 B6 BE FD | 	call	#_mcp_get_pin
16df8     07 34 4E F7 | 	zerox	result1, #7 wz
16dfc     60 00 90 5D |  if_ne	jmp	#LR__0650
16e00     A8 90 02 FB | 	rdlong	local03, fp
16e04     08 90 06 F1 | 	add	local03, #8
16e08     48 93 02 FB | 	rdlong	local04, local03
16e0c     28 92 06 F1 | 	add	local04, #40
16e10     49 A3 02 FB | 	rdlong	local12, local04
16e14     03 A2 0E F2 | 	cmp	local12, #3 wz
16e18     44 00 90 5D |  if_ne	jmp	#LR__0650
16e1c     A8 74 02 FB | 	rdlong	arg01, fp
16e20     03 76 06 F6 | 	mov	arg02, #3
16e24     00 78 06 F6 | 	mov	arg03, #0
16e28     A0 EC BF FD | 	call	#_move_servo_0833
16e2c     64 74 06 F6 | 	mov	arg01, #100
16e30     54 EF B0 FD | 	call	#__system___waitms
16e34     A8 74 02 FB | 	rdlong	arg01, fp
16e38     02 76 06 F6 | 	mov	arg02, #2
16e3c     02 00 00 FF 
16e40     DC 79 06 F6 | 	mov	arg03, ##1500
16e44     84 EC BF FD | 	call	#_move_servo_0833
16e48     A8 8E 02 FB | 	rdlong	local02, fp
16e4c     08 8E 06 F1 | 	add	local02, #8
16e50     47 95 02 FB | 	rdlong	local05, local02
16e54     28 94 06 F1 | 	add	local05, #40
16e58     4A 09 68 FC | 	wrlong	#4, local05
16e5c     B0 00 90 FD | 	jmp	#LR__0652
16e60                 | LR__0650
16e60     FC 00 00 FF 
16e64     8C D6 05 F1 | 	add	ptr__dat__, ##129164
16e68     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16e6c     FC 00 00 FF 
16e70     8C D6 85 F1 | 	sub	ptr__dat__, ##129164
16e74     05 76 06 F6 | 	mov	arg02, #5
16e78     01 78 06 F6 | 	mov	arg03, #1
16e7c     5C B6 BE FD | 	call	#_mcp_get_pin
16e80     1A 35 E2 F8 | 	getbyte	result1, result1, #0
16e84     01 34 0E F2 | 	cmp	result1, #1 wz
16e88     84 00 90 5D |  if_ne	jmp	#LR__0651
16e8c     A8 90 02 FB | 	rdlong	local03, fp
16e90     08 90 06 F1 | 	add	local03, #8
16e94     48 97 02 FB | 	rdlong	local06, local03
16e98     4B 93 02 F6 | 	mov	local04, local06
16e9c     28 92 06 F1 | 	add	local04, #40
16ea0     49 A3 02 FB | 	rdlong	local12, local04
16ea4     51 99 02 F6 | 	mov	local07, local12
16ea8     04 98 0E F2 | 	cmp	local07, #4 wz
16eac     60 00 90 5D |  if_ne	jmp	#LR__0651
16eb0     A8 74 02 FB | 	rdlong	arg01, fp
16eb4     03 76 06 F6 | 	mov	arg02, #3
16eb8     00 78 06 F6 | 	mov	arg03, #0
16ebc     0C EC BF FD | 	call	#_move_servo_0833
16ec0     01 00 00 FF 
16ec4     E8 75 06 F6 | 	mov	arg01, ##1000
16ec8     BC EE B0 FD | 	call	#__system___waitms
16ecc     FA 00 00 FF 
16ed0     E8 D6 05 F1 | 	add	ptr__dat__, ##128232
16ed4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
16ed8     FA 00 00 FF 
16edc     E8 D6 85 F1 | 	sub	ptr__dat__, ##128232
16ee0     00 76 06 F6 | 	mov	arg02, #0
16ee4     00 78 06 F6 | 	mov	arg03, #0
16ee8     D4 B6 BE FD | 	call	#_dyn4_send_command
16eec     A8 8E 02 FB | 	rdlong	local02, fp
16ef0     08 8E 06 F1 | 	add	local02, #8
16ef4     47 91 02 FB | 	rdlong	local03, local02
16ef8     08 8E 86 F1 | 	sub	local02, #8
16efc     48 95 02 F6 | 	mov	local05, local03
16f00     01 92 06 F6 | 	mov	local04, #1
16f04     28 94 06 F1 | 	add	local05, #40
16f08     4A 03 68 FC | 	wrlong	#1, local05
16f0c     28 94 86 F1 | 	sub	local05, #40
16f10                 | LR__0651
16f10                 | LR__0652
16f10                 | LR__0653
16f10     FC 00 00 FF 
16f14     28 D6 05 F1 | 	add	ptr__dat__, ##129064
16f18     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16f1c     FC 00 00 FF 
16f20     28 D6 85 F1 | 	sub	ptr__dat__, ##129064
16f24     01 8E 56 F2 | 	cmps	local02, #1 wc
16f28     28 00 90 CD |  if_b	jmp	#LR__0654
16f2c     A8 8E 02 FB | 	rdlong	local02, fp
16f30     08 8E 06 F1 | 	add	local02, #8
16f34     47 95 02 FB | 	rdlong	local05, local02
16f38     28 94 06 F1 | 	add	local05, #40
16f3c     4A 05 68 FC | 	wrlong	#2, local05
16f40     A8 74 02 FB | 	rdlong	arg01, fp
16f44     02 76 06 F6 | 	mov	arg02, #2
16f48     13 00 00 FF 
16f4c     10 79 06 F6 | 	mov	arg03, ##10000
16f50     78 EB BF FD | 	call	#_move_servo_0833
16f54                 | LR__0654
16f54     FC 00 00 FF 
16f58     30 D6 05 F1 | 	add	ptr__dat__, ##129072
16f5c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16f60     FC 00 00 FF 
16f64     30 D6 85 F1 | 	sub	ptr__dat__, ##129072
16f68     01 8E 56 F2 | 	cmps	local02, #1 wc
16f6c     A4 03 90 CD |  if_b	jmp	#LR__0666
16f70     A8 8E 02 FB | 	rdlong	local02, fp
16f74     08 8E 06 F1 | 	add	local02, #8
16f78     47 95 02 FB | 	rdlong	local05, local02
16f7c     28 94 06 F1 | 	add	local05, #40
16f80     4A 05 68 FC | 	wrlong	#2, local05
16f84     A8 74 02 FB | 	rdlong	arg01, fp
16f88     02 76 06 F6 | 	mov	arg02, #2
16f8c     13 00 00 FF 
16f90     10 79 06 F6 | 	mov	arg03, ##10000
16f94     34 EB BF FD | 	call	#_move_servo_0833
16f98                 | '                         {
16f98                 | '                             control->stateMachine->functionData = HOMING_SEEKING;
16f98                 | '                             move_servo(control, MOVE_SPEED, 10000);
16f98                 | '                         }
16f98                 | '                         break;
16f98     78 03 90 FD | 	jmp	#LR__0666
16f9c                 | LR__0655
16f9c     A8 74 02 FB | 	rdlong	arg01, fp
16fa0     03 76 06 F6 | 	mov	arg02, #3
16fa4     00 78 06 F6 | 	mov	arg03, #0
16fa8     20 EB BF FD | 	call	#_move_servo_0833
16fac                 | '                         move_servo(control, MOVE_STOP, 0);
16fac                 | '                         break;
16fac     64 03 90 FD | 	jmp	#LR__0666
16fb0                 | LR__0656
16fb0     28 50 05 F1 | 	add	fp, #40
16fb4     A8 8E 02 FB | 	rdlong	local02, fp
16fb8     28 50 85 F1 | 	sub	fp, #40
16fbc     06 8E 0E F2 | 	cmp	local02, #6 wz
16fc0     3C 50 05 A1 |  if_e	add	fp, #60
16fc4     A8 92 C2 AA |  if_e	rdbyte	local04, fp
16fc8     3C 50 85 A1 |  if_e	sub	fp, #60
16fcc     00 92 4E A2 |  if_e	cmps	local04, #0 wz
16fd0     A8 8E 02 5B |  if_ne	rdlong	local02, fp
16fd4     08 8E 06 51 |  if_ne	add	local02, #8
16fd8     47 95 02 5B |  if_ne	rdlong	local05, local02
16fdc     28 94 06 51 |  if_ne	add	local05, #40
16fe0     4A 01 68 5C |  if_ne	wrlong	#0, local05
16fe4     FC 00 00 FF 
16fe8     40 D6 05 F1 | 	add	ptr__dat__, ##129088
16fec     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16ff0     FC 00 00 FF 
16ff4     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
16ff8     01 8E 56 F2 | 	cmps	local02, #1 wc
16ffc     2C 00 90 CD |  if_b	jmp	#LR__0657
17000     A8 8E 02 FB | 	rdlong	local02, fp
17004     08 8E 06 F1 | 	add	local02, #8
17008     47 95 02 FB | 	rdlong	local05, local02
1700c     A8 96 02 FB | 	rdlong	local06, fp
17010     08 96 06 F1 | 	add	local06, #8
17014     4B 99 02 FB | 	rdlong	local07, local06
17018     28 98 06 F1 | 	add	local07, #40
1701c     4C 93 02 FB | 	rdlong	local04, local07
17020     64 92 06 F1 | 	add	local04, #100
17024     28 94 06 F1 | 	add	local05, #40
17028     4A 93 62 FC | 	wrlong	local04, local05
1702c                 | LR__0657
1702c     FC 00 00 FF 
17030     38 D6 05 F1 | 	add	ptr__dat__, ##129080
17034     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
17038     FC 00 00 FF 
1703c     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
17040     01 8E 56 F2 | 	cmps	local02, #1 wc
17044     48 00 90 CD |  if_b	jmp	#LR__0659
17048     A8 8E 02 FB | 	rdlong	local02, fp
1704c     08 8E 06 F1 | 	add	local02, #8
17050     47 95 02 FB | 	rdlong	local05, local02
17054     28 94 06 F1 | 	add	local05, #40
17058     4A 93 02 FB | 	rdlong	local04, local05
1705c     65 92 56 F2 | 	cmps	local04, #101 wc
17060     2C 00 90 CD |  if_b	jmp	#LR__0658
17064     A8 8E 02 FB | 	rdlong	local02, fp
17068     08 8E 06 F1 | 	add	local02, #8
1706c     47 95 02 FB | 	rdlong	local05, local02
17070     A8 96 02 FB | 	rdlong	local06, fp
17074     08 96 06 F1 | 	add	local06, #8
17078     4B 99 02 FB | 	rdlong	local07, local06
1707c     28 98 06 F1 | 	add	local07, #40
17080     4C 93 02 FB | 	rdlong	local04, local07
17084     64 92 86 F1 | 	sub	local04, #100
17088     28 94 06 F1 | 	add	local05, #40
1708c     4A 93 62 FC | 	wrlong	local04, local05
17090                 | LR__0658
17090                 | LR__0659
17090     8C 50 05 F1 | 	add	fp, #140
17094     A8 90 02 FB | 	rdlong	local03, fp
17098     01 00 00 FF 
1709c     E8 91 06 FD | 	qmul	local03, ##1000
170a0     8C 50 85 F1 | 	sub	fp, #140
170a4     A8 92 02 FB | 	rdlong	local04, fp
170a8     08 92 06 F1 | 	add	local04, #8
170ac     49 97 02 FB | 	rdlong	local06, local04
170b0     28 96 06 F1 | 	add	local06, #40
170b4     4B A1 02 FB | 	rdlong	local11, local06
170b8     50 A3 02 F6 | 	mov	local12, local11
170bc     18 8E 62 FD | 	getqx	local02
170c0     51 8F 52 F2 | 	cmps	local02, local12 wc
170c4     54 00 90 3D |  if_ae	jmp	#LR__0660
170c8     FC 00 00 FF 
170cc     2C D6 05 F1 | 	add	ptr__dat__, ##129068
170d0     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
170d4     FC 00 00 FF 
170d8     2C D6 85 F1 | 	sub	ptr__dat__, ##129068
170dc     01 8E 56 F2 | 	cmps	local02, #1 wc
170e0     A8 74 02 3B |  if_ae	rdlong	arg01, fp
170e4     02 76 06 36 |  if_ae	mov	arg02, #2
170e8     64 78 06 36 |  if_ae	mov	arg03, #100
170ec     DC E9 BF 3D |  if_ae	call	#_move_servo_0833
170f0     FC 00 00 FF 
170f4     34 D6 05 F1 | 	add	ptr__dat__, ##129076
170f8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
170fc     FC 00 00 FF 
17100     34 D6 85 F1 | 	sub	ptr__dat__, ##129076
17104     01 8E 56 F2 | 	cmps	local02, #1 wc
17108     A8 74 02 3B |  if_ae	rdlong	arg01, fp
1710c     02 76 06 36 |  if_ae	mov	arg02, #2
17110     64 78 06 36 |  if_ae	mov	arg03, #100
17114     B4 E9 BF 3D |  if_ae	call	#_move_servo_0833
17118     10 00 90 FD | 	jmp	#LR__0661
1711c                 | LR__0660
1711c     A8 74 02 FB | 	rdlong	arg01, fp
17120     03 76 06 F6 | 	mov	arg02, #3
17124     00 78 06 F6 | 	mov	arg03, #0
17128     A0 E9 BF FD | 	call	#_move_servo_0833
1712c                 | LR__0661
1712c     FC 00 00 FF 
17130     28 D6 05 F1 | 	add	ptr__dat__, ##129064
17134     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
17138     FC 00 00 FF 
1713c     28 D6 85 F1 | 	sub	ptr__dat__, ##129064
17140     01 8E 56 F2 | 	cmps	local02, #1 wc
17144     A8 74 02 3B |  if_ae	rdlong	arg01, fp
17148     03 76 06 36 |  if_ae	mov	arg02, #3
1714c     00 78 06 36 |  if_ae	mov	arg03, #0
17150     78 E9 BF 3D |  if_ae	call	#_move_servo_0833
17154     FC 00 00 FF 
17158     30 D6 05 F1 | 	add	ptr__dat__, ##129072
1715c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
17160     FC 00 00 FF 
17164     30 D6 85 F1 | 	sub	ptr__dat__, ##129072
17168     01 8E 56 F2 | 	cmps	local02, #1 wc
1716c     A4 01 90 CD |  if_b	jmp	#LR__0666
17170     A8 74 02 FB | 	rdlong	arg01, fp
17174     03 76 06 F6 | 	mov	arg02, #3
17178     00 78 06 F6 | 	mov	arg03, #0
1717c     4C E9 BF FD | 	call	#_move_servo_0833
17180                 | '                         {
17180                 | '                             move_servo(control, MOVE_STOP, 0);
17180                 | '                         }
17180                 | '                         break;
17180     90 01 90 FD | 	jmp	#LR__0666
17184                 | LR__0662
17184     70 50 05 F1 | 	add	fp, #112
17188     A8 8C 02 FB | 	rdlong	local01, fp
1718c     70 50 85 F1 | 	sub	fp, #112
17190     01 8C 0E F2 | 	cmp	local01, #1 wz
17194     7C 01 90 AD |  if_e	jmp	#LR__0666
17198     70 50 05 F1 | 	add	fp, #112
1719c     A8 8C 02 FB | 	rdlong	local01, fp
171a0     70 50 85 F1 | 	sub	fp, #112
171a4     02 8C 0E F2 | 	cmp	local01, #2 wz
171a8     68 01 90 5D |  if_ne	jmp	#LR__0666
171ac     24 50 05 F1 | 	add	fp, #36
171b0     A8 8C 02 FB | 	rdlong	local01, fp
171b4     24 50 85 F1 | 	sub	fp, #36
171b8     02 8C 0E F2 | 	cmp	local01, #2 wz
171bc     3C 00 90 AD |  if_e	jmp	#LR__0663
171c0     FC 00 00 FF 
171c4     9C D6 05 F1 | 	add	ptr__dat__, ##129180
171c8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
171cc     FC 00 00 FF 
171d0     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
171d4     E4 87 BF FD | 	call	#_run_motion_profile_init
171d8     1C E9 B0 FD | 	call	#__system___getus
171dc     34 50 05 F1 | 	add	fp, #52
171e0     A8 34 62 FC | 	wrlong	result1, fp
171e4     34 50 85 F1 | 	sub	fp, #52
171e8     D8 00 00 FF 
171ec     04 D7 05 F1 | 	add	ptr__dat__, ##110852
171f0     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
171f4     D8 00 00 FF 
171f8     04 D7 85 F1 | 	sub	ptr__dat__, ##110852
171fc                 | LR__0663
171fc     FC 00 00 FF 
17200     A8 D6 05 F1 | 	add	ptr__dat__, ##129192
17204     EB 8C CA FA | 	rdbyte	local01, ptr__dat__ wz
17208     FC 00 00 FF 
1720c     A8 D6 85 F1 | 	sub	ptr__dat__, ##129192
17210     C0 00 90 5D |  if_ne	jmp	#LR__0664
17214     E0 E8 B0 FD | 	call	#__system___getus
17218     1A 75 02 F6 | 	mov	arg01, result1
1721c     34 50 05 F1 | 	add	fp, #52
17220     A8 90 02 FB | 	rdlong	local03, fp
17224     34 50 85 F1 | 	sub	fp, #52
17228     48 75 82 F1 | 	sub	arg01, local03
1722c     90 04 B1 FD | 	call	#__system___float_fromuns
17230     1A 75 02 F6 | 	mov	arg01, result1
17234     12 BA 24 FF 
17238     00 76 06 F6 | 	mov	arg02, ##1232348160
1723c     08 0A B1 FD | 	call	#__system___float_div
17240     B8 50 05 F1 | 	add	fp, #184
17244     A8 34 62 FC | 	wrlong	result1, fp
17248     B8 50 85 F1 | 	sub	fp, #184
1724c     1A 75 02 F6 | 	mov	arg01, result1
17250     FC 00 00 FF 
17254     9C D6 05 F1 | 	add	ptr__dat__, ##129180
17258     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1725c     FC 00 00 FF 
17260     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
17264     A8 78 02 FB | 	rdlong	arg03, fp
17268     0C 78 06 F1 | 	add	arg03, #12
1726c     DC 88 BF FD | 	call	#_position_profile
17270     BC 50 05 F1 | 	add	fp, #188
17274     A8 34 62 FC | 	wrlong	result1, fp
17278     BC 50 85 F1 | 	sub	fp, #188
1727c     A8 8C 02 FB | 	rdlong	local01, fp
17280     01 8E 06 F6 | 	mov	local02, #1
17284     1A 75 02 F6 | 	mov	arg01, result1
17288     00 3D 22 FF 
1728c     00 76 06 F6 | 	mov	arg02, ##1148846080
17290     94 07 B1 FD | 	call	#__system___float_mul
17294     1A 75 02 F6 | 	mov	arg01, result1
17298     00 76 06 F6 | 	mov	arg02, #0
1729c     78 0C B1 FD | 	call	#__system___float_tointeger
172a0     1A 79 02 F6 | 	mov	arg03, result1
172a4     46 75 02 F6 | 	mov	arg01, local01
172a8     47 77 02 F6 | 	mov	arg02, local02
172ac     1C E8 BF FD | 	call	#_move_servo_0833
172b0     BC 50 05 F1 | 	add	fp, #188
172b4     A8 74 02 FB | 	rdlong	arg01, fp
172b8     BC 50 85 F1 | 	sub	fp, #188
172bc     00 76 06 F6 | 	mov	arg02, #0
172c0     54 0C B1 FD | 	call	#__system___float_tointeger
172c4     38 50 05 F1 | 	add	fp, #56
172c8     A8 34 62 FC | 	wrlong	result1, fp
172cc     38 50 85 F1 | 	sub	fp, #56
172d0     40 00 90 FD | 	jmp	#LR__0666
172d4                 | LR__0664
172d4     D8 00 00 FF 
172d8     04 D7 05 F1 | 	add	ptr__dat__, ##110852
172dc     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
172e0     D8 00 00 FF 
172e4     04 D7 85 F1 | 	sub	ptr__dat__, ##110852
172e8     A8 8E 02 FB | 	rdlong	local02, fp
172ec     08 8E 06 F1 | 	add	local02, #8
172f0     47 75 02 FB | 	rdlong	arg01, local02
172f4     0A 76 06 F6 | 	mov	arg02, #10
172f8     01 78 06 F6 | 	mov	arg03, #1
172fc     B4 B6 BE FD | 	call	#_state_machine_set
17300     10 00 90 FD | 	jmp	#LR__0666
17304                 | LR__0665
17304     A8 74 02 FB | 	rdlong	arg01, fp
17308     03 76 06 F6 | 	mov	arg02, #3
1730c     00 78 06 F6 | 	mov	arg03, #0
17310     B8 E7 BF FD | 	call	#_move_servo_0833
17314                 | LR__0666
17314     04 50 05 F1 | 	add	fp, #4
17318     A8 74 02 F6 | 	mov	arg01, fp
1731c     4C 50 05 F1 | 	add	fp, #76
17320     A8 76 02 F6 | 	mov	arg02, fp
17324     50 50 85 F1 | 	sub	fp, #80
17328     30 78 06 F6 | 	mov	arg03, #48
1732c     28 E8 B0 FD | 	call	#__system____builtin_memmove
17330     80 50 05 F1 | 	add	fp, #128
17334     A8 8C 02 FB | 	rdlong	local01, fp
17338     04 50 05 F1 | 	add	fp, #4
1733c     A8 8E 02 FB | 	rdlong	local02, fp
17340     04 50 05 F1 | 	add	fp, #4
17344     A8 94 02 FB | 	rdlong	local05, fp
17348     44 50 85 F1 | 	sub	fp, #68
1734c     A8 8C 62 FC | 	wrlong	local01, fp
17350     04 50 05 F1 | 	add	fp, #4
17354     A8 8E 62 FC | 	wrlong	local02, fp
17358     04 50 05 F1 | 	add	fp, #4
1735c     A8 94 62 FC | 	wrlong	local05, fp
17360     10 50 85 F1 | 	sub	fp, #16
17364     A8 00 48 FC | 	wrbyte	#0, fp
17368     3C 50 85 F1 | 	sub	fp, #60
1736c     90 EB 9F FD | 	jmp	#LR__0589
17370     A8 F0 03 F6 | 	mov	ptra, fp
17374     B3 00 A0 FD | 	call	#popregs_
17378                 | _control_cog_0848_ret
17378     2D 00 64 FD | 	ret
1737c                 | 
1737c                 | _button_run_0876
1737c     08 76 06 F1 | 	add	arg02, #8
17380     3B 75 02 FB | 	rdlong	arg01, arg02
17384     0A 76 06 F6 | 	mov	arg02, #10
17388     02 78 06 F6 | 	mov	arg03, #2
1738c     24 B6 BE FD | 	call	#_state_machine_set
17390                 | _button_run_0876_ret
17390     2D 00 64 FD | 	ret
17394                 | 
17394                 | _button_nav_0878
17394     10 76 06 F1 | 	add	arg02, #16
17398     3B 03 48 FC | 	wrbyte	#1, arg02
1739c                 | _button_nav_0878_ret
1739c     2D 00 64 FD | 	ret
173a0                 | 
173a0                 | _button_open_0881
173a0     02 4C 05 F6 | 	mov	COUNT_, #2
173a4     A9 00 A0 FD | 	call	#pushregs_
173a8     3B 8D 02 F6 | 	mov	local01, arg02
173ac     46 75 02 FB | 	rdlong	arg01, local01
173b0     57 01 00 FF 
173b4     11 7C 06 F6 | 	mov	arg05, ##@LR__2251
173b8     64 76 06 F6 | 	mov	arg02, #100
173bc     64 78 06 F6 | 	mov	arg03, #100
173c0     00 7A 06 F6 | 	mov	arg04, #0
173c4     8C 71 BF FD | 	call	#_explorer_create
173c8     1A 8F 02 F6 | 	mov	local02, result1
173cc     47 75 02 F6 | 	mov	arg01, local02
173d0     FC 71 BF FD | 	call	#_explorer_run
173d4     00 74 06 F6 | 	mov	arg01, #0
173d8     F4 20 B1 FD | 	call	#__system___getiolock_1306
173dc     1A 75 02 F6 | 	mov	arg01, result1
173e0     8C E8 B0 FD | 	call	#__system___lockmem
173e4     57 01 00 FF 
173e8     15 76 06 F6 | 	mov	arg02, ##@LR__2252
173ec     00 74 06 F6 | 	mov	arg01, #0
173f0     00 78 06 F6 | 	mov	arg03, #0
173f4     20 EE B0 FD | 	call	#__system___basic_print_string
173f8     18 00 00 FF 
173fc     C8 8F 06 F1 | 	add	local02, ##12744
17400     47 77 02 F6 | 	mov	arg02, local02
17404     00 74 06 F6 | 	mov	arg01, #0
17408     00 78 06 F6 | 	mov	arg03, #0
1740c     08 EE B0 FD | 	call	#__system___basic_print_string
17410     00 74 06 F6 | 	mov	arg01, #0
17414     0A 76 06 F6 | 	mov	arg02, #10
17418     00 78 06 F6 | 	mov	arg03, #0
1741c     AC ED B0 FD | 	call	#__system___basic_print_char
17420     00 74 06 F6 | 	mov	arg01, #0
17424     A8 20 B1 FD | 	call	#__system___getiolock_1306
17428     1A 01 68 FC | 	wrlong	#0, result1
1742c     47 75 02 F6 | 	mov	arg01, local02
17430     18 00 00 FF 
17434     C8 8F 86 F1 | 	sub	local02, ##12744
17438     57 01 00 FF 
1743c     20 76 06 F6 | 	mov	arg02, ##@LR__2253
17440     C8 EC BE FD | 	call	#_strcmp
17444     00 34 0E F2 | 	cmp	result1, #0 wz
17448                 | '     {
17448                 | '         return;
17448     78 00 90 AD |  if_e	jmp	#LR__0667
1744c     00 74 06 F6 | 	mov	arg01, #0
17450     7C 20 B1 FD | 	call	#__system___getiolock_1306
17454     1A 75 02 F6 | 	mov	arg01, result1
17458     14 E8 B0 FD | 	call	#__system___lockmem
1745c     57 01 00 FF 
17460     22 76 06 F6 | 	mov	arg02, ##@LR__2254
17464     00 74 06 F6 | 	mov	arg01, #0
17468     00 78 06 F6 | 	mov	arg03, #0
1746c     A8 ED B0 FD | 	call	#__system___basic_print_string
17470     18 00 00 FF 
17474     C8 8F 06 F1 | 	add	local02, ##12744
17478     47 77 02 F6 | 	mov	arg02, local02
1747c     00 74 06 F6 | 	mov	arg01, #0
17480     00 78 06 F6 | 	mov	arg03, #0
17484     90 ED B0 FD | 	call	#__system___basic_print_string
17488     00 74 06 F6 | 	mov	arg01, #0
1748c     0A 76 06 F6 | 	mov	arg02, #10
17490     00 78 06 F6 | 	mov	arg03, #0
17494     34 ED B0 FD | 	call	#__system___basic_print_char
17498     00 74 06 F6 | 	mov	arg01, #0
1749c     30 20 B1 FD | 	call	#__system___getiolock_1306
174a0     1A 01 68 FC | 	wrlong	#0, result1
174a4     0C 8C 06 F1 | 	add	local01, #12
174a8     46 77 02 FB | 	rdlong	arg02, local01
174ac     0C 76 06 F1 | 	add	arg02, #12
174b0     47 75 02 F6 | 	mov	arg01, local02
174b4     3C 03 BF FD | 	call	#_json_to_motion_profile
174b8     46 75 02 FB | 	rdlong	arg01, local01
174bc     0C 74 06 F1 | 	add	arg01, #12
174c0     60 11 BF FD | 	call	#_json_print_motion_profile
174c4                 | LR__0667
174c4     A8 F0 03 F6 | 	mov	ptra, fp
174c8     B3 00 A0 FD | 	call	#popregs_
174cc                 | _button_open_0881_ret
174cc     2D 00 64 FD | 	ret
174d0                 | 
174d0                 | _update_profileName_0884
174d0     01 4C 05 F6 | 	mov	COUNT_, #1
174d4     A9 00 A0 FD | 	call	#pushregs_
174d8     44 F0 07 F1 | 	add	ptra, #68
174dc     A8 74 62 FC | 	wrlong	arg01, fp
174e0     04 50 05 F1 | 	add	fp, #4
174e4     A8 76 62 FC | 	wrlong	arg02, fp
174e8     04 50 05 F1 | 	add	fp, #4
174ec     A8 78 62 FC | 	wrlong	arg03, fp
174f0     04 50 05 F1 | 	add	fp, #4
174f4     A8 78 62 FC | 	wrlong	arg03, fp
174f8     04 50 05 F1 | 	add	fp, #4
174fc     A8 74 02 F6 | 	mov	arg01, fp
17500     57 01 00 FF 
17504     2D 76 06 F6 | 	mov	arg02, ##@LR__2255
17508     10 50 85 F1 | 	sub	fp, #16
1750c     0C 78 06 F1 | 	add	arg03, #12
17510     3C 8D 02 FB | 	rdlong	local01, arg03
17514     0C 8C 06 F1 | 	add	local01, #12
17518     F8 79 02 F6 | 	mov	arg03, ptra
1751c     61 8D 66 FC | 	wrlong	local01, ptra++
17520     70 A8 BE FD | 	call	#_sprintf
17524     04 F0 87 F1 | 	sub	ptra, #4
17528     10 50 05 F1 | 	add	fp, #16
1752c     A8 74 02 F6 | 	mov	arg01, fp
17530     04 50 85 F1 | 	sub	fp, #4
17534     A8 76 02 FB | 	rdlong	arg02, fp
17538     0C 50 85 F1 | 	sub	fp, #12
1753c     06 00 00 FF 
17540     D4 77 06 F1 | 	add	arg02, ##3540
17544     C4 EB BE FD | 	call	#_strcmp
17548     00 34 0E F2 | 	cmp	result1, #0 wz
1754c                 | '         return;
1754c     58 00 90 AD |  if_e	jmp	#LR__0668
17550     0C 50 05 F1 | 	add	fp, #12
17554     A8 74 02 FB | 	rdlong	arg01, fp
17558     06 00 00 FF 
1755c     D4 75 06 F1 | 	add	arg01, ##3540
17560     04 50 05 F1 | 	add	fp, #4
17564     A8 76 02 F6 | 	mov	arg02, fp
17568     10 50 85 F1 | 	sub	fp, #16
1756c     78 E6 B0 FD | 	call	#__system____builtin_strcpy
17570     04 50 05 F1 | 	add	fp, #4
17574     A8 74 02 FB | 	rdlong	arg01, fp
17578     08 50 05 F1 | 	add	fp, #8
1757c     A8 76 02 FB | 	rdlong	arg02, fp
17580     06 00 00 FF 
17584     D4 77 06 F1 | 	add	arg02, ##3540
17588     D0 74 06 F1 | 	add	arg01, #208
1758c     3A 77 62 FC | 	wrlong	arg02, arg01
17590     A8 8C 02 FB | 	rdlong	local01, fp
17594     46 75 02 FB | 	rdlong	arg01, local01
17598     08 50 85 F1 | 	sub	fp, #8
1759c     A8 76 02 FB | 	rdlong	arg02, fp
175a0     04 50 85 F1 | 	sub	fp, #4
175a4     78 23 BF FD | 	call	#_module_draw
175a8                 | LR__0668
175a8     A8 F0 03 F6 | 	mov	ptra, fp
175ac     B3 00 A0 FD | 	call	#popregs_
175b0                 | _update_profileName_0884_ret
175b0     2D 00 64 FD | 	ret
175b4                 | 
175b4                 | _update_profileNumber_0887
175b4     01 4C 05 F6 | 	mov	COUNT_, #1
175b8     A9 00 A0 FD | 	call	#pushregs_
175bc     44 F0 07 F1 | 	add	ptra, #68
175c0     A8 74 62 FC | 	wrlong	arg01, fp
175c4     04 50 05 F1 | 	add	fp, #4
175c8     A8 76 62 FC | 	wrlong	arg02, fp
175cc     04 50 05 F1 | 	add	fp, #4
175d0     A8 78 62 FC | 	wrlong	arg03, fp
175d4     04 50 05 F1 | 	add	fp, #4
175d8     A8 78 62 FC | 	wrlong	arg03, fp
175dc     04 50 05 F1 | 	add	fp, #4
175e0     A8 74 02 F6 | 	mov	arg01, fp
175e4     57 01 00 FF 
175e8     36 76 06 F6 | 	mov	arg02, ##@LR__2256
175ec     10 50 85 F1 | 	sub	fp, #16
175f0     0C 78 06 F1 | 	add	arg03, #12
175f4     3C 79 02 FB | 	rdlong	arg03, arg03
175f8     40 78 06 F1 | 	add	arg03, #64
175fc     3C 8D 02 FB | 	rdlong	local01, arg03
17600     F8 79 02 F6 | 	mov	arg03, ptra
17604     61 8D 66 FC | 	wrlong	local01, ptra++
17608     88 A7 BE FD | 	call	#_sprintf
1760c     04 F0 87 F1 | 	sub	ptra, #4
17610     10 50 05 F1 | 	add	fp, #16
17614     A8 74 02 F6 | 	mov	arg01, fp
17618     04 50 85 F1 | 	sub	fp, #4
1761c     A8 76 02 FB | 	rdlong	arg02, fp
17620     0C 50 85 F1 | 	sub	fp, #12
17624     07 00 00 FF 
17628     08 76 06 F1 | 	add	arg02, ##3592
1762c     DC EA BE FD | 	call	#_strcmp
17630     00 34 0E F2 | 	cmp	result1, #0 wz
17634                 | '         return;
17634     58 00 90 AD |  if_e	jmp	#LR__0669
17638     0C 50 05 F1 | 	add	fp, #12
1763c     A8 74 02 FB | 	rdlong	arg01, fp
17640     07 00 00 FF 
17644     08 74 06 F1 | 	add	arg01, ##3592
17648     04 50 05 F1 | 	add	fp, #4
1764c     A8 76 02 F6 | 	mov	arg02, fp
17650     10 50 85 F1 | 	sub	fp, #16
17654     90 E5 B0 FD | 	call	#__system____builtin_strcpy
17658     04 50 05 F1 | 	add	fp, #4
1765c     A8 74 02 FB | 	rdlong	arg01, fp
17660     08 50 05 F1 | 	add	fp, #8
17664     A8 76 02 FB | 	rdlong	arg02, fp
17668     07 00 00 FF 
1766c     08 76 06 F1 | 	add	arg02, ##3592
17670     D0 74 06 F1 | 	add	arg01, #208
17674     3A 77 62 FC | 	wrlong	arg02, arg01
17678     A8 8C 02 FB | 	rdlong	local01, fp
1767c     46 75 02 FB | 	rdlong	arg01, local01
17680     08 50 85 F1 | 	sub	fp, #8
17684     A8 76 02 FB | 	rdlong	arg02, fp
17688     04 50 85 F1 | 	sub	fp, #4
1768c     90 22 BF FD | 	call	#_module_draw
17690                 | LR__0669
17690     A8 F0 03 F6 | 	mov	ptra, fp
17694     B3 00 A0 FD | 	call	#popregs_
17698                 | _update_profileNumber_0887_ret
17698     2D 00 64 FD | 	ret
1769c                 | 
1769c                 | _isFile_0909
1769c     02 4C 05 F6 | 	mov	COUNT_, #2
176a0     A9 00 A0 FD | 	call	#pushregs_
176a4     3A 8D 02 F6 | 	mov	local01, arg01
176a8     00 8E 06 F6 | 	mov	local02, #0
176ac                 | ' {
176ac                 | '     for (int i = 0; i < (int)strlen(name); i++)
176ac                 | LR__0670
176ac     46 75 02 F6 | 	mov	arg01, local01
176b0     C0 EB BE FD | 	call	#_strlen
176b4     1A 8F 52 F2 | 	cmps	local02, result1 wc
176b8     20 00 90 3D |  if_ae	jmp	#LR__0671
176bc     47 75 02 F6 | 	mov	arg01, local02
176c0     46 75 02 F1 | 	add	arg01, local01
176c4     3A 75 C2 FA | 	rdbyte	arg01, arg01
176c8     2E 74 0E F2 | 	cmp	arg01, #46 wz
176cc                 | '         {
176cc                 | '             return  (1) ;
176cc     01 34 06 A6 |  if_e	mov	result1, #1
176d0     0C 00 90 AD |  if_e	jmp	#LR__0672
176d4     01 8E 06 F1 | 	add	local02, #1
176d8     D0 FF 9F FD | 	jmp	#LR__0670
176dc                 | LR__0671
176dc                 | '         }
176dc                 | '     }
176dc                 | '     return  (0) ;
176dc     00 34 06 F6 | 	mov	result1, #0
176e0                 | LR__0672
176e0     A8 F0 03 F6 | 	mov	ptra, fp
176e4     B3 00 A0 FD | 	call	#popregs_
176e8                 | _isFile_0909_ret
176e8     2D 00 64 FD | 	ret
176ec                 | 
176ec                 | _button_delete_0912
176ec     03 4C 05 F6 | 	mov	COUNT_, #3
176f0     A9 00 A0 FD | 	call	#pushregs_
176f4     3B 8D 02 F6 | 	mov	local01, arg02
176f8     18 00 00 FF 
176fc     C8 8D 06 F1 | 	add	local01, ##12744
17700     46 75 02 F6 | 	mov	arg01, local01
17704     6C EB BE FD | 	call	#_strlen
17708     1A 8F 02 F6 | 	mov	local02, result1
1770c     46 75 02 F6 | 	mov	arg01, local01
17710     57 01 00 FF 
17714     41 76 06 F6 | 	mov	arg02, ##@LR__2257
17718     28 E9 BE FD | 	call	#_strcat
1771c     46 75 02 F6 | 	mov	arg01, local01
17720     68 8C 06 F1 | 	add	local01, #104
17724     46 91 02 FB | 	rdlong	local03, local01
17728     48 77 02 F6 | 	mov	arg02, local03
1772c     02 76 66 F0 | 	shl	arg02, #2
17730     48 77 02 F1 | 	add	arg02, local03
17734     02 76 66 F0 | 	shl	arg02, #2
17738     19 00 00 FF 
1773c     28 8C 86 F1 | 	sub	local01, ##12840
17740     46 77 02 F1 | 	add	arg02, local01
17744     FC E8 BE FD | 	call	#_strcat
17748     00 74 06 F6 | 	mov	arg01, #0
1774c     80 1D B1 FD | 	call	#__system___getiolock_1306
17750     1A 75 02 F6 | 	mov	arg01, result1
17754     18 E5 B0 FD | 	call	#__system___lockmem
17758     57 01 00 FF 
1775c     43 76 06 F6 | 	mov	arg02, ##@LR__2258
17760     00 74 06 F6 | 	mov	arg01, #0
17764     00 78 06 F6 | 	mov	arg03, #0
17768     AC EA B0 FD | 	call	#__system___basic_print_string
1776c     19 00 00 FF 
17770     28 8C 06 F1 | 	add	local01, ##12840
17774     46 91 02 FB | 	rdlong	local03, local01
17778     48 77 02 F6 | 	mov	arg02, local03
1777c     02 76 66 F0 | 	shl	arg02, #2
17780     48 77 02 F1 | 	add	arg02, local03
17784     02 76 66 F0 | 	shl	arg02, #2
17788     19 00 00 FF 
1778c     28 8C 86 F1 | 	sub	local01, ##12840
17790     46 77 02 F1 | 	add	arg02, local01
17794     00 74 06 F6 | 	mov	arg01, #0
17798     00 78 06 F6 | 	mov	arg03, #0
1779c     78 EA B0 FD | 	call	#__system___basic_print_string
177a0     57 01 00 FF 
177a4     4D 76 06 F6 | 	mov	arg02, ##@LR__2259
177a8     00 74 06 F6 | 	mov	arg01, #0
177ac     00 78 06 F6 | 	mov	arg03, #0
177b0     64 EA B0 FD | 	call	#__system___basic_print_string
177b4     18 00 00 FF 
177b8     C0 8D 06 F1 | 	add	local01, ##12736
177bc     46 77 02 F6 | 	mov	arg02, local01
177c0     00 74 06 F6 | 	mov	arg01, #0
177c4     00 78 06 F6 | 	mov	arg03, #0
177c8     4C EA B0 FD | 	call	#__system___basic_print_string
177cc     00 74 06 F6 | 	mov	arg01, #0
177d0     0A 76 06 F6 | 	mov	arg02, #10
177d4     00 78 06 F6 | 	mov	arg03, #0
177d8     F0 E9 B0 FD | 	call	#__system___basic_print_char
177dc     00 74 06 F6 | 	mov	arg01, #0
177e0     EC 1C B1 FD | 	call	#__system___getiolock_1306
177e4     1A 01 68 FC | 	wrlong	#0, result1
177e8     46 75 02 F6 | 	mov	arg01, local01
177ec                 | '     return _remove(name);
177ec     70 1B B0 FD | 	call	#__remove
177f0     46 8F 02 F1 | 	add	local02, local01
177f4     47 01 48 FC | 	wrbyte	#0, local02
177f8     A8 F0 03 F6 | 	mov	ptra, fp
177fc     B3 00 A0 FD | 	call	#popregs_
17800                 | _button_delete_0912_ret
17800     2D 00 64 FD | 	ret
17804                 | 
17804                 | _button_cancel_0914
17804     01 4C 05 F6 | 	mov	COUNT_, #1
17808     A9 00 A0 FD | 	call	#pushregs_
1780c     3B 8D 02 F6 | 	mov	local01, arg02
17810     18 00 00 FF 
17814     C8 8D 06 F1 | 	add	local01, ##12744
17818     46 75 02 F6 | 	mov	arg01, local01
1781c     57 01 00 FF 
17820     54 76 06 F6 | 	mov	arg02, ##@LR__2260
17824     90 E7 BE FD | 	call	#_strcpy
17828     18 00 00 FF 
1782c     C4 8C 86 F1 | 	sub	local01, ##12484
17830     46 03 48 FC | 	wrbyte	#1, local01
17834     A8 F0 03 F6 | 	mov	ptra, fp
17838     B3 00 A0 FD | 	call	#popregs_
1783c                 | _button_cancel_0914_ret
1783c     2D 00 64 FD | 	ret
17840                 | 
17840                 | _button_dotdot_0917
17840     04 4C 05 F6 | 	mov	COUNT_, #4
17844     A9 00 A0 FD | 	call	#pushregs_
17848     3B 8D 02 F6 | 	mov	local01, arg02
1784c     18 00 00 FF 
17850     C8 8D 06 F1 | 	add	local01, ##12744
17854     46 75 02 F6 | 	mov	arg01, local01
17858     18 00 00 FF 
1785c     C8 8D 86 F1 | 	sub	local01, ##12744
17860     10 EA BE FD | 	call	#_strlen
17864     1A 8F 02 F6 | 	mov	local02, result1
17868     01 8E 86 F1 | 	sub	local02, #1
1786c     EC 87 9E FE | 	loc	pa,	#(@LR__0675-@LR__0673)
17870     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17874                 | ' {
17874                 | '     Explorer *explorer = (Explorer *)arg;
17874                 | '     for (int i = strlen(explorer->pathBuffer) - 1; i >= 0; i--)
17874                 | LR__0673
17874     00 8E 56 F2 | 	cmps	local02, #0 wc
17878     54 00 90 CD |  if_b	jmp	#LR__0676
1787c     47 91 02 F6 | 	mov	local03, local02
17880     18 00 00 FF 
17884     C8 8D 06 F1 | 	add	local01, ##12744
17888     46 91 02 F1 | 	add	local03, local01
1788c     48 93 C2 FA | 	rdbyte	local04, local03
17890     2F 92 0E F2 | 	cmp	local04, #47 wz
17894     18 00 00 FF 
17898     C8 8D 86 F1 | 	sub	local01, ##12744
1789c     28 00 90 5D |  if_ne	jmp	#LR__0674
178a0     18 00 00 FF 
178a4     C8 8D 06 F1 | 	add	local01, ##12744
178a8     46 8F 02 F1 | 	add	local02, local01
178ac     47 01 48 FC | 	wrbyte	#0, local02
178b0     68 8C 06 F1 | 	add	local01, #104
178b4     FF FF FF FF 
178b8     46 FF 6B FC | 	wrlong	##-1, local01
178bc     04 8C 86 F1 | 	sub	local01, #4
178c0     46 01 68 FC | 	wrlong	#0, local01
178c4                 | '         {
178c4                 | '             explorer->pathBuffer[i] = '\0';
178c4                 | '             explorer->selection = -1;
178c4                 | '             explorer->page = 0;
178c4                 | '             break;
178c4     08 00 90 FD | 	jmp	#LR__0676
178c8                 | LR__0674
178c8     01 8E 86 F1 | 	sub	local02, #1
178cc     A4 FF 9F FD | 	jmp	#LR__0673
178d0                 | LR__0675
178d0                 | LR__0676
178d0     A8 F0 03 F6 | 	mov	ptra, fp
178d4     B3 00 A0 FD | 	call	#popregs_
178d8                 | _button_dotdot_0917_ret
178d8     2D 00 64 FD | 	ret
178dc                 | 
178dc                 | _button_prev_0919
178dc     19 00 00 FF 
178e0     2C 76 06 F1 | 	add	arg02, ##12844
178e4     3B 3B 02 FB | 	rdlong	_var01, arg02
178e8     19 00 00 FF 
178ec     2C 76 86 F1 | 	sub	arg02, ##12844
178f0     01 3A 56 F2 | 	cmps	_var01, #1 wc
178f4     19 00 00 3F 
178f8     2C 76 06 31 |  if_ae	add	arg02, ##12844
178fc     3B 3B 02 3B |  if_ae	rdlong	_var01, arg02
17900     01 3A 86 31 |  if_ae	sub	_var01, #1
17904     3B 3B 62 3C |  if_ae	wrlong	_var01, arg02
17908     19 00 00 3F 
1790c     2C 76 86 31 |  if_ae	sub	arg02, ##12844
17910     19 00 00 FF 
17914     30 76 06 F1 | 	add	arg02, ##12848
17918     FF FF FF FF 
1791c     3B FF 6B FC | 	wrlong	##-1, arg02
17920                 | _button_prev_0919_ret
17920     2D 00 64 FD | 	ret
17924                 | 
17924                 | _button_next_0921
17924     19 00 00 FF 
17928     2C 76 06 F1 | 	add	arg02, ##12844
1792c     3B 3B 02 FB | 	rdlong	_var01, arg02
17930     01 3A 06 F1 | 	add	_var01, #1
17934     3B 3B 62 FC | 	wrlong	_var01, arg02
17938     04 76 06 F1 | 	add	arg02, #4
1793c     FF FF FF FF 
17940     3B FF 6B FC | 	wrlong	##-1, arg02
17944                 | _button_next_0921_ret
17944     2D 00 64 FD | 	ret
17948                 | 
17948                 | _button_done_0923
17948     04 77 06 F1 | 	add	arg02, #260
1794c     3B 03 48 FC | 	wrbyte	#1, arg02
17950                 | _button_done_0923_ret
17950     2D 00 64 FD | 	ret
17954                 | 
17954                 | _button_files_0927
17954     05 4C 05 F6 | 	mov	COUNT_, #5
17958     A9 00 A0 FD | 	call	#pushregs_
1795c     3A 8D 02 F6 | 	mov	local01, arg01
17960     3B 8F 02 F6 | 	mov	local02, arg02
17964     46 91 02 F6 | 	mov	local03, local01
17968     48 93 02 F6 | 	mov	local04, local03
1796c     02 92 66 F0 | 	shl	local04, #2
17970     48 93 02 F1 | 	add	local04, local03
17974     02 92 66 F0 | 	shl	local04, #2
17978     08 8E 06 F1 | 	add	local02, #8
1797c     47 93 02 F1 | 	add	local04, local02
17980     00 94 06 F6 | 	mov	local05, #0
17984                 | '     for (int i = 0; i < (int)strlen(newpath); i++)
17984     08 8E 86 F1 | 	sub	local02, #8
17988                 | LR__0677
17988     49 75 02 F6 | 	mov	arg01, local04
1798c     E4 E8 BE FD | 	call	#_strlen
17990     1A 95 52 F2 | 	cmps	local05, result1 wc
17994     3C 00 90 3D |  if_ae	jmp	#LR__0679
17998     4A 91 02 F6 | 	mov	local03, local05
1799c     49 91 02 F1 | 	add	local03, local04
179a0     48 91 C2 FA | 	rdbyte	local03, local03
179a4     2E 90 0E F2 | 	cmp	local03, #46 wz
179a8     20 00 90 5D |  if_ne	jmp	#LR__0678
179ac     04 8E 06 F1 | 	add	local02, #4
179b0     47 95 0A FB | 	rdlong	local05, local02 wz
179b4     04 8E 86 F1 | 	sub	local02, #4
179b8     19 00 00 AF 
179bc     30 8E 06 A1 |  if_e	add	local02, ##12848
179c0     47 8D 62 AC |  if_e	wrlong	local01, local02
179c4                 | '             {
179c4                 | '                 explorer->selection = id;
179c4                 | '                 return;
179c4     84 00 90 AD |  if_e	jmp	#LR__0680
179c8                 | '             {
179c8                 | '                 return;
179c8     80 00 90 FD | 	jmp	#LR__0680
179cc                 | LR__0678
179cc     01 94 06 F1 | 	add	local05, #1
179d0     B4 FF 9F FD | 	jmp	#LR__0677
179d4                 | LR__0679
179d4     18 00 00 FF 
179d8     C8 8F 06 F1 | 	add	local02, ##12744
179dc     47 75 02 F6 | 	mov	arg01, local02
179e0     57 01 00 FF 
179e4     56 76 06 F6 | 	mov	arg02, ##@LR__2261
179e8     58 E6 BE FD | 	call	#_strcat
179ec     47 75 02 F6 | 	mov	arg01, local02
179f0     49 77 02 F6 | 	mov	arg02, local04
179f4     4C E6 BE FD | 	call	#_strcat
179f8     68 8E 06 F1 | 	add	local02, #104
179fc     FF FF FF FF 
17a00     47 FF 6B FC | 	wrlong	##-1, local02
17a04     04 8E 86 F1 | 	sub	local02, #4
17a08     47 01 68 FC | 	wrlong	#0, local02
17a0c     00 74 06 F6 | 	mov	arg01, #0
17a10     BC 1A B1 FD | 	call	#__system___getiolock_1306
17a14     1A 75 02 F6 | 	mov	arg01, result1
17a18     54 E2 B0 FD | 	call	#__system___lockmem
17a1c     64 8E 86 F1 | 	sub	local02, #100
17a20     00 74 06 F6 | 	mov	arg01, #0
17a24     47 77 02 F6 | 	mov	arg02, local02
17a28     00 78 06 F6 | 	mov	arg03, #0
17a2c     E8 E7 B0 FD | 	call	#__system___basic_print_string
17a30     00 74 06 F6 | 	mov	arg01, #0
17a34     0A 76 06 F6 | 	mov	arg02, #10
17a38     00 78 06 F6 | 	mov	arg03, #0
17a3c     8C E7 B0 FD | 	call	#__system___basic_print_char
17a40     00 74 06 F6 | 	mov	arg01, #0
17a44     88 1A B1 FD | 	call	#__system___getiolock_1306
17a48     1A 01 68 FC | 	wrlong	#0, result1
17a4c                 | LR__0680
17a4c     A8 F0 03 F6 | 	mov	ptra, fp
17a50     B3 00 A0 FD | 	call	#popregs_
17a54                 | _button_files_0927_ret
17a54     2D 00 64 FD | 	ret
17a58                 | 
17a58                 | _button_navigation_1002
17a58     15 01 00 FF 
17a5c     54 D7 05 F1 | 	add	ptr__dat__, ##142164
17a60     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
17a64     15 01 00 FF 
17a68     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
17a6c                 | _button_navigation_1002_ret
17a6c     2D 00 64 FD | 	ret
17a70                 | 
17a70                 | _create_filepath_1003
17a70     01 4C 05 F6 | 	mov	COUNT_, #1
17a74     A9 00 A0 FD | 	call	#pushregs_
17a78     3A 8D 02 F6 | 	mov	local01, arg01
17a7c     68 E1 B0 FD | 	call	#__system____builtin_strcpy
17a80     57 01 00 FF 
17a84     58 76 06 F6 | 	mov	arg02, ##@LR__2262
17a88     46 75 02 F6 | 	mov	arg01, local01
17a8c     B4 E5 BE FD | 	call	#_strcat
17a90     46 75 02 F6 | 	mov	arg01, local01
17a94     3C 77 02 F6 | 	mov	arg02, arg03
17a98     A8 E5 BE FD | 	call	#_strcat
17a9c     46 75 02 F6 | 	mov	arg01, local01
17aa0     3D 77 02 F6 | 	mov	arg02, arg04
17aa4     9C E5 BE FD | 	call	#_strcat
17aa8     A8 F0 03 F6 | 	mov	ptra, fp
17aac     B3 00 A0 FD | 	call	#popregs_
17ab0                 | _create_filepath_1003_ret
17ab0     2D 00 64 FD | 	ret
17ab4                 | 
17ab4                 | _button_open_1009
17ab4     10 4C 05 F6 | 	mov	COUNT_, #16
17ab8     A9 00 A0 FD | 	call	#pushregs_
17abc     3B 8D 02 F6 | 	mov	local01, arg02
17ac0     46 8F 02 F6 | 	mov	local02, local01
17ac4     04 8E 06 F1 | 	add	local02, #4
17ac8     47 75 02 FB | 	rdlong	arg01, local02
17acc     04 8E 86 F1 | 	sub	local02, #4
17ad0     57 01 00 FF 
17ad4     5A 7C 06 F6 | 	mov	arg05, ##@LR__2263
17ad8     64 76 06 F6 | 	mov	arg02, #100
17adc     64 78 06 F6 | 	mov	arg03, #100
17ae0     00 7A 06 F6 | 	mov	arg04, #0
17ae4     6C 6A BF FD | 	call	#_explorer_create
17ae8     1A 91 02 F6 | 	mov	local03, result1
17aec     48 75 02 F6 | 	mov	arg01, local03
17af0     DC 6A BF FD | 	call	#_explorer_run
17af4     1A 93 02 F6 | 	mov	local04, result1
17af8     57 01 00 FF 
17afc     5E 76 06 F6 | 	mov	arg02, ##@LR__2264
17b00     49 75 02 F6 | 	mov	arg01, local04
17b04     04 E6 BE FD | 	call	#_strcmp
17b08     00 34 0E F2 | 	cmp	result1, #0 wz
17b0c                 | '     {
17b0c                 | '         return;
17b0c     7C 02 90 AD |  if_e	jmp	#LR__0694
17b10     00 94 06 F6 | 	mov	local05, #0
17b14                 | '     }
17b14                 | ' 
17b14                 | ' 
17b14                 | ' 
17b14                 | ' 
17b14                 | ' 
17b14                 | '     for (int i = 0; i <  4 ; i++)
17b14                 | LR__0681
17b14     04 94 56 F2 | 	cmps	local05, #4 wc
17b18     44 01 90 3D |  if_ae	jmp	#LR__0687
17b1c     49 75 02 F6 | 	mov	arg01, local04
17b20     00 96 06 F6 | 	mov	local06, #0
17b24     E8 84 9E FE | 	loc	pa,	#(@LR__0683-@LR__0682)
17b28     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17b2c                 | LR__0682
17b2c     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17b30     01 96 06 51 |  if_ne	add	local06, #1
17b34     01 74 06 51 |  if_ne	add	arg01, #1
17b38     F0 FF 9F 5D |  if_ne	jmp	#LR__0682
17b3c                 | LR__0683
17b3c     4B 99 02 F6 | 	mov	local07, local06
17b40     4A 75 02 F6 | 	mov	arg01, local05
17b44     02 74 66 F0 | 	shl	arg01, #2
17b48     15 01 00 FF 
17b4c     44 D7 05 F1 | 	add	ptr__dat__, ##142148
17b50     EB 74 02 F1 | 	add	arg01, ptr__dat__
17b54     3A 75 02 FB | 	rdlong	arg01, arg01
17b58     15 01 00 FF 
17b5c     44 D7 85 F1 | 	sub	ptr__dat__, ##142148
17b60     00 96 06 F6 | 	mov	local06, #0
17b64     A8 84 9E FE | 	loc	pa,	#(@LR__0685-@LR__0684)
17b68     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17b6c                 | LR__0684
17b6c     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17b70     01 96 06 51 |  if_ne	add	local06, #1
17b74     01 74 06 51 |  if_ne	add	arg01, #1
17b78     F0 FF 9F 5D |  if_ne	jmp	#LR__0684
17b7c                 | LR__0685
17b7c     4B 99 82 F1 | 	sub	local07, local06
17b80     49 9B 02 F6 | 	mov	local08, local04
17b84     4C 9B 02 F1 | 	add	local08, local07
17b88     00 74 06 F6 | 	mov	arg01, #0
17b8c     40 19 B1 FD | 	call	#__system___getiolock_1306
17b90     1A 75 02 F6 | 	mov	arg01, result1
17b94     D8 E0 B0 FD | 	call	#__system___lockmem
17b98     00 74 06 F6 | 	mov	arg01, #0
17b9c     4D 77 02 F6 | 	mov	arg02, local08
17ba0     00 78 06 F6 | 	mov	arg03, #0
17ba4     70 E6 B0 FD | 	call	#__system___basic_print_string
17ba8     00 74 06 F6 | 	mov	arg01, #0
17bac     0A 76 06 F6 | 	mov	arg02, #10
17bb0     00 78 06 F6 | 	mov	arg03, #0
17bb4     14 E6 B0 FD | 	call	#__system___basic_print_char
17bb8     00 74 06 F6 | 	mov	arg01, #0
17bbc     10 19 B1 FD | 	call	#__system___getiolock_1306
17bc0     1A 01 68 FC | 	wrlong	#0, result1
17bc4     4A 75 02 F6 | 	mov	arg01, local05
17bc8     02 74 66 F0 | 	shl	arg01, #2
17bcc     15 01 00 FF 
17bd0     44 D7 05 F1 | 	add	ptr__dat__, ##142148
17bd4     EB 74 02 F1 | 	add	arg01, ptr__dat__
17bd8     3A 77 02 FB | 	rdlong	arg02, arg01
17bdc     4D 75 02 F6 | 	mov	arg01, local08
17be0     15 01 00 FF 
17be4     44 D7 85 F1 | 	sub	ptr__dat__, ##142148
17be8     20 E5 BE FD | 	call	#_strcmp
17bec     00 34 0E F2 | 	cmp	result1, #0 wz
17bf0     64 00 90 5D |  if_ne	jmp	#LR__0686
17bf4     00 74 06 F6 | 	mov	arg01, #0
17bf8     D4 18 B1 FD | 	call	#__system___getiolock_1306
17bfc     1A 75 02 F6 | 	mov	arg01, result1
17c00     6C E0 B0 FD | 	call	#__system___lockmem
17c04     57 01 00 FF 
17c08     60 76 06 F6 | 	mov	arg02, ##@LR__2265
17c0c     00 74 06 F6 | 	mov	arg01, #0
17c10     00 78 06 F6 | 	mov	arg03, #0
17c14     00 E6 B0 FD | 	call	#__system___basic_print_string
17c18     00 74 06 F6 | 	mov	arg01, #0
17c1c     4A 77 02 F6 | 	mov	arg02, local05
17c20     00 78 06 F6 | 	mov	arg03, #0
17c24     0A 7A 06 F6 | 	mov	arg04, #10
17c28     30 E6 B0 FD | 	call	#__system___basic_print_integer
17c2c     00 74 06 F6 | 	mov	arg01, #0
17c30     0A 76 06 F6 | 	mov	arg02, #10
17c34     00 78 06 F6 | 	mov	arg03, #0
17c38     90 E5 B0 FD | 	call	#__system___basic_print_char
17c3c     00 74 06 F6 | 	mov	arg01, #0
17c40     8C 18 B1 FD | 	call	#__system___getiolock_1306
17c44     1A 01 68 FC | 	wrlong	#0, result1
17c48     0C 8E 06 F1 | 	add	local02, #12
17c4c     47 95 62 FC | 	wrlong	local05, local02
17c50     0C 8E 86 F1 | 	sub	local02, #12
17c54                 | '             page->mode = i;
17c54                 | '             break;
17c54     08 00 90 FD | 	jmp	#LR__0687
17c58                 | LR__0686
17c58     01 94 06 F1 | 	add	local05, #1
17c5c     B4 FE 9F FD | 	jmp	#LR__0681
17c60                 | LR__0687
17c60     00 74 06 F6 | 	mov	arg01, #0
17c64     68 18 B1 FD | 	call	#__system___getiolock_1306
17c68     1A 75 02 F6 | 	mov	arg01, result1
17c6c     00 E0 B0 FD | 	call	#__system___lockmem
17c70     57 01 00 FF 
17c74     6C 76 06 F6 | 	mov	arg02, ##@LR__2266
17c78     00 74 06 F6 | 	mov	arg01, #0
17c7c     00 78 06 F6 | 	mov	arg03, #0
17c80     94 E5 B0 FD | 	call	#__system___basic_print_string
17c84     0C 8E 06 F1 | 	add	local02, #12
17c88     47 77 02 FB | 	rdlong	arg02, local02
17c8c     0A 9C 06 F6 | 	mov	local09, #10
17c90     00 74 06 F6 | 	mov	arg01, #0
17c94     00 78 06 F6 | 	mov	arg03, #0
17c98     0A 7A 06 F6 | 	mov	arg04, #10
17c9c     BC E5 B0 FD | 	call	#__system___basic_print_integer
17ca0     00 74 06 F6 | 	mov	arg01, #0
17ca4     0A 76 06 F6 | 	mov	arg02, #10
17ca8     00 78 06 F6 | 	mov	arg03, #0
17cac     1C E5 B0 FD | 	call	#__system___basic_print_char
17cb0     01 9E 06 F6 | 	mov	local10, #1
17cb4     00 74 06 F6 | 	mov	arg01, #0
17cb8     14 18 B1 FD | 	call	#__system___getiolock_1306
17cbc     1A 01 68 FC | 	wrlong	#0, result1
17cc0     00 A0 06 F6 | 	mov	local11, #0
17cc4                 | ' 
17cc4                 | '     switch (page->mode)
17cc4     47 A3 02 FB | 	rdlong	local12, local02
17cc8     0C 8E 86 F1 | 	sub	local02, #12
17ccc     51 A5 02 F6 | 	mov	local13, local12
17cd0     04 A4 26 F3 | 	fle	local13, #4
17cd4     30 A4 62 FD | 	jmprel	local13
17cd8                 | LR__0688
17cd8     10 00 90 FD | 	jmp	#LR__0689
17cdc     60 00 90 FD | 	jmp	#LR__0690
17ce0     70 00 90 FD | 	jmp	#LR__0691
17ce4     84 00 90 FD | 	jmp	#LR__0692
17ce8     A0 00 90 FD | 	jmp	#LR__0693
17cec                 | LR__0689
17cec     00 74 06 F6 | 	mov	arg01, #0
17cf0     DC 17 B1 FD | 	call	#__system___getiolock_1306
17cf4     1A 75 02 F6 | 	mov	arg01, result1
17cf8     74 DF B0 FD | 	call	#__system___lockmem
17cfc     57 01 00 FF 
17d00     72 76 06 F6 | 	mov	arg02, ##@LR__2267
17d04     00 74 06 F6 | 	mov	arg01, #0
17d08     00 78 06 F6 | 	mov	arg03, #0
17d0c     08 E5 B0 FD | 	call	#__system___basic_print_string
17d10     00 74 06 F6 | 	mov	arg01, #0
17d14     0A 76 06 F6 | 	mov	arg02, #10
17d18     00 78 06 F6 | 	mov	arg03, #0
17d1c     AC E4 B0 FD | 	call	#__system___basic_print_char
17d20     00 74 06 F6 | 	mov	arg01, #0
17d24     A8 17 B1 FD | 	call	#__system___getiolock_1306
17d28     1A 01 68 FC | 	wrlong	#0, result1
17d2c     88 8E 06 F1 | 	add	local02, #136
17d30     49 75 02 F6 | 	mov	arg01, local04
17d34     47 77 02 F6 | 	mov	arg02, local02
17d38     E0 03 BF FD | 	call	#_json_to_motion_quartet
17d3c                 | '         json_to_motion_quartet(filepath, &(page->quartet));
17d3c                 | '         break;
17d3c     4C 00 90 FD | 	jmp	#LR__0693
17d40                 | LR__0690
17d40     EC 8E 06 F1 | 	add	local02, #236
17d44     49 75 02 F6 | 	mov	arg01, local04
17d48     47 77 02 F6 | 	mov	arg02, local02
17d4c     2C FF BE FD | 	call	#_json_to_motion_set
17d50                 | '     {
17d50                 | '         json_to_motion_set(filepath, &(page->set));
17d50                 | '         break;
17d50     38 00 90 FD | 	jmp	#LR__0693
17d54                 | LR__0691
17d54     02 00 00 FF 
17d58     20 8F 06 F1 | 	add	local02, ##1312
17d5c     49 75 02 F6 | 	mov	arg01, local04
17d60     47 77 02 F6 | 	mov	arg02, local02
17d64     8C FA BE FD | 	call	#_json_to_motion_profile
17d68                 | '     {
17d68                 | '         json_to_motion_profile(filepath, &(page->profile));
17d68                 | '         break;
17d68     20 00 90 FD | 	jmp	#LR__0693
17d6c                 | LR__0692
17d6c     49 A7 02 F6 | 	mov	local14, local04
17d70     22 00 00 FF 
17d74     68 8E 06 F1 | 	add	local02, ##17512
17d78     47 A9 02 F6 | 	mov	local15, local02
17d7c     54 AB 02 F6 | 	mov	local16, local15
17d80     53 75 02 F6 | 	mov	arg01, local14
17d84     55 77 02 F6 | 	mov	arg02, local16
17d88     70 F7 BE FD | 	call	#_json_to_test_profile
17d8c                 | '     {
17d8c                 | '         json_to_test_profile(filepath, &(page->test));
17d8c                 | '         break;
17d8c                 | LR__0693
17d8c                 | LR__0694
17d8c     A8 F0 03 F6 | 	mov	ptra, fp
17d90     B3 00 A0 FD | 	call	#popregs_
17d94                 | _button_open_1009_ret
17d94     2D 00 64 FD | 	ret
17d98                 | 
17d98                 | _button_new_1017
17d98     10 4C 05 F6 | 	mov	COUNT_, #16
17d9c     A9 00 A0 FD | 	call	#pushregs_
17da0     3A 8D 02 F6 | 	mov	local01, arg01
17da4     3B 8F 02 F6 | 	mov	local02, arg02
17da8     47 91 02 F6 | 	mov	local03, local02
17dac     3D 00 00 FF 
17db0     50 91 06 F1 | 	add	local03, ##31568
17db4     48 75 02 F6 | 	mov	arg01, local03
17db8     3D 00 00 FF 
17dbc     4C 91 86 F1 | 	sub	local03, ##31564
17dc0     48 77 02 FB | 	rdlong	arg02, local03
17dc4     04 90 86 F1 | 	sub	local03, #4
17dc8     9C 76 BF FD | 	call	#_selection_init
17dcc     00 92 06 F6 | 	mov	local04, #0
17dd0                 | ' {
17dd0                 | '     TestProfilePage *page = (TestProfilePage *)arg;
17dd0                 | ' 
17dd0                 | '     selection_init(&(page->selection), page->display);
17dd0                 | '     for (int i = 0; i <  4 ; i++)
17dd0                 | LR__0695
17dd0     04 92 56 F2 | 	cmps	local04, #4 wc
17dd4     40 00 90 3D |  if_ae	jmp	#LR__0696
17dd8     3D 00 00 FF 
17ddc     50 91 06 F1 | 	add	local03, ##31568
17de0     48 75 02 F6 | 	mov	arg01, local03
17de4     3D 00 00 FF 
17de8     50 91 86 F1 | 	sub	local03, ##31568
17dec     49 77 02 F6 | 	mov	arg02, local04
17df0     02 76 66 F0 | 	shl	arg02, #2
17df4     15 01 00 FF 
17df8     34 D7 05 F1 | 	add	ptr__dat__, ##142132
17dfc     EB 76 02 F1 | 	add	arg02, ptr__dat__
17e00     3B 77 02 FB | 	rdlong	arg02, arg02
17e04     15 01 00 FF 
17e08     34 D7 85 F1 | 	sub	ptr__dat__, ##142132
17e0c     40 79 BF FD | 	call	#_selection_add_option
17e10     01 92 06 F1 | 	add	local04, #1
17e14     B8 FF 9F FD | 	jmp	#LR__0695
17e18                 | LR__0696
17e18     3D 00 00 FF 
17e1c     50 91 06 F1 | 	add	local03, ##31568
17e20     48 75 02 F6 | 	mov	arg01, local03
17e24     60 7A BF FD | 	call	#_selection_run
17e28     1A 95 02 F6 | 	mov	local05, result1
17e2c     3D 00 00 FF 
17e30     4C 91 86 F1 | 	sub	local03, ##31564
17e34     48 75 02 FB | 	rdlong	arg01, local03
17e38     04 90 06 F1 | 	add	local03, #4
17e3c     48 77 02 FB | 	rdlong	arg02, local03
17e40     08 90 86 F1 | 	sub	local03, #8
17e44     4C 20 BF FD | 	call	#_keyboard_create
17e48     1A 97 0A F6 | 	mov	local06, result1 wz
17e4c     44 00 90 5D |  if_ne	jmp	#LR__0697
17e50     00 74 06 F6 | 	mov	arg01, #0
17e54     78 16 B1 FD | 	call	#__system___getiolock_1306
17e58     1A 75 02 F6 | 	mov	arg01, result1
17e5c     10 DE B0 FD | 	call	#__system___lockmem
17e60     57 01 00 FF 
17e64     84 76 06 F6 | 	mov	arg02, ##@LR__2268
17e68     00 74 06 F6 | 	mov	arg01, #0
17e6c     00 78 06 F6 | 	mov	arg03, #0
17e70     A4 E3 B0 FD | 	call	#__system___basic_print_string
17e74     00 74 06 F6 | 	mov	arg01, #0
17e78     0A 76 06 F6 | 	mov	arg02, #10
17e7c     00 78 06 F6 | 	mov	arg03, #0
17e80     48 E3 B0 FD | 	call	#__system___basic_print_char
17e84     00 74 06 F6 | 	mov	arg01, #0
17e88     44 16 B1 FD | 	call	#__system___getiolock_1306
17e8c     1A 01 68 FC | 	wrlong	#0, result1
17e90                 | '         return;
17e90     9C 01 90 FD | 	jmp	#LR__0704
17e94                 | LR__0697
17e94     57 01 00 FF 
17e98     BE 76 06 F6 | 	mov	arg02, ##@LR__2269
17e9c     4B 75 02 F6 | 	mov	arg01, local06
17ea0     38 20 BF FD | 	call	#_keyboard_get_input
17ea4     1A 99 02 F6 | 	mov	local07, result1
17ea8     57 01 00 FF 
17eac     D0 76 06 F6 | 	mov	arg02, ##@LR__2270
17eb0     4C 75 02 F6 | 	mov	arg01, local07
17eb4     54 E2 BE FD | 	call	#_strcmp
17eb8     00 34 0E F2 | 	cmp	result1, #0 wz
17ebc                 | '     {
17ebc                 | '         return;
17ebc     70 01 90 AD |  if_e	jmp	#LR__0704
17ec0     04 90 06 F1 | 	add	local03, #4
17ec4     48 75 02 FB | 	rdlong	arg01, local03
17ec8     04 90 86 F1 | 	sub	local03, #4
17ecc     57 01 00 FF 
17ed0     D2 7C 06 F6 | 	mov	arg05, ##@LR__2271
17ed4     64 76 06 F6 | 	mov	arg02, #100
17ed8     64 78 06 F6 | 	mov	arg03, #100
17edc     01 7A 06 F6 | 	mov	arg04, #1
17ee0     70 66 BF FD | 	call	#_explorer_create
17ee4     1A 9B 0A F6 | 	mov	local08, result1 wz
17ee8     44 00 90 5D |  if_ne	jmp	#LR__0698
17eec     00 74 06 F6 | 	mov	arg01, #0
17ef0     DC 15 B1 FD | 	call	#__system___getiolock_1306
17ef4     1A 75 02 F6 | 	mov	arg01, result1
17ef8     74 DD B0 FD | 	call	#__system___lockmem
17efc     57 01 00 FF 
17f00     D6 76 06 F6 | 	mov	arg02, ##@LR__2272
17f04     00 74 06 F6 | 	mov	arg01, #0
17f08     00 78 06 F6 | 	mov	arg03, #0
17f0c     08 E3 B0 FD | 	call	#__system___basic_print_string
17f10     00 74 06 F6 | 	mov	arg01, #0
17f14     0A 76 06 F6 | 	mov	arg02, #10
17f18     00 78 06 F6 | 	mov	arg03, #0
17f1c     AC E2 B0 FD | 	call	#__system___basic_print_char
17f20     00 74 06 F6 | 	mov	arg01, #0
17f24     A8 15 B1 FD | 	call	#__system___getiolock_1306
17f28     1A 01 68 FC | 	wrlong	#0, result1
17f2c                 | '         return;
17f2c     00 01 90 FD | 	jmp	#LR__0704
17f30                 | LR__0698
17f30     4D 75 02 F6 | 	mov	arg01, local08
17f34     98 66 BF FD | 	call	#_explorer_run
17f38     1A 9D 02 F6 | 	mov	local09, result1
17f3c     57 01 00 FF 
17f40     07 77 06 F6 | 	mov	arg02, ##@LR__2273
17f44     4E 75 02 F6 | 	mov	arg01, local09
17f48     C0 E1 BE FD | 	call	#_strcmp
17f4c     00 34 0E F2 | 	cmp	result1, #0 wz
17f50                 | '     {
17f50                 | '         return;
17f50     DC 00 90 AD |  if_e	jmp	#LR__0704
17f54     0C 90 06 F1 | 	add	local03, #12
17f58     48 95 62 FC | 	wrlong	local05, local03
17f5c                 | '     }
17f5c                 | ' 
17f5c                 | '     page->mode = newmode;
17f5c                 | '     switch (page->mode)
17f5c     4A 9F 02 F6 | 	mov	local10, local05
17f60     0C 90 86 F1 | 	sub	local03, #12
17f64     4F A1 02 F6 | 	mov	local11, local10
17f68     03 A0 26 F3 | 	fle	local11, #3
17f6c     30 A0 62 FD | 	jmprel	local11
17f70                 | LR__0699
17f70     0C 00 90 FD | 	jmp	#LR__0700
17f74     3C 00 90 FD | 	jmp	#LR__0701
17f78     6C 00 90 FD | 	jmp	#LR__0702
17f7c     B0 00 90 FD | 	jmp	#LR__0703
17f80                 | LR__0700
17f80     88 90 06 F1 | 	add	local03, #136
17f84     48 75 02 F6 | 	mov	arg01, local03
17f88     C0 E4 BE FD | 	call	#_motion_quartet_init
17f8c     15 01 00 FF 
17f90     44 D7 05 F1 | 	add	ptr__dat__, ##142148
17f94     EB 7A 02 FB | 	rdlong	arg04, ptr__dat__
17f98     15 01 00 FF 
17f9c     44 D7 85 F1 | 	sub	ptr__dat__, ##142148
17fa0     48 75 02 F6 | 	mov	arg01, local03
17fa4     4E 77 02 F6 | 	mov	arg02, local09
17fa8     4C 79 02 F6 | 	mov	arg03, local07
17fac     C0 FA BF FD | 	call	#_create_filepath_1003
17fb0                 | '     {
17fb0                 | '         motion_quartet_init(&(page->quartet));
17fb0                 | '         create_filepath(page->quartet.name, newpath, filename, extension[ 0 ]);
17fb0                 | '         break;
17fb0     7C 00 90 FD | 	jmp	#LR__0703
17fb4                 | LR__0701
17fb4     EC 90 06 F1 | 	add	local03, #236
17fb8     48 75 02 F6 | 	mov	arg01, local03
17fbc     FC E4 BE FD | 	call	#_motion_set_init
17fc0     15 01 00 FF 
17fc4     48 D7 05 F1 | 	add	ptr__dat__, ##142152
17fc8     EB 7A 02 FB | 	rdlong	arg04, ptr__dat__
17fcc     15 01 00 FF 
17fd0     48 D7 85 F1 | 	sub	ptr__dat__, ##142152
17fd4     48 75 02 F6 | 	mov	arg01, local03
17fd8     4E 77 02 F6 | 	mov	arg02, local09
17fdc     4C 79 02 F6 | 	mov	arg03, local07
17fe0     8C FA BF FD | 	call	#_create_filepath_1003
17fe4                 | '     {
17fe4                 | '         motion_set_init(&(page->set));
17fe4                 | '         create_filepath(page->set.name, newpath, filename, extension[ 1 ]);
17fe4                 | '         break;
17fe4     48 00 90 FD | 	jmp	#LR__0703
17fe8                 | LR__0702
17fe8     02 00 00 FF 
17fec     20 91 06 F1 | 	add	local03, ##1312
17ff0     48 75 02 F6 | 	mov	arg01, local03
17ff4     48 E5 BE FD | 	call	#_motion_profile_init
17ff8     48 A3 02 F6 | 	mov	local12, local03
17ffc     4E A5 02 F6 | 	mov	local13, local09
18000     4C A7 02 F6 | 	mov	local14, local07
18004     15 01 00 FF 
18008     4C D7 05 F1 | 	add	ptr__dat__, ##142156
1800c     EB A8 02 FB | 	rdlong	local15, ptr__dat__
18010     15 01 00 FF 
18014     4C D7 85 F1 | 	sub	ptr__dat__, ##142156
18018     54 AB 02 F6 | 	mov	local16, local15
1801c     51 75 02 F6 | 	mov	arg01, local12
18020     52 77 02 F6 | 	mov	arg02, local13
18024     53 79 02 F6 | 	mov	arg03, local14
18028     55 7B 02 F6 | 	mov	arg04, local16
1802c     40 FA BF FD | 	call	#_create_filepath_1003
18030                 | '     {
18030                 | '         motion_profile_init(&(page->profile));
18030                 | '         create_filepath(page->profile.name, newpath, filename, extension[ 2 ]);
18030                 | '         break;
18030                 | LR__0703
18030                 | LR__0704
18030     A8 F0 03 F6 | 	mov	ptra, fp
18034     B3 00 A0 FD | 	call	#popregs_
18038                 | _button_new_1017_ret
18038     2D 00 64 FD | 	ret
1803c                 | 
1803c                 | _button_save_1032
1803c     02 4C 05 F6 | 	mov	COUNT_, #2
18040     A9 00 A0 FD | 	call	#pushregs_
18044     3B 8D 02 F6 | 	mov	local01, arg02
18048                 | ' {
18048                 | '     TestProfilePage *page = (TestProfilePage *)arg;
18048                 | '     switch (page->mode)
18048     0C 8C 06 F1 | 	add	local01, #12
1804c     46 8F 02 FB | 	rdlong	local02, local01
18050     0C 8C 86 F1 | 	sub	local01, #12
18054     04 8E 26 F3 | 	fle	local02, #4
18058     30 8E 62 FD | 	jmprel	local02
1805c                 | LR__0705
1805c     10 00 90 FD | 	jmp	#LR__0706
18060     60 00 90 FD | 	jmp	#LR__0707
18064     B0 00 90 FD | 	jmp	#LR__0708
18068     04 01 90 FD | 	jmp	#LR__0709
1806c     54 01 90 FD | 	jmp	#LR__0710
18070                 | LR__0706
18070     00 74 06 F6 | 	mov	arg01, #0
18074     58 14 B1 FD | 	call	#__system___getiolock_1306
18078     1A 75 02 F6 | 	mov	arg01, result1
1807c     F0 DB B0 FD | 	call	#__system___lockmem
18080     57 01 00 FF 
18084     09 77 06 F6 | 	mov	arg02, ##@LR__2274
18088     00 74 06 F6 | 	mov	arg01, #0
1808c     00 78 06 F6 | 	mov	arg03, #0
18090     84 E1 B0 FD | 	call	#__system___basic_print_string
18094     00 74 06 F6 | 	mov	arg01, #0
18098     0A 76 06 F6 | 	mov	arg02, #10
1809c     00 78 06 F6 | 	mov	arg03, #0
180a0     28 E1 B0 FD | 	call	#__system___basic_print_char
180a4     00 74 06 F6 | 	mov	arg01, #0
180a8     24 14 B1 FD | 	call	#__system___getiolock_1306
180ac     1A 01 68 FC | 	wrlong	#0, result1
180b0     88 8C 06 F1 | 	add	local01, #136
180b4     46 75 02 F6 | 	mov	arg01, local01
180b8     46 77 02 F6 | 	mov	arg02, local01
180bc     B8 EB BE FD | 	call	#_motion_quartet_to_json
180c0                 | '         motion_quartet_to_json(&(page->quartet), page->quartet.name);
180c0                 | '         break;
180c0     00 01 90 FD | 	jmp	#LR__0710
180c4                 | LR__0707
180c4     00 74 06 F6 | 	mov	arg01, #0
180c8     04 14 B1 FD | 	call	#__system___getiolock_1306
180cc     1A 75 02 F6 | 	mov	arg01, result1
180d0     9C DB B0 FD | 	call	#__system___lockmem
180d4     57 01 00 FF 
180d8     18 77 06 F6 | 	mov	arg02, ##@LR__2275
180dc     00 74 06 F6 | 	mov	arg01, #0
180e0     00 78 06 F6 | 	mov	arg03, #0
180e4     30 E1 B0 FD | 	call	#__system___basic_print_string
180e8     00 74 06 F6 | 	mov	arg01, #0
180ec     0A 76 06 F6 | 	mov	arg02, #10
180f0     00 78 06 F6 | 	mov	arg03, #0
180f4     D4 E0 B0 FD | 	call	#__system___basic_print_char
180f8     00 74 06 F6 | 	mov	arg01, #0
180fc     D0 13 B1 FD | 	call	#__system___getiolock_1306
18100     1A 01 68 FC | 	wrlong	#0, result1
18104     EC 8C 06 F1 | 	add	local01, #236
18108     46 75 02 F6 | 	mov	arg01, local01
1810c     46 77 02 F6 | 	mov	arg02, local01
18110     8C E9 BE FD | 	call	#_motion_set_to_json
18114                 | '         motion_set_to_json(&(page->set), page->set.name);
18114                 | '         break;
18114     AC 00 90 FD | 	jmp	#LR__0710
18118                 | LR__0708
18118     00 74 06 F6 | 	mov	arg01, #0
1811c     B0 13 B1 FD | 	call	#__system___getiolock_1306
18120     1A 75 02 F6 | 	mov	arg01, result1
18124     48 DB B0 FD | 	call	#__system___lockmem
18128     57 01 00 FF 
1812c     23 77 06 F6 | 	mov	arg02, ##@LR__2276
18130     00 74 06 F6 | 	mov	arg01, #0
18134     00 78 06 F6 | 	mov	arg03, #0
18138     DC E0 B0 FD | 	call	#__system___basic_print_string
1813c     00 74 06 F6 | 	mov	arg01, #0
18140     0A 76 06 F6 | 	mov	arg02, #10
18144     00 78 06 F6 | 	mov	arg03, #0
18148     80 E0 B0 FD | 	call	#__system___basic_print_char
1814c     00 74 06 F6 | 	mov	arg01, #0
18150     7C 13 B1 FD | 	call	#__system___getiolock_1306
18154     1A 01 68 FC | 	wrlong	#0, result1
18158     02 00 00 FF 
1815c     20 8D 06 F1 | 	add	local01, ##1312
18160     46 75 02 F6 | 	mov	arg01, local01
18164     46 77 02 F6 | 	mov	arg02, local01
18168     4C E7 BE FD | 	call	#_motion_profile_to_json
1816c                 | '         motion_profile_to_json(&(page->profile), page->profile.name);
1816c                 | '         break;
1816c     54 00 90 FD | 	jmp	#LR__0710
18170                 | LR__0709
18170     00 74 06 F6 | 	mov	arg01, #0
18174     58 13 B1 FD | 	call	#__system___getiolock_1306
18178     1A 75 02 F6 | 	mov	arg01, result1
1817c     F0 DA B0 FD | 	call	#__system___lockmem
18180     57 01 00 FF 
18184     31 77 06 F6 | 	mov	arg02, ##@LR__2277
18188     00 74 06 F6 | 	mov	arg01, #0
1818c     00 78 06 F6 | 	mov	arg03, #0
18190     84 E0 B0 FD | 	call	#__system___basic_print_string
18194     00 74 06 F6 | 	mov	arg01, #0
18198     0A 76 06 F6 | 	mov	arg02, #10
1819c     00 78 06 F6 | 	mov	arg03, #0
181a0     28 E0 B0 FD | 	call	#__system___basic_print_char
181a4     00 74 06 F6 | 	mov	arg01, #0
181a8     24 13 B1 FD | 	call	#__system___getiolock_1306
181ac     1A 01 68 FC | 	wrlong	#0, result1
181b0     22 00 00 FF 
181b4     68 8C 06 F1 | 	add	local01, ##17512
181b8     46 75 02 F6 | 	mov	arg01, local01
181bc     46 77 02 FB | 	rdlong	arg02, local01
181c0     6C E5 BE FD | 	call	#_test_profile_to_json
181c4                 | '         test_profile_to_json(&(page->test), page->test.name);
181c4                 | '         break;
181c4                 | LR__0710
181c4     A8 F0 03 F6 | 	mov	ptra, fp
181c8     B3 00 A0 FD | 	call	#popregs_
181cc                 | _button_save_1032_ret
181cc     2D 00 64 FD | 	ret
181d0                 | 
181d0                 | _update_filename_1034
181d0     02 4C 05 F6 | 	mov	COUNT_, #2
181d4     A9 00 A0 FD | 	call	#pushregs_
181d8     3B 8D 02 F6 | 	mov	local01, arg02
181dc     2F 76 06 F6 | 	mov	arg02, #47
181e0     54 E0 BE FD | 	call	#_strrchr
181e4     01 34 06 F1 | 	add	result1, #1
181e8     1A 8F 02 F6 | 	mov	local02, result1
181ec     47 75 02 F6 | 	mov	arg01, local02
181f0     46 77 02 F6 | 	mov	arg02, local01
181f4     F0 D9 B0 FD | 	call	#__system____builtin_strcpy
181f8     47 75 02 F6 | 	mov	arg01, local02
181fc     3C 77 02 F6 | 	mov	arg02, arg03
18200     40 DE BE FD | 	call	#_strcat
18204     A8 F0 03 F6 | 	mov	ptra, fp
18208     B3 00 A0 FD | 	call	#popregs_
1820c                 | _update_filename_1034_ret
1820c     2D 00 64 FD | 	ret
18210                 | 
18210                 | _button_quartet_1041
18210     0B 4C 05 F6 | 	mov	COUNT_, #11
18214     A9 00 A0 FD | 	call	#pushregs_
18218     3A 8D 02 F6 | 	mov	local01, arg01
1821c     3B 8F 02 F6 | 	mov	local02, arg02
18220     00 74 06 F6 | 	mov	arg01, #0
18224     A8 12 B1 FD | 	call	#__system___getiolock_1306
18228     1A 75 02 F6 | 	mov	arg01, result1
1822c     40 DA B0 FD | 	call	#__system___lockmem
18230     00 90 06 F6 | 	mov	local03, #0
18234     57 01 00 FF 
18238     3D 77 06 F6 | 	mov	arg02, ##@LR__2278
1823c     00 74 06 F6 | 	mov	arg01, #0
18240     00 78 06 F6 | 	mov	arg03, #0
18244     D0 DF B0 FD | 	call	#__system___basic_print_string
18248     1A 93 02 F6 | 	mov	local04, result1
1824c     0A 94 06 F6 | 	mov	local05, #10
18250     00 74 06 F6 | 	mov	arg01, #0
18254     46 77 02 F6 | 	mov	arg02, local01
18258     00 78 06 F6 | 	mov	arg03, #0
1825c     0A 7A 06 F6 | 	mov	arg04, #10
18260     F8 DF B0 FD | 	call	#__system___basic_print_integer
18264     1A 97 02 F6 | 	mov	local06, result1
18268     00 74 06 F6 | 	mov	arg01, #0
1826c     0A 76 06 F6 | 	mov	arg02, #10
18270     00 78 06 F6 | 	mov	arg03, #0
18274     54 DF B0 FD | 	call	#__system___basic_print_char
18278     01 98 06 F6 | 	mov	local07, #1
1827c     00 74 06 F6 | 	mov	arg01, #0
18280     4C 12 B1 FD | 	call	#__system___getiolock_1306
18284     1A 01 68 FC | 	wrlong	#0, result1
18288     00 34 06 F6 | 	mov	result1, #0
1828c     00 9A 06 F6 | 	mov	local08, #0
18290     47 9D 02 F6 | 	mov	local09, local02
18294                 | '     TestProfilePage *page = (TestProfilePage *)arg;
18294                 | '     switch (id)
18294     46 9F 02 F6 | 	mov	local10, local01
18298     03 9E 26 F3 | 	fle	local10, #3
1829c     30 9E 62 FD | 	jmprel	local10
182a0                 | LR__0711
182a0     0C 00 90 FD | 	jmp	#LR__0712
182a4     74 00 90 FD | 	jmp	#LR__0713
182a8     70 01 90 FD | 	jmp	#LR__0716
182ac     A4 01 90 FD | 	jmp	#LR__0717
182b0                 | LR__0712
182b0     04 9C 06 F1 | 	add	local09, #4
182b4     4E 75 02 FB | 	rdlong	arg01, local09
182b8     04 9C 06 F1 | 	add	local09, #4
182bc     4E 77 02 FB | 	rdlong	arg02, local09
182c0     08 9C 86 F1 | 	sub	local09, #8
182c4     CC 1B BF FD | 	call	#_keyboard_create
182c8     1A 75 02 F6 | 	mov	arg01, result1
182cc     57 01 00 FF 
182d0     50 77 06 F6 | 	mov	arg02, ##@LR__2279
182d4     04 1C BF FD | 	call	#_keyboard_get_input
182d8     1A 9B 02 F6 | 	mov	local08, result1
182dc     57 01 00 FF 
182e0     62 77 06 F6 | 	mov	arg02, ##@LR__2280
182e4     4D 75 02 F6 | 	mov	arg01, local08
182e8     20 DE BE FD | 	call	#_strcmp
182ec     00 34 0E F2 | 	cmp	result1, #0 wz
182f0                 | '         {
182f0                 | '             return;
182f0     60 01 90 AD |  if_e	jmp	#LR__0719
182f4     88 9C 06 F1 | 	add	local09, #136
182f8     15 01 00 FF 
182fc     44 D7 05 F1 | 	add	ptr__dat__, ##142148
18300     EB 78 02 FB | 	rdlong	arg03, ptr__dat__
18304     15 01 00 FF 
18308     44 D7 85 F1 | 	sub	ptr__dat__, ##142148
1830c     4E 75 02 F6 | 	mov	arg01, local09
18310     4D 77 02 F6 | 	mov	arg02, local08
18314     B8 FE BF FD | 	call	#_update_filename_1034
18318                 | '         }
18318                 | ' 
18318                 | '         update_filename(page->quartet.name, filename, extension[ 0 ]);
18318                 | ' 
18318                 | '         keyboard_destroy(keyboard);
18318                 | '         break;
18318     38 01 90 FD | 	jmp	#LR__0718
1831c                 | LR__0713
1831c     3D 00 00 FF 
18320     50 9D 06 F1 | 	add	local09, ##31568
18324     4E 75 02 F6 | 	mov	arg01, local09
18328     3D 00 00 FF 
1832c     4C 9D 86 F1 | 	sub	local09, ##31564
18330     4E 77 02 FB | 	rdlong	arg02, local09
18334     04 9C 86 F1 | 	sub	local09, #4
18338     2C 71 BF FD | 	call	#_selection_init
1833c     00 A0 06 F6 | 	mov	local11, #0
18340                 | '     {
18340                 | '         selection_init(&(page->selection), page->display);
18340                 | '         for (int i = 0; i <  2 ; i++)
18340                 | LR__0714
18340     02 A0 56 F2 | 	cmps	local11, #2 wc
18344     B4 00 90 3D |  if_ae	jmp	#LR__0715
18348     3C 00 00 FF 
1834c     A0 9D 06 F1 | 	add	local09, ##31136
18350     4E 75 02 F6 | 	mov	arg01, local09
18354     50 77 02 F6 | 	mov	arg02, local11
18358     B8 76 BF FD | 	call	#_get_function_info
1835c     00 74 06 F6 | 	mov	arg01, #0
18360     6C 11 B1 FD | 	call	#__system___getiolock_1306
18364     1A 75 02 F6 | 	mov	arg01, result1
18368     04 D9 B0 FD | 	call	#__system___lockmem
1836c     57 01 00 FF 
18370     64 77 06 F6 | 	mov	arg02, ##@LR__2281
18374     00 74 06 F6 | 	mov	arg01, #0
18378     00 78 06 F6 | 	mov	arg03, #0
1837c     98 DE B0 FD | 	call	#__system___basic_print_string
18380     00 74 06 F6 | 	mov	arg01, #0
18384     50 77 02 F6 | 	mov	arg02, local11
18388     00 78 06 F6 | 	mov	arg03, #0
1838c     0A 7A 06 F6 | 	mov	arg04, #10
18390     C8 DE B0 FD | 	call	#__system___basic_print_integer
18394     57 01 00 FF 
18398     6E 77 06 F6 | 	mov	arg02, ##@LR__2282
1839c     00 74 06 F6 | 	mov	arg01, #0
183a0     00 78 06 F6 | 	mov	arg03, #0
183a4     70 DE B0 FD | 	call	#__system___basic_print_string
183a8     04 9C 06 F1 | 	add	local09, #4
183ac     4E 77 02 F6 | 	mov	arg02, local09
183b0     00 74 06 F6 | 	mov	arg01, #0
183b4     00 78 06 F6 | 	mov	arg03, #0
183b8     5C DE B0 FD | 	call	#__system___basic_print_string
183bc     00 74 06 F6 | 	mov	arg01, #0
183c0     0A 76 06 F6 | 	mov	arg02, #10
183c4     00 78 06 F6 | 	mov	arg03, #0
183c8     00 DE B0 FD | 	call	#__system___basic_print_char
183cc     00 74 06 F6 | 	mov	arg01, #0
183d0     FC 10 B1 FD | 	call	#__system___getiolock_1306
183d4     1A 01 68 FC | 	wrlong	#0, result1
183d8     AC 9D 06 F1 | 	add	local09, #428
183dc     4E 75 02 F6 | 	mov	arg01, local09
183e0     AC 9D 86 F1 | 	sub	local09, #428
183e4     4E 77 02 F6 | 	mov	arg02, local09
183e8     3C 00 00 FF 
183ec     A4 9D 86 F1 | 	sub	local09, ##31140
183f0     5C 73 BF FD | 	call	#_selection_add_option
183f4     01 A0 06 F1 | 	add	local11, #1
183f8     44 FF 9F FD | 	jmp	#LR__0714
183fc                 | LR__0715
183fc     3D 00 00 FF 
18400     50 9D 06 F1 | 	add	local09, ##31568
18404     4E 75 02 F6 | 	mov	arg01, local09
18408     7C 74 BF FD | 	call	#_selection_run
1840c     3D 00 00 FF 
18410     94 9C 86 F1 | 	sub	local09, ##31380
18414     4E 35 62 FC | 	wrlong	result1, local09
18418                 | '             selection_add_option(&(page->selection), page->info.name);
18418                 | '         }
18418                 | '         page->quartet.function = selection_run(&(page->selection));
18418                 | '         break;
18418     38 00 90 FD | 	jmp	#LR__0718
1841c                 | LR__0716
1841c     04 9C 06 F1 | 	add	local09, #4
18420     4E 75 02 FB | 	rdlong	arg01, local09
18424     04 9C 06 F1 | 	add	local09, #4
18428     4E 77 02 FB | 	rdlong	arg02, local09
1842c     64 1A BF FD | 	call	#_keyboard_create
18430     1A 75 02 F6 | 	mov	arg01, result1
18434     57 01 00 FF 
18438     75 77 06 F6 | 	mov	arg02, ##@LR__2283
1843c     9C 1A BF FD | 	call	#_keyboard_get_input
18440     1A 75 02 F6 | 	mov	arg01, result1
18444     88 96 BF FD | 	call	#_atof
18448     E0 9C 06 F1 | 	add	local09, #224
1844c     4E 35 62 FC | 	wrlong	result1, local09
18450                 | '         page->quartet.dwell = atof(dwell);
18450                 | '         keyboard_destroy(keyboard);
18450                 | '         break;
18450     00 00 90 FD | 	jmp	#LR__0718
18454                 | LR__0717
18454                 | '         break;
18454                 | LR__0718
18454                 | LR__0719
18454     A8 F0 03 F6 | 	mov	ptra, fp
18458     B3 00 A0 FD | 	call	#popregs_
1845c                 | _button_quartet_1041_ret
1845c     2D 00 64 FD | 	ret
18460                 | 
18460                 | _button_quartet_parameters_1046
18460     02 4C 05 F6 | 	mov	COUNT_, #2
18464     A9 00 A0 FD | 	call	#pushregs_
18468     34 F0 07 F1 | 	add	ptra, #52
1846c     A8 74 62 FC | 	wrlong	arg01, fp
18470     04 50 05 F1 | 	add	fp, #4
18474     A8 76 62 FC | 	wrlong	arg02, fp
18478     04 50 05 F1 | 	add	fp, #4
1847c     A8 76 62 FC | 	wrlong	arg02, fp
18480     3C 00 00 FF 
18484     A0 77 06 F1 | 	add	arg02, ##31136
18488     A8 74 02 FB | 	rdlong	arg01, fp
1848c     08 50 85 F1 | 	sub	fp, #8
18490     BC 74 06 F1 | 	add	arg01, #188
18494     3A 8D 02 FB | 	rdlong	local01, arg01
18498     3B 75 02 F6 | 	mov	arg01, arg02
1849c     46 77 02 F6 | 	mov	arg02, local01
184a0     70 75 BF FD | 	call	#_get_function_info
184a4     08 50 05 F1 | 	add	fp, #8
184a8     A8 76 02 FB | 	rdlong	arg02, fp
184ac     3B 8D 02 F6 | 	mov	local01, arg02
184b0     04 8C 06 F1 | 	add	local01, #4
184b4     46 75 02 FB | 	rdlong	arg01, local01
184b8     08 50 85 F1 | 	sub	fp, #8
184bc     08 76 06 F1 | 	add	arg02, #8
184c0     3B 77 02 FB | 	rdlong	arg02, arg02
184c4     CC 19 BF FD | 	call	#_keyboard_create
184c8     0C 50 05 F1 | 	add	fp, #12
184cc     A8 34 62 FC | 	wrlong	result1, fp
184d0     04 50 05 F1 | 	add	fp, #4
184d4     A8 74 02 F6 | 	mov	arg01, fp
184d8     08 50 85 F1 | 	sub	fp, #8
184dc     A8 8C 02 FB | 	rdlong	local01, fp
184e0     08 50 85 F1 | 	sub	fp, #8
184e4     A8 8E 02 FB | 	rdlong	local02, fp
184e8     47 77 02 F6 | 	mov	arg02, local02
184ec     02 76 66 F0 | 	shl	arg02, #2
184f0     47 77 02 F1 | 	add	arg02, local02
184f4     02 76 66 F0 | 	shl	arg02, #2
184f8     3C 00 00 FF 
184fc     C0 8D 06 F1 | 	add	local01, ##31168
18500     46 77 02 F1 | 	add	arg02, local01
18504     E0 D6 B0 FD | 	call	#__system____builtin_strcpy
18508     10 50 05 F1 | 	add	fp, #16
1850c     A8 74 02 F6 | 	mov	arg01, fp
18510     10 50 85 F1 | 	sub	fp, #16
18514     57 01 00 FF 
18518     7D 77 06 F6 | 	mov	arg02, ##@LR__2284
1851c     24 DB BE FD | 	call	#_strcat
18520     0C 50 05 F1 | 	add	fp, #12
18524     A8 74 02 FB | 	rdlong	arg01, fp
18528     04 50 05 F1 | 	add	fp, #4
1852c     A8 76 02 F6 | 	mov	arg02, fp
18530     10 50 85 F1 | 	sub	fp, #16
18534     A4 19 BF FD | 	call	#_keyboard_get_input
18538     30 50 05 F1 | 	add	fp, #48
1853c     A8 34 62 FC | 	wrlong	result1, fp
18540     28 50 85 F1 | 	sub	fp, #40
18544     A8 8E 02 FB | 	rdlong	local02, fp
18548     08 50 85 F1 | 	sub	fp, #8
1854c     A8 8C 02 FB | 	rdlong	local01, fp
18550     02 8C 66 F0 | 	shl	local01, #2
18554     C0 8E 06 F1 | 	add	local02, #192
18558     47 8D 02 F1 | 	add	local01, local02
1855c     1A 75 02 F6 | 	mov	arg01, result1
18560     6C 95 BF FD | 	call	#_atof
18564     46 35 62 FC | 	wrlong	result1, local01
18568     0C 50 05 F1 | 	add	fp, #12
1856c     0C 50 85 F1 | 	sub	fp, #12
18570     A8 F0 03 F6 | 	mov	ptra, fp
18574     B3 00 A0 FD | 	call	#popregs_
18578                 | _button_quartet_parameters_1046_ret
18578     2D 00 64 FD | 	ret
1857c                 | 
1857c                 | _button_set_1056
1857c     09 4C 05 F6 | 	mov	COUNT_, #9
18580     A9 00 A0 FD | 	call	#pushregs_
18584     3A 8D 02 F6 | 	mov	local01, arg01
18588     3B 8F 02 F6 | 	mov	local02, arg02
1858c     47 91 02 F6 | 	mov	local03, local02
18590                 | ' {
18590                 | '     TestProfilePage *page = (TestProfilePage *)arg;
18590                 | '     switch (id)
18590     46 93 02 F6 | 	mov	local04, local01
18594     04 92 26 F3 | 	fle	local04, #4
18598     30 92 62 FD | 	jmprel	local04
1859c                 | LR__0720
1859c     10 00 90 FD | 	jmp	#LR__0721
185a0     78 00 90 FD | 	jmp	#LR__0722
185a4     AC 00 90 FD | 	jmp	#LR__0723
185a8     04 01 90 FD | 	jmp	#LR__0724
185ac     48 01 90 FD | 	jmp	#LR__0725
185b0                 | LR__0721
185b0     04 90 06 F1 | 	add	local03, #4
185b4     48 75 02 FB | 	rdlong	arg01, local03
185b8     04 90 06 F1 | 	add	local03, #4
185bc     48 77 02 FB | 	rdlong	arg02, local03
185c0     08 90 86 F1 | 	sub	local03, #8
185c4     CC 18 BF FD | 	call	#_keyboard_create
185c8     1A 75 02 F6 | 	mov	arg01, result1
185cc     57 01 00 FF 
185d0     80 77 06 F6 | 	mov	arg02, ##@LR__2285
185d4     04 19 BF FD | 	call	#_keyboard_get_input
185d8     1A 93 02 F6 | 	mov	local04, result1
185dc     57 01 00 FF 
185e0     92 77 06 F6 | 	mov	arg02, ##@LR__2286
185e4     49 75 02 F6 | 	mov	arg01, local04
185e8     20 DB BE FD | 	call	#_strcmp
185ec     00 34 0E F2 | 	cmp	result1, #0 wz
185f0                 | '         {
185f0                 | '             return;
185f0     04 01 90 AD |  if_e	jmp	#LR__0726
185f4     EC 90 06 F1 | 	add	local03, #236
185f8     15 01 00 FF 
185fc     48 D7 05 F1 | 	add	ptr__dat__, ##142152
18600     EB 78 02 FB | 	rdlong	arg03, ptr__dat__
18604     15 01 00 FF 
18608     48 D7 85 F1 | 	sub	ptr__dat__, ##142152
1860c     48 75 02 F6 | 	mov	arg01, local03
18610     49 77 02 F6 | 	mov	arg02, local04
18614     B8 FB BF FD | 	call	#_update_filename_1034
18618                 | '         }
18618                 | ' 
18618                 | '         update_filename(page->set.name, filename, extension[ 1 ]);
18618                 | '         break;
18618     DC 00 90 FD | 	jmp	#LR__0725
1861c                 | LR__0722
1861c     04 90 06 F1 | 	add	local03, #4
18620     48 75 02 FB | 	rdlong	arg01, local03
18624     04 90 06 F1 | 	add	local03, #4
18628     48 77 02 FB | 	rdlong	arg02, local03
1862c     64 18 BF FD | 	call	#_keyboard_create
18630     1A 75 02 F6 | 	mov	arg01, result1
18634     57 01 00 FF 
18638     94 77 06 F6 | 	mov	arg02, ##@LR__2287
1863c     9C 18 BF FD | 	call	#_keyboard_get_input
18640     1A 75 02 F6 | 	mov	arg01, result1
18644                 | ' {
18644                 | '   return (int)atol(str);
18644     2C 9C BE FD | 	call	#_atol
18648     18 91 06 F1 | 	add	local03, #280
1864c     48 35 62 FC | 	wrlong	result1, local03
18650                 | '         page->set.number = atoi(number);
18650                 | '         break;
18650     A4 00 90 FD | 	jmp	#LR__0725
18654                 | LR__0723
18654     04 90 06 F1 | 	add	local03, #4
18658     48 75 02 FB | 	rdlong	arg01, local03
1865c     04 90 06 F1 | 	add	local03, #4
18660     48 77 02 FB | 	rdlong	arg02, local03
18664     08 90 86 F1 | 	sub	local03, #8
18668     28 18 BF FD | 	call	#_keyboard_create
1866c     1A 75 02 F6 | 	mov	arg01, result1
18670     57 01 00 FF 
18674     9D 77 06 F6 | 	mov	arg02, ##@LR__2288
18678     60 18 BF FD | 	call	#_keyboard_get_input
1867c     1A 79 02 F6 | 	mov	arg03, result1
18680     57 01 00 FF 
18684     AF 77 06 F6 | 	mov	arg02, ##@LR__2289
18688     3C 75 02 F6 | 	mov	arg01, arg03
1868c     7C DA BE FD | 	call	#_strcmp
18690     00 34 0E F2 | 	cmp	result1, #0 wz
18694                 | '         {
18694                 | '             return;
18694     60 00 90 AD |  if_e	jmp	#LR__0726
18698     24 91 06 F1 | 	add	local03, #292
1869c     48 75 02 F6 | 	mov	arg01, local03
186a0     3C 77 02 F6 | 	mov	arg02, arg03
186a4     0A 78 06 F6 | 	mov	arg03, #10
186a8     40 D9 BE FD | 	call	#_strncpy
186ac                 | '         }
186ac                 | '         strncpy(page->set.type, type,  10 );
186ac                 | '         break;
186ac     48 00 90 FD | 	jmp	#LR__0725
186b0                 | LR__0724
186b0     04 90 06 F1 | 	add	local03, #4
186b4     48 75 02 FB | 	rdlong	arg01, local03
186b8     04 90 06 F1 | 	add	local03, #4
186bc     48 77 02 FB | 	rdlong	arg02, local03
186c0     D0 17 BF FD | 	call	#_keyboard_create
186c4     1A 95 02 F6 | 	mov	local05, result1
186c8     57 01 00 FF 
186cc     B1 97 06 F6 | 	mov	local06, ##@LR__2290
186d0     4B 99 02 F6 | 	mov	local07, local06
186d4     4A 75 02 F6 | 	mov	arg01, local05
186d8     4C 77 02 F6 | 	mov	arg02, local07
186dc     FC 17 BF FD | 	call	#_keyboard_get_input
186e0     1A 9B 02 F6 | 	mov	local08, result1
186e4     4D 75 02 F6 | 	mov	arg01, local08
186e8                 | ' {
186e8                 | '   return (int)atol(str);
186e8     88 9B BE FD | 	call	#_atol
186ec     1A 9D 02 F6 | 	mov	local09, result1
186f0     28 91 06 F1 | 	add	local03, #296
186f4     48 9D 62 FC | 	wrlong	local09, local03
186f8                 | '         page->set.executions = atoi(executions);
186f8                 | '         break;
186f8                 | LR__0725
186f8                 | LR__0726
186f8     A8 F0 03 F6 | 	mov	ptra, fp
186fc     B3 00 A0 FD | 	call	#popregs_
18700                 | _button_set_1056_ret
18700     2D 00 64 FD | 	ret
18704                 | 
18704                 | _button_set_add
18704     02 4C 05 F6 | 	mov	COUNT_, #2
18708     A9 00 A0 FD | 	call	#pushregs_
1870c     3B 8D 02 F6 | 	mov	local01, arg02
18710     04 8C 06 F1 | 	add	local01, #4
18714     46 75 02 FB | 	rdlong	arg01, local01
18718     04 8C 86 F1 | 	sub	local01, #4
1871c     57 01 00 FF 
18720     BE 7D 06 F6 | 	mov	arg05, ##@LR__2291
18724     64 76 06 F6 | 	mov	arg02, #100
18728     64 78 06 F6 | 	mov	arg03, #100
1872c     00 7A 06 F6 | 	mov	arg04, #0
18730     20 5E BF FD | 	call	#_explorer_create
18734     1A 75 02 F6 | 	mov	arg01, result1
18738     94 5E BF FD | 	call	#_explorer_run
1873c     1A 8F 02 F6 | 	mov	local02, result1
18740     57 01 00 FF 
18744     C2 77 06 F6 | 	mov	arg02, ##@LR__2292
18748     47 75 02 F6 | 	mov	arg01, local02
1874c     BC D9 BE FD | 	call	#_strcmp
18750     00 34 0E F2 | 	cmp	result1, #0 wz
18754                 | '     {
18754                 | '         return;
18754     30 00 90 AD |  if_e	jmp	#LR__0727
18758     34 8D 06 F1 | 	add	local01, #308
1875c     46 35 02 FB | 	rdlong	result1, local01
18760     64 34 06 FD | 	qmul	result1, #100
18764     04 8C 06 F1 | 	add	local01, #4
18768     47 75 02 F6 | 	mov	arg01, local02
1876c     18 76 62 FD | 	getqx	arg02
18770     46 77 02 F1 | 	add	arg02, local01
18774     A4 F9 BE FD | 	call	#_json_to_motion_quartet
18778     04 8C 86 F1 | 	sub	local01, #4
1877c     46 8F 02 FB | 	rdlong	local02, local01
18780     01 8E 06 F1 | 	add	local02, #1
18784     46 8F 62 FC | 	wrlong	local02, local01
18788                 | LR__0727
18788     A8 F0 03 F6 | 	mov	ptra, fp
1878c     B3 00 A0 FD | 	call	#popregs_
18790                 | _button_set_add_ret
18790     2D 00 64 FD | 	ret
18794                 | 
18794                 | _button_set_remove
18794     02 4C 05 F6 | 	mov	COUNT_, #2
18798     A9 00 A0 FD | 	call	#pushregs_
1879c     64 74 06 FD | 	qmul	arg01, #100
187a0     3B 8D 02 F6 | 	mov	local01, arg02
187a4     3A 79 02 F6 | 	mov	arg03, arg01
187a8     01 78 06 F1 | 	add	arg03, #1
187ac     18 8E 62 FD | 	getqx	local02
187b0     64 78 06 FD | 	qmul	arg03, #100
187b4     38 8D 06 F1 | 	add	local01, #312
187b8     46 8F 02 F1 | 	add	local02, local01
187bc     18 76 62 FD | 	getqx	arg02
187c0     46 77 02 F1 | 	add	arg02, local01
187c4     04 8C 86 F1 | 	sub	local01, #4
187c8     46 79 02 FB | 	rdlong	arg03, local01
187cc     3A 79 82 F1 | 	sub	arg03, arg01
187d0     01 78 86 F1 | 	sub	arg03, #1
187d4     64 78 06 FD | 	qmul	arg03, #100
187d8     47 75 02 F6 | 	mov	arg01, local02
187dc     18 78 62 FD | 	getqx	arg03
187e0     74 D3 B0 FD | 	call	#__system____builtin_memmove
187e4     46 8F 02 FB | 	rdlong	local02, local01
187e8     01 8E 86 F1 | 	sub	local02, #1
187ec     46 8F 62 FC | 	wrlong	local02, local01
187f0     A8 F0 03 F6 | 	mov	ptra, fp
187f4     B3 00 A0 FD | 	call	#popregs_
187f8                 | _button_set_remove_ret
187f8     2D 00 64 FD | 	ret
187fc                 | 
187fc                 | _BSP_W25Qx_Reset_1137
187fc     00 4C 05 F6 | 	mov	COUNT_, #0
18800     A9 00 A0 FD | 	call	#pushregs_
18804     04 F0 07 F1 | 	add	ptra, #4
18808     A8 CC 48 FC | 	wrbyte	#102, fp
1880c     01 50 05 F1 | 	add	fp, #1
18810     A8 32 49 FC | 	wrbyte	#153, fp
18814     01 50 85 F1 | 	sub	fp, #1
18818     58 52 64 FD | 	drvl	#41
1881c     A8 76 02 F6 | 	mov	arg02, fp
18820     00 74 06 F6 | 	mov	arg01, #0
18824     02 78 06 F6 | 	mov	arg03, #2
18828     01 00 00 FF 
1882c     E8 7B 06 F6 | 	mov	arg04, ##1000
18830     E0 00 B0 FD | 	call	#_HAL_SPI_Transmit_1142
18834     59 52 64 FD | 	drvh	#41
18838     A8 F0 03 F6 | 	mov	ptra, fp
1883c     B3 00 A0 FD | 	call	#popregs_
18840                 | _BSP_W25Qx_Reset_1137_ret
18840     2D 00 64 FD | 	ret
18844                 | 
18844                 | _BSP_W25Qx_GetStatus_1138
18844     00 4C 05 F6 | 	mov	COUNT_, #0
18848     A9 00 A0 FD | 	call	#pushregs_
1884c     0C F0 07 F1 | 	add	ptra, #12
18850     04 50 05 F1 | 	add	fp, #4
18854     A8 0A 48 FC | 	wrbyte	#5, fp
18858     58 52 64 FD | 	drvl	#41
1885c     A8 76 02 F6 | 	mov	arg02, fp
18860     04 50 85 F1 | 	sub	fp, #4
18864     00 74 06 F6 | 	mov	arg01, #0
18868     01 78 06 F6 | 	mov	arg03, #1
1886c     01 00 00 FF 
18870     E8 7B 06 F6 | 	mov	arg04, ##1000
18874     9C 00 B0 FD | 	call	#_HAL_SPI_Transmit_1142
18878     08 50 05 F1 | 	add	fp, #8
1887c     A8 76 02 F6 | 	mov	arg02, fp
18880     08 50 85 F1 | 	sub	fp, #8
18884     00 74 06 F6 | 	mov	arg01, #0
18888     01 78 06 F6 | 	mov	arg03, #1
1888c     01 00 00 FF 
18890     E8 7B 06 F6 | 	mov	arg04, ##1000
18894     28 00 B0 FD | 	call	#_HAL_SPI_Receive_1140
18898     59 52 64 FD | 	drvh	#41
1889c     08 50 05 F1 | 	add	fp, #8
188a0     A8 7A C2 FA | 	rdbyte	arg04, fp
188a4     08 50 85 F1 | 	sub	fp, #8
188a8     01 7A CE F7 | 	test	arg04, #1 wz
188ac                 | '   {
188ac                 | '     return  ((uint8_t)0x02) ;
188ac     02 34 06 56 |  if_ne	mov	result1, #2
188b0                 | ' 	{
188b0                 | ' 		return  ((uint8_t)0x00) ;
188b0     00 34 06 A6 |  if_e	mov	result1, #0
188b4     A8 F0 03 F6 | 	mov	ptra, fp
188b8     B3 00 A0 FD | 	call	#popregs_
188bc                 | _BSP_W25Qx_GetStatus_1138_ret
188bc     2D 00 64 FD | 	ret
188c0                 | 
188c0                 | _HAL_SPI_Receive_1140
188c0     04 4C 05 F6 | 	mov	COUNT_, #4
188c4     A9 00 A0 FD | 	call	#pushregs_
188c8     3B 8D 02 F6 | 	mov	local01, arg02
188cc     3C 8F 02 F6 | 	mov	local02, arg03
188d0     00 90 06 F6 | 	mov	local03, #0
188d4                 | ' {
188d4                 | ' 	for (int i=0;i<size;i++)
188d4                 | LR__0728
188d4     47 35 32 F9 | 	getword	result1, local02, #0
188d8     1A 91 52 F2 | 	cmps	local03, result1 wc
188dc     28 00 90 3D |  if_ae	jmp	#LR__0729
188e0     48 93 02 F6 | 	mov	local04, local03
188e4     46 93 02 F1 | 	add	local04, local01
188e8     2A 74 06 F6 | 	mov	arg01, #42
188ec     28 76 06 F6 | 	mov	arg02, #40
188f0     00 78 06 F6 | 	mov	arg03, #0
188f4     08 7A 06 F6 | 	mov	arg04, #8
188f8     0C 80 BE FD | 	call	#_shift_in
188fc     49 35 42 FC | 	wrbyte	result1, local04
18900     01 90 06 F1 | 	add	local03, #1
18904     CC FF 9F FD | 	jmp	#LR__0728
18908                 | LR__0729
18908     A8 F0 03 F6 | 	mov	ptra, fp
1890c     B3 00 A0 FD | 	call	#popregs_
18910                 | _HAL_SPI_Receive_1140_ret
18910     2D 00 64 FD | 	ret
18914                 | 
18914                 | _HAL_SPI_Transmit_1142
18914     03 4C 05 F6 | 	mov	COUNT_, #3
18918     A9 00 A0 FD | 	call	#pushregs_
1891c     3B 8D 02 F6 | 	mov	local01, arg02
18920     3C 8F 02 F6 | 	mov	local02, arg03
18924     00 90 06 F6 | 	mov	local03, #0
18928                 | ' {
18928                 | ' 	for (int i=0;i<size;i++)
18928                 | LR__0730
18928     47 7B 32 F9 | 	getword	arg04, local02, #0
1892c     3D 91 52 F2 | 	cmps	local03, arg04 wc
18930     28 00 90 3D |  if_ae	jmp	#LR__0731
18934     48 7B 02 F6 | 	mov	arg04, local03
18938     46 7B 02 F1 | 	add	arg04, local01
1893c     3D 7D C2 FA | 	rdbyte	arg05, arg04
18940     27 74 06 F6 | 	mov	arg01, #39
18944     28 76 06 F6 | 	mov	arg02, #40
18948     01 78 06 F6 | 	mov	arg03, #1
1894c     08 7A 06 F6 | 	mov	arg04, #8
18950     B0 80 BE FD | 	call	#_shift_out
18954     01 90 06 F1 | 	add	local03, #1
18958     CC FF 9F FD | 	jmp	#LR__0730
1895c                 | LR__0731
1895c     A8 F0 03 F6 | 	mov	ptra, fp
18960     B3 00 A0 FD | 	call	#popregs_
18964                 | _HAL_SPI_Transmit_1142_ret
18964     2D 00 64 FD | 	ret
18968                 | 
18968                 | _parseint_1165
18968     3A 3B 02 F6 | 	mov	_var01, arg01
1896c     3B 3D 02 F6 | 	mov	_var02, arg02
18970     1D 3F 02 FB | 	rdlong	_var03, _var01
18974     00 40 06 F6 | 	mov	_var04, #0
18978     1F 43 C2 FA | 	rdbyte	_var05, _var03
1897c     2A 42 0E F2 | 	cmp	_var05, #42 wz
18980     18 00 90 5D |  if_ne	jmp	#LR__0732
18984     1E 43 02 FB | 	rdlong	_var05, _var02
18988     21 41 02 FB | 	rdlong	_var04, _var05
1898c     04 42 06 F1 | 	add	_var05, #4
18990     1E 43 62 FC | 	wrlong	_var05, _var02
18994     01 3E 06 F1 | 	add	_var03, #1
18998     38 00 90 FD | 	jmp	#LR__0735
1899c                 | LR__0732
1899c                 | '         while ( (c>='0') && (c<='9') ) {
1899c                 | LR__0733
1899c     30 42 56 F2 | 	cmps	_var05, #48 wc
189a0     30 00 90 CD |  if_b	jmp	#LR__0734
189a4     3A 42 56 F2 | 	cmps	_var05, #58 wc
189a8     28 00 90 3D |  if_ae	jmp	#LR__0734
189ac     20 45 02 F6 | 	mov	_var06, _var04
189b0     02 44 66 F0 | 	shl	_var06, #2
189b4     20 45 02 F1 | 	add	_var06, _var04
189b8     01 44 66 F0 | 	shl	_var06, #1
189bc     30 42 86 F1 | 	sub	_var05, #48
189c0     21 45 02 F1 | 	add	_var06, _var05
189c4     22 41 02 F6 | 	mov	_var04, _var06
189c8     01 3E 06 F1 | 	add	_var03, #1
189cc     1F 43 C2 FA | 	rdbyte	_var05, _var03
189d0     C8 FF 9F FD | 	jmp	#LR__0733
189d4                 | LR__0734
189d4                 | LR__0735
189d4     1D 3F 62 FC | 	wrlong	_var03, _var01
189d8                 | '             r = 10*r + (c-'0');
189d8                 | '             c = *++fmt;
189d8                 | '         }
189d8                 | '     }
189d8                 | '     *fmt_p = fmt;
189d8                 | '     return r;
189d8     20 35 02 F6 | 	mov	result1, _var04
189dc                 | _parseint_1165_ret
189dc     2D 00 64 FD | 	ret
189e0                 | 
189e0                 | _parseflags_1172
189e0     3A 3B 02 F6 | 	mov	_var01, arg01
189e4     3B 3D 02 F6 | 	mov	_var02, arg02
189e8     00 3E 06 F6 | 	mov	_var03, #0
189ec     01 40 06 F6 | 	mov	_var04, #1
189f0     00 42 06 F6 | 	mov	_var05, #0
189f4     02 44 06 F6 | 	mov	_var06, #2
189f8     00 46 06 F6 | 	mov	_var07, #0
189fc                 | ' 
189fc                 | '     while (!done) {
189fc                 | LR__0736
189fc     00 46 0E F2 | 	cmp	_var07, #0 wz
18a00     64 00 90 5D |  if_ne	jmp	#LR__0743
18a04     1D 49 C2 FA | 	rdbyte	_var08, _var01
18a08                 | '         c = *fmt++;
18a08                 | '         switch (c) {
18a08     2D 48 0E F2 | 	cmp	_var08, #45 wz
18a0c     01 3A 06 F1 | 	add	_var01, #1
18a10     24 00 90 AD |  if_e	jmp	#LR__0737
18a14     23 48 0E F2 | 	cmp	_var08, #35 wz
18a18     24 00 90 AD |  if_e	jmp	#LR__0738
18a1c     2B 48 0E F2 | 	cmp	_var08, #43 wz
18a20     24 00 90 AD |  if_e	jmp	#LR__0739
18a24     30 48 0E F2 | 	cmp	_var08, #48 wz
18a28     24 00 90 AD |  if_e	jmp	#LR__0740
18a2c     20 48 0E F2 | 	cmp	_var08, #32 wz
18a30     24 00 90 AD |  if_e	jmp	#LR__0741
18a34     28 00 90 FD | 	jmp	#LR__0742
18a38                 | LR__0737
18a38     01 44 06 F6 | 	mov	_var06, #1
18a3c                 | '             justify =  1 ;
18a3c                 | '             break;
18a3c     BC FF 9F FD | 	jmp	#LR__0736
18a40                 | LR__0738
18a40     1C 3E 46 F5 | 	or	_var03, #28
18a44                 | '             flags |=  (28) ;
18a44                 | '             break;
18a44     B4 FF 9F FD | 	jmp	#LR__0736
18a48                 | LR__0739
18a48     01 42 06 F6 | 	mov	_var05, #1
18a4c                 | '             signchar =  1 ;
18a4c                 | '             break;
18a4c     AC FF 9F FD | 	jmp	#LR__0736
18a50                 | LR__0740
18a50     02 40 06 F6 | 	mov	_var04, #2
18a54                 | '             padchar =  2 ;
18a54                 | '             break;
18a54     A4 FF 9F FD | 	jmp	#LR__0736
18a58                 | LR__0741
18a58     01 40 06 F6 | 	mov	_var04, #1
18a5c                 | '             padchar =  1 ;
18a5c                 | '             break;
18a5c     9C FF 9F FD | 	jmp	#LR__0736
18a60                 | LR__0742
18a60     01 46 06 F6 | 	mov	_var07, #1
18a64                 | '             done = 1;
18a64                 | '             break;
18a64     94 FF 9F FD | 	jmp	#LR__0736
18a68                 | LR__0743
18a68     18 40 66 F0 | 	shl	_var04, #24
18a6c     20 3F 42 F5 | 	or	_var03, _var04
18a70     1A 42 66 F0 | 	shl	_var05, #26
18a74     21 3F 42 F5 | 	or	_var03, _var05
18a78     16 44 66 F0 | 	shl	_var06, #22
18a7c     22 3F 42 F5 | 	or	_var03, _var06
18a80     1E 3F 62 FC | 	wrlong	_var03, _var02
18a84                 | '         }
18a84                 | '     }
18a84                 | '     flags |= (padchar <<  (24) );
18a84                 | '     flags |= (signchar <<  (26) );
18a84                 | '     flags |= (justify <<  (22) );
18a84                 | '     *flag_p = flags;
18a84                 | '     return fmt-1;
18a84     01 3A 86 F1 | 	sub	_var01, #1
18a88     1D 35 02 F6 | 	mov	result1, _var01
18a8c                 | _parseflags_1172_ret
18a8c     2D 00 64 FD | 	ret
18a90                 | 
18a90                 | _parsesize_1176
18a90     3B 3B 02 F6 | 	mov	_var01, arg02
18a94     04 3C 06 F6 | 	mov	_var02, #4
18a98     00 3E 06 F6 | 	mov	_var03, #0
18a9c     3A 41 02 F6 | 	mov	_var04, arg01
18aa0     3A 43 02 F6 | 	mov	_var05, arg01
18aa4     01 42 06 F1 | 	add	_var05, #1
18aa8     21 45 02 F6 | 	mov	_var06, _var05
18aac     20 47 C2 FA | 	rdbyte	_var07, _var04
18ab0                 | '     c = *fmt++;
18ab0                 | ' 
18ab0                 | '     switch (c) {
18ab0     23 49 02 F6 | 	mov	_var08, _var07
18ab4     6C 48 0E F2 | 	cmp	_var08, #108 wz
18ab8     2C 00 90 AD |  if_e	jmp	#LR__0744
18abc     68 48 0E F2 | 	cmp	_var08, #104 wz
18ac0     3C 00 90 AD |  if_e	jmp	#LR__0745
18ac4     6A 48 0E F2 | 	cmp	_var08, #106 wz
18ac8     4C 00 90 AD |  if_e	jmp	#LR__0746
18acc     7A 48 0E F2 | 	cmp	_var08, #122 wz
18ad0     4C 00 90 AD |  if_e	jmp	#LR__0747
18ad4     74 48 0E F2 | 	cmp	_var08, #116 wz
18ad8     44 00 90 AD |  if_e	jmp	#LR__0748
18adc     4C 48 0E F2 | 	cmp	_var08, #76 wz
18ae0     44 00 90 AD |  if_e	jmp	#LR__0749
18ae4     48 00 90 FD | 	jmp	#LR__0750
18ae8                 | LR__0744
18ae8     04 3C 06 F6 | 	mov	_var02, #4
18aec     22 49 C2 FA | 	rdbyte	_var08, _var06
18af0     6C 48 0E F2 | 	cmp	_var08, #108 wz
18af4     08 3C 06 A6 |  if_e	mov	_var02, #8
18af8     01 44 06 A1 |  if_e	add	_var06, #1
18afc                 | '             fmt++;
18afc                 | '         }
18afc                 | '         break;
18afc     3C 00 90 FD | 	jmp	#LR__0751
18b00                 | LR__0745
18b00     02 3C 06 F6 | 	mov	_var02, #2
18b04     22 49 C2 FA | 	rdbyte	_var08, _var06
18b08     68 48 0E F2 | 	cmp	_var08, #104 wz
18b0c     01 3C 06 A6 |  if_e	mov	_var02, #1
18b10     01 44 06 A1 |  if_e	add	_var06, #1
18b14                 | '             fmt++;
18b14                 | '         }
18b14                 | '         break;
18b14     24 00 90 FD | 	jmp	#LR__0751
18b18                 | LR__0746
18b18     08 3C 06 F6 | 	mov	_var02, #8
18b1c                 | '         break;
18b1c     1C 00 90 FD | 	jmp	#LR__0751
18b20                 | LR__0747
18b20                 | LR__0748
18b20     04 3C 06 F6 | 	mov	_var02, #4
18b24                 | '         break;
18b24     14 00 90 FD | 	jmp	#LR__0751
18b28                 | LR__0749
18b28     08 3C 06 F6 | 	mov	_var02, #8
18b2c                 | '         longflag = 1;
18b2c                 | '         break;
18b2c     0C 00 90 FD | 	jmp	#LR__0751
18b30                 | LR__0750
18b30     22 4B 02 F6 | 	mov	_var09, _var06
18b34     01 4A 86 F1 | 	sub	_var09, #1
18b38     25 45 02 F6 | 	mov	_var06, _var09
18b3c                 | ' 
18b3c                 | '         --fmt;
18b3c                 | '         break;
18b3c                 | LR__0751
18b3c     1D 3D 62 FC | 	wrlong	_var02, _var01
18b40                 | '     }
18b40                 | '     *size_p = size;
18b40                 | '     return fmt;
18b40     22 35 02 F6 | 	mov	result1, _var06
18b44                 | _parsesize_1176_ret
18b44     2D 00 64 FD | 	ret
18b48                 | 
18b48                 | ___default_filbuf
18b48     04 4C 05 F6 | 	mov	COUNT_, #4
18b4c     A9 00 A0 FD | 	call	#pushregs_
18b50     3A 8D 02 FB | 	rdlong	local01, arg01
18b54     10 74 06 F1 | 	add	arg01, #16
18b58     3A 79 02 FB | 	rdlong	arg03, arg01
18b5c     10 74 86 F1 | 	sub	arg01, #16
18b60     3C 8F 02 FB | 	rdlong	local02, arg03
18b64     04 78 06 F1 | 	add	arg03, #4
18b68     3C 91 02 FB | 	rdlong	local03, arg03
18b6c     0C 8C 06 F1 | 	add	local01, #12
18b70     46 77 02 F6 | 	mov	arg02, local01
18b74     0C 8C 86 F1 | 	sub	local01, #12
18b78     0A 78 C6 F9 | 	decod	arg03, #10
18b7c     C9 92 02 F6 | 	mov	local04, objptr
18b80     47 93 01 F6 | 	mov	objptr, local02
18b84     2D 90 62 FD | 	call	local03
18b88     49 93 01 F6 | 	mov	objptr, local04
18b8c     1A 93 02 F6 | 	mov	local04, result1
18b90     00 92 56 F2 | 	cmps	local04, #0 wc
18b94                 | '         return -1;
18b94     01 34 66 C6 |  if_b	neg	result1, #1
18b98     28 00 90 CD |  if_b	jmp	#LR__0752
18b9c     46 93 62 FC | 	wrlong	local04, local01
18ba0     0C 8C 06 F1 | 	add	local01, #12
18ba4     46 91 02 F6 | 	mov	local03, local01
18ba8     08 8C 86 F1 | 	sub	local01, #8
18bac     46 91 62 FC | 	wrlong	local03, local01
18bb0     04 8C 06 F1 | 	add	local01, #4
18bb4     46 91 02 FB | 	rdlong	local03, local01
18bb8     01 90 46 F5 | 	or	local03, #1
18bbc     46 91 62 FC | 	wrlong	local03, local01
18bc0                 | '     }
18bc0                 | '     b->cnt = r;
18bc0                 | '     b->ptr = &b->buf[0];
18bc0                 | '     b->flags |=  (0x01) ;
18bc0                 | '     return r;
18bc0     49 35 02 F6 | 	mov	result1, local04
18bc4                 | LR__0752
18bc4     A8 F0 03 F6 | 	mov	ptra, fp
18bc8     B3 00 A0 FD | 	call	#popregs_
18bcc                 | ___default_filbuf_ret
18bcc     2D 00 64 FD | 	ret
18bd0                 | 
18bd0                 | ___root_opendir
18bd0     15 01 00 FF 
18bd4     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
18bd8     04 74 06 F1 | 	add	arg01, #4
18bdc     3A D7 61 FC | 	wrlong	ptr__dat__, arg01
18be0                 | ' {
18be0                 | '     dir->vfsdata = &mounttab[0];
18be0                 | '     return 0;
18be0     00 34 06 F6 | 	mov	result1, #0
18be4     15 01 00 FF 
18be8     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
18bec                 | ___root_opendir_ret
18bec     2D 00 64 FD | 	ret
18bf0                 | 
18bf0                 | ___root_readdir
18bf0     03 4C 05 F6 | 	mov	COUNT_, #3
18bf4     A9 00 A0 FD | 	call	#pushregs_
18bf8     3A 8D 02 F6 | 	mov	local01, arg01
18bfc     3B 8F 02 F6 | 	mov	local02, arg02
18c00     04 8C 06 F1 | 	add	local01, #4
18c04     46 91 02 FB | 	rdlong	local03, local01
18c08     04 8C 86 F1 | 	sub	local01, #4
18c0c                 | LR__0753
18c0c     15 01 00 FF 
18c10     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
18c14     EB 90 0A F2 | 	cmp	local03, ptr__dat__ wz
18c18                 | ' 
18c18                 | '         return -1;
18c18     15 01 00 FF 
18c1c     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
18c20     01 34 66 A6 |  if_e	neg	result1, #1
18c24     48 00 90 AD |  if_e	jmp	#LR__0754
18c28     48 79 0A FB | 	rdlong	arg03, local03 wz
18c2c     04 90 06 A1 |  if_e	add	local03, #4
18c30                 | '         ptr++;
18c30                 | '         goto again;
18c30     D8 FF 9F AD |  if_e	jmp	#LR__0753
18c34     48 77 02 FB | 	rdlong	arg02, local03
18c38     01 76 06 F1 | 	add	arg02, #1
18c3c     47 75 02 F6 | 	mov	arg01, local02
18c40     40 78 06 F6 | 	mov	arg03, #64
18c44     A4 D3 BE FD | 	call	#_strncpy
18c48     50 8E 06 F1 | 	add	local02, #80
18c4c     47 03 48 FC | 	wrbyte	#1, local02
18c50     08 8E 86 F1 | 	sub	local02, #8
18c54     47 01 68 FC | 	wrlong	#0, local02
18c58     04 8E 06 F1 | 	add	local02, #4
18c5c     47 01 68 FC | 	wrlong	#0, local02
18c60     04 90 06 F1 | 	add	local03, #4
18c64     04 8C 06 F1 | 	add	local01, #4
18c68     46 91 62 FC | 	wrlong	local03, local01
18c6c                 | '     }
18c6c                 | '     strncpy(ent->d_name, (*ptr)+1,  (64) );
18c6c                 | '     ent->d_type =  (1) ;
18c6c                 | '     ent->d_size = 0;
18c6c                 | '     ent->d_mtime = 0;
18c6c                 | '     dir->vfsdata = ++ptr;
18c6c                 | '     return 0;
18c6c     00 34 06 F6 | 	mov	result1, #0
18c70                 | LR__0754
18c70     A8 F0 03 F6 | 	mov	ptra, fp
18c74     B3 00 A0 FD | 	call	#popregs_
18c78                 | ___root_readdir_ret
18c78     2D 00 64 FD | 	ret
18c7c                 | 
18c7c                 | ___root_closedir
18c7c                 | '     return 0;
18c7c     00 34 06 F6 | 	mov	result1, #0
18c80                 | ___root_closedir_ret
18c80     2D 00 64 FD | 	ret
18c84                 | 
18c84                 | ___root_stat
18c84     01 4C 05 F6 | 	mov	COUNT_, #1
18c88     A9 00 A0 FD | 	call	#pushregs_
18c8c     3B 8D 02 F6 | 	mov	local01, arg02
18c90     46 75 02 F6 | 	mov	arg01, local01
18c94     00 76 06 F6 | 	mov	arg02, #0
18c98     30 78 06 F6 | 	mov	arg03, #48
18c9c     99 00 A0 FD | 	call	#\builtin_bytefill_
18ca0     08 8C 06 F1 | 	add	local01, #8
18ca4     08 00 80 FF 
18ca8     46 FF 6B FC | 	wrlong	##4607, local01
18cac                 | '     buf->st_mode =  0010000  | 0777;
18cac                 | '     return 0;
18cac     00 34 06 F6 | 	mov	result1, #0
18cb0     A8 F0 03 F6 | 	mov	ptra, fp
18cb4     B3 00 A0 FD | 	call	#popregs_
18cb8                 | ___root_stat_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | ___getvfsforfile
18cbc     13 4C 05 F6 | 	mov	COUNT_, #19
18cc0     A9 00 A0 FD | 	call	#pushregs_
18cc4     3A 8D 02 F6 | 	mov	local01, arg01
18cc8     3B 8F 02 F6 | 	mov	local02, arg02
18ccc     3C 91 02 F6 | 	mov	local03, arg03
18cd0     50 73 9E FE | 	loc	pa,	#(@LR__0756-@LR__0755)
18cd4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
18cd8                 | ' 
18cd8                 | '     while (orig_name[0] == '/' && orig_name[1] == '/') {
18cd8                 | LR__0755
18cd8     47 35 C2 FA | 	rdbyte	result1, local02
18cdc     2F 34 0E F2 | 	cmp	result1, #47 wz
18ce0     18 00 90 5D |  if_ne	jmp	#LR__0757
18ce4     01 8E 06 F1 | 	add	local02, #1
18ce8     47 35 C2 FA | 	rdbyte	result1, local02
18cec     01 8E 86 F1 | 	sub	local02, #1
18cf0     2F 34 0E F2 | 	cmp	result1, #47 wz
18cf4     01 8E 06 A1 |  if_e	add	local02, #1
18cf8     DC FF 9F AD |  if_e	jmp	#LR__0755
18cfc                 | LR__0756
18cfc                 | LR__0757
18cfc     47 79 C2 FA | 	rdbyte	arg03, local02
18d00     2F 78 0E F2 | 	cmp	arg03, #47 wz
18d04     14 00 90 5D |  if_ne	jmp	#LR__0758
18d08     46 75 02 F6 | 	mov	arg01, local01
18d0c     47 77 02 F6 | 	mov	arg02, local02
18d10     00 79 06 F6 | 	mov	arg03, #256
18d14     D4 D2 BE FD | 	call	#_strncpy
18d18     94 00 90 FD | 	jmp	#LR__0763
18d1c                 | LR__0758
18d1c     15 01 00 FF 
18d20     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
18d24     EB 76 02 F6 | 	mov	arg02, ptr__dat__
18d28     15 01 00 FF 
18d2c     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
18d30     46 75 02 F6 | 	mov	arg01, local01
18d34     00 79 06 F6 | 	mov	arg03, #256
18d38     B0 D2 BE FD | 	call	#_strncpy
18d3c     47 93 CA FA | 	rdbyte	local04, local02 wz
18d40     6C 00 90 AD |  if_e	jmp	#LR__0762
18d44     47 95 C2 FA | 	rdbyte	local05, local02
18d48     2E 94 0E F2 | 	cmp	local05, #46 wz
18d4c     18 00 90 5D |  if_ne	jmp	#LR__0759
18d50     01 8E 06 F1 | 	add	local02, #1
18d54     47 97 C2 FA | 	rdbyte	local06, local02
18d58     01 8E 86 F1 | 	sub	local02, #1
18d5c     4B 99 02 F6 | 	mov	local07, local06
18d60     07 98 4E F7 | 	zerox	local07, #7 wz
18d64     48 00 90 AD |  if_e	jmp	#LR__0762
18d68                 | LR__0759
18d68     46 93 C2 FA | 	rdbyte	local04, local01
18d6c     2F 92 0E F2 | 	cmp	local04, #47 wz
18d70     18 00 90 5D |  if_ne	jmp	#LR__0760
18d74     01 8C 06 F1 | 	add	local01, #1
18d78     46 99 C2 FA | 	rdbyte	local07, local01
18d7c     01 8C 86 F1 | 	sub	local01, #1
18d80     4C 95 02 F6 | 	mov	local05, local07
18d84     07 94 4E F7 | 	zerox	local05, #7 wz
18d88     14 00 90 AD |  if_e	jmp	#LR__0761
18d8c                 | LR__0760
18d8c     57 01 00 FF 
18d90     C4 77 06 F6 | 	mov	arg02, ##@LR__2293
18d94     46 75 02 F6 | 	mov	arg01, local01
18d98     00 79 06 F6 | 	mov	arg03, #256
18d9c     E4 D2 BE FD | 	call	#_strncat
18da0                 | LR__0761
18da0     46 75 02 F6 | 	mov	arg01, local01
18da4     47 77 02 F6 | 	mov	arg02, local02
18da8     00 79 06 F6 | 	mov	arg03, #256
18dac     D4 D2 BE FD | 	call	#_strncat
18db0                 | LR__0762
18db0                 | LR__0763
18db0     46 93 CA FA | 	rdbyte	local04, local01 wz
18db4     20 00 90 AD |  if_e	jmp	#LR__0764
18db8     46 95 C2 FA | 	rdbyte	local05, local01
18dbc     2F 94 0E F2 | 	cmp	local05, #47 wz
18dc0     2C 00 90 5D |  if_ne	jmp	#LR__0765
18dc4     01 8C 06 F1 | 	add	local01, #1
18dc8     46 99 C2 FA | 	rdbyte	local07, local01
18dcc     01 8C 86 F1 | 	sub	local01, #1
18dd0     07 98 4E F7 | 	zerox	local07, #7 wz
18dd4     18 00 90 5D |  if_ne	jmp	#LR__0765
18dd8                 | LR__0764
18dd8                 | '         return &__rootvfs;
18dd8     16 01 00 FF 
18ddc     E4 D7 05 F1 | 	add	ptr__dat__, ##142820
18de0     EB 34 02 F6 | 	mov	result1, ptr__dat__
18de4     16 01 00 FF 
18de8     E4 D7 85 F1 | 	sub	ptr__dat__, ##142820
18dec     4C 02 90 FD | 	jmp	#LR__0780
18df0                 | LR__0765
18df0                 | '     }
18df0                 | '     for (i = 0; i <  4 ; i++) {
18df0     00 9A 06 F6 | 	mov	local08, #0
18df4                 | LR__0766
18df4     04 9A 56 F2 | 	cmps	local08, #4 wc
18df8     2C 02 90 3D |  if_ae	jmp	#LR__0779
18dfc     4D 93 02 F6 | 	mov	local04, local08
18e00     02 92 66 F0 | 	shl	local04, #2
18e04     15 01 00 FF 
18e08     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
18e0c     EB 92 02 F1 | 	add	local04, ptr__dat__
18e10     49 99 0A FB | 	rdlong	local07, local04 wz
18e14     15 01 00 FF 
18e18     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
18e1c     00 02 90 AD |  if_e	jmp	#LR__0778
18e20     4D 95 02 F6 | 	mov	local05, local08
18e24     02 94 66 F0 | 	shl	local05, #2
18e28     15 01 00 FF 
18e2c     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
18e30     EB 94 02 F1 | 	add	local05, ptr__dat__
18e34     4A 75 02 FB | 	rdlong	arg01, local05
18e38     15 01 00 FF 
18e3c     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
18e40     00 9C 06 F6 | 	mov	local09, #0
18e44     C8 71 9E FE | 	loc	pa,	#(@LR__0768-@LR__0767)
18e48     8C 00 A0 FD | 	call	#FCACHE_LOAD_
18e4c                 | LR__0767
18e4c     3A 35 CA FA | 	rdbyte	result1, arg01 wz
18e50     01 9C 06 51 |  if_ne	add	local09, #1
18e54     01 74 06 51 |  if_ne	add	arg01, #1
18e58     F0 FF 9F 5D |  if_ne	jmp	#LR__0767
18e5c                 | LR__0768
18e5c     4E 9F 02 F6 | 	mov	local10, local09
18e60     4F 95 02 F6 | 	mov	local05, local10
18e64     46 95 02 F1 | 	add	local05, local01
18e68     4A 93 C2 FA | 	rdbyte	local04, local05
18e6c     2F 92 0E F2 | 	cmp	local04, #47 wz
18e70     4F A1 02 56 |  if_ne	mov	local11, local10
18e74     46 A3 02 56 |  if_ne	mov	local12, local01
18e78     51 A1 02 51 |  if_ne	add	local11, local12
18e7c     50 97 CA 5A |  if_ne	rdbyte	local06, local11 wz
18e80     9C 01 90 5D |  if_ne	jmp	#LR__0777
18e84     4D 99 02 F6 | 	mov	local07, local08
18e88     02 98 66 F0 | 	shl	local07, #2
18e8c     15 01 00 FF 
18e90     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
18e94     EB A4 02 F6 | 	mov	local13, ptr__dat__
18e98     EB 98 02 F1 | 	add	local07, ptr__dat__
18e9c     4C A7 02 FB | 	rdlong	local14, local07
18ea0     4F A9 02 F6 | 	mov	local15, local10
18ea4     46 75 02 F6 | 	mov	arg01, local01
18ea8     53 77 02 F6 | 	mov	arg02, local14
18eac     54 79 02 F6 | 	mov	arg03, local15
18eb0     15 01 00 FF 
18eb4     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
18eb8     D4 D2 BE FD | 	call	#_strncmp
18ebc     1A AB 0A F6 | 	mov	local16, result1 wz
18ec0     5C 01 90 5D |  if_ne	jmp	#LR__0777
18ec4     4D 93 02 F6 | 	mov	local04, local08
18ec8     02 92 66 F0 | 	shl	local04, #2
18ecc     15 01 00 FF 
18ed0     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
18ed4     EB 92 02 F1 | 	add	local04, ptr__dat__
18ed8     49 AD 02 FB | 	rdlong	local17, local04
18edc                 | ' 
18edc                 | '             while (name[len+1] == '.' && (name[len+2] == '/' || name[len+2] == 0)) {
18edc     15 01 00 FF 
18ee0     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
18ee4     7C 71 9E FE | 	loc	pa,	#(@LR__0771-@LR__0769)
18ee8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
18eec                 | LR__0769
18eec     4F 95 02 F6 | 	mov	local05, local10
18ef0     01 94 06 F1 | 	add	local05, #1
18ef4     4A 99 02 F6 | 	mov	local07, local05
18ef8     46 97 02 F6 | 	mov	local06, local01
18efc     46 99 02 F1 | 	add	local07, local01
18f00     4C 93 C2 FA | 	rdbyte	local04, local07
18f04     2E 92 0E F2 | 	cmp	local04, #46 wz
18f08     44 00 90 5D |  if_ne	jmp	#LR__0772
18f0c     4F A3 02 F6 | 	mov	local12, local10
18f10     02 A2 06 F1 | 	add	local12, #2
18f14     51 AB 02 F6 | 	mov	local16, local12
18f18     46 A7 02 F6 | 	mov	local14, local01
18f1c     46 AB 02 F1 | 	add	local16, local01
18f20     55 A1 C2 FA | 	rdbyte	local11, local16
18f24     2F A0 0E F2 | 	cmp	local11, #47 wz
18f28     1C 00 90 AD |  if_e	jmp	#LR__0770
18f2c     4F A5 02 F6 | 	mov	local13, local10
18f30     02 A4 06 F1 | 	add	local13, #2
18f34     52 AF 02 F6 | 	mov	local18, local13
18f38     46 B1 02 F6 | 	mov	local19, local01
18f3c     46 AF 02 F1 | 	add	local18, local01
18f40     57 A9 CA FA | 	rdbyte	local15, local18 wz
18f44     08 00 90 5D |  if_ne	jmp	#LR__0772
18f48                 | LR__0770
18f48     01 9E 06 F1 | 	add	local10, #1
18f4c     9C FF 9F FD | 	jmp	#LR__0769
18f50                 | LR__0771
18f50                 | LR__0772
18f50     00 90 0E F2 | 	cmp	local03, #0 wz
18f54     48 75 02 56 |  if_ne	mov	arg01, local03
18f58     46 77 02 56 |  if_ne	mov	arg02, local01
18f5c     00 79 06 56 |  if_ne	mov	arg03, #256
18f60     88 D0 BE 5D |  if_ne	call	#_strncpy
18f64     46 77 02 F6 | 	mov	arg02, local01
18f68     4F 77 02 F1 | 	add	arg02, local10
18f6c     01 76 06 F1 | 	add	arg02, #1
18f70     46 75 02 F6 | 	mov	arg01, local01
18f74     70 CC B0 FD | 	call	#__system____builtin_strcpy
18f78     46 75 02 F6 | 	mov	arg01, local01
18f7c     00 9C 06 F6 | 	mov	local09, #0
18f80     8C 70 9E FE | 	loc	pa,	#(@LR__0774-@LR__0773)
18f84     8C 00 A0 FD | 	call	#FCACHE_LOAD_
18f88                 | LR__0773
18f88     3A 35 CA FA | 	rdbyte	result1, arg01 wz
18f8c     01 9C 06 51 |  if_ne	add	local09, #1
18f90     01 74 06 51 |  if_ne	add	arg01, #1
18f94     F0 FF 9F 5D |  if_ne	jmp	#LR__0773
18f98                 | LR__0774
18f98     4E 35 02 F6 | 	mov	result1, local09
18f9c     1A 9F 02 F6 | 	mov	local10, result1
18fa0                 | '                 strncpy(full_path, name,  (256) );
18fa0                 | '             }
18fa0                 | '             __builtin_strcpy(name, name+len+1) ;
18fa0                 | ' 
18fa0                 | '             len =  __builtin_strlen(name) ;
18fa0                 | '             while ( len > 0 ) {
18fa0                 | LR__0775
18fa0     01 9E 56 F2 | 	cmps	local10, #1 wc
18fa4     70 00 90 CD |  if_b	jmp	#LR__0776
18fa8     4F 95 02 F6 | 	mov	local05, local10
18fac     46 95 02 F1 | 	add	local05, local01
18fb0     4A 93 C2 FA | 	rdbyte	local04, local05
18fb4     2F 92 0E F2 | 	cmp	local04, #47 wz
18fb8     4F 93 02 A6 |  if_e	mov	local04, local10
18fbc     46 93 02 A1 |  if_e	add	local04, local01
18fc0     49 01 48 AC |  if_e	wrbyte	#0, local04
18fc4     01 9E 86 A1 |  if_e	sub	local10, #1
18fc8     D4 FF 9F AD |  if_e	jmp	#LR__0775
18fcc     4F 95 02 F6 | 	mov	local05, local10
18fd0     46 95 02 F1 | 	add	local05, local01
18fd4     4A 93 C2 FA | 	rdbyte	local04, local05
18fd8     2E 92 0E F2 | 	cmp	local04, #46 wz
18fdc     38 00 90 5D |  if_ne	jmp	#LR__0776
18fe0     02 9E 56 F2 | 	cmps	local10, #2 wc
18fe4     30 00 90 CD |  if_b	jmp	#LR__0776
18fe8     4F A3 02 F6 | 	mov	local12, local10
18fec     01 A2 86 F1 | 	sub	local12, #1
18ff0     46 A3 02 F1 | 	add	local12, local01
18ff4     51 97 C2 FA | 	rdbyte	local06, local12
18ff8     2F 96 0E F2 | 	cmp	local06, #47 wz
18ffc     18 00 90 5D |  if_ne	jmp	#LR__0776
19000     4F 95 02 F6 | 	mov	local05, local10
19004     01 94 86 F1 | 	sub	local05, #1
19008     46 95 02 F1 | 	add	local05, local01
1900c     4A 01 48 FC | 	wrbyte	#0, local05
19010     02 9E 86 F1 | 	sub	local10, #2
19014     88 FF 9F FD | 	jmp	#LR__0775
19018                 | '                     break;
19018                 | LR__0776
19018                 | '                 }
19018                 | '             }
19018                 | ' #line 137 "C:/flexprop/include/libc/unix/_mount.c"
19018                 | '             return v;
19018     56 35 02 F6 | 	mov	result1, local17
1901c     1C 00 90 FD | 	jmp	#LR__0780
19020                 | LR__0777
19020                 | LR__0778
19020     01 9A 06 F1 | 	add	local08, #1
19024     CC FD 9F FD | 	jmp	#LR__0766
19028                 | LR__0779
19028     01 00 00 FF 
1902c     EC A2 05 F1 | 	add	ptr___system__dat__, ##748
19030     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
19034     01 00 00 FF 
19038     EC A2 85 F1 | 	sub	ptr___system__dat__, ##748
1903c                 | '         }
1903c                 | '     }
1903c                 | '     v = _getrootvfs();
1903c                 | ' #line 144 "C:/flexprop/include/libc/unix/_mount.c"
1903c                 | '     return v;
1903c                 | LR__0780
1903c     A8 F0 03 F6 | 	mov	ptra, fp
19040     B3 00 A0 FD | 	call	#popregs_
19044                 | ___getvfsforfile_ret
19044     2D 00 64 FD | 	ret
19048                 | 
19048                 | __mount
19048     12 4C 05 F6 | 	mov	COUNT_, #18
1904c     A9 00 A0 FD | 	call	#pushregs_
19050     3A 8D 02 F6 | 	mov	local01, arg01
19054     3B 8F 02 F6 | 	mov	local02, arg02
19058     01 90 66 F6 | 	neg	local03, #1
1905c     46 75 C2 FA | 	rdbyte	arg01, local01
19060     2F 74 0E F2 | 	cmp	arg01, #47 wz
19064     2C 00 90 5D |  if_ne	jmp	#LR__0783
19068     46 75 02 F6 | 	mov	arg01, local01
1906c     00 92 06 F6 | 	mov	local04, #0
19070     9C 6F 9E FE | 	loc	pa,	#(@LR__0782-@LR__0781)
19074     8C 00 A0 FD | 	call	#FCACHE_LOAD_
19078                 | LR__0781
19078     3A 35 CA FA | 	rdbyte	result1, arg01 wz
1907c     01 92 06 51 |  if_ne	add	local04, #1
19080     01 74 06 51 |  if_ne	add	arg01, #1
19084     F0 FF 9F 5D |  if_ne	jmp	#LR__0781
19088                 | LR__0782
19088     49 35 02 F6 | 	mov	result1, local04
1908c     10 34 56 F2 | 	cmps	result1, #16 wc
19090     14 00 90 CD |  if_b	jmp	#LR__0784
19094                 | LR__0783
19094                 | ' #line 160 "C:/flexprop/include/libc/unix/_mount.c"
19094                 | '         return _seterror( 10 );
19094     18 A2 05 F1 | 	add	ptr___system__dat__, #24
19098     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
1909c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
190a0     01 34 66 F6 | 	neg	result1, #1
190a4     AC 02 90 FD | 	jmp	#LR__0796
190a8                 | LR__0784
190a8                 | '     }
190a8                 | '     for (i = 0; i <  4 ; i++) {
190a8     00 94 06 F6 | 	mov	local05, #0
190ac                 | LR__0785
190ac     04 94 56 F2 | 	cmps	local05, #4 wc
190b0     DC 00 90 3D |  if_ae	jmp	#LR__0790
190b4     4A 75 02 F6 | 	mov	arg01, local05
190b8     02 74 66 F0 | 	shl	arg01, #2
190bc     15 01 00 FF 
190c0     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
190c4     EB 74 02 F1 | 	add	arg01, ptr__dat__
190c8     3A 75 0A FB | 	rdlong	arg01, arg01 wz
190cc     15 01 00 FF 
190d0     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
190d4     00 90 56 A2 |  if_e	cmps	local03, #0 wc
190d8     4A 91 02 86 |  if_c_and_z	mov	local03, local05
190dc                 | '                 firstfree = i;
190dc                 | '                 continue;
190dc     A8 00 90 8D |  if_c_and_z	jmp	#LR__0789
190e0     4A 75 02 F6 | 	mov	arg01, local05
190e4     02 74 66 F0 | 	shl	arg01, #2
190e8     15 01 00 FF 
190ec     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
190f0     EB 74 02 F1 | 	add	arg01, ptr__dat__
190f4     3A 75 02 FB | 	rdlong	arg01, arg01
190f8     15 01 00 FF 
190fc     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19100     00 92 06 F6 | 	mov	local04, #0
19104     08 6F 9E FE | 	loc	pa,	#(@LR__0787-@LR__0786)
19108     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1910c                 | LR__0786
1910c     3A 35 CA FA | 	rdbyte	result1, arg01 wz
19110     01 92 06 51 |  if_ne	add	local04, #1
19114     01 74 06 51 |  if_ne	add	arg01, #1
19118     F0 FF 9F 5D |  if_ne	jmp	#LR__0786
1911c                 | LR__0787
1911c     49 35 02 F6 | 	mov	result1, local04
19120     1A 97 02 F6 | 	mov	local06, result1
19124     4B 75 02 F6 | 	mov	arg01, local06
19128     46 75 02 F1 | 	add	arg01, local01
1912c     3A 75 C2 FA | 	rdbyte	arg01, arg01
19130     2F 74 0E F2 | 	cmp	arg01, #47 wz
19134     4B 99 02 56 |  if_ne	mov	local07, local06
19138     46 9B 02 56 |  if_ne	mov	local08, local01
1913c     4D 99 02 51 |  if_ne	add	local07, local08
19140     4C 75 CA 5A |  if_ne	rdbyte	arg01, local07 wz
19144     40 00 90 5D |  if_ne	jmp	#LR__0788
19148     4A 79 02 F6 | 	mov	arg03, local05
1914c     02 78 66 F0 | 	shl	arg03, #2
19150     15 01 00 FF 
19154     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
19158     EB 9C 02 F6 | 	mov	local09, ptr__dat__
1915c     EB 78 02 F1 | 	add	arg03, ptr__dat__
19160     3C 77 02 FB | 	rdlong	arg02, arg03
19164     4B 9F 02 F6 | 	mov	local10, local06
19168     46 75 02 F6 | 	mov	arg01, local01
1916c     4F 79 02 F6 | 	mov	arg03, local10
19170     15 01 00 FF 
19174     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19178     14 D0 BE FD | 	call	#_strncmp
1917c     00 34 4E F2 | 	cmps	result1, #0 wz
19180     4A 91 02 A6 |  if_e	mov	local03, local05
19184                 | '             firstfree = i;
19184                 | '             break;
19184     08 00 90 AD |  if_e	jmp	#LR__0790
19188                 | LR__0788
19188                 | LR__0789
19188     01 94 06 F1 | 	add	local05, #1
1918c     1C FF 9F FD | 	jmp	#LR__0785
19190                 | LR__0790
19190     FF FF 7F FF 
19194     FF 91 0E F2 | 	cmp	local03, ##-1 wz
19198                 | ' #line 179 "C:/flexprop/include/libc/unix/_mount.c"
19198                 | '         return _seterror( 11 );
19198     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
1919c     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
191a0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
191a4     01 34 66 A6 |  if_e	neg	result1, #1
191a8     A8 01 90 AD |  if_e	jmp	#LR__0796
191ac     48 95 02 F6 | 	mov	local05, local03
191b0     4A 9B 02 F6 | 	mov	local08, local05
191b4     02 9A 66 F0 | 	shl	local08, #2
191b8     15 01 00 FF 
191bc     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
191c0     EB 9A 02 F1 | 	add	local08, ptr__dat__
191c4     4D A1 0A FB | 	rdlong	local11, local08 wz
191c8     15 01 00 FF 
191cc     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
191d0     68 00 90 AD |  if_e	jmp	#LR__0791
191d4     4C A0 06 F1 | 	add	local11, #76
191d8     50 9B 0A FB | 	rdlong	local08, local11 wz
191dc     4C A0 86 F1 | 	sub	local11, #76
191e0     58 00 90 AD |  if_e	jmp	#LR__0791
191e4     4C A0 06 F1 | 	add	local11, #76
191e8     50 A3 02 FB | 	rdlong	local12, local11
191ec     4C A0 86 F1 | 	sub	local11, #76
191f0     51 A5 02 F6 | 	mov	local13, local12
191f4     52 A7 02 FB | 	rdlong	local14, local13
191f8     04 A4 06 F1 | 	add	local13, #4
191fc     52 99 02 FB | 	rdlong	local07, local13
19200     4C A9 02 F6 | 	mov	local15, local07
19204     4A 9B 02 F6 | 	mov	local08, local05
19208     02 9A 66 F0 | 	shl	local08, #2
1920c     15 01 00 FF 
19210     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
19214     EB AA 02 F6 | 	mov	local16, ptr__dat__
19218     EB 9A 02 F1 | 	add	local08, ptr__dat__
1921c     4D 9B 02 FB | 	rdlong	local08, local08
19220     4D 75 02 F6 | 	mov	arg01, local08
19224     C9 AC 02 F6 | 	mov	local17, objptr
19228     53 93 01 F6 | 	mov	objptr, local14
1922c     15 01 00 FF 
19230     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19234     2D A8 62 FD | 	call	local15
19238     56 93 01 F6 | 	mov	objptr, local17
1923c                 | LR__0791
1923c     4A A5 02 F6 | 	mov	local13, local05
19240     02 A4 66 F0 | 	shl	local13, #2
19244     15 01 00 FF 
19248     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
1924c     EB A4 02 F1 | 	add	local13, ptr__dat__
19250     52 8F 62 FC | 	wrlong	local02, local13
19254     00 8E 0E F2 | 	cmp	local02, #0 wz
19258     15 01 00 FF 
1925c     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
19260     20 00 90 5D |  if_ne	jmp	#LR__0792
19264     02 94 66 F0 | 	shl	local05, #2
19268     15 01 00 FF 
1926c     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
19270     EB 94 02 F1 | 	add	local05, ptr__dat__
19274     4A 01 68 FC | 	wrlong	#0, local05
19278     15 01 00 FF 
1927c     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19280     CC 00 90 FD | 	jmp	#LR__0795
19284                 | LR__0792
19284     4A AF 02 F6 | 	mov	local18, local05
19288     04 AE 66 F0 | 	shl	local18, #4
1928c     15 01 00 FF 
19290     81 D7 05 F1 | 	add	ptr__dat__, ##142209
19294     EB AE 02 F1 | 	add	local18, ptr__dat__
19298     57 75 02 F6 | 	mov	arg01, local18
1929c     46 77 02 F6 | 	mov	arg02, local01
192a0     10 78 06 F6 | 	mov	arg03, #16
192a4     15 01 00 FF 
192a8     81 D7 85 F1 | 	sub	ptr__dat__, ##142209
192ac     3C CD BE FD | 	call	#_strncpy
192b0     48 8E 06 F1 | 	add	local02, #72
192b4     47 A5 0A FB | 	rdlong	local13, local02 wz
192b8     48 8E 86 F1 | 	sub	local02, #72
192bc     74 00 90 AD |  if_e	jmp	#LR__0794
192c0     48 8E 06 F1 | 	add	local02, #72
192c4     47 A5 02 FB | 	rdlong	local13, local02
192c8     52 A7 02 FB | 	rdlong	local14, local13
192cc     04 A4 06 F1 | 	add	local13, #4
192d0     52 A9 02 FB | 	rdlong	local15, local13
192d4     57 75 02 F6 | 	mov	arg01, local18
192d8     C9 AC 02 F6 | 	mov	local17, objptr
192dc     53 93 01 F6 | 	mov	objptr, local14
192e0     2D A8 62 FD | 	call	local15
192e4     56 93 01 F6 | 	mov	objptr, local17
192e8     00 34 0E F2 | 	cmp	result1, #0 wz
192ec     44 00 90 AD |  if_e	jmp	#LR__0793
192f0     4A A5 02 F6 | 	mov	local13, local05
192f4     02 A4 66 F0 | 	shl	local13, #2
192f8     15 01 00 FF 
192fc     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
19300     EB A4 02 F1 | 	add	local13, ptr__dat__
19304     52 01 68 FC | 	wrlong	#0, local13
19308     02 94 66 F0 | 	shl	local05, #2
1930c     10 D6 85 F1 | 	sub	ptr__dat__, #16
19310     EB 94 02 F1 | 	add	local05, ptr__dat__
19314     4A 01 68 FC | 	wrlong	#0, local05
19318                 | '                 vfstab[i] = 0;
19318                 | '                 mounttab[i] = 0;
19318                 | ' #line 209 "C:/flexprop/include/libc/unix/_mount.c"
19318                 | '                 return _seterror( 12 );
19318     15 01 00 FF 
1931c     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19320     18 A2 05 F1 | 	add	ptr___system__dat__, #24
19324     D1 18 68 FC | 	wrlong	#12, ptr___system__dat__
19328     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
1932c     01 34 66 F6 | 	neg	result1, #1
19330     20 00 90 FD | 	jmp	#LR__0796
19334                 | LR__0793
19334                 | LR__0794
19334     02 94 66 F0 | 	shl	local05, #2
19338     15 01 00 FF 
1933c     C4 D7 05 F1 | 	add	ptr__dat__, ##142276
19340     EB 94 02 F1 | 	add	local05, ptr__dat__
19344     4A AF 62 FC | 	wrlong	local18, local05
19348     15 01 00 FF 
1934c     C4 D7 85 F1 | 	sub	ptr__dat__, ##142276
19350                 | LR__0795
19350                 | '             }
19350                 | '         }
19350                 | '         mounttab[i] = name;
19350                 | ' #line 216 "C:/flexprop/include/libc/unix/_mount.c"
19350                 | '     }
19350                 | '     return 0;
19350     00 34 06 F6 | 	mov	result1, #0
19354                 | LR__0796
19354     A8 F0 03 F6 | 	mov	ptra, fp
19358     B3 00 A0 FD | 	call	#popregs_
1935c                 | __mount_ret
1935c     2D 00 64 FD | 	ret
19360                 | 
19360                 | __remove
19360     06 4C 05 F6 | 	mov	COUNT_, #6
19364     A9 00 A0 FD | 	call	#pushregs_
19368     3A 77 02 F6 | 	mov	arg02, arg01
1936c                 | '     return tmpname;
1936c     16 01 00 FF 
19370     E4 D6 05 F1 | 	add	ptr__dat__, ##142564
19374     EB 8C 02 F6 | 	mov	local01, ptr__dat__
19378     46 75 02 F6 | 	mov	arg01, local01
1937c     00 78 06 F6 | 	mov	arg03, #0
19380     16 01 00 FF 
19384     E4 D6 85 F1 | 	sub	ptr__dat__, ##142564
19388     30 F9 BF FD | 	call	#___getvfsforfile
1938c     1A 8F 0A F6 | 	mov	local02, result1 wz
19390     20 8E 06 51 |  if_ne	add	local02, #32
19394     47 75 02 5B |  if_ne	rdlong	arg01, local02
19398     20 8E 86 51 |  if_ne	sub	local02, #32
1939c     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
193a0                 | ' #line 20 "C:/flexprop/include/libsys/remove.c"
193a0                 | '         return _seterror( 16 );
193a0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
193a4     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
193a8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
193ac     01 34 66 A6 |  if_e	neg	result1, #1
193b0     90 00 90 AD |  if_e	jmp	#LR__0799
193b4     40 8E 06 F1 | 	add	local02, #64
193b8     47 75 02 FB | 	rdlong	arg01, local02
193bc     40 8E 86 F1 | 	sub	local02, #64
193c0     3A 91 02 FB | 	rdlong	local03, arg01
193c4     04 74 06 F1 | 	add	arg01, #4
193c8     3A 93 02 FB | 	rdlong	local04, arg01
193cc     46 75 02 F6 | 	mov	arg01, local01
193d0     C9 94 02 F6 | 	mov	local05, objptr
193d4     48 93 01 F6 | 	mov	objptr, local03
193d8     2D 92 62 FD | 	call	local04
193dc     4A 93 01 F6 | 	mov	objptr, local05
193e0     1A 97 02 F6 | 	mov	local06, result1
193e4     FF FF 7F FF 
193e8     F2 97 0E F2 | 	cmp	local06, ##-14 wz
193ec     2C 00 90 5D |  if_ne	jmp	#LR__0797
193f0     3C 8E 06 F1 | 	add	local02, #60
193f4     47 97 02 FB | 	rdlong	local06, local02
193f8     4B 91 02 FB | 	rdlong	local03, local06
193fc     04 96 06 F1 | 	add	local06, #4
19400     4B 93 02 FB | 	rdlong	local04, local06
19404     46 75 02 F6 | 	mov	arg01, local01
19408     C9 94 02 F6 | 	mov	local05, objptr
1940c     48 93 01 F6 | 	mov	objptr, local03
19410     2D 92 62 FD | 	call	local04
19414     4A 93 01 F6 | 	mov	objptr, local05
19418     1A 97 02 F6 | 	mov	local06, result1
1941c                 | LR__0797
1941c     00 96 0E F2 | 	cmp	local06, #0 wz
19420     1C 00 90 AD |  if_e	jmp	#LR__0798
19424                 | '         return _seterror(-r);
19424     4B 75 6A F6 | 	neg	arg01, local06 wz
19428     18 A2 05 F1 | 	add	ptr___system__dat__, #24
1942c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
19430     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
19434     01 34 66 56 |  if_ne	neg	result1, #1
19438     00 34 06 A6 |  if_e	mov	result1, #0
1943c     04 00 90 FD | 	jmp	#LR__0799
19440                 | LR__0798
19440                 | '     }
19440                 | '     return 0;
19440     00 34 06 F6 | 	mov	result1, #0
19444                 | LR__0799
19444     A8 F0 03 F6 | 	mov	ptra, fp
19448     B3 00 A0 FD | 	call	#popregs_
1944c                 | __remove_ret
1944c     2D 00 64 FD | 	ret
19450                 | 
19450                 | _read_register_1634
19450     02 4C 05 F6 | 	mov	COUNT_, #2
19454     A9 00 A0 FD | 	call	#pushregs_
19458     3A 8D 02 F6 | 	mov	local01, arg01
1945c     C9 8E 02 F6 | 	mov	local02, objptr
19460     46 93 01 F6 | 	mov	objptr, local01
19464     68 2A B0 FD | 	call	#_jm_i2c_spin2_start
19468     46 93 01 F6 | 	mov	objptr, local01
1946c     0C 8C 06 F1 | 	add	local01, #12
19470     46 75 C2 FA | 	rdbyte	arg01, local01
19474     0C 8C 86 F1 | 	sub	local01, #12
19478     9C 2A B0 FD | 	call	#_jm_i2c_spin2_write
1947c     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19480     46 93 01 F6 | 	mov	objptr, local01
19484     90 2A B0 FD | 	call	#_jm_i2c_spin2_write
19488     46 93 01 F6 | 	mov	objptr, local01
1948c     40 2A B0 FD | 	call	#_jm_i2c_spin2_start
19490     46 93 01 F6 | 	mov	objptr, local01
19494     0D 8C 06 F1 | 	add	local01, #13
19498     46 75 C2 FA | 	rdbyte	arg01, local01
1949c     0D 8C 86 F1 | 	sub	local01, #13
194a0     74 2A B0 FD | 	call	#_jm_i2c_spin2_write
194a4     01 74 06 F6 | 	mov	arg01, #1
194a8     46 93 01 F6 | 	mov	objptr, local01
194ac     F0 2A B0 FD | 	call	#_jm_i2c_spin2_read
194b0     1A 77 02 F6 | 	mov	arg02, result1
194b4     46 93 01 F6 | 	mov	objptr, local01
194b8     6C 2B B0 FD | 	call	#_jm_i2c_spin2_stop
194bc     47 93 01 F6 | 	mov	objptr, local02
194c0                 | ' {
194c0                 | '     uint8_t rdata = 0xFF;
194c0                 | ' 
194c0                 | '     mcp23017->i2cBus.start();
194c0                 | '     mcp23017->i2cBus.write(mcp23017->writeAddr);
194c0                 | '     mcp23017->i2cBus.write(addr);
194c0                 | '     mcp23017->i2cBus.start();
194c0                 | '     mcp23017->i2cBus.write(mcp23017->readAddr);
194c0                 | '     rdata = mcp23017->i2cBus.read(1);
194c0                 | '     mcp23017->i2cBus.stop();
194c0                 | '     return rdata;
194c0     3B 35 02 F6 | 	mov	result1, arg02
194c4     A8 F0 03 F6 | 	mov	ptra, fp
194c8     B3 00 A0 FD | 	call	#popregs_
194cc                 | _read_register_1634_ret
194cc     2D 00 64 FD | 	ret
194d0                 | 
194d0                 | _write_register_1636
194d0     03 4C 05 F6 | 	mov	COUNT_, #3
194d4     A9 00 A0 FD | 	call	#pushregs_
194d8     3A 8D 02 F6 | 	mov	local01, arg01
194dc     C9 8E 02 F6 | 	mov	local02, objptr
194e0     46 93 01 F6 | 	mov	objptr, local01
194e4     E8 29 B0 FD | 	call	#_jm_i2c_spin2_start
194e8     46 93 01 F6 | 	mov	objptr, local01
194ec     0C 8C 06 F1 | 	add	local01, #12
194f0     46 75 C2 FA | 	rdbyte	arg01, local01
194f4     0C 8C 86 F1 | 	sub	local01, #12
194f8     1C 2A B0 FD | 	call	#_jm_i2c_spin2_write
194fc     1A 91 02 F6 | 	mov	local03, result1
19500     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19504     46 93 01 F6 | 	mov	objptr, local01
19508     0C 2A B0 FD | 	call	#_jm_i2c_spin2_write
1950c     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
19510     46 93 01 F6 | 	mov	objptr, local01
19514     00 2A B0 FD | 	call	#_jm_i2c_spin2_write
19518     46 93 01 F6 | 	mov	objptr, local01
1951c     08 2B B0 FD | 	call	#_jm_i2c_spin2_stop
19520     47 93 01 F6 | 	mov	objptr, local02
19524                 | ' 
19524                 | '     mcp23017->i2cBus.start();
19524                 | '     ack = mcp23017->i2cBus.write(mcp23017->writeAddr);
19524                 | '     mcp23017->i2cBus.write(addr);
19524                 | '     mcp23017->i2cBus.write(value);
19524                 | '     mcp23017->i2cBus.stop();
19524                 | '     return ack == 0;
19524     00 90 0E F2 | 	cmp	local03, #0 wz
19528     6E 34 62 FD | 	wrz	result1
1952c     A8 F0 03 F6 | 	mov	ptra, fp
19530     B3 00 A0 FD | 	call	#popregs_
19534                 | _write_register_1636_ret
19534     2D 00 64 FD | 	ret
19538                 | 
19538                 | _isOneOfThem
19538                 | ' {
19538                 | '     while (*set != '\0')
19538                 | LR__0800
19538     3B 3B CA FA | 	rdbyte	_var01, arg02 wz
1953c     20 00 90 AD |  if_e	jmp	#LR__0801
19540     3A 3B E2 F8 | 	getbyte	_var01, arg01, #0
19544     3B 3D 02 F6 | 	mov	_var02, arg02
19548     1E 3F C2 FA | 	rdbyte	_var03, _var02
1954c     1F 3B 0A F2 | 	cmp	_var01, _var03 wz
19550                 | '             return  (1) ;
19550     01 76 06 F1 | 	add	arg02, #1
19554     01 34 06 A6 |  if_e	mov	result1, #1
19558     08 00 90 AD |  if_e	jmp	#_isOneOfThem_ret
1955c     D8 FF 9F FD | 	jmp	#LR__0800
19560                 | LR__0801
19560                 | '     }
19560                 | '     return  (0) ;
19560     00 34 06 F6 | 	mov	result1, #0
19564                 | _isOneOfThem_ret
19564     2D 00 64 FD | 	ret
19568                 | 
19568                 | _goWhile
19568     02 4C 05 F6 | 	mov	COUNT_, #2
1956c     A9 00 A0 FD | 	call	#pushregs_
19570     3A 8D 02 F6 | 	mov	local01, arg01
19574     3B 8F 02 F6 | 	mov	local02, arg02
19578                 | ' {
19578                 | '     for (; *str != '\0'; ++str)
19578                 | LR__0802
19578     46 77 CA FA | 	rdbyte	arg02, local01 wz
1957c     20 00 90 AD |  if_e	jmp	#LR__0803
19580     46 75 C2 FA | 	rdbyte	arg01, local01
19584     47 77 02 F6 | 	mov	arg02, local02
19588     AC FF BF FD | 	call	#_isOneOfThem
1958c     00 34 0E F2 | 	cmp	result1, #0 wz
19590                 | '             return str;
19590     46 35 02 A6 |  if_e	mov	result1, local01
19594     0C 00 90 AD |  if_e	jmp	#LR__0804
19598     01 8C 06 F1 | 	add	local01, #1
1959c     D8 FF 9F FD | 	jmp	#LR__0802
195a0                 | LR__0803
195a0                 | '     }
195a0                 | '     return 0;
195a0     00 34 06 F6 | 	mov	result1, #0
195a4                 | LR__0804
195a4     A8 F0 03 F6 | 	mov	ptra, fp
195a8     B3 00 A0 FD | 	call	#popregs_
195ac                 | _goWhile_ret
195ac     2D 00 64 FD | 	ret
195b0                 | 
195b0                 | _goNum
195b0     01 4C 05 F6 | 	mov	COUNT_, #1
195b4     A9 00 A0 FD | 	call	#pushregs_
195b8     3A 8D 02 F6 | 	mov	local01, arg01
195bc                 | ' {
195bc                 | '     for (; *str != '\0'; ++str)
195bc                 | LR__0805
195bc     46 75 CA FA | 	rdbyte	arg01, local01 wz
195c0     34 00 90 AD |  if_e	jmp	#LR__0806
195c4     46 75 C2 FA | 	rdbyte	arg01, local01
195c8                 | ' {
195c8                 | '   return  (__ctype_get(c) & 0x02 ) ;
195c8     80 74 36 F3 | 	fle	arg01, #128 wc
195cc                 | '     return __ctype[c];
195cc     56 01 00 FF 
195d0     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
195d4     EB 74 02 F1 | 	add	arg01, ptr__dat__
195d8     3A 35 C2 FA | 	rdbyte	result1, arg01
195dc     56 01 00 FF 
195e0     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
195e4     02 34 0E F5 | 	and	result1, #2 wz
195e8                 | '             return str;
195e8     46 35 02 A6 |  if_e	mov	result1, local01
195ec     0C 00 90 AD |  if_e	jmp	#LR__0807
195f0     01 8C 06 F1 | 	add	local01, #1
195f4     C4 FF 9F FD | 	jmp	#LR__0805
195f8                 | LR__0806
195f8                 | '     }
195f8                 | '     return 0;
195f8     00 34 06 F6 | 	mov	result1, #0
195fc                 | LR__0807
195fc     A8 F0 03 F6 | 	mov	ptra, fp
19600     B3 00 A0 FD | 	call	#popregs_
19604                 | _goNum_ret
19604     2D 00 64 FD | 	ret
19608                 | 
19608                 | _setToNull
19608     01 4C 05 F6 | 	mov	COUNT_, #1
1960c     A9 00 A0 FD | 	call	#pushregs_
19610     3A 8D 02 F6 | 	mov	local01, arg01
19614     46 75 C2 FA | 	rdbyte	arg01, local01
19618     57 01 00 FF 
1961c     CC 77 06 F6 | 	mov	arg02, ##@LR__2295
19620     14 FF BF FD | 	call	#_isOneOfThem
19624     00 34 0E F2 | 	cmp	result1, #0 wz
19628     46 35 02 A6 |  if_e	mov	result1, local01
1962c     01 8C 06 A1 |  if_e	add	local01, #1
19630     1A 01 48 AC |  if_e	wrbyte	#0, result1
19634                 | '         *ch++ = '\0';
19634                 | '     return ch;
19634     46 35 02 F6 | 	mov	result1, local01
19638     A8 F0 03 F6 | 	mov	ptra, fp
1963c     B3 00 A0 FD | 	call	#popregs_
19640                 | _setToNull_ret
19640     2D 00 64 FD | 	ret
19644                 | 
19644                 | _isEndOfPrimitive
19644     07 4C 05 F6 | 	mov	COUNT_, #7
19648     A9 00 A0 FD | 	call	#pushregs_
1964c     3A 8D 02 F6 | 	mov	local01, arg01
19650                 | ' {
19650                 | '     return ch == ',' || isOneOfThem(ch, " \n\r\t\f") || isOneOfThem(ch, "}]");
19650     00 8E 06 F6 | 	mov	local02, #0
19654     46 91 E2 F8 | 	getbyte	local03, local01, #0
19658     2C 90 0E F2 | 	cmp	local03, #44 wz
1965c     38 00 90 AD |  if_e	jmp	#LR__0808
19660     57 01 00 FF 
19664     CF 77 06 F6 | 	mov	arg02, ##@LR__2296
19668     46 75 02 F6 | 	mov	arg01, local01
1966c     C8 FE BF FD | 	call	#_isOneOfThem
19670     1A 93 0A F6 | 	mov	local04, result1 wz
19674     20 00 90 5D |  if_ne	jmp	#LR__0808
19678     57 01 00 FF 
1967c     D5 95 06 F6 | 	mov	local05, ##@LR__2297
19680     4A 97 02 F6 | 	mov	local06, local05
19684     46 75 02 F6 | 	mov	arg01, local01
19688     4B 77 02 F6 | 	mov	arg02, local06
1968c     A8 FE BF FD | 	call	#_isOneOfThem
19690     1A 99 0A F6 | 	mov	local07, result1 wz
19694     04 00 90 AD |  if_e	jmp	#LR__0809
19698                 | LR__0808
19698     01 8E 66 F5 | 	xor	local02, #1
1969c                 | LR__0809
1969c     47 35 02 F6 | 	mov	result1, local02
196a0     A8 F0 03 F6 | 	mov	ptra, fp
196a4     B3 00 A0 FD | 	call	#popregs_
196a8                 | _isEndOfPrimitive_ret
196a8     2D 00 64 FD | 	ret
196ac                 | 
196ac                 | _getEscape
196ac                 | '     for (i = 0; i < sizeof pair / sizeof *pair; ++i)
196ac     00 3A 06 F6 | 	mov	_var01, #0
196b0                 | LR__0810
196b0     08 3A 16 F2 | 	cmp	_var01, #8 wc
196b4     5C 00 90 3D |  if_ae	jmp	#LR__0812
196b8     1D 35 02 F6 | 	mov	result1, _var01
196bc     02 34 66 F0 | 	shl	result1, #2
196c0     17 01 00 FF 
196c4     54 D6 05 F1 | 	add	ptr__dat__, ##142932
196c8     EB 34 02 F1 | 	add	result1, ptr__dat__
196cc     1A 35 C2 FA | 	rdbyte	result1, result1
196d0     3A 3D E2 F8 | 	getbyte	_var02, arg01, #0
196d4     1E 35 0A F2 | 	cmp	result1, _var02 wz
196d8     17 01 00 FF 
196dc     54 D6 85 F1 | 	sub	ptr__dat__, ##142932
196e0     28 00 90 5D |  if_ne	jmp	#LR__0811
196e4                 | '             return pair[i].code;
196e4     1D 35 02 F6 | 	mov	result1, _var01
196e8     02 34 66 F0 | 	shl	result1, #2
196ec     17 01 00 FF 
196f0     54 D6 05 F1 | 	add	ptr__dat__, ##142932
196f4     EB 34 02 F1 | 	add	result1, ptr__dat__
196f8     01 34 06 F1 | 	add	result1, #1
196fc     1A 35 C2 FA | 	rdbyte	result1, result1
19700     17 01 00 FF 
19704     54 D6 85 F1 | 	sub	ptr__dat__, ##142932
19708     0C 00 90 FD | 	jmp	#_getEscape_ret
1970c                 | LR__0811
1970c     01 3A 06 F1 | 	add	_var01, #1
19710     9C FF 9F FD | 	jmp	#LR__0810
19714                 | LR__0812
19714                 | '     return '\0';
19714     00 34 06 F6 | 	mov	result1, #0
19718                 | _getEscape_ret
19718     2D 00 64 FD | 	ret
1971c                 | 
1971c                 | _getCharFromUnicode
1971c     02 4C 05 F6 | 	mov	COUNT_, #2
19720     A9 00 A0 FD | 	call	#pushregs_
19724     3A 8D 02 F6 | 	mov	local01, arg01
19728                 | '     for (i = 0; i < 4; ++i)
19728     00 8E 06 F6 | 	mov	local02, #0
1972c                 | LR__0813
1972c     04 8E 16 F2 | 	cmp	local02, #4 wc
19730     3C 00 90 3D |  if_ae	jmp	#LR__0814
19734     47 75 02 F6 | 	mov	arg01, local02
19738     46 75 02 F1 | 	add	arg01, local01
1973c     3A 75 C2 FA | 	rdbyte	arg01, arg01
19740                 | ' {
19740                 | '   return  (__ctype_get(c) & 0x40 ) ;
19740     80 74 36 F3 | 	fle	arg01, #128 wc
19744                 | '     return __ctype[c];
19744     56 01 00 FF 
19748     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
1974c     EB 74 02 F1 | 	add	arg01, ptr__dat__
19750     3A 35 C2 FA | 	rdbyte	result1, arg01
19754     56 01 00 FF 
19758     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
1975c     40 34 0E F5 | 	and	result1, #64 wz
19760                 | '             return '\0';
19760     00 34 06 A6 |  if_e	mov	result1, #0
19764     0C 00 90 AD |  if_e	jmp	#LR__0815
19768     01 8E 06 F1 | 	add	local02, #1
1976c     BC FF 9F FD | 	jmp	#LR__0813
19770                 | LR__0814
19770                 | '     return '?';
19770     3F 34 06 F6 | 	mov	result1, #63
19774                 | LR__0815
19774     A8 F0 03 F6 | 	mov	ptra, fp
19778     B3 00 A0 FD | 	call	#popregs_
1977c                 | _getCharFromUnicode_ret
1977c     2D 00 64 FD | 	ret
19780                 | 
19780                 | _parseString
19780     06 4C 05 F6 | 	mov	COUNT_, #6
19784     A9 00 A0 FD | 	call	#pushregs_
19788     3A 8D 02 F6 | 	mov	local01, arg01
1978c     46 8F 02 F6 | 	mov	local02, local01
19790                 | '     for (; *head; ++head, ++tail)
19790                 | LR__0816
19790     47 91 CA FA | 	rdbyte	local03, local02 wz
19794     98 00 90 AD |  if_e	jmp	#LR__0820
19798     47 93 C2 FA | 	rdbyte	local04, local02
1979c     22 92 0E F2 | 	cmp	local04, #34 wz
197a0     46 01 48 AC |  if_e	wrbyte	#0, local01
197a4                 | '         {
197a4                 | '             *tail = '\0';
197a4                 | '             return (char *)++head;
197a4     01 8E 06 A1 |  if_e	add	local02, #1
197a8     47 35 02 A6 |  if_e	mov	result1, local02
197ac     84 00 90 AD |  if_e	jmp	#LR__0821
197b0     47 93 C2 FA | 	rdbyte	local04, local02
197b4     5C 92 0E F2 | 	cmp	local04, #92 wz
197b8     60 00 90 5D |  if_ne	jmp	#LR__0818
197bc     01 8E 06 F1 | 	add	local02, #1
197c0     47 93 C2 FA | 	rdbyte	local04, local02
197c4     75 92 0E F2 | 	cmp	local04, #117 wz
197c8     2C 00 90 5D |  if_ne	jmp	#LR__0817
197cc     01 8E 06 F1 | 	add	local02, #1
197d0     47 75 02 F6 | 	mov	arg01, local02
197d4     44 FF BF FD | 	call	#_getCharFromUnicode
197d8     1A 95 02 F6 | 	mov	local05, result1
197dc     4A 93 02 F6 | 	mov	local04, local05
197e0     07 92 4E F7 | 	zerox	local04, #7 wz
197e4                 | '                     return 0;
197e4     00 34 06 A6 |  if_e	mov	result1, #0
197e8     48 00 90 AD |  if_e	jmp	#LR__0821
197ec     46 95 42 FC | 	wrbyte	local05, local01
197f0     03 8E 06 F1 | 	add	local02, #3
197f4     2C 00 90 FD | 	jmp	#LR__0819
197f8                 | LR__0817
197f8     47 75 C2 FA | 	rdbyte	arg01, local02
197fc     AC FE BF FD | 	call	#_getEscape
19800     1A 97 02 F6 | 	mov	local06, result1
19804     4B 93 02 F6 | 	mov	local04, local06
19808     07 92 4E F7 | 	zerox	local04, #7 wz
1980c                 | '                     return 0;
1980c     00 34 06 A6 |  if_e	mov	result1, #0
19810     20 00 90 AD |  if_e	jmp	#LR__0821
19814     46 97 42 FC | 	wrbyte	local06, local01
19818     08 00 90 FD | 	jmp	#LR__0819
1981c                 | LR__0818
1981c     47 93 C2 FA | 	rdbyte	local04, local02
19820     46 93 42 FC | 	wrbyte	local04, local01
19824                 | LR__0819
19824     01 8E 06 F1 | 	add	local02, #1
19828     01 8C 06 F1 | 	add	local01, #1
1982c     60 FF 9F FD | 	jmp	#LR__0816
19830                 | LR__0820
19830                 | '             *tail = *head;
19830                 | '     }
19830                 | '     return 0;
19830     00 34 06 F6 | 	mov	result1, #0
19834                 | LR__0821
19834     A8 F0 03 F6 | 	mov	ptra, fp
19838     B3 00 A0 FD | 	call	#popregs_
1983c                 | _parseString_ret
1983c     2D 00 64 FD | 	ret
19840                 | 
19840                 | _propertyName
19840     03 4C 05 F6 | 	mov	COUNT_, #3
19844     A9 00 A0 FD | 	call	#pushregs_
19848     3B 8D 02 F6 | 	mov	local01, arg02
1984c     01 74 06 F1 | 	add	arg01, #1
19850     04 8C 06 F1 | 	add	local01, #4
19854     46 75 62 FC | 	wrlong	arg01, local01
19858     24 FF BF FD | 	call	#_parseString
1985c     1A 8D 0A F6 | 	mov	local01, result1 wz
19860                 | '         return 0;
19860     00 34 06 A6 |  if_e	mov	result1, #0
19864     3C 00 90 AD |  if_e	jmp	#LR__0822
19868     46 75 02 F6 | 	mov	arg01, local01
1986c                 | ' {
1986c                 | '     return goWhile(str, " \n\r\t\f");
1986c     57 01 00 FF 
19870     C6 77 06 F6 | 	mov	arg02, ##@LR__2294
19874     F0 FC BF FD | 	call	#_goWhile
19878     1A 8F 0A F6 | 	mov	local02, result1 wz
1987c                 | '         return 0;
1987c     00 34 06 A6 |  if_e	mov	result1, #0
19880     20 00 90 AD |  if_e	jmp	#LR__0822
19884     47 91 C2 FA | 	rdbyte	local03, local02
19888     3A 90 0E F2 | 	cmp	local03, #58 wz
1988c                 | '         return 0;
1988c     01 8E 06 F1 | 	add	local02, #1
19890     00 34 06 56 |  if_ne	mov	result1, #0
19894                 | '     return goBlank(ptr);
19894     47 75 02 A6 |  if_e	mov	arg01, local02
19898                 | ' {
19898                 | '     return goWhile(str, " \n\r\t\f");
19898     57 01 00 AF 
1989c     C6 77 06 A6 |  if_e	mov	arg02, ##@LR__2294
198a0     C4 FC BF AD |  if_e	call	#_goWhile
198a4                 | LR__0822
198a4     A8 F0 03 F6 | 	mov	ptra, fp
198a8     B3 00 A0 FD | 	call	#popregs_
198ac                 | _propertyName_ret
198ac     2D 00 64 FD | 	ret
198b0                 | 
198b0                 | _textValue
198b0     02 4C 05 F6 | 	mov	COUNT_, #2
198b4     A9 00 A0 FD | 	call	#pushregs_
198b8     3B 8D 02 F6 | 	mov	local01, arg02
198bc     08 8C 06 F1 | 	add	local01, #8
198c0     46 8F 02 FB | 	rdlong	local02, local01
198c4     01 8E 06 F1 | 	add	local02, #1
198c8     46 8F 62 FC | 	wrlong	local02, local01
198cc     08 8C 86 F1 | 	sub	local01, #8
198d0     01 74 06 F1 | 	add	arg01, #1
198d4     A8 FE BF FD | 	call	#_parseString
198d8     1A 8F 0A F6 | 	mov	local02, result1 wz
198dc                 | '         return 0;
198dc     00 34 06 A6 |  if_e	mov	result1, #0
198e0     10 8C 06 51 |  if_ne	add	local01, #16
198e4     46 05 68 5C |  if_ne	wrlong	#2, local01
198e8                 | '     property->type = JSON_TEXT;
198e8                 | '     return ptr;
198e8     47 35 02 56 |  if_ne	mov	result1, local02
198ec     A8 F0 03 F6 | 	mov	ptra, fp
198f0     B3 00 A0 FD | 	call	#popregs_
198f4                 | _textValue_ret
198f4     2D 00 64 FD | 	ret
198f8                 | 
198f8                 | _checkStr
198f8                 | ' {
198f8                 | '     while (*str)
198f8                 | LR__0823
198f8     3B 3B CA FA | 	rdbyte	_var01, arg02 wz
198fc     28 00 90 AD |  if_e	jmp	#LR__0824
19900     3A 3D 02 F6 | 	mov	_var02, arg01
19904     1E 3B C2 FA | 	rdbyte	_var01, _var02
19908     3B 3F 02 F6 | 	mov	_var03, arg02
1990c     1F 41 C2 FA | 	rdbyte	_var04, _var03
19910     20 3B 0A F2 | 	cmp	_var01, _var04 wz
19914                 | '             return 0;
19914     01 74 06 F1 | 	add	arg01, #1
19918     01 76 06 F1 | 	add	arg02, #1
1991c     00 34 06 56 |  if_ne	mov	result1, #0
19920     08 00 90 5D |  if_ne	jmp	#_checkStr_ret
19924     D0 FF 9F FD | 	jmp	#LR__0823
19928                 | LR__0824
19928                 | '     return ptr;
19928     3A 35 02 F6 | 	mov	result1, arg01
1992c                 | _checkStr_ret
1992c     2D 00 64 FD | 	ret
19930                 | 
19930                 | _primitiveValue
19930     03 4C 05 F6 | 	mov	COUNT_, #3
19934     A9 00 A0 FD | 	call	#pushregs_
19938     3B 8D 02 F6 | 	mov	local01, arg02
1993c     3D 8F 02 F6 | 	mov	local02, arg04
19940     3C 77 02 F6 | 	mov	arg02, arg03
19944     B0 FF BF FD | 	call	#_checkStr
19948     1A 91 0A F6 | 	mov	local03, result1 wz
1994c     10 00 90 AD |  if_e	jmp	#LR__0825
19950     48 75 C2 FA | 	rdbyte	arg01, local03
19954     EC FC BF FD | 	call	#_isEndOfPrimitive
19958     00 34 4E F2 | 	cmps	result1, #0 wz
1995c     08 00 90 5D |  if_ne	jmp	#LR__0826
19960                 | LR__0825
19960                 | '         return 0;
19960     00 34 06 F6 | 	mov	result1, #0
19964     10 00 90 FD | 	jmp	#LR__0827
19968                 | LR__0826
19968     48 75 02 F6 | 	mov	arg01, local03
1996c     98 FC BF FD | 	call	#_setToNull
19970     10 8C 06 F1 | 	add	local01, #16
19974     46 8F 62 FC | 	wrlong	local02, local01
19978                 | '     ptr = setToNull(ptr);
19978                 | '     property->type = type;
19978                 | '     return ptr;
19978                 | LR__0827
19978     A8 F0 03 F6 | 	mov	ptra, fp
1997c     B3 00 A0 FD | 	call	#popregs_
19980                 | _primitiveValue_ret
19980     2D 00 64 FD | 	ret
19984                 | 
19984                 | _expValue
19984     01 4C 05 F6 | 	mov	COUNT_, #1
19988     A9 00 A0 FD | 	call	#pushregs_
1998c     3A 8D 02 F6 | 	mov	local01, arg01
19990     46 75 C2 FA | 	rdbyte	arg01, local01
19994     2D 74 0E F2 | 	cmp	arg01, #45 wz
19998     46 75 C2 5A |  if_ne	rdbyte	arg01, local01
1999c     2B 74 0E 52 |  if_ne	cmp	arg01, #43 wz
199a0     01 8C 06 A1 |  if_e	add	local01, #1
199a4     46 75 C2 FA | 	rdbyte	arg01, local01
199a8                 | ' {
199a8                 | '   return  (__ctype_get(c) & 0x02 ) ;
199a8     80 74 36 F3 | 	fle	arg01, #128 wc
199ac                 | '     return __ctype[c];
199ac     56 01 00 FF 
199b0     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
199b4     EB 74 02 F1 | 	add	arg01, ptr__dat__
199b8     3A 35 C2 FA | 	rdbyte	result1, arg01
199bc     56 01 00 FF 
199c0     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
199c4     02 34 0E F5 | 	and	result1, #2 wz
199c8                 | '         return 0;
199c8     00 34 06 A6 |  if_e	mov	result1, #0
199cc     01 8C 06 51 |  if_ne	add	local01, #1
199d0     46 75 02 56 |  if_ne	mov	arg01, local01
199d4     D8 FB BF 5D |  if_ne	call	#_goNum
199d8                 | '     ptr = goNum(++ptr);
199d8                 | '     return ptr;
199d8     A8 F0 03 F6 | 	mov	ptra, fp
199dc     B3 00 A0 FD | 	call	#popregs_
199e0                 | _expValue_ret
199e0     2D 00 64 FD | 	ret
199e4                 | 
199e4                 | _fraqValue
199e4     01 4C 05 F6 | 	mov	COUNT_, #1
199e8     A9 00 A0 FD | 	call	#pushregs_
199ec     3A 8D 02 F6 | 	mov	local01, arg01
199f0     46 75 C2 FA | 	rdbyte	arg01, local01
199f4                 | ' {
199f4                 | '   return  (__ctype_get(c) & 0x02 ) ;
199f4     80 74 36 F3 | 	fle	arg01, #128 wc
199f8                 | '     return __ctype[c];
199f8     56 01 00 FF 
199fc     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
19a00     EB 74 02 F1 | 	add	arg01, ptr__dat__
19a04     3A 35 C2 FA | 	rdbyte	result1, arg01
19a08     56 01 00 FF 
19a0c     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
19a10     02 34 0E F5 | 	and	result1, #2 wz
19a14                 | '         return 0;
19a14     00 34 06 A6 |  if_e	mov	result1, #0
19a18     18 00 90 AD |  if_e	jmp	#LR__0828
19a1c     01 8C 06 F1 | 	add	local01, #1
19a20     46 75 02 F6 | 	mov	arg01, local01
19a24     88 FB BF FD | 	call	#_goNum
19a28     1A 8D 0A F6 | 	mov	local01, result1 wz
19a2c                 | '         return 0;
19a2c     00 34 06 A6 |  if_e	mov	result1, #0
19a30                 | '     return ptr;
19a30     46 35 02 56 |  if_ne	mov	result1, local01
19a34                 | LR__0828
19a34     A8 F0 03 F6 | 	mov	ptra, fp
19a38     B3 00 A0 FD | 	call	#popregs_
19a3c                 | _fraqValue_ret
19a3c     2D 00 64 FD | 	ret
19a40                 | 
19a40                 | _numValue
19a40     06 4C 05 F6 | 	mov	COUNT_, #6
19a44     A9 00 A0 FD | 	call	#pushregs_
19a48     3A 8D 02 F6 | 	mov	local01, arg01
19a4c     3B 8F 02 F6 | 	mov	local02, arg02
19a50     46 75 C2 FA | 	rdbyte	arg01, local01
19a54     2D 74 0E F2 | 	cmp	arg01, #45 wz
19a58     01 8C 06 A1 |  if_e	add	local01, #1
19a5c     46 91 C2 FA | 	rdbyte	local03, local01
19a60     48 75 02 F6 | 	mov	arg01, local03
19a64                 | ' {
19a64                 | '   return  (__ctype_get(c) & 0x02 ) ;
19a64     80 74 36 F3 | 	fle	arg01, #128 wc
19a68                 | '     return __ctype[c];
19a68     56 01 00 FF 
19a6c     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
19a70     EB 74 02 F1 | 	add	arg01, ptr__dat__
19a74     3A 35 C2 FA | 	rdbyte	result1, arg01
19a78     56 01 00 FF 
19a7c     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
19a80     02 34 0E F5 | 	and	result1, #2 wz
19a84                 | '         return 0;
19a84     00 34 06 A6 |  if_e	mov	result1, #0
19a88     8C 01 90 AD |  if_e	jmp	#LR__0835
19a8c     46 75 C2 FA | 	rdbyte	arg01, local01
19a90     30 74 0E F2 | 	cmp	arg01, #48 wz
19a94     18 00 90 AD |  if_e	jmp	#LR__0829
19a98     46 75 02 F6 | 	mov	arg01, local01
19a9c     10 FB BF FD | 	call	#_goNum
19aa0     1A 8D 0A F6 | 	mov	local01, result1 wz
19aa4                 | '             return 0;
19aa4     00 34 06 A6 |  if_e	mov	result1, #0
19aa8     6C 01 90 AD |  if_e	jmp	#LR__0835
19aac     30 00 90 FD | 	jmp	#LR__0830
19ab0                 | LR__0829
19ab0     01 8C 06 F1 | 	add	local01, #1
19ab4     46 75 C2 FA | 	rdbyte	arg01, local01
19ab8                 | ' {
19ab8                 | '   return  (__ctype_get(c) & 0x02 ) ;
19ab8     80 74 36 F3 | 	fle	arg01, #128 wc
19abc                 | '     return __ctype[c];
19abc     56 01 00 FF 
19ac0     A0 D6 05 F1 | 	add	ptr__dat__, ##175264
19ac4     EB 74 02 F1 | 	add	arg01, ptr__dat__
19ac8     3A 35 C2 FA | 	rdbyte	result1, arg01
19acc     56 01 00 FF 
19ad0     A0 D6 85 F1 | 	sub	ptr__dat__, ##175264
19ad4     02 34 0E F5 | 	and	result1, #2 wz
19ad8                 | '         return 0;
19ad8     00 34 06 56 |  if_ne	mov	result1, #0
19adc     38 01 90 5D |  if_ne	jmp	#LR__0835
19ae0                 | LR__0830
19ae0     10 8E 06 F1 | 	add	local02, #16
19ae4     47 09 68 FC | 	wrlong	#4, local02
19ae8     10 8E 86 F1 | 	sub	local02, #16
19aec     46 75 C2 FA | 	rdbyte	arg01, local01
19af0     2E 74 0E F2 | 	cmp	arg01, #46 wz
19af4     24 00 90 5D |  if_ne	jmp	#LR__0831
19af8     01 8C 06 F1 | 	add	local01, #1
19afc     46 75 02 F6 | 	mov	arg01, local01
19b00     E0 FE BF FD | 	call	#_fraqValue
19b04     1A 8D 0A F6 | 	mov	local01, result1 wz
19b08                 | '             return 0;
19b08     00 34 06 A6 |  if_e	mov	result1, #0
19b0c     08 01 90 AD |  if_e	jmp	#LR__0835
19b10     10 8E 06 F1 | 	add	local02, #16
19b14     47 0B 68 FC | 	wrlong	#5, local02
19b18     10 8E 86 F1 | 	sub	local02, #16
19b1c                 | LR__0831
19b1c     46 75 C2 FA | 	rdbyte	arg01, local01
19b20     65 74 0E F2 | 	cmp	arg01, #101 wz
19b24     46 91 C2 5A |  if_ne	rdbyte	local03, local01
19b28     45 90 0E 52 |  if_ne	cmp	local03, #69 wz
19b2c     24 00 90 5D |  if_ne	jmp	#LR__0832
19b30     01 8C 06 F1 | 	add	local01, #1
19b34     46 75 02 F6 | 	mov	arg01, local01
19b38     48 FE BF FD | 	call	#_expValue
19b3c     1A 8D 0A F6 | 	mov	local01, result1 wz
19b40                 | '             return 0;
19b40     00 34 06 A6 |  if_e	mov	result1, #0
19b44     D0 00 90 AD |  if_e	jmp	#LR__0835
19b48     10 8E 06 F1 | 	add	local02, #16
19b4c     47 0B 68 FC | 	wrlong	#5, local02
19b50     10 8E 86 F1 | 	sub	local02, #16
19b54                 | LR__0832
19b54     46 75 C2 FA | 	rdbyte	arg01, local01
19b58     E8 FA BF FD | 	call	#_isEndOfPrimitive
19b5c     00 34 0E F2 | 	cmp	result1, #0 wz
19b60                 | '         return 0;
19b60     00 34 06 A6 |  if_e	mov	result1, #0
19b64     B0 00 90 AD |  if_e	jmp	#LR__0835
19b68     10 8E 06 F1 | 	add	local02, #16
19b6c     47 91 02 FB | 	rdlong	local03, local02
19b70     10 8E 86 F1 | 	sub	local02, #16
19b74     04 90 0E F2 | 	cmp	local03, #4 wz
19b78     94 00 90 5D |  if_ne	jmp	#LR__0834
19b7c     08 8E 06 F1 | 	add	local02, #8
19b80     47 75 02 FB | 	rdlong	arg01, local02
19b84     00 92 06 F6 | 	mov	local04, #0
19b88     3A 95 C2 FA | 	rdbyte	local05, arg01
19b8c     2D 94 0E F2 | 	cmp	local05, #45 wz
19b90     01 92 06 A6 |  if_e	mov	local04, #1
19b94     49 97 0A F6 | 	mov	local06, local04 wz
19b98     15 94 06 56 |  if_ne	mov	local05, #21
19b9c     14 94 06 A6 |  if_e	mov	local05, #20
19ba0     01 94 86 F1 | 	sub	local05, #1
19ba4     46 91 02 F6 | 	mov	local03, local01
19ba8     3A 91 82 F1 | 	sub	local03, arg01
19bac     4A 91 1A F2 | 	cmp	local03, local05 wcz
19bb0                 | '             return 0;
19bb0     00 34 06 16 |  if_a	mov	result1, #0
19bb4     60 00 90 1D |  if_a	jmp	#LR__0835
19bb8     4A 91 0A F2 | 	cmp	local03, local05 wz
19bbc     50 00 90 5D |  if_ne	jmp	#LR__0833
19bc0     46 95 C2 FA | 	rdbyte	local05, local01
19bc4     46 01 48 FC | 	wrbyte	#0, local01
19bc8     00 96 0E F2 | 	cmp	local06, #0 wz
19bcc     17 01 00 5F 
19bd0     74 D6 05 51 |  if_ne	add	ptr__dat__, ##142964
19bd4     EB 92 02 56 |  if_ne	mov	local04, ptr__dat__
19bd8     17 01 00 5F 
19bdc     74 D6 85 51 |  if_ne	sub	ptr__dat__, ##142964
19be0     17 01 00 AF 
19be4     89 D6 05 A1 |  if_e	add	ptr__dat__, ##142985
19be8     EB 92 02 A6 |  if_e	mov	local04, ptr__dat__
19bec     17 01 00 AF 
19bf0     89 D6 85 A1 |  if_e	sub	ptr__dat__, ##142985
19bf4     3A 77 02 F6 | 	mov	arg02, arg01
19bf8     49 75 02 F6 | 	mov	arg01, local04
19bfc     0C C5 BE FD | 	call	#_strcmp
19c00     00 34 56 F2 | 	cmps	result1, #0 wc
19c04                 | '                 return 0;
19c04     00 34 06 C6 |  if_b	mov	result1, #0
19c08     0C 00 90 CD |  if_b	jmp	#LR__0835
19c0c     46 95 42 FC | 	wrbyte	local05, local01
19c10                 | LR__0833
19c10                 | LR__0834
19c10     46 75 02 F6 | 	mov	arg01, local01
19c14     F0 F9 BF FD | 	call	#_setToNull
19c18                 | '             *ptr = tmp;
19c18                 | '         }
19c18                 | '     }
19c18                 | '     ptr = setToNull(ptr);
19c18                 | '     return ptr;
19c18                 | LR__0835
19c18     A8 F0 03 F6 | 	mov	ptra, fp
19c1c     B3 00 A0 FD | 	call	#popregs_
19c20                 | _numValue_ret
19c20     2D 00 64 FD | 	ret
19c24                 | 
19c24                 | _add
19c24     3B 01 68 FC | 	wrlong	#0, arg02
19c28     08 74 06 F1 | 	add	arg01, #8
19c2c     3A 3B 0A FB | 	rdlong	_var01, arg01 wz
19c30     08 74 86 F1 | 	sub	arg01, #8
19c34     08 74 06 A1 |  if_e	add	arg01, #8
19c38     3A 77 62 AC |  if_e	wrlong	arg02, arg01
19c3c     04 74 06 A1 |  if_e	add	arg01, #4
19c40     3A 77 62 AC |  if_e	wrlong	arg02, arg01
19c44     0C 74 06 51 |  if_ne	add	arg01, #12
19c48     3A 3B 02 5B |  if_ne	rdlong	_var01, arg01
19c4c     1D 77 62 5C |  if_ne	wrlong	arg02, _var01
19c50     3A 77 62 5C |  if_ne	wrlong	arg02, arg01
19c54                 | _add_ret
19c54     2D 00 64 FD | 	ret
19c58                 | 
19c58                 | _objValue
19c58     0E 4C 05 F6 | 	mov	COUNT_, #14
19c5c     A9 00 A0 FD | 	call	#pushregs_
19c60     3A 8D 02 F6 | 	mov	local01, arg01
19c64     3B 8F 02 F6 | 	mov	local02, arg02
19c68     3C 91 02 F6 | 	mov	local03, arg03
19c6c     46 93 C2 FA | 	rdbyte	local04, local01
19c70     7B 92 0E F2 | 	cmp	local04, #123 wz
19c74     00 94 06 A6 |  if_e	mov	local05, #0
19c78     01 94 06 56 |  if_ne	mov	local05, #1
19c7c     10 8E 06 F1 | 	add	local02, #16
19c80     47 95 62 FC | 	wrlong	local05, local02
19c84     00 94 06 F6 | 	mov	local05, #0
19c88     08 8E 86 F1 | 	sub	local02, #8
19c8c     47 01 68 FC | 	wrlong	#0, local02
19c90     08 8E 86 F1 | 	sub	local02, #8
19c94     47 01 68 FC | 	wrlong	#0, local02
19c98     01 8C 06 F1 | 	add	local01, #1
19c9c                 | ' {
19c9c                 | ' 
19c9c                 | ' 
19c9c                 | '     obj->type = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
19c9c                 | '     obj->u.c.child = 0;
19c9c                 | '     obj->sibling = 0;
19c9c                 | '     ptr++;
19c9c                 | '     for (;;)
19c9c                 | LR__0836
19c9c     46 75 02 F6 | 	mov	arg01, local01
19ca0                 | ' {
19ca0                 | '     return goWhile(str, " \n\r\t\f");
19ca0     57 01 00 FF 
19ca4     C6 77 06 F6 | 	mov	arg02, ##@LR__2294
19ca8     BC F8 BF FD | 	call	#_goWhile
19cac     1A 8D 0A F6 | 	mov	local01, result1 wz
19cb0     14 00 90 5D |  if_ne	jmp	#LR__0837
19cb4     57 01 00 FF 
19cb8     E8 75 06 F6 | 	mov	arg01, ##@LR__2301
19cbc     98 81 BE FD | 	call	#_printf
19cc0                 | '         {
19cc0                 | '             printf("Error: Unexpected goblank error.\n");
19cc0                 | '             return 0;
19cc0     00 34 06 F6 | 	mov	result1, #0
19cc4     6C 02 90 FD | 	jmp	#LR__0851
19cc8                 | LR__0837
19cc8     46 95 C2 FA | 	rdbyte	local05, local01
19ccc     2C 94 0E F2 | 	cmp	local05, #44 wz
19cd0     01 8C 06 A1 |  if_e	add	local01, #1
19cd4                 | '         {
19cd4                 | '             ++ptr;
19cd4                 | '             continue;
19cd4     C4 FF 9F AD |  if_e	jmp	#LR__0836
19cd8     10 8E 06 F1 | 	add	local02, #16
19cdc     47 93 0A FB | 	rdlong	local04, local02 wz
19ce0     10 8E 86 F1 | 	sub	local02, #16
19ce4     7D 94 06 A6 |  if_e	mov	local05, #125
19ce8     5D 94 06 56 |  if_ne	mov	local05, #93
19cec     4A 97 02 F6 | 	mov	local06, local05
19cf0     46 95 C2 FA | 	rdbyte	local05, local01
19cf4     4B 93 E2 F8 | 	getbyte	local04, local06, #0
19cf8     49 95 0A F2 | 	cmp	local05, local04 wz
19cfc     24 00 90 5D |  if_ne	jmp	#LR__0838
19d00     46 01 48 FC | 	wrbyte	#0, local01
19d04     47 99 0A FB | 	rdlong	local07, local02 wz
19d08                 | '                 return ++ptr;
19d08     01 8C 06 A1 |  if_e	add	local01, #1
19d0c     46 35 02 A6 |  if_e	mov	result1, local01
19d10     20 02 90 AD |  if_e	jmp	#LR__0851
19d14     47 01 68 FC | 	wrlong	#0, local02
19d18     4C 8F 02 F6 | 	mov	local02, local07
19d1c     01 8C 06 F1 | 	add	local01, #1
19d20                 | '             obj->sibling = 0;
19d20                 | '             obj = parentObj;
19d20                 | '             ++ptr;
19d20                 | '             continue;
19d20     78 FF 9F FD | 	jmp	#LR__0836
19d24                 | LR__0838
19d24     04 90 06 F1 | 	add	local03, #4
19d28     48 9B 02 FB | 	rdlong	local08, local03
19d2c     04 90 86 F1 | 	sub	local03, #4
19d30     4D 95 02 F6 | 	mov	local05, local08
19d34     4A 93 02 FB | 	rdlong	local04, local05
19d38     04 94 06 F1 | 	add	local05, #4
19d3c     4A 9D 02 FB | 	rdlong	local09, local05
19d40     4E 9F 02 F6 | 	mov	local10, local09
19d44     48 A1 02 F6 | 	mov	local11, local03
19d48     50 75 02 F6 | 	mov	arg01, local11
19d4c     C9 A2 02 F6 | 	mov	local12, objptr
19d50     49 93 01 F6 | 	mov	objptr, local04
19d54     2D 9E 62 FD | 	call	local10
19d58     51 93 01 F6 | 	mov	objptr, local12
19d5c     1A A5 0A F6 | 	mov	local13, result1 wz
19d60     14 00 90 5D |  if_ne	jmp	#LR__0839
19d64     58 01 00 FF 
19d68     0A 74 06 F6 | 	mov	arg01, ##@LR__2302
19d6c     E8 80 BE FD | 	call	#_printf
19d70                 | '         {
19d70                 | '             printf("Error: Unexpected allocation error.\n");
19d70                 | '             return 0;
19d70     00 34 06 F6 | 	mov	result1, #0
19d74     BC 01 90 FD | 	jmp	#LR__0851
19d78                 | LR__0839
19d78     10 8E 06 F1 | 	add	local02, #16
19d7c     47 95 02 FB | 	rdlong	local05, local02
19d80     10 8E 86 F1 | 	sub	local02, #16
19d84     01 94 0E F2 | 	cmp	local05, #1 wz
19d88     48 00 90 AD |  if_e	jmp	#LR__0841
19d8c     46 95 C2 FA | 	rdbyte	local05, local01
19d90     22 94 0E F2 | 	cmp	local05, #34 wz
19d94     14 00 90 AD |  if_e	jmp	#LR__0840
19d98     58 01 00 FF 
19d9c     2F 74 06 F6 | 	mov	arg01, ##@LR__2303
19da0     B4 80 BE FD | 	call	#_printf
19da4                 | '             {
19da4                 | '                 printf("Error: Unexpected quote missing.\n");
19da4                 | '                 return 0;
19da4     00 34 06 F6 | 	mov	result1, #0
19da8     88 01 90 FD | 	jmp	#LR__0851
19dac                 | LR__0840
19dac     46 75 02 F6 | 	mov	arg01, local01
19db0     52 77 02 F6 | 	mov	arg02, local13
19db4     88 FA BF FD | 	call	#_propertyName
19db8     1A 8D 0A F6 | 	mov	local01, result1 wz
19dbc     20 00 90 5D |  if_ne	jmp	#LR__0842
19dc0     58 01 00 FF 
19dc4     51 74 06 F6 | 	mov	arg01, ##@LR__2304
19dc8     8C 80 BE FD | 	call	#_printf
19dcc                 | '             {
19dcc                 | '                 printf("Error: property name does not exist.\n");
19dcc                 | '                 return 0;
19dcc     00 34 06 F6 | 	mov	result1, #0
19dd0     60 01 90 FD | 	jmp	#LR__0851
19dd4                 | LR__0841
19dd4     04 A4 06 F1 | 	add	local13, #4
19dd8     52 01 68 FC | 	wrlong	#0, local13
19ddc     04 A4 86 F1 | 	sub	local13, #4
19de0                 | LR__0842
19de0     47 75 02 F6 | 	mov	arg01, local02
19de4     52 77 02 F6 | 	mov	arg02, local13
19de8     38 FE BF FD | 	call	#_add
19dec     08 A4 06 F1 | 	add	local13, #8
19df0     52 8D 62 FC | 	wrlong	local01, local13
19df4     08 A4 86 F1 | 	sub	local13, #8
19df8                 | '             property->name = 0;
19df8                 | '         add(obj, property);
19df8                 | '         property->u.value = ptr;
19df8                 | '         switch (*ptr)
19df8     46 A7 C2 FA | 	rdbyte	local14, local01
19dfc     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e00     7B 94 0E F2 | 	cmp	local05, #123 wz
19e04     40 00 90 AD |  if_e	jmp	#LR__0843
19e08     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e0c     5B 94 0E F2 | 	cmp	local05, #91 wz
19e10     58 00 90 AD |  if_e	jmp	#LR__0844
19e14     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e18     22 94 0E F2 | 	cmp	local05, #34 wz
19e1c     70 00 90 AD |  if_e	jmp	#LR__0845
19e20     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e24     74 94 0E F2 | 	cmp	local05, #116 wz
19e28     78 00 90 AD |  if_e	jmp	#LR__0846
19e2c     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e30     66 94 0E F2 | 	cmp	local05, #102 wz
19e34     8C 00 90 AD |  if_e	jmp	#LR__0847
19e38     53 95 E2 F8 | 	getbyte	local05, local14, #0
19e3c     6E 94 0E F2 | 	cmp	local05, #110 wz
19e40     A0 00 90 AD |  if_e	jmp	#LR__0848
19e44     BC 00 90 FD | 	jmp	#LR__0849
19e48                 | LR__0843
19e48     10 A4 06 F1 | 	add	local13, #16
19e4c     52 01 68 FC | 	wrlong	#0, local13
19e50     08 A4 86 F1 | 	sub	local13, #8
19e54     52 01 68 FC | 	wrlong	#0, local13
19e58     08 A4 86 F1 | 	sub	local13, #8
19e5c     52 8F 62 FC | 	wrlong	local02, local13
19e60     52 8F 02 F6 | 	mov	local02, local13
19e64     01 8C 06 F1 | 	add	local01, #1
19e68                 | '             property->type = JSON_OBJ;
19e68                 | '             property->u.c.child = 0;
19e68                 | '             property->sibling = obj;
19e68                 | '             obj = property;
19e68                 | '             ++ptr;
19e68                 | '             break;
19e68     B0 00 90 FD | 	jmp	#LR__0850
19e6c                 | LR__0844
19e6c     10 A4 06 F1 | 	add	local13, #16
19e70     52 03 68 FC | 	wrlong	#1, local13
19e74     08 A4 86 F1 | 	sub	local13, #8
19e78     52 01 68 FC | 	wrlong	#0, local13
19e7c     08 A4 86 F1 | 	sub	local13, #8
19e80     52 8F 62 FC | 	wrlong	local02, local13
19e84     52 8F 02 F6 | 	mov	local02, local13
19e88     01 8C 06 F1 | 	add	local01, #1
19e8c                 | '             property->type = JSON_ARRAY;
19e8c                 | '             property->u.c.child = 0;
19e8c                 | '             property->sibling = obj;
19e8c                 | '             obj = property;
19e8c                 | '             ++ptr;
19e8c                 | '             break;
19e8c     8C 00 90 FD | 	jmp	#LR__0850
19e90                 | LR__0845
19e90     46 75 02 F6 | 	mov	arg01, local01
19e94     52 77 02 F6 | 	mov	arg02, local13
19e98     14 FA BF FD | 	call	#_textValue
19e9c     1A 8D 02 F6 | 	mov	local01, result1
19ea0                 | '             ptr = textValue(ptr, property);
19ea0                 | '             break;
19ea0     78 00 90 FD | 	jmp	#LR__0850
19ea4                 | LR__0846
19ea4     46 75 02 F6 | 	mov	arg01, local01
19ea8     52 77 02 F6 | 	mov	arg02, local13
19eac                 | ' {
19eac                 | '     return primitiveValue(ptr, property, "true", JSON_BOOLEAN);
19eac     57 01 00 FF 
19eb0     D8 79 06 F6 | 	mov	arg03, ##@LR__2298
19eb4     03 7A 06 F6 | 	mov	arg04, #3
19eb8     74 FA BF FD | 	call	#_primitiveValue
19ebc     1A 8D 02 F6 | 	mov	local01, result1
19ec0                 | '             ptr = trueValue(ptr, property);
19ec0                 | '             break;
19ec0     58 00 90 FD | 	jmp	#LR__0850
19ec4                 | LR__0847
19ec4     46 75 02 F6 | 	mov	arg01, local01
19ec8     52 77 02 F6 | 	mov	arg02, local13
19ecc                 | ' {
19ecc                 | '     return primitiveValue(ptr, property, "false", JSON_BOOLEAN);
19ecc     57 01 00 FF 
19ed0     DD 79 06 F6 | 	mov	arg03, ##@LR__2299
19ed4     03 7A 06 F6 | 	mov	arg04, #3
19ed8     54 FA BF FD | 	call	#_primitiveValue
19edc     1A 8D 02 F6 | 	mov	local01, result1
19ee0                 | '             ptr = falseValue(ptr, property);
19ee0                 | '             break;
19ee0     38 00 90 FD | 	jmp	#LR__0850
19ee4                 | LR__0848
19ee4     46 75 02 F6 | 	mov	arg01, local01
19ee8     52 77 02 F6 | 	mov	arg02, local13
19eec                 | ' {
19eec                 | '     return primitiveValue(ptr, property, "null", JSON_NULL);
19eec     57 01 00 FF 
19ef0     E3 79 06 F6 | 	mov	arg03, ##@LR__2300
19ef4     06 7A 06 F6 | 	mov	arg04, #6
19ef8     34 FA BF FD | 	call	#_primitiveValue
19efc     1A 8D 02 F6 | 	mov	local01, result1
19f00                 | '             ptr = nullValue(ptr, property);
19f00                 | '             break;
19f00     18 00 90 FD | 	jmp	#LR__0850
19f04                 | LR__0849
19f04     52 93 02 F6 | 	mov	local04, local13
19f08     46 75 02 F6 | 	mov	arg01, local01
19f0c     49 77 02 F6 | 	mov	arg02, local04
19f10     2C FB BF FD | 	call	#_numValue
19f14     1A 95 02 F6 | 	mov	local05, result1
19f18     4A 8D 02 F6 | 	mov	local01, local05
19f1c                 | '             ptr = numValue(ptr, property);
19f1c                 | '             break;
19f1c                 | LR__0850
19f1c     00 8C 0E F2 | 	cmp	local01, #0 wz
19f20     78 FD 9F 5D |  if_ne	jmp	#LR__0836
19f24     58 01 00 FF 
19f28     77 74 06 F6 | 	mov	arg01, ##@LR__2305
19f2c     28 7F BE FD | 	call	#_printf
19f30                 | '         {
19f30                 | '             printf("Error: unable to parse value.\n");
19f30                 | '             return 0;
19f30     00 34 06 F6 | 	mov	result1, #0
19f34                 | LR__0851
19f34     A8 F0 03 F6 | 	mov	ptra, fp
19f38     B3 00 A0 FD | 	call	#popregs_
19f3c                 | _objValue_ret
19f3c     2D 00 64 FD | 	ret
19f40                 | 
19f40                 | _poolInit
19f40     04 74 86 F1 | 	sub	arg01, #4
19f44     3A 03 68 FC | 	wrlong	#1, arg01
19f48     08 74 86 F1 | 	sub	arg01, #8
19f4c                 | '     spool->nextFree = 1;
19f4c                 | '     return spool->mem;
19f4c     3A 35 02 FB | 	rdlong	result1, arg01
19f50                 | _poolInit_ret
19f50     2D 00 64 FD | 	ret
19f54                 | 
19f54                 | _poolAlloc
19f54     04 74 86 F1 | 	sub	arg01, #4
19f58     3A 3B 02 FB | 	rdlong	_var01, arg01
19f5c     04 74 86 F1 | 	sub	arg01, #4
19f60     3A 3D 02 FB | 	rdlong	_var02, arg01
19f64     04 74 86 F1 | 	sub	arg01, #4
19f68     1E 3B 12 F2 | 	cmp	_var01, _var02 wc
19f6c                 | '         return 0;
19f6c     00 34 06 36 |  if_ae	mov	result1, #0
19f70     30 00 90 3D |  if_ae	jmp	#_poolAlloc_ret
19f74                 | '     return spool->mem + spool->nextFree++;
19f74     08 74 06 F1 | 	add	arg01, #8
19f78     3A 3D 02 FB | 	rdlong	_var02, arg01
19f7c     1E 3B 02 F6 | 	mov	_var01, _var02
19f80     01 3A 06 F1 | 	add	_var01, #1
19f84     3A 3B 62 FC | 	wrlong	_var01, arg01
19f88     08 74 86 F1 | 	sub	arg01, #8
19f8c     1E 3B 02 F6 | 	mov	_var01, _var02
19f90     02 3A 66 F0 | 	shl	_var01, #2
19f94     1E 3B 02 F1 | 	add	_var01, _var02
19f98     02 3A 66 F0 | 	shl	_var01, #2
19f9c     3A 35 02 FB | 	rdlong	result1, arg01
19fa0     1D 35 02 F1 | 	add	result1, _var01
19fa4                 | _poolAlloc_ret
19fa4     2D 00 64 FD | 	ret
19fa8                 | 
19fa8                 | _write_register_1709
19fa8     02 4C 05 F6 | 	mov	COUNT_, #2
19fac     A9 00 A0 FD | 	call	#pushregs_
19fb0     3A 8D 02 F6 | 	mov	local01, arg01
19fb4     0C 8C 06 F1 | 	add	local01, #12
19fb8     55 74 06 F6 | 	mov	arg01, #85
19fbc     C9 8E 02 F6 | 	mov	local02, objptr
19fc0     46 93 01 F6 | 	mov	objptr, local01
19fc4     8C 23 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
19fc8     46 93 01 F6 | 	mov	objptr, local01
19fcc     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
19fd0     01 76 66 F0 | 	shl	arg02, #1
19fd4     40 74 06 F6 | 	mov	arg01, #64
19fd8     3B 75 02 F1 | 	add	arg01, arg02
19fdc     74 23 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
19fe0     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
19fe4     46 93 01 F6 | 	mov	objptr, local01
19fe8     68 23 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
19fec     47 93 01 F6 | 	mov	objptr, local02
19ff0     A8 F0 03 F6 | 	mov	ptra, fp
19ff4     B3 00 A0 FD | 	call	#popregs_
19ff8                 | _write_register_1709_ret
19ff8     2D 00 64 FD | 	ret
19ffc                 | 
19ffc                 | _read_register_1711
19ffc     03 4C 05 F6 | 	mov	COUNT_, #3
1a000     A9 00 A0 FD | 	call	#pushregs_
1a004     3A 8D 02 F6 | 	mov	local01, arg01
1a008     0C 8C 06 F1 | 	add	local01, #12
1a00c     55 74 06 F6 | 	mov	arg01, #85
1a010     C9 8E 02 F6 | 	mov	local02, objptr
1a014     46 93 01 F6 | 	mov	objptr, local01
1a018     38 23 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
1a01c     46 93 01 F6 | 	mov	objptr, local01
1a020     3B 91 E2 F8 | 	getbyte	local03, arg02, #0
1a024     01 90 66 F0 | 	shl	local03, #1
1a028     20 74 06 F6 | 	mov	arg01, #32
1a02c     48 75 02 F1 | 	add	arg01, local03
1a030     20 23 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
1a034     64 74 06 F6 | 	mov	arg01, #100
1a038     46 93 01 F6 | 	mov	objptr, local01
1a03c     90 22 B0 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
1a040     47 93 01 F6 | 	mov	objptr, local02
1a044                 | ' {
1a044                 | '     uint8_t temp;
1a044                 | ' 
1a044                 | ' 
1a044                 | ' 
1a044                 | ' 
1a044                 | '     forceGauge->serial.tx(0x55);
1a044                 | '     forceGauge->serial.tx(0x20 + (reg << 1));
1a044                 | '     temp = forceGauge->serial.rxtime(100);
1a044                 | '     return temp;
1a044     A8 F0 03 F6 | 	mov	ptra, fp
1a048     B3 00 A0 FD | 	call	#popregs_
1a04c                 | _read_register_1711_ret
1a04c     2D 00 64 FD | 	ret
1a050                 | 
1a050                 | _module_animation_touch_1725
1a050     07 4C 05 F6 | 	mov	COUNT_, #7
1a054     A9 00 A0 FD | 	call	#pushregs_
1a058     3A 8D 02 F6 | 	mov	local01, arg01
1a05c     3B 8F 02 F6 | 	mov	local02, arg02
1a060     E8 8E 06 F1 | 	add	local02, #232
1a064     47 91 02 FB | 	rdlong	local03, local02
1a068     40 8E 06 F1 | 	add	local02, #64
1a06c     47 81 02 FB | 	rdlong	arg07, local02
1a070     40 91 82 F1 | 	sub	local03, arg07
1a074     02 90 86 F1 | 	sub	local03, #2
1a078     3C 8E 86 F1 | 	sub	local02, #60
1a07c     47 93 02 FB | 	rdlong	local04, local02
1a080     40 93 82 F1 | 	sub	local04, arg07
1a084     02 92 86 F1 | 	sub	local04, #2
1a088     40 7F 02 F6 | 	mov	arg06, arg07
1a08c     01 7E 66 F0 | 	shl	arg06, #1
1a090     04 8E 06 F1 | 	add	local02, #4
1a094     47 95 02 FB | 	rdlong	local05, local02
1a098     3F 95 02 F1 | 	add	local05, arg06
1a09c     04 94 06 F1 | 	add	local05, #4
1a0a0     01 80 66 F0 | 	shl	arg07, #1
1a0a4     04 8E 06 F1 | 	add	local02, #4
1a0a8     47 97 02 FB | 	rdlong	local06, local02
1a0ac     F4 8E 86 F1 | 	sub	local02, #244
1a0b0     40 97 02 F1 | 	add	local06, arg07
1a0b4     04 96 06 F1 | 	add	local06, #4
1a0b8     46 75 02 F6 | 	mov	arg01, local01
1a0bc     48 7B 02 F6 | 	mov	arg04, local03
1a0c0     49 7D 02 F6 | 	mov	arg05, local04
1a0c4     48 83 02 F6 | 	mov	arg08, local03
1a0c8     49 85 02 F6 | 	mov	arg09, local04
1a0cc     4A 87 02 F6 | 	mov	arg10, local05
1a0d0     4B 89 02 F6 | 	mov	arg11, local06
1a0d4     05 88 06 F1 | 	add	arg11, #5
1a0d8     00 76 06 F6 | 	mov	arg02, #0
1a0dc     0A 78 C6 F9 | 	decod	arg03, #10
1a0e0     20 1C 00 FF 
1a0e4     00 7E 06 F6 | 	mov	arg06, ##3686400
1a0e8     0A 80 C6 F9 | 	decod	arg07, #10
1a0ec     38 A5 BE FD | 	call	#_display_bte_memory_copy
1a0f0                 | '     for (i = 1; i < moveY; i++)
1a0f0     01 98 06 F6 | 	mov	local07, #1
1a0f4                 | LR__0852
1a0f4     05 98 56 F2 | 	cmps	local07, #5 wc
1a0f8     84 00 90 3D |  if_ae	jmp	#LR__0853
1a0fc     49 85 02 F6 | 	mov	arg09, local04
1a100     4C 85 02 F1 | 	add	arg09, local07
1a104     4A 87 02 F6 | 	mov	arg10, local05
1a108     4B 89 02 F6 | 	mov	arg11, local06
1a10c     46 75 02 F6 | 	mov	arg01, local01
1a110     20 1C 00 FF 
1a114     00 76 06 F6 | 	mov	arg02, ##3686400
1a118     0A 78 C6 F9 | 	decod	arg03, #10
1a11c     48 7B 02 F6 | 	mov	arg04, local03
1a120     49 7D 02 F6 | 	mov	arg05, local04
1a124     00 7E 06 F6 | 	mov	arg06, #0
1a128     0A 80 C6 F9 | 	decod	arg07, #10
1a12c     48 83 02 F6 | 	mov	arg08, local03
1a130     F4 A4 BE FD | 	call	#_display_bte_memory_copy
1a134     49 79 02 F6 | 	mov	arg03, local04
1a138     4C 79 02 F1 | 	add	arg03, local07
1a13c     48 7B 02 F6 | 	mov	arg04, local03
1a140     4A 7B 02 F1 | 	add	arg04, local05
1a144     49 7D 02 F6 | 	mov	arg05, local04
1a148     4C 7D 02 F1 | 	add	arg05, local07
1a14c     47 7F 02 FB | 	rdlong	arg06, local02
1a150     10 7F 06 F1 | 	add	arg06, #272
1a154     3F 7F 02 FB | 	rdlong	arg06, arg06
1a158     46 75 02 F6 | 	mov	arg01, local01
1a15c     48 77 02 F6 | 	mov	arg02, local03
1a160     9C 9F BE FD | 	call	#_display_draw_line
1a164     32 E0 06 F6 | 	mov	muldiva_, #50
1a168     05 E2 06 F6 | 	mov	muldivb_, #5
1a16c     BB 00 A0 FD | 	call	#divide_
1a170     71 75 02 F6 | 	mov	arg01, muldivb_
1a174     10 BC B0 FD | 	call	#__system___waitms
1a178     01 98 06 F1 | 	add	local07, #1
1a17c     74 FF 9F FD | 	jmp	#LR__0852
1a180                 | LR__0853
1a180                 | '     {
1a180                 | '         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y + i, w, h);
1a180                 | '         display_draw_line(display, x, y + i, x + w, y + i, module->parent->foregroundColor);
1a180                 | '         _waitms(speedms / moveY);
1a180                 | '     }
1a180                 | ' 
1a180                 | ' 
1a180                 | '     for (; i > 0; i--)
1a180                 | LR__0854
1a180     01 98 56 F2 | 	cmps	local07, #1 wc
1a184     84 00 90 CD |  if_b	jmp	#LR__0855
1a188     49 85 02 F6 | 	mov	arg09, local04
1a18c     4C 85 02 F1 | 	add	arg09, local07
1a190     4A 87 02 F6 | 	mov	arg10, local05
1a194     4B 89 02 F6 | 	mov	arg11, local06
1a198     46 75 02 F6 | 	mov	arg01, local01
1a19c     20 1C 00 FF 
1a1a0     00 76 06 F6 | 	mov	arg02, ##3686400
1a1a4     0A 78 C6 F9 | 	decod	arg03, #10
1a1a8     48 7B 02 F6 | 	mov	arg04, local03
1a1ac     49 7D 02 F6 | 	mov	arg05, local04
1a1b0     00 7E 06 F6 | 	mov	arg06, #0
1a1b4     0A 80 C6 F9 | 	decod	arg07, #10
1a1b8     48 83 02 F6 | 	mov	arg08, local03
1a1bc     68 A4 BE FD | 	call	#_display_bte_memory_copy
1a1c0     49 79 02 F6 | 	mov	arg03, local04
1a1c4     4C 79 02 F1 | 	add	arg03, local07
1a1c8     48 7B 02 F6 | 	mov	arg04, local03
1a1cc     4A 7B 02 F1 | 	add	arg04, local05
1a1d0     49 7D 02 F6 | 	mov	arg05, local04
1a1d4     4C 7D 02 F1 | 	add	arg05, local07
1a1d8     47 7F 02 FB | 	rdlong	arg06, local02
1a1dc     10 7F 06 F1 | 	add	arg06, #272
1a1e0     3F 7F 02 FB | 	rdlong	arg06, arg06
1a1e4     46 75 02 F6 | 	mov	arg01, local01
1a1e8     48 77 02 F6 | 	mov	arg02, local03
1a1ec     10 9F BE FD | 	call	#_display_draw_line
1a1f0     32 E0 06 F6 | 	mov	muldiva_, #50
1a1f4     05 E2 06 F6 | 	mov	muldivb_, #5
1a1f8     BB 00 A0 FD | 	call	#divide_
1a1fc     71 75 02 F6 | 	mov	arg01, muldivb_
1a200     84 BB B0 FD | 	call	#__system___waitms
1a204     01 98 86 F1 | 	sub	local07, #1
1a208     74 FF 9F FD | 	jmp	#LR__0854
1a20c                 | LR__0855
1a20c     05 96 06 F1 | 	add	local06, #5
1a210     46 75 02 F6 | 	mov	arg01, local01
1a214     20 1C 00 FF 
1a218     00 76 06 F6 | 	mov	arg02, ##3686400
1a21c     0A 78 C6 F9 | 	decod	arg03, #10
1a220     48 7B 02 F6 | 	mov	arg04, local03
1a224     49 7D 02 F6 | 	mov	arg05, local04
1a228     00 7E 06 F6 | 	mov	arg06, #0
1a22c     0A 80 C6 F9 | 	decod	arg07, #10
1a230     48 83 02 F6 | 	mov	arg08, local03
1a234     49 85 02 F6 | 	mov	arg09, local04
1a238     4A 87 02 F6 | 	mov	arg10, local05
1a23c     4B 89 02 F6 | 	mov	arg11, local06
1a240     E4 A3 BE FD | 	call	#_display_bte_memory_copy
1a244     A8 F0 03 F6 | 	mov	ptra, fp
1a248     B3 00 A0 FD | 	call	#popregs_
1a24c                 | _module_animation_touch_1725_ret
1a24c     2D 00 64 FD | 	ret
1a250                 | 
1a250                 | _get_radius_1739
1a250     01 4C 05 F6 | 	mov	COUNT_, #1
1a254     A9 00 A0 FD | 	call	#pushregs_
1a258     3A 8D 02 F6 | 	mov	local01, arg01
1a25c     08 8D 06 F1 | 	add	local01, #264
1a260     46 75 02 FB | 	rdlong	arg01, local01
1a264     08 8D 86 F1 | 	sub	local01, #264
1a268     FF FF 7F FF 
1a26c     FF 75 0E F2 | 	cmp	arg01, ##-1 wz
1a270     2C 00 90 5D |  if_ne	jmp	#LR__0856
1a274                 | '         return  __builtin_round(module->w * 0.07) ;
1a274     F0 8C 06 F1 | 	add	local01, #240
1a278     46 75 02 FB | 	rdlong	arg01, local01
1a27c     74 D4 B0 FD | 	call	#__system___float_fromint
1a280     1A 75 02 F6 | 	mov	arg01, result1
1a284     AE C7 1E FF 
1a288     29 76 06 F6 | 	mov	arg02, ##1032805417
1a28c     98 D7 B0 FD | 	call	#__system___float_mul
1a290     1A 75 02 F6 | 	mov	arg01, result1
1a294     01 76 06 F6 | 	mov	arg02, #1
1a298     7C DC B0 FD | 	call	#__system___float_tointeger
1a29c     08 00 90 FD | 	jmp	#LR__0857
1a2a0                 | LR__0856
1a2a0                 | '         return module->r;
1a2a0     08 8D 06 F1 | 	add	local01, #264
1a2a4     46 35 02 FB | 	rdlong	result1, local01
1a2a8                 | LR__0857
1a2a8     A8 F0 03 F6 | 	mov	ptra, fp
1a2ac     B3 00 A0 FD | 	call	#popregs_
1a2b0                 | _get_radius_1739_ret
1a2b0     2D 00 64 FD | 	ret
1a2b4                 | 
1a2b4                 | _draw_border_rectangle_rounded_1741
1a2b4     04 4C 05 F6 | 	mov	COUNT_, #4
1a2b8     A9 00 A0 FD | 	call	#pushregs_
1a2bc     3A 8D 02 F6 | 	mov	local01, arg01
1a2c0     3B 8F 02 F6 | 	mov	local02, arg02
1a2c4     3C 91 02 F6 | 	mov	local03, arg03
1a2c8     3D 93 02 F6 | 	mov	local04, arg04
1a2cc     28 8F 06 F1 | 	add	local02, #296
1a2d0     47 81 0A FB | 	rdlong	arg07, local02 wz
1a2d4     28 8F 86 F1 | 	sub	local02, #296
1a2d8                 | '         return  (0) ;
1a2d8     00 34 06 A6 |  if_e	mov	result1, #0
1a2dc     B0 00 90 AD |  if_e	jmp	#LR__0858
1a2e0     28 8F 06 F1 | 	add	local02, #296
1a2e4     47 81 02 FB | 	rdlong	arg07, local02
1a2e8     40 8E 86 F1 | 	sub	local02, #64
1a2ec     47 77 02 FB | 	rdlong	arg02, local02
1a2f0     40 77 82 F1 | 	sub	arg02, arg07
1a2f4     04 8E 06 F1 | 	add	local02, #4
1a2f8     47 79 02 FB | 	rdlong	arg03, local02
1a2fc     40 79 82 F1 | 	sub	arg03, arg07
1a300     04 8E 86 F1 | 	sub	local02, #4
1a304     47 7B 02 FB | 	rdlong	arg04, local02
1a308     08 8E 06 F1 | 	add	local02, #8
1a30c     47 7F 02 FB | 	rdlong	arg06, local02
1a310     3F 7B 02 F1 | 	add	arg04, arg06
1a314     40 7B 02 F1 | 	add	arg04, arg07
1a318     04 8E 86 F1 | 	sub	local02, #4
1a31c     47 7D 02 FB | 	rdlong	arg05, local02
1a320     08 8E 06 F1 | 	add	local02, #8
1a324     47 7F 02 FB | 	rdlong	arg06, local02
1a328     3F 7D 02 F1 | 	add	arg05, arg06
1a32c     40 7D 02 F1 | 	add	arg05, arg07
1a330     20 8E 06 F1 | 	add	local02, #32
1a334     47 83 02 FB | 	rdlong	arg08, local02
1a338     46 75 02 F6 | 	mov	arg01, local01
1a33c     49 7F 02 F6 | 	mov	arg06, local04
1a340     49 81 02 F6 | 	mov	arg07, local04
1a344     90 A0 BE FD | 	call	#_display_draw_circle_square_fill
1a348     46 75 02 F6 | 	mov	arg01, local01
1a34c     2C 8E 86 F1 | 	sub	local02, #44
1a350     47 77 02 FB | 	rdlong	arg02, local02
1a354     04 8E 06 F1 | 	add	local02, #4
1a358     47 79 02 FB | 	rdlong	arg03, local02
1a35c     3B 7B 02 F6 | 	mov	arg04, arg02
1a360     04 8E 06 F1 | 	add	local02, #4
1a364     47 8D 02 FB | 	rdlong	local01, local02
1a368     46 7B 02 F1 | 	add	arg04, local01
1a36c     3C 7D 02 F6 | 	mov	arg05, arg03
1a370     04 8E 06 F1 | 	add	local02, #4
1a374     47 8F 02 FB | 	rdlong	local02, local02
1a378     47 7D 02 F1 | 	add	arg05, local02
1a37c     49 7F 02 F6 | 	mov	arg06, local04
1a380     49 81 02 F6 | 	mov	arg07, local04
1a384     48 83 02 F6 | 	mov	arg08, local03
1a388     4C A0 BE FD | 	call	#_display_draw_circle_square_fill
1a38c                 | '     display_draw_circle_square_fill(display, module->x - width, module->y - width, module->x + module->w + width, module->y + module->h + width, radius, radius, module->borderColor);
1a38c                 | '     display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, innerColor);
1a38c                 | '     return  (1) ;
1a38c     01 34 06 F6 | 	mov	result1, #1
1a390                 | LR__0858
1a390     A8 F0 03 F6 | 	mov	ptra, fp
1a394     B3 00 A0 FD | 	call	#popregs_
1a398                 | _draw_border_rectangle_rounded_1741_ret
1a398     2D 00 64 FD | 	ret
1a39c                 | 
1a39c                 | _key_pressed_1790
1a39c     03 4C 05 F6 | 	mov	COUNT_, #3
1a3a0     A9 00 A0 FD | 	call	#pushregs_
1a3a4     3A 8D 02 F6 | 	mov	local01, arg01
1a3a8     3B 8F 02 F6 | 	mov	local02, arg02
1a3ac     00 74 06 F6 | 	mov	arg01, #0
1a3b0     1C F1 B0 FD | 	call	#__system___getiolock_1306
1a3b4     1A 75 02 F6 | 	mov	arg01, result1
1a3b8     B4 B8 B0 FD | 	call	#__system___lockmem
1a3bc     08 8E 06 F1 | 	add	local02, #8
1a3c0     47 77 02 F6 | 	mov	arg02, local02
1a3c4     08 8E 86 F1 | 	sub	local02, #8
1a3c8     00 74 06 F6 | 	mov	arg01, #0
1a3cc     00 78 06 F6 | 	mov	arg03, #0
1a3d0     44 BE B0 FD | 	call	#__system___basic_print_string
1a3d4     00 74 06 F6 | 	mov	arg01, #0
1a3d8     0A 76 06 F6 | 	mov	arg02, #10
1a3dc     00 78 06 F6 | 	mov	arg03, #0
1a3e0     E8 BD B0 FD | 	call	#__system___basic_print_char
1a3e4     00 74 06 F6 | 	mov	arg01, #0
1a3e8     E4 F0 B0 FD | 	call	#__system___getiolock_1306
1a3ec     1A 01 68 FC | 	wrlong	#0, result1
1a3f0                 | '     switch (id)
1a3f0     46 91 02 F6 | 	mov	local03, local01
1a3f4     1F 90 0E F2 | 	cmp	local03, #31 wz
1a3f8     2C 00 90 AD |  if_e	jmp	#LR__0859
1a3fc     2A 90 0E F2 | 	cmp	local03, #42 wz
1a400     58 00 90 AD |  if_e	jmp	#LR__0860
1a404     2C 90 0E F2 | 	cmp	local03, #44 wz
1a408     70 00 90 AD |  if_e	jmp	#LR__0861
1a40c     2B 90 0E F2 | 	cmp	local03, #43 wz
1a410     B8 00 90 AD |  if_e	jmp	#LR__0864
1a414     2D 90 0E F2 | 	cmp	local03, #45 wz
1a418     B0 00 90 AD |  if_e	jmp	#LR__0864
1a41c     2E 90 0E F2 | 	cmp	local03, #46 wz
1a420     70 00 90 AD |  if_e	jmp	#LR__0862
1a424     78 00 90 FD | 	jmp	#LR__0863
1a428                 | LR__0859
1a428     08 8E 06 F1 | 	add	local02, #8
1a42c     47 75 02 F6 | 	mov	arg01, local02
1a430     08 8E 86 F1 | 	sub	local02, #8
1a434     3C BE BE FD | 	call	#_strlen
1a438     01 34 16 F2 | 	cmp	result1, #1 wc
1a43c                 | '             break;
1a43c     8C 00 90 CD |  if_b	jmp	#LR__0864
1a440     08 8E 06 F1 | 	add	local02, #8
1a444     47 75 02 F6 | 	mov	arg01, local02
1a448     28 BE BE FD | 	call	#_strlen
1a44c     01 34 86 F1 | 	sub	result1, #1
1a450     47 35 02 F1 | 	add	result1, local02
1a454     1A 01 48 FC | 	wrbyte	#0, result1
1a458                 | '         keyboard->keyboard_buffer[strlen(keyboard->keyboard_buffer) - 1] = '\0';
1a458                 | '         break;
1a458     70 00 90 FD | 	jmp	#LR__0864
1a45c                 | LR__0860
1a45c     08 8E 06 F1 | 	add	local02, #8
1a460     47 75 02 F6 | 	mov	arg01, local02
1a464     58 01 00 FF 
1a468     96 76 06 F6 | 	mov	arg02, ##@LR__2306
1a46c     48 BB BE FD | 	call	#_strcpy
1a470     52 8E 06 F1 | 	add	local02, #82
1a474     47 03 48 FC | 	wrbyte	#1, local02
1a478                 | '     {
1a478                 | '         strcpy(keyboard->keyboard_buffer, "");
1a478                 | '         keyboard->keyboard_complete =  (1) ;
1a478                 | '         break;
1a478     50 00 90 FD | 	jmp	#LR__0864
1a47c                 | LR__0861
1a47c     08 8E 06 F1 | 	add	local02, #8
1a480     58 01 00 FF 
1a484     98 76 06 F6 | 	mov	arg02, ##@LR__2307
1a488     47 75 02 F6 | 	mov	arg01, local02
1a48c     B4 BB BE FD | 	call	#_strcat
1a490                 | '         break;
1a490     38 00 90 FD | 	jmp	#LR__0864
1a494                 | '         break;
1a494                 | LR__0862
1a494     5A 8E 06 F1 | 	add	local02, #90
1a498     47 03 48 FC | 	wrbyte	#1, local02
1a49c                 | '         keyboard->keyboard_complete =  (1) ;
1a49c                 | '         break;
1a49c     2C 00 90 FD | 	jmp	#LR__0864
1a4a0                 | LR__0863
1a4a0     08 8E 06 F1 | 	add	local02, #8
1a4a4     47 75 02 F6 | 	mov	arg01, local02
1a4a8     46 77 02 F6 | 	mov	arg02, local01
1a4ac     02 76 66 F0 | 	shl	arg02, #2
1a4b0     55 01 00 FF 
1a4b4     BC D6 05 F1 | 	add	ptr__dat__, ##174780
1a4b8     EB 76 02 F1 | 	add	arg02, ptr__dat__
1a4bc     3B 77 02 FB | 	rdlong	arg02, arg02
1a4c0     55 01 00 FF 
1a4c4     BC D6 85 F1 | 	sub	ptr__dat__, ##174780
1a4c8     78 BB BE FD | 	call	#_strcat
1a4cc                 | '         strcat(keyboard->keyboard_buffer, key_name[id]);
1a4cc                 | '         break;
1a4cc                 | LR__0864
1a4cc     A8 F0 03 F6 | 	mov	ptra, fp
1a4d0     B3 00 A0 FD | 	call	#popregs_
1a4d4                 | _key_pressed_1790_ret
1a4d4     2D 00 64 FD | 	ret
1a4d8                 | 
1a4d8                 | _createKey_1793
1a4d8     06 4C 05 F6 | 	mov	COUNT_, #6
1a4dc     A9 00 A0 FD | 	call	#pushregs_
1a4e0     3A 8D 02 F6 | 	mov	local01, arg01
1a4e4     3B 8F 02 F6 | 	mov	local02, arg02
1a4e8     3C 91 02 F6 | 	mov	local03, arg03
1a4ec     3D 93 02 F6 | 	mov	local04, arg04
1a4f0     3E 95 02 F6 | 	mov	local05, arg05
1a4f4     47 97 02 F6 | 	mov	local06, local02
1a4f8     02 96 66 F0 | 	shl	local06, #2
1a4fc     47 97 02 F1 | 	add	local06, local02
1a500     06 96 66 F0 | 	shl	local06, #6
1a504     03 00 00 FF 
1a508     9C 8C 06 F1 | 	add	local01, ##1692
1a50c     46 97 02 F1 | 	add	local06, local01
1a510     02 00 00 FF 
1a514     00 8D 86 F1 | 	sub	local01, ##1280
1a518     46 77 02 F6 | 	mov	arg02, local01
1a51c     9C 8D 86 F1 | 	sub	local01, #412
1a520     4B 75 02 F6 | 	mov	arg01, local06
1a524     20 E6 BE FD | 	call	#_module_init
1a528     00 2C 21 FF 
1a52c     00 74 06 F6 | 	mov	arg01, ##1113063424
1a530     4A 77 02 F6 | 	mov	arg02, local05
1a534     F0 D4 B0 FD | 	call	#__system___float_mul
1a538     1A 75 02 F6 | 	mov	arg01, result1
1a53c     00 76 06 F6 | 	mov	arg02, #0
1a540     D4 D9 B0 FD | 	call	#__system___float_tointeger
1a544     4B 75 02 F6 | 	mov	arg01, local06
1a548     CC 74 06 F1 | 	add	arg01, #204
1a54c     3A 0B 68 FC | 	wrlong	#5, arg01
1a550     24 74 06 F1 | 	add	arg01, #36
1a554     3A 35 62 FC | 	wrlong	result1, arg01
1a558     04 74 06 F1 | 	add	arg01, #4
1a55c     3A 6D 68 FC | 	wrlong	#54, arg01
1a560     4B 75 02 F6 | 	mov	arg01, local06
1a564     10 75 06 F1 | 	add	arg01, #272
1a568     3A 3F 68 FC | 	wrlong	#31, arg01
1a56c     04 74 86 F1 | 	sub	arg01, #4
1a570     3A 3F 68 FC | 	wrlong	#31, arg01
1a574     4B 75 02 F6 | 	mov	arg01, local06
1a578     0E 78 06 F6 | 	mov	arg03, #14
1a57c     00 75 06 F1 | 	add	arg01, #256
1a580     3A 1D 68 FC | 	wrlong	#14, arg01
1a584     04 74 06 F1 | 	add	arg01, #4
1a588     3A 1D 68 FC | 	wrlong	#14, arg01
1a58c     C9 74 02 F6 | 	mov	arg01, objptr
1a590     03 77 02 F6 | 	mov	arg02, ptr__key_pressed_1790_
1a594     A0 B6 B0 FD | 	call	#__system___make_methodptr
1a598     1A 77 02 F6 | 	mov	arg02, result1
1a59c     47 79 02 F6 | 	mov	arg03, local02
1a5a0     4B 75 02 F6 | 	mov	arg01, local06
1a5a4     34 75 06 F1 | 	add	arg01, #308
1a5a8     3A 77 62 FC | 	wrlong	arg02, arg01
1a5ac     10 74 86 F1 | 	sub	arg01, #16
1a5b0     3A 79 62 FC | 	wrlong	arg03, arg01
1a5b4     00 90 0E F2 | 	cmp	local03, #0 wz
1a5b8     0C 00 90 5D |  if_ne	jmp	#LR__0865
1a5bc     4B 75 02 F6 | 	mov	arg01, local06
1a5c0     F8 EE BE FD | 	call	#_module_align_inner_left
1a5c4     0C 00 90 FD | 	jmp	#LR__0866
1a5c8                 | LR__0865
1a5c8     4B 75 02 F6 | 	mov	arg01, local06
1a5cc     48 77 02 F6 | 	mov	arg02, local03
1a5d0     44 F1 BE FD | 	call	#_module_align_right
1a5d4                 | LR__0866
1a5d4     00 92 0E F2 | 	cmp	local04, #0 wz
1a5d8     0C 00 90 5D |  if_ne	jmp	#LR__0867
1a5dc     4B 75 02 F6 | 	mov	arg01, local06
1a5e0     B0 EE BE FD | 	call	#_module_align_inner_top
1a5e4     0C 00 90 FD | 	jmp	#LR__0868
1a5e8                 | LR__0867
1a5e8     4B 75 02 F6 | 	mov	arg01, local06
1a5ec     49 77 02 F6 | 	mov	arg02, local04
1a5f0     F8 F0 BE FD | 	call	#_module_align_below
1a5f4                 | LR__0868
1a5f4     47 95 02 F6 | 	mov	local05, local02
1a5f8     02 94 66 F0 | 	shl	local05, #2
1a5fc     47 95 02 F1 | 	add	local05, local02
1a600     06 94 66 F0 | 	shl	local05, #6
1a604     20 00 00 FF 
1a608     5C 8D 06 F1 | 	add	local01, ##16732
1a60c     46 95 02 F1 | 	add	local05, local01
1a610     4A 75 02 F6 | 	mov	arg01, local05
1a614     4B 77 02 F6 | 	mov	arg02, local06
1a618     2C E5 BE FD | 	call	#_module_init
1a61c     02 8E 66 F0 | 	shl	local02, #2
1a620     55 01 00 FF 
1a624     BC D6 05 F1 | 	add	ptr__dat__, ##174780
1a628     EB 8E 02 F1 | 	add	local02, ptr__dat__
1a62c     47 77 02 FB | 	rdlong	arg02, local02
1a630     4A 75 02 F6 | 	mov	arg01, local05
1a634     55 01 00 FF 
1a638     BC D6 85 F1 | 	sub	ptr__dat__, ##174780
1a63c     A4 EA BE FD | 	call	#_module_set_text
1a640     4A 75 02 F6 | 	mov	arg01, local05
1a644     02 76 06 F6 | 	mov	arg02, #2
1a648     D8 EB BE FD | 	call	#_module_text_font
1a64c     4A 75 02 F6 | 	mov	arg01, local05
1a650     EC EA BE FD | 	call	#_module_text_fit
1a654     4A 93 02 FB | 	rdlong	local04, local05
1a658     10 93 06 F1 | 	add	local04, #272
1a65c     49 79 02 FB | 	rdlong	arg03, local04
1a660     4A 75 02 F6 | 	mov	arg01, local05
1a664     10 75 06 F1 | 	add	arg01, #272
1a668     7F 00 80 FF 
1a66c     3A FF 6B FC | 	wrlong	##65535, arg01
1a670     04 74 86 F1 | 	sub	arg01, #4
1a674     3A 79 62 FC | 	wrlong	arg03, arg01
1a678     4A 75 02 F6 | 	mov	arg01, local05
1a67c     01 76 06 F6 | 	mov	arg02, #1
1a680     02 78 06 F6 | 	mov	arg03, #2
1a684     38 EF BE FD | 	call	#_module_align_center_sector
1a688     4A 75 02 F6 | 	mov	arg01, local05
1a68c     E4 EE BE FD | 	call	#_module_align_middle
1a690                 | '     {
1a690                 | '         module_align_below(key, above);
1a690                 | '     }
1a690                 | ' 
1a690                 | '     Module *text = &(keyboard->keyText[name]);
1a690                 | '     module_init(text, key);
1a690                 | '     module_set_text(text, key_name[name]);
1a690                 | '     module_text_font(text,  2 );
1a690                 | '     module_text_fit(text);
1a690                 | '     module_set_color(text,  0xffff , text->parent->foregroundColor);
1a690                 | '     module_align_center(text);
1a690                 | '     module_align_middle(text);
1a690                 | '     return key;
1a690     4B 35 02 F6 | 	mov	result1, local06
1a694     A8 F0 03 F6 | 	mov	ptra, fp
1a698     B3 00 A0 FD | 	call	#popregs_
1a69c                 | _createKey_1793_ret
1a69c     2D 00 64 FD | 	ret
1a6a0                 | 
1a6a0                 | _readNavKeyInt_1903
1a6a0     02 4C 05 F6 | 	mov	COUNT_, #2
1a6a4     A9 00 A0 FD | 	call	#pushregs_
1a6a8     3A 8D 02 F6 | 	mov	local01, arg01
1a6ac     74 8C 06 F1 | 	add	local01, #116
1a6b0     46 01 68 FC | 	wrlong	#0, local01
1a6b4     74 8C 86 F1 | 	sub	local01, #116
1a6b8     C9 8E 02 F6 | 	mov	local02, objptr
1a6bc     46 93 01 F6 | 	mov	objptr, local01
1a6c0     0C 18 B0 FD | 	call	#_jm_i2c_spin2_start
1a6c4     46 93 01 F6 | 	mov	objptr, local01
1a6c8     6C 8C 06 F1 | 	add	local01, #108
1a6cc     46 75 C2 FA | 	rdbyte	arg01, local01
1a6d0     6C 8C 86 F1 | 	sub	local01, #108
1a6d4     FE 74 06 F5 | 	and	arg01, #254
1a6d8     3C 18 B0 FD | 	call	#_jm_i2c_spin2_write
1a6dc     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
1a6e0     46 93 01 F6 | 	mov	objptr, local01
1a6e4     30 18 B0 FD | 	call	#_jm_i2c_spin2_write
1a6e8     46 93 01 F6 | 	mov	objptr, local01
1a6ec     E0 17 B0 FD | 	call	#_jm_i2c_spin2_start
1a6f0     46 93 01 F6 | 	mov	objptr, local01
1a6f4     6C 8C 06 F1 | 	add	local01, #108
1a6f8     46 75 C2 FA | 	rdbyte	arg01, local01
1a6fc     6C 8C 86 F1 | 	sub	local01, #108
1a700     01 74 46 F5 | 	or	arg01, #1
1a704     10 18 B0 FD | 	call	#_jm_i2c_spin2_write
1a708     00 74 06 F6 | 	mov	arg01, #0
1a70c     46 93 01 F6 | 	mov	objptr, local01
1a710     8C 18 B0 FD | 	call	#_jm_i2c_spin2_read
1a714     75 8C 06 F1 | 	add	local01, #117
1a718     46 35 42 FC | 	wrbyte	result1, local01
1a71c     75 8C 86 F1 | 	sub	local01, #117
1a720     01 74 06 F6 | 	mov	arg01, #1
1a724     46 93 01 F6 | 	mov	objptr, local01
1a728     74 18 B0 FD | 	call	#_jm_i2c_spin2_read
1a72c     74 8C 06 F1 | 	add	local01, #116
1a730     46 35 42 FC | 	wrbyte	result1, local01
1a734     74 8C 86 F1 | 	sub	local01, #116
1a738     46 93 01 F6 | 	mov	objptr, local01
1a73c     E8 18 B0 FD | 	call	#_jm_i2c_spin2_stop
1a740     47 93 01 F6 | 	mov	objptr, local02
1a744                 | ' {
1a744                 | ' #line 156 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/NavKey/i2cNavKey.c"
1a744                 | '   navkey->_tem_data.val = 0;
1a744                 | '   navkey->i2cBus.start();
1a744                 | '   navkey->i2cBus.write(navkey->_add & 0b11111110);
1a744                 | '   navkey->i2cBus.write(reg);
1a744                 | '   navkey->i2cBus.start();
1a744                 | '   navkey->i2cBus.write(navkey->_add | 0b00000001);
1a744                 | '   navkey->_tem_data.bval[1] = navkey->i2cBus.read(0);
1a744                 | '   navkey->_tem_data.bval[0] = navkey->i2cBus.read(1);
1a744                 | '   navkey->i2cBus.stop();
1a744                 | ' 
1a744                 | '   return ((int16_t)(navkey->_tem_data.val));
1a744     74 8C 06 F1 | 	add	local01, #116
1a748     46 35 02 FB | 	rdlong	result1, local01
1a74c     A8 F0 03 F6 | 	mov	ptra, fp
1a750     B3 00 A0 FD | 	call	#popregs_
1a754                 | _readNavKeyInt_1903_ret
1a754     2D 00 64 FD | 	ret
1a758                 | 
1a758                 | _writeNavKey8_1906
1a758     02 4C 05 F6 | 	mov	COUNT_, #2
1a75c     A9 00 A0 FD | 	call	#pushregs_
1a760     3A 8D 02 F6 | 	mov	local01, arg01
1a764     C9 8E 02 F6 | 	mov	local02, objptr
1a768     46 93 01 F6 | 	mov	objptr, local01
1a76c     60 17 B0 FD | 	call	#_jm_i2c_spin2_start
1a770     46 93 01 F6 | 	mov	objptr, local01
1a774     6C 8C 06 F1 | 	add	local01, #108
1a778     46 75 C2 FA | 	rdbyte	arg01, local01
1a77c     6C 8C 86 F1 | 	sub	local01, #108
1a780     FE 74 06 F5 | 	and	arg01, #254
1a784     90 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a788     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
1a78c     46 93 01 F6 | 	mov	objptr, local01
1a790     84 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a794     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
1a798     46 93 01 F6 | 	mov	objptr, local01
1a79c     78 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a7a0     46 93 01 F6 | 	mov	objptr, local01
1a7a4     80 18 B0 FD | 	call	#_jm_i2c_spin2_stop
1a7a8     47 93 01 F6 | 	mov	objptr, local02
1a7ac     A8 F0 03 F6 | 	mov	ptra, fp
1a7b0     B3 00 A0 FD | 	call	#popregs_
1a7b4                 | _writeNavKey8_1906_ret
1a7b4     2D 00 64 FD | 	ret
1a7b8                 | 
1a7b8                 | _writeNavKey32_1907
1a7b8     01 4C 05 F6 | 	mov	COUNT_, #1
1a7bc     A9 00 A0 FD | 	call	#pushregs_
1a7c0     3A 8D 02 F6 | 	mov	local01, arg01
1a7c4     74 8C 06 F1 | 	add	local01, #116
1a7c8     46 79 62 FC | 	wrlong	arg03, local01
1a7cc     74 8C 86 F1 | 	sub	local01, #116
1a7d0     C9 78 02 F6 | 	mov	arg03, objptr
1a7d4     46 93 01 F6 | 	mov	objptr, local01
1a7d8     F4 16 B0 FD | 	call	#_jm_i2c_spin2_start
1a7dc     46 93 01 F6 | 	mov	objptr, local01
1a7e0     6C 8C 06 F1 | 	add	local01, #108
1a7e4     46 75 C2 FA | 	rdbyte	arg01, local01
1a7e8     6C 8C 86 F1 | 	sub	local01, #108
1a7ec     FE 74 06 F5 | 	and	arg01, #254
1a7f0     24 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a7f4     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
1a7f8     46 93 01 F6 | 	mov	objptr, local01
1a7fc     18 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a800     46 93 01 F6 | 	mov	objptr, local01
1a804     77 8C 06 F1 | 	add	local01, #119
1a808     46 75 C2 FA | 	rdbyte	arg01, local01
1a80c     77 8C 86 F1 | 	sub	local01, #119
1a810     04 17 B0 FD | 	call	#_jm_i2c_spin2_write
1a814     46 93 01 F6 | 	mov	objptr, local01
1a818     76 8C 06 F1 | 	add	local01, #118
1a81c     46 75 C2 FA | 	rdbyte	arg01, local01
1a820     76 8C 86 F1 | 	sub	local01, #118
1a824     F0 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a828     46 93 01 F6 | 	mov	objptr, local01
1a82c     75 8C 06 F1 | 	add	local01, #117
1a830     46 75 C2 FA | 	rdbyte	arg01, local01
1a834     75 8C 86 F1 | 	sub	local01, #117
1a838     DC 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a83c     46 93 01 F6 | 	mov	objptr, local01
1a840     74 8C 06 F1 | 	add	local01, #116
1a844     46 75 C2 FA | 	rdbyte	arg01, local01
1a848     74 8C 86 F1 | 	sub	local01, #116
1a84c     C8 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a850     46 93 01 F6 | 	mov	objptr, local01
1a854     D0 17 B0 FD | 	call	#_jm_i2c_spin2_stop
1a858     3C 93 01 F6 | 	mov	objptr, arg03
1a85c     A8 F0 03 F6 | 	mov	ptra, fp
1a860     B3 00 A0 FD | 	call	#popregs_
1a864                 | _writeNavKey32_1907_ret
1a864     2D 00 64 FD | 	ret
1a868                 | 
1a868                 | _writeNavKeyFloat_1909
1a868     01 4C 05 F6 | 	mov	COUNT_, #1
1a86c     A9 00 A0 FD | 	call	#pushregs_
1a870     3A 8D 02 F6 | 	mov	local01, arg01
1a874     74 8C 06 F1 | 	add	local01, #116
1a878     46 79 62 FC | 	wrlong	arg03, local01
1a87c     74 8C 86 F1 | 	sub	local01, #116
1a880     C9 78 02 F6 | 	mov	arg03, objptr
1a884     46 93 01 F6 | 	mov	objptr, local01
1a888     44 16 B0 FD | 	call	#_jm_i2c_spin2_start
1a88c     46 93 01 F6 | 	mov	objptr, local01
1a890     6C 8C 06 F1 | 	add	local01, #108
1a894     46 75 C2 FA | 	rdbyte	arg01, local01
1a898     6C 8C 86 F1 | 	sub	local01, #108
1a89c     FE 74 06 F5 | 	and	arg01, #254
1a8a0     74 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a8a4     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
1a8a8     46 93 01 F6 | 	mov	objptr, local01
1a8ac     68 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a8b0     46 93 01 F6 | 	mov	objptr, local01
1a8b4     77 8C 06 F1 | 	add	local01, #119
1a8b8     46 75 C2 FA | 	rdbyte	arg01, local01
1a8bc     77 8C 86 F1 | 	sub	local01, #119
1a8c0     54 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a8c4     46 93 01 F6 | 	mov	objptr, local01
1a8c8     76 8C 06 F1 | 	add	local01, #118
1a8cc     46 75 C2 FA | 	rdbyte	arg01, local01
1a8d0     76 8C 86 F1 | 	sub	local01, #118
1a8d4     40 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a8d8     46 93 01 F6 | 	mov	objptr, local01
1a8dc     75 8C 06 F1 | 	add	local01, #117
1a8e0     46 75 C2 FA | 	rdbyte	arg01, local01
1a8e4     75 8C 86 F1 | 	sub	local01, #117
1a8e8     2C 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a8ec     46 93 01 F6 | 	mov	objptr, local01
1a8f0     74 8C 06 F1 | 	add	local01, #116
1a8f4     46 75 C2 FA | 	rdbyte	arg01, local01
1a8f8     74 8C 86 F1 | 	sub	local01, #116
1a8fc     18 16 B0 FD | 	call	#_jm_i2c_spin2_write
1a900     46 93 01 F6 | 	mov	objptr, local01
1a904     20 17 B0 FD | 	call	#_jm_i2c_spin2_stop
1a908     3C 93 01 F6 | 	mov	objptr, arg03
1a90c     A8 F0 03 F6 | 	mov	ptra, fp
1a910     B3 00 A0 FD | 	call	#popregs_
1a914                 | _writeNavKeyFloat_1909_ret
1a914     2D 00 64 FD | 	ret
1a918                 | 
1a918                 | _button_callback_1934
1a918     09 4C 05 F6 | 	mov	COUNT_, #9
1a91c     A9 00 A0 FD | 	call	#pushregs_
1a920     3A 8D 02 F6 | 	mov	local01, arg01
1a924     3B 8F 02 F6 | 	mov	local02, arg02
1a928     47 91 02 F6 | 	mov	local03, local02
1a92c                 | ' {
1a92c                 | '     MotionStateWindow *window = (MotionStateWindow *)arg;
1a92c                 | '     switch (id)
1a92c     46 93 02 F6 | 	mov	local04, local01
1a930     03 92 26 F3 | 	fle	local04, #3
1a934     30 92 62 FD | 	jmprel	local04
1a938                 | LR__0869
1a938     0C 00 90 FD | 	jmp	#LR__0870
1a93c     AC 00 90 FD | 	jmp	#LR__0873
1a940     A8 00 90 FD | 	jmp	#LR__0874
1a944     F0 00 90 FD | 	jmp	#LR__0878
1a948                 | LR__0870
1a948                 | '         switch (window->state->motionParameters.status)
1a948     48 95 02 FB | 	rdlong	local05, local03
1a94c     18 94 06 F1 | 	add	local05, #24
1a950     4A 97 0A FB | 	rdlong	local06, local05 wz
1a954     0C 00 90 AD |  if_e	jmp	#LR__0871
1a958     01 96 0E F2 | 	cmp	local06, #1 wz
1a95c     48 00 90 AD |  if_e	jmp	#LR__0872
1a960     D4 00 90 FD | 	jmp	#LR__0878
1a964                 | LR__0871
1a964     00 74 06 F6 | 	mov	arg01, #0
1a968     64 EB B0 FD | 	call	#__system___getiolock_1306
1a96c     1A 75 02 F6 | 	mov	arg01, result1
1a970     FC B2 B0 FD | 	call	#__system___lockmem
1a974     58 01 00 FF 
1a978     9A 76 06 F6 | 	mov	arg02, ##@LR__2308
1a97c     00 74 06 F6 | 	mov	arg01, #0
1a980     00 78 06 F6 | 	mov	arg03, #0
1a984     90 B8 B0 FD | 	call	#__system___basic_print_string
1a988     00 74 06 F6 | 	mov	arg01, #0
1a98c     40 EB B0 FD | 	call	#__system___getiolock_1306
1a990     1A 01 68 FC | 	wrlong	#0, result1
1a994     48 75 02 FB | 	rdlong	arg01, local03
1a998     08 76 06 F6 | 	mov	arg02, #8
1a99c     01 78 06 F6 | 	mov	arg03, #1
1a9a0     10 80 BE FD | 	call	#_state_machine_set
1a9a4                 | '             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_ENABLED);
1a9a4                 | '             break;
1a9a4     90 00 90 FD | 	jmp	#LR__0878
1a9a8                 | LR__0872
1a9a8     00 74 06 F6 | 	mov	arg01, #0
1a9ac     20 EB B0 FD | 	call	#__system___getiolock_1306
1a9b0     1A 75 02 F6 | 	mov	arg01, result1
1a9b4     B8 B2 B0 FD | 	call	#__system___lockmem
1a9b8     58 01 00 FF 
1a9bc     AB 76 06 F6 | 	mov	arg02, ##@LR__2309
1a9c0     00 74 06 F6 | 	mov	arg01, #0
1a9c4     00 78 06 F6 | 	mov	arg03, #0
1a9c8     4C B8 B0 FD | 	call	#__system___basic_print_string
1a9cc     00 74 06 F6 | 	mov	arg01, #0
1a9d0     FC EA B0 FD | 	call	#__system___getiolock_1306
1a9d4     1A 01 68 FC | 	wrlong	#0, result1
1a9d8     48 75 02 FB | 	rdlong	arg01, local03
1a9dc     08 76 06 F6 | 	mov	arg02, #8
1a9e0     00 78 06 F6 | 	mov	arg03, #0
1a9e4     CC 7F BE FD | 	call	#_state_machine_set
1a9e8                 | '             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_DISABLED);
1a9e8                 | '             break;
1a9e8                 | '         }
1a9e8                 | '         break;
1a9e8     4C 00 90 FD | 	jmp	#LR__0878
1a9ec                 | LR__0873
1a9ec                 | LR__0874
1a9ec                 | '     {
1a9ec                 | '         switch (window->state->motionParameters.mode)
1a9ec     48 95 02 FB | 	rdlong	local05, local03
1a9f0     20 94 06 F1 | 	add	local05, #32
1a9f4     4A 99 0A FB | 	rdlong	local07, local05 wz
1a9f8     0C 00 90 AD |  if_e	jmp	#LR__0875
1a9fc     01 98 0E F2 | 	cmp	local07, #1 wz
1aa00     18 00 90 AD |  if_e	jmp	#LR__0876
1aa04     30 00 90 FD | 	jmp	#LR__0877
1aa08                 | LR__0875
1aa08     48 75 02 FB | 	rdlong	arg01, local03
1aa0c     0A 76 06 F6 | 	mov	arg02, #10
1aa10     01 78 06 F6 | 	mov	arg03, #1
1aa14     9C 7F BE FD | 	call	#_state_machine_set
1aa18                 | '             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_TEST);
1aa18                 | '             break;
1aa18     1C 00 90 FD | 	jmp	#LR__0877
1aa1c                 | LR__0876
1aa1c     48 95 02 FB | 	rdlong	local05, local03
1aa20     0A 9A 06 F6 | 	mov	local08, #10
1aa24     00 9C 06 F6 | 	mov	local09, #0
1aa28     4A 75 02 F6 | 	mov	arg01, local05
1aa2c     0A 76 06 F6 | 	mov	arg02, #10
1aa30     00 78 06 F6 | 	mov	arg03, #0
1aa34     7C 7F BE FD | 	call	#_state_machine_set
1aa38                 | '             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_MANUAL);
1aa38                 | '             break;
1aa38                 | LR__0877
1aa38                 | LR__0878
1aa38     A8 F0 03 F6 | 	mov	ptra, fp
1aa3c     B3 00 A0 FD | 	call	#popregs_
1aa40                 | _button_callback_1934_ret
1aa40     2D 00 64 FD | 	ret
1aa44                 | 
1aa44                 | _update_status_1940
1aa44     10 4C 05 F6 | 	mov	COUNT_, #16
1aa48     A9 00 A0 FD | 	call	#pushregs_
1aa4c     3A 8D 02 F6 | 	mov	local01, arg01
1aa50     3B 8F 02 F6 | 	mov	local02, arg02
1aa54     3C 91 02 F6 | 	mov	local03, arg03
1aa58     48 93 02 F6 | 	mov	local04, local03
1aa5c     00 94 06 F6 | 	mov	local05, #0
1aa60     00 96 06 F6 | 	mov	local06, #0
1aa64     00 98 06 F6 | 	mov	local07, #0
1aa68     00 9A 06 F6 | 	mov	local08, #0
1aa6c                 | '     switch (window->state->motionParameters.status)
1aa6c     49 9D 02 FB | 	rdlong	local09, local04
1aa70     18 9C 06 F1 | 	add	local09, #24
1aa74     4E 9F 02 FB | 	rdlong	local10, local09
1aa78     4F A1 02 F6 | 	mov	local11, local10
1aa7c     05 A0 26 F3 | 	fle	local11, #5
1aa80     30 A0 62 FD | 	jmprel	local11
1aa84                 | LR__0879
1aa84     14 00 90 FD | 	jmp	#LR__0880
1aa88     5C 00 90 FD | 	jmp	#LR__0881
1aa8c     80 00 90 FD | 	jmp	#LR__0882
1aa90     A4 00 90 FD | 	jmp	#LR__0883
1aa94     C8 00 90 FD | 	jmp	#LR__0884
1aa98     EC 00 90 FD | 	jmp	#LR__0885
1aa9c                 | LR__0880
1aa9c     55 01 00 FF 
1aaa0     EC D7 05 F1 | 	add	ptr__dat__, ##175084
1aaa4     49 9D 02 FB | 	rdlong	local09, local04
1aaa8     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1aaac     4E A3 02 FB | 	rdlong	local12, local09
1aab0     02 A2 0E F2 | 	cmp	local12, #2 wz
1aab4     55 01 00 FF 
1aab8     EC D7 85 F1 | 	sub	ptr__dat__, ##175084
1aabc     03 00 00 AF 
1aac0     E0 95 06 A6 |  if_e	mov	local05, ##2016
1aac4     00 96 06 A6 |  if_e	mov	local06, #0
1aac8     0F 98 CE A9 |  if_e	bmask	local07, #15
1aacc     B8 00 90 AD |  if_e	jmp	#LR__0886
1aad0     50 00 00 FF 
1aad4     45 95 06 F6 | 	mov	local05, ##41285
1aad8     00 96 06 F6 | 	mov	local06, #0
1aadc     7F 00 00 FF 
1aae0     E0 99 06 F6 | 	mov	local07, ##65504
1aae4                 | '         {
1aae4                 | '             statusOutlineColor =  0xA145 ;
1aae4                 | '             statusInnerColor =  0x0000 ;
1aae4                 | '             statusTextColor =  0xffe0 ;
1aae4                 | '         }
1aae4                 | '         break;
1aae4     A0 00 90 FD | 	jmp	#LR__0886
1aae8                 | LR__0881
1aae8     55 01 00 FF 
1aaec     F4 D7 05 F1 | 	add	ptr__dat__, ##175092
1aaf0     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1aaf4     03 00 00 FF 
1aaf8     E0 95 06 F6 | 	mov	local05, ##2016
1aafc     0F 96 CE F9 | 	bmask	local06, #15
1ab00     00 98 06 F6 | 	mov	local07, #0
1ab04                 | '     {
1ab04                 | '         newString = enabledStr;
1ab04                 | '         statusOutlineColor =  0x07e0 ;
1ab04                 | '         statusInnerColor =  0xffff ;
1ab04                 | '         statusTextColor =  0x0000 ;
1ab04                 | '         break;
1ab04     55 01 00 FF 
1ab08     F4 D7 85 F1 | 	sub	ptr__dat__, ##175092
1ab0c     78 00 90 FD | 	jmp	#LR__0886
1ab10                 | LR__0882
1ab10     55 01 00 FF 
1ab14     FC D7 05 F1 | 	add	ptr__dat__, ##175100
1ab18     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ab1c     1F 94 06 F6 | 	mov	local05, #31
1ab20     7F 00 00 FF 
1ab24     E0 97 06 F6 | 	mov	local06, ##65504
1ab28     00 98 06 F6 | 	mov	local07, #0
1ab2c                 | '     {
1ab2c                 | ' 
1ab2c                 | '         newString = smplimStr;
1ab2c                 | '         statusOutlineColor =  0x001f ;
1ab2c                 | '         statusInnerColor =  0xffe0 ;
1ab2c                 | '         statusTextColor =  0x0000 ;
1ab2c                 | '         break;
1ab2c     55 01 00 FF 
1ab30     FC D7 85 F1 | 	sub	ptr__dat__, ##175100
1ab34     50 00 90 FD | 	jmp	#LR__0886
1ab38                 | LR__0883
1ab38     56 01 00 FF 
1ab3c     04 D6 05 F1 | 	add	ptr__dat__, ##175108
1ab40     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ab44     1F 94 06 F6 | 	mov	local05, #31
1ab48     7F 00 00 FF 
1ab4c     E0 97 06 F6 | 	mov	local06, ##65504
1ab50     00 98 06 F6 | 	mov	local07, #0
1ab54                 | '     {
1ab54                 | '         newString = mchlimStr;
1ab54                 | '         statusOutlineColor =  0x001f ;
1ab54                 | '         statusInnerColor =  0xffe0 ;
1ab54                 | '         statusTextColor =  0x0000 ;
1ab54                 | '         break;
1ab54     56 01 00 FF 
1ab58     04 D6 85 F1 | 	sub	ptr__dat__, ##175108
1ab5c     28 00 90 FD | 	jmp	#LR__0886
1ab60                 | LR__0884
1ab60     56 01 00 FF 
1ab64     0C D6 05 F1 | 	add	ptr__dat__, ##175116
1ab68     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ab6c     1F 94 06 F6 | 	mov	local05, #31
1ab70     7C 00 00 FF 
1ab74     00 96 06 F6 | 	mov	local06, ##63488
1ab78     0F 98 CE F9 | 	bmask	local07, #15
1ab7c                 | '     {
1ab7c                 | '         newString = faultedStr;
1ab7c                 | '         statusOutlineColor =  0x001f ;
1ab7c                 | '         statusInnerColor =  0xf800 ;
1ab7c                 | '         statusTextColor =  0xffff ;
1ab7c                 | '         break;
1ab7c     56 01 00 FF 
1ab80     0C D6 85 F1 | 	sub	ptr__dat__, ##175116
1ab84     00 00 90 FD | 	jmp	#LR__0886
1ab88                 | LR__0885
1ab88                 | '         break;
1ab88                 | LR__0886
1ab88     10 8F 06 F1 | 	add	local02, #272
1ab8c     47 9D 02 FB | 	rdlong	local09, local02
1ab90     10 8F 86 F1 | 	sub	local02, #272
1ab94     4A 9D 0A F2 | 	cmp	local09, local05 wz
1ab98     38 00 90 5D |  if_ne	jmp	#LR__0887
1ab9c     04 8E 06 F1 | 	add	local02, #4
1aba0     47 A5 02 FB | 	rdlong	local13, local02
1aba4     04 8E 86 F1 | 	sub	local02, #4
1aba8     0C A5 06 F1 | 	add	local13, #268
1abac     52 A7 02 FB | 	rdlong	local14, local13
1abb0     4B A7 0A F2 | 	cmp	local14, local06 wz
1abb4     1C 00 90 5D |  if_ne	jmp	#LR__0887
1abb8     04 8E 06 F1 | 	add	local02, #4
1abbc     47 A9 02 FB | 	rdlong	local15, local02
1abc0     04 8E 86 F1 | 	sub	local02, #4
1abc4     10 A9 06 F1 | 	add	local15, #272
1abc8     54 AB 02 FB | 	rdlong	local16, local15
1abcc     4C AB 0A F2 | 	cmp	local16, local07 wz
1abd0                 | '         module->child[0]->backgroundColor == statusInnerColor &&
1abd0                 | '         module->child[0]->foregroundColor == statusTextColor)
1abd0                 | '     {
1abd0                 | '         return;
1abd0     58 00 90 AD |  if_e	jmp	#LR__0888
1abd4                 | LR__0887
1abd4     14 8F 06 F1 | 	add	local02, #276
1abd8     47 95 62 FC | 	wrlong	local05, local02
1abdc     14 8F 86 F1 | 	sub	local02, #276
1abe0     47 75 02 F6 | 	mov	arg01, local02
1abe4     10 75 06 F1 | 	add	arg01, #272
1abe8     3A 97 62 FC | 	wrlong	local06, arg01
1abec     04 74 86 F1 | 	sub	arg01, #4
1abf0     3A 97 62 FC | 	wrlong	local06, arg01
1abf4     04 8E 06 F1 | 	add	local02, #4
1abf8     47 75 02 FB | 	rdlong	arg01, local02
1abfc     4B 79 02 F6 | 	mov	arg03, local06
1ac00     10 75 06 F1 | 	add	arg01, #272
1ac04     3A 99 62 FC | 	wrlong	local07, arg01
1ac08     04 74 86 F1 | 	sub	arg01, #4
1ac0c     3A 79 62 FC | 	wrlong	arg03, arg01
1ac10     47 75 02 FB | 	rdlong	arg01, local02
1ac14     04 8E 86 F1 | 	sub	local02, #4
1ac18     D0 74 06 F1 | 	add	arg01, #208
1ac1c     3A 9B 62 FC | 	wrlong	local08, arg01
1ac20     46 75 02 F6 | 	mov	arg01, local01
1ac24     47 77 02 F6 | 	mov	arg02, local02
1ac28     F4 EC BE FD | 	call	#_module_draw
1ac2c                 | LR__0888
1ac2c     A8 F0 03 F6 | 	mov	ptra, fp
1ac30     B3 00 A0 FD | 	call	#popregs_
1ac34                 | _update_status_1940_ret
1ac34     2D 00 64 FD | 	ret
1ac38                 | 
1ac38                 | _update_condition_1946
1ac38     0F 4C 05 F6 | 	mov	COUNT_, #15
1ac3c     A9 00 A0 FD | 	call	#pushregs_
1ac40     3A 8D 02 F6 | 	mov	local01, arg01
1ac44     3B 8F 02 F6 | 	mov	local02, arg02
1ac48     3C 91 02 F6 | 	mov	local03, arg03
1ac4c     48 93 02 F6 | 	mov	local04, local03
1ac50     00 94 06 F6 | 	mov	local05, #0
1ac54     00 96 06 F6 | 	mov	local06, #0
1ac58     00 98 06 F6 | 	mov	local07, #0
1ac5c     00 9A 06 F6 | 	mov	local08, #0
1ac60                 | ' 
1ac60                 | '     switch (window->state->motionParameters.condition)
1ac60     49 9D 02 FB | 	rdlong	local09, local04
1ac64     1C 9C 06 F1 | 	add	local09, #28
1ac68     4E 9F 02 FB | 	rdlong	local10, local09
1ac6c     4F A1 02 F6 | 	mov	local11, local10
1ac70     09 A0 26 F3 | 	fle	local11, #9
1ac74     30 A0 62 FD | 	jmprel	local11
1ac78                 | LR__0889
1ac78     24 00 90 FD | 	jmp	#LR__0890
1ac7c     4C 00 90 FD | 	jmp	#LR__0891
1ac80     74 00 90 FD | 	jmp	#LR__0892
1ac84     9C 00 90 FD | 	jmp	#LR__0893
1ac88     C4 00 90 FD | 	jmp	#LR__0894
1ac8c     EC 00 90 FD | 	jmp	#LR__0895
1ac90     14 01 90 FD | 	jmp	#LR__0896
1ac94     3C 01 90 FD | 	jmp	#LR__0897
1ac98     64 01 90 FD | 	jmp	#LR__0898
1ac9c     8C 01 90 FD | 	jmp	#LR__0899
1aca0                 | LR__0890
1aca0     56 01 00 FF 
1aca4     14 D6 05 F1 | 	add	ptr__dat__, ##175124
1aca8     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1acac     7C 00 00 FF 
1acb0     1F 94 06 F6 | 	mov	local05, ##63519
1acb4     7C 00 00 FF 
1acb8     1F 96 06 F6 | 	mov	local06, ##63519
1acbc     00 98 06 F6 | 	mov	local07, #0
1acc0                 | '     {
1acc0                 | '         newString = lengthStr;
1acc0                 | '         conditionOutlineColor =  0xf81f ;
1acc0                 | '         conditionInnerColor =  0xf81f ;
1acc0                 | '         conditionTextColor =  0x0000 ;
1acc0                 | '         break;
1acc0     56 01 00 FF 
1acc4     14 D6 85 F1 | 	sub	ptr__dat__, ##175124
1acc8     60 01 90 FD | 	jmp	#LR__0900
1accc                 | LR__0891
1accc     56 01 00 FF 
1acd0     1B D6 05 F1 | 	add	ptr__dat__, ##175131
1acd4     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1acd8     7C 00 00 FF 
1acdc     1F 94 06 F6 | 	mov	local05, ##63519
1ace0     7C 00 00 FF 
1ace4     1F 96 06 F6 | 	mov	local06, ##63519
1ace8     00 98 06 F6 | 	mov	local07, #0
1acec                 | '     {
1acec                 | '         newString = forceStr;
1acec                 | '         conditionOutlineColor =  0xf81f ;
1acec                 | '         conditionInnerColor =  0xf81f ;
1acec                 | '         conditionTextColor =  0x0000 ;
1acec                 | '         break;
1acec     56 01 00 FF 
1acf0     1B D6 85 F1 | 	sub	ptr__dat__, ##175131
1acf4     34 01 90 FD | 	jmp	#LR__0900
1acf8                 | LR__0892
1acf8     56 01 00 FF 
1acfc     21 D6 05 F1 | 	add	ptr__dat__, ##175137
1ad00     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ad04     7F 00 00 FF 
1ad08     E0 95 06 F6 | 	mov	local05, ##65504
1ad0c     7F 00 00 FF 
1ad10     E0 97 06 F6 | 	mov	local06, ##65504
1ad14     00 98 06 F6 | 	mov	local07, #0
1ad18                 | '     {
1ad18                 | '         newString = tensionStr;
1ad18                 | '         conditionOutlineColor =  0xffe0 ;
1ad18                 | '         conditionInnerColor =  0xffe0 ;
1ad18                 | '         conditionTextColor =  0x0000 ;
1ad18                 | '         break;
1ad18     56 01 00 FF 
1ad1c     21 D6 85 F1 | 	sub	ptr__dat__, ##175137
1ad20     08 01 90 FD | 	jmp	#LR__0900
1ad24                 | LR__0893
1ad24     56 01 00 FF 
1ad28     29 D6 05 F1 | 	add	ptr__dat__, ##175145
1ad2c     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ad30     7F 00 00 FF 
1ad34     E0 95 06 F6 | 	mov	local05, ##65504
1ad38     7F 00 00 FF 
1ad3c     E0 97 06 F6 | 	mov	local06, ##65504
1ad40     00 98 06 F6 | 	mov	local07, #0
1ad44                 | '     {
1ad44                 | '         newString = compresStr;
1ad44                 | '         conditionOutlineColor =  0xffe0 ;
1ad44                 | '         conditionInnerColor =  0xffe0 ;
1ad44                 | '         conditionTextColor =  0x0000 ;
1ad44                 | '         break;
1ad44     56 01 00 FF 
1ad48     29 D6 85 F1 | 	sub	ptr__dat__, ##175145
1ad4c     DC 00 90 FD | 	jmp	#LR__0900
1ad50                 | LR__0894
1ad50     56 01 00 FF 
1ad54     31 D6 05 F1 | 	add	ptr__dat__, ##175153
1ad58     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ad5c     7F 00 00 FF 
1ad60     E0 95 06 F6 | 	mov	local05, ##65504
1ad64     7F 00 00 FF 
1ad68     E0 97 06 F6 | 	mov	local06, ##65504
1ad6c     00 98 06 F6 | 	mov	local07, #0
1ad70                 | '     {
1ad70                 | '         newString = upperStr;
1ad70                 | '         conditionOutlineColor =  0xffe0 ;
1ad70                 | '         conditionInnerColor =  0xffe0 ;
1ad70                 | '         conditionTextColor =  0x0000 ;
1ad70                 | '         break;
1ad70     56 01 00 FF 
1ad74     31 D6 85 F1 | 	sub	ptr__dat__, ##175153
1ad78     B0 00 90 FD | 	jmp	#LR__0900
1ad7c                 | LR__0895
1ad7c     56 01 00 FF 
1ad80     37 D6 05 F1 | 	add	ptr__dat__, ##175159
1ad84     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ad88     7F 00 00 FF 
1ad8c     E0 95 06 F6 | 	mov	local05, ##65504
1ad90     7F 00 00 FF 
1ad94     E0 97 06 F6 | 	mov	local06, ##65504
1ad98     00 98 06 F6 | 	mov	local07, #0
1ad9c                 | '     {
1ad9c                 | '         newString = lowerStr;
1ad9c                 | '         conditionOutlineColor =  0xffe0 ;
1ad9c                 | '         conditionInnerColor =  0xffe0 ;
1ad9c                 | '         conditionTextColor =  0x0000 ;
1ad9c                 | '         break;
1ad9c     56 01 00 FF 
1ada0     37 D6 85 F1 | 	sub	ptr__dat__, ##175159
1ada4     84 00 90 FD | 	jmp	#LR__0900
1ada8                 | LR__0896
1ada8     56 01 00 FF 
1adac     3D D6 05 F1 | 	add	ptr__dat__, ##175165
1adb0     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1adb4     7F 00 00 FF 
1adb8     E0 95 06 F6 | 	mov	local05, ##65504
1adbc     7F 00 00 FF 
1adc0     E0 97 06 F6 | 	mov	local06, ##65504
1adc4     00 98 06 F6 | 	mov	local07, #0
1adc8                 | '     {
1adc8                 | '         newString = doorStr;
1adc8                 | '         conditionOutlineColor =  0xffe0 ;
1adc8                 | '         conditionInnerColor =  0xffe0 ;
1adc8                 | '         conditionTextColor =  0x0000 ;
1adc8                 | '         break;
1adc8     56 01 00 FF 
1adcc     3D D6 85 F1 | 	sub	ptr__dat__, ##175165
1add0     58 00 90 FD | 	jmp	#LR__0900
1add4                 | LR__0897
1add4     56 01 00 FF 
1add8     42 D6 05 F1 | 	add	ptr__dat__, ##175170
1addc     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ade0     7C 00 00 FF 
1ade4     00 94 06 F6 | 	mov	local05, ##63488
1ade8     7C 00 00 FF 
1adec     00 96 06 F6 | 	mov	local06, ##63488
1adf0     0F 98 CE F9 | 	bmask	local07, #15
1adf4                 | '     {
1adf4                 | '         newString = stoppedStr;
1adf4                 | '         conditionOutlineColor =  0xf800 ;
1adf4                 | '         conditionInnerColor =  0xf800 ;
1adf4                 | '         conditionTextColor =  0xffff ;
1adf4                 | '         break;
1adf4     56 01 00 FF 
1adf8     42 D6 85 F1 | 	sub	ptr__dat__, ##175170
1adfc     2C 00 90 FD | 	jmp	#LR__0900
1ae00                 | LR__0898
1ae00     56 01 00 FF 
1ae04     4A D6 05 F1 | 	add	ptr__dat__, ##175178
1ae08     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1ae0c     7E 00 00 FF 
1ae10     1F 94 06 F6 | 	mov	local05, ##64543
1ae14     7E 00 00 FF 
1ae18     1F 96 06 F6 | 	mov	local06, ##64543
1ae1c     00 98 06 F6 | 	mov	local07, #0
1ae20                 | '     {
1ae20                 | '         newString = movingStr;
1ae20                 | '         conditionOutlineColor =  0xfc1f ;
1ae20                 | '         conditionInnerColor =  0xfc1f ;
1ae20                 | '         conditionTextColor =  0x0000 ;
1ae20                 | '         break;
1ae20     56 01 00 FF 
1ae24     4A D6 85 F1 | 	sub	ptr__dat__, ##175178
1ae28     00 00 90 FD | 	jmp	#LR__0900
1ae2c                 | LR__0899
1ae2c                 | '         break;
1ae2c                 | LR__0900
1ae2c     10 8F 06 F1 | 	add	local02, #272
1ae30     47 9D 02 FB | 	rdlong	local09, local02
1ae34     10 8F 86 F1 | 	sub	local02, #272
1ae38     4A 9D 0A F2 | 	cmp	local09, local05 wz
1ae3c     38 00 90 5D |  if_ne	jmp	#LR__0901
1ae40     04 8E 06 F1 | 	add	local02, #4
1ae44     47 A3 02 FB | 	rdlong	local12, local02
1ae48     04 8E 86 F1 | 	sub	local02, #4
1ae4c     0C A3 06 F1 | 	add	local12, #268
1ae50     51 A5 02 FB | 	rdlong	local13, local12
1ae54     4B A5 0A F2 | 	cmp	local13, local06 wz
1ae58     1C 00 90 5D |  if_ne	jmp	#LR__0901
1ae5c     04 8E 06 F1 | 	add	local02, #4
1ae60     47 A7 02 FB | 	rdlong	local14, local02
1ae64     04 8E 86 F1 | 	sub	local02, #4
1ae68     10 A7 06 F1 | 	add	local14, #272
1ae6c     53 A9 02 FB | 	rdlong	local15, local14
1ae70     4C A9 0A F2 | 	cmp	local15, local07 wz
1ae74                 | '         module->child[0]->backgroundColor == conditionInnerColor &&
1ae74                 | '         module->child[0]->foregroundColor == conditionTextColor)
1ae74                 | '     {
1ae74                 | '         return;
1ae74     4C 00 90 AD |  if_e	jmp	#LR__0902
1ae78                 | LR__0901
1ae78     47 75 02 F6 | 	mov	arg01, local02
1ae7c     10 75 06 F1 | 	add	arg01, #272
1ae80     3A 95 62 FC | 	wrlong	local05, arg01
1ae84     04 74 86 F1 | 	sub	arg01, #4
1ae88     3A 95 62 FC | 	wrlong	local05, arg01
1ae8c     04 8E 06 F1 | 	add	local02, #4
1ae90     47 75 02 FB | 	rdlong	arg01, local02
1ae94     4B 79 02 F6 | 	mov	arg03, local06
1ae98     10 75 06 F1 | 	add	arg01, #272
1ae9c     3A 99 62 FC | 	wrlong	local07, arg01
1aea0     04 74 86 F1 | 	sub	arg01, #4
1aea4     3A 79 62 FC | 	wrlong	arg03, arg01
1aea8     47 75 02 FB | 	rdlong	arg01, local02
1aeac     04 8E 86 F1 | 	sub	local02, #4
1aeb0     D0 74 06 F1 | 	add	arg01, #208
1aeb4     3A 9B 62 FC | 	wrlong	local08, arg01
1aeb8     46 75 02 F6 | 	mov	arg01, local01
1aebc     47 77 02 F6 | 	mov	arg02, local02
1aec0     5C EA BE FD | 	call	#_module_draw
1aec4                 | LR__0902
1aec4     A8 F0 03 F6 | 	mov	ptra, fp
1aec8     B3 00 A0 FD | 	call	#popregs_
1aecc                 | _update_condition_1946_ret
1aecc     2D 00 64 FD | 	ret
1aed0                 | 
1aed0                 | _update_mode_1952
1aed0     0F 4C 05 F6 | 	mov	COUNT_, #15
1aed4     A9 00 A0 FD | 	call	#pushregs_
1aed8     3A 8D 02 F6 | 	mov	local01, arg01
1aedc     3B 8F 02 F6 | 	mov	local02, arg02
1aee0     3C 91 02 F6 | 	mov	local03, arg03
1aee4     48 93 02 F6 | 	mov	local04, local03
1aee8     00 94 06 F6 | 	mov	local05, #0
1aeec     00 96 06 F6 | 	mov	local06, #0
1aef0     00 98 06 F6 | 	mov	local07, #0
1aef4     00 9A 06 F6 | 	mov	local08, #0
1aef8                 | ' 
1aef8                 | '     switch (window->state->motionParameters.mode)
1aef8     49 9D 02 FB | 	rdlong	local09, local04
1aefc     20 9C 06 F1 | 	add	local09, #32
1af00     4E 9F 02 FB | 	rdlong	local10, local09
1af04     4F A1 02 F6 | 	mov	local11, local10
1af08     03 A0 26 F3 | 	fle	local11, #3
1af0c     30 A0 62 FD | 	jmprel	local11
1af10                 | LR__0903
1af10     0C 00 90 FD | 	jmp	#LR__0904
1af14     34 00 90 FD | 	jmp	#LR__0905
1af18     5C 00 90 FD | 	jmp	#LR__0906
1af1c     84 00 90 FD | 	jmp	#LR__0907
1af20                 | LR__0904
1af20     56 01 00 FF 
1af24     51 D6 05 F1 | 	add	ptr__dat__, ##175185
1af28     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1af2c     7C 00 00 FF 
1af30     1F 94 06 F6 | 	mov	local05, ##63519
1af34     7C 00 00 FF 
1af38     1F 96 06 F6 | 	mov	local06, ##63519
1af3c     00 98 06 F6 | 	mov	local07, #0
1af40                 | '     {
1af40                 | '         newString = manualStr;
1af40                 | '         conditionOutlineColor =  0xf81f ;
1af40                 | '         conditionInnerColor =  0xf81f ;
1af40                 | '         conditionTextColor =  0x0000 ;
1af40                 | '         break;
1af40     56 01 00 FF 
1af44     51 D6 85 F1 | 	sub	ptr__dat__, ##175185
1af48     58 00 90 FD | 	jmp	#LR__0908
1af4c                 | LR__0905
1af4c     56 01 00 FF 
1af50     58 D6 05 F1 | 	add	ptr__dat__, ##175192
1af54     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1af58     7C 00 00 FF 
1af5c     1F 94 06 F6 | 	mov	local05, ##63519
1af60     7C 00 00 FF 
1af64     1F 96 06 F6 | 	mov	local06, ##63519
1af68     00 98 06 F6 | 	mov	local07, #0
1af6c                 | '     {
1af6c                 | '         newString = testStr;
1af6c                 | '         conditionOutlineColor =  0xf81f ;
1af6c                 | '         conditionInnerColor =  0xf81f ;
1af6c                 | '         conditionTextColor =  0x0000 ;
1af6c                 | '         break;
1af6c     56 01 00 FF 
1af70     58 D6 85 F1 | 	sub	ptr__dat__, ##175192
1af74     2C 00 90 FD | 	jmp	#LR__0908
1af78                 | LR__0906
1af78     56 01 00 FF 
1af7c     5D D6 05 F1 | 	add	ptr__dat__, ##175197
1af80     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1af84     7C 00 00 FF 
1af88     1F 94 06 F6 | 	mov	local05, ##63519
1af8c     7C 00 00 FF 
1af90     1F 96 06 F6 | 	mov	local06, ##63519
1af94     00 98 06 F6 | 	mov	local07, #0
1af98                 | '     {
1af98                 | '         newString = runStr;
1af98                 | '         conditionOutlineColor =  0xf81f ;
1af98                 | '         conditionInnerColor =  0xf81f ;
1af98                 | '         conditionTextColor =  0x0000 ;
1af98                 | '         break;
1af98     56 01 00 FF 
1af9c     5D D6 85 F1 | 	sub	ptr__dat__, ##175197
1afa0     00 00 90 FD | 	jmp	#LR__0908
1afa4                 | LR__0907
1afa4                 | '         break;
1afa4                 | LR__0908
1afa4     10 8F 06 F1 | 	add	local02, #272
1afa8     47 9D 02 FB | 	rdlong	local09, local02
1afac     10 8F 86 F1 | 	sub	local02, #272
1afb0     4A 9D 0A F2 | 	cmp	local09, local05 wz
1afb4     5C 00 90 5D |  if_ne	jmp	#LR__0909
1afb8     04 8E 06 F1 | 	add	local02, #4
1afbc     47 A3 02 FB | 	rdlong	local12, local02
1afc0     04 8E 86 F1 | 	sub	local02, #4
1afc4     0C A3 06 F1 | 	add	local12, #268
1afc8     51 A5 02 FB | 	rdlong	local13, local12
1afcc     4B A5 0A F2 | 	cmp	local13, local06 wz
1afd0     40 00 90 5D |  if_ne	jmp	#LR__0909
1afd4     04 8E 06 F1 | 	add	local02, #4
1afd8     47 A7 02 FB | 	rdlong	local14, local02
1afdc     04 8E 86 F1 | 	sub	local02, #4
1afe0     10 A7 06 F1 | 	add	local14, #272
1afe4     53 A9 02 FB | 	rdlong	local15, local14
1afe8     4C A9 0A F2 | 	cmp	local15, local07 wz
1afec     24 00 90 5D |  if_ne	jmp	#LR__0909
1aff0     04 8E 06 F1 | 	add	local02, #4
1aff4     47 75 02 FB | 	rdlong	arg01, local02
1aff8     04 8E 86 F1 | 	sub	local02, #4
1affc     20 E1 BE FD | 	call	#_module_text_get
1b000     1A 77 02 F6 | 	mov	arg02, result1
1b004     4D 75 02 F6 | 	mov	arg01, local08
1b008     00 B1 BE FD | 	call	#_strcmp
1b00c     00 34 0E F2 | 	cmp	result1, #0 wz
1b010                 | '         module->child[0]->backgroundColor == conditionInnerColor &&
1b010                 | '         module->child[0]->foregroundColor == conditionTextColor &&
1b010                 | '         strcmp(newString, module_text_get(module->child[0])) == 0)
1b010                 | '     {
1b010                 | '         return;
1b010     4C 00 90 AD |  if_e	jmp	#LR__0910
1b014                 | LR__0909
1b014     47 75 02 F6 | 	mov	arg01, local02
1b018     10 75 06 F1 | 	add	arg01, #272
1b01c     3A 95 62 FC | 	wrlong	local05, arg01
1b020     04 74 86 F1 | 	sub	arg01, #4
1b024     3A 95 62 FC | 	wrlong	local05, arg01
1b028     04 8E 06 F1 | 	add	local02, #4
1b02c     47 75 02 FB | 	rdlong	arg01, local02
1b030     4B 79 02 F6 | 	mov	arg03, local06
1b034     10 75 06 F1 | 	add	arg01, #272
1b038     3A 99 62 FC | 	wrlong	local07, arg01
1b03c     04 74 86 F1 | 	sub	arg01, #4
1b040     3A 79 62 FC | 	wrlong	arg03, arg01
1b044     47 75 02 FB | 	rdlong	arg01, local02
1b048     04 8E 86 F1 | 	sub	local02, #4
1b04c     D0 74 06 F1 | 	add	arg01, #208
1b050     3A 9B 62 FC | 	wrlong	local08, arg01
1b054     46 75 02 F6 | 	mov	arg01, local01
1b058     47 77 02 F6 | 	mov	arg02, local02
1b05c     C0 E8 BE FD | 	call	#_module_draw
1b060                 | LR__0910
1b060     A8 F0 03 F6 | 	mov	ptra, fp
1b064     B3 00 A0 FD | 	call	#popregs_
1b068                 | _update_mode_1952_ret
1b068     2D 00 64 FD | 	ret
1b06c                 | 
1b06c                 | _button_set_function_2006
1b06c     3B 77 02 FB | 	rdlong	arg02, arg02
1b070     3A 79 02 F6 | 	mov	arg03, arg01
1b074     3B 75 02 F6 | 	mov	arg01, arg02
1b078     0B 76 06 F6 | 	mov	arg02, #11
1b07c     34 79 BE FD | 	call	#_state_machine_set
1b080                 | _button_set_function_2006_ret
1b080     2D 00 64 FD | 	ret
1b084                 | 
1b084                 | _update_header_2010
1b084     09 4C 05 F6 | 	mov	COUNT_, #9
1b088     A9 00 A0 FD | 	call	#pushregs_
1b08c     38 F0 07 F1 | 	add	ptra, #56
1b090     A8 74 62 FC | 	wrlong	arg01, fp
1b094     04 50 05 F1 | 	add	fp, #4
1b098     A8 76 62 FC | 	wrlong	arg02, fp
1b09c     04 50 05 F1 | 	add	fp, #4
1b0a0     A8 78 62 FC | 	wrlong	arg03, fp
1b0a4     04 50 05 F1 | 	add	fp, #4
1b0a8     A8 78 62 FC | 	wrlong	arg03, fp
1b0ac     04 50 05 F1 | 	add	fp, #4
1b0b0     A8 74 02 F6 | 	mov	arg01, fp
1b0b4     3C 77 02 F6 | 	mov	arg02, arg03
1b0b8     10 50 85 F1 | 	sub	fp, #16
1b0bc     04 76 06 F1 | 	add	arg02, #4
1b0c0     24 AB B0 FD | 	call	#__system____builtin_strcpy
1b0c4                 | '     __builtin_strcpy(lastHeader, window->functionHeaderBuffer) ;
1b0c4                 | ' 
1b0c4                 | '     switch (window->state->function)
1b0c4     0C 50 05 F1 | 	add	fp, #12
1b0c8     A8 8C 02 FB | 	rdlong	local01, fp
1b0cc     0C 50 85 F1 | 	sub	fp, #12
1b0d0     46 8F 02 F6 | 	mov	local02, local01
1b0d4     47 91 02 FB | 	rdlong	local03, local02
1b0d8     24 90 06 F1 | 	add	local03, #36
1b0dc     48 93 02 FB | 	rdlong	local04, local03
1b0e0     24 90 86 F1 | 	sub	local03, #36
1b0e4     49 95 02 F6 | 	mov	local05, local04
1b0e8     07 94 26 F3 | 	fle	local05, #7
1b0ec     30 94 62 FD | 	jmprel	local05
1b0f0                 | LR__0911
1b0f0     1C 00 90 FD | 	jmp	#LR__0912
1b0f4     38 00 90 FD | 	jmp	#LR__0913
1b0f8     90 00 90 FD | 	jmp	#LR__0914
1b0fc     D8 00 90 FD | 	jmp	#LR__0915
1b100     20 01 90 FD | 	jmp	#LR__0916
1b104     58 02 90 FD | 	jmp	#LR__0921
1b108     A0 02 90 FD | 	jmp	#LR__0922
1b10c     D8 02 90 FD | 	jmp	#LR__0923
1b110                 | LR__0912
1b110     0C 50 05 F1 | 	add	fp, #12
1b114     A8 74 02 FB | 	rdlong	arg01, fp
1b118     0C 50 85 F1 | 	sub	fp, #12
1b11c     04 74 06 F1 | 	add	arg01, #4
1b120     58 01 00 FF 
1b124     BB 76 06 F6 | 	mov	arg02, ##@LR__2310
1b128     68 6C BE FD | 	call	#_sprintf
1b12c                 | '         sprintf(window->functionHeaderBuffer, "OFF");
1b12c                 | '         break;
1b12c     E4 02 90 FD | 	jmp	#LR__0924
1b130                 | LR__0913
1b130     0C 50 05 F1 | 	add	fp, #12
1b134     A8 94 02 FB | 	rdlong	local05, fp
1b138     04 94 06 F1 | 	add	local05, #4
1b13c     58 01 00 FF 
1b140     BF 92 06 F6 | 	mov	local04, ##@LR__2311
1b144     A8 90 02 FB | 	rdlong	local03, fp
1b148     0C 50 85 F1 | 	sub	fp, #12
1b14c     48 91 02 FB | 	rdlong	local03, local03
1b150     28 90 06 F1 | 	add	local03, #40
1b154     48 75 02 FB | 	rdlong	arg01, local03
1b158     98 C5 B0 FD | 	call	#__system___float_fromint
1b15c     1A 75 02 F6 | 	mov	arg01, result1
1b160     00 3D 22 FF 
1b164     00 76 06 F6 | 	mov	arg02, ##1148846080
1b168     DC CA B0 FD | 	call	#__system___float_div
1b16c     1A 91 02 F6 | 	mov	local03, result1
1b170     4A 75 02 F6 | 	mov	arg01, local05
1b174     49 77 02 F6 | 	mov	arg02, local04
1b178     F8 79 02 F6 | 	mov	arg03, ptra
1b17c     61 91 66 FC | 	wrlong	local03, ptra++
1b180     10 6C BE FD | 	call	#_sprintf
1b184     04 F0 87 F1 | 	sub	ptra, #4
1b188                 | '         break;
1b188     88 02 90 FD | 	jmp	#LR__0924
1b18c                 | LR__0914
1b18c     0C 50 05 F1 | 	add	fp, #12
1b190     A8 74 02 FB | 	rdlong	arg01, fp
1b194     3A 95 02 FB | 	rdlong	local05, arg01
1b198     28 94 06 F1 | 	add	local05, #40
1b19c     4A 95 02 FB | 	rdlong	local05, local05
1b1a0     4A 95 52 F6 | 	abs	local05, local05 wc
1b1a4     01 00 00 FF 
1b1a8     E8 95 16 FD | 	qdiv	local05, ##1000
1b1ac     04 74 06 F1 | 	add	arg01, #4
1b1b0     58 01 00 FF 
1b1b4     D1 76 06 F6 | 	mov	arg02, ##@LR__2312
1b1b8     0C 50 85 F1 | 	sub	fp, #12
1b1bc     18 94 62 FD | 	getqx	local05
1b1c0     4A 95 82 F6 | 	negc	local05, local05
1b1c4     F8 79 02 F6 | 	mov	arg03, ptra
1b1c8     61 95 66 FC | 	wrlong	local05, ptra++
1b1cc     C4 6B BE FD | 	call	#_sprintf
1b1d0     04 F0 87 F1 | 	sub	ptra, #4
1b1d4                 | '         sprintf(window->functionHeaderBuffer, "CONT JOG: %dmm", window->state->functionData / 1000);
1b1d4                 | '         break;
1b1d4     3C 02 90 FD | 	jmp	#LR__0924
1b1d8                 | LR__0915
1b1d8     0C 50 05 F1 | 	add	fp, #12
1b1dc     A8 74 02 FB | 	rdlong	arg01, fp
1b1e0     3A 95 02 FB | 	rdlong	local05, arg01
1b1e4     28 94 06 F1 | 	add	local05, #40
1b1e8     4A 95 02 FB | 	rdlong	local05, local05
1b1ec     4A 95 52 F6 | 	abs	local05, local05 wc
1b1f0     01 00 00 FF 
1b1f4     E8 95 16 FD | 	qdiv	local05, ##1000
1b1f8     04 74 06 F1 | 	add	arg01, #4
1b1fc     58 01 00 FF 
1b200     E0 76 06 F6 | 	mov	arg02, ##@LR__2313
1b204     0C 50 85 F1 | 	sub	fp, #12
1b208     18 94 62 FD | 	getqx	local05
1b20c     4A 95 82 F6 | 	negc	local05, local05
1b210     F8 79 02 F6 | 	mov	arg03, ptra
1b214     61 95 66 FC | 	wrlong	local05, ptra++
1b218     78 6B BE FD | 	call	#_sprintf
1b21c     04 F0 87 F1 | 	sub	ptra, #4
1b220                 | '         sprintf(window->functionHeaderBuffer, "POSN MOVE: %dmm", window->state->functionData / 1000);
1b220                 | '         break;
1b220     F0 01 90 FD | 	jmp	#LR__0924
1b224                 | LR__0916
1b224     0C 50 05 F1 | 	add	fp, #12
1b228     A8 76 02 FB | 	rdlong	arg02, fp
1b22c     0C 50 85 F1 | 	sub	fp, #12
1b230     3B 77 02 FB | 	rdlong	arg02, arg02
1b234     28 76 06 F1 | 	add	arg02, #40
1b238     3B 77 0A FB | 	rdlong	arg02, arg02 wz
1b23c     20 00 90 5D |  if_ne	jmp	#LR__0917
1b240     0C 50 05 F1 | 	add	fp, #12
1b244     A8 74 02 FB | 	rdlong	arg01, fp
1b248     0C 50 85 F1 | 	sub	fp, #12
1b24c     04 74 06 F1 | 	add	arg01, #4
1b250     58 01 00 FF 
1b254     F0 76 06 F6 | 	mov	arg02, ##@LR__2314
1b258     38 6B BE FD | 	call	#_sprintf
1b25c     B4 01 90 FD | 	jmp	#LR__0924
1b260                 | LR__0917
1b260     0C 50 05 F1 | 	add	fp, #12
1b264     A8 76 02 FB | 	rdlong	arg02, fp
1b268     0C 50 85 F1 | 	sub	fp, #12
1b26c     3B 77 02 FB | 	rdlong	arg02, arg02
1b270     28 76 06 F1 | 	add	arg02, #40
1b274     3B 95 02 FB | 	rdlong	local05, arg02
1b278     02 94 0E F2 | 	cmp	local05, #2 wz
1b27c     20 00 90 5D |  if_ne	jmp	#LR__0918
1b280     0C 50 05 F1 | 	add	fp, #12
1b284     A8 74 02 FB | 	rdlong	arg01, fp
1b288     0C 50 85 F1 | 	sub	fp, #12
1b28c     04 74 06 F1 | 	add	arg01, #4
1b290     58 01 00 FF 
1b294     F5 76 06 F6 | 	mov	arg02, ##@LR__2315
1b298     F8 6A BE FD | 	call	#_sprintf
1b29c     74 01 90 FD | 	jmp	#LR__0924
1b2a0                 | LR__0918
1b2a0     0C 50 05 F1 | 	add	fp, #12
1b2a4     A8 76 02 FB | 	rdlong	arg02, fp
1b2a8     0C 50 85 F1 | 	sub	fp, #12
1b2ac     3B 77 02 FB | 	rdlong	arg02, arg02
1b2b0     28 76 06 F1 | 	add	arg02, #40
1b2b4     3B 95 02 FB | 	rdlong	local05, arg02
1b2b8     04 94 0E F2 | 	cmp	local05, #4 wz
1b2bc     20 00 90 5D |  if_ne	jmp	#LR__0919
1b2c0     0C 50 05 F1 | 	add	fp, #12
1b2c4     A8 74 02 FB | 	rdlong	arg01, fp
1b2c8     0C 50 85 F1 | 	sub	fp, #12
1b2cc     04 74 06 F1 | 	add	arg01, #4
1b2d0     58 01 00 FF 
1b2d4     FC 76 06 F6 | 	mov	arg02, ##@LR__2316
1b2d8     B8 6A BE FD | 	call	#_sprintf
1b2dc     34 01 90 FD | 	jmp	#LR__0924
1b2e0                 | LR__0919
1b2e0     0C 50 05 F1 | 	add	fp, #12
1b2e4     A8 76 02 FB | 	rdlong	arg02, fp
1b2e8     0C 50 85 F1 | 	sub	fp, #12
1b2ec     3B 77 02 FB | 	rdlong	arg02, arg02
1b2f0     28 76 06 F1 | 	add	arg02, #40
1b2f4     3B 95 02 FB | 	rdlong	local05, arg02
1b2f8     03 94 0E F2 | 	cmp	local05, #3 wz
1b2fc     20 00 90 5D |  if_ne	jmp	#LR__0920
1b300     0C 50 05 F1 | 	add	fp, #12
1b304     A8 74 02 FB | 	rdlong	arg01, fp
1b308     0C 50 85 F1 | 	sub	fp, #12
1b30c     04 74 06 F1 | 	add	arg01, #4
1b310     58 01 00 FF 
1b314     10 77 06 F6 | 	mov	arg02, ##@LR__2317
1b318     78 6A BE FD | 	call	#_sprintf
1b31c     F4 00 90 FD | 	jmp	#LR__0924
1b320                 | LR__0920
1b320     0C 50 05 F1 | 	add	fp, #12
1b324     A8 94 02 FB | 	rdlong	local05, fp
1b328     0C 50 85 F1 | 	sub	fp, #12
1b32c     4A 95 02 FB | 	rdlong	local05, local05
1b330     28 94 06 F1 | 	add	local05, #40
1b334     4A 95 02 FB | 	rdlong	local05, local05
1b338     01 94 0E F2 | 	cmp	local05, #1 wz
1b33c     D4 00 90 5D |  if_ne	jmp	#LR__0924
1b340     0C 50 05 F1 | 	add	fp, #12
1b344     A8 74 02 FB | 	rdlong	arg01, fp
1b348     0C 50 85 F1 | 	sub	fp, #12
1b34c     04 74 06 F1 | 	add	arg01, #4
1b350     58 01 00 FF 
1b354     23 77 06 F6 | 	mov	arg02, ##@LR__2318
1b358     38 6A BE FD | 	call	#_sprintf
1b35c                 | '             sprintf(window->functionHeaderBuffer, "HOMING COMPLETE");
1b35c                 | '         break;
1b35c     B4 00 90 FD | 	jmp	#LR__0924
1b360                 | LR__0921
1b360     0C 50 05 F1 | 	add	fp, #12
1b364     A8 74 02 FB | 	rdlong	arg01, fp
1b368     3A 95 02 FB | 	rdlong	local05, arg01
1b36c     28 94 06 F1 | 	add	local05, #40
1b370     4A 95 02 FB | 	rdlong	local05, local05
1b374     4A 95 52 F6 | 	abs	local05, local05 wc
1b378     01 00 00 FF 
1b37c     E8 95 16 FD | 	qdiv	local05, ##1000
1b380     04 74 06 F1 | 	add	arg01, #4
1b384     58 01 00 FF 
1b388     33 77 06 F6 | 	mov	arg02, ##@LR__2319
1b38c     0C 50 85 F1 | 	sub	fp, #12
1b390     18 94 62 FD | 	getqx	local05
1b394     4A 95 82 F6 | 	negc	local05, local05
1b398     F8 79 02 F6 | 	mov	arg03, ptra
1b39c     61 95 66 FC | 	wrlong	local05, ptra++
1b3a0     F0 69 BE FD | 	call	#_sprintf
1b3a4     04 F0 87 F1 | 	sub	ptra, #4
1b3a8                 | '         sprintf(window->functionHeaderBuffer, "GAUGE LENGTH: %dmm", window->state->functionData / 1000);
1b3a8                 | '         break;
1b3a8     68 00 90 FD | 	jmp	#LR__0924
1b3ac                 | LR__0922
1b3ac     0C 50 05 F1 | 	add	fp, #12
1b3b0     A8 74 02 FB | 	rdlong	arg01, fp
1b3b4     04 74 06 F1 | 	add	arg01, #4
1b3b8     58 01 00 FF 
1b3bc     46 77 06 F6 | 	mov	arg02, ##@LR__2320
1b3c0     A8 94 02 FB | 	rdlong	local05, fp
1b3c4     0C 50 85 F1 | 	sub	fp, #12
1b3c8     4A 79 02 FB | 	rdlong	arg03, local05
1b3cc     28 78 06 F1 | 	add	arg03, #40
1b3d0     3C 95 02 FB | 	rdlong	local05, arg03
1b3d4     F8 79 02 F6 | 	mov	arg03, ptra
1b3d8     61 95 66 FC | 	wrlong	local05, ptra++
1b3dc     B4 69 BE FD | 	call	#_sprintf
1b3e0     04 F0 87 F1 | 	sub	ptra, #4
1b3e4                 | '         sprintf(window->functionHeaderBuffer, "GAUGE FORCE: %dmN", window->state->functionData);
1b3e4                 | '         break;
1b3e4     2C 00 90 FD | 	jmp	#LR__0924
1b3e8                 | LR__0923
1b3e8     0C 50 05 F1 | 	add	fp, #12
1b3ec     A8 96 02 FB | 	rdlong	local06, fp
1b3f0     0C 50 85 F1 | 	sub	fp, #12
1b3f4     04 96 06 F1 | 	add	local06, #4
1b3f8     4B 99 02 F6 | 	mov	local07, local06
1b3fc     58 01 00 FF 
1b400     58 9B 06 F6 | 	mov	local08, ##@LR__2321
1b404     4D 9D 02 F6 | 	mov	local09, local08
1b408     4C 75 02 F6 | 	mov	arg01, local07
1b40c     4E 77 02 F6 | 	mov	arg02, local09
1b410     80 69 BE FD | 	call	#_sprintf
1b414                 | '         sprintf(window->functionHeaderBuffer, "OFF");
1b414                 | '         break;
1b414                 | LR__0924
1b414     30 50 05 F1 | 	add	fp, #48
1b418     A8 00 48 FC | 	wrbyte	#0, fp
1b41c     24 50 85 F1 | 	sub	fp, #36
1b420     A8 74 02 FB | 	rdlong	arg01, fp
1b424     04 74 06 F1 | 	add	arg01, #4
1b428     04 50 05 F1 | 	add	fp, #4
1b42c     A8 76 02 F6 | 	mov	arg02, fp
1b430     10 50 85 F1 | 	sub	fp, #16
1b434     D4 AC BE FD | 	call	#_strcmp
1b438     00 34 0E F2 | 	cmp	result1, #0 wz
1b43c     A8 74 02 5B |  if_ne	rdlong	arg01, fp
1b440     04 50 05 51 |  if_ne	add	fp, #4
1b444     A8 76 02 5B |  if_ne	rdlong	arg02, fp
1b448     04 50 85 51 |  if_ne	sub	fp, #4
1b44c     D0 E4 BE 5D |  if_ne	call	#_module_draw
1b450     A8 F0 03 F6 | 	mov	ptra, fp
1b454     B3 00 A0 FD | 	call	#popregs_
1b458                 | _update_header_2010_ret
1b458     2D 00 64 FD | 	ret
1b45c                 | 
1b45c                 | _update_off_2015
1b45c     0D 4C 05 F6 | 	mov	COUNT_, #13
1b460     A9 00 A0 FD | 	call	#pushregs_
1b464     3A 8D 02 F6 | 	mov	local01, arg01
1b468     3B 8F 02 F6 | 	mov	local02, arg02
1b46c     3C 91 02 F6 | 	mov	local03, arg03
1b470     48 93 02 FB | 	rdlong	local04, local03
1b474     49 95 02 FB | 	rdlong	local05, local04
1b478     02 94 0E F2 | 	cmp	local05, #2 wz
1b47c     40 00 90 5D |  if_ne	jmp	#LR__0925
1b480     48 97 02 FB | 	rdlong	local06, local03
1b484     18 96 06 F1 | 	add	local06, #24
1b488     4B 99 0A FB | 	rdlong	local07, local06 wz
1b48c     30 00 90 AD |  if_e	jmp	#LR__0925
1b490     48 93 02 FB | 	rdlong	local04, local03
1b494     24 92 06 F1 | 	add	local04, #36
1b498     49 95 0A FB | 	rdlong	local05, local04 wz
1b49c     1F 9A 06 A6 |  if_e	mov	local08, #31
1b4a0     00 9C 06 A6 |  if_e	mov	local09, #0
1b4a4     0F 9E CE A9 |  if_e	bmask	local10, #15
1b4a8     24 00 90 AD |  if_e	jmp	#LR__0926
1b4ac     03 00 00 FF 
1b4b0     E0 9B 06 F6 | 	mov	local08, ##2016
1b4b4     00 9C 06 F6 | 	mov	local09, #0
1b4b8     0F 9E CE F9 | 	bmask	local10, #15
1b4bc     10 00 90 FD | 	jmp	#LR__0926
1b4c0                 | LR__0925
1b4c0     7D 00 00 FF 
1b4c4     C0 9B 06 F6 | 	mov	local08, ##64448
1b4c8     00 9C 06 F6 | 	mov	local09, #0
1b4cc     0F 9E CE F9 | 	bmask	local10, #15
1b4d0                 | LR__0926
1b4d0     10 8F 06 F1 | 	add	local02, #272
1b4d4     47 93 02 FB | 	rdlong	local04, local02
1b4d8     10 8F 86 F1 | 	sub	local02, #272
1b4dc     4D 93 0A F2 | 	cmp	local04, local08 wz
1b4e0     38 00 90 5D |  if_ne	jmp	#LR__0927
1b4e4     04 8E 06 F1 | 	add	local02, #4
1b4e8     47 97 02 FB | 	rdlong	local06, local02
1b4ec     04 8E 86 F1 | 	sub	local02, #4
1b4f0     0C 97 06 F1 | 	add	local06, #268
1b4f4     4B A1 02 FB | 	rdlong	local11, local06
1b4f8     4E A1 0A F2 | 	cmp	local11, local09 wz
1b4fc     1C 00 90 5D |  if_ne	jmp	#LR__0927
1b500     04 8E 06 F1 | 	add	local02, #4
1b504     47 A3 02 FB | 	rdlong	local12, local02
1b508     04 8E 86 F1 | 	sub	local02, #4
1b50c     10 A3 06 F1 | 	add	local12, #272
1b510     51 A5 02 FB | 	rdlong	local13, local12
1b514     4F A5 0A F2 | 	cmp	local13, local10 wz
1b518                 | '         module->child[0]->backgroundColor == innerColor &&
1b518                 | '         module->child[0]->foregroundColor == textColor)
1b518                 | '     {
1b518                 | '         return;
1b518     30 00 90 AD |  if_e	jmp	#LR__0928
1b51c                 | LR__0927
1b51c     47 75 02 F6 | 	mov	arg01, local02
1b520     4E 79 02 F6 | 	mov	arg03, local09
1b524     10 75 06 F1 | 	add	arg01, #272
1b528     3A 9F 62 FC | 	wrlong	local10, arg01
1b52c     04 74 86 F1 | 	sub	arg01, #4
1b530     3A 79 62 FC | 	wrlong	arg03, arg01
1b534     14 8F 06 F1 | 	add	local02, #276
1b538     47 9B 62 FC | 	wrlong	local08, local02
1b53c     14 8F 86 F1 | 	sub	local02, #276
1b540     46 75 02 F6 | 	mov	arg01, local01
1b544     47 77 02 F6 | 	mov	arg02, local02
1b548     D4 E3 BE FD | 	call	#_module_draw
1b54c                 | LR__0928
1b54c     A8 F0 03 F6 | 	mov	ptra, fp
1b550     B3 00 A0 FD | 	call	#popregs_
1b554                 | _update_off_2015_ret
1b554     2D 00 64 FD | 	ret
1b558                 | 
1b558                 | _update_incremental_2020
1b558     0E 4C 05 F6 | 	mov	COUNT_, #14
1b55c     A9 00 A0 FD | 	call	#pushregs_
1b560     3A 8D 02 F6 | 	mov	local01, arg01
1b564     3B 8F 02 F6 | 	mov	local02, arg02
1b568     3C 91 02 F6 | 	mov	local03, arg03
1b56c     48 93 02 FB | 	rdlong	local04, local03
1b570     49 95 02 FB | 	rdlong	local05, local04
1b574     02 94 0E F2 | 	cmp	local05, #2 wz
1b578     58 00 90 5D |  if_ne	jmp	#LR__0929
1b57c     48 97 02 FB | 	rdlong	local06, local03
1b580     1C 96 06 F1 | 	add	local06, #28
1b584     4B 99 02 FB | 	rdlong	local07, local06
1b588     08 98 0E F2 | 	cmp	local07, #8 wz
1b58c     44 00 90 AD |  if_e	jmp	#LR__0929
1b590     48 9B 02 FB | 	rdlong	local08, local03
1b594     18 9A 06 F1 | 	add	local08, #24
1b598     4D 9D 0A FB | 	rdlong	local09, local08 wz
1b59c     34 00 90 AD |  if_e	jmp	#LR__0929
1b5a0     48 93 02 FB | 	rdlong	local04, local03
1b5a4     24 92 06 F1 | 	add	local04, #36
1b5a8     49 95 02 FB | 	rdlong	local05, local04
1b5ac     01 94 0E F2 | 	cmp	local05, #1 wz
1b5b0     1F 9E 06 A6 |  if_e	mov	local10, #31
1b5b4     00 A0 06 A6 |  if_e	mov	local11, #0
1b5b8     0F A2 CE A9 |  if_e	bmask	local12, #15
1b5bc     24 00 90 AD |  if_e	jmp	#LR__0930
1b5c0     03 00 00 FF 
1b5c4     E0 9F 06 F6 | 	mov	local10, ##2016
1b5c8     00 A0 06 F6 | 	mov	local11, #0
1b5cc     0F A2 CE F9 | 	bmask	local12, #15
1b5d0     10 00 90 FD | 	jmp	#LR__0930
1b5d4                 | LR__0929
1b5d4     7D 00 00 FF 
1b5d8     C0 9F 06 F6 | 	mov	local10, ##64448
1b5dc     00 A0 06 F6 | 	mov	local11, #0
1b5e0     0F A2 CE F9 | 	bmask	local12, #15
1b5e4                 | LR__0930
1b5e4     10 8F 06 F1 | 	add	local02, #272
1b5e8     47 93 02 FB | 	rdlong	local04, local02
1b5ec     10 8F 86 F1 | 	sub	local02, #272
1b5f0     4F 93 0A F2 | 	cmp	local04, local10 wz
1b5f4     38 00 90 5D |  if_ne	jmp	#LR__0931
1b5f8     04 8E 06 F1 | 	add	local02, #4
1b5fc     47 97 02 FB | 	rdlong	local06, local02
1b600     04 8E 86 F1 | 	sub	local02, #4
1b604     0C 97 06 F1 | 	add	local06, #268
1b608     4B A5 02 FB | 	rdlong	local13, local06
1b60c     50 A5 0A F2 | 	cmp	local13, local11 wz
1b610     1C 00 90 5D |  if_ne	jmp	#LR__0931
1b614     04 8E 06 F1 | 	add	local02, #4
1b618     47 9D 02 FB | 	rdlong	local09, local02
1b61c     04 8E 86 F1 | 	sub	local02, #4
1b620     10 9D 06 F1 | 	add	local09, #272
1b624     4E A7 02 FB | 	rdlong	local14, local09
1b628     51 A7 0A F2 | 	cmp	local14, local12 wz
1b62c                 | '         module->child[0]->backgroundColor == innerColor &&
1b62c                 | '         module->child[0]->foregroundColor == textColor)
1b62c                 | '     {
1b62c                 | '         return;
1b62c     30 00 90 AD |  if_e	jmp	#LR__0932
1b630                 | LR__0931
1b630     47 75 02 F6 | 	mov	arg01, local02
1b634     50 79 02 F6 | 	mov	arg03, local11
1b638     10 75 06 F1 | 	add	arg01, #272
1b63c     3A A3 62 FC | 	wrlong	local12, arg01
1b640     04 74 86 F1 | 	sub	arg01, #4
1b644     3A 79 62 FC | 	wrlong	arg03, arg01
1b648     14 8F 06 F1 | 	add	local02, #276
1b64c     47 9F 62 FC | 	wrlong	local10, local02
1b650     14 8F 86 F1 | 	sub	local02, #276
1b654     46 75 02 F6 | 	mov	arg01, local01
1b658     47 77 02 F6 | 	mov	arg02, local02
1b65c     C0 E2 BE FD | 	call	#_module_draw
1b660                 | LR__0932
1b660     A8 F0 03 F6 | 	mov	ptra, fp
1b664     B3 00 A0 FD | 	call	#popregs_
1b668                 | _update_incremental_2020_ret
1b668     2D 00 64 FD | 	ret
1b66c                 | 
1b66c                 | _update_continuous_2025
1b66c     0E 4C 05 F6 | 	mov	COUNT_, #14
1b670     A9 00 A0 FD | 	call	#pushregs_
1b674     3A 8D 02 F6 | 	mov	local01, arg01
1b678     3B 8F 02 F6 | 	mov	local02, arg02
1b67c     3C 91 02 F6 | 	mov	local03, arg03
1b680     48 93 02 FB | 	rdlong	local04, local03
1b684     49 95 02 FB | 	rdlong	local05, local04
1b688     02 94 0E F2 | 	cmp	local05, #2 wz
1b68c     58 00 90 5D |  if_ne	jmp	#LR__0933
1b690     48 97 02 FB | 	rdlong	local06, local03
1b694     1C 96 06 F1 | 	add	local06, #28
1b698     4B 99 02 FB | 	rdlong	local07, local06
1b69c     08 98 0E F2 | 	cmp	local07, #8 wz
1b6a0     44 00 90 AD |  if_e	jmp	#LR__0933
1b6a4     48 9B 02 FB | 	rdlong	local08, local03
1b6a8     18 9A 06 F1 | 	add	local08, #24
1b6ac     4D 9D 0A FB | 	rdlong	local09, local08 wz
1b6b0     34 00 90 AD |  if_e	jmp	#LR__0933
1b6b4     48 93 02 FB | 	rdlong	local04, local03
1b6b8     24 92 06 F1 | 	add	local04, #36
1b6bc     49 95 02 FB | 	rdlong	local05, local04
1b6c0     02 94 0E F2 | 	cmp	local05, #2 wz
1b6c4     1F 9E 06 A6 |  if_e	mov	local10, #31
1b6c8     00 A0 06 A6 |  if_e	mov	local11, #0
1b6cc     0F A2 CE A9 |  if_e	bmask	local12, #15
1b6d0     24 00 90 AD |  if_e	jmp	#LR__0934
1b6d4     03 00 00 FF 
1b6d8     E0 9F 06 F6 | 	mov	local10, ##2016
1b6dc     00 A0 06 F6 | 	mov	local11, #0
1b6e0     0F A2 CE F9 | 	bmask	local12, #15
1b6e4     10 00 90 FD | 	jmp	#LR__0934
1b6e8                 | LR__0933
1b6e8     7D 00 00 FF 
1b6ec     C0 9F 06 F6 | 	mov	local10, ##64448
1b6f0     00 A0 06 F6 | 	mov	local11, #0
1b6f4     0F A2 CE F9 | 	bmask	local12, #15
1b6f8                 | LR__0934
1b6f8     10 8F 06 F1 | 	add	local02, #272
1b6fc     47 93 02 FB | 	rdlong	local04, local02
1b700     10 8F 86 F1 | 	sub	local02, #272
1b704     4F 93 0A F2 | 	cmp	local04, local10 wz
1b708     38 00 90 5D |  if_ne	jmp	#LR__0935
1b70c     04 8E 06 F1 | 	add	local02, #4
1b710     47 97 02 FB | 	rdlong	local06, local02
1b714     04 8E 86 F1 | 	sub	local02, #4
1b718     0C 97 06 F1 | 	add	local06, #268
1b71c     4B A5 02 FB | 	rdlong	local13, local06
1b720     50 A5 0A F2 | 	cmp	local13, local11 wz
1b724     1C 00 90 5D |  if_ne	jmp	#LR__0935
1b728     04 8E 06 F1 | 	add	local02, #4
1b72c     47 9D 02 FB | 	rdlong	local09, local02
1b730     04 8E 86 F1 | 	sub	local02, #4
1b734     10 9D 06 F1 | 	add	local09, #272
1b738     4E A7 02 FB | 	rdlong	local14, local09
1b73c     51 A7 0A F2 | 	cmp	local14, local12 wz
1b740                 | '         module->child[0]->backgroundColor == innerColor &&
1b740                 | '         module->child[0]->foregroundColor == textColor)
1b740                 | '     {
1b740                 | '         return;
1b740     30 00 90 AD |  if_e	jmp	#LR__0936
1b744                 | LR__0935
1b744     47 75 02 F6 | 	mov	arg01, local02
1b748     50 79 02 F6 | 	mov	arg03, local11
1b74c     10 75 06 F1 | 	add	arg01, #272
1b750     3A A3 62 FC | 	wrlong	local12, arg01
1b754     04 74 86 F1 | 	sub	arg01, #4
1b758     3A 79 62 FC | 	wrlong	arg03, arg01
1b75c     14 8F 06 F1 | 	add	local02, #276
1b760     47 9F 62 FC | 	wrlong	local10, local02
1b764     14 8F 86 F1 | 	sub	local02, #276
1b768     46 75 02 F6 | 	mov	arg01, local01
1b76c     47 77 02 F6 | 	mov	arg02, local02
1b770     AC E1 BE FD | 	call	#_module_draw
1b774                 | LR__0936
1b774     A8 F0 03 F6 | 	mov	ptra, fp
1b778     B3 00 A0 FD | 	call	#popregs_
1b77c                 | _update_continuous_2025_ret
1b77c     2D 00 64 FD | 	ret
1b780                 | 
1b780                 | _update_positional_2030
1b780     0E 4C 05 F6 | 	mov	COUNT_, #14
1b784     A9 00 A0 FD | 	call	#pushregs_
1b788     3A 8D 02 F6 | 	mov	local01, arg01
1b78c     3B 8F 02 F6 | 	mov	local02, arg02
1b790     3C 91 02 F6 | 	mov	local03, arg03
1b794     48 93 02 FB | 	rdlong	local04, local03
1b798     49 95 02 FB | 	rdlong	local05, local04
1b79c     02 94 0E F2 | 	cmp	local05, #2 wz
1b7a0     5C 00 90 5D |  if_ne	jmp	#LR__0937
1b7a4     48 97 02 FB | 	rdlong	local06, local03
1b7a8     1C 96 06 F1 | 	add	local06, #28
1b7ac     4B 99 02 FB | 	rdlong	local07, local06
1b7b0     07 98 0E F2 | 	cmp	local07, #7 wz
1b7b4     48 00 90 5D |  if_ne	jmp	#LR__0937
1b7b8     48 9B 02 FB | 	rdlong	local08, local03
1b7bc     18 9A 06 F1 | 	add	local08, #24
1b7c0     4D 9D 02 FB | 	rdlong	local09, local08
1b7c4     01 9C 0E F2 | 	cmp	local09, #1 wz
1b7c8     34 00 90 5D |  if_ne	jmp	#LR__0937
1b7cc     48 93 02 FB | 	rdlong	local04, local03
1b7d0     24 92 06 F1 | 	add	local04, #36
1b7d4     49 95 02 FB | 	rdlong	local05, local04
1b7d8     03 94 0E F2 | 	cmp	local05, #3 wz
1b7dc     1F 9E 06 A6 |  if_e	mov	local10, #31
1b7e0     00 A0 06 A6 |  if_e	mov	local11, #0
1b7e4     0F A2 CE A9 |  if_e	bmask	local12, #15
1b7e8     24 00 90 AD |  if_e	jmp	#LR__0938
1b7ec     03 00 00 FF 
1b7f0     E0 9F 06 F6 | 	mov	local10, ##2016
1b7f4     00 A0 06 F6 | 	mov	local11, #0
1b7f8     0F A2 CE F9 | 	bmask	local12, #15
1b7fc     10 00 90 FD | 	jmp	#LR__0938
1b800                 | LR__0937
1b800     7D 00 00 FF 
1b804     C0 9F 06 F6 | 	mov	local10, ##64448
1b808     00 A0 06 F6 | 	mov	local11, #0
1b80c     0F A2 CE F9 | 	bmask	local12, #15
1b810                 | LR__0938
1b810     10 8F 06 F1 | 	add	local02, #272
1b814     47 93 02 FB | 	rdlong	local04, local02
1b818     10 8F 86 F1 | 	sub	local02, #272
1b81c     4F 93 0A F2 | 	cmp	local04, local10 wz
1b820     38 00 90 5D |  if_ne	jmp	#LR__0939
1b824     04 8E 06 F1 | 	add	local02, #4
1b828     47 97 02 FB | 	rdlong	local06, local02
1b82c     04 8E 86 F1 | 	sub	local02, #4
1b830     0C 97 06 F1 | 	add	local06, #268
1b834     4B A5 02 FB | 	rdlong	local13, local06
1b838     50 A5 0A F2 | 	cmp	local13, local11 wz
1b83c     1C 00 90 5D |  if_ne	jmp	#LR__0939
1b840     04 8E 06 F1 | 	add	local02, #4
1b844     47 9D 02 FB | 	rdlong	local09, local02
1b848     04 8E 86 F1 | 	sub	local02, #4
1b84c     10 9D 06 F1 | 	add	local09, #272
1b850     4E A7 02 FB | 	rdlong	local14, local09
1b854     51 A7 0A F2 | 	cmp	local14, local12 wz
1b858                 | '         module->child[0]->backgroundColor == innerColor &&
1b858                 | '         module->child[0]->foregroundColor == textColor)
1b858                 | '     {
1b858                 | '         return;
1b858     30 00 90 AD |  if_e	jmp	#LR__0940
1b85c                 | LR__0939
1b85c     47 75 02 F6 | 	mov	arg01, local02
1b860     50 79 02 F6 | 	mov	arg03, local11
1b864     10 75 06 F1 | 	add	arg01, #272
1b868     3A A3 62 FC | 	wrlong	local12, arg01
1b86c     04 74 86 F1 | 	sub	arg01, #4
1b870     3A 79 62 FC | 	wrlong	arg03, arg01
1b874     14 8F 06 F1 | 	add	local02, #276
1b878     47 9F 62 FC | 	wrlong	local10, local02
1b87c     14 8F 86 F1 | 	sub	local02, #276
1b880     46 75 02 F6 | 	mov	arg01, local01
1b884     47 77 02 F6 | 	mov	arg02, local02
1b888     94 E0 BE FD | 	call	#_module_draw
1b88c                 | LR__0940
1b88c     A8 F0 03 F6 | 	mov	ptra, fp
1b890     B3 00 A0 FD | 	call	#popregs_
1b894                 | _update_positional_2030_ret
1b894     2D 00 64 FD | 	ret
1b898                 | 
1b898                 | _update_home_2035
1b898     0E 4C 05 F6 | 	mov	COUNT_, #14
1b89c     A9 00 A0 FD | 	call	#pushregs_
1b8a0     3A 8D 02 F6 | 	mov	local01, arg01
1b8a4     3B 8F 02 F6 | 	mov	local02, arg02
1b8a8     3C 91 02 F6 | 	mov	local03, arg03
1b8ac     48 93 02 FB | 	rdlong	local04, local03
1b8b0     49 95 02 FB | 	rdlong	local05, local04
1b8b4     02 94 0E F2 | 	cmp	local05, #2 wz
1b8b8     5C 00 90 5D |  if_ne	jmp	#LR__0941
1b8bc     48 97 02 FB | 	rdlong	local06, local03
1b8c0     1C 96 06 F1 | 	add	local06, #28
1b8c4     4B 99 02 FB | 	rdlong	local07, local06
1b8c8     07 98 0E F2 | 	cmp	local07, #7 wz
1b8cc     48 00 90 5D |  if_ne	jmp	#LR__0941
1b8d0     48 9B 02 FB | 	rdlong	local08, local03
1b8d4     18 9A 06 F1 | 	add	local08, #24
1b8d8     4D 9D 02 FB | 	rdlong	local09, local08
1b8dc     01 9C 0E F2 | 	cmp	local09, #1 wz
1b8e0     34 00 90 5D |  if_ne	jmp	#LR__0941
1b8e4     48 93 02 FB | 	rdlong	local04, local03
1b8e8     24 92 06 F1 | 	add	local04, #36
1b8ec     49 95 02 FB | 	rdlong	local05, local04
1b8f0     04 94 0E F2 | 	cmp	local05, #4 wz
1b8f4     1F 9E 06 A6 |  if_e	mov	local10, #31
1b8f8     00 A0 06 A6 |  if_e	mov	local11, #0
1b8fc     0F A2 CE A9 |  if_e	bmask	local12, #15
1b900     24 00 90 AD |  if_e	jmp	#LR__0942
1b904     03 00 00 FF 
1b908     E0 9F 06 F6 | 	mov	local10, ##2016
1b90c     00 A0 06 F6 | 	mov	local11, #0
1b910     0F A2 CE F9 | 	bmask	local12, #15
1b914     10 00 90 FD | 	jmp	#LR__0942
1b918                 | LR__0941
1b918     7D 00 00 FF 
1b91c     C0 9F 06 F6 | 	mov	local10, ##64448
1b920     00 A0 06 F6 | 	mov	local11, #0
1b924     0F A2 CE F9 | 	bmask	local12, #15
1b928                 | LR__0942
1b928     10 8F 06 F1 | 	add	local02, #272
1b92c     47 93 02 FB | 	rdlong	local04, local02
1b930     10 8F 86 F1 | 	sub	local02, #272
1b934     4F 93 0A F2 | 	cmp	local04, local10 wz
1b938     38 00 90 5D |  if_ne	jmp	#LR__0943
1b93c     04 8E 06 F1 | 	add	local02, #4
1b940     47 97 02 FB | 	rdlong	local06, local02
1b944     04 8E 86 F1 | 	sub	local02, #4
1b948     0C 97 06 F1 | 	add	local06, #268
1b94c     4B A5 02 FB | 	rdlong	local13, local06
1b950     50 A5 0A F2 | 	cmp	local13, local11 wz
1b954     1C 00 90 5D |  if_ne	jmp	#LR__0943
1b958     04 8E 06 F1 | 	add	local02, #4
1b95c     47 9D 02 FB | 	rdlong	local09, local02
1b960     04 8E 86 F1 | 	sub	local02, #4
1b964     10 9D 06 F1 | 	add	local09, #272
1b968     4E A7 02 FB | 	rdlong	local14, local09
1b96c     51 A7 0A F2 | 	cmp	local14, local12 wz
1b970                 | '         module->child[0]->backgroundColor == innerColor &&
1b970                 | '         module->child[0]->foregroundColor == textColor)
1b970                 | '     {
1b970                 | '         return;
1b970     30 00 90 AD |  if_e	jmp	#LR__0944
1b974                 | LR__0943
1b974     47 75 02 F6 | 	mov	arg01, local02
1b978     50 79 02 F6 | 	mov	arg03, local11
1b97c     10 75 06 F1 | 	add	arg01, #272
1b980     3A A3 62 FC | 	wrlong	local12, arg01
1b984     04 74 86 F1 | 	sub	arg01, #4
1b988     3A 79 62 FC | 	wrlong	arg03, arg01
1b98c     14 8F 06 F1 | 	add	local02, #276
1b990     47 9F 62 FC | 	wrlong	local10, local02
1b994     14 8F 86 F1 | 	sub	local02, #276
1b998     46 75 02 F6 | 	mov	arg01, local01
1b99c     47 77 02 F6 | 	mov	arg02, local02
1b9a0     7C DF BE FD | 	call	#_module_draw
1b9a4                 | LR__0944
1b9a4     A8 F0 03 F6 | 	mov	ptra, fp
1b9a8     B3 00 A0 FD | 	call	#popregs_
1b9ac                 | _update_home_2035_ret
1b9ac     2D 00 64 FD | 	ret
1b9b0                 | 
1b9b0                 | _update_length_2040
1b9b0     0E 4C 05 F6 | 	mov	COUNT_, #14
1b9b4     A9 00 A0 FD | 	call	#pushregs_
1b9b8     3A 8D 02 F6 | 	mov	local01, arg01
1b9bc     3B 8F 02 F6 | 	mov	local02, arg02
1b9c0     3C 91 02 F6 | 	mov	local03, arg03
1b9c4     48 93 02 FB | 	rdlong	local04, local03
1b9c8     49 95 02 FB | 	rdlong	local05, local04
1b9cc     02 94 0E F2 | 	cmp	local05, #2 wz
1b9d0     5C 00 90 5D |  if_ne	jmp	#LR__0945
1b9d4     48 97 02 FB | 	rdlong	local06, local03
1b9d8     1C 96 06 F1 | 	add	local06, #28
1b9dc     4B 99 02 FB | 	rdlong	local07, local06
1b9e0     07 98 0E F2 | 	cmp	local07, #7 wz
1b9e4     48 00 90 5D |  if_ne	jmp	#LR__0945
1b9e8     48 9B 02 FB | 	rdlong	local08, local03
1b9ec     18 9A 06 F1 | 	add	local08, #24
1b9f0     4D 9D 02 FB | 	rdlong	local09, local08
1b9f4     01 9C 0E F2 | 	cmp	local09, #1 wz
1b9f8     34 00 90 5D |  if_ne	jmp	#LR__0945
1b9fc     48 93 02 FB | 	rdlong	local04, local03
1ba00     24 92 06 F1 | 	add	local04, #36
1ba04     49 95 02 FB | 	rdlong	local05, local04
1ba08     05 94 0E F2 | 	cmp	local05, #5 wz
1ba0c     1F 9E 06 A6 |  if_e	mov	local10, #31
1ba10     00 A0 06 A6 |  if_e	mov	local11, #0
1ba14     0F A2 CE A9 |  if_e	bmask	local12, #15
1ba18     24 00 90 AD |  if_e	jmp	#LR__0946
1ba1c     03 00 00 FF 
1ba20     E0 9F 06 F6 | 	mov	local10, ##2016
1ba24     00 A0 06 F6 | 	mov	local11, #0
1ba28     0F A2 CE F9 | 	bmask	local12, #15
1ba2c     10 00 90 FD | 	jmp	#LR__0946
1ba30                 | LR__0945
1ba30     7D 00 00 FF 
1ba34     C0 9F 06 F6 | 	mov	local10, ##64448
1ba38     00 A0 06 F6 | 	mov	local11, #0
1ba3c     0F A2 CE F9 | 	bmask	local12, #15
1ba40                 | LR__0946
1ba40     10 8F 06 F1 | 	add	local02, #272
1ba44     47 93 02 FB | 	rdlong	local04, local02
1ba48     10 8F 86 F1 | 	sub	local02, #272
1ba4c     4F 93 0A F2 | 	cmp	local04, local10 wz
1ba50     38 00 90 5D |  if_ne	jmp	#LR__0947
1ba54     04 8E 06 F1 | 	add	local02, #4
1ba58     47 97 02 FB | 	rdlong	local06, local02
1ba5c     04 8E 86 F1 | 	sub	local02, #4
1ba60     0C 97 06 F1 | 	add	local06, #268
1ba64     4B A5 02 FB | 	rdlong	local13, local06
1ba68     50 A5 0A F2 | 	cmp	local13, local11 wz
1ba6c     1C 00 90 5D |  if_ne	jmp	#LR__0947
1ba70     04 8E 06 F1 | 	add	local02, #4
1ba74     47 9D 02 FB | 	rdlong	local09, local02
1ba78     04 8E 86 F1 | 	sub	local02, #4
1ba7c     10 9D 06 F1 | 	add	local09, #272
1ba80     4E A7 02 FB | 	rdlong	local14, local09
1ba84     51 A7 0A F2 | 	cmp	local14, local12 wz
1ba88                 | '         module->child[0]->backgroundColor == innerColor &&
1ba88                 | '         module->child[0]->foregroundColor == textColor)
1ba88                 | '     {
1ba88                 | '         return;
1ba88     30 00 90 AD |  if_e	jmp	#LR__0948
1ba8c                 | LR__0947
1ba8c     47 75 02 F6 | 	mov	arg01, local02
1ba90     50 79 02 F6 | 	mov	arg03, local11
1ba94     10 75 06 F1 | 	add	arg01, #272
1ba98     3A A3 62 FC | 	wrlong	local12, arg01
1ba9c     04 74 86 F1 | 	sub	arg01, #4
1baa0     3A 79 62 FC | 	wrlong	arg03, arg01
1baa4     14 8F 06 F1 | 	add	local02, #276
1baa8     47 9F 62 FC | 	wrlong	local10, local02
1baac     14 8F 86 F1 | 	sub	local02, #276
1bab0     46 75 02 F6 | 	mov	arg01, local01
1bab4     47 77 02 F6 | 	mov	arg02, local02
1bab8     64 DE BE FD | 	call	#_module_draw
1babc                 | LR__0948
1babc     A8 F0 03 F6 | 	mov	ptra, fp
1bac0     B3 00 A0 FD | 	call	#popregs_
1bac4                 | _update_length_2040_ret
1bac4     2D 00 64 FD | 	ret
1bac8                 | 
1bac8                 | _update_force_2045
1bac8     0E 4C 05 F6 | 	mov	COUNT_, #14
1bacc     A9 00 A0 FD | 	call	#pushregs_
1bad0     3A 8D 02 F6 | 	mov	local01, arg01
1bad4     3B 8F 02 F6 | 	mov	local02, arg02
1bad8     3C 91 02 F6 | 	mov	local03, arg03
1badc     48 93 02 FB | 	rdlong	local04, local03
1bae0     49 95 02 FB | 	rdlong	local05, local04
1bae4     02 94 0E F2 | 	cmp	local05, #2 wz
1bae8     5C 00 90 5D |  if_ne	jmp	#LR__0949
1baec     48 97 02 FB | 	rdlong	local06, local03
1baf0     1C 96 06 F1 | 	add	local06, #28
1baf4     4B 99 02 FB | 	rdlong	local07, local06
1baf8     07 98 0E F2 | 	cmp	local07, #7 wz
1bafc     48 00 90 5D |  if_ne	jmp	#LR__0949
1bb00     48 9B 02 FB | 	rdlong	local08, local03
1bb04     18 9A 06 F1 | 	add	local08, #24
1bb08     4D 9D 02 FB | 	rdlong	local09, local08
1bb0c     01 9C 0E F2 | 	cmp	local09, #1 wz
1bb10     34 00 90 5D |  if_ne	jmp	#LR__0949
1bb14     48 93 02 FB | 	rdlong	local04, local03
1bb18     24 92 06 F1 | 	add	local04, #36
1bb1c     49 95 02 FB | 	rdlong	local05, local04
1bb20     06 94 0E F2 | 	cmp	local05, #6 wz
1bb24     1F 9E 06 A6 |  if_e	mov	local10, #31
1bb28     00 A0 06 A6 |  if_e	mov	local11, #0
1bb2c     0F A2 CE A9 |  if_e	bmask	local12, #15
1bb30     24 00 90 AD |  if_e	jmp	#LR__0950
1bb34     03 00 00 FF 
1bb38     E0 9F 06 F6 | 	mov	local10, ##2016
1bb3c     00 A0 06 F6 | 	mov	local11, #0
1bb40     0F A2 CE F9 | 	bmask	local12, #15
1bb44     10 00 90 FD | 	jmp	#LR__0950
1bb48                 | LR__0949
1bb48     7D 00 00 FF 
1bb4c     C0 9F 06 F6 | 	mov	local10, ##64448
1bb50     00 A0 06 F6 | 	mov	local11, #0
1bb54     0F A2 CE F9 | 	bmask	local12, #15
1bb58                 | LR__0950
1bb58     10 8F 06 F1 | 	add	local02, #272
1bb5c     47 93 02 FB | 	rdlong	local04, local02
1bb60     10 8F 86 F1 | 	sub	local02, #272
1bb64     4F 93 0A F2 | 	cmp	local04, local10 wz
1bb68     38 00 90 5D |  if_ne	jmp	#LR__0951
1bb6c     04 8E 06 F1 | 	add	local02, #4
1bb70     47 97 02 FB | 	rdlong	local06, local02
1bb74     04 8E 86 F1 | 	sub	local02, #4
1bb78     0C 97 06 F1 | 	add	local06, #268
1bb7c     4B A5 02 FB | 	rdlong	local13, local06
1bb80     50 A5 0A F2 | 	cmp	local13, local11 wz
1bb84     1C 00 90 5D |  if_ne	jmp	#LR__0951
1bb88     04 8E 06 F1 | 	add	local02, #4
1bb8c     47 9D 02 FB | 	rdlong	local09, local02
1bb90     04 8E 86 F1 | 	sub	local02, #4
1bb94     10 9D 06 F1 | 	add	local09, #272
1bb98     4E A7 02 FB | 	rdlong	local14, local09
1bb9c     51 A7 0A F2 | 	cmp	local14, local12 wz
1bba0                 | '         module->child[0]->backgroundColor == innerColor &&
1bba0                 | '         module->child[0]->foregroundColor == textColor)
1bba0                 | '     {
1bba0                 | '         return;
1bba0     30 00 90 AD |  if_e	jmp	#LR__0952
1bba4                 | LR__0951
1bba4     47 75 02 F6 | 	mov	arg01, local02
1bba8     50 79 02 F6 | 	mov	arg03, local11
1bbac     10 75 06 F1 | 	add	arg01, #272
1bbb0     3A A3 62 FC | 	wrlong	local12, arg01
1bbb4     04 74 86 F1 | 	sub	arg01, #4
1bbb8     3A 79 62 FC | 	wrlong	arg03, arg01
1bbbc     14 8F 06 F1 | 	add	local02, #276
1bbc0     47 9F 62 FC | 	wrlong	local10, local02
1bbc4     14 8F 86 F1 | 	sub	local02, #276
1bbc8     46 75 02 F6 | 	mov	arg01, local01
1bbcc     47 77 02 F6 | 	mov	arg02, local02
1bbd0     4C DD BE FD | 	call	#_module_draw
1bbd4                 | LR__0952
1bbd4     A8 F0 03 F6 | 	mov	ptra, fp
1bbd8     B3 00 A0 FD | 	call	#popregs_
1bbdc                 | _update_force_2045_ret
1bbdc     2D 00 64 FD | 	ret
1bbe0                 | 
1bbe0                 | _module_graph_draw_2071
1bbe0     07 4C 05 F6 | 	mov	COUNT_, #7
1bbe4     A9 00 A0 FD | 	call	#pushregs_
1bbe8     3A 8D 02 F6 | 	mov	local01, arg01
1bbec     3B 8F 02 F6 | 	mov	local02, arg02
1bbf0     D0 8E 06 F1 | 	add	local02, #208
1bbf4     47 91 02 FB | 	rdlong	local03, local02
1bbf8     D0 8E 86 F1 | 	sub	local02, #208
1bbfc     08 90 06 F1 | 	add	local03, #8
1bc00     48 75 02 FB | 	rdlong	arg01, local03
1bc04     04 90 06 F1 | 	add	local03, #4
1bc08     48 77 02 FB | 	rdlong	arg02, local03
1bc0c     1F 76 E6 F4 | 	bitnot	arg02, #31
1bc10     10 BB B0 FD | 	call	#__system___float_add
1bc14     1A 93 02 F6 | 	mov	local04, result1
1bc18     02 00 00 FF 
1bc1c     08 91 06 F1 | 	add	local03, ##1288
1bc20     48 7B 02 FB | 	rdlong	arg04, local03
1bc24     04 7A 06 F1 | 	add	arg04, #4
1bc28     04 90 06 F1 | 	add	local03, #4
1bc2c     48 7D 02 FB | 	rdlong	arg05, local03
1bc30     04 90 86 F1 | 	sub	local03, #4
1bc34     48 83 02 FB | 	rdlong	arg08, local03
1bc38     02 82 06 F1 | 	add	arg08, #2
1bc3c     3E 85 02 F6 | 	mov	arg09, arg05
1bc40     08 90 06 F1 | 	add	local03, #8
1bc44     48 87 02 FB | 	rdlong	arg10, local03
1bc48     02 86 86 F1 | 	sub	arg10, #2
1bc4c     04 90 06 F1 | 	add	local03, #4
1bc50     48 89 02 FB | 	rdlong	arg11, local03
1bc54     46 75 02 F6 | 	mov	arg01, local01
1bc58     00 76 06 F6 | 	mov	arg02, #0
1bc5c     0A 78 C6 F9 | 	decod	arg03, #10
1bc60     00 7E 06 F6 | 	mov	arg06, #0
1bc64     0A 80 C6 F9 | 	decod	arg07, #10
1bc68     BC 89 BE FD | 	call	#_display_bte_memory_copy
1bc6c     0C 90 86 F1 | 	sub	local03, #12
1bc70     48 77 02 FB | 	rdlong	arg02, local03
1bc74     08 90 06 F1 | 	add	local03, #8
1bc78     48 7F 02 FB | 	rdlong	arg06, local03
1bc7c     3F 77 02 F1 | 	add	arg02, arg06
1bc80     04 90 86 F1 | 	sub	local03, #4
1bc84     48 79 02 FB | 	rdlong	arg03, local03
1bc88     04 90 86 F1 | 	sub	local03, #4
1bc8c     48 7B 02 FB | 	rdlong	arg04, local03
1bc90     3F 7B 02 F1 | 	add	arg04, arg06
1bc94     02 7A 06 F1 | 	add	arg04, #2
1bc98     3C 7D 02 F6 | 	mov	arg05, arg03
1bc9c     0C 90 06 F1 | 	add	local03, #12
1bca0     48 7F 02 FB | 	rdlong	arg06, local03
1bca4     3F 7D 02 F1 | 	add	arg05, arg06
1bca8     47 8F 02 FB | 	rdlong	local02, local02
1bcac     10 8F 06 F1 | 	add	local02, #272
1bcb0     47 7F 02 FB | 	rdlong	arg06, local02
1bcb4     46 75 02 F6 | 	mov	arg01, local01
1bcb8     B0 85 BE FD | 	call	#_display_draw_square_fill
1bcbc     48 8F 02 FB | 	rdlong	local02, local03
1bcc0     47 75 52 F6 | 	abs	arg01, local02 wc
1bcc4     01 74 46 F0 | 	shr	arg01, #1
1bcc8     3A 75 82 F6 | 	negc	arg01, arg01
1bccc     08 90 86 F1 | 	sub	local03, #8
1bcd0     48 95 02 FB | 	rdlong	local05, local03
1bcd4     02 00 00 FF 
1bcd8     18 91 86 F1 | 	sub	local03, ##1304
1bcdc     3A 95 02 F1 | 	add	local05, arg01
1bce0     48 97 02 FB | 	rdlong	local06, local03
1bce4     47 8F 52 F6 | 	abs	local02, local02 wc
1bce8     01 8E 46 F0 | 	shr	local02, #1
1bcec     47 75 82 F6 | 	negc	arg01, local02
1bcf0     00 BA B0 FD | 	call	#__system___float_fromint
1bcf4     1A 8F 02 F6 | 	mov	local02, result1
1bcf8     49 75 02 F6 | 	mov	arg01, local04
1bcfc     1E 76 C6 F9 | 	decod	arg02, #30
1bd00     44 BF B0 FD | 	call	#__system___float_div
1bd04     1A 77 02 F6 | 	mov	arg02, result1
1bd08     47 75 02 F6 | 	mov	arg01, local02
1bd0c     38 BF B0 FD | 	call	#__system___float_div
1bd10     1A 77 02 F6 | 	mov	arg02, result1
1bd14     4B 75 02 F6 | 	mov	arg01, local06
1bd18     0C BD B0 FD | 	call	#__system___float_mul
1bd1c     1A 75 02 F6 | 	mov	arg01, result1
1bd20     00 76 06 F6 | 	mov	arg02, #0
1bd24     F0 C1 B0 FD | 	call	#__system___float_tointeger
1bd28     1A 95 82 F1 | 	sub	local05, result1
1bd2c     02 00 00 FF 
1bd30     20 91 06 F1 | 	add	local03, ##1312
1bd34     48 8F 02 FB | 	rdlong	local02, local03
1bd38     47 97 52 F6 | 	abs	local06, local02 wc
1bd3c     01 96 46 F0 | 	shr	local06, #1
1bd40     4B 97 82 F6 | 	negc	local06, local06
1bd44     08 90 86 F1 | 	sub	local03, #8
1bd48     48 99 02 FB | 	rdlong	local07, local03
1bd4c     4B 99 02 F1 | 	add	local07, local06
1bd50     02 00 00 FF 
1bd54     14 91 86 F1 | 	sub	local03, ##1300
1bd58     48 97 02 FB | 	rdlong	local06, local03
1bd5c     47 8F 52 F6 | 	abs	local02, local02 wc
1bd60     01 8E 46 F0 | 	shr	local02, #1
1bd64     47 75 82 F6 | 	negc	arg01, local02
1bd68     88 B9 B0 FD | 	call	#__system___float_fromint
1bd6c     1A 8F 02 F6 | 	mov	local02, result1
1bd70     49 75 02 F6 | 	mov	arg01, local04
1bd74     1E 76 C6 F9 | 	decod	arg02, #30
1bd78     CC BE B0 FD | 	call	#__system___float_div
1bd7c     1A 77 02 F6 | 	mov	arg02, result1
1bd80     47 75 02 F6 | 	mov	arg01, local02
1bd84     C0 BE B0 FD | 	call	#__system___float_div
1bd88     1A 77 02 F6 | 	mov	arg02, result1
1bd8c     4B 75 02 F6 | 	mov	arg01, local06
1bd90     94 BC B0 FD | 	call	#__system___float_mul
1bd94     1A 75 02 F6 | 	mov	arg01, result1
1bd98     00 76 06 F6 | 	mov	arg02, #0
1bd9c     78 C1 B0 FD | 	call	#__system___float_tointeger
1bda0     1A 99 82 F1 | 	sub	local07, result1
1bda4     02 00 00 FF 
1bda8     10 91 06 F1 | 	add	local03, ##1296
1bdac     48 7B 02 FB | 	rdlong	arg04, local03
1bdb0     3D 77 02 F6 | 	mov	arg02, arg04
1bdb4     08 90 06 F1 | 	add	local03, #8
1bdb8     48 97 02 FB | 	rdlong	local06, local03
1bdbc     4B 77 02 F1 | 	add	arg02, local06
1bdc0     4B 7B 02 F1 | 	add	arg04, local06
1bdc4     02 7A 06 F1 | 	add	arg04, #2
1bdc8     46 75 02 F6 | 	mov	arg01, local01
1bdcc     4C 79 02 F6 | 	mov	arg03, local07
1bdd0     4A 7D 02 F6 | 	mov	arg05, local05
1bdd4     7C 00 00 FF 
1bdd8     00 7E 06 F6 | 	mov	arg06, ##63488
1bddc     20 83 BE FD | 	call	#_display_draw_line
1bde0     A8 F0 03 F6 | 	mov	ptra, fp
1bde4     B3 00 A0 FD | 	call	#popregs_
1bde8                 | _module_graph_draw_2071_ret
1bde8     2D 00 64 FD | 	ret
1bdec                 | 
1bdec                 | _check_buttons_2079
1bdec     08 00 00 FF 
1bdf0     10 77 06 F1 | 	add	arg02, ##4368
1bdf4     3B 75 62 FC | 	wrlong	arg01, arg02
1bdf8                 | _check_buttons_2079_ret
1bdf8     2D 00 64 FD | 	ret
1bdfc                 | 
1bdfc                 | ' 
1bdfc                 | ' '' This is not a top-level object
1bdfc                 | ' 
1bdfc                 | ' 
1bdfc                 | ' pub setup(scl, sda, khz, pullup) | tix
1bdfc                 | _jm_i2c_spin2_setup
1bdfc     3C 3B 02 F6 | 	mov	_var01, arg03
1be00     01 00 00 FF 
1be04     E8 3B 06 FD | 	qmul	_var01, ##1000
1be08     3A 3D 02 F6 | 	mov	_var02, arg01
1be0c     3B 3F 02 F6 | 	mov	_var03, arg02
1be10     3D 41 02 F6 | 	mov	_var04, arg04
1be14                 | ' 
1be14                 | ' '' Define I2C SCL (clock) and SDA (data) pins
1be14                 | ' '' -- khz is bus frequency: 100 (standard), 400 (full), 1000 (fast)
1be14                 | ' ''    * circuit/connections will affect maximum bus speed
1be14                 | ' '' -- pullup controls high level drive configuration of SCL and SDA
1be14                 | ' 
1be14                 | '   longmove(@sclpin, @scl, 2)                                    ' copy pins
1be14     C9 3C 62 FC | 	wrlong	_var02, objptr
1be18     04 92 05 F1 | 	add	objptr, #4
1be1c     C9 3E 62 FC | 	wrlong	_var03, objptr
1be20     04 92 85 F1 | 	sub	objptr, #4
1be24                 | '   clktix := tix := (clkfreq / (khz * 1_000)) >> 2               ' calculate ticks in 1/4 period
1be24     14 E0 06 FB | 	rdlong	muldiva_, #20
1be28     18 42 62 FD | 	getqx	_var05
1be2c     21 E3 02 F6 | 	mov	muldivb_, _var05
1be30     BB 00 A0 FD | 	call	#divide_
1be34     71 45 02 F6 | 	mov	_var06, muldivb_
1be38     02 44 46 F0 | 	shr	_var06, #2
1be3c     22 47 02 F6 | 	mov	_var07, _var06
1be40     08 92 05 F1 | 	add	objptr, #8
1be44     C9 44 62 FC | 	wrlong	_var06, objptr
1be48     08 92 85 F1 | 	sub	objptr, #8
1be4c                 | ' 
1be4c                 | '   case pullup
1be4c     03 40 26 F3 | 	fle	_var04, #3
1be50     20 49 02 F6 | 	mov	_var08, _var04
1be54     30 48 62 FD | 	jmprel	_var08
1be58                 | LR__0953
1be58     0C 00 90 FD | 	jmp	#LR__0954
1be5c     14 00 90 FD | 	jmp	#LR__0955
1be60     18 00 90 FD | 	jmp	#LR__0956
1be64     1C 00 90 FD | 	jmp	#LR__0957
1be68                 | LR__0954
1be68                 | '     PU_NONE : pullup := P_HIGH_FLOAT                            ' use external pull-up
1be68     1C 00 00 FF 
1be6c     00 4A 06 F6 | 	mov	_var09, ##14336
1be70     14 00 90 FD | 	jmp	#LR__0958
1be74                 | LR__0955
1be74                 | '     PU_1K5  : pullup := P_HIGH_1K5                              ' 1.5k
1be74     0B 4A C6 F9 | 	decod	_var09, #11
1be78     0C 00 90 FD | 	jmp	#LR__0958
1be7c                 | LR__0956
1be7c                 | '     PU_3K3  : pullup := P_HIGH_1MA                              ' acts like ~3.3k
1be7c     0D 4A C6 F9 | 	decod	_var09, #13
1be80     04 00 90 FD | 	jmp	#LR__0958
1be84                 | LR__0957
1be84                 | '     other   : pullup := P_HIGH_15K                              ' 15K
1be84     0C 4A C6 F9 | 	decod	_var09, #12
1be88                 | LR__0958
1be88                 | ' 
1be88                 | '   org
1be88     B0 41 9E FE | 	loc	pa,	#(@LR__0961-@LR__0959)
1be8c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1be90                 | LR__0959
1be90 000             | 	org	0
1be90 000 1E 4B 02 FC | 	wrpin	_var09, _var02
1be94 001 1F 4B 02 FC | 	wrpin	_var09, _var03
1be98 002 59 3C 62 FD | 	drvh	_var02
1be9c 003 59 3E 62 FD | 	drvh	_var03
1bea0 004 1F 46 62 FD | 	waitx	_var07
1bea4 005 1F 46 62 FD | 	waitx	_var07
1bea8 006 09 10 DC FC | 	rep	#8, #9
1beac 007 40 3E 72 FD | 	testp	_var03 wc
1beb0 008 18 00 90 CD |  if_b	jmp	#LR__0960
1beb4 009 58 3C 62 FD | 	drvl	_var02
1beb8 00a 1F 46 62 FD | 	waitx	_var07
1bebc 00b 1F 46 62 FD | 	waitx	_var07
1bec0 00c 59 3C 62 FD | 	drvh	_var02
1bec4 00d 1F 46 62 FD | 	waitx	_var07
1bec8 00e 1F 46 62 FD | 	waitx	_var07
1becc 00f             | LR__0960
1becc 00f             | LR__0961
1becc                 | 	orgh
1becc                 | _jm_i2c_spin2_setup_ret
1becc     2D 00 64 FD | 	ret
1bed0                 | 
1bed0                 | '   until (ackbit == ACK)
1bed0                 | ' 
1bed0                 | ' 
1bed0                 | ' pub start() | scl, sda, tix
1bed0                 | _jm_i2c_spin2_start
1bed0                 | ' 
1bed0                 | ' '' Create I2C start sequence
1bed0                 | ' '' -- will wait if I2C bus SCL pin is held low
1bed0                 | ' 
1bed0                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1bed0     C9 3A 02 FB | 	rdlong	_var01, objptr
1bed4     04 92 05 F1 | 	add	objptr, #4
1bed8     C9 3C 02 FB | 	rdlong	_var02, objptr
1bedc     04 92 05 F1 | 	add	objptr, #4
1bee0     C9 3E 02 FB | 	rdlong	_var03, objptr
1bee4     08 92 85 F1 | 	sub	objptr, #8
1bee8                 | ' 
1bee8                 | '   org
1bee8     38 41 9E FE | 	loc	pa,	#(@LR__0964-@LR__0962)
1beec     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bef0                 | LR__0962
1bef0 000             | 	org	0
1bef0 000 59 3C 62 FD | 	drvh	_var02
1bef4 001 59 3A 62 FD | 	drvh	_var01
1bef8 002 1F 3E 62 FD | 	waitx	_var03
1befc 003             | LR__0963
1befc 003 40 3A 72 FD | 	testp	_var01 wc
1bf00 004 F8 FF 9F 3D |  if_ae	jmp	#LR__0963
1bf04 005 58 3C 62 FD | 	drvl	_var02
1bf08 006 1F 3E 62 FD | 	waitx	_var03
1bf0c 007 58 3A 62 FD | 	drvl	_var01
1bf10 008 1F 3E 62 FD | 	waitx	_var03
1bf14 009             | LR__0964
1bf14                 | 	orgh
1bf14                 | _jm_i2c_spin2_start_ret
1bf14     2D 00 64 FD | 	ret
1bf18                 | 
1bf18                 | ' 
1bf18                 | ' 
1bf18                 | ' pub write(i2cbyte) : ackbit | scl, sda, tix
1bf18                 | _jm_i2c_spin2_write
1bf18     3A 3B 02 F6 | 	mov	_var01, arg01
1bf1c     00 3C 06 F6 | 	mov	_var02, #0
1bf20                 | ' 
1bf20                 | ' '' Write byte to I2C bus
1bf20                 | ' '' -- leaves SCL low
1bf20                 | ' 
1bf20                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1bf20     C9 3E 02 FB | 	rdlong	_var03, objptr
1bf24     04 92 05 F1 | 	add	objptr, #4
1bf28     C9 40 02 FB | 	rdlong	_var04, objptr
1bf2c     20 43 02 F6 | 	mov	_var05, _var04
1bf30     04 92 05 F1 | 	add	objptr, #4
1bf34     C9 44 02 FB | 	rdlong	_var06, objptr
1bf38     08 92 85 F1 | 	sub	objptr, #8
1bf3c     22 47 02 F6 | 	mov	_var07, _var06
1bf40                 | '                                                                  
1bf40                 | '   org                                                            
1bf40     0C 41 9E FE | 	loc	pa,	#(@LR__0968-@LR__0965)
1bf44     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bf48                 | LR__0965
1bf48 000             | 	org	0
1bf48 000 18 3A 66 F0 | 	shl	_var01, #24
1bf4c 001             | LR__0966
1bf4c 001 08 10 DC FC | 	rep	#8, #8
1bf50 002 01 3A 76 F0 | 	shl	_var01, #1 wc
1bf54 003 5A 42 62 FD | 	drvc	_var05
1bf58 004 1F 46 62 FD | 	waitx	_var07
1bf5c 005 59 3E 62 FD | 	drvh	_var03
1bf60 006 1F 46 62 FD | 	waitx	_var07
1bf64 007 1F 46 62 FD | 	waitx	_var07
1bf68 008 58 3E 62 FD | 	drvl	_var03
1bf6c 009 1F 46 62 FD | 	waitx	_var07
1bf70 00a             | LR__0967
1bf70 00a 59 42 62 FD | 	drvh	_var05
1bf74 00b 1F 46 62 FD | 	waitx	_var07
1bf78 00c 59 3E 62 FD | 	drvh	_var03
1bf7c 00d 1F 46 62 FD | 	waitx	_var07
1bf80 00e 40 42 72 FD | 	testp	_var05 wc
1bf84 00f 01 3C 86 F5 | 	muxc	_var02, #1
1bf88 010 1F 46 62 FD | 	waitx	_var07
1bf8c 011 58 3E 62 FD | 	drvl	_var03
1bf90 012 1F 46 62 FD | 	waitx	_var07
1bf94 013 1F 46 62 FD | 	waitx	_var07
1bf98 014             | LR__0968
1bf98                 | 	orgh
1bf98     1E 35 02 F6 | 	mov	result1, _var02
1bf9c                 | _jm_i2c_spin2_write_ret
1bf9c     2D 00 64 FD | 	ret
1bfa0                 | 
1bfa0                 | ' 
1bfa0                 | ' 
1bfa0                 | ' pub read(ackbit) : i2cbyte | scl, sda, tix
1bfa0                 | _jm_i2c_spin2_read
1bfa0     3A 3B 02 F6 | 	mov	_var01, arg01
1bfa4     00 3C 06 F6 | 	mov	_var02, #0
1bfa8                 | ' 
1bfa8                 | ' '' Read byte from I2C bus
1bfa8                 | ' '' -- ackbit is state of ack bit
1bfa8                 | ' ''    * usually NAK for last byte read
1bfa8                 | ' 
1bfa8                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1bfa8     C9 3E 02 FB | 	rdlong	_var03, objptr
1bfac     04 92 05 F1 | 	add	objptr, #4
1bfb0     C9 40 02 FB | 	rdlong	_var04, objptr
1bfb4     20 43 02 F6 | 	mov	_var05, _var04
1bfb8     04 92 05 F1 | 	add	objptr, #4
1bfbc     C9 44 02 FB | 	rdlong	_var06, objptr
1bfc0     08 92 85 F1 | 	sub	objptr, #8
1bfc4     22 47 02 F6 | 	mov	_var07, _var06
1bfc8                 | ' 
1bfc8                 | '   org                                                    
1bfc8     84 40 9E FE | 	loc	pa,	#(@LR__0972-@LR__0969)
1bfcc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bfd0                 | LR__0969
1bfd0 000             | 	org	0
1bfd0 000 59 42 62 FD | 	drvh	_var05
1bfd4 001             | LR__0970
1bfd4 001 08 12 DC FC | 	rep	#9, #8
1bfd8 002 1F 46 62 FD | 	waitx	_var07
1bfdc 003 59 3E 62 FD | 	drvh	_var03
1bfe0 004 1F 46 62 FD | 	waitx	_var07
1bfe4 005 40 42 72 FD | 	testp	_var05 wc
1bfe8 006 01 3C 66 F0 | 	shl	_var02, #1
1bfec 007 01 3C 86 F5 | 	muxc	_var02, #1
1bff0 008 1F 46 62 FD | 	waitx	_var07
1bff4 009 58 3E 62 FD | 	drvl	_var03
1bff8 00a 1F 46 62 FD | 	waitx	_var07
1bffc 00b             | LR__0971
1bffc 00b 00 3A 16 F4 | 	testb	_var01, #0 wc
1c000 00c 5A 42 62 FD | 	drvc	_var05
1c004 00d 1F 46 62 FD | 	waitx	_var07
1c008 00e 59 3E 62 FD | 	drvh	_var03
1c00c 00f 1F 46 62 FD | 	waitx	_var07
1c010 010 1F 46 62 FD | 	waitx	_var07
1c014 011 58 3E 62 FD | 	drvl	_var03
1c018 012 1F 46 62 FD | 	waitx	_var07
1c01c 013 1F 46 62 FD | 	waitx	_var07
1c020 014             | LR__0972
1c020                 | 	orgh
1c020     1E 35 02 F6 | 	mov	result1, _var02
1c024                 | _jm_i2c_spin2_read_ret
1c024     2D 00 64 FD | 	ret
1c028                 | 
1c028                 | ' 
1c028                 | ' 
1c028                 | ' pub stop() | scl, sda, tix
1c028                 | _jm_i2c_spin2_stop
1c028                 | ' 
1c028                 | ' '' Create I2C stop sequence
1c028                 | ' '' -- allows for clock stretch
1c028                 | ' 
1c028                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1c028     C9 3A 02 FB | 	rdlong	_var01, objptr
1c02c     04 92 05 F1 | 	add	objptr, #4
1c030     C9 3C 02 FB | 	rdlong	_var02, objptr
1c034     04 92 05 F1 | 	add	objptr, #4
1c038     C9 3E 02 FB | 	rdlong	_var03, objptr
1c03c     08 92 85 F1 | 	sub	objptr, #8
1c040                 | ' 
1c040                 | '   org
1c040     D8 3F 9E FE | 	loc	pa,	#(@LR__0975-@LR__0973)
1c044     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1c048                 | LR__0973
1c048 000             | 	org	0
1c048 000 58 3C 62 FD | 	drvl	_var02
1c04c 001 59 3A 62 FD | 	drvh	_var01
1c050 002 1F 3E 62 FD | 	waitx	_var03
1c054 003             | LR__0974
1c054 003 40 3A 72 FD | 	testp	_var01 wc
1c058 004 F8 FF 9F 3D |  if_ae	jmp	#LR__0974
1c05c 005 1F 3E 62 FD | 	waitx	_var03
1c060 006 59 3C 62 FD | 	drvh	_var02
1c064 007             | LR__0975
1c064                 | 	orgh
1c064                 | _jm_i2c_spin2_stop_ret
1c064     2D 00 64 FD | 	ret
1c068                 | 
1c068                 | ' 
1c068                 | ' 
1c068                 | ' pub start(rxpin, txpin, mode, baud) : result | baudcfg, spmode
1c068                 | _jm_fullduplexserial_spin2_start
1c068     0B 4C 05 F6 | 	mov	COUNT_, #11
1c06c     A9 00 A0 FD | 	call	#pushregs_
1c070     3A 8D 02 F6 | 	mov	local01, arg01
1c074     3B 8F 02 F6 | 	mov	local02, arg02
1c078     3C 91 02 F6 | 	mov	local03, arg03
1c07c     3D 93 02 F6 | 	mov	local04, arg04
1c080                 | ' 
1c080                 | ' '' Start simple serial coms on rxpin and txpin at baud
1c080                 | ' '' -- rxpin... receive pin (-1 if not used)
1c080                 | ' '' -- txpin... transmit pin (-1 if not used)
1c080                 | ' '' -- mode.... %0xx1 = invert rx
1c080                 | ' ''             %0x1x = invert tx
1c080                 | ' ''             %01xx = open-drain/open-source tx
1c080                 | ' 
1c080                 | '   stop()
1c080     A0 01 B0 FD | 	call	#_jm_fullduplexserial_spin2_stop
1c084                 | ' 
1c084                 | '   if (rxpin == txpin)                                           ' pin must be unique
1c084     47 8D 0A F2 | 	cmp	local01, local02 wz
1c088                 | '     return false
1c088     00 34 06 A6 |  if_e	mov	result1, #0
1c08c     88 01 90 AD |  if_e	jmp	#LR__0983
1c090                 | ' 
1c090                 | '   longmove(@rxp, @rxpin, 2)                                     ' save pins
1c090     04 92 05 F1 | 	add	objptr, #4
1c094     C9 8C 62 FC | 	wrlong	local01, objptr
1c098     04 92 05 F1 | 	add	objptr, #4
1c09c     C9 8E 62 FC | 	wrlong	local02, objptr
1c0a0                 | '   rxhub := @rxbuf                                               ' point to buffers
1c0a0     20 92 05 F1 | 	add	objptr, #32
1c0a4     C9 E2 02 F6 | 	mov	muldivb_, objptr
1c0a8     1C 92 85 F1 | 	sub	objptr, #28
1c0ac     C9 E2 62 FC | 	wrlong	muldivb_, objptr
1c0b0                 | '   txhub := @txbuf
1c0b0     1C 93 05 F1 | 	add	objptr, #284
1c0b4     C9 E2 02 F6 | 	mov	muldivb_, objptr
1c0b8     18 93 85 F1 | 	sub	objptr, #280
1c0bc     C9 E2 62 FC | 	wrlong	muldivb_, objptr
1c0c0     10 92 85 F1 | 	sub	objptr, #16
1c0c4                 | ' 
1c0c4                 | '   txdelay := clkfreq / baud * 11                                ' tix to transmit one byte
1c0c4     14 E0 06 FB | 	rdlong	muldiva_, #20
1c0c8     49 E3 02 F6 | 	mov	muldivb_, local04
1c0cc     BB 00 A0 FD | 	call	#divide_
1c0d0     0B E2 06 FD | 	qmul	muldivb_, #11
1c0d4     24 92 05 F1 | 	add	objptr, #36
1c0d8                 | ' 
1c0d8                 | '   baudcfg := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
1c0d8     10 94 C6 F9 | 	decod	local05, #16
1c0dc     49 97 02 F6 | 	mov	local06, local04
1c0e0     10 76 C6 F9 | 	decod	arg02, #16
1c0e4     4B 79 02 F6 | 	mov	arg03, local06
1c0e8     18 34 62 FD | 	getqx	result1
1c0ec     C9 34 62 FC | 	wrlong	result1, objptr
1c0f0     14 74 06 FB | 	rdlong	arg01, #20
1c0f4     80 00 00 FF 
1c0f8     00 74 06 FD | 	qmul	arg01, ##65536
1c0fc     19 34 62 FD | 	getqy	result1
1c100     18 74 62 FD | 	getqx	arg01
1c104     28 34 62 FD | 	setq	result1
1c108     3C 75 12 FD | 	qdiv	arg01, arg03
1c10c                 | '   baudcfg |= (8-1)                                              ' set bits (8)
1c10c                 | ' 
1c10c                 | '   if (rxp >= 0)                                                 ' configure rx pin if used
1c10c     20 92 85 F1 | 	sub	objptr, #32
1c110     C9 34 02 FB | 	rdlong	result1, objptr
1c114     04 92 85 F1 | 	sub	objptr, #4
1c118     00 34 56 F2 | 	cmps	result1, #0 wc
1c11c     18 34 62 FD | 	getqx	result1
1c120     1A 99 02 F6 | 	mov	local07, result1
1c124     20 99 06 F4 | 	bitl	local07, #288
1c128     07 98 46 F5 | 	or	local07, #7
1c12c     40 00 90 CD |  if_b	jmp	#LR__0976
1c130                 | '     spmode := P_ASYNC_RX
1c130     3E 76 06 F6 | 	mov	arg02, #62
1c134                 | '     if (mode.[0])
1c134     01 90 CE F7 | 	test	local03, #1 wz
1c138                 | '       spmode |= P_INVERT_IN
1c138     40 00 00 5F 
1c13c     3E 76 06 56 |  if_ne	mov	arg02, ##32830
1c140                 | '     pinstart(rxp, spmode, baudcfg, 0)
1c140     04 92 05 F1 | 	add	objptr, #4
1c144     C9 74 02 FB | 	rdlong	arg01, objptr
1c148     04 92 85 F1 | 	sub	objptr, #4
1c14c     4C 95 02 F6 | 	mov	local05, local07
1c150     00 96 06 F6 | 	mov	local06, #0
1c154     4A 79 02 F6 | 	mov	arg03, local05
1c158     00 7A 06 F6 | 	mov	arg04, #0
1c15c     40 74 62 FD | 	dirl	arg01
1c160     3A 77 02 FC | 	wrpin	arg02, arg01
1c164     3A 79 12 FC | 	wxpin	arg03, arg01
1c168     3A 01 28 FC | 	wypin	#0, arg01
1c16c     41 74 62 FD | 	dirh	arg01
1c170                 | LR__0976
1c170                 | ' 
1c170                 | '   if (txp >= 0)                                                 ' configure tx pin if used
1c170     08 92 05 F1 | 	add	objptr, #8
1c174     C9 9A 02 FB | 	rdlong	local08, objptr
1c178     08 92 85 F1 | 	sub	objptr, #8
1c17c     00 9A 56 F2 | 	cmps	local08, #0 wc
1c180     70 00 90 CD |  if_b	jmp	#LR__0982
1c184                 | '     spmode := P_ASYNC_TX | P_OE
1c184     7C 9C 06 F6 | 	mov	local09, #124
1c188                 | '     case mode.[2..1]
1c188     48 9B 02 F6 | 	mov	local08, local03
1c18c     01 9A 46 F0 | 	shr	local08, #1
1c190     03 9A 06 F5 | 	and	local08, #3
1c194     01 9A 86 F1 | 	sub	local08, #1
1c198     03 9A 26 F3 | 	fle	local08, #3
1c19c     4D 9F 02 F6 | 	mov	local10, local08
1c1a0     30 9E 62 FD | 	jmprel	local10
1c1a4                 | LR__0977
1c1a4     0C 00 90 FD | 	jmp	#LR__0978
1c1a8     10 00 90 FD | 	jmp	#LR__0979
1c1ac     14 00 90 FD | 	jmp	#LR__0980
1c1b0     20 00 90 FD | 	jmp	#LR__0981
1c1b4                 | LR__0978
1c1b4                 | '       %01 : spmode |= P_INVERT_OUTPUT
1c1b4     0E 9C 26 F4 | 	bith	local09, #14
1c1b8     18 00 90 FD | 	jmp	#LR__0981
1c1bc                 | LR__0979
1c1bc                 | '       %10 : spmode |= P_HIGH_FLOAT                              ' requires external pull-up
1c1bc     4B 9C 26 F4 | 	bith	local09, #75
1c1c0     10 00 90 FD | 	jmp	#LR__0981
1c1c4                 | LR__0980
1c1c4                 | '       %11 : spmode |= P_INVERT_OUTPUT | P_LOW_FLOAT             ' requires external pull-down
1c1c4     4E A1 02 F6 | 	mov	local11, local09
1c1c8     23 00 00 FF 
1c1cc     00 A1 46 F5 | 	or	local11, ##18176
1c1d0     50 9D 02 F6 | 	mov	local09, local11
1c1d4                 | LR__0981
1c1d4                 | '     pinstart(txp, spmode, baudcfg, 0)
1c1d4     08 92 05 F1 | 	add	objptr, #8
1c1d8     C9 74 02 FB | 	rdlong	arg01, objptr
1c1dc     08 92 85 F1 | 	sub	objptr, #8
1c1e0     40 74 62 FD | 	dirl	arg01
1c1e4     3A 9D 02 FC | 	wrpin	local09, arg01
1c1e8     3A 99 12 FC | 	wxpin	local07, arg01
1c1ec     3A 01 28 FC | 	wypin	#0, arg01
1c1f0     41 74 62 FD | 	dirh	arg01
1c1f4                 | LR__0982
1c1f4                 | ' 
1c1f4                 | '   cog := coginit(COGEXEC_NEW, @uart_mgr, @rxp) + 1              ' start uart manager cog
1c1f4     04 92 05 F1 | 	add	objptr, #4
1c1f8     C9 78 02 F6 | 	mov	arg03, objptr
1c1fc     04 92 85 F1 | 	sub	objptr, #4
1c200     10 34 06 F6 | 	mov	result1, #16
1c204     28 78 62 FD | 	setq	arg03
1c208     02 35 F2 FC | 	coginit	result1, ptr__jm_fullduplexserial_spin2_dat__ wc
1c20c     01 34 66 C6 |  if_b	neg	result1, #1
1c210     01 34 06 F1 | 	add	result1, #1
1c214     C9 34 62 FC | 	wrlong	result1, objptr
1c218                 | ' 
1c218                 | '   return cog
1c218                 | LR__0983
1c218     A8 F0 03 F6 | 	mov	ptra, fp
1c21c     B3 00 A0 FD | 	call	#popregs_
1c220                 | _jm_fullduplexserial_spin2_start_ret
1c220     2D 00 64 FD | 	ret
1c224                 | 
1c224                 | ' 
1c224                 | ' 
1c224                 | ' pub stop()
1c224                 | _jm_fullduplexserial_spin2_stop
1c224                 | ' 
1c224                 | ' '' Stop serial driver
1c224                 | ' '' -- frees a cog if driver was running
1c224                 | ' 
1c224                 | '   if (cog)                                                      ' cog active?
1c224     C9 74 0A FB | 	rdlong	arg01, objptr wz
1c228                 | '     cogstop(cog-1)                                              '  yes, shut it down
1c228     C9 74 02 5B |  if_ne	rdlong	arg01, objptr
1c22c     01 74 86 51 |  if_ne	sub	arg01, #1
1c230     03 74 62 5D |  if_ne	cogstop	arg01
1c234                 | '     cog := 0                                                    '  and mark stopped
1c234     C9 00 68 5C |  if_ne	wrlong	#0, objptr
1c238                 | ' 
1c238                 | '   longfill(@rxp,  -1, 2)                                        ' reset object globals
1c238     04 92 05 F1 | 	add	objptr, #4
1c23c     C9 74 02 F6 | 	mov	arg01, objptr
1c240     04 92 85 F1 | 	sub	objptr, #4
1c244     01 76 66 F6 | 	neg	arg02, #1
1c248     02 78 06 F6 | 	mov	arg03, #2
1c24c     A1 00 A0 FD | 	call	#\builtin_longfill_
1c250                 | '   longfill(@rxhub, 0, 7)
1c250     0C 92 05 F1 | 	add	objptr, #12
1c254     C9 74 02 F6 | 	mov	arg01, objptr
1c258     0C 92 85 F1 | 	sub	objptr, #12
1c25c     00 76 06 F6 | 	mov	arg02, #0
1c260     07 78 06 F6 | 	mov	arg03, #7
1c264     A1 00 A0 FD | 	call	#\builtin_longfill_
1c268                 | _jm_fullduplexserial_spin2_stop_ret
1c268     2D 00 64 FD | 	ret
1c26c                 | 
1c26c                 | ' 
1c26c                 | ' 
1c26c                 | ' pub rxcheck() : b
1c26c                 | _jm_fullduplexserial_spin2_rxcheck
1c26c                 | ' 
1c26c                 | ' '' Pulls byte from receive buffer if available
1c26c                 | ' '' -- returns -1 if buffer is empty
1c26c                 | ' 
1c26c                 | '   if (rxtail <> rxhead)                                         ' something in buffer?
1c26c     18 92 05 F1 | 	add	objptr, #24
1c270     C9 34 02 FB | 	rdlong	result1, objptr
1c274     04 92 85 F1 | 	sub	objptr, #4
1c278     C9 3A 02 FB | 	rdlong	_var01, objptr
1c27c     14 92 85 F1 | 	sub	objptr, #20
1c280     1D 35 0A F2 | 	cmp	result1, _var01 wz
1c284     3C 00 90 AD |  if_e	jmp	#LR__0984
1c288                 | '     b := rxbuf[rxtail]                                          ' get it
1c288     18 92 05 F1 | 	add	objptr, #24
1c28c     C9 3A 02 FB | 	rdlong	_var01, objptr
1c290     1D 35 02 F6 | 	mov	result1, _var01
1c294     10 92 05 F1 | 	add	objptr, #16
1c298     C9 34 02 F1 | 	add	result1, objptr
1c29c     1A 3D C2 FA | 	rdbyte	_var02, result1
1c2a0                 | '     if (++rxtail == BUF_SIZE)                                   ' update tail pointer
1c2a0     01 3A 06 F1 | 	add	_var01, #1
1c2a4     10 92 85 F1 | 	sub	objptr, #16
1c2a8     C9 3A 62 FC | 	wrlong	_var01, objptr
1c2ac     18 92 85 F1 | 	sub	objptr, #24
1c2b0     00 3B 0E F2 | 	cmp	_var01, #256 wz
1c2b4                 | '       rxtail := 0
1c2b4     18 92 05 A1 |  if_e	add	objptr, #24
1c2b8     C9 00 68 AC |  if_e	wrlong	#0, objptr
1c2bc     18 92 85 A1 |  if_e	sub	objptr, #24
1c2c0                 | '   else
1c2c0     04 00 90 FD | 	jmp	#LR__0985
1c2c4                 | LR__0984
1c2c4                 | '     b := EOF                                                    ' mark no byte available
1c2c4     01 3C 66 F6 | 	neg	_var02, #1
1c2c8                 | LR__0985
1c2c8     1E 35 02 F6 | 	mov	result1, _var02
1c2cc                 | _jm_fullduplexserial_spin2_rxcheck_ret
1c2cc     2D 00 64 FD | 	ret
1c2d0                 | 
1c2d0                 | ' 
1c2d0                 | ' 
1c2d0                 | ' pub rxtime(ms) : b | mstix, t
1c2d0                 | _jm_fullduplexserial_spin2_rxtime
1c2d0     06 4C 05 F6 | 	mov	COUNT_, #6
1c2d4     A9 00 A0 FD | 	call	#pushregs_
1c2d8     14 34 06 FB | 	rdlong	result1, #20
1c2dc     1A 35 52 F6 | 	abs	result1, result1 wc
1c2e0     01 00 00 FF 
1c2e4     E8 35 16 FD | 	qdiv	result1, ##1000
1c2e8                 | ' 
1c2e8                 | ' '' Wait ms milliseconds for a byte to be received
1c2e8                 | ' '' -- returns -1 if no byte received, $00..$FF if byte
1c2e8                 | ' 
1c2e8                 | '   mstix := clkfreq / 1000
1c2e8                 | ' 
1c2e8                 | '   t := getct()
1c2e8     1A 8C 62 FD | 	getct	local01
1c2ec                 | '   repeat until ((b := rxcheck()) >= 0) || (((getct()-t) / mstix) >= ms)
1c2ec     18 34 62 FD | 	getqx	result1
1c2f0     1A 8F 82 F6 | 	negc	local02, result1
1c2f4                 | LR__0986
1c2f4     00 90 06 F6 | 	mov	local03, #0
1c2f8     00 92 06 F6 | 	mov	local04, #0
1c2fc     6C FF BF FD | 	call	#_jm_fullduplexserial_spin2_rxcheck
1c300     1A 95 02 F6 | 	mov	local05, result1
1c304     00 94 56 F2 | 	cmps	local05, #0 wc
1c308     00 92 26 36 |  if_ae	not	local04, #0
1c30c     00 92 0E F2 | 	cmp	local04, #0 wz
1c310     00 90 26 56 |  if_ne	not	local03, #0
1c314     00 92 06 F6 | 	mov	local04, #0
1c318     00 96 06 F6 | 	mov	local06, #0
1c31c     1A E0 62 FD | 	getct	muldiva_
1c320     46 E1 82 F1 | 	sub	muldiva_, local01
1c324     47 E3 02 F6 | 	mov	muldivb_, local02
1c328     BB 00 A0 FD | 	call	#divide_
1c32c     3A E3 52 F2 | 	cmps	muldivb_, arg01 wc
1c330     00 96 26 36 |  if_ae	not	local06, #0
1c334     00 96 0E F2 | 	cmp	local06, #0 wz
1c338     00 92 26 56 |  if_ne	not	local04, #0
1c33c     49 91 4A F5 | 	or	local03, local04 wz
1c340     B0 FF 9F AD |  if_e	jmp	#LR__0986
1c344     4A 35 02 F6 | 	mov	result1, local05
1c348     A8 F0 03 F6 | 	mov	ptra, fp
1c34c     B3 00 A0 FD | 	call	#popregs_
1c350                 | _jm_fullduplexserial_spin2_rxtime_ret
1c350     2D 00 64 FD | 	ret
1c354                 | 
1c354                 | ' 
1c354                 | ' 
1c354                 | ' pub tx(b) | n
1c354                 | _jm_fullduplexserial_spin2_tx
1c354     D0 3C 9E FE | 	loc	pa,	#(@LR__0988-@LR__0987)
1c358     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1c35c                 | ' 
1c35c                 | ' '' Move byte into transmit buffer if room is available
1c35c                 | ' '' -- will wait if buffer is full
1c35c                 | ' 
1c35c                 | '   repeat
1c35c                 | LR__0987
1c35c                 | '     n := txhead - txtail                                        ' bytes in buffer
1c35c     1C 92 05 F1 | 	add	objptr, #28
1c360     C9 3A 02 FB | 	rdlong	_var01, objptr
1c364     04 92 05 F1 | 	add	objptr, #4
1c368     C9 3C 02 FB | 	rdlong	_var02, objptr
1c36c     20 92 85 F1 | 	sub	objptr, #32
1c370     1E 3B 82 F1 | 	sub	_var01, _var02
1c374                 | '     if (n < 0)                                                  ' fix for index wrap-around
1c374     00 3A 56 F2 | 	cmps	_var01, #0 wc
1c378                 | '       n += BUF_SIZE
1c378     00 3B 06 C1 |  if_b	add	_var01, #256
1c37c                 | '     if (n < BUF_SIZE-1)
1c37c     FF 3A 56 F2 | 	cmps	_var01, #255 wc
1c380                 | '       quit
1c380     D8 FF 9F 3D |  if_ae	jmp	#LR__0987
1c384                 | LR__0988
1c384                 | ' 
1c384                 | '   txbuf[txhead] := b                                            ' move to buffer
1c384     1C 92 05 F1 | 	add	objptr, #28
1c388     C9 3C 02 FB | 	rdlong	_var02, objptr
1c38c     0C 93 05 F1 | 	add	objptr, #268
1c390     C9 3C 02 F1 | 	add	_var02, objptr
1c394     1E 75 42 FC | 	wrbyte	arg01, _var02
1c398                 | '   if (++txhead == BUF_SIZE)                                     ' update head pointer
1c398     0C 93 85 F1 | 	sub	objptr, #268
1c39c     C9 3C 02 FB | 	rdlong	_var02, objptr
1c3a0     01 3C 06 F1 | 	add	_var02, #1
1c3a4     C9 3C 62 FC | 	wrlong	_var02, objptr
1c3a8     1C 92 85 F1 | 	sub	objptr, #28
1c3ac     00 3D 0E F2 | 	cmp	_var02, #256 wz
1c3b0                 | '     txhead := 0
1c3b0     1C 92 05 A1 |  if_e	add	objptr, #28
1c3b4     C9 00 68 AC |  if_e	wrlong	#0, objptr
1c3b8     1C 92 85 A1 |  if_e	sub	objptr, #28
1c3bc                 | _jm_fullduplexserial_spin2_tx_ret
1c3bc     2D 00 64 FD | 	ret
1c3c0                 | 
1c3c0                 | ' 
1c3c0                 | ' '' This is not a top object                                                        
1c3c0                 | '                                                                  
1c3c0                 | '           
1c3c0                 | ' pub start(sdipin, sdopin, sckpin, khz) : result | m, x
1c3c0                 | _jm_spi_spin2_start
1c3c0     05 4C 05 F6 | 	mov	COUNT_, #5
1c3c4     A9 00 A0 FD | 	call	#pushregs_
1c3c8     3A 8D 02 F6 | 	mov	local01, arg01
1c3cc     3B 8F 02 F6 | 	mov	local02, arg02
1c3d0     3C 91 02 F6 | 	mov	local03, arg03
1c3d4     3D 93 02 F6 | 	mov	local04, arg04
1c3d8                 | ' 
1c3d8                 | ' '' Configure P2 smart pins for SPI coms
1c3d8                 | ' '' -- sdipin is input from external device (-1 if not used)
1c3d8                 | ' '' -- sdopin is output to external device  (-1 if not used)
1c3d8                 | ' '' -- sckpin is clock output
1c3d8                 | ' '' -- khz is clock frequence in kilohertz  (1000 = 1MHz)                                                        
1c3d8                 | '                                                                  
1c3d8                 | '   stop()
1c3d8     58 01 B0 FD | 	call	#_jm_spi_spin2_stop
1c3dc                 | ' 
1c3dc                 | '   if ((sdipin == sdopin) || (sckpin < 0))                       ' validate pins
1c3dc     47 8D 0A F2 | 	cmp	local01, local02 wz
1c3e0     00 90 56 52 |  if_ne	cmps	local03, #0 wc
1c3e4                 | '     return false
1c3e4     00 34 06 E6 |  if_be	mov	result1, #0
1c3e8     3C 01 90 ED |  if_be	jmp	#LR__0991
1c3ec                 | ' 
1c3ec                 | '   longmove(@sdi, @sdipin, 3)                                    ' save pins
1c3ec     04 92 05 F1 | 	add	objptr, #4
1c3f0     C9 8C 62 FC | 	wrlong	local01, objptr
1c3f4     04 92 05 F1 | 	add	objptr, #4
1c3f8     C9 8E 62 FC | 	wrlong	local02, objptr
1c3fc     04 92 05 F1 | 	add	objptr, #4
1c400     C9 90 62 FC | 	wrlong	local03, objptr
1c404                 | ' 
1c404                 | '   if (sdi >= 0)
1c404     08 92 85 F1 | 	sub	objptr, #8
1c408     C9 7A 02 FB | 	rdlong	arg04, objptr
1c40c     04 92 85 F1 | 	sub	objptr, #4
1c410     00 7A 56 F2 | 	cmps	arg04, #0 wc
1c414     44 00 90 CD |  if_b	jmp	#LR__0989
1c418                 | '     m := P_SYNC_RX                                              ' spi rx mode                         
1c418                 | '     m |= ((sck-sdi) & %111) << 24                               ' add SCK offset (B pin)              
1c418     3A 76 06 F6 | 	mov	arg02, #58
1c41c     0C 92 05 F1 | 	add	objptr, #12
1c420     C9 90 02 FB | 	rdlong	local03, objptr
1c424     08 92 85 F1 | 	sub	objptr, #8
1c428     C9 74 02 FB | 	rdlong	arg01, objptr
1c42c     3A 91 82 F1 | 	sub	local03, arg01
1c430     07 90 06 F5 | 	and	local03, #7
1c434     18 90 66 F0 | 	shl	local03, #24
1c438     48 77 42 F5 | 	or	arg02, local03
1c43c                 | '     x := %0_00000 | (8-1)                                       ' sample ahead of b pin rise, 8 bits  
1c43c     07 94 06 F6 | 	mov	local05, #7
1c440                 | '     pinstart(sdi, m, x, 0)                                      ' configure smart pin                                                                   
1c440     40 74 62 FD | 	dirl	arg01
1c444     3A 77 02 FC | 	wrpin	arg02, arg01
1c448     3A 0F 18 FC | 	wxpin	#7, arg01
1c44c     3A 01 28 FC | 	wypin	#0, arg01
1c450     41 74 62 FD | 	dirh	arg01
1c454                 | '     pinf(sdi)                                                   ' disable until used
1c454     04 92 85 F1 | 	sub	objptr, #4
1c458     50 74 62 FD | 	fltl	arg01
1c45c                 | LR__0989
1c45c                 | ' 
1c45c                 | '   if (sdo >= 0)
1c45c     08 92 05 F1 | 	add	objptr, #8
1c460     C9 7A 02 FB | 	rdlong	arg04, objptr
1c464     08 92 85 F1 | 	sub	objptr, #8
1c468     00 7A 56 F2 | 	cmps	arg04, #0 wc
1c46c     44 00 90 CD |  if_b	jmp	#LR__0990
1c470                 | '     m := P_OE | P_SYNC_TX                                       ' spi tx mode
1c470                 | '     m |= ((sck-sdo) & %111) << 24                               ' add SCK offset (B pin)
1c470     78 76 06 F6 | 	mov	arg02, #120
1c474     0C 92 05 F1 | 	add	objptr, #12
1c478     C9 94 02 FB | 	rdlong	local05, objptr
1c47c     04 92 85 F1 | 	sub	objptr, #4
1c480     C9 74 02 FB | 	rdlong	arg01, objptr
1c484     3A 95 82 F1 | 	sub	local05, arg01
1c488     07 94 06 F5 | 	and	local05, #7
1c48c     18 94 66 F0 | 	shl	local05, #24
1c490     4A 77 42 F5 | 	or	arg02, local05
1c494                 | '     x := %1_00000 | (8-1)                                       ' start/stop mode, 8 bits
1c494     27 94 06 F6 | 	mov	local05, #39
1c498                 | '     pinstart(sdo, m, x, 0)                                      ' configure smart pin  
1c498     40 74 62 FD | 	dirl	arg01
1c49c     3A 77 02 FC | 	wrpin	arg02, arg01
1c4a0     3A 4F 18 FC | 	wxpin	#39, arg01
1c4a4     3A 01 28 FC | 	wypin	#0, arg01
1c4a8     41 74 62 FD | 	dirh	arg01
1c4ac                 | '     pinf(sdo)                                                   ' disable until used 
1c4ac     08 92 85 F1 | 	sub	objptr, #8
1c4b0     50 74 62 FD | 	fltl	arg01
1c4b4                 | LR__0990
1c4b4     01 00 00 FF 
1c4b8     E8 93 06 FD | 	qmul	local04, ##1000
1c4bc                 | ' 
1c4bc                 | '   m := P_OE | P_PULSE                                           ' pulses for spi clock   
1c4bc                 | '   x.word[0] := 2 #> (clkfreq / (khz*1000)) <# $FFFF             ' ticks in period        
1c4bc     14 E0 06 FB | 	rdlong	muldiva_, #20
1c4c0     18 E2 62 FD | 	getqx	muldivb_
1c4c4     BB 00 A0 FD | 	call	#divide_
1c4c8     02 92 06 F6 | 	mov	local04, #2
1c4cc     71 93 42 F3 | 	fges	local04, muldivb_
1c4d0     7F 00 00 FF 
1c4d4     FF 93 66 F3 | 	fles	local04, ##65535
1c4d8     49 93 32 F9 | 	getword	local04, local04, #0
1c4dc     E0 95 06 F4 | 	bitl	local05, #480
1c4e0     49 95 42 F5 | 	or	local05, local04
1c4e4                 | '   x.word[1] := x.word[0] >> 1                                   ' ticks in low cycle (50%)      
1c4e4     4A 93 32 F9 | 	getword	local04, local05, #0
1c4e8     01 92 46 F0 | 	shr	local04, #1
1c4ec     49 93 32 F9 | 	getword	local04, local04, #0
1c4f0     10 92 66 F0 | 	shl	local04, #16
1c4f4     4A 79 32 F9 | 	getword	arg03, local05, #0
1c4f8     49 79 42 F5 | 	or	arg03, local04
1c4fc                 | '   pinstart(sck, m, x, 0)                                        ' configure smart pin                                                         
1c4fc     0C 92 05 F1 | 	add	objptr, #12
1c500     C9 74 02 FB | 	rdlong	arg01, objptr
1c504     0C 92 85 F1 | 	sub	objptr, #12
1c508     40 74 62 FD | 	dirl	arg01
1c50c     3A 91 08 FC | 	wrpin	#72, arg01
1c510     3A 79 12 FC | 	wxpin	arg03, arg01
1c514     3A 01 28 FC | 	wypin	#0, arg01
1c518     41 74 62 FD | 	dirh	arg01
1c51c                 | ' 
1c51c                 | '   setup := true
1c51c     01 34 66 F6 | 	neg	result1, #1
1c520     FF FF FF FF 
1c524     C9 FE 6B FC | 	wrlong	##-1, objptr
1c528                 | ' 
1c528                 | '   return setup
1c528                 | LR__0991
1c528     A8 F0 03 F6 | 	mov	ptra, fp
1c52c     B3 00 A0 FD | 	call	#popregs_
1c530                 | _jm_spi_spin2_start_ret
1c530     2D 00 64 FD | 	ret
1c534                 | 
1c534                 | '                       
1c534                 | ' 
1c534                 | ' pub stop()
1c534                 | _jm_spi_spin2_stop
1c534                 | ' 
1c534                 | ' '' Clears SPI smart pins if configured
1c534                 | ' 
1c534                 | '   if (setup)                                                    ' configured?
1c534     C9 78 0A FB | 	rdlong	arg03, objptr wz
1c538     60 00 90 AD |  if_e	jmp	#LR__0992
1c53c                 | '     if (sdi >= 0)                                               ' clear smart pins
1c53c     04 92 05 F1 | 	add	objptr, #4
1c540     C9 78 02 FB | 	rdlong	arg03, objptr
1c544     04 92 85 F1 | 	sub	objptr, #4
1c548     00 78 56 F2 | 	cmps	arg03, #0 wc
1c54c                 | '       pinclear(sdi)
1c54c     04 92 05 31 |  if_ae	add	objptr, #4
1c550     C9 74 02 3B |  if_ae	rdlong	arg01, objptr
1c554     04 92 85 31 |  if_ae	sub	objptr, #4
1c558     50 74 62 3D |  if_ae	fltl	arg01
1c55c     3A 01 08 3C |  if_ae	wrpin	#0, arg01
1c560                 | '     if (sdo >= 0)
1c560     08 92 05 F1 | 	add	objptr, #8
1c564     C9 78 02 FB | 	rdlong	arg03, objptr
1c568     08 92 85 F1 | 	sub	objptr, #8
1c56c     00 78 56 F2 | 	cmps	arg03, #0 wc
1c570                 | '       pinclear(sdo)
1c570     08 92 05 31 |  if_ae	add	objptr, #8
1c574     C9 74 02 3B |  if_ae	rdlong	arg01, objptr
1c578     08 92 85 31 |  if_ae	sub	objptr, #8
1c57c     50 74 62 3D |  if_ae	fltl	arg01
1c580     3A 01 08 3C |  if_ae	wrpin	#0, arg01
1c584                 | '     pinclear(sck)      
1c584     0C 92 05 F1 | 	add	objptr, #12
1c588     C9 74 02 FB | 	rdlong	arg01, objptr
1c58c     0C 92 85 F1 | 	sub	objptr, #12
1c590     50 74 62 FD | 	fltl	arg01
1c594     3A 01 08 FC | 	wrpin	#0, arg01
1c598                 | '     setup := false
1c598     C9 00 68 FC | 	wrlong	#0, objptr
1c59c                 | LR__0992
1c59c                 | '     
1c59c                 | '   longfill(@sdi, -1, 3)                                         ' mark pins as unused
1c59c     04 92 05 F1 | 	add	objptr, #4
1c5a0     C9 74 02 F6 | 	mov	arg01, objptr
1c5a4     04 92 85 F1 | 	sub	objptr, #4
1c5a8     01 76 66 F6 | 	neg	arg02, #1
1c5ac     03 78 06 F6 | 	mov	arg03, #3
1c5b0     A1 00 A0 FD | 	call	#\builtin_longfill_
1c5b4                 | _jm_spi_spin2_stop_ret
1c5b4     2D 00 64 FD | 	ret
1c5b8                 | 
1c5b8                 | ' 
1c5b8                 | ' 
1c5b8                 | ' pub shiftin(mode, bits) : value
1c5b8                 | _jm_spi_spin2_shiftin
1c5b8     03 4C 05 F6 | 	mov	COUNT_, #3
1c5bc     A9 00 A0 FD | 	call	#pushregs_
1c5c0     3A 8D 02 F6 | 	mov	local01, arg01
1c5c4     3B 8F 02 F6 | 	mov	local02, arg02
1c5c8                 | ' 
1c5c8                 | ' '' Shift data in from a synchronous serial device
1c5c8                 | ' '' -- mode is bit order: LSBFIRST or MSBFIRST
1c5c8                 | ' '' -- bits in the number of bits to shift
1c5c8                 | ' 
1c5c8                 | '   if (sdi < 0)                                                  ' abort if di not defined
1c5c8     04 92 05 F1 | 	add	objptr, #4
1c5cc     C9 76 02 FB | 	rdlong	arg02, objptr
1c5d0     04 92 85 F1 | 	sub	objptr, #4
1c5d4     00 76 56 F2 | 	cmps	arg02, #0 wc
1c5d8                 | '     return 0
1c5d8     00 34 06 C6 |  if_b	mov	result1, #0
1c5dc     84 00 90 CD |  if_b	jmp	#LR__0995
1c5e0                 | ' 
1c5e0                 | '   pinf(sdi)                                                     ' reset di
1c5e0     04 92 05 F1 | 	add	objptr, #4
1c5e4     C9 74 02 FB | 	rdlong	arg01, objptr
1c5e8     50 74 62 FD | 	fltl	arg01
1c5ec                 | '   wxpin(sdi, %0_00000 | (bits-1))                               ' configure di sampling/bits
1c5ec     47 77 02 F6 | 	mov	arg02, local02
1c5f0     01 76 86 F1 | 	sub	arg02, #1
1c5f4     3A 77 12 FC | 	wxpin	arg02, arg01
1c5f8                 | '   pinl(sdi)                                                     ' enable di
1c5f8     58 74 62 FD | 	drvl	arg01
1c5fc                 | '   wypin(sck, bits)                                              ' start clocking data
1c5fc     08 92 05 F1 | 	add	objptr, #8
1c600     C9 74 02 FB | 	rdlong	arg01, objptr
1c604     3A 8F 22 FC | 	wypin	local02, arg01
1c608     14 3A 9E FE | 	loc	pa,	#(@LR__0994-@LR__0993)
1c60c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1c610                 | '   repeat until pinr(sck)                                        ' wait until clocks finished
1c610                 | LR__0993
1c610     C9 74 02 FB | 	rdlong	arg01, objptr
1c614     20 74 CE F7 | 	test	arg01, #32 wz
1c618     FF 35 02 56 |  if_ne	mov	result1, inb
1c61c     FE 35 02 A6 |  if_e	mov	result1, ina
1c620     3A 35 42 F0 | 	shr	result1, arg01
1c624     06 74 46 F0 | 	shr	arg01, #6
1c628     3A 35 4A F7 | 	zerox	result1, arg01 wz
1c62c     E0 FF 9F AD |  if_e	jmp	#LR__0993
1c630                 | LR__0994
1c630                 | ' 
1c630                 | '   value := rdpin(sdi)                                           ' get value
1c630     08 92 85 F1 | 	sub	objptr, #8
1c634     C9 74 02 FB | 	rdlong	arg01, objptr
1c638     04 92 85 F1 | 	sub	objptr, #4
1c63c     00 34 06 F6 | 	mov	result1, #0
1c640     3A 35 8A FA | 	rdpin	result1, arg01
1c644                 | ' 
1c644                 | '   if (mode == LSBFIRST)
1c644     00 8C 0E F2 | 	cmp	local01, #0 wz
1c648                 | '     value >>= (32-bits)                                         ' align lsb
1c648     20 90 06 A6 |  if_e	mov	local03, #32
1c64c     47 91 82 A1 |  if_e	sub	local03, local02
1c650     48 35 42 A0 |  if_e	shr	result1, local03
1c654                 | '   else
1c654                 | '     value rev= 31                                               ' flip to align lsb
1c654     69 34 62 5D |  if_ne	rev	result1
1c658                 | '     if (bits < 32)                                              ' clear unused bits
1c658     20 8E 56 52 |  if_ne	cmps	local02, #32 wc
1c65c                 | '       value zerox= (bits-1)
1c65c     01 8E 86 41 |  if_c_and_nz	sub	local02, #1
1c660     47 35 42 47 |  if_c_and_nz	zerox	result1, local02
1c664                 | LR__0995
1c664     A8 F0 03 F6 | 	mov	ptra, fp
1c668     B3 00 A0 FD | 	call	#popregs_
1c66c                 | _jm_spi_spin2_shiftin_ret
1c66c     2D 00 64 FD | 	ret
1c670                 | 
1c670                 | ' 
1c670                 | ' 
1c670                 | ' pub shiftout(mode, value, bits)
1c670                 | _jm_spi_spin2_shiftout
1c670     02 4C 05 F6 | 	mov	COUNT_, #2
1c674     A9 00 A0 FD | 	call	#pushregs_
1c678     3B 8D 02 F6 | 	mov	local01, arg02
1c67c                 | ' 
1c67c                 | ' '' Shift data out to a synchronous serial device 
1c67c                 | ' '' -- mode is bit order: LSBFIRST or MSBFIRST 
1c67c                 | ' '' -- value is shifted out
1c67c                 | ' '' -- bits in the number of bits to shift
1c67c                 | ' 
1c67c                 | '   if (sdo < 0)                                                  ' abort if do not defined
1c67c     08 92 05 F1 | 	add	objptr, #8
1c680     C9 76 02 FB | 	rdlong	arg02, objptr
1c684     08 92 85 F1 | 	sub	objptr, #8
1c688     00 76 56 F2 | 	cmps	arg02, #0 wc
1c68c                 | '     return
1c68c     80 00 90 CD |  if_b	jmp	#LR__0998
1c690                 | ' 
1c690                 | '   if (mode == MSBFIRST)                                         ' flip to output from LSB end
1c690     01 74 0E F2 | 	cmp	arg01, #1 wz
1c694                 | '     if (bits < 32)                                              ' adjust alignment if needed
1c694     20 78 56 A2 |  if_e	cmps	arg03, #32 wc
1c698                 | '       value <<= (32-bits)      
1c698     20 74 06 86 |  if_c_and_z	mov	arg01, #32
1c69c     3C 75 82 81 |  if_c_and_z	sub	arg01, arg03
1c6a0     3A 8D 62 80 |  if_c_and_z	shl	local01, arg01
1c6a4                 | '     value rev= 31
1c6a4     69 8C 62 AD |  if_e	rev	local01
1c6a8                 | ' 
1c6a8                 | '   wxpin(sdo, %1_00000 | (bits-1))                               ' configure do bits
1c6a8     08 92 05 F1 | 	add	objptr, #8
1c6ac     C9 74 02 FB | 	rdlong	arg01, objptr
1c6b0     3C 8F 02 F6 | 	mov	local02, arg03
1c6b4     01 8E 86 F1 | 	sub	local02, #1
1c6b8     20 76 06 F6 | 	mov	arg02, #32
1c6bc     47 77 42 F5 | 	or	arg02, local02
1c6c0     3A 77 12 FC | 	wxpin	arg02, arg01
1c6c4                 | '   wypin(sdo, value)                                             ' load value
1c6c4     3A 8D 22 FC | 	wypin	local01, arg01
1c6c8                 | '   pinl(sdo)                                                     ' enable do
1c6c8     58 74 62 FD | 	drvl	arg01
1c6cc                 | '   wypin(sck, bits)                                              ' start clocking data
1c6cc     04 92 05 F1 | 	add	objptr, #4
1c6d0     C9 74 02 FB | 	rdlong	arg01, objptr
1c6d4     3A 79 22 FC | 	wypin	arg03, arg01
1c6d8     44 39 9E FE | 	loc	pa,	#(@LR__0997-@LR__0996)
1c6dc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1c6e0                 | '   repeat until pinr(sck)                                        ' wait for clocking to finish
1c6e0                 | LR__0996
1c6e0     C9 74 02 FB | 	rdlong	arg01, objptr
1c6e4     20 74 CE F7 | 	test	arg01, #32 wz
1c6e8     FF 35 02 56 |  if_ne	mov	result1, inb
1c6ec     FE 35 02 A6 |  if_e	mov	result1, ina
1c6f0     3A 35 42 F0 | 	shr	result1, arg01
1c6f4     06 74 46 F0 | 	shr	arg01, #6
1c6f8     3A 35 4A F7 | 	zerox	result1, arg01 wz
1c6fc     E0 FF 9F AD |  if_e	jmp	#LR__0996
1c700                 | LR__0997
1c700                 | '   pinf(sdo)                                                     ' disable do 
1c700     04 92 85 F1 | 	sub	objptr, #4
1c704     C9 74 02 FB | 	rdlong	arg01, objptr
1c708     08 92 85 F1 | 	sub	objptr, #8
1c70c     50 74 62 FD | 	fltl	arg01
1c710                 | LR__0998
1c710     A8 F0 03 F6 | 	mov	ptra, fp
1c714     B3 00 A0 FD | 	call	#popregs_
1c718                 | _jm_spi_spin2_shiftout_ret
1c718     2D 00 64 FD | 	ret
1c71c                 | 
1c71c                 | ' 
1c71c                 | ' '' This is not a top-level object
1c71c                 | ' 
1c71c                 | ' 
1c71c                 | ' pub start(a, b, btn, d4x, preset, lo, hi) : result | dif
1c71c                 | _jm_quadrature_spin2_start
1c71c     09 4C 05 F6 | 	mov	COUNT_, #9
1c720     A9 00 A0 FD | 	call	#pushregs_
1c724     3A 8D 02 F6 | 	mov	local01, arg01
1c728     3B 8F 02 F6 | 	mov	local02, arg02
1c72c     3C 91 02 F6 | 	mov	local03, arg03
1c730     3D 93 02 F6 | 	mov	local04, arg04
1c734     3E 95 02 F6 | 	mov	local05, arg05
1c738     3F 97 02 F6 | 	mov	local06, arg06
1c73c     40 99 02 F6 | 	mov	local07, arg07
1c740                 | ' 
1c740                 | ' '' Start the encoder object
1c740                 | ' '' -- continuous count mode
1c740                 | ' '' -- a & b are encoder inputs (active-low)
1c740                 | ' '' -- btn is the button input (active-low, -1 if not used)
1c740                 | ' '' -- set d4x to true if each "click" is 4 counts
1c740                 | ' '' -- preset is initial value for encoder
1c740                 | ' '' -- lo & hi are limit values for encoder
1c740                 | ' 
1c740                 | '   stop()
1c740     B4 00 B0 FD | 	call	#_jm_quadrature_spin2_stop
1c744                 | ' 
1c744                 | '   dif := b - a
1c744     46 8F 8A F1 | 	sub	local02, local01 wz
1c748                 | '   if ((dif == 0) or (abs(dif) > 3))                             ' check pins   
1c748     47 35 42 56 |  if_ne	abs	result1, local02
1c74c     04 34 56 52 |  if_ne	cmps	result1, #4 wc
1c750                 | '     result := false
1c750     00 9A 06 B6 |  if_nc_or_z	mov	local08, #0
1c754                 | '   else
1c754     90 00 90 BD |  if_nc_or_z	jmp	#LR__0999
1c758                 | '     apin := a                                                   ' save pins & limits
1c758     C9 8C 62 FC | 	wrlong	local01, objptr
1c75c                 | '     longmove(@btnpin, @btn, 5)
1c75c     04 92 05 F1 | 	add	objptr, #4
1c760     C9 90 62 FC | 	wrlong	local03, objptr
1c764     04 92 05 F1 | 	add	objptr, #4
1c768     C9 92 62 FC | 	wrlong	local04, objptr
1c76c     04 92 05 F1 | 	add	objptr, #4
1c770     C9 94 62 FC | 	wrlong	local05, objptr
1c774     04 92 05 F1 | 	add	objptr, #4
1c778     C9 96 62 FC | 	wrlong	local06, objptr
1c77c     04 92 05 F1 | 	add	objptr, #4
1c780     C9 98 62 FC | 	wrlong	local07, objptr
1c784                 | '     mod4x := (d4x) ? 2 : 0                                      ' fix detent modifier
1c784     00 92 0E F2 | 	cmp	local04, #0 wz
1c788     02 9C 06 56 |  if_ne	mov	local09, #2
1c78c     00 9C 06 A6 |  if_e	mov	local09, #0
1c790     0C 92 85 F1 | 	sub	objptr, #12
1c794     C9 9C 62 FC | 	wrlong	local09, objptr
1c798     08 92 85 F1 | 	sub	objptr, #8
1c79c                 | '     pinstart(apin, P_QUADRATURE | dif.[2..0] << 24, 0, 0)       ' start a/b quadrature mode
1c79c     C9 74 02 FB | 	rdlong	arg01, objptr
1c7a0     16 76 06 F6 | 	mov	arg02, #22
1c7a4     07 8E 06 F5 | 	and	local02, #7
1c7a8     18 8E 66 F0 | 	shl	local02, #24
1c7ac     47 77 42 F5 | 	or	arg02, local02
1c7b0     00 78 06 F6 | 	mov	arg03, #0
1c7b4     00 7A 06 F6 | 	mov	arg04, #0
1c7b8     40 74 62 FD | 	dirl	arg01
1c7bc     3A 77 02 FC | 	wrpin	arg02, arg01
1c7c0     3A 01 18 FC | 	wxpin	#0, arg01
1c7c4     3A 01 28 FC | 	wypin	#0, arg01
1c7c8     41 74 62 FD | 	dirh	arg01
1c7cc                 | '     set(preset)                                                 ' preset encoder value
1c7cc     4A 75 02 F6 | 	mov	arg01, local05
1c7d0     54 00 B0 FD | 	call	#_jm_quadrature_spin2_set
1c7d4                 | '     result := setup := true
1c7d4     18 92 05 F1 | 	add	objptr, #24
1c7d8     FF FF FF FF 
1c7dc     C9 FE 6B FC | 	wrlong	##-1, objptr
1c7e0     18 92 85 F1 | 	sub	objptr, #24
1c7e4     01 9A 66 F6 | 	neg	local08, #1
1c7e8                 | LR__0999
1c7e8     4D 35 02 F6 | 	mov	result1, local08
1c7ec     A8 F0 03 F6 | 	mov	ptra, fp
1c7f0     B3 00 A0 FD | 	call	#popregs_
1c7f4                 | _jm_quadrature_spin2_start_ret
1c7f4     2D 00 64 FD | 	ret
1c7f8                 | 
1c7f8                 | ' 
1c7f8                 | ' 
1c7f8                 | ' pub stop()
1c7f8                 | _jm_quadrature_spin2_stop
1c7f8                 | ' 
1c7f8                 | ' '' Disable encoder smart pin if previously configured
1c7f8                 | ' 
1c7f8                 | '   if (setup)
1c7f8     18 92 05 F1 | 	add	objptr, #24
1c7fc     C9 78 0A FB | 	rdlong	arg03, objptr wz
1c800     18 92 85 F1 | 	sub	objptr, #24
1c804     1C 00 90 AD |  if_e	jmp	#LR__1000
1c808                 | '     pinclear(apin)                                              ' disable smart pin
1c808     C9 74 02 FB | 	rdlong	arg01, objptr
1c80c     50 74 62 FD | 	fltl	arg01
1c810     3A 01 08 FC | 	wrpin	#0, arg01
1c814                 | '     longfill(@apin, 0, 7)                                       ' mark disabled
1c814     C9 74 02 F6 | 	mov	arg01, objptr
1c818     00 76 06 F6 | 	mov	arg02, #0
1c81c     07 78 06 F6 | 	mov	arg03, #7
1c820     A1 00 A0 FD | 	call	#\builtin_longfill_
1c824                 | LR__1000
1c824                 | _jm_quadrature_spin2_stop_ret
1c824     2D 00 64 FD | 	ret
1c828                 | 
1c828                 | ' 
1c828                 | ' 
1c828                 | ' pub set(preset) : result
1c828                 | _jm_quadrature_spin2_set
1c828     3A 35 02 F6 | 	mov	result1, arg01
1c82c                 | ' 
1c82c                 | ' '' Set encoder to preset value
1c82c                 | ' 
1c82c                 | '   pinfloat(apin)                                                ' reset & clear  
1c82c     C9 74 02 FB | 	rdlong	arg01, objptr
1c830     50 74 62 FD | 	fltl	arg01
1c834                 | '   pinlow(apin)                                                  ' re-enable
1c834     58 74 62 FD | 	drvl	arg01
1c838                 | '   offset := preset                                              ' set encoder value
1c838     0C 92 05 F1 | 	add	objptr, #12
1c83c     C9 34 62 FC | 	wrlong	result1, objptr
1c840     0C 92 85 F1 | 	sub	objptr, #12
1c844                 | '   result := preset
1c844                 | _jm_quadrature_spin2_set_ret
1c844     2D 00 64 FD | 	ret
1c848                 | 
1c848                 | ' 
1c848                 | ' 
1c848                 | ' pub value() : result
1c848                 | _jm_quadrature_spin2_value
1c848     01 4C 05 F6 | 	mov	COUNT_, #1
1c84c     A9 00 A0 FD | 	call	#pushregs_
1c850                 | ' 
1c850                 | ' '' Return encoder value
1c850                 | ' '' -- returns encoder value turncated to lolimit..hilimit
1c850                 | ' 
1c850                 | '   result := raw() + offset                                      ' read and update value
1c850                 | ' 
1c850                 | ' '' Returns encoder value w/o offset
1c850                 | ' '' -- for development & debugging
1c850                 | ' 
1c850                 | '   result := rdpin(apin) sar mod4x
1c850     C9 74 02 FB | 	rdlong	arg01, objptr
1c854     00 8C 06 F6 | 	mov	local01, #0
1c858     3A 8D 8A FA | 	rdpin	local01, arg01
1c85c     08 92 05 F1 | 	add	objptr, #8
1c860     C9 74 02 FB | 	rdlong	arg01, objptr
1c864     3A 8D C2 F0 | 	sar	local01, arg01
1c868     04 92 05 F1 | 	add	objptr, #4
1c86c     C9 74 02 FB | 	rdlong	arg01, objptr
1c870     3A 8D 02 F1 | 	add	local01, arg01
1c874                 | ' 
1c874                 | '   if (result < lolimit)                                         ' limit range
1c874     04 92 05 F1 | 	add	objptr, #4
1c878     C9 74 02 FB | 	rdlong	arg01, objptr
1c87c     10 92 85 F1 | 	sub	objptr, #16
1c880     3A 8D 52 F2 | 	cmps	local01, arg01 wc
1c884     18 00 90 3D |  if_ae	jmp	#LR__1001
1c888                 | '     result := set(lolimit)
1c888     10 92 05 F1 | 	add	objptr, #16
1c88c     C9 74 02 FB | 	rdlong	arg01, objptr
1c890     10 92 85 F1 | 	sub	objptr, #16
1c894     90 FF BF FD | 	call	#_jm_quadrature_spin2_set
1c898     1A 8D 02 F6 | 	mov	local01, result1
1c89c     28 00 90 FD | 	jmp	#LR__1003
1c8a0                 | LR__1001
1c8a0                 | '   elseif (result > hilimit)
1c8a0     14 92 05 F1 | 	add	objptr, #20
1c8a4     C9 74 02 FB | 	rdlong	arg01, objptr
1c8a8     14 92 85 F1 | 	sub	objptr, #20
1c8ac     3A 8D 5A F2 | 	cmps	local01, arg01 wcz
1c8b0     14 00 90 ED |  if_be	jmp	#LR__1002
1c8b4                 | '     result := set(hilimit)
1c8b4     14 92 05 F1 | 	add	objptr, #20
1c8b8     C9 74 02 FB | 	rdlong	arg01, objptr
1c8bc     14 92 85 F1 | 	sub	objptr, #20
1c8c0     64 FF BF FD | 	call	#_jm_quadrature_spin2_set
1c8c4     1A 8D 02 F6 | 	mov	local01, result1
1c8c8                 | LR__1002
1c8c8                 | LR__1003
1c8c8     46 35 02 F6 | 	mov	result1, local01
1c8cc     A8 F0 03 F6 | 	mov	ptra, fp
1c8d0     B3 00 A0 FD | 	call	#popregs_
1c8d4                 | _jm_quadrature_spin2_value_ret
1c8d4     2D 00 64 FD | 	ret
1c8d8                 | 
1c8d8                 | _fatfs_cc_memcmp
1c8d8                 | ' 	for (n = size; n > 0; n--)
1c8d8                 | LR__1004
1c8d8     01 78 16 F2 | 	cmp	arg03, #1 wc
1c8dc     2C 00 90 CD |  if_b	jmp	#LR__1005
1c8e0     3A 3B C2 FA | 	rdbyte	_var01, arg01
1c8e4     3B 3D C2 FA | 	rdbyte	_var02, arg02
1c8e8     1E 3B 0A F2 | 	cmp	_var01, _var02 wz
1c8ec     01 74 06 A1 |  if_e	add	arg01, #1
1c8f0     01 76 06 A1 |  if_e	add	arg02, #1
1c8f4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1c8f4     3A 35 C2 5A |  if_ne	rdbyte	result1, arg01
1c8f8     3B 3D C2 5A |  if_ne	rdbyte	_var02, arg02
1c8fc     1E 35 82 51 |  if_ne	sub	result1, _var02
1c900     0C 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1c904     01 78 86 F1 | 	sub	arg03, #1
1c908     CC FF 9F FD | 	jmp	#LR__1004
1c90c                 | LR__1005
1c90c                 | ' 
1c90c                 | ' 	return(0);
1c90c     00 34 06 F6 | 	mov	result1, #0
1c910                 | _fatfs_cc_memcmp_ret
1c910     2D 00 64 FD | 	ret
1c914                 | 
1c914                 | _fatfs_cc_strncmp
1c914     3A 3B 0A F6 | 	mov	_var01, arg01 wz
1c918     14 00 90 5D |  if_ne	jmp	#LR__1006
1c91c                 | ' 		return scan2 ? -1 : 0;
1c91c     00 76 0E F2 | 	cmp	arg02, #0 wz
1c920     01 3C 66 56 |  if_ne	neg	_var02, #1
1c924     00 3C 06 A6 |  if_e	mov	_var02, #0
1c928     1E 35 02 F6 | 	mov	result1, _var02
1c92c     88 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1c930                 | LR__1006
1c930     00 76 0E F2 | 	cmp	arg02, #0 wz
1c934     01 34 06 A6 |  if_e	mov	result1, #1
1c938     7C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c93c     3C 3F 02 F6 | 	mov	_var03, arg03
1c940     F8 36 9E FE | 	loc	pa,	#(@LR__1008-@LR__1007)
1c944     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1c948                 | ' 	count = n;
1c948                 | ' 	do {
1c948                 | LR__1007
1c948     1D 41 C2 FA | 	rdbyte	_var04, _var01
1c94c     3B 43 02 F6 | 	mov	_var05, arg02
1c950     3B 45 02 F6 | 	mov	_var06, arg02
1c954     01 44 06 F1 | 	add	_var06, #1
1c958     22 77 02 F6 | 	mov	arg02, _var06
1c95c     21 47 C2 FA | 	rdbyte	_var07, _var05
1c960     1F 3D 02 F6 | 	mov	_var02, _var03
1c964     01 3C 86 F1 | 	sub	_var02, #1
1c968     1E 3F 02 F6 | 	mov	_var03, _var02
1c96c     00 3E 56 F2 | 	cmps	_var03, #0 wc
1c970     01 3A 06 F1 | 	add	_var01, #1
1c974     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
1c978     08 00 90 2D |  if_nc_and_z	jmp	#LR__1009
1c97c     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
1c980     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__1007
1c984                 | LR__1008
1c984                 | LR__1009
1c984     00 3E 56 F2 | 	cmps	_var03, #0 wc
1c988                 | ' 		return(0);
1c988     00 34 06 C6 |  if_b	mov	result1, #0
1c98c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1c990     23 41 0A F2 | 	cmp	_var04, _var07 wz
1c994                 | ' 		return(0);
1c994     00 34 06 A6 |  if_e	mov	result1, #0
1c998     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c99c     00 40 0E F2 | 	cmp	_var04, #0 wz
1c9a0                 | ' 		return(-1);
1c9a0     01 34 66 A6 |  if_e	neg	result1, #1
1c9a4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c9a8     00 46 0E F2 | 	cmp	_var07, #0 wz
1c9ac                 | ' 		return(1);
1c9ac     01 34 06 A6 |  if_e	mov	result1, #1
1c9b0                 | ' 		return(c1 - c2);
1c9b0     20 35 02 56 |  if_ne	mov	result1, _var04
1c9b4     23 35 82 51 |  if_ne	sub	result1, _var07
1c9b8                 | _fatfs_cc_strncmp_ret
1c9b8     2D 00 64 FD | 	ret
1c9bc                 | 
1c9bc                 | _fatfs_cc_strchr
1c9bc                 | ' #line 16 "C:/flexprop/include/libc/string/strchr.c"
1c9bc                 | ' 	while ((c = *s++) != (char) charwanted)
1c9bc                 | LR__1010
1c9bc     3A 3B 02 F6 | 	mov	_var01, arg01
1c9c0     1D 3D C2 FA | 	rdbyte	_var02, _var01
1c9c4     1E 3F E2 F8 | 	getbyte	_var03, _var02, #0
1c9c8     3B 41 E2 F8 | 	getbyte	_var04, arg02, #0
1c9cc     20 3F 0A F2 | 	cmp	_var03, _var04 wz
1c9d0     01 74 06 F1 | 	add	arg01, #1
1c9d4     14 00 90 AD |  if_e	jmp	#LR__1011
1c9d8     1E 3F 02 F6 | 	mov	_var03, _var02
1c9dc     07 3E 4E F7 | 	zerox	_var03, #7 wz
1c9e0     00 34 06 A6 |  if_e	mov	result1, #0
1c9e4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1c9e8     D0 FF 9F FD | 	jmp	#LR__1010
1c9ec                 | LR__1011
1c9ec                 | ' 	return((char *)--s);
1c9ec     01 74 86 F1 | 	sub	arg01, #1
1c9f0     3A 35 02 F6 | 	mov	result1, arg01
1c9f4                 | _fatfs_cc_strchr_ret
1c9f4     2D 00 64 FD | 	ret
1c9f8                 | 
1c9f8                 | _fatfs_cc_disk_initialize
1c9f8     07 4C 05 F6 | 	mov	COUNT_, #7
1c9fc     A9 00 A0 FD | 	call	#pushregs_
1ca00     40 F0 07 F1 | 	add	ptra, #64
1ca04     04 50 05 F1 | 	add	fp, #4
1ca08     A8 74 42 FC | 	wrbyte	arg01, fp
1ca0c     0C 92 05 F1 | 	add	objptr, #12
1ca10     C9 74 02 FB | 	rdlong	arg01, objptr
1ca14     2C 50 05 F1 | 	add	fp, #44
1ca18     A8 74 62 FC | 	wrlong	arg01, fp
1ca1c     04 92 85 F1 | 	sub	objptr, #4
1ca20     C9 74 02 FB | 	rdlong	arg01, objptr
1ca24     04 50 05 F1 | 	add	fp, #4
1ca28     A8 74 62 FC | 	wrlong	arg01, fp
1ca2c     08 92 05 F1 | 	add	objptr, #8
1ca30     C9 74 02 FB | 	rdlong	arg01, objptr
1ca34     04 50 05 F1 | 	add	fp, #4
1ca38     A8 74 62 FC | 	wrlong	arg01, fp
1ca3c     04 92 05 F1 | 	add	objptr, #4
1ca40     C9 74 02 FB | 	rdlong	arg01, objptr
1ca44     04 50 05 F1 | 	add	fp, #4
1ca48     A8 74 62 FC | 	wrlong	arg01, fp
1ca4c     04 92 05 F1 | 	add	objptr, #4
1ca50     C9 02 48 FC | 	wrbyte	#1, objptr
1ca54     18 92 85 F1 | 	sub	objptr, #24
1ca58     38 50 85 F1 | 	sub	fp, #56
1ca5c     A8 74 CA FA | 	rdbyte	arg01, fp wz
1ca60     04 50 85 F1 | 	sub	fp, #4
1ca64                 | ' #line 531 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1ca64                 | '             return RES_NOTRDY;
1ca64     03 34 06 56 |  if_ne	mov	result1, #3
1ca68     20 06 90 5D |  if_ne	jmp	#LR__1030
1ca6c     13 00 00 FF 
1ca70     10 75 06 F6 | 	mov	arg01, ##10000
1ca74     88 93 B0 FD | 	call	#__system___waitus
1ca78     30 50 05 F1 | 	add	fp, #48
1ca7c     A8 74 02 FB | 	rdlong	arg01, fp
1ca80     3A 01 08 FC | 	wrpin	#0, arg01
1ca84     04 50 05 F1 | 	add	fp, #4
1ca88     A8 74 02 FB | 	rdlong	arg01, fp
1ca8c     3A 01 08 FC | 	wrpin	#0, arg01
1ca90     04 50 05 F1 | 	add	fp, #4
1ca94     A8 74 02 FB | 	rdlong	arg01, fp
1ca98     3A 01 08 FC | 	wrpin	#0, arg01
1ca9c     04 50 05 F1 | 	add	fp, #4
1caa0     A8 74 02 FB | 	rdlong	arg01, fp
1caa4     09 00 80 FF 
1caa8     3A 01 08 FC | 	wrpin	##4608, arg01
1caac     0C 50 85 F1 | 	sub	fp, #12
1cab0     A8 74 02 FB | 	rdlong	arg01, fp
1cab4     59 74 62 FD | 	drvh	arg01
1cab8     04 50 05 F1 | 	add	fp, #4
1cabc     A8 74 02 FB | 	rdlong	arg01, fp
1cac0     59 74 62 FD | 	drvh	arg01
1cac4     04 50 05 F1 | 	add	fp, #4
1cac8     A8 74 02 FB | 	rdlong	arg01, fp
1cacc     59 74 62 FD | 	drvh	arg01
1cad0     04 50 05 F1 | 	add	fp, #4
1cad4     A8 74 02 FB | 	rdlong	arg01, fp
1cad8     59 74 62 FD | 	drvh	arg01
1cadc     20 50 85 F1 | 	sub	fp, #32
1cae0     00 04 80 FF 
1cae4     A8 20 68 FC | 	wrlong	##524304, fp
1cae8     04 50 05 F1 | 	add	fp, #4
1caec     20 03 80 FF 
1caf0     A8 90 68 FC | 	wrlong	##409672, fp
1caf4     14 50 05 F1 | 	add	fp, #20
1caf8     A8 7A 02 FB | 	rdlong	arg04, fp
1cafc     20 03 00 FF 
1cb00     48 76 06 F6 | 	mov	arg02, ##409672
1cb04     10 76 26 F4 | 	bith	arg02, #16
1cb08     18 50 85 F1 | 	sub	fp, #24
1cb0c     A8 78 02 FB | 	rdlong	arg03, fp
1cb10     40 7A 62 FD | 	dirl	arg04
1cb14     3D 77 02 FC | 	wrpin	arg02, arg04
1cb18     3D 79 12 FC | 	wxpin	arg03, arg04
1cb1c     3D 01 28 FC | 	wypin	#0, arg04
1cb20     41 7A 62 FD | 	dirh	arg04
1cb24     1C 50 05 F1 | 	add	fp, #28
1cb28     A8 8C 02 FB | 	rdlong	local01, fp
1cb2c     46 7B 82 F1 | 	sub	arg04, local01
1cb30     07 7A 06 F5 | 	and	arg04, #7
1cb34     18 7A 66 F0 | 	shl	arg04, #24
1cb38     78 76 06 F6 | 	mov	arg02, #120
1cb3c     3D 77 42 F5 | 	or	arg02, arg04
1cb40     14 50 85 F1 | 	sub	fp, #20
1cb44     A8 76 62 FC | 	wrlong	arg02, fp
1cb48     14 50 05 F1 | 	add	fp, #20
1cb4c     A8 74 02 FB | 	rdlong	arg01, fp
1cb50     10 76 26 F4 | 	bith	arg02, #16
1cb54     40 74 62 FD | 	dirl	arg01
1cb58     3A 77 02 FC | 	wrpin	arg02, arg01
1cb5c     3A 3F 18 FC | 	wxpin	#31, arg01
1cb60     FF FF FF FF 
1cb64     3A FF 2B FC | 	wypin	##-1, arg01
1cb68     41 74 62 FD | 	dirh	arg01
1cb6c     04 50 85 F1 | 	sub	fp, #4
1cb70     A8 76 02 FB | 	rdlong	arg02, fp
1cb74     08 50 05 F1 | 	add	fp, #8
1cb78     A8 7A 02 FB | 	rdlong	arg04, fp
1cb7c     3D 77 82 F1 | 	sub	arg02, arg04
1cb80     07 76 06 F5 | 	and	arg02, #7
1cb84     18 76 66 F0 | 	shl	arg02, #24
1cb88     14 50 85 F1 | 	sub	fp, #20
1cb8c     A8 76 62 FC | 	wrlong	arg02, fp
1cb90     29 00 00 FF 
1cb94     7A 76 46 F5 | 	or	arg02, ##21114
1cb98     A8 76 62 FC | 	wrlong	arg02, fp
1cb9c     14 50 05 F1 | 	add	fp, #20
1cba0     A8 74 02 FB | 	rdlong	arg01, fp
1cba4     00 8E 06 F6 | 	mov	local02, #0
1cba8     27 78 06 F6 | 	mov	arg03, #39
1cbac     00 7A 06 F6 | 	mov	arg04, #0
1cbb0     40 74 62 FD | 	dirl	arg01
1cbb4     3A 77 02 FC | 	wrpin	arg02, arg01
1cbb8     3A 4F 18 FC | 	wxpin	#39, arg01
1cbbc     3A 01 28 FC | 	wypin	#0, arg01
1cbc0     41 74 62 FD | 	dirh	arg01
1cbc4     28 50 85 F1 | 	sub	fp, #40
1cbc8     A8 74 02 F6 | 	mov	arg01, fp
1cbcc     14 50 85 F1 | 	sub	fp, #20
1cbd0     0A 76 06 F6 | 	mov	arg02, #10
1cbd4     EC 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0415
1cbd8     00 74 06 F6 | 	mov	arg01, #0
1cbdc     00 76 06 F6 | 	mov	arg02, #0
1cbe0     A0 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cbe4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_0425
1cbe8     64 74 06 F6 | 	mov	arg01, #100
1cbec     10 92 B0 FD | 	call	#__system___waitus
1cbf0     14 50 05 F1 | 	add	fp, #20
1cbf4     A8 74 02 F6 | 	mov	arg01, fp
1cbf8     14 50 85 F1 | 	sub	fp, #20
1cbfc     0A 76 06 F6 | 	mov	arg02, #10
1cc00     C0 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0415
1cc04     0C 50 05 F1 | 	add	fp, #12
1cc08     A8 00 48 FC | 	wrbyte	#0, fp
1cc0c     0C 50 85 F1 | 	sub	fp, #12
1cc10     00 74 06 F6 | 	mov	arg01, #0
1cc14     00 76 06 F6 | 	mov	arg02, #0
1cc18     68 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cc1c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1cc20     01 34 0E F2 | 	cmp	result1, #1 wz
1cc24     F4 03 90 5D |  if_ne	jmp	#LR__1029
1cc28     08 74 06 F6 | 	mov	arg01, #8
1cc2c     AA 77 06 F6 | 	mov	arg02, #426
1cc30     50 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cc34     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1cc38     01 34 0E F2 | 	cmp	result1, #1 wz
1cc3c     B0 01 90 5D |  if_ne	jmp	#LR__1015
1cc40     14 50 05 F1 | 	add	fp, #20
1cc44     A8 74 02 F6 | 	mov	arg01, fp
1cc48     14 50 85 F1 | 	sub	fp, #20
1cc4c     04 76 06 F6 | 	mov	arg02, #4
1cc50     70 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0415
1cc54     16 50 05 F1 | 	add	fp, #22
1cc58     A8 90 C2 FA | 	rdbyte	local03, fp
1cc5c     16 50 85 F1 | 	sub	fp, #22
1cc60     01 90 0E F2 | 	cmp	local03, #1 wz
1cc64     B4 03 90 5D |  if_ne	jmp	#LR__1028
1cc68     17 50 05 F1 | 	add	fp, #23
1cc6c     A8 92 C2 FA | 	rdbyte	local04, fp
1cc70     17 50 85 F1 | 	sub	fp, #23
1cc74     AA 92 0E F2 | 	cmp	local04, #170 wz
1cc78     A0 03 90 5D |  if_ne	jmp	#LR__1028
1cc7c                 | ' 				for (tmr = 1000; tmr; tmr--) {
1cc7c     18 50 05 F1 | 	add	fp, #24
1cc80     01 00 80 FF 
1cc84     A8 D0 6B FC | 	wrlong	##1000, fp
1cc88     18 50 85 F1 | 	sub	fp, #24
1cc8c                 | LR__1012
1cc8c     18 50 05 F1 | 	add	fp, #24
1cc90     A8 92 0A FB | 	rdlong	local04, fp wz
1cc94     18 50 85 F1 | 	sub	fp, #24
1cc98     44 00 90 AD |  if_e	jmp	#LR__1013
1cc9c     1E 94 C6 F9 | 	decod	local05, #30
1cca0     A9 74 06 F6 | 	mov	arg01, #169
1cca4     1E 76 C6 F9 | 	decod	arg02, #30
1cca8     D8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1ccac     1A 8F 02 F6 | 	mov	local02, result1
1ccb0     07 8E 4E F7 | 	zerox	local02, #7 wz
1ccb4     28 00 90 AD |  if_e	jmp	#LR__1013
1ccb8     01 00 00 FF 
1ccbc     E8 75 06 F6 | 	mov	arg01, ##1000
1ccc0     3C 91 B0 FD | 	call	#__system___waitus
1ccc4     18 50 05 F1 | 	add	fp, #24
1ccc8     A8 96 02 FB | 	rdlong	local06, fp
1cccc     4B 95 02 F6 | 	mov	local05, local06
1ccd0     01 94 86 F1 | 	sub	local05, #1
1ccd4     A8 94 62 FC | 	wrlong	local05, fp
1ccd8     18 50 85 F1 | 	sub	fp, #24
1ccdc     AC FF 9F FD | 	jmp	#LR__1012
1cce0                 | LR__1013
1cce0     18 50 05 F1 | 	add	fp, #24
1cce4     A8 90 0A FB | 	rdlong	local03, fp wz
1cce8     18 50 85 F1 | 	sub	fp, #24
1ccec     58 00 90 AD |  if_e	jmp	#LR__1014
1ccf0     00 8C 06 F6 | 	mov	local01, #0
1ccf4     3A 74 06 F6 | 	mov	arg01, #58
1ccf8     00 76 06 F6 | 	mov	arg02, #0
1ccfc     84 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cd00     1A 8F 02 F6 | 	mov	local02, result1
1cd04     47 93 02 F6 | 	mov	local04, local02
1cd08     07 92 4E F7 | 	zerox	local04, #7 wz
1cd0c     38 00 90 5D |  if_ne	jmp	#LR__1014
1cd10     14 50 05 F1 | 	add	fp, #20
1cd14     A8 74 02 F6 | 	mov	arg01, fp
1cd18     14 50 85 F1 | 	sub	fp, #20
1cd1c     04 76 06 F6 | 	mov	arg02, #4
1cd20     A0 79 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0415
1cd24     14 50 05 F1 | 	add	fp, #20
1cd28     A8 92 C2 FA | 	rdbyte	local04, fp
1cd2c     49 99 E2 F8 | 	getbyte	local07, local04, #0
1cd30     40 98 0E F5 | 	and	local07, #64 wz
1cd34     0C 90 06 56 |  if_ne	mov	local03, #12
1cd38     04 90 06 A6 |  if_e	mov	local03, #4
1cd3c     08 50 85 F1 | 	sub	fp, #8
1cd40     A8 90 42 FC | 	wrbyte	local03, fp
1cd44     0C 50 85 F1 | 	sub	fp, #12
1cd48                 | LR__1014
1cd48     14 90 06 FB | 	rdlong	local03, #20
1cd4c     18 50 05 F1 | 	add	fp, #24
1cd50     A8 90 62 FC | 	wrlong	local03, fp
1cd54     0C 50 05 F1 | 	add	fp, #12
1cd58     A8 90 02 FB | 	rdlong	local03, fp
1cd5c     1B 90 26 F4 | 	bith	local03, #27
1cd60     A8 90 62 FC | 	wrlong	local03, fp
1cd64     0C 50 85 F1 | 	sub	fp, #12
1cd68     A8 98 02 FB | 	rdlong	local07, fp
1cd6c     18 50 85 F1 | 	sub	fp, #24
1cd70     68 78 04 FF 
1cd74     81 99 16 F2 | 	cmp	local07, ##150000001 wc
1cd78     1C 50 05 C1 |  if_b	add	fp, #28
1cd7c     00 01 80 CF 
1cd80     A8 08 68 CC |  if_b	wrlong	##131076, fp
1cd84     1C 50 85 C1 |  if_b	sub	fp, #28
1cd88     90 02 90 CD |  if_b	jmp	#LR__1028
1cd8c     18 50 05 F1 | 	add	fp, #24
1cd90     A8 98 02 FB | 	rdlong	local07, fp
1cd94     18 50 85 F1 | 	sub	fp, #24
1cd98     E1 F5 05 FF 
1cd9c     01 98 16 F2 | 	cmp	local07, ##200000001 wc
1cda0     1C 50 05 C1 |  if_b	add	fp, #28
1cda4     00 01 80 CF 
1cda8     A8 0A 68 CC |  if_b	wrlong	##131077, fp
1cdac     1C 50 85 C1 |  if_b	sub	fp, #28
1cdb0     68 02 90 CD |  if_b	jmp	#LR__1028
1cdb4     18 50 05 F1 | 	add	fp, #24
1cdb8     A8 98 02 FB | 	rdlong	local07, fp
1cdbc     18 50 85 F1 | 	sub	fp, #24
1cdc0     3B 58 08 FF 
1cdc4     01 98 16 F2 | 	cmp	local07, ##280000001 wc
1cdc8     1C 50 05 C1 |  if_b	add	fp, #28
1cdcc     00 01 80 CF 
1cdd0     A8 0C 68 CC |  if_b	wrlong	##131078, fp
1cdd4     1C 50 85 C1 |  if_b	sub	fp, #28
1cdd8     40 02 90 CD |  if_b	jmp	#LR__1028
1cddc     1C 50 05 F1 | 	add	fp, #28
1cde0     80 01 80 FF 
1cde4     A8 10 68 FC | 	wrlong	##196616, fp
1cde8     1C 50 85 F1 | 	sub	fp, #28
1cdec     2C 02 90 FD | 	jmp	#LR__1028
1cdf0                 | LR__1015
1cdf0     A9 74 06 F6 | 	mov	arg01, #169
1cdf4     00 76 06 F6 | 	mov	arg02, #0
1cdf8     88 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cdfc     1A 91 E2 F8 | 	getbyte	local03, result1, #0
1ce00     02 90 16 F2 | 	cmp	local03, #2 wc
1ce04     18 00 90 3D |  if_ae	jmp	#LR__1016
1ce08     0C 50 05 F1 | 	add	fp, #12
1ce0c     A8 04 48 FC | 	wrbyte	#2, fp
1ce10     04 50 05 F1 | 	add	fp, #4
1ce14     A8 52 49 FC | 	wrbyte	#169, fp
1ce18     10 50 85 F1 | 	sub	fp, #16
1ce1c     14 00 90 FD | 	jmp	#LR__1017
1ce20                 | LR__1016
1ce20     0C 50 05 F1 | 	add	fp, #12
1ce24     A8 02 48 FC | 	wrbyte	#1, fp
1ce28     04 50 05 F1 | 	add	fp, #4
1ce2c     A8 02 48 FC | 	wrbyte	#1, fp
1ce30     10 50 85 F1 | 	sub	fp, #16
1ce34                 | LR__1017
1ce34                 | ' 				ty =  0x01 ; cmd =  (1) ;
1ce34                 | ' 			}
1ce34                 | ' 			for (tmr = 1000; tmr; tmr--) {
1ce34     18 50 05 F1 | 	add	fp, #24
1ce38     01 00 80 FF 
1ce3c     A8 D0 6B FC | 	wrlong	##1000, fp
1ce40     18 50 85 F1 | 	sub	fp, #24
1ce44                 | LR__1018
1ce44     18 50 05 F1 | 	add	fp, #24
1ce48     A8 92 0A FB | 	rdlong	local04, fp wz
1ce4c     18 50 85 F1 | 	sub	fp, #24
1ce50     58 00 90 AD |  if_e	jmp	#LR__1019
1ce54     10 50 05 F1 | 	add	fp, #16
1ce58     A8 74 C2 FA | 	rdbyte	arg01, fp
1ce5c     10 50 85 F1 | 	sub	fp, #16
1ce60     00 94 06 F6 | 	mov	local05, #0
1ce64     00 76 06 F6 | 	mov	arg02, #0
1ce68     18 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1ce6c     1A 8D 02 F6 | 	mov	local01, result1
1ce70     46 8F 02 F6 | 	mov	local02, local01
1ce74     07 8E 4E F7 | 	zerox	local02, #7 wz
1ce78     30 00 90 AD |  if_e	jmp	#LR__1019
1ce7c     01 00 00 FF 
1ce80     E8 75 06 F6 | 	mov	arg01, ##1000
1ce84     78 8F B0 FD | 	call	#__system___waitus
1ce88     18 50 05 F1 | 	add	fp, #24
1ce8c     A8 8C 02 FB | 	rdlong	local01, fp
1ce90     46 8F 02 F6 | 	mov	local02, local01
1ce94     46 97 02 F6 | 	mov	local06, local01
1ce98     4B 95 02 F6 | 	mov	local05, local06
1ce9c     01 94 86 F1 | 	sub	local05, #1
1cea0     A8 94 62 FC | 	wrlong	local05, fp
1cea4     18 50 85 F1 | 	sub	fp, #24
1cea8     98 FF 9F FD | 	jmp	#LR__1018
1ceac                 | LR__1019
1ceac     18 50 05 F1 | 	add	fp, #24
1ceb0     A8 98 0A FB | 	rdlong	local07, fp wz
1ceb4     18 50 85 F1 | 	sub	fp, #24
1ceb8     20 00 90 AD |  if_e	jmp	#LR__1020
1cebc     09 8C C6 F9 | 	decod	local01, #9
1cec0     10 74 06 F6 | 	mov	arg01, #16
1cec4     09 76 C6 F9 | 	decod	arg02, #9
1cec8     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1cecc     1A 8F 02 F6 | 	mov	local02, result1
1ced0     47 93 02 F6 | 	mov	local04, local02
1ced4     07 92 4E F7 | 	zerox	local04, #7 wz
1ced8     0C 00 90 AD |  if_e	jmp	#LR__1021
1cedc                 | LR__1020
1cedc     0C 50 05 F1 | 	add	fp, #12
1cee0     A8 00 48 FC | 	wrbyte	#0, fp
1cee4     0C 50 85 F1 | 	sub	fp, #12
1cee8                 | LR__1021
1cee8     14 90 06 FB | 	rdlong	local03, #20
1ceec     18 50 05 F1 | 	add	fp, #24
1cef0     A8 90 62 FC | 	wrlong	local03, fp
1cef4     18 50 85 F1 | 	sub	fp, #24
1cef8     F0 FA 02 FF 
1cefc     01 91 16 F2 | 	cmp	local03, ##100000001 wc
1cf00     18 00 90 3D |  if_ae	jmp	#LR__1022
1cf04     24 50 05 F1 | 	add	fp, #36
1cf08     A8 90 02 FB | 	rdlong	local03, fp
1cf0c     1B 90 26 F4 | 	bith	local03, #27
1cf10     A8 90 62 FC | 	wrlong	local03, fp
1cf14     24 50 85 F1 | 	sub	fp, #36
1cf18     2C 00 90 FD | 	jmp	#LR__1023
1cf1c                 | LR__1022
1cf1c     18 50 05 F1 | 	add	fp, #24
1cf20     A8 90 02 FB | 	rdlong	local03, fp
1cf24     18 50 85 F1 | 	sub	fp, #24
1cf28     E1 F5 05 FF 
1cf2c     01 90 16 F2 | 	cmp	local03, ##200000001 wc
1cf30     24 50 05 C1 |  if_b	add	fp, #36
1cf34     A8 90 02 CB |  if_b	rdlong	local03, fp
1cf38     80 00 04 CF 
1cf3c     00 90 46 C5 |  if_b	or	local03, ##134283264
1cf40     A8 90 62 CC |  if_b	wrlong	local03, fp
1cf44     24 50 85 C1 |  if_b	sub	fp, #36
1cf48                 | LR__1023
1cf48     18 50 05 F1 | 	add	fp, #24
1cf4c     A8 90 02 FB | 	rdlong	local03, fp
1cf50     18 50 85 F1 | 	sub	fp, #24
1cf54     F0 FA 02 FF 
1cf58     01 91 16 F2 | 	cmp	local03, ##100000001 wc
1cf5c     1C 50 05 C1 |  if_b	add	fp, #28
1cf60     00 01 80 CF 
1cf64     A8 08 68 CC |  if_b	wrlong	##131076, fp
1cf68     1C 50 85 C1 |  if_b	sub	fp, #28
1cf6c     AC 00 90 CD |  if_b	jmp	#LR__1027
1cf70     18 50 05 F1 | 	add	fp, #24
1cf74     A8 90 02 FB | 	rdlong	local03, fp
1cf78     18 50 85 F1 | 	sub	fp, #24
1cf7c     68 78 04 FF 
1cf80     81 91 16 F2 | 	cmp	local03, ##150000001 wc
1cf84     1C 50 05 C1 |  if_b	add	fp, #28
1cf88     80 01 80 CF 
1cf8c     A8 0C 68 CC |  if_b	wrlong	##196614, fp
1cf90     1C 50 85 C1 |  if_b	sub	fp, #28
1cf94     84 00 90 CD |  if_b	jmp	#LR__1026
1cf98     18 50 05 F1 | 	add	fp, #24
1cf9c     A8 90 02 FB | 	rdlong	local03, fp
1cfa0     18 50 85 F1 | 	sub	fp, #24
1cfa4     E1 F5 05 FF 
1cfa8     01 90 16 F2 | 	cmp	local03, ##200000001 wc
1cfac     1C 50 05 C1 |  if_b	add	fp, #28
1cfb0     00 02 80 CF 
1cfb4     A8 10 68 CC |  if_b	wrlong	##262152, fp
1cfb8     1C 50 85 C1 |  if_b	sub	fp, #28
1cfbc     5C 00 90 CD |  if_b	jmp	#LR__1025
1cfc0     18 50 05 F1 | 	add	fp, #24
1cfc4     A8 90 02 FB | 	rdlong	local03, fp
1cfc8     18 50 85 F1 | 	sub	fp, #24
1cfcc     59 73 07 FF 
1cfd0     81 90 16 F2 | 	cmp	local03, ##250000001 wc
1cfd4     1C 50 05 C1 |  if_b	add	fp, #28
1cfd8     80 02 80 CF 
1cfdc     A8 14 68 CC |  if_b	wrlong	##327690, fp
1cfe0     1C 50 85 C1 |  if_b	sub	fp, #28
1cfe4     34 00 90 CD |  if_b	jmp	#LR__1024
1cfe8     18 50 05 F1 | 	add	fp, #24
1cfec     A8 90 02 FB | 	rdlong	local03, fp
1cff0     18 50 85 F1 | 	sub	fp, #24
1cff4     D1 F0 08 FF 
1cff8     01 91 16 F2 | 	cmp	local03, ##300000001 wc
1cffc     1C 50 05 C1 |  if_b	add	fp, #28
1d000     00 03 80 CF 
1d004     A8 18 68 CC |  if_b	wrlong	##393228, fp
1d008     1C 50 85 C1 |  if_b	sub	fp, #28
1d00c     1C 50 05 31 |  if_ae	add	fp, #28
1d010     80 03 80 3F 
1d014     A8 1C 68 3C |  if_ae	wrlong	##458766, fp
1d018     1C 50 85 31 |  if_ae	sub	fp, #28
1d01c                 | LR__1024
1d01c                 | LR__1025
1d01c                 | LR__1026
1d01c                 | LR__1027
1d01c                 | LR__1028
1d01c                 | LR__1029
1d01c     0C 50 05 F1 | 	add	fp, #12
1d020     A8 90 C2 FA | 	rdbyte	local03, fp
1d024     19 92 05 F1 | 	add	objptr, #25
1d028     C9 90 42 FC | 	wrbyte	local03, objptr
1d02c     A8 98 CA FA | 	rdbyte	local07, fp wz
1d030     00 90 06 56 |  if_ne	mov	local03, #0
1d034     01 90 06 A6 |  if_e	mov	local03, #1
1d038     20 50 05 F1 | 	add	fp, #32
1d03c     A8 90 42 FC | 	wrbyte	local03, fp
1d040     A8 90 C2 FA | 	rdbyte	local03, fp
1d044     2C 50 85 F1 | 	sub	fp, #44
1d048     01 92 85 F1 | 	sub	objptr, #1
1d04c     C9 90 42 FC | 	wrbyte	local03, objptr
1d050     18 92 85 F1 | 	sub	objptr, #24
1d054     7C 77 B0 FD | 	call	#_fatfs_cc_deselect_0425
1d058     34 50 05 F1 | 	add	fp, #52
1d05c     A8 74 02 FB | 	rdlong	arg01, fp
1d060     18 50 85 F1 | 	sub	fp, #24
1d064     A8 76 02 FB | 	rdlong	arg02, fp
1d068     3A 77 12 FC | 	wxpin	arg02, arg01
1d06c     1C 50 05 F1 | 	add	fp, #28
1d070     A8 74 02 FB | 	rdlong	arg01, fp
1d074     14 50 85 F1 | 	sub	fp, #20
1d078     A8 76 02 FB | 	rdlong	arg02, fp
1d07c     3A 77 02 FC | 	wrpin	arg02, arg01
1d080                 | ' 
1d080                 | ' 		}
1d080                 | ' 	}
1d080                 | ' #line 631 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1d080                 | ' 	CardType = ty;
1d080                 | ' 	s = ty ? 0 :  0x01 ;
1d080                 | ' 	Stat = s;
1d080                 | ' 
1d080                 | ' 	deselect();
1d080                 | ' 
1d080                 | ' 
1d080                 | ' 	_wxpin( PIN_CLK, ck_div );
1d080                 | ' 	_wrpin( PIN_DI, spm_tx );
1d080                 | ' #line 644 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1d080                 | ' 	return s;
1d080     08 50 05 F1 | 	add	fp, #8
1d084     A8 34 C2 FA | 	rdbyte	result1, fp
1d088     2C 50 85 F1 | 	sub	fp, #44
1d08c                 | LR__1030
1d08c     A8 F0 03 F6 | 	mov	ptra, fp
1d090     B3 00 A0 FD | 	call	#popregs_
1d094                 | _fatfs_cc_disk_initialize_ret
1d094     2D 00 64 FD | 	ret
1d098                 | 
1d098                 | _fatfs_cc_disk_read
1d098     05 4C 05 F6 | 	mov	COUNT_, #5
1d09c     A9 00 A0 FD | 	call	#pushregs_
1d0a0     3B 8D 02 F6 | 	mov	local01, arg02
1d0a4     3C 8F 02 F6 | 	mov	local02, arg03
1d0a8     3D 91 02 F6 | 	mov	local03, arg04
1d0ac     00 74 0E F2 | 	cmp	arg01, #0 wz
1d0b0     01 34 06 56 |  if_ne	mov	result1, #1
1d0b4                 | ' 
1d0b4                 | ' 	return Stat;
1d0b4     18 92 05 A1 |  if_e	add	objptr, #24
1d0b8     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1d0bc     18 92 85 A1 |  if_e	sub	objptr, #24
1d0c0     01 34 0E F5 | 	and	result1, #1 wz
1d0c4     03 34 06 56 |  if_ne	mov	result1, #3
1d0c8     7C 00 90 5D |  if_ne	jmp	#LR__1033
1d0cc     19 92 05 F1 | 	add	objptr, #25
1d0d0     C9 92 C2 FA | 	rdbyte	local04, objptr
1d0d4     19 92 85 F1 | 	sub	objptr, #25
1d0d8     08 92 0E F5 | 	and	local04, #8 wz
1d0dc     09 8E 66 A0 |  if_e	shl	local02, #9
1d0e0     02 90 16 F2 | 	cmp	local03, #2 wc
1d0e4     12 92 06 36 |  if_ae	mov	local04, #18
1d0e8     11 92 06 C6 |  if_b	mov	local04, #17
1d0ec     47 77 02 F6 | 	mov	arg02, local02
1d0f0     49 75 02 F6 | 	mov	arg01, local04
1d0f4     8C 79 B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1d0f8     1A 95 02 F6 | 	mov	local05, result1
1d0fc     07 94 4E F7 | 	zerox	local05, #7 wz
1d100     30 00 90 5D |  if_ne	jmp	#LR__1032
1d104                 | ' 		do {
1d104                 | LR__1031
1d104     46 75 02 F6 | 	mov	arg01, local01
1d108     09 76 C6 F9 | 	decod	arg02, #9
1d10c     C8 77 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0433
1d110     00 34 0E F2 | 	cmp	result1, #0 wz
1d114     01 00 00 5F 
1d118     00 8C 06 51 |  if_ne	add	local01, ##512
1d11c     F9 91 6E 5B |  if_ne	djnz	local03, #LR__1031
1d120     49 93 E2 F8 | 	getbyte	local04, local04, #0
1d124     12 92 0E F2 | 	cmp	local04, #18 wz
1d128     0C 74 06 A6 |  if_e	mov	arg01, #12
1d12c     00 76 06 A6 |  if_e	mov	arg02, #0
1d130     50 79 B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0439
1d134                 | LR__1032
1d134     9C 76 B0 FD | 	call	#_fatfs_cc_deselect_0425
1d138                 | ' 	}
1d138                 | ' 	deselect();
1d138                 | ' 
1d138                 | ' 	return count ? RES_ERROR : RES_OK;
1d138     00 90 0E F2 | 	cmp	local03, #0 wz
1d13c     01 94 06 56 |  if_ne	mov	local05, #1
1d140     00 94 06 A6 |  if_e	mov	local05, #0
1d144     4A 35 02 F6 | 	mov	result1, local05
1d148                 | LR__1033
1d148     A8 F0 03 F6 | 	mov	ptra, fp
1d14c     B3 00 A0 FD | 	call	#popregs_
1d150                 | _fatfs_cc_disk_read_ret
1d150     2D 00 64 FD | 	ret
1d154                 | 
1d154                 | _fatfs_cc_disk_write
1d154     06 4C 05 F6 | 	mov	COUNT_, #6
1d158     A9 00 A0 FD | 	call	#pushregs_
1d15c     3A 8D 02 F6 | 	mov	local01, arg01
1d160     3B 8F 02 F6 | 	mov	local02, arg02
1d164     3C 91 02 F6 | 	mov	local03, arg03
1d168     3D 93 02 F6 | 	mov	local04, arg04
1d16c     48 95 02 F6 | 	mov	local05, local03
1d170     46 75 0A F6 | 	mov	arg01, local01 wz
1d174     01 34 06 56 |  if_ne	mov	result1, #1
1d178                 | ' 
1d178                 | ' 	return Stat;
1d178     18 92 05 A1 |  if_e	add	objptr, #24
1d17c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1d180     18 92 85 A1 |  if_e	sub	objptr, #24
1d184     01 34 0E F5 | 	and	result1, #1 wz
1d188     03 34 06 56 |  if_ne	mov	result1, #3
1d18c     C4 00 90 5D |  if_ne	jmp	#LR__1038
1d190     19 92 05 F1 | 	add	objptr, #25
1d194     C9 96 C2 FA | 	rdbyte	local06, objptr
1d198     19 92 85 F1 | 	sub	objptr, #25
1d19c     08 96 CE F7 | 	test	local06, #8 wz
1d1a0     09 94 66 A0 |  if_e	shl	local05, #9
1d1a4     01 92 0E F2 | 	cmp	local04, #1 wz
1d1a8     30 00 90 5D |  if_ne	jmp	#LR__1034
1d1ac     18 74 06 F6 | 	mov	arg01, #24
1d1b0     4A 77 02 F6 | 	mov	arg02, local05
1d1b4     CC 78 B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1d1b8     1A 97 02 F6 | 	mov	local06, result1
1d1bc     07 96 4E F7 | 	zerox	local06, #7 wz
1d1c0     7C 00 90 5D |  if_ne	jmp	#LR__1037
1d1c4     47 75 02 F6 | 	mov	arg01, local02
1d1c8     FE 76 06 F6 | 	mov	arg02, #254
1d1cc     E8 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0435
1d1d0     00 34 4E F2 | 	cmps	result1, #0 wz
1d1d4     00 92 06 56 |  if_ne	mov	local04, #0
1d1d8     64 00 90 FD | 	jmp	#LR__1037
1d1dc                 | LR__1034
1d1dc     19 92 05 F1 | 	add	objptr, #25
1d1e0     C9 96 C2 FA | 	rdbyte	local06, objptr
1d1e4     19 92 85 F1 | 	sub	objptr, #25
1d1e8     06 96 CE F7 | 	test	local06, #6 wz
1d1ec     97 74 06 56 |  if_ne	mov	arg01, #151
1d1f0     49 77 02 56 |  if_ne	mov	arg02, local04
1d1f4     8C 78 B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0439
1d1f8     4A 77 02 F6 | 	mov	arg02, local05
1d1fc     19 74 06 F6 | 	mov	arg01, #25
1d200     80 78 B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1d204     1A 97 02 F6 | 	mov	local06, result1
1d208     07 96 4E F7 | 	zerox	local06, #7 wz
1d20c     30 00 90 5D |  if_ne	jmp	#LR__1036
1d210                 | ' 			do {
1d210                 | LR__1035
1d210     47 75 02 F6 | 	mov	arg01, local02
1d214     FC 76 06 F6 | 	mov	arg02, #252
1d218     9C 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0435
1d21c     00 34 0E F2 | 	cmp	result1, #0 wz
1d220     01 00 00 5F 
1d224     00 8E 06 51 |  if_ne	add	local02, ##512
1d228     F9 93 6E 5B |  if_ne	djnz	local04, #LR__1035
1d22c     00 74 06 F6 | 	mov	arg01, #0
1d230     FD 76 06 F6 | 	mov	arg02, #253
1d234     80 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0435
1d238     00 34 0E F2 | 	cmp	result1, #0 wz
1d23c     01 92 06 A6 |  if_e	mov	local04, #1
1d240                 | LR__1036
1d240                 | LR__1037
1d240     90 75 B0 FD | 	call	#_fatfs_cc_deselect_0425
1d244                 | ' 				count = 1;
1d244                 | ' 		}
1d244                 | ' 	}
1d244                 | ' 	deselect();
1d244                 | ' 
1d244                 | ' 	return count ? RES_ERROR : RES_OK;
1d244     00 92 0E F2 | 	cmp	local04, #0 wz
1d248     01 96 06 56 |  if_ne	mov	local06, #1
1d24c     00 96 06 A6 |  if_e	mov	local06, #0
1d250     4B 35 02 F6 | 	mov	result1, local06
1d254                 | LR__1038
1d254     A8 F0 03 F6 | 	mov	ptra, fp
1d258     B3 00 A0 FD | 	call	#popregs_
1d25c                 | _fatfs_cc_disk_write_ret
1d25c     2D 00 64 FD | 	ret
1d260                 | 
1d260                 | _fatfs_cc_disk_ioctl
1d260     04 4C 05 F6 | 	mov	COUNT_, #4
1d264     A9 00 A0 FD | 	call	#pushregs_
1d268     30 F0 07 F1 | 	add	ptra, #48
1d26c     04 50 05 F1 | 	add	fp, #4
1d270     A8 74 42 FC | 	wrbyte	arg01, fp
1d274     04 50 05 F1 | 	add	fp, #4
1d278     A8 76 42 FC | 	wrbyte	arg02, fp
1d27c     04 50 05 F1 | 	add	fp, #4
1d280     A8 78 62 FC | 	wrlong	arg03, fp
1d284     08 50 85 F1 | 	sub	fp, #8
1d288     A8 8C C2 FA | 	rdbyte	local01, fp
1d28c     04 50 85 F1 | 	sub	fp, #4
1d290     46 75 0A F6 | 	mov	arg01, local01 wz
1d294     01 34 06 56 |  if_ne	mov	result1, #1
1d298                 | ' 
1d298                 | ' 	return Stat;
1d298     18 92 05 A1 |  if_e	add	objptr, #24
1d29c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1d2a0     18 92 85 A1 |  if_e	sub	objptr, #24
1d2a4     1A 8F E2 F8 | 	getbyte	local02, result1, #0
1d2a8     01 8E CE F7 | 	test	local02, #1 wz
1d2ac     03 34 06 56 |  if_ne	mov	result1, #3
1d2b0     DC 01 90 5D |  if_ne	jmp	#LR__1047
1d2b4     10 50 05 F1 | 	add	fp, #16
1d2b8     A8 02 68 FC | 	wrlong	#1, fp
1d2bc                 | ' 
1d2bc                 | ' 	res = RES_ERROR;
1d2bc                 | ' 	switch (ctrl) {
1d2bc     08 50 85 F1 | 	sub	fp, #8
1d2c0     A8 8E C2 FA | 	rdbyte	local02, fp
1d2c4     08 50 85 F1 | 	sub	fp, #8
1d2c8     47 91 E2 F8 | 	getbyte	local03, local02, #0
1d2cc     04 90 26 F3 | 	fle	local03, #4
1d2d0     30 90 62 FD | 	jmprel	local03
1d2d4                 | LR__1039
1d2d4     10 00 90 FD | 	jmp	#LR__1040
1d2d8     24 00 90 FD | 	jmp	#LR__1041
1d2dc     90 01 90 FD | 	jmp	#LR__1045
1d2e0     70 01 90 FD | 	jmp	#LR__1044
1d2e4     88 01 90 FD | 	jmp	#LR__1045
1d2e8                 | LR__1040
1d2e8     64 75 B0 FD | 	call	#_fatfs_cc_select_0429
1d2ec     00 34 0E F2 | 	cmp	result1, #0 wz
1d2f0     10 50 05 51 |  if_ne	add	fp, #16
1d2f4     A8 00 68 5C |  if_ne	wrlong	#0, fp
1d2f8     10 50 85 51 |  if_ne	sub	fp, #16
1d2fc                 | ' 			break;
1d2fc     80 01 90 FD | 	jmp	#LR__1046
1d300                 | LR__1041
1d300     09 74 06 F6 | 	mov	arg01, #9
1d304     00 76 06 F6 | 	mov	arg02, #0
1d308     78 77 B0 FD | 	call	#_fatfs_cc_send_cmd_0439
1d30c     1A 91 02 F6 | 	mov	local03, result1
1d310     07 90 4E F7 | 	zerox	local03, #7 wz
1d314     68 01 90 5D |  if_ne	jmp	#LR__1046
1d318     18 50 05 F1 | 	add	fp, #24
1d31c     A8 74 02 F6 | 	mov	arg01, fp
1d320     18 50 85 F1 | 	sub	fp, #24
1d324     10 76 06 F6 | 	mov	arg02, #16
1d328     AC 75 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0433
1d32c     00 34 0E F2 | 	cmp	result1, #0 wz
1d330     4C 01 90 AD |  if_e	jmp	#LR__1046
1d334     18 50 05 F1 | 	add	fp, #24
1d338     A8 8C C2 FA | 	rdbyte	local01, fp
1d33c     18 50 85 F1 | 	sub	fp, #24
1d340     06 8C 46 F0 | 	shr	local01, #6
1d344     01 8C 0E F2 | 	cmp	local01, #1 wz
1d348     54 00 90 5D |  if_ne	jmp	#LR__1042
1d34c     21 50 05 F1 | 	add	fp, #33
1d350     A8 90 C2 FA | 	rdbyte	local03, fp
1d354     01 50 85 F1 | 	sub	fp, #1
1d358     A8 8E C2 FA | 	rdbyte	local02, fp
1d35c     47 8F 32 F9 | 	getword	local02, local02, #0
1d360     08 8E 66 F0 | 	shl	local02, #8
1d364     47 91 02 F1 | 	add	local03, local02
1d368     01 50 85 F1 | 	sub	fp, #1
1d36c     A8 8E C2 FA | 	rdbyte	local02, fp
1d370     3F 8E 06 F5 | 	and	local02, #63
1d374     10 8E 66 F0 | 	shl	local02, #16
1d378     47 91 02 F1 | 	add	local03, local02
1d37c     01 90 06 F1 | 	add	local03, #1
1d380     09 50 05 F1 | 	add	fp, #9
1d384     A8 90 62 FC | 	wrlong	local03, fp
1d388     1C 50 85 F1 | 	sub	fp, #28
1d38c     A8 8C 02 FB | 	rdlong	local01, fp
1d390     0C 50 85 F1 | 	sub	fp, #12
1d394     0A 90 66 F0 | 	shl	local03, #10
1d398     46 91 62 FC | 	wrlong	local03, local01
1d39c     A4 00 90 FD | 	jmp	#LR__1043
1d3a0                 | LR__1042
1d3a0     1D 50 05 F1 | 	add	fp, #29
1d3a4     A8 90 C2 FA | 	rdbyte	local03, fp
1d3a8     48 91 42 F8 | 	getnib	local03, local03, #0
1d3ac     05 50 05 F1 | 	add	fp, #5
1d3b0     A8 8E C2 FA | 	rdbyte	local02, fp
1d3b4     80 8E 06 F5 | 	and	local02, #128
1d3b8     07 8E C6 F0 | 	sar	local02, #7
1d3bc     47 91 02 F1 | 	add	local03, local02
1d3c0     01 50 85 F1 | 	sub	fp, #1
1d3c4     A8 8E C2 FA | 	rdbyte	local02, fp
1d3c8     03 8E 06 F5 | 	and	local02, #3
1d3cc     01 8E 66 F0 | 	shl	local02, #1
1d3d0     47 91 02 F1 | 	add	local03, local02
1d3d4     02 90 06 F1 | 	add	local03, #2
1d3d8     0D 50 85 F1 | 	sub	fp, #13
1d3dc     A8 90 42 FC | 	wrbyte	local03, fp
1d3e0     0C 50 05 F1 | 	add	fp, #12
1d3e4     A8 90 C2 FA | 	rdbyte	local03, fp
1d3e8     06 90 46 F0 | 	shr	local03, #6
1d3ec     01 50 85 F1 | 	sub	fp, #1
1d3f0     A8 8E C2 FA | 	rdbyte	local02, fp
1d3f4     47 8F 32 F9 | 	getword	local02, local02, #0
1d3f8     02 8E 66 F0 | 	shl	local02, #2
1d3fc     47 91 02 F1 | 	add	local03, local02
1d400     01 50 85 F1 | 	sub	fp, #1
1d404     A8 8E C2 FA | 	rdbyte	local02, fp
1d408     03 8E 06 F5 | 	and	local02, #3
1d40c     47 8F 32 F9 | 	getword	local02, local02, #0
1d410     0A 8E 66 F0 | 	shl	local02, #10
1d414     47 91 02 F1 | 	add	local03, local02
1d418     01 90 06 F1 | 	add	local03, #1
1d41c     0A 50 05 F1 | 	add	fp, #10
1d420     A8 90 62 FC | 	wrlong	local03, fp
1d424     1C 50 85 F1 | 	sub	fp, #28
1d428     A8 8C 02 FB | 	rdlong	local01, fp
1d42c     08 50 05 F1 | 	add	fp, #8
1d430     A8 8E C2 FA | 	rdbyte	local02, fp
1d434     14 50 85 F1 | 	sub	fp, #20
1d438     09 8E 86 F1 | 	sub	local02, #9
1d43c     47 91 62 F0 | 	shl	local03, local02
1d440     46 91 62 FC | 	wrlong	local03, local01
1d444                 | LR__1043
1d444     10 50 05 F1 | 	add	fp, #16
1d448     A8 00 68 FC | 	wrlong	#0, fp
1d44c     10 50 85 F1 | 	sub	fp, #16
1d450                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1d450                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1d450                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1d450                 | ' 				}
1d450                 | ' 				res = RES_OK;
1d450                 | ' 			}
1d450                 | ' 			break;
1d450     2C 00 90 FD | 	jmp	#LR__1046
1d454                 | LR__1044
1d454     0C 50 05 F1 | 	add	fp, #12
1d458     A8 90 02 FB | 	rdlong	local03, fp
1d45c     48 01 69 FC | 	wrlong	#128, local03
1d460     04 50 05 F1 | 	add	fp, #4
1d464     A8 00 68 FC | 	wrlong	#0, fp
1d468     10 50 85 F1 | 	sub	fp, #16
1d46c                 | ' 			*(DWORD*)buff = 128;
1d46c                 | ' 			res = RES_OK;
1d46c                 | ' 			break;
1d46c     10 00 90 FD | 	jmp	#LR__1046
1d470                 | LR__1045
1d470     04 92 06 F6 | 	mov	local04, #4
1d474     10 50 05 F1 | 	add	fp, #16
1d478     A8 08 68 FC | 	wrlong	#4, fp
1d47c     10 50 85 F1 | 	sub	fp, #16
1d480                 | LR__1046
1d480     50 73 B0 FD | 	call	#_fatfs_cc_deselect_0425
1d484                 | ' 			res = RES_PARERR;
1d484                 | ' 	}
1d484                 | ' 
1d484                 | ' 	deselect();
1d484                 | ' 
1d484                 | ' 	return res;
1d484     10 50 05 F1 | 	add	fp, #16
1d488     A8 34 02 FB | 	rdlong	result1, fp
1d48c     10 50 85 F1 | 	sub	fp, #16
1d490                 | LR__1047
1d490     A8 F0 03 F6 | 	mov	ptra, fp
1d494     B3 00 A0 FD | 	call	#popregs_
1d498                 | _fatfs_cc_disk_ioctl_ret
1d498     2D 00 64 FD | 	ret
1d49c                 | 
1d49c                 | _fatfs_cc_disk_setpins
1d49c     00 74 0E F2 | 	cmp	arg01, #0 wz
1d4a0     01 34 66 56 |  if_ne	neg	result1, #1
1d4a4     28 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1d4a8     08 92 05 F1 | 	add	objptr, #8
1d4ac     C9 76 62 FC | 	wrlong	arg02, objptr
1d4b0     04 92 05 F1 | 	add	objptr, #4
1d4b4     C9 78 62 FC | 	wrlong	arg03, objptr
1d4b8     04 92 05 F1 | 	add	objptr, #4
1d4bc     C9 7A 62 FC | 	wrlong	arg04, objptr
1d4c0     04 92 05 F1 | 	add	objptr, #4
1d4c4     C9 7C 62 FC | 	wrlong	arg05, objptr
1d4c8     14 92 85 F1 | 	sub	objptr, #20
1d4cc     00 34 06 F6 | 	mov	result1, #0
1d4d0                 | _fatfs_cc_disk_setpins_ret
1d4d0     2D 00 64 FD | 	ret
1d4d4                 | 
1d4d4                 | _fatfs_cc_sync_window
1d4d4     03 4C 05 F6 | 	mov	COUNT_, #3
1d4d8     A9 00 A0 FD | 	call	#pushregs_
1d4dc     3A 8D 02 F6 | 	mov	local01, arg01
1d4e0     00 8E 06 F6 | 	mov	local02, #0
1d4e4     03 8C 06 F1 | 	add	local01, #3
1d4e8     46 91 CA FA | 	rdbyte	local03, local01 wz
1d4ec     03 8C 86 F1 | 	sub	local01, #3
1d4f0     A4 00 90 AD |  if_e	jmp	#LR__1050
1d4f4     01 8C 06 F1 | 	add	local01, #1
1d4f8     46 75 C2 FA | 	rdbyte	arg01, local01
1d4fc     2F 8C 06 F1 | 	add	local01, #47
1d500     46 77 02 F6 | 	mov	arg02, local01
1d504     04 8C 86 F1 | 	sub	local01, #4
1d508     46 79 02 FB | 	rdlong	arg03, local01
1d50c     2C 8C 86 F1 | 	sub	local01, #44
1d510     01 7A 06 F6 | 	mov	arg04, #1
1d514     3C FC BF FD | 	call	#_fatfs_cc_disk_write
1d518     00 34 0E F2 | 	cmp	result1, #0 wz
1d51c     74 00 90 5D |  if_ne	jmp	#LR__1048
1d520     03 8C 06 F1 | 	add	local01, #3
1d524     46 01 48 FC | 	wrbyte	#0, local01
1d528     29 8C 06 F1 | 	add	local01, #41
1d52c     46 91 02 FB | 	rdlong	local03, local01
1d530     0C 8C 86 F1 | 	sub	local01, #12
1d534     46 35 02 FB | 	rdlong	result1, local01
1d538     1A 91 82 F1 | 	sub	local03, result1
1d53c     08 8C 86 F1 | 	sub	local01, #8
1d540     46 7B 02 FB | 	rdlong	arg04, local01
1d544     18 8C 86 F1 | 	sub	local01, #24
1d548     3D 91 12 F2 | 	cmp	local03, arg04 wc
1d54c     48 00 90 3D |  if_ae	jmp	#LR__1049
1d550     02 8C 06 F1 | 	add	local01, #2
1d554     46 91 C2 FA | 	rdbyte	local03, local01
1d558     02 8C 86 F1 | 	sub	local01, #2
1d55c     02 90 0E F2 | 	cmp	local03, #2 wz
1d560     34 00 90 5D |  if_ne	jmp	#LR__1049
1d564     01 8C 06 F1 | 	add	local01, #1
1d568     46 75 C2 FA | 	rdbyte	arg01, local01
1d56c     2F 8C 06 F1 | 	add	local01, #47
1d570     46 77 02 F6 | 	mov	arg02, local01
1d574     04 8C 86 F1 | 	sub	local01, #4
1d578     46 79 02 FB | 	rdlong	arg03, local01
1d57c     14 8C 86 F1 | 	sub	local01, #20
1d580     46 91 02 FB | 	rdlong	local03, local01
1d584     48 79 02 F1 | 	add	arg03, local03
1d588     01 7A 06 F6 | 	mov	arg04, #1
1d58c     C4 FB BF FD | 	call	#_fatfs_cc_disk_write
1d590     04 00 90 FD | 	jmp	#LR__1049
1d594                 | LR__1048
1d594     01 8E 06 F6 | 	mov	local02, #1
1d598                 | LR__1049
1d598                 | LR__1050
1d598                 | ' 			res = FR_DISK_ERR;
1d598                 | ' 		}
1d598                 | ' 	}
1d598                 | ' 	return res;
1d598     47 35 02 F6 | 	mov	result1, local02
1d59c     A8 F0 03 F6 | 	mov	ptra, fp
1d5a0     B3 00 A0 FD | 	call	#popregs_
1d5a4                 | _fatfs_cc_sync_window_ret
1d5a4     2D 00 64 FD | 	ret
1d5a8                 | 
1d5a8                 | _fatfs_cc_move_window
1d5a8     03 4C 05 F6 | 	mov	COUNT_, #3
1d5ac     A9 00 A0 FD | 	call	#pushregs_
1d5b0     3A 8D 02 F6 | 	mov	local01, arg01
1d5b4     3B 8F 02 F6 | 	mov	local02, arg02
1d5b8     00 90 06 F6 | 	mov	local03, #0
1d5bc     2C 8C 06 F1 | 	add	local01, #44
1d5c0     46 75 02 FB | 	rdlong	arg01, local01
1d5c4     2C 8C 86 F1 | 	sub	local01, #44
1d5c8     3A 8F 0A F2 | 	cmp	local02, arg01 wz
1d5cc     40 00 90 AD |  if_e	jmp	#LR__1052
1d5d0     46 75 02 F6 | 	mov	arg01, local01
1d5d4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1d5d8     1A 91 0A F6 | 	mov	local03, result1 wz
1d5dc     30 00 90 5D |  if_ne	jmp	#LR__1051
1d5e0     01 8C 06 F1 | 	add	local01, #1
1d5e4     46 75 C2 FA | 	rdbyte	arg01, local01
1d5e8     2F 8C 06 F1 | 	add	local01, #47
1d5ec     46 77 02 F6 | 	mov	arg02, local01
1d5f0     47 79 02 F6 | 	mov	arg03, local02
1d5f4     01 7A 06 F6 | 	mov	arg04, #1
1d5f8     9C FA BF FD | 	call	#_fatfs_cc_disk_read
1d5fc     00 34 0E F2 | 	cmp	result1, #0 wz
1d600     01 8E 66 56 |  if_ne	neg	local02, #1
1d604     01 90 06 56 |  if_ne	mov	local03, #1
1d608     04 8C 86 F1 | 	sub	local01, #4
1d60c     46 8F 62 FC | 	wrlong	local02, local01
1d610                 | LR__1051
1d610                 | LR__1052
1d610                 | ' 				sect = (LBA_t)0 - 1;
1d610                 | ' 				res = FR_DISK_ERR;
1d610                 | ' 			}
1d610                 | ' 			fs->winsect = sect;
1d610                 | ' 		}
1d610                 | ' 	}
1d610                 | ' 	return res;
1d610     48 35 02 F6 | 	mov	result1, local03
1d614     A8 F0 03 F6 | 	mov	ptra, fp
1d618     B3 00 A0 FD | 	call	#popregs_
1d61c                 | _fatfs_cc_move_window_ret
1d61c     2D 00 64 FD | 	ret
1d620                 | 
1d620                 | _fatfs_cc_sync_fs
1d620     07 4C 05 F6 | 	mov	COUNT_, #7
1d624     A9 00 A0 FD | 	call	#pushregs_
1d628     3A 8D 02 F6 | 	mov	local01, arg01
1d62c     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1d630     1A 8F 0A F6 | 	mov	local02, result1 wz
1d634     F0 00 90 5D |  if_ne	jmp	#LR__1054
1d638     46 79 C2 FA | 	rdbyte	arg03, local01
1d63c     03 78 0E F2 | 	cmp	arg03, #3 wz
1d640     C8 00 90 5D |  if_ne	jmp	#LR__1053
1d644     04 8C 06 F1 | 	add	local01, #4
1d648     46 79 C2 FA | 	rdbyte	arg03, local01
1d64c     04 8C 86 F1 | 	sub	local01, #4
1d650     01 78 0E F2 | 	cmp	arg03, #1 wz
1d654     B4 00 90 5D |  if_ne	jmp	#LR__1053
1d658     30 8C 06 F1 | 	add	local01, #48
1d65c     46 75 02 F6 | 	mov	arg01, local01
1d660     00 76 06 F6 | 	mov	arg02, #0
1d664     09 78 C6 F9 | 	decod	arg03, #9
1d668     3A 91 02 F6 | 	mov	local03, arg01
1d66c     99 00 A0 FD | 	call	#\builtin_bytefill_
1d670     46 75 02 F6 | 	mov	arg01, local01
1d674     FE 75 06 F1 | 	add	arg01, #510
1d678     55 00 80 FF 
1d67c     3A AB 58 FC | 	wrword	##43605, arg01
1d680     A9 B0 A0 FF 
1d684     46 A5 68 FC | 	wrlong	##1096897106, local01
1d688     46 75 02 F6 | 	mov	arg01, local01
1d68c     E4 75 06 F1 | 	add	arg01, #484
1d690     B9 A0 B0 FF 
1d694     3A E5 68 FC | 	wrlong	##1631679090, arg01
1d698     46 75 02 F6 | 	mov	arg01, local01
1d69c     E8 75 06 F1 | 	add	arg01, #488
1d6a0     20 8C 86 F1 | 	sub	local01, #32
1d6a4     46 77 02 FB | 	rdlong	arg02, local01
1d6a8     3A 77 62 FC | 	wrlong	arg02, arg01
1d6ac     20 8C 06 F1 | 	add	local01, #32
1d6b0     46 75 02 F6 | 	mov	arg01, local01
1d6b4     EC 75 06 F1 | 	add	arg01, #492
1d6b8     24 8C 86 F1 | 	sub	local01, #36
1d6bc     46 77 02 FB | 	rdlong	arg02, local01
1d6c0     3A 77 62 FC | 	wrlong	arg02, arg01
1d6c4     10 8C 06 F1 | 	add	local01, #16
1d6c8     46 93 02 FB | 	rdlong	local04, local01
1d6cc     01 92 06 F1 | 	add	local04, #1
1d6d0     10 8C 06 F1 | 	add	local01, #16
1d6d4     46 93 62 FC | 	wrlong	local04, local01
1d6d8     2B 8C 86 F1 | 	sub	local01, #43
1d6dc     46 75 C2 FA | 	rdbyte	arg01, local01
1d6e0     2F 8C 06 F1 | 	add	local01, #47
1d6e4     46 95 02 F6 | 	mov	local05, local01
1d6e8     01 96 06 F6 | 	mov	local06, #1
1d6ec     4A 77 02 F6 | 	mov	arg02, local05
1d6f0     49 79 02 F6 | 	mov	arg03, local04
1d6f4     01 7A 06 F6 | 	mov	arg04, #1
1d6f8     58 FA BF FD | 	call	#_fatfs_cc_disk_write
1d6fc     00 98 06 F6 | 	mov	local07, #0
1d700     2C 8C 86 F1 | 	sub	local01, #44
1d704     46 01 48 FC | 	wrbyte	#0, local01
1d708     04 8C 86 F1 | 	sub	local01, #4
1d70c                 | LR__1053
1d70c     01 8C 06 F1 | 	add	local01, #1
1d710     46 75 C2 FA | 	rdbyte	arg01, local01
1d714     00 76 06 F6 | 	mov	arg02, #0
1d718     00 78 06 F6 | 	mov	arg03, #0
1d71c     40 FB BF FD | 	call	#_fatfs_cc_disk_ioctl
1d720     00 34 0E F2 | 	cmp	result1, #0 wz
1d724     01 8E 06 56 |  if_ne	mov	local02, #1
1d728                 | LR__1054
1d728                 | ' 	}
1d728                 | ' 
1d728                 | ' 	return res;
1d728     47 35 02 F6 | 	mov	result1, local02
1d72c     A8 F0 03 F6 | 	mov	ptra, fp
1d730     B3 00 A0 FD | 	call	#popregs_
1d734                 | _fatfs_cc_sync_fs_ret
1d734     2D 00 64 FD | 	ret
1d738                 | 
1d738                 | _fatfs_cc_clst2sect
1d738     02 76 86 F1 | 	sub	arg02, #2
1d73c     14 74 06 F1 | 	add	arg01, #20
1d740     3A 3B 02 FB | 	rdlong	_var01, arg01
1d744     14 74 86 F1 | 	sub	arg01, #20
1d748     02 3A 86 F1 | 	sub	_var01, #2
1d74c     1D 77 12 F2 | 	cmp	arg02, _var01 wc
1d750     00 34 06 36 |  if_ae	mov	result1, #0
1d754     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1d758     0A 74 06 F1 | 	add	arg01, #10
1d75c     3A 3B E2 FA | 	rdword	_var01, arg01
1d760     3B 3B 02 FD | 	qmul	_var01, arg02
1d764                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1d764     1E 74 06 F1 | 	add	arg01, #30
1d768     3A 35 02 FB | 	rdlong	result1, arg01
1d76c     18 3A 62 FD | 	getqx	_var01
1d770     1D 35 02 F1 | 	add	result1, _var01
1d774                 | _fatfs_cc_clst2sect_ret
1d774     2D 00 64 FD | 	ret
1d778                 | 
1d778                 | _fatfs_cc_get_fat
1d778     09 4C 05 F6 | 	mov	COUNT_, #9
1d77c     A9 00 A0 FD | 	call	#pushregs_
1d780     3A 8D 02 F6 | 	mov	local01, arg01
1d784     3B 8F 02 F6 | 	mov	local02, arg02
1d788     46 91 02 FB | 	rdlong	local03, local01
1d78c     02 8E 16 F2 | 	cmp	local02, #2 wc
1d790     18 00 90 CD |  if_b	jmp	#LR__1055
1d794     14 90 06 F1 | 	add	local03, #20
1d798     48 93 02 FB | 	rdlong	local04, local03
1d79c     14 90 86 F1 | 	sub	local03, #20
1d7a0     49 95 02 F6 | 	mov	local05, local04
1d7a4     4A 8F 12 F2 | 	cmp	local02, local05 wc
1d7a8     08 00 90 CD |  if_b	jmp	#LR__1056
1d7ac                 | LR__1055
1d7ac     01 96 06 F6 | 	mov	local06, #1
1d7b0     64 01 90 FD | 	jmp	#LR__1063
1d7b4                 | LR__1056
1d7b4     01 96 66 F6 | 	neg	local06, #1
1d7b8                 | ' 		val = 0xFFFFFFFF;
1d7b8                 | ' 
1d7b8                 | ' 		switch (fs->fs_type) {
1d7b8     48 99 C2 FA | 	rdbyte	local07, local03
1d7bc     01 98 86 F1 | 	sub	local07, #1
1d7c0     03 98 26 F3 | 	fle	local07, #3
1d7c4     30 98 62 FD | 	jmprel	local07
1d7c8                 | LR__1057
1d7c8     0C 00 90 FD | 	jmp	#LR__1058
1d7cc     B8 00 90 FD | 	jmp	#LR__1059
1d7d0     F8 00 90 FD | 	jmp	#LR__1060
1d7d4     3C 01 90 FD | 	jmp	#LR__1061
1d7d8                 | LR__1058
1d7d8     47 99 02 F6 | 	mov	local07, local02
1d7dc     47 93 02 F6 | 	mov	local04, local02
1d7e0     01 92 46 F0 | 	shr	local04, #1
1d7e4     49 99 02 F1 | 	add	local07, local04
1d7e8     48 75 02 F6 | 	mov	arg01, local03
1d7ec     4C 93 02 F6 | 	mov	local04, local07
1d7f0     09 92 46 F0 | 	shr	local04, #9
1d7f4     20 90 06 F1 | 	add	local03, #32
1d7f8     48 77 02 FB | 	rdlong	arg02, local03
1d7fc     20 90 86 F1 | 	sub	local03, #32
1d800     49 77 02 F1 | 	add	arg02, local04
1d804     A0 FD BF FD | 	call	#_fatfs_cc_move_window
1d808     00 34 0E F2 | 	cmp	result1, #0 wz
1d80c     08 01 90 5D |  if_ne	jmp	#LR__1062
1d810     4C 93 02 F6 | 	mov	local04, local07
1d814     FF 93 06 F5 | 	and	local04, #511
1d818     30 90 06 F1 | 	add	local03, #48
1d81c     48 93 02 F1 | 	add	local04, local03
1d820     49 9B C2 FA | 	rdbyte	local08, local04
1d824     30 90 86 F1 | 	sub	local03, #48
1d828     48 75 02 F6 | 	mov	arg01, local03
1d82c     01 98 06 F1 | 	add	local07, #1
1d830     4C 93 02 F6 | 	mov	local04, local07
1d834     09 92 46 F0 | 	shr	local04, #9
1d838     20 90 06 F1 | 	add	local03, #32
1d83c     48 77 02 FB | 	rdlong	arg02, local03
1d840     20 90 86 F1 | 	sub	local03, #32
1d844     49 77 02 F1 | 	add	arg02, local04
1d848     5C FD BF FD | 	call	#_fatfs_cc_move_window
1d84c     00 34 0E F2 | 	cmp	result1, #0 wz
1d850     C4 00 90 5D |  if_ne	jmp	#LR__1062
1d854     FF 99 06 F5 | 	and	local07, #511
1d858     30 90 06 F1 | 	add	local03, #48
1d85c     48 99 02 F1 | 	add	local07, local03
1d860     4C 93 C2 FA | 	rdbyte	local04, local07
1d864     08 92 66 F0 | 	shl	local04, #8
1d868     49 9B 42 F5 | 	or	local08, local04
1d86c     01 8E CE F7 | 	test	local02, #1 wz
1d870     04 9A 46 50 |  if_ne	shr	local08, #4
1d874     4D 95 02 56 |  if_ne	mov	local05, local08
1d878     0B 9A 46 A7 |  if_e	zerox	local08, #11
1d87c     4D 95 02 A6 |  if_e	mov	local05, local08
1d880     4A 97 02 F6 | 	mov	local06, local05
1d884                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1d884                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1d884                 | ' 			break;
1d884     90 00 90 FD | 	jmp	#LR__1062
1d888                 | LR__1059
1d888     48 75 02 F6 | 	mov	arg01, local03
1d88c     47 9B 02 F6 | 	mov	local08, local02
1d890     08 9A 46 F0 | 	shr	local08, #8
1d894     20 90 06 F1 | 	add	local03, #32
1d898     48 77 02 FB | 	rdlong	arg02, local03
1d89c     20 90 86 F1 | 	sub	local03, #32
1d8a0     4D 77 02 F1 | 	add	arg02, local08
1d8a4     00 FD BF FD | 	call	#_fatfs_cc_move_window
1d8a8     00 34 0E F2 | 	cmp	result1, #0 wz
1d8ac     68 00 90 5D |  if_ne	jmp	#LR__1062
1d8b0     30 90 06 F1 | 	add	local03, #48
1d8b4     01 8E 66 F0 | 	shl	local02, #1
1d8b8     FF 8F 06 F5 | 	and	local02, #511
1d8bc     47 91 02 F1 | 	add	local03, local02
1d8c0                 | ' {
1d8c0                 | ' 
1d8c0                 | ' 	return *((WORD*)ptr);
1d8c0     48 35 E2 FA | 	rdword	result1, local03
1d8c4     1A 97 32 F9 | 	getword	local06, result1, #0
1d8c8                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1d8c8                 | ' 			break;
1d8c8     4C 00 90 FD | 	jmp	#LR__1062
1d8cc                 | LR__1060
1d8cc     48 75 02 F6 | 	mov	arg01, local03
1d8d0     47 9D 02 F6 | 	mov	local09, local02
1d8d4     07 9C 46 F0 | 	shr	local09, #7
1d8d8     20 90 06 F1 | 	add	local03, #32
1d8dc     48 77 02 FB | 	rdlong	arg02, local03
1d8e0     20 90 86 F1 | 	sub	local03, #32
1d8e4     4E 77 02 F1 | 	add	arg02, local09
1d8e8     BC FC BF FD | 	call	#_fatfs_cc_move_window
1d8ec     00 34 0E F2 | 	cmp	result1, #0 wz
1d8f0     24 00 90 5D |  if_ne	jmp	#LR__1062
1d8f4     30 90 06 F1 | 	add	local03, #48
1d8f8     48 75 02 F6 | 	mov	arg01, local03
1d8fc     02 8E 66 F0 | 	shl	local02, #2
1d900     FF 8F 06 F5 | 	and	local02, #511
1d904     47 75 02 F1 | 	add	arg01, local02
1d908                 | ' {
1d908                 | ' 
1d908                 | ' 	return *((DWORD*)ptr);
1d908     3A 97 02 FB | 	rdlong	local06, arg01
1d90c     7C 96 06 F4 | 	bitl	local06, #124
1d910                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1d910                 | ' 			break;
1d910     04 00 90 FD | 	jmp	#LR__1062
1d914                 | LR__1061
1d914     01 96 06 F6 | 	mov	local06, #1
1d918                 | LR__1062
1d918                 | LR__1063
1d918                 | ' 			val = 1;
1d918                 | ' 		}
1d918                 | ' 	}
1d918                 | ' 
1d918                 | ' 	return val;
1d918     4B 35 02 F6 | 	mov	result1, local06
1d91c     A8 F0 03 F6 | 	mov	ptra, fp
1d920     B3 00 A0 FD | 	call	#popregs_
1d924                 | _fatfs_cc_get_fat_ret
1d924     2D 00 64 FD | 	ret
1d928                 | 
1d928                 | _fatfs_cc_put_fat
1d928     0F 4C 05 F6 | 	mov	COUNT_, #15
1d92c     A9 00 A0 FD | 	call	#pushregs_
1d930     3A 8D 02 F6 | 	mov	local01, arg01
1d934     3B 8F 02 F6 | 	mov	local02, arg02
1d938     3C 91 02 F6 | 	mov	local03, arg03
1d93c     02 92 06 F6 | 	mov	local04, #2
1d940     02 8E 16 F2 | 	cmp	local02, #2 wc
1d944     8C 02 90 CD |  if_b	jmp	#LR__1072
1d948     14 8C 06 F1 | 	add	local01, #20
1d94c     46 95 02 FB | 	rdlong	local05, local01
1d950     14 8C 86 F1 | 	sub	local01, #20
1d954     4A 97 02 F6 | 	mov	local06, local05
1d958     4B 8F 12 F2 | 	cmp	local02, local06 wc
1d95c     74 02 90 3D |  if_ae	jmp	#LR__1072
1d960                 | ' 		switch (fs->fs_type) {
1d960     46 99 C2 FA | 	rdbyte	local07, local01
1d964     01 98 86 F1 | 	sub	local07, #1
1d968     03 98 26 F3 | 	fle	local07, #3
1d96c     30 98 62 FD | 	jmprel	local07
1d970                 | LR__1064
1d970     0C 00 90 FD | 	jmp	#LR__1065
1d974     3C 01 90 FD | 	jmp	#LR__1069
1d978     B4 01 90 FD | 	jmp	#LR__1070
1d97c     54 02 90 FD | 	jmp	#LR__1071
1d980                 | LR__1065
1d980     47 9B 02 F6 | 	mov	local08, local02
1d984     47 95 02 F6 | 	mov	local05, local02
1d988     01 94 46 F0 | 	shr	local05, #1
1d98c     4A 9B 02 F1 | 	add	local08, local05
1d990     46 75 02 F6 | 	mov	arg01, local01
1d994     4D 9D 02 F6 | 	mov	local09, local08
1d998     09 9C 46 F0 | 	shr	local09, #9
1d99c     20 8C 06 F1 | 	add	local01, #32
1d9a0     46 9F 02 FB | 	rdlong	local10, local01
1d9a4     20 8C 86 F1 | 	sub	local01, #32
1d9a8     4F A1 02 F6 | 	mov	local11, local10
1d9ac     4E A1 02 F1 | 	add	local11, local09
1d9b0     50 95 02 F6 | 	mov	local05, local11
1d9b4     4A 77 02 F6 | 	mov	arg02, local05
1d9b8     EC FB BF FD | 	call	#_fatfs_cc_move_window
1d9bc     1A 97 02 F6 | 	mov	local06, result1
1d9c0     4B 93 0A F6 | 	mov	local04, local06 wz
1d9c4     0C 02 90 5D |  if_ne	jmp	#LR__1071
1d9c8     30 8C 06 F1 | 	add	local01, #48
1d9cc     46 A3 02 F6 | 	mov	local12, local01
1d9d0     4D A5 02 F6 | 	mov	local13, local08
1d9d4     FF A5 06 F5 | 	and	local13, #511
1d9d8     52 A3 02 F1 | 	add	local12, local13
1d9dc     01 8E CE F7 | 	test	local02, #1 wz
1d9e0     30 8C 86 F1 | 	sub	local01, #48
1d9e4     01 9A 06 F1 | 	add	local08, #1
1d9e8     18 00 90 AD |  if_e	jmp	#LR__1066
1d9ec     51 97 C2 FA | 	rdbyte	local06, local12
1d9f0     4B 97 42 F8 | 	getnib	local06, local06, #0
1d9f4     48 9D E2 F8 | 	getbyte	local09, local03, #0
1d9f8     04 9C 66 F0 | 	shl	local09, #4
1d9fc     4E 97 42 F5 | 	or	local06, local09
1da00     04 00 90 FD | 	jmp	#LR__1067
1da04                 | LR__1066
1da04     48 97 02 F6 | 	mov	local06, local03
1da08                 | LR__1067
1da08     51 97 42 FC | 	wrbyte	local06, local12
1da0c     03 8C 06 F1 | 	add	local01, #3
1da10     46 03 48 FC | 	wrbyte	#1, local01
1da14     03 8C 86 F1 | 	sub	local01, #3
1da18     46 75 02 F6 | 	mov	arg01, local01
1da1c     4D 9D 02 F6 | 	mov	local09, local08
1da20     09 9C 46 F0 | 	shr	local09, #9
1da24     20 8C 06 F1 | 	add	local01, #32
1da28     46 9F 02 FB | 	rdlong	local10, local01
1da2c     20 8C 86 F1 | 	sub	local01, #32
1da30     4F A1 02 F6 | 	mov	local11, local10
1da34     4E A1 02 F1 | 	add	local11, local09
1da38     50 95 02 F6 | 	mov	local05, local11
1da3c     4A 77 02 F6 | 	mov	arg02, local05
1da40     64 FB BF FD | 	call	#_fatfs_cc_move_window
1da44     1A 97 02 F6 | 	mov	local06, result1
1da48     4B 93 0A F6 | 	mov	local04, local06 wz
1da4c     84 01 90 5D |  if_ne	jmp	#LR__1071
1da50     30 8C 06 F1 | 	add	local01, #48
1da54     46 A3 02 F6 | 	mov	local12, local01
1da58     4D A1 02 F6 | 	mov	local11, local08
1da5c     FF A1 06 F5 | 	and	local11, #511
1da60     50 9D 02 F6 | 	mov	local09, local11
1da64     50 A3 02 F1 | 	add	local12, local11
1da68     47 95 02 F6 | 	mov	local05, local02
1da6c     01 94 0E F5 | 	and	local05, #1 wz
1da70     30 8C 86 F1 | 	sub	local01, #48
1da74     48 A1 02 56 |  if_ne	mov	local11, local03
1da78     04 A0 46 50 |  if_ne	shr	local11, #4
1da7c     50 97 02 56 |  if_ne	mov	local06, local11
1da80     18 00 90 5D |  if_ne	jmp	#LR__1068
1da84     51 9D C2 FA | 	rdbyte	local09, local12
1da88     F0 9C 06 F5 | 	and	local09, #240
1da8c     48 9F EA F8 | 	getbyte	local10, local03, #1
1da90     4F 9F 42 F8 | 	getnib	local10, local10, #0
1da94     4F 9D 42 F5 | 	or	local09, local10
1da98     4E 97 02 F6 | 	mov	local06, local09
1da9c                 | LR__1068
1da9c     51 97 42 FC | 	wrbyte	local06, local12
1daa0     01 96 06 F6 | 	mov	local06, #1
1daa4     03 8C 06 F1 | 	add	local01, #3
1daa8     46 03 48 FC | 	wrbyte	#1, local01
1daac     03 8C 86 F1 | 	sub	local01, #3
1dab0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1dab0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1dab0                 | ' 			fs->wflag = 1;
1dab0                 | ' 			break;
1dab0     20 01 90 FD | 	jmp	#LR__1071
1dab4                 | LR__1069
1dab4     46 75 02 F6 | 	mov	arg01, local01
1dab8     47 9D 02 F6 | 	mov	local09, local02
1dabc     08 9C 46 F0 | 	shr	local09, #8
1dac0     20 8C 06 F1 | 	add	local01, #32
1dac4     46 9F 02 FB | 	rdlong	local10, local01
1dac8     20 8C 86 F1 | 	sub	local01, #32
1dacc     4F A1 02 F6 | 	mov	local11, local10
1dad0     4E A1 02 F1 | 	add	local11, local09
1dad4     50 95 02 F6 | 	mov	local05, local11
1dad8     4A 77 02 F6 | 	mov	arg02, local05
1dadc     C8 FA BF FD | 	call	#_fatfs_cc_move_window
1dae0     1A 97 02 F6 | 	mov	local06, result1
1dae4     4B 93 0A F6 | 	mov	local04, local06 wz
1dae8     E8 00 90 5D |  if_ne	jmp	#LR__1071
1daec     30 8C 06 F1 | 	add	local01, #48
1daf0     46 A1 02 F6 | 	mov	local11, local01
1daf4     47 9D 02 F6 | 	mov	local09, local02
1daf8     01 9C 66 F0 | 	shl	local09, #1
1dafc     4E 9F 02 F6 | 	mov	local10, local09
1db00     FF 9F 06 F5 | 	and	local10, #511
1db04     4F A5 02 F6 | 	mov	local13, local10
1db08     50 75 02 F6 | 	mov	arg01, local11
1db0c     52 75 02 F1 | 	add	arg01, local13
1db10     48 95 02 F6 | 	mov	local05, local03
1db14     4A 77 02 F6 | 	mov	arg02, local05
1db18     3A 77 52 FC | 	wrword	arg02, arg01
1db1c     01 96 06 F6 | 	mov	local06, #1
1db20     2D 8C 86 F1 | 	sub	local01, #45
1db24     46 03 48 FC | 	wrbyte	#1, local01
1db28     03 8C 86 F1 | 	sub	local01, #3
1db2c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1db2c                 | ' 			fs->wflag = 1;
1db2c                 | ' 			break;
1db2c     A4 00 90 FD | 	jmp	#LR__1071
1db30                 | LR__1070
1db30     46 75 02 F6 | 	mov	arg01, local01
1db34     47 9D 02 F6 | 	mov	local09, local02
1db38     07 9C 46 F0 | 	shr	local09, #7
1db3c     20 8C 06 F1 | 	add	local01, #32
1db40     46 9F 02 FB | 	rdlong	local10, local01
1db44     20 8C 86 F1 | 	sub	local01, #32
1db48     4F A1 02 F6 | 	mov	local11, local10
1db4c     4E A1 02 F1 | 	add	local11, local09
1db50     50 95 02 F6 | 	mov	local05, local11
1db54     4A 77 02 F6 | 	mov	arg02, local05
1db58     4C FA BF FD | 	call	#_fatfs_cc_move_window
1db5c     1A 97 02 F6 | 	mov	local06, result1
1db60     4B 93 0A F6 | 	mov	local04, local06 wz
1db64     6C 00 90 5D |  if_ne	jmp	#LR__1071
1db68     7C 90 06 F4 | 	bitl	local03, #124
1db6c     30 8C 06 F1 | 	add	local01, #48
1db70     46 75 02 F6 | 	mov	arg01, local01
1db74     47 A7 02 F6 | 	mov	local14, local02
1db78     02 A6 66 F0 | 	shl	local14, #2
1db7c     FF A7 06 F5 | 	and	local14, #511
1db80     53 A9 02 F6 | 	mov	local15, local14
1db84     53 75 02 F1 | 	add	arg01, local14
1db88                 | ' {
1db88                 | ' 
1db88                 | ' 	return *((DWORD*)ptr);
1db88     3A 35 02 FB | 	rdlong	result1, arg01
1db8c     00 00 78 FF 
1db90     00 34 06 F5 | 	and	result1, ##-268435456
1db94     1A 91 42 F5 | 	or	local03, result1
1db98     46 A1 02 F6 | 	mov	local11, local01
1db9c     47 9D 02 F6 | 	mov	local09, local02
1dba0     02 9C 66 F0 | 	shl	local09, #2
1dba4     4E 9F 02 F6 | 	mov	local10, local09
1dba8     FF 9F 06 F5 | 	and	local10, #511
1dbac     4F A5 02 F6 | 	mov	local13, local10
1dbb0     50 75 02 F6 | 	mov	arg01, local11
1dbb4     52 75 02 F1 | 	add	arg01, local13
1dbb8     48 95 02 F6 | 	mov	local05, local03
1dbbc     4A 77 02 F6 | 	mov	arg02, local05
1dbc0     3A 77 62 FC | 	wrlong	arg02, arg01
1dbc4     01 96 06 F6 | 	mov	local06, #1
1dbc8     2D 8C 86 F1 | 	sub	local01, #45
1dbcc     46 03 48 FC | 	wrbyte	#1, local01
1dbd0     03 8C 86 F1 | 	sub	local01, #3
1dbd4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1dbd4                 | ' 			}
1dbd4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1dbd4                 | ' 			fs->wflag = 1;
1dbd4                 | ' 			break;
1dbd4                 | LR__1071
1dbd4                 | LR__1072
1dbd4                 | ' 		}
1dbd4                 | ' 	}
1dbd4                 | ' 	return res;
1dbd4     49 35 02 F6 | 	mov	result1, local04
1dbd8     A8 F0 03 F6 | 	mov	ptra, fp
1dbdc     B3 00 A0 FD | 	call	#popregs_
1dbe0                 | _fatfs_cc_put_fat_ret
1dbe0     2D 00 64 FD | 	ret
1dbe4                 | 
1dbe4                 | _fatfs_cc_remove_chain
1dbe4     06 4C 05 F6 | 	mov	COUNT_, #6
1dbe8     A9 00 A0 FD | 	call	#pushregs_
1dbec     3A 8D 02 F6 | 	mov	local01, arg01
1dbf0     3B 8F 02 F6 | 	mov	local02, arg02
1dbf4     3C 91 02 F6 | 	mov	local03, arg03
1dbf8     46 93 02 FB | 	rdlong	local04, local01
1dbfc     02 8E 16 F2 | 	cmp	local02, #2 wc
1dc00     14 00 90 CD |  if_b	jmp	#LR__1073
1dc04     14 92 06 F1 | 	add	local04, #20
1dc08     49 35 02 FB | 	rdlong	result1, local04
1dc0c     14 92 86 F1 | 	sub	local04, #20
1dc10     1A 8F 12 F2 | 	cmp	local02, result1 wc
1dc14     08 00 90 CD |  if_b	jmp	#LR__1074
1dc18                 | LR__1073
1dc18     02 34 06 F6 | 	mov	result1, #2
1dc1c     D0 00 90 FD | 	jmp	#LR__1079
1dc20                 | LR__1074
1dc20     00 90 0E F2 | 	cmp	local03, #0 wz
1dc24     1C 00 90 AD |  if_e	jmp	#LR__1075
1dc28     49 75 02 F6 | 	mov	arg01, local04
1dc2c     48 77 02 F6 | 	mov	arg02, local03
1dc30     01 78 66 F6 | 	neg	arg03, #1
1dc34     F0 FC BF FD | 	call	#_fatfs_cc_put_fat
1dc38     1A 95 0A F6 | 	mov	local05, result1 wz
1dc3c     4A 35 02 56 |  if_ne	mov	result1, local05
1dc40     AC 00 90 5D |  if_ne	jmp	#LR__1079
1dc44                 | LR__1075
1dc44                 | ' 	}
1dc44                 | ' 
1dc44                 | ' 
1dc44                 | ' 	do {
1dc44                 | LR__1076
1dc44     47 77 02 F6 | 	mov	arg02, local02
1dc48     46 75 02 F6 | 	mov	arg01, local01
1dc4c     28 FB BF FD | 	call	#_fatfs_cc_get_fat
1dc50     1A 97 0A F6 | 	mov	local06, result1 wz
1dc54     94 00 90 AD |  if_e	jmp	#LR__1078
1dc58     01 96 0E F2 | 	cmp	local06, #1 wz
1dc5c     02 34 06 A6 |  if_e	mov	result1, #2
1dc60     8C 00 90 AD |  if_e	jmp	#LR__1079
1dc64     FF FF 7F FF 
1dc68     FF 97 0E F2 | 	cmp	local06, ##-1 wz
1dc6c     01 34 06 A6 |  if_e	mov	result1, #1
1dc70     7C 00 90 AD |  if_e	jmp	#LR__1079
1dc74     47 77 02 F6 | 	mov	arg02, local02
1dc78     49 75 02 F6 | 	mov	arg01, local04
1dc7c     00 78 06 F6 | 	mov	arg03, #0
1dc80     A4 FC BF FD | 	call	#_fatfs_cc_put_fat
1dc84     1A 95 0A F6 | 	mov	local05, result1 wz
1dc88     4A 35 02 56 |  if_ne	mov	result1, local05
1dc8c     60 00 90 5D |  if_ne	jmp	#LR__1079
1dc90     14 92 06 F1 | 	add	local04, #20
1dc94     49 95 02 FB | 	rdlong	local05, local04
1dc98     02 94 86 F1 | 	sub	local05, #2
1dc9c     04 92 86 F1 | 	sub	local04, #4
1dca0     49 91 02 FB | 	rdlong	local03, local04
1dca4     10 92 86 F1 | 	sub	local04, #16
1dca8     4A 91 12 F2 | 	cmp	local03, local05 wc
1dcac     24 00 90 3D |  if_ae	jmp	#LR__1077
1dcb0     10 92 06 F1 | 	add	local04, #16
1dcb4     49 95 02 FB | 	rdlong	local05, local04
1dcb8     01 94 06 F1 | 	add	local05, #1
1dcbc     49 95 62 FC | 	wrlong	local05, local04
1dcc0     0C 92 86 F1 | 	sub	local04, #12
1dcc4     49 95 C2 FA | 	rdbyte	local05, local04
1dcc8     01 94 46 F5 | 	or	local05, #1
1dccc     49 95 42 FC | 	wrbyte	local05, local04
1dcd0     04 92 86 F1 | 	sub	local04, #4
1dcd4                 | LR__1077
1dcd4     4B 8F 02 F6 | 	mov	local02, local06
1dcd8     14 92 06 F1 | 	add	local04, #20
1dcdc     49 95 02 FB | 	rdlong	local05, local04
1dce0     14 92 86 F1 | 	sub	local04, #20
1dce4     4A 8F 12 F2 | 	cmp	local02, local05 wc
1dce8     58 FF 9F CD |  if_b	jmp	#LR__1076
1dcec                 | LR__1078
1dcec                 | ' #line 1500 "ff.c"
1dcec                 | ' 	return FR_OK;
1dcec     00 34 06 F6 | 	mov	result1, #0
1dcf0                 | LR__1079
1dcf0     A8 F0 03 F6 | 	mov	ptra, fp
1dcf4     B3 00 A0 FD | 	call	#popregs_
1dcf8                 | _fatfs_cc_remove_chain_ret
1dcf8     2D 00 64 FD | 	ret
1dcfc                 | 
1dcfc                 | _fatfs_cc_create_chain
1dcfc     0A 4C 05 F6 | 	mov	COUNT_, #10
1dd00     A9 00 A0 FD | 	call	#pushregs_
1dd04     3A 8D 02 F6 | 	mov	local01, arg01
1dd08     3B 8F 0A F6 | 	mov	local02, arg02 wz
1dd0c     46 91 02 FB | 	rdlong	local03, local01
1dd10     28 00 90 5D |  if_ne	jmp	#LR__1080
1dd14     0C 90 06 F1 | 	add	local03, #12
1dd18     48 93 0A FB | 	rdlong	local04, local03 wz
1dd1c     0C 90 86 F1 | 	sub	local03, #12
1dd20     14 90 06 51 |  if_ne	add	local03, #20
1dd24     48 95 02 5B |  if_ne	rdlong	local05, local03
1dd28     14 90 86 51 |  if_ne	sub	local03, #20
1dd2c     4A 93 12 52 |  if_ne	cmp	local04, local05 wc
1dd30     50 00 90 4D |  if_c_and_nz	jmp	#LR__1081
1dd34     01 92 06 F6 | 	mov	local04, #1
1dd38     48 00 90 FD | 	jmp	#LR__1081
1dd3c                 | LR__1080
1dd3c     47 77 02 F6 | 	mov	arg02, local02
1dd40     46 75 02 F6 | 	mov	arg01, local01
1dd44     30 FA BF FD | 	call	#_fatfs_cc_get_fat
1dd48     1A 97 02 F6 | 	mov	local06, result1
1dd4c     02 96 16 F2 | 	cmp	local06, #2 wc
1dd50     01 34 06 C6 |  if_b	mov	result1, #1
1dd54     C8 01 90 CD |  if_b	jmp	#LR__1091
1dd58     FF FF 7F FF 
1dd5c     FF 97 0E F2 | 	cmp	local06, ##-1 wz
1dd60     4B 35 02 A6 |  if_e	mov	result1, local06
1dd64     B8 01 90 AD |  if_e	jmp	#LR__1091
1dd68     14 90 06 F1 | 	add	local03, #20
1dd6c     48 95 02 FB | 	rdlong	local05, local03
1dd70     14 90 86 F1 | 	sub	local03, #20
1dd74     4A 97 12 F2 | 	cmp	local06, local05 wc
1dd78     4B 35 02 C6 |  if_b	mov	result1, local06
1dd7c     A0 01 90 CD |  if_b	jmp	#LR__1091
1dd80     47 93 02 F6 | 	mov	local04, local02
1dd84                 | LR__1081
1dd84     10 90 06 F1 | 	add	local03, #16
1dd88     48 95 0A FB | 	rdlong	local05, local03 wz
1dd8c     10 90 86 F1 | 	sub	local03, #16
1dd90     00 34 06 A6 |  if_e	mov	result1, #0
1dd94     88 01 90 AD |  if_e	jmp	#LR__1091
1dd98     00 98 06 F6 | 	mov	local07, #0
1dd9c     47 93 0A F2 | 	cmp	local04, local02 wz
1dda0     74 00 90 5D |  if_ne	jmp	#LR__1084
1dda4     49 99 02 F6 | 	mov	local07, local04
1dda8     01 98 06 F1 | 	add	local07, #1
1ddac     14 90 06 F1 | 	add	local03, #20
1ddb0     48 95 02 FB | 	rdlong	local05, local03
1ddb4     14 90 86 F1 | 	sub	local03, #20
1ddb8     4A 99 12 F2 | 	cmp	local07, local05 wc
1ddbc     02 98 06 36 |  if_ae	mov	local07, #2
1ddc0     4C 77 02 F6 | 	mov	arg02, local07
1ddc4     46 75 02 F6 | 	mov	arg01, local01
1ddc8     AC F9 BF FD | 	call	#_fatfs_cc_get_fat
1ddcc     1A 97 02 F6 | 	mov	local06, result1
1ddd0     01 96 0E F2 | 	cmp	local06, #1 wz
1ddd4     FF FF 7F 5F 
1ddd8     FF 97 0E 52 |  if_ne	cmp	local06, ##-1 wz
1dddc     4B 35 02 A6 |  if_e	mov	result1, local06
1dde0     3C 01 90 AD |  if_e	jmp	#LR__1091
1dde4     00 96 0E F2 | 	cmp	local06, #0 wz
1dde8     2C 00 90 AD |  if_e	jmp	#LR__1083
1ddec     0C 90 06 F1 | 	add	local03, #12
1ddf0     48 97 02 FB | 	rdlong	local06, local03
1ddf4     0C 90 86 F1 | 	sub	local03, #12
1ddf8     02 96 16 F2 | 	cmp	local06, #2 wc
1ddfc     14 00 90 CD |  if_b	jmp	#LR__1082
1de00     14 90 06 F1 | 	add	local03, #20
1de04     48 95 02 FB | 	rdlong	local05, local03
1de08     14 90 86 F1 | 	sub	local03, #20
1de0c     4A 97 12 F2 | 	cmp	local06, local05 wc
1de10     4B 93 02 C6 |  if_b	mov	local04, local06
1de14                 | LR__1082
1de14     00 98 06 F6 | 	mov	local07, #0
1de18                 | LR__1083
1de18                 | LR__1084
1de18     00 98 0E F2 | 	cmp	local07, #0 wz
1de1c     60 00 90 5D |  if_ne	jmp	#LR__1087
1de20     49 99 02 F6 | 	mov	local07, local04
1de24                 | ' 			ncl = scl;
1de24                 | ' 			for (;;) {
1de24                 | LR__1085
1de24     01 98 06 F1 | 	add	local07, #1
1de28     14 90 06 F1 | 	add	local03, #20
1de2c     48 95 02 FB | 	rdlong	local05, local03
1de30     14 90 86 F1 | 	sub	local03, #20
1de34     4A 99 12 F2 | 	cmp	local07, local05 wc
1de38     02 98 06 36 |  if_ae	mov	local07, #2
1de3c     49 99 1A 32 |  if_ae	cmp	local07, local04 wcz
1de40     00 34 06 16 |  if_a	mov	result1, #0
1de44     D8 00 90 1D |  if_a	jmp	#LR__1091
1de48     4C 77 02 F6 | 	mov	arg02, local07
1de4c     46 75 02 F6 | 	mov	arg01, local01
1de50     24 F9 BF FD | 	call	#_fatfs_cc_get_fat
1de54     1A 97 0A F6 | 	mov	local06, result1 wz
1de58     24 00 90 AD |  if_e	jmp	#LR__1086
1de5c     01 96 0E F2 | 	cmp	local06, #1 wz
1de60     FF FF 7F 5F 
1de64     FF 97 0E 52 |  if_ne	cmp	local06, ##-1 wz
1de68     4B 35 02 A6 |  if_e	mov	result1, local06
1de6c     B0 00 90 AD |  if_e	jmp	#LR__1091
1de70     49 99 0A F2 | 	cmp	local07, local04 wz
1de74     00 34 06 A6 |  if_e	mov	result1, #0
1de78     A4 00 90 AD |  if_e	jmp	#LR__1091
1de7c     A4 FF 9F FD | 	jmp	#LR__1085
1de80                 | LR__1086
1de80                 | LR__1087
1de80     48 75 02 F6 | 	mov	arg01, local03
1de84     4C 77 02 F6 | 	mov	arg02, local07
1de88     01 78 66 F6 | 	neg	arg03, #1
1de8c     98 FA BF FD | 	call	#_fatfs_cc_put_fat
1de90     1A 9B 0A F6 | 	mov	local08, result1 wz
1de94     28 00 90 5D |  if_ne	jmp	#LR__1088
1de98     00 8E 0E F2 | 	cmp	local02, #0 wz
1de9c     20 00 90 AD |  if_e	jmp	#LR__1088
1dea0     47 9D 02 F6 | 	mov	local09, local02
1dea4     4C 9F 02 F6 | 	mov	local10, local07
1dea8     48 75 02 F6 | 	mov	arg01, local03
1deac     4E 77 02 F6 | 	mov	arg02, local09
1deb0     4F 79 02 F6 | 	mov	arg03, local10
1deb4     70 FA BF FD | 	call	#_fatfs_cc_put_fat
1deb8     1A 95 02 F6 | 	mov	local05, result1
1debc     4A 9B 02 F6 | 	mov	local08, local05
1dec0                 | LR__1088
1dec0     00 9A 0E F2 | 	cmp	local08, #0 wz
1dec4     4C 00 90 5D |  if_ne	jmp	#LR__1089
1dec8     0C 90 06 F1 | 	add	local03, #12
1decc     48 99 62 FC | 	wrlong	local07, local03
1ded0     08 90 06 F1 | 	add	local03, #8
1ded4     48 95 02 FB | 	rdlong	local05, local03
1ded8     02 94 86 F1 | 	sub	local05, #2
1dedc     04 90 86 F1 | 	sub	local03, #4
1dee0     48 9F 02 FB | 	rdlong	local10, local03
1dee4     10 90 86 F1 | 	sub	local03, #16
1dee8     4A 9F 1A F2 | 	cmp	local10, local05 wcz
1deec     10 90 06 E1 |  if_be	add	local03, #16
1def0     48 9F 02 EB |  if_be	rdlong	local10, local03
1def4     01 9E 86 E1 |  if_be	sub	local10, #1
1def8     48 9F 62 EC |  if_be	wrlong	local10, local03
1defc     10 90 86 E1 |  if_be	sub	local03, #16
1df00     04 90 06 F1 | 	add	local03, #4
1df04     48 95 C2 FA | 	rdbyte	local05, local03
1df08     01 94 46 F5 | 	or	local05, #1
1df0c     48 95 42 FC | 	wrbyte	local05, local03
1df10     08 00 90 FD | 	jmp	#LR__1090
1df14                 | LR__1089
1df14     01 9A 0E F2 | 	cmp	local08, #1 wz
1df18     01 98 C6 F6 | 	negz	local07, #1
1df1c                 | LR__1090
1df1c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1df1c                 | ' 	}
1df1c                 | ' 
1df1c                 | ' 	return ncl;
1df1c     4C 35 02 F6 | 	mov	result1, local07
1df20                 | LR__1091
1df20     A8 F0 03 F6 | 	mov	ptra, fp
1df24     B3 00 A0 FD | 	call	#popregs_
1df28                 | _fatfs_cc_create_chain_ret
1df28     2D 00 64 FD | 	ret
1df2c                 | 
1df2c                 | _fatfs_cc_dir_clear
1df2c     06 4C 05 F6 | 	mov	COUNT_, #6
1df30     A9 00 A0 FD | 	call	#pushregs_
1df34     3A 8D 02 F6 | 	mov	local01, arg01
1df38     3B 8F 02 F6 | 	mov	local02, arg02
1df3c     46 75 02 F6 | 	mov	arg01, local01
1df40     90 F5 BF FD | 	call	#_fatfs_cc_sync_window
1df44     00 34 0E F2 | 	cmp	result1, #0 wz
1df48     01 34 06 56 |  if_ne	mov	result1, #1
1df4c     90 00 90 5D |  if_ne	jmp	#LR__1094
1df50     46 75 02 F6 | 	mov	arg01, local01
1df54     47 77 02 F6 | 	mov	arg02, local02
1df58     DC F7 BF FD | 	call	#_fatfs_cc_clst2sect
1df5c     1A 91 02 F6 | 	mov	local03, result1
1df60     2C 8C 06 F1 | 	add	local01, #44
1df64     46 91 62 FC | 	wrlong	local03, local01
1df68     04 8C 06 F1 | 	add	local01, #4
1df6c     46 75 02 F6 | 	mov	arg01, local01
1df70     00 76 06 F6 | 	mov	arg02, #0
1df74     09 78 C6 F9 | 	decod	arg03, #9
1df78     99 00 A0 FD | 	call	#\builtin_bytefill_
1df7c     46 93 02 F6 | 	mov	local04, local01
1df80                 | ' #line 1667 "ff.c"
1df80                 | ' 	{
1df80                 | ' 		ibuf = fs->win; szb = 1;
1df80                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1df80     00 94 06 F6 | 	mov	local05, #0
1df84     30 8C 86 F1 | 	sub	local01, #48
1df88                 | LR__1092
1df88     0A 8C 06 F1 | 	add	local01, #10
1df8c     46 97 E2 FA | 	rdword	local06, local01
1df90     0A 8C 86 F1 | 	sub	local01, #10
1df94     4B 95 12 F2 | 	cmp	local05, local06 wc
1df98     2C 00 90 3D |  if_ae	jmp	#LR__1093
1df9c     01 8C 06 F1 | 	add	local01, #1
1dfa0     46 75 C2 FA | 	rdbyte	arg01, local01
1dfa4     01 8C 86 F1 | 	sub	local01, #1
1dfa8     49 77 02 F6 | 	mov	arg02, local04
1dfac     48 79 02 F6 | 	mov	arg03, local03
1dfb0     4A 79 02 F1 | 	add	arg03, local05
1dfb4     01 7A 06 F6 | 	mov	arg04, #1
1dfb8     98 F1 BF FD | 	call	#_fatfs_cc_disk_write
1dfbc     00 34 0E F2 | 	cmp	result1, #0 wz
1dfc0     01 94 06 A1 |  if_e	add	local05, #1
1dfc4     C0 FF 9F AD |  if_e	jmp	#LR__1092
1dfc8                 | LR__1093
1dfc8                 | ' 	}
1dfc8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1dfc8     0A 8C 06 F1 | 	add	local01, #10
1dfcc     46 93 E2 FA | 	rdword	local04, local01
1dfd0     49 95 0A F2 | 	cmp	local05, local04 wz
1dfd4     00 96 06 A6 |  if_e	mov	local06, #0
1dfd8     01 96 06 56 |  if_ne	mov	local06, #1
1dfdc     4B 35 02 F6 | 	mov	result1, local06
1dfe0                 | LR__1094
1dfe0     A8 F0 03 F6 | 	mov	ptra, fp
1dfe4     B3 00 A0 FD | 	call	#popregs_
1dfe8                 | _fatfs_cc_dir_clear_ret
1dfe8     2D 00 64 FD | 	ret
1dfec                 | 
1dfec                 | _fatfs_cc_dir_sdi
1dfec     06 4C 05 F6 | 	mov	COUNT_, #6
1dff0     A9 00 A0 FD | 	call	#pushregs_
1dff4     3A 8D 02 F6 | 	mov	local01, arg01
1dff8     3B 8F 02 F6 | 	mov	local02, arg02
1dffc     46 91 02 FB | 	rdlong	local03, local01
1e000     00 10 00 FF 
1e004     00 8E 16 F2 | 	cmp	local02, ##2097152 wc
1e008     47 93 02 C6 |  if_b	mov	local04, local02
1e00c     1F 92 CE C7 |  if_b	test	local04, #31 wz
1e010                 | ' 		return FR_INT_ERR;
1e010     02 34 06 76 |  if_nc_or_nz	mov	result1, #2
1e014     40 01 90 7D |  if_nc_or_nz	jmp	#LR__1102
1e018     10 8C 06 F1 | 	add	local01, #16
1e01c     46 8F 62 FC | 	wrlong	local02, local01
1e020     08 8C 86 F1 | 	sub	local01, #8
1e024     46 95 0A FB | 	rdlong	local05, local01 wz
1e028     08 8C 86 F1 | 	sub	local01, #8
1e02c     18 00 90 5D |  if_ne	jmp	#LR__1095
1e030     48 93 C2 FA | 	rdbyte	local04, local03
1e034     03 92 16 F2 | 	cmp	local04, #3 wc
1e038     24 90 06 31 |  if_ae	add	local03, #36
1e03c     48 93 02 3B |  if_ae	rdlong	local04, local03
1e040     24 90 86 31 |  if_ae	sub	local03, #36
1e044     49 95 02 36 |  if_ae	mov	local05, local04
1e048                 | LR__1095
1e048     00 94 0E F2 | 	cmp	local05, #0 wz
1e04c     3C 00 90 5D |  if_ne	jmp	#LR__1096
1e050     47 93 02 F6 | 	mov	local04, local02
1e054     05 92 46 F0 | 	shr	local04, #5
1e058     08 90 06 F1 | 	add	local03, #8
1e05c     48 77 E2 FA | 	rdword	arg02, local03
1e060     08 90 86 F1 | 	sub	local03, #8
1e064     3B 93 12 F2 | 	cmp	local04, arg02 wc
1e068     02 34 06 36 |  if_ae	mov	result1, #2
1e06c     E8 00 90 3D |  if_ae	jmp	#LR__1102
1e070     24 90 06 F1 | 	add	local03, #36
1e074     48 93 02 FB | 	rdlong	local04, local03
1e078     24 90 86 F1 | 	sub	local03, #36
1e07c     18 8C 06 F1 | 	add	local01, #24
1e080     46 93 62 FC | 	wrlong	local04, local01
1e084     18 8C 86 F1 | 	sub	local01, #24
1e088     7C 00 90 FD | 	jmp	#LR__1101
1e08c                 | LR__1096
1e08c     0A 90 06 F1 | 	add	local03, #10
1e090     48 97 E2 FA | 	rdword	local06, local03
1e094     0A 90 86 F1 | 	sub	local03, #10
1e098     09 96 66 F0 | 	shl	local06, #9
1e09c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1e09c                 | ' 		while (ofs >= csz) {
1e09c                 | LR__1097
1e09c     4B 8F 12 F2 | 	cmp	local02, local06 wc
1e0a0     4C 00 90 CD |  if_b	jmp	#LR__1100
1e0a4     46 75 02 F6 | 	mov	arg01, local01
1e0a8     4A 77 02 F6 | 	mov	arg02, local05
1e0ac     C8 F6 BF FD | 	call	#_fatfs_cc_get_fat
1e0b0     1A 95 02 F6 | 	mov	local05, result1
1e0b4     FF FF 7F FF 
1e0b8     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1e0bc     01 34 06 A6 |  if_e	mov	result1, #1
1e0c0     94 00 90 AD |  if_e	jmp	#LR__1102
1e0c4     02 94 16 F2 | 	cmp	local05, #2 wc
1e0c8     14 00 90 CD |  if_b	jmp	#LR__1098
1e0cc     14 90 06 F1 | 	add	local03, #20
1e0d0     48 93 02 FB | 	rdlong	local04, local03
1e0d4     14 90 86 F1 | 	sub	local03, #20
1e0d8     49 95 12 F2 | 	cmp	local05, local04 wc
1e0dc     08 00 90 CD |  if_b	jmp	#LR__1099
1e0e0                 | LR__1098
1e0e0     02 34 06 F6 | 	mov	result1, #2
1e0e4     70 00 90 FD | 	jmp	#LR__1102
1e0e8                 | LR__1099
1e0e8     4B 8F 82 F1 | 	sub	local02, local06
1e0ec     AC FF 9F FD | 	jmp	#LR__1097
1e0f0                 | LR__1100
1e0f0     48 75 02 F6 | 	mov	arg01, local03
1e0f4     4A 77 02 F6 | 	mov	arg02, local05
1e0f8     3C F6 BF FD | 	call	#_fatfs_cc_clst2sect
1e0fc     18 8C 06 F1 | 	add	local01, #24
1e100     46 35 62 FC | 	wrlong	result1, local01
1e104     18 8C 86 F1 | 	sub	local01, #24
1e108                 | LR__1101
1e108     14 8C 06 F1 | 	add	local01, #20
1e10c     46 95 62 FC | 	wrlong	local05, local01
1e110     04 8C 06 F1 | 	add	local01, #4
1e114     46 93 0A FB | 	rdlong	local04, local01 wz
1e118     18 8C 86 F1 | 	sub	local01, #24
1e11c     02 34 06 A6 |  if_e	mov	result1, #2
1e120     34 00 90 AD |  if_e	jmp	#LR__1102
1e124     47 35 02 F6 | 	mov	result1, local02
1e128     09 34 46 F0 | 	shr	result1, #9
1e12c     18 8C 06 F1 | 	add	local01, #24
1e130     46 93 02 FB | 	rdlong	local04, local01
1e134     1A 93 02 F1 | 	add	local04, result1
1e138     46 93 62 FC | 	wrlong	local04, local01
1e13c     30 90 06 F1 | 	add	local03, #48
1e140     48 93 02 F6 | 	mov	local04, local03
1e144     FF 8F 06 F5 | 	and	local02, #511
1e148     47 93 02 F1 | 	add	local04, local02
1e14c     04 8C 06 F1 | 	add	local01, #4
1e150     46 93 62 FC | 	wrlong	local04, local01
1e154                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1e154                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1e154                 | ' 
1e154                 | ' 	return FR_OK;
1e154     00 34 06 F6 | 	mov	result1, #0
1e158                 | LR__1102
1e158     A8 F0 03 F6 | 	mov	ptra, fp
1e15c     B3 00 A0 FD | 	call	#popregs_
1e160                 | _fatfs_cc_dir_sdi_ret
1e160     2D 00 64 FD | 	ret
1e164                 | 
1e164                 | _fatfs_cc_dir_next
1e164     05 4C 05 F6 | 	mov	COUNT_, #5
1e168     A9 00 A0 FD | 	call	#pushregs_
1e16c     3A 8D 02 F6 | 	mov	local01, arg01
1e170     3B 8F 02 F6 | 	mov	local02, arg02
1e174     46 91 02 FB | 	rdlong	local03, local01
1e178     10 8C 06 F1 | 	add	local01, #16
1e17c     46 93 02 FB | 	rdlong	local04, local01
1e180     10 8C 86 F1 | 	sub	local01, #16
1e184     20 92 06 F1 | 	add	local04, #32
1e188     00 10 00 FF 
1e18c     00 92 16 F2 | 	cmp	local04, ##2097152 wc
1e190     18 8C 06 31 |  if_ae	add	local01, #24
1e194     46 01 68 3C |  if_ae	wrlong	#0, local01
1e198     18 8C 86 31 |  if_ae	sub	local01, #24
1e19c     18 8C 06 F1 | 	add	local01, #24
1e1a0     46 77 0A FB | 	rdlong	arg02, local01 wz
1e1a4     18 8C 86 F1 | 	sub	local01, #24
1e1a8     04 34 06 A6 |  if_e	mov	result1, #4
1e1ac     64 01 90 AD |  if_e	jmp	#LR__1108
1e1b0     FF 93 CE F7 | 	test	local04, #511 wz
1e1b4     3C 01 90 5D |  if_ne	jmp	#LR__1107
1e1b8     18 8C 06 F1 | 	add	local01, #24
1e1bc     46 77 02 FB | 	rdlong	arg02, local01
1e1c0     01 76 06 F1 | 	add	arg02, #1
1e1c4     46 77 62 FC | 	wrlong	arg02, local01
1e1c8     04 8C 86 F1 | 	sub	local01, #4
1e1cc     46 77 0A FB | 	rdlong	arg02, local01 wz
1e1d0     14 8C 86 F1 | 	sub	local01, #20
1e1d4     2C 00 90 5D |  if_ne	jmp	#LR__1103
1e1d8     49 77 02 F6 | 	mov	arg02, local04
1e1dc     05 76 46 F0 | 	shr	arg02, #5
1e1e0     08 90 06 F1 | 	add	local03, #8
1e1e4     48 8F E2 FA | 	rdword	local02, local03
1e1e8     08 90 86 F1 | 	sub	local03, #8
1e1ec     47 77 12 F2 | 	cmp	arg02, local02 wc
1e1f0     18 8C 06 31 |  if_ae	add	local01, #24
1e1f4     46 01 68 3C |  if_ae	wrlong	#0, local01
1e1f8                 | ' 				dp->sect = 0; return FR_NO_FILE;
1e1f8     04 34 06 36 |  if_ae	mov	result1, #4
1e1fc     14 01 90 3D |  if_ae	jmp	#LR__1108
1e200     F0 00 90 FD | 	jmp	#LR__1106
1e204                 | LR__1103
1e204     49 75 02 F6 | 	mov	arg01, local04
1e208     09 74 46 F0 | 	shr	arg01, #9
1e20c     0A 90 06 F1 | 	add	local03, #10
1e210     48 77 E2 FA | 	rdword	arg02, local03
1e214     0A 90 86 F1 | 	sub	local03, #10
1e218     01 76 86 F1 | 	sub	arg02, #1
1e21c     3B 75 CA F7 | 	test	arg01, arg02 wz
1e220     D0 00 90 5D |  if_ne	jmp	#LR__1105
1e224     46 75 02 F6 | 	mov	arg01, local01
1e228     14 8C 06 F1 | 	add	local01, #20
1e22c     46 77 02 FB | 	rdlong	arg02, local01
1e230     14 8C 86 F1 | 	sub	local01, #20
1e234     40 F5 BF FD | 	call	#_fatfs_cc_get_fat
1e238     1A 95 02 F6 | 	mov	local05, result1
1e23c     02 94 16 F2 | 	cmp	local05, #2 wc
1e240     02 34 06 C6 |  if_b	mov	result1, #2
1e244     CC 00 90 CD |  if_b	jmp	#LR__1108
1e248     FF FF 7F FF 
1e24c     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1e250     01 34 06 A6 |  if_e	mov	result1, #1
1e254     BC 00 90 AD |  if_e	jmp	#LR__1108
1e258     14 90 06 F1 | 	add	local03, #20
1e25c     48 77 02 FB | 	rdlong	arg02, local03
1e260     14 90 86 F1 | 	sub	local03, #20
1e264     3B 95 12 F2 | 	cmp	local05, arg02 wc
1e268     68 00 90 CD |  if_b	jmp	#LR__1104
1e26c     00 8E 0E F2 | 	cmp	local02, #0 wz
1e270     18 8C 06 A1 |  if_e	add	local01, #24
1e274     46 01 68 AC |  if_e	wrlong	#0, local01
1e278                 | ' 						dp->sect = 0; return FR_NO_FILE;
1e278     04 34 06 A6 |  if_e	mov	result1, #4
1e27c     94 00 90 AD |  if_e	jmp	#LR__1108
1e280     46 75 02 F6 | 	mov	arg01, local01
1e284     14 8C 06 F1 | 	add	local01, #20
1e288     46 77 02 FB | 	rdlong	arg02, local01
1e28c     14 8C 86 F1 | 	sub	local01, #20
1e290     68 FA BF FD | 	call	#_fatfs_cc_create_chain
1e294     1A 95 0A F6 | 	mov	local05, result1 wz
1e298     07 34 06 A6 |  if_e	mov	result1, #7
1e29c     74 00 90 AD |  if_e	jmp	#LR__1108
1e2a0     01 94 0E F2 | 	cmp	local05, #1 wz
1e2a4     02 34 06 A6 |  if_e	mov	result1, #2
1e2a8     68 00 90 AD |  if_e	jmp	#LR__1108
1e2ac     FF FF 7F FF 
1e2b0     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1e2b4     01 34 06 A6 |  if_e	mov	result1, #1
1e2b8     58 00 90 AD |  if_e	jmp	#LR__1108
1e2bc     4A 77 02 F6 | 	mov	arg02, local05
1e2c0     48 75 02 F6 | 	mov	arg01, local03
1e2c4     64 FC BF FD | 	call	#_fatfs_cc_dir_clear
1e2c8     00 34 0E F2 | 	cmp	result1, #0 wz
1e2cc     01 34 06 56 |  if_ne	mov	result1, #1
1e2d0     40 00 90 5D |  if_ne	jmp	#LR__1108
1e2d4                 | LR__1104
1e2d4     14 8C 06 F1 | 	add	local01, #20
1e2d8     46 95 62 FC | 	wrlong	local05, local01
1e2dc     48 75 02 F6 | 	mov	arg01, local03
1e2e0     4A 77 02 F6 | 	mov	arg02, local05
1e2e4     50 F4 BF FD | 	call	#_fatfs_cc_clst2sect
1e2e8     04 8C 06 F1 | 	add	local01, #4
1e2ec     46 35 62 FC | 	wrlong	result1, local01
1e2f0     18 8C 86 F1 | 	sub	local01, #24
1e2f4                 | LR__1105
1e2f4                 | LR__1106
1e2f4                 | LR__1107
1e2f4     10 8C 06 F1 | 	add	local01, #16
1e2f8     46 93 62 FC | 	wrlong	local04, local01
1e2fc     30 90 06 F1 | 	add	local03, #48
1e300     FF 93 06 F5 | 	and	local04, #511
1e304     49 91 02 F1 | 	add	local03, local04
1e308     0C 8C 06 F1 | 	add	local01, #12
1e30c     46 91 62 FC | 	wrlong	local03, local01
1e310                 | ' #line 1771 "ff.c"
1e310                 | ' 				}
1e310                 | ' 				dp->clust = clst;
1e310                 | ' 				dp->sect = clst2sect(fs, clst);
1e310                 | ' 			}
1e310                 | ' 		}
1e310                 | ' 	}
1e310                 | ' 	dp->dptr = ofs;
1e310                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1e310                 | ' 
1e310                 | ' 	return FR_OK;
1e310     00 34 06 F6 | 	mov	result1, #0
1e314                 | LR__1108
1e314     A8 F0 03 F6 | 	mov	ptra, fp
1e318     B3 00 A0 FD | 	call	#popregs_
1e31c                 | _fatfs_cc_dir_next_ret
1e31c     2D 00 64 FD | 	ret
1e320                 | 
1e320                 | _fatfs_cc_dir_alloc
1e320     0B 4C 05 F6 | 	mov	COUNT_, #11
1e324     A9 00 A0 FD | 	call	#pushregs_
1e328     3A 8D 02 F6 | 	mov	local01, arg01
1e32c     3B 8F 02 F6 | 	mov	local02, arg02
1e330     46 91 02 FB | 	rdlong	local03, local01
1e334     46 75 02 F6 | 	mov	arg01, local01
1e338     00 76 06 F6 | 	mov	arg02, #0
1e33c     AC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1e340     1A 93 0A F6 | 	mov	local04, result1 wz
1e344     80 00 90 5D |  if_ne	jmp	#LR__1114
1e348     00 94 06 F6 | 	mov	local05, #0
1e34c                 | ' 		n = 0;
1e34c                 | ' 		do {
1e34c                 | LR__1109
1e34c     18 8C 06 F1 | 	add	local01, #24
1e350     46 77 02 FB | 	rdlong	arg02, local01
1e354     18 8C 86 F1 | 	sub	local01, #24
1e358     48 75 02 F6 | 	mov	arg01, local03
1e35c     48 F2 BF FD | 	call	#_fatfs_cc_move_window
1e360     1A 93 0A F6 | 	mov	local04, result1 wz
1e364     60 00 90 5D |  if_ne	jmp	#LR__1113
1e368     1C 8C 06 F1 | 	add	local01, #28
1e36c     46 97 02 FB | 	rdlong	local06, local01
1e370     1C 8C 86 F1 | 	sub	local01, #28
1e374     4B 99 C2 FA | 	rdbyte	local07, local06
1e378     E5 98 0E F2 | 	cmp	local07, #229 wz
1e37c     18 00 90 AD |  if_e	jmp	#LR__1110
1e380     1C 8C 06 F1 | 	add	local01, #28
1e384     46 9B 02 FB | 	rdlong	local08, local01
1e388     1C 8C 86 F1 | 	sub	local01, #28
1e38c     4D 9D 02 F6 | 	mov	local09, local08
1e390     4E 9F CA FA | 	rdbyte	local10, local09 wz
1e394     10 00 90 5D |  if_ne	jmp	#LR__1111
1e398                 | LR__1110
1e398     01 94 06 F1 | 	add	local05, #1
1e39c     47 95 0A F2 | 	cmp	local05, local02 wz
1e3a0     24 00 90 AD |  if_e	jmp	#LR__1113
1e3a4     04 00 90 FD | 	jmp	#LR__1112
1e3a8                 | LR__1111
1e3a8     00 94 06 F6 | 	mov	local05, #0
1e3ac                 | LR__1112
1e3ac     01 A0 06 F6 | 	mov	local11, #1
1e3b0     46 75 02 F6 | 	mov	arg01, local01
1e3b4     01 76 06 F6 | 	mov	arg02, #1
1e3b8     A8 FD BF FD | 	call	#_fatfs_cc_dir_next
1e3bc     1A 99 02 F6 | 	mov	local07, result1
1e3c0     4C 93 0A F6 | 	mov	local04, local07 wz
1e3c4     84 FF 9F AD |  if_e	jmp	#LR__1109
1e3c8                 | LR__1113
1e3c8                 | LR__1114
1e3c8     04 92 0E F2 | 	cmp	local04, #4 wz
1e3cc     07 92 06 A6 |  if_e	mov	local04, #7
1e3d0                 | ' 	return res;
1e3d0     49 35 02 F6 | 	mov	result1, local04
1e3d4     A8 F0 03 F6 | 	mov	ptra, fp
1e3d8     B3 00 A0 FD | 	call	#popregs_
1e3dc                 | _fatfs_cc_dir_alloc_ret
1e3dc     2D 00 64 FD | 	ret
1e3e0                 | 
1e3e0                 | _fatfs_cc_ld_clust
1e3e0     01 4C 05 F6 | 	mov	COUNT_, #1
1e3e4     A9 00 A0 FD | 	call	#pushregs_
1e3e8     3A 8D 02 F6 | 	mov	local01, arg01
1e3ec     3B 75 02 F6 | 	mov	arg01, arg02
1e3f0     1A 74 06 F1 | 	add	arg01, #26
1e3f4                 | ' {
1e3f4                 | ' 
1e3f4                 | ' 	return *((WORD*)ptr);
1e3f4     3A 35 E2 FA | 	rdword	result1, arg01
1e3f8     1A 75 32 F9 | 	getword	arg01, result1, #0
1e3fc     46 8D C2 FA | 	rdbyte	local01, local01
1e400     03 8C 0E F2 | 	cmp	local01, #3 wz
1e404     14 76 06 A1 |  if_e	add	arg02, #20
1e408                 | ' {
1e408                 | ' 
1e408                 | ' 	return *((WORD*)ptr);
1e408     3B 35 E2 AA |  if_e	rdword	result1, arg02
1e40c     10 34 66 A0 |  if_e	shl	result1, #16
1e410     1A 75 42 A5 |  if_e	or	arg01, result1
1e414                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1e414                 | ' 	}
1e414                 | ' 
1e414                 | ' 	return cl;
1e414     3A 35 02 F6 | 	mov	result1, arg01
1e418     A8 F0 03 F6 | 	mov	ptra, fp
1e41c     B3 00 A0 FD | 	call	#popregs_
1e420                 | _fatfs_cc_ld_clust_ret
1e420     2D 00 64 FD | 	ret
1e424                 | 
1e424                 | _fatfs_cc_st_clust
1e424     01 4C 05 F6 | 	mov	COUNT_, #1
1e428     A9 00 A0 FD | 	call	#pushregs_
1e42c     3A 8D 02 F6 | 	mov	local01, arg01
1e430     3B 75 02 F6 | 	mov	arg01, arg02
1e434     1A 74 06 F1 | 	add	arg01, #26
1e438     3A 79 52 FC | 	wrword	arg03, arg01
1e43c     46 8D C2 FA | 	rdbyte	local01, local01
1e440     03 8C 0E F2 | 	cmp	local01, #3 wz
1e444     14 76 06 A1 |  if_e	add	arg02, #20
1e448     10 78 46 A0 |  if_e	shr	arg03, #16
1e44c     3B 79 52 AC |  if_e	wrword	arg03, arg02
1e450     A8 F0 03 F6 | 	mov	ptra, fp
1e454     B3 00 A0 FD | 	call	#popregs_
1e458                 | _fatfs_cc_st_clust_ret
1e458     2D 00 64 FD | 	ret
1e45c                 | 
1e45c                 | _fatfs_cc_dir_read
1e45c     0B 4C 05 F6 | 	mov	COUNT_, #11
1e460     A9 00 A0 FD | 	call	#pushregs_
1e464     3A 8D 02 F6 | 	mov	local01, arg01
1e468     3B 8F 02 F6 | 	mov	local02, arg02
1e46c     04 90 06 F6 | 	mov	local03, #4
1e470     46 93 02 FB | 	rdlong	local04, local01
1e474                 | ' )
1e474                 | ' {
1e474                 | ' 	FRESULT res = FR_NO_FILE;
1e474                 | ' 	FATFS *fs = dp->obj.fs;
1e474                 | ' 	BYTE attr, b;
1e474                 | ' #line 2303 "ff.c"
1e474                 | ' 	while (dp->sect) {
1e474                 | LR__1115
1e474     18 8C 06 F1 | 	add	local01, #24
1e478     46 35 0A FB | 	rdlong	result1, local01 wz
1e47c     18 8C 86 F1 | 	sub	local01, #24
1e480     B0 00 90 AD |  if_e	jmp	#LR__1117
1e484     18 8C 06 F1 | 	add	local01, #24
1e488     46 77 02 FB | 	rdlong	arg02, local01
1e48c     18 8C 86 F1 | 	sub	local01, #24
1e490     49 75 02 F6 | 	mov	arg01, local04
1e494     10 F1 BF FD | 	call	#_fatfs_cc_move_window
1e498     1A 91 0A F6 | 	mov	local03, result1 wz
1e49c     94 00 90 5D |  if_ne	jmp	#LR__1117
1e4a0     1C 8C 06 F1 | 	add	local01, #28
1e4a4     46 95 02 FB | 	rdlong	local05, local01
1e4a8     1C 8C 86 F1 | 	sub	local01, #28
1e4ac     4A 97 C2 FA | 	rdbyte	local06, local05
1e4b0     4B 95 02 F6 | 	mov	local05, local06
1e4b4     07 94 4E F7 | 	zerox	local05, #7 wz
1e4b8     04 90 06 A6 |  if_e	mov	local03, #4
1e4bc                 | ' 			res = FR_NO_FILE; break;
1e4bc     74 00 90 AD |  if_e	jmp	#LR__1117
1e4c0     1C 8C 06 F1 | 	add	local01, #28
1e4c4     46 99 02 FB | 	rdlong	local07, local01
1e4c8     0B 98 06 F1 | 	add	local07, #11
1e4cc     4C 9B C2 FA | 	rdbyte	local08, local07
1e4d0     3F 9A 06 F5 | 	and	local08, #63
1e4d4     16 8C 86 F1 | 	sub	local01, #22
1e4d8     46 9B 42 FC | 	wrbyte	local08, local01
1e4dc     06 8C 86 F1 | 	sub	local01, #6
1e4e0     4B 95 E2 F8 | 	getbyte	local05, local06, #0
1e4e4     E5 94 0E F2 | 	cmp	local05, #229 wz
1e4e8     34 00 90 AD |  if_e	jmp	#LR__1116
1e4ec     4B 99 E2 F8 | 	getbyte	local07, local06, #0
1e4f0     2E 98 0E F2 | 	cmp	local07, #46 wz
1e4f4     28 00 90 AD |  if_e	jmp	#LR__1116
1e4f8     4D 9D E2 F8 | 	getbyte	local09, local08, #0
1e4fc     0F 9C 0E F2 | 	cmp	local09, #15 wz
1e500     1C 00 90 AD |  if_e	jmp	#LR__1116
1e504     00 9E 06 F6 | 	mov	local10, #0
1e508     4D A1 E2 F8 | 	getbyte	local11, local08, #0
1e50c     20 A0 26 F5 | 	andn	local11, #32
1e510     08 A0 0E F2 | 	cmp	local11, #8 wz
1e514     01 9E 06 A6 |  if_e	mov	local10, #1
1e518     47 9F 0A F2 | 	cmp	local10, local02 wz
1e51c                 | ' 				break;
1e51c     14 00 90 AD |  if_e	jmp	#LR__1117
1e520                 | LR__1116
1e520     46 75 02 F6 | 	mov	arg01, local01
1e524     00 76 06 F6 | 	mov	arg02, #0
1e528     38 FC BF FD | 	call	#_fatfs_cc_dir_next
1e52c     1A 91 0A F6 | 	mov	local03, result1 wz
1e530     40 FF 9F AD |  if_e	jmp	#LR__1115
1e534                 | LR__1117
1e534     00 90 0E F2 | 	cmp	local03, #0 wz
1e538     18 8C 06 51 |  if_ne	add	local01, #24
1e53c     46 01 68 5C |  if_ne	wrlong	#0, local01
1e540                 | ' 	return res;
1e540     48 35 02 F6 | 	mov	result1, local03
1e544     A8 F0 03 F6 | 	mov	ptra, fp
1e548     B3 00 A0 FD | 	call	#popregs_
1e54c                 | _fatfs_cc_dir_read_ret
1e54c     2D 00 64 FD | 	ret
1e550                 | 
1e550                 | _fatfs_cc_dir_find
1e550     0B 4C 05 F6 | 	mov	COUNT_, #11
1e554     A9 00 A0 FD | 	call	#pushregs_
1e558     3A 8D 02 F6 | 	mov	local01, arg01
1e55c     46 8F 02 FB | 	rdlong	local02, local01
1e560     46 75 02 F6 | 	mov	arg01, local01
1e564     00 76 06 F6 | 	mov	arg02, #0
1e568     80 FA BF FD | 	call	#_fatfs_cc_dir_sdi
1e56c     00 34 0E F2 | 	cmp	result1, #0 wz
1e570     C8 00 90 5D |  if_ne	jmp	#LR__1121
1e574                 | ' #line 2406 "ff.c"
1e574                 | ' 	do {
1e574                 | LR__1118
1e574     18 8C 06 F1 | 	add	local01, #24
1e578     46 77 02 FB | 	rdlong	arg02, local01
1e57c     18 8C 86 F1 | 	sub	local01, #24
1e580     47 75 02 F6 | 	mov	arg01, local02
1e584     20 F0 BF FD | 	call	#_fatfs_cc_move_window
1e588     1A 91 0A F6 | 	mov	local03, result1 wz
1e58c     A8 00 90 5D |  if_ne	jmp	#LR__1120
1e590     1C 8C 06 F1 | 	add	local01, #28
1e594     46 35 02 FB | 	rdlong	result1, local01
1e598     1C 8C 86 F1 | 	sub	local01, #28
1e59c     1A 93 C2 FA | 	rdbyte	local04, result1
1e5a0     49 35 02 F6 | 	mov	result1, local04
1e5a4     07 34 4E F7 | 	zerox	result1, #7 wz
1e5a8     04 90 06 A6 |  if_e	mov	local03, #4
1e5ac     88 00 90 AD |  if_e	jmp	#LR__1120
1e5b0     1C 8C 06 F1 | 	add	local01, #28
1e5b4     46 35 02 FB | 	rdlong	result1, local01
1e5b8     0B 34 06 F1 | 	add	result1, #11
1e5bc     1A 35 C2 FA | 	rdbyte	result1, result1
1e5c0     3F 34 06 F5 | 	and	result1, #63
1e5c4     16 8C 86 F1 | 	sub	local01, #22
1e5c8     46 35 42 FC | 	wrbyte	result1, local01
1e5cc     16 8C 06 F1 | 	add	local01, #22
1e5d0     46 95 02 FB | 	rdlong	local05, local01
1e5d4     1C 8C 86 F1 | 	sub	local01, #28
1e5d8     4A 77 02 F6 | 	mov	arg02, local05
1e5dc     0B 76 06 F1 | 	add	arg02, #11
1e5e0     3B 97 C2 FA | 	rdbyte	local06, arg02
1e5e4     4B 35 E2 F8 | 	getbyte	result1, local06, #0
1e5e8     08 34 CE F7 | 	test	result1, #8 wz
1e5ec     2C 00 90 5D |  if_ne	jmp	#LR__1119
1e5f0     1C 8C 06 F1 | 	add	local01, #28
1e5f4     46 75 02 FB | 	rdlong	arg01, local01
1e5f8     04 8C 06 F1 | 	add	local01, #4
1e5fc     46 99 02 F6 | 	mov	local07, local01
1e600     0B 9A 06 F6 | 	mov	local08, #11
1e604     4C 77 02 F6 | 	mov	arg02, local07
1e608     0B 78 06 F6 | 	mov	arg03, #11
1e60c     C8 E2 BF FD | 	call	#_fatfs_cc_memcmp
1e610     1A 9D 0A F6 | 	mov	local09, result1 wz
1e614     20 8C 86 F1 | 	sub	local01, #32
1e618     1C 00 90 AD |  if_e	jmp	#LR__1120
1e61c                 | LR__1119
1e61c     00 9E 06 F6 | 	mov	local10, #0
1e620     46 75 02 F6 | 	mov	arg01, local01
1e624     00 76 06 F6 | 	mov	arg02, #0
1e628     38 FB BF FD | 	call	#_fatfs_cc_dir_next
1e62c     1A A1 02 F6 | 	mov	local11, result1
1e630     50 91 0A F6 | 	mov	local03, local11 wz
1e634     3C FF 9F AD |  if_e	jmp	#LR__1118
1e638                 | LR__1120
1e638                 | ' 
1e638                 | ' 	return res;
1e638     48 35 02 F6 | 	mov	result1, local03
1e63c                 | LR__1121
1e63c     A8 F0 03 F6 | 	mov	ptra, fp
1e640     B3 00 A0 FD | 	call	#popregs_
1e644                 | _fatfs_cc_dir_find_ret
1e644     2D 00 64 FD | 	ret
1e648                 | 
1e648                 | _fatfs_cc_dir_register
1e648     03 4C 05 F6 | 	mov	COUNT_, #3
1e64c     A9 00 A0 FD | 	call	#pushregs_
1e650     3A 8D 02 F6 | 	mov	local01, arg01
1e654     46 8F 02 FB | 	rdlong	local02, local01
1e658     46 75 02 F6 | 	mov	arg01, local01
1e65c     01 76 06 F6 | 	mov	arg02, #1
1e660     BC FC BF FD | 	call	#_fatfs_cc_dir_alloc
1e664     1A 91 0A F6 | 	mov	local03, result1 wz
1e668     4C 00 90 5D |  if_ne	jmp	#LR__1123
1e66c     18 8C 06 F1 | 	add	local01, #24
1e670     46 77 02 FB | 	rdlong	arg02, local01
1e674     18 8C 86 F1 | 	sub	local01, #24
1e678     47 75 02 F6 | 	mov	arg01, local02
1e67c     28 EF BF FD | 	call	#_fatfs_cc_move_window
1e680     1A 91 0A F6 | 	mov	local03, result1 wz
1e684     30 00 90 5D |  if_ne	jmp	#LR__1122
1e688     1C 8C 06 F1 | 	add	local01, #28
1e68c     46 75 02 FB | 	rdlong	arg01, local01
1e690     00 76 06 F6 | 	mov	arg02, #0
1e694     20 78 06 F6 | 	mov	arg03, #32
1e698     99 00 A0 FD | 	call	#\builtin_bytefill_
1e69c     46 75 02 FB | 	rdlong	arg01, local01
1e6a0     04 8C 06 F1 | 	add	local01, #4
1e6a4     46 77 02 F6 | 	mov	arg02, local01
1e6a8     0B 78 06 F6 | 	mov	arg03, #11
1e6ac     A8 74 B0 FD | 	call	#__system____builtin_memmove
1e6b0     03 8E 06 F1 | 	add	local02, #3
1e6b4     47 03 48 FC | 	wrbyte	#1, local02
1e6b8                 | LR__1122
1e6b8                 | LR__1123
1e6b8                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e6b8                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e6b8                 | ' #line 2540 "ff.c"
1e6b8                 | ' 			fs->wflag = 1;
1e6b8                 | ' 		}
1e6b8                 | ' 	}
1e6b8                 | ' 
1e6b8                 | ' 	return res;
1e6b8     48 35 02 F6 | 	mov	result1, local03
1e6bc     A8 F0 03 F6 | 	mov	ptra, fp
1e6c0     B3 00 A0 FD | 	call	#popregs_
1e6c4                 | _fatfs_cc_dir_register_ret
1e6c4     2D 00 64 FD | 	ret
1e6c8                 | 
1e6c8                 | _fatfs_cc_dir_remove
1e6c8     02 4C 05 F6 | 	mov	COUNT_, #2
1e6cc     A9 00 A0 FD | 	call	#pushregs_
1e6d0     3A 8D 02 F6 | 	mov	local01, arg01
1e6d4     46 8F 02 FB | 	rdlong	local02, local01
1e6d8     18 8C 06 F1 | 	add	local01, #24
1e6dc     46 77 02 FB | 	rdlong	arg02, local01
1e6e0     18 8C 86 F1 | 	sub	local01, #24
1e6e4     47 75 02 F6 | 	mov	arg01, local02
1e6e8     BC EE BF FD | 	call	#_fatfs_cc_move_window
1e6ec     00 34 4E F2 | 	cmps	result1, #0 wz
1e6f0     1C 8C 06 A1 |  if_e	add	local01, #28
1e6f4     46 8D 02 AB |  if_e	rdlong	local01, local01
1e6f8     46 CB 49 AC |  if_e	wrbyte	#229, local01
1e6fc     03 8E 06 A1 |  if_e	add	local02, #3
1e700     47 03 48 AC |  if_e	wrbyte	#1, local02
1e704                 | ' 		dp->dir[ 0 ] =  0xE5 ;
1e704                 | ' 		fs->wflag = 1;
1e704                 | ' 	}
1e704                 | ' 
1e704                 | ' 
1e704                 | ' 	return res;
1e704     A8 F0 03 F6 | 	mov	ptra, fp
1e708     B3 00 A0 FD | 	call	#popregs_
1e70c                 | _fatfs_cc_dir_remove_ret
1e70c     2D 00 64 FD | 	ret
1e710                 | 
1e710                 | _fatfs_cc_get_fileinfo
1e710     07 4C 05 F6 | 	mov	COUNT_, #7
1e714     A9 00 A0 FD | 	call	#pushregs_
1e718     3A 8D 02 F6 | 	mov	local01, arg01
1e71c     3B 8F 02 F6 | 	mov	local02, arg02
1e720     0C 8E 06 F1 | 	add	local02, #12
1e724     47 01 48 FC | 	wrbyte	#0, local02
1e728     0C 8E 86 F1 | 	sub	local02, #12
1e72c     18 8C 06 F1 | 	add	local01, #24
1e730     46 91 02 FB | 	rdlong	local03, local01
1e734     18 8C 86 F1 | 	sub	local01, #24
1e738     48 93 0A F6 | 	mov	local04, local03 wz
1e73c     E4 00 90 AD |  if_e	jmp	#LR__1127
1e740     00 94 06 F6 | 	mov	local05, #0
1e744     00 96 06 F6 | 	mov	local06, #0
1e748                 | ' #line 2708 "ff.c"
1e748                 | ' 	si = di = 0;
1e748                 | ' 	while (si < 11) {
1e748                 | LR__1124
1e748     0B 96 16 F2 | 	cmp	local06, #11 wc
1e74c     70 00 90 3D |  if_ae	jmp	#LR__1126
1e750     1C 8C 06 F1 | 	add	local01, #28
1e754     46 93 02 FB | 	rdlong	local04, local01
1e758     1C 8C 86 F1 | 	sub	local01, #28
1e75c     4B 91 02 F6 | 	mov	local03, local06
1e760     49 91 02 F1 | 	add	local03, local04
1e764     48 99 C2 FA | 	rdbyte	local07, local03
1e768     4C 93 E2 F8 | 	getbyte	local04, local07, #0
1e76c     20 92 0E F2 | 	cmp	local04, #32 wz
1e770     01 96 06 F1 | 	add	local06, #1
1e774     D0 FF 9F AD |  if_e	jmp	#LR__1124
1e778     4C 93 E2 F8 | 	getbyte	local04, local07, #0
1e77c     05 92 0E F2 | 	cmp	local04, #5 wz
1e780     E5 98 06 A6 |  if_e	mov	local07, #229
1e784     09 96 0E F2 | 	cmp	local06, #9 wz
1e788     18 00 90 5D |  if_ne	jmp	#LR__1125
1e78c     4A 93 02 F6 | 	mov	local04, local05
1e790     0C 8E 06 F1 | 	add	local02, #12
1e794     47 93 02 F1 | 	add	local04, local02
1e798     49 5D 48 FC | 	wrbyte	#46, local04
1e79c     01 94 06 F1 | 	add	local05, #1
1e7a0     0C 8E 86 F1 | 	sub	local02, #12
1e7a4                 | LR__1125
1e7a4     4A 93 02 F6 | 	mov	local04, local05
1e7a8     0C 8E 06 F1 | 	add	local02, #12
1e7ac     47 93 02 F1 | 	add	local04, local02
1e7b0     49 99 42 FC | 	wrbyte	local07, local04
1e7b4     01 94 06 F1 | 	add	local05, #1
1e7b8     0C 8E 86 F1 | 	sub	local02, #12
1e7bc     88 FF 9F FD | 	jmp	#LR__1124
1e7c0                 | LR__1126
1e7c0     0C 8E 06 F1 | 	add	local02, #12
1e7c4     47 95 02 F1 | 	add	local05, local02
1e7c8     4A 01 48 FC | 	wrbyte	#0, local05
1e7cc     1C 8C 06 F1 | 	add	local01, #28
1e7d0     46 91 02 FB | 	rdlong	local03, local01
1e7d4     0B 90 06 F1 | 	add	local03, #11
1e7d8     48 93 C2 FA | 	rdbyte	local04, local03
1e7dc     3F 92 06 F5 | 	and	local04, #63
1e7e0     04 8E 86 F1 | 	sub	local02, #4
1e7e4     47 93 42 FC | 	wrbyte	local04, local02
1e7e8     08 8E 86 F1 | 	sub	local02, #8
1e7ec     46 75 02 FB | 	rdlong	arg01, local01
1e7f0     1C 74 06 F1 | 	add	arg01, #28
1e7f4                 | ' {
1e7f4                 | ' 
1e7f4                 | ' 	return *((DWORD*)ptr);
1e7f4     3A 35 02 FB | 	rdlong	result1, arg01
1e7f8     47 35 62 FC | 	wrlong	result1, local02
1e7fc     46 75 02 FB | 	rdlong	arg01, local01
1e800     16 74 06 F1 | 	add	arg01, #22
1e804                 | ' {
1e804                 | ' 
1e804                 | ' 	return *((WORD*)ptr);
1e804     3A 35 E2 FA | 	rdword	result1, arg01
1e808     06 8E 06 F1 | 	add	local02, #6
1e80c     47 35 52 FC | 	wrword	result1, local02
1e810     46 75 02 FB | 	rdlong	arg01, local01
1e814     18 74 06 F1 | 	add	arg01, #24
1e818                 | ' {
1e818                 | ' 
1e818                 | ' 	return *((WORD*)ptr);
1e818     3A 35 E2 FA | 	rdword	result1, arg01
1e81c     02 8E 86 F1 | 	sub	local02, #2
1e820     47 35 52 FC | 	wrword	result1, local02
1e824                 | LR__1127
1e824     A8 F0 03 F6 | 	mov	ptra, fp
1e828     B3 00 A0 FD | 	call	#popregs_
1e82c                 | _fatfs_cc_get_fileinfo_ret
1e82c     2D 00 64 FD | 	ret
1e830                 | 
1e830                 | _fatfs_cc_create_name
1e830     0F 4C 05 F6 | 	mov	COUNT_, #15
1e834     A9 00 A0 FD | 	call	#pushregs_
1e838     3A 8D 02 F6 | 	mov	local01, arg01
1e83c     3B 8F 02 F6 | 	mov	local02, arg02
1e840     47 91 02 FB | 	rdlong	local03, local02
1e844     20 8C 06 F1 | 	add	local01, #32
1e848     46 93 02 F6 | 	mov	local04, local01
1e84c     49 75 02 F6 | 	mov	arg01, local04
1e850     20 76 06 F6 | 	mov	arg02, #32
1e854     0B 78 06 F6 | 	mov	arg03, #11
1e858     3A 95 02 F6 | 	mov	local05, arg01
1e85c     99 00 A0 FD | 	call	#\builtin_bytefill_
1e860     4A 35 02 F6 | 	mov	result1, local05
1e864     00 96 06 F6 | 	mov	local06, #0
1e868     00 98 06 F6 | 	mov	local07, #0
1e86c     08 9A 06 F6 | 	mov	local08, #8
1e870                 | ' 
1e870                 | ' 
1e870                 | ' 	p = *path; sfn = dp->fn;
1e870                 | ' 	__builtin_memset(sfn, ' ', 11) ;
1e870                 | ' 	si = i = 0; ni = 8;
1e870                 | ' #line 2970 "ff.c"
1e870                 | ' 	for (;;) {
1e870     20 8C 86 F1 | 	sub	local01, #32
1e874                 | LR__1128
1e874     4C 8D 02 F6 | 	mov	local01, local07
1e878     48 8D 02 F1 | 	add	local01, local03
1e87c     46 9D C2 FA | 	rdbyte	local09, local01
1e880     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1e884     21 8C 16 F2 | 	cmp	local01, #33 wc
1e888     01 98 06 F1 | 	add	local07, #1
1e88c     60 01 90 CD |  if_b	jmp	#LR__1136
1e890     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1e894     2F 8C 0E F2 | 	cmp	local01, #47 wz
1e898     4E 9F 02 56 |  if_ne	mov	local10, local09
1e89c     4F 9F E2 58 |  if_ne	getbyte	local10, local10, #0
1e8a0     5C 9E 0E 52 |  if_ne	cmp	local10, #92 wz
1e8a4     2C 00 90 5D |  if_ne	jmp	#LR__1130
1e8a8                 | ' 			while ( ((p[si]) == '/' || (p[si]) == '\\') ) si++;
1e8a8                 | LR__1129
1e8a8     4C 9F 02 F6 | 	mov	local10, local07
1e8ac     48 9F 02 F1 | 	add	local10, local03
1e8b0     4F 9F C2 FA | 	rdbyte	local10, local10
1e8b4     2F 9E 0E F2 | 	cmp	local10, #47 wz
1e8b8     4C A1 02 56 |  if_ne	mov	local11, local07
1e8bc     48 A1 02 51 |  if_ne	add	local11, local03
1e8c0     50 A3 C2 5A |  if_ne	rdbyte	local12, local11
1e8c4     5C A2 0E 52 |  if_ne	cmp	local12, #92 wz
1e8c8     24 01 90 5D |  if_ne	jmp	#LR__1136
1e8cc     01 98 06 F1 | 	add	local07, #1
1e8d0     D4 FF 9F FD | 	jmp	#LR__1129
1e8d4                 | ' 			break;
1e8d4                 | LR__1130
1e8d4     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1e8d8     2E 8C 0E F2 | 	cmp	local01, #46 wz
1e8dc     4D 97 12 52 |  if_ne	cmp	local06, local08 wc
1e8e0     28 00 90 4D |  if_c_and_nz	jmp	#LR__1133
1e8e4     0B 9A 0E F2 | 	cmp	local08, #11 wz
1e8e8     0C 00 90 AD |  if_e	jmp	#LR__1131
1e8ec     4E 9D E2 F8 | 	getbyte	local09, local09, #0
1e8f0     2E 9C 0E F2 | 	cmp	local09, #46 wz
1e8f4     08 00 90 AD |  if_e	jmp	#LR__1132
1e8f8                 | LR__1131
1e8f8     06 34 06 F6 | 	mov	result1, #6
1e8fc     3C 01 90 FD | 	jmp	#LR__1137
1e900                 | LR__1132
1e900     08 96 06 F6 | 	mov	local06, #8
1e904     0B 9A 06 F6 | 	mov	local08, #11
1e908                 | ' 			i = 8; ni = 11;
1e908                 | ' 			continue;
1e908     68 FF 9F FD | 	jmp	#LR__1128
1e90c                 | LR__1133
1e90c     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1e910     80 8C 16 F2 | 	cmp	local01, #128 wc
1e914     4E 9D E2 38 |  if_ae	getbyte	local09, local09, #0
1e918     7F 9C 06 35 |  if_ae	and	local09, #127
1e91c     F0 9C 02 31 |  if_ae	add	local09, ptr__fatfs_cc_dat__
1e920     4E 9D C2 3A |  if_ae	rdbyte	local09, local09
1e924     4E 75 02 F6 | 	mov	arg01, local09
1e928     07 74 4E F7 | 	zerox	arg01, #7 wz
1e92c     00 34 06 56 |  if_ne	mov	result1, #0
1e930                 | ' 
1e930                 | ' 	return 0;
1e930     00 34 06 A6 |  if_e	mov	result1, #0
1e934     00 34 0E F2 | 	cmp	result1, #0 wz
1e938     60 00 90 AD |  if_e	jmp	#LR__1134
1e93c     4C 8D 02 F6 | 	mov	local01, local07
1e940     48 A3 02 F6 | 	mov	local12, local03
1e944     48 8D 02 F1 | 	add	local01, local03
1e948     46 A5 C2 FA | 	rdbyte	local13, local01
1e94c     52 75 02 F6 | 	mov	arg01, local13
1e950     07 74 4E F7 | 	zerox	arg01, #7 wz
1e954     00 34 06 56 |  if_ne	mov	result1, #0
1e958                 | ' 
1e958                 | ' 	return 0;
1e958     00 34 06 A6 |  if_e	mov	result1, #0
1e95c     00 34 4E F2 | 	cmps	result1, #0 wz
1e960     01 98 06 F1 | 	add	local07, #1
1e964     4D 9F 02 56 |  if_ne	mov	local10, local08
1e968     01 9E 86 51 |  if_ne	sub	local10, #1
1e96c     4F 97 12 52 |  if_ne	cmp	local06, local10 wc
1e970     06 34 06 B6 |  if_nc_or_z	mov	result1, #6
1e974     C4 00 90 BD |  if_nc_or_z	jmp	#LR__1137
1e978     4B 8D 02 F6 | 	mov	local01, local06
1e97c     49 8D 02 F1 | 	add	local01, local04
1e980     46 9D 42 FC | 	wrbyte	local09, local01
1e984     01 96 06 F1 | 	add	local06, #1
1e988     4B 9D 02 F6 | 	mov	local09, local06
1e98c     49 9D 02 F1 | 	add	local09, local04
1e990     4E A5 42 FC | 	wrbyte	local13, local09
1e994     01 96 06 F1 | 	add	local06, #1
1e998     D8 FE 9F FD | 	jmp	#LR__1128
1e99c                 | LR__1134
1e99c     58 01 00 FF 
1e9a0     5C 75 06 F6 | 	mov	arg01, ##@LR__2322
1e9a4     4E 77 E2 F8 | 	getbyte	arg02, local09, #0
1e9a8     10 E0 BF FD | 	call	#_fatfs_cc_strchr
1e9ac     00 34 0E F2 | 	cmp	result1, #0 wz
1e9b0     06 34 06 56 |  if_ne	mov	result1, #6
1e9b4     84 00 90 5D |  if_ne	jmp	#LR__1137
1e9b8     4E A7 E2 F8 | 	getbyte	local14, local09, #0
1e9bc     61 A6 16 F2 | 	cmp	local14, #97 wc
1e9c0     18 00 90 CD |  if_b	jmp	#LR__1135
1e9c4     4E 9F E2 F8 | 	getbyte	local10, local09, #0
1e9c8     7B 9E 16 F2 | 	cmp	local10, #123 wc
1e9cc     4E A7 02 C6 |  if_b	mov	local14, local09
1e9d0     53 A7 E2 C8 |  if_b	getbyte	local14, local14, #0
1e9d4     20 A6 86 C1 |  if_b	sub	local14, #32
1e9d8     53 9D 02 C6 |  if_b	mov	local09, local14
1e9dc                 | LR__1135
1e9dc     4B A9 02 F6 | 	mov	local15, local06
1e9e0     49 A9 02 F1 | 	add	local15, local04
1e9e4     54 9D 42 FC | 	wrbyte	local09, local15
1e9e8     01 96 06 F1 | 	add	local06, #1
1e9ec     84 FE 9F FD | 	jmp	#LR__1128
1e9f0                 | LR__1136
1e9f0     4C A9 02 F6 | 	mov	local15, local07
1e9f4     48 A9 02 F1 | 	add	local15, local03
1e9f8     47 A9 62 FC | 	wrlong	local15, local02
1e9fc     00 96 0E F2 | 	cmp	local06, #0 wz
1ea00     06 34 06 A6 |  if_e	mov	result1, #6
1ea04     34 00 90 AD |  if_e	jmp	#LR__1137
1ea08     49 A7 C2 FA | 	rdbyte	local14, local04
1ea0c     E5 A6 0E F2 | 	cmp	local14, #229 wz
1ea10     49 0B 48 AC |  if_e	wrbyte	#5, local04
1ea14     4E 9F E2 F8 | 	getbyte	local10, local09, #0
1ea18     21 9E 16 F2 | 	cmp	local10, #33 wc
1ea1c     48 99 02 31 |  if_ae	add	local07, local03
1ea20     4C A9 C2 3A |  if_ae	rdbyte	local15, local07
1ea24     21 A8 16 32 |  if_ae	cmp	local15, #33 wc
1ea28     04 A6 06 C6 |  if_b	mov	local14, #4
1ea2c     00 A6 06 36 |  if_ae	mov	local14, #0
1ea30     0B 92 06 F1 | 	add	local04, #11
1ea34     49 A7 42 FC | 	wrbyte	local14, local04
1ea38                 | ' 	sfn[ 11 ] = (c <= ' ' || p[si] <= ' ') ?  0x04  : 0;
1ea38                 | ' 
1ea38                 | ' 	return FR_OK;
1ea38     00 34 06 F6 | 	mov	result1, #0
1ea3c                 | LR__1137
1ea3c     A8 F0 03 F6 | 	mov	ptra, fp
1ea40     B3 00 A0 FD | 	call	#popregs_
1ea44                 | _fatfs_cc_create_name_ret
1ea44     2D 00 64 FD | 	ret
1ea48                 | 
1ea48                 | _fatfs_cc_follow_path
1ea48     04 4C 05 F6 | 	mov	COUNT_, #4
1ea4c     A9 00 A0 FD | 	call	#pushregs_
1ea50     18 F0 07 F1 | 	add	ptra, #24
1ea54     04 50 05 F1 | 	add	fp, #4
1ea58     A8 74 62 FC | 	wrlong	arg01, fp
1ea5c     04 50 05 F1 | 	add	fp, #4
1ea60     A8 76 62 FC | 	wrlong	arg02, fp
1ea64     04 50 85 F1 | 	sub	fp, #4
1ea68     A8 34 02 FB | 	rdlong	result1, fp
1ea6c     1A 8D 02 FB | 	rdlong	local01, result1
1ea70     10 50 05 F1 | 	add	fp, #16
1ea74     A8 8C 62 FC | 	wrlong	local01, fp
1ea78     14 50 85 F1 | 	sub	fp, #20
1ea7c     C8 15 9E FE | 	loc	pa,	#(@LR__1140-@LR__1138)
1ea80     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1ea84                 | ' )
1ea84                 | ' {
1ea84                 | ' 	FRESULT res;
1ea84                 | ' 	BYTE ns;
1ea84                 | ' 	FATFS *fs = dp->obj.fs;
1ea84                 | ' #line 3034 "ff.c"
1ea84                 | ' 	{
1ea84                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1ea84                 | LR__1138
1ea84     08 50 05 F1 | 	add	fp, #8
1ea88     A8 8C 02 FB | 	rdlong	local01, fp
1ea8c     08 50 85 F1 | 	sub	fp, #8
1ea90     46 8D C2 FA | 	rdbyte	local01, local01
1ea94     2F 8C 0E F2 | 	cmp	local01, #47 wz
1ea98     18 00 90 AD |  if_e	jmp	#LR__1139
1ea9c     08 50 05 F1 | 	add	fp, #8
1eaa0     A8 8C 02 FB | 	rdlong	local01, fp
1eaa4     08 50 85 F1 | 	sub	fp, #8
1eaa8     46 8D C2 FA | 	rdbyte	local01, local01
1eaac     5C 8C 0E F2 | 	cmp	local01, #92 wz
1eab0     18 00 90 5D |  if_ne	jmp	#LR__1141
1eab4                 | LR__1139
1eab4     08 50 05 F1 | 	add	fp, #8
1eab8     A8 8C 02 FB | 	rdlong	local01, fp
1eabc     01 8C 06 F1 | 	add	local01, #1
1eac0     A8 8C 62 FC | 	wrlong	local01, fp
1eac4     08 50 85 F1 | 	sub	fp, #8
1eac8     B8 FF 9F FD | 	jmp	#LR__1138
1eacc                 | LR__1140
1eacc                 | LR__1141
1eacc     04 50 05 F1 | 	add	fp, #4
1ead0     A8 8C 02 FB | 	rdlong	local01, fp
1ead4     08 8C 06 F1 | 	add	local01, #8
1ead8     46 01 68 FC | 	wrlong	#0, local01
1eadc     04 50 05 F1 | 	add	fp, #4
1eae0     A8 8C 02 FB | 	rdlong	local01, fp
1eae4     08 50 85 F1 | 	sub	fp, #8
1eae8     46 8D C2 FA | 	rdbyte	local01, local01
1eaec     20 8C 16 F2 | 	cmp	local01, #32 wc
1eaf0     30 00 90 3D |  if_ae	jmp	#LR__1142
1eaf4     04 50 05 F1 | 	add	fp, #4
1eaf8     A8 8C 02 FB | 	rdlong	local01, fp
1eafc     2B 8C 06 F1 | 	add	local01, #43
1eb00     46 01 49 FC | 	wrbyte	#128, local01
1eb04     A8 74 02 FB | 	rdlong	arg01, fp
1eb08     04 50 85 F1 | 	sub	fp, #4
1eb0c     00 76 06 F6 | 	mov	arg02, #0
1eb10     D8 F4 BF FD | 	call	#_fatfs_cc_dir_sdi
1eb14     0C 50 05 F1 | 	add	fp, #12
1eb18     A8 34 62 FC | 	wrlong	result1, fp
1eb1c     0C 50 85 F1 | 	sub	fp, #12
1eb20     1C 01 90 FD | 	jmp	#LR__1146
1eb24                 | LR__1142
1eb24                 | ' 		for (;;) {
1eb24                 | LR__1143
1eb24     04 50 05 F1 | 	add	fp, #4
1eb28     A8 74 02 FB | 	rdlong	arg01, fp
1eb2c     04 50 05 F1 | 	add	fp, #4
1eb30     A8 76 02 F6 | 	mov	arg02, fp
1eb34     08 50 85 F1 | 	sub	fp, #8
1eb38     F4 FC BF FD | 	call	#_fatfs_cc_create_name
1eb3c     0C 50 05 F1 | 	add	fp, #12
1eb40     A8 34 62 FC | 	wrlong	result1, fp
1eb44     00 34 4E F2 | 	cmps	result1, #0 wz
1eb48     0C 50 85 F1 | 	sub	fp, #12
1eb4c     F0 00 90 5D |  if_ne	jmp	#LR__1145
1eb50     04 50 05 F1 | 	add	fp, #4
1eb54     A8 74 02 FB | 	rdlong	arg01, fp
1eb58     04 50 85 F1 | 	sub	fp, #4
1eb5c     F0 F9 BF FD | 	call	#_fatfs_cc_dir_find
1eb60     0C 50 05 F1 | 	add	fp, #12
1eb64     A8 34 62 FC | 	wrlong	result1, fp
1eb68     08 50 85 F1 | 	sub	fp, #8
1eb6c     A8 8C 02 FB | 	rdlong	local01, fp
1eb70     2B 8C 06 F1 | 	add	local01, #43
1eb74     46 8D C2 FA | 	rdbyte	local01, local01
1eb78     0C 50 05 F1 | 	add	fp, #12
1eb7c     A8 8C 42 FC | 	wrbyte	local01, fp
1eb80     04 50 85 F1 | 	sub	fp, #4
1eb84     A8 8C 0A FB | 	rdlong	local01, fp wz
1eb88     0C 50 85 F1 | 	sub	fp, #12
1eb8c     34 00 90 AD |  if_e	jmp	#LR__1144
1eb90     0C 50 05 F1 | 	add	fp, #12
1eb94     A8 8C 02 FB | 	rdlong	local01, fp
1eb98     0C 50 85 F1 | 	sub	fp, #12
1eb9c     04 8C 0E F2 | 	cmp	local01, #4 wz
1eba0     9C 00 90 5D |  if_ne	jmp	#LR__1145
1eba4     10 50 05 F1 | 	add	fp, #16
1eba8     A8 8C C2 FA | 	rdbyte	local01, fp
1ebac     10 50 85 F1 | 	sub	fp, #16
1ebb0     04 8C CE F7 | 	test	local01, #4 wz
1ebb4     0C 50 05 A1 |  if_e	add	fp, #12
1ebb8     A8 0A 68 AC |  if_e	wrlong	#5, fp
1ebbc     0C 50 85 A1 |  if_e	sub	fp, #12
1ebc0                 | ' 					}
1ebc0                 | ' 				}
1ebc0                 | ' 				break;
1ebc0     7C 00 90 FD | 	jmp	#LR__1145
1ebc4                 | LR__1144
1ebc4     10 50 05 F1 | 	add	fp, #16
1ebc8     A8 8C C2 FA | 	rdbyte	local01, fp
1ebcc     10 50 85 F1 | 	sub	fp, #16
1ebd0     04 8C CE F7 | 	test	local01, #4 wz
1ebd4     68 00 90 5D |  if_ne	jmp	#LR__1145
1ebd8     04 50 05 F1 | 	add	fp, #4
1ebdc     A8 76 02 FB | 	rdlong	arg02, fp
1ebe0     04 50 85 F1 | 	sub	fp, #4
1ebe4     06 76 06 F1 | 	add	arg02, #6
1ebe8     3B 77 C2 FA | 	rdbyte	arg02, arg02
1ebec     10 76 CE F7 | 	test	arg02, #16 wz
1ebf0     0C 50 05 A1 |  if_e	add	fp, #12
1ebf4     A8 0A 68 AC |  if_e	wrlong	#5, fp
1ebf8     0C 50 85 A1 |  if_e	sub	fp, #12
1ebfc                 | ' 				res = FR_NO_PATH; break;
1ebfc     40 00 90 AD |  if_e	jmp	#LR__1145
1ec00     04 50 05 F1 | 	add	fp, #4
1ec04     A8 8E 02 FB | 	rdlong	local02, fp
1ec08     47 91 02 F6 | 	mov	local03, local02
1ec0c     10 50 05 F1 | 	add	fp, #16
1ec10     A8 76 02 FB | 	rdlong	arg02, fp
1ec14     3B 75 02 F6 | 	mov	arg01, arg02
1ec18     30 76 06 F1 | 	add	arg02, #48
1ec1c     14 50 85 F1 | 	sub	fp, #20
1ec20     10 8E 06 F1 | 	add	local02, #16
1ec24     47 93 02 FB | 	rdlong	local04, local02
1ec28     FF 93 06 F5 | 	and	local04, #511
1ec2c     49 77 02 F1 | 	add	arg02, local04
1ec30     AC F7 BF FD | 	call	#_fatfs_cc_ld_clust
1ec34     08 90 06 F1 | 	add	local03, #8
1ec38     48 35 62 FC | 	wrlong	result1, local03
1ec3c     E4 FE 9F FD | 	jmp	#LR__1143
1ec40                 | LR__1145
1ec40                 | LR__1146
1ec40                 | ' 			}
1ec40                 | ' #line 3090 "ff.c"
1ec40                 | ' 			{
1ec40                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1ec40                 | ' 			}
1ec40                 | ' 		}
1ec40                 | ' 	}
1ec40                 | ' 
1ec40                 | ' 	return res;
1ec40     0C 50 05 F1 | 	add	fp, #12
1ec44     A8 34 02 FB | 	rdlong	result1, fp
1ec48     0C 50 85 F1 | 	sub	fp, #12
1ec4c     A8 F0 03 F6 | 	mov	ptra, fp
1ec50     B3 00 A0 FD | 	call	#popregs_
1ec54                 | _fatfs_cc_follow_path_ret
1ec54     2D 00 64 FD | 	ret
1ec58                 | 
1ec58                 | _fatfs_cc_get_ldnumber
1ec58     3A 3B 02 F6 | 	mov	_var01, arg01
1ec5c     01 3C 66 F6 | 	neg	_var02, #1
1ec60     1D 3F 0A FB | 	rdlong	_var03, _var01 wz
1ec64     1F 41 02 F6 | 	mov	_var04, _var03
1ec68     01 34 66 A6 |  if_e	neg	result1, #1
1ec6c     80 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1ec70     AC 13 9E FE | 	loc	pa,	#(@LR__1148-@LR__1147)
1ec74     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1ec78                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 0 ? ' ' : '!'))  && tc != ':');
1ec78                 | LR__1147
1ec78     20 43 C2 FA | 	rdbyte	_var05, _var04
1ec7c     21 45 E2 F8 | 	getbyte	_var06, _var05, #0
1ec80     21 44 16 F2 | 	cmp	_var06, #33 wc
1ec84     01 40 06 F1 | 	add	_var04, #1
1ec88     21 47 02 36 |  if_ae	mov	_var07, _var05
1ec8c     23 47 E2 38 |  if_ae	getbyte	_var07, _var07, #0
1ec90     3A 46 0E 32 |  if_ae	cmp	_var07, #58 wz
1ec94     E0 FF 9F 1D |  if_a	jmp	#LR__1147
1ec98                 | LR__1148
1ec98     21 45 E2 F8 | 	getbyte	_var06, _var05, #0
1ec9c     3A 44 0E F2 | 	cmp	_var06, #58 wz
1eca0     48 00 90 5D |  if_ne	jmp	#LR__1150
1eca4     01 48 06 F6 | 	mov	_var08, #1
1eca8     1F 45 C2 FA | 	rdbyte	_var06, _var03
1ecac     30 44 16 F2 | 	cmp	_var06, #48 wc
1ecb0     24 00 90 CD |  if_b	jmp	#LR__1149
1ecb4     1F 47 C2 FA | 	rdbyte	_var07, _var03
1ecb8     3A 46 16 F2 | 	cmp	_var07, #58 wc
1ecbc     18 00 90 3D |  if_ae	jmp	#LR__1149
1ecc0     1F 4B 02 F6 | 	mov	_var09, _var03
1ecc4     02 4A 06 F1 | 	add	_var09, #2
1ecc8     20 4B 0A F2 | 	cmp	_var09, _var04 wz
1eccc     1F 45 C2 AA |  if_e	rdbyte	_var06, _var03
1ecd0     30 44 86 A1 |  if_e	sub	_var06, #48
1ecd4     22 49 02 A6 |  if_e	mov	_var08, _var06
1ecd8                 | LR__1149
1ecd8     01 48 56 F2 | 	cmps	_var08, #1 wc
1ecdc     24 3D 02 C6 |  if_b	mov	_var02, _var08
1ece0     1D 41 62 CC |  if_b	wrlong	_var04, _var01
1ece4                 | ' 			vol = i;
1ece4                 | ' 			*path = tt;
1ece4                 | ' 		}
1ece4                 | ' 		return vol;
1ece4     1E 35 02 F6 | 	mov	result1, _var02
1ece8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1ecec                 | LR__1150
1ecec                 | ' 	}
1ecec                 | ' #line 3170 "ff.c"
1ecec                 | ' 	vol = 0;
1ecec                 | ' 
1ecec                 | ' 	return vol;
1ecec     00 34 06 F6 | 	mov	result1, #0
1ecf0                 | _fatfs_cc_get_ldnumber_ret
1ecf0     2D 00 64 FD | 	ret
1ecf4                 | 
1ecf4                 | _fatfs_cc_check_fs
1ecf4     17 4C 05 F6 | 	mov	COUNT_, #23
1ecf8     A9 00 A0 FD | 	call	#pushregs_
1ecfc     3A 8D 02 F6 | 	mov	local01, arg01
1ed00     3B 8F 02 F6 | 	mov	local02, arg02
1ed04     03 8C 06 F1 | 	add	local01, #3
1ed08     46 01 48 FC | 	wrbyte	#0, local01
1ed0c     29 8C 06 F1 | 	add	local01, #41
1ed10     FF FF FF FF 
1ed14     46 FF 6B FC | 	wrlong	##-1, local01
1ed18     2C 8C 86 F1 | 	sub	local01, #44
1ed1c     47 77 02 F6 | 	mov	arg02, local02
1ed20     46 75 02 F6 | 	mov	arg01, local01
1ed24     80 E8 BF FD | 	call	#_fatfs_cc_move_window
1ed28     00 34 0E F2 | 	cmp	result1, #0 wz
1ed2c     04 34 06 56 |  if_ne	mov	result1, #4
1ed30     B8 01 90 5D |  if_ne	jmp	#LR__1156
1ed34     30 8C 06 F1 | 	add	local01, #48
1ed38     46 75 02 F6 | 	mov	arg01, local01
1ed3c     FE 75 06 F1 | 	add	arg01, #510
1ed40                 | ' {
1ed40                 | ' 
1ed40                 | ' 	return *((WORD*)ptr);
1ed40     3A 91 E2 FA | 	rdword	local03, arg01
1ed44     46 93 C2 FA | 	rdbyte	local04, local01
1ed48     30 8C 86 F1 | 	sub	local01, #48
1ed4c     49 95 E2 F8 | 	getbyte	local05, local04, #0
1ed50     EB 94 0E F2 | 	cmp	local05, #235 wz
1ed54     18 00 90 AD |  if_e	jmp	#LR__1151
1ed58     49 35 E2 F8 | 	getbyte	result1, local04, #0
1ed5c     E9 34 0E F2 | 	cmp	result1, #233 wz
1ed60     49 97 02 56 |  if_ne	mov	local06, local04
1ed64     4B 97 E2 58 |  if_ne	getbyte	local06, local06, #0
1ed68     E8 96 0E 52 |  if_ne	cmp	local06, #232 wz
1ed6c     64 01 90 5D |  if_ne	jmp	#LR__1155
1ed70                 | LR__1151
1ed70     48 95 32 F9 | 	getword	local05, local03, #0
1ed74     55 00 00 FF 
1ed78     55 94 0E F2 | 	cmp	local05, ##43605 wz
1ed7c     2C 00 90 5D |  if_ne	jmp	#LR__1152
1ed80     30 8C 06 F1 | 	add	local01, #48
1ed84     46 75 02 F6 | 	mov	arg01, local01
1ed88     30 8C 86 F1 | 	sub	local01, #48
1ed8c     52 74 06 F1 | 	add	arg01, #82
1ed90     58 01 00 FF 
1ed94     6B 77 06 F6 | 	mov	arg02, ##@LR__2323
1ed98     08 78 06 F6 | 	mov	arg03, #8
1ed9c     38 DB BF FD | 	call	#_fatfs_cc_memcmp
1eda0     00 34 0E F2 | 	cmp	result1, #0 wz
1eda4                 | ' 			return 0;
1eda4     00 34 06 A6 |  if_e	mov	result1, #0
1eda8     40 01 90 AD |  if_e	jmp	#LR__1156
1edac                 | LR__1152
1edac     30 8C 06 F1 | 	add	local01, #48
1edb0     46 75 02 F6 | 	mov	arg01, local01
1edb4     0B 74 06 F1 | 	add	arg01, #11
1edb8                 | ' {
1edb8                 | ' 
1edb8                 | ' 	return *((WORD*)ptr);
1edb8     3A 99 E2 FA | 	rdword	local07, arg01
1edbc     0D 8C 06 F1 | 	add	local01, #13
1edc0     46 93 C2 FA | 	rdbyte	local04, local01
1edc4     3D 8C 86 F1 | 	sub	local01, #61
1edc8     4C 95 32 F9 | 	getword	local05, local07, #0
1edcc     4C 9B 32 F9 | 	getword	local08, local07, #0
1edd0     01 9A 86 F1 | 	sub	local08, #1
1edd4     4D 95 0A F5 | 	and	local05, local08 wz
1edd8     F8 00 90 5D |  if_ne	jmp	#LR__1154
1eddc     4C 97 32 F9 | 	getword	local06, local07, #0
1ede0     01 00 00 FF 
1ede4     00 96 16 F2 | 	cmp	local06, ##512 wc
1ede8     E8 00 90 CD |  if_b	jmp	#LR__1154
1edec     4C 9D 32 F9 | 	getword	local09, local07, #0
1edf0     01 00 00 FF 
1edf4     01 9C 16 F2 | 	cmp	local09, ##513 wc
1edf8     D8 00 90 3D |  if_ae	jmp	#LR__1154
1edfc     49 9F 02 F6 | 	mov	local10, local04
1ee00     07 9E 4E F7 | 	zerox	local10, #7 wz
1ee04     CC 00 90 AD |  if_e	jmp	#LR__1154
1ee08     49 A1 E2 F8 | 	getbyte	local11, local04, #0
1ee0c     49 A3 E2 F8 | 	getbyte	local12, local04, #0
1ee10     01 A2 86 F1 | 	sub	local12, #1
1ee14     51 A1 0A F5 | 	and	local11, local12 wz
1ee18     B8 00 90 5D |  if_ne	jmp	#LR__1154
1ee1c     30 8C 06 F1 | 	add	local01, #48
1ee20     46 75 02 F6 | 	mov	arg01, local01
1ee24     30 8C 86 F1 | 	sub	local01, #48
1ee28     0E 74 06 F1 | 	add	arg01, #14
1ee2c                 | ' {
1ee2c                 | ' 
1ee2c                 | ' 	return *((WORD*)ptr);
1ee2c     3A A5 E2 FA | 	rdword	local13, arg01
1ee30     52 A7 02 F6 | 	mov	local14, local13
1ee34     0F A6 4E F7 | 	zerox	local14, #15 wz
1ee38     98 00 90 AD |  if_e	jmp	#LR__1154
1ee3c     40 8C 06 F1 | 	add	local01, #64
1ee40     46 A9 C2 FA | 	rdbyte	local15, local01
1ee44     40 8C 86 F1 | 	sub	local01, #64
1ee48     54 AB E2 F8 | 	getbyte	local16, local15, #0
1ee4c     01 AA 86 F1 | 	sub	local16, #1
1ee50     02 AA 16 F2 | 	cmp	local16, #2 wc
1ee54     7C 00 90 3D |  if_ae	jmp	#LR__1154
1ee58     30 8C 06 F1 | 	add	local01, #48
1ee5c     46 75 02 F6 | 	mov	arg01, local01
1ee60     30 8C 86 F1 | 	sub	local01, #48
1ee64     11 74 06 F1 | 	add	arg01, #17
1ee68                 | ' {
1ee68                 | ' 
1ee68                 | ' 	return *((WORD*)ptr);
1ee68     3A AD E2 FA | 	rdword	local17, arg01
1ee6c     56 AF 02 F6 | 	mov	local18, local17
1ee70     0F AE 4E F7 | 	zerox	local18, #15 wz
1ee74     5C 00 90 AD |  if_e	jmp	#LR__1154
1ee78     30 8C 06 F1 | 	add	local01, #48
1ee7c     46 75 02 F6 | 	mov	arg01, local01
1ee80     30 8C 86 F1 | 	sub	local01, #48
1ee84     13 74 06 F1 | 	add	arg01, #19
1ee88                 | ' {
1ee88                 | ' 
1ee88                 | ' 	return *((WORD*)ptr);
1ee88     3A B1 E2 FA | 	rdword	local19, arg01
1ee8c     58 B3 32 F9 | 	getword	local20, local19, #0
1ee90     80 B2 16 F2 | 	cmp	local20, #128 wc
1ee94     24 00 90 3D |  if_ae	jmp	#LR__1153
1ee98     30 8C 06 F1 | 	add	local01, #48
1ee9c     46 B5 02 F6 | 	mov	local21, local01
1eea0     5A B7 02 F6 | 	mov	local22, local21
1eea4     20 B6 06 F1 | 	add	local22, #32
1eea8                 | ' {
1eea8                 | ' 
1eea8                 | ' 	return *((DWORD*)ptr);
1eea8     5B B9 02 FB | 	rdlong	local23, local22
1eeac     80 00 00 FF 
1eeb0     00 B8 16 F2 | 	cmp	local23, ##65536 wc
1eeb4     30 8C 86 F1 | 	sub	local01, #48
1eeb8     18 00 90 CD |  if_b	jmp	#LR__1154
1eebc                 | LR__1153
1eebc     30 8C 06 F1 | 	add	local01, #48
1eec0     46 75 02 F6 | 	mov	arg01, local01
1eec4     16 74 06 F1 | 	add	arg01, #22
1eec8                 | ' {
1eec8                 | ' 
1eec8                 | ' 	return *((WORD*)ptr);
1eec8     3A 35 EA FA | 	rdword	result1, arg01 wz
1eecc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1eecc                 | ' 			&& ld_word(fs->win +  14 ) != 0
1eecc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1eecc                 | ' 			&& ld_word(fs->win +  17 ) != 0
1eecc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1eecc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1eecc                 | ' 				return 0;
1eecc     00 34 06 56 |  if_ne	mov	result1, #0
1eed0     18 00 90 5D |  if_ne	jmp	#LR__1156
1eed4                 | LR__1154
1eed4                 | LR__1155
1eed4                 | ' 		}
1eed4                 | ' 	}
1eed4                 | ' 	return sign == 0xAA55 ? 2 : 3;
1eed4     48 9B 32 F9 | 	getword	local08, local03, #0
1eed8     55 00 00 FF 
1eedc     55 9A 0E F2 | 	cmp	local08, ##43605 wz
1eee0     02 94 06 A6 |  if_e	mov	local05, #2
1eee4     03 94 06 56 |  if_ne	mov	local05, #3
1eee8     4A 35 02 F6 | 	mov	result1, local05
1eeec                 | LR__1156
1eeec     A8 F0 03 F6 | 	mov	ptra, fp
1eef0     B3 00 A0 FD | 	call	#popregs_
1eef4                 | _fatfs_cc_check_fs_ret
1eef4     2D 00 64 FD | 	ret
1eef8                 | 
1eef8                 | _fatfs_cc_find_volume
1eef8     0C 4C 05 F6 | 	mov	COUNT_, #12
1eefc     A9 00 A0 FD | 	call	#pushregs_
1ef00     24 F0 07 F1 | 	add	ptra, #36
1ef04     3A 8D 02 F6 | 	mov	local01, arg01
1ef08     3B 8F 02 F6 | 	mov	local02, arg02
1ef0c     46 75 02 F6 | 	mov	arg01, local01
1ef10     00 76 06 F6 | 	mov	arg02, #0
1ef14     DC FD BF FD | 	call	#_fatfs_cc_check_fs
1ef18     1A 91 02 F6 | 	mov	local03, result1
1ef1c     48 93 02 F6 | 	mov	local04, local03
1ef20     02 92 0E F2 | 	cmp	local04, #2 wz
1ef24     10 00 90 AD |  if_e	jmp	#LR__1157
1ef28     03 92 16 F2 | 	cmp	local04, #3 wc
1ef2c     00 8E 0E C2 |  if_b	cmp	local02, #0 wz
1ef30     49 35 02 B6 |  if_nc_or_z	mov	result1, local04
1ef34     F8 00 90 BD |  if_nc_or_z	jmp	#LR__1165
1ef38                 | LR__1157
1ef38                 | ' 	for (i = 0; i < 4; i++) {
1ef38     00 94 06 F6 | 	mov	local05, #0
1ef3c     14 11 9E FE | 	loc	pa,	#(@LR__1159-@LR__1158)
1ef40     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1ef44                 | LR__1158
1ef44     04 94 16 F2 | 	cmp	local05, #4 wc
1ef48     4C 00 90 3D |  if_ae	jmp	#LR__1160
1ef4c     4A 91 02 F6 | 	mov	local03, local05
1ef50     02 90 66 F0 | 	shl	local03, #2
1ef54     14 50 05 F1 | 	add	fp, #20
1ef58     A8 90 02 F1 | 	add	local03, fp
1ef5c     30 8C 06 F1 | 	add	local01, #48
1ef60     46 97 02 F6 | 	mov	local06, local01
1ef64     4B 75 02 F6 | 	mov	arg01, local06
1ef68     BE 75 06 F1 | 	add	arg01, #446
1ef6c     4A 99 02 F6 | 	mov	local07, local05
1ef70     04 98 66 F0 | 	shl	local07, #4
1ef74     4C 9B 02 F6 | 	mov	local08, local07
1ef78     4C 75 02 F1 | 	add	arg01, local07
1ef7c     08 74 06 F1 | 	add	arg01, #8
1ef80                 | ' {
1ef80                 | ' 
1ef80                 | ' 	return *((DWORD*)ptr);
1ef80     3A 35 02 FB | 	rdlong	result1, arg01
1ef84     14 50 85 F1 | 	sub	fp, #20
1ef88     48 35 62 FC | 	wrlong	result1, local03
1ef8c     01 94 06 F1 | 	add	local05, #1
1ef90     30 8C 86 F1 | 	sub	local01, #48
1ef94     AC FF 9F FD | 	jmp	#LR__1158
1ef98                 | LR__1159
1ef98                 | LR__1160
1ef98     00 8E 0E F2 | 	cmp	local02, #0 wz
1ef9c     47 91 02 56 |  if_ne	mov	local03, local02
1efa0     01 90 86 51 |  if_ne	sub	local03, #1
1efa4     00 90 06 A6 |  if_e	mov	local03, #0
1efa8     48 95 02 F6 | 	mov	local05, local03
1efac                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1efac                 | ' 	}
1efac                 | ' 	i = part ? part - 1 : 0;
1efac                 | ' 	do {
1efac                 | LR__1161
1efac     4A 9D 02 F6 | 	mov	local09, local05
1efb0     02 9C 66 F0 | 	shl	local09, #2
1efb4     14 50 05 F1 | 	add	fp, #20
1efb8     A8 9E 02 F6 | 	mov	local10, fp
1efbc     A8 9C 02 F1 | 	add	local09, fp
1efc0     4E A1 0A FB | 	rdlong	local11, local09 wz
1efc4     14 50 85 F1 | 	sub	fp, #20
1efc8     34 00 90 AD |  if_e	jmp	#LR__1162
1efcc     4A 9B 02 F6 | 	mov	local08, local05
1efd0     02 9A 66 F0 | 	shl	local08, #2
1efd4     14 50 05 F1 | 	add	fp, #20
1efd8     A8 A2 02 F6 | 	mov	local12, fp
1efdc     A8 9A 02 F1 | 	add	local08, fp
1efe0     4D 99 02 FB | 	rdlong	local07, local08
1efe4     46 75 02 F6 | 	mov	arg01, local01
1efe8     4C 77 02 F6 | 	mov	arg02, local07
1efec     14 50 85 F1 | 	sub	fp, #20
1eff0     00 FD BF FD | 	call	#_fatfs_cc_check_fs
1eff4     1A 97 02 F6 | 	mov	local06, result1
1eff8     4B 91 02 F6 | 	mov	local03, local06
1effc     04 00 90 FD | 	jmp	#LR__1163
1f000                 | LR__1162
1f000     03 90 06 F6 | 	mov	local03, #3
1f004                 | LR__1163
1f004     48 93 02 F6 | 	mov	local04, local03
1f008     00 8E 0E F2 | 	cmp	local02, #0 wz
1f00c     1C 00 90 5D |  if_ne	jmp	#LR__1164
1f010     02 92 16 F2 | 	cmp	local04, #2 wc
1f014     14 00 90 CD |  if_b	jmp	#LR__1164
1f018     4A 91 02 F6 | 	mov	local03, local05
1f01c     01 90 06 F1 | 	add	local03, #1
1f020     48 95 02 F6 | 	mov	local05, local03
1f024     04 94 16 F2 | 	cmp	local05, #4 wc
1f028     80 FF 9F CD |  if_b	jmp	#LR__1161
1f02c                 | LR__1164
1f02c                 | ' 	return fmt;
1f02c     49 35 02 F6 | 	mov	result1, local04
1f030                 | LR__1165
1f030     A8 F0 03 F6 | 	mov	ptra, fp
1f034     B3 00 A0 FD | 	call	#popregs_
1f038                 | _fatfs_cc_find_volume_ret
1f038     2D 00 64 FD | 	ret
1f03c                 | 
1f03c                 | _fatfs_cc_mount_volume
1f03c     18 4C 05 F6 | 	mov	COUNT_, #24
1f040     A9 00 A0 FD | 	call	#pushregs_
1f044     3A 8D 02 F6 | 	mov	local01, arg01
1f048     3B 8F 02 F6 | 	mov	local02, arg02
1f04c     3C 91 02 F6 | 	mov	local03, arg03
1f050     47 01 68 FC | 	wrlong	#0, local02
1f054     46 75 02 F6 | 	mov	arg01, local01
1f058     FC FB BF FD | 	call	#_fatfs_cc_get_ldnumber
1f05c     1A 93 02 F6 | 	mov	local04, result1
1f060     00 92 56 F2 | 	cmps	local04, #0 wc
1f064     0B 34 06 C6 |  if_b	mov	result1, #11
1f068     90 05 90 CD |  if_b	jmp	#LR__1177
1f06c     49 75 02 F6 | 	mov	arg01, local04
1f070     02 74 66 F0 | 	shl	arg01, #2
1f074     C9 74 02 F1 | 	add	arg01, objptr
1f078     3A 95 0A FB | 	rdlong	local05, arg01 wz
1f07c     0C 34 06 A6 |  if_e	mov	result1, #12
1f080     78 05 90 AD |  if_e	jmp	#LR__1177
1f084     47 95 62 FC | 	wrlong	local05, local02
1f088     48 91 E2 F8 | 	getbyte	local03, local03, #0
1f08c     FE 90 06 F5 | 	and	local03, #254
1f090     4A 75 CA FA | 	rdbyte	arg01, local05 wz
1f094     44 00 90 AD |  if_e	jmp	#LR__1167
1f098     01 94 06 F1 | 	add	local05, #1
1f09c     4A 75 CA FA | 	rdbyte	arg01, local05 wz
1f0a0     01 94 86 F1 | 	sub	local05, #1
1f0a4     01 34 06 56 |  if_ne	mov	result1, #1
1f0a8                 | ' 
1f0a8                 | ' 	return Stat;
1f0a8     18 92 05 A1 |  if_e	add	objptr, #24
1f0ac     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1f0b0     18 92 85 A1 |  if_e	sub	objptr, #24
1f0b4     1A 75 E2 F8 | 	getbyte	arg01, result1, #0
1f0b8     01 74 CE F7 | 	test	arg01, #1 wz
1f0bc     1C 00 90 5D |  if_ne	jmp	#LR__1166
1f0c0     00 90 0E F2 | 	cmp	local03, #0 wz
1f0c4     1A 35 E2 58 |  if_ne	getbyte	result1, result1, #0
1f0c8     04 34 0E 55 |  if_ne	and	result1, #4 wz
1f0cc                 | ' 				return FR_WRITE_PROTECTED;
1f0cc     0A 34 06 56 |  if_ne	mov	result1, #10
1f0d0     28 05 90 5D |  if_ne	jmp	#LR__1177
1f0d4                 | ' 			}
1f0d4                 | ' 			return FR_OK;
1f0d4     00 34 06 F6 | 	mov	result1, #0
1f0d8     20 05 90 FD | 	jmp	#LR__1177
1f0dc                 | LR__1166
1f0dc                 | LR__1167
1f0dc     4A 01 48 FC | 	wrbyte	#0, local05
1f0e0     01 94 06 F1 | 	add	local05, #1
1f0e4     4A 93 42 FC | 	wrbyte	local04, local05
1f0e8     4A 75 C2 FA | 	rdbyte	arg01, local05
1f0ec     01 94 86 F1 | 	sub	local05, #1
1f0f0     04 D9 BF FD | 	call	#_fatfs_cc_disk_initialize
1f0f4     1A 97 02 F6 | 	mov	local06, result1
1f0f8     4B 99 E2 F8 | 	getbyte	local07, local06, #0
1f0fc     01 98 CE F7 | 	test	local07, #1 wz
1f100                 | ' 		return FR_NOT_READY;
1f100     03 34 06 56 |  if_ne	mov	result1, #3
1f104     F4 04 90 5D |  if_ne	jmp	#LR__1177
1f108     00 90 0E F2 | 	cmp	local03, #0 wz
1f10c     4B 99 E2 58 |  if_ne	getbyte	local07, local06, #0
1f110     04 98 CE 57 |  if_ne	test	local07, #4 wz
1f114                 | ' 		return FR_WRITE_PROTECTED;
1f114     0A 34 06 56 |  if_ne	mov	result1, #10
1f118     E0 04 90 5D |  if_ne	jmp	#LR__1177
1f11c     4A 75 02 F6 | 	mov	arg01, local05
1f120     00 76 06 F6 | 	mov	arg02, #0
1f124     D0 FD BF FD | 	call	#_fatfs_cc_find_volume
1f128     1A 75 02 F6 | 	mov	arg01, result1
1f12c     04 74 0E F2 | 	cmp	arg01, #4 wz
1f130     01 34 06 A6 |  if_e	mov	result1, #1
1f134     C4 04 90 AD |  if_e	jmp	#LR__1177
1f138     02 74 16 F2 | 	cmp	arg01, #2 wc
1f13c     0D 34 06 36 |  if_ae	mov	result1, #13
1f140     B8 04 90 3D |  if_ae	jmp	#LR__1177
1f144     2C 94 06 F1 | 	add	local05, #44
1f148     4A 9B 02 FB | 	rdlong	local08, local05
1f14c     04 94 06 F1 | 	add	local05, #4
1f150     4A 75 02 F6 | 	mov	arg01, local05
1f154     30 94 86 F1 | 	sub	local05, #48
1f158     0B 74 06 F1 | 	add	arg01, #11
1f15c                 | ' {
1f15c                 | ' 
1f15c                 | ' 	return *((WORD*)ptr);
1f15c     3A 35 E2 FA | 	rdword	result1, arg01
1f160     01 00 00 FF 
1f164     00 34 0E F2 | 	cmp	result1, ##512 wz
1f168     0D 34 06 56 |  if_ne	mov	result1, #13
1f16c     8C 04 90 5D |  if_ne	jmp	#LR__1177
1f170     30 94 06 F1 | 	add	local05, #48
1f174     4A 75 02 F6 | 	mov	arg01, local05
1f178     30 94 86 F1 | 	sub	local05, #48
1f17c     16 74 06 F1 | 	add	arg01, #22
1f180                 | ' {
1f180                 | ' 
1f180                 | ' 	return *((WORD*)ptr);
1f180     3A 35 E2 FA | 	rdword	result1, arg01
1f184     1A 9D 02 F6 | 	mov	local09, result1
1f188     0F 9C 4E F7 | 	zerox	local09, #15 wz
1f18c     18 00 90 5D |  if_ne	jmp	#LR__1168
1f190     30 94 06 F1 | 	add	local05, #48
1f194     4A 75 02 F6 | 	mov	arg01, local05
1f198     30 94 86 F1 | 	sub	local05, #48
1f19c     24 74 06 F1 | 	add	arg01, #36
1f1a0                 | ' {
1f1a0                 | ' 
1f1a0                 | ' 	return *((DWORD*)ptr);
1f1a0     3A 35 02 FB | 	rdlong	result1, arg01
1f1a4     1A 9D 02 F6 | 	mov	local09, result1
1f1a8                 | LR__1168
1f1a8     18 94 06 F1 | 	add	local05, #24
1f1ac     4A 9D 62 FC | 	wrlong	local09, local05
1f1b0     28 94 06 F1 | 	add	local05, #40
1f1b4     4A 99 C2 FA | 	rdbyte	local07, local05
1f1b8     3E 94 86 F1 | 	sub	local05, #62
1f1bc     4A 99 42 FC | 	wrbyte	local07, local05
1f1c0     4A 99 C2 FA | 	rdbyte	local07, local05
1f1c4     02 94 86 F1 | 	sub	local05, #2
1f1c8     01 98 0E F2 | 	cmp	local07, #1 wz
1f1cc     18 00 90 AD |  if_e	jmp	#LR__1169
1f1d0     02 94 06 F1 | 	add	local05, #2
1f1d4     4A 99 C2 FA | 	rdbyte	local07, local05
1f1d8     02 94 86 F1 | 	sub	local05, #2
1f1dc     02 98 0E F2 | 	cmp	local07, #2 wz
1f1e0     0D 34 06 56 |  if_ne	mov	result1, #13
1f1e4     14 04 90 5D |  if_ne	jmp	#LR__1177
1f1e8                 | LR__1169
1f1e8     02 94 06 F1 | 	add	local05, #2
1f1ec     4A 99 C2 FA | 	rdbyte	local07, local05
1f1f0     4C 9D 02 FD | 	qmul	local09, local07
1f1f4     3B 94 06 F1 | 	add	local05, #59
1f1f8     4A 99 C2 FA | 	rdbyte	local07, local05
1f1fc     33 94 86 F1 | 	sub	local05, #51
1f200     4A 99 52 FC | 	wrword	local07, local05
1f204     4A 99 E2 FA | 	rdword	local07, local05
1f208     0A 94 86 F1 | 	sub	local05, #10
1f20c     0F 98 4E F7 | 	zerox	local07, #15 wz
1f210     18 9C 62 FD | 	getqx	local09
1f214     20 00 90 AD |  if_e	jmp	#LR__1170
1f218     0A 94 06 F1 | 	add	local05, #10
1f21c     4A 9F E2 FA | 	rdword	local10, local05
1f220     4F 99 32 F9 | 	getword	local07, local10, #0
1f224     0A 94 86 F1 | 	sub	local05, #10
1f228     4F 35 32 F9 | 	getword	result1, local10, #0
1f22c     01 34 86 F1 | 	sub	result1, #1
1f230     1A 99 CA F7 | 	test	local07, result1 wz
1f234     08 00 90 AD |  if_e	jmp	#LR__1171
1f238                 | LR__1170
1f238     0D 34 06 F6 | 	mov	result1, #13
1f23c     BC 03 90 FD | 	jmp	#LR__1177
1f240                 | LR__1171
1f240     30 94 06 F1 | 	add	local05, #48
1f244     4A 75 02 F6 | 	mov	arg01, local05
1f248     11 74 06 F1 | 	add	arg01, #17
1f24c                 | ' {
1f24c                 | ' 
1f24c                 | ' 	return *((WORD*)ptr);
1f24c     3A 35 E2 FA | 	rdword	result1, arg01
1f250     28 94 86 F1 | 	sub	local05, #40
1f254     4A 35 52 FC | 	wrword	result1, local05
1f258     4A 99 E2 FA | 	rdword	local07, local05
1f25c     08 94 86 F1 | 	sub	local05, #8
1f260     4C 75 52 F6 | 	abs	arg01, local07 wc
1f264     3A 75 42 F8 | 	getnib	arg01, arg01, #0
1f268     3A 75 8A F6 | 	negc	arg01, arg01 wz
1f26c     0D 34 06 56 |  if_ne	mov	result1, #13
1f270     88 03 90 5D |  if_ne	jmp	#LR__1177
1f274     30 94 06 F1 | 	add	local05, #48
1f278     4A 75 02 F6 | 	mov	arg01, local05
1f27c     30 94 86 F1 | 	sub	local05, #48
1f280     13 74 06 F1 | 	add	arg01, #19
1f284                 | ' {
1f284                 | ' 
1f284                 | ' 	return *((WORD*)ptr);
1f284     3A 35 E2 FA | 	rdword	result1, arg01
1f288     1A A1 0A F6 | 	mov	local11, result1 wz
1f28c     30 94 06 A1 |  if_e	add	local05, #48
1f290     4A 75 02 A6 |  if_e	mov	arg01, local05
1f294     30 94 86 A1 |  if_e	sub	local05, #48
1f298     20 74 06 A1 |  if_e	add	arg01, #32
1f29c                 | ' {
1f29c                 | ' 
1f29c                 | ' 	return *((DWORD*)ptr);
1f29c     3A A1 02 AB |  if_e	rdlong	local11, arg01
1f2a0     30 94 06 F1 | 	add	local05, #48
1f2a4     4A 75 02 F6 | 	mov	arg01, local05
1f2a8     30 94 86 F1 | 	sub	local05, #48
1f2ac     0E 74 06 F1 | 	add	arg01, #14
1f2b0                 | ' {
1f2b0                 | ' 
1f2b0                 | ' 	return *((WORD*)ptr);
1f2b0     3A 35 E2 FA | 	rdword	result1, arg01
1f2b4     1A A3 02 F6 | 	mov	local12, result1
1f2b8     51 99 02 F6 | 	mov	local07, local12
1f2bc     0F 98 4E F7 | 	zerox	local07, #15 wz
1f2c0     0D 34 06 A6 |  if_e	mov	result1, #13
1f2c4     34 03 90 AD |  if_e	jmp	#LR__1177
1f2c8     51 A5 32 F9 | 	getword	local13, local12, #0
1f2cc     4E A5 02 F1 | 	add	local13, local09
1f2d0     08 94 06 F1 | 	add	local05, #8
1f2d4     4A 99 E2 FA | 	rdword	local07, local05
1f2d8     08 94 86 F1 | 	sub	local05, #8
1f2dc     4C 99 52 F6 | 	abs	local07, local07 wc
1f2e0     04 98 46 F0 | 	shr	local07, #4
1f2e4     4C 99 82 F6 | 	negc	local07, local07
1f2e8     4C A5 02 F1 | 	add	local13, local07
1f2ec     52 A1 12 F2 | 	cmp	local11, local13 wc
1f2f0     0D 34 06 C6 |  if_b	mov	result1, #13
1f2f4     04 03 90 CD |  if_b	jmp	#LR__1177
1f2f8     50 99 02 F6 | 	mov	local07, local11
1f2fc     52 99 82 F1 | 	sub	local07, local13
1f300     0A 94 06 F1 | 	add	local05, #10
1f304     4A 75 E2 FA | 	rdword	arg01, local05
1f308     3A 99 12 FD | 	qdiv	local07, arg01
1f30c     0A 94 86 F1 | 	sub	local05, #10
1f310     18 A6 62 FD | 	getqx	local14
1f314     00 A6 0E F2 | 	cmp	local14, #0 wz
1f318     0D 34 06 A6 |  if_e	mov	result1, #13
1f31c     DC 02 90 AD |  if_e	jmp	#LR__1177
1f320     00 A8 06 F6 | 	mov	local15, #0
1f324     FF FF 07 FF 
1f328     F6 A7 16 F2 | 	cmp	local14, ##268435446 wc
1f32c     03 A8 06 C6 |  if_b	mov	local15, #3
1f330     7F 00 00 FF 
1f334     F6 A7 16 F2 | 	cmp	local14, ##65526 wc
1f338     02 A8 06 C6 |  if_b	mov	local15, #2
1f33c     07 00 00 FF 
1f340     F6 A7 16 F2 | 	cmp	local14, ##4086 wc
1f344     01 A8 06 C6 |  if_b	mov	local15, #1
1f348     00 A8 0E F2 | 	cmp	local15, #0 wz
1f34c     0D 34 06 A6 |  if_e	mov	result1, #13
1f350     A8 02 90 AD |  if_e	jmp	#LR__1177
1f354     53 99 02 F6 | 	mov	local07, local14
1f358     02 98 06 F1 | 	add	local07, #2
1f35c     14 94 06 F1 | 	add	local05, #20
1f360     4A 99 62 FC | 	wrlong	local07, local05
1f364     08 94 06 F1 | 	add	local05, #8
1f368     4A 9B 62 FC | 	wrlong	local08, local05
1f36c     4D 99 02 F6 | 	mov	local07, local08
1f370     51 77 32 F9 | 	getword	arg02, local12, #0
1f374     3B 99 02 F1 | 	add	local07, arg02
1f378     04 94 06 F1 | 	add	local05, #4
1f37c     4A 99 62 FC | 	wrlong	local07, local05
1f380     4D 99 02 F6 | 	mov	local07, local08
1f384     52 99 02 F1 | 	add	local07, local13
1f388     08 94 06 F1 | 	add	local05, #8
1f38c     4A 99 62 FC | 	wrlong	local07, local05
1f390     28 94 86 F1 | 	sub	local05, #40
1f394     03 A8 0E F2 | 	cmp	local15, #3 wz
1f398     60 00 90 5D |  if_ne	jmp	#LR__1172
1f39c     30 94 06 F1 | 	add	local05, #48
1f3a0     4A 75 02 F6 | 	mov	arg01, local05
1f3a4     30 94 86 F1 | 	sub	local05, #48
1f3a8     2A 74 06 F1 | 	add	arg01, #42
1f3ac                 | ' {
1f3ac                 | ' 
1f3ac                 | ' 	return *((WORD*)ptr);
1f3ac     3A 35 EA FA | 	rdword	result1, arg01 wz
1f3b0     0D 34 06 56 |  if_ne	mov	result1, #13
1f3b4     44 02 90 5D |  if_ne	jmp	#LR__1177
1f3b8     08 94 06 F1 | 	add	local05, #8
1f3bc     4A 99 E2 FA | 	rdword	local07, local05
1f3c0     08 94 86 F1 | 	sub	local05, #8
1f3c4     0F 98 4E F7 | 	zerox	local07, #15 wz
1f3c8     0D 34 06 56 |  if_ne	mov	result1, #13
1f3cc     2C 02 90 5D |  if_ne	jmp	#LR__1177
1f3d0     30 94 06 F1 | 	add	local05, #48
1f3d4     4A 75 02 F6 | 	mov	arg01, local05
1f3d8     2C 74 06 F1 | 	add	arg01, #44
1f3dc                 | ' {
1f3dc                 | ' 
1f3dc                 | ' 	return *((DWORD*)ptr);
1f3dc     3A 35 02 FB | 	rdlong	result1, arg01
1f3e0     0C 94 86 F1 | 	sub	local05, #12
1f3e4     4A 35 62 FC | 	wrlong	result1, local05
1f3e8     10 94 86 F1 | 	sub	local05, #16
1f3ec     4A AB 02 FB | 	rdlong	local16, local05
1f3f0     14 94 86 F1 | 	sub	local05, #20
1f3f4     02 AA 66 F0 | 	shl	local16, #2
1f3f8     80 00 90 FD | 	jmp	#LR__1174
1f3fc                 | LR__1172
1f3fc     08 94 06 F1 | 	add	local05, #8
1f400     4A 99 E2 FA | 	rdword	local07, local05
1f404     08 94 86 F1 | 	sub	local05, #8
1f408     0F 98 4E F7 | 	zerox	local07, #15 wz
1f40c     0D 34 06 A6 |  if_e	mov	result1, #13
1f410     E8 01 90 AD |  if_e	jmp	#LR__1177
1f414     20 94 06 F1 | 	add	local05, #32
1f418     4A 99 02 FB | 	rdlong	local07, local05
1f41c     4E 99 02 F1 | 	add	local07, local09
1f420     04 94 06 F1 | 	add	local05, #4
1f424     4A 99 62 FC | 	wrlong	local07, local05
1f428     24 94 86 F1 | 	sub	local05, #36
1f42c     02 A8 0E F2 | 	cmp	local15, #2 wz
1f430     14 94 06 A1 |  if_e	add	local05, #20
1f434     4A 99 02 AB |  if_e	rdlong	local07, local05
1f438     14 94 86 A1 |  if_e	sub	local05, #20
1f43c     01 98 66 A0 |  if_e	shl	local07, #1
1f440     34 00 90 AD |  if_e	jmp	#LR__1173
1f444     14 94 06 F1 | 	add	local05, #20
1f448     4A AD 02 FB | 	rdlong	local17, local05
1f44c     56 AF 02 F6 | 	mov	local18, local17
1f450     57 9F 02 F6 | 	mov	local10, local18
1f454     01 9E 66 F0 | 	shl	local10, #1
1f458     57 9F 02 F1 | 	add	local10, local18
1f45c     4F 99 02 F6 | 	mov	local07, local10
1f460     01 98 46 F0 | 	shr	local07, #1
1f464     56 B1 02 F6 | 	mov	local19, local17
1f468     14 94 86 F1 | 	sub	local05, #20
1f46c     58 B3 02 F6 | 	mov	local20, local19
1f470     01 B2 06 F5 | 	and	local20, #1
1f474     59 99 02 F1 | 	add	local07, local20
1f478                 | LR__1173
1f478     4C AB 02 F6 | 	mov	local16, local07
1f47c                 | LR__1174
1f47c     55 99 02 F6 | 	mov	local07, local16
1f480     FF 99 06 F1 | 	add	local07, #511
1f484     09 98 46 F0 | 	shr	local07, #9
1f488     18 94 06 F1 | 	add	local05, #24
1f48c     4A 77 02 FB | 	rdlong	arg02, local05
1f490     18 94 86 F1 | 	sub	local05, #24
1f494     4C 77 12 F2 | 	cmp	arg02, local07 wc
1f498     0D 34 06 C6 |  if_b	mov	result1, #13
1f49c     5C 01 90 CD |  if_b	jmp	#LR__1177
1f4a0     10 94 06 F1 | 	add	local05, #16
1f4a4     FF FF FF FF 
1f4a8     4A FF 6B FC | 	wrlong	##-1, local05
1f4ac     04 94 86 F1 | 	sub	local05, #4
1f4b0     FF FF FF FF 
1f4b4     4A FF 6B FC | 	wrlong	##-1, local05
1f4b8     08 94 86 F1 | 	sub	local05, #8
1f4bc     4A 01 49 FC | 	wrbyte	#128, local05
1f4c0     04 94 86 F1 | 	sub	local05, #4
1f4c4     03 A8 0E F2 | 	cmp	local15, #3 wz
1f4c8     08 01 90 5D |  if_ne	jmp	#LR__1176
1f4cc     30 94 06 F1 | 	add	local05, #48
1f4d0     4A 75 02 F6 | 	mov	arg01, local05
1f4d4     30 94 86 F1 | 	sub	local05, #48
1f4d8     30 74 06 F1 | 	add	arg01, #48
1f4dc                 | ' {
1f4dc                 | ' 
1f4dc                 | ' 	return *((WORD*)ptr);
1f4dc     3A 35 E2 FA | 	rdword	result1, arg01
1f4e0     1A 99 32 F9 | 	getword	local07, result1, #0
1f4e4     01 98 0E F2 | 	cmp	local07, #1 wz
1f4e8     E8 00 90 5D |  if_ne	jmp	#LR__1176
1f4ec     4D B5 02 F6 | 	mov	local21, local08
1f4f0     01 B4 06 F1 | 	add	local21, #1
1f4f4     4A 75 02 F6 | 	mov	arg01, local05
1f4f8     5A 77 02 F6 | 	mov	arg02, local21
1f4fc     A8 E0 BF FD | 	call	#_fatfs_cc_move_window
1f500     00 34 0E F2 | 	cmp	result1, #0 wz
1f504     CC 00 90 5D |  if_ne	jmp	#LR__1176
1f508     04 94 06 F1 | 	add	local05, #4
1f50c     4A 01 48 FC | 	wrbyte	#0, local05
1f510     2C 94 06 F1 | 	add	local05, #44
1f514     4A B7 02 F6 | 	mov	local22, local05
1f518     5B B9 02 F6 | 	mov	local23, local22
1f51c     FE B9 06 F1 | 	add	local23, #510
1f520     5C 75 02 F6 | 	mov	arg01, local23
1f524                 | ' {
1f524                 | ' 
1f524                 | ' 	return *((WORD*)ptr);
1f524     3A 35 E2 FA | 	rdword	result1, arg01
1f528     1A BB 02 F6 | 	mov	local24, result1
1f52c     5D 99 32 F9 | 	getword	local07, local24, #0
1f530     55 00 00 FF 
1f534     55 98 0E F2 | 	cmp	local07, ##43605 wz
1f538     30 94 86 F1 | 	sub	local05, #48
1f53c     94 00 90 5D |  if_ne	jmp	#LR__1175
1f540     30 94 06 F1 | 	add	local05, #48
1f544     4A B5 02 F6 | 	mov	local21, local05
1f548     5A B7 02 F6 | 	mov	local22, local21
1f54c     5B 75 02 F6 | 	mov	arg01, local22
1f550                 | ' {
1f550                 | ' 
1f550                 | ' 	return *((DWORD*)ptr);
1f550     3A 35 02 FB | 	rdlong	result1, arg01
1f554     1A B9 02 F6 | 	mov	local23, result1
1f558     A9 B0 20 FF 
1f55c     52 B8 0E F2 | 	cmp	local23, ##1096897106 wz
1f560     30 94 86 F1 | 	sub	local05, #48
1f564     6C 00 90 5D |  if_ne	jmp	#LR__1175
1f568     30 94 06 F1 | 	add	local05, #48
1f56c     4A 9F 02 F6 | 	mov	local10, local05
1f570     4F B5 02 F6 | 	mov	local21, local10
1f574     E4 B5 06 F1 | 	add	local21, #484
1f578     5A 75 02 F6 | 	mov	arg01, local21
1f57c                 | ' {
1f57c                 | ' 
1f57c                 | ' 	return *((DWORD*)ptr);
1f57c     3A 35 02 FB | 	rdlong	result1, arg01
1f580     1A B7 02 F6 | 	mov	local22, result1
1f584     B9 A0 30 FF 
1f588     72 B6 0E F2 | 	cmp	local22, ##1631679090 wz
1f58c     30 94 86 F1 | 	sub	local05, #48
1f590     40 00 90 5D |  if_ne	jmp	#LR__1175
1f594     30 94 06 F1 | 	add	local05, #48
1f598     4A 75 02 F6 | 	mov	arg01, local05
1f59c     E8 75 06 F1 | 	add	arg01, #488
1f5a0                 | ' {
1f5a0                 | ' 
1f5a0                 | ' 	return *((DWORD*)ptr);
1f5a0     3A 35 02 FB | 	rdlong	result1, arg01
1f5a4     20 94 86 F1 | 	sub	local05, #32
1f5a8     4A 35 62 FC | 	wrlong	result1, local05
1f5ac     20 94 06 F1 | 	add	local05, #32
1f5b0     4A B9 02 F6 | 	mov	local23, local05
1f5b4     5C BB 02 F6 | 	mov	local24, local23
1f5b8     EC BB 06 F1 | 	add	local24, #492
1f5bc     5D 75 02 F6 | 	mov	arg01, local24
1f5c0                 | ' {
1f5c0                 | ' 
1f5c0                 | ' 	return *((DWORD*)ptr);
1f5c0     3A 35 02 FB | 	rdlong	result1, arg01
1f5c4     1A 99 02 F6 | 	mov	local07, result1
1f5c8     24 94 86 F1 | 	sub	local05, #36
1f5cc     4A 99 62 FC | 	wrlong	local07, local05
1f5d0     0C 94 86 F1 | 	sub	local05, #12
1f5d4                 | LR__1175
1f5d4                 | LR__1176
1f5d4     4A A9 42 FC | 	wrbyte	local15, local05
1f5d8     04 92 05 F1 | 	add	objptr, #4
1f5dc     C9 98 E2 FA | 	rdword	local07, objptr
1f5e0     01 98 06 F1 | 	add	local07, #1
1f5e4     C9 98 52 FC | 	wrword	local07, objptr
1f5e8     C9 B8 E2 FA | 	rdword	local23, objptr
1f5ec     04 92 85 F1 | 	sub	objptr, #4
1f5f0     06 94 06 F1 | 	add	local05, #6
1f5f4     4A B9 52 FC | 	wrword	local23, local05
1f5f8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1f5f8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1f5f8                 | ' 			{
1f5f8                 | ' 
1f5f8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1f5f8                 | ' 
1f5f8                 | ' 
1f5f8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1f5f8                 | ' 
1f5f8                 | ' 			}
1f5f8                 | ' 		}
1f5f8                 | ' 
1f5f8                 | ' 
1f5f8                 | ' 	}
1f5f8                 | ' 
1f5f8                 | ' 	fs->fs_type = (BYTE)fmt;
1f5f8                 | ' 	fs->id = ++Fsid;
1f5f8                 | ' #line 3567 "ff.c"
1f5f8                 | ' 	return FR_OK;
1f5f8     00 34 06 F6 | 	mov	result1, #0
1f5fc                 | LR__1177
1f5fc     A8 F0 03 F6 | 	mov	ptra, fp
1f600     B3 00 A0 FD | 	call	#popregs_
1f604                 | _fatfs_cc_mount_volume_ret
1f604     2D 00 64 FD | 	ret
1f608                 | 
1f608                 | _fatfs_cc_validate
1f608     0B 4C 05 F6 | 	mov	COUNT_, #11
1f60c     A9 00 A0 FD | 	call	#pushregs_
1f610     3A 8D 0A F6 | 	mov	local01, arg01 wz
1f614     3B 8F 02 F6 | 	mov	local02, arg02
1f618     09 90 06 F6 | 	mov	local03, #9
1f61c     74 00 90 AD |  if_e	jmp	#LR__1178
1f620     46 93 0A FB | 	rdlong	local04, local01 wz
1f624     6C 00 90 AD |  if_e	jmp	#LR__1178
1f628     46 35 02 FB | 	rdlong	result1, local01
1f62c     1A 35 CA FA | 	rdbyte	result1, result1 wz
1f630     60 00 90 AD |  if_e	jmp	#LR__1178
1f634     04 8C 06 F1 | 	add	local01, #4
1f638     46 95 E2 FA | 	rdword	local05, local01
1f63c     04 8C 86 F1 | 	sub	local01, #4
1f640     4A 35 32 F9 | 	getword	result1, local05, #0
1f644     46 97 02 FB | 	rdlong	local06, local01
1f648     06 96 06 F1 | 	add	local06, #6
1f64c     4B 99 E2 FA | 	rdword	local07, local06
1f650     06 96 86 F1 | 	sub	local06, #6
1f654     4C 9B 32 F9 | 	getword	local08, local07, #0
1f658     4D 35 0A F2 | 	cmp	result1, local08 wz
1f65c     34 00 90 5D |  if_ne	jmp	#LR__1178
1f660     46 9D 02 FB | 	rdlong	local09, local01
1f664     01 9C 06 F1 | 	add	local09, #1
1f668     4E 9F C2 FA | 	rdbyte	local10, local09
1f66c     01 9C 86 F1 | 	sub	local09, #1
1f670     4F 75 0A F6 | 	mov	arg01, local10 wz
1f674     01 34 06 56 |  if_ne	mov	result1, #1
1f678                 | ' 
1f678                 | ' 	return Stat;
1f678     18 92 05 A1 |  if_e	add	objptr, #24
1f67c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1f680     18 92 85 A1 |  if_e	sub	objptr, #24
1f684     1A A1 02 F6 | 	mov	local11, result1
1f688     50 93 E2 F8 | 	getbyte	local04, local11, #0
1f68c     01 92 0E F5 | 	and	local04, #1 wz
1f690     00 90 06 A6 |  if_e	mov	local03, #0
1f694                 | LR__1178
1f694     00 90 0E F2 | 	cmp	local03, #0 wz
1f698     46 93 02 AB |  if_e	rdlong	local04, local01
1f69c     00 92 06 56 |  if_ne	mov	local04, #0
1f6a0     47 93 62 FC | 	wrlong	local04, local02
1f6a4                 | ' 			res = FR_OK;
1f6a4                 | ' 		}
1f6a4                 | ' 
1f6a4                 | ' 	}
1f6a4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1f6a4                 | ' 	return res;
1f6a4     48 35 02 F6 | 	mov	result1, local03
1f6a8     A8 F0 03 F6 | 	mov	ptra, fp
1f6ac     B3 00 A0 FD | 	call	#popregs_
1f6b0                 | _fatfs_cc_validate_ret
1f6b0     2D 00 64 FD | 	ret
1f6b4                 | 
1f6b4                 | _fatfs_cc_f_mount
1f6b4     01 4C 05 F6 | 	mov	COUNT_, #1
1f6b8     A9 00 A0 FD | 	call	#pushregs_
1f6bc     20 F0 07 F1 | 	add	ptra, #32
1f6c0     04 50 05 F1 | 	add	fp, #4
1f6c4     A8 74 62 FC | 	wrlong	arg01, fp
1f6c8     04 50 05 F1 | 	add	fp, #4
1f6cc     A8 76 62 FC | 	wrlong	arg02, fp
1f6d0     04 50 05 F1 | 	add	fp, #4
1f6d4     A8 78 42 FC | 	wrbyte	arg03, fp
1f6d8     04 50 85 F1 | 	sub	fp, #4
1f6dc     A8 78 02 FB | 	rdlong	arg03, fp
1f6e0     14 50 05 F1 | 	add	fp, #20
1f6e4     A8 78 62 FC | 	wrlong	arg03, fp
1f6e8     A8 74 02 F6 | 	mov	arg01, fp
1f6ec     1C 50 85 F1 | 	sub	fp, #28
1f6f0     64 F5 BF FD | 	call	#_fatfs_cc_get_ldnumber
1f6f4     14 50 05 F1 | 	add	fp, #20
1f6f8     A8 34 62 FC | 	wrlong	result1, fp
1f6fc     14 50 85 F1 | 	sub	fp, #20
1f700     00 34 56 F2 | 	cmps	result1, #0 wc
1f704     0B 34 06 C6 |  if_b	mov	result1, #11
1f708     A8 00 90 CD |  if_b	jmp	#LR__1179
1f70c     14 50 05 F1 | 	add	fp, #20
1f710     A8 8C 02 FB | 	rdlong	local01, fp
1f714     02 8C 66 F0 | 	shl	local01, #2
1f718     C9 8C 02 F1 | 	add	local01, objptr
1f71c     46 8D 0A FB | 	rdlong	local01, local01 wz
1f720     04 50 85 F1 | 	sub	fp, #4
1f724     A8 8C 62 FC | 	wrlong	local01, fp
1f728     10 50 85 F1 | 	sub	fp, #16
1f72c     10 50 05 51 |  if_ne	add	fp, #16
1f730     A8 8C 02 5B |  if_ne	rdlong	local01, fp
1f734     10 50 85 51 |  if_ne	sub	fp, #16
1f738     46 01 48 5C |  if_ne	wrbyte	#0, local01
1f73c     04 50 05 F1 | 	add	fp, #4
1f740     A8 8C 0A FB | 	rdlong	local01, fp wz
1f744     04 50 85 F1 | 	sub	fp, #4
1f748     04 50 05 51 |  if_ne	add	fp, #4
1f74c     A8 8C 02 5B |  if_ne	rdlong	local01, fp
1f750     04 50 85 51 |  if_ne	sub	fp, #4
1f754     46 01 48 5C |  if_ne	wrbyte	#0, local01
1f758     14 50 05 F1 | 	add	fp, #20
1f75c     A8 8C 02 FB | 	rdlong	local01, fp
1f760     02 8C 66 F0 | 	shl	local01, #2
1f764     C9 8C 02 F1 | 	add	local01, objptr
1f768     10 50 85 F1 | 	sub	fp, #16
1f76c     A8 78 02 FB | 	rdlong	arg03, fp
1f770     46 79 62 FC | 	wrlong	arg03, local01
1f774     08 50 05 F1 | 	add	fp, #8
1f778     A8 8C C2 FA | 	rdbyte	local01, fp
1f77c     0C 50 85 F1 | 	sub	fp, #12
1f780     07 8C 4E F7 | 	zerox	local01, #7 wz
1f784     00 34 06 A6 |  if_e	mov	result1, #0
1f788     28 00 90 AD |  if_e	jmp	#LR__1179
1f78c     08 50 05 F1 | 	add	fp, #8
1f790     A8 74 02 F6 | 	mov	arg01, fp
1f794     04 50 85 F1 | 	sub	fp, #4
1f798     A8 76 02 F6 | 	mov	arg02, fp
1f79c     04 50 85 F1 | 	sub	fp, #4
1f7a0     00 78 06 F6 | 	mov	arg03, #0
1f7a4     94 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1f7a8     18 50 05 F1 | 	add	fp, #24
1f7ac     A8 34 62 FC | 	wrlong	result1, fp
1f7b0                 | ' 
1f7b0                 | ' 	res = mount_volume(&path, &fs, 0);
1f7b0                 | ' 	return res ;
1f7b0     18 50 85 F1 | 	sub	fp, #24
1f7b4                 | LR__1179
1f7b4     A8 F0 03 F6 | 	mov	ptra, fp
1f7b8     B3 00 A0 FD | 	call	#popregs_
1f7bc                 | _fatfs_cc_f_mount_ret
1f7bc     2D 00 64 FD | 	ret
1f7c0                 | 
1f7c0                 | _fatfs_cc_f_open
1f7c0     0E 4C 05 F6 | 	mov	COUNT_, #14
1f7c4     A9 00 A0 FD | 	call	#pushregs_
1f7c8     5C F0 07 F1 | 	add	ptra, #92
1f7cc     04 50 05 F1 | 	add	fp, #4
1f7d0     A8 74 62 FC | 	wrlong	arg01, fp
1f7d4     04 50 05 F1 | 	add	fp, #4
1f7d8     A8 76 62 FC | 	wrlong	arg02, fp
1f7dc     04 50 05 F1 | 	add	fp, #4
1f7e0     A8 78 42 FC | 	wrbyte	arg03, fp
1f7e4     08 50 85 F1 | 	sub	fp, #8
1f7e8     A8 78 0A FB | 	rdlong	arg03, fp wz
1f7ec     04 50 85 F1 | 	sub	fp, #4
1f7f0     09 34 06 A6 |  if_e	mov	result1, #9
1f7f4     F8 06 90 AD |  if_e	jmp	#LR__1198
1f7f8     0C 50 05 F1 | 	add	fp, #12
1f7fc     A8 78 C2 FA | 	rdbyte	arg03, fp
1f800     3F 78 06 F5 | 	and	arg03, #63
1f804     A8 78 42 FC | 	wrbyte	arg03, fp
1f808     04 50 85 F1 | 	sub	fp, #4
1f80c     A8 74 02 F6 | 	mov	arg01, fp
1f810     38 50 05 F1 | 	add	fp, #56
1f814     A8 76 02 F6 | 	mov	arg02, fp
1f818     34 50 85 F1 | 	sub	fp, #52
1f81c     A8 8C C2 FA | 	rdbyte	local01, fp
1f820     0C 50 85 F1 | 	sub	fp, #12
1f824     46 79 02 F6 | 	mov	arg03, local01
1f828     10 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1f82c     10 50 05 F1 | 	add	fp, #16
1f830     A8 34 62 FC | 	wrlong	result1, fp
1f834     10 50 85 F1 | 	sub	fp, #16
1f838     00 34 0E F2 | 	cmp	result1, #0 wz
1f83c     88 06 90 5D |  if_ne	jmp	#LR__1197
1f840     40 50 05 F1 | 	add	fp, #64
1f844     A8 76 02 FB | 	rdlong	arg02, fp
1f848     2C 50 85 F1 | 	sub	fp, #44
1f84c     A8 76 62 FC | 	wrlong	arg02, fp
1f850     A8 74 02 F6 | 	mov	arg01, fp
1f854     0C 50 85 F1 | 	sub	fp, #12
1f858     A8 8E 02 FB | 	rdlong	local02, fp
1f85c     08 50 85 F1 | 	sub	fp, #8
1f860     47 77 02 F6 | 	mov	arg02, local02
1f864     E0 F1 BF FD | 	call	#_fatfs_cc_follow_path
1f868     10 50 05 F1 | 	add	fp, #16
1f86c     A8 34 62 FC | 	wrlong	result1, fp
1f870     10 50 85 F1 | 	sub	fp, #16
1f874     00 34 0E F2 | 	cmp	result1, #0 wz
1f878     1C 00 90 5D |  if_ne	jmp	#LR__1180
1f87c     3F 50 05 F1 | 	add	fp, #63
1f880     A8 90 C2 FA | 	rdbyte	local03, fp
1f884     3F 50 85 F1 | 	sub	fp, #63
1f888     80 90 CE F7 | 	test	local03, #128 wz
1f88c     10 50 05 51 |  if_ne	add	fp, #16
1f890     A8 0C 68 5C |  if_ne	wrlong	#6, fp
1f894     10 50 85 51 |  if_ne	sub	fp, #16
1f898                 | LR__1180
1f898     0C 50 05 F1 | 	add	fp, #12
1f89c     A8 90 C2 FA | 	rdbyte	local03, fp
1f8a0     0C 50 85 F1 | 	sub	fp, #12
1f8a4     1C 90 CE F7 | 	test	local03, #28 wz
1f8a8     F0 01 90 AD |  if_e	jmp	#LR__1185
1f8ac     10 50 05 F1 | 	add	fp, #16
1f8b0     A8 90 0A FB | 	rdlong	local03, fp wz
1f8b4     10 50 85 F1 | 	sub	fp, #16
1f8b8     48 00 90 AD |  if_e	jmp	#LR__1182
1f8bc     10 50 05 F1 | 	add	fp, #16
1f8c0     A8 90 02 FB | 	rdlong	local03, fp
1f8c4     10 50 85 F1 | 	sub	fp, #16
1f8c8     04 90 0E F2 | 	cmp	local03, #4 wz
1f8cc     1C 00 90 5D |  if_ne	jmp	#LR__1181
1f8d0     14 50 05 F1 | 	add	fp, #20
1f8d4     A8 74 02 F6 | 	mov	arg01, fp
1f8d8     14 50 85 F1 | 	sub	fp, #20
1f8dc     68 ED BF FD | 	call	#_fatfs_cc_dir_register
1f8e0     10 50 05 F1 | 	add	fp, #16
1f8e4     A8 34 62 FC | 	wrlong	result1, fp
1f8e8     10 50 85 F1 | 	sub	fp, #16
1f8ec                 | LR__1181
1f8ec     0C 50 05 F1 | 	add	fp, #12
1f8f0     A8 90 C2 FA | 	rdbyte	local03, fp
1f8f4     08 90 46 F5 | 	or	local03, #8
1f8f8     A8 90 42 FC | 	wrbyte	local03, fp
1f8fc     0C 50 85 F1 | 	sub	fp, #12
1f900     3C 00 90 FD | 	jmp	#LR__1184
1f904                 | LR__1182
1f904     1A 50 05 F1 | 	add	fp, #26
1f908     A8 90 C2 FA | 	rdbyte	local03, fp
1f90c     1A 50 85 F1 | 	sub	fp, #26
1f910     11 90 CE F7 | 	test	local03, #17 wz
1f914     10 50 05 51 |  if_ne	add	fp, #16
1f918     A8 0E 68 5C |  if_ne	wrlong	#7, fp
1f91c     10 50 85 51 |  if_ne	sub	fp, #16
1f920     1C 00 90 5D |  if_ne	jmp	#LR__1183
1f924     0C 50 05 F1 | 	add	fp, #12
1f928     A8 90 C2 FA | 	rdbyte	local03, fp
1f92c     0C 50 85 F1 | 	sub	fp, #12
1f930     04 90 CE F7 | 	test	local03, #4 wz
1f934     10 50 05 51 |  if_ne	add	fp, #16
1f938     A8 10 68 5C |  if_ne	wrlong	#8, fp
1f93c     10 50 85 51 |  if_ne	sub	fp, #16
1f940                 | LR__1183
1f940                 | LR__1184
1f940     10 50 05 F1 | 	add	fp, #16
1f944     A8 90 0A FB | 	rdlong	local03, fp wz
1f948     10 50 85 F1 | 	sub	fp, #16
1f94c     B8 01 90 5D |  if_ne	jmp	#LR__1189
1f950     0C 50 05 F1 | 	add	fp, #12
1f954     A8 8E C2 FA | 	rdbyte	local02, fp
1f958     0C 50 85 F1 | 	sub	fp, #12
1f95c     08 8E CE F7 | 	test	local02, #8 wz
1f960     A4 01 90 AD |  if_e	jmp	#LR__1189
1f964     50 40 B0 FD | 	call	#_fatfs_cc__get_fattime
1f968     50 50 05 F1 | 	add	fp, #80
1f96c     A8 34 62 FC | 	wrlong	result1, fp
1f970     20 50 85 F1 | 	sub	fp, #32
1f974     A8 74 02 FB | 	rdlong	arg01, fp
1f978     0E 74 06 F1 | 	add	arg01, #14
1f97c     3A 35 62 FC | 	wrlong	result1, arg01
1f980     A8 74 02 FB | 	rdlong	arg01, fp
1f984     16 74 06 F1 | 	add	arg01, #22
1f988     20 50 05 F1 | 	add	fp, #32
1f98c     A8 76 02 FB | 	rdlong	arg02, fp
1f990     3A 77 62 FC | 	wrlong	arg02, arg01
1f994     10 50 85 F1 | 	sub	fp, #16
1f998     A8 74 02 FB | 	rdlong	arg01, fp
1f99c     10 50 85 F1 | 	sub	fp, #16
1f9a0     A8 76 02 FB | 	rdlong	arg02, fp
1f9a4     30 50 85 F1 | 	sub	fp, #48
1f9a8     34 EA BF FD | 	call	#_fatfs_cc_ld_clust
1f9ac     44 50 05 F1 | 	add	fp, #68
1f9b0     A8 34 62 FC | 	wrlong	result1, fp
1f9b4     14 50 85 F1 | 	sub	fp, #20
1f9b8     A8 90 02 FB | 	rdlong	local03, fp
1f9bc     0B 90 06 F1 | 	add	local03, #11
1f9c0     48 41 48 FC | 	wrbyte	#32, local03
1f9c4     10 50 05 F1 | 	add	fp, #16
1f9c8     A8 74 02 FB | 	rdlong	arg01, fp
1f9cc     10 50 85 F1 | 	sub	fp, #16
1f9d0     A8 76 02 FB | 	rdlong	arg02, fp
1f9d4     30 50 85 F1 | 	sub	fp, #48
1f9d8     00 78 06 F6 | 	mov	arg03, #0
1f9dc     44 EA BF FD | 	call	#_fatfs_cc_st_clust
1f9e0     30 50 05 F1 | 	add	fp, #48
1f9e4     A8 74 02 FB | 	rdlong	arg01, fp
1f9e8     1C 74 06 F1 | 	add	arg01, #28
1f9ec     3A 01 68 FC | 	wrlong	#0, arg01
1f9f0     10 50 05 F1 | 	add	fp, #16
1f9f4     A8 90 02 FB | 	rdlong	local03, fp
1f9f8     03 90 06 F1 | 	add	local03, #3
1f9fc     48 03 48 FC | 	wrbyte	#1, local03
1fa00     04 50 05 F1 | 	add	fp, #4
1fa04     A8 90 0A FB | 	rdlong	local03, fp wz
1fa08     44 50 85 F1 | 	sub	fp, #68
1fa0c     F8 00 90 AD |  if_e	jmp	#LR__1189
1fa10     40 50 05 F1 | 	add	fp, #64
1fa14     A8 90 02 FB | 	rdlong	local03, fp
1fa18     2C 90 06 F1 | 	add	local03, #44
1fa1c     48 8F 02 FB | 	rdlong	local02, local03
1fa20     14 50 05 F1 | 	add	fp, #20
1fa24     A8 8E 62 FC | 	wrlong	local02, fp
1fa28     40 50 85 F1 | 	sub	fp, #64
1fa2c     A8 74 02 F6 | 	mov	arg01, fp
1fa30     30 50 05 F1 | 	add	fp, #48
1fa34     A8 76 02 FB | 	rdlong	arg02, fp
1fa38     44 50 85 F1 | 	sub	fp, #68
1fa3c     00 78 06 F6 | 	mov	arg03, #0
1fa40     A0 E1 BF FD | 	call	#_fatfs_cc_remove_chain
1fa44     10 50 05 F1 | 	add	fp, #16
1fa48     A8 34 62 FC | 	wrlong	result1, fp
1fa4c     00 34 4E F2 | 	cmps	result1, #0 wz
1fa50     10 50 85 F1 | 	sub	fp, #16
1fa54     B0 00 90 5D |  if_ne	jmp	#LR__1189
1fa58     40 50 05 F1 | 	add	fp, #64
1fa5c     A8 74 02 FB | 	rdlong	arg01, fp
1fa60     14 50 05 F1 | 	add	fp, #20
1fa64     A8 76 02 FB | 	rdlong	arg02, fp
1fa68     54 50 85 F1 | 	sub	fp, #84
1fa6c     38 DB BF FD | 	call	#_fatfs_cc_move_window
1fa70     10 50 05 F1 | 	add	fp, #16
1fa74     A8 34 62 FC | 	wrlong	result1, fp
1fa78     30 50 05 F1 | 	add	fp, #48
1fa7c     A8 90 02 FB | 	rdlong	local03, fp
1fa80     04 50 05 F1 | 	add	fp, #4
1fa84     A8 8E 02 FB | 	rdlong	local02, fp
1fa88     44 50 85 F1 | 	sub	fp, #68
1fa8c     01 8E 86 F1 | 	sub	local02, #1
1fa90     0C 90 06 F1 | 	add	local03, #12
1fa94     48 8F 62 FC | 	wrlong	local02, local03
1fa98     6C 00 90 FD | 	jmp	#LR__1189
1fa9c                 | LR__1185
1fa9c     10 50 05 F1 | 	add	fp, #16
1faa0     A8 90 0A FB | 	rdlong	local03, fp wz
1faa4     10 50 85 F1 | 	sub	fp, #16
1faa8     5C 00 90 5D |  if_ne	jmp	#LR__1188
1faac     1A 50 05 F1 | 	add	fp, #26
1fab0     A8 90 C2 FA | 	rdbyte	local03, fp
1fab4     1A 50 85 F1 | 	sub	fp, #26
1fab8     10 90 CE F7 | 	test	local03, #16 wz
1fabc     10 50 05 51 |  if_ne	add	fp, #16
1fac0     A8 08 68 5C |  if_ne	wrlong	#4, fp
1fac4     10 50 85 51 |  if_ne	sub	fp, #16
1fac8     3C 00 90 5D |  if_ne	jmp	#LR__1187
1facc     0C 50 05 F1 | 	add	fp, #12
1fad0     A8 92 C2 FA | 	rdbyte	local04, fp
1fad4     0C 50 85 F1 | 	sub	fp, #12
1fad8     49 91 E2 F8 | 	getbyte	local03, local04, #0
1fadc     02 90 0E F5 | 	and	local03, #2 wz
1fae0     24 00 90 AD |  if_e	jmp	#LR__1186
1fae4     1A 50 05 F1 | 	add	fp, #26
1fae8     A8 8C C2 FA | 	rdbyte	local01, fp
1faec     1A 50 85 F1 | 	sub	fp, #26
1faf0     46 8F E2 F8 | 	getbyte	local02, local01, #0
1faf4     01 8E 0E F5 | 	and	local02, #1 wz
1faf8     07 90 06 56 |  if_ne	mov	local03, #7
1fafc     10 50 05 51 |  if_ne	add	fp, #16
1fb00     A8 0E 68 5C |  if_ne	wrlong	#7, fp
1fb04     10 50 85 51 |  if_ne	sub	fp, #16
1fb08                 | LR__1186
1fb08                 | LR__1187
1fb08                 | LR__1188
1fb08                 | LR__1189
1fb08     10 50 05 F1 | 	add	fp, #16
1fb0c     A8 90 0A FB | 	rdlong	local03, fp wz
1fb10     10 50 85 F1 | 	sub	fp, #16
1fb14     60 00 90 5D |  if_ne	jmp	#LR__1190
1fb18     0C 50 05 F1 | 	add	fp, #12
1fb1c     A8 90 C2 FA | 	rdbyte	local03, fp
1fb20     0C 50 85 F1 | 	sub	fp, #12
1fb24     08 90 CE F7 | 	test	local03, #8 wz
1fb28     0C 50 05 51 |  if_ne	add	fp, #12
1fb2c     A8 90 C2 5A |  if_ne	rdbyte	local03, fp
1fb30     40 90 46 55 |  if_ne	or	local03, #64
1fb34     A8 90 42 5C |  if_ne	wrbyte	local03, fp
1fb38     0C 50 85 51 |  if_ne	sub	fp, #12
1fb3c     04 50 05 F1 | 	add	fp, #4
1fb40     A8 90 02 FB | 	rdlong	local03, fp
1fb44     3C 50 05 F1 | 	add	fp, #60
1fb48     A8 8E 02 FB | 	rdlong	local02, fp
1fb4c     2C 8E 06 F1 | 	add	local02, #44
1fb50     47 93 02 FB | 	rdlong	local04, local02
1fb54     20 90 06 F1 | 	add	local03, #32
1fb58     48 93 62 FC | 	wrlong	local04, local03
1fb5c     3C 50 85 F1 | 	sub	fp, #60
1fb60     A8 90 02 FB | 	rdlong	local03, fp
1fb64     2C 50 05 F1 | 	add	fp, #44
1fb68     A8 8E 02 FB | 	rdlong	local02, fp
1fb6c     30 50 85 F1 | 	sub	fp, #48
1fb70     24 90 06 F1 | 	add	local03, #36
1fb74     48 8F 62 FC | 	wrlong	local02, local03
1fb78                 | LR__1190
1fb78     10 50 05 F1 | 	add	fp, #16
1fb7c     A8 90 0A FB | 	rdlong	local03, fp wz
1fb80     10 50 85 F1 | 	sub	fp, #16
1fb84     40 03 90 5D |  if_ne	jmp	#LR__1196
1fb88     04 50 05 F1 | 	add	fp, #4
1fb8c     A8 90 02 FB | 	rdlong	local03, fp
1fb90     3C 50 05 F1 | 	add	fp, #60
1fb94     A8 74 02 FB | 	rdlong	arg01, fp
1fb98     10 50 85 F1 | 	sub	fp, #16
1fb9c     A8 76 02 FB | 	rdlong	arg02, fp
1fba0     30 50 85 F1 | 	sub	fp, #48
1fba4     38 E8 BF FD | 	call	#_fatfs_cc_ld_clust
1fba8     08 90 06 F1 | 	add	local03, #8
1fbac     48 35 62 FC | 	wrlong	result1, local03
1fbb0     04 50 05 F1 | 	add	fp, #4
1fbb4     A8 90 02 FB | 	rdlong	local03, fp
1fbb8     2C 50 05 F1 | 	add	fp, #44
1fbbc     A8 74 02 FB | 	rdlong	arg01, fp
1fbc0     1C 74 06 F1 | 	add	arg01, #28
1fbc4                 | ' {
1fbc4                 | ' 
1fbc4                 | ' 	return *((DWORD*)ptr);
1fbc4     3A 35 02 FB | 	rdlong	result1, arg01
1fbc8     0C 90 06 F1 | 	add	local03, #12
1fbcc     48 35 62 FC | 	wrlong	result1, local03
1fbd0     2C 50 85 F1 | 	sub	fp, #44
1fbd4     A8 90 02 FB | 	rdlong	local03, fp
1fbd8     3C 50 05 F1 | 	add	fp, #60
1fbdc     A8 8E 02 FB | 	rdlong	local02, fp
1fbe0     48 8F 62 FC | 	wrlong	local02, local03
1fbe4     3C 50 85 F1 | 	sub	fp, #60
1fbe8     A8 90 02 FB | 	rdlong	local03, fp
1fbec     3C 50 05 F1 | 	add	fp, #60
1fbf0     A8 8E 02 FB | 	rdlong	local02, fp
1fbf4     06 8E 06 F1 | 	add	local02, #6
1fbf8     47 93 E2 FA | 	rdword	local04, local02
1fbfc     04 90 06 F1 | 	add	local03, #4
1fc00     48 93 52 FC | 	wrword	local04, local03
1fc04     3C 50 85 F1 | 	sub	fp, #60
1fc08     A8 90 02 FB | 	rdlong	local03, fp
1fc0c     08 50 05 F1 | 	add	fp, #8
1fc10     A8 8E C2 FA | 	rdbyte	local02, fp
1fc14     10 90 06 F1 | 	add	local03, #16
1fc18     48 8F 42 FC | 	wrbyte	local02, local03
1fc1c     08 50 85 F1 | 	sub	fp, #8
1fc20     A8 90 02 FB | 	rdlong	local03, fp
1fc24     11 90 06 F1 | 	add	local03, #17
1fc28     48 01 48 FC | 	wrbyte	#0, local03
1fc2c     A8 90 02 FB | 	rdlong	local03, fp
1fc30     1C 90 06 F1 | 	add	local03, #28
1fc34     48 01 68 FC | 	wrlong	#0, local03
1fc38     A8 90 02 FB | 	rdlong	local03, fp
1fc3c     14 90 06 F1 | 	add	local03, #20
1fc40     48 01 68 FC | 	wrlong	#0, local03
1fc44     A8 74 02 FB | 	rdlong	arg01, fp
1fc48     04 50 85 F1 | 	sub	fp, #4
1fc4c     28 74 06 F1 | 	add	arg01, #40
1fc50     00 76 06 F6 | 	mov	arg02, #0
1fc54     09 78 C6 F9 | 	decod	arg03, #9
1fc58     3A 95 02 F6 | 	mov	local05, arg01
1fc5c     99 00 A0 FD | 	call	#\builtin_bytefill_
1fc60     4A 35 02 F6 | 	mov	result1, local05
1fc64     0C 50 05 F1 | 	add	fp, #12
1fc68     A8 90 C2 FA | 	rdbyte	local03, fp
1fc6c     0C 50 85 F1 | 	sub	fp, #12
1fc70     20 90 CE F7 | 	test	local03, #32 wz
1fc74     50 02 90 AD |  if_e	jmp	#LR__1195
1fc78     04 50 05 F1 | 	add	fp, #4
1fc7c     A8 8E 02 FB | 	rdlong	local02, fp
1fc80     04 50 85 F1 | 	sub	fp, #4
1fc84     0C 8E 06 F1 | 	add	local02, #12
1fc88     47 97 02 FB | 	rdlong	local06, local02
1fc8c     01 96 16 F2 | 	cmp	local06, #1 wc
1fc90     34 02 90 CD |  if_b	jmp	#LR__1195
1fc94     04 50 05 F1 | 	add	fp, #4
1fc98     A8 8E 02 FB | 	rdlong	local02, fp
1fc9c     47 91 02 F6 | 	mov	local03, local02
1fca0     0C 8E 06 F1 | 	add	local02, #12
1fca4     47 93 02 FB | 	rdlong	local04, local02
1fca8     14 90 06 F1 | 	add	local03, #20
1fcac     48 93 62 FC | 	wrlong	local04, local03
1fcb0     3C 50 05 F1 | 	add	fp, #60
1fcb4     A8 92 02 FB | 	rdlong	local04, fp
1fcb8     0A 92 06 F1 | 	add	local04, #10
1fcbc     49 91 E2 FA | 	rdword	local03, local04
1fcc0     09 90 66 F0 | 	shl	local03, #9
1fcc4     08 50 05 F1 | 	add	fp, #8
1fcc8     A8 90 62 FC | 	wrlong	local03, fp
1fccc     44 50 85 F1 | 	sub	fp, #68
1fcd0     A8 90 02 FB | 	rdlong	local03, fp
1fcd4     08 90 06 F1 | 	add	local03, #8
1fcd8     48 8F 02 FB | 	rdlong	local02, local03
1fcdc     48 50 05 F1 | 	add	fp, #72
1fce0     A8 8E 62 FC | 	wrlong	local02, fp
1fce4                 | ' 				fp->fptr = fp->obj.objsize;
1fce4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1fce4                 | ' 				clst = fp->obj.sclust;
1fce4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1fce4     48 50 85 F1 | 	sub	fp, #72
1fce8     A8 90 02 FB | 	rdlong	local03, fp
1fcec     0C 90 06 F1 | 	add	local03, #12
1fcf0     48 8F 02 FB | 	rdlong	local02, local03
1fcf4     54 50 05 F1 | 	add	fp, #84
1fcf8     A8 8E 62 FC | 	wrlong	local02, fp
1fcfc     58 50 85 F1 | 	sub	fp, #88
1fd00                 | LR__1191
1fd00     10 50 05 F1 | 	add	fp, #16
1fd04     A8 98 02 FB | 	rdlong	local07, fp
1fd08     10 50 85 F1 | 	sub	fp, #16
1fd0c     4C 8D 0A F6 | 	mov	local01, local07 wz
1fd10     A4 00 90 5D |  if_ne	jmp	#LR__1192
1fd14     58 50 05 F1 | 	add	fp, #88
1fd18     A8 9A 02 FB | 	rdlong	local08, fp
1fd1c     4D 97 02 F6 | 	mov	local06, local08
1fd20     10 50 85 F1 | 	sub	fp, #16
1fd24     A8 9C 02 FB | 	rdlong	local09, fp
1fd28     48 50 85 F1 | 	sub	fp, #72
1fd2c     4E 9F 02 F6 | 	mov	local10, local09
1fd30     4F 97 1A F2 | 	cmp	local06, local10 wcz
1fd34     80 00 90 ED |  if_be	jmp	#LR__1192
1fd38     04 50 05 F1 | 	add	fp, #4
1fd3c     A8 74 02 FB | 	rdlong	arg01, fp
1fd40     48 50 05 F1 | 	add	fp, #72
1fd44     A8 76 02 FB | 	rdlong	arg02, fp
1fd48     4C 50 85 F1 | 	sub	fp, #76
1fd4c     28 DA BF FD | 	call	#_fatfs_cc_get_fat
1fd50     4C 50 05 F1 | 	add	fp, #76
1fd54     A8 34 62 FC | 	wrlong	result1, fp
1fd58     4C 50 85 F1 | 	sub	fp, #76
1fd5c     02 34 16 F2 | 	cmp	result1, #2 wc
1fd60     10 50 05 C1 |  if_b	add	fp, #16
1fd64     A8 04 68 CC |  if_b	wrlong	#2, fp
1fd68     10 50 85 C1 |  if_b	sub	fp, #16
1fd6c     4C 50 05 F1 | 	add	fp, #76
1fd70     A8 98 02 FB | 	rdlong	local07, fp
1fd74     4C 50 85 F1 | 	sub	fp, #76
1fd78     FF FF 7F FF 
1fd7c     FF 99 0E F2 | 	cmp	local07, ##-1 wz
1fd80     10 50 05 A1 |  if_e	add	fp, #16
1fd84     A8 02 68 AC |  if_e	wrlong	#1, fp
1fd88     10 50 85 A1 |  if_e	sub	fp, #16
1fd8c     58 50 05 F1 | 	add	fp, #88
1fd90     A8 A0 02 FB | 	rdlong	local11, fp
1fd94     50 A3 02 F6 | 	mov	local12, local11
1fd98     10 50 85 F1 | 	sub	fp, #16
1fd9c     A8 A4 02 FB | 	rdlong	local13, fp
1fda0     52 A7 02 F6 | 	mov	local14, local13
1fda4     53 A3 82 F1 | 	sub	local12, local14
1fda8     10 50 05 F1 | 	add	fp, #16
1fdac     A8 A2 62 FC | 	wrlong	local12, fp
1fdb0     58 50 85 F1 | 	sub	fp, #88
1fdb4     48 FF 9F FD | 	jmp	#LR__1191
1fdb8                 | LR__1192
1fdb8     04 50 05 F1 | 	add	fp, #4
1fdbc     A8 90 02 FB | 	rdlong	local03, fp
1fdc0     48 50 05 F1 | 	add	fp, #72
1fdc4     A8 8E 02 FB | 	rdlong	local02, fp
1fdc8     18 90 06 F1 | 	add	local03, #24
1fdcc     48 8F 62 FC | 	wrlong	local02, local03
1fdd0     3C 50 85 F1 | 	sub	fp, #60
1fdd4     A8 92 02 FB | 	rdlong	local04, fp
1fdd8     10 50 85 F1 | 	sub	fp, #16
1fddc     49 91 0A F6 | 	mov	local03, local04 wz
1fde0     E4 00 90 5D |  if_ne	jmp	#LR__1194
1fde4     58 50 05 F1 | 	add	fp, #88
1fde8     A8 98 02 FB | 	rdlong	local07, fp
1fdec     58 50 85 F1 | 	sub	fp, #88
1fdf0     4C 8D 02 F6 | 	mov	local01, local07
1fdf4     46 8F 02 F6 | 	mov	local02, local01
1fdf8     FF 8F 0E F5 | 	and	local02, #511 wz
1fdfc     C8 00 90 AD |  if_e	jmp	#LR__1194
1fe00     40 50 05 F1 | 	add	fp, #64
1fe04     A8 74 02 FB | 	rdlong	arg01, fp
1fe08     0C 50 05 F1 | 	add	fp, #12
1fe0c     A8 8E 02 FB | 	rdlong	local02, fp
1fe10     4C 50 85 F1 | 	sub	fp, #76
1fe14     47 77 02 F6 | 	mov	arg02, local02
1fe18     1C D9 BF FD | 	call	#_fatfs_cc_clst2sect
1fe1c     54 50 05 F1 | 	add	fp, #84
1fe20     A8 34 62 FC | 	wrlong	result1, fp
1fe24     1A 93 0A F6 | 	mov	local04, result1 wz
1fe28     54 50 85 F1 | 	sub	fp, #84
1fe2c     02 90 06 A6 |  if_e	mov	local03, #2
1fe30     10 50 05 A1 |  if_e	add	fp, #16
1fe34     A8 04 68 AC |  if_e	wrlong	#2, fp
1fe38     10 50 85 A1 |  if_e	sub	fp, #16
1fe3c     88 00 90 AD |  if_e	jmp	#LR__1193
1fe40     04 50 05 F1 | 	add	fp, #4
1fe44     A8 90 02 FB | 	rdlong	local03, fp
1fe48     50 50 05 F1 | 	add	fp, #80
1fe4c     A8 8E 02 FB | 	rdlong	local02, fp
1fe50     04 50 05 F1 | 	add	fp, #4
1fe54     A8 9A 02 FB | 	rdlong	local08, fp
1fe58     4D 99 02 F6 | 	mov	local07, local08
1fe5c     09 98 46 F0 | 	shr	local07, #9
1fe60     4C 8F 02 F1 | 	add	local02, local07
1fe64     1C 90 06 F1 | 	add	local03, #28
1fe68     48 8F 62 FC | 	wrlong	local02, local03
1fe6c     18 50 85 F1 | 	sub	fp, #24
1fe70     A8 92 02 FB | 	rdlong	local04, fp
1fe74     01 92 06 F1 | 	add	local04, #1
1fe78     49 75 C2 FA | 	rdbyte	arg01, local04
1fe7c     3C 50 85 F1 | 	sub	fp, #60
1fe80     A8 98 02 FB | 	rdlong	local07, fp
1fe84     4C 93 02 F6 | 	mov	local04, local07
1fe88     28 92 06 F1 | 	add	local04, #40
1fe8c     04 50 85 F1 | 	sub	fp, #4
1fe90     4C 8D 02 F6 | 	mov	local01, local07
1fe94     1C 8C 06 F1 | 	add	local01, #28
1fe98     46 97 02 FB | 	rdlong	local06, local01
1fe9c     4B 8F 02 F6 | 	mov	local02, local06
1fea0     01 8C 06 F6 | 	mov	local01, #1
1fea4     49 77 02 F6 | 	mov	arg02, local04
1fea8     47 79 02 F6 | 	mov	arg03, local02
1feac     01 7A 06 F6 | 	mov	arg04, #1
1feb0     E4 D1 BF FD | 	call	#_fatfs_cc_disk_read
1feb4     1A 91 0A F6 | 	mov	local03, result1 wz
1feb8     01 90 06 56 |  if_ne	mov	local03, #1
1febc     10 50 05 51 |  if_ne	add	fp, #16
1fec0     A8 02 68 5C |  if_ne	wrlong	#1, fp
1fec4     10 50 85 51 |  if_ne	sub	fp, #16
1fec8                 | LR__1193
1fec8                 | LR__1194
1fec8                 | LR__1195
1fec8                 | LR__1196
1fec8                 | LR__1197
1fec8     10 50 05 F1 | 	add	fp, #16
1fecc     A8 90 0A FB | 	rdlong	local03, fp wz
1fed0     10 50 85 F1 | 	sub	fp, #16
1fed4     04 50 05 51 |  if_ne	add	fp, #4
1fed8     A8 90 02 5B |  if_ne	rdlong	local03, fp
1fedc     04 50 85 51 |  if_ne	sub	fp, #4
1fee0     48 01 68 5C |  if_ne	wrlong	#0, local03
1fee4                 | ' 
1fee4                 | ' 	return res ;
1fee4     10 50 05 F1 | 	add	fp, #16
1fee8     A8 34 02 FB | 	rdlong	result1, fp
1feec     10 50 85 F1 | 	sub	fp, #16
1fef0                 | LR__1198
1fef0     A8 F0 03 F6 | 	mov	ptra, fp
1fef4     B3 00 A0 FD | 	call	#popregs_
1fef8                 | _fatfs_cc_f_open_ret
1fef8     2D 00 64 FD | 	ret
1fefc                 | 
1fefc                 | _fatfs_cc_f_read
1fefc     19 4C 05 F6 | 	mov	COUNT_, #25
1ff00     A9 00 A0 FD | 	call	#pushregs_
1ff04     38 F0 07 F1 | 	add	ptra, #56
1ff08     04 50 05 F1 | 	add	fp, #4
1ff0c     A8 74 62 FC | 	wrlong	arg01, fp
1ff10     04 50 05 F1 | 	add	fp, #4
1ff14     A8 76 62 FC | 	wrlong	arg02, fp
1ff18     04 50 05 F1 | 	add	fp, #4
1ff1c     A8 78 62 FC | 	wrlong	arg03, fp
1ff20     04 50 05 F1 | 	add	fp, #4
1ff24     A8 7A 62 FC | 	wrlong	arg04, fp
1ff28     08 50 85 F1 | 	sub	fp, #8
1ff2c     A8 34 02 FB | 	rdlong	result1, fp
1ff30     2C 50 05 F1 | 	add	fp, #44
1ff34     A8 34 62 FC | 	wrlong	result1, fp
1ff38     24 50 85 F1 | 	sub	fp, #36
1ff3c     A8 34 02 FB | 	rdlong	result1, fp
1ff40     1A 01 68 FC | 	wrlong	#0, result1
1ff44     0C 50 85 F1 | 	sub	fp, #12
1ff48     A8 74 02 FB | 	rdlong	arg01, fp
1ff4c     14 50 05 F1 | 	add	fp, #20
1ff50     A8 76 02 F6 | 	mov	arg02, fp
1ff54     18 50 85 F1 | 	sub	fp, #24
1ff58     AC F6 BF FD | 	call	#_fatfs_cc_validate
1ff5c     14 50 05 F1 | 	add	fp, #20
1ff60     A8 34 62 FC | 	wrlong	result1, fp
1ff64     00 34 4E F2 | 	cmps	result1, #0 wz
1ff68     14 50 85 F1 | 	sub	fp, #20
1ff6c     28 00 90 5D |  if_ne	jmp	#LR__1199
1ff70     04 50 05 F1 | 	add	fp, #4
1ff74     A8 76 02 FB | 	rdlong	arg02, fp
1ff78     11 76 06 F1 | 	add	arg02, #17
1ff7c     3B 8D C2 FA | 	rdbyte	local01, arg02
1ff80     46 77 E2 F8 | 	getbyte	arg02, local01, #0
1ff84     10 50 05 F1 | 	add	fp, #16
1ff88     A8 76 62 FC | 	wrlong	arg02, fp
1ff8c     14 50 85 F1 | 	sub	fp, #20
1ff90     00 76 4E F2 | 	cmps	arg02, #0 wz
1ff94     10 00 90 AD |  if_e	jmp	#LR__1200
1ff98                 | LR__1199
1ff98     14 50 05 F1 | 	add	fp, #20
1ff9c     A8 34 02 FB | 	rdlong	result1, fp
1ffa0     14 50 85 F1 | 	sub	fp, #20
1ffa4     20 06 90 FD | 	jmp	#LR__1219
1ffa8                 | LR__1200
1ffa8     04 50 05 F1 | 	add	fp, #4
1ffac     A8 76 02 FB | 	rdlong	arg02, fp
1ffb0     04 50 85 F1 | 	sub	fp, #4
1ffb4     10 76 06 F1 | 	add	arg02, #16
1ffb8     3B 77 C2 FA | 	rdbyte	arg02, arg02
1ffbc     01 76 CE F7 | 	test	arg02, #1 wz
1ffc0     07 34 06 A6 |  if_e	mov	result1, #7
1ffc4     00 06 90 AD |  if_e	jmp	#LR__1219
1ffc8     04 50 05 F1 | 	add	fp, #4
1ffcc     A8 8E 02 FB | 	rdlong	local02, fp
1ffd0     47 91 02 F6 | 	mov	local03, local02
1ffd4     0C 90 06 F1 | 	add	local03, #12
1ffd8     48 93 02 FB | 	rdlong	local04, local03
1ffdc     14 8E 06 F1 | 	add	local02, #20
1ffe0     47 8F 02 FB | 	rdlong	local02, local02
1ffe4     47 93 82 F1 | 	sub	local04, local02
1ffe8     20 50 05 F1 | 	add	fp, #32
1ffec     A8 92 62 FC | 	wrlong	local04, fp
1fff0     18 50 85 F1 | 	sub	fp, #24
1fff4     A8 94 02 FB | 	rdlong	local05, fp
1fff8     0C 50 85 F1 | 	sub	fp, #12
1fffc     49 95 1A F2 | 	cmp	local05, local04 wcz
20000     24 50 05 11 |  if_a	add	fp, #36
20004     A8 94 02 1B |  if_a	rdlong	local05, fp
20008     18 50 85 11 |  if_a	sub	fp, #24
2000c     A8 94 62 1C |  if_a	wrlong	local05, fp
20010     0C 50 85 11 |  if_a	sub	fp, #12
20014                 | ' 
20014                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
20014                 | LR__1201
20014     0C 50 05 F1 | 	add	fp, #12
20018     A8 90 02 FB | 	rdlong	local03, fp
2001c     0C 50 85 F1 | 	sub	fp, #12
20020     48 95 02 F6 | 	mov	local05, local03
20024     01 94 16 F2 | 	cmp	local05, #1 wc
20028     98 05 90 CD |  if_b	jmp	#LR__1218
2002c     04 50 05 F1 | 	add	fp, #4
20030     A8 92 02 FB | 	rdlong	local04, fp
20034     04 50 85 F1 | 	sub	fp, #4
20038     14 92 06 F1 | 	add	local04, #20
2003c     49 93 02 FB | 	rdlong	local04, local04
20040     FF 93 CE F7 | 	test	local04, #511 wz
20044     54 04 90 5D |  if_ne	jmp	#LR__1216
20048     04 50 05 F1 | 	add	fp, #4
2004c     A8 8E 02 FB | 	rdlong	local02, fp
20050     14 8E 06 F1 | 	add	local02, #20
20054     47 93 02 FB | 	rdlong	local04, local02
20058     09 92 46 F0 | 	shr	local04, #9
2005c     14 50 05 F1 | 	add	fp, #20
20060     A8 96 02 FB | 	rdlong	local06, fp
20064     4B 99 02 F6 | 	mov	local07, local06
20068     0A 98 06 F1 | 	add	local07, #10
2006c     4C 9B E2 FA | 	rdword	local08, local07
20070     0A 98 86 F1 | 	sub	local07, #10
20074     4D 9D 32 F9 | 	getword	local09, local08, #0
20078     01 9C 86 F1 | 	sub	local09, #1
2007c     4E 93 0A F5 | 	and	local04, local09 wz
20080     18 50 05 F1 | 	add	fp, #24
20084     A8 92 62 FC | 	wrlong	local04, fp
20088     30 50 85 F1 | 	sub	fp, #48
2008c     E0 00 90 5D |  if_ne	jmp	#LR__1206
20090     04 50 05 F1 | 	add	fp, #4
20094     A8 92 02 FB | 	rdlong	local04, fp
20098     04 50 85 F1 | 	sub	fp, #4
2009c     14 92 06 F1 | 	add	local04, #20
200a0     49 93 0A FB | 	rdlong	local04, local04 wz
200a4     20 00 90 5D |  if_ne	jmp	#LR__1202
200a8     04 50 05 F1 | 	add	fp, #4
200ac     A8 92 02 FB | 	rdlong	local04, fp
200b0     08 92 06 F1 | 	add	local04, #8
200b4     49 93 02 FB | 	rdlong	local04, local04
200b8     18 50 05 F1 | 	add	fp, #24
200bc     A8 92 62 FC | 	wrlong	local04, fp
200c0     1C 50 85 F1 | 	sub	fp, #28
200c4     28 00 90 FD | 	jmp	#LR__1203
200c8                 | LR__1202
200c8     04 50 05 F1 | 	add	fp, #4
200cc     A8 9C 02 FB | 	rdlong	local09, fp
200d0     4E 75 02 F6 | 	mov	arg01, local09
200d4     04 50 85 F1 | 	sub	fp, #4
200d8     18 9C 06 F1 | 	add	local09, #24
200dc     4E 77 02 FB | 	rdlong	arg02, local09
200e0     94 D6 BF FD | 	call	#_fatfs_cc_get_fat
200e4     1C 50 05 F1 | 	add	fp, #28
200e8     A8 34 62 FC | 	wrlong	result1, fp
200ec     1C 50 85 F1 | 	sub	fp, #28
200f0                 | LR__1203
200f0     1C 50 05 F1 | 	add	fp, #28
200f4     A8 92 02 FB | 	rdlong	local04, fp
200f8     1C 50 85 F1 | 	sub	fp, #28
200fc     02 92 16 F2 | 	cmp	local04, #2 wc
20100     1C 00 90 3D |  if_ae	jmp	#LR__1204
20104     04 50 05 F1 | 	add	fp, #4
20108     A8 92 02 FB | 	rdlong	local04, fp
2010c     04 50 85 F1 | 	sub	fp, #4
20110     11 92 06 F1 | 	add	local04, #17
20114     49 05 48 FC | 	wrbyte	#2, local04
20118     02 34 06 F6 | 	mov	result1, #2
2011c     A8 04 90 FD | 	jmp	#LR__1219
20120                 | LR__1204
20120     1C 50 05 F1 | 	add	fp, #28
20124     A8 92 02 FB | 	rdlong	local04, fp
20128     1C 50 85 F1 | 	sub	fp, #28
2012c     FF FF 7F FF 
20130     FF 93 0E F2 | 	cmp	local04, ##-1 wz
20134     1C 00 90 5D |  if_ne	jmp	#LR__1205
20138     04 50 05 F1 | 	add	fp, #4
2013c     A8 92 02 FB | 	rdlong	local04, fp
20140     04 50 85 F1 | 	sub	fp, #4
20144     11 92 06 F1 | 	add	local04, #17
20148     49 03 48 FC | 	wrbyte	#1, local04
2014c     01 34 06 F6 | 	mov	result1, #1
20150     74 04 90 FD | 	jmp	#LR__1219
20154                 | LR__1205
20154     04 50 05 F1 | 	add	fp, #4
20158     A8 92 02 FB | 	rdlong	local04, fp
2015c     18 50 05 F1 | 	add	fp, #24
20160     A8 9C 02 FB | 	rdlong	local09, fp
20164     1C 50 85 F1 | 	sub	fp, #28
20168     18 92 06 F1 | 	add	local04, #24
2016c     49 9D 62 FC | 	wrlong	local09, local04
20170                 | LR__1206
20170     18 50 05 F1 | 	add	fp, #24
20174     A8 74 02 FB | 	rdlong	arg01, fp
20178     14 50 85 F1 | 	sub	fp, #20
2017c     A8 92 02 FB | 	rdlong	local04, fp
20180     04 50 85 F1 | 	sub	fp, #4
20184     18 92 06 F1 | 	add	local04, #24
20188     49 77 02 FB | 	rdlong	arg02, local04
2018c     A8 D5 BF FD | 	call	#_fatfs_cc_clst2sect
20190     20 50 05 F1 | 	add	fp, #32
20194     A8 34 62 FC | 	wrlong	result1, fp
20198     20 50 85 F1 | 	sub	fp, #32
2019c     00 34 0E F2 | 	cmp	result1, #0 wz
201a0     1C 00 90 5D |  if_ne	jmp	#LR__1207
201a4     04 50 05 F1 | 	add	fp, #4
201a8     A8 92 02 FB | 	rdlong	local04, fp
201ac     04 50 85 F1 | 	sub	fp, #4
201b0     11 92 06 F1 | 	add	local04, #17
201b4     49 05 48 FC | 	wrbyte	#2, local04
201b8     02 34 06 F6 | 	mov	result1, #2
201bc     08 04 90 FD | 	jmp	#LR__1219
201c0                 | LR__1207
201c0     20 50 05 F1 | 	add	fp, #32
201c4     A8 92 02 FB | 	rdlong	local04, fp
201c8     10 50 05 F1 | 	add	fp, #16
201cc     A8 9C 02 FB | 	rdlong	local09, fp
201d0     4E 93 02 F1 | 	add	local04, local09
201d4     10 50 85 F1 | 	sub	fp, #16
201d8     A8 92 62 FC | 	wrlong	local04, fp
201dc     14 50 85 F1 | 	sub	fp, #20
201e0     A8 92 02 FB | 	rdlong	local04, fp
201e4     09 92 46 F0 | 	shr	local04, #9
201e8     20 50 05 F1 | 	add	fp, #32
201ec     A8 92 62 FC | 	wrlong	local04, fp
201f0     2C 50 85 F1 | 	sub	fp, #44
201f4     01 92 16 F2 | 	cmp	local04, #1 wc
201f8     74 01 90 CD |  if_b	jmp	#LR__1211
201fc     30 50 05 F1 | 	add	fp, #48
20200     A8 92 02 FB | 	rdlong	local04, fp
20204     04 50 85 F1 | 	sub	fp, #4
20208     A8 9E 02 FB | 	rdlong	local10, fp
2020c     4F 93 02 F1 | 	add	local04, local10
20210     14 50 85 F1 | 	sub	fp, #20
20214     A8 9C 02 FB | 	rdlong	local09, fp
20218     18 50 85 F1 | 	sub	fp, #24
2021c     0A 9C 06 F1 | 	add	local09, #10
20220     4E A1 E2 FA | 	rdword	local11, local09
20224     50 93 1A F2 | 	cmp	local04, local11 wcz
20228     28 00 90 ED |  if_be	jmp	#LR__1208
2022c     18 50 05 F1 | 	add	fp, #24
20230     A8 8E 02 FB | 	rdlong	local02, fp
20234     0A 8E 06 F1 | 	add	local02, #10
20238     47 93 E2 FA | 	rdword	local04, local02
2023c     18 50 05 F1 | 	add	fp, #24
20240     A8 A0 02 FB | 	rdlong	local11, fp
20244     50 93 82 F1 | 	sub	local04, local11
20248     04 50 85 F1 | 	sub	fp, #4
2024c     A8 92 62 FC | 	wrlong	local04, fp
20250     2C 50 85 F1 | 	sub	fp, #44
20254                 | LR__1208
20254     18 50 05 F1 | 	add	fp, #24
20258     A8 8E 02 FB | 	rdlong	local02, fp
2025c     01 8E 06 F1 | 	add	local02, #1
20260     47 75 C2 FA | 	rdbyte	arg01, local02
20264     1C 50 05 F1 | 	add	fp, #28
20268     A8 76 02 FB | 	rdlong	arg02, fp
2026c     14 50 85 F1 | 	sub	fp, #20
20270     A8 78 02 FB | 	rdlong	arg03, fp
20274     0C 50 05 F1 | 	add	fp, #12
20278     A8 7A 02 FB | 	rdlong	arg04, fp
2027c     2C 50 85 F1 | 	sub	fp, #44
20280     14 CE BF FD | 	call	#_fatfs_cc_disk_read
20284     00 34 0E F2 | 	cmp	result1, #0 wz
20288     1C 00 90 AD |  if_e	jmp	#LR__1209
2028c     04 50 05 F1 | 	add	fp, #4
20290     A8 92 02 FB | 	rdlong	local04, fp
20294     04 50 85 F1 | 	sub	fp, #4
20298     11 92 06 F1 | 	add	local04, #17
2029c     49 03 48 FC | 	wrbyte	#1, local04
202a0     01 34 06 F6 | 	mov	result1, #1
202a4     20 03 90 FD | 	jmp	#LR__1219
202a8                 | LR__1209
202a8     04 50 05 F1 | 	add	fp, #4
202ac     A8 8E 02 FB | 	rdlong	local02, fp
202b0     04 50 85 F1 | 	sub	fp, #4
202b4     10 8E 06 F1 | 	add	local02, #16
202b8     47 93 C2 FA | 	rdbyte	local04, local02
202bc     80 92 0E F5 | 	and	local04, #128 wz
202c0     90 00 90 AD |  if_e	jmp	#LR__1210
202c4     04 50 05 F1 | 	add	fp, #4
202c8     A8 9C 02 FB | 	rdlong	local09, fp
202cc     1C 9C 06 F1 | 	add	local09, #28
202d0     4E A1 02 FB | 	rdlong	local11, local09
202d4     1C 50 05 F1 | 	add	fp, #28
202d8     A8 9A 02 FB | 	rdlong	local08, fp
202dc     4D A1 82 F1 | 	sub	local11, local08
202e0     0C 50 05 F1 | 	add	fp, #12
202e4     A8 A2 02 FB | 	rdlong	local12, fp
202e8     2C 50 85 F1 | 	sub	fp, #44
202ec     51 A1 12 F2 | 	cmp	local11, local12 wc
202f0     60 00 90 3D |  if_ae	jmp	#LR__1210
202f4     34 50 05 F1 | 	add	fp, #52
202f8     A8 74 02 FB | 	rdlong	arg01, fp
202fc     30 50 85 F1 | 	sub	fp, #48
20300     A8 9C 02 FB | 	rdlong	local09, fp
20304     4E A1 02 F6 | 	mov	local11, local09
20308     1C A0 06 F1 | 	add	local11, #28
2030c     50 99 02 FB | 	rdlong	local07, local11
20310     4C A5 02 F6 | 	mov	local13, local07
20314     1C 50 05 F1 | 	add	fp, #28
20318     A8 9A 02 FB | 	rdlong	local08, fp
2031c     4D 97 02 F6 | 	mov	local06, local08
20320     4B A5 82 F1 | 	sub	local13, local06
20324     09 A4 66 F0 | 	shl	local13, #9
20328     52 A7 02 F6 | 	mov	local14, local13
2032c     52 75 02 F1 | 	add	arg01, local13
20330     4E 8D 02 F6 | 	mov	local01, local09
20334     20 50 85 F1 | 	sub	fp, #32
20338     46 A1 02 F6 | 	mov	local11, local01
2033c     28 A0 06 F1 | 	add	local11, #40
20340     50 8F 02 F6 | 	mov	local02, local11
20344     09 9E C6 F9 | 	decod	local10, #9
20348     47 77 02 F6 | 	mov	arg02, local02
2034c     09 78 C6 F9 | 	decod	arg03, #9
20350     04 58 B0 FD | 	call	#__system____builtin_memmove
20354                 | LR__1210
20354     2C 50 05 F1 | 	add	fp, #44
20358     A8 92 02 FB | 	rdlong	local04, fp
2035c     09 92 66 F0 | 	shl	local04, #9
20360     04 50 85 F1 | 	sub	fp, #4
20364     A8 92 62 FC | 	wrlong	local04, fp
20368     28 50 85 F1 | 	sub	fp, #40
2036c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2036c                 | ' 				}
2036c                 | ' 
2036c                 | ' 
2036c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2036c                 | ' 				continue;
2036c     AC 01 90 FD | 	jmp	#LR__1217
20370                 | LR__1211
20370     04 50 05 F1 | 	add	fp, #4
20374     A8 92 02 FB | 	rdlong	local04, fp
20378     1C 92 06 F1 | 	add	local04, #28
2037c     49 9F 02 FB | 	rdlong	local10, local04
20380     1C 50 05 F1 | 	add	fp, #28
20384     A8 A0 02 FB | 	rdlong	local11, fp
20388     20 50 85 F1 | 	sub	fp, #32
2038c     50 9F 0A F2 | 	cmp	local10, local11 wz
20390     EC 00 90 AD |  if_e	jmp	#LR__1215
20394     04 50 05 F1 | 	add	fp, #4
20398     A8 8E 02 FB | 	rdlong	local02, fp
2039c     04 50 85 F1 | 	sub	fp, #4
203a0     10 8E 06 F1 | 	add	local02, #16
203a4     47 93 C2 FA | 	rdbyte	local04, local02
203a8     80 92 CE F7 | 	test	local04, #128 wz
203ac     7C 00 90 AD |  if_e	jmp	#LR__1213
203b0     18 50 05 F1 | 	add	fp, #24
203b4     A8 8E 02 FB | 	rdlong	local02, fp
203b8     01 8E 06 F1 | 	add	local02, #1
203bc     47 75 C2 FA | 	rdbyte	arg01, local02
203c0     14 50 85 F1 | 	sub	fp, #20
203c4     A8 8C 02 FB | 	rdlong	local01, fp
203c8     46 77 02 F6 | 	mov	arg02, local01
203cc     28 76 06 F1 | 	add	arg02, #40
203d0     04 50 85 F1 | 	sub	fp, #4
203d4     1C 8C 06 F1 | 	add	local01, #28
203d8     46 79 02 FB | 	rdlong	arg03, local01
203dc     01 7A 06 F6 | 	mov	arg04, #1
203e0     70 CD BF FD | 	call	#_fatfs_cc_disk_write
203e4     00 34 0E F2 | 	cmp	result1, #0 wz
203e8     1C 00 90 AD |  if_e	jmp	#LR__1212
203ec     04 50 05 F1 | 	add	fp, #4
203f0     A8 92 02 FB | 	rdlong	local04, fp
203f4     04 50 85 F1 | 	sub	fp, #4
203f8     11 92 06 F1 | 	add	local04, #17
203fc     49 03 48 FC | 	wrbyte	#1, local04
20400     01 34 06 F6 | 	mov	result1, #1
20404     C0 01 90 FD | 	jmp	#LR__1219
20408                 | LR__1212
20408     04 50 05 F1 | 	add	fp, #4
2040c     A8 8C 02 FB | 	rdlong	local01, fp
20410     46 93 02 F6 | 	mov	local04, local01
20414     04 50 85 F1 | 	sub	fp, #4
20418     10 8C 06 F1 | 	add	local01, #16
2041c     46 9F C2 FA | 	rdbyte	local10, local01
20420     7F 9E 06 F5 | 	and	local10, #127
20424     10 92 06 F1 | 	add	local04, #16
20428     49 9F 42 FC | 	wrbyte	local10, local04
2042c                 | LR__1213
2042c     18 50 05 F1 | 	add	fp, #24
20430     A8 8E 02 FB | 	rdlong	local02, fp
20434     01 8E 06 F1 | 	add	local02, #1
20438     47 75 C2 FA | 	rdbyte	arg01, local02
2043c     14 50 85 F1 | 	sub	fp, #20
20440     A8 76 02 FB | 	rdlong	arg02, fp
20444     28 76 06 F1 | 	add	arg02, #40
20448     1C 50 05 F1 | 	add	fp, #28
2044c     A8 78 02 FB | 	rdlong	arg03, fp
20450     20 50 85 F1 | 	sub	fp, #32
20454     01 7A 06 F6 | 	mov	arg04, #1
20458     3C CC BF FD | 	call	#_fatfs_cc_disk_read
2045c     00 34 0E F2 | 	cmp	result1, #0 wz
20460     1C 00 90 AD |  if_e	jmp	#LR__1214
20464     04 50 05 F1 | 	add	fp, #4
20468     A8 92 02 FB | 	rdlong	local04, fp
2046c     04 50 85 F1 | 	sub	fp, #4
20470     11 92 06 F1 | 	add	local04, #17
20474     49 03 48 FC | 	wrbyte	#1, local04
20478     01 34 06 F6 | 	mov	result1, #1
2047c     48 01 90 FD | 	jmp	#LR__1219
20480                 | LR__1214
20480                 | LR__1215
20480     04 50 05 F1 | 	add	fp, #4
20484     A8 92 02 FB | 	rdlong	local04, fp
20488     1C 50 05 F1 | 	add	fp, #28
2048c     A8 9E 02 FB | 	rdlong	local10, fp
20490     20 50 85 F1 | 	sub	fp, #32
20494     1C 92 06 F1 | 	add	local04, #28
20498     49 9F 62 FC | 	wrlong	local10, local04
2049c                 | LR__1216
2049c     04 50 05 F1 | 	add	fp, #4
204a0     A8 8E 02 FB | 	rdlong	local02, fp
204a4     14 8E 06 F1 | 	add	local02, #20
204a8     47 8D 02 FB | 	rdlong	local01, local02
204ac     FF 8D 06 F5 | 	and	local01, #511
204b0     09 92 C6 F9 | 	decod	local04, #9
204b4     46 93 82 F1 | 	sub	local04, local01
204b8     24 50 05 F1 | 	add	fp, #36
204bc     A8 92 62 FC | 	wrlong	local04, fp
204c0     1C 50 85 F1 | 	sub	fp, #28
204c4     A8 9E 02 FB | 	rdlong	local10, fp
204c8     0C 50 85 F1 | 	sub	fp, #12
204cc     4F 93 1A F2 | 	cmp	local04, local10 wcz
204d0     0C 50 05 11 |  if_a	add	fp, #12
204d4     A8 92 02 1B |  if_a	rdlong	local04, fp
204d8     1C 50 05 11 |  if_a	add	fp, #28
204dc     A8 92 62 1C |  if_a	wrlong	local04, fp
204e0     28 50 85 11 |  if_a	sub	fp, #40
204e4     34 50 05 F1 | 	add	fp, #52
204e8     A8 74 02 FB | 	rdlong	arg01, fp
204ec     30 50 85 F1 | 	sub	fp, #48
204f0     A8 98 02 FB | 	rdlong	local07, fp
204f4     4C 77 02 F6 | 	mov	arg02, local07
204f8     28 76 06 F1 | 	add	arg02, #40
204fc     14 98 06 F1 | 	add	local07, #20
20500     4C A3 02 FB | 	rdlong	local12, local07
20504     FF A3 06 F5 | 	and	local12, #511
20508     51 77 02 F1 | 	add	arg02, local12
2050c     24 50 05 F1 | 	add	fp, #36
20510     A8 78 02 FB | 	rdlong	arg03, fp
20514     28 50 85 F1 | 	sub	fp, #40
20518     3C 56 B0 FD | 	call	#__system____builtin_memmove
2051c                 | LR__1217
2051c     0C 50 05 F1 | 	add	fp, #12
20520     A8 92 02 FB | 	rdlong	local04, fp
20524     1C 50 05 F1 | 	add	fp, #28
20528     A8 8C 02 FB | 	rdlong	local01, fp
2052c     46 93 82 F1 | 	sub	local04, local01
20530     1C 50 85 F1 | 	sub	fp, #28
20534     A8 92 62 FC | 	wrlong	local04, fp
20538     04 50 05 F1 | 	add	fp, #4
2053c     A8 9C 02 FB | 	rdlong	local09, fp
20540     4E 99 02 FB | 	rdlong	local07, local09
20544     18 50 05 F1 | 	add	fp, #24
20548     A8 A6 02 FB | 	rdlong	local14, fp
2054c     53 A5 02 F6 | 	mov	local13, local14
20550     53 99 02 F1 | 	add	local07, local14
20554     4E 99 62 FC | 	wrlong	local07, local09
20558     0C 50 05 F1 | 	add	fp, #12
2055c     A8 A8 02 FB | 	rdlong	local15, fp
20560     54 A3 02 F6 | 	mov	local12, local15
20564     0C 50 85 F1 | 	sub	fp, #12
20568     A8 AA 02 FB | 	rdlong	local16, fp
2056c     55 AD 02 F6 | 	mov	local17, local16
20570     55 A3 02 F1 | 	add	local12, local16
20574     0C 50 05 F1 | 	add	fp, #12
20578     A8 A2 62 FC | 	wrlong	local12, fp
2057c     30 50 85 F1 | 	sub	fp, #48
20580     A8 AE 02 FB | 	rdlong	local18, fp
20584     57 B1 02 F6 | 	mov	local19, local18
20588     57 B3 02 F6 | 	mov	local20, local18
2058c     59 B5 02 F6 | 	mov	local21, local20
20590     14 B4 06 F1 | 	add	local21, #20
20594     5A B7 02 FB | 	rdlong	local22, local21
20598     14 B4 86 F1 | 	sub	local21, #20
2059c     5B B9 02 F6 | 	mov	local23, local22
205a0     24 50 05 F1 | 	add	fp, #36
205a4     A8 BA 02 FB | 	rdlong	local24, fp
205a8     28 50 85 F1 | 	sub	fp, #40
205ac     5D BD 02 F6 | 	mov	local25, local24
205b0     5D B9 02 F1 | 	add	local23, local24
205b4     14 B0 06 F1 | 	add	local19, #20
205b8     58 B9 62 FC | 	wrlong	local23, local19
205bc     14 B0 86 F1 | 	sub	local19, #20
205c0     50 FA 9F FD | 	jmp	#LR__1201
205c4                 | LR__1218
205c4                 | ' 
205c4                 | ' 
205c4                 | ' 
205c4                 | ' 
205c4                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
205c4                 | ' 
205c4                 | ' 	}
205c4                 | ' 
205c4                 | ' 	return FR_OK ;
205c4     00 34 06 F6 | 	mov	result1, #0
205c8                 | LR__1219
205c8     A8 F0 03 F6 | 	mov	ptra, fp
205cc     B3 00 A0 FD | 	call	#popregs_
205d0                 | _fatfs_cc_f_read_ret
205d0     2D 00 64 FD | 	ret
205d4                 | 
205d4                 | _fatfs_cc_f_write
205d4     2A 4C 05 F6 | 	mov	COUNT_, #42
205d8     A9 00 A0 FD | 	call	#pushregs_
205dc     34 F0 07 F1 | 	add	ptra, #52
205e0     04 50 05 F1 | 	add	fp, #4
205e4     A8 74 62 FC | 	wrlong	arg01, fp
205e8     04 50 05 F1 | 	add	fp, #4
205ec     A8 76 62 FC | 	wrlong	arg02, fp
205f0     04 50 05 F1 | 	add	fp, #4
205f4     A8 78 62 FC | 	wrlong	arg03, fp
205f8     04 50 05 F1 | 	add	fp, #4
205fc     A8 7A 62 FC | 	wrlong	arg04, fp
20600     08 50 85 F1 | 	sub	fp, #8
20604     A8 34 02 FB | 	rdlong	result1, fp
20608     28 50 05 F1 | 	add	fp, #40
2060c     A8 34 62 FC | 	wrlong	result1, fp
20610     20 50 85 F1 | 	sub	fp, #32
20614     A8 34 02 FB | 	rdlong	result1, fp
20618     1A 01 68 FC | 	wrlong	#0, result1
2061c     0C 50 85 F1 | 	sub	fp, #12
20620     A8 74 02 FB | 	rdlong	arg01, fp
20624     14 50 05 F1 | 	add	fp, #20
20628     A8 76 02 F6 | 	mov	arg02, fp
2062c     18 50 85 F1 | 	sub	fp, #24
20630     D4 EF BF FD | 	call	#_fatfs_cc_validate
20634     14 50 05 F1 | 	add	fp, #20
20638     A8 34 62 FC | 	wrlong	result1, fp
2063c     00 34 4E F2 | 	cmps	result1, #0 wz
20640     14 50 85 F1 | 	sub	fp, #20
20644     28 00 90 5D |  if_ne	jmp	#LR__1220
20648     04 50 05 F1 | 	add	fp, #4
2064c     A8 76 02 FB | 	rdlong	arg02, fp
20650     11 76 06 F1 | 	add	arg02, #17
20654     3B 77 C2 FA | 	rdbyte	arg02, arg02
20658     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
2065c     10 50 05 F1 | 	add	fp, #16
20660     A8 76 62 FC | 	wrlong	arg02, fp
20664     14 50 85 F1 | 	sub	fp, #20
20668     00 76 4E F2 | 	cmps	arg02, #0 wz
2066c     10 00 90 AD |  if_e	jmp	#LR__1221
20670                 | LR__1220
20670     14 50 05 F1 | 	add	fp, #20
20674     A8 34 02 FB | 	rdlong	result1, fp
20678     14 50 85 F1 | 	sub	fp, #20
2067c     90 07 90 FD | 	jmp	#LR__1243
20680                 | LR__1221
20680     04 50 05 F1 | 	add	fp, #4
20684     A8 76 02 FB | 	rdlong	arg02, fp
20688     04 50 85 F1 | 	sub	fp, #4
2068c     10 76 06 F1 | 	add	arg02, #16
20690     3B 77 C2 FA | 	rdbyte	arg02, arg02
20694     02 76 CE F7 | 	test	arg02, #2 wz
20698     07 34 06 A6 |  if_e	mov	result1, #7
2069c     70 07 90 AD |  if_e	jmp	#LR__1243
206a0     04 50 05 F1 | 	add	fp, #4
206a4     A8 8C 02 FB | 	rdlong	local01, fp
206a8     46 77 02 F6 | 	mov	arg02, local01
206ac     14 76 06 F1 | 	add	arg02, #20
206b0     3B 77 02 FB | 	rdlong	arg02, arg02
206b4     08 50 05 F1 | 	add	fp, #8
206b8     A8 34 02 FB | 	rdlong	result1, fp
206bc     1A 77 02 F1 | 	add	arg02, result1
206c0     46 35 02 F6 | 	mov	result1, local01
206c4     0C 50 85 F1 | 	sub	fp, #12
206c8     14 34 06 F1 | 	add	result1, #20
206cc     1A 8F 02 FB | 	rdlong	local02, result1
206d0     47 91 02 F6 | 	mov	local03, local02
206d4     48 77 12 F2 | 	cmp	arg02, local03 wc
206d8     24 00 90 3D |  if_ae	jmp	#LR__1222
206dc     04 50 05 F1 | 	add	fp, #4
206e0     A8 76 02 FB | 	rdlong	arg02, fp
206e4     01 34 66 F6 | 	neg	result1, #1
206e8     14 76 06 F1 | 	add	arg02, #20
206ec     3B 77 02 FB | 	rdlong	arg02, arg02
206f0     3B 35 82 F1 | 	sub	result1, arg02
206f4     08 50 05 F1 | 	add	fp, #8
206f8     A8 34 62 FC | 	wrlong	result1, fp
206fc     0C 50 85 F1 | 	sub	fp, #12
20700                 | LR__1222
20700                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20700                 | ' 	}
20700                 | ' 
20700                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20700                 | LR__1223
20700     0C 50 05 F1 | 	add	fp, #12
20704     A8 92 02 FB | 	rdlong	local04, fp
20708     0C 50 85 F1 | 	sub	fp, #12
2070c     49 95 02 F6 | 	mov	local05, local04
20710     01 94 16 F2 | 	cmp	local05, #1 wc
20714     D0 06 90 CD |  if_b	jmp	#LR__1242
20718     04 50 05 F1 | 	add	fp, #4
2071c     A8 34 02 FB | 	rdlong	result1, fp
20720     04 50 85 F1 | 	sub	fp, #4
20724     14 34 06 F1 | 	add	result1, #20
20728     1A 35 02 FB | 	rdlong	result1, result1
2072c     FF 35 CE F7 | 	test	result1, #511 wz
20730     D0 04 90 5D |  if_ne	jmp	#LR__1238
20734     04 50 05 F1 | 	add	fp, #4
20738     A8 96 02 FB | 	rdlong	local06, fp
2073c     14 96 06 F1 | 	add	local06, #20
20740     4B 99 02 FB | 	rdlong	local07, local06
20744     4C 35 02 F6 | 	mov	result1, local07
20748     09 34 46 F0 | 	shr	result1, #9
2074c     14 50 05 F1 | 	add	fp, #20
20750     A8 9A 02 FB | 	rdlong	local08, fp
20754     4D 9D 02 F6 | 	mov	local09, local08
20758     0A 9C 06 F1 | 	add	local09, #10
2075c     4E 9F E2 FA | 	rdword	local10, local09
20760     0A 9C 86 F1 | 	sub	local09, #10
20764     4F A1 32 F9 | 	getword	local11, local10, #0
20768     01 A0 86 F1 | 	sub	local11, #1
2076c     50 35 0A F5 | 	and	result1, local11 wz
20770     14 50 05 F1 | 	add	fp, #20
20774     A8 34 62 FC | 	wrlong	result1, fp
20778     2C 50 85 F1 | 	sub	fp, #44
2077c     44 01 90 5D |  if_ne	jmp	#LR__1229
20780     04 50 05 F1 | 	add	fp, #4
20784     A8 A2 02 FB | 	rdlong	local12, fp
20788     04 50 85 F1 | 	sub	fp, #4
2078c     14 A2 06 F1 | 	add	local12, #20
20790     51 77 0A FB | 	rdlong	arg02, local12 wz
20794     44 00 90 5D |  if_ne	jmp	#LR__1224
20798     04 50 05 F1 | 	add	fp, #4
2079c     A8 A2 02 FB | 	rdlong	local12, fp
207a0     08 A2 06 F1 | 	add	local12, #8
207a4     51 A3 0A FB | 	rdlong	local12, local12 wz
207a8     18 50 05 F1 | 	add	fp, #24
207ac     A8 A2 62 FC | 	wrlong	local12, fp
207b0     1C 50 85 F1 | 	sub	fp, #28
207b4     4C 00 90 5D |  if_ne	jmp	#LR__1225
207b8     04 50 05 F1 | 	add	fp, #4
207bc     A8 74 02 FB | 	rdlong	arg01, fp
207c0     04 50 85 F1 | 	sub	fp, #4
207c4     00 76 06 F6 | 	mov	arg02, #0
207c8     30 D5 BF FD | 	call	#_fatfs_cc_create_chain
207cc     1C 50 05 F1 | 	add	fp, #28
207d0     A8 34 62 FC | 	wrlong	result1, fp
207d4     1C 50 85 F1 | 	sub	fp, #28
207d8     28 00 90 FD | 	jmp	#LR__1225
207dc                 | LR__1224
207dc     04 50 05 F1 | 	add	fp, #4
207e0     A8 A4 02 FB | 	rdlong	local13, fp
207e4     52 75 02 F6 | 	mov	arg01, local13
207e8     04 50 85 F1 | 	sub	fp, #4
207ec     18 A4 06 F1 | 	add	local13, #24
207f0     52 77 02 FB | 	rdlong	arg02, local13
207f4     04 D5 BF FD | 	call	#_fatfs_cc_create_chain
207f8     1C 50 05 F1 | 	add	fp, #28
207fc     A8 34 62 FC | 	wrlong	result1, fp
20800     1C 50 85 F1 | 	sub	fp, #28
20804                 | LR__1225
20804     1C 50 05 F1 | 	add	fp, #28
20808     A8 A2 0A FB | 	rdlong	local12, fp wz
2080c     1C 50 85 F1 | 	sub	fp, #28
20810     D4 05 90 AD |  if_e	jmp	#LR__1242
20814     1C 50 05 F1 | 	add	fp, #28
20818     A8 A2 02 FB | 	rdlong	local12, fp
2081c     1C 50 85 F1 | 	sub	fp, #28
20820     01 A2 0E F2 | 	cmp	local12, #1 wz
20824     1C 00 90 5D |  if_ne	jmp	#LR__1226
20828     04 50 05 F1 | 	add	fp, #4
2082c     A8 A2 02 FB | 	rdlong	local12, fp
20830     04 50 85 F1 | 	sub	fp, #4
20834     11 A2 06 F1 | 	add	local12, #17
20838     51 05 48 FC | 	wrbyte	#2, local12
2083c     02 34 06 F6 | 	mov	result1, #2
20840     CC 05 90 FD | 	jmp	#LR__1243
20844                 | LR__1226
20844     1C 50 05 F1 | 	add	fp, #28
20848     A8 A2 02 FB | 	rdlong	local12, fp
2084c     1C 50 85 F1 | 	sub	fp, #28
20850     FF FF 7F FF 
20854     FF A3 0E F2 | 	cmp	local12, ##-1 wz
20858     1C 00 90 5D |  if_ne	jmp	#LR__1227
2085c     04 50 05 F1 | 	add	fp, #4
20860     A8 A2 02 FB | 	rdlong	local12, fp
20864     04 50 85 F1 | 	sub	fp, #4
20868     11 A2 06 F1 | 	add	local12, #17
2086c     51 03 48 FC | 	wrbyte	#1, local12
20870     01 34 06 F6 | 	mov	result1, #1
20874     98 05 90 FD | 	jmp	#LR__1243
20878                 | LR__1227
20878     04 50 05 F1 | 	add	fp, #4
2087c     A8 A2 02 FB | 	rdlong	local12, fp
20880     18 50 05 F1 | 	add	fp, #24
20884     A8 A4 02 FB | 	rdlong	local13, fp
20888     18 A2 06 F1 | 	add	local12, #24
2088c     51 A5 62 FC | 	wrlong	local13, local12
20890     18 50 85 F1 | 	sub	fp, #24
20894     A8 A2 02 FB | 	rdlong	local12, fp
20898     04 50 85 F1 | 	sub	fp, #4
2089c     08 A2 06 F1 | 	add	local12, #8
208a0     51 A5 0A FB | 	rdlong	local13, local12 wz
208a4     1C 00 90 5D |  if_ne	jmp	#LR__1228
208a8     04 50 05 F1 | 	add	fp, #4
208ac     A8 A2 02 FB | 	rdlong	local12, fp
208b0     18 50 05 F1 | 	add	fp, #24
208b4     A8 A4 02 FB | 	rdlong	local13, fp
208b8     1C 50 85 F1 | 	sub	fp, #28
208bc     08 A2 06 F1 | 	add	local12, #8
208c0     51 A5 62 FC | 	wrlong	local13, local12
208c4                 | LR__1228
208c4                 | LR__1229
208c4     04 50 05 F1 | 	add	fp, #4
208c8     A8 96 02 FB | 	rdlong	local06, fp
208cc     04 50 85 F1 | 	sub	fp, #4
208d0     10 96 06 F1 | 	add	local06, #16
208d4     4B A3 C2 FA | 	rdbyte	local12, local06
208d8     80 A2 CE F7 | 	test	local12, #128 wz
208dc     7C 00 90 AD |  if_e	jmp	#LR__1231
208e0     18 50 05 F1 | 	add	fp, #24
208e4     A8 96 02 FB | 	rdlong	local06, fp
208e8     01 96 06 F1 | 	add	local06, #1
208ec     4B 75 C2 FA | 	rdbyte	arg01, local06
208f0     14 50 85 F1 | 	sub	fp, #20
208f4     A8 8C 02 FB | 	rdlong	local01, fp
208f8     46 77 02 F6 | 	mov	arg02, local01
208fc     28 76 06 F1 | 	add	arg02, #40
20900     04 50 85 F1 | 	sub	fp, #4
20904     1C 8C 06 F1 | 	add	local01, #28
20908     46 79 02 FB | 	rdlong	arg03, local01
2090c     01 7A 06 F6 | 	mov	arg04, #1
20910     40 C8 BF FD | 	call	#_fatfs_cc_disk_write
20914     00 34 0E F2 | 	cmp	result1, #0 wz
20918     1C 00 90 AD |  if_e	jmp	#LR__1230
2091c     04 50 05 F1 | 	add	fp, #4
20920     A8 A2 02 FB | 	rdlong	local12, fp
20924     04 50 85 F1 | 	sub	fp, #4
20928     11 A2 06 F1 | 	add	local12, #17
2092c     51 03 48 FC | 	wrbyte	#1, local12
20930     01 34 06 F6 | 	mov	result1, #1
20934     D8 04 90 FD | 	jmp	#LR__1243
20938                 | LR__1230
20938     04 50 05 F1 | 	add	fp, #4
2093c     A8 8C 02 FB | 	rdlong	local01, fp
20940     46 A3 02 F6 | 	mov	local12, local01
20944     04 50 85 F1 | 	sub	fp, #4
20948     10 8C 06 F1 | 	add	local01, #16
2094c     46 A5 C2 FA | 	rdbyte	local13, local01
20950     7F A4 06 F5 | 	and	local13, #127
20954     10 A2 06 F1 | 	add	local12, #16
20958     51 A5 42 FC | 	wrbyte	local13, local12
2095c                 | LR__1231
2095c     18 50 05 F1 | 	add	fp, #24
20960     A8 74 02 FB | 	rdlong	arg01, fp
20964     14 50 85 F1 | 	sub	fp, #20
20968     A8 A4 02 FB | 	rdlong	local13, fp
2096c     04 50 85 F1 | 	sub	fp, #4
20970     18 A4 06 F1 | 	add	local13, #24
20974     52 77 02 FB | 	rdlong	arg02, local13
20978     BC CD BF FD | 	call	#_fatfs_cc_clst2sect
2097c     20 50 05 F1 | 	add	fp, #32
20980     A8 34 62 FC | 	wrlong	result1, fp
20984     20 50 85 F1 | 	sub	fp, #32
20988     00 34 0E F2 | 	cmp	result1, #0 wz
2098c     1C 00 90 5D |  if_ne	jmp	#LR__1232
20990     04 50 05 F1 | 	add	fp, #4
20994     A8 A2 02 FB | 	rdlong	local12, fp
20998     04 50 85 F1 | 	sub	fp, #4
2099c     11 A2 06 F1 | 	add	local12, #17
209a0     51 05 48 FC | 	wrbyte	#2, local12
209a4     02 34 06 F6 | 	mov	result1, #2
209a8     64 04 90 FD | 	jmp	#LR__1243
209ac                 | LR__1232
209ac     20 50 05 F1 | 	add	fp, #32
209b0     A8 A2 02 FB | 	rdlong	local12, fp
209b4     0C 50 05 F1 | 	add	fp, #12
209b8     A8 A4 02 FB | 	rdlong	local13, fp
209bc     52 A3 02 F1 | 	add	local12, local13
209c0     0C 50 85 F1 | 	sub	fp, #12
209c4     A8 A2 62 FC | 	wrlong	local12, fp
209c8     14 50 85 F1 | 	sub	fp, #20
209cc     A8 A2 02 FB | 	rdlong	local12, fp
209d0     09 A2 46 F0 | 	shr	local12, #9
209d4     1C 50 05 F1 | 	add	fp, #28
209d8     A8 A2 62 FC | 	wrlong	local12, fp
209dc     28 50 85 F1 | 	sub	fp, #40
209e0     01 A2 16 F2 | 	cmp	local12, #1 wc
209e4     60 01 90 CD |  if_b	jmp	#LR__1236
209e8     2C 50 05 F1 | 	add	fp, #44
209ec     A8 A2 02 FB | 	rdlong	local12, fp
209f0     04 50 85 F1 | 	sub	fp, #4
209f4     A8 A4 02 FB | 	rdlong	local13, fp
209f8     52 A3 02 F1 | 	add	local12, local13
209fc     10 50 85 F1 | 	sub	fp, #16
20a00     A8 A0 02 FB | 	rdlong	local11, fp
20a04     18 50 85 F1 | 	sub	fp, #24
20a08     0A A0 06 F1 | 	add	local11, #10
20a0c     50 99 E2 FA | 	rdword	local07, local11
20a10     4C A3 1A F2 | 	cmp	local12, local07 wcz
20a14     28 00 90 ED |  if_be	jmp	#LR__1233
20a18     18 50 05 F1 | 	add	fp, #24
20a1c     A8 96 02 FB | 	rdlong	local06, fp
20a20     0A 96 06 F1 | 	add	local06, #10
20a24     4B A3 E2 FA | 	rdword	local12, local06
20a28     14 50 05 F1 | 	add	fp, #20
20a2c     A8 98 02 FB | 	rdlong	local07, fp
20a30     4C A3 82 F1 | 	sub	local12, local07
20a34     04 50 85 F1 | 	sub	fp, #4
20a38     A8 A2 62 FC | 	wrlong	local12, fp
20a3c     28 50 85 F1 | 	sub	fp, #40
20a40                 | LR__1233
20a40     18 50 05 F1 | 	add	fp, #24
20a44     A8 96 02 FB | 	rdlong	local06, fp
20a48     01 96 06 F1 | 	add	local06, #1
20a4c     4B 75 C2 FA | 	rdbyte	arg01, local06
20a50     18 50 05 F1 | 	add	fp, #24
20a54     A8 76 02 FB | 	rdlong	arg02, fp
20a58     10 50 85 F1 | 	sub	fp, #16
20a5c     A8 78 02 FB | 	rdlong	arg03, fp
20a60     08 50 05 F1 | 	add	fp, #8
20a64     A8 7A 02 FB | 	rdlong	arg04, fp
20a68     28 50 85 F1 | 	sub	fp, #40
20a6c     E4 C6 BF FD | 	call	#_fatfs_cc_disk_write
20a70     00 34 0E F2 | 	cmp	result1, #0 wz
20a74     1C 00 90 AD |  if_e	jmp	#LR__1234
20a78     04 50 05 F1 | 	add	fp, #4
20a7c     A8 A2 02 FB | 	rdlong	local12, fp
20a80     04 50 85 F1 | 	sub	fp, #4
20a84     11 A2 06 F1 | 	add	local12, #17
20a88     51 03 48 FC | 	wrbyte	#1, local12
20a8c     01 34 06 F6 | 	mov	result1, #1
20a90     7C 03 90 FD | 	jmp	#LR__1243
20a94                 | LR__1234
20a94     04 50 05 F1 | 	add	fp, #4
20a98     A8 96 02 FB | 	rdlong	local06, fp
20a9c     1C 96 06 F1 | 	add	local06, #28
20aa0     4B A3 02 FB | 	rdlong	local12, local06
20aa4     1C 50 05 F1 | 	add	fp, #28
20aa8     A8 98 02 FB | 	rdlong	local07, fp
20aac     4C A3 82 F1 | 	sub	local12, local07
20ab0     08 50 05 F1 | 	add	fp, #8
20ab4     A8 9C 02 FB | 	rdlong	local09, fp
20ab8     28 50 85 F1 | 	sub	fp, #40
20abc     4E A3 12 F2 | 	cmp	local12, local09 wc
20ac0     68 00 90 3D |  if_ae	jmp	#LR__1235
20ac4     04 50 05 F1 | 	add	fp, #4
20ac8     A8 74 02 FB | 	rdlong	arg01, fp
20acc     28 74 06 F1 | 	add	arg01, #40
20ad0     2C 50 05 F1 | 	add	fp, #44
20ad4     A8 76 02 FB | 	rdlong	arg02, fp
20ad8     2C 50 85 F1 | 	sub	fp, #44
20adc     A8 A0 02 FB | 	rdlong	local11, fp
20ae0     1C A0 06 F1 | 	add	local11, #28
20ae4     50 A5 02 FB | 	rdlong	local13, local11
20ae8     1C 50 05 F1 | 	add	fp, #28
20aec     A8 9E 02 FB | 	rdlong	local10, fp
20af0     20 50 85 F1 | 	sub	fp, #32
20af4     4F A5 82 F1 | 	sub	local13, local10
20af8     09 A4 66 F0 | 	shl	local13, #9
20afc     52 77 02 F1 | 	add	arg02, local13
20b00     09 78 C6 F9 | 	decod	arg03, #9
20b04     50 50 B0 FD | 	call	#__system____builtin_memmove
20b08     04 50 05 F1 | 	add	fp, #4
20b0c     A8 8C 02 FB | 	rdlong	local01, fp
20b10     46 A3 02 F6 | 	mov	local12, local01
20b14     04 50 85 F1 | 	sub	fp, #4
20b18     10 8C 06 F1 | 	add	local01, #16
20b1c     46 A5 C2 FA | 	rdbyte	local13, local01
20b20     7F A4 06 F5 | 	and	local13, #127
20b24     10 A2 06 F1 | 	add	local12, #16
20b28     51 A5 42 FC | 	wrbyte	local13, local12
20b2c                 | LR__1235
20b2c     28 50 05 F1 | 	add	fp, #40
20b30     A8 A2 02 FB | 	rdlong	local12, fp
20b34     09 A2 66 F0 | 	shl	local12, #9
20b38     04 50 85 F1 | 	sub	fp, #4
20b3c     A8 A2 62 FC | 	wrlong	local12, fp
20b40     24 50 85 F1 | 	sub	fp, #36
20b44                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
20b44                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
20b44                 | ' 				}
20b44                 | ' 
20b44                 | ' 
20b44                 | ' 				wcnt =  ((UINT) 512 )  * cc;
20b44                 | ' 				continue;
20b44     60 01 90 FD | 	jmp	#LR__1239
20b48                 | LR__1236
20b48     04 50 05 F1 | 	add	fp, #4
20b4c     A8 A2 02 FB | 	rdlong	local12, fp
20b50     1C A2 06 F1 | 	add	local12, #28
20b54     51 A5 02 FB | 	rdlong	local13, local12
20b58     1C 50 05 F1 | 	add	fp, #28
20b5c     A8 98 02 FB | 	rdlong	local07, fp
20b60     20 50 85 F1 | 	sub	fp, #32
20b64     4C A5 0A F2 | 	cmp	local13, local07 wz
20b68     7C 00 90 AD |  if_e	jmp	#LR__1237
20b6c     04 50 05 F1 | 	add	fp, #4
20b70     A8 9E 02 FB | 	rdlong	local10, fp
20b74     4F 9D 02 F6 | 	mov	local09, local10
20b78     04 50 85 F1 | 	sub	fp, #4
20b7c     14 9C 06 F1 | 	add	local09, #20
20b80     4E 8F 02 FB | 	rdlong	local02, local09
20b84     0C 9E 06 F1 | 	add	local10, #12
20b88     4F A5 02 FB | 	rdlong	local13, local10
20b8c     52 8F 12 F2 | 	cmp	local02, local13 wc
20b90     54 00 90 3D |  if_ae	jmp	#LR__1237
20b94     18 50 05 F1 | 	add	fp, #24
20b98     A8 A2 02 FB | 	rdlong	local12, fp
20b9c     01 A2 06 F1 | 	add	local12, #1
20ba0     51 75 C2 FA | 	rdbyte	arg01, local12
20ba4     14 50 85 F1 | 	sub	fp, #20
20ba8     A8 76 02 FB | 	rdlong	arg02, fp
20bac     28 76 06 F1 | 	add	arg02, #40
20bb0     1C 50 05 F1 | 	add	fp, #28
20bb4     A8 78 02 FB | 	rdlong	arg03, fp
20bb8     20 50 85 F1 | 	sub	fp, #32
20bbc     01 7A 06 F6 | 	mov	arg04, #1
20bc0     D4 C4 BF FD | 	call	#_fatfs_cc_disk_read
20bc4     00 34 0E F2 | 	cmp	result1, #0 wz
20bc8     1C 00 90 AD |  if_e	jmp	#LR__1237
20bcc     04 50 05 F1 | 	add	fp, #4
20bd0     A8 A2 02 FB | 	rdlong	local12, fp
20bd4     04 50 85 F1 | 	sub	fp, #4
20bd8     11 A2 06 F1 | 	add	local12, #17
20bdc     51 03 48 FC | 	wrbyte	#1, local12
20be0                 | ' 				fp->fptr < fp->obj.objsize &&
20be0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
20be0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
20be0     01 34 06 F6 | 	mov	result1, #1
20be4     28 02 90 FD | 	jmp	#LR__1243
20be8                 | LR__1237
20be8     04 50 05 F1 | 	add	fp, #4
20bec     A8 A2 02 FB | 	rdlong	local12, fp
20bf0     1C 50 05 F1 | 	add	fp, #28
20bf4     A8 A4 02 FB | 	rdlong	local13, fp
20bf8     20 50 85 F1 | 	sub	fp, #32
20bfc     1C A2 06 F1 | 	add	local12, #28
20c00     51 A5 62 FC | 	wrlong	local13, local12
20c04                 | LR__1238
20c04     04 50 05 F1 | 	add	fp, #4
20c08     A8 96 02 FB | 	rdlong	local06, fp
20c0c     14 96 06 F1 | 	add	local06, #20
20c10     4B 8D 02 FB | 	rdlong	local01, local06
20c14     FF 8D 06 F5 | 	and	local01, #511
20c18     09 A2 C6 F9 | 	decod	local12, #9
20c1c     46 A3 82 F1 | 	sub	local12, local01
20c20     20 50 05 F1 | 	add	fp, #32
20c24     A8 A2 62 FC | 	wrlong	local12, fp
20c28     18 50 85 F1 | 	sub	fp, #24
20c2c     A8 A4 02 FB | 	rdlong	local13, fp
20c30     0C 50 85 F1 | 	sub	fp, #12
20c34     52 A3 1A F2 | 	cmp	local12, local13 wcz
20c38     0C 50 05 11 |  if_a	add	fp, #12
20c3c     A8 A2 02 1B |  if_a	rdlong	local12, fp
20c40     18 50 05 11 |  if_a	add	fp, #24
20c44     A8 A2 62 1C |  if_a	wrlong	local12, fp
20c48     24 50 85 11 |  if_a	sub	fp, #36
20c4c     04 50 05 F1 | 	add	fp, #4
20c50     A8 A0 02 FB | 	rdlong	local11, fp
20c54     50 75 02 F6 | 	mov	arg01, local11
20c58     28 74 06 F1 | 	add	arg01, #40
20c5c     14 A0 06 F1 | 	add	local11, #20
20c60     50 8F 02 FB | 	rdlong	local02, local11
20c64     FF 8F 06 F5 | 	and	local02, #511
20c68     47 75 02 F1 | 	add	arg01, local02
20c6c     2C 50 05 F1 | 	add	fp, #44
20c70     A8 76 02 FB | 	rdlong	arg02, fp
20c74     0C 50 85 F1 | 	sub	fp, #12
20c78     A8 78 02 FB | 	rdlong	arg03, fp
20c7c     24 50 85 F1 | 	sub	fp, #36
20c80     D4 4E B0 FD | 	call	#__system____builtin_memmove
20c84     04 50 05 F1 | 	add	fp, #4
20c88     A8 8C 02 FB | 	rdlong	local01, fp
20c8c     46 A3 02 F6 | 	mov	local12, local01
20c90     04 50 85 F1 | 	sub	fp, #4
20c94     10 8C 06 F1 | 	add	local01, #16
20c98     46 A5 C2 FA | 	rdbyte	local13, local01
20c9c     80 A4 46 F5 | 	or	local13, #128
20ca0     10 A2 06 F1 | 	add	local12, #16
20ca4     51 A5 42 FC | 	wrbyte	local13, local12
20ca8                 | LR__1239
20ca8     0C 50 05 F1 | 	add	fp, #12
20cac     A8 A2 02 FB | 	rdlong	local12, fp
20cb0     18 50 05 F1 | 	add	fp, #24
20cb4     A8 8C 02 FB | 	rdlong	local01, fp
20cb8     46 A3 82 F1 | 	sub	local12, local01
20cbc     18 50 85 F1 | 	sub	fp, #24
20cc0     A8 A2 62 FC | 	wrlong	local12, fp
20cc4     04 50 05 F1 | 	add	fp, #4
20cc8     A8 9A 02 FB | 	rdlong	local08, fp
20ccc     4D 99 02 F6 | 	mov	local07, local08
20cd0     4D 9D 02 FB | 	rdlong	local09, local08
20cd4     14 50 05 F1 | 	add	fp, #20
20cd8     A8 8E 02 FB | 	rdlong	local02, fp
20cdc     47 91 02 F6 | 	mov	local03, local02
20ce0     47 9D 02 F1 | 	add	local09, local02
20ce4     4C 9D 62 FC | 	wrlong	local09, local07
20ce8     0C 50 05 F1 | 	add	fp, #12
20cec     A8 A6 02 FB | 	rdlong	local14, fp
20cf0     53 A9 02 F6 | 	mov	local15, local14
20cf4     0C 50 85 F1 | 	sub	fp, #12
20cf8     A8 AA 02 FB | 	rdlong	local16, fp
20cfc     55 AD 02 F6 | 	mov	local17, local16
20d00     55 A9 02 F1 | 	add	local15, local16
20d04     0C 50 05 F1 | 	add	fp, #12
20d08     A8 A8 62 FC | 	wrlong	local15, fp
20d0c     2C 50 85 F1 | 	sub	fp, #44
20d10     A8 AE 02 FB | 	rdlong	local18, fp
20d14     57 B1 02 F6 | 	mov	local19, local18
20d18     57 B3 02 F6 | 	mov	local20, local18
20d1c     59 B5 02 F6 | 	mov	local21, local20
20d20     14 B4 06 F1 | 	add	local21, #20
20d24     5A B7 02 FB | 	rdlong	local22, local21
20d28     14 B4 86 F1 | 	sub	local21, #20
20d2c     5B B9 02 F6 | 	mov	local23, local22
20d30     20 50 05 F1 | 	add	fp, #32
20d34     A8 BA 02 FB | 	rdlong	local24, fp
20d38     5D BD 02 F6 | 	mov	local25, local24
20d3c     5D B9 02 F1 | 	add	local23, local24
20d40     14 B0 06 F1 | 	add	local19, #20
20d44     58 B9 62 FC | 	wrlong	local23, local19
20d48     14 B0 86 F1 | 	sub	local19, #20
20d4c     20 50 85 F1 | 	sub	fp, #32
20d50     A8 BE 02 FB | 	rdlong	local26, fp
20d54     5F C1 02 F6 | 	mov	local27, local26
20d58     5F C3 02 F6 | 	mov	local28, local26
20d5c     61 C5 02 F6 | 	mov	local29, local28
20d60     5F C7 02 F6 | 	mov	local30, local26
20d64     04 50 85 F1 | 	sub	fp, #4
20d68     63 C9 02 F6 | 	mov	local31, local30
20d6c     14 C4 06 F1 | 	add	local29, #20
20d70     62 CB 02 FB | 	rdlong	local32, local29
20d74     14 C4 86 F1 | 	sub	local29, #20
20d78     65 CD 02 F6 | 	mov	local33, local32
20d7c     0C C8 06 F1 | 	add	local31, #12
20d80     64 CF 02 FB | 	rdlong	local34, local31
20d84     0C C8 86 F1 | 	sub	local31, #12
20d88     67 D1 02 F6 | 	mov	local35, local34
20d8c     68 CD 1A F2 | 	cmp	local33, local35 wcz
20d90     24 00 90 ED |  if_be	jmp	#LR__1240
20d94     04 50 05 F1 | 	add	fp, #4
20d98     A8 D2 02 FB | 	rdlong	local36, fp
20d9c     04 50 85 F1 | 	sub	fp, #4
20da0     69 D5 02 F6 | 	mov	local37, local36
20da4     14 D4 06 F1 | 	add	local37, #20
20da8     6A D7 02 FB | 	rdlong	local38, local37
20dac     14 D4 86 F1 | 	sub	local37, #20
20db0     6B D9 02 F6 | 	mov	local39, local38
20db4     20 00 90 FD | 	jmp	#LR__1241
20db8                 | LR__1240
20db8     04 50 05 F1 | 	add	fp, #4
20dbc     A8 DA 02 FB | 	rdlong	local40, fp
20dc0     04 50 85 F1 | 	sub	fp, #4
20dc4     6D DD 02 F6 | 	mov	local41, local40
20dc8     0C DC 06 F1 | 	add	local41, #12
20dcc     6E DF 02 FB | 	rdlong	local42, local41
20dd0     0C DC 86 F1 | 	sub	local41, #12
20dd4     6F D9 02 F6 | 	mov	local39, local42
20dd8                 | LR__1241
20dd8     0C C0 06 F1 | 	add	local27, #12
20ddc     60 D9 62 FC | 	wrlong	local39, local27
20de0     0C C0 86 F1 | 	sub	local27, #12
20de4     18 F9 9F FD | 	jmp	#LR__1223
20de8                 | LR__1242
20de8     04 50 05 F1 | 	add	fp, #4
20dec     A8 96 02 FB | 	rdlong	local06, fp
20df0     4B 95 02 F6 | 	mov	local05, local06
20df4     04 50 85 F1 | 	sub	fp, #4
20df8     10 96 06 F1 | 	add	local06, #16
20dfc     4B A3 C2 FA | 	rdbyte	local12, local06
20e00     40 A2 46 F5 | 	or	local12, #64
20e04     10 94 06 F1 | 	add	local05, #16
20e08     4A A3 42 FC | 	wrbyte	local12, local05
20e0c                 | ' 
20e0c                 | ' 
20e0c                 | ' 
20e0c                 | ' 
20e0c                 | ' 
20e0c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
20e0c                 | ' 		fp->flag |=  0x80 ;
20e0c                 | ' 
20e0c                 | ' 	}
20e0c                 | ' 
20e0c                 | ' 	fp->flag |=  0x40 ;
20e0c                 | ' 
20e0c                 | ' 	return FR_OK ;
20e0c     00 34 06 F6 | 	mov	result1, #0
20e10                 | LR__1243
20e10     A8 F0 03 F6 | 	mov	ptra, fp
20e14     B3 00 A0 FD | 	call	#popregs_
20e18                 | _fatfs_cc_f_write_ret
20e18     2D 00 64 FD | 	ret
20e1c                 | 
20e1c                 | _fatfs_cc_f_sync
20e1c     01 4C 05 F6 | 	mov	COUNT_, #1
20e20     A9 00 A0 FD | 	call	#pushregs_
20e24     18 F0 07 F1 | 	add	ptra, #24
20e28     04 50 05 F1 | 	add	fp, #4
20e2c     A8 74 62 FC | 	wrlong	arg01, fp
20e30     08 50 05 F1 | 	add	fp, #8
20e34     A8 76 02 F6 | 	mov	arg02, fp
20e38     0C 50 85 F1 | 	sub	fp, #12
20e3c     C8 E7 BF FD | 	call	#_fatfs_cc_validate
20e40     08 50 05 F1 | 	add	fp, #8
20e44     A8 34 62 FC | 	wrlong	result1, fp
20e48     08 50 85 F1 | 	sub	fp, #8
20e4c     00 34 0E F2 | 	cmp	result1, #0 wz
20e50     C4 01 90 5D |  if_ne	jmp	#LR__1247
20e54     04 50 05 F1 | 	add	fp, #4
20e58     A8 34 02 FB | 	rdlong	result1, fp
20e5c     04 50 85 F1 | 	sub	fp, #4
20e60     10 34 06 F1 | 	add	result1, #16
20e64     1A 35 C2 FA | 	rdbyte	result1, result1
20e68     40 34 CE F7 | 	test	result1, #64 wz
20e6c     A8 01 90 AD |  if_e	jmp	#LR__1246
20e70     04 50 05 F1 | 	add	fp, #4
20e74     A8 34 02 FB | 	rdlong	result1, fp
20e78     04 50 85 F1 | 	sub	fp, #4
20e7c     10 34 06 F1 | 	add	result1, #16
20e80     1A 35 C2 FA | 	rdbyte	result1, result1
20e84     80 34 CE F7 | 	test	result1, #128 wz
20e88     64 00 90 AD |  if_e	jmp	#LR__1244
20e8c     0C 50 05 F1 | 	add	fp, #12
20e90     A8 7A 02 FB | 	rdlong	arg04, fp
20e94     01 7A 06 F1 | 	add	arg04, #1
20e98     3D 75 C2 FA | 	rdbyte	arg01, arg04
20e9c     08 50 85 F1 | 	sub	fp, #8
20ea0     A8 7A 02 FB | 	rdlong	arg04, fp
20ea4     3D 77 02 F6 | 	mov	arg02, arg04
20ea8     28 76 06 F1 | 	add	arg02, #40
20eac     04 50 85 F1 | 	sub	fp, #4
20eb0     1C 7A 06 F1 | 	add	arg04, #28
20eb4     3D 79 02 FB | 	rdlong	arg03, arg04
20eb8     01 7A 06 F6 | 	mov	arg04, #1
20ebc     94 C2 BF FD | 	call	#_fatfs_cc_disk_write
20ec0     00 34 0E F2 | 	cmp	result1, #0 wz
20ec4     01 34 06 56 |  if_ne	mov	result1, #1
20ec8     58 01 90 5D |  if_ne	jmp	#LR__1248
20ecc     04 50 05 F1 | 	add	fp, #4
20ed0     A8 34 02 FB | 	rdlong	result1, fp
20ed4     1A 8D 02 F6 | 	mov	local01, result1
20ed8     04 50 85 F1 | 	sub	fp, #4
20edc     10 34 06 F1 | 	add	result1, #16
20ee0     1A 35 C2 FA | 	rdbyte	result1, result1
20ee4     7F 34 06 F5 | 	and	result1, #127
20ee8     10 8C 06 F1 | 	add	local01, #16
20eec     46 35 42 FC | 	wrbyte	result1, local01
20ef0                 | LR__1244
20ef0     C4 2A B0 FD | 	call	#_fatfs_cc__get_fattime
20ef4     10 50 05 F1 | 	add	fp, #16
20ef8     A8 34 62 FC | 	wrlong	result1, fp
20efc     04 50 85 F1 | 	sub	fp, #4
20f00     A8 74 02 FB | 	rdlong	arg01, fp
20f04     08 50 85 F1 | 	sub	fp, #8
20f08     A8 8C 02 FB | 	rdlong	local01, fp
20f0c     04 50 85 F1 | 	sub	fp, #4
20f10     20 8C 06 F1 | 	add	local01, #32
20f14     46 77 02 FB | 	rdlong	arg02, local01
20f18     8C C6 BF FD | 	call	#_fatfs_cc_move_window
20f1c     08 50 05 F1 | 	add	fp, #8
20f20     A8 34 62 FC | 	wrlong	result1, fp
20f24     08 50 85 F1 | 	sub	fp, #8
20f28     00 34 0E F2 | 	cmp	result1, #0 wz
20f2c     E8 00 90 5D |  if_ne	jmp	#LR__1245
20f30     04 50 05 F1 | 	add	fp, #4
20f34     A8 8C 02 FB | 	rdlong	local01, fp
20f38     24 8C 06 F1 | 	add	local01, #36
20f3c     46 8D 02 FB | 	rdlong	local01, local01
20f40     10 50 05 F1 | 	add	fp, #16
20f44     A8 8C 62 FC | 	wrlong	local01, fp
20f48     46 79 02 F6 | 	mov	arg03, local01
20f4c     0B 78 06 F1 | 	add	arg03, #11
20f50     3C 79 C2 FA | 	rdbyte	arg03, arg03
20f54     20 78 46 F5 | 	or	arg03, #32
20f58     0B 8C 06 F1 | 	add	local01, #11
20f5c     46 79 42 FC | 	wrbyte	arg03, local01
20f60     10 50 85 F1 | 	sub	fp, #16
20f64     A8 8C 02 FB | 	rdlong	local01, fp
20f68     46 75 02 FB | 	rdlong	arg01, local01
20f6c     10 50 05 F1 | 	add	fp, #16
20f70     A8 76 02 FB | 	rdlong	arg02, fp
20f74     14 50 85 F1 | 	sub	fp, #20
20f78     08 8C 06 F1 | 	add	local01, #8
20f7c     46 79 02 FB | 	rdlong	arg03, local01
20f80     A0 D4 BF FD | 	call	#_fatfs_cc_st_clust
20f84     14 50 05 F1 | 	add	fp, #20
20f88     A8 74 02 FB | 	rdlong	arg01, fp
20f8c     1C 74 06 F1 | 	add	arg01, #28
20f90     10 50 85 F1 | 	sub	fp, #16
20f94     A8 8C 02 FB | 	rdlong	local01, fp
20f98     0C 8C 06 F1 | 	add	local01, #12
20f9c     46 77 02 FB | 	rdlong	arg02, local01
20fa0     3A 77 62 FC | 	wrlong	arg02, arg01
20fa4     10 50 05 F1 | 	add	fp, #16
20fa8     A8 74 02 FB | 	rdlong	arg01, fp
20fac     16 74 06 F1 | 	add	arg01, #22
20fb0     04 50 85 F1 | 	sub	fp, #4
20fb4     A8 76 02 FB | 	rdlong	arg02, fp
20fb8     3A 77 62 FC | 	wrlong	arg02, arg01
20fbc     04 50 05 F1 | 	add	fp, #4
20fc0     A8 74 02 FB | 	rdlong	arg01, fp
20fc4     12 74 06 F1 | 	add	arg01, #18
20fc8     00 76 06 F6 | 	mov	arg02, #0
20fcc     3A 01 58 FC | 	wrword	#0, arg01
20fd0     08 50 85 F1 | 	sub	fp, #8
20fd4     A8 8C 02 FB | 	rdlong	local01, fp
20fd8     03 8C 06 F1 | 	add	local01, #3
20fdc     46 03 48 FC | 	wrbyte	#1, local01
20fe0     A8 74 02 FB | 	rdlong	arg01, fp
20fe4     0C 50 85 F1 | 	sub	fp, #12
20fe8     34 C6 BF FD | 	call	#_fatfs_cc_sync_fs
20fec     08 50 05 F1 | 	add	fp, #8
20ff0     A8 34 62 FC | 	wrlong	result1, fp
20ff4     04 50 85 F1 | 	sub	fp, #4
20ff8     A8 7A 02 FB | 	rdlong	arg04, fp
20ffc     3D 8D 02 F6 | 	mov	local01, arg04
21000     04 50 85 F1 | 	sub	fp, #4
21004     10 7A 06 F1 | 	add	arg04, #16
21008     3D 7B C2 FA | 	rdbyte	arg04, arg04
2100c     BF 7A 06 F5 | 	and	arg04, #191
21010     10 8C 06 F1 | 	add	local01, #16
21014     46 7B 42 FC | 	wrbyte	arg04, local01
21018                 | LR__1245
21018                 | LR__1246
21018                 | LR__1247
21018                 | ' 					dir = fp->dir_ptr;
21018                 | ' 					dir[ 11 ] |=  0x20 ;
21018                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
21018                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
21018                 | ' 					st_dword(dir +  22 , tm);
21018                 | ' 					st_word(dir +  18 , 0);
21018                 | ' 					fs->wflag = 1;
21018                 | ' 					res = sync_fs(fs);
21018                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
21018                 | ' 				}
21018                 | ' 			}
21018                 | ' 		}
21018                 | ' 	}
21018                 | ' 
21018                 | ' 	return res ;
21018     08 50 05 F1 | 	add	fp, #8
2101c     A8 34 02 FB | 	rdlong	result1, fp
21020     08 50 85 F1 | 	sub	fp, #8
21024                 | LR__1248
21024     A8 F0 03 F6 | 	mov	ptra, fp
21028     B3 00 A0 FD | 	call	#popregs_
2102c                 | _fatfs_cc_f_sync_ret
2102c     2D 00 64 FD | 	ret
21030                 | 
21030                 | _fatfs_cc_f_close
21030     01 4C 05 F6 | 	mov	COUNT_, #1
21034     A9 00 A0 FD | 	call	#pushregs_
21038     10 F0 07 F1 | 	add	ptra, #16
2103c     04 50 05 F1 | 	add	fp, #4
21040     A8 74 62 FC | 	wrlong	arg01, fp
21044     04 50 85 F1 | 	sub	fp, #4
21048     D0 FD BF FD | 	call	#_fatfs_cc_f_sync
2104c     08 50 05 F1 | 	add	fp, #8
21050     A8 34 62 FC | 	wrlong	result1, fp
21054     08 50 85 F1 | 	sub	fp, #8
21058     00 34 0E F2 | 	cmp	result1, #0 wz
2105c     38 00 90 5D |  if_ne	jmp	#LR__1249
21060     04 50 05 F1 | 	add	fp, #4
21064     A8 74 02 FB | 	rdlong	arg01, fp
21068     08 50 05 F1 | 	add	fp, #8
2106c     A8 76 02 F6 | 	mov	arg02, fp
21070     0C 50 85 F1 | 	sub	fp, #12
21074     90 E5 BF FD | 	call	#_fatfs_cc_validate
21078     08 50 05 F1 | 	add	fp, #8
2107c     A8 34 62 FC | 	wrlong	result1, fp
21080     08 50 85 F1 | 	sub	fp, #8
21084     00 34 0E F2 | 	cmp	result1, #0 wz
21088     04 50 05 A1 |  if_e	add	fp, #4
2108c     A8 8C 02 AB |  if_e	rdlong	local01, fp
21090     04 50 85 A1 |  if_e	sub	fp, #4
21094     46 01 68 AC |  if_e	wrlong	#0, local01
21098                 | LR__1249
21098                 | ' 
21098                 | ' 
21098                 | ' 
21098                 | ' 
21098                 | ' 			fp->obj.fs = 0;
21098                 | ' #line 4191 "ff.c"
21098                 | ' 		}
21098                 | ' 	}
21098                 | ' 	return res;
21098     08 50 05 F1 | 	add	fp, #8
2109c     A8 34 02 FB | 	rdlong	result1, fp
210a0     08 50 85 F1 | 	sub	fp, #8
210a4     A8 F0 03 F6 | 	mov	ptra, fp
210a8     B3 00 A0 FD | 	call	#popregs_
210ac                 | _fatfs_cc_f_close_ret
210ac     2D 00 64 FD | 	ret
210b0                 | 
210b0                 | _fatfs_cc_f_lseek
210b0     0C 4C 05 F6 | 	mov	COUNT_, #12
210b4     A9 00 A0 FD | 	call	#pushregs_
210b8     24 F0 07 F1 | 	add	ptra, #36
210bc     04 50 05 F1 | 	add	fp, #4
210c0     A8 74 62 FC | 	wrlong	arg01, fp
210c4     04 50 05 F1 | 	add	fp, #4
210c8     A8 76 62 FC | 	wrlong	arg02, fp
210cc     04 50 85 F1 | 	sub	fp, #4
210d0     A8 74 02 FB | 	rdlong	arg01, fp
210d4     0C 50 05 F1 | 	add	fp, #12
210d8     A8 76 02 F6 | 	mov	arg02, fp
210dc     10 50 85 F1 | 	sub	fp, #16
210e0     24 E5 BF FD | 	call	#_fatfs_cc_validate
210e4     0C 50 05 F1 | 	add	fp, #12
210e8     A8 34 62 FC | 	wrlong	result1, fp
210ec     0C 50 85 F1 | 	sub	fp, #12
210f0     00 34 0E F2 | 	cmp	result1, #0 wz
210f4     1C 00 90 5D |  if_ne	jmp	#LR__1250
210f8     04 50 05 F1 | 	add	fp, #4
210fc     A8 8C 02 FB | 	rdlong	local01, fp
21100     11 8C 06 F1 | 	add	local01, #17
21104     46 8D C2 FA | 	rdbyte	local01, local01
21108     08 50 05 F1 | 	add	fp, #8
2110c     A8 8C 62 FC | 	wrlong	local01, fp
21110     0C 50 85 F1 | 	sub	fp, #12
21114                 | LR__1250
21114     0C 50 05 F1 | 	add	fp, #12
21118     A8 8C 0A FB | 	rdlong	local01, fp wz
2111c     0C 50 85 F1 | 	sub	fp, #12
21120     0C 50 05 51 |  if_ne	add	fp, #12
21124     A8 34 02 5B |  if_ne	rdlong	result1, fp
21128     0C 50 85 51 |  if_ne	sub	fp, #12
2112c     80 06 90 5D |  if_ne	jmp	#LR__1273
21130     04 50 05 F1 | 	add	fp, #4
21134     A8 8C 02 FB | 	rdlong	local01, fp
21138     04 50 05 F1 | 	add	fp, #4
2113c     A8 8E 02 FB | 	rdlong	local02, fp
21140     08 50 85 F1 | 	sub	fp, #8
21144     0C 8C 06 F1 | 	add	local01, #12
21148     46 91 02 FB | 	rdlong	local03, local01
2114c     48 93 02 F6 | 	mov	local04, local03
21150     49 8F 1A F2 | 	cmp	local02, local04 wcz
21154     4C 00 90 ED |  if_be	jmp	#LR__1251
21158     04 50 05 F1 | 	add	fp, #4
2115c     A8 94 02 FB | 	rdlong	local05, fp
21160     04 50 85 F1 | 	sub	fp, #4
21164     4A 97 02 F6 | 	mov	local06, local05
21168     10 96 06 F1 | 	add	local06, #16
2116c     4B 99 C2 FA | 	rdbyte	local07, local06
21170     10 96 86 F1 | 	sub	local06, #16
21174     4C 9B E2 F8 | 	getbyte	local08, local07, #0
21178     02 9A 0E F5 | 	and	local08, #2 wz
2117c     24 00 90 5D |  if_ne	jmp	#LR__1251
21180     04 50 05 F1 | 	add	fp, #4
21184     A8 8C 02 FB | 	rdlong	local01, fp
21188     46 9D 02 F6 | 	mov	local09, local01
2118c     0C 9C 06 F1 | 	add	local09, #12
21190     4E 9F 02 FB | 	rdlong	local10, local09
21194     0C 9C 86 F1 | 	sub	local09, #12
21198     04 50 05 F1 | 	add	fp, #4
2119c     A8 9E 62 FC | 	wrlong	local10, fp
211a0     08 50 85 F1 | 	sub	fp, #8
211a4                 | LR__1251
211a4     04 50 05 F1 | 	add	fp, #4
211a8     A8 9C 02 FB | 	rdlong	local09, fp
211ac     14 9C 06 F1 | 	add	local09, #20
211b0     4E 9F 02 FB | 	rdlong	local10, local09
211b4     1C 50 05 F1 | 	add	fp, #28
211b8     A8 9E 62 FC | 	wrlong	local10, fp
211bc     1C 50 85 F1 | 	sub	fp, #28
211c0     A8 9C 02 FB | 	rdlong	local09, fp
211c4     18 50 05 F1 | 	add	fp, #24
211c8     A8 00 68 FC | 	wrlong	#0, fp
211cc     14 9C 06 F1 | 	add	local09, #20
211d0     4E 01 68 FC | 	wrlong	#0, local09
211d4     14 50 85 F1 | 	sub	fp, #20
211d8     A8 9C 02 FB | 	rdlong	local09, fp
211dc     08 50 85 F1 | 	sub	fp, #8
211e0     01 9C 16 F2 | 	cmp	local09, #1 wc
211e4     EC 03 90 CD |  if_b	jmp	#LR__1267
211e8     10 50 05 F1 | 	add	fp, #16
211ec     A8 8C 02 FB | 	rdlong	local01, fp
211f0     0A 8C 06 F1 | 	add	local01, #10
211f4     46 93 E2 FA | 	rdword	local04, local01
211f8     09 92 66 F0 | 	shl	local04, #9
211fc     08 50 05 F1 | 	add	fp, #8
21200     A8 92 62 FC | 	wrlong	local04, fp
21204     08 50 05 F1 | 	add	fp, #8
21208     A8 9C 02 FB | 	rdlong	local09, fp
2120c     20 50 85 F1 | 	sub	fp, #32
21210     01 9C 16 F2 | 	cmp	local09, #1 wc
21214     B4 00 90 CD |  if_b	jmp	#LR__1252
21218     08 50 05 F1 | 	add	fp, #8
2121c     A8 92 02 FB | 	rdlong	local04, fp
21220     01 92 86 F1 | 	sub	local04, #1
21224     10 50 05 F1 | 	add	fp, #16
21228     A8 A0 02 FB | 	rdlong	local11, fp
2122c     50 93 12 FD | 	qdiv	local04, local11
21230     08 50 05 F1 | 	add	fp, #8
21234     A8 94 02 FB | 	rdlong	local05, fp
21238     4A 99 02 F6 | 	mov	local07, local05
2123c     01 98 86 F1 | 	sub	local07, #1
21240     50 A3 02 F6 | 	mov	local12, local11
21244     18 92 62 FD | 	getqx	local04
21248     51 99 12 FD | 	qdiv	local07, local12
2124c     20 50 85 F1 | 	sub	fp, #32
21250     18 98 62 FD | 	getqx	local07
21254     4C 93 12 F2 | 	cmp	local04, local07 wc
21258     70 00 90 CD |  if_b	jmp	#LR__1252
2125c     04 50 05 F1 | 	add	fp, #4
21260     A8 9C 02 FB | 	rdlong	local09, fp
21264     1C 50 05 F1 | 	add	fp, #28
21268     A8 9E 02 FB | 	rdlong	local10, fp
2126c     01 9E 86 F1 | 	sub	local10, #1
21270     08 50 85 F1 | 	sub	fp, #8
21274     A8 92 02 FB | 	rdlong	local04, fp
21278     01 92 86 F1 | 	sub	local04, #1
2127c     49 9F 22 F5 | 	andn	local10, local04
21280     14 9C 06 F1 | 	add	local09, #20
21284     4E 9F 62 FC | 	wrlong	local10, local09
21288     10 50 85 F1 | 	sub	fp, #16
2128c     A8 9C 02 FB | 	rdlong	local09, fp
21290     04 50 85 F1 | 	sub	fp, #4
21294     A8 9E 02 FB | 	rdlong	local10, fp
21298     14 9E 06 F1 | 	add	local10, #20
2129c     4F 93 02 FB | 	rdlong	local04, local10
212a0     49 9D 82 F1 | 	sub	local09, local04
212a4     04 50 05 F1 | 	add	fp, #4
212a8     A8 9C 62 FC | 	wrlong	local09, fp
212ac     04 50 85 F1 | 	sub	fp, #4
212b0     A8 9C 02 FB | 	rdlong	local09, fp
212b4     18 9C 06 F1 | 	add	local09, #24
212b8     4E 9F 02 FB | 	rdlong	local10, local09
212bc     10 50 05 F1 | 	add	fp, #16
212c0     A8 9E 62 FC | 	wrlong	local10, fp
212c4     14 50 85 F1 | 	sub	fp, #20
212c8     D0 00 90 FD | 	jmp	#LR__1256
212cc                 | LR__1252
212cc     04 50 05 F1 | 	add	fp, #4
212d0     A8 9C 02 FB | 	rdlong	local09, fp
212d4     08 9C 06 F1 | 	add	local09, #8
212d8     4E 9D 0A FB | 	rdlong	local09, local09 wz
212dc     10 50 05 F1 | 	add	fp, #16
212e0     A8 9C 62 FC | 	wrlong	local09, fp
212e4     14 50 85 F1 | 	sub	fp, #20
212e8     94 00 90 5D |  if_ne	jmp	#LR__1255
212ec     04 50 05 F1 | 	add	fp, #4
212f0     A8 74 02 FB | 	rdlong	arg01, fp
212f4     04 50 85 F1 | 	sub	fp, #4
212f8     00 76 06 F6 | 	mov	arg02, #0
212fc     FC C9 BF FD | 	call	#_fatfs_cc_create_chain
21300     14 50 05 F1 | 	add	fp, #20
21304     A8 34 62 FC | 	wrlong	result1, fp
21308     14 50 85 F1 | 	sub	fp, #20
2130c     01 34 0E F2 | 	cmp	result1, #1 wz
21310     1C 00 90 5D |  if_ne	jmp	#LR__1253
21314     04 50 05 F1 | 	add	fp, #4
21318     A8 9C 02 FB | 	rdlong	local09, fp
2131c     04 50 85 F1 | 	sub	fp, #4
21320     11 9C 06 F1 | 	add	local09, #17
21324     4E 05 48 FC | 	wrbyte	#2, local09
21328     02 34 06 F6 | 	mov	result1, #2
2132c     80 04 90 FD | 	jmp	#LR__1273
21330                 | LR__1253
21330     14 50 05 F1 | 	add	fp, #20
21334     A8 9C 02 FB | 	rdlong	local09, fp
21338     14 50 85 F1 | 	sub	fp, #20
2133c     FF FF 7F FF 
21340     FF 9D 0E F2 | 	cmp	local09, ##-1 wz
21344     1C 00 90 5D |  if_ne	jmp	#LR__1254
21348     04 50 05 F1 | 	add	fp, #4
2134c     A8 9C 02 FB | 	rdlong	local09, fp
21350     04 50 85 F1 | 	sub	fp, #4
21354     11 9C 06 F1 | 	add	local09, #17
21358     4E 03 48 FC | 	wrbyte	#1, local09
2135c     01 34 06 F6 | 	mov	result1, #1
21360     4C 04 90 FD | 	jmp	#LR__1273
21364                 | LR__1254
21364     04 50 05 F1 | 	add	fp, #4
21368     A8 9C 02 FB | 	rdlong	local09, fp
2136c     10 50 05 F1 | 	add	fp, #16
21370     A8 9E 02 FB | 	rdlong	local10, fp
21374     14 50 85 F1 | 	sub	fp, #20
21378     08 9C 06 F1 | 	add	local09, #8
2137c     4E 9F 62 FC | 	wrlong	local10, local09
21380                 | LR__1255
21380     04 50 05 F1 | 	add	fp, #4
21384     A8 9C 02 FB | 	rdlong	local09, fp
21388     10 50 05 F1 | 	add	fp, #16
2138c     A8 9E 02 FB | 	rdlong	local10, fp
21390     14 50 85 F1 | 	sub	fp, #20
21394     18 9C 06 F1 | 	add	local09, #24
21398     4E 9F 62 FC | 	wrlong	local10, local09
2139c                 | LR__1256
2139c     14 50 05 F1 | 	add	fp, #20
213a0     A8 9C 0A FB | 	rdlong	local09, fp wz
213a4     14 50 85 F1 | 	sub	fp, #20
213a8     28 02 90 AD |  if_e	jmp	#LR__1266
213ac                 | ' 				while (ofs > bcs) {
213ac                 | LR__1257
213ac     08 50 05 F1 | 	add	fp, #8
213b0     A8 9C 02 FB | 	rdlong	local09, fp
213b4     10 50 05 F1 | 	add	fp, #16
213b8     A8 9E 02 FB | 	rdlong	local10, fp
213bc     18 50 85 F1 | 	sub	fp, #24
213c0     4F 9D 1A F2 | 	cmp	local09, local10 wcz
213c4     68 01 90 ED |  if_be	jmp	#LR__1263
213c8     08 50 05 F1 | 	add	fp, #8
213cc     A8 9C 02 FB | 	rdlong	local09, fp
213d0     10 50 05 F1 | 	add	fp, #16
213d4     A8 9E 02 FB | 	rdlong	local10, fp
213d8     4F 9D 82 F1 | 	sub	local09, local10
213dc     10 50 85 F1 | 	sub	fp, #16
213e0     A8 9C 62 FC | 	wrlong	local09, fp
213e4     04 50 85 F1 | 	sub	fp, #4
213e8     A8 92 02 FB | 	rdlong	local04, fp
213ec     49 8F 02 F6 | 	mov	local02, local04
213f0     14 8E 06 F1 | 	add	local02, #20
213f4     47 9F 02 FB | 	rdlong	local10, local02
213f8     14 50 05 F1 | 	add	fp, #20
213fc     A8 96 02 FB | 	rdlong	local06, fp
21400     4B 9F 02 F1 | 	add	local10, local06
21404     14 92 06 F1 | 	add	local04, #20
21408     49 9F 62 FC | 	wrlong	local10, local04
2140c     14 50 85 F1 | 	sub	fp, #20
21410     A8 8C 02 FB | 	rdlong	local01, fp
21414     04 50 85 F1 | 	sub	fp, #4
21418     10 8C 06 F1 | 	add	local01, #16
2141c     46 9D C2 FA | 	rdbyte	local09, local01
21420     02 9C CE F7 | 	test	local09, #2 wz
21424     3C 00 90 AD |  if_e	jmp	#LR__1258
21428     04 50 05 F1 | 	add	fp, #4
2142c     A8 74 02 FB | 	rdlong	arg01, fp
21430     10 50 05 F1 | 	add	fp, #16
21434     A8 76 02 FB | 	rdlong	arg02, fp
21438     14 50 85 F1 | 	sub	fp, #20
2143c     BC C8 BF FD | 	call	#_fatfs_cc_create_chain
21440     14 50 05 F1 | 	add	fp, #20
21444     A8 34 62 FC | 	wrlong	result1, fp
21448     00 34 4E F2 | 	cmps	result1, #0 wz
2144c     14 50 85 F1 | 	sub	fp, #20
21450     08 50 05 A1 |  if_e	add	fp, #8
21454     A8 00 68 AC |  if_e	wrlong	#0, fp
21458     08 50 85 A1 |  if_e	sub	fp, #8
2145c                 | ' 							ofs = 0; break;
2145c     D0 00 90 AD |  if_e	jmp	#LR__1263
21460     24 00 90 FD | 	jmp	#LR__1259
21464                 | LR__1258
21464     04 50 05 F1 | 	add	fp, #4
21468     A8 74 02 FB | 	rdlong	arg01, fp
2146c     10 50 05 F1 | 	add	fp, #16
21470     A8 76 02 FB | 	rdlong	arg02, fp
21474     14 50 85 F1 | 	sub	fp, #20
21478     FC C2 BF FD | 	call	#_fatfs_cc_get_fat
2147c     14 50 05 F1 | 	add	fp, #20
21480     A8 34 62 FC | 	wrlong	result1, fp
21484     14 50 85 F1 | 	sub	fp, #20
21488                 | LR__1259
21488     14 50 05 F1 | 	add	fp, #20
2148c     A8 9C 02 FB | 	rdlong	local09, fp
21490     14 50 85 F1 | 	sub	fp, #20
21494     FF FF 7F FF 
21498     FF 9D 0E F2 | 	cmp	local09, ##-1 wz
2149c     1C 00 90 5D |  if_ne	jmp	#LR__1260
214a0     04 50 05 F1 | 	add	fp, #4
214a4     A8 9C 02 FB | 	rdlong	local09, fp
214a8     04 50 85 F1 | 	sub	fp, #4
214ac     11 9C 06 F1 | 	add	local09, #17
214b0     4E 03 48 FC | 	wrbyte	#1, local09
214b4     01 34 06 F6 | 	mov	result1, #1
214b8     F4 02 90 FD | 	jmp	#LR__1273
214bc                 | LR__1260
214bc     14 50 05 F1 | 	add	fp, #20
214c0     A8 9C 02 FB | 	rdlong	local09, fp
214c4     14 50 85 F1 | 	sub	fp, #20
214c8     02 9C 16 F2 | 	cmp	local09, #2 wc
214cc     24 00 90 CD |  if_b	jmp	#LR__1261
214d0     10 50 05 F1 | 	add	fp, #16
214d4     A8 9E 02 FB | 	rdlong	local10, fp
214d8     04 50 05 F1 | 	add	fp, #4
214dc     A8 92 02 FB | 	rdlong	local04, fp
214e0     14 50 85 F1 | 	sub	fp, #20
214e4     14 9E 06 F1 | 	add	local10, #20
214e8     4F 9B 02 FB | 	rdlong	local08, local10
214ec     4D 93 12 F2 | 	cmp	local04, local08 wc
214f0     1C 00 90 CD |  if_b	jmp	#LR__1262
214f4                 | LR__1261
214f4     04 50 05 F1 | 	add	fp, #4
214f8     A8 9C 02 FB | 	rdlong	local09, fp
214fc     04 50 85 F1 | 	sub	fp, #4
21500     11 9C 06 F1 | 	add	local09, #17
21504     4E 05 48 FC | 	wrbyte	#2, local09
21508     02 34 06 F6 | 	mov	result1, #2
2150c     A0 02 90 FD | 	jmp	#LR__1273
21510                 | LR__1262
21510     04 50 05 F1 | 	add	fp, #4
21514     A8 9C 02 FB | 	rdlong	local09, fp
21518     10 50 05 F1 | 	add	fp, #16
2151c     A8 9E 02 FB | 	rdlong	local10, fp
21520     14 50 85 F1 | 	sub	fp, #20
21524     18 9C 06 F1 | 	add	local09, #24
21528     4E 9F 62 FC | 	wrlong	local10, local09
2152c     7C FE 9F FD | 	jmp	#LR__1257
21530                 | LR__1263
21530     04 50 05 F1 | 	add	fp, #4
21534     A8 8E 02 FB | 	rdlong	local02, fp
21538     47 9D 02 F6 | 	mov	local09, local02
2153c     14 8E 06 F1 | 	add	local02, #20
21540     47 9F 02 FB | 	rdlong	local10, local02
21544     04 50 05 F1 | 	add	fp, #4
21548     A8 9A 02 FB | 	rdlong	local08, fp
2154c     4D 9F 02 F1 | 	add	local10, local08
21550     14 9C 06 F1 | 	add	local09, #20
21554     4E 9F 62 FC | 	wrlong	local10, local09
21558     A8 9C 02 FB | 	rdlong	local09, fp
2155c     08 50 85 F1 | 	sub	fp, #8
21560     FF 9D CE F7 | 	test	local09, #511 wz
21564     6C 00 90 AD |  if_e	jmp	#LR__1265
21568     10 50 05 F1 | 	add	fp, #16
2156c     A8 74 02 FB | 	rdlong	arg01, fp
21570     04 50 05 F1 | 	add	fp, #4
21574     A8 76 02 FB | 	rdlong	arg02, fp
21578     14 50 85 F1 | 	sub	fp, #20
2157c     B8 C1 BF FD | 	call	#_fatfs_cc_clst2sect
21580     1C 50 05 F1 | 	add	fp, #28
21584     A8 34 62 FC | 	wrlong	result1, fp
21588     1C 50 85 F1 | 	sub	fp, #28
2158c     00 34 0E F2 | 	cmp	result1, #0 wz
21590     1C 00 90 5D |  if_ne	jmp	#LR__1264
21594     04 50 05 F1 | 	add	fp, #4
21598     A8 9C 02 FB | 	rdlong	local09, fp
2159c     04 50 85 F1 | 	sub	fp, #4
215a0     11 9C 06 F1 | 	add	local09, #17
215a4     4E 05 48 FC | 	wrbyte	#2, local09
215a8     02 34 06 F6 | 	mov	result1, #2
215ac     00 02 90 FD | 	jmp	#LR__1273
215b0                 | LR__1264
215b0     1C 50 05 F1 | 	add	fp, #28
215b4     A8 9C 02 FB | 	rdlong	local09, fp
215b8     14 50 85 F1 | 	sub	fp, #20
215bc     A8 9E 02 FB | 	rdlong	local10, fp
215c0     09 9E 46 F0 | 	shr	local10, #9
215c4     4F 9D 02 F1 | 	add	local09, local10
215c8     14 50 05 F1 | 	add	fp, #20
215cc     A8 9C 62 FC | 	wrlong	local09, fp
215d0     1C 50 85 F1 | 	sub	fp, #28
215d4                 | LR__1265
215d4                 | LR__1266
215d4                 | LR__1267
215d4     04 50 05 F1 | 	add	fp, #4
215d8     A8 9E 02 FB | 	rdlong	local10, fp
215dc     4F 9D 02 F6 | 	mov	local09, local10
215e0     04 50 85 F1 | 	sub	fp, #4
215e4     14 9C 06 F1 | 	add	local09, #20
215e8     4E 93 02 FB | 	rdlong	local04, local09
215ec     0C 9E 06 F1 | 	add	local10, #12
215f0     4F 9B 02 FB | 	rdlong	local08, local10
215f4     4D 93 1A F2 | 	cmp	local04, local08 wcz
215f8     3C 00 90 ED |  if_be	jmp	#LR__1268
215fc     04 50 05 F1 | 	add	fp, #4
21600     A8 9E 02 FB | 	rdlong	local10, fp
21604     4F 9D 02 F6 | 	mov	local09, local10
21608     14 9E 06 F1 | 	add	local10, #20
2160c     4F 93 02 FB | 	rdlong	local04, local10
21610     0C 9C 06 F1 | 	add	local09, #12
21614     4E 93 62 FC | 	wrlong	local04, local09
21618     A8 8E 02 FB | 	rdlong	local02, fp
2161c     47 9D 02 F6 | 	mov	local09, local02
21620     04 50 85 F1 | 	sub	fp, #4
21624     10 8E 06 F1 | 	add	local02, #16
21628     47 9F C2 FA | 	rdbyte	local10, local02
2162c     40 9E 46 F5 | 	or	local10, #64
21630     10 9C 06 F1 | 	add	local09, #16
21634     4E 9F 42 FC | 	wrbyte	local10, local09
21638                 | LR__1268
21638     04 50 05 F1 | 	add	fp, #4
2163c     A8 9C 02 FB | 	rdlong	local09, fp
21640     04 50 85 F1 | 	sub	fp, #4
21644     14 9C 06 F1 | 	add	local09, #20
21648     4E 9F 02 FB | 	rdlong	local10, local09
2164c     FF 9F CE F7 | 	test	local10, #511 wz
21650     50 01 90 AD |  if_e	jmp	#LR__1272
21654     04 50 05 F1 | 	add	fp, #4
21658     A8 9A 02 FB | 	rdlong	local08, fp
2165c     4D 91 02 F6 | 	mov	local03, local08
21660     18 50 05 F1 | 	add	fp, #24
21664     A8 94 02 FB | 	rdlong	local05, fp
21668     1C 50 85 F1 | 	sub	fp, #28
2166c     4A 97 02 F6 | 	mov	local06, local05
21670     1C 90 06 F1 | 	add	local03, #28
21674     48 A3 02 FB | 	rdlong	local12, local03
21678     1C 90 86 F1 | 	sub	local03, #28
2167c     51 99 02 F6 | 	mov	local07, local12
21680     4C 97 0A F2 | 	cmp	local06, local07 wz
21684     1C 01 90 AD |  if_e	jmp	#LR__1272
21688     04 50 05 F1 | 	add	fp, #4
2168c     A8 8C 02 FB | 	rdlong	local01, fp
21690     04 50 85 F1 | 	sub	fp, #4
21694     10 8C 06 F1 | 	add	local01, #16
21698     46 9D C2 FA | 	rdbyte	local09, local01
2169c     80 9C CE F7 | 	test	local09, #128 wz
216a0     80 00 90 AD |  if_e	jmp	#LR__1270
216a4     10 50 05 F1 | 	add	fp, #16
216a8     A8 8C 02 FB | 	rdlong	local01, fp
216ac     01 8C 06 F1 | 	add	local01, #1
216b0     46 75 C2 FA | 	rdbyte	arg01, local01
216b4     0C 50 85 F1 | 	sub	fp, #12
216b8     A8 8E 02 FB | 	rdlong	local02, fp
216bc     47 77 02 F6 | 	mov	arg02, local02
216c0     28 76 06 F1 | 	add	arg02, #40
216c4     04 50 85 F1 | 	sub	fp, #4
216c8     1C 8E 06 F1 | 	add	local02, #28
216cc     47 79 02 FB | 	rdlong	arg03, local02
216d0     01 7A 06 F6 | 	mov	arg04, #1
216d4     7C BA BF FD | 	call	#_fatfs_cc_disk_write
216d8     00 34 0E F2 | 	cmp	result1, #0 wz
216dc     1C 00 90 AD |  if_e	jmp	#LR__1269
216e0     04 50 05 F1 | 	add	fp, #4
216e4     A8 9C 02 FB | 	rdlong	local09, fp
216e8     04 50 85 F1 | 	sub	fp, #4
216ec     11 9C 06 F1 | 	add	local09, #17
216f0     4E 03 48 FC | 	wrbyte	#1, local09
216f4     01 34 06 F6 | 	mov	result1, #1
216f8     B4 00 90 FD | 	jmp	#LR__1273
216fc                 | LR__1269
216fc     04 50 05 F1 | 	add	fp, #4
21700     A8 8E 02 FB | 	rdlong	local02, fp
21704     47 9D 02 F6 | 	mov	local09, local02
21708     04 50 85 F1 | 	sub	fp, #4
2170c     10 8E 06 F1 | 	add	local02, #16
21710     47 91 C2 FA | 	rdbyte	local03, local02
21714     48 9F E2 F8 | 	getbyte	local10, local03, #0
21718     7F 9E 06 F5 | 	and	local10, #127
2171c     10 9C 06 F1 | 	add	local09, #16
21720     4E 9F 42 FC | 	wrbyte	local10, local09
21724                 | LR__1270
21724     10 50 05 F1 | 	add	fp, #16
21728     A8 8C 02 FB | 	rdlong	local01, fp
2172c     01 8C 06 F1 | 	add	local01, #1
21730     46 75 C2 FA | 	rdbyte	arg01, local01
21734     0C 50 85 F1 | 	sub	fp, #12
21738     A8 92 02 FB | 	rdlong	local04, fp
2173c     28 92 06 F1 | 	add	local04, #40
21740     18 50 05 F1 | 	add	fp, #24
21744     A8 78 02 FB | 	rdlong	arg03, fp
21748     1C 50 85 F1 | 	sub	fp, #28
2174c     01 8E 06 F6 | 	mov	local02, #1
21750     49 77 02 F6 | 	mov	arg02, local04
21754     01 7A 06 F6 | 	mov	arg04, #1
21758     3C B9 BF FD | 	call	#_fatfs_cc_disk_read
2175c     00 34 0E F2 | 	cmp	result1, #0 wz
21760     1C 00 90 AD |  if_e	jmp	#LR__1271
21764     04 50 05 F1 | 	add	fp, #4
21768     A8 9C 02 FB | 	rdlong	local09, fp
2176c     04 50 85 F1 | 	sub	fp, #4
21770     11 9C 06 F1 | 	add	local09, #17
21774     4E 03 48 FC | 	wrbyte	#1, local09
21778     01 34 06 F6 | 	mov	result1, #1
2177c     30 00 90 FD | 	jmp	#LR__1273
21780                 | LR__1271
21780     04 50 05 F1 | 	add	fp, #4
21784     A8 8C 02 FB | 	rdlong	local01, fp
21788     46 9D 02 F6 | 	mov	local09, local01
2178c     18 50 05 F1 | 	add	fp, #24
21790     A8 9E 02 FB | 	rdlong	local10, fp
21794     1C 50 85 F1 | 	sub	fp, #28
21798     1C 9C 06 F1 | 	add	local09, #28
2179c     4E 9F 62 FC | 	wrlong	local10, local09
217a0     1C 9C 86 F1 | 	sub	local09, #28
217a4                 | LR__1272
217a4                 | ' 
217a4                 | ' 			fp->sect = nsect;
217a4                 | ' 		}
217a4                 | ' 	}
217a4                 | ' 
217a4                 | ' 	return res ;
217a4     0C 50 05 F1 | 	add	fp, #12
217a8     A8 34 02 FB | 	rdlong	result1, fp
217ac     0C 50 85 F1 | 	sub	fp, #12
217b0                 | LR__1273
217b0     A8 F0 03 F6 | 	mov	ptra, fp
217b4     B3 00 A0 FD | 	call	#popregs_
217b8                 | _fatfs_cc_f_lseek_ret
217b8     2D 00 64 FD | 	ret
217bc                 | 
217bc                 | _fatfs_cc_f_opendir
217bc     01 4C 05 F6 | 	mov	COUNT_, #1
217c0     A9 00 A0 FD | 	call	#pushregs_
217c4     14 F0 07 F1 | 	add	ptra, #20
217c8     04 50 05 F1 | 	add	fp, #4
217cc     A8 74 62 FC | 	wrlong	arg01, fp
217d0     04 50 05 F1 | 	add	fp, #4
217d4     A8 76 62 FC | 	wrlong	arg02, fp
217d8     04 50 85 F1 | 	sub	fp, #4
217dc     A8 78 0A FB | 	rdlong	arg03, fp wz
217e0     04 50 85 F1 | 	sub	fp, #4
217e4     09 34 06 A6 |  if_e	mov	result1, #9
217e8     78 01 90 AD |  if_e	jmp	#LR__1280
217ec     08 50 05 F1 | 	add	fp, #8
217f0     A8 74 02 F6 | 	mov	arg01, fp
217f4     08 50 05 F1 | 	add	fp, #8
217f8     A8 76 02 F6 | 	mov	arg02, fp
217fc     10 50 85 F1 | 	sub	fp, #16
21800     00 78 06 F6 | 	mov	arg03, #0
21804     34 D8 BF FD | 	call	#_fatfs_cc_mount_volume
21808     0C 50 05 F1 | 	add	fp, #12
2180c     A8 34 62 FC | 	wrlong	result1, fp
21810     0C 50 85 F1 | 	sub	fp, #12
21814     00 34 0E F2 | 	cmp	result1, #0 wz
21818     20 01 90 5D |  if_ne	jmp	#LR__1279
2181c     04 50 05 F1 | 	add	fp, #4
21820     A8 76 02 FB | 	rdlong	arg02, fp
21824     0C 50 05 F1 | 	add	fp, #12
21828     A8 34 02 FB | 	rdlong	result1, fp
2182c     3B 35 62 FC | 	wrlong	result1, arg02
21830     0C 50 85 F1 | 	sub	fp, #12
21834     A8 74 02 FB | 	rdlong	arg01, fp
21838     04 50 05 F1 | 	add	fp, #4
2183c     A8 76 02 FB | 	rdlong	arg02, fp
21840     08 50 85 F1 | 	sub	fp, #8
21844     00 D2 BF FD | 	call	#_fatfs_cc_follow_path
21848     0C 50 05 F1 | 	add	fp, #12
2184c     A8 34 62 FC | 	wrlong	result1, fp
21850     0C 50 85 F1 | 	sub	fp, #12
21854     00 34 0E F2 | 	cmp	result1, #0 wz
21858     C4 00 90 5D |  if_ne	jmp	#LR__1278
2185c     04 50 05 F1 | 	add	fp, #4
21860     A8 34 02 FB | 	rdlong	result1, fp
21864     04 50 85 F1 | 	sub	fp, #4
21868     2B 34 06 F1 | 	add	result1, #43
2186c     1A 35 C2 FA | 	rdbyte	result1, result1
21870     80 34 CE F7 | 	test	result1, #128 wz
21874     58 00 90 5D |  if_ne	jmp	#LR__1276
21878     04 50 05 F1 | 	add	fp, #4
2187c     A8 76 02 FB | 	rdlong	arg02, fp
21880     04 50 85 F1 | 	sub	fp, #4
21884     06 76 06 F1 | 	add	arg02, #6
21888     3B 35 C2 FA | 	rdbyte	result1, arg02
2188c     10 34 CE F7 | 	test	result1, #16 wz
21890     30 00 90 AD |  if_e	jmp	#LR__1274
21894     04 50 05 F1 | 	add	fp, #4
21898     A8 76 02 FB | 	rdlong	arg02, fp
2189c     3B 8D 02 F6 | 	mov	local01, arg02
218a0     0C 50 05 F1 | 	add	fp, #12
218a4     A8 74 02 FB | 	rdlong	arg01, fp
218a8     10 50 85 F1 | 	sub	fp, #16
218ac     1C 76 06 F1 | 	add	arg02, #28
218b0     3B 77 02 FB | 	rdlong	arg02, arg02
218b4     28 CB BF FD | 	call	#_fatfs_cc_ld_clust
218b8     08 8C 06 F1 | 	add	local01, #8
218bc     46 35 62 FC | 	wrlong	result1, local01
218c0     0C 00 90 FD | 	jmp	#LR__1275
218c4                 | LR__1274
218c4     0C 50 05 F1 | 	add	fp, #12
218c8     A8 0A 68 FC | 	wrlong	#5, fp
218cc     0C 50 85 F1 | 	sub	fp, #12
218d0                 | LR__1275
218d0                 | LR__1276
218d0     0C 50 05 F1 | 	add	fp, #12
218d4     A8 8C 0A FB | 	rdlong	local01, fp wz
218d8     0C 50 85 F1 | 	sub	fp, #12
218dc     40 00 90 5D |  if_ne	jmp	#LR__1277
218e0     04 50 05 F1 | 	add	fp, #4
218e4     A8 8C 02 FB | 	rdlong	local01, fp
218e8     0C 50 05 F1 | 	add	fp, #12
218ec     A8 76 02 FB | 	rdlong	arg02, fp
218f0     06 76 06 F1 | 	add	arg02, #6
218f4     3B 77 E2 FA | 	rdword	arg02, arg02
218f8     04 8C 06 F1 | 	add	local01, #4
218fc     46 77 52 FC | 	wrword	arg02, local01
21900     0C 50 85 F1 | 	sub	fp, #12
21904     A8 74 02 FB | 	rdlong	arg01, fp
21908     04 50 85 F1 | 	sub	fp, #4
2190c     00 76 06 F6 | 	mov	arg02, #0
21910     D8 C6 BF FD | 	call	#_fatfs_cc_dir_sdi
21914     0C 50 05 F1 | 	add	fp, #12
21918     A8 34 62 FC | 	wrlong	result1, fp
2191c     0C 50 85 F1 | 	sub	fp, #12
21920                 | LR__1277
21920                 | LR__1278
21920     0C 50 05 F1 | 	add	fp, #12
21924     A8 8C 02 FB | 	rdlong	local01, fp
21928     0C 50 85 F1 | 	sub	fp, #12
2192c     04 8C 0E F2 | 	cmp	local01, #4 wz
21930     0C 50 05 A1 |  if_e	add	fp, #12
21934     A8 0A 68 AC |  if_e	wrlong	#5, fp
21938     0C 50 85 A1 |  if_e	sub	fp, #12
2193c                 | LR__1279
2193c     0C 50 05 F1 | 	add	fp, #12
21940     A8 8C 0A FB | 	rdlong	local01, fp wz
21944     0C 50 85 F1 | 	sub	fp, #12
21948     04 50 05 51 |  if_ne	add	fp, #4
2194c     A8 8C 02 5B |  if_ne	rdlong	local01, fp
21950     04 50 85 51 |  if_ne	sub	fp, #4
21954     46 01 68 5C |  if_ne	wrlong	#0, local01
21958                 | ' 
21958                 | ' 	return res ;
21958     0C 50 05 F1 | 	add	fp, #12
2195c     A8 34 02 FB | 	rdlong	result1, fp
21960     0C 50 85 F1 | 	sub	fp, #12
21964                 | LR__1280
21964     A8 F0 03 F6 | 	mov	ptra, fp
21968     B3 00 A0 FD | 	call	#popregs_
2196c                 | _fatfs_cc_f_opendir_ret
2196c     2D 00 64 FD | 	ret
21970                 | 
21970                 | _fatfs_cc_f_closedir
21970     00 4C 05 F6 | 	mov	COUNT_, #0
21974     A9 00 A0 FD | 	call	#pushregs_
21978     10 F0 07 F1 | 	add	ptra, #16
2197c     04 50 05 F1 | 	add	fp, #4
21980     A8 74 62 FC | 	wrlong	arg01, fp
21984     08 50 05 F1 | 	add	fp, #8
21988     A8 76 02 F6 | 	mov	arg02, fp
2198c     0C 50 85 F1 | 	sub	fp, #12
21990     74 DC BF FD | 	call	#_fatfs_cc_validate
21994     08 50 05 F1 | 	add	fp, #8
21998     A8 34 62 FC | 	wrlong	result1, fp
2199c     08 50 85 F1 | 	sub	fp, #8
219a0     00 34 0E F2 | 	cmp	result1, #0 wz
219a4     04 50 05 A1 |  if_e	add	fp, #4
219a8     A8 34 02 AB |  if_e	rdlong	result1, fp
219ac     04 50 85 A1 |  if_e	sub	fp, #4
219b0     1A 01 68 AC |  if_e	wrlong	#0, result1
219b4                 | ' 
219b4                 | ' 
219b4                 | ' 
219b4                 | ' 
219b4                 | ' 		dp->obj.fs = 0;
219b4                 | ' #line 4632 "ff.c"
219b4                 | ' 	}
219b4                 | ' 	return res;
219b4     08 50 05 F1 | 	add	fp, #8
219b8     A8 34 02 FB | 	rdlong	result1, fp
219bc     08 50 85 F1 | 	sub	fp, #8
219c0     A8 F0 03 F6 | 	mov	ptra, fp
219c4     B3 00 A0 FD | 	call	#popregs_
219c8                 | _fatfs_cc_f_closedir_ret
219c8     2D 00 64 FD | 	ret
219cc                 | 
219cc                 | _fatfs_cc_f_readdir
219cc     00 4C 05 F6 | 	mov	COUNT_, #0
219d0     A9 00 A0 FD | 	call	#pushregs_
219d4     14 F0 07 F1 | 	add	ptra, #20
219d8     04 50 05 F1 | 	add	fp, #4
219dc     A8 74 62 FC | 	wrlong	arg01, fp
219e0     04 50 05 F1 | 	add	fp, #4
219e4     A8 76 62 FC | 	wrlong	arg02, fp
219e8     04 50 85 F1 | 	sub	fp, #4
219ec     A8 74 02 FB | 	rdlong	arg01, fp
219f0     0C 50 05 F1 | 	add	fp, #12
219f4     A8 76 02 F6 | 	mov	arg02, fp
219f8     10 50 85 F1 | 	sub	fp, #16
219fc     08 DC BF FD | 	call	#_fatfs_cc_validate
21a00     0C 50 05 F1 | 	add	fp, #12
21a04     A8 34 62 FC | 	wrlong	result1, fp
21a08     0C 50 85 F1 | 	sub	fp, #12
21a0c     00 34 0E F2 | 	cmp	result1, #0 wz
21a10     BC 00 90 5D |  if_ne	jmp	#LR__1284
21a14     08 50 05 F1 | 	add	fp, #8
21a18     A8 34 0A FB | 	rdlong	result1, fp wz
21a1c     08 50 85 F1 | 	sub	fp, #8
21a20     24 00 90 5D |  if_ne	jmp	#LR__1281
21a24     04 50 05 F1 | 	add	fp, #4
21a28     A8 74 02 FB | 	rdlong	arg01, fp
21a2c     04 50 85 F1 | 	sub	fp, #4
21a30     00 76 06 F6 | 	mov	arg02, #0
21a34     B4 C5 BF FD | 	call	#_fatfs_cc_dir_sdi
21a38     0C 50 05 F1 | 	add	fp, #12
21a3c     A8 34 62 FC | 	wrlong	result1, fp
21a40     0C 50 85 F1 | 	sub	fp, #12
21a44     88 00 90 FD | 	jmp	#LR__1283
21a48                 | LR__1281
21a48     04 50 05 F1 | 	add	fp, #4
21a4c     A8 74 02 FB | 	rdlong	arg01, fp
21a50     04 50 85 F1 | 	sub	fp, #4
21a54     00 76 06 F6 | 	mov	arg02, #0
21a58     00 CA BF FD | 	call	#_fatfs_cc_dir_read
21a5c     0C 50 05 F1 | 	add	fp, #12
21a60     A8 34 62 FC | 	wrlong	result1, fp
21a64     0C 50 85 F1 | 	sub	fp, #12
21a68     04 34 0E F2 | 	cmp	result1, #4 wz
21a6c     0C 50 05 A1 |  if_e	add	fp, #12
21a70     A8 00 68 AC |  if_e	wrlong	#0, fp
21a74     0C 50 85 A1 |  if_e	sub	fp, #12
21a78     0C 50 05 F1 | 	add	fp, #12
21a7c     A8 34 0A FB | 	rdlong	result1, fp wz
21a80     0C 50 85 F1 | 	sub	fp, #12
21a84     48 00 90 5D |  if_ne	jmp	#LR__1282
21a88     04 50 05 F1 | 	add	fp, #4
21a8c     A8 74 02 FB | 	rdlong	arg01, fp
21a90     04 50 05 F1 | 	add	fp, #4
21a94     A8 76 02 FB | 	rdlong	arg02, fp
21a98     08 50 85 F1 | 	sub	fp, #8
21a9c     70 CC BF FD | 	call	#_fatfs_cc_get_fileinfo
21aa0     04 50 05 F1 | 	add	fp, #4
21aa4     A8 74 02 FB | 	rdlong	arg01, fp
21aa8     04 50 85 F1 | 	sub	fp, #4
21aac     00 76 06 F6 | 	mov	arg02, #0
21ab0     B0 C6 BF FD | 	call	#_fatfs_cc_dir_next
21ab4     0C 50 05 F1 | 	add	fp, #12
21ab8     A8 34 62 FC | 	wrlong	result1, fp
21abc     0C 50 85 F1 | 	sub	fp, #12
21ac0     04 34 0E F2 | 	cmp	result1, #4 wz
21ac4     0C 50 05 A1 |  if_e	add	fp, #12
21ac8     A8 00 68 AC |  if_e	wrlong	#0, fp
21acc     0C 50 85 A1 |  if_e	sub	fp, #12
21ad0                 | LR__1282
21ad0                 | LR__1283
21ad0                 | LR__1284
21ad0                 | ' 			}
21ad0                 | ' 			;
21ad0                 | ' 		}
21ad0                 | ' 	}
21ad0                 | ' 	return res ;
21ad0     0C 50 05 F1 | 	add	fp, #12
21ad4     A8 34 02 FB | 	rdlong	result1, fp
21ad8     0C 50 85 F1 | 	sub	fp, #12
21adc     A8 F0 03 F6 | 	mov	ptra, fp
21ae0     B3 00 A0 FD | 	call	#popregs_
21ae4                 | _fatfs_cc_f_readdir_ret
21ae4     2D 00 64 FD | 	ret
21ae8                 | 
21ae8                 | _fatfs_cc_f_stat
21ae8     00 4C 05 F6 | 	mov	COUNT_, #0
21aec     A9 00 A0 FD | 	call	#pushregs_
21af0     3C F0 07 F1 | 	add	ptra, #60
21af4     04 50 05 F1 | 	add	fp, #4
21af8     A8 74 62 FC | 	wrlong	arg01, fp
21afc     04 50 05 F1 | 	add	fp, #4
21b00     A8 76 62 FC | 	wrlong	arg02, fp
21b04     04 50 85 F1 | 	sub	fp, #4
21b08     A8 74 02 F6 | 	mov	arg01, fp
21b0c     0C 50 05 F1 | 	add	fp, #12
21b10     A8 76 02 F6 | 	mov	arg02, fp
21b14     10 50 85 F1 | 	sub	fp, #16
21b18     00 78 06 F6 | 	mov	arg03, #0
21b1c     1C D5 BF FD | 	call	#_fatfs_cc_mount_volume
21b20     0C 50 05 F1 | 	add	fp, #12
21b24     A8 34 62 FC | 	wrlong	result1, fp
21b28     0C 50 85 F1 | 	sub	fp, #12
21b2c     00 34 0E F2 | 	cmp	result1, #0 wz
21b30     74 00 90 5D |  if_ne	jmp	#LR__1288
21b34     10 50 05 F1 | 	add	fp, #16
21b38     A8 74 02 F6 | 	mov	arg01, fp
21b3c     0C 50 85 F1 | 	sub	fp, #12
21b40     A8 76 02 FB | 	rdlong	arg02, fp
21b44     04 50 85 F1 | 	sub	fp, #4
21b48     FC CE BF FD | 	call	#_fatfs_cc_follow_path
21b4c     0C 50 05 F1 | 	add	fp, #12
21b50     A8 34 62 FC | 	wrlong	result1, fp
21b54     0C 50 85 F1 | 	sub	fp, #12
21b58     00 34 0E F2 | 	cmp	result1, #0 wz
21b5c     48 00 90 5D |  if_ne	jmp	#LR__1287
21b60     3B 50 05 F1 | 	add	fp, #59
21b64     A8 34 C2 FA | 	rdbyte	result1, fp
21b68     3B 50 85 F1 | 	sub	fp, #59
21b6c     80 34 CE F7 | 	test	result1, #128 wz
21b70     0C 50 05 51 |  if_ne	add	fp, #12
21b74     A8 0C 68 5C |  if_ne	wrlong	#6, fp
21b78     0C 50 85 51 |  if_ne	sub	fp, #12
21b7c     28 00 90 5D |  if_ne	jmp	#LR__1286
21b80     08 50 05 F1 | 	add	fp, #8
21b84     A8 34 0A FB | 	rdlong	result1, fp wz
21b88     08 50 85 F1 | 	sub	fp, #8
21b8c     18 00 90 AD |  if_e	jmp	#LR__1285
21b90     10 50 05 F1 | 	add	fp, #16
21b94     A8 74 02 F6 | 	mov	arg01, fp
21b98     08 50 85 F1 | 	sub	fp, #8
21b9c     A8 76 02 FB | 	rdlong	arg02, fp
21ba0     08 50 85 F1 | 	sub	fp, #8
21ba4     68 CB BF FD | 	call	#_fatfs_cc_get_fileinfo
21ba8                 | LR__1285
21ba8                 | LR__1286
21ba8                 | LR__1287
21ba8                 | LR__1288
21ba8                 | ' 			}
21ba8                 | ' 		}
21ba8                 | ' 		;
21ba8                 | ' 	}
21ba8                 | ' 
21ba8                 | ' 	return res ;
21ba8     0C 50 05 F1 | 	add	fp, #12
21bac     A8 34 02 FB | 	rdlong	result1, fp
21bb0     0C 50 85 F1 | 	sub	fp, #12
21bb4     A8 F0 03 F6 | 	mov	ptra, fp
21bb8     B3 00 A0 FD | 	call	#popregs_
21bbc                 | _fatfs_cc_f_stat_ret
21bbc     2D 00 64 FD | 	ret
21bc0                 | 
21bc0                 | _fatfs_cc_f_unlink
21bc0     04 4C 05 F6 | 	mov	COUNT_, #4
21bc4     A9 00 A0 FD | 	call	#pushregs_
21bc8     6C F0 07 F1 | 	add	ptra, #108
21bcc     04 50 05 F1 | 	add	fp, #4
21bd0     A8 74 62 FC | 	wrlong	arg01, fp
21bd4     60 50 05 F1 | 	add	fp, #96
21bd8     A8 00 68 FC | 	wrlong	#0, fp
21bdc     60 50 85 F1 | 	sub	fp, #96
21be0     A8 74 02 F6 | 	mov	arg01, fp
21be4     64 50 05 F1 | 	add	fp, #100
21be8     A8 76 02 F6 | 	mov	arg02, fp
21bec     68 50 85 F1 | 	sub	fp, #104
21bf0     02 78 06 F6 | 	mov	arg03, #2
21bf4     44 D4 BF FD | 	call	#_fatfs_cc_mount_volume
21bf8     08 50 05 F1 | 	add	fp, #8
21bfc     A8 34 62 FC | 	wrlong	result1, fp
21c00     08 50 85 F1 | 	sub	fp, #8
21c04     00 34 0E F2 | 	cmp	result1, #0 wz
21c08     F0 01 90 5D |  if_ne	jmp	#LR__1297
21c0c     68 50 05 F1 | 	add	fp, #104
21c10     A8 76 02 FB | 	rdlong	arg02, fp
21c14     5C 50 85 F1 | 	sub	fp, #92
21c18     A8 76 62 FC | 	wrlong	arg02, fp
21c1c     A8 74 02 F6 | 	mov	arg01, fp
21c20     08 50 85 F1 | 	sub	fp, #8
21c24     A8 76 02 FB | 	rdlong	arg02, fp
21c28     04 50 85 F1 | 	sub	fp, #4
21c2c     18 CE BF FD | 	call	#_fatfs_cc_follow_path
21c30     08 50 05 F1 | 	add	fp, #8
21c34     A8 34 62 FC | 	wrlong	result1, fp
21c38     00 34 4E F2 | 	cmps	result1, #0 wz
21c3c     08 50 85 F1 | 	sub	fp, #8
21c40     B8 01 90 5D |  if_ne	jmp	#LR__1296
21c44     37 50 05 F1 | 	add	fp, #55
21c48     A8 34 C2 FA | 	rdbyte	result1, fp
21c4c     37 50 85 F1 | 	sub	fp, #55
21c50     80 34 CE F7 | 	test	result1, #128 wz
21c54     08 50 05 51 |  if_ne	add	fp, #8
21c58     A8 0C 68 5C |  if_ne	wrlong	#6, fp
21c5c     08 50 85 51 |  if_ne	sub	fp, #8
21c60     1C 00 90 5D |  if_ne	jmp	#LR__1289
21c64     12 50 05 F1 | 	add	fp, #18
21c68     A8 34 C2 FA | 	rdbyte	result1, fp
21c6c     12 50 85 F1 | 	sub	fp, #18
21c70     01 34 CE F7 | 	test	result1, #1 wz
21c74     08 50 05 51 |  if_ne	add	fp, #8
21c78     A8 0E 68 5C |  if_ne	wrlong	#7, fp
21c7c     08 50 85 51 |  if_ne	sub	fp, #8
21c80                 | LR__1289
21c80     08 50 05 F1 | 	add	fp, #8
21c84     A8 34 0A FB | 	rdlong	result1, fp wz
21c88     08 50 85 F1 | 	sub	fp, #8
21c8c     C8 00 90 5D |  if_ne	jmp	#LR__1292
21c90     68 50 05 F1 | 	add	fp, #104
21c94     A8 74 02 FB | 	rdlong	arg01, fp
21c98     40 50 85 F1 | 	sub	fp, #64
21c9c     A8 76 02 FB | 	rdlong	arg02, fp
21ca0     28 50 85 F1 | 	sub	fp, #40
21ca4     38 C7 BF FD | 	call	#_fatfs_cc_ld_clust
21ca8     64 50 05 F1 | 	add	fp, #100
21cac     A8 34 62 FC | 	wrlong	result1, fp
21cb0     52 50 85 F1 | 	sub	fp, #82
21cb4     A8 34 C2 FA | 	rdbyte	result1, fp
21cb8     12 50 85 F1 | 	sub	fp, #18
21cbc     10 34 CE F7 | 	test	result1, #16 wz
21cc0     94 00 90 AD |  if_e	jmp	#LR__1291
21cc4     68 50 05 F1 | 	add	fp, #104
21cc8     A8 34 02 FB | 	rdlong	result1, fp
21ccc     30 50 85 F1 | 	sub	fp, #48
21cd0     A8 34 62 FC | 	wrlong	result1, fp
21cd4     2C 50 05 F1 | 	add	fp, #44
21cd8     A8 76 02 FB | 	rdlong	arg02, fp
21cdc     24 50 85 F1 | 	sub	fp, #36
21ce0     A8 76 62 FC | 	wrlong	arg02, fp
21ce4     08 50 85 F1 | 	sub	fp, #8
21ce8     A8 74 02 F6 | 	mov	arg01, fp
21cec     38 50 85 F1 | 	sub	fp, #56
21cf0     00 76 06 F6 | 	mov	arg02, #0
21cf4     F4 C2 BF FD | 	call	#_fatfs_cc_dir_sdi
21cf8     08 50 05 F1 | 	add	fp, #8
21cfc     A8 34 62 FC | 	wrlong	result1, fp
21d00     08 50 85 F1 | 	sub	fp, #8
21d04     00 34 0E F2 | 	cmp	result1, #0 wz
21d08     4C 00 90 5D |  if_ne	jmp	#LR__1290
21d0c     38 50 05 F1 | 	add	fp, #56
21d10     A8 74 02 F6 | 	mov	arg01, fp
21d14     38 50 85 F1 | 	sub	fp, #56
21d18     00 76 06 F6 | 	mov	arg02, #0
21d1c     3C C7 BF FD | 	call	#_fatfs_cc_dir_read
21d20     08 50 05 F1 | 	add	fp, #8
21d24     A8 34 62 FC | 	wrlong	result1, fp
21d28     00 34 4E F2 | 	cmps	result1, #0 wz
21d2c     08 50 85 F1 | 	sub	fp, #8
21d30     08 50 05 A1 |  if_e	add	fp, #8
21d34     A8 0E 68 AC |  if_e	wrlong	#7, fp
21d38     08 50 85 A1 |  if_e	sub	fp, #8
21d3c     08 50 05 F1 | 	add	fp, #8
21d40     A8 34 02 FB | 	rdlong	result1, fp
21d44     08 50 85 F1 | 	sub	fp, #8
21d48     04 34 0E F2 | 	cmp	result1, #4 wz
21d4c     08 50 05 A1 |  if_e	add	fp, #8
21d50     A8 00 68 AC |  if_e	wrlong	#0, fp
21d54     08 50 85 A1 |  if_e	sub	fp, #8
21d58                 | LR__1290
21d58                 | LR__1291
21d58                 | LR__1292
21d58     08 50 05 F1 | 	add	fp, #8
21d5c     A8 34 0A FB | 	rdlong	result1, fp wz
21d60     08 50 85 F1 | 	sub	fp, #8
21d64     94 00 90 5D |  if_ne	jmp	#LR__1295
21d68     0C 50 05 F1 | 	add	fp, #12
21d6c     A8 74 02 F6 | 	mov	arg01, fp
21d70     0C 50 85 F1 | 	sub	fp, #12
21d74     50 C9 BF FD | 	call	#_fatfs_cc_dir_remove
21d78     08 50 05 F1 | 	add	fp, #8
21d7c     A8 34 62 FC | 	wrlong	result1, fp
21d80     08 50 85 F1 | 	sub	fp, #8
21d84     00 34 0E F2 | 	cmp	result1, #0 wz
21d88     44 00 90 5D |  if_ne	jmp	#LR__1293
21d8c     64 50 05 F1 | 	add	fp, #100
21d90     A8 8C 0A FB | 	rdlong	local01, fp wz
21d94     64 50 85 F1 | 	sub	fp, #100
21d98     34 00 90 AD |  if_e	jmp	#LR__1293
21d9c     0C 50 05 F1 | 	add	fp, #12
21da0     A8 74 02 F6 | 	mov	arg01, fp
21da4     58 50 05 F1 | 	add	fp, #88
21da8     A8 8E 02 FB | 	rdlong	local02, fp
21dac     64 50 85 F1 | 	sub	fp, #100
21db0     00 90 06 F6 | 	mov	local03, #0
21db4     47 77 02 F6 | 	mov	arg02, local02
21db8     00 78 06 F6 | 	mov	arg03, #0
21dbc     24 BE BF FD | 	call	#_fatfs_cc_remove_chain
21dc0     1A 93 02 F6 | 	mov	local04, result1
21dc4     08 50 05 F1 | 	add	fp, #8
21dc8     A8 92 62 FC | 	wrlong	local04, fp
21dcc     08 50 85 F1 | 	sub	fp, #8
21dd0                 | LR__1293
21dd0     08 50 05 F1 | 	add	fp, #8
21dd4     A8 92 0A FB | 	rdlong	local04, fp wz
21dd8     08 50 85 F1 | 	sub	fp, #8
21ddc     1C 00 90 5D |  if_ne	jmp	#LR__1294
21de0     68 50 05 F1 | 	add	fp, #104
21de4     A8 74 02 FB | 	rdlong	arg01, fp
21de8     68 50 85 F1 | 	sub	fp, #104
21dec     30 B8 BF FD | 	call	#_fatfs_cc_sync_fs
21df0     08 50 05 F1 | 	add	fp, #8
21df4     A8 34 62 FC | 	wrlong	result1, fp
21df8     08 50 85 F1 | 	sub	fp, #8
21dfc                 | LR__1294
21dfc                 | LR__1295
21dfc                 | LR__1296
21dfc                 | LR__1297
21dfc                 | ' 			}
21dfc                 | ' 		}
21dfc                 | ' 		;
21dfc                 | ' 	}
21dfc                 | ' 
21dfc                 | ' 	return res ;
21dfc     08 50 05 F1 | 	add	fp, #8
21e00     A8 34 02 FB | 	rdlong	result1, fp
21e04     08 50 85 F1 | 	sub	fp, #8
21e08     A8 F0 03 F6 | 	mov	ptra, fp
21e0c     B3 00 A0 FD | 	call	#popregs_
21e10                 | _fatfs_cc_f_unlink_ret
21e10     2D 00 64 FD | 	ret
21e14                 | 
21e14                 | _fatfs_cc_f_mkdir
21e14     04 4C 05 F6 | 	mov	COUNT_, #4
21e18     A9 00 A0 FD | 	call	#pushregs_
21e1c     58 F0 07 F1 | 	add	ptra, #88
21e20     04 50 05 F1 | 	add	fp, #4
21e24     A8 74 62 FC | 	wrlong	arg01, fp
21e28     A8 74 02 F6 | 	mov	arg01, fp
21e2c     44 50 05 F1 | 	add	fp, #68
21e30     A8 76 02 F6 | 	mov	arg02, fp
21e34     48 50 85 F1 | 	sub	fp, #72
21e38     02 78 06 F6 | 	mov	arg03, #2
21e3c     FC D1 BF FD | 	call	#_fatfs_cc_mount_volume
21e40     08 50 05 F1 | 	add	fp, #8
21e44     A8 34 62 FC | 	wrlong	result1, fp
21e48     08 50 85 F1 | 	sub	fp, #8
21e4c     00 34 0E F2 | 	cmp	result1, #0 wz
21e50     D0 02 90 5D |  if_ne	jmp	#LR__1303
21e54     48 50 05 F1 | 	add	fp, #72
21e58     A8 76 02 FB | 	rdlong	arg02, fp
21e5c     3C 50 85 F1 | 	sub	fp, #60
21e60     A8 76 62 FC | 	wrlong	arg02, fp
21e64     A8 74 02 F6 | 	mov	arg01, fp
21e68     08 50 85 F1 | 	sub	fp, #8
21e6c     A8 8C 02 FB | 	rdlong	local01, fp
21e70     04 50 85 F1 | 	sub	fp, #4
21e74     46 77 02 F6 | 	mov	arg02, local01
21e78     CC CB BF FD | 	call	#_fatfs_cc_follow_path
21e7c     08 50 05 F1 | 	add	fp, #8
21e80     A8 34 62 FC | 	wrlong	result1, fp
21e84     1A 8F 0A F6 | 	mov	local02, result1 wz
21e88     08 50 85 F1 | 	sub	fp, #8
21e8c     08 50 05 A1 |  if_e	add	fp, #8
21e90     A8 10 68 AC |  if_e	wrlong	#8, fp
21e94     08 50 85 A1 |  if_e	sub	fp, #8
21e98     08 50 05 F1 | 	add	fp, #8
21e9c     A8 34 02 FB | 	rdlong	result1, fp
21ea0     08 50 85 F1 | 	sub	fp, #8
21ea4     04 34 0E F2 | 	cmp	result1, #4 wz
21ea8     78 02 90 5D |  if_ne	jmp	#LR__1302
21eac     48 50 05 F1 | 	add	fp, #72
21eb0     A8 76 02 FB | 	rdlong	arg02, fp
21eb4     10 50 85 F1 | 	sub	fp, #16
21eb8     A8 76 62 FC | 	wrlong	arg02, fp
21ebc     A8 74 02 F6 | 	mov	arg01, fp
21ec0     38 50 85 F1 | 	sub	fp, #56
21ec4     00 76 06 F6 | 	mov	arg02, #0
21ec8     30 BE BF FD | 	call	#_fatfs_cc_create_chain
21ecc     4C 50 05 F1 | 	add	fp, #76
21ed0     A8 34 62 FC | 	wrlong	result1, fp
21ed4     44 50 85 F1 | 	sub	fp, #68
21ed8     A8 00 68 FC | 	wrlong	#0, fp
21edc     44 50 05 F1 | 	add	fp, #68
21ee0     A8 34 0A FB | 	rdlong	result1, fp wz
21ee4     4C 50 85 F1 | 	sub	fp, #76
21ee8     08 50 05 A1 |  if_e	add	fp, #8
21eec     A8 0E 68 AC |  if_e	wrlong	#7, fp
21ef0     08 50 85 A1 |  if_e	sub	fp, #8
21ef4     4C 50 05 F1 | 	add	fp, #76
21ef8     A8 34 02 FB | 	rdlong	result1, fp
21efc     4C 50 85 F1 | 	sub	fp, #76
21f00     01 34 0E F2 | 	cmp	result1, #1 wz
21f04     08 50 05 A1 |  if_e	add	fp, #8
21f08     A8 04 68 AC |  if_e	wrlong	#2, fp
21f0c     08 50 85 A1 |  if_e	sub	fp, #8
21f10     4C 50 05 F1 | 	add	fp, #76
21f14     A8 90 02 FB | 	rdlong	local03, fp
21f18     4C 50 85 F1 | 	sub	fp, #76
21f1c     FF FF 7F FF 
21f20     FF 91 0E F2 | 	cmp	local03, ##-1 wz
21f24     08 50 05 A1 |  if_e	add	fp, #8
21f28     A8 02 68 AC |  if_e	wrlong	#1, fp
21f2c     08 50 85 A1 |  if_e	sub	fp, #8
21f30     84 1A B0 FD | 	call	#_fatfs_cc__get_fattime
21f34     54 50 05 F1 | 	add	fp, #84
21f38     A8 34 62 FC | 	wrlong	result1, fp
21f3c     4C 50 85 F1 | 	sub	fp, #76
21f40     A8 90 0A FB | 	rdlong	local03, fp wz
21f44     08 50 85 F1 | 	sub	fp, #8
21f48     24 01 90 5D |  if_ne	jmp	#LR__1299
21f4c     48 50 05 F1 | 	add	fp, #72
21f50     A8 74 02 FB | 	rdlong	arg01, fp
21f54     04 50 05 F1 | 	add	fp, #4
21f58     A8 8C 02 FB | 	rdlong	local01, fp
21f5c     4C 50 85 F1 | 	sub	fp, #76
21f60     46 77 02 F6 | 	mov	arg02, local01
21f64     C4 BF BF FD | 	call	#_fatfs_cc_dir_clear
21f68     08 50 05 F1 | 	add	fp, #8
21f6c     A8 34 62 FC | 	wrlong	result1, fp
21f70     1A 8F 0A F6 | 	mov	local02, result1 wz
21f74     08 50 85 F1 | 	sub	fp, #8
21f78     F4 00 90 5D |  if_ne	jmp	#LR__1298
21f7c     48 50 05 F1 | 	add	fp, #72
21f80     A8 74 02 FB | 	rdlong	arg01, fp
21f84     48 50 85 F1 | 	sub	fp, #72
21f88     30 74 06 F1 | 	add	arg01, #48
21f8c     20 76 06 F6 | 	mov	arg02, #32
21f90     0B 78 06 F6 | 	mov	arg03, #11
21f94     3A 93 02 F6 | 	mov	local04, arg01
21f98     99 00 A0 FD | 	call	#\builtin_bytefill_
21f9c     48 50 05 F1 | 	add	fp, #72
21fa0     A8 90 02 FB | 	rdlong	local03, fp
21fa4     30 90 06 F1 | 	add	local03, #48
21fa8     48 5D 48 FC | 	wrbyte	#46, local03
21fac     A8 90 02 FB | 	rdlong	local03, fp
21fb0     3B 90 06 F1 | 	add	local03, #59
21fb4     48 21 48 FC | 	wrbyte	#16, local03
21fb8     A8 74 02 FB | 	rdlong	arg01, fp
21fbc     46 74 06 F1 | 	add	arg01, #70
21fc0     0C 50 05 F1 | 	add	fp, #12
21fc4     A8 76 02 FB | 	rdlong	arg02, fp
21fc8     3A 77 62 FC | 	wrlong	arg02, arg01
21fcc     0C 50 85 F1 | 	sub	fp, #12
21fd0     A8 76 02 FB | 	rdlong	arg02, fp
21fd4     3B 75 02 F6 | 	mov	arg01, arg02
21fd8     30 76 06 F1 | 	add	arg02, #48
21fdc     04 50 05 F1 | 	add	fp, #4
21fe0     A8 78 02 FB | 	rdlong	arg03, fp
21fe4     4C 50 85 F1 | 	sub	fp, #76
21fe8     38 C4 BF FD | 	call	#_fatfs_cc_st_clust
21fec     48 50 05 F1 | 	add	fp, #72
21ff0     A8 76 02 FB | 	rdlong	arg02, fp
21ff4     3B 75 02 F6 | 	mov	arg01, arg02
21ff8     50 74 06 F1 | 	add	arg01, #80
21ffc     48 50 85 F1 | 	sub	fp, #72
22000     30 76 06 F1 | 	add	arg02, #48
22004     20 78 06 F6 | 	mov	arg03, #32
22008     4C 3B B0 FD | 	call	#__system____builtin_memmove
2200c     48 50 05 F1 | 	add	fp, #72
22010     A8 90 02 FB | 	rdlong	local03, fp
22014     51 90 06 F1 | 	add	local03, #81
22018     48 5D 48 FC | 	wrbyte	#46, local03
2201c     34 50 85 F1 | 	sub	fp, #52
22020     A8 78 02 FB | 	rdlong	arg03, fp
22024     3C 50 05 F1 | 	add	fp, #60
22028     A8 78 62 FC | 	wrlong	arg03, fp
2202c     08 50 85 F1 | 	sub	fp, #8
22030     A8 76 02 FB | 	rdlong	arg02, fp
22034     3B 75 02 F6 | 	mov	arg01, arg02
22038     50 76 06 F1 | 	add	arg02, #80
2203c     48 50 85 F1 | 	sub	fp, #72
22040     E0 C3 BF FD | 	call	#_fatfs_cc_st_clust
22044     48 50 05 F1 | 	add	fp, #72
22048     A8 90 02 FB | 	rdlong	local03, fp
2204c     03 90 06 F1 | 	add	local03, #3
22050     48 03 48 FC | 	wrbyte	#1, local03
22054     3C 50 85 F1 | 	sub	fp, #60
22058     A8 74 02 F6 | 	mov	arg01, fp
2205c     0C 50 85 F1 | 	sub	fp, #12
22060     E4 C5 BF FD | 	call	#_fatfs_cc_dir_register
22064     08 50 05 F1 | 	add	fp, #8
22068     A8 34 62 FC | 	wrlong	result1, fp
2206c     08 50 85 F1 | 	sub	fp, #8
22070                 | LR__1298
22070                 | LR__1299
22070     08 50 05 F1 | 	add	fp, #8
22074     A8 90 0A FB | 	rdlong	local03, fp wz
22078     08 50 85 F1 | 	sub	fp, #8
2207c     88 00 90 5D |  if_ne	jmp	#LR__1300
22080     28 50 05 F1 | 	add	fp, #40
22084     A8 74 02 FB | 	rdlong	arg01, fp
22088     16 74 06 F1 | 	add	arg01, #22
2208c     2C 50 05 F1 | 	add	fp, #44
22090     A8 76 02 FB | 	rdlong	arg02, fp
22094     3A 77 62 FC | 	wrlong	arg02, arg01
22098     0C 50 85 F1 | 	sub	fp, #12
2209c     A8 74 02 FB | 	rdlong	arg01, fp
220a0     20 50 85 F1 | 	sub	fp, #32
220a4     A8 76 02 FB | 	rdlong	arg02, fp
220a8     24 50 05 F1 | 	add	fp, #36
220ac     A8 78 02 FB | 	rdlong	arg03, fp
220b0     4C 50 85 F1 | 	sub	fp, #76
220b4     6C C3 BF FD | 	call	#_fatfs_cc_st_clust
220b8     28 50 05 F1 | 	add	fp, #40
220bc     A8 90 02 FB | 	rdlong	local03, fp
220c0     0B 90 06 F1 | 	add	local03, #11
220c4     48 21 48 FC | 	wrbyte	#16, local03
220c8     20 50 05 F1 | 	add	fp, #32
220cc     A8 90 02 FB | 	rdlong	local03, fp
220d0     03 90 06 F1 | 	add	local03, #3
220d4     48 03 48 FC | 	wrbyte	#1, local03
220d8     40 50 85 F1 | 	sub	fp, #64
220dc     A8 90 0A FB | 	rdlong	local03, fp wz
220e0     08 50 85 F1 | 	sub	fp, #8
220e4     3C 00 90 5D |  if_ne	jmp	#LR__1301
220e8     48 50 05 F1 | 	add	fp, #72
220ec     A8 74 02 FB | 	rdlong	arg01, fp
220f0     48 50 85 F1 | 	sub	fp, #72
220f4     28 B5 BF FD | 	call	#_fatfs_cc_sync_fs
220f8     08 50 05 F1 | 	add	fp, #8
220fc     A8 34 62 FC | 	wrlong	result1, fp
22100     08 50 85 F1 | 	sub	fp, #8
22104     1C 00 90 FD | 	jmp	#LR__1301
22108                 | LR__1300
22108     38 50 05 F1 | 	add	fp, #56
2210c     A8 74 02 F6 | 	mov	arg01, fp
22110     14 50 05 F1 | 	add	fp, #20
22114     A8 76 02 FB | 	rdlong	arg02, fp
22118     4C 50 85 F1 | 	sub	fp, #76
2211c     00 78 06 F6 | 	mov	arg03, #0
22120     C0 BA BF FD | 	call	#_fatfs_cc_remove_chain
22124                 | LR__1301
22124                 | LR__1302
22124                 | LR__1303
22124                 | ' 				remove_chain(&sobj, dcl, 0);
22124                 | ' 			}
22124                 | ' 		}
22124                 | ' 		;
22124                 | ' 	}
22124                 | ' 
22124                 | ' 	return res ;
22124     08 50 05 F1 | 	add	fp, #8
22128     A8 34 02 FB | 	rdlong	result1, fp
2212c     08 50 85 F1 | 	sub	fp, #8
22130     A8 F0 03 F6 | 	mov	ptra, fp
22134     B3 00 A0 FD | 	call	#popregs_
22138                 | _fatfs_cc_f_mkdir_ret
22138     2D 00 64 FD | 	ret
2213c                 | 
2213c                 | _fatfs_cc_f_rename
2213c     09 4C 05 F6 | 	mov	COUNT_, #9
22140     A9 00 A0 FD | 	call	#pushregs_
22144     94 F0 07 F1 | 	add	ptra, #148
22148     04 50 05 F1 | 	add	fp, #4
2214c     A8 74 62 FC | 	wrlong	arg01, fp
22150     04 50 05 F1 | 	add	fp, #4
22154     A8 76 62 FC | 	wrlong	arg02, fp
22158     A8 74 02 F6 | 	mov	arg01, fp
2215c     08 50 85 F1 | 	sub	fp, #8
22160     F4 CA BF FD | 	call	#_fatfs_cc_get_ldnumber
22164     04 50 05 F1 | 	add	fp, #4
22168     A8 74 02 F6 | 	mov	arg01, fp
2216c     64 50 05 F1 | 	add	fp, #100
22170     A8 76 02 F6 | 	mov	arg02, fp
22174     68 50 85 F1 | 	sub	fp, #104
22178     02 78 06 F6 | 	mov	arg03, #2
2217c     BC CE BF FD | 	call	#_fatfs_cc_mount_volume
22180     0C 50 05 F1 | 	add	fp, #12
22184     A8 34 62 FC | 	wrlong	result1, fp
22188     0C 50 85 F1 | 	sub	fp, #12
2218c     00 34 0E F2 | 	cmp	result1, #0 wz
22190     84 03 90 5D |  if_ne	jmp	#LR__1317
22194     68 50 05 F1 | 	add	fp, #104
22198     A8 76 02 FB | 	rdlong	arg02, fp
2219c     58 50 85 F1 | 	sub	fp, #88
221a0     A8 76 62 FC | 	wrlong	arg02, fp
221a4     A8 74 02 F6 | 	mov	arg01, fp
221a8     0C 50 85 F1 | 	sub	fp, #12
221ac     A8 76 02 FB | 	rdlong	arg02, fp
221b0     04 50 85 F1 | 	sub	fp, #4
221b4     90 C8 BF FD | 	call	#_fatfs_cc_follow_path
221b8     0C 50 05 F1 | 	add	fp, #12
221bc     A8 34 62 FC | 	wrlong	result1, fp
221c0     00 34 4E F2 | 	cmps	result1, #0 wz
221c4     0C 50 85 F1 | 	sub	fp, #12
221c8     1C 00 90 5D |  if_ne	jmp	#LR__1304
221cc     3B 50 05 F1 | 	add	fp, #59
221d0     A8 34 C2 FA | 	rdbyte	result1, fp
221d4     3B 50 85 F1 | 	sub	fp, #59
221d8     A0 34 CE F7 | 	test	result1, #160 wz
221dc     0C 50 05 51 |  if_ne	add	fp, #12
221e0     A8 0C 68 5C |  if_ne	wrlong	#6, fp
221e4     0C 50 85 51 |  if_ne	sub	fp, #12
221e8                 | LR__1304
221e8     0C 50 05 F1 | 	add	fp, #12
221ec     A8 8C 0A FB | 	rdlong	local01, fp wz
221f0     0C 50 85 F1 | 	sub	fp, #12
221f4     20 03 90 5D |  if_ne	jmp	#LR__1316
221f8     6C 50 05 F1 | 	add	fp, #108
221fc     A8 74 02 F6 | 	mov	arg01, fp
22200     40 50 85 F1 | 	sub	fp, #64
22204     A8 76 02 FB | 	rdlong	arg02, fp
22208     2C 50 85 F1 | 	sub	fp, #44
2220c     20 78 06 F6 | 	mov	arg03, #32
22210     44 39 B0 FD | 	call	#__system____builtin_memmove
22214     3C 50 05 F1 | 	add	fp, #60
22218     A8 74 02 F6 | 	mov	arg01, fp
2221c     2C 50 85 F1 | 	sub	fp, #44
22220     A8 76 02 F6 | 	mov	arg02, fp
22224     10 50 85 F1 | 	sub	fp, #16
22228     2C 78 06 F6 | 	mov	arg03, #44
2222c     28 39 B0 FD | 	call	#__system____builtin_memmove
22230     3C 50 05 F1 | 	add	fp, #60
22234     A8 74 02 F6 | 	mov	arg01, fp
22238     34 50 85 F1 | 	sub	fp, #52
2223c     A8 76 02 FB | 	rdlong	arg02, fp
22240     08 50 85 F1 | 	sub	fp, #8
22244     00 C8 BF FD | 	call	#_fatfs_cc_follow_path
22248     0C 50 05 F1 | 	add	fp, #12
2224c     A8 34 62 FC | 	wrlong	result1, fp
22250     0C 50 85 F1 | 	sub	fp, #12
22254     00 34 0E F2 | 	cmp	result1, #0 wz
22258     4C 00 90 5D |  if_ne	jmp	#LR__1307
2225c     44 50 05 F1 | 	add	fp, #68
22260     A8 74 02 FB | 	rdlong	arg01, fp
22264     2C 50 85 F1 | 	sub	fp, #44
22268     A8 34 02 FB | 	rdlong	result1, fp
2226c     18 50 85 F1 | 	sub	fp, #24
22270     1A 75 0A F2 | 	cmp	arg01, result1 wz
22274     20 00 90 5D |  if_ne	jmp	#LR__1305
22278     4C 50 05 F1 | 	add	fp, #76
2227c     A8 34 02 FB | 	rdlong	result1, fp
22280     2C 50 85 F1 | 	sub	fp, #44
22284     A8 8E 02 FB | 	rdlong	local02, fp
22288     20 50 85 F1 | 	sub	fp, #32
2228c     47 35 0A F2 | 	cmp	result1, local02 wz
22290     04 8C 06 A6 |  if_e	mov	local01, #4
22294     04 00 90 AD |  if_e	jmp	#LR__1306
22298                 | LR__1305
22298     08 8C 06 F6 | 	mov	local01, #8
2229c                 | LR__1306
2229c     0C 50 05 F1 | 	add	fp, #12
222a0     A8 8C 62 FC | 	wrlong	local01, fp
222a4     0C 50 85 F1 | 	sub	fp, #12
222a8                 | LR__1307
222a8     0C 50 05 F1 | 	add	fp, #12
222ac     A8 8C 02 FB | 	rdlong	local01, fp
222b0     0C 50 85 F1 | 	sub	fp, #12
222b4     04 8C 0E F2 | 	cmp	local01, #4 wz
222b8     0C 02 90 5D |  if_ne	jmp	#LR__1313
222bc     3C 50 05 F1 | 	add	fp, #60
222c0     A8 74 02 F6 | 	mov	arg01, fp
222c4     3C 50 85 F1 | 	sub	fp, #60
222c8     7C C3 BF FD | 	call	#_fatfs_cc_dir_register
222cc     0C 50 05 F1 | 	add	fp, #12
222d0     A8 34 62 FC | 	wrlong	result1, fp
222d4     0C 50 85 F1 | 	sub	fp, #12
222d8     00 34 0E F2 | 	cmp	result1, #0 wz
222dc     E8 01 90 5D |  if_ne	jmp	#LR__1312
222e0     58 50 05 F1 | 	add	fp, #88
222e4     A8 74 02 FB | 	rdlong	arg01, fp
222e8     34 50 05 F1 | 	add	fp, #52
222ec     A8 74 62 FC | 	wrlong	arg01, fp
222f0     0D 74 06 F1 | 	add	arg01, #13
222f4     20 50 85 F1 | 	sub	fp, #32
222f8     A8 76 02 F6 | 	mov	arg02, fp
222fc     6C 50 85 F1 | 	sub	fp, #108
22300     0D 76 06 F1 | 	add	arg02, #13
22304     13 78 06 F6 | 	mov	arg03, #19
22308     4C 38 B0 FD | 	call	#__system____builtin_memmove
2230c     8C 50 05 F1 | 	add	fp, #140
22310     A8 8C 02 FB | 	rdlong	local01, fp
22314     15 50 85 F1 | 	sub	fp, #21
22318     A8 34 C2 FA | 	rdbyte	result1, fp
2231c     0B 8C 06 F1 | 	add	local01, #11
22320     46 35 42 FC | 	wrbyte	result1, local01
22324     15 50 05 F1 | 	add	fp, #21
22328     A8 8C 02 FB | 	rdlong	local01, fp
2232c     8C 50 85 F1 | 	sub	fp, #140
22330     0B 8C 06 F1 | 	add	local01, #11
22334     46 8D C2 FA | 	rdbyte	local01, local01
22338     10 8C CE F7 | 	test	local01, #16 wz
2233c     24 00 90 5D |  if_ne	jmp	#LR__1308
22340     8C 50 05 F1 | 	add	fp, #140
22344     A8 34 02 FB | 	rdlong	result1, fp
22348     1A 8D 02 F6 | 	mov	local01, result1
2234c     8C 50 85 F1 | 	sub	fp, #140
22350     0B 34 06 F1 | 	add	result1, #11
22354     1A 35 C2 FA | 	rdbyte	result1, result1
22358     20 34 46 F5 | 	or	result1, #32
2235c     0B 8C 06 F1 | 	add	local01, #11
22360     46 35 42 FC | 	wrbyte	result1, local01
22364                 | LR__1308
22364     68 50 05 F1 | 	add	fp, #104
22368     A8 8C 02 FB | 	rdlong	local01, fp
2236c     03 8C 06 F1 | 	add	local01, #3
22370     46 03 48 FC | 	wrbyte	#1, local01
22374     24 50 05 F1 | 	add	fp, #36
22378     A8 8C 02 FB | 	rdlong	local01, fp
2237c     8C 50 85 F1 | 	sub	fp, #140
22380     0B 8C 06 F1 | 	add	local01, #11
22384     46 8D C2 FA | 	rdbyte	local01, local01
22388     10 8C CE F7 | 	test	local01, #16 wz
2238c     38 01 90 AD |  if_e	jmp	#LR__1311
22390     18 50 05 F1 | 	add	fp, #24
22394     A8 90 02 FB | 	rdlong	local03, fp
22398     48 93 02 F6 | 	mov	local04, local03
2239c     2C 50 05 F1 | 	add	fp, #44
223a0     A8 94 02 FB | 	rdlong	local05, fp
223a4     44 50 85 F1 | 	sub	fp, #68
223a8     4A 97 02 F6 | 	mov	local06, local05
223ac     4B 93 0A F2 | 	cmp	local04, local06 wz
223b0     14 01 90 AD |  if_e	jmp	#LR__1311
223b4     68 50 05 F1 | 	add	fp, #104
223b8     A8 74 02 FB | 	rdlong	arg01, fp
223bc     3A 8D 02 F6 | 	mov	local01, arg01
223c0     24 50 05 F1 | 	add	fp, #36
223c4     A8 98 02 FB | 	rdlong	local07, fp
223c8     8C 50 85 F1 | 	sub	fp, #140
223cc     4C 9B 02 F6 | 	mov	local08, local07
223d0     4D 77 02 F6 | 	mov	arg02, local08
223d4     08 C0 BF FD | 	call	#_fatfs_cc_ld_clust
223d8     1A 77 02 F6 | 	mov	arg02, result1
223dc     46 75 02 F6 | 	mov	arg01, local01
223e0     54 B3 BF FD | 	call	#_fatfs_cc_clst2sect
223e4     90 50 05 F1 | 	add	fp, #144
223e8     A8 34 62 FC | 	wrlong	result1, fp
223ec     1A 9D 0A F6 | 	mov	local09, result1 wz
223f0     90 50 85 F1 | 	sub	fp, #144
223f4     02 8C 06 A6 |  if_e	mov	local01, #2
223f8     0C 50 05 A1 |  if_e	add	fp, #12
223fc     A8 04 68 AC |  if_e	wrlong	#2, fp
22400     0C 50 85 A1 |  if_e	sub	fp, #12
22404     C0 00 90 AD |  if_e	jmp	#LR__1310
22408     68 50 05 F1 | 	add	fp, #104
2240c     A8 74 02 FB | 	rdlong	arg01, fp
22410     28 50 05 F1 | 	add	fp, #40
22414     A8 76 02 FB | 	rdlong	arg02, fp
22418     90 50 85 F1 | 	sub	fp, #144
2241c     88 B1 BF FD | 	call	#_fatfs_cc_move_window
22420     0C 50 05 F1 | 	add	fp, #12
22424     A8 34 62 FC | 	wrlong	result1, fp
22428     5C 50 05 F1 | 	add	fp, #92
2242c     A8 9A 02 FB | 	rdlong	local08, fp
22430     4D 99 02 F6 | 	mov	local07, local08
22434     30 98 06 F1 | 	add	local07, #48
22438     4C 8D 02 F6 | 	mov	local01, local07
2243c     20 8C 06 F1 | 	add	local01, #32
22440     24 50 05 F1 | 	add	fp, #36
22444     A8 8C 62 FC | 	wrlong	local01, fp
22448     80 50 85 F1 | 	sub	fp, #128
2244c     A8 9C 02 FB | 	rdlong	local09, fp
22450     0C 50 85 F1 | 	sub	fp, #12
22454     4E 8D 0A F6 | 	mov	local01, local09 wz
22458     6C 00 90 5D |  if_ne	jmp	#LR__1309
2245c     8C 50 05 F1 | 	add	fp, #140
22460     A8 92 02 FB | 	rdlong	local04, fp
22464     8C 50 85 F1 | 	sub	fp, #140
22468     49 99 02 F6 | 	mov	local07, local04
2246c     01 98 06 F1 | 	add	local07, #1
22470     4C 91 C2 FA | 	rdbyte	local03, local07
22474     01 98 86 F1 | 	sub	local07, #1
22478     48 9B E2 F8 | 	getbyte	local08, local03, #0
2247c     2E 9A 0E F2 | 	cmp	local08, #46 wz
22480     44 00 90 5D |  if_ne	jmp	#LR__1309
22484     68 50 05 F1 | 	add	fp, #104
22488     A8 74 02 FB | 	rdlong	arg01, fp
2248c     24 50 05 F1 | 	add	fp, #36
22490     A8 76 02 FB | 	rdlong	arg02, fp
22494     48 50 85 F1 | 	sub	fp, #72
22498     A8 98 02 FB | 	rdlong	local07, fp
2249c     44 50 85 F1 | 	sub	fp, #68
224a0     4C 79 02 F6 | 	mov	arg03, local07
224a4     7C BF BF FD | 	call	#_fatfs_cc_st_clust
224a8     68 50 05 F1 | 	add	fp, #104
224ac     A8 9C 02 FB | 	rdlong	local09, fp
224b0     68 50 85 F1 | 	sub	fp, #104
224b4     4E 8D 02 F6 | 	mov	local01, local09
224b8     01 9A 06 F6 | 	mov	local08, #1
224bc     03 8C 06 F1 | 	add	local01, #3
224c0     46 03 48 FC | 	wrbyte	#1, local01
224c4     03 8C 86 F1 | 	sub	local01, #3
224c8                 | LR__1309
224c8                 | LR__1310
224c8                 | LR__1311
224c8                 | LR__1312
224c8                 | LR__1313
224c8     0C 50 05 F1 | 	add	fp, #12
224cc     A8 8C 0A FB | 	rdlong	local01, fp wz
224d0     0C 50 85 F1 | 	sub	fp, #12
224d4     40 00 90 5D |  if_ne	jmp	#LR__1315
224d8     10 50 05 F1 | 	add	fp, #16
224dc     A8 74 02 F6 | 	mov	arg01, fp
224e0     10 50 85 F1 | 	sub	fp, #16
224e4     E0 C1 BF FD | 	call	#_fatfs_cc_dir_remove
224e8     0C 50 05 F1 | 	add	fp, #12
224ec     A8 34 62 FC | 	wrlong	result1, fp
224f0     0C 50 85 F1 | 	sub	fp, #12
224f4     00 34 0E F2 | 	cmp	result1, #0 wz
224f8     1C 00 90 5D |  if_ne	jmp	#LR__1314
224fc     68 50 05 F1 | 	add	fp, #104
22500     A8 74 02 FB | 	rdlong	arg01, fp
22504     68 50 85 F1 | 	sub	fp, #104
22508     14 B1 BF FD | 	call	#_fatfs_cc_sync_fs
2250c     0C 50 05 F1 | 	add	fp, #12
22510     A8 34 62 FC | 	wrlong	result1, fp
22514     0C 50 85 F1 | 	sub	fp, #12
22518                 | LR__1314
22518                 | LR__1315
22518                 | LR__1316
22518                 | LR__1317
22518                 | ' 					res = sync_fs(fs);
22518                 | ' 				}
22518                 | ' 			}
22518                 | ' 
22518                 | ' 		}
22518                 | ' 		;
22518                 | ' 	}
22518                 | ' 
22518                 | ' 	return res ;
22518     0C 50 05 F1 | 	add	fp, #12
2251c     A8 34 02 FB | 	rdlong	result1, fp
22520     0C 50 85 F1 | 	sub	fp, #12
22524     A8 F0 03 F6 | 	mov	ptra, fp
22528     B3 00 A0 FD | 	call	#popregs_
2252c                 | _fatfs_cc_f_rename_ret
2252c     2D 00 64 FD | 	ret
22530                 | 
22530                 | _fatfs_cc_time
22530     00 4C 05 F6 | 	mov	COUNT_, #0
22534     A9 00 A0 FD | 	call	#pushregs_
22538     14 F0 07 F1 | 	add	ptra, #20
2253c     04 50 05 F1 | 	add	fp, #4
22540     A8 74 62 FC | 	wrlong	arg01, fp
22544     04 50 05 F1 | 	add	fp, #4
22548     A8 74 02 F6 | 	mov	arg01, fp
2254c     08 50 85 F1 | 	sub	fp, #8
22550     00 76 06 F6 | 	mov	arg02, #0
22554     1C 27 B0 FD | 	call	#_fatfs_cc_gettimeofday
22558     08 50 05 F1 | 	add	fp, #8
2255c     A8 34 02 FB | 	rdlong	result1, fp
22560     08 50 05 F1 | 	add	fp, #8
22564     A8 34 62 FC | 	wrlong	result1, fp
22568     0C 50 85 F1 | 	sub	fp, #12
2256c     A8 34 0A FB | 	rdlong	result1, fp wz
22570     04 50 85 F1 | 	sub	fp, #4
22574     18 00 90 AD |  if_e	jmp	#LR__1318
22578     04 50 05 F1 | 	add	fp, #4
2257c     A8 34 02 FB | 	rdlong	result1, fp
22580     0C 50 05 F1 | 	add	fp, #12
22584     A8 76 02 FB | 	rdlong	arg02, fp
22588     10 50 85 F1 | 	sub	fp, #16
2258c     1A 77 62 FC | 	wrlong	arg02, result1
22590                 | LR__1318
22590                 | '         *tp = now;
22590                 | '     return now;
22590     10 50 05 F1 | 	add	fp, #16
22594     A8 34 02 FB | 	rdlong	result1, fp
22598     10 50 85 F1 | 	sub	fp, #16
2259c     A8 F0 03 F6 | 	mov	ptra, fp
225a0     B3 00 A0 FD | 	call	#popregs_
225a4                 | _fatfs_cc_time_ret
225a4     2D 00 64 FD | 	ret
225a8                 | 
225a8                 | _fatfs_cc_mktime
225a8     07 4C 05 F6 | 	mov	COUNT_, #7
225ac     A9 00 A0 FD | 	call	#pushregs_
225b0     3A 8D 02 F6 | 	mov	local01, arg01
225b4     14 8C 06 F1 | 	add	local01, #20
225b8     46 75 02 FB | 	rdlong	arg01, local01
225bc     14 8C 86 F1 | 	sub	local01, #20
225c0     46 74 56 F2 | 	cmps	arg01, #70 wc
225c4                 | '                 return (time_t) -1;
225c4     01 34 66 C6 |  if_b	neg	result1, #1
225c8     70 01 90 CD |  if_b	jmp	#LR__1323
225cc     03 00 00 FF 
225d0     6C 8F 06 F6 | 	mov	local02, ##1900
225d4     14 8C 06 F1 | 	add	local01, #20
225d8     46 35 02 FB | 	rdlong	result1, local01
225dc     1A 8F 02 F1 | 	add	local02, result1
225e0     08 8C 86 F1 | 	sub	local01, #8
225e4     46 91 02 FB | 	rdlong	local03, local01
225e8     01 90 86 F1 | 	sub	local03, #1
225ec     04 8C 06 F1 | 	add	local01, #4
225f0     46 75 02 FB | 	rdlong	arg01, local01
225f4     10 8C 86 F1 | 	sub	local01, #16
225f8     02 74 66 F0 | 	shl	arg01, #2
225fc     94 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #404
22600     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22604     3A 35 02 FB | 	rdlong	result1, arg01
22608     1A 91 02 F1 | 	add	local03, result1
2260c     47 75 02 F6 | 	mov	arg01, local02
22610     94 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #404
22614     74 28 B0 FD | 	call	#_fatfs_cc__is_leap_year
22618     00 34 0E F2 | 	cmp	result1, #0 wz
2261c     1C 00 90 AD |  if_e	jmp	#LR__1319
22620     00 92 06 F6 | 	mov	local04, #0
22624     10 8C 06 F1 | 	add	local01, #16
22628     46 35 02 FB | 	rdlong	result1, local01
2262c     10 8C 86 F1 | 	sub	local01, #16
22630     02 34 56 F2 | 	cmps	result1, #2 wc
22634     01 92 06 36 |  if_ae	mov	local04, #1
22638     04 00 90 FD | 	jmp	#LR__1320
2263c                 | LR__1319
2263c     00 92 06 F6 | 	mov	local04, #0
22640                 | LR__1320
22640     04 8C 06 F1 | 	add	local01, #4
22644     46 95 02 FB | 	rdlong	local05, local01
22648     04 8C 86 F1 | 	sub	local01, #4
2264c     46 97 02 FB | 	rdlong	local06, local01
22650     08 8C 06 F1 | 	add	local01, #8
22654     46 35 02 FB | 	rdlong	result1, local01
22658     07 00 00 FF 
2265c     10 34 06 FD | 	qmul	result1, ##3600
22660     49 91 02 F1 | 	add	local03, local04
22664     4A 93 02 F6 | 	mov	local04, local05
22668     04 92 66 F0 | 	shl	local04, #4
2266c     4A 93 82 F1 | 	sub	local04, local05
22670     02 92 66 F0 | 	shl	local04, #2
22674     49 97 02 F1 | 	add	local06, local04
22678     08 8C 86 F1 | 	sub	local01, #8
2267c     18 94 62 FD | 	getqx	local05
22680     A8 00 00 FF 
22684     80 91 06 FD | 	qmul	local03, ##86400
22688     4A 97 02 F1 | 	add	local06, local05
2268c     47 91 02 F6 | 	mov	local03, local02
22690     03 00 00 FF 
22694     B2 91 86 F1 | 	sub	local03, ##1970
22698     18 94 62 FD | 	getqx	local05
2269c     99 F0 00 FF 
226a0     80 91 06 FD | 	qmul	local03, ##31536000
226a4     4A 97 02 F1 | 	add	local06, local05
226a8     47 91 02 F6 | 	mov	local03, local02
226ac     03 00 00 FF 
226b0     B1 91 86 F1 | 	sub	local03, ##1969
226b4     48 99 52 F6 | 	abs	local07, local03 wc
226b8     02 98 46 F0 | 	shr	local07, #2
226bc     4C 99 82 F6 | 	negc	local07, local07
226c0     03 00 00 FF 
226c4     D1 8F 56 F2 | 	cmps	local02, ##2001 wc
226c8     18 94 62 FD | 	getqx	local05
226cc     4A 97 02 F1 | 	add	local06, local05
226d0     1C 00 90 CD |  if_b	jmp	#LR__1321
226d4     03 00 00 FF 
226d8     D0 8F 86 F1 | 	sub	local02, ##2000
226dc     47 95 52 F6 | 	abs	local05, local02 wc
226e0     64 94 16 FD | 	qdiv	local05, #100
226e4     18 94 62 FD | 	getqx	local05
226e8     4A 95 82 F6 | 	negc	local05, local05
226ec     4A 99 82 F1 | 	sub	local07, local05
226f0                 | LR__1321
226f0     A8 00 00 FF 
226f4     80 99 06 FD | 	qmul	local07, ##86400
226f8     18 98 62 FD | 	getqx	local07
226fc     4C 97 02 F1 | 	add	local06, local07
22700     D4 01 B0 FD | 	call	#_fatfs_cc__tzset
22704     60 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #352
22708     F0 98 02 FB | 	rdlong	local07, ptr__fatfs_cc_dat__
2270c     4C 97 02 F1 | 	add	local06, local07
22710     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22714     F0 74 02 FB | 	rdlong	arg01, ptr__fatfs_cc_dat__
22718     C8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #456
2271c     01 74 0E F2 | 	cmp	arg01, #1 wz
22720     14 00 90 5D |  if_ne	jmp	#LR__1322
22724     46 75 02 F6 | 	mov	arg01, local01
22728     60 2A B0 FD | 	call	#_fatfs_cc___indst
2272c     00 34 4E F2 | 	cmps	result1, #0 wz
22730     07 00 00 5F 
22734     10 96 86 51 |  if_ne	sub	local06, ##3600
22738                 | LR__1322
22738                 | '                 s -=  (3600L) ;
22738                 | ' 
22738                 | '         return s;
22738     4B 35 02 F6 | 	mov	result1, local06
2273c                 | LR__1323
2273c     A8 F0 03 F6 | 	mov	ptra, fp
22740     B3 00 A0 FD | 	call	#popregs_
22744                 | _fatfs_cc_mktime_ret
22744     2D 00 64 FD | 	ret
22748                 | 
22748                 | _fatfs_cc__gmtime_r
22748     03 4C 05 F6 | 	mov	COUNT_, #3
2274c     A9 00 A0 FD | 	call	#pushregs_
22750     3A 8D 02 FB | 	rdlong	local01, arg01
22754     A8 00 00 FF 
22758     80 8D 16 FD | 	qdiv	local01, ##86400
2275c     18 34 62 FD | 	getqx	result1
22760     04 34 06 F1 | 	add	result1, #4
22764     07 34 16 FD | 	qdiv	result1, #7
22768     18 76 06 F1 | 	add	arg02, #24
2276c     D1 7F 27 FF 
22770     00 8C 16 F2 | 	cmp	local01, ##1325376000 wc
22774     D1 7F 27 3F 
22778     00 8C 86 31 |  if_ae	sub	local01, ##1325376000
2277c     03 00 00 3F 
22780     DC 8F 06 36 |  if_ae	mov	local02, ##2012
22784     03 00 00 CF 
22788     B2 8F 06 C6 |  if_b	mov	local02, ##1970
2278c                 | ' 	  year = 1970;
2278c                 | ' 	}
2278c                 | ' 
2278c                 | ' 	for(;;) {
2278c     19 34 62 FD | 	getqy	result1
22790     3B 35 62 FC | 	wrlong	result1, arg02
22794     18 76 86 F1 | 	sub	arg02, #24
22798                 | LR__1324
22798     47 75 02 F6 | 	mov	arg01, local02
2279c     EC 26 B0 FD | 	call	#_fatfs_cc__is_leap_year
227a0     00 34 0E F2 | 	cmp	result1, #0 wz
227a4     42 F1 00 5F 
227a8     00 91 06 56 |  if_ne	mov	local03, ##31622400
227ac     99 F0 00 AF 
227b0     80 91 06 A6 |  if_e	mov	local03, ##31536000
227b4     48 8D 12 F2 | 	cmp	local01, local03 wc
227b8                 | ' 	    break;
227b8     01 8E 06 31 |  if_ae	add	local02, #1
227bc     48 8D 82 31 |  if_ae	sub	local01, local03
227c0     D4 FF 9F 3D |  if_ae	jmp	#LR__1324
227c4     A8 00 00 FF 
227c8     80 8D 16 FD | 	qdiv	local01, ##86400
227cc     47 91 02 F6 | 	mov	local03, local02
227d0     03 00 00 FF 
227d4     6C 91 86 F1 | 	sub	local03, ##1900
227d8     14 76 06 F1 | 	add	arg02, #20
227dc     3B 91 62 FC | 	wrlong	local03, arg02
227e0     08 76 06 F1 | 	add	arg02, #8
227e4     47 75 02 F6 | 	mov	arg01, local02
227e8     18 8E 62 FD | 	getqx	local02
227ec     3B 8F 62 FC | 	wrlong	local02, arg02
227f0     1C 76 86 F1 | 	sub	arg02, #28
227f4     94 26 B0 FD | 	call	#_fatfs_cc__is_leap_year
227f8     00 34 0E F2 | 	cmp	result1, #0 wz
227fc     1D 90 06 56 |  if_ne	mov	local03, #29
22800     1C 90 06 A6 |  if_e	mov	local03, #28
22804     68 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #360
22808     F0 90 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2280c     68 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #360
22810                 | ' 
22810                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22810                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22810     00 74 06 F6 | 	mov	arg01, #0
22814     2C D8 9D FE | 	loc	pa,	#(@LR__1326-@LR__1325)
22818     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2281c                 | LR__1325
2281c     3A 91 02 F6 | 	mov	local03, arg01
22820     02 90 66 F0 | 	shl	local03, #2
22824     64 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #356
22828     F0 90 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2282c     48 91 02 FB | 	rdlong	local03, local03
22830     48 8F 52 F2 | 	cmps	local02, local03 wc
22834     64 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #356
22838     24 00 90 CD |  if_b	jmp	#LR__1327
2283c     3A 91 02 F6 | 	mov	local03, arg01
22840     02 90 66 F0 | 	shl	local03, #2
22844     64 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #356
22848     F0 90 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2284c     48 91 02 FB | 	rdlong	local03, local03
22850     48 8F 82 F1 | 	sub	local02, local03
22854     01 74 06 F1 | 	add	arg01, #1
22858     64 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #356
2285c     BC FF 9F FD | 	jmp	#LR__1325
22860                 | LR__1326
22860                 | LR__1327
22860     A8 00 00 FF 
22864     80 8D 16 FD | 	qdiv	local01, ##86400
22868     10 76 06 F1 | 	add	arg02, #16
2286c     3B 75 62 FC | 	wrlong	arg01, arg02
22870     01 8E 06 F1 | 	add	local02, #1
22874     04 76 86 F1 | 	sub	arg02, #4
22878     3B 8F 62 FC | 	wrlong	local02, arg02
2287c     19 8C 62 FD | 	getqy	local01
22880     07 00 00 FF 
22884     10 8C 16 FD | 	qdiv	local01, ##3600
22888     18 90 62 FD | 	getqx	local03
2288c     07 00 00 FF 
22890     10 8C 16 FD | 	qdiv	local01, ##3600
22894     04 76 86 F1 | 	sub	arg02, #4
22898     3B 91 62 FC | 	wrlong	local03, arg02
2289c     19 8C 62 FD | 	getqy	local01
228a0     3C 8C 16 FD | 	qdiv	local01, #60
228a4     18 90 62 FD | 	getqx	local03
228a8     3C 8C 16 FD | 	qdiv	local01, #60
228ac     04 76 86 F1 | 	sub	arg02, #4
228b0     3B 91 62 FC | 	wrlong	local03, arg02
228b4     04 76 86 F1 | 	sub	arg02, #4
228b8                 | '         stm->tm_isdst = 0;
228b8                 | ' 
228b8                 | ' ;
228b8                 | '         return stm;
228b8     3B 35 02 F6 | 	mov	result1, arg02
228bc     19 90 62 FD | 	getqy	local03
228c0     3B 91 62 FC | 	wrlong	local03, arg02
228c4     20 76 06 F1 | 	add	arg02, #32
228c8     3B 01 68 FC | 	wrlong	#0, arg02
228cc     A8 F0 03 F6 | 	mov	ptra, fp
228d0     B3 00 A0 FD | 	call	#popregs_
228d4                 | _fatfs_cc__gmtime_r_ret
228d4     2D 00 64 FD | 	ret
228d8                 | 
228d8                 | _fatfs_cc__tzset
228d8     58 01 00 FF 
228dc     74 75 06 F6 | 	mov	arg01, ##@LR__2324
228e0     1C 10 B0 FD | 	call	#_fatfs_cc_getenv
228e4     1A 75 02 F6 | 	mov	arg01, result1
228e8     C8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #456
228ec     F0 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
228f0     C8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #456
228f4     E4 25 B0 FD | 	call	#_fatfs_cc___tzoffset
228f8     60 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #352
228fc     F0 34 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
22900     60 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #352
22904                 | _fatfs_cc__tzset_ret
22904     2D 00 64 FD | 	ret
22908                 | 
22908                 | _fatfs_cc_opendir
22908     06 4C 05 F6 | 	mov	COUNT_, #6
2290c     A9 00 A0 FD | 	call	#pushregs_
22910     3A 77 02 F6 | 	mov	arg02, arg01
22914     7C A3 05 F1 | 	add	ptr___system__dat__, #380
22918     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
2291c     46 75 02 F6 | 	mov	arg01, local01
22920     00 78 06 F6 | 	mov	arg03, #0
22924     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
22928     28 35 B0 FD | 	call	#__system____getvfsforfile
2292c     1A 8F 0A F6 | 	mov	local02, result1 wz
22930     28 8E 06 51 |  if_ne	add	local02, #40
22934     47 75 02 5B |  if_ne	rdlong	arg01, local02
22938     28 8E 86 51 |  if_ne	sub	local02, #40
2293c     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
22940     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22944     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
22948     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
2294c                 | ' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
2294c                 | '         _seterror( 16 );
2294c                 | '         return 0;
2294c     00 34 06 A6 |  if_e	mov	result1, #0
22950     80 00 90 AD |  if_e	jmp	#LR__1329
22954     5C 74 06 F6 | 	mov	arg01, #92
22958                 | '     return _gc_alloc(size);
22958     10 76 06 F6 | 	mov	arg02, #16
2295c     EC 5E B0 FD | 	call	#__system___gc_doalloc
22960     1A 91 0A F6 | 	mov	local03, result1 wz
22964     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22968     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2296c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22970                 | ' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
22970                 | '         _seterror( 7 );
22970                 | '         return 0;
22970     00 34 06 A6 |  if_e	mov	result1, #0
22974     5C 00 90 AD |  if_e	jmp	#LR__1329
22978     28 8E 06 F1 | 	add	local02, #40
2297c     47 77 02 FB | 	rdlong	arg02, local02
22980     28 8E 86 F1 | 	sub	local02, #40
22984     3B 93 02 FB | 	rdlong	local04, arg02
22988     04 76 06 F1 | 	add	arg02, #4
2298c     3B 95 02 FB | 	rdlong	local05, arg02
22990     48 75 02 F6 | 	mov	arg01, local03
22994     46 77 02 F6 | 	mov	arg02, local01
22998     C9 96 02 F6 | 	mov	local06, objptr
2299c     49 93 01 F6 | 	mov	objptr, local04
229a0     2D 94 62 FD | 	call	local05
229a4     4B 93 01 F6 | 	mov	objptr, local06
229a8     1A 75 0A F6 | 	mov	arg01, result1 wz
229ac     1C 00 90 AD |  if_e	jmp	#LR__1328
229b0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
229b4     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
229b8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
229bc     48 75 02 F6 | 	mov	arg01, local03
229c0                 | '     return _gc_free(ptr);
229c0     B8 5F B0 FD | 	call	#__system___gc_free
229c4                 | ' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
229c4                 | '         _seterror(r);
229c4                 | '         free(dir);
229c4                 | '         return 0;
229c4     00 34 06 F6 | 	mov	result1, #0
229c8     08 00 90 FD | 	jmp	#LR__1329
229cc                 | LR__1328
229cc     48 8F 62 FC | 	wrlong	local02, local03
229d0                 | '     }
229d0                 | '     dir->vfs = v;
229d0                 | '     return dir;
229d0     48 35 02 F6 | 	mov	result1, local03
229d4                 | LR__1329
229d4     A8 F0 03 F6 | 	mov	ptra, fp
229d8     B3 00 A0 FD | 	call	#popregs_
229dc                 | _fatfs_cc_opendir_ret
229dc     2D 00 64 FD | 	ret
229e0                 | 
229e0                 | _fatfs_cc_closedir
229e0     04 4C 05 F6 | 	mov	COUNT_, #4
229e4     A9 00 A0 FD | 	call	#pushregs_
229e8     3A 8D 02 F6 | 	mov	local01, arg01
229ec     46 75 02 FB | 	rdlong	arg01, local01
229f0     2C 74 06 F1 | 	add	arg01, #44
229f4     3A 75 02 FB | 	rdlong	arg01, arg01
229f8     3A 8F 02 FB | 	rdlong	local02, arg01
229fc     04 74 06 F1 | 	add	arg01, #4
22a00     3A 91 02 FB | 	rdlong	local03, arg01
22a04     46 75 02 F6 | 	mov	arg01, local01
22a08     C9 92 02 F6 | 	mov	local04, objptr
22a0c     47 93 01 F6 | 	mov	objptr, local02
22a10     2D 90 62 FD | 	call	local03
22a14     49 93 01 F6 | 	mov	objptr, local04
22a18     1A 93 02 F6 | 	mov	local04, result1
22a1c     46 75 02 F6 | 	mov	arg01, local01
22a20                 | '     return _gc_free(ptr);
22a20     58 5F B0 FD | 	call	#__system___gc_free
22a24                 | '     r = v->closedir(dir);
22a24                 | '     free(dir);
22a24                 | '     return _seterror(r);
22a24     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22a28     D1 92 62 FC | 	wrlong	local04, ptr___system__dat__
22a2c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22a30     00 92 0E F2 | 	cmp	local04, #0 wz
22a34     01 34 66 56 |  if_ne	neg	result1, #1
22a38     00 34 06 A6 |  if_e	mov	result1, #0
22a3c     A8 F0 03 F6 | 	mov	ptra, fp
22a40     B3 00 A0 FD | 	call	#popregs_
22a44                 | _fatfs_cc_closedir_ret
22a44     2D 00 64 FD | 	ret
22a48                 | 
22a48                 | _fatfs_cc_readdir
22a48     04 4C 05 F6 | 	mov	COUNT_, #4
22a4c     A9 00 A0 FD | 	call	#pushregs_
22a50     3A 77 0A FB | 	rdlong	arg02, arg01 wz
22a54     08 74 06 F1 | 	add	arg01, #8
22a58     3A 8D 02 F6 | 	mov	local01, arg01
22a5c                 | '         return 0;
22a5c     08 74 86 F1 | 	sub	arg01, #8
22a60     00 34 06 A6 |  if_e	mov	result1, #0
22a64     4C 00 90 AD |  if_e	jmp	#LR__1331
22a68     30 76 06 F1 | 	add	arg02, #48
22a6c     3B 77 02 FB | 	rdlong	arg02, arg02
22a70     3B 8F 02 FB | 	rdlong	local02, arg02
22a74     04 76 06 F1 | 	add	arg02, #4
22a78     3B 91 02 FB | 	rdlong	local03, arg02
22a7c     46 77 02 F6 | 	mov	arg02, local01
22a80     C9 92 02 F6 | 	mov	local04, objptr
22a84     47 93 01 F6 | 	mov	objptr, local02
22a88     2D 90 62 FD | 	call	local03
22a8c     49 93 01 F6 | 	mov	objptr, local04
22a90     00 34 4E F2 | 	cmps	result1, #0 wz
22a94     18 00 90 AD |  if_e	jmp	#LR__1330
22a98     01 34 56 F2 | 	cmps	result1, #1 wc
22a9c     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22aa0     D1 34 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
22aa4     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22aa8                 | '             _seterror(r);
22aa8                 | '         }
22aa8                 | '         return 0;
22aa8     00 34 06 F6 | 	mov	result1, #0
22aac     04 00 90 FD | 	jmp	#LR__1331
22ab0                 | LR__1330
22ab0                 | '     }
22ab0                 | '     return D;
22ab0     46 35 02 F6 | 	mov	result1, local01
22ab4                 | LR__1331
22ab4     A8 F0 03 F6 | 	mov	ptra, fp
22ab8     B3 00 A0 FD | 	call	#popregs_
22abc                 | _fatfs_cc_readdir_ret
22abc     2D 00 64 FD | 	ret
22ac0                 | 
22ac0                 | _fatfs_cc__openraw
22ac0     0C 4C 05 F6 | 	mov	COUNT_, #12
22ac4     A9 00 A0 FD | 	call	#pushregs_
22ac8     34 F0 07 F1 | 	add	ptra, #52
22acc     04 50 05 F1 | 	add	fp, #4
22ad0     A8 74 62 FC | 	wrlong	arg01, fp
22ad4     04 50 05 F1 | 	add	fp, #4
22ad8     A8 76 62 FC | 	wrlong	arg02, fp
22adc     04 50 05 F1 | 	add	fp, #4
22ae0     A8 78 62 FC | 	wrlong	arg03, fp
22ae4     04 50 05 F1 | 	add	fp, #4
22ae8     A8 7A 62 FC | 	wrlong	arg04, fp
22aec     0C 50 05 F1 | 	add	fp, #12
22af0     A8 08 68 FC | 	wrlong	#4, fp
22af4     18 50 85 F1 | 	sub	fp, #24
22af8     A8 78 02 FB | 	rdlong	arg03, fp
22afc     1C 50 05 F1 | 	add	fp, #28
22b00     A8 78 62 FC | 	wrlong	arg03, fp
22b04     7C A3 05 F1 | 	add	ptr___system__dat__, #380
22b08     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
22b0c     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
22b10     04 50 05 F1 | 	add	fp, #4
22b14     A8 74 62 FC | 	wrlong	arg01, fp
22b18     1C 50 85 F1 | 	sub	fp, #28
22b1c     A8 76 02 FB | 	rdlong	arg02, fp
22b20     08 50 85 F1 | 	sub	fp, #8
22b24     00 78 06 F6 | 	mov	arg03, #0
22b28     28 33 B0 FD | 	call	#__system____getvfsforfile
22b2c     18 50 05 F1 | 	add	fp, #24
22b30     A8 34 62 FC | 	wrlong	result1, fp
22b34     00 34 4E F2 | 	cmps	result1, #0 wz
22b38     18 50 85 F1 | 	sub	fp, #24
22b3c     18 00 90 AD |  if_e	jmp	#LR__1332
22b40     18 50 05 F1 | 	add	fp, #24
22b44     A8 34 02 FB | 	rdlong	result1, fp
22b48     18 50 85 F1 | 	sub	fp, #24
22b4c     20 34 06 F1 | 	add	result1, #32
22b50     1A 35 0A FB | 	rdlong	result1, result1 wz
22b54     14 00 90 5D |  if_ne	jmp	#LR__1333
22b58                 | LR__1332
22b58                 | ' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
22b58                 | '         return _seterror( 16 );
22b58     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22b5c     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
22b60     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22b64     01 34 66 F6 | 	neg	result1, #1
22b68     74 04 90 FD | 	jmp	#LR__1348
22b6c                 | LR__1333
22b6c     20 50 05 F1 | 	add	fp, #32
22b70     A8 74 02 FB | 	rdlong	arg01, fp
22b74     20 50 85 F1 | 	sub	fp, #32
22b78     00 76 06 F6 | 	mov	arg02, #0
22b7c     30 78 06 F6 | 	mov	arg03, #48
22b80     3A 8D 02 F6 | 	mov	local01, arg01
22b84     99 00 A0 FD | 	call	#\builtin_bytefill_
22b88     18 50 05 F1 | 	add	fp, #24
22b8c     A8 8E 02 FB | 	rdlong	local02, fp
22b90     47 91 02 F6 | 	mov	local03, local02
22b94     20 90 06 F1 | 	add	local03, #32
22b98     48 93 02 FB | 	rdlong	local04, local03
22b9c     49 79 02 F6 | 	mov	arg03, local04
22ba0     3C 95 02 FB | 	rdlong	local05, arg03
22ba4     04 78 06 F1 | 	add	arg03, #4
22ba8     3C 97 02 FB | 	rdlong	local06, arg03
22bac     4B 99 02 F6 | 	mov	local07, local06
22bb0     08 50 05 F1 | 	add	fp, #8
22bb4     A8 9A 02 FB | 	rdlong	local08, fp
22bb8     04 50 05 F1 | 	add	fp, #4
22bbc     A8 9C 02 FB | 	rdlong	local09, fp
22bc0     18 50 85 F1 | 	sub	fp, #24
22bc4     A8 9E 02 FB | 	rdlong	local10, fp
22bc8     0C 50 85 F1 | 	sub	fp, #12
22bcc     4D 75 02 F6 | 	mov	arg01, local08
22bd0     4E 77 02 F6 | 	mov	arg02, local09
22bd4     4F 79 02 F6 | 	mov	arg03, local10
22bd8     C9 A0 02 F6 | 	mov	local11, objptr
22bdc     4A 93 01 F6 | 	mov	objptr, local05
22be0     2D 98 62 FD | 	call	local07
22be4     50 93 01 F6 | 	mov	objptr, local11
22be8     14 50 05 F1 | 	add	fp, #20
22bec     A8 34 62 FC | 	wrlong	result1, fp
22bf0     14 50 85 F1 | 	sub	fp, #20
22bf4     00 34 0E F2 | 	cmp	result1, #0 wz
22bf8     88 00 90 AD |  if_e	jmp	#LR__1334
22bfc     0C 50 05 F1 | 	add	fp, #12
22c00     A8 98 02 FB | 	rdlong	local07, fp
22c04     0C 50 85 F1 | 	sub	fp, #12
22c08     04 98 CE F7 | 	test	local07, #4 wz
22c0c     74 00 90 AD |  if_e	jmp	#LR__1334
22c10     18 50 05 F1 | 	add	fp, #24
22c14     A8 8E 02 FB | 	rdlong	local02, fp
22c18     47 91 02 F6 | 	mov	local03, local02
22c1c     24 90 06 F1 | 	add	local03, #36
22c20     48 93 02 FB | 	rdlong	local04, local03
22c24     24 90 86 F1 | 	sub	local03, #36
22c28     49 A1 02 F6 | 	mov	local11, local04
22c2c     50 95 02 FB | 	rdlong	local05, local11
22c30     04 A0 06 F1 | 	add	local11, #4
22c34     50 97 02 FB | 	rdlong	local06, local11
22c38     4B 99 02 F6 | 	mov	local07, local06
22c3c     08 50 05 F1 | 	add	fp, #8
22c40     A8 9A 02 FB | 	rdlong	local08, fp
22c44     04 50 05 F1 | 	add	fp, #4
22c48     A8 9C 02 FB | 	rdlong	local09, fp
22c4c     14 50 85 F1 | 	sub	fp, #20
22c50     A8 9E 02 FB | 	rdlong	local10, fp
22c54     10 50 85 F1 | 	sub	fp, #16
22c58     4D 75 02 F6 | 	mov	arg01, local08
22c5c     4E 77 02 F6 | 	mov	arg02, local09
22c60     4F 79 02 F6 | 	mov	arg03, local10
22c64     C9 A0 02 F6 | 	mov	local11, objptr
22c68     4A 93 01 F6 | 	mov	objptr, local05
22c6c     2D 98 62 FD | 	call	local07
22c70     50 93 01 F6 | 	mov	objptr, local11
22c74     1A A3 02 F6 | 	mov	local12, result1
22c78     14 50 05 F1 | 	add	fp, #20
22c7c     A8 A2 62 FC | 	wrlong	local12, fp
22c80     14 50 85 F1 | 	sub	fp, #20
22c84                 | LR__1334
22c84     14 50 05 F1 | 	add	fp, #20
22c88     A8 A2 0A FB | 	rdlong	local12, fp wz
22c8c     14 50 85 F1 | 	sub	fp, #20
22c90     2C 03 90 5D |  if_ne	jmp	#LR__1347
22c94     0C 50 05 F1 | 	add	fp, #12
22c98     A8 A2 02 FB | 	rdlong	local12, fp
22c9c     03 A2 0E F5 | 	and	local12, #3 wz
22ca0     1C 50 05 F1 | 	add	fp, #28
22ca4     A8 A2 62 FC | 	wrlong	local12, fp
22ca8     28 50 85 F1 | 	sub	fp, #40
22cac     1C 50 05 51 |  if_ne	add	fp, #28
22cb0     A8 A2 02 5B |  if_ne	rdlong	local12, fp
22cb4     02 A2 46 55 |  if_ne	or	local12, #2
22cb8     A8 A2 62 5C |  if_ne	wrlong	local12, fp
22cbc     1C 50 85 51 |  if_ne	sub	fp, #28
22cc0     28 50 05 F1 | 	add	fp, #40
22cc4     A8 A2 02 FB | 	rdlong	local12, fp
22cc8     28 50 85 F1 | 	sub	fp, #40
22ccc     01 A2 0E F2 | 	cmp	local12, #1 wz
22cd0     1C 50 05 51 |  if_ne	add	fp, #28
22cd4     A8 A2 02 5B |  if_ne	rdlong	local12, fp
22cd8     01 A2 46 55 |  if_ne	or	local12, #1
22cdc     A8 A2 62 5C |  if_ne	wrlong	local12, fp
22ce0     1C 50 85 51 |  if_ne	sub	fp, #28
22ce4     0C 50 05 F1 | 	add	fp, #12
22ce8     A8 A2 02 FB | 	rdlong	local12, fp
22cec     0C 50 85 F1 | 	sub	fp, #12
22cf0     20 A2 CE F7 | 	test	local12, #32 wz
22cf4     1C 50 05 51 |  if_ne	add	fp, #28
22cf8     A8 A2 02 5B |  if_ne	rdlong	local12, fp
22cfc     C0 A2 46 55 |  if_ne	or	local12, #192
22d00     A8 A2 62 5C |  if_ne	wrlong	local12, fp
22d04     1C 50 85 51 |  if_ne	sub	fp, #28
22d08     20 50 05 F1 | 	add	fp, #32
22d0c     A8 A2 02 FB | 	rdlong	local12, fp
22d10     04 50 85 F1 | 	sub	fp, #4
22d14     A8 98 02 FB | 	rdlong	local07, fp
22d18     08 A2 06 F1 | 	add	local12, #8
22d1c     51 99 62 FC | 	wrlong	local07, local12
22d20     04 50 05 F1 | 	add	fp, #4
22d24     A8 A2 02 FB | 	rdlong	local12, fp
22d28     20 50 85 F1 | 	sub	fp, #32
22d2c     10 A2 06 F1 | 	add	local12, #16
22d30     51 99 0A FB | 	rdlong	local07, local12 wz
22d34     24 00 90 5D |  if_ne	jmp	#LR__1335
22d38     20 50 05 F1 | 	add	fp, #32
22d3c     A8 A2 02 FB | 	rdlong	local12, fp
22d40     08 50 85 F1 | 	sub	fp, #8
22d44     A8 98 02 FB | 	rdlong	local07, fp
22d48     18 50 85 F1 | 	sub	fp, #24
22d4c     04 98 06 F1 | 	add	local07, #4
22d50     4C 8F 02 FB | 	rdlong	local02, local07
22d54     10 A2 06 F1 | 	add	local12, #16
22d58     51 8F 62 FC | 	wrlong	local02, local12
22d5c                 | LR__1335
22d5c     20 50 05 F1 | 	add	fp, #32
22d60     A8 A2 02 FB | 	rdlong	local12, fp
22d64     20 50 85 F1 | 	sub	fp, #32
22d68     14 A2 06 F1 | 	add	local12, #20
22d6c     51 99 0A FB | 	rdlong	local07, local12 wz
22d70     24 00 90 5D |  if_ne	jmp	#LR__1336
22d74     20 50 05 F1 | 	add	fp, #32
22d78     A8 A2 02 FB | 	rdlong	local12, fp
22d7c     08 50 85 F1 | 	sub	fp, #8
22d80     A8 98 02 FB | 	rdlong	local07, fp
22d84     18 50 85 F1 | 	sub	fp, #24
22d88     08 98 06 F1 | 	add	local07, #8
22d8c     4C 8F 02 FB | 	rdlong	local02, local07
22d90     14 A2 06 F1 | 	add	local12, #20
22d94     51 8F 62 FC | 	wrlong	local02, local12
22d98                 | LR__1336
22d98     20 50 05 F1 | 	add	fp, #32
22d9c     A8 A2 02 FB | 	rdlong	local12, fp
22da0     20 50 85 F1 | 	sub	fp, #32
22da4     20 A2 06 F1 | 	add	local12, #32
22da8     51 99 0A FB | 	rdlong	local07, local12 wz
22dac     20 00 90 5D |  if_ne	jmp	#LR__1337
22db0     20 50 05 F1 | 	add	fp, #32
22db4     A8 A2 02 FB | 	rdlong	local12, fp
22db8     08 50 85 F1 | 	sub	fp, #8
22dbc     A8 98 02 FB | 	rdlong	local07, fp
22dc0     18 50 85 F1 | 	sub	fp, #24
22dc4     4C 8F 02 FB | 	rdlong	local02, local07
22dc8     20 A2 06 F1 | 	add	local12, #32
22dcc     51 8F 62 FC | 	wrlong	local02, local12
22dd0                 | LR__1337
22dd0     20 50 05 F1 | 	add	fp, #32
22dd4     A8 A2 02 FB | 	rdlong	local12, fp
22dd8     20 50 85 F1 | 	sub	fp, #32
22ddc     24 A2 06 F1 | 	add	local12, #36
22de0     51 99 0A FB | 	rdlong	local07, local12 wz
22de4     24 00 90 5D |  if_ne	jmp	#LR__1338
22de8     20 50 05 F1 | 	add	fp, #32
22dec     A8 A2 02 FB | 	rdlong	local12, fp
22df0     08 50 85 F1 | 	sub	fp, #8
22df4     A8 98 02 FB | 	rdlong	local07, fp
22df8     18 50 85 F1 | 	sub	fp, #24
22dfc     10 98 06 F1 | 	add	local07, #16
22e00     4C 8F 02 FB | 	rdlong	local02, local07
22e04     24 A2 06 F1 | 	add	local12, #36
22e08     51 8F 62 FC | 	wrlong	local02, local12
22e0c                 | LR__1338
22e0c     20 50 05 F1 | 	add	fp, #32
22e10     A8 A2 02 FB | 	rdlong	local12, fp
22e14     20 50 85 F1 | 	sub	fp, #32
22e18     2C A2 06 F1 | 	add	local12, #44
22e1c     51 99 0A FB | 	rdlong	local07, local12 wz
22e20     24 00 90 5D |  if_ne	jmp	#LR__1339
22e24     20 50 05 F1 | 	add	fp, #32
22e28     A8 A2 02 FB | 	rdlong	local12, fp
22e2c     08 50 85 F1 | 	sub	fp, #8
22e30     A8 98 02 FB | 	rdlong	local07, fp
22e34     18 50 85 F1 | 	sub	fp, #24
22e38     0C 98 06 F1 | 	add	local07, #12
22e3c     4C 8F 02 FB | 	rdlong	local02, local07
22e40     2C A2 06 F1 | 	add	local12, #44
22e44     51 8F 62 FC | 	wrlong	local02, local12
22e48                 | LR__1339
22e48     20 50 05 F1 | 	add	fp, #32
22e4c     A8 A2 02 FB | 	rdlong	local12, fp
22e50     20 50 85 F1 | 	sub	fp, #32
22e54     18 A2 06 F1 | 	add	local12, #24
22e58     51 99 0A FB | 	rdlong	local07, local12 wz
22e5c     B0 00 90 5D |  if_ne	jmp	#LR__1342
22e60     20 50 05 F1 | 	add	fp, #32
22e64     A8 74 02 FB | 	rdlong	arg01, fp
22e68     3A 91 02 F6 | 	mov	local03, arg01
22e6c     24 90 06 F1 | 	add	local03, #36
22e70     48 A3 02 FB | 	rdlong	local12, local03
22e74     51 95 02 FB | 	rdlong	local05, local12
22e78     04 A2 06 F1 | 	add	local12, #4
22e7c     51 99 02 FB | 	rdlong	local07, local12
22e80     10 50 05 F1 | 	add	fp, #16
22e84     A8 78 02 F6 | 	mov	arg03, fp
22e88     30 50 85 F1 | 	sub	fp, #48
22e8c     00 77 06 F6 | 	mov	arg02, #256
22e90     C9 A0 02 F6 | 	mov	local11, objptr
22e94     4A 93 01 F6 | 	mov	objptr, local05
22e98     2D 98 62 FD | 	call	local07
22e9c     50 93 01 F6 | 	mov	objptr, local11
22ea0     2C 50 05 F1 | 	add	fp, #44
22ea4     A8 34 62 FC | 	wrlong	result1, fp
22ea8     2C 50 85 F1 | 	sub	fp, #44
22eac     00 34 0E F2 | 	cmp	result1, #0 wz
22eb0     3C 00 90 5D |  if_ne	jmp	#LR__1340
22eb4     30 50 05 F1 | 	add	fp, #48
22eb8     A8 98 02 FB | 	rdlong	local07, fp
22ebc     30 50 85 F1 | 	sub	fp, #48
22ec0     02 98 CE F7 | 	test	local07, #2 wz
22ec4     28 00 90 AD |  if_e	jmp	#LR__1340
22ec8     20 50 05 F1 | 	add	fp, #32
22ecc     A8 A2 02 FB | 	rdlong	local12, fp
22ed0     20 50 85 F1 | 	sub	fp, #32
22ed4     C9 74 02 F6 | 	mov	arg01, objptr
22ed8     EF 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_putc_terminal_
22edc     58 2D B0 FD | 	call	#__system___make_methodptr
22ee0     1A 99 02 F6 | 	mov	local07, result1
22ee4     18 A2 06 F1 | 	add	local12, #24
22ee8     51 99 62 FC | 	wrlong	local07, local12
22eec     20 00 90 FD | 	jmp	#LR__1341
22ef0                 | LR__1340
22ef0     20 50 05 F1 | 	add	fp, #32
22ef4     A8 A2 02 FB | 	rdlong	local12, fp
22ef8     20 50 85 F1 | 	sub	fp, #32
22efc     C9 74 02 F6 | 	mov	arg01, objptr
22f00     EE 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_putc_
22f04     30 2D B0 FD | 	call	#__system___make_methodptr
22f08     18 A2 06 F1 | 	add	local12, #24
22f0c     51 35 62 FC | 	wrlong	result1, local12
22f10                 | LR__1341
22f10                 | LR__1342
22f10     20 50 05 F1 | 	add	fp, #32
22f14     A8 A2 02 FB | 	rdlong	local12, fp
22f18     20 50 85 F1 | 	sub	fp, #32
22f1c     1C A2 06 F1 | 	add	local12, #28
22f20     51 99 0A FB | 	rdlong	local07, local12 wz
22f24     20 00 90 5D |  if_ne	jmp	#LR__1343
22f28     20 50 05 F1 | 	add	fp, #32
22f2c     A8 A2 02 FB | 	rdlong	local12, fp
22f30     20 50 85 F1 | 	sub	fp, #32
22f34     C9 74 02 F6 | 	mov	arg01, objptr
22f38     ED 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_getc_
22f3c     F8 2C B0 FD | 	call	#__system___make_methodptr
22f40     1C A2 06 F1 | 	add	local12, #28
22f44     51 35 62 FC | 	wrlong	result1, local12
22f48                 | LR__1343
22f48     20 50 05 F1 | 	add	fp, #32
22f4c     A8 A2 02 FB | 	rdlong	local12, fp
22f50     20 50 85 F1 | 	sub	fp, #32
22f54     28 A2 06 F1 | 	add	local12, #40
22f58     51 99 0A FB | 	rdlong	local07, local12 wz
22f5c     60 00 90 5D |  if_ne	jmp	#LR__1346
22f60     18 50 05 F1 | 	add	fp, #24
22f64     A8 A2 02 FB | 	rdlong	local12, fp
22f68     18 50 85 F1 | 	sub	fp, #24
22f6c     14 A2 06 F1 | 	add	local12, #20
22f70     51 99 0A FB | 	rdlong	local07, local12 wz
22f74     28 00 90 AD |  if_e	jmp	#LR__1344
22f78     20 50 05 F1 | 	add	fp, #32
22f7c     A8 A2 02 FB | 	rdlong	local12, fp
22f80     08 50 85 F1 | 	sub	fp, #8
22f84     A8 98 02 FB | 	rdlong	local07, fp
22f88     18 50 85 F1 | 	sub	fp, #24
22f8c     14 98 06 F1 | 	add	local07, #20
22f90     4C 8F 02 FB | 	rdlong	local02, local07
22f94     28 A2 06 F1 | 	add	local12, #40
22f98     51 8F 62 FC | 	wrlong	local02, local12
22f9c     20 00 90 FD | 	jmp	#LR__1345
22fa0                 | LR__1344
22fa0     20 50 05 F1 | 	add	fp, #32
22fa4     A8 A2 02 FB | 	rdlong	local12, fp
22fa8     20 50 85 F1 | 	sub	fp, #32
22fac     C9 74 02 F6 | 	mov	arg01, objptr
22fb0     EC 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_flush_
22fb4     80 2C B0 FD | 	call	#__system___make_methodptr
22fb8     28 A2 06 F1 | 	add	local12, #40
22fbc     51 35 62 FC | 	wrlong	result1, local12
22fc0                 | LR__1345
22fc0                 | LR__1346
22fc0                 | LR__1347
22fc0     14 50 05 F1 | 	add	fp, #20
22fc4     A8 A2 0A FB | 	rdlong	local12, fp wz
22fc8     00 74 06 A6 |  if_e	mov	arg01, #0
22fcc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22fd0     D1 74 62 AC |  if_e	wrlong	arg01, ptr___system__dat__
22fd4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22fd8                 | '     return r;
22fd8     A8 34 02 FB | 	rdlong	result1, fp
22fdc     14 50 85 F1 | 	sub	fp, #20
22fe0                 | LR__1348
22fe0     A8 F0 03 F6 | 	mov	ptra, fp
22fe4     B3 00 A0 FD | 	call	#popregs_
22fe8                 | _fatfs_cc__openraw_ret
22fe8     2D 00 64 FD | 	ret
22fec                 | 
22fec                 | _fatfs_cc__closeraw
22fec     05 4C 05 F6 | 	mov	COUNT_, #5
22ff0     A9 00 A0 FD | 	call	#pushregs_
22ff4     3A 8D 02 F6 | 	mov	local01, arg01
22ff8     00 8E 06 F6 | 	mov	local02, #0
22ffc     08 8C 06 F1 | 	add	local01, #8
23000     46 35 0A FB | 	rdlong	result1, local01 wz
23004     08 8C 86 F1 | 	sub	local01, #8
23008                 | '         return _seterror( 5 );
23008     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
2300c     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23010     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23014     01 34 66 A6 |  if_e	neg	result1, #1
23018     90 00 90 AD |  if_e	jmp	#LR__1351
2301c     28 8C 06 F1 | 	add	local01, #40
23020     46 35 0A FB | 	rdlong	result1, local01 wz
23024     28 8C 86 F1 | 	sub	local01, #40
23028     2C 00 90 AD |  if_e	jmp	#LR__1349
2302c     28 8C 06 F1 | 	add	local01, #40
23030     46 75 02 FB | 	rdlong	arg01, local01
23034     28 8C 86 F1 | 	sub	local01, #40
23038     3A 91 02 FB | 	rdlong	local03, arg01
2303c     04 74 06 F1 | 	add	arg01, #4
23040     3A 93 02 FB | 	rdlong	local04, arg01
23044     46 75 02 F6 | 	mov	arg01, local01
23048     C9 94 02 F6 | 	mov	local05, objptr
2304c     48 93 01 F6 | 	mov	objptr, local03
23050     2D 92 62 FD | 	call	local04
23054     4A 93 01 F6 | 	mov	objptr, local05
23058                 | LR__1349
23058     20 8C 06 F1 | 	add	local01, #32
2305c     46 95 0A FB | 	rdlong	local05, local01 wz
23060     20 8C 86 F1 | 	sub	local01, #32
23064     30 00 90 AD |  if_e	jmp	#LR__1350
23068     20 8C 06 F1 | 	add	local01, #32
2306c     46 95 02 FB | 	rdlong	local05, local01
23070     20 8C 86 F1 | 	sub	local01, #32
23074     4A 91 02 FB | 	rdlong	local03, local05
23078     04 94 06 F1 | 	add	local05, #4
2307c     4A 93 02 FB | 	rdlong	local04, local05
23080     46 75 02 F6 | 	mov	arg01, local01
23084     C9 94 02 F6 | 	mov	local05, objptr
23088     48 93 01 F6 | 	mov	objptr, local03
2308c     2D 92 62 FD | 	call	local04
23090     4A 93 01 F6 | 	mov	objptr, local05
23094     1A 8F 02 F6 | 	mov	local02, result1
23098                 | LR__1350
23098     46 75 02 F6 | 	mov	arg01, local01
2309c     00 76 06 F6 | 	mov	arg02, #0
230a0     30 78 06 F6 | 	mov	arg03, #48
230a4     99 00 A0 FD | 	call	#\builtin_bytefill_
230a8                 | '     return r;
230a8     47 35 02 F6 | 	mov	result1, local02
230ac                 | LR__1351
230ac     A8 F0 03 F6 | 	mov	ptra, fp
230b0     B3 00 A0 FD | 	call	#popregs_
230b4                 | _fatfs_cc__closeraw_ret
230b4     2D 00 64 FD | 	ret
230b8                 | 
230b8                 | _fatfs_cc___default_getc
230b8     03 4C 05 F6 | 	mov	COUNT_, #3
230bc     A9 00 A0 FD | 	call	#pushregs_
230c0     3A 8D 02 F6 | 	mov	local01, arg01
230c4     46 8F 02 FB | 	rdlong	local02, local01
230c8     08 8E 06 F1 | 	add	local02, #8
230cc     47 91 02 FB | 	rdlong	local03, local02
230d0     02 90 CE F7 | 	test	local03, #2 wz
230d4     46 75 02 56 |  if_ne	mov	arg01, local01
230d8     6C 01 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
230dc     47 91 02 FB | 	rdlong	local03, local02
230e0     01 90 46 F5 | 	or	local03, #1
230e4     47 91 62 FC | 	wrlong	local03, local02
230e8     08 8E 86 F1 | 	sub	local02, #8
230ec     47 91 0A FB | 	rdlong	local03, local02 wz
230f0     0C 00 90 5D |  if_ne	jmp	#LR__1352
230f4     46 75 02 F6 | 	mov	arg01, local01
230f8     2C 27 B0 FD | 	call	#_fatfs_cc___default_filbuf
230fc     1A 91 02 F6 | 	mov	local03, result1
23100                 | LR__1352
23100     01 90 56 F2 | 	cmps	local03, #1 wc
23104                 | '         return -1;
23104     01 34 66 C6 |  if_b	neg	result1, #1
23108     1C 00 90 CD |  if_b	jmp	#LR__1353
2310c     01 90 86 F1 | 	sub	local03, #1
23110     47 91 62 FC | 	wrlong	local03, local02
23114     04 8E 06 F1 | 	add	local02, #4
23118     47 91 02 FB | 	rdlong	local03, local02
2311c     48 35 C2 FA | 	rdbyte	result1, local03
23120     01 90 06 F1 | 	add	local03, #1
23124     47 91 62 FC | 	wrlong	local03, local02
23128                 | '     }
23128                 | '     b->cnt = i-1;
23128                 | '     ptr = b->ptr;
23128                 | '     i = *ptr++;
23128                 | '     b->ptr = ptr;
23128                 | '     return i;
23128                 | LR__1353
23128     A8 F0 03 F6 | 	mov	ptra, fp
2312c     B3 00 A0 FD | 	call	#popregs_
23130                 | _fatfs_cc___default_getc_ret
23130     2D 00 64 FD | 	ret
23134                 | 
23134                 | _fatfs_cc___default_putc
23134     04 4C 05 F6 | 	mov	COUNT_, #4
23138     A9 00 A0 FD | 	call	#pushregs_
2313c     3A 8D 02 F6 | 	mov	local01, arg01
23140     3B 8F 02 F6 | 	mov	local02, arg02
23144     47 91 02 FB | 	rdlong	local03, local02
23148     08 90 06 F1 | 	add	local03, #8
2314c     48 35 02 FB | 	rdlong	result1, local03
23150     01 34 CE F7 | 	test	result1, #1 wz
23154     47 75 02 56 |  if_ne	mov	arg01, local02
23158     EC 00 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
2315c     48 75 02 FB | 	rdlong	arg01, local03
23160     02 74 46 F5 | 	or	arg01, #2
23164     48 75 62 FC | 	wrlong	arg01, local03
23168     08 90 86 F1 | 	sub	local03, #8
2316c     48 75 02 FB | 	rdlong	arg01, local03
23170     3A 93 02 F6 | 	mov	local04, arg01
23174     0C 90 06 F1 | 	add	local03, #12
23178     48 93 02 F1 | 	add	local04, local03
2317c     49 8D 42 FC | 	wrbyte	local01, local04
23180     46 8D E2 F8 | 	getbyte	local01, local01, #0
23184     01 74 06 F1 | 	add	arg01, #1
23188     0C 90 86 F1 | 	sub	local03, #12
2318c     48 75 62 FC | 	wrlong	arg01, local03
23190     02 00 00 FF 
23194     00 74 0E F2 | 	cmp	arg01, ##1024 wz
23198     10 00 90 5D |  if_ne	jmp	#LR__1354
2319c     47 75 02 F6 | 	mov	arg01, local02
231a0     A4 00 B0 FD | 	call	#_fatfs_cc___default_flush
231a4     00 34 0E F2 | 	cmp	result1, #0 wz
231a8     01 8C 66 56 |  if_ne	neg	local01, #1
231ac                 | LR__1354
231ac                 | '             c = -1;
231ac                 | '         }
231ac                 | '     }
231ac                 | '     return c;
231ac     46 35 02 F6 | 	mov	result1, local01
231b0     A8 F0 03 F6 | 	mov	ptra, fp
231b4     B3 00 A0 FD | 	call	#popregs_
231b8                 | _fatfs_cc___default_putc_ret
231b8     2D 00 64 FD | 	ret
231bc                 | 
231bc                 | _fatfs_cc___default_putc_terminal
231bc     04 4C 05 F6 | 	mov	COUNT_, #4
231c0     A9 00 A0 FD | 	call	#pushregs_
231c4     3A 8D 02 F6 | 	mov	local01, arg01
231c8     3B 8F 02 F6 | 	mov	local02, arg02
231cc     47 91 02 FB | 	rdlong	local03, local02
231d0     08 90 06 F1 | 	add	local03, #8
231d4     48 35 02 FB | 	rdlong	result1, local03
231d8     01 34 CE F7 | 	test	result1, #1 wz
231dc     47 75 02 56 |  if_ne	mov	arg01, local02
231e0     64 00 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
231e4     48 75 02 FB | 	rdlong	arg01, local03
231e8     02 74 46 F5 | 	or	arg01, #2
231ec     48 75 62 FC | 	wrlong	arg01, local03
231f0     08 90 86 F1 | 	sub	local03, #8
231f4     48 75 02 FB | 	rdlong	arg01, local03
231f8     3A 93 02 F6 | 	mov	local04, arg01
231fc     0C 90 06 F1 | 	add	local03, #12
23200     48 93 02 F1 | 	add	local04, local03
23204     49 8D 42 FC | 	wrbyte	local01, local04
23208     46 8D E2 F8 | 	getbyte	local01, local01, #0
2320c     0C 90 86 F1 | 	sub	local03, #12
23210     01 74 06 F1 | 	add	arg01, #1
23214     48 75 62 FC | 	wrlong	arg01, local03
23218     0A 8C 0E F2 | 	cmp	local01, #10 wz
2321c     02 00 00 5F 
23220     00 74 0E 52 |  if_ne	cmp	arg01, ##1024 wz
23224     10 00 90 5D |  if_ne	jmp	#LR__1355
23228     47 75 02 F6 | 	mov	arg01, local02
2322c     18 00 B0 FD | 	call	#_fatfs_cc___default_flush
23230     00 34 0E F2 | 	cmp	result1, #0 wz
23234     01 8C 66 56 |  if_ne	neg	local01, #1
23238                 | LR__1355
23238                 | '             c = -1;
23238                 | '         }
23238                 | '     }
23238                 | '     return c;
23238     46 35 02 F6 | 	mov	result1, local01
2323c     A8 F0 03 F6 | 	mov	ptra, fp
23240     B3 00 A0 FD | 	call	#popregs_
23244                 | _fatfs_cc___default_putc_terminal_ret
23244     2D 00 64 FD | 	ret
23248                 | 
23248                 | _fatfs_cc___default_flush
23248     0D 4C 05 F6 | 	mov	COUNT_, #13
2324c     A9 00 A0 FD | 	call	#pushregs_
23250     3A 8D 02 F6 | 	mov	local01, arg01
23254     46 8F 02 FB | 	rdlong	local02, local01
23258     47 91 02 FB | 	rdlong	local03, local02
2325c     08 8E 06 F1 | 	add	local02, #8
23260     47 93 02 FB | 	rdlong	local04, local02
23264     08 8E 86 F1 | 	sub	local02, #8
23268     02 92 CE F7 | 	test	local04, #2 wz
2326c     B8 00 90 AD |  if_e	jmp	#LR__1358
23270     01 90 56 F2 | 	cmps	local03, #1 wc
23274     24 01 90 CD |  if_b	jmp	#LR__1360
23278     08 8C 06 F1 | 	add	local01, #8
2327c     46 93 02 FB | 	rdlong	local04, local01
23280     08 8C 86 F1 | 	sub	local01, #8
23284     40 92 CE F7 | 	test	local04, #64 wz
23288     5C 00 90 AD |  if_e	jmp	#LR__1357
2328c     08 8C 06 F1 | 	add	local01, #8
23290     46 93 02 FB | 	rdlong	local04, local01
23294     08 8C 86 F1 | 	sub	local01, #8
23298     80 92 CE F7 | 	test	local04, #128 wz
2329c     48 00 90 AD |  if_e	jmp	#LR__1356
232a0     2C 8C 06 F1 | 	add	local01, #44
232a4     46 93 02 FB | 	rdlong	local04, local01
232a8     2C 8C 86 F1 | 	sub	local01, #44
232ac     49 95 02 FB | 	rdlong	local05, local04
232b0     04 92 06 F1 | 	add	local04, #4
232b4     49 93 02 FB | 	rdlong	local04, local04
232b8     46 75 02 F6 | 	mov	arg01, local01
232bc     00 76 06 F6 | 	mov	arg02, #0
232c0     02 78 06 F6 | 	mov	arg03, #2
232c4     C9 96 02 F6 | 	mov	local06, objptr
232c8     4A 93 01 F6 | 	mov	objptr, local05
232cc     2D 92 62 FD | 	call	local04
232d0     4B 93 01 F6 | 	mov	objptr, local06
232d4     08 8C 06 F1 | 	add	local01, #8
232d8     46 93 02 FB | 	rdlong	local04, local01
232dc     80 92 26 F5 | 	andn	local04, #128
232e0     46 93 62 FC | 	wrlong	local04, local01
232e4     08 8C 86 F1 | 	sub	local01, #8
232e8                 | LR__1356
232e8                 | LR__1357
232e8     14 8C 06 F1 | 	add	local01, #20
232ec     46 93 02 FB | 	rdlong	local04, local01
232f0     14 8C 86 F1 | 	sub	local01, #20
232f4     49 95 02 FB | 	rdlong	local05, local04
232f8     04 92 06 F1 | 	add	local04, #4
232fc     49 99 02 FB | 	rdlong	local07, local04
23300     0C 8E 06 F1 | 	add	local02, #12
23304     47 77 02 F6 | 	mov	arg02, local02
23308     0C 8E 86 F1 | 	sub	local02, #12
2330c     46 75 02 F6 | 	mov	arg01, local01
23310     48 79 02 F6 | 	mov	arg03, local03
23314     C9 96 02 F6 | 	mov	local06, objptr
23318     4A 93 01 F6 | 	mov	objptr, local05
2331c     2D 98 62 FD | 	call	local07
23320     4B 93 01 F6 | 	mov	objptr, local06
23324     74 00 90 FD | 	jmp	#LR__1360
23328                 | LR__1358
23328     08 8E 06 F1 | 	add	local02, #8
2332c     47 93 02 FB | 	rdlong	local04, local02
23330     08 8E 86 F1 | 	sub	local02, #8
23334     01 92 CE F7 | 	test	local04, #1 wz
23338     60 00 90 AD |  if_e	jmp	#LR__1359
2333c     00 90 0E F2 | 	cmp	local03, #0 wz
23340     58 00 90 AD |  if_e	jmp	#LR__1359
23344     2C 8C 06 F1 | 	add	local01, #44
23348     46 9B 02 FB | 	rdlong	local08, local01
2334c     2C 8C 86 F1 | 	sub	local01, #44
23350     4D 93 02 F6 | 	mov	local04, local08
23354     49 95 02 FB | 	rdlong	local05, local04
23358     04 92 06 F1 | 	add	local04, #4
2335c     49 9D 02 FB | 	rdlong	local09, local04
23360     4E 99 02 F6 | 	mov	local07, local09
23364     46 9F 02 F6 | 	mov	local10, local01
23368     48 A1 62 F6 | 	neg	local11, local03
2336c     01 A2 06 F6 | 	mov	local12, #1
23370     4F 75 02 F6 | 	mov	arg01, local10
23374     50 77 02 F6 | 	mov	arg02, local11
23378     01 78 06 F6 | 	mov	arg03, #1
2337c     C9 96 02 F6 | 	mov	local06, objptr
23380     4A 93 01 F6 | 	mov	objptr, local05
23384     2D 98 62 FD | 	call	local07
23388     4B 93 01 F6 | 	mov	objptr, local06
2338c     1A 93 02 F6 | 	mov	local04, result1
23390     49 A5 02 F6 | 	mov	local13, local04
23394     00 A4 56 F2 | 	cmps	local13, #0 wc
23398     48 A5 02 36 |  if_ae	mov	local13, local03
2339c                 | LR__1359
2339c                 | LR__1360
2339c     47 01 68 FC | 	wrlong	#0, local02
233a0     04 8E 06 F1 | 	add	local02, #4
233a4     47 01 68 FC | 	wrlong	#0, local02
233a8     04 8E 06 F1 | 	add	local02, #4
233ac     47 01 68 FC | 	wrlong	#0, local02
233b0                 | '     }
233b0                 | '     b->cnt = 0;
233b0                 | '     b->ptr = 0;
233b0                 | '     b->flags = 0;
233b0                 | '     return 0;
233b0     00 34 06 F6 | 	mov	result1, #0
233b4     A8 F0 03 F6 | 	mov	ptra, fp
233b8     B3 00 A0 FD | 	call	#popregs_
233bc                 | _fatfs_cc___default_flush_ret
233bc     2D 00 64 FD | 	ret
233c0                 | 
233c0                 | _fatfs_cc_stat
233c0     07 4C 05 F6 | 	mov	COUNT_, #7
233c4     A9 00 A0 FD | 	call	#pushregs_
233c8     3A 79 02 F6 | 	mov	arg03, arg01
233cc     3B 8D 02 F6 | 	mov	local01, arg02
233d0     7C A3 05 F1 | 	add	ptr___system__dat__, #380
233d4     D1 8E 02 F6 | 	mov	local02, ptr___system__dat__
233d8     47 75 02 F6 | 	mov	arg01, local02
233dc     3C 77 02 F6 | 	mov	arg02, arg03
233e0     00 78 06 F6 | 	mov	arg03, #0
233e4     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
233e8     68 2A B0 FD | 	call	#__system____getvfsforfile
233ec     1A 91 0A F6 | 	mov	local03, result1 wz
233f0     34 90 06 51 |  if_ne	add	local03, #52
233f4     48 75 02 5B |  if_ne	rdlong	arg01, local03
233f8     34 90 86 51 |  if_ne	sub	local03, #52
233fc     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
23400                 | ' #line 22 "C:/flexprop/include/libc/unix/stat.c"
23400                 | '         return _seterror( 16 );
23400     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23404     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23408     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
2340c     01 34 66 A6 |  if_e	neg	result1, #1
23410     5C 00 90 AD |  if_e	jmp	#LR__1361
23414     46 75 02 F6 | 	mov	arg01, local01
23418     00 76 06 F6 | 	mov	arg02, #0
2341c     30 78 06 F6 | 	mov	arg03, #48
23420     3A 93 02 F6 | 	mov	local04, arg01
23424     99 00 A0 FD | 	call	#\builtin_bytefill_
23428     49 35 02 F6 | 	mov	result1, local04
2342c     47 77 CA FA | 	rdbyte	arg02, local02 wz
23430     08 8C 06 A1 |  if_e	add	local01, #8
23434     08 00 80 AF 
23438     46 FF 6B AC |  if_e	wrlong	##4607, local01
2343c                 | ' #line 29 "C:/flexprop/include/libc/unix/stat.c"
2343c                 | '         buf->st_mode =  0010000  | 0777;
2343c                 | '         return 0;
2343c     00 34 06 A6 |  if_e	mov	result1, #0
23440     2C 00 90 AD |  if_e	jmp	#LR__1361
23444     34 90 06 F1 | 	add	local03, #52
23448     48 77 02 FB | 	rdlong	arg02, local03
2344c     3B 95 02 FB | 	rdlong	local05, arg02
23450     04 76 06 F1 | 	add	arg02, #4
23454     3B 97 02 FB | 	rdlong	local06, arg02
23458     47 75 02 F6 | 	mov	arg01, local02
2345c     46 77 02 F6 | 	mov	arg02, local01
23460     C9 98 02 F6 | 	mov	local07, objptr
23464     4A 93 01 F6 | 	mov	objptr, local05
23468     2D 96 62 FD | 	call	local06
2346c     4C 93 01 F6 | 	mov	objptr, local07
23470                 | '     }
23470                 | ' #line 39 "C:/flexprop/include/libc/unix/stat.c"
23470                 | '     r = v->stat(name, buf);
23470                 | ' #line 43 "C:/flexprop/include/libc/unix/stat.c"
23470                 | '     return r;
23470                 | LR__1361
23470     A8 F0 03 F6 | 	mov	ptra, fp
23474     B3 00 A0 FD | 	call	#popregs_
23478                 | _fatfs_cc_stat_ret
23478     2D 00 64 FD | 	ret
2347c                 | 
2347c                 | _fatfs_cc_open
2347c     05 4C 05 F6 | 	mov	COUNT_, #5
23480     A9 00 A0 FD | 	call	#pushregs_
23484     3A 8D 02 F6 | 	mov	local01, arg01
23488     3B 8F 02 F6 | 	mov	local02, arg02
2348c     3C 91 02 F6 | 	mov	local03, arg03
23490     01 00 00 FF 
23494     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
23498     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
2349c                 | ' 
2349c                 | '     for (fd = 0; fd <  10 ; fd++) {
2349c     00 94 06 F6 | 	mov	local05, #0
234a0     01 00 00 FF 
234a4     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
234a8     80 CB 9D FE | 	loc	pa,	#(@LR__1363-@LR__1362)
234ac     8C 00 A0 FD | 	call	#FCACHE_LOAD_
234b0                 | LR__1362
234b0     0A 94 56 F2 | 	cmps	local05, #10 wc
234b4     24 00 90 3D |  if_ae	jmp	#LR__1364
234b8     4A 35 02 F6 | 	mov	result1, local05
234bc     01 34 66 F0 | 	shl	result1, #1
234c0     4A 35 02 F1 | 	add	result1, local05
234c4     04 34 66 F0 | 	shl	result1, #4
234c8     49 35 02 F1 | 	add	result1, local04
234cc     08 34 06 F1 | 	add	result1, #8
234d0     1A 35 0A FB | 	rdlong	result1, result1 wz
234d4     01 94 06 51 |  if_ne	add	local05, #1
234d8     D4 FF 9F 5D |  if_ne	jmp	#LR__1362
234dc                 | LR__1363
234dc                 | LR__1364
234dc     0A 94 0E F2 | 	cmp	local05, #10 wz
234e0                 | '         return _seterror( 11 );
234e0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
234e4     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
234e8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
234ec     01 34 66 A6 |  if_e	neg	result1, #1
234f0     2C 00 90 AD |  if_e	jmp	#LR__1365
234f4     4A 75 02 F6 | 	mov	arg01, local05
234f8     01 74 66 F0 | 	shl	arg01, #1
234fc     4A 75 02 F1 | 	add	arg01, local05
23500     04 74 66 F0 | 	shl	arg01, #4
23504     49 75 02 F1 | 	add	arg01, local04
23508     46 77 02 F6 | 	mov	arg02, local01
2350c     47 79 02 F6 | 	mov	arg03, local02
23510     48 7B 02 F6 | 	mov	arg04, local03
23514     A8 F5 BF FD | 	call	#_fatfs_cc__openraw
23518     00 34 4E F2 | 	cmps	result1, #0 wz
2351c     4A 35 02 A6 |  if_e	mov	result1, local05
23520                 | '         r = fd;
23520                 | '     }
23520                 | '     return r;
23520                 | LR__1365
23520     A8 F0 03 F6 | 	mov	ptra, fp
23524     B3 00 A0 FD | 	call	#popregs_
23528                 | _fatfs_cc_open_ret
23528     2D 00 64 FD | 	ret
2352c                 | 
2352c                 | _fatfs_cc_write
2352c     01 4C 05 F6 | 	mov	COUNT_, #1
23530     A9 00 A0 FD | 	call	#pushregs_
23534     3A 8D 02 F6 | 	mov	local01, arg01
23538     0A 8C 16 F2 | 	cmp	local01, #10 wc
2353c                 | '         return _seterror( 5 );
2353c     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
23540     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23544     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
23548     01 34 66 36 |  if_ae	neg	result1, #1
2354c     28 00 90 3D |  if_ae	jmp	#LR__1366
23550     46 75 02 F6 | 	mov	arg01, local01
23554     01 74 66 F0 | 	shl	arg01, #1
23558     46 75 02 F1 | 	add	arg01, local01
2355c     04 74 66 F0 | 	shl	arg01, #4
23560     01 00 00 FF 
23564     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
23568     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2356c                 | '     }
2356c                 | '     f = &__filetab[fd];
2356c                 | '     return _vfswrite(f, vbuf, count);
2356c     01 00 00 FF 
23570     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
23574     40 1D B0 FD | 	call	#_fatfs_cc__vfswrite
23578                 | LR__1366
23578     A8 F0 03 F6 | 	mov	ptra, fp
2357c     B3 00 A0 FD | 	call	#popregs_
23580                 | _fatfs_cc_write_ret
23580     2D 00 64 FD | 	ret
23584                 | 
23584                 | _fatfs_cc_read
23584     01 4C 05 F6 | 	mov	COUNT_, #1
23588     A9 00 A0 FD | 	call	#pushregs_
2358c     3A 8D 02 F6 | 	mov	local01, arg01
23590     0A 8C 16 F2 | 	cmp	local01, #10 wc
23594                 | '         return _seterror( 5 );
23594     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
23598     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2359c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
235a0     01 34 66 36 |  if_ae	neg	result1, #1
235a4     28 00 90 3D |  if_ae	jmp	#LR__1367
235a8     46 75 02 F6 | 	mov	arg01, local01
235ac     01 74 66 F0 | 	shl	arg01, #1
235b0     46 75 02 F1 | 	add	arg01, local01
235b4     04 74 66 F0 | 	shl	arg01, #4
235b8     01 00 00 FF 
235bc     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
235c0     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
235c4                 | '     }
235c4                 | '     f = &__filetab[fd];
235c4                 | '     return _vfsread(f, vbuf, count);
235c4     01 00 00 FF 
235c8     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
235cc     8C 1E B0 FD | 	call	#_fatfs_cc__vfsread
235d0                 | LR__1367
235d0     A8 F0 03 F6 | 	mov	ptra, fp
235d4     B3 00 A0 FD | 	call	#popregs_
235d8                 | _fatfs_cc_read_ret
235d8     2D 00 64 FD | 	ret
235dc                 | 
235dc                 | _fatfs_cc_close
235dc     01 4C 05 F6 | 	mov	COUNT_, #1
235e0     A9 00 A0 FD | 	call	#pushregs_
235e4     3A 8D 02 F6 | 	mov	local01, arg01
235e8     0A 8C 16 F2 | 	cmp	local01, #10 wc
235ec                 | '         return _seterror( 5 );
235ec     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
235f0     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
235f4     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
235f8     01 34 66 36 |  if_ae	neg	result1, #1
235fc     28 00 90 3D |  if_ae	jmp	#LR__1368
23600     46 75 02 F6 | 	mov	arg01, local01
23604     01 74 66 F0 | 	shl	arg01, #1
23608     46 75 02 F1 | 	add	arg01, local01
2360c     04 74 66 F0 | 	shl	arg01, #4
23610     01 00 00 FF 
23614     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
23618     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2361c                 | '     }
2361c                 | '     f = &__filetab[fd];
2361c                 | '     return _closeraw(f);
2361c     01 00 00 FF 
23620     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
23624     C4 F9 BF FD | 	call	#_fatfs_cc__closeraw
23628                 | LR__1368
23628     A8 F0 03 F6 | 	mov	ptra, fp
2362c     B3 00 A0 FD | 	call	#popregs_
23630                 | _fatfs_cc_close_ret
23630     2D 00 64 FD | 	ret
23634                 | 
23634                 | _fatfs_cc_lseek
23634     06 4C 05 F6 | 	mov	COUNT_, #6
23638     A9 00 A0 FD | 	call	#pushregs_
2363c     0A 74 16 F2 | 	cmp	arg01, #10 wc
23640                 | '         return _seterror( 5 );
23640     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
23644     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23648     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
2364c     01 34 66 36 |  if_ae	neg	result1, #1
23650     C0 00 90 3D |  if_ae	jmp	#LR__1370
23654     3A 8D 02 F6 | 	mov	local01, arg01
23658     01 8C 66 F0 | 	shl	local01, #1
2365c     3A 8D 02 F1 | 	add	local01, arg01
23660     04 8C 66 F0 | 	shl	local01, #4
23664     01 00 00 FF 
23668     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
2366c     F0 8C 02 F1 | 	add	local01, ptr__fatfs_cc_dat__
23670     2C 8C 06 F1 | 	add	local01, #44
23674     46 75 0A FB | 	rdlong	arg01, local01 wz
23678     2C 8C 86 F1 | 	sub	local01, #44
2367c     01 00 00 FF 
23680     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
23684                 | '         return _seterror( 16 );
23684     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23688     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2368c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23690     01 34 66 A6 |  if_e	neg	result1, #1
23694     7C 00 90 AD |  if_e	jmp	#LR__1370
23698     08 8C 06 F1 | 	add	local01, #8
2369c     46 8F 02 FB | 	rdlong	local02, local01
236a0     08 8C 86 F1 | 	sub	local01, #8
236a4     40 8E CE F7 | 	test	local02, #64 wz
236a8     08 8C 06 51 |  if_ne	add	local01, #8
236ac     46 8F 02 5B |  if_ne	rdlong	local02, local01
236b0     80 8E 46 55 |  if_ne	or	local02, #128
236b4     46 8F 62 5C |  if_ne	wrlong	local02, local01
236b8     08 8C 86 51 |  if_ne	sub	local01, #8
236bc     2C 8C 06 F1 | 	add	local01, #44
236c0     46 8F 02 FB | 	rdlong	local02, local01
236c4     2C 8C 86 F1 | 	sub	local01, #44
236c8     47 91 02 FB | 	rdlong	local03, local02
236cc     04 8E 06 F1 | 	add	local02, #4
236d0     47 93 02 FB | 	rdlong	local04, local02
236d4     46 75 02 F6 | 	mov	arg01, local01
236d8     C9 94 02 F6 | 	mov	local05, objptr
236dc     48 93 01 F6 | 	mov	objptr, local03
236e0     2D 92 62 FD | 	call	local04
236e4     4A 93 01 F6 | 	mov	objptr, local05
236e8     1A 97 02 F6 | 	mov	local06, result1
236ec     00 96 56 F2 | 	cmps	local06, #0 wc
236f0     1C 00 90 3D |  if_ae	jmp	#LR__1369
236f4                 | '         return _seterror(-r);
236f4     4B 75 6A F6 | 	neg	arg01, local06 wz
236f8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
236fc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
23700     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
23704     01 34 66 56 |  if_ne	neg	result1, #1
23708     00 34 06 A6 |  if_e	mov	result1, #0
2370c     04 00 90 FD | 	jmp	#LR__1370
23710                 | LR__1369
23710                 | '     }
23710                 | '     return r;
23710     4B 35 02 F6 | 	mov	result1, local06
23714                 | LR__1370
23714     A8 F0 03 F6 | 	mov	ptra, fp
23718     B3 00 A0 FD | 	call	#popregs_
2371c                 | _fatfs_cc_lseek_ret
2371c     2D 00 64 FD | 	ret
23720                 | 
23720                 | _fatfs_cc_ioctl
23720     04 4C 05 F6 | 	mov	COUNT_, #4
23724     A9 00 A0 FD | 	call	#pushregs_
23728     F0 15 B0 FD | 	call	#_fatfs_cc___getftab
2372c     1A 8D 0A F6 | 	mov	local01, result1 wz
23730                 | '         return _seterror( 5 );
23730     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23734     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23738     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
2373c     01 34 66 A6 |  if_e	neg	result1, #1
23740     54 00 90 AD |  if_e	jmp	#LR__1372
23744     24 8C 06 F1 | 	add	local01, #36
23748     46 75 02 FB | 	rdlong	arg01, local01
2374c     24 8C 86 F1 | 	sub	local01, #36
23750     3A 8F 02 FB | 	rdlong	local02, arg01
23754     04 74 06 F1 | 	add	arg01, #4
23758     3A 91 02 FB | 	rdlong	local03, arg01
2375c     46 75 02 F6 | 	mov	arg01, local01
23760     C9 92 02 F6 | 	mov	local04, objptr
23764     47 93 01 F6 | 	mov	objptr, local02
23768     2D 90 62 FD | 	call	local03
2376c     49 93 01 F6 | 	mov	objptr, local04
23770     1A 75 0A F6 | 	mov	arg01, result1 wz
23774     1C 00 90 AD |  if_e	jmp	#LR__1371
23778                 | '         return _seterror(r);
23778     18 A2 05 F1 | 	add	ptr___system__dat__, #24
2377c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
23780     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
23784     00 74 0E F2 | 	cmp	arg01, #0 wz
23788     01 34 66 56 |  if_ne	neg	result1, #1
2378c     00 34 06 A6 |  if_e	mov	result1, #0
23790     04 00 90 FD | 	jmp	#LR__1372
23794                 | LR__1371
23794                 | '     }
23794                 | '     return 0;
23794     00 34 06 F6 | 	mov	result1, #0
23798                 | LR__1372
23798     A8 F0 03 F6 | 	mov	ptra, fp
2379c     B3 00 A0 FD | 	call	#popregs_
237a0                 | _fatfs_cc_ioctl_ret
237a0     2D 00 64 FD | 	ret
237a4                 | 
237a4                 | _fatfs_cc_rmdir
237a4     06 4C 05 F6 | 	mov	COUNT_, #6
237a8     A9 00 A0 FD | 	call	#pushregs_
237ac     3A 77 02 F6 | 	mov	arg02, arg01
237b0     7C A3 05 F1 | 	add	ptr___system__dat__, #380
237b4     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
237b8     46 75 02 F6 | 	mov	arg01, local01
237bc     00 78 06 F6 | 	mov	arg03, #0
237c0     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
237c4     8C 26 B0 FD | 	call	#__system____getvfsforfile
237c8     1A 8F 0A F6 | 	mov	local02, result1 wz
237cc     3C 8E 06 51 |  if_ne	add	local02, #60
237d0     47 75 02 5B |  if_ne	rdlong	arg01, local02
237d4     3C 8E 86 51 |  if_ne	sub	local02, #60
237d8     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
237dc                 | ' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
237dc                 | '         return _seterror( 16 );
237dc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
237e0     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
237e4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
237e8     01 34 66 A6 |  if_e	neg	result1, #1
237ec     50 00 90 AD |  if_e	jmp	#LR__1374
237f0     3C 8E 06 F1 | 	add	local02, #60
237f4     47 75 02 FB | 	rdlong	arg01, local02
237f8     3A 91 02 FB | 	rdlong	local03, arg01
237fc     04 74 06 F1 | 	add	arg01, #4
23800     3A 93 02 FB | 	rdlong	local04, arg01
23804     46 75 02 F6 | 	mov	arg01, local01
23808     C9 94 02 F6 | 	mov	local05, objptr
2380c     48 93 01 F6 | 	mov	objptr, local03
23810     2D 92 62 FD | 	call	local04
23814     4A 93 01 F6 | 	mov	objptr, local05
23818     1A 97 0A F6 | 	mov	local06, result1 wz
2381c     1C 00 90 AD |  if_e	jmp	#LR__1373
23820                 | '         return _seterror(-r);
23820     4B 75 6A F6 | 	neg	arg01, local06 wz
23824     18 A2 05 F1 | 	add	ptr___system__dat__, #24
23828     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
2382c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
23830     01 34 66 56 |  if_ne	neg	result1, #1
23834     00 34 06 A6 |  if_e	mov	result1, #0
23838     04 00 90 FD | 	jmp	#LR__1374
2383c                 | LR__1373
2383c                 | '     }
2383c                 | '     return r;
2383c     4B 35 02 F6 | 	mov	result1, local06
23840                 | LR__1374
23840     A8 F0 03 F6 | 	mov	ptra, fp
23844     B3 00 A0 FD | 	call	#popregs_
23848                 | _fatfs_cc_rmdir_ret
23848     2D 00 64 FD | 	ret
2384c                 | 
2384c                 | _fatfs_cc_mkdir
2384c     07 4C 05 F6 | 	mov	COUNT_, #7
23850     A9 00 A0 FD | 	call	#pushregs_
23854     3A 79 02 F6 | 	mov	arg03, arg01
23858     3B 8D 02 F6 | 	mov	local01, arg02
2385c     7C A3 05 F1 | 	add	ptr___system__dat__, #380
23860     D1 8E 02 F6 | 	mov	local02, ptr___system__dat__
23864     47 75 02 F6 | 	mov	arg01, local02
23868     3C 77 02 F6 | 	mov	arg02, arg03
2386c     00 78 06 F6 | 	mov	arg03, #0
23870     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
23874     DC 25 B0 FD | 	call	#__system____getvfsforfile
23878     1A 91 0A F6 | 	mov	local03, result1 wz
2387c     20 90 06 51 |  if_ne	add	local03, #32
23880     48 75 02 5B |  if_ne	rdlong	arg01, local03
23884     20 90 86 51 |  if_ne	sub	local03, #32
23888     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
2388c                 | ' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
2388c                 | '         return _seterror( 16 );
2388c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23890     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23894     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23898     01 34 66 A6 |  if_e	neg	result1, #1
2389c     54 00 90 AD |  if_e	jmp	#LR__1376
238a0     38 90 06 F1 | 	add	local03, #56
238a4     48 77 02 FB | 	rdlong	arg02, local03
238a8     3B 93 02 FB | 	rdlong	local04, arg02
238ac     04 76 06 F1 | 	add	arg02, #4
238b0     3B 95 02 FB | 	rdlong	local05, arg02
238b4     47 75 02 F6 | 	mov	arg01, local02
238b8     46 77 02 F6 | 	mov	arg02, local01
238bc     C9 96 02 F6 | 	mov	local06, objptr
238c0     49 93 01 F6 | 	mov	objptr, local04
238c4     2D 94 62 FD | 	call	local05
238c8     4B 93 01 F6 | 	mov	objptr, local06
238cc     1A 99 0A F6 | 	mov	local07, result1 wz
238d0     1C 00 90 AD |  if_e	jmp	#LR__1375
238d4                 | '         return _seterror(-r);
238d4     4C 75 6A F6 | 	neg	arg01, local07 wz
238d8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
238dc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
238e0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
238e4     01 34 66 56 |  if_ne	neg	result1, #1
238e8     00 34 06 A6 |  if_e	mov	result1, #0
238ec     04 00 90 FD | 	jmp	#LR__1376
238f0                 | LR__1375
238f0                 | '     }
238f0                 | '     return r;
238f0     4C 35 02 F6 | 	mov	result1, local07
238f4                 | LR__1376
238f4     A8 F0 03 F6 | 	mov	ptra, fp
238f8     B3 00 A0 FD | 	call	#popregs_
238fc                 | _fatfs_cc_mkdir_ret
238fc     2D 00 64 FD | 	ret
23900                 | 
23900                 | _fatfs_cc_getenv
23900     05 4C 05 F6 | 	mov	COUNT_, #5
23904     A9 00 A0 FD | 	call	#pushregs_
23908     3A 8D 02 F6 | 	mov	local01, arg01
2390c     00 8E 06 F6 | 	mov	local02, #0
23910     FC C6 9D FE | 	loc	pa,	#(@LR__1378-@LR__1377)
23914     8C 00 A0 FD | 	call	#FCACHE_LOAD_
23918                 | LR__1377
23918     3A 35 CA FA | 	rdbyte	result1, arg01 wz
2391c     01 8E 06 51 |  if_ne	add	local02, #1
23920     01 74 06 51 |  if_ne	add	arg01, #1
23924     F0 FF 9F 5D |  if_ne	jmp	#LR__1377
23928                 | LR__1378
23928     47 35 02 F6 | 	mov	result1, local02
2392c     1A 91 02 F6 | 	mov	local03, result1
23930     02 00 00 FF 
23934     58 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1112
23938     F0 78 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2393c     02 00 00 FF 
23940     58 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1112
23944                 | '             return 0;
23944     00 34 06 A6 |  if_e	mov	result1, #0
23948     60 00 90 AD |  if_e	jmp	#LR__1382
2394c                 | ' 
2394c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2394c     02 00 00 FF 
23950     58 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1112
23954     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23958     02 00 00 FF 
2395c     58 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1112
23960                 | LR__1379
23960     49 95 0A FB | 	rdlong	local05, local04 wz
23964     40 00 90 AD |  if_e	jmp	#LR__1381
23968     4A 75 02 F6 | 	mov	arg01, local05
2396c     46 77 02 F6 | 	mov	arg02, local01
23970     48 79 02 F6 | 	mov	arg03, local03
23974     9C 8F BF FD | 	call	#_fatfs_cc_strncmp
23978     00 34 0E F2 | 	cmp	result1, #0 wz
2397c     20 00 90 5D |  if_ne	jmp	#LR__1380
23980     48 79 02 F6 | 	mov	arg03, local03
23984     4A 79 02 F1 | 	add	arg03, local05
23988     3C 79 C2 FA | 	rdbyte	arg03, arg03
2398c     3D 78 0E F2 | 	cmp	arg03, #61 wz
23990                 | ' 			return name+len+1;
23990     4A 35 02 A6 |  if_e	mov	result1, local05
23994     48 35 02 A1 |  if_e	add	result1, local03
23998     01 34 06 A1 |  if_e	add	result1, #1
2399c     0C 00 90 AD |  if_e	jmp	#LR__1382
239a0                 | LR__1380
239a0     04 92 06 F1 | 	add	local04, #4
239a4     B8 FF 9F FD | 	jmp	#LR__1379
239a8                 | LR__1381
239a8                 | ' 	}
239a8                 | ' 	return 0;
239a8     00 34 06 F6 | 	mov	result1, #0
239ac                 | LR__1382
239ac     A8 F0 03 F6 | 	mov	ptra, fp
239b0     B3 00 A0 FD | 	call	#popregs_
239b4                 | _fatfs_cc_getenv_ret
239b4     2D 00 64 FD | 	ret
239b8                 | 
239b8                 | _fatfs_cc__get_fattime
239b8     00 4C 05 F6 | 	mov	COUNT_, #0
239bc     A9 00 A0 FD | 	call	#pushregs_
239c0     34 F0 07 F1 | 	add	ptra, #52
239c4     00 74 06 F6 | 	mov	arg01, #0
239c8     64 EB BF FD | 	call	#_fatfs_cc_time
239cc     04 50 05 F1 | 	add	fp, #4
239d0     A8 34 62 FC | 	wrlong	result1, fp
239d4     A8 74 02 F6 | 	mov	arg01, fp
239d8     0C 50 05 F1 | 	add	fp, #12
239dc     A8 76 02 F6 | 	mov	arg02, fp
239e0     10 50 85 F1 | 	sub	fp, #16
239e4     60 ED BF FD | 	call	#_fatfs_cc__gmtime_r
239e8     24 50 05 F1 | 	add	fp, #36
239ec     A8 76 02 FB | 	rdlong	arg02, fp
239f0     50 76 86 F1 | 	sub	arg02, #80
239f4     09 76 66 F0 | 	shl	arg02, #9
239f8     04 50 85 F1 | 	sub	fp, #4
239fc     A8 34 02 FB | 	rdlong	result1, fp
23a00     01 34 06 F1 | 	add	result1, #1
23a04     05 34 66 F0 | 	shl	result1, #5
23a08     1A 77 42 F5 | 	or	arg02, result1
23a0c     04 50 85 F1 | 	sub	fp, #4
23a10     A8 34 02 FB | 	rdlong	result1, fp
23a14     1A 77 42 F5 | 	or	arg02, result1
23a18     14 50 85 F1 | 	sub	fp, #20
23a1c     A8 76 62 FC | 	wrlong	arg02, fp
23a20     10 50 05 F1 | 	add	fp, #16
23a24     A8 76 02 FB | 	rdlong	arg02, fp
23a28     0B 76 66 F0 | 	shl	arg02, #11
23a2c     04 50 85 F1 | 	sub	fp, #4
23a30     A8 34 02 FB | 	rdlong	result1, fp
23a34     05 34 66 F0 | 	shl	result1, #5
23a38     1A 77 42 F5 | 	or	arg02, result1
23a3c     04 50 85 F1 | 	sub	fp, #4
23a40     A8 34 02 FB | 	rdlong	result1, fp
23a44     1A 77 42 F5 | 	or	arg02, result1
23a48     04 50 85 F1 | 	sub	fp, #4
23a4c     A8 76 62 FC | 	wrlong	arg02, fp
23a50                 | ' 
23a50                 | '     now = time(0);
23a50                 | '     _gmtime_r (&now, &date);
23a50                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
23a50                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
23a50                 | '     return (ffdate << 16) | fftime;
23a50     04 50 85 F1 | 	sub	fp, #4
23a54     A8 34 02 FB | 	rdlong	result1, fp
23a58     10 34 66 F0 | 	shl	result1, #16
23a5c     08 50 85 F1 | 	sub	fp, #8
23a60     3B 35 42 F5 | 	or	result1, arg02
23a64     A8 F0 03 F6 | 	mov	ptra, fp
23a68     B3 00 A0 FD | 	call	#popregs_
23a6c                 | _fatfs_cc__get_fattime_ret
23a6c     2D 00 64 FD | 	ret
23a70                 | 
23a70                 | _fatfs_cc_unixtime_0220
23a70     00 4C 05 F6 | 	mov	COUNT_, #0
23a74     A9 00 A0 FD | 	call	#pushregs_
23a78     34 F0 07 F1 | 	add	ptra, #52
23a7c     04 50 05 F1 | 	add	fp, #4
23a80     A8 74 62 FC | 	wrlong	arg01, fp
23a84     04 50 05 F1 | 	add	fp, #4
23a88     A8 76 62 FC | 	wrlong	arg02, fp
23a8c     04 50 85 F1 | 	sub	fp, #4
23a90     A8 74 02 FB | 	rdlong	arg01, fp
23a94     09 74 46 F0 | 	shr	arg01, #9
23a98     7F 74 06 F5 | 	and	arg01, #127
23a9c     50 34 06 F6 | 	mov	result1, #80
23aa0     3A 35 02 F1 | 	add	result1, arg01
23aa4     20 50 05 F1 | 	add	fp, #32
23aa8     A8 34 62 FC | 	wrlong	result1, fp
23aac     20 50 85 F1 | 	sub	fp, #32
23ab0     A8 34 02 FB | 	rdlong	result1, fp
23ab4     05 34 46 F0 | 	shr	result1, #5
23ab8     1A 35 42 F8 | 	getnib	result1, result1, #0
23abc     01 34 86 F1 | 	sub	result1, #1
23ac0     1C 50 05 F1 | 	add	fp, #28
23ac4     A8 34 62 FC | 	wrlong	result1, fp
23ac8     1C 50 85 F1 | 	sub	fp, #28
23acc     A8 34 02 FB | 	rdlong	result1, fp
23ad0     1F 34 06 F5 | 	and	result1, #31
23ad4     18 50 05 F1 | 	add	fp, #24
23ad8     A8 34 62 FC | 	wrlong	result1, fp
23adc     14 50 85 F1 | 	sub	fp, #20
23ae0     A8 34 02 FB | 	rdlong	result1, fp
23ae4     0B 34 46 F0 | 	shr	result1, #11
23ae8     1F 34 06 F5 | 	and	result1, #31
23aec     10 50 05 F1 | 	add	fp, #16
23af0     A8 34 62 FC | 	wrlong	result1, fp
23af4     10 50 85 F1 | 	sub	fp, #16
23af8     A8 34 02 FB | 	rdlong	result1, fp
23afc     05 34 46 F0 | 	shr	result1, #5
23b00     3F 34 06 F5 | 	and	result1, #63
23b04     0C 50 05 F1 | 	add	fp, #12
23b08     A8 34 62 FC | 	wrlong	result1, fp
23b0c     0C 50 85 F1 | 	sub	fp, #12
23b10     A8 74 02 FB | 	rdlong	arg01, fp
23b14     1F 74 06 F5 | 	and	arg01, #31
23b18     01 74 66 F0 | 	shl	arg01, #1
23b1c     08 50 05 F1 | 	add	fp, #8
23b20     A8 74 62 FC | 	wrlong	arg01, fp
23b24     A8 74 02 F6 | 	mov	arg01, fp
23b28     10 50 85 F1 | 	sub	fp, #16
23b2c     78 EA BF FD | 	call	#_fatfs_cc_mktime
23b30     0C 50 05 F1 | 	add	fp, #12
23b34     A8 34 62 FC | 	wrlong	result1, fp
23b38                 | ' 
23b38                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
23b38                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
23b38                 | '     date.tm_mday = (dosdate & 0x1f);
23b38                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
23b38                 | '     date.tm_min = (dostime >> 5) & 0x3f;
23b38                 | '     date.tm_sec = (dostime & 0x1f) << 1;
23b38                 | ' 
23b38                 | '     t = mktime(&date);
23b38                 | ' #line 58 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23b38                 | '     return t;
23b38     0C 50 85 F1 | 	sub	fp, #12
23b3c     A8 F0 03 F6 | 	mov	ptra, fp
23b40     B3 00 A0 FD | 	call	#popregs_
23b44                 | _fatfs_cc_unixtime_0220_ret
23b44     2D 00 64 FD | 	ret
23b48                 | 
23b48                 | _fatfs_cc__set_dos_error_0222
23b48     03 4C 05 F6 | 	mov	COUNT_, #3
23b4c     A9 00 A0 FD | 	call	#pushregs_
23b50     3A 8D 02 F6 | 	mov	local01, arg01
23b54                 | ' #line 72 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23b54                 | '     switch (derr) {
23b54     46 8F 02 F6 | 	mov	local02, local01
23b58     14 8E 26 F3 | 	fle	local02, #20
23b5c     30 8E 62 FD | 	jmprel	local02
23b60                 | LR__1383
23b60     50 00 90 FD | 	jmp	#LR__1384
23b64     84 00 90 FD | 	jmp	#LR__1398
23b68     80 00 90 FD | 	jmp	#LR__1399
23b6c     7C 00 90 FD | 	jmp	#LR__1400
23b70     48 00 90 FD | 	jmp	#LR__1385
23b74     44 00 90 FD | 	jmp	#LR__1386
23b78     40 00 90 FD | 	jmp	#LR__1387
23b7c     44 00 90 FD | 	jmp	#LR__1388
23b80     48 00 90 FD | 	jmp	#LR__1390
23b84     54 00 90 FD | 	jmp	#LR__1393
23b88     38 00 90 FD | 	jmp	#LR__1389
23b8c     4C 00 90 FD | 	jmp	#LR__1394
23b90     48 00 90 FD | 	jmp	#LR__1395
23b94     44 00 90 FD | 	jmp	#LR__1396
23b98     50 00 90 FD | 	jmp	#LR__1401
23b9c     4C 00 90 FD | 	jmp	#LR__1401
23ba0     48 00 90 FD | 	jmp	#LR__1401
23ba4     2C 00 90 FD | 	jmp	#LR__1391
23ba8     38 00 90 FD | 	jmp	#LR__1397
23bac     2C 00 90 FD | 	jmp	#LR__1392
23bb0     38 00 90 FD | 	jmp	#LR__1401
23bb4                 | LR__1384
23bb4     00 90 06 F6 | 	mov	local03, #0
23bb8                 | '         r = 0;
23bb8                 | '         break;
23bb8     34 00 90 FD | 	jmp	#LR__1402
23bbc                 | LR__1385
23bbc                 | LR__1386
23bbc                 | LR__1387
23bbc     04 90 06 F6 | 	mov	local03, #4
23bc0                 | '         r =  4 ;
23bc0                 | '         break;
23bc0     2C 00 90 FD | 	jmp	#LR__1402
23bc4                 | LR__1388
23bc4                 | LR__1389
23bc4     06 90 06 F6 | 	mov	local03, #6
23bc8                 | '         r =  6 ;
23bc8                 | '         break;
23bc8     24 00 90 FD | 	jmp	#LR__1402
23bcc                 | LR__1390
23bcc     09 90 06 F6 | 	mov	local03, #9
23bd0                 | '         r =  9 ;
23bd0                 | '         break;
23bd0     1C 00 90 FD | 	jmp	#LR__1402
23bd4                 | LR__1391
23bd4     07 90 06 F6 | 	mov	local03, #7
23bd8                 | '         r =  7 ;
23bd8                 | '         break;
23bd8     14 00 90 FD | 	jmp	#LR__1402
23bdc                 | LR__1392
23bdc                 | LR__1393
23bdc                 | LR__1394
23bdc                 | LR__1395
23bdc                 | LR__1396
23bdc     0A 90 06 F6 | 	mov	local03, #10
23be0                 | '         r =  10 ;
23be0                 | '         break;
23be0     0C 00 90 FD | 	jmp	#LR__1402
23be4                 | LR__1397
23be4     0B 90 06 F6 | 	mov	local03, #11
23be8                 | '         r =  11 ;
23be8                 | '         break;
23be8     04 00 90 FD | 	jmp	#LR__1402
23bec                 | LR__1398
23bec                 | LR__1399
23bec                 | LR__1400
23bec                 | LR__1401
23bec     0C 90 06 F6 | 	mov	local03, #12
23bf0                 | '         r =  12 ;
23bf0                 | '         break;
23bf0                 | LR__1402
23bf0                 | '     }
23bf0                 | '     return _seterror(r);
23bf0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
23bf4     D1 90 62 FC | 	wrlong	local03, ptr___system__dat__
23bf8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
23bfc     00 90 0E F2 | 	cmp	local03, #0 wz
23c00     01 34 66 56 |  if_ne	neg	result1, #1
23c04     00 34 06 A6 |  if_e	mov	result1, #0
23c08     A8 F0 03 F6 | 	mov	ptra, fp
23c0c     B3 00 A0 FD | 	call	#popregs_
23c10                 | _fatfs_cc__set_dos_error_0222_ret
23c10     2D 00 64 FD | 	ret
23c14                 | 
23c14                 | _fatfs_cc_v_creat
23c14     04 4C 05 F6 | 	mov	COUNT_, #4
23c18     A9 00 A0 FD | 	call	#pushregs_
23c1c     3A 8D 02 F6 | 	mov	local01, arg01
23c20     3B 8F 02 F6 | 	mov	local02, arg02
23c24     03 00 00 FF 
23c28     34 74 06 F6 | 	mov	arg01, ##1588
23c2c                 | '     return _gc_alloc(size);
23c2c     10 76 06 F6 | 	mov	arg02, #16
23c30     18 4C B0 FD | 	call	#__system___gc_doalloc
23c34     1A 91 0A F6 | 	mov	local03, result1 wz
23c38                 | '       return _seterror( 7 );
23c38     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23c3c     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23c40     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23c44     01 34 66 A6 |  if_e	neg	result1, #1
23c48     58 00 90 AD |  if_e	jmp	#LR__1404
23c4c     48 75 02 F6 | 	mov	arg01, local03
23c50     00 76 06 F6 | 	mov	arg02, #0
23c54     03 00 00 FF 
23c58     34 78 06 F6 | 	mov	arg03, ##1588
23c5c     99 00 A0 FD | 	call	#\builtin_bytefill_
23c60     02 00 00 FF 
23c64     0C 90 06 F1 | 	add	local03, ##1036
23c68     48 75 02 F6 | 	mov	arg01, local03
23c6c     02 00 00 FF 
23c70     0C 90 86 F1 | 	sub	local03, ##1036
23c74     47 77 02 F6 | 	mov	arg02, local02
23c78     07 78 06 F6 | 	mov	arg03, #7
23c7c     40 BB BF FD | 	call	#_fatfs_cc_f_open
23c80     1A 93 0A F6 | 	mov	local04, result1 wz
23c84     14 00 90 AD |  if_e	jmp	#LR__1403
23c88     48 75 02 F6 | 	mov	arg01, local03
23c8c                 | '     return _gc_free(ptr);
23c8c     EC 4C B0 FD | 	call	#__system___gc_free
23c90                 | '     free(f);
23c90                 | '     return _set_dos_error(r);
23c90     49 75 02 F6 | 	mov	arg01, local04
23c94     B0 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23c98     08 00 90 FD | 	jmp	#LR__1404
23c9c                 | LR__1403
23c9c     46 91 62 FC | 	wrlong	local03, local01
23ca0                 | '   }
23ca0                 | '   fil->vfsdata = f;
23ca0                 | '   return 0;
23ca0     00 34 06 F6 | 	mov	result1, #0
23ca4                 | LR__1404
23ca4     A8 F0 03 F6 | 	mov	ptra, fp
23ca8     B3 00 A0 FD | 	call	#popregs_
23cac                 | _fatfs_cc_v_creat_ret
23cac     2D 00 64 FD | 	ret
23cb0                 | 
23cb0                 | _fatfs_cc_v_close
23cb0     02 4C 05 F6 | 	mov	COUNT_, #2
23cb4     A9 00 A0 FD | 	call	#pushregs_
23cb8     3A 8D 02 FB | 	rdlong	local01, arg01
23cbc     02 00 00 FF 
23cc0     0C 8C 06 F1 | 	add	local01, ##1036
23cc4     46 75 02 F6 | 	mov	arg01, local01
23cc8     02 00 00 FF 
23ccc     0C 8C 86 F1 | 	sub	local01, ##1036
23cd0     5C D3 BF FD | 	call	#_fatfs_cc_f_close
23cd4     1A 8F 02 F6 | 	mov	local02, result1
23cd8     46 75 02 F6 | 	mov	arg01, local01
23cdc                 | '     return _gc_free(ptr);
23cdc     9C 4C B0 FD | 	call	#__system___gc_free
23ce0                 | '     FAT_FIL *f = fil->vfsdata;
23ce0                 | '     r=f_close(&f->fil);
23ce0                 | '     free(f);
23ce0                 | '     return _set_dos_error(r);
23ce0     47 75 02 F6 | 	mov	arg01, local02
23ce4     60 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23ce8     A8 F0 03 F6 | 	mov	ptra, fp
23cec     B3 00 A0 FD | 	call	#popregs_
23cf0                 | _fatfs_cc_v_close_ret
23cf0     2D 00 64 FD | 	ret
23cf4                 | 
23cf4                 | _fatfs_cc_v_opendir
23cf4     04 4C 05 F6 | 	mov	COUNT_, #4
23cf8     A9 00 A0 FD | 	call	#pushregs_
23cfc     3A 8D 02 F6 | 	mov	local01, arg01
23d00     3B 8F 02 F6 | 	mov	local02, arg02
23d04     2C 74 06 F6 | 	mov	arg01, #44
23d08                 | '     return _gc_alloc(size);
23d08     10 76 06 F6 | 	mov	arg02, #16
23d0c     3C 4B B0 FD | 	call	#__system___gc_doalloc
23d10     1A 91 0A F6 | 	mov	local03, result1 wz
23d14                 | ' #line 156 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23d14                 | '       return _seterror( 7 );
23d14     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23d18     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23d1c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23d20     01 34 66 A6 |  if_e	neg	result1, #1
23d24     34 00 90 AD |  if_e	jmp	#LR__1406
23d28     47 77 02 F6 | 	mov	arg02, local02
23d2c     48 75 02 F6 | 	mov	arg01, local03
23d30     88 DA BF FD | 	call	#_fatfs_cc_f_opendir
23d34     1A 93 0A F6 | 	mov	local04, result1 wz
23d38     14 00 90 AD |  if_e	jmp	#LR__1405
23d3c     48 75 02 F6 | 	mov	arg01, local03
23d40                 | '     return _gc_free(ptr);
23d40     38 4C B0 FD | 	call	#__system___gc_free
23d44                 | '         free(f);
23d44                 | '         return _set_dos_error(r);
23d44     49 75 02 F6 | 	mov	arg01, local04
23d48     FC FD BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23d4c     0C 00 90 FD | 	jmp	#LR__1406
23d50                 | LR__1405
23d50     04 8C 06 F1 | 	add	local01, #4
23d54     46 91 62 FC | 	wrlong	local03, local01
23d58                 | '     }
23d58                 | '     dir->vfsdata = f;
23d58                 | '     return 0;
23d58     00 34 06 F6 | 	mov	result1, #0
23d5c                 | LR__1406
23d5c     A8 F0 03 F6 | 	mov	ptra, fp
23d60     B3 00 A0 FD | 	call	#popregs_
23d64                 | _fatfs_cc_v_opendir_ret
23d64     2D 00 64 FD | 	ret
23d68                 | 
23d68                 | _fatfs_cc_v_closedir
23d68     02 4C 05 F6 | 	mov	COUNT_, #2
23d6c     A9 00 A0 FD | 	call	#pushregs_
23d70     04 74 06 F1 | 	add	arg01, #4
23d74     3A 8D 02 FB | 	rdlong	local01, arg01
23d78     46 75 02 F6 | 	mov	arg01, local01
23d7c     F0 DB BF FD | 	call	#_fatfs_cc_f_closedir
23d80     1A 8F 02 F6 | 	mov	local02, result1
23d84     46 75 02 F6 | 	mov	arg01, local01
23d88                 | '     return _gc_free(ptr);
23d88     F0 4B B0 FD | 	call	#__system___gc_free
23d8c     00 8E 0E F2 | 	cmp	local02, #0 wz
23d90     47 75 02 56 |  if_ne	mov	arg01, local02
23d94     B0 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0222
23d98                 | '     return r;
23d98     47 35 02 F6 | 	mov	result1, local02
23d9c     A8 F0 03 F6 | 	mov	ptra, fp
23da0     B3 00 A0 FD | 	call	#popregs_
23da4                 | _fatfs_cc_v_closedir_ret
23da4     2D 00 64 FD | 	ret
23da8                 | 
23da8                 | _fatfs_cc_v_readdir
23da8     01 4C 05 F6 | 	mov	COUNT_, #1
23dac     A9 00 A0 FD | 	call	#pushregs_
23db0     2C F0 07 F1 | 	add	ptra, #44
23db4     04 50 05 F1 | 	add	fp, #4
23db8     A8 74 62 FC | 	wrlong	arg01, fp
23dbc     04 50 05 F1 | 	add	fp, #4
23dc0     A8 76 62 FC | 	wrlong	arg02, fp
23dc4     04 50 85 F1 | 	sub	fp, #4
23dc8     A8 76 02 FB | 	rdlong	arg02, fp
23dcc     04 76 06 F1 | 	add	arg02, #4
23dd0     3B 75 02 FB | 	rdlong	arg01, arg02
23dd4     08 50 05 F1 | 	add	fp, #8
23dd8     A8 76 02 F6 | 	mov	arg02, fp
23ddc     0C 50 85 F1 | 	sub	fp, #12
23de0     E8 DB BF FD | 	call	#_fatfs_cc_f_readdir
23de4     28 50 05 F1 | 	add	fp, #40
23de8     A8 34 62 FC | 	wrlong	result1, fp
23dec     28 50 85 F1 | 	sub	fp, #40
23df0     00 34 0E F2 | 	cmp	result1, #0 wz
23df4     14 00 90 AD |  if_e	jmp	#LR__1407
23df8                 | '         return _set_dos_error(r);
23df8     28 50 05 F1 | 	add	fp, #40
23dfc     A8 74 02 FB | 	rdlong	arg01, fp
23e00     28 50 85 F1 | 	sub	fp, #40
23e04     40 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23e08     B4 00 90 FD | 	jmp	#LR__1410
23e0c                 | LR__1407
23e0c     18 50 05 F1 | 	add	fp, #24
23e10     A8 76 C2 FA | 	rdbyte	arg02, fp
23e14     18 50 85 F1 | 	sub	fp, #24
23e18     07 76 4E F7 | 	zerox	arg02, #7 wz
23e1c                 | '         return -1;
23e1c     01 34 66 A6 |  if_e	neg	result1, #1
23e20     9C 00 90 AD |  if_e	jmp	#LR__1410
23e24     08 50 05 F1 | 	add	fp, #8
23e28     A8 74 02 FB | 	rdlong	arg01, fp
23e2c     10 50 05 F1 | 	add	fp, #16
23e30     A8 76 02 F6 | 	mov	arg02, fp
23e34     18 50 85 F1 | 	sub	fp, #24
23e38     AC 1D B0 FD | 	call	#__system____builtin_strcpy
23e3c     14 50 05 F1 | 	add	fp, #20
23e40     A8 34 C2 FA | 	rdbyte	result1, fp
23e44     14 50 85 F1 | 	sub	fp, #20
23e48     10 34 CE F7 | 	test	result1, #16 wz
23e4c     18 00 90 AD |  if_e	jmp	#LR__1408
23e50     08 50 05 F1 | 	add	fp, #8
23e54     A8 34 02 FB | 	rdlong	result1, fp
23e58     08 50 85 F1 | 	sub	fp, #8
23e5c     50 34 06 F1 | 	add	result1, #80
23e60     1A 03 48 FC | 	wrbyte	#1, result1
23e64     14 00 90 FD | 	jmp	#LR__1409
23e68                 | LR__1408
23e68     08 50 05 F1 | 	add	fp, #8
23e6c     A8 34 02 FB | 	rdlong	result1, fp
23e70     08 50 85 F1 | 	sub	fp, #8
23e74     50 34 06 F1 | 	add	result1, #80
23e78     1A 01 48 FC | 	wrbyte	#0, result1
23e7c                 | LR__1409
23e7c     08 50 05 F1 | 	add	fp, #8
23e80     A8 34 02 FB | 	rdlong	result1, fp
23e84     04 50 05 F1 | 	add	fp, #4
23e88     A8 76 02 FB | 	rdlong	arg02, fp
23e8c     48 34 06 F1 | 	add	result1, #72
23e90     1A 77 62 FC | 	wrlong	arg02, result1
23e94     04 50 85 F1 | 	sub	fp, #4
23e98     A8 8C 02 FB | 	rdlong	local01, fp
23e9c     08 50 05 F1 | 	add	fp, #8
23ea0     A8 74 E2 FA | 	rdword	arg01, fp
23ea4     02 50 05 F1 | 	add	fp, #2
23ea8     A8 76 E2 FA | 	rdword	arg02, fp
23eac     12 50 85 F1 | 	sub	fp, #18
23eb0     BC FB BF FD | 	call	#_fatfs_cc_unixtime_0220
23eb4     4C 8C 06 F1 | 	add	local01, #76
23eb8     46 35 62 FC | 	wrlong	result1, local01
23ebc                 | '         ent->d_type =  (0) ;
23ebc                 | '     }
23ebc                 | '     ent->d_size = finfo.fsize;
23ebc                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
23ebc                 | '     return 0;
23ebc     00 34 06 F6 | 	mov	result1, #0
23ec0                 | LR__1410
23ec0     A8 F0 03 F6 | 	mov	ptra, fp
23ec4     B3 00 A0 FD | 	call	#popregs_
23ec8                 | _fatfs_cc_v_readdir_ret
23ec8     2D 00 64 FD | 	ret
23ecc                 | 
23ecc                 | _fatfs_cc_v_stat
23ecc     03 4C 05 F6 | 	mov	COUNT_, #3
23ed0     A9 00 A0 FD | 	call	#pushregs_
23ed4     30 F0 07 F1 | 	add	ptra, #48
23ed8     04 50 05 F1 | 	add	fp, #4
23edc     A8 74 62 FC | 	wrlong	arg01, fp
23ee0     04 50 05 F1 | 	add	fp, #4
23ee4     A8 76 62 FC | 	wrlong	arg02, fp
23ee8     08 50 85 F1 | 	sub	fp, #8
23eec     3B 75 02 F6 | 	mov	arg01, arg02
23ef0     00 76 06 F6 | 	mov	arg02, #0
23ef4     30 78 06 F6 | 	mov	arg03, #48
23ef8     99 00 A0 FD | 	call	#\builtin_bytefill_
23efc     04 50 05 F1 | 	add	fp, #4
23f00     A8 34 02 FB | 	rdlong	result1, fp
23f04     04 50 85 F1 | 	sub	fp, #4
23f08     1A 35 CA FA | 	rdbyte	result1, result1 wz
23f0c     30 00 90 AD |  if_e	jmp	#LR__1411
23f10     04 50 05 F1 | 	add	fp, #4
23f14     A8 34 02 FB | 	rdlong	result1, fp
23f18     04 50 85 F1 | 	sub	fp, #4
23f1c     1A 35 C2 FA | 	rdbyte	result1, result1
23f20     2E 34 0E F2 | 	cmp	result1, #46 wz
23f24     30 00 90 5D |  if_ne	jmp	#LR__1412
23f28     04 50 05 F1 | 	add	fp, #4
23f2c     A8 34 02 FB | 	rdlong	result1, fp
23f30     04 50 85 F1 | 	sub	fp, #4
23f34     01 34 06 F1 | 	add	result1, #1
23f38     1A 35 CA FA | 	rdbyte	result1, result1 wz
23f3c     18 00 90 5D |  if_ne	jmp	#LR__1412
23f40                 | LR__1411
23f40     18 50 05 F1 | 	add	fp, #24
23f44     A8 20 48 FC | 	wrbyte	#16, fp
23f48     0C 50 85 F1 | 	sub	fp, #12
23f4c     A8 00 68 FC | 	wrlong	#0, fp
23f50     0C 50 85 F1 | 	sub	fp, #12
23f54     24 00 90 FD | 	jmp	#LR__1413
23f58                 | LR__1412
23f58     04 50 05 F1 | 	add	fp, #4
23f5c     A8 74 02 FB | 	rdlong	arg01, fp
23f60     0C 50 05 F1 | 	add	fp, #12
23f64     A8 76 02 F6 | 	mov	arg02, fp
23f68     10 50 85 F1 | 	sub	fp, #16
23f6c     78 DB BF FD | 	call	#_fatfs_cc_f_stat
23f70     0C 50 05 F1 | 	add	fp, #12
23f74     A8 34 62 FC | 	wrlong	result1, fp
23f78     0C 50 85 F1 | 	sub	fp, #12
23f7c                 | LR__1413
23f7c     0C 50 05 F1 | 	add	fp, #12
23f80     A8 34 0A FB | 	rdlong	result1, fp wz
23f84     0C 50 85 F1 | 	sub	fp, #12
23f88     14 00 90 AD |  if_e	jmp	#LR__1414
23f8c                 | '         return _set_dos_error(r);
23f8c     0C 50 05 F1 | 	add	fp, #12
23f90     A8 74 02 FB | 	rdlong	arg01, fp
23f94     0C 50 85 F1 | 	sub	fp, #12
23f98     AC FB BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23f9c     10 01 90 FD | 	jmp	#LR__1415
23fa0                 | LR__1414
23fa0     2C 50 05 F1 | 	add	fp, #44
23fa4     A8 48 6A FC | 	wrlong	#292, fp
23fa8     14 50 85 F1 | 	sub	fp, #20
23fac     A8 8C C2 FA | 	rdbyte	local01, fp
23fb0     18 50 85 F1 | 	sub	fp, #24
23fb4     01 8C CE F7 | 	test	local01, #1 wz
23fb8     2C 50 05 51 |  if_ne	add	fp, #44
23fbc     A8 8C 02 5B |  if_ne	rdlong	local01, fp
23fc0     92 8C 46 55 |  if_ne	or	local01, #146
23fc4     A8 8C 62 5C |  if_ne	wrlong	local01, fp
23fc8     2C 50 85 51 |  if_ne	sub	fp, #44
23fcc     18 50 05 F1 | 	add	fp, #24
23fd0     A8 8C C2 FA | 	rdbyte	local01, fp
23fd4     18 50 85 F1 | 	sub	fp, #24
23fd8     10 8C CE F7 | 	test	local01, #16 wz
23fdc     2C 50 05 51 |  if_ne	add	fp, #44
23fe0     A8 8C 02 5B |  if_ne	rdlong	local01, fp
23fe4     08 00 00 5F 
23fe8     49 8C 46 55 |  if_ne	or	local01, ##4169
23fec     A8 8C 62 5C |  if_ne	wrlong	local01, fp
23ff0     2C 50 85 51 |  if_ne	sub	fp, #44
23ff4     08 50 05 F1 | 	add	fp, #8
23ff8     A8 8C 02 FB | 	rdlong	local01, fp
23ffc     24 50 05 F1 | 	add	fp, #36
24000     A8 34 02 FB | 	rdlong	result1, fp
24004     08 8C 06 F1 | 	add	local01, #8
24008     46 35 62 FC | 	wrlong	result1, local01
2400c     24 50 85 F1 | 	sub	fp, #36
24010     A8 8C 02 FB | 	rdlong	local01, fp
24014     0C 8C 06 F1 | 	add	local01, #12
24018     46 03 68 FC | 	wrlong	#1, local01
2401c     A8 8C 02 FB | 	rdlong	local01, fp
24020     08 50 05 F1 | 	add	fp, #8
24024     A8 34 02 FB | 	rdlong	result1, fp
24028     18 8C 06 F1 | 	add	local01, #24
2402c     46 35 62 FC | 	wrlong	result1, local01
24030     08 50 85 F1 | 	sub	fp, #8
24034     A8 8C 02 FB | 	rdlong	local01, fp
24038     1C 8C 06 F1 | 	add	local01, #28
2403c     01 00 80 FF 
24040     46 01 68 FC | 	wrlong	##512, local01
24044     A8 34 02 FB | 	rdlong	result1, fp
24048     1A 8D 02 F6 | 	mov	local01, result1
2404c     18 34 06 F1 | 	add	result1, #24
24050     1A 35 02 FB | 	rdlong	result1, result1
24054     1A 35 52 F6 | 	abs	result1, result1 wc
24058     09 34 46 F0 | 	shr	result1, #9
2405c     1A 35 82 F6 | 	negc	result1, result1
24060     20 8C 06 F1 | 	add	local01, #32
24064     46 35 62 FC | 	wrlong	result1, local01
24068     A8 8E 02 FB | 	rdlong	local02, fp
2406c     47 8D 02 F6 | 	mov	local01, local02
24070     47 91 02 F6 | 	mov	local03, local02
24074     0C 50 05 F1 | 	add	fp, #12
24078     A8 74 E2 FA | 	rdword	arg01, fp
2407c     02 50 05 F1 | 	add	fp, #2
24080     A8 76 E2 FA | 	rdword	arg02, fp
24084     16 50 85 F1 | 	sub	fp, #22
24088     E4 F9 BF FD | 	call	#_fatfs_cc_unixtime_0220
2408c     2C 90 06 F1 | 	add	local03, #44
24090     48 35 62 FC | 	wrlong	result1, local03
24094     28 8E 06 F1 | 	add	local02, #40
24098     47 35 62 FC | 	wrlong	result1, local02
2409c     24 8C 06 F1 | 	add	local01, #36
240a0     46 35 62 FC | 	wrlong	result1, local01
240a4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
240a4                 | '     }
240a4                 | '     buf->st_mode = mode;
240a4                 | '     buf->st_nlink = 1;
240a4                 | '     buf->st_size = finfo.fsize;
240a4                 | '     buf->st_blksize = 512;
240a4                 | '     buf->st_blocks = buf->st_size / 512;
240a4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
240a4                 | ' #line 247 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
240a4                 | '     return r;
240a4     0C 50 05 F1 | 	add	fp, #12
240a8     A8 34 02 FB | 	rdlong	result1, fp
240ac     0C 50 85 F1 | 	sub	fp, #12
240b0                 | LR__1415
240b0     A8 F0 03 F6 | 	mov	ptra, fp
240b4     B3 00 A0 FD | 	call	#popregs_
240b8                 | _fatfs_cc_v_stat_ret
240b8     2D 00 64 FD | 	ret
240bc                 | 
240bc                 | _fatfs_cc_v_read
240bc     01 4C 05 F6 | 	mov	COUNT_, #1
240c0     A9 00 A0 FD | 	call	#pushregs_
240c4     1C F0 07 F1 | 	add	ptra, #28
240c8     04 50 05 F1 | 	add	fp, #4
240cc     A8 74 62 FC | 	wrlong	arg01, fp
240d0     04 50 05 F1 | 	add	fp, #4
240d4     A8 76 62 FC | 	wrlong	arg02, fp
240d8     04 50 05 F1 | 	add	fp, #4
240dc     A8 78 62 FC | 	wrlong	arg03, fp
240e0     08 50 85 F1 | 	sub	fp, #8
240e4     A8 74 02 FB | 	rdlong	arg01, fp
240e8     3A 75 0A FB | 	rdlong	arg01, arg01 wz
240ec     0C 50 05 F1 | 	add	fp, #12
240f0     A8 74 62 FC | 	wrlong	arg01, fp
240f4     10 50 85 F1 | 	sub	fp, #16
240f8                 | '         return _seterror( 5 );
240f8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
240fc     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24100     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24104     01 34 66 A6 |  if_e	neg	result1, #1
24108     B8 00 90 AD |  if_e	jmp	#LR__1418
2410c     10 50 05 F1 | 	add	fp, #16
24110     A8 74 02 FB | 	rdlong	arg01, fp
24114     02 00 00 FF 
24118     0C 74 06 F1 | 	add	arg01, ##1036
2411c     08 50 85 F1 | 	sub	fp, #8
24120     A8 76 02 FB | 	rdlong	arg02, fp
24124     04 50 05 F1 | 	add	fp, #4
24128     A8 78 02 FB | 	rdlong	arg03, fp
2412c     0C 50 05 F1 | 	add	fp, #12
24130     A8 7A 02 F6 | 	mov	arg04, fp
24134     18 50 85 F1 | 	sub	fp, #24
24138     C0 BD BF FD | 	call	#_fatfs_cc_f_read
2413c     14 50 05 F1 | 	add	fp, #20
24140     A8 34 62 FC | 	wrlong	result1, fp
24144     14 50 85 F1 | 	sub	fp, #20
24148     00 34 0E F2 | 	cmp	result1, #0 wz
2414c     34 00 90 AD |  if_e	jmp	#LR__1416
24150     04 50 05 F1 | 	add	fp, #4
24154     A8 74 02 FB | 	rdlong	arg01, fp
24158     3A 8D 02 F6 | 	mov	local01, arg01
2415c     08 74 06 F1 | 	add	arg01, #8
24160     3A 75 02 FB | 	rdlong	arg01, arg01
24164     20 74 46 F5 | 	or	arg01, #32
24168     08 8C 06 F1 | 	add	local01, #8
2416c     46 75 62 FC | 	wrlong	arg01, local01
24170                 | '         fil->state |=  (0x20) ;
24170                 | '         return _set_dos_error(r);
24170     10 50 05 F1 | 	add	fp, #16
24174     A8 74 02 FB | 	rdlong	arg01, fp
24178     14 50 85 F1 | 	sub	fp, #20
2417c     C8 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24180     40 00 90 FD | 	jmp	#LR__1418
24184                 | LR__1416
24184     18 50 05 F1 | 	add	fp, #24
24188     A8 8C 0A FB | 	rdlong	local01, fp wz
2418c     18 50 85 F1 | 	sub	fp, #24
24190     24 00 90 5D |  if_ne	jmp	#LR__1417
24194     04 50 05 F1 | 	add	fp, #4
24198     A8 34 02 FB | 	rdlong	result1, fp
2419c     1A 8D 02 F6 | 	mov	local01, result1
241a0     04 50 85 F1 | 	sub	fp, #4
241a4     08 34 06 F1 | 	add	result1, #8
241a8     1A 35 02 FB | 	rdlong	result1, result1
241ac     10 34 46 F5 | 	or	result1, #16
241b0     08 8C 06 F1 | 	add	local01, #8
241b4     46 35 62 FC | 	wrlong	result1, local01
241b8                 | LR__1417
241b8                 | '         fil->state |=  (0x10) ;
241b8                 | '     }
241b8                 | '     return x;
241b8     18 50 05 F1 | 	add	fp, #24
241bc     A8 34 02 FB | 	rdlong	result1, fp
241c0     18 50 85 F1 | 	sub	fp, #24
241c4                 | LR__1418
241c4     A8 F0 03 F6 | 	mov	ptra, fp
241c8     B3 00 A0 FD | 	call	#popregs_
241cc                 | _fatfs_cc_v_read_ret
241cc     2D 00 64 FD | 	ret
241d0                 | 
241d0                 | _fatfs_cc_v_write
241d0     01 4C 05 F6 | 	mov	COUNT_, #1
241d4     A9 00 A0 FD | 	call	#pushregs_
241d8     1C F0 07 F1 | 	add	ptra, #28
241dc     04 50 05 F1 | 	add	fp, #4
241e0     A8 74 62 FC | 	wrlong	arg01, fp
241e4     04 50 05 F1 | 	add	fp, #4
241e8     A8 76 62 FC | 	wrlong	arg02, fp
241ec     04 50 05 F1 | 	add	fp, #4
241f0     A8 78 62 FC | 	wrlong	arg03, fp
241f4     08 50 85 F1 | 	sub	fp, #8
241f8     A8 74 02 FB | 	rdlong	arg01, fp
241fc     3A 75 0A FB | 	rdlong	arg01, arg01 wz
24200     0C 50 05 F1 | 	add	fp, #12
24204     A8 74 62 FC | 	wrlong	arg01, fp
24208     10 50 85 F1 | 	sub	fp, #16
2420c                 | '         return _seterror( 5 );
2420c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24210     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24214     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24218     01 34 66 A6 |  if_e	neg	result1, #1
2421c     84 00 90 AD |  if_e	jmp	#LR__1420
24220     10 50 05 F1 | 	add	fp, #16
24224     A8 74 02 FB | 	rdlong	arg01, fp
24228     02 00 00 FF 
2422c     0C 74 06 F1 | 	add	arg01, ##1036
24230     08 50 85 F1 | 	sub	fp, #8
24234     A8 76 02 FB | 	rdlong	arg02, fp
24238     04 50 05 F1 | 	add	fp, #4
2423c     A8 78 02 FB | 	rdlong	arg03, fp
24240     0C 50 05 F1 | 	add	fp, #12
24244     A8 7A 02 F6 | 	mov	arg04, fp
24248     18 50 85 F1 | 	sub	fp, #24
2424c     84 C3 BF FD | 	call	#_fatfs_cc_f_write
24250     14 50 05 F1 | 	add	fp, #20
24254     A8 34 62 FC | 	wrlong	result1, fp
24258     14 50 85 F1 | 	sub	fp, #20
2425c     00 34 0E F2 | 	cmp	result1, #0 wz
24260     34 00 90 AD |  if_e	jmp	#LR__1419
24264     04 50 05 F1 | 	add	fp, #4
24268     A8 74 02 FB | 	rdlong	arg01, fp
2426c     3A 8D 02 F6 | 	mov	local01, arg01
24270     08 74 06 F1 | 	add	arg01, #8
24274     3A 75 02 FB | 	rdlong	arg01, arg01
24278     20 74 46 F5 | 	or	arg01, #32
2427c     08 8C 06 F1 | 	add	local01, #8
24280     46 75 62 FC | 	wrlong	arg01, local01
24284                 | '         fil->state |=  (0x20) ;
24284                 | '         return _set_dos_error(r);
24284     10 50 05 F1 | 	add	fp, #16
24288     A8 74 02 FB | 	rdlong	arg01, fp
2428c     14 50 85 F1 | 	sub	fp, #20
24290     B4 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24294     0C 00 90 FD | 	jmp	#LR__1420
24298                 | LR__1419
24298                 | '     }
24298                 | '     return x;
24298     18 50 05 F1 | 	add	fp, #24
2429c     A8 34 02 FB | 	rdlong	result1, fp
242a0     18 50 85 F1 | 	sub	fp, #24
242a4                 | LR__1420
242a4     A8 F0 03 F6 | 	mov	ptra, fp
242a8     B3 00 A0 FD | 	call	#popregs_
242ac                 | _fatfs_cc_v_write_ret
242ac     2D 00 64 FD | 	ret
242b0                 | 
242b0                 | _fatfs_cc_v_lseek
242b0     04 4C 05 F6 | 	mov	COUNT_, #4
242b4     A9 00 A0 FD | 	call	#pushregs_
242b8     3B 8D 02 F6 | 	mov	local01, arg02
242bc     3C 8F 02 F6 | 	mov	local02, arg03
242c0     3A 91 02 FB | 	rdlong	local03, arg01
242c4     02 00 00 FF 
242c8     0C 90 0E F1 | 	add	local03, ##1036 wz
242cc                 | '         return _seterror( 5 );
242cc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
242d0     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
242d4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
242d8     01 34 66 A6 |  if_e	neg	result1, #1
242dc     4C 00 90 AD |  if_e	jmp	#LR__1423
242e0     00 8E 0E F2 | 	cmp	local02, #0 wz
242e4     24 00 90 AD |  if_e	jmp	#LR__1421
242e8     01 8E 0E F2 | 	cmp	local02, #1 wz
242ec     14 90 06 A1 |  if_e	add	local03, #20
242f0     48 93 02 AB |  if_e	rdlong	local04, local03
242f4     14 90 86 A1 |  if_e	sub	local03, #20
242f8     49 8D 02 A1 |  if_e	add	local01, local04
242fc     0C 90 06 51 |  if_ne	add	local03, #12
24300     48 93 02 5B |  if_ne	rdlong	local04, local03
24304     0C 90 86 51 |  if_ne	sub	local03, #12
24308     49 8D 02 51 |  if_ne	add	local01, local04
2430c                 | LR__1421
2430c     46 77 02 F6 | 	mov	arg02, local01
24310     48 75 02 F6 | 	mov	arg01, local03
24314     98 CD BF FD | 	call	#_fatfs_cc_f_lseek
24318     1A 75 0A F6 | 	mov	arg01, result1 wz
2431c     08 00 90 AD |  if_e	jmp	#LR__1422
24320                 | '         return _set_dos_error(result);
24320     24 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24324     04 00 90 FD | 	jmp	#LR__1423
24328                 | LR__1422
24328                 | '     }
24328                 | '     return offset;
24328     46 35 02 F6 | 	mov	result1, local01
2432c                 | LR__1423
2432c     A8 F0 03 F6 | 	mov	ptra, fp
24330     B3 00 A0 FD | 	call	#popregs_
24334                 | _fatfs_cc_v_lseek_ret
24334     2D 00 64 FD | 	ret
24338                 | 
24338                 | _fatfs_cc_v_ioctl
24338                 | ' {
24338                 | '     return _seterror( 10 );
24338     18 A2 05 F1 | 	add	ptr___system__dat__, #24
2433c     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
24340     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24344     01 34 66 F6 | 	neg	result1, #1
24348                 | _fatfs_cc_v_ioctl_ret
24348     2D 00 64 FD | 	ret
2434c                 | 
2434c                 | _fatfs_cc_v_mkdir
2434c     C4 DA BF FD | 	call	#_fatfs_cc_f_mkdir
24350     1A 75 02 F6 | 	mov	arg01, result1
24354                 | ' 
24354                 | '     r = f_mkdir(name);
24354                 | '     return _set_dos_error(r);
24354     F0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24358                 | _fatfs_cc_v_mkdir_ret
24358     2D 00 64 FD | 	ret
2435c                 | 
2435c                 | _fatfs_cc_v_remove
2435c     60 D8 BF FD | 	call	#_fatfs_cc_f_unlink
24360     1A 75 02 F6 | 	mov	arg01, result1
24364                 | ' 
24364                 | '     r = f_unlink(name);
24364                 | '     return _set_dos_error(r);
24364     E0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24368                 | _fatfs_cc_v_remove_ret
24368     2D 00 64 FD | 	ret
2436c                 | 
2436c                 | _fatfs_cc_v_rmdir
2436c     50 D8 BF FD | 	call	#_fatfs_cc_f_unlink
24370     1A 75 02 F6 | 	mov	arg01, result1
24374                 | ' 
24374                 | '     r = f_unlink(name);
24374                 | '     return _set_dos_error(r);
24374     D0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24378                 | _fatfs_cc_v_rmdir_ret
24378     2D 00 64 FD | 	ret
2437c                 | 
2437c                 | _fatfs_cc_v_rename
2437c     BC DD BF FD | 	call	#_fatfs_cc_f_rename
24380     1A 75 02 F6 | 	mov	arg01, result1
24384                 | '     return _set_dos_error(r);
24384     C0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
24388                 | _fatfs_cc_v_rename_ret
24388     2D 00 64 FD | 	ret
2438c                 | 
2438c                 | _fatfs_cc_v_open
2438c     0B 4C 05 F6 | 	mov	COUNT_, #11
24390     A9 00 A0 FD | 	call	#pushregs_
24394     3A 8D 02 F6 | 	mov	local01, arg01
24398     3B 8F 02 F6 | 	mov	local02, arg02
2439c     3C 91 02 F6 | 	mov	local03, arg03
243a0     03 00 00 FF 
243a4     34 74 06 F6 | 	mov	arg01, ##1588
243a8                 | '     return _gc_alloc(size);
243a8     10 76 06 F6 | 	mov	arg02, #16
243ac     9C 44 B0 FD | 	call	#__system___gc_doalloc
243b0     1A 93 0A F6 | 	mov	local04, result1 wz
243b4                 | '       return _seterror( 7 );
243b4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
243b8     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
243bc     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
243c0     01 34 66 A6 |  if_e	neg	result1, #1
243c4     B0 00 90 AD |  if_e	jmp	#LR__1430
243c8     49 95 02 F6 | 	mov	local05, local04
243cc     00 96 06 F6 | 	mov	local06, #0
243d0     03 00 00 FF 
243d4     34 98 06 F6 | 	mov	local07, ##1588
243d8     4A 75 02 F6 | 	mov	arg01, local05
243dc     00 76 06 F6 | 	mov	arg02, #0
243e0     03 00 00 FF 
243e4     34 78 06 F6 | 	mov	arg03, ##1588
243e8     3A 9B 02 F6 | 	mov	local08, arg01
243ec     99 00 A0 FD | 	call	#\builtin_bytefill_
243f0     4D 35 02 F6 | 	mov	result1, local08
243f4                 | '   switch (flags & 3) {
243f4     48 9D 02 F6 | 	mov	local09, local03
243f8     03 9C 0E F5 | 	and	local09, #3 wz
243fc     0C 00 90 AD |  if_e	jmp	#LR__1424
24400     01 9C 0E F2 | 	cmp	local09, #1 wz
24404     0C 00 90 AD |  if_e	jmp	#LR__1425
24408     10 00 90 FD | 	jmp	#LR__1426
2440c                 | LR__1424
2440c     01 9E 06 F6 | 	mov	local10, #1
24410                 | '       fs_flags =  0x01 ;
24410                 | '       break;
24410     0C 00 90 FD | 	jmp	#LR__1427
24414                 | LR__1425
24414     02 9E 06 F6 | 	mov	local10, #2
24418                 | '       fs_flags =  0x02 ;
24418                 | '       break;
24418     04 00 90 FD | 	jmp	#LR__1427
2441c                 | LR__1426
2441c     03 9E 06 F6 | 	mov	local10, #3
24420                 | '       fs_flags =  0x01  |  0x02 ;
24420                 | '       break;
24420                 | LR__1427
24420     08 90 CE F7 | 	test	local03, #8 wz
24424     18 9E 46 55 |  if_ne	or	local10, #24
24428     08 00 90 5D |  if_ne	jmp	#LR__1428
2442c     20 90 CE F7 | 	test	local03, #32 wz
24430     30 9E 46 55 |  if_ne	or	local10, #48
24434                 | LR__1428
24434     02 00 00 FF 
24438     0C 92 06 F1 | 	add	local04, ##1036
2443c     49 75 02 F6 | 	mov	arg01, local04
24440     02 00 00 FF 
24444     0C 92 86 F1 | 	sub	local04, ##1036
24448     47 77 02 F6 | 	mov	arg02, local02
2444c     4F 79 02 F6 | 	mov	arg03, local10
24450     6C B3 BF FD | 	call	#_fatfs_cc_f_open
24454     1A A1 0A F6 | 	mov	local11, result1 wz
24458     14 00 90 AD |  if_e	jmp	#LR__1429
2445c     49 75 02 F6 | 	mov	arg01, local04
24460                 | '     return _gc_free(ptr);
24460     18 45 B0 FD | 	call	#__system___gc_free
24464                 | '     free(f);
24464                 | ' #line 395 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
24464                 | '     return _set_dos_error(r);
24464     50 75 02 F6 | 	mov	arg01, local11
24468     DC F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
2446c     08 00 90 FD | 	jmp	#LR__1430
24470                 | LR__1429
24470     46 93 62 FC | 	wrlong	local04, local01
24474                 | '   }
24474                 | '   fil->vfsdata = f;
24474                 | '   return 0;
24474     00 34 06 F6 | 	mov	result1, #0
24478                 | LR__1430
24478     A8 F0 03 F6 | 	mov	ptra, fp
2447c     B3 00 A0 FD | 	call	#popregs_
24480                 | _fatfs_cc_v_open_ret
24480     2D 00 64 FD | 	ret
24484                 | 
24484                 | _fatfs_cc_v_init
24484                 | ' {
24484                 | '     return 0;
24484     00 34 06 F6 | 	mov	result1, #0
24488                 | _fatfs_cc_v_init_ret
24488     2D 00 64 FD | 	ret
2448c                 | 
2448c                 | _fatfs_cc_v_deinit
2448c     58 01 00 FF 
24490     77 77 06 F6 | 	mov	arg02, ##@LR__2325
24494     00 74 06 F6 | 	mov	arg01, #0
24498     00 78 06 F6 | 	mov	arg03, #0
2449c     14 B2 BF FD | 	call	#_fatfs_cc_f_mount
244a0                 | ' #line 417 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
244a0                 | '     return 0;
244a0     00 34 06 F6 | 	mov	result1, #0
244a4                 | _fatfs_cc_v_deinit_ret
244a4     2D 00 64 FD | 	ret
244a8                 | 
244a8                 | _fatfs_cc_get_vfs
244a8     02 4C 05 F6 | 	mov	COUNT_, #2
244ac     A9 00 A0 FD | 	call	#pushregs_
244b0     3A 8D 02 F6 | 	mov	local01, arg01
244b4     50 74 06 F6 | 	mov	arg01, #80
244b8     4C 43 B0 FD | 	call	#__system___gc_alloc_managed
244bc     1A 8F 02 F6 | 	mov	local02, result1
244c0     C9 74 02 F6 | 	mov	arg01, objptr
244c4     F1 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_close_
244c8     6C 17 B0 FD | 	call	#__system___make_methodptr
244cc     47 35 62 FC | 	wrlong	result1, local02
244d0     C9 74 02 F6 | 	mov	arg01, objptr
244d4     FB 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_read_
244d8     5C 17 B0 FD | 	call	#__system___make_methodptr
244dc     04 8E 06 F1 | 	add	local02, #4
244e0     47 35 62 FC | 	wrlong	result1, local02
244e4     C9 74 02 F6 | 	mov	arg01, objptr
244e8     01 77 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_write_
244ec     48 17 B0 FD | 	call	#__system___make_methodptr
244f0     04 8E 06 F1 | 	add	local02, #4
244f4     47 35 62 FC | 	wrlong	result1, local02
244f8     C9 74 02 F6 | 	mov	arg01, objptr
244fc     F7 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_lseek_
24500     34 17 B0 FD | 	call	#__system___make_methodptr
24504     04 8E 06 F1 | 	add	local02, #4
24508     47 35 62 FC | 	wrlong	result1, local02
2450c     C9 74 02 F6 | 	mov	arg01, objptr
24510     F6 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_ioctl_
24514     20 17 B0 FD | 	call	#__system___make_methodptr
24518     04 8E 06 F1 | 	add	local02, #4
2451c     47 35 62 FC | 	wrlong	result1, local02
24520     04 8E 06 F1 | 	add	local02, #4
24524     47 01 68 FC | 	wrlong	#0, local02
24528     04 8E 06 F1 | 	add	local02, #4
2452c     47 8D 62 FC | 	wrlong	local01, local02
24530     04 8E 06 F1 | 	add	local02, #4
24534     47 01 68 FC | 	wrlong	#0, local02
24538     C9 74 02 F6 | 	mov	arg01, objptr
2453c     F9 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_open_
24540     F4 16 B0 FD | 	call	#__system___make_methodptr
24544     04 8E 06 F1 | 	add	local02, #4
24548     47 35 62 FC | 	wrlong	result1, local02
2454c     C9 74 02 F6 | 	mov	arg01, objptr
24550     F3 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_creat_
24554     E0 16 B0 FD | 	call	#__system___make_methodptr
24558     04 8E 06 F1 | 	add	local02, #4
2455c     47 35 62 FC | 	wrlong	result1, local02
24560     C9 74 02 F6 | 	mov	arg01, objptr
24564     FA 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_opendir_
24568     CC 16 B0 FD | 	call	#__system___make_methodptr
2456c     04 8E 06 F1 | 	add	local02, #4
24570     47 35 62 FC | 	wrlong	result1, local02
24574     C9 74 02 F6 | 	mov	arg01, objptr
24578     F2 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_closedir_
2457c     B8 16 B0 FD | 	call	#__system___make_methodptr
24580     04 8E 06 F1 | 	add	local02, #4
24584     47 35 62 FC | 	wrlong	result1, local02
24588     C9 74 02 F6 | 	mov	arg01, objptr
2458c     FC 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_readdir_
24590     A4 16 B0 FD | 	call	#__system___make_methodptr
24594     04 8E 06 F1 | 	add	local02, #4
24598     47 35 62 FC | 	wrlong	result1, local02
2459c     C9 74 02 F6 | 	mov	arg01, objptr
245a0     00 77 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_stat_
245a4     90 16 B0 FD | 	call	#__system___make_methodptr
245a8     04 8E 06 F1 | 	add	local02, #4
245ac     47 35 62 FC | 	wrlong	result1, local02
245b0     C9 74 02 F6 | 	mov	arg01, objptr
245b4     F8 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_mkdir_
245b8     7C 16 B0 FD | 	call	#__system___make_methodptr
245bc     04 8E 06 F1 | 	add	local02, #4
245c0     47 35 62 FC | 	wrlong	result1, local02
245c4     C9 74 02 F6 | 	mov	arg01, objptr
245c8     FF 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_rmdir_
245cc     68 16 B0 FD | 	call	#__system___make_methodptr
245d0     04 8E 06 F1 | 	add	local02, #4
245d4     47 35 62 FC | 	wrlong	result1, local02
245d8     C9 74 02 F6 | 	mov	arg01, objptr
245dc     FD 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_remove_
245e0     54 16 B0 FD | 	call	#__system___make_methodptr
245e4     04 8E 06 F1 | 	add	local02, #4
245e8     47 35 62 FC | 	wrlong	result1, local02
245ec     C9 74 02 F6 | 	mov	arg01, objptr
245f0     FE 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_rename_
245f4     40 16 B0 FD | 	call	#__system___make_methodptr
245f8     04 8E 06 F1 | 	add	local02, #4
245fc     47 35 62 FC | 	wrlong	result1, local02
24600     C9 74 02 F6 | 	mov	arg01, objptr
24604     F5 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_init_
24608     2C 16 B0 FD | 	call	#__system___make_methodptr
2460c     04 8E 06 F1 | 	add	local02, #4
24610     47 35 62 FC | 	wrlong	result1, local02
24614     C9 74 02 F6 | 	mov	arg01, objptr
24618     F4 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_deinit_
2461c     18 16 B0 FD | 	call	#__system___make_methodptr
24620     04 8E 06 F1 | 	add	local02, #4
24624     47 35 62 FC | 	wrlong	result1, local02
24628     4C 8E 86 F1 | 	sub	local02, #76
2462c                 | ' 
2462c                 | '     v->close = &v_close;
2462c                 | '     v->read = &v_read;
2462c                 | '     v->write = &v_write;
2462c                 | '     v->lseek = &v_lseek;
2462c                 | '     v->ioctl = &v_ioctl;
2462c                 | '     v->flush = 0;
2462c                 | '     v->vfs_data = ptr;
2462c                 | '     v->reserved = 0;
2462c                 | ' 
2462c                 | '     v->open = &v_open;
2462c                 | '     v->creat = &v_creat;
2462c                 | '     v->opendir = &v_opendir;
2462c                 | '     v->closedir = &v_closedir;
2462c                 | '     v->readdir = &v_readdir;
2462c                 | '     v->stat = &v_stat;
2462c                 | ' 
2462c                 | '     v->mkdir = &v_mkdir;
2462c                 | '     v->rmdir = &v_rmdir;
2462c                 | ' 
2462c                 | '     v->remove = &v_remove;
2462c                 | '     v->rename = &v_rename;
2462c                 | ' 
2462c                 | '     v->init = &v_init;
2462c                 | '     v->deinit = &v_deinit;
2462c                 | ' 
2462c                 | '     return v;
2462c     47 35 02 F6 | 	mov	result1, local02
24630     A8 F0 03 F6 | 	mov	ptra, fp
24634     B3 00 A0 FD | 	call	#popregs_
24638                 | _fatfs_cc_get_vfs_ret
24638     2D 00 64 FD | 	ret
2463c                 | 
2463c                 | _fatfs_cc_xmit_mmc_0408
2463c     08 92 05 F1 | 	add	objptr, #8
24640     C9 3A 02 FB | 	rdlong	_var01, objptr
24644     08 92 05 F1 | 	add	objptr, #8
24648     C9 3C 02 FB | 	rdlong	_var02, objptr
2464c     10 92 85 F1 | 	sub	objptr, #16
24650     40 3C 62 FD | 	dirl	_var02
24654     28 02 64 FD | 	setq	#1
24658     3A 3F 02 FB | 	rdlong	_var03, arg01
2465c     69 3E 62 FD | 	rev	_var03
24660     1B 3E FE F9 | 	movbyts	_var03, #27
24664     1E 3F 22 FC | 	wypin	_var03, _var02
24668     3B 3F 02 F6 | 	mov	_var03, arg02
2466c     02 76 4E F0 | 	shr	arg02, #2 wz
24670     03 3E 66 F0 | 	shl	_var03, #3
24674     1D 3F 22 FC | 	wypin	_var03, _var01
24678     41 3C 62 FD | 	dirh	_var02
2467c     08 74 06 F1 | 	add	arg01, #8
24680     69 40 62 FD | 	rev	_var04
24684     1B 40 FE F9 | 	movbyts	_var04, #27
24688                 | LR__1431
24688     1E 41 22 5C |  if_ne	wypin	_var04, _var02
2468c     3A 41 02 5B |  if_ne	rdlong	_var04, arg01
24690     04 74 06 51 |  if_ne	add	arg01, #4
24694     69 40 62 5D |  if_ne	rev	_var04
24698     1B 40 FE 59 |  if_ne	movbyts	_var04, #27
2469c                 | LR__1432
2469c     40 3C 72 5D |  if_ne	testp	_var02 wc
246a0     F8 FF 9F 1D |  if_a	jmp	#LR__1432
246a4     F8 77 6E 5B |  if_ne	djnz	arg02, #LR__1431
246a8                 | LR__1433
246a8     40 3A 72 FD | 	testp	_var01 wc
246ac     F8 FF 9F 3D |  if_ae	jmp	#LR__1433
246b0     40 3C 62 FD | 	dirl	_var02
246b4     FF FF FF FF 
246b8     1E FF 2B FC | 	wypin	##-1, _var02
246bc     41 3C 62 FD | 	dirh	_var02
246c0                 | _fatfs_cc_xmit_mmc_0408_ret
246c0     2D 00 64 FD | 	ret
246c4                 | 
246c4                 | _fatfs_cc_rcvr_mmc_0415
246c4     08 92 05 F1 | 	add	objptr, #8
246c8     C9 3A 02 FB | 	rdlong	_var01, objptr
246cc     0C 92 05 F1 | 	add	objptr, #12
246d0     C9 3C 02 FB | 	rdlong	_var02, objptr
246d4     14 92 85 F1 | 	sub	objptr, #20
246d8     1E 03 08 FC | 	akpin	_var02
246dc     3B 3F 0A F6 | 	mov	_var03, arg02 wz
246e0     02 3E 4E F0 | 	shr	_var03, #2 wz
246e4     30 00 90 AD |  if_e	jmp	#LR__1436
246e8     1F 41 02 F6 | 	mov	_var04, _var03
246ec     05 40 66 F0 | 	shl	_var04, #5
246f0     1D 41 22 FC | 	wypin	_var04, _var01
246f4     1E 7F 18 FC | 	wxpin	#63, _var02
246f8                 | LR__1434
246f8                 | LR__1435
246f8     40 3C 72 FD | 	testp	_var02 wc
246fc     F8 FF 9F 3D |  if_ae	jmp	#LR__1435
24700     1E 41 8A FA | 	rdpin	_var04, _var02
24704     69 40 62 FD | 	rev	_var04
24708     1B 40 FE F9 | 	movbyts	_var04, #27
2470c     3A 41 62 FC | 	wrlong	_var04, arg01
24710     04 74 06 F1 | 	add	arg01, #4
24714     F8 3F 6E FB | 	djnz	_var03, #LR__1434
24718                 | LR__1436
24718     03 76 0E F5 | 	and	arg02, #3 wz
2471c     24 00 90 AD |  if_e	jmp	#LR__1439
24720     1E 4F 18 FC | 	wxpin	#39, _var02
24724                 | LR__1437
24724     1D 11 28 FC | 	wypin	#8, _var01
24728                 | LR__1438
24728     40 3C 72 FD | 	testp	_var02 wc
2472c     F8 FF 9F 3D |  if_ae	jmp	#LR__1438
24730     1E 41 8A FA | 	rdpin	_var04, _var02
24734     69 40 62 FD | 	rev	_var04
24738     3A 41 42 FC | 	wrbyte	_var04, arg01
2473c     01 74 06 F1 | 	add	arg01, #1
24740     F8 77 6E FB | 	djnz	arg02, #LR__1437
24744                 | LR__1439
24744                 | _fatfs_cc_rcvr_mmc_0415_ret
24744     2D 00 64 FD | 	ret
24748                 | 
24748                 | _fatfs_cc_wait_ready_0419
24748     01 4C 05 F6 | 	mov	COUNT_, #1
2474c     A9 00 A0 FD | 	call	#pushregs_
24750     10 F0 07 F1 | 	add	ptra, #16
24754     1A 34 62 FD | 	getct	result1
24758     08 50 05 F1 | 	add	fp, #8
2475c     A8 34 62 FC | 	wrlong	result1, fp
24760     14 8C 06 FB | 	rdlong	local01, #20
24764     01 8C 46 F0 | 	shr	local01, #1
24768     04 50 05 F1 | 	add	fp, #4
2476c     A8 8C 62 FC | 	wrlong	local01, fp
24770     0C 50 85 F1 | 	sub	fp, #12
24774                 | ' {
24774                 | ' 	BYTE d;
24774                 | ' 	UINT tmr, tmout;
24774                 | ' 
24774                 | ' 	tmr = _cnt();
24774                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
24774                 | ' 	for(;;) {
24774                 | LR__1440
24774     04 50 05 F1 | 	add	fp, #4
24778     A8 74 02 F6 | 	mov	arg01, fp
2477c     04 50 85 F1 | 	sub	fp, #4
24780     01 76 06 F6 | 	mov	arg02, #1
24784     3C FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24788     04 50 05 F1 | 	add	fp, #4
2478c     A8 8C C2 FA | 	rdbyte	local01, fp
24790     04 50 85 F1 | 	sub	fp, #4
24794     FF 8C 0E F2 | 	cmp	local01, #255 wz
24798     01 34 06 A6 |  if_e	mov	result1, #1
2479c     28 00 90 AD |  if_e	jmp	#LR__1441
247a0     1A 34 62 FD | 	getct	result1
247a4     08 50 05 F1 | 	add	fp, #8
247a8     A8 8C 02 FB | 	rdlong	local01, fp
247ac     46 35 82 F1 | 	sub	result1, local01
247b0     04 50 05 F1 | 	add	fp, #4
247b4     A8 8C 02 FB | 	rdlong	local01, fp
247b8     0C 50 85 F1 | 	sub	fp, #12
247bc     46 35 12 F2 | 	cmp	result1, local01 wc
247c0     00 34 06 36 |  if_ae	mov	result1, #0
247c4     AC FF 9F CD |  if_b	jmp	#LR__1440
247c8                 | LR__1441
247c8     A8 F0 03 F6 | 	mov	ptra, fp
247cc     B3 00 A0 FD | 	call	#popregs_
247d0                 | _fatfs_cc_wait_ready_0419_ret
247d0     2D 00 64 FD | 	ret
247d4                 | 
247d4                 | _fatfs_cc_deselect_0425
247d4     00 4C 05 F6 | 	mov	COUNT_, #0
247d8     A9 00 A0 FD | 	call	#pushregs_
247dc     14 F0 07 F1 | 	add	ptra, #20
247e0     0C 92 05 F1 | 	add	objptr, #12
247e4     C9 76 02 FB | 	rdlong	arg02, objptr
247e8     04 50 05 F1 | 	add	fp, #4
247ec     A8 76 62 FC | 	wrlong	arg02, fp
247f0     04 92 85 F1 | 	sub	objptr, #4
247f4     C9 76 02 FB | 	rdlong	arg02, objptr
247f8     04 50 05 F1 | 	add	fp, #4
247fc     A8 76 62 FC | 	wrlong	arg02, fp
24800     08 92 05 F1 | 	add	objptr, #8
24804     C9 76 02 FB | 	rdlong	arg02, objptr
24808     04 50 05 F1 | 	add	fp, #4
2480c     A8 76 62 FC | 	wrlong	arg02, fp
24810     04 92 05 F1 | 	add	objptr, #4
24814     C9 76 02 FB | 	rdlong	arg02, objptr
24818     14 92 85 F1 | 	sub	objptr, #20
2481c     04 50 05 F1 | 	add	fp, #4
24820     A8 76 62 FC | 	wrlong	arg02, fp
24824     0C 50 85 F1 | 	sub	fp, #12
24828     A8 74 02 FB | 	rdlong	arg01, fp
2482c     04 50 85 F1 | 	sub	fp, #4
24830     59 74 62 FD | 	drvh	arg01
24834     1F 20 64 FD | 	waitx	#16
24838     A8 74 02 F6 | 	mov	arg01, fp
2483c     01 76 06 F6 | 	mov	arg02, #1
24840     80 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24844     A8 F0 03 F6 | 	mov	ptra, fp
24848     B3 00 A0 FD | 	call	#popregs_
2484c                 | _fatfs_cc_deselect_0425_ret
2484c     2D 00 64 FD | 	ret
24850                 | 
24850                 | _fatfs_cc_select_0429
24850     00 4C 05 F6 | 	mov	COUNT_, #0
24854     A9 00 A0 FD | 	call	#pushregs_
24858     10 F0 07 F1 | 	add	ptra, #16
2485c     0C 92 05 F1 | 	add	objptr, #12
24860     C9 74 02 FB | 	rdlong	arg01, objptr
24864     08 50 05 F1 | 	add	fp, #8
24868     A8 74 62 FC | 	wrlong	arg01, fp
2486c     08 92 05 F1 | 	add	objptr, #8
24870     C9 74 02 FB | 	rdlong	arg01, objptr
24874     14 92 85 F1 | 	sub	objptr, #20
24878     04 50 05 F1 | 	add	fp, #4
2487c     A8 74 62 FC | 	wrlong	arg01, fp
24880     50 74 62 FD | 	fltl	arg01
24884     04 50 85 F1 | 	sub	fp, #4
24888     A8 74 02 FB | 	rdlong	arg01, fp
2488c     58 74 62 FD | 	drvl	arg01
24890     1F 20 64 FD | 	waitx	#16
24894     04 50 05 F1 | 	add	fp, #4
24898     A8 74 02 FB | 	rdlong	arg01, fp
2489c     41 74 62 FD | 	dirh	arg01
248a0     08 50 85 F1 | 	sub	fp, #8
248a4     A8 74 02 F6 | 	mov	arg01, fp
248a8     04 50 85 F1 | 	sub	fp, #4
248ac     01 76 06 F6 | 	mov	arg02, #1
248b0     10 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
248b4     90 FE BF FD | 	call	#_fatfs_cc_wait_ready_0419
248b8     00 34 0E F2 | 	cmp	result1, #0 wz
248bc     01 34 06 56 |  if_ne	mov	result1, #1
248c0     08 00 90 5D |  if_ne	jmp	#LR__1442
248c4     0C FF BF FD | 	call	#_fatfs_cc_deselect_0425
248c8                 | ' 
248c8                 | ' 	deselect();
248c8                 | ' 	return 0;
248c8     00 34 06 F6 | 	mov	result1, #0
248cc                 | LR__1442
248cc     A8 F0 03 F6 | 	mov	ptra, fp
248d0     B3 00 A0 FD | 	call	#popregs_
248d4                 | _fatfs_cc_select_0429_ret
248d4     2D 00 64 FD | 	ret
248d8                 | 
248d8                 | _fatfs_cc_rcvr_datablock_0433
248d8     01 4C 05 F6 | 	mov	COUNT_, #1
248dc     A9 00 A0 FD | 	call	#pushregs_
248e0     18 F0 07 F1 | 	add	ptra, #24
248e4     04 50 05 F1 | 	add	fp, #4
248e8     A8 74 62 FC | 	wrlong	arg01, fp
248ec     04 50 05 F1 | 	add	fp, #4
248f0     A8 76 62 FC | 	wrlong	arg02, fp
248f4     1A 34 62 FD | 	getct	result1
248f8     08 50 05 F1 | 	add	fp, #8
248fc     A8 34 62 FC | 	wrlong	result1, fp
24900     14 8C 06 FB | 	rdlong	local01, #20
24904     03 8C 46 F0 | 	shr	local01, #3
24908     04 50 05 F1 | 	add	fp, #4
2490c     A8 8C 62 FC | 	wrlong	local01, fp
24910     14 50 85 F1 | 	sub	fp, #20
24914                 | ' 	BYTE *buff,
24914                 | ' 	UINT btr
24914                 | ' )
24914                 | ' {
24914                 | ' 	BYTE d[2];
24914                 | ' 	UINT tmr, tmout;
24914                 | ' 
24914                 | ' 	tmr = _cnt();
24914                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
24914                 | ' 	for(;;) {
24914                 | LR__1443
24914     0C 50 05 F1 | 	add	fp, #12
24918     A8 74 02 F6 | 	mov	arg01, fp
2491c     0C 50 85 F1 | 	sub	fp, #12
24920     01 76 06 F6 | 	mov	arg02, #1
24924     9C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24928     0C 50 05 F1 | 	add	fp, #12
2492c     A8 8C C2 FA | 	rdbyte	local01, fp
24930     0C 50 85 F1 | 	sub	fp, #12
24934     FF 8C 0E F2 | 	cmp	local01, #255 wz
24938     28 00 90 5D |  if_ne	jmp	#LR__1444
2493c     1A 34 62 FD | 	getct	result1
24940     1A 8D 02 F6 | 	mov	local01, result1
24944     10 50 05 F1 | 	add	fp, #16
24948     A8 76 02 FB | 	rdlong	arg02, fp
2494c     3B 8D 82 F1 | 	sub	local01, arg02
24950     04 50 05 F1 | 	add	fp, #4
24954     A8 76 02 FB | 	rdlong	arg02, fp
24958     14 50 85 F1 | 	sub	fp, #20
2495c     3B 8D 12 F2 | 	cmp	local01, arg02 wc
24960     B0 FF 9F CD |  if_b	jmp	#LR__1443
24964                 | LR__1444
24964     0C 50 05 F1 | 	add	fp, #12
24968     A8 8C C2 FA | 	rdbyte	local01, fp
2496c     0C 50 85 F1 | 	sub	fp, #12
24970     FE 8C 0E F2 | 	cmp	local01, #254 wz
24974     00 34 06 56 |  if_ne	mov	result1, #0
24978     30 00 90 5D |  if_ne	jmp	#LR__1445
2497c     04 50 05 F1 | 	add	fp, #4
24980     A8 74 02 FB | 	rdlong	arg01, fp
24984     04 50 05 F1 | 	add	fp, #4
24988     A8 76 02 FB | 	rdlong	arg02, fp
2498c     08 50 85 F1 | 	sub	fp, #8
24990     30 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24994     0C 50 05 F1 | 	add	fp, #12
24998     A8 74 02 F6 | 	mov	arg01, fp
2499c     0C 50 85 F1 | 	sub	fp, #12
249a0     02 76 06 F6 | 	mov	arg02, #2
249a4     1C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
249a8                 | ' 
249a8                 | ' 	rcvr_mmc(buff, btr);
249a8                 | ' 	rcvr_mmc(d, 2);
249a8                 | ' 
249a8                 | ' 	return 1;
249a8     01 34 06 F6 | 	mov	result1, #1
249ac                 | LR__1445
249ac     A8 F0 03 F6 | 	mov	ptra, fp
249b0     B3 00 A0 FD | 	call	#popregs_
249b4                 | _fatfs_cc_rcvr_datablock_0433_ret
249b4     2D 00 64 FD | 	ret
249b8                 | 
249b8                 | _fatfs_cc_xmit_datablock_0435
249b8     00 4C 05 F6 | 	mov	COUNT_, #0
249bc     A9 00 A0 FD | 	call	#pushregs_
249c0     10 F0 07 F1 | 	add	ptra, #16
249c4     04 50 05 F1 | 	add	fp, #4
249c8     A8 74 62 FC | 	wrlong	arg01, fp
249cc     04 50 05 F1 | 	add	fp, #4
249d0     A8 76 42 FC | 	wrbyte	arg02, fp
249d4     08 50 85 F1 | 	sub	fp, #8
249d8     6C FD BF FD | 	call	#_fatfs_cc_wait_ready_0419
249dc     00 34 0E F2 | 	cmp	result1, #0 wz
249e0     00 34 06 A6 |  if_e	mov	result1, #0
249e4     90 00 90 AD |  if_e	jmp	#LR__1447
249e8     08 50 05 F1 | 	add	fp, #8
249ec     A8 76 C2 FA | 	rdbyte	arg02, fp
249f0     04 50 05 F1 | 	add	fp, #4
249f4     A8 76 42 FC | 	wrbyte	arg02, fp
249f8     A8 74 02 F6 | 	mov	arg01, fp
249fc     0C 50 85 F1 | 	sub	fp, #12
24a00     01 76 06 F6 | 	mov	arg02, #1
24a04     34 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0408
24a08     08 50 05 F1 | 	add	fp, #8
24a0c     A8 76 C2 FA | 	rdbyte	arg02, fp
24a10     08 50 85 F1 | 	sub	fp, #8
24a14     FD 76 0E F2 | 	cmp	arg02, #253 wz
24a18     58 00 90 AD |  if_e	jmp	#LR__1446
24a1c     04 50 05 F1 | 	add	fp, #4
24a20     A8 74 02 FB | 	rdlong	arg01, fp
24a24     04 50 85 F1 | 	sub	fp, #4
24a28     09 76 C6 F9 | 	decod	arg02, #9
24a2c     0C FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0408
24a30     0C 50 05 F1 | 	add	fp, #12
24a34     A8 74 02 F6 | 	mov	arg01, fp
24a38     0C 50 85 F1 | 	sub	fp, #12
24a3c     02 76 06 F6 | 	mov	arg02, #2
24a40     80 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24a44     0C 50 05 F1 | 	add	fp, #12
24a48     A8 74 02 F6 | 	mov	arg01, fp
24a4c     0C 50 85 F1 | 	sub	fp, #12
24a50     01 76 06 F6 | 	mov	arg02, #1
24a54     6C FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24a58     0C 50 05 F1 | 	add	fp, #12
24a5c     A8 76 C2 FA | 	rdbyte	arg02, fp
24a60     0C 50 85 F1 | 	sub	fp, #12
24a64     1F 76 06 F5 | 	and	arg02, #31
24a68     05 76 0E F2 | 	cmp	arg02, #5 wz
24a6c                 | ' 			return 0;
24a6c     00 34 06 56 |  if_ne	mov	result1, #0
24a70     04 00 90 5D |  if_ne	jmp	#LR__1447
24a74                 | LR__1446
24a74                 | ' 	}
24a74                 | ' 
24a74                 | ' 	return 1;
24a74     01 34 06 F6 | 	mov	result1, #1
24a78                 | LR__1447
24a78     A8 F0 03 F6 | 	mov	ptra, fp
24a7c     B3 00 A0 FD | 	call	#popregs_
24a80                 | _fatfs_cc_xmit_datablock_0435_ret
24a80     2D 00 64 FD | 	ret
24a84                 | 
24a84                 | _fatfs_cc_send_cmd_0439
24a84     01 4C 05 F6 | 	mov	COUNT_, #1
24a88     A9 00 A0 FD | 	call	#pushregs_
24a8c     1C F0 07 F1 | 	add	ptra, #28
24a90                 | _fatfs_cc_send_cmd_0439_enter
24a90     04 50 05 F1 | 	add	fp, #4
24a94     A8 74 42 FC | 	wrbyte	arg01, fp
24a98     04 50 05 F1 | 	add	fp, #4
24a9c     A8 76 62 FC | 	wrlong	arg02, fp
24aa0     04 50 85 F1 | 	sub	fp, #4
24aa4     A8 34 C2 FA | 	rdbyte	result1, fp
24aa8     04 50 85 F1 | 	sub	fp, #4
24aac     80 34 CE F7 | 	test	result1, #128 wz
24ab0     44 00 90 AD |  if_e	jmp	#LR__1448
24ab4     04 50 05 F1 | 	add	fp, #4
24ab8     A8 76 C2 FA | 	rdbyte	arg02, fp
24abc     7F 76 06 F5 | 	and	arg02, #127
24ac0     A8 76 42 FC | 	wrbyte	arg02, fp
24ac4     04 50 85 F1 | 	sub	fp, #4
24ac8     37 74 06 F6 | 	mov	arg01, #55
24acc     00 76 06 F6 | 	mov	arg02, #0
24ad0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0439
24ad4     0C 50 05 F1 | 	add	fp, #12
24ad8     A8 34 42 FC | 	wrbyte	result1, fp
24adc     A8 8C C2 FA | 	rdbyte	local01, fp
24ae0     0C 50 85 F1 | 	sub	fp, #12
24ae4     02 8C 16 F2 | 	cmp	local01, #2 wc
24ae8     0C 50 05 31 |  if_ae	add	fp, #12
24aec     A8 34 C2 3A |  if_ae	rdbyte	result1, fp
24af0     0C 50 85 31 |  if_ae	sub	fp, #12
24af4     70 01 90 3D |  if_ae	jmp	#LR__1452
24af8                 | LR__1448
24af8     04 50 05 F1 | 	add	fp, #4
24afc     A8 8C C2 FA | 	rdbyte	local01, fp
24b00     04 50 85 F1 | 	sub	fp, #4
24b04     0C 8C 0E F2 | 	cmp	local01, #12 wz
24b08     14 00 90 AD |  if_e	jmp	#LR__1449
24b0c     C4 FC BF FD | 	call	#_fatfs_cc_deselect_0425
24b10     3C FD BF FD | 	call	#_fatfs_cc_select_0429
24b14     00 34 0E F2 | 	cmp	result1, #0 wz
24b18     FF 34 06 A6 |  if_e	mov	result1, #255
24b1c     48 01 90 AD |  if_e	jmp	#LR__1452
24b20                 | LR__1449
24b20     04 50 05 F1 | 	add	fp, #4
24b24     A8 76 C2 FA | 	rdbyte	arg02, fp
24b28     40 8C 06 F6 | 	mov	local01, #64
24b2c     3B 8D 42 F5 | 	or	local01, arg02
24b30     10 50 05 F1 | 	add	fp, #16
24b34     A8 8C 42 FC | 	wrbyte	local01, fp
24b38     0C 50 85 F1 | 	sub	fp, #12
24b3c     A8 8C 02 FB | 	rdlong	local01, fp
24b40     18 8C 46 F0 | 	shr	local01, #24
24b44     0D 50 05 F1 | 	add	fp, #13
24b48     A8 8C 42 FC | 	wrbyte	local01, fp
24b4c     0D 50 85 F1 | 	sub	fp, #13
24b50     A8 8C 02 FB | 	rdlong	local01, fp
24b54     10 8C 46 F0 | 	shr	local01, #16
24b58     0E 50 05 F1 | 	add	fp, #14
24b5c     A8 8C 42 FC | 	wrbyte	local01, fp
24b60     0E 50 85 F1 | 	sub	fp, #14
24b64     A8 8C 02 FB | 	rdlong	local01, fp
24b68     08 8C 46 F0 | 	shr	local01, #8
24b6c     0F 50 05 F1 | 	add	fp, #15
24b70     A8 8C 42 FC | 	wrbyte	local01, fp
24b74     0F 50 85 F1 | 	sub	fp, #15
24b78     A8 8C 02 FB | 	rdlong	local01, fp
24b7c     10 50 05 F1 | 	add	fp, #16
24b80     A8 8C 42 FC | 	wrbyte	local01, fp
24b84     0C 50 85 F1 | 	sub	fp, #12
24b88     A8 02 48 FC | 	wrbyte	#1, fp
24b8c     08 50 85 F1 | 	sub	fp, #8
24b90     A8 8C C2 FA | 	rdbyte	local01, fp
24b94     04 50 85 F1 | 	sub	fp, #4
24b98     07 8C 4E F7 | 	zerox	local01, #7 wz
24b9c     0C 50 05 A1 |  if_e	add	fp, #12
24ba0     A8 2A 49 AC |  if_e	wrbyte	#149, fp
24ba4     0C 50 85 A1 |  if_e	sub	fp, #12
24ba8     04 50 05 F1 | 	add	fp, #4
24bac     A8 8C C2 FA | 	rdbyte	local01, fp
24bb0     04 50 85 F1 | 	sub	fp, #4
24bb4     08 8C 0E F2 | 	cmp	local01, #8 wz
24bb8     0C 50 05 A1 |  if_e	add	fp, #12
24bbc     A8 0E 49 AC |  if_e	wrbyte	#135, fp
24bc0     0C 50 85 A1 |  if_e	sub	fp, #12
24bc4     0C 50 05 F1 | 	add	fp, #12
24bc8     A8 8C C2 FA | 	rdbyte	local01, fp
24bcc     0D 50 05 F1 | 	add	fp, #13
24bd0     A8 8C 42 FC | 	wrbyte	local01, fp
24bd4     05 50 85 F1 | 	sub	fp, #5
24bd8     A8 74 02 F6 | 	mov	arg01, fp
24bdc     14 50 85 F1 | 	sub	fp, #20
24be0     06 76 06 F6 | 	mov	arg02, #6
24be4     54 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0408
24be8     04 50 05 F1 | 	add	fp, #4
24bec     A8 8C C2 FA | 	rdbyte	local01, fp
24bf0     04 50 85 F1 | 	sub	fp, #4
24bf4     0C 8C 0E F2 | 	cmp	local01, #12 wz
24bf8     10 50 05 A1 |  if_e	add	fp, #16
24bfc     A8 74 02 A6 |  if_e	mov	arg01, fp
24c00     10 50 85 A1 |  if_e	sub	fp, #16
24c04     01 76 06 A6 |  if_e	mov	arg02, #1
24c08     B8 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0415
24c0c     0C 50 05 F1 | 	add	fp, #12
24c10     A8 14 48 FC | 	wrbyte	#10, fp
24c14     0C 50 85 F1 | 	sub	fp, #12
24c18                 | ' 	n = 10;
24c18                 | ' 	do
24c18                 | LR__1450
24c18     10 50 05 F1 | 	add	fp, #16
24c1c     A8 74 02 F6 | 	mov	arg01, fp
24c20     10 50 85 F1 | 	sub	fp, #16
24c24     01 76 06 F6 | 	mov	arg02, #1
24c28     98 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0415
24c2c     10 50 05 F1 | 	add	fp, #16
24c30     A8 8C C2 FA | 	rdbyte	local01, fp
24c34     10 50 85 F1 | 	sub	fp, #16
24c38     80 8C CE F7 | 	test	local01, #128 wz
24c3c     1C 00 90 AD |  if_e	jmp	#LR__1451
24c40     0C 50 05 F1 | 	add	fp, #12
24c44     A8 8C C2 FA | 	rdbyte	local01, fp
24c48     01 8C 86 F1 | 	sub	local01, #1
24c4c     A8 8C 42 FC | 	wrbyte	local01, fp
24c50     A8 8C CA FA | 	rdbyte	local01, fp wz
24c54     0C 50 85 F1 | 	sub	fp, #12
24c58     BC FF 9F 5D |  if_ne	jmp	#LR__1450
24c5c                 | LR__1451
24c5c                 | ' 
24c5c                 | ' 	return d;
24c5c     10 50 05 F1 | 	add	fp, #16
24c60     A8 34 C2 FA | 	rdbyte	result1, fp
24c64     10 50 85 F1 | 	sub	fp, #16
24c68                 | LR__1452
24c68     A8 F0 03 F6 | 	mov	ptra, fp
24c6c     B3 00 A0 FD | 	call	#popregs_
24c70                 | _fatfs_cc_send_cmd_0439_ret
24c70     2D 00 64 FD | 	ret
24c74                 | 
24c74                 | _fatfs_cc_gettimeofday
24c74     04 4C 05 F6 | 	mov	COUNT_, #4
24c78     A9 00 A0 FD | 	call	#pushregs_
24c7c     3A 8D 02 F6 | 	mov	local01, arg01
24c80     74 0E B0 FD | 	call	#__system___getus
24c84     1A 75 02 F6 | 	mov	arg01, result1
24c88     02 00 00 FF 
24c8c     64 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1124
24c90     F0 8E 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24c94     3A 35 02 F6 | 	mov	result1, arg01
24c98     47 35 82 F1 | 	sub	result1, local02
24c9c     A1 07 00 FF 
24ca0     40 34 16 FD | 	qdiv	result1, ##1000000
24ca4     02 00 00 FF 
24ca8     64 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1124
24cac     18 8E 62 FD | 	getqx	local02
24cb0     A1 07 00 FF 
24cb4     40 34 16 FD | 	qdiv	result1, ##1000000
24cb8     00 8E 0E F2 | 	cmp	local02, #0 wz
24cbc     19 90 62 FD | 	getqy	local03
24cc0     28 00 90 AD |  if_e	jmp	#LR__1453
24cc4     02 00 00 FF 
24cc8     60 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1120
24ccc     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24cd0     47 93 02 F1 | 	add	local04, local02
24cd4     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24cd8     48 75 82 F1 | 	sub	arg01, local03
24cdc     04 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
24ce0     F0 74 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24ce4     02 00 00 FF 
24ce8     64 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1124
24cec                 | LR__1453
24cec     02 00 00 FF 
24cf0     60 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1120
24cf4     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24cf8     02 00 00 FF 
24cfc     60 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1120
24d00     46 93 62 FC | 	wrlong	local04, local01
24d04     04 8C 06 F1 | 	add	local01, #4
24d08     46 91 62 FC | 	wrlong	local03, local01
24d0c                 | '         lastsec += secs;
24d0c                 | '         lastus = now - leftover;
24d0c                 | '     }
24d0c                 | '     tv->tv_sec = lastsec;
24d0c                 | '     tv->tv_usec = leftover;
24d0c                 | '     return 0;
24d0c     00 34 06 F6 | 	mov	result1, #0
24d10     A8 F0 03 F6 | 	mov	ptra, fp
24d14     B3 00 A0 FD | 	call	#popregs_
24d18                 | _fatfs_cc_gettimeofday_ret
24d18     2D 00 64 FD | 	ret
24d1c                 | 
24d1c                 | _fatfs_cc___getftab
24d1c     0A 74 16 F2 | 	cmp	arg01, #10 wc
24d20                 | '         return 0;
24d20     00 34 06 36 |  if_ae	mov	result1, #0
24d24     24 00 90 3D |  if_ae	jmp	#_fatfs_cc___getftab_ret
24d28                 | '     }
24d28                 | '     return &__filetab[i];
24d28     3A 35 02 F6 | 	mov	result1, arg01
24d2c     01 34 66 F0 | 	shl	result1, #1
24d30     3A 35 02 F1 | 	add	result1, arg01
24d34     04 34 66 F0 | 	shl	result1, #4
24d38     01 00 00 FF 
24d3c     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
24d40     F0 34 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
24d44     01 00 00 FF 
24d48     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
24d4c                 | _fatfs_cc___getftab_ret
24d4c     2D 00 64 FD | 	ret
24d50                 | 
24d50                 | _fatfs_cc_rename
24d50     03 4C 05 F6 | 	mov	COUNT_, #3
24d54     A9 00 A0 FD | 	call	#pushregs_
24d58     1C F1 07 F1 | 	add	ptra, #284
24d5c     04 50 05 F1 | 	add	fp, #4
24d60     A8 74 62 FC | 	wrlong	arg01, fp
24d64     04 50 05 F1 | 	add	fp, #4
24d68     A8 76 62 FC | 	wrlong	arg02, fp
24d6c     7C A3 05 F1 | 	add	ptr___system__dat__, #380
24d70     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
24d74     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
24d78     10 50 05 F1 | 	add	fp, #16
24d7c     A8 74 62 FC | 	wrlong	arg01, fp
24d80     14 50 85 F1 | 	sub	fp, #20
24d84     A8 76 02 FB | 	rdlong	arg02, fp
24d88     04 50 85 F1 | 	sub	fp, #4
24d8c     00 78 06 F6 | 	mov	arg03, #0
24d90     C0 10 B0 FD | 	call	#__system____getvfsforfile
24d94     10 50 05 F1 | 	add	fp, #16
24d98     A8 34 62 FC | 	wrlong	result1, fp
24d9c     00 34 4E F2 | 	cmps	result1, #0 wz
24da0     10 50 85 F1 | 	sub	fp, #16
24da4     18 00 90 AD |  if_e	jmp	#LR__1454
24da8     10 50 05 F1 | 	add	fp, #16
24dac     A8 78 02 FB | 	rdlong	arg03, fp
24db0     10 50 85 F1 | 	sub	fp, #16
24db4     44 78 06 F1 | 	add	arg03, #68
24db8     3C 79 0A FB | 	rdlong	arg03, arg03 wz
24dbc     14 00 90 5D |  if_ne	jmp	#LR__1455
24dc0                 | LR__1454
24dc0                 | '         return _seterror( 16 );
24dc0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24dc4     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
24dc8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24dcc     01 34 66 F6 | 	neg	result1, #1
24dd0     AC 00 90 FD | 	jmp	#LR__1456
24dd4                 | LR__1455
24dd4     1C 50 05 F1 | 	add	fp, #28
24dd8     A8 74 02 F6 | 	mov	arg01, fp
24ddc     14 50 85 F1 | 	sub	fp, #20
24de0     A8 76 02 FB | 	rdlong	arg02, fp
24de4     08 50 85 F1 | 	sub	fp, #8
24de8     00 78 06 F6 | 	mov	arg03, #0
24dec     64 10 B0 FD | 	call	#__system____getvfsforfile
24df0     14 50 05 F1 | 	add	fp, #20
24df4     A8 34 62 FC | 	wrlong	result1, fp
24df8     04 50 85 F1 | 	sub	fp, #4
24dfc     A8 74 02 FB | 	rdlong	arg01, fp
24e00     10 50 85 F1 | 	sub	fp, #16
24e04     3A 35 0A F2 | 	cmp	result1, arg01 wz
24e08                 | '         return _seterror( 23 );
24e08     18 A2 05 51 |  if_ne	add	ptr___system__dat__, #24
24e0c     D1 2E 68 5C |  if_ne	wrlong	#23, ptr___system__dat__
24e10     18 A2 85 51 |  if_ne	sub	ptr___system__dat__, #24
24e14     01 34 66 56 |  if_ne	neg	result1, #1
24e18     64 00 90 5D |  if_ne	jmp	#LR__1456
24e1c     10 50 05 F1 | 	add	fp, #16
24e20     A8 8C 02 FB | 	rdlong	local01, fp
24e24     44 8C 06 F1 | 	add	local01, #68
24e28     46 8D 02 FB | 	rdlong	local01, local01
24e2c     46 8F 02 FB | 	rdlong	local02, local01
24e30     04 8C 06 F1 | 	add	local01, #4
24e34     46 8D 02 FB | 	rdlong	local01, local01
24e38     08 50 05 F1 | 	add	fp, #8
24e3c     A8 74 02 FB | 	rdlong	arg01, fp
24e40     04 50 05 F1 | 	add	fp, #4
24e44     A8 76 02 F6 | 	mov	arg02, fp
24e48     1C 50 85 F1 | 	sub	fp, #28
24e4c     C9 90 02 F6 | 	mov	local03, objptr
24e50     47 93 01 F6 | 	mov	objptr, local02
24e54     2D 8C 62 FD | 	call	local01
24e58     48 93 01 F6 | 	mov	objptr, local03
24e5c     0C 50 05 F1 | 	add	fp, #12
24e60     A8 34 62 FC | 	wrlong	result1, fp
24e64                 | '     }
24e64                 | '     r = (v->rename)(oldname, newname);
24e64                 | '     return _seterror(r);
24e64     1A 75 0A F6 | 	mov	arg01, result1 wz
24e68     0C 50 85 F1 | 	sub	fp, #12
24e6c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24e70     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
24e74     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24e78     01 34 66 56 |  if_ne	neg	result1, #1
24e7c     00 34 06 A6 |  if_e	mov	result1, #0
24e80                 | LR__1456
24e80     A8 F0 03 F6 | 	mov	ptra, fp
24e84     B3 00 A0 FD | 	call	#popregs_
24e88                 | _fatfs_cc_rename_ret
24e88     2D 00 64 FD | 	ret
24e8c                 | 
24e8c                 | _fatfs_cc__is_leap_year
24e8c     3A 35 52 F6 | 	abs	result1, arg01 wc
24e90     03 34 06 F5 | 	and	result1, #3
24e94     1A 35 8A F6 | 	negc	result1, result1 wz
24e98     38 00 90 5D |  if_ne	jmp	#LR__1458
24e9c     3A 35 52 F6 | 	abs	result1, arg01 wc
24ea0     64 34 16 FD | 	qdiv	result1, #100
24ea4     19 34 62 FD | 	getqy	result1
24ea8     1A 35 8A F6 | 	negc	result1, result1 wz
24eac     1C 00 90 5D |  if_ne	jmp	#LR__1457
24eb0     3A 35 52 F6 | 	abs	result1, arg01 wc
24eb4     90 35 16 FD | 	qdiv	result1, #400
24eb8                 | '       return (0 == y % 400);
24eb8     00 34 06 F6 | 	mov	result1, #0
24ebc     19 3A 62 FD | 	getqy	_var01
24ec0     1D 3B 8A F6 | 	negc	_var01, _var01 wz
24ec4     01 34 06 A6 |  if_e	mov	result1, #1
24ec8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24ecc                 | LR__1457
24ecc                 | '     return 1;
24ecc     01 34 06 F6 | 	mov	result1, #1
24ed0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24ed4                 | LR__1458
24ed4                 | '   }
24ed4                 | '   return 0;
24ed4     00 34 06 F6 | 	mov	result1, #0
24ed8                 | _fatfs_cc__is_leap_year_ret
24ed8     2D 00 64 FD | 	ret
24edc                 | 
24edc                 | _fatfs_cc___tzoffset
24edc     0A 4C 05 F6 | 	mov	COUNT_, #10
24ee0     A9 00 A0 FD | 	call	#pushregs_
24ee4     3A 8D 0A F6 | 	mov	local01, arg01 wz
24ee8     3B 8F 02 F6 | 	mov	local02, arg02
24eec     FF FF FF FF 
24ef0     47 FF 6B FC | 	wrlong	##-1, local02
24ef4     01 90 06 F6 | 	mov	local03, #1
24ef8     46 93 CA 5A |  if_ne	rdbyte	local04, local01 wz
24efc                 | '                 return 0;
24efc     00 34 06 A6 |  if_e	mov	result1, #0
24f00     7C 02 90 AD |  if_e	jmp	#LR__1476
24f04     47 01 68 FC | 	wrlong	#0, local02
24f08     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
24f0c     F0 94 02 F6 | 	mov	local05, ptr__fatfs_cc_dat__
24f10                 | ' 
24f10                 | '        *hasdst = 0;
24f10                 | ' 
24f10                 | ' 	n = stdname;
24f10                 | '         while (*s && isalpha(*s)) {
24f10     F8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #504
24f14     38 B1 9D FE | 	loc	pa,	#(@LR__1460-@LR__1459)
24f18     8C 00 A0 FD | 	call	#FCACHE_LOAD_
24f1c                 | LR__1459
24f1c     46 93 CA FA | 	rdbyte	local04, local01 wz
24f20     48 00 90 AD |  if_e	jmp	#LR__1461
24f24     46 75 C2 FA | 	rdbyte	arg01, local01
24f28                 | ' {
24f28                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24f28     80 74 36 F3 | 	fle	arg01, #128 wc
24f2c                 | '     return __ctype[c];
24f2c     02 00 00 FF 
24f30     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
24f34     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24f38     3A 35 C2 FA | 	rdbyte	result1, arg01
24f3c     02 00 00 FF 
24f40     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
24f44     0C 34 CE F7 | 	test	result1, #12 wz
24f48     20 00 90 AD |  if_e	jmp	#LR__1461
24f4c     46 97 02 F6 | 	mov	local06, local01
24f50     46 99 02 F6 | 	mov	local07, local01
24f54     01 98 06 F1 | 	add	local07, #1
24f58     4B 9B C2 FA | 	rdbyte	local08, local06
24f5c     4C 8D 02 F6 | 	mov	local01, local07
24f60     4A 9B 42 FC | 	wrbyte	local08, local05
24f64     01 94 06 F1 | 	add	local05, #1
24f68     B0 FF 9F FD | 	jmp	#LR__1459
24f6c                 | LR__1460
24f6c                 | LR__1461
24f6c     4A 01 48 FC | 	wrbyte	#0, local05
24f70     00 9C 06 F6 | 	mov	local09, #0
24f74     46 93 C2 FA | 	rdbyte	local04, local01
24f78     2D 92 0E F2 | 	cmp	local04, #45 wz
24f7c     01 90 66 A6 |  if_e	neg	local03, #1
24f80     01 8C 06 A1 |  if_e	add	local01, #1
24f84     C8 B0 9D FE | 	loc	pa,	#(@LR__1463-@LR__1462)
24f88     8C 00 A0 FD | 	call	#FCACHE_LOAD_
24f8c                 | '                 sgn = -1;
24f8c                 | '                 s++;
24f8c                 | '         }
24f8c                 | '         while (isdigit(*s)) {
24f8c                 | LR__1462
24f8c     46 75 C2 FA | 	rdbyte	arg01, local01
24f90                 | ' {
24f90                 | '   return  (__ctype_get(c) & 0x02 ) ;
24f90     80 74 36 F3 | 	fle	arg01, #128 wc
24f94                 | '     return __ctype[c];
24f94     02 00 00 FF 
24f98     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
24f9c     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24fa0     3A 35 C2 FA | 	rdbyte	result1, arg01
24fa4     02 00 00 FF 
24fa8     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
24fac     02 34 CE F7 | 	test	result1, #2 wz
24fb0     28 00 90 AD |  if_e	jmp	#LR__1464
24fb4     4E 93 02 F6 | 	mov	local04, local09
24fb8     02 92 66 F0 | 	shl	local04, #2
24fbc     4E 93 02 F1 | 	add	local04, local09
24fc0     01 92 66 F0 | 	shl	local04, #1
24fc4     46 97 C2 FA | 	rdbyte	local06, local01
24fc8     30 96 86 F1 | 	sub	local06, #48
24fcc     4B 93 02 F1 | 	add	local04, local06
24fd0     49 9D 02 F6 | 	mov	local09, local04
24fd4     01 8C 06 F1 | 	add	local01, #1
24fd8     B0 FF 9F FD | 	jmp	#LR__1462
24fdc                 | LR__1463
24fdc                 | LR__1464
24fdc     07 00 00 FF 
24fe0     10 9C 06 FD | 	qmul	local09, ##3600
24fe4     46 93 C2 FA | 	rdbyte	local04, local01
24fe8     3A 92 0E F2 | 	cmp	local04, #58 wz
24fec     18 9E 62 FD | 	getqx	local10
24ff0     74 00 90 5D |  if_ne	jmp	#LR__1468
24ff4     00 9C 06 F6 | 	mov	local09, #0
24ff8     01 8C 06 F1 | 	add	local01, #1
24ffc     50 B0 9D FE | 	loc	pa,	#(@LR__1466-@LR__1465)
25000     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25004                 | '                 x = 0;
25004                 | '                 s++;
25004                 | '                 while (isdigit(*s)) {
25004                 | LR__1465
25004     46 75 C2 FA | 	rdbyte	arg01, local01
25008                 | ' {
25008                 | '   return  (__ctype_get(c) & 0x02 ) ;
25008     80 74 36 F3 | 	fle	arg01, #128 wc
2500c                 | '     return __ctype[c];
2500c     02 00 00 FF 
25010     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
25014     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
25018     3A 35 C2 FA | 	rdbyte	result1, arg01
2501c     02 00 00 FF 
25020     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
25024     02 34 CE F7 | 	test	result1, #2 wz
25028     28 00 90 AD |  if_e	jmp	#LR__1467
2502c     4E 93 02 F6 | 	mov	local04, local09
25030     02 92 66 F0 | 	shl	local04, #2
25034     4E 93 02 F1 | 	add	local04, local09
25038     01 92 66 F0 | 	shl	local04, #1
2503c     46 97 C2 FA | 	rdbyte	local06, local01
25040     30 96 86 F1 | 	sub	local06, #48
25044     4B 93 02 F1 | 	add	local04, local06
25048     49 9D 02 F6 | 	mov	local09, local04
2504c     01 8C 06 F1 | 	add	local01, #1
25050     B0 FF 9F FD | 	jmp	#LR__1465
25054                 | LR__1466
25054                 | LR__1467
25054     4E 9B 02 F6 | 	mov	local08, local09
25058     04 9A 66 F0 | 	shl	local08, #4
2505c     4E 9B 82 F1 | 	sub	local08, local09
25060     02 9A 66 F0 | 	shl	local08, #2
25064     4D 9F 02 F1 | 	add	local10, local08
25068                 | LR__1468
25068     01 00 00 FF 
2506c     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
25070     F0 94 02 F6 | 	mov	local05, ptr__fatfs_cc_dat__
25074     46 75 C2 FA | 	rdbyte	arg01, local01
25078                 | ' {
25078                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
25078     80 74 36 F3 | 	fle	arg01, #128 wc
2507c                 | '     return __ctype[c];
2507c     01 00 00 FF 
25080     67 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##615
25084     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
25088     3A 35 C2 FA | 	rdbyte	result1, arg01
2508c     02 00 00 FF 
25090     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
25094     0C 34 CE F7 | 	test	result1, #12 wz
25098     50 00 90 AD |  if_e	jmp	#LR__1471
2509c     47 03 68 FC | 	wrlong	#1, local02
250a0                 | '                 *hasdst = 1;
250a0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
250a0                 | LR__1469
250a0     46 93 CA FA | 	rdbyte	local04, local01 wz
250a4     44 00 90 AD |  if_e	jmp	#LR__1470
250a8     46 75 C2 FA | 	rdbyte	arg01, local01
250ac                 | ' {
250ac                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
250ac     80 74 36 F3 | 	fle	arg01, #128 wc
250b0                 | '     return __ctype[c];
250b0     02 00 00 FF 
250b4     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
250b8     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
250bc     3A 35 C2 FA | 	rdbyte	result1, arg01
250c0     02 00 00 FF 
250c4     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
250c8     0C 34 CE F7 | 	test	result1, #12 wz
250cc     1C 00 90 AD |  if_e	jmp	#LR__1470
250d0     46 99 02 F6 | 	mov	local07, local01
250d4     01 98 06 F1 | 	add	local07, #1
250d8     46 9B C2 FA | 	rdbyte	local08, local01
250dc     4C 8D 02 F6 | 	mov	local01, local07
250e0     4A 9B 42 FC | 	wrbyte	local08, local05
250e4     01 94 06 F1 | 	add	local05, #1
250e8     B4 FF 9F FD | 	jmp	#LR__1469
250ec                 | LR__1470
250ec                 | LR__1471
250ec     4A 01 48 FC | 	wrbyte	#0, local05
250f0     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
250f4     F0 92 CA FA | 	rdbyte	local04, ptr__fatfs_cc_dat__ wz
250f8     F8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #504
250fc     18 00 90 AD |  if_e	jmp	#LR__1472
25100     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
25104     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
25108     08 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2510c     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
25110     F0 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #496
25114     18 00 90 FD | 	jmp	#LR__1473
25118                 | LR__1472
25118     01 00 00 FF 
2511c     0A E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##522
25120     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
25124     1A E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
25128     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2512c     F0 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #496
25130                 | LR__1473
25130     01 00 00 FF 
25134     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
25138     F0 92 CA FA | 	rdbyte	local04, ptr__fatfs_cc_dat__ wz
2513c     01 00 00 FF 
25140     01 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##513
25144     1C 00 90 AD |  if_e	jmp	#LR__1474
25148     01 00 00 FF 
2514c     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
25150     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
25154     0D E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
25158     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2515c     F4 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #500
25160     14 00 90 FD | 	jmp	#LR__1475
25164                 | LR__1474
25164     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
25168     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
2516c     04 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
25170     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
25174     F4 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #500
25178                 | LR__1475
25178     4F 91 02 FD | 	qmul	local03, local10
2517c                 | ' 		_tzname[1] = stdname;
2517c                 | ' 
2517c                 | '         return sgn * off;
2517c     18 34 62 FD | 	getqx	result1
25180                 | LR__1476
25180     A8 F0 03 F6 | 	mov	ptra, fp
25184     B3 00 A0 FD | 	call	#popregs_
25188                 | _fatfs_cc___tzoffset_ret
25188     2D 00 64 FD | 	ret
2518c                 | 
2518c                 | _fatfs_cc___indst
2518c     3A 3B 02 F6 | 	mov	_var01, arg01
25190     10 3A 06 F1 | 	add	_var01, #16
25194     1D 3D 02 FB | 	rdlong	_var02, _var01
25198     10 3A 86 F1 | 	sub	_var01, #16
2519c     02 3C 0E F2 | 	cmp	_var02, #2 wz
251a0     30 00 90 5D |  if_ne	jmp	#LR__1477
251a4     07 3C 06 F6 | 	mov	_var02, #7
251a8     18 3A 06 F1 | 	add	_var01, #24
251ac     1D 3F 02 FB | 	rdlong	_var03, _var01
251b0     1F 3D 02 F1 | 	add	_var02, _var03
251b4     0C 3A 86 F1 | 	sub	_var01, #12
251b8     1D 41 02 FB | 	rdlong	_var04, _var01
251bc     20 3D 82 F1 | 	sub	_var02, _var04
251c0     00 3C 56 F2 | 	cmps	_var02, #0 wc
251c4                 | '                         return 1;
251c4     01 34 06 C6 |  if_b	mov	result1, #1
251c8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
251cc                 | '                 return 0;
251cc     00 34 06 F6 | 	mov	result1, #0
251d0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
251d4                 | LR__1477
251d4     10 3A 06 F1 | 	add	_var01, #16
251d8     1D 3D 02 FB | 	rdlong	_var02, _var01
251dc     10 3A 86 F1 | 	sub	_var01, #16
251e0     0A 3C 0E F2 | 	cmp	_var02, #10 wz
251e4     28 00 90 5D |  if_ne	jmp	#LR__1478
251e8     18 3A 06 F1 | 	add	_var01, #24
251ec     1D 3D 02 FB | 	rdlong	_var02, _var01
251f0     0C 3A 86 F1 | 	sub	_var01, #12
251f4     1D 43 02 FB | 	rdlong	_var05, _var01
251f8     21 3D 82 F1 | 	sub	_var02, _var05
251fc     00 3C 56 F2 | 	cmps	_var02, #0 wc
25200                 | '                         return 0;
25200     00 34 06 C6 |  if_b	mov	result1, #0
25204     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
25208                 | '                 return 1;
25208     01 34 06 F6 | 	mov	result1, #1
2520c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
25210                 | LR__1478
25210                 | '         }
25210                 | ' 
25210                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
25210     00 3C 06 F6 | 	mov	_var02, #0
25214     10 3A 06 F1 | 	add	_var01, #16
25218     1D 3F 02 FB | 	rdlong	_var03, _var01
2521c     10 3A 86 F1 | 	sub	_var01, #16
25220     03 3E 56 F2 | 	cmps	_var03, #3 wc
25224     10 00 90 CD |  if_b	jmp	#LR__1479
25228     10 3A 06 F1 | 	add	_var01, #16
2522c     1D 41 02 FB | 	rdlong	_var04, _var01
25230     0A 40 56 F2 | 	cmps	_var04, #10 wc
25234     01 3C 06 C6 |  if_b	mov	_var02, #1
25238                 | LR__1479
25238     1E 35 02 F6 | 	mov	result1, _var02
2523c                 | _fatfs_cc___indst_ret
2523c     2D 00 64 FD | 	ret
25240                 | 
25240                 | _fatfs_cc__rxtxioctl_1434
25240     02 4C 05 F6 | 	mov	COUNT_, #2
25244     A9 00 A0 FD | 	call	#pushregs_
25248     3B 8D 02 F6 | 	mov	local01, arg02
2524c     3C 8F 02 F6 | 	mov	local02, arg03
25250                 | '     switch (req) {
25250     00 8D 0E F2 | 	cmp	local01, #256 wz
25254     0C 00 90 AD |  if_e	jmp	#LR__1480
25258     01 8D 0E F2 | 	cmp	local01, #257 wz
2525c     1C 00 90 AD |  if_e	jmp	#LR__1481
25260     30 00 90 FD | 	jmp	#LR__1482
25264                 | LR__1480
25264     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25268     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
2526c     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
25270     47 35 62 FC | 	wrlong	result1, local02
25274                 | '         *argl = _getrxtxflags();
25274                 | '         return 0;
25274     00 34 06 F6 | 	mov	result1, #0
25278     28 00 90 FD | 	jmp	#LR__1483
2527c                 | LR__1481
2527c     47 75 02 FB | 	rdlong	arg01, local02
25280     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25284     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
25288     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
2528c                 | '         _setrxtxflags(*argl);
2528c                 | '         return 0;
2528c     00 34 06 F6 | 	mov	result1, #0
25290     10 00 90 FD | 	jmp	#LR__1483
25294                 | LR__1482
25294                 | '         return _seterror( 10 );
25294     18 A2 05 F1 | 	add	ptr___system__dat__, #24
25298     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
2529c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
252a0     01 34 66 F6 | 	neg	result1, #1
252a4                 | LR__1483
252a4     A8 F0 03 F6 | 	mov	ptra, fp
252a8     B3 00 A0 FD | 	call	#popregs_
252ac                 | _fatfs_cc__rxtxioctl_1434_ret
252ac     2D 00 64 FD | 	ret
252b0                 | 
252b0                 | _fatfs_cc___dummy_flush_1435
252b0                 | ' {
252b0                 | '     return 0;
252b0     00 34 06 F6 | 	mov	result1, #0
252b4                 | _fatfs_cc___dummy_flush_1435_ret
252b4     2D 00 64 FD | 	ret
252b8                 | 
252b8                 | _fatfs_cc__vfswrite
252b8     09 4C 05 F6 | 	mov	COUNT_, #9
252bc     A9 00 A0 FD | 	call	#pushregs_
252c0     3A 8D 02 F6 | 	mov	local01, arg01
252c4     3B 8F 02 F6 | 	mov	local02, arg02
252c8     3C 91 02 F6 | 	mov	local03, arg03
252cc     47 93 02 F6 | 	mov	local04, local02
252d0     08 8C 06 F1 | 	add	local01, #8
252d4     46 75 02 FB | 	rdlong	arg01, local01
252d8     08 8C 86 F1 | 	sub	local01, #8
252dc     02 74 CE F7 | 	test	arg01, #2 wz
252e0                 | '         return _seterror( 6 );
252e0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
252e4     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
252e8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
252ec     01 34 66 A6 |  if_e	neg	result1, #1
252f0     5C 01 90 AD |  if_e	jmp	#LR__1490
252f4     08 8C 06 F1 | 	add	local01, #8
252f8     46 35 02 FB | 	rdlong	result1, local01
252fc     08 8C 86 F1 | 	sub	local01, #8
25300     40 34 CE F7 | 	test	result1, #64 wz
25304     5C 00 90 AD |  if_e	jmp	#LR__1485
25308     08 8C 06 F1 | 	add	local01, #8
2530c     46 35 02 FB | 	rdlong	result1, local01
25310     08 8C 86 F1 | 	sub	local01, #8
25314     80 34 CE F7 | 	test	result1, #128 wz
25318     48 00 90 AD |  if_e	jmp	#LR__1484
2531c     2C 8C 06 F1 | 	add	local01, #44
25320     46 79 02 FB | 	rdlong	arg03, local01
25324     2C 8C 86 F1 | 	sub	local01, #44
25328     3C 95 02 FB | 	rdlong	local05, arg03
2532c     04 78 06 F1 | 	add	arg03, #4
25330     3C 97 02 FB | 	rdlong	local06, arg03
25334     46 75 02 F6 | 	mov	arg01, local01
25338     00 76 06 F6 | 	mov	arg02, #0
2533c     02 78 06 F6 | 	mov	arg03, #2
25340     C9 98 02 F6 | 	mov	local07, objptr
25344     4A 93 01 F6 | 	mov	objptr, local05
25348     2D 96 62 FD | 	call	local06
2534c     4C 93 01 F6 | 	mov	objptr, local07
25350     08 8C 06 F1 | 	add	local01, #8
25354     46 99 02 FB | 	rdlong	local07, local01
25358     80 98 26 F5 | 	andn	local07, #128
2535c     46 99 62 FC | 	wrlong	local07, local01
25360     08 8C 86 F1 | 	sub	local01, #8
25364                 | LR__1484
25364                 | LR__1485
25364     14 8C 06 F1 | 	add	local01, #20
25368     46 99 0A FB | 	rdlong	local07, local01 wz
2536c     14 8C 86 F1 | 	sub	local01, #20
25370     74 00 90 AD |  if_e	jmp	#LR__1487
25374     14 8C 06 F1 | 	add	local01, #20
25378     46 99 02 FB | 	rdlong	local07, local01
2537c     14 8C 86 F1 | 	sub	local01, #20
25380     4C 95 02 FB | 	rdlong	local05, local07
25384     04 98 06 F1 | 	add	local07, #4
25388     4C 97 02 FB | 	rdlong	local06, local07
2538c     47 77 02 F6 | 	mov	arg02, local02
25390     48 79 02 F6 | 	mov	arg03, local03
25394     46 75 02 F6 | 	mov	arg01, local01
25398     C9 98 02 F6 | 	mov	local07, objptr
2539c     4A 93 01 F6 | 	mov	objptr, local05
253a0     2D 96 62 FD | 	call	local06
253a4     4C 93 01 F6 | 	mov	objptr, local07
253a8     1A 9B 02 F6 | 	mov	local08, result1
253ac     00 9A 56 F2 | 	cmps	local08, #0 wc
253b0     2C 00 90 3D |  if_ae	jmp	#LR__1486
253b4     08 8C 06 F1 | 	add	local01, #8
253b8     46 99 02 FB | 	rdlong	local07, local01
253bc     20 98 46 F5 | 	or	local07, #32
253c0     46 99 62 FC | 	wrlong	local07, local01
253c4                 | '             f->state |=  (0x20) ;
253c4                 | '             return _seterror(r);
253c4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
253c8     D1 9A 62 FC | 	wrlong	local08, ptr___system__dat__
253cc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
253d0     00 9A 0E F2 | 	cmp	local08, #0 wz
253d4     01 34 66 56 |  if_ne	neg	result1, #1
253d8     00 34 06 A6 |  if_e	mov	result1, #0
253dc     70 00 90 FD | 	jmp	#LR__1490
253e0                 | LR__1486
253e0                 | '         }
253e0                 | '         return r;
253e0     4D 35 02 F6 | 	mov	result1, local08
253e4     68 00 90 FD | 	jmp	#LR__1490
253e8                 | LR__1487
253e8     18 8C 06 F1 | 	add	local01, #24
253ec     46 9D 0A FB | 	rdlong	local09, local01 wz
253f0     18 8C 86 F1 | 	sub	local01, #24
253f4                 | '         return _seterror( 6 );
253f4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
253f8     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
253fc     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
25400     01 34 66 A6 |  if_e	neg	result1, #1
25404     48 00 90 AD |  if_e	jmp	#LR__1490
25408     00 9A 06 F6 | 	mov	local08, #0
2540c                 | '     }
2540c                 | '     r = 0;
2540c                 | '     while (count > 0) {
2540c                 | LR__1488
2540c     01 90 16 F2 | 	cmp	local03, #1 wc
25410     38 00 90 CD |  if_b	jmp	#LR__1489
25414     4E 99 02 F6 | 	mov	local07, local09
25418     4C 95 02 FB | 	rdlong	local05, local07
2541c     04 98 06 F1 | 	add	local07, #4
25420     4C 97 02 FB | 	rdlong	local06, local07
25424     49 75 C2 FA | 	rdbyte	arg01, local04
25428     46 77 02 F6 | 	mov	arg02, local01
2542c     C9 98 02 F6 | 	mov	local07, objptr
25430     4A 93 01 F6 | 	mov	objptr, local05
25434     2D 96 62 FD | 	call	local06
25438     4C 93 01 F6 | 	mov	objptr, local07
2543c     1A 9B 02 F1 | 	add	local08, result1
25440     01 90 86 F1 | 	sub	local03, #1
25444     01 92 06 F1 | 	add	local04, #1
25448     C0 FF 9F FD | 	jmp	#LR__1488
2544c                 | LR__1489
2544c                 | '         r += (*tx)(*buf++, f);
2544c                 | '         --count;
2544c                 | '     }
2544c                 | '     return r;
2544c     4D 35 02 F6 | 	mov	result1, local08
25450                 | LR__1490
25450     A8 F0 03 F6 | 	mov	ptra, fp
25454     B3 00 A0 FD | 	call	#popregs_
25458                 | _fatfs_cc__vfswrite_ret
25458     2D 00 64 FD | 	ret
2545c                 | 
2545c                 | _fatfs_cc__vfsread
2545c     0B 4C 05 F6 | 	mov	COUNT_, #11
25460     A9 00 A0 FD | 	call	#pushregs_
25464     28 F0 07 F1 | 	add	ptra, #40
25468     04 50 05 F1 | 	add	fp, #4
2546c     A8 74 62 FC | 	wrlong	arg01, fp
25470     04 50 05 F1 | 	add	fp, #4
25474     A8 76 62 FC | 	wrlong	arg02, fp
25478     04 50 05 F1 | 	add	fp, #4
2547c     A8 78 62 FC | 	wrlong	arg03, fp
25480     04 50 85 F1 | 	sub	fp, #4
25484     A8 8C 02 FB | 	rdlong	local01, fp
25488     14 50 05 F1 | 	add	fp, #20
2548c     A8 8C 62 FC | 	wrlong	local01, fp
25490     04 50 05 F1 | 	add	fp, #4
25494     A8 00 68 FC | 	wrlong	#0, fp
25498     1C 50 85 F1 | 	sub	fp, #28
2549c     A8 8E 02 FB | 	rdlong	local02, fp
254a0     04 50 85 F1 | 	sub	fp, #4
254a4     08 8E 06 F1 | 	add	local02, #8
254a8     47 8D 02 FB | 	rdlong	local01, local02
254ac     01 8C CE F7 | 	test	local01, #1 wz
254b0                 | ' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
254b0                 | '         return _seterror( 6 );
254b0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
254b4     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
254b8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
254bc     01 34 66 A6 |  if_e	neg	result1, #1
254c0     70 02 90 AD |  if_e	jmp	#LR__1497
254c4     04 50 05 F1 | 	add	fp, #4
254c8     A8 8C 02 FB | 	rdlong	local01, fp
254cc     04 50 85 F1 | 	sub	fp, #4
254d0     10 8C 06 F1 | 	add	local01, #16
254d4     46 8D 0A FB | 	rdlong	local01, local01 wz
254d8     AC 00 90 AD |  if_e	jmp	#LR__1492
254dc     04 50 05 F1 | 	add	fp, #4
254e0     A8 74 02 FB | 	rdlong	arg01, fp
254e4     3A 8F 02 F6 | 	mov	local02, arg01
254e8     10 8E 06 F1 | 	add	local02, #16
254ec     47 8D 02 FB | 	rdlong	local01, local02
254f0     46 8F 02 FB | 	rdlong	local02, local01
254f4     04 8C 06 F1 | 	add	local01, #4
254f8     46 8D 02 FB | 	rdlong	local01, local01
254fc     04 50 05 F1 | 	add	fp, #4
25500     A8 76 02 FB | 	rdlong	arg02, fp
25504     04 50 05 F1 | 	add	fp, #4
25508     A8 78 02 FB | 	rdlong	arg03, fp
2550c     0C 50 85 F1 | 	sub	fp, #12
25510     C9 90 02 F6 | 	mov	local03, objptr
25514     47 93 01 F6 | 	mov	objptr, local02
25518     2D 8C 62 FD | 	call	local01
2551c     48 93 01 F6 | 	mov	objptr, local03
25520     10 50 05 F1 | 	add	fp, #16
25524     A8 34 62 FC | 	wrlong	result1, fp
25528     10 50 85 F1 | 	sub	fp, #16
2552c     00 34 56 F2 | 	cmps	result1, #0 wc
25530     44 00 90 3D |  if_ae	jmp	#LR__1491
25534     04 50 05 F1 | 	add	fp, #4
25538     A8 90 02 FB | 	rdlong	local03, fp
2553c     48 8D 02 F6 | 	mov	local01, local03
25540     08 90 06 F1 | 	add	local03, #8
25544     48 91 02 FB | 	rdlong	local03, local03
25548     20 90 46 F5 | 	or	local03, #32
2554c     08 8C 06 F1 | 	add	local01, #8
25550     46 91 62 FC | 	wrlong	local03, local01
25554                 | '             f->state |=  (0x20) ;
25554                 | '             return _seterror(r);
25554     0C 50 05 F1 | 	add	fp, #12
25558     A8 74 0A FB | 	rdlong	arg01, fp wz
2555c     10 50 85 F1 | 	sub	fp, #16
25560     18 A2 05 F1 | 	add	ptr___system__dat__, #24
25564     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
25568     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
2556c     01 34 66 56 |  if_ne	neg	result1, #1
25570     00 34 06 A6 |  if_e	mov	result1, #0
25574     BC 01 90 FD | 	jmp	#LR__1497
25578                 | LR__1491
25578                 | '         }
25578                 | '         return r;
25578     10 50 05 F1 | 	add	fp, #16
2557c     A8 34 02 FB | 	rdlong	result1, fp
25580     10 50 85 F1 | 	sub	fp, #16
25584     AC 01 90 FD | 	jmp	#LR__1497
25588                 | LR__1492
25588     04 50 05 F1 | 	add	fp, #4
2558c     A8 8C 02 FB | 	rdlong	local01, fp
25590     1C 8C 06 F1 | 	add	local01, #28
25594     46 8D 0A FB | 	rdlong	local01, local01 wz
25598     14 50 05 F1 | 	add	fp, #20
2559c     A8 8C 62 FC | 	wrlong	local01, fp
255a0     18 50 85 F1 | 	sub	fp, #24
255a4                 | '         return _seterror( 6 );
255a4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
255a8     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
255ac     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
255b0     01 34 66 A6 |  if_e	neg	result1, #1
255b4     7C 01 90 AD |  if_e	jmp	#LR__1497
255b8     04 50 05 F1 | 	add	fp, #4
255bc     A8 8C 02 FB | 	rdlong	local01, fp
255c0     04 50 85 F1 | 	sub	fp, #4
255c4     24 8C 06 F1 | 	add	local01, #36
255c8     46 93 0A FB | 	rdlong	local04, local01 wz
255cc     90 00 90 AD |  if_e	jmp	#LR__1494
255d0     04 50 05 F1 | 	add	fp, #4
255d4     A8 94 02 FB | 	rdlong	local05, fp
255d8     4A 97 02 F6 | 	mov	local06, local05
255dc     24 96 06 F1 | 	add	local06, #36
255e0     4B 99 02 FB | 	rdlong	local07, local06
255e4     4C 8D 02 F6 | 	mov	local01, local07
255e8     46 8F 02 FB | 	rdlong	local02, local01
255ec     04 8C 06 F1 | 	add	local01, #4
255f0     46 9B 02 FB | 	rdlong	local08, local01
255f4     4D 93 02 F6 | 	mov	local04, local08
255f8     4A 9D 02 F6 | 	mov	local09, local05
255fc     00 9F 06 F6 | 	mov	local10, #256
25600     20 50 05 F1 | 	add	fp, #32
25604     A8 A0 02 F6 | 	mov	local11, fp
25608     4E 75 02 F6 | 	mov	arg01, local09
2560c     00 77 06 F6 | 	mov	arg02, #256
25610     50 79 02 F6 | 	mov	arg03, local11
25614     C9 90 02 F6 | 	mov	local03, objptr
25618     47 93 01 F6 | 	mov	objptr, local02
2561c     24 50 85 F1 | 	sub	fp, #36
25620     2D 92 62 FD | 	call	local04
25624     48 93 01 F6 | 	mov	objptr, local03
25628     10 50 05 F1 | 	add	fp, #16
2562c     A8 34 62 FC | 	wrlong	result1, fp
25630     1A 8F 0A F6 | 	mov	local02, result1 wz
25634     10 50 85 F1 | 	sub	fp, #16
25638     24 00 90 5D |  if_ne	jmp	#LR__1493
2563c     24 50 05 F1 | 	add	fp, #36
25640     A8 96 02 FB | 	rdlong	local06, fp
25644     24 50 85 F1 | 	sub	fp, #36
25648     4B 93 02 F6 | 	mov	local04, local06
2564c     02 92 0E F5 | 	and	local04, #2 wz
25650     01 8C 06 56 |  if_ne	mov	local01, #1
25654     20 50 05 51 |  if_ne	add	fp, #32
25658     A8 02 68 5C |  if_ne	wrlong	#1, fp
2565c     20 50 85 51 |  if_ne	sub	fp, #32
25660                 | LR__1493
25660                 | LR__1494
25660     10 50 05 F1 | 	add	fp, #16
25664     A8 00 68 FC | 	wrlong	#0, fp
25668     10 50 85 F1 | 	sub	fp, #16
2566c                 | '             break_on_nl = 1;
2566c                 | '         }
2566c                 | '     }
2566c                 | '     r = 0;
2566c                 | '     while (count > 0) {
2566c                 | LR__1495
2566c     0C 50 05 F1 | 	add	fp, #12
25670     A8 8C 02 FB | 	rdlong	local01, fp
25674     0C 50 85 F1 | 	sub	fp, #12
25678     01 8C 16 F2 | 	cmp	local01, #1 wc
2567c     A8 00 90 CD |  if_b	jmp	#LR__1496
25680     18 50 05 F1 | 	add	fp, #24
25684     A8 8C 02 FB | 	rdlong	local01, fp
25688     46 8F 02 FB | 	rdlong	local02, local01
2568c     04 8C 06 F1 | 	add	local01, #4
25690     46 93 02 FB | 	rdlong	local04, local01
25694     14 50 85 F1 | 	sub	fp, #20
25698     A8 74 02 FB | 	rdlong	arg01, fp
2569c     04 50 85 F1 | 	sub	fp, #4
256a0     C9 9A 02 F6 | 	mov	local08, objptr
256a4     47 93 01 F6 | 	mov	objptr, local02
256a8     2D 92 62 FD | 	call	local04
256ac     4D 93 01 F6 | 	mov	objptr, local08
256b0     14 50 05 F1 | 	add	fp, #20
256b4     A8 34 62 FC | 	wrlong	result1, fp
256b8     14 50 85 F1 | 	sub	fp, #20
256bc     00 34 56 F2 | 	cmps	result1, #0 wc
256c0     64 00 90 CD |  if_b	jmp	#LR__1496
256c4     1C 50 05 F1 | 	add	fp, #28
256c8     A8 8E 02 FB | 	rdlong	local02, fp
256cc     47 93 02 F6 | 	mov	local04, local02
256d0     01 92 06 F1 | 	add	local04, #1
256d4     A8 92 62 FC | 	wrlong	local04, fp
256d8     08 50 85 F1 | 	sub	fp, #8
256dc     A8 94 02 FB | 	rdlong	local05, fp
256e0     47 95 42 FC | 	wrbyte	local05, local02
256e4     04 50 85 F1 | 	sub	fp, #4
256e8     A8 8C 02 FB | 	rdlong	local01, fp
256ec     01 8C 06 F1 | 	add	local01, #1
256f0     A8 8C 62 FC | 	wrlong	local01, fp
256f4     04 50 85 F1 | 	sub	fp, #4
256f8     A8 8C 02 FB | 	rdlong	local01, fp
256fc     01 8C 86 F1 | 	sub	local01, #1
25700     A8 8C 62 FC | 	wrlong	local01, fp
25704     14 50 05 F1 | 	add	fp, #20
25708     A8 8C 0A FB | 	rdlong	local01, fp wz
2570c     20 50 85 F1 | 	sub	fp, #32
25710     58 FF 9F AD |  if_e	jmp	#LR__1495
25714     14 50 05 F1 | 	add	fp, #20
25718     A8 92 02 FB | 	rdlong	local04, fp
2571c     14 50 85 F1 | 	sub	fp, #20
25720     0A 92 0E F2 | 	cmp	local04, #10 wz
25724                 | '             break;
25724     44 FF 9F 5D |  if_ne	jmp	#LR__1495
25728                 | LR__1496
25728                 | '         }
25728                 | '     }
25728                 | '     return r;
25728     10 50 05 F1 | 	add	fp, #16
2572c     A8 34 02 FB | 	rdlong	result1, fp
25730     10 50 85 F1 | 	sub	fp, #16
25734                 | LR__1497
25734     A8 F0 03 F6 | 	mov	ptra, fp
25738     B3 00 A0 FD | 	call	#popregs_
2573c                 | _fatfs_cc__vfsread_ret
2573c     2D 00 64 FD | 	ret
25740                 | 
25740                 | _fatfs_cc__remove
25740     06 4C 05 F6 | 	mov	COUNT_, #6
25744     A9 00 A0 FD | 	call	#pushregs_
25748     3A 77 02 F6 | 	mov	arg02, arg01
2574c     7C A3 05 F1 | 	add	ptr___system__dat__, #380
25750     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
25754     46 75 02 F6 | 	mov	arg01, local01
25758     00 78 06 F6 | 	mov	arg03, #0
2575c     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
25760     F0 06 B0 FD | 	call	#__system____getvfsforfile
25764     1A 8F 0A F6 | 	mov	local02, result1 wz
25768     20 8E 06 51 |  if_ne	add	local02, #32
2576c     47 75 02 5B |  if_ne	rdlong	arg01, local02
25770     20 8E 86 51 |  if_ne	sub	local02, #32
25774     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
25778                 | ' #line 20 "C:/flexprop/include/libsys/remove.c"
25778                 | '         return _seterror( 16 );
25778     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
2577c     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25780     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
25784     01 34 66 A6 |  if_e	neg	result1, #1
25788     90 00 90 AD |  if_e	jmp	#LR__1500
2578c     40 8E 06 F1 | 	add	local02, #64
25790     47 75 02 FB | 	rdlong	arg01, local02
25794     40 8E 86 F1 | 	sub	local02, #64
25798     3A 91 02 FB | 	rdlong	local03, arg01
2579c     04 74 06 F1 | 	add	arg01, #4
257a0     3A 93 02 FB | 	rdlong	local04, arg01
257a4     46 75 02 F6 | 	mov	arg01, local01
257a8     C9 94 02 F6 | 	mov	local05, objptr
257ac     48 93 01 F6 | 	mov	objptr, local03
257b0     2D 92 62 FD | 	call	local04
257b4     4A 93 01 F6 | 	mov	objptr, local05
257b8     1A 97 02 F6 | 	mov	local06, result1
257bc     FF FF 7F FF 
257c0     F2 97 0E F2 | 	cmp	local06, ##-14 wz
257c4     2C 00 90 5D |  if_ne	jmp	#LR__1498
257c8     3C 8E 06 F1 | 	add	local02, #60
257cc     47 97 02 FB | 	rdlong	local06, local02
257d0     4B 91 02 FB | 	rdlong	local03, local06
257d4     04 96 06 F1 | 	add	local06, #4
257d8     4B 93 02 FB | 	rdlong	local04, local06
257dc     46 75 02 F6 | 	mov	arg01, local01
257e0     C9 94 02 F6 | 	mov	local05, objptr
257e4     48 93 01 F6 | 	mov	objptr, local03
257e8     2D 92 62 FD | 	call	local04
257ec     4A 93 01 F6 | 	mov	objptr, local05
257f0     1A 97 02 F6 | 	mov	local06, result1
257f4                 | LR__1498
257f4     00 96 0E F2 | 	cmp	local06, #0 wz
257f8     1C 00 90 AD |  if_e	jmp	#LR__1499
257fc                 | '         return _seterror(-r);
257fc     4B 75 6A F6 | 	neg	arg01, local06 wz
25800     18 A2 05 F1 | 	add	ptr___system__dat__, #24
25804     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
25808     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
2580c     01 34 66 56 |  if_ne	neg	result1, #1
25810     00 34 06 A6 |  if_e	mov	result1, #0
25814     04 00 90 FD | 	jmp	#LR__1500
25818                 | LR__1499
25818                 | '     }
25818                 | '     return 0;
25818     00 34 06 F6 | 	mov	result1, #0
2581c                 | LR__1500
2581c     A8 F0 03 F6 | 	mov	ptra, fp
25820     B3 00 A0 FD | 	call	#popregs_
25824                 | _fatfs_cc__remove_ret
25824     2D 00 64 FD | 	ret
25828                 | 
25828                 | _fatfs_cc___default_filbuf
25828     04 4C 05 F6 | 	mov	COUNT_, #4
2582c     A9 00 A0 FD | 	call	#pushregs_
25830     3A 8D 02 FB | 	rdlong	local01, arg01
25834     10 74 06 F1 | 	add	arg01, #16
25838     3A 79 02 FB | 	rdlong	arg03, arg01
2583c     10 74 86 F1 | 	sub	arg01, #16
25840     3C 8F 02 FB | 	rdlong	local02, arg03
25844     04 78 06 F1 | 	add	arg03, #4
25848     3C 91 02 FB | 	rdlong	local03, arg03
2584c     0C 8C 06 F1 | 	add	local01, #12
25850     46 77 02 F6 | 	mov	arg02, local01
25854     0C 8C 86 F1 | 	sub	local01, #12
25858     0A 78 C6 F9 | 	decod	arg03, #10
2585c     C9 92 02 F6 | 	mov	local04, objptr
25860     47 93 01 F6 | 	mov	objptr, local02
25864     2D 90 62 FD | 	call	local03
25868     49 93 01 F6 | 	mov	objptr, local04
2586c     1A 93 02 F6 | 	mov	local04, result1
25870     00 92 56 F2 | 	cmps	local04, #0 wc
25874                 | '         return -1;
25874     01 34 66 C6 |  if_b	neg	result1, #1
25878     28 00 90 CD |  if_b	jmp	#LR__1501
2587c     46 93 62 FC | 	wrlong	local04, local01
25880     0C 8C 06 F1 | 	add	local01, #12
25884     46 91 02 F6 | 	mov	local03, local01
25888     08 8C 86 F1 | 	sub	local01, #8
2588c     46 91 62 FC | 	wrlong	local03, local01
25890     04 8C 06 F1 | 	add	local01, #4
25894     46 91 02 FB | 	rdlong	local03, local01
25898     01 90 46 F5 | 	or	local03, #1
2589c     46 91 62 FC | 	wrlong	local03, local01
258a0                 | '     }
258a0                 | '     b->cnt = r;
258a0                 | '     b->ptr = &b->buf[0];
258a0                 | '     b->flags |=  (0x01) ;
258a0                 | '     return r;
258a0     49 35 02 F6 | 	mov	result1, local04
258a4                 | LR__1501
258a4     A8 F0 03 F6 | 	mov	ptra, fp
258a8     B3 00 A0 FD | 	call	#popregs_
258ac                 | _fatfs_cc___default_filbuf_ret
258ac     2D 00 64 FD | 	ret
258b0                 | 
258b0                 | __struct___fmtfile_putchar
258b0     03 4C 05 F6 | 	mov	COUNT_, #3
258b4     A9 00 A0 FD | 	call	#pushregs_
258b8                 | '         return f->putcf(c, f);
258b8     C9 76 02 FB | 	rdlong	arg02, objptr
258bc     18 76 06 F1 | 	add	arg02, #24
258c0     3B 77 02 FB | 	rdlong	arg02, arg02
258c4     3B 8D 02 FB | 	rdlong	local01, arg02
258c8     04 76 06 F1 | 	add	arg02, #4
258cc     3B 8F 02 FB | 	rdlong	local02, arg02
258d0     C9 76 02 FB | 	rdlong	arg02, objptr
258d4     C9 90 02 F6 | 	mov	local03, objptr
258d8     46 93 01 F6 | 	mov	objptr, local01
258dc     2D 8E 62 FD | 	call	local02
258e0     48 93 01 F6 | 	mov	objptr, local03
258e4     A8 F0 03 F6 | 	mov	ptra, fp
258e8     B3 00 A0 FD | 	call	#popregs_
258ec                 | __struct___fmtfile_putchar_ret
258ec     2D 00 64 FD | 	ret
258f0                 | 
258f0                 | __struct___anon_9b5668f900000005_sputc
258f0     C9 3A 02 FB | 	rdlong	_var01, objptr
258f4     04 92 05 F1 | 	add	objptr, #4
258f8     C9 3C 02 FB | 	rdlong	_var02, objptr
258fc     04 92 85 F1 | 	sub	objptr, #4
25900     1E 3B 52 F2 | 	cmps	_var01, _var02 wc
25904     C9 3A 02 CB |  if_b	rdlong	_var01, objptr
25908     1D 3D 02 C6 |  if_b	mov	_var02, _var01
2590c     01 3C 06 C1 |  if_b	add	_var02, #1
25910     C9 3C 62 CC |  if_b	wrlong	_var02, objptr
25914     1D 75 42 CC |  if_b	wrbyte	arg01, _var01
25918                 | '             *ptr++ = c;
25918                 | '         }
25918                 | '         return 1;
25918     01 34 06 F6 | 	mov	result1, #1
2591c                 | __struct___anon_9b5668f900000005_sputc_ret
2591c     2D 00 64 FD | 	ret
25920                 | hubexit
25920     81 00 80 FD | 	jmp	#cogexit
25924                 | 
25924                 | __system___setbaud
25924     14 E0 06 FB | 	rdlong	muldiva_, #20
25928     3A E3 02 F6 | 	mov	muldivb_, arg01
2592c     BB 00 A0 FD | 	call	#divide_
25930     40 7C 64 FD | 	dirl	#62
25934     40 7E 64 FD | 	dirl	#63
25938     D1 E2 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2593c     10 E2 66 F0 | 	shl	muldivb_, #16
25940     07 76 06 F6 | 	mov	arg02, #7
25944     71 77 02 F1 | 	add	arg02, muldivb_
25948     3E F8 0C FC | 	wrpin	#124, #62
2594c     3E 76 16 FC | 	wxpin	arg02, #62
25950     3F 7C 0C FC | 	wrpin	#62, #63
25954     14 76 06 F1 | 	add	arg02, #20
25958     3F 76 16 FC | 	wxpin	arg02, #63
2595c     41 7C 64 FD | 	dirh	#62
25960     41 7E 64 FD | 	dirh	#63
25964                 | __system___setbaud_ret
25964     2D 00 64 FD | 	ret
25968                 | 
25968                 | __system___txraw
25968     01 4C 05 F6 | 	mov	COUNT_, #1
2596c     A9 00 A0 FD | 	call	#pushregs_
25970     3A 8D 02 F6 | 	mov	local01, arg01
25974     D1 34 0A FB | 	rdlong	result1, ptr___system__dat__ wz
25978     C2 01 00 AF 
2597c     00 74 06 A6 |  if_e	mov	arg01, ##230400
25980     A0 FF BF AD |  if_e	call	#__system___setbaud
25984     3E 8C 26 FC | 	wypin	local01, #62
25988     1F 02 64 FD | 	waitx	#1
2598c     78 A6 9D FE | 	loc	pa,	#(@LR__1503-@LR__1502)
25990     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25994                 | LR__1502
25994     40 7C 74 FD | 	testp	#62 wc
25998     F8 FF 9F 3D |  if_ae	jmp	#LR__1502
2599c                 | LR__1503
2599c     01 34 06 F6 | 	mov	result1, #1
259a0     A8 F0 03 F6 | 	mov	ptra, fp
259a4     B3 00 A0 FD | 	call	#popregs_
259a8                 | __system___txraw_ret
259a8     2D 00 64 FD | 	ret
259ac                 | 
259ac                 | __system___rxraw
259ac     0D 4C 05 F6 | 	mov	COUNT_, #13
259b0     A9 00 A0 FD | 	call	#pushregs_
259b4     3A 8D 02 F6 | 	mov	local01, arg01
259b8     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
259bc     C2 01 00 AF 
259c0     00 74 06 A6 |  if_e	mov	arg01, ##230400
259c4     5C FF BF AD |  if_e	call	#__system___setbaud
259c8     00 8C 0E F2 | 	cmp	local01, #0 wz
259cc     1C 00 90 AD |  if_e	jmp	#LR__1504
259d0     14 90 06 FB | 	rdlong	local03, #20
259d4     0A 90 46 F0 | 	shr	local03, #10
259d8     48 8D 02 FD | 	qmul	local01, local03
259dc     1A 34 62 FD | 	getct	result1
259e0     18 92 62 FD | 	getqx	local04
259e4     49 35 02 F1 | 	add	result1, local04
259e8     1A 95 02 F6 | 	mov	local05, result1
259ec                 | LR__1504
259ec     01 96 66 F6 | 	neg	local06, #1
259f0     3F 98 06 F6 | 	mov	local07, #63
259f4     00 9A 06 F6 | 	mov	local08, #0
259f8     04 A2 05 F1 | 	add	ptr___system__dat__, #4
259fc     D1 9C 02 FB | 	rdlong	local09, ptr___system__dat__
25a00     04 A2 85 F1 | 	sub	ptr___system__dat__, #4
25a04                 | LR__1505
25a04     08 9C 16 F4 | 	testb	local09, #8 wc
25a08     09 9C 76 F4 | 	testbn	local09, #9 andc
25a0c     0A 9C 46 F0 | 	shr	local09, #10
25a10     01 9A 06 C6 |  if_b	mov	local08, #1
25a14     40 7E 6C 3D |  if_ae	testp	#63 wz
25a18     01 9A 06 26 |  if_nc_and_z	mov	local08, #1
25a1c     3F 9C 8E 2A |  if_nc_and_z	rdpin	local09, #63
25a20     04 9C 46 20 |  if_nc_and_z	shr	local09, #4
25a24                 | LR__1506
25a24     00 8E 06 F6 | 	mov	local02, #0
25a28     00 9A 0E F2 | 	cmp	local08, #0 wz
25a2c     01 8E 66 56 |  if_ne	neg	local02, #1
25a30     00 9E 06 F6 | 	mov	local10, #0
25a34     00 90 06 F6 | 	mov	local03, #0
25a38     00 8C 0E F2 | 	cmp	local01, #0 wz
25a3c     01 90 66 56 |  if_ne	neg	local03, #1
25a40     00 92 06 F6 | 	mov	local04, #0
25a44     00 A0 06 F6 | 	mov	local11, #0
25a48     1A 34 62 FD | 	getct	result1
25a4c     1A A3 02 F6 | 	mov	local12, result1
25a50     51 A5 02 F6 | 	mov	local13, local12
25a54     4A A5 82 F1 | 	sub	local13, local05
25a58     00 A4 56 F2 | 	cmps	local13, #0 wc
25a5c     00 A0 26 C6 |  if_b	not	local11, #0
25a60     00 A0 0E F2 | 	cmp	local11, #0 wz
25a64     00 92 26 56 |  if_ne	not	local04, #0
25a68     49 91 CA F7 | 	test	local03, local04 wz
25a6c     00 9E 26 56 |  if_ne	not	local10, #0
25a70     4F 8F 4A F5 | 	or	local02, local10 wz
25a74     8C FF 9F AD |  if_e	jmp	#LR__1505
25a78     00 9A 0E F2 | 	cmp	local08, #0 wz
25a7c     4E 97 02 56 |  if_ne	mov	local06, local09
25a80     4B 97 E2 58 |  if_ne	getbyte	local06, local06, #0
25a84     04 A2 05 F1 | 	add	ptr___system__dat__, #4
25a88     D1 9C 62 FC | 	wrlong	local09, ptr___system__dat__
25a8c     04 A2 85 F1 | 	sub	ptr___system__dat__, #4
25a90     4B 35 02 F6 | 	mov	result1, local06
25a94     A8 F0 03 F6 | 	mov	ptra, fp
25a98     B3 00 A0 FD | 	call	#popregs_
25a9c                 | __system___rxraw_ret
25a9c     2D 00 64 FD | 	ret
25aa0                 | 
25aa0                 | __system___getms
25aa0     02 4C 05 F6 | 	mov	COUNT_, #2
25aa4     A9 00 A0 FD | 	call	#pushregs_
25aa8     1A 36 72 FD | 	getct	result2 wc
25aac     1A 8C 62 FD | 	getct	local01
25ab0     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25ab4     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25ab8     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25abc     20 00 90 5D |  if_ne	jmp	#LR__1507
25ac0     14 8E 06 FB | 	rdlong	local02, #20
25ac4     01 00 00 FF 
25ac8     E8 8F 16 FD | 	qdiv	local02, ##1000
25acc     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25ad0     18 34 62 FD | 	getqx	result1
25ad4     1A 8F 02 F6 | 	mov	local02, result1
25ad8     D1 34 62 FC | 	wrlong	result1, ptr___system__dat__
25adc     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25ae0                 | LR__1507
25ae0     28 36 62 FD | 	setq	result2
25ae4     47 8D 12 FD | 	qdiv	local01, local02
25ae8     18 34 62 FD | 	getqx	result1
25aec     A8 F0 03 F6 | 	mov	ptra, fp
25af0     B3 00 A0 FD | 	call	#popregs_
25af4                 | __system___getms_ret
25af4     2D 00 64 FD | 	ret
25af8                 | 
25af8                 | __system___getus
25af8     02 4C 05 F6 | 	mov	COUNT_, #2
25afc     A9 00 A0 FD | 	call	#pushregs_
25b00     1A 36 72 FD | 	getct	result2 wc
25b04     1A 8C 62 FD | 	getct	local01
25b08     10 A2 05 F1 | 	add	ptr___system__dat__, #16
25b0c     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25b10     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
25b14     20 00 90 5D |  if_ne	jmp	#LR__1508
25b18     14 8E 06 FB | 	rdlong	local02, #20
25b1c     A1 07 00 FF 
25b20     40 8E 16 FD | 	qdiv	local02, ##1000000
25b24     10 A2 05 F1 | 	add	ptr___system__dat__, #16
25b28     18 34 62 FD | 	getqx	result1
25b2c     1A 8F 02 F6 | 	mov	local02, result1
25b30     D1 34 62 FC | 	wrlong	result1, ptr___system__dat__
25b34     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
25b38                 | LR__1508
25b38     47 37 12 FD | 	qdiv	result2, local02
25b3c     19 36 62 FD | 	getqy	result2
25b40     28 36 62 FD | 	setq	result2
25b44     47 8D 12 FD | 	qdiv	local01, local02
25b48     18 34 62 FD | 	getqx	result1
25b4c     A8 F0 03 F6 | 	mov	ptra, fp
25b50     B3 00 A0 FD | 	call	#popregs_
25b54                 | __system___getus_ret
25b54     2D 00 64 FD | 	ret
25b58                 | 
25b58                 | __system____builtin_memmove
25b58     3A 3B 02 F6 | 	mov	_var01, arg01
25b5c     3B 75 52 F2 | 	cmps	arg01, arg02 wc
25b60     50 00 90 3D |  if_ae	jmp	#LR__1516
25b64     B8 A4 9D FE | 	loc	pa,	#(@LR__1510-@LR__1509)
25b68     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25b6c                 | LR__1509
25b6c     04 78 56 F2 | 	cmps	arg03, #4 wc
25b70     18 00 90 CD |  if_b	jmp	#LR__1511
25b74     3B 35 02 FB | 	rdlong	result1, arg02
25b78     3A 35 62 FC | 	wrlong	result1, arg01
25b7c     04 74 06 F1 | 	add	arg01, #4
25b80     04 76 06 F1 | 	add	arg02, #4
25b84     04 78 86 F1 | 	sub	arg03, #4
25b88     E0 FF 9F FD | 	jmp	#LR__1509
25b8c                 | LR__1510
25b8c                 | LR__1511
25b8c     3C 3D 0A F6 | 	mov	_var02, arg03 wz
25b90     4C 00 90 AD |  if_e	jmp	#LR__1522
25b94     7C A4 9D FE | 	loc	pa,	#(@LR__1514-@LR__1512)
25b98     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25b9c                 | LR__1512
25b9c     1E 09 D8 FC | 	rep	@LR__1515, _var02
25ba0                 | LR__1513
25ba0     3B 3D C2 FA | 	rdbyte	_var02, arg02
25ba4     3A 3D 42 FC | 	wrbyte	_var02, arg01
25ba8     01 74 06 F1 | 	add	arg01, #1
25bac     01 76 06 F1 | 	add	arg02, #1
25bb0                 | LR__1514
25bb0                 | LR__1515
25bb0     2C 00 90 FD | 	jmp	#LR__1522
25bb4                 | LR__1516
25bb4     3C 75 02 F1 | 	add	arg01, arg03
25bb8     3C 77 02 F1 | 	add	arg02, arg03
25bbc     3C 3F 0A F6 | 	mov	_var03, arg03 wz
25bc0     1C 00 90 AD |  if_e	jmp	#LR__1521
25bc4     4C A4 9D FE | 	loc	pa,	#(@LR__1519-@LR__1517)
25bc8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25bcc                 | LR__1517
25bcc     1F 09 D8 FC | 	rep	@LR__1520, _var03
25bd0                 | LR__1518
25bd0     01 74 86 F1 | 	sub	arg01, #1
25bd4     01 76 86 F1 | 	sub	arg02, #1
25bd8     3B 41 C2 FA | 	rdbyte	_var04, arg02
25bdc     3A 41 42 FC | 	wrbyte	_var04, arg01
25be0                 | LR__1519
25be0                 | LR__1520
25be0                 | LR__1521
25be0                 | LR__1522
25be0     1D 35 02 F6 | 	mov	result1, _var01
25be4                 | __system____builtin_memmove_ret
25be4     2D 00 64 FD | 	ret
25be8                 | 
25be8                 | __system____builtin_strcpy
25be8     3A 3B 02 F6 | 	mov	_var01, arg01
25bec     24 A4 9D FE | 	loc	pa,	#(@LR__1524-@LR__1523)
25bf0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25bf4                 | LR__1523
25bf4     3B 35 CA FA | 	rdbyte	result1, arg02 wz
25bf8     3A 35 42 FC | 	wrbyte	result1, arg01
25bfc     01 76 06 F1 | 	add	arg02, #1
25c00     01 74 06 F1 | 	add	arg01, #1
25c04     EC FF 9F 5D |  if_ne	jmp	#LR__1523
25c08                 | LR__1524
25c08     1D 35 02 F6 | 	mov	result1, _var01
25c0c                 | __system____builtin_strcpy_ret
25c0c     2D 00 64 FD | 	ret
25c10                 | 
25c10                 | __system____topofstack
25c10     00 4C 05 F6 | 	mov	COUNT_, #0
25c14     A9 00 A0 FD | 	call	#pushregs_
25c18     08 F0 07 F1 | 	add	ptra, #8
25c1c     04 50 05 F1 | 	add	fp, #4
25c20     A8 74 62 FC | 	wrlong	arg01, fp
25c24     A8 34 02 F6 | 	mov	result1, fp
25c28     04 50 85 F1 | 	sub	fp, #4
25c2c     A8 F0 03 F6 | 	mov	ptra, fp
25c30     B3 00 A0 FD | 	call	#popregs_
25c34                 | __system____topofstack_ret
25c34     2D 00 64 FD | 	ret
25c38                 | 
25c38                 | __system___make_methodptr
25c38     02 4C 05 F6 | 	mov	COUNT_, #2
25c3c     A9 00 A0 FD | 	call	#pushregs_
25c40     3A 8D 02 F6 | 	mov	local01, arg01
25c44     3B 8F 02 F6 | 	mov	local02, arg02
25c48     08 74 06 F6 | 	mov	arg01, #8
25c4c     B8 2B B0 FD | 	call	#__system___gc_alloc_managed
25c50     00 34 4E F2 | 	cmps	result1, #0 wz
25c54     1A 8D 62 5C |  if_ne	wrlong	local01, result1
25c58     1A 8D 02 56 |  if_ne	mov	local01, result1
25c5c     04 8C 06 51 |  if_ne	add	local01, #4
25c60     46 8F 62 5C |  if_ne	wrlong	local02, local01
25c64     A8 F0 03 F6 | 	mov	ptra, fp
25c68     B3 00 A0 FD | 	call	#popregs_
25c6c                 | __system___make_methodptr_ret
25c6c     2D 00 64 FD | 	ret
25c70                 | 
25c70                 | __system___lockmem
25c70     01 4C 05 F6 | 	mov	COUNT_, #1
25c74     A9 00 A0 FD | 	call	#pushregs_
25c78     00 34 06 F6 | 	mov	result1, #0
25c7c     01 34 62 FD | 	cogid	result1
25c80     00 35 06 F1 | 	add	result1, #256
25c84                 | LR__1525
25c84     3A 8D 0A FB | 	rdlong	local01, arg01 wz
25c88     3A 35 62 AC |  if_e	wrlong	result1, arg01
25c8c     3A 8D 02 AB |  if_e	rdlong	local01, arg01
25c90     3A 8D 02 AB |  if_e	rdlong	local01, arg01
25c94     1A 8D 0A F2 | 	cmp	local01, result1 wz
25c98     E8 FF 9F 5D |  if_ne	jmp	#LR__1525
25c9c     A8 F0 03 F6 | 	mov	ptra, fp
25ca0     B3 00 A0 FD | 	call	#popregs_
25ca4                 | __system___lockmem_ret
25ca4     2D 00 64 FD | 	ret
25ca8                 | 
25ca8                 | __system___funcptr_cmp
25ca8     3A 35 02 FB | 	rdlong	result1, arg01
25cac     3B 3B 02 FB | 	rdlong	_var01, arg02
25cb0     1D 35 8A F1 | 	sub	result1, _var01 wz
25cb4     04 74 06 A1 |  if_e	add	arg01, #4
25cb8     3A 35 02 AB |  if_e	rdlong	result1, arg01
25cbc     04 76 06 A1 |  if_e	add	arg02, #4
25cc0     3B 3B 02 AB |  if_e	rdlong	_var01, arg02
25cc4     1D 35 82 A1 |  if_e	sub	result1, _var01
25cc8                 | __system___funcptr_cmp_ret
25cc8     2D 00 64 FD | 	ret
25ccc                 | 
25ccc                 | __system___tx
25ccc     02 4C 05 F6 | 	mov	COUNT_, #2
25cd0     A9 00 A0 FD | 	call	#pushregs_
25cd4     3A 8D 02 F6 | 	mov	local01, arg01
25cd8     0A 8C 0E F2 | 	cmp	local01, #10 wz
25cdc     18 00 90 5D |  if_ne	jmp	#LR__1526
25ce0     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25ce4     D1 8E 02 FB | 	rdlong	local02, ptr___system__dat__
25ce8     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
25cec     02 8E CE F7 | 	test	local02, #2 wz
25cf0     0D 74 06 56 |  if_ne	mov	arg01, #13
25cf4     70 FC BF 5D |  if_ne	call	#__system___txraw
25cf8                 | LR__1526
25cf8     46 75 02 F6 | 	mov	arg01, local01
25cfc     68 FC BF FD | 	call	#__system___txraw
25d00     A8 F0 03 F6 | 	mov	ptra, fp
25d04     B3 00 A0 FD | 	call	#popregs_
25d08                 | __system___tx_ret
25d08     2D 00 64 FD | 	ret
25d0c                 | 
25d0c                 | __system___rx
25d0c     01 4C 05 F6 | 	mov	COUNT_, #1
25d10     A9 00 A0 FD | 	call	#pushregs_
25d14                 | LR__1527
25d14     00 74 06 F6 | 	mov	arg01, #0
25d18     90 FC BF FD | 	call	#__system___rxraw
25d1c     1A 8D 02 F6 | 	mov	local01, result1
25d20     FF FF 7F FF 
25d24     FF 8D 0E F2 | 	cmp	local01, ##-1 wz
25d28     E8 FF 9F AD |  if_e	jmp	#LR__1527
25d2c     0D 8C 0E F2 | 	cmp	local01, #13 wz
25d30     14 00 90 5D |  if_ne	jmp	#LR__1528
25d34     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25d38     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
25d3c     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
25d40     02 34 CE F7 | 	test	result1, #2 wz
25d44     0A 8C 06 56 |  if_ne	mov	local01, #10
25d48                 | LR__1528
25d48     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25d4c     D1 74 02 FB | 	rdlong	arg01, ptr___system__dat__
25d50     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
25d54     01 74 CE F7 | 	test	arg01, #1 wz
25d58     1C 00 90 AD |  if_e	jmp	#LR__1531
25d5c     7F 8C 0E F2 | 	cmp	local01, #127 wz
25d60     0C 00 90 5D |  if_ne	jmp	#LR__1529
25d64     08 74 06 F6 | 	mov	arg01, #8
25d68     60 FF BF FD | 	call	#__system___tx
25d6c     08 00 90 FD | 	jmp	#LR__1530
25d70                 | LR__1529
25d70     46 75 02 F6 | 	mov	arg01, local01
25d74     54 FF BF FD | 	call	#__system___tx
25d78                 | LR__1530
25d78                 | LR__1531
25d78     46 35 02 F6 | 	mov	result1, local01
25d7c     A8 F0 03 F6 | 	mov	ptra, fp
25d80     B3 00 A0 FD | 	call	#popregs_
25d84                 | __system___rx_ret
25d84     2D 00 64 FD | 	ret
25d88                 | 
25d88                 | __system___waitms
25d88     03 4C 05 F6 | 	mov	COUNT_, #3
25d8c     A9 00 A0 FD | 	call	#pushregs_
25d90     3A 8D 02 F6 | 	mov	local01, arg01
25d94     14 8E 06 FB | 	rdlong	local02, #20
25d98     7C A2 9D FE | 	loc	pa,	#(@LR__1533-@LR__1532)
25d9c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25da0                 | LR__1532
25da0     01 00 00 FF 
25da4     E9 8D 56 F2 | 	cmps	local01, ##1001 wc
25da8     1F 8E 62 3D |  if_ae	waitx	local02
25dac     01 00 00 3F 
25db0     E8 8D 86 31 |  if_ae	sub	local01, ##1000
25db4     E8 FF 9F 3D |  if_ae	jmp	#LR__1532
25db8                 | LR__1533
25db8     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25dbc     D1 90 0A FB | 	rdlong	local03, ptr___system__dat__ wz
25dc0     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25dc4     1C 00 90 5D |  if_ne	jmp	#LR__1534
25dc8     01 00 00 FF 
25dcc     E8 8F 16 FD | 	qdiv	local02, ##1000
25dd0     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25dd4     18 8E 62 FD | 	getqx	local02
25dd8     47 91 02 F6 | 	mov	local03, local02
25ddc     D1 8E 62 FC | 	wrlong	local02, ptr___system__dat__
25de0     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25de4                 | LR__1534
25de4     01 8C 56 F2 | 	cmps	local01, #1 wc
25de8     48 8D 02 3D |  if_ae	qmul	local01, local03
25dec     18 74 62 3D |  if_ae	getqx	arg01
25df0     1F 74 62 3D |  if_ae	waitx	arg01
25df4     A8 F0 03 F6 | 	mov	ptra, fp
25df8     B3 00 A0 FD | 	call	#popregs_
25dfc                 | __system___waitms_ret
25dfc     2D 00 64 FD | 	ret
25e00                 | 
25e00                 | __system___waitus
25e00     02 4C 05 F6 | 	mov	COUNT_, #2
25e04     A9 00 A0 FD | 	call	#pushregs_
25e08     3A 8D 02 F6 | 	mov	local01, arg01
25e0c     10 A2 05 F1 | 	add	ptr___system__dat__, #16
25e10     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25e14     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
25e18     20 00 90 5D |  if_ne	jmp	#LR__1535
25e1c     14 8E 06 FB | 	rdlong	local02, #20
25e20     A1 07 00 FF 
25e24     40 8E 16 FD | 	qdiv	local02, ##1000000
25e28     10 A2 05 F1 | 	add	ptr___system__dat__, #16
25e2c     18 74 62 FD | 	getqx	arg01
25e30     3A 8F 02 F6 | 	mov	local02, arg01
25e34     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
25e38     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
25e3c                 | LR__1535
25e3c     47 8D 02 FD | 	qmul	local01, local02
25e40     18 74 62 FD | 	getqx	arg01
25e44     1F 74 62 FD | 	waitx	arg01
25e48     A8 F0 03 F6 | 	mov	ptra, fp
25e4c     B3 00 A0 FD | 	call	#popregs_
25e50                 | __system___waitus_ret
25e50     2D 00 64 FD | 	ret
25e54                 | 
25e54                 | __system____getvfsforfile
25e54     13 4C 05 F6 | 	mov	COUNT_, #19
25e58     A9 00 A0 FD | 	call	#pushregs_
25e5c     3A 8D 02 F6 | 	mov	local01, arg01
25e60     3B 8F 02 F6 | 	mov	local02, arg02
25e64     3C 91 02 F6 | 	mov	local03, arg03
25e68     B8 A1 9D FE | 	loc	pa,	#(@LR__1537-@LR__1536)
25e6c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25e70                 | LR__1536
25e70     47 35 C2 FA | 	rdbyte	result1, local02
25e74     2F 34 0E F2 | 	cmp	result1, #47 wz
25e78     18 00 90 5D |  if_ne	jmp	#LR__1538
25e7c     01 8E 06 F1 | 	add	local02, #1
25e80     47 35 C2 FA | 	rdbyte	result1, local02
25e84     01 8E 86 F1 | 	sub	local02, #1
25e88     2F 34 0E F2 | 	cmp	result1, #47 wz
25e8c     01 8E 06 A1 |  if_e	add	local02, #1
25e90     DC FF 9F AD |  if_e	jmp	#LR__1536
25e94                 | LR__1537
25e94                 | LR__1538
25e94     47 79 C2 FA | 	rdbyte	arg03, local02
25e98     2F 78 0E F2 | 	cmp	arg03, #47 wz
25e9c     14 00 90 5D |  if_ne	jmp	#LR__1539
25ea0     46 75 02 F6 | 	mov	arg01, local01
25ea4     47 77 02 F6 | 	mov	arg02, local02
25ea8     00 79 06 F6 | 	mov	arg03, #256
25eac     AC 2F B0 FD | 	call	#__system__strncpy
25eb0     8C 00 90 FD | 	jmp	#LR__1544
25eb4                 | LR__1539
25eb4     7C A2 05 F1 | 	add	ptr___system__dat__, #124
25eb8     D1 76 02 F6 | 	mov	arg02, ptr___system__dat__
25ebc     7C A2 85 F1 | 	sub	ptr___system__dat__, #124
25ec0     46 75 02 F6 | 	mov	arg01, local01
25ec4     00 79 06 F6 | 	mov	arg03, #256
25ec8     90 2F B0 FD | 	call	#__system__strncpy
25ecc     47 93 CA FA | 	rdbyte	local04, local02 wz
25ed0     6C 00 90 AD |  if_e	jmp	#LR__1543
25ed4     47 95 C2 FA | 	rdbyte	local05, local02
25ed8     2E 94 0E F2 | 	cmp	local05, #46 wz
25edc     18 00 90 5D |  if_ne	jmp	#LR__1540
25ee0     01 8E 06 F1 | 	add	local02, #1
25ee4     47 97 C2 FA | 	rdbyte	local06, local02
25ee8     01 8E 86 F1 | 	sub	local02, #1
25eec     4B 99 02 F6 | 	mov	local07, local06
25ef0     07 98 4E F7 | 	zerox	local07, #7 wz
25ef4     48 00 90 AD |  if_e	jmp	#LR__1543
25ef8                 | LR__1540
25ef8     46 93 C2 FA | 	rdbyte	local04, local01
25efc     2F 92 0E F2 | 	cmp	local04, #47 wz
25f00     18 00 90 5D |  if_ne	jmp	#LR__1541
25f04     01 8C 06 F1 | 	add	local01, #1
25f08     46 99 C2 FA | 	rdbyte	local07, local01
25f0c     01 8C 86 F1 | 	sub	local01, #1
25f10     4C 95 02 F6 | 	mov	local05, local07
25f14     07 94 4E F7 | 	zerox	local05, #7 wz
25f18     14 00 90 AD |  if_e	jmp	#LR__1542
25f1c                 | LR__1541
25f1c     4B 01 00 FF 
25f20     E4 77 06 F6 | 	mov	arg02, ##@LR__1831
25f24     46 75 02 F6 | 	mov	arg01, local01
25f28     00 79 06 F6 | 	mov	arg03, #256
25f2c     7C 2F B0 FD | 	call	#__system__strncat
25f30                 | LR__1542
25f30     46 75 02 F6 | 	mov	arg01, local01
25f34     47 77 02 F6 | 	mov	arg02, local02
25f38     00 79 06 F6 | 	mov	arg03, #256
25f3c     6C 2F B0 FD | 	call	#__system__strncat
25f40                 | LR__1543
25f40                 | LR__1544
25f40     46 93 CA FA | 	rdbyte	local04, local01 wz
25f44     20 00 90 AD |  if_e	jmp	#LR__1545
25f48     46 95 C2 FA | 	rdbyte	local05, local01
25f4c     2F 94 0E F2 | 	cmp	local05, #47 wz
25f50     2C 00 90 5D |  if_ne	jmp	#LR__1546
25f54     01 8C 06 F1 | 	add	local01, #1
25f58     46 99 C2 FA | 	rdbyte	local07, local01
25f5c     01 8C 86 F1 | 	sub	local01, #1
25f60     07 98 4E F7 | 	zerox	local07, #7 wz
25f64     18 00 90 5D |  if_ne	jmp	#LR__1546
25f68                 | LR__1545
25f68     01 00 00 FF 
25f6c     7C A2 05 F1 | 	add	ptr___system__dat__, ##636
25f70     D1 34 02 F6 | 	mov	result1, ptr___system__dat__
25f74     01 00 00 FF 
25f78     7C A2 85 F1 | 	sub	ptr___system__dat__, ##636
25f7c     2C 02 90 FD | 	jmp	#LR__1561
25f80                 | LR__1546
25f80     00 9A 06 F6 | 	mov	local08, #0
25f84                 | LR__1547
25f84     04 9A 56 F2 | 	cmps	local08, #4 wc
25f88     0C 02 90 3D |  if_ae	jmp	#LR__1560
25f8c     4D 93 02 F6 | 	mov	local04, local08
25f90     02 92 66 F0 | 	shl	local04, #2
25f94     5C A2 05 F1 | 	add	ptr___system__dat__, #92
25f98     D1 92 02 F1 | 	add	local04, ptr___system__dat__
25f9c     49 99 0A FB | 	rdlong	local07, local04 wz
25fa0     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
25fa4     E8 01 90 AD |  if_e	jmp	#LR__1559
25fa8     4D 95 02 F6 | 	mov	local05, local08
25fac     02 94 66 F0 | 	shl	local05, #2
25fb0     5C A2 05 F1 | 	add	ptr___system__dat__, #92
25fb4     D1 94 02 F1 | 	add	local05, ptr___system__dat__
25fb8     4A 75 02 FB | 	rdlong	arg01, local05
25fbc     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
25fc0     00 9C 06 F6 | 	mov	local09, #0
25fc4     48 A0 9D FE | 	loc	pa,	#(@LR__1549-@LR__1548)
25fc8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25fcc                 | LR__1548
25fcc     3A 35 CA FA | 	rdbyte	result1, arg01 wz
25fd0     01 9C 06 51 |  if_ne	add	local09, #1
25fd4     01 74 06 51 |  if_ne	add	arg01, #1
25fd8     F0 FF 9F 5D |  if_ne	jmp	#LR__1548
25fdc                 | LR__1549
25fdc     4E 9F 02 F6 | 	mov	local10, local09
25fe0     4F 95 02 F6 | 	mov	local05, local10
25fe4     46 95 02 F1 | 	add	local05, local01
25fe8     4A 93 C2 FA | 	rdbyte	local04, local05
25fec     2F 92 0E F2 | 	cmp	local04, #47 wz
25ff0     4F A1 02 56 |  if_ne	mov	local11, local10
25ff4     46 A3 02 56 |  if_ne	mov	local12, local01
25ff8     51 A1 02 51 |  if_ne	add	local11, local12
25ffc     50 97 CA 5A |  if_ne	rdbyte	local06, local11 wz
26000     8C 01 90 5D |  if_ne	jmp	#LR__1558
26004     4D 99 02 F6 | 	mov	local07, local08
26008     02 98 66 F0 | 	shl	local07, #2
2600c     5C A2 05 F1 | 	add	ptr___system__dat__, #92
26010     D1 A4 02 F6 | 	mov	local13, ptr___system__dat__
26014     D1 98 02 F1 | 	add	local07, ptr___system__dat__
26018     4C A7 02 FB | 	rdlong	local14, local07
2601c     4F A9 02 F6 | 	mov	local15, local10
26020     46 75 02 F6 | 	mov	arg01, local01
26024     53 77 02 F6 | 	mov	arg02, local14
26028     54 79 02 F6 | 	mov	arg03, local15
2602c     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
26030     00 2F B0 FD | 	call	#__system__strncmp
26034     1A AB 0A F6 | 	mov	local16, result1 wz
26038     54 01 90 5D |  if_ne	jmp	#LR__1558
2603c     4D 93 02 F6 | 	mov	local04, local08
26040     02 92 66 F0 | 	shl	local04, #2
26044     6C A2 05 F1 | 	add	ptr___system__dat__, #108
26048     D1 92 02 F1 | 	add	local04, ptr___system__dat__
2604c     49 AD 02 FB | 	rdlong	local17, local04
26050     6C A2 85 F1 | 	sub	ptr___system__dat__, #108
26054     0C A0 9D FE | 	loc	pa,	#(@LR__1552-@LR__1550)
26058     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2605c                 | LR__1550
2605c     4F 95 02 F6 | 	mov	local05, local10
26060     01 94 06 F1 | 	add	local05, #1
26064     4A 99 02 F6 | 	mov	local07, local05
26068     46 97 02 F6 | 	mov	local06, local01
2606c     46 99 02 F1 | 	add	local07, local01
26070     4C 93 C2 FA | 	rdbyte	local04, local07
26074     2E 92 0E F2 | 	cmp	local04, #46 wz
26078     44 00 90 5D |  if_ne	jmp	#LR__1553
2607c     4F A3 02 F6 | 	mov	local12, local10
26080     02 A2 06 F1 | 	add	local12, #2
26084     51 AB 02 F6 | 	mov	local16, local12
26088     46 A7 02 F6 | 	mov	local14, local01
2608c     46 AB 02 F1 | 	add	local16, local01
26090     55 A1 C2 FA | 	rdbyte	local11, local16
26094     2F A0 0E F2 | 	cmp	local11, #47 wz
26098     1C 00 90 AD |  if_e	jmp	#LR__1551
2609c     4F A5 02 F6 | 	mov	local13, local10
260a0     02 A4 06 F1 | 	add	local13, #2
260a4     52 AF 02 F6 | 	mov	local18, local13
260a8     46 B1 02 F6 | 	mov	local19, local01
260ac     46 AF 02 F1 | 	add	local18, local01
260b0     57 A9 CA FA | 	rdbyte	local15, local18 wz
260b4     08 00 90 5D |  if_ne	jmp	#LR__1553
260b8                 | LR__1551
260b8     01 9E 06 F1 | 	add	local10, #1
260bc     9C FF 9F FD | 	jmp	#LR__1550
260c0                 | LR__1552
260c0                 | LR__1553
260c0     00 90 0E F2 | 	cmp	local03, #0 wz
260c4     48 75 02 56 |  if_ne	mov	arg01, local03
260c8     46 77 02 56 |  if_ne	mov	arg02, local01
260cc     00 79 06 56 |  if_ne	mov	arg03, #256
260d0     88 2D B0 5D |  if_ne	call	#__system__strncpy
260d4     46 77 02 F6 | 	mov	arg02, local01
260d8     4F 77 02 F1 | 	add	arg02, local10
260dc     01 76 06 F1 | 	add	arg02, #1
260e0     46 75 02 F6 | 	mov	arg01, local01
260e4     00 FB BF FD | 	call	#__system____builtin_strcpy
260e8     46 75 02 F6 | 	mov	arg01, local01
260ec     00 9C 06 F6 | 	mov	local09, #0
260f0     1C 9F 9D FE | 	loc	pa,	#(@LR__1555-@LR__1554)
260f4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
260f8                 | LR__1554
260f8     3A 35 CA FA | 	rdbyte	result1, arg01 wz
260fc     01 9C 06 51 |  if_ne	add	local09, #1
26100     01 74 06 51 |  if_ne	add	arg01, #1
26104     F0 FF 9F 5D |  if_ne	jmp	#LR__1554
26108                 | LR__1555
26108     4E 35 02 F6 | 	mov	result1, local09
2610c     1A 9F 02 F6 | 	mov	local10, result1
26110                 | LR__1556
26110     01 9E 56 F2 | 	cmps	local10, #1 wc
26114     70 00 90 CD |  if_b	jmp	#LR__1557
26118     4F 95 02 F6 | 	mov	local05, local10
2611c     46 95 02 F1 | 	add	local05, local01
26120     4A 93 C2 FA | 	rdbyte	local04, local05
26124     2F 92 0E F2 | 	cmp	local04, #47 wz
26128     4F 93 02 A6 |  if_e	mov	local04, local10
2612c     46 93 02 A1 |  if_e	add	local04, local01
26130     49 01 48 AC |  if_e	wrbyte	#0, local04
26134     01 9E 86 A1 |  if_e	sub	local10, #1
26138     D4 FF 9F AD |  if_e	jmp	#LR__1556
2613c     4F 95 02 F6 | 	mov	local05, local10
26140     46 95 02 F1 | 	add	local05, local01
26144     4A 93 C2 FA | 	rdbyte	local04, local05
26148     2E 92 0E F2 | 	cmp	local04, #46 wz
2614c     38 00 90 5D |  if_ne	jmp	#LR__1557
26150     02 9E 56 F2 | 	cmps	local10, #2 wc
26154     30 00 90 CD |  if_b	jmp	#LR__1557
26158     4F A3 02 F6 | 	mov	local12, local10
2615c     01 A2 86 F1 | 	sub	local12, #1
26160     46 A3 02 F1 | 	add	local12, local01
26164     51 97 C2 FA | 	rdbyte	local06, local12
26168     2F 96 0E F2 | 	cmp	local06, #47 wz
2616c     18 00 90 5D |  if_ne	jmp	#LR__1557
26170     4F 95 02 F6 | 	mov	local05, local10
26174     01 94 86 F1 | 	sub	local05, #1
26178     46 95 02 F1 | 	add	local05, local01
2617c     4A 01 48 FC | 	wrbyte	#0, local05
26180     02 9E 86 F1 | 	sub	local10, #2
26184     88 FF 9F FD | 	jmp	#LR__1556
26188                 | LR__1557
26188     56 35 02 F6 | 	mov	result1, local17
2618c     1C 00 90 FD | 	jmp	#LR__1561
26190                 | LR__1558
26190                 | LR__1559
26190     01 9A 06 F1 | 	add	local08, #1
26194     EC FD 9F FD | 	jmp	#LR__1547
26198                 | LR__1560
26198     01 00 00 FF 
2619c     EC A2 05 F1 | 	add	ptr___system__dat__, ##748
261a0     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
261a4     01 00 00 FF 
261a8     EC A2 85 F1 | 	sub	ptr___system__dat__, ##748
261ac                 | LR__1561
261ac     A8 F0 03 F6 | 	mov	ptra, fp
261b0     B3 00 A0 FD | 	call	#popregs_
261b4                 | __system____getvfsforfile_ret
261b4     2D 00 64 FD | 	ret
261b8                 | 
261b8                 | __system___basic_print_nl
261b8     0A 76 06 F6 | 	mov	arg02, #10
261bc     00 78 06 F6 | 	mov	arg03, #0
261c0     08 00 B0 FD | 	call	#__system___basic_print_char
261c4     01 34 06 F6 | 	mov	result1, #1
261c8                 | __system___basic_print_nl_ret
261c8     2D 00 64 FD | 	ret
261cc                 | 
261cc                 | __system___basic_print_char
261cc     03 4C 05 F6 | 	mov	COUNT_, #3
261d0     A9 00 A0 FD | 	call	#pushregs_
261d4     3B 8D 02 F6 | 	mov	local01, arg02
261d8     B8 32 B0 FD | 	call	#__system___gettxfunc
261dc     1A 75 0A F6 | 	mov	arg01, result1 wz
261e0     00 34 06 A6 |  if_e	mov	result1, #0
261e4     24 00 90 AD |  if_e	jmp	#LR__1562
261e8     3A 8F 02 FB | 	rdlong	local02, arg01
261ec     04 74 06 F1 | 	add	arg01, #4
261f0     3A 91 02 FB | 	rdlong	local03, arg01
261f4     46 75 02 F6 | 	mov	arg01, local01
261f8     C9 8C 02 F6 | 	mov	local01, objptr
261fc     47 93 01 F6 | 	mov	objptr, local02
26200     2D 90 62 FD | 	call	local03
26204     46 93 01 F6 | 	mov	objptr, local01
26208     01 34 06 F6 | 	mov	result1, #1
2620c                 | LR__1562
2620c     A8 F0 03 F6 | 	mov	ptra, fp
26210     B3 00 A0 FD | 	call	#popregs_
26214                 | __system___basic_print_char_ret
26214     2D 00 64 FD | 	ret
26218                 | 
26218                 | __system___basic_print_string
26218     03 4C 05 F6 | 	mov	COUNT_, #3
2621c     A9 00 A0 FD | 	call	#pushregs_
26220     3B 8D 02 F6 | 	mov	local01, arg02
26224     3C 8F 02 F6 | 	mov	local02, arg03
26228     68 32 B0 FD | 	call	#__system___gettxfunc
2622c     1A 91 0A F6 | 	mov	local03, result1 wz
26230     00 34 06 A6 |  if_e	mov	result1, #0
26234     18 00 90 AD |  if_e	jmp	#LR__1563
26238     00 8C 0E F2 | 	cmp	local01, #0 wz
2623c     00 34 06 A6 |  if_e	mov	result1, #0
26240     47 77 02 56 |  if_ne	mov	arg02, local02
26244     46 79 02 56 |  if_ne	mov	arg03, local01
26248     48 75 02 56 |  if_ne	mov	arg01, local03
2624c     D0 00 B0 5D |  if_ne	call	#__system___fmtstr
26250                 | LR__1563
26250     A8 F0 03 F6 | 	mov	ptra, fp
26254     B3 00 A0 FD | 	call	#popregs_
26258                 | __system___basic_print_string_ret
26258     2D 00 64 FD | 	ret
2625c                 | 
2625c                 | __system___basic_print_integer
2625c     04 4C 05 F6 | 	mov	COUNT_, #4
26260     A9 00 A0 FD | 	call	#pushregs_
26264     3B 8D 02 F6 | 	mov	local01, arg02
26268     3C 8F 02 F6 | 	mov	local02, arg03
2626c     3D 91 02 F6 | 	mov	local03, arg04
26270     20 32 B0 FD | 	call	#__system___gettxfunc
26274     1A 93 0A F6 | 	mov	local04, result1 wz
26278     00 34 06 A6 |  if_e	mov	result1, #0
2627c     47 77 02 56 |  if_ne	mov	arg02, local02
26280     46 79 02 56 |  if_ne	mov	arg03, local01
26284     48 7B 02 56 |  if_ne	mov	arg04, local03
26288     49 75 02 56 |  if_ne	mov	arg01, local04
2628c     7C 01 B0 5D |  if_ne	call	#__system___fmtnum
26290     A8 F0 03 F6 | 	mov	ptra, fp
26294     B3 00 A0 FD | 	call	#popregs_
26298                 | __system___basic_print_integer_ret
26298     2D 00 64 FD | 	ret
2629c                 | 
2629c                 | __system____lockio
2629c     30 32 B0 FD | 	call	#__system___getiolock_1306
262a0     1A 75 02 F6 | 	mov	arg01, result1
262a4     C8 F9 BF FD | 	call	#__system___lockmem
262a8     00 34 06 F6 | 	mov	result1, #0
262ac                 | __system____lockio_ret
262ac     2D 00 64 FD | 	ret
262b0                 | 
262b0                 | __system____unlockio
262b0     1C 32 B0 FD | 	call	#__system___getiolock_1306
262b4     1A 01 68 FC | 	wrlong	#0, result1
262b8     00 34 06 F6 | 	mov	result1, #0
262bc                 | __system____unlockio_ret
262bc     2D 00 64 FD | 	ret
262c0                 | 
262c0                 | __system___fmtchar
262c0     00 4C 05 F6 | 	mov	COUNT_, #0
262c4     A9 00 A0 FD | 	call	#pushregs_
262c8     14 F0 07 F1 | 	add	ptra, #20
262cc     04 50 05 F1 | 	add	fp, #4
262d0     A8 74 62 FC | 	wrlong	arg01, fp
262d4     04 50 05 F1 | 	add	fp, #4
262d8     A8 76 62 FC | 	wrlong	arg02, fp
262dc     04 50 05 F1 | 	add	fp, #4
262e0     A8 78 62 FC | 	wrlong	arg03, fp
262e4     04 50 05 F1 | 	add	fp, #4
262e8     A8 78 42 FC | 	wrbyte	arg03, fp
262ec     01 50 05 F1 | 	add	fp, #1
262f0     A8 00 48 FC | 	wrbyte	#0, fp
262f4     0D 50 85 F1 | 	sub	fp, #13
262f8     A8 74 02 FB | 	rdlong	arg01, fp
262fc     04 50 05 F1 | 	add	fp, #4
26300     A8 76 02 FB | 	rdlong	arg02, fp
26304     08 50 05 F1 | 	add	fp, #8
26308     A8 78 02 F6 | 	mov	arg03, fp
2630c     10 50 85 F1 | 	sub	fp, #16
26310     0C 00 B0 FD | 	call	#__system___fmtstr
26314     A8 F0 03 F6 | 	mov	ptra, fp
26318     B3 00 A0 FD | 	call	#popregs_
2631c                 | __system___fmtchar_ret
2631c     2D 00 64 FD | 	ret
26320                 | 
26320                 | __system___fmtstr
26320     0A 4C 05 F6 | 	mov	COUNT_, #10
26324     A9 00 A0 FD | 	call	#pushregs_
26328     3A 8D 02 F6 | 	mov	local01, arg01
2632c     3B 8F 02 F6 | 	mov	local02, arg02
26330     3C 91 02 F6 | 	mov	local03, arg03
26334     47 7B E2 F8 | 	getbyte	arg04, local02, #0
26338     48 75 02 F6 | 	mov	arg01, local03
2633c     00 92 06 F6 | 	mov	local04, #0
26340     CC 9C 9D FE | 	loc	pa,	#(@LR__1565-@LR__1564)
26344     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26348                 | LR__1564
26348     3A 35 CA FA | 	rdbyte	result1, arg01 wz
2634c     01 92 06 51 |  if_ne	add	local04, #1
26350     01 74 06 51 |  if_ne	add	arg01, #1
26354     F0 FF 9F 5D |  if_ne	jmp	#LR__1564
26358                 | LR__1565
26358     49 95 02 F6 | 	mov	local05, local04
2635c     00 7A 0E F2 | 	cmp	arg04, #0 wz
26360     3D 95 7A 53 |  if_ne	fles	local05, arg04 wcz
26364     47 77 02 F6 | 	mov	arg02, local02
26368     4A 79 02 F6 | 	mov	arg03, local05
2636c     46 75 02 F6 | 	mov	arg01, local01
26370     02 7A 06 F6 | 	mov	arg04, #2
26374     8C 2D B0 FD | 	call	#__system___fmtpad
26378     1A 97 02 F6 | 	mov	local06, result1
2637c     00 96 56 F2 | 	cmps	local06, #0 wc
26380     4B 35 02 C6 |  if_b	mov	result1, local06
26384     78 00 90 CD |  if_b	jmp	#LR__1568
26388     00 98 06 F6 | 	mov	local07, #0
2638c                 | LR__1566
2638c     4A 99 52 F2 | 	cmps	local07, local05 wc
26390     44 00 90 3D |  if_ae	jmp	#LR__1567
26394     46 75 02 F6 | 	mov	arg01, local01
26398     3A 93 02 FB | 	rdlong	local04, arg01
2639c     04 74 06 F1 | 	add	arg01, #4
263a0     3A 9B 02 FB | 	rdlong	local08, arg01
263a4     48 75 C2 FA | 	rdbyte	arg01, local03
263a8     C9 9C 02 F6 | 	mov	local09, objptr
263ac     49 93 01 F6 | 	mov	objptr, local04
263b0     2D 9A 62 FD | 	call	local08
263b4     4E 93 01 F6 | 	mov	objptr, local09
263b8     1A 9D 02 F6 | 	mov	local09, result1
263bc     00 9C 56 F2 | 	cmps	local09, #0 wc
263c0     01 90 06 F1 | 	add	local03, #1
263c4     4E 35 02 C6 |  if_b	mov	result1, local09
263c8     34 00 90 CD |  if_b	jmp	#LR__1568
263cc     4E 97 02 F1 | 	add	local06, local09
263d0     01 98 06 F1 | 	add	local07, #1
263d4     B4 FF 9F FD | 	jmp	#LR__1566
263d8                 | LR__1567
263d8     47 77 02 F6 | 	mov	arg02, local02
263dc     4A 79 02 F6 | 	mov	arg03, local05
263e0     46 75 02 F6 | 	mov	arg01, local01
263e4     01 7A 06 F6 | 	mov	arg04, #1
263e8     18 2D B0 FD | 	call	#__system___fmtpad
263ec     1A 9F 02 F6 | 	mov	local10, result1
263f0     00 9E 56 F2 | 	cmps	local10, #0 wc
263f4     4F 35 02 C6 |  if_b	mov	result1, local10
263f8     4F 97 02 31 |  if_ae	add	local06, local10
263fc     4B 35 02 36 |  if_ae	mov	result1, local06
26400                 | LR__1568
26400     A8 F0 03 F6 | 	mov	ptra, fp
26404     B3 00 A0 FD | 	call	#popregs_
26408                 | __system___fmtstr_ret
26408     2D 00 64 FD | 	ret
2640c                 | 
2640c                 | __system___fmtnum
2640c     03 4C 05 F6 | 	mov	COUNT_, #3
26410     A9 00 A0 FD | 	call	#pushregs_
26414     70 F0 07 F1 | 	add	ptra, #112
26418     04 50 05 F1 | 	add	fp, #4
2641c     A8 74 62 FC | 	wrlong	arg01, fp
26420     04 50 05 F1 | 	add	fp, #4
26424     A8 76 62 FC | 	wrlong	arg02, fp
26428     04 50 05 F1 | 	add	fp, #4
2642c     A8 78 62 FC | 	wrlong	arg03, fp
26430     04 50 05 F1 | 	add	fp, #4
26434     A8 7A 62 FC | 	wrlong	arg04, fp
26438     04 50 05 F1 | 	add	fp, #4
2643c     A8 34 02 F6 | 	mov	result1, fp
26440     44 50 05 F1 | 	add	fp, #68
26444     A8 34 62 FC | 	wrlong	result1, fp
26448     04 50 05 F1 | 	add	fp, #4
2644c     A8 00 68 FC | 	wrlong	#0, fp
26450     54 50 85 F1 | 	sub	fp, #84
26454     A8 34 02 FB | 	rdlong	result1, fp
26458     10 34 46 F0 | 	shr	result1, #16
2645c     3F 34 06 F5 | 	and	result1, #63
26460     58 50 05 F1 | 	add	fp, #88
26464     A8 34 62 FC | 	wrlong	result1, fp
26468     58 50 85 F1 | 	sub	fp, #88
2646c     A8 34 02 FB | 	rdlong	result1, fp
26470     1A 35 E2 F8 | 	getbyte	result1, result1, #0
26474     5C 50 05 F1 | 	add	fp, #92
26478     A8 34 62 FC | 	wrlong	result1, fp
2647c     5C 50 85 F1 | 	sub	fp, #92
26480     A8 34 02 FB | 	rdlong	result1, fp
26484     1A 34 46 F0 | 	shr	result1, #26
26488     03 34 06 F5 | 	and	result1, #3
2648c     60 50 05 F1 | 	add	fp, #96
26490     A8 34 62 FC | 	wrlong	result1, fp
26494     08 50 85 F1 | 	sub	fp, #8
26498     A8 8C 02 FB | 	rdlong	local01, fp
2649c     60 50 85 F1 | 	sub	fp, #96
264a0     01 8C 56 F2 | 	cmps	local01, #1 wc
264a4     60 50 05 31 |  if_ae	add	fp, #96
264a8     A8 8C 02 3B |  if_ae	rdlong	local01, fp
264ac     01 8C 86 31 |  if_ae	sub	local01, #1
264b0     A8 8C 62 3C |  if_ae	wrlong	local01, fp
264b4     60 50 85 31 |  if_ae	sub	fp, #96
264b8     64 50 05 F1 | 	add	fp, #100
264bc     A8 8C 02 FB | 	rdlong	local01, fp
264c0     64 50 85 F1 | 	sub	fp, #100
264c4     41 8C 56 F2 | 	cmps	local01, #65 wc
264c8     64 50 05 C1 |  if_b	add	fp, #100
264cc     A8 8C 02 CB |  if_b	rdlong	local01, fp
264d0     64 50 85 C1 |  if_b	sub	fp, #100
264d4     00 8C 4E C2 |  if_b	cmps	local01, #0 wz
264d8     64 50 05 B1 |  if_nc_or_z	add	fp, #100
264dc     A8 80 68 BC |  if_nc_or_z	wrlong	#64, fp
264e0     64 50 85 B1 |  if_nc_or_z	sub	fp, #100
264e4     68 50 05 F1 | 	add	fp, #104
264e8     A8 8C 02 FB | 	rdlong	local01, fp
264ec     68 50 85 F1 | 	sub	fp, #104
264f0     03 8C 0E F2 | 	cmp	local01, #3 wz
264f4     68 50 05 A1 |  if_e	add	fp, #104
264f8     A8 00 68 AC |  if_e	wrlong	#0, fp
264fc     68 50 85 A1 |  if_e	sub	fp, #104
26500     30 00 90 AD |  if_e	jmp	#LR__1570
26504     0C 50 05 F1 | 	add	fp, #12
26508     A8 8C 02 FB | 	rdlong	local01, fp
2650c     0C 50 85 F1 | 	sub	fp, #12
26510     00 8C 56 F2 | 	cmps	local01, #0 wc
26514     1C 00 90 3D |  if_ae	jmp	#LR__1569
26518     68 50 05 F1 | 	add	fp, #104
2651c     A8 08 68 FC | 	wrlong	#4, fp
26520     5C 50 85 F1 | 	sub	fp, #92
26524     A8 8C 02 FB | 	rdlong	local01, fp
26528     46 8D 62 F6 | 	neg	local01, local01
2652c     A8 8C 62 FC | 	wrlong	local01, fp
26530     0C 50 85 F1 | 	sub	fp, #12
26534                 | LR__1569
26534                 | LR__1570
26534     68 50 05 F1 | 	add	fp, #104
26538     A8 8C 0A FB | 	rdlong	local01, fp wz
2653c     68 50 85 F1 | 	sub	fp, #104
26540     E8 00 90 AD |  if_e	jmp	#LR__1577
26544     5C 50 05 F1 | 	add	fp, #92
26548     A8 8C 02 FB | 	rdlong	local01, fp
2654c     01 8C 06 F1 | 	add	local01, #1
26550     A8 8C 62 FC | 	wrlong	local01, fp
26554     04 50 05 F1 | 	add	fp, #4
26558     A8 8C 02 FB | 	rdlong	local01, fp
2655c     04 50 05 F1 | 	add	fp, #4
26560     A8 78 02 FB | 	rdlong	arg03, fp
26564     64 50 85 F1 | 	sub	fp, #100
26568     3C 8D 0A F2 | 	cmp	local01, arg03 wz
2656c     38 00 90 5D |  if_ne	jmp	#LR__1572
26570     60 50 05 F1 | 	add	fp, #96
26574     A8 8C 02 FB | 	rdlong	local01, fp
26578     01 8C 8E F1 | 	sub	local01, #1 wz
2657c     A8 8C 62 FC | 	wrlong	local01, fp
26580     60 50 85 F1 | 	sub	fp, #96
26584     20 00 90 5D |  if_ne	jmp	#LR__1571
26588     04 50 05 F1 | 	add	fp, #4
2658c     A8 74 02 FB | 	rdlong	arg01, fp
26590     04 50 05 F1 | 	add	fp, #4
26594     A8 76 02 FB | 	rdlong	arg02, fp
26598     08 50 85 F1 | 	sub	fp, #8
2659c     23 78 06 F6 | 	mov	arg03, #35
265a0     1C FD BF FD | 	call	#__system___fmtchar
265a4     6C 01 90 FD | 	jmp	#LR__1582
265a8                 | LR__1571
265a8                 | LR__1572
265a8     68 50 05 F1 | 	add	fp, #104
265ac     A8 8C 02 FB | 	rdlong	local01, fp
265b0     68 50 85 F1 | 	sub	fp, #104
265b4     02 8C 0E F2 | 	cmp	local01, #2 wz
265b8     20 00 90 5D |  if_ne	jmp	#LR__1573
265bc     58 50 05 F1 | 	add	fp, #88
265c0     A8 8C 02 FB | 	rdlong	local01, fp
265c4     46 35 02 F6 | 	mov	result1, local01
265c8     01 34 06 F1 | 	add	result1, #1
265cc     A8 34 62 FC | 	wrlong	result1, fp
265d0     58 50 85 F1 | 	sub	fp, #88
265d4     46 41 48 FC | 	wrbyte	#32, local01
265d8     50 00 90 FD | 	jmp	#LR__1576
265dc                 | LR__1573
265dc     68 50 05 F1 | 	add	fp, #104
265e0     A8 8C 02 FB | 	rdlong	local01, fp
265e4     68 50 85 F1 | 	sub	fp, #104
265e8     04 8C 0E F2 | 	cmp	local01, #4 wz
265ec     20 00 90 5D |  if_ne	jmp	#LR__1574
265f0     58 50 05 F1 | 	add	fp, #88
265f4     A8 8C 02 FB | 	rdlong	local01, fp
265f8     46 35 02 F6 | 	mov	result1, local01
265fc     01 34 06 F1 | 	add	result1, #1
26600     A8 34 62 FC | 	wrlong	result1, fp
26604     58 50 85 F1 | 	sub	fp, #88
26608     46 5B 48 FC | 	wrbyte	#45, local01
2660c     1C 00 90 FD | 	jmp	#LR__1575
26610                 | LR__1574
26610     58 50 05 F1 | 	add	fp, #88
26614     A8 8C 02 FB | 	rdlong	local01, fp
26618     46 35 02 F6 | 	mov	result1, local01
2661c     01 34 06 F1 | 	add	result1, #1
26620     A8 34 62 FC | 	wrlong	result1, fp
26624     58 50 85 F1 | 	sub	fp, #88
26628     46 57 48 FC | 	wrbyte	#43, local01
2662c                 | LR__1575
2662c                 | LR__1576
2662c                 | LR__1577
2662c     58 50 05 F1 | 	add	fp, #88
26630     A8 74 02 FB | 	rdlong	arg01, fp
26634     4C 50 85 F1 | 	sub	fp, #76
26638     A8 76 02 FB | 	rdlong	arg02, fp
2663c     04 50 05 F1 | 	add	fp, #4
26640     A8 78 02 FB | 	rdlong	arg03, fp
26644     50 50 05 F1 | 	add	fp, #80
26648     A8 7A 02 FB | 	rdlong	arg04, fp
2664c     00 7C 06 F6 | 	mov	arg05, #0
26650     58 50 85 F1 | 	sub	fp, #88
26654     A8 8C 02 FB | 	rdlong	local01, fp
26658     08 50 85 F1 | 	sub	fp, #8
2665c     1D 8C 2E F4 | 	testbn	local01, #29 wz
26660     01 7C 06 56 |  if_ne	mov	arg05, #1
26664     5C 2B B0 FD | 	call	#__system___uitoa
26668     1A 8F 02 F6 | 	mov	local02, result1
2666c     5C 50 05 F1 | 	add	fp, #92
26670     A8 8C 02 FB | 	rdlong	local01, fp
26674     47 8D 02 F1 | 	add	local01, local02
26678     A8 8C 62 FC | 	wrlong	local01, fp
2667c     08 50 05 F1 | 	add	fp, #8
26680     A8 90 02 FB | 	rdlong	local03, fp
26684     64 50 85 F1 | 	sub	fp, #100
26688     48 8D 5A F2 | 	cmps	local01, local03 wcz
2668c     64 00 90 ED |  if_be	jmp	#LR__1581
26690     AC 99 9D FE | 	loc	pa,	#(@LR__1579-@LR__1578)
26694     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26698                 | LR__1578
26698     64 50 05 F1 | 	add	fp, #100
2669c     A8 8E 02 FB | 	rdlong	local02, fp
266a0     47 91 02 F6 | 	mov	local03, local02
266a4     01 90 86 F1 | 	sub	local03, #1
266a8     A8 90 62 FC | 	wrlong	local03, fp
266ac     64 50 85 F1 | 	sub	fp, #100
266b0     01 8E 56 F2 | 	cmps	local02, #1 wc
266b4     20 00 90 CD |  if_b	jmp	#LR__1580
266b8     58 50 05 F1 | 	add	fp, #88
266bc     A8 8E 02 FB | 	rdlong	local02, fp
266c0     47 91 02 F6 | 	mov	local03, local02
266c4     01 90 06 F1 | 	add	local03, #1
266c8     A8 90 62 FC | 	wrlong	local03, fp
266cc     58 50 85 F1 | 	sub	fp, #88
266d0     47 47 48 FC | 	wrbyte	#35, local02
266d4     C0 FF 9F FD | 	jmp	#LR__1578
266d8                 | LR__1579
266d8                 | LR__1580
266d8     58 50 05 F1 | 	add	fp, #88
266dc     A8 8E 02 FB | 	rdlong	local02, fp
266e0     47 91 02 F6 | 	mov	local03, local02
266e4     01 90 06 F1 | 	add	local03, #1
266e8     A8 90 62 FC | 	wrlong	local03, fp
266ec     58 50 85 F1 | 	sub	fp, #88
266f0     47 01 48 FC | 	wrbyte	#0, local02
266f4                 | LR__1581
266f4     04 50 05 F1 | 	add	fp, #4
266f8     A8 74 02 FB | 	rdlong	arg01, fp
266fc     04 50 05 F1 | 	add	fp, #4
26700     A8 76 02 FB | 	rdlong	arg02, fp
26704     0C 50 05 F1 | 	add	fp, #12
26708     A8 78 02 F6 | 	mov	arg03, fp
2670c     14 50 85 F1 | 	sub	fp, #20
26710     0C FC BF FD | 	call	#__system___fmtstr
26714                 | LR__1582
26714     A8 F0 03 F6 | 	mov	ptra, fp
26718     B3 00 A0 FD | 	call	#popregs_
2671c                 | __system___fmtnum_ret
2671c     2D 00 64 FD | 	ret
26720                 | 
26720                 | __system___fmtfloat
26720     10 4C 05 F6 | 	mov	COUNT_, #16
26724     A9 00 A0 FD | 	call	#pushregs_
26728     24 F1 07 F1 | 	add	ptra, #292
2672c     04 50 05 F1 | 	add	fp, #4
26730     A8 74 62 FC | 	wrlong	arg01, fp
26734     04 50 05 F1 | 	add	fp, #4
26738     A8 76 62 FC | 	wrlong	arg02, fp
2673c     04 50 05 F1 | 	add	fp, #4
26740     A8 78 62 FC | 	wrlong	arg03, fp
26744     04 50 05 F1 | 	add	fp, #4
26748     A8 7A 62 FC | 	wrlong	arg04, fp
2674c     0C 50 05 F1 | 	add	fp, #12
26750     A8 14 68 FC | 	wrlong	#10, fp
26754     08 50 05 F1 | 	add	fp, #8
26758     A8 00 68 FC | 	wrlong	#0, fp
2675c     08 50 05 F1 | 	add	fp, #8
26760     A8 00 68 FC | 	wrlong	#0, fp
26764     08 50 05 F1 | 	add	fp, #8
26768     A8 00 68 FC | 	wrlong	#0, fp
2676c     04 50 05 F1 | 	add	fp, #4
26770     A8 04 68 FC | 	wrlong	#2, fp
26774     04 50 05 F1 | 	add	fp, #4
26778     A8 00 68 FC | 	wrlong	#0, fp
2677c     04 50 05 F1 | 	add	fp, #4
26780     A8 00 68 FC | 	wrlong	#0, fp
26784     04 50 05 F1 | 	add	fp, #4
26788     A8 00 68 FC | 	wrlong	#0, fp
2678c     04 50 05 F1 | 	add	fp, #4
26790     A8 00 68 FC | 	wrlong	#0, fp
26794     18 50 05 F1 | 	add	fp, #24
26798     A8 00 68 FC | 	wrlong	#0, fp
2679c     68 50 05 F1 | 	add	fp, #104
267a0     A8 8C 02 F6 | 	mov	local01, fp
267a4     08 50 85 F1 | 	sub	fp, #8
267a8     A8 8C 62 FC | 	wrlong	local01, fp
267ac     04 50 05 F1 | 	add	fp, #4
267b0     A8 8C 62 FC | 	wrlong	local01, fp
267b4     BC 50 85 F1 | 	sub	fp, #188
267b8     A8 8E 02 FB | 	rdlong	local02, fp
267bc     10 8E 46 F0 | 	shr	local02, #16
267c0     3F 8E 06 F5 | 	and	local02, #63
267c4     B0 50 05 F1 | 	add	fp, #176
267c8     A8 8E 62 FC | 	wrlong	local02, fp
267cc     B0 50 85 F1 | 	sub	fp, #176
267d0     A8 8E 02 FB | 	rdlong	local02, fp
267d4     1C 8E 46 F0 | 	shr	local02, #28
267d8     01 8E 06 F5 | 	and	local02, #1
267dc     08 51 05 F1 | 	add	fp, #264
267e0     A8 8E 62 FC | 	wrlong	local02, fp
267e4     58 50 85 F1 | 	sub	fp, #88
267e8     A8 8E 0A FB | 	rdlong	local02, fp wz
267ec     B8 50 85 F1 | 	sub	fp, #184
267f0     3C 00 90 5D |  if_ne	jmp	#LR__1584
267f4     10 50 05 F1 | 	add	fp, #16
267f8     A8 8E 02 FB | 	rdlong	local02, fp
267fc     10 50 85 F1 | 	sub	fp, #16
26800     61 8E 0E F2 | 	cmp	local02, #97 wz
26804     18 00 90 5D |  if_ne	jmp	#LR__1583
26808     B8 50 05 F1 | 	add	fp, #184
2680c     A8 1A 68 FC | 	wrlong	#13, fp
26810     84 50 85 F1 | 	sub	fp, #132
26814     A8 02 68 FC | 	wrlong	#1, fp
26818     34 50 85 F1 | 	sub	fp, #52
2681c     24 00 90 FD | 	jmp	#LR__1585
26820                 | LR__1583
26820     B8 50 05 F1 | 	add	fp, #184
26824     A8 0C 68 FC | 	wrlong	#6, fp
26828     B8 50 85 F1 | 	sub	fp, #184
2682c     14 00 90 FD | 	jmp	#LR__1585
26830                 | LR__1584
26830     B8 50 05 F1 | 	add	fp, #184
26834     A8 8E 02 FB | 	rdlong	local02, fp
26838     01 8E 86 F1 | 	sub	local02, #1
2683c     A8 8E 62 FC | 	wrlong	local02, fp
26840     B8 50 85 F1 | 	sub	fp, #184
26844                 | LR__1585
26844     08 50 05 F1 | 	add	fp, #8
26848     A8 8E 02 FB | 	rdlong	local02, fp
2684c     16 8E 46 F0 | 	shr	local02, #22
26850     03 8E 06 F5 | 	and	local02, #3
26854     04 51 05 F1 | 	add	fp, #260
26858     A8 8E 62 FC | 	wrlong	local02, fp
2685c     04 51 85 F1 | 	sub	fp, #260
26860     A8 8E 02 FB | 	rdlong	local02, fp
26864     1D 8E 46 F0 | 	shr	local02, #29
26868     01 8E 06 F5 | 	and	local02, #1
2686c     B4 50 05 F1 | 	add	fp, #180
26870     A8 8E 62 FC | 	wrlong	local02, fp
26874     B4 50 85 F1 | 	sub	fp, #180
26878     A8 8E 02 FB | 	rdlong	local02, fp
2687c     47 8F EA F8 | 	getbyte	local02, local02, #1
26880     60 50 05 F1 | 	add	fp, #96
26884     A8 8E 62 FC | 	wrlong	local02, fp
26888     60 50 85 F1 | 	sub	fp, #96
2688c     A8 8E 02 FB | 	rdlong	local02, fp
26890     47 8F E2 F8 | 	getbyte	local02, local02, #0
26894     64 50 05 F1 | 	add	fp, #100
26898     A8 8E 62 FC | 	wrlong	local02, fp
2689c     00 8E 06 F6 | 	mov	local02, #0
268a0     5C 50 85 F1 | 	sub	fp, #92
268a4     A8 8C 02 FB | 	rdlong	local01, fp
268a8     65 8C 0E F2 | 	cmp	local01, #101 wz
268ac     01 8E 06 A6 |  if_e	mov	local02, #1
268b0     14 50 05 F1 | 	add	fp, #20
268b4     A8 8E 62 FC | 	wrlong	local02, fp
268b8     98 50 05 F1 | 	add	fp, #152
268bc     A8 8C 0A FB | 	rdlong	local01, fp wz
268c0     45 8E 06 56 |  if_ne	mov	local02, #69
268c4     65 8E 06 A6 |  if_e	mov	local02, #101
268c8     8C 50 85 F1 | 	sub	fp, #140
268cc     A8 8E 62 FC | 	wrlong	local02, fp
268d0     20 50 85 F1 | 	sub	fp, #32
268d4     A8 8E 02 FB | 	rdlong	local02, fp
268d8     10 50 85 F1 | 	sub	fp, #16
268dc     61 8E 0E F2 | 	cmp	local02, #97 wz
268e0     4C 00 90 5D |  if_ne	jmp	#LR__1586
268e4     24 50 05 F1 | 	add	fp, #36
268e8     A8 02 68 FC | 	wrlong	#1, fp
268ec     98 50 05 F1 | 	add	fp, #152
268f0     A8 8C 0A FB | 	rdlong	local01, fp wz
268f4     50 8E 06 56 |  if_ne	mov	local02, #80
268f8     70 8E 06 A6 |  if_e	mov	local02, #112
268fc     8C 50 85 F1 | 	sub	fp, #140
26900     A8 8E 62 FC | 	wrlong	local02, fp
26904     14 50 85 F1 | 	sub	fp, #20
26908     A8 04 68 FC | 	wrlong	#2, fp
2690c     1C 50 05 F1 | 	add	fp, #28
26910     A8 02 68 FC | 	wrlong	#1, fp
26914     84 50 05 F1 | 	add	fp, #132
26918     A8 8C 0A FB | 	rdlong	local01, fp wz
2691c     58 8E 06 56 |  if_ne	mov	local02, #88
26920     78 8E 06 A6 |  if_e	mov	local02, #120
26924     7C 50 85 F1 | 	sub	fp, #124
26928     A8 8E 62 FC | 	wrlong	local02, fp
2692c     40 50 85 F1 | 	sub	fp, #64
26930                 | LR__1586
26930     10 50 05 F1 | 	add	fp, #16
26934     A8 8E 02 FB | 	rdlong	local02, fp
26938     10 50 85 F1 | 	sub	fp, #16
2693c     23 8E 0E F2 | 	cmp	local02, #35 wz
26940     3C 00 90 5D |  if_ne	jmp	#LR__1589
26944     48 50 05 F1 | 	add	fp, #72
26948     A8 02 68 FC | 	wrlong	#1, fp
2694c     C8 50 05 F1 | 	add	fp, #200
26950     A8 8E 0A FB | 	rdlong	local02, fp wz
26954     10 51 85 F1 | 	sub	fp, #272
26958     18 00 90 AD |  if_e	jmp	#LR__1587
2695c     10 50 05 F1 | 	add	fp, #16
26960     A8 CC 68 FC | 	wrlong	#102, fp
26964     00 51 05 F1 | 	add	fp, #256
26968     A8 00 68 FC | 	wrlong	#0, fp
2696c     10 51 85 F1 | 	sub	fp, #272
26970     0C 00 90 FD | 	jmp	#LR__1588
26974                 | LR__1587
26974     10 51 05 F1 | 	add	fp, #272
26978     A8 02 68 FC | 	wrlong	#1, fp
2697c     10 51 85 F1 | 	sub	fp, #272
26980                 | LR__1588
26980                 | LR__1589
26980     08 50 05 F1 | 	add	fp, #8
26984     A8 8E 02 FB | 	rdlong	local02, fp
26988     1A 8E 46 F0 | 	shr	local02, #26
2698c     03 8E 06 F5 | 	and	local02, #3
26990     5C 50 05 F1 | 	add	fp, #92
26994     A8 8E 62 FC | 	wrlong	local02, fp
26998     58 50 85 F1 | 	sub	fp, #88
2699c     A8 34 02 FB | 	rdlong	result1, fp
269a0     0C 50 85 F1 | 	sub	fp, #12
269a4     1F 34 4E F0 | 	shr	result1, #31 wz
269a8     20 00 90 AD |  if_e	jmp	#LR__1590
269ac     2C 50 05 F1 | 	add	fp, #44
269b0     A8 5A 68 FC | 	wrlong	#45, fp
269b4     20 50 85 F1 | 	sub	fp, #32
269b8     A8 34 02 FB | 	rdlong	result1, fp
269bc     1F 34 E6 F4 | 	bitnot	result1, #31
269c0     A8 34 62 FC | 	wrlong	result1, fp
269c4     0C 50 85 F1 | 	sub	fp, #12
269c8     3C 00 90 FD | 	jmp	#LR__1592
269cc                 | LR__1590
269cc     64 50 05 F1 | 	add	fp, #100
269d0     A8 8E 02 FB | 	rdlong	local02, fp
269d4     64 50 85 F1 | 	sub	fp, #100
269d8     01 8E 0E F2 | 	cmp	local02, #1 wz
269dc     2C 50 05 A1 |  if_e	add	fp, #44
269e0     A8 56 68 AC |  if_e	wrlong	#43, fp
269e4     2C 50 85 A1 |  if_e	sub	fp, #44
269e8     1C 00 90 AD |  if_e	jmp	#LR__1591
269ec     64 50 05 F1 | 	add	fp, #100
269f0     A8 8E 02 FB | 	rdlong	local02, fp
269f4     64 50 85 F1 | 	sub	fp, #100
269f8     02 8E 0E F2 | 	cmp	local02, #2 wz
269fc     2C 50 05 A1 |  if_e	add	fp, #44
26a00     A8 40 68 AC |  if_e	wrlong	#32, fp
26a04     2C 50 85 A1 |  if_e	sub	fp, #44
26a08                 | LR__1591
26a08                 | LR__1592
26a08     08 50 05 F1 | 	add	fp, #8
26a0c     A8 8E 02 FB | 	rdlong	local02, fp
26a10     18 8E 46 F0 | 	shr	local02, #24
26a14     03 8E 06 F5 | 	and	local02, #3
26a18     3C 50 05 F1 | 	add	fp, #60
26a1c     A8 8E 62 FC | 	wrlong	local02, fp
26a20     00 8E 06 F6 | 	mov	local02, #0
26a24     18 50 85 F1 | 	sub	fp, #24
26a28     A8 90 02 FB | 	rdlong	local03, fp
26a2c     2C 50 85 F1 | 	sub	fp, #44
26a30     48 8D 0A F6 | 	mov	local01, local03 wz
26a34     18 00 90 5D |  if_ne	jmp	#LR__1593
26a38     1C 50 05 F1 | 	add	fp, #28
26a3c     A8 92 02 FB | 	rdlong	local04, fp
26a40     1C 50 85 F1 | 	sub	fp, #28
26a44     49 95 02 F6 | 	mov	local05, local04
26a48     0A 94 0E F2 | 	cmp	local05, #10 wz
26a4c     04 00 90 AD |  if_e	jmp	#LR__1594
26a50                 | LR__1593
26a50     01 8E 66 F5 | 	xor	local02, #1
26a54                 | LR__1594
26a54     3C 50 05 F1 | 	add	fp, #60
26a58     A8 8E 62 FC | 	wrlong	local02, fp
26a5c     3C 50 85 F1 | 	sub	fp, #60
26a60     00 8E 0E F2 | 	cmp	local02, #0 wz
26a64     10 01 90 AD |  if_e	jmp	#LR__1596
26a68     44 50 05 F1 | 	add	fp, #68
26a6c     A8 90 02 FB | 	rdlong	local03, fp
26a70     44 50 85 F1 | 	sub	fp, #68
26a74     02 90 0E F2 | 	cmp	local03, #2 wz
26a78     FC 00 90 5D |  if_ne	jmp	#LR__1596
26a7c     0C 51 05 F1 | 	add	fp, #268
26a80     A8 96 02 FB | 	rdlong	local06, fp
26a84     0C 51 85 F1 | 	sub	fp, #268
26a88     4B 93 02 F6 | 	mov	local04, local06
26a8c     02 92 0E F2 | 	cmp	local04, #2 wz
26a90     E4 00 90 AD |  if_e	jmp	#LR__1596
26a94     C0 50 05 F1 | 	add	fp, #192
26a98     A8 74 02 FB | 	rdlong	arg01, fp
26a9c     94 50 85 F1 | 	sub	fp, #148
26aa0     A8 76 02 FB | 	rdlong	arg02, fp
26aa4     14 50 05 F1 | 	add	fp, #20
26aa8     A8 78 02 FB | 	rdlong	arg03, fp
26aac     40 50 85 F1 | 	sub	fp, #64
26ab0     B0 29 B0 FD | 	call	#__system__emitsign_1266
26ab4     14 51 05 F1 | 	add	fp, #276
26ab8     A8 34 62 FC | 	wrlong	result1, fp
26abc     14 51 85 F1 | 	sub	fp, #276
26ac0     00 34 56 F2 | 	cmps	result1, #0 wc
26ac4     14 51 05 C1 |  if_b	add	fp, #276
26ac8     A8 34 02 CB |  if_b	rdlong	result1, fp
26acc     14 51 85 C1 |  if_b	sub	fp, #276
26ad0     E0 0B 90 CD |  if_b	jmp	#LR__1647
26ad4     C0 50 05 F1 | 	add	fp, #192
26ad8     A8 8E 02 FB | 	rdlong	local02, fp
26adc     54 50 05 F1 | 	add	fp, #84
26ae0     A8 94 02 FB | 	rdlong	local05, fp
26ae4     4A 91 02 F6 | 	mov	local03, local05
26ae8     4A 8F 02 F1 | 	add	local02, local05
26aec     54 50 85 F1 | 	sub	fp, #84
26af0     A8 8E 62 FC | 	wrlong	local02, fp
26af4     58 50 85 F1 | 	sub	fp, #88
26af8     A8 8C 0A FB | 	rdlong	local01, fp wz
26afc     68 50 85 F1 | 	sub	fp, #104
26b00     64 00 90 AD |  if_e	jmp	#LR__1595
26b04     68 50 05 F1 | 	add	fp, #104
26b08     A8 8E 02 FB | 	rdlong	local02, fp
26b0c     AC 50 05 F1 | 	add	fp, #172
26b10     A8 90 02 FB | 	rdlong	local03, fp
26b14     48 8F 82 F1 | 	sub	local02, local03
26b18     AC 50 85 F1 | 	sub	fp, #172
26b1c     A8 8E 62 FC | 	wrlong	local02, fp
26b20     68 50 85 F1 | 	sub	fp, #104
26b24     00 8E 56 F2 | 	cmps	local02, #0 wc
26b28     68 50 05 C1 |  if_b	add	fp, #104
26b2c     A8 00 68 CC |  if_b	wrlong	#0, fp
26b30     68 50 85 C1 |  if_b	sub	fp, #104
26b34     08 50 05 F1 | 	add	fp, #8
26b38     A8 8C 02 FB | 	rdlong	local01, fp
26b3c     E8 8C 06 F4 | 	bitl	local01, #232
26b40     A8 8C 62 FC | 	wrlong	local01, fp
26b44     46 8F 02 F6 | 	mov	local02, local01
26b48     60 50 05 F1 | 	add	fp, #96
26b4c     A8 94 02 FB | 	rdlong	local05, fp
26b50     4A 91 02 F6 | 	mov	local03, local05
26b54     08 90 66 F0 | 	shl	local03, #8
26b58     48 8F 42 F5 | 	or	local02, local03
26b5c     60 50 85 F1 | 	sub	fp, #96
26b60     A8 8E 62 FC | 	wrlong	local02, fp
26b64     08 50 85 F1 | 	sub	fp, #8
26b68                 | LR__1595
26b68     00 8E 06 F6 | 	mov	local02, #0
26b6c     3C 50 05 F1 | 	add	fp, #60
26b70     A8 00 68 FC | 	wrlong	#0, fp
26b74     3C 50 85 F1 | 	sub	fp, #60
26b78                 | LR__1596
26b78     0C 50 05 F1 | 	add	fp, #12
26b7c     A8 74 02 FB | 	rdlong	arg01, fp
26b80     0C 50 85 F1 | 	sub	fp, #12
26b84     48 15 B0 FD | 	call	#__system____builtin_ilogb
26b88     FF FF 3F FF 
26b8c     FF 35 0E F2 | 	cmp	result1, ##2147483647 wz
26b90     50 00 90 5D |  if_ne	jmp	#LR__1598
26b94     2C 50 05 F1 | 	add	fp, #44
26b98     A8 8E 0A FB | 	rdlong	local02, fp wz
26b9c     2C 50 85 F1 | 	sub	fp, #44
26ba0     24 00 90 AD |  if_e	jmp	#LR__1597
26ba4     C0 50 05 F1 | 	add	fp, #192
26ba8     A8 8C 02 FB | 	rdlong	local01, fp
26bac     46 91 02 F6 | 	mov	local03, local01
26bb0     01 90 06 F1 | 	add	local03, #1
26bb4     A8 90 62 FC | 	wrlong	local03, fp
26bb8     94 50 85 F1 | 	sub	fp, #148
26bbc     A8 92 02 FB | 	rdlong	local04, fp
26bc0     2C 50 85 F1 | 	sub	fp, #44
26bc4     46 93 42 FC | 	wrbyte	local04, local01
26bc8                 | LR__1597
26bc8     C0 50 05 F1 | 	add	fp, #192
26bcc     A8 74 02 FB | 	rdlong	arg01, fp
26bd0     C0 50 85 F1 | 	sub	fp, #192
26bd4     4B 01 00 FF 
26bd8     E6 77 06 F6 | 	mov	arg02, ##@LR__1832
26bdc     08 F0 BF FD | 	call	#__system____builtin_strcpy
26be0     E4 08 90 FD | 	jmp	#LR__1635
26be4                 | LR__1598
26be4     0C 50 05 F1 | 	add	fp, #12
26be8     A8 74 02 FB | 	rdlong	arg01, fp
26bec     0C 50 85 F1 | 	sub	fp, #12
26bf0     DC 14 B0 FD | 	call	#__system____builtin_ilogb
26bf4     00 00 40 FF 
26bf8     00 34 0E F2 | 	cmp	result1, ##-2147483648 wz
26bfc     50 00 90 5D |  if_ne	jmp	#LR__1600
26c00     2C 50 05 F1 | 	add	fp, #44
26c04     A8 8E 0A FB | 	rdlong	local02, fp wz
26c08     2C 50 85 F1 | 	sub	fp, #44
26c0c     24 00 90 AD |  if_e	jmp	#LR__1599
26c10     C0 50 05 F1 | 	add	fp, #192
26c14     A8 8C 02 FB | 	rdlong	local01, fp
26c18     46 91 02 F6 | 	mov	local03, local01
26c1c     01 90 06 F1 | 	add	local03, #1
26c20     A8 90 62 FC | 	wrlong	local03, fp
26c24     94 50 85 F1 | 	sub	fp, #148
26c28     A8 92 02 FB | 	rdlong	local04, fp
26c2c     2C 50 85 F1 | 	sub	fp, #44
26c30     46 93 42 FC | 	wrbyte	local04, local01
26c34                 | LR__1599
26c34     C0 50 05 F1 | 	add	fp, #192
26c38     A8 74 02 FB | 	rdlong	arg01, fp
26c3c     C0 50 85 F1 | 	sub	fp, #192
26c40     4B 01 00 FF 
26c44     EA 77 06 F6 | 	mov	arg02, ##@LR__1833
26c48     9C EF BF FD | 	call	#__system____builtin_strcpy
26c4c     78 08 90 FD | 	jmp	#LR__1635
26c50                 | LR__1600
26c50     10 50 05 F1 | 	add	fp, #16
26c54     A8 8C 02 FB | 	rdlong	local01, fp
26c58     10 50 85 F1 | 	sub	fp, #16
26c5c     67 8C 0E F2 | 	cmp	local01, #103 wz
26c60     18 00 90 AD |  if_e	jmp	#LR__1601
26c64     10 50 05 F1 | 	add	fp, #16
26c68     A8 94 02 FB | 	rdlong	local05, fp
26c6c     10 50 85 F1 | 	sub	fp, #16
26c70     4A 91 02 F6 | 	mov	local03, local05
26c74     23 90 0E F2 | 	cmp	local03, #35 wz
26c78     98 01 90 5D |  if_ne	jmp	#LR__1606
26c7c                 | LR__1601
26c7c     0C 50 05 F1 | 	add	fp, #12
26c80     A8 74 02 FB | 	rdlong	arg01, fp
26c84     08 50 05 F1 | 	add	fp, #8
26c88     A8 76 02 F6 | 	mov	arg02, fp
26c8c     0C 50 05 F1 | 	add	fp, #12
26c90     A8 78 02 F6 | 	mov	arg03, fp
26c94     98 50 05 F1 | 	add	fp, #152
26c98     A8 7A 02 FB | 	rdlong	arg04, fp
26c9c     9C 50 85 F1 | 	sub	fp, #156
26ca0     A8 7C 02 FB | 	rdlong	arg05, fp
26ca4     1C 50 85 F1 | 	sub	fp, #28
26ca8     98 25 B0 FD | 	call	#__system__disassemble_1264
26cac     10 50 05 F1 | 	add	fp, #16
26cb0     A8 8E 02 FB | 	rdlong	local02, fp
26cb4     10 50 85 F1 | 	sub	fp, #16
26cb8     23 8E 0E F2 | 	cmp	local02, #35 wz
26cbc     A0 00 90 5D |  if_ne	jmp	#LR__1603
26cc0     20 50 05 F1 | 	add	fp, #32
26cc4     A8 8E 02 FB | 	rdlong	local02, fp
26cc8     98 50 05 F1 | 	add	fp, #152
26ccc     A8 90 02 FB | 	rdlong	local03, fp
26cd0     B8 50 85 F1 | 	sub	fp, #184
26cd4     48 8F 5A F2 | 	cmps	local02, local03 wcz
26cd8     24 50 05 11 |  if_a	add	fp, #36
26cdc     A8 02 68 1C |  if_a	wrlong	#1, fp
26ce0     24 50 85 11 |  if_a	sub	fp, #36
26ce4     A8 01 90 1D |  if_a	jmp	#LR__1609
26ce8     20 50 05 F1 | 	add	fp, #32
26cec     A8 8E 02 FB | 	rdlong	local02, fp
26cf0     20 50 85 F1 | 	sub	fp, #32
26cf4     00 8E 56 F2 | 	cmps	local02, #0 wc
26cf8     2C 00 90 3D |  if_ae	jmp	#LR__1602
26cfc     B8 50 05 F1 | 	add	fp, #184
26d00     A8 8E 02 FB | 	rdlong	local02, fp
26d04     47 8F 62 F6 | 	neg	local02, local02
26d08     98 50 85 F1 | 	sub	fp, #152
26d0c     A8 90 02 FB | 	rdlong	local03, fp
26d10     20 50 85 F1 | 	sub	fp, #32
26d14     47 91 5A F2 | 	cmps	local03, local02 wcz
26d18     24 50 05 E1 |  if_be	add	fp, #36
26d1c     A8 02 68 EC |  if_be	wrlong	#1, fp
26d20     24 50 85 E1 |  if_be	sub	fp, #36
26d24     68 01 90 FD | 	jmp	#LR__1609
26d28                 | LR__1602
26d28     20 50 05 F1 | 	add	fp, #32
26d2c     A8 8E 02 FB | 	rdlong	local02, fp
26d30     20 50 85 F1 | 	sub	fp, #32
26d34     01 8E 56 F2 | 	cmps	local02, #1 wc
26d38     54 01 90 CD |  if_b	jmp	#LR__1609
26d3c     B8 50 05 F1 | 	add	fp, #184
26d40     A8 8E 02 FB | 	rdlong	local02, fp
26d44     98 50 85 F1 | 	sub	fp, #152
26d48     A8 90 02 FB | 	rdlong	local03, fp
26d4c     48 8F 82 F1 | 	sub	local02, local03
26d50     98 50 05 F1 | 	add	fp, #152
26d54     A8 8E 62 FC | 	wrlong	local02, fp
26d58     B8 50 85 F1 | 	sub	fp, #184
26d5c     30 01 90 FD | 	jmp	#LR__1609
26d60                 | LR__1603
26d60     00 8E 06 F6 | 	mov	local02, #0
26d64     08 50 05 F1 | 	add	fp, #8
26d68     A8 8C 02 FB | 	rdlong	local01, fp
26d6c     1C 8C 46 F0 | 	shr	local01, #28
26d70     01 8C CE F7 | 	test	local01, #1 wz
26d74     01 8E 06 A6 |  if_e	mov	local02, #1
26d78     2C 50 05 F1 | 	add	fp, #44
26d7c     A8 8E 62 FC | 	wrlong	local02, fp
26d80     14 50 85 F1 | 	sub	fp, #20
26d84     A8 8C 02 FB | 	rdlong	local01, fp
26d88     46 8F 02 F6 | 	mov	local02, local01
26d8c     98 50 05 F1 | 	add	fp, #152
26d90     A8 94 02 FB | 	rdlong	local05, fp
26d94     B8 50 85 F1 | 	sub	fp, #184
26d98     4A 8F 52 F2 | 	cmps	local02, local05 wc
26d9c     18 00 90 3D |  if_ae	jmp	#LR__1604
26da0     20 50 05 F1 | 	add	fp, #32
26da4     A8 96 02 FB | 	rdlong	local06, fp
26da8     20 50 85 F1 | 	sub	fp, #32
26dac     FF FF 7F FF 
26db0     FC 97 56 F2 | 	cmps	local06, ##-4 wc
26db4     10 00 90 3D |  if_ae	jmp	#LR__1605
26db8                 | LR__1604
26db8     24 50 05 F1 | 	add	fp, #36
26dbc     A8 02 68 FC | 	wrlong	#1, fp
26dc0     24 50 85 F1 | 	sub	fp, #36
26dc4     C8 00 90 FD | 	jmp	#LR__1609
26dc8                 | LR__1605
26dc8     B8 50 05 F1 | 	add	fp, #184
26dcc     A8 92 02 FB | 	rdlong	local04, fp
26dd0     98 50 85 F1 | 	sub	fp, #152
26dd4     A8 90 02 FB | 	rdlong	local03, fp
26dd8     48 93 82 F1 | 	sub	local04, local03
26ddc     98 50 05 F1 | 	add	fp, #152
26de0     A8 92 62 FC | 	wrlong	local04, fp
26de4     AC 50 85 F1 | 	sub	fp, #172
26de8     A8 74 02 FB | 	rdlong	arg01, fp
26dec     08 50 05 F1 | 	add	fp, #8
26df0     A8 76 02 F6 | 	mov	arg02, fp
26df4     0C 50 05 F1 | 	add	fp, #12
26df8     A8 78 02 F6 | 	mov	arg03, fp
26dfc     49 7B 62 F6 | 	neg	arg04, local04
26e00     04 50 85 F1 | 	sub	fp, #4
26e04     A8 7C 02 FB | 	rdlong	arg05, fp
26e08     1C 50 85 F1 | 	sub	fp, #28
26e0c     34 24 B0 FD | 	call	#__system__disassemble_1264
26e10     7C 00 90 FD | 	jmp	#LR__1609
26e14                 | LR__1606
26e14     24 50 05 F1 | 	add	fp, #36
26e18     A8 8E 0A FB | 	rdlong	local02, fp wz
26e1c     24 50 85 F1 | 	sub	fp, #36
26e20     34 00 90 AD |  if_e	jmp	#LR__1607
26e24     0C 50 05 F1 | 	add	fp, #12
26e28     A8 74 02 FB | 	rdlong	arg01, fp
26e2c     08 50 05 F1 | 	add	fp, #8
26e30     A8 76 02 F6 | 	mov	arg02, fp
26e34     0C 50 05 F1 | 	add	fp, #12
26e38     A8 78 02 F6 | 	mov	arg03, fp
26e3c     98 50 05 F1 | 	add	fp, #152
26e40     A8 7A 02 FB | 	rdlong	arg04, fp
26e44     9C 50 85 F1 | 	sub	fp, #156
26e48     A8 7C 02 FB | 	rdlong	arg05, fp
26e4c     1C 50 85 F1 | 	sub	fp, #28
26e50     F0 23 B0 FD | 	call	#__system__disassemble_1264
26e54     38 00 90 FD | 	jmp	#LR__1608
26e58                 | LR__1607
26e58     0C 50 05 F1 | 	add	fp, #12
26e5c     A8 74 02 FB | 	rdlong	arg01, fp
26e60     08 50 05 F1 | 	add	fp, #8
26e64     A8 76 02 F6 | 	mov	arg02, fp
26e68     0C 50 05 F1 | 	add	fp, #12
26e6c     A8 78 02 F6 | 	mov	arg03, fp
26e70     98 50 05 F1 | 	add	fp, #152
26e74     A8 92 02 FB | 	rdlong	local04, fp
26e78     01 92 06 F1 | 	add	local04, #1
26e7c     49 7B 62 F6 | 	neg	arg04, local04
26e80     9C 50 85 F1 | 	sub	fp, #156
26e84     A8 7C 02 FB | 	rdlong	arg05, fp
26e88     1C 50 85 F1 | 	sub	fp, #28
26e8c     B4 23 B0 FD | 	call	#__system__disassemble_1264
26e90                 | LR__1608
26e90                 | LR__1609
26e90     1C 50 05 F1 | 	add	fp, #28
26e94     A8 8E 02 FB | 	rdlong	local02, fp
26e98     1C 50 85 F1 | 	sub	fp, #28
26e9c     02 8E 0E F2 | 	cmp	local02, #2 wz
26ea0     4C 00 90 5D |  if_ne	jmp	#LR__1612
26ea4     1C 50 05 F1 | 	add	fp, #28
26ea8     A8 20 68 FC | 	wrlong	#16, fp
26eac     1C 50 85 F1 | 	sub	fp, #28
26eb0                 | LR__1610
26eb0     14 50 05 F1 | 	add	fp, #20
26eb4     A8 8E 0A FB | 	rdlong	local02, fp wz
26eb8     14 50 85 F1 | 	sub	fp, #20
26ebc     30 00 90 AD |  if_e	jmp	#LR__1611
26ec0     14 50 05 F1 | 	add	fp, #20
26ec4     A8 90 02 FB | 	rdlong	local03, fp
26ec8     14 50 85 F1 | 	sub	fp, #20
26ecc     00 80 00 FF 
26ed0     00 90 16 F2 | 	cmp	local03, ##16777216 wc
26ed4     18 00 90 3D |  if_ae	jmp	#LR__1611
26ed8     14 50 05 F1 | 	add	fp, #20
26edc     A8 8E 02 FB | 	rdlong	local02, fp
26ee0     01 8E 66 F0 | 	shl	local02, #1
26ee4     A8 8E 62 FC | 	wrlong	local02, fp
26ee8     14 50 85 F1 | 	sub	fp, #20
26eec     C0 FF 9F FD | 	jmp	#LR__1610
26ef0                 | LR__1611
26ef0                 | LR__1612
26ef0     70 50 05 F1 | 	add	fp, #112
26ef4     A8 74 02 F6 | 	mov	arg01, fp
26ef8     5C 50 85 F1 | 	sub	fp, #92
26efc     A8 76 02 FB | 	rdlong	arg02, fp
26f00     08 50 05 F1 | 	add	fp, #8
26f04     A8 78 02 FB | 	rdlong	arg03, fp
26f08     A0 50 05 F1 | 	add	fp, #160
26f0c     A8 7C 02 FB | 	rdlong	arg05, fp
26f10     BC 50 85 F1 | 	sub	fp, #188
26f14     01 7A 06 F6 | 	mov	arg04, #1
26f18     A8 22 B0 FD | 	call	#__system___uitoa
26f1c     58 50 05 F1 | 	add	fp, #88
26f20     A8 34 62 FC | 	wrlong	result1, fp
26f24     38 50 85 F1 | 	sub	fp, #56
26f28     A8 8E 02 FB | 	rdlong	local02, fp
26f2c     20 50 85 F1 | 	sub	fp, #32
26f30     00 8E 56 F2 | 	cmps	local02, #0 wc
26f34     4C 00 90 3D |  if_ae	jmp	#LR__1613
26f38     60 50 05 F1 | 	add	fp, #96
26f3c     A8 5A 68 FC | 	wrlong	#45, fp
26f40     50 50 05 F1 | 	add	fp, #80
26f44     A8 74 02 F6 | 	mov	arg01, fp
26f48     90 50 85 F1 | 	sub	fp, #144
26f4c     A8 90 02 FB | 	rdlong	local03, fp
26f50     48 77 62 F6 | 	neg	arg02, local03
26f54     18 50 05 F1 | 	add	fp, #24
26f58     A8 7A 02 FB | 	rdlong	arg04, fp
26f5c     84 50 05 F1 | 	add	fp, #132
26f60     A8 96 02 FB | 	rdlong	local06, fp
26f64     BC 50 85 F1 | 	sub	fp, #188
26f68     0A 78 06 F6 | 	mov	arg03, #10
26f6c     4B 7D 02 F6 | 	mov	arg05, local06
26f70     50 22 B0 FD | 	call	#__system___uitoa
26f74     5C 50 05 F1 | 	add	fp, #92
26f78     A8 34 62 FC | 	wrlong	result1, fp
26f7c     5C 50 85 F1 | 	sub	fp, #92
26f80     44 00 90 FD | 	jmp	#LR__1614
26f84                 | LR__1613
26f84     60 50 05 F1 | 	add	fp, #96
26f88     A8 56 68 FC | 	wrlong	#43, fp
26f8c     50 50 05 F1 | 	add	fp, #80
26f90     A8 74 02 F6 | 	mov	arg01, fp
26f94     90 50 85 F1 | 	sub	fp, #144
26f98     A8 76 02 FB | 	rdlong	arg02, fp
26f9c     18 50 05 F1 | 	add	fp, #24
26fa0     A8 7A 02 FB | 	rdlong	arg04, fp
26fa4     84 50 05 F1 | 	add	fp, #132
26fa8     A8 96 02 FB | 	rdlong	local06, fp
26fac     BC 50 85 F1 | 	sub	fp, #188
26fb0     0A 78 06 F6 | 	mov	arg03, #10
26fb4     4B 7D 02 F6 | 	mov	arg05, local06
26fb8     08 22 B0 FD | 	call	#__system___uitoa
26fbc     5C 50 05 F1 | 	add	fp, #92
26fc0     A8 34 62 FC | 	wrlong	result1, fp
26fc4     5C 50 85 F1 | 	sub	fp, #92
26fc8                 | LR__1614
26fc8     24 50 05 F1 | 	add	fp, #36
26fcc     A8 8E 0A FB | 	rdlong	local02, fp wz
26fd0     24 50 85 F1 | 	sub	fp, #36
26fd4     2C 00 90 AD |  if_e	jmp	#LR__1615
26fd8     50 50 05 F1 | 	add	fp, #80
26fdc     A8 00 68 FC | 	wrlong	#0, fp
26fe0     04 50 85 F1 | 	sub	fp, #4
26fe4     A8 00 68 FC | 	wrlong	#0, fp
26fe8     6C 50 05 F1 | 	add	fp, #108
26fec     A8 8E 02 FB | 	rdlong	local02, fp
26ff0     01 8E 06 F1 | 	add	local02, #1
26ff4     64 50 85 F1 | 	sub	fp, #100
26ff8     A8 8E 62 FC | 	wrlong	local02, fp
26ffc     54 50 85 F1 | 	sub	fp, #84
27000     88 00 90 FD | 	jmp	#LR__1618
27004                 | LR__1615
27004     20 50 05 F1 | 	add	fp, #32
27008     A8 8E 02 FB | 	rdlong	local02, fp
2700c     20 50 85 F1 | 	sub	fp, #32
27010     00 8E 56 F2 | 	cmps	local02, #0 wc
27014     40 00 90 3D |  if_ae	jmp	#LR__1616
27018     20 50 05 F1 | 	add	fp, #32
2701c     A8 8C 02 FB | 	rdlong	local01, fp
27020     30 50 05 F1 | 	add	fp, #48
27024     A8 8C 62 FC | 	wrlong	local01, fp
27028     04 50 85 F1 | 	sub	fp, #4
2702c     A8 8C 62 FC | 	wrlong	local01, fp
27030     2C 50 85 F1 | 	sub	fp, #44
27034     A8 8E 02 FB | 	rdlong	local02, fp
27038     98 50 05 F1 | 	add	fp, #152
2703c     A8 90 02 FB | 	rdlong	local03, fp
27040     48 8F 02 F1 | 	add	local02, local03
27044     01 8E 06 F1 | 	add	local02, #1
27048     64 50 85 F1 | 	sub	fp, #100
2704c     A8 8E 62 FC | 	wrlong	local02, fp
27050     54 50 85 F1 | 	sub	fp, #84
27054     34 00 90 FD | 	jmp	#LR__1617
27058                 | LR__1616
27058     4C 50 05 F1 | 	add	fp, #76
2705c     A8 00 68 FC | 	wrlong	#0, fp
27060     2C 50 85 F1 | 	sub	fp, #44
27064     A8 8E 02 FB | 	rdlong	local02, fp
27068     30 50 05 F1 | 	add	fp, #48
2706c     A8 8E 62 FC | 	wrlong	local02, fp
27070     68 50 05 F1 | 	add	fp, #104
27074     A8 90 02 FB | 	rdlong	local03, fp
27078     48 8F 02 F1 | 	add	local02, local03
2707c     01 8E 06 F1 | 	add	local02, #1
27080     64 50 85 F1 | 	sub	fp, #100
27084     A8 8E 62 FC | 	wrlong	local02, fp
27088     54 50 85 F1 | 	sub	fp, #84
2708c                 | LR__1617
2708c                 | LR__1618
2708c     54 50 05 F1 | 	add	fp, #84
27090     A8 8E 02 FB | 	rdlong	local02, fp
27094     08 50 85 F1 | 	sub	fp, #8
27098     A8 90 02 FB | 	rdlong	local03, fp
2709c     48 8F 82 F1 | 	sub	local02, local03
270a0     01 8E 06 F1 | 	add	local02, #1
270a4     24 50 85 F1 | 	sub	fp, #36
270a8     A8 8E 62 FC | 	wrlong	local02, fp
270ac     04 50 05 F1 | 	add	fp, #4
270b0     A8 8E 0A FB | 	rdlong	local02, fp wz
270b4     2C 50 85 F1 | 	sub	fp, #44
270b8     28 50 05 51 |  if_ne	add	fp, #40
270bc     A8 90 02 5B |  if_ne	rdlong	local03, fp
270c0     01 90 06 51 |  if_ne	add	local03, #1
270c4     A8 90 62 5C |  if_ne	wrlong	local03, fp
270c8     28 50 85 51 |  if_ne	sub	fp, #40
270cc     1C 50 05 F1 | 	add	fp, #28
270d0     A8 8E 02 FB | 	rdlong	local02, fp
270d4     1C 50 85 F1 | 	sub	fp, #28
270d8     10 8E 0E F2 | 	cmp	local02, #16 wz
270dc     28 50 05 A1 |  if_e	add	fp, #40
270e0     A8 8E 02 AB |  if_e	rdlong	local02, fp
270e4     02 8E 06 A1 |  if_e	add	local02, #2
270e8     A8 8E 62 AC |  if_e	wrlong	local02, fp
270ec     28 50 85 A1 |  if_e	sub	fp, #40
270f0     24 50 05 F1 | 	add	fp, #36
270f4     A8 8E 0A FB | 	rdlong	local02, fp wz
270f8     24 50 85 F1 | 	sub	fp, #36
270fc     28 00 90 AD |  if_e	jmp	#LR__1619
27100     28 50 05 F1 | 	add	fp, #40
27104     A8 8E 02 FB | 	rdlong	local02, fp
27108     02 90 06 F6 | 	mov	local03, #2
2710c     34 50 05 F1 | 	add	fp, #52
27110     A8 94 02 FB | 	rdlong	local05, fp
27114     4A 91 02 F1 | 	add	local03, local05
27118     48 8F 02 F1 | 	add	local02, local03
2711c     34 50 85 F1 | 	sub	fp, #52
27120     A8 8E 62 FC | 	wrlong	local02, fp
27124     28 50 85 F1 | 	sub	fp, #40
27128                 | LR__1619
27128     28 50 05 F1 | 	add	fp, #40
2712c     A8 8E 02 FB | 	rdlong	local02, fp
27130     28 50 85 F1 | 	sub	fp, #40
27134     41 8E 56 F2 | 	cmps	local02, #65 wc
27138     01 34 66 36 |  if_ae	neg	result1, #1
2713c     74 05 90 3D |  if_ae	jmp	#LR__1647
27140     3C 50 05 F1 | 	add	fp, #60
27144     A8 8E 0A FB | 	rdlong	local02, fp wz
27148     3C 50 85 F1 | 	sub	fp, #60
2714c     60 00 90 AD |  if_e	jmp	#LR__1620
27150     C0 50 05 F1 | 	add	fp, #192
27154     A8 74 02 FB | 	rdlong	arg01, fp
27158     94 50 85 F1 | 	sub	fp, #148
2715c     A8 76 02 FB | 	rdlong	arg02, fp
27160     14 50 05 F1 | 	add	fp, #20
27164     A8 78 02 FB | 	rdlong	arg03, fp
27168     40 50 85 F1 | 	sub	fp, #64
2716c     F4 22 B0 FD | 	call	#__system__emitsign_1266
27170     18 51 05 F1 | 	add	fp, #280
27174     A8 34 62 FC | 	wrlong	result1, fp
27178     18 51 85 F1 | 	sub	fp, #280
2717c     00 34 56 F2 | 	cmps	result1, #0 wc
27180     18 51 05 C1 |  if_b	add	fp, #280
27184     A8 34 02 CB |  if_b	rdlong	result1, fp
27188     18 51 85 C1 |  if_b	sub	fp, #280
2718c     24 05 90 CD |  if_b	jmp	#LR__1647
27190     C0 50 05 F1 | 	add	fp, #192
27194     A8 8E 02 FB | 	rdlong	local02, fp
27198     58 50 05 F1 | 	add	fp, #88
2719c     A8 90 02 FB | 	rdlong	local03, fp
271a0     48 8F 02 F1 | 	add	local02, local03
271a4     58 50 85 F1 | 	sub	fp, #88
271a8     A8 8E 62 FC | 	wrlong	local02, fp
271ac     C0 50 85 F1 | 	sub	fp, #192
271b0                 | LR__1620
271b0     4C 50 05 F1 | 	add	fp, #76
271b4     A8 8E 02 FB | 	rdlong	local02, fp
271b8     34 50 85 F1 | 	sub	fp, #52
271bc     A8 8E 62 FC | 	wrlong	local02, fp
271c0     18 50 85 F1 | 	sub	fp, #24
271c4     8C 8F 9D FE | 	loc	pa,	#(@LR__1626-@LR__1621)
271c8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
271cc                 | LR__1621
271cc     18 50 05 F1 | 	add	fp, #24
271d0     A8 90 02 FB | 	rdlong	local03, fp
271d4     48 8D 02 F6 | 	mov	local01, local03
271d8     3C 50 05 F1 | 	add	fp, #60
271dc     A8 92 02 FB | 	rdlong	local04, fp
271e0     54 50 85 F1 | 	sub	fp, #84
271e4     49 95 02 F6 | 	mov	local05, local04
271e8     4A 8D 52 F2 | 	cmps	local01, local05 wc
271ec     30 01 90 3D |  if_ae	jmp	#LR__1627
271f0     18 50 05 F1 | 	add	fp, #24
271f4     A8 96 02 FB | 	rdlong	local06, fp
271f8     18 50 85 F1 | 	sub	fp, #24
271fc     00 96 56 F2 | 	cmps	local06, #0 wc
27200     58 00 90 CD |  if_b	jmp	#LR__1622
27204     18 50 05 F1 | 	add	fp, #24
27208     A8 96 02 FB | 	rdlong	local06, fp
2720c     40 50 05 F1 | 	add	fp, #64
27210     A8 98 02 FB | 	rdlong	local07, fp
27214     58 50 85 F1 | 	sub	fp, #88
27218     4C 97 52 F2 | 	cmps	local06, local07 wc
2721c     3C 00 90 3D |  if_ae	jmp	#LR__1622
27220     C0 50 05 F1 | 	add	fp, #192
27224     A8 98 02 FB | 	rdlong	local07, fp
27228     4C 97 02 F6 | 	mov	local06, local07
2722c     01 98 06 F1 | 	add	local07, #1
27230     A8 98 62 FC | 	wrlong	local07, fp
27234     A8 50 85 F1 | 	sub	fp, #168
27238     A8 98 02 FB | 	rdlong	local07, fp
2723c     4C 9B 02 F6 | 	mov	local08, local07
27240     58 50 05 F1 | 	add	fp, #88
27244     A8 9C 02 F6 | 	mov	local09, fp
27248     A8 9A 02 F1 | 	add	local08, fp
2724c     4D 9F C2 FA | 	rdbyte	local10, local08
27250     4B 9F 42 FC | 	wrbyte	local10, local06
27254     70 50 85 F1 | 	sub	fp, #112
27258     20 00 90 FD | 	jmp	#LR__1623
2725c                 | LR__1622
2725c     C0 50 05 F1 | 	add	fp, #192
27260     A8 96 02 FB | 	rdlong	local06, fp
27264     4B 9B 02 F6 | 	mov	local08, local06
27268     01 9A 06 F1 | 	add	local08, #1
2726c     A8 9A 62 FC | 	wrlong	local08, fp
27270     C0 50 85 F1 | 	sub	fp, #192
27274     30 9A 06 F6 | 	mov	local08, #48
27278     4B 61 48 FC | 	wrbyte	#48, local06
2727c                 | LR__1623
2727c     18 50 05 F1 | 	add	fp, #24
27280     A8 96 02 FB | 	rdlong	local06, fp
27284     38 50 05 F1 | 	add	fp, #56
27288     A8 A0 02 FB | 	rdlong	local11, fp
2728c     50 50 85 F1 | 	sub	fp, #80
27290     50 97 0A F2 | 	cmp	local06, local11 wz
27294     64 00 90 5D |  if_ne	jmp	#LR__1625
27298     10 51 05 F1 | 	add	fp, #272
2729c     A8 98 02 FB | 	rdlong	local07, fp
272a0     10 51 85 F1 | 	sub	fp, #272
272a4     4C 9B 0A F6 | 	mov	local08, local07 wz
272a8     28 00 90 5D |  if_ne	jmp	#LR__1624
272ac     54 50 05 F1 | 	add	fp, #84
272b0     A8 9E 02 FB | 	rdlong	local10, fp
272b4     4F 9D 02 F6 | 	mov	local09, local10
272b8     01 9C 86 F1 | 	sub	local09, #1
272bc     3C 50 85 F1 | 	sub	fp, #60
272c0     A8 A2 02 FB | 	rdlong	local12, fp
272c4     18 50 85 F1 | 	sub	fp, #24
272c8     51 A5 02 F6 | 	mov	local13, local12
272cc     4E A5 52 F2 | 	cmps	local13, local09 wc
272d0     28 00 90 3D |  if_ae	jmp	#LR__1625
272d4                 | LR__1624
272d4     C0 50 05 F1 | 	add	fp, #192
272d8     A8 A6 02 FB | 	rdlong	local14, fp
272dc     53 97 02 F6 | 	mov	local06, local14
272e0     53 A9 02 F6 | 	mov	local15, local14
272e4     54 A1 02 F6 | 	mov	local11, local15
272e8     01 A0 06 F1 | 	add	local11, #1
272ec     A8 A0 62 FC | 	wrlong	local11, fp
272f0     C0 50 85 F1 | 	sub	fp, #192
272f4     2E 9A 06 F6 | 	mov	local08, #46
272f8     4B 5D 48 FC | 	wrbyte	#46, local06
272fc                 | LR__1625
272fc     18 50 05 F1 | 	add	fp, #24
27300     A8 A6 02 FB | 	rdlong	local14, fp
27304     53 97 02 F6 | 	mov	local06, local14
27308     53 A9 02 F6 | 	mov	local15, local14
2730c     54 A1 02 F6 | 	mov	local11, local15
27310     01 A0 06 F1 | 	add	local11, #1
27314     A8 A0 62 FC | 	wrlong	local11, fp
27318     18 50 85 F1 | 	sub	fp, #24
2731c     AC FE 9F FD | 	jmp	#LR__1621
27320                 | LR__1626
27320                 | LR__1627
27320     34 50 05 F1 | 	add	fp, #52
27324     A8 8E 0A FB | 	rdlong	local02, fp wz
27328     34 50 85 F1 | 	sub	fp, #52
2732c     AC 00 90 AD |  if_e	jmp	#LR__1631
27330     C0 50 05 F1 | 	add	fp, #192
27334     A8 8E 02 FB | 	rdlong	local02, fp
27338     01 8E 86 F1 | 	sub	local02, #1
2733c     A8 8E 62 FC | 	wrlong	local02, fp
27340     C0 50 85 F1 | 	sub	fp, #192
27344     08 8D 9D FE | 	loc	pa,	#(@LR__1629-@LR__1628)
27348     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2734c                 | LR__1628
2734c     C0 50 05 F1 | 	add	fp, #192
27350     A8 8E 02 FB | 	rdlong	local02, fp
27354     04 50 05 F1 | 	add	fp, #4
27358     A8 90 02 FB | 	rdlong	local03, fp
2735c     C4 50 85 F1 | 	sub	fp, #196
27360     48 8F 5A F2 | 	cmps	local02, local03 wcz
27364     34 00 90 ED |  if_be	jmp	#LR__1630
27368     C0 50 05 F1 | 	add	fp, #192
2736c     A8 A6 02 FB | 	rdlong	local14, fp
27370     C0 50 85 F1 | 	sub	fp, #192
27374     53 97 02 F6 | 	mov	local06, local14
27378     4B 93 C2 FA | 	rdbyte	local04, local06
2737c     30 92 0E F2 | 	cmp	local04, #48 wz
27380     18 00 90 5D |  if_ne	jmp	#LR__1630
27384     C0 50 05 F1 | 	add	fp, #192
27388     A8 8E 02 FB | 	rdlong	local02, fp
2738c     01 8E 86 F1 | 	sub	local02, #1
27390     A8 8E 62 FC | 	wrlong	local02, fp
27394     C0 50 85 F1 | 	sub	fp, #192
27398     B0 FF 9F FD | 	jmp	#LR__1628
2739c                 | LR__1629
2739c                 | LR__1630
2739c     C0 50 05 F1 | 	add	fp, #192
273a0     A8 8C 02 FB | 	rdlong	local01, fp
273a4     C0 50 85 F1 | 	sub	fp, #192
273a8     46 8F C2 FA | 	rdbyte	local02, local01
273ac     2E 8E 0E F2 | 	cmp	local02, #46 wz
273b0     C0 50 05 A1 |  if_e	add	fp, #192
273b4     A8 8E 02 AB |  if_e	rdlong	local02, fp
273b8     01 8E 86 A1 |  if_e	sub	local02, #1
273bc     A8 8E 62 AC |  if_e	wrlong	local02, fp
273c0     C0 50 85 A1 |  if_e	sub	fp, #192
273c4     C0 50 05 F1 | 	add	fp, #192
273c8     A8 94 02 FB | 	rdlong	local05, fp
273cc     4A 91 02 F6 | 	mov	local03, local05
273d0     01 90 06 F1 | 	add	local03, #1
273d4     A8 90 62 FC | 	wrlong	local03, fp
273d8     C0 50 85 F1 | 	sub	fp, #192
273dc                 | LR__1631
273dc     24 50 05 F1 | 	add	fp, #36
273e0     A8 8E 0A FB | 	rdlong	local02, fp wz
273e4     24 50 85 F1 | 	sub	fp, #36
273e8     C4 00 90 AD |  if_e	jmp	#LR__1634
273ec     C0 50 05 F1 | 	add	fp, #192
273f0     A8 8C 02 FB | 	rdlong	local01, fp
273f4     46 91 02 F6 | 	mov	local03, local01
273f8     01 90 06 F1 | 	add	local03, #1
273fc     A8 90 62 FC | 	wrlong	local03, fp
27400     90 50 85 F1 | 	sub	fp, #144
27404     A8 92 02 FB | 	rdlong	local04, fp
27408     46 93 42 FC | 	wrbyte	local04, local01
2740c     90 50 05 F1 | 	add	fp, #144
27410     A8 8C 02 FB | 	rdlong	local01, fp
27414     46 91 02 F6 | 	mov	local03, local01
27418     01 90 06 F1 | 	add	local03, #1
2741c     A8 90 62 FC | 	wrlong	local03, fp
27420     60 50 85 F1 | 	sub	fp, #96
27424     A8 92 02 FB | 	rdlong	local04, fp
27428     46 93 42 FC | 	wrbyte	local04, local01
2742c     48 50 85 F1 | 	sub	fp, #72
27430     A8 00 68 FC | 	wrlong	#0, fp
27434     18 50 85 F1 | 	sub	fp, #24
27438                 | LR__1632
27438     18 50 05 F1 | 	add	fp, #24
2743c     A8 8C 02 FB | 	rdlong	local01, fp
27440     44 50 05 F1 | 	add	fp, #68
27444     A8 92 02 FB | 	rdlong	local04, fp
27448     5C 50 85 F1 | 	sub	fp, #92
2744c     49 95 02 F6 | 	mov	local05, local04
27450     4A 8D 52 F2 | 	cmps	local01, local05 wc
27454     58 00 90 3D |  if_ae	jmp	#LR__1633
27458     C0 50 05 F1 | 	add	fp, #192
2745c     A8 A6 02 FB | 	rdlong	local14, fp
27460     53 A1 02 F6 | 	mov	local11, local14
27464     01 A0 06 F1 | 	add	local11, #1
27468     A8 A0 62 FC | 	wrlong	local11, fp
2746c     A8 50 85 F1 | 	sub	fp, #168
27470     A8 98 02 FB | 	rdlong	local07, fp
27474     4C 9B 02 F6 | 	mov	local08, local07
27478     98 50 05 F1 | 	add	fp, #152
2747c     A8 9C 02 F6 | 	mov	local09, fp
27480     A8 9A 02 F1 | 	add	local08, fp
27484     4D 9F C2 FA | 	rdbyte	local10, local08
27488     53 9F 42 FC | 	wrbyte	local10, local14
2748c     98 50 85 F1 | 	sub	fp, #152
27490     A8 A6 02 FB | 	rdlong	local14, fp
27494     53 97 02 F6 | 	mov	local06, local14
27498     53 A9 02 F6 | 	mov	local15, local14
2749c     54 A1 02 F6 | 	mov	local11, local15
274a0     01 A0 06 F1 | 	add	local11, #1
274a4     A8 A0 62 FC | 	wrlong	local11, fp
274a8     18 50 85 F1 | 	sub	fp, #24
274ac     88 FF 9F FD | 	jmp	#LR__1632
274b0                 | LR__1633
274b0                 | LR__1634
274b0     C0 50 05 F1 | 	add	fp, #192
274b4     A8 8C 02 FB | 	rdlong	local01, fp
274b8     C0 50 85 F1 | 	sub	fp, #192
274bc     46 8F 02 F6 | 	mov	local02, local01
274c0     00 90 06 F6 | 	mov	local03, #0
274c4     47 01 48 FC | 	wrbyte	#0, local02
274c8                 | LR__1635
274c8     6C 50 05 F1 | 	add	fp, #108
274cc     A8 8E 0A FB | 	rdlong	local02, fp wz
274d0     6C 50 85 F1 | 	sub	fp, #108
274d4     BC 01 90 AD |  if_e	jmp	#LR__1646
274d8     48 50 05 F1 | 	add	fp, #72
274dc     A8 90 0A FB | 	rdlong	local03, fp wz
274e0     48 50 85 F1 | 	sub	fp, #72
274e4     AC 01 90 AD |  if_e	jmp	#LR__1646
274e8     C4 50 05 F1 | 	add	fp, #196
274ec     A8 74 02 FB | 	rdlong	arg01, fp
274f0     C4 50 85 F1 | 	sub	fp, #196
274f4     00 AA 06 F6 | 	mov	local16, #0
274f8     14 8B 9D FE | 	loc	pa,	#(@LR__1637-@LR__1636)
274fc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27500                 | LR__1636
27500     3A 35 CA FA | 	rdbyte	result1, arg01 wz
27504     01 AA 06 51 |  if_ne	add	local16, #1
27508     01 74 06 51 |  if_ne	add	arg01, #1
2750c     F0 FF 9F 5D |  if_ne	jmp	#LR__1636
27510                 | LR__1637
27510     55 35 02 F6 | 	mov	result1, local16
27514     1A 93 02 F6 | 	mov	local04, result1
27518     6C 50 05 F1 | 	add	fp, #108
2751c     A8 A6 02 FB | 	rdlong	local14, fp
27520     6C 50 85 F1 | 	sub	fp, #108
27524     53 97 02 F6 | 	mov	local06, local14
27528     4B 93 5A F2 | 	cmps	local04, local06 wcz
2752c     64 01 90 ED |  if_be	jmp	#LR__1646
27530     C4 50 05 F1 | 	add	fp, #196
27534     A8 8E 02 FB | 	rdlong	local02, fp
27538     5C 50 05 F1 | 	add	fp, #92
2753c     A8 8E 62 FC | 	wrlong	local02, fp
27540     FC 50 85 F1 | 	sub	fp, #252
27544     A8 8E 0A FB | 	rdlong	local02, fp wz
27548     24 50 85 F1 | 	sub	fp, #36
2754c     20 00 90 AD |  if_e	jmp	#LR__1638
27550     B8 50 05 F1 | 	add	fp, #184
27554     A8 00 68 FC | 	wrlong	#0, fp
27558     4C 50 85 F1 | 	sub	fp, #76
2755c     A8 8E 02 FB | 	rdlong	local02, fp
27560     B0 50 05 F1 | 	add	fp, #176
27564     A8 8E 62 FC | 	wrlong	local02, fp
27568     1C 51 85 F1 | 	sub	fp, #284
2756c     24 00 90 FD | 	jmp	#LR__1639
27570                 | LR__1638
27570     6C 50 05 F1 | 	add	fp, #108
27574     A8 8E 02 FB | 	rdlong	local02, fp
27578     01 8E 86 F1 | 	sub	local02, #1
2757c     4C 50 05 F1 | 	add	fp, #76
27580     A8 90 02 FB | 	rdlong	local03, fp
27584     48 8F 82 F1 | 	sub	local02, local03
27588     64 50 05 F1 | 	add	fp, #100
2758c     A8 8E 62 FC | 	wrlong	local02, fp
27590     1C 51 85 F1 | 	sub	fp, #284
27594                 | LR__1639
27594     A8 8A 9D FE | 	loc	pa,	#(@LR__1641-@LR__1640)
27598     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2759c                 | LR__1640
2759c     1C 51 05 F1 | 	add	fp, #284
275a0     A8 8E 0A FB | 	rdlong	local02, fp wz
275a4     1C 51 85 F1 | 	sub	fp, #284
275a8     30 00 90 AD |  if_e	jmp	#LR__1642
275ac     20 51 05 F1 | 	add	fp, #288
275b0     A8 8C 02 FB | 	rdlong	local01, fp
275b4     46 91 02 F6 | 	mov	local03, local01
275b8     01 90 06 F1 | 	add	local03, #1
275bc     A8 90 62 FC | 	wrlong	local03, fp
275c0     46 55 48 FC | 	wrbyte	#42, local01
275c4     04 50 85 F1 | 	sub	fp, #4
275c8     A8 8E 02 FB | 	rdlong	local02, fp
275cc     01 8E 86 F1 | 	sub	local02, #1
275d0     A8 8E 62 FC | 	wrlong	local02, fp
275d4     1C 51 85 F1 | 	sub	fp, #284
275d8     C0 FF 9F FD | 	jmp	#LR__1640
275dc                 | LR__1641
275dc                 | LR__1642
275dc     B8 50 05 F1 | 	add	fp, #184
275e0     A8 8E 0A FB | 	rdlong	local02, fp wz
275e4     B8 50 85 F1 | 	sub	fp, #184
275e8     80 00 90 AD |  if_e	jmp	#LR__1645
275ec     20 51 05 F1 | 	add	fp, #288
275f0     A8 8C 02 FB | 	rdlong	local01, fp
275f4     46 91 02 F6 | 	mov	local03, local01
275f8     01 90 06 F1 | 	add	local03, #1
275fc     A8 90 62 FC | 	wrlong	local03, fp
27600     46 5D 48 FC | 	wrbyte	#46, local01
27604     04 50 85 F1 | 	sub	fp, #4
27608     A8 00 68 FC | 	wrlong	#0, fp
2760c     1C 51 85 F1 | 	sub	fp, #284
27610                 | LR__1643
27610     1C 51 05 F1 | 	add	fp, #284
27614     A8 8C 02 FB | 	rdlong	local01, fp
27618     64 50 85 F1 | 	sub	fp, #100
2761c     A8 94 02 FB | 	rdlong	local05, fp
27620     B8 50 85 F1 | 	sub	fp, #184
27624     4A 8D 52 F2 | 	cmps	local01, local05 wc
27628     40 00 90 3D |  if_ae	jmp	#LR__1644
2762c     20 51 05 F1 | 	add	fp, #288
27630     A8 A6 02 FB | 	rdlong	local14, fp
27634     53 A1 02 F6 | 	mov	local11, local14
27638     01 A0 06 F1 | 	add	local11, #1
2763c     A8 A0 62 FC | 	wrlong	local11, fp
27640     2A 9A 06 F6 | 	mov	local08, #42
27644     53 55 48 FC | 	wrbyte	#42, local14
27648     04 50 85 F1 | 	sub	fp, #4
2764c     A8 A6 02 FB | 	rdlong	local14, fp
27650     53 97 02 F6 | 	mov	local06, local14
27654     53 A9 02 F6 | 	mov	local15, local14
27658     54 A1 02 F6 | 	mov	local11, local15
2765c     01 A0 06 F1 | 	add	local11, #1
27660     A8 A0 62 FC | 	wrlong	local11, fp
27664     1C 51 85 F1 | 	sub	fp, #284
27668     A4 FF 9F FD | 	jmp	#LR__1643
2766c                 | LR__1644
2766c                 | LR__1645
2766c     20 51 05 F1 | 	add	fp, #288
27670     A8 8C 02 FB | 	rdlong	local01, fp
27674     46 8F 02 F6 | 	mov	local02, local01
27678     46 95 02 F6 | 	mov	local05, local01
2767c     4A 91 02 F6 | 	mov	local03, local05
27680     01 90 06 F1 | 	add	local03, #1
27684     A8 90 62 FC | 	wrlong	local03, fp
27688     20 51 85 F1 | 	sub	fp, #288
2768c     00 92 06 F6 | 	mov	local04, #0
27690     47 01 48 FC | 	wrbyte	#0, local02
27694                 | LR__1646
27694     04 50 05 F1 | 	add	fp, #4
27698     A8 74 02 FB | 	rdlong	arg01, fp
2769c     04 50 05 F1 | 	add	fp, #4
276a0     A8 76 02 FB | 	rdlong	arg02, fp
276a4     BC 50 05 F1 | 	add	fp, #188
276a8     A8 78 02 FB | 	rdlong	arg03, fp
276ac     C4 50 85 F1 | 	sub	fp, #196
276b0     6C EC BF FD | 	call	#__system___fmtstr
276b4                 | LR__1647
276b4     A8 F0 03 F6 | 	mov	ptra, fp
276b8     B3 00 A0 FD | 	call	#popregs_
276bc                 | __system___fmtfloat_ret
276bc     2D 00 64 FD | 	ret
276c0                 | 
276c0                 | __system___float_fromuns
276c0     3A 79 0A F6 | 	mov	arg03, arg01 wz
276c4     3C 35 02 A6 |  if_e	mov	result1, arg03
276c8     24 00 90 AD |  if_e	jmp	#LR__1648
276cc     3C 77 92 F7 | 	encod	arg02, arg03 wc
276d0     01 76 06 C1 |  if_b	add	arg02, #1
276d4     01 76 86 F1 | 	sub	arg02, #1
276d8     1F 74 06 F6 | 	mov	arg01, #31
276dc     3B 75 82 F1 | 	sub	arg01, arg02
276e0     3A 79 62 F0 | 	shl	arg03, arg01
276e4     02 78 46 F0 | 	shr	arg03, #2
276e8     00 74 06 F6 | 	mov	arg01, #0
276ec     E0 08 B0 FD | 	call	#__system___float_Pack
276f0                 | LR__1648
276f0                 | __system___float_fromuns_ret
276f0     2D 00 64 FD | 	ret
276f4                 | 
276f4                 | __system___float_fromint
276f4     01 4C 05 F6 | 	mov	COUNT_, #1
276f8     A9 00 A0 FD | 	call	#pushregs_
276fc     00 74 56 F2 | 	cmps	arg01, #0 wc
27700     3A 75 62 C6 |  if_b	neg	arg01, arg01
27704     01 8C 06 C6 |  if_b	mov	local01, #1
27708     00 8C 06 36 |  if_ae	mov	local01, #0
2770c     B0 FF BF FD | 	call	#__system___float_fromuns
27710     00 8C 0E F2 | 	cmp	local01, #0 wz
27714     1F 34 E6 54 |  if_ne	bitnot	result1, #31
27718     A8 F0 03 F6 | 	mov	ptra, fp
2771c     B3 00 A0 FD | 	call	#popregs_
27720                 | __system___float_fromint_ret
27720     2D 00 64 FD | 	ret
27724                 | 
27724                 | __system___float_add
27724     0F 4C 05 F6 | 	mov	COUNT_, #15
27728     A9 00 A0 FD | 	call	#pushregs_
2772c     3A 8D 02 F6 | 	mov	local01, arg01
27730     3B 8F 02 F6 | 	mov	local02, arg02
27734     00 90 06 F6 | 	mov	local03, #0
27738     46 93 02 F6 | 	mov	local04, local01
2773c     49 95 02 F6 | 	mov	local05, local04
27740     16 94 46 F7 | 	zerox	local05, #22
27744     49 97 02 F6 | 	mov	local06, local04
27748     01 96 66 F0 | 	shl	local06, #1
2774c     18 96 46 F0 | 	shr	local06, #24
27750     1F 92 46 F0 | 	shr	local04, #31
27754     47 75 02 F6 | 	mov	arg01, local02
27758     3A 35 02 F6 | 	mov	result1, arg01
2775c     1A 99 02 F6 | 	mov	local07, result1
27760     16 98 46 F7 | 	zerox	local07, #22
27764     1A 9B 02 F6 | 	mov	local08, result1
27768     01 9A 66 F0 | 	shl	local08, #1
2776c     18 9A 46 F0 | 	shr	local08, #24
27770     1A 9D 02 F6 | 	mov	local09, result1
27774     1F 9C 46 F0 | 	shr	local09, #31
27778     4E 9F 02 F6 | 	mov	local10, local09
2777c     00 A0 06 F6 | 	mov	local11, #0
27780     00 A2 06 F6 | 	mov	local12, #0
27784     4D 97 12 F2 | 	cmp	local06, local08 wc
27788     4D 97 0A 32 |  if_ae	cmp	local06, local08 wz
2778c     2C 00 90 1D |  if_a	jmp	#LR__1649
27790     4C 95 12 32 |  if_ae	cmp	local05, local07 wc
27794     24 00 90 3D |  if_ae	jmp	#LR__1649
27798     4A A5 02 F6 | 	mov	local13, local05
2779c     4C 95 02 F6 | 	mov	local05, local07
277a0     52 99 02 F6 | 	mov	local07, local13
277a4     4B A5 02 F6 | 	mov	local13, local06
277a8     4D 97 02 F6 | 	mov	local06, local08
277ac     52 9B 02 F6 | 	mov	local08, local13
277b0     49 A5 02 F6 | 	mov	local13, local04
277b4     4F 93 02 F6 | 	mov	local04, local10
277b8     52 9F 02 F6 | 	mov	local10, local13
277bc                 | LR__1649
277bc     FF 96 0E F2 | 	cmp	local06, #255 wz
277c0     74 01 90 AD |  if_e	jmp	#LR__1664
277c4     00 96 0E F2 | 	cmp	local06, #0 wz
277c8     B0 01 90 AD |  if_e	jmp	#LR__1666
277cc     17 94 26 F4 | 	bith	local05, #23
277d0                 | LR__1650
277d0     00 9A 0E F2 | 	cmp	local08, #0 wz
277d4     F8 01 90 AD |  if_e	jmp	#LR__1670
277d8     17 98 26 F4 | 	bith	local07, #23
277dc                 | LR__1651
277dc     7F 96 86 F1 | 	sub	local06, #127
277e0     7F 9A 86 F1 | 	sub	local08, #127
277e4     4B A7 02 F6 | 	mov	local14, local06
277e8     4D A7 82 F1 | 	sub	local14, local08
277ec     38 88 9D FE | 	loc	pa,	#(@LR__1653-@LR__1652)
277f0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
277f4                 | LR__1652
277f4     20 A6 56 F2 | 	cmps	local14, #32 wc
277f8     20 00 90 CD |  if_b	jmp	#LR__1654
277fc     4C 9D 02 F6 | 	mov	local09, local07
27800     00 A0 0E F2 | 	cmp	local11, #0 wz
27804     6F A0 62 FD | 	wrnz	local11
27808     50 9D 42 F5 | 	or	local09, local11
2780c     4E A1 02 F6 | 	mov	local11, local09
27810     00 98 06 F6 | 	mov	local07, #0
27814     20 A6 86 F1 | 	sub	local14, #32
27818     D8 FF 9F FD | 	jmp	#LR__1652
2781c                 | LR__1653
2781c                 | LR__1654
2781c     00 A6 0E F2 | 	cmp	local14, #0 wz
27820     38 00 90 AD |  if_e	jmp	#LR__1655
27824     4C A5 02 F6 | 	mov	local13, local07
27828     20 9C 06 F6 | 	mov	local09, #32
2782c     53 9D 82 F1 | 	sub	local09, local14
27830     4E A5 62 F0 | 	shl	local13, local09
27834     50 9D 02 F6 | 	mov	local09, local11
27838     20 9A 06 F6 | 	mov	local08, #32
2783c     53 9B 82 F1 | 	sub	local08, local14
27840     4D 9D 6A F0 | 	shl	local09, local08 wz
27844     53 A1 42 F0 | 	shr	local11, local14
27848     53 99 42 F0 | 	shr	local07, local14
2784c     52 A1 42 F5 | 	or	local11, local13
27850     00 A8 06 F6 | 	mov	local15, #0
27854     01 A8 06 56 |  if_ne	mov	local15, #1
27858     54 A1 42 F5 | 	or	local11, local15
2785c                 | LR__1655
2785c     49 A9 02 F6 | 	mov	local15, local04
27860     4F A9 62 F5 | 	xor	local15, local10
27864     01 A8 CE F7 | 	test	local15, #1 wz
27868     18 00 90 AD |  if_e	jmp	#LR__1656
2786c     4C 99 22 F6 | 	not	local07, local07
27870     50 A1 22 F6 | 	not	local11, local11
27874     01 A0 0E F1 | 	add	local11, #1 wz
27878     00 A8 06 F6 | 	mov	local15, #0
2787c     01 A8 06 A6 |  if_e	mov	local15, #1
27880     54 99 02 F1 | 	add	local07, local15
27884                 | LR__1656
27884     50 A3 12 F1 | 	add	local12, local11 wc
27888     4C 95 22 F1 | 	addx	local05, local07
2788c     00 94 56 F2 | 	cmps	local05, #0 wc
27890     1C 00 90 3D |  if_ae	jmp	#LR__1657
27894     01 92 66 F5 | 	xor	local04, #1
27898     4A 95 22 F6 | 	not	local05, local05
2789c     51 A3 22 F6 | 	not	local12, local12
278a0     01 A2 0E F1 | 	add	local12, #1 wz
278a4     00 A8 06 F6 | 	mov	local15, #0
278a8     01 A8 06 A6 |  if_e	mov	local15, #1
278ac     54 95 02 F1 | 	add	local05, local15
278b0                 | LR__1657
278b0     00 80 00 FF 
278b4     00 94 16 F2 | 	cmp	local05, ##16777216 wc
278b8     28 00 90 CD |  if_b	jmp	#LR__1658
278bc     01 96 06 F1 | 	add	local06, #1
278c0     51 A7 02 F6 | 	mov	local14, local12
278c4     01 A6 06 F5 | 	and	local14, #1
278c8     01 A2 46 F0 | 	shr	local12, #1
278cc     4A A9 02 F6 | 	mov	local15, local05
278d0     1F A8 66 F0 | 	shl	local15, #31
278d4     54 A3 42 F5 | 	or	local12, local15
278d8     53 A3 42 F5 | 	or	local12, local14
278dc     01 94 46 F0 | 	shr	local05, #1
278e0     3C 00 90 FD | 	jmp	#LR__1663
278e4                 | LR__1658
278e4     00 40 00 FF 
278e8     00 94 16 F2 | 	cmp	local05, ##8388608 wc
278ec     30 00 90 3D |  if_ae	jmp	#LR__1662
278f0     00 94 0E F2 | 	cmp	local05, #0 wz
278f4     00 A2 0E A2 |  if_e	cmp	local12, #0 wz
278f8     08 92 46 A5 |  if_e	or	local04, #8
278fc     01 92 26 A5 |  if_e	andn	local04, #1
27900     1C 00 90 AD |  if_e	jmp	#LR__1661
27904                 | LR__1659
27904     00 40 00 FF 
27908     00 94 16 F2 | 	cmp	local05, ##8388608 wc
2790c     10 00 90 3D |  if_ae	jmp	#LR__1660
27910     51 A3 12 F1 | 	add	local12, local12 wc
27914     4A 95 22 F1 | 	addx	local05, local05
27918     01 96 86 F1 | 	sub	local06, #1
2791c     E4 FF 9F FD | 	jmp	#LR__1659
27920                 | LR__1660
27920                 | LR__1661
27920                 | LR__1662
27920                 | LR__1663
27920     4A 75 02 F6 | 	mov	arg01, local05
27924     51 77 02 F6 | 	mov	arg02, local12
27928     4B 79 02 F6 | 	mov	arg03, local06
2792c     49 7B 02 F6 | 	mov	arg04, local04
27930     E4 1B B0 FD | 	call	#__system__pack_1346
27934     E4 00 90 FD | 	jmp	#LR__1674
27938                 | LR__1664
27938     FF 9A 0E F2 | 	cmp	local08, #255 wz
2793c     10 00 90 5D |  if_ne	jmp	#LR__1665
27940     49 9F 0A F2 | 	cmp	local10, local04 wz
27944     00 F8 3F 5F 
27948     00 34 06 56 |  if_ne	mov	result1, ##2146435072
2794c     CC 00 90 5D |  if_ne	jmp	#LR__1674
27950                 | LR__1665
27950     00 94 0E F2 | 	cmp	local05, #0 wz
27954     00 F8 3F 5F 
27958     00 34 06 56 |  if_ne	mov	result1, ##2146435072
2795c     BC 00 90 5D |  if_ne	jmp	#LR__1674
27960     51 77 02 F6 | 	mov	arg02, local12
27964     4B 79 02 F6 | 	mov	arg03, local06
27968     49 7B 02 F6 | 	mov	arg04, local04
2796c     02 7A 46 F5 | 	or	arg04, #2
27970     4A 75 02 F6 | 	mov	arg01, local05
27974     A0 1B B0 FD | 	call	#__system__pack_1346
27978     A0 00 90 FD | 	jmp	#LR__1674
2797c                 | LR__1666
2797c     00 94 0E F2 | 	cmp	local05, #0 wz
27980     2C 00 90 AD |  if_e	jmp	#LR__1669
27984     01 94 66 F0 | 	shl	local05, #1
27988     90 86 9D FE | 	loc	pa,	#(@LR__1668-@LR__1667)
2798c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27990                 | LR__1667
27990     00 40 00 FF 
27994     00 94 16 F2 | 	cmp	local05, ##8388608 wc
27998     4B A9 02 C6 |  if_b	mov	local15, local06
2799c     01 A8 86 C1 |  if_b	sub	local15, #1
279a0     54 97 02 C6 |  if_b	mov	local06, local15
279a4     01 94 66 C0 |  if_b	shl	local05, #1
279a8     E4 FF 9F CD |  if_b	jmp	#LR__1667
279ac                 | LR__1668
279ac     20 FE 9F FD | 	jmp	#LR__1650
279b0                 | LR__1669
279b0     4F 93 02 F5 | 	and	local04, local10
279b4     49 7B 02 F6 | 	mov	arg04, local04
279b8     08 7A 46 F5 | 	or	arg04, #8
279bc     00 74 06 F6 | 	mov	arg01, #0
279c0     00 76 06 F6 | 	mov	arg02, #0
279c4     00 78 06 F6 | 	mov	arg03, #0
279c8     4C 1B B0 FD | 	call	#__system__pack_1346
279cc     4C 00 90 FD | 	jmp	#LR__1674
279d0                 | LR__1670
279d0     00 98 0E F2 | 	cmp	local07, #0 wz
279d4     2C 00 90 AD |  if_e	jmp	#LR__1673
279d8     01 98 66 F0 | 	shl	local07, #1
279dc     3C 86 9D FE | 	loc	pa,	#(@LR__1672-@LR__1671)
279e0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
279e4                 | LR__1671
279e4     00 40 00 FF 
279e8     00 98 16 F2 | 	cmp	local07, ##8388608 wc
279ec     4D A9 02 C6 |  if_b	mov	local15, local08
279f0     01 A8 86 C1 |  if_b	sub	local15, #1
279f4     54 9B 02 C6 |  if_b	mov	local08, local15
279f8     01 98 66 C0 |  if_b	shl	local07, #1
279fc     E4 FF 9F CD |  if_b	jmp	#LR__1671
27a00                 | LR__1672
27a00     D8 FD 9F FD | 	jmp	#LR__1651
27a04                 | LR__1673
27a04     51 77 02 F6 | 	mov	arg02, local12
27a08     7F 96 86 F1 | 	sub	local06, #127
27a0c     4B 79 02 F6 | 	mov	arg03, local06
27a10     49 7B 02 F6 | 	mov	arg04, local04
27a14     4A 75 02 F6 | 	mov	arg01, local05
27a18     FC 1A B0 FD | 	call	#__system__pack_1346
27a1c                 | LR__1674
27a1c     A8 F0 03 F6 | 	mov	ptra, fp
27a20     B3 00 A0 FD | 	call	#popregs_
27a24                 | __system___float_add_ret
27a24     2D 00 64 FD | 	ret
27a28                 | 
27a28                 | __system___float_mul
27a28     0C 4C 05 F6 | 	mov	COUNT_, #12
27a2c     A9 00 A0 FD | 	call	#pushregs_
27a30     3A 8D 02 F6 | 	mov	local01, arg01
27a34     3B 8F 02 F6 | 	mov	local02, arg02
27a38     46 91 02 F6 | 	mov	local03, local01
27a3c     48 93 02 F6 | 	mov	local04, local03
27a40     16 92 46 F7 | 	zerox	local04, #22
27a44     48 95 02 F6 | 	mov	local05, local03
27a48     01 94 66 F0 | 	shl	local05, #1
27a4c     18 94 46 F0 | 	shr	local05, #24
27a50     1F 90 46 F0 | 	shr	local03, #31
27a54     47 75 02 F6 | 	mov	arg01, local02
27a58     3A 35 02 F6 | 	mov	result1, arg01
27a5c     1A 97 02 F6 | 	mov	local06, result1
27a60     4B 99 02 F6 | 	mov	local07, local06
27a64     16 98 46 F7 | 	zerox	local07, #22
27a68     4B 9B 02 F6 | 	mov	local08, local06
27a6c     01 9A 66 F0 | 	shl	local08, #1
27a70     18 9A 46 F0 | 	shr	local08, #24
27a74     4D 9D 02 F6 | 	mov	local09, local08
27a78     1F 96 46 F0 | 	shr	local06, #31
27a7c     00 9E 06 F6 | 	mov	local10, #0
27a80     4B 91 62 F5 | 	xor	local03, local06
27a84     FF 94 0E F2 | 	cmp	local05, #255 wz
27a88     90 00 90 AD |  if_e	jmp	#LR__1678
27a8c     FF 9C 0E F2 | 	cmp	local09, #255 wz
27a90     E0 00 90 AD |  if_e	jmp	#LR__1681
27a94     00 94 0E F2 | 	cmp	local05, #0 wz
27a98     14 01 90 AD |  if_e	jmp	#LR__1682
27a9c     17 92 26 F4 | 	bith	local04, #23
27aa0                 | LR__1675
27aa0     00 9C 0E F2 | 	cmp	local09, #0 wz
27aa4     50 01 90 AD |  if_e	jmp	#LR__1686
27aa8     17 98 26 F4 | 	bith	local07, #23
27aac                 | LR__1676
27aac     49 9B 02 F6 | 	mov	local08, local04
27ab0     04 9A 66 F0 | 	shl	local08, #4
27ab4     4C 9F 02 F6 | 	mov	local10, local07
27ab8     05 9E 66 F0 | 	shl	local10, #5
27abc     4F 9B 02 FD | 	qmul	local08, local10
27ac0     4E 95 02 F1 | 	add	local05, local09
27ac4     FE 94 86 F1 | 	sub	local05, #254
27ac8     4A A1 02 F6 | 	mov	local11, local05
27acc     04 92 66 F0 | 	shl	local04, #4
27ad0     05 98 66 F0 | 	shl	local07, #5
27ad4     18 9E 62 FD | 	getqx	local10
27ad8     4C 93 02 FD | 	qmul	local04, local07
27adc     19 A2 62 FD | 	getqy	local12
27ae0     00 80 00 FF 
27ae4     00 A2 16 F2 | 	cmp	local12, ##16777216 wc
27ae8     18 00 90 CD |  if_b	jmp	#LR__1677
27aec     01 A0 06 F1 | 	add	local11, #1
27af0     01 9E 46 F0 | 	shr	local10, #1
27af4     51 9D 02 F6 | 	mov	local09, local12
27af8     1F 9C 66 F0 | 	shl	local09, #31
27afc     4E 9F 42 F5 | 	or	local10, local09
27b00     01 A2 46 F0 | 	shr	local12, #1
27b04                 | LR__1677
27b04     51 75 02 F6 | 	mov	arg01, local12
27b08     4F 77 02 F6 | 	mov	arg02, local10
27b0c     50 79 02 F6 | 	mov	arg03, local11
27b10     48 7B 02 F6 | 	mov	arg04, local03
27b14     00 1A B0 FD | 	call	#__system__pack_1346
27b18     20 01 90 FD | 	jmp	#LR__1690
27b1c                 | LR__1678
27b1c     00 92 0E F2 | 	cmp	local04, #0 wz
27b20     46 35 02 56 |  if_ne	mov	result1, local01
27b24     14 01 90 5D |  if_ne	jmp	#LR__1690
27b28     FF 9C 56 F2 | 	cmps	local09, #255 wc
27b2c     1C 00 90 3D |  if_ae	jmp	#LR__1679
27b30     00 9C 0E F2 | 	cmp	local09, #0 wz
27b34     20 00 90 5D |  if_ne	jmp	#LR__1680
27b38     00 98 0E F2 | 	cmp	local07, #0 wz
27b3c     18 00 90 5D |  if_ne	jmp	#LR__1680
27b40     00 F8 3F FF 
27b44     00 34 06 F6 | 	mov	result1, ##2146435072
27b48     F0 00 90 FD | 	jmp	#LR__1690
27b4c                 | LR__1679
27b4c     00 98 0E F2 | 	cmp	local07, #0 wz
27b50     47 35 02 56 |  if_ne	mov	result1, local02
27b54     E4 00 90 5D |  if_ne	jmp	#LR__1690
27b58                 | LR__1680
27b58     02 90 46 F5 | 	or	local03, #2
27b5c     00 74 06 F6 | 	mov	arg01, #0
27b60     00 76 06 F6 | 	mov	arg02, #0
27b64     4A 79 02 F6 | 	mov	arg03, local05
27b68     48 7B 02 F6 | 	mov	arg04, local03
27b6c     A8 19 B0 FD | 	call	#__system__pack_1346
27b70     C8 00 90 FD | 	jmp	#LR__1690
27b74                 | LR__1681
27b74     00 94 0E F2 | 	cmp	local05, #0 wz
27b78     00 92 0E A2 |  if_e	cmp	local04, #0 wz
27b7c     00 F8 3F AF 
27b80     00 34 06 A6 |  if_e	mov	result1, ##2146435072
27b84     B4 00 90 AD |  if_e	jmp	#LR__1690
27b88     00 98 0E F2 | 	cmp	local07, #0 wz
27b8c     47 35 02 56 |  if_ne	mov	result1, local02
27b90     A8 00 90 5D |  if_ne	jmp	#LR__1690
27b94     4E 79 02 F6 | 	mov	arg03, local09
27b98     48 7B 02 F6 | 	mov	arg04, local03
27b9c     02 7A 46 F5 | 	or	arg04, #2
27ba0     00 74 06 F6 | 	mov	arg01, #0
27ba4     00 76 06 F6 | 	mov	arg02, #0
27ba8     6C 19 B0 FD | 	call	#__system__pack_1346
27bac     8C 00 90 FD | 	jmp	#LR__1690
27bb0                 | LR__1682
27bb0     00 92 0E F2 | 	cmp	local04, #0 wz
27bb4     24 00 90 AD |  if_e	jmp	#LR__1685
27bb8     01 92 66 F0 | 	shl	local04, #1
27bbc     54 84 9D FE | 	loc	pa,	#(@LR__1684-@LR__1683)
27bc0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27bc4                 | LR__1683
27bc4     00 40 00 FF 
27bc8     00 92 16 F2 | 	cmp	local04, ##8388608 wc
27bcc     01 94 86 C1 |  if_b	sub	local05, #1
27bd0     01 92 66 C0 |  if_b	shl	local04, #1
27bd4     EC FF 9F CD |  if_b	jmp	#LR__1683
27bd8                 | LR__1684
27bd8     C4 FE 9F FD | 	jmp	#LR__1675
27bdc                 | LR__1685
27bdc     08 90 46 F5 | 	or	local03, #8
27be0     00 74 06 F6 | 	mov	arg01, #0
27be4     00 76 06 F6 | 	mov	arg02, #0
27be8     00 78 06 F6 | 	mov	arg03, #0
27bec     48 7B 02 F6 | 	mov	arg04, local03
27bf0     24 19 B0 FD | 	call	#__system__pack_1346
27bf4     44 00 90 FD | 	jmp	#LR__1690
27bf8                 | LR__1686
27bf8     00 98 0E F2 | 	cmp	local07, #0 wz
27bfc     24 00 90 AD |  if_e	jmp	#LR__1689
27c00     01 98 66 F0 | 	shl	local07, #1
27c04     0C 84 9D FE | 	loc	pa,	#(@LR__1688-@LR__1687)
27c08     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27c0c                 | LR__1687
27c0c     00 40 00 FF 
27c10     00 98 16 F2 | 	cmp	local07, ##8388608 wc
27c14     01 9C 86 C1 |  if_b	sub	local09, #1
27c18     01 98 66 C0 |  if_b	shl	local07, #1
27c1c     EC FF 9F CD |  if_b	jmp	#LR__1687
27c20                 | LR__1688
27c20     88 FE 9F FD | 	jmp	#LR__1676
27c24                 | LR__1689
27c24     48 7B 02 F6 | 	mov	arg04, local03
27c28     08 7A 46 F5 | 	or	arg04, #8
27c2c     00 74 06 F6 | 	mov	arg01, #0
27c30     00 76 06 F6 | 	mov	arg02, #0
27c34     00 78 06 F6 | 	mov	arg03, #0
27c38     DC 18 B0 FD | 	call	#__system__pack_1346
27c3c                 | LR__1690
27c3c     A8 F0 03 F6 | 	mov	ptra, fp
27c40     B3 00 A0 FD | 	call	#popregs_
27c44                 | __system___float_mul_ret
27c44     2D 00 64 FD | 	ret
27c48                 | 
27c48                 | __system___float_div
27c48     0E 4C 05 F6 | 	mov	COUNT_, #14
27c4c     A9 00 A0 FD | 	call	#pushregs_
27c50     3A 91 02 F6 | 	mov	local03, arg01
27c54     3B 93 02 F6 | 	mov	local04, arg02
27c58     48 95 02 F6 | 	mov	local05, local03
27c5c     4A 97 02 F6 | 	mov	local06, local05
27c60     16 96 46 F7 | 	zerox	local06, #22
27c64     4A 99 02 F6 | 	mov	local07, local05
27c68     01 98 66 F0 | 	shl	local07, #1
27c6c     18 98 46 F0 | 	shr	local07, #24
27c70     1F 94 46 F0 | 	shr	local05, #31
27c74     49 35 02 F6 | 	mov	result1, local04
27c78     1A 9B 02 F6 | 	mov	local08, result1
27c7c     4D 9D 02 F6 | 	mov	local09, local08
27c80     16 9C 46 F7 | 	zerox	local09, #22
27c84     4D 9F 02 F6 | 	mov	local10, local08
27c88     01 9E 66 F0 | 	shl	local10, #1
27c8c     18 9E 46 F0 | 	shr	local10, #24
27c90     1F 9A 46 F0 | 	shr	local08, #31
27c94     4D 95 62 F5 | 	xor	local05, local08
27c98     FF 98 0E F2 | 	cmp	local07, #255 wz
27c9c     D4 00 90 AD |  if_e	jmp	#LR__1696
27ca0     FF 9E 0E F2 | 	cmp	local10, #255 wz
27ca4     04 01 90 AD |  if_e	jmp	#LR__1697
27ca8     00 98 0E F2 | 	cmp	local07, #0 wz
27cac     24 01 90 AD |  if_e	jmp	#LR__1698
27cb0     17 96 26 F4 | 	bith	local06, #23
27cb4                 | LR__1691
27cb4     00 9E 0E F2 | 	cmp	local10, #0 wz
27cb8     74 01 90 AD |  if_e	jmp	#LR__1702
27cbc     17 9C 26 F4 | 	bith	local09, #23
27cc0                 | LR__1692
27cc0     4F 99 82 F1 | 	sub	local07, local10
27cc4     4C A1 02 F6 | 	mov	local11, local07
27cc8     4B 75 02 F6 | 	mov	arg01, local06
27ccc     02 74 46 F0 | 	shr	arg01, #2
27cd0     1E 96 66 F0 | 	shl	local06, #30
27cd4     4B 77 02 F6 | 	mov	arg02, local06
27cd8     4E 79 02 F6 | 	mov	arg03, local09
27cdc     28 74 62 FD | 	setq	arg01
27ce0     3C 77 12 FD | 	qdiv	arg02, arg03
27ce4     00 A2 06 F6 | 	mov	local12, #0
27ce8     18 8C 62 FD | 	getqx	local01
27cec     19 36 62 FD | 	getqy	result2
27cf0     1B 8F 02 F6 | 	mov	local02, result2
27cf4     46 A5 02 F6 | 	mov	local13, local01
27cf8     00 8E 4E F2 | 	cmps	local02, #0 wz
27cfc     52 A7 02 F6 | 	mov	local14, local13
27d00     19 A6 66 F0 | 	shl	local14, #25
27d04     01 A2 06 56 |  if_ne	mov	local12, #1
27d08     51 A7 42 F5 | 	or	local14, local12
27d0c     07 A4 46 F0 | 	shr	local13, #7
27d10     00 80 00 FF 
27d14     00 A4 16 F2 | 	cmp	local13, ##16777216 wc
27d18     1C 00 90 CD |  if_b	jmp	#LR__1693
27d1c     01 A0 06 F1 | 	add	local11, #1
27d20     01 A6 46 F0 | 	shr	local14, #1
27d24     52 A3 02 F6 | 	mov	local12, local13
27d28     1F A2 66 F0 | 	shl	local12, #31
27d2c     51 A7 42 F5 | 	or	local14, local12
27d30     01 A4 46 F0 | 	shr	local13, #1
27d34     24 00 90 FD | 	jmp	#LR__1695
27d38                 | LR__1693
27d38     00 40 00 FF 
27d3c     00 A4 16 F2 | 	cmp	local13, ##8388608 wc
27d40     18 00 90 3D |  if_ae	jmp	#LR__1694
27d44     01 A0 86 F1 | 	sub	local11, #1
27d48     01 A4 66 F0 | 	shl	local13, #1
27d4c     53 A3 02 F6 | 	mov	local12, local14
27d50     1F A2 46 F0 | 	shr	local12, #31
27d54     51 A5 42 F5 | 	or	local13, local12
27d58     01 A6 66 F0 | 	shl	local14, #1
27d5c                 | LR__1694
27d5c                 | LR__1695
27d5c     52 75 02 F6 | 	mov	arg01, local13
27d60     53 77 02 F6 | 	mov	arg02, local14
27d64     50 79 02 F6 | 	mov	arg03, local11
27d68     4A 7B 02 F6 | 	mov	arg04, local05
27d6c     A8 17 B0 FD | 	call	#__system__pack_1346
27d70     00 01 90 FD | 	jmp	#LR__1706
27d74                 | LR__1696
27d74     00 96 0E F2 | 	cmp	local06, #0 wz
27d78     48 35 02 56 |  if_ne	mov	result1, local03
27d7c     F4 00 90 5D |  if_ne	jmp	#LR__1706
27d80     FF 9E 0E F2 | 	cmp	local10, #255 wz
27d84     00 F8 3F AF 
27d88     00 34 06 A6 |  if_e	mov	result1, ##2146435072
27d8c     E4 00 90 AD |  if_e	jmp	#LR__1706
27d90     02 94 46 F5 | 	or	local05, #2
27d94     00 74 06 F6 | 	mov	arg01, #0
27d98     00 76 06 F6 | 	mov	arg02, #0
27d9c     4C 79 02 F6 | 	mov	arg03, local07
27da0     4A 7B 02 F6 | 	mov	arg04, local05
27da4     70 17 B0 FD | 	call	#__system__pack_1346
27da8     C8 00 90 FD | 	jmp	#LR__1706
27dac                 | LR__1697
27dac     00 9C 0E F2 | 	cmp	local09, #0 wz
27db0     49 35 02 56 |  if_ne	mov	result1, local04
27db4     BC 00 90 5D |  if_ne	jmp	#LR__1706
27db8     4A 7B 02 F6 | 	mov	arg04, local05
27dbc     08 7A 46 F5 | 	or	arg04, #8
27dc0     00 74 06 F6 | 	mov	arg01, #0
27dc4     00 76 06 F6 | 	mov	arg02, #0
27dc8     00 78 06 F6 | 	mov	arg03, #0
27dcc     48 17 B0 FD | 	call	#__system__pack_1346
27dd0     A0 00 90 FD | 	jmp	#LR__1706
27dd4                 | LR__1698
27dd4     00 96 0E F2 | 	cmp	local06, #0 wz
27dd8     24 00 90 AD |  if_e	jmp	#LR__1701
27ddc     01 96 66 F0 | 	shl	local06, #1
27de0     30 82 9D FE | 	loc	pa,	#(@LR__1700-@LR__1699)
27de4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27de8                 | LR__1699
27de8     00 40 00 FF 
27dec     00 96 16 F2 | 	cmp	local06, ##8388608 wc
27df0     01 98 86 C1 |  if_b	sub	local07, #1
27df4     01 96 66 C0 |  if_b	shl	local06, #1
27df8     EC FF 9F CD |  if_b	jmp	#LR__1699
27dfc                 | LR__1700
27dfc     B4 FE 9F FD | 	jmp	#LR__1691
27e00                 | LR__1701
27e00     00 9E 0E F2 | 	cmp	local10, #0 wz
27e04     00 9C 0E A2 |  if_e	cmp	local09, #0 wz
27e08     00 F8 3F AF 
27e0c     00 34 06 A6 |  if_e	mov	result1, ##2146435072
27e10     60 00 90 AD |  if_e	jmp	#LR__1706
27e14     4A 7B 02 F6 | 	mov	arg04, local05
27e18     08 7A 46 F5 | 	or	arg04, #8
27e1c     00 74 06 F6 | 	mov	arg01, #0
27e20     00 76 06 F6 | 	mov	arg02, #0
27e24     00 78 06 F6 | 	mov	arg03, #0
27e28     EC 16 B0 FD | 	call	#__system__pack_1346
27e2c     44 00 90 FD | 	jmp	#LR__1706
27e30                 | LR__1702
27e30     00 9C 0E F2 | 	cmp	local09, #0 wz
27e34     24 00 90 AD |  if_e	jmp	#LR__1705
27e38     01 9C 66 F0 | 	shl	local09, #1
27e3c     D4 81 9D FE | 	loc	pa,	#(@LR__1704-@LR__1703)
27e40     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27e44                 | LR__1703
27e44     00 40 00 FF 
27e48     00 9C 16 F2 | 	cmp	local09, ##8388608 wc
27e4c     01 9E 86 C1 |  if_b	sub	local10, #1
27e50     01 9C 66 C0 |  if_b	shl	local09, #1
27e54     EC FF 9F CD |  if_b	jmp	#LR__1703
27e58                 | LR__1704
27e58     64 FE 9F FD | 	jmp	#LR__1692
27e5c                 | LR__1705
27e5c     4A 7B 02 F6 | 	mov	arg04, local05
27e60     02 7A 46 F5 | 	or	arg04, #2
27e64     00 74 06 F6 | 	mov	arg01, #0
27e68     00 76 06 F6 | 	mov	arg02, #0
27e6c     00 78 06 F6 | 	mov	arg03, #0
27e70     A4 16 B0 FD | 	call	#__system__pack_1346
27e74                 | LR__1706
27e74     A8 F0 03 F6 | 	mov	ptra, fp
27e78     B3 00 A0 FD | 	call	#popregs_
27e7c                 | __system___float_div_ret
27e7c     2D 00 64 FD | 	ret
27e80                 | 
27e80                 | __system___float_cmp
27e80     3A 3B 02 F6 | 	mov	_var01, arg01
27e84     00 C0 3F FF 
27e88     01 3A 56 F2 | 	cmps	_var01, ##2139095041 wc
27e8c     00 C0 3F CF 
27e90     01 76 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
27e94     3C 35 02 36 |  if_ae	mov	result1, arg03
27e98     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27e9c     00 C0 7F FF 
27ea0     01 3A 16 F2 | 	cmp	_var01, ##-8388607 wc
27ea4     00 C0 7F CF 
27ea8     01 3A 16 C2 |  if_b	cmp	_var01, ##-8388607 wc
27eac     3C 35 02 36 |  if_ae	mov	result1, arg03
27eb0     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27eb4     00 3A 56 F2 | 	cmps	_var01, #0 wc
27eb8     2C 00 90 3D |  if_ae	jmp	#LR__1707
27ebc     00 76 56 F2 | 	cmps	arg02, #0 wc
27ec0     3B 35 02 C6 |  if_b	mov	result1, arg02
27ec4     1D 35 82 C1 |  if_b	sub	result1, _var01
27ec8     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27ecc     00 76 0E F2 | 	cmp	arg02, #0 wz
27ed0     00 00 40 AF 
27ed4     00 3A 0E A2 |  if_e	cmp	_var01, ##-2147483648 wz
27ed8     00 34 06 A6 |  if_e	mov	result1, #0
27edc     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27ee0     01 34 66 F6 | 	neg	result1, #1
27ee4     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27ee8                 | LR__1707
27ee8     00 76 56 F2 | 	cmps	arg02, #0 wc
27eec     1C 00 90 3D |  if_ae	jmp	#LR__1708
27ef0     00 3A 0E F2 | 	cmp	_var01, #0 wz
27ef4     00 00 40 AF 
27ef8     00 76 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27efc     00 34 06 A6 |  if_e	mov	result1, #0
27f00     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27f04     01 34 06 F6 | 	mov	result1, #1
27f08     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27f0c                 | LR__1708
27f0c     3B 3B 82 F1 | 	sub	_var01, arg02
27f10     1D 35 02 F6 | 	mov	result1, _var01
27f14                 | __system___float_cmp_ret
27f14     2D 00 64 FD | 	ret
27f18                 | 
27f18                 | __system___float_tointeger
27f18     04 4C 05 F6 | 	mov	COUNT_, #4
27f1c     A9 00 A0 FD | 	call	#pushregs_
27f20     3B 8D 02 F6 | 	mov	local01, arg02
27f24     54 00 B0 FD | 	call	#__system___float_Unpack
27f28     1C 8F 02 F6 | 	mov	local02, result3
27f2c     1B 91 02 F6 | 	mov	local03, result2
27f30     FF FF 7F FF 
27f34     FF 91 56 F2 | 	cmps	local03, ##-1 wc
27f38     30 00 90 CD |  if_b	jmp	#LR__1709
27f3c     1F 90 56 F2 | 	cmps	local03, #31 wc
27f40     28 00 90 3D |  if_ae	jmp	#LR__1709
27f44     02 8E 66 F0 | 	shl	local02, #2
27f48     1E 92 06 F6 | 	mov	local04, #30
27f4c     48 93 82 F1 | 	sub	local04, local03
27f50     49 8F 42 F0 | 	shr	local02, local04
27f54     46 8F 02 F1 | 	add	local02, local01
27f58     01 8E 46 F0 | 	shr	local02, #1
27f5c     00 34 0E F2 | 	cmp	result1, #0 wz
27f60     47 8F 62 56 |  if_ne	neg	local02, local02
27f64     47 35 02 F6 | 	mov	result1, local02
27f68     04 00 90 FD | 	jmp	#LR__1710
27f6c                 | LR__1709
27f6c     00 34 06 F6 | 	mov	result1, #0
27f70                 | LR__1710
27f70     A8 F0 03 F6 | 	mov	ptra, fp
27f74     B3 00 A0 FD | 	call	#popregs_
27f78                 | __system___float_tointeger_ret
27f78     2D 00 64 FD | 	ret
27f7c                 | 
27f7c                 | __system___float_Unpack
27f7c     3A 3B 02 F6 | 	mov	_var01, arg01
27f80     1F 3A 46 F0 | 	shr	_var01, #31
27f84     3A 3D 02 F6 | 	mov	_var02, arg01
27f88     01 3C 66 F0 | 	shl	_var02, #1
27f8c     18 3C 4E F0 | 	shr	_var02, #24 wz
27f90     17 75 06 F4 | 	bitl	arg01, #279
27f94     06 74 66 50 |  if_ne	shl	arg01, #6
27f98     1D 74 26 54 |  if_ne	bith	arg01, #29
27f9c     1C 00 90 5D |  if_ne	jmp	#LR__1711
27fa0     3A 3F 92 F7 | 	encod	_var03, arg01 wc
27fa4     01 3E 06 C1 |  if_b	add	_var03, #1
27fa8     17 3E 86 F1 | 	sub	_var03, #23
27fac     1F 3D 02 F6 | 	mov	_var02, _var03
27fb0     07 36 06 F6 | 	mov	result2, #7
27fb4     1F 37 82 F1 | 	sub	result2, _var03
27fb8     1B 75 62 F0 | 	shl	arg01, result2
27fbc                 | LR__1711
27fbc     7F 3C 86 F1 | 	sub	_var02, #127
27fc0     3A 39 02 F6 | 	mov	result3, arg01
27fc4     1D 35 02 F6 | 	mov	result1, _var01
27fc8     1E 37 02 F6 | 	mov	result2, _var02
27fcc                 | __system___float_Unpack_ret
27fcc     2D 00 64 FD | 	ret
27fd0                 | 
27fd0                 | __system___float_Pack
27fd0     00 3A 06 F6 | 	mov	_var01, #0
27fd4     00 78 0E F2 | 	cmp	arg03, #0 wz
27fd8     8C 00 90 AD |  if_e	jmp	#LR__1713
27fdc     3C 3D 92 F7 | 	encod	_var02, arg03 wc
27fe0     01 3C 06 C1 |  if_b	add	_var02, #1
27fe4     21 3A 06 F6 | 	mov	_var01, #33
27fe8     1E 3B 82 F1 | 	sub	_var01, _var02
27fec     1D 79 62 F0 | 	shl	arg03, _var01
27ff0     03 3C 06 F6 | 	mov	_var02, #3
27ff4     1D 3D 82 F1 | 	sub	_var02, _var01
27ff8     1E 77 02 F1 | 	add	arg02, _var02
27ffc     3B 3F 02 F6 | 	mov	_var03, arg02
28000     00 79 06 F1 | 	add	arg03, #256
28004     3C 3D 02 F6 | 	mov	_var02, arg03
28008     FF 3C 2E F5 | 	andn	_var02, #255 wz
2800c     01 3E 06 A1 |  if_e	add	_var03, #1
28010     7F 3E 06 F1 | 	add	_var03, #127
28014     FF FF 7F FF 
28018     E9 3F 46 F3 | 	fges	_var03, ##-23
2801c     FF 3E 66 F3 | 	fles	_var03, #255
28020     01 3E 56 F2 | 	cmps	_var03, #1 wc
28024     1C 00 90 3D |  if_ae	jmp	#LR__1712
28028     01 78 46 F0 | 	shr	arg03, #1
2802c     1F 3C C6 F9 | 	decod	_var02, #31
28030     3C 3D 02 F1 | 	add	_var02, arg03
28034     1F 3F 62 F6 | 	neg	_var03, _var03
28038     1F 3D 42 F0 | 	shr	_var02, _var03
2803c     1E 79 02 F6 | 	mov	arg03, _var02
28040     00 3E 06 F6 | 	mov	_var03, #0
28044                 | LR__1712
28044     3A 35 02 F6 | 	mov	result1, arg01
28048     1F 34 66 F0 | 	shl	result1, #31
2804c     1F 3D 02 F6 | 	mov	_var02, _var03
28050     17 3C 66 F0 | 	shl	_var02, #23
28054     1E 35 42 F5 | 	or	result1, _var02
28058     3C 41 02 F6 | 	mov	_var04, arg03
2805c     09 40 46 F0 | 	shr	_var04, #9
28060     20 35 42 F5 | 	or	result1, _var04
28064     04 00 90 FD | 	jmp	#__system___float_Pack_ret
28068                 | LR__1713
28068     1D 35 02 F6 | 	mov	result1, _var01
2806c                 | __system___float_Pack_ret
2806c     2D 00 64 FD | 	ret
28070                 | 
28070                 | __system___basic_print_float
28070     05 4C 05 F6 | 	mov	COUNT_, #5
28074     A9 00 A0 FD | 	call	#pushregs_
28078     3A 8D 02 F6 | 	mov	local01, arg01
2807c     3B 8F 02 F6 | 	mov	local02, arg02
28080     3C 91 0A F6 | 	mov	local03, arg03 wz
28084     3D 93 02 F6 | 	mov	local04, arg04
28088     14 00 90 5D |  if_ne	jmp	#LR__1714
2808c     23 92 0E F2 | 	cmp	local04, #35 wz
28090     80 02 10 AF 
28094     00 94 06 A6 |  if_e	mov	local05, ##537198592
28098     1D 94 C6 59 |  if_ne	decod	local05, #29
2809c     4A 91 02 F6 | 	mov	local03, local05
280a0                 | LR__1714
280a0     46 75 02 F6 | 	mov	arg01, local01
280a4     EC 13 B0 FD | 	call	#__system___gettxfunc
280a8     1A 95 0A F6 | 	mov	local05, result1 wz
280ac     00 34 06 A6 |  if_e	mov	result1, #0
280b0     48 77 02 56 |  if_ne	mov	arg02, local03
280b4     47 79 02 56 |  if_ne	mov	arg03, local02
280b8     49 7B 02 56 |  if_ne	mov	arg04, local04
280bc     4A 75 02 56 |  if_ne	mov	arg01, local05
280c0     5C E6 BF 5D |  if_ne	call	#__system___fmtfloat
280c4     A8 F0 03 F6 | 	mov	ptra, fp
280c8     B3 00 A0 FD | 	call	#popregs_
280cc                 | __system___basic_print_float_ret
280cc     2D 00 64 FD | 	ret
280d0                 | 
280d0                 | __system____builtin_ilogb
280d0     02 4C 05 F6 | 	mov	COUNT_, #2
280d4     A9 00 A0 FD | 	call	#pushregs_
280d8     A0 FE BF FD | 	call	#__system___float_Unpack
280dc     1B 8D 02 F6 | 	mov	local01, result2
280e0     1C 8F 0A F6 | 	mov	local02, result3 wz
280e4     00 00 40 AF 
280e8     01 34 06 A6 |  if_e	mov	result1, ##-2147483647
280ec     24 00 90 AD |  if_e	jmp	#LR__1716
280f0     80 8C 0E F2 | 	cmp	local01, #128 wz
280f4     18 00 90 5D |  if_ne	jmp	#LR__1715
280f8     00 00 10 FF 
280fc     00 8E 0E F2 | 	cmp	local02, ##536870912 wz
28100     1E 34 CE A9 |  if_e	bmask	result1, #30
28104     0C 00 90 AD |  if_e	jmp	#LR__1716
28108     1F 34 C6 F9 | 	decod	result1, #31
2810c     04 00 90 FD | 	jmp	#LR__1716
28110                 | LR__1715
28110     46 35 02 F6 | 	mov	result1, local01
28114                 | LR__1716
28114     A8 F0 03 F6 | 	mov	ptra, fp
28118     B3 00 A0 FD | 	call	#popregs_
2811c                 | __system____builtin_ilogb_ret
2811c     2D 00 64 FD | 	ret
28120                 | 
28120                 | __system____builtin_exp2f
28120     04 4C 05 F6 | 	mov	COUNT_, #4
28124     A9 00 A0 FD | 	call	#pushregs_
28128     3A 8D 02 F6 | 	mov	local01, arg01
2812c     00 7F 21 FF 
28130     00 76 06 F6 | 	mov	arg02, ##1123942400
28134     01 78 66 F6 | 	neg	arg03, #1
28138     44 FD BF FD | 	call	#__system___float_cmp
2813c     00 34 56 F2 | 	cmps	result1, #0 wc
28140     00 C0 3F 3F 
28144     00 34 06 36 |  if_ae	mov	result1, ##2139095040
28148     D4 00 90 3D |  if_ae	jmp	#LR__1718
2814c     46 75 02 F6 | 	mov	arg01, local01
28150     00 7F 61 FF 
28154     00 76 06 F6 | 	mov	arg02, ##-1023541248
28158     01 78 06 F6 | 	mov	arg03, #1
2815c     20 FD BF FD | 	call	#__system___float_cmp
28160     00 34 56 F2 | 	cmps	result1, #0 wc
28164     00 34 06 C6 |  if_b	mov	result1, #0
28168     B4 00 90 CD |  if_b	jmp	#LR__1718
2816c     46 75 02 F6 | 	mov	arg01, local01
28170     00 76 06 F6 | 	mov	arg02, #0
28174     A0 FD BF FD | 	call	#__system___float_tointeger
28178     1A 8F 02 F6 | 	mov	local02, result1
2817c     47 75 02 F6 | 	mov	arg01, local02
28180     70 F5 BF FD | 	call	#__system___float_fromint
28184     1A 77 02 F6 | 	mov	arg02, result1
28188     46 75 02 F6 | 	mov	arg01, local01
2818c     1F 76 E6 F4 | 	bitnot	arg02, #31
28190     90 F5 BF FD | 	call	#__system___float_add
28194     1A 91 02 F6 | 	mov	local03, result1
28198     48 75 02 F6 | 	mov	arg01, local03
2819c     00 76 06 F6 | 	mov	arg02, #0
281a0     01 78 06 F6 | 	mov	arg03, #1
281a4     D8 FC BF FD | 	call	#__system___float_cmp
281a8     00 34 56 F2 | 	cmps	result1, #0 wc
281ac     18 00 90 3D |  if_ae	jmp	#LR__1717
281b0     48 75 02 F6 | 	mov	arg01, local03
281b4     00 C0 1F FF 
281b8     00 76 06 F6 | 	mov	arg02, ##1065353216
281bc     64 F5 BF FD | 	call	#__system___float_add
281c0     1A 91 02 F6 | 	mov	local03, result1
281c4     01 8E 86 F1 | 	sub	local02, #1
281c8                 | LR__1717
281c8     7F 8E 06 F1 | 	add	local02, #127
281cc     17 8E 66 F0 | 	shl	local02, #23
281d0     47 93 02 F6 | 	mov	local04, local02
281d4     48 75 02 F6 | 	mov	arg01, local03
281d8     00 80 26 FF 
281dc     00 76 06 F6 | 	mov	arg02, ##1291845632
281e0     44 F8 BF FD | 	call	#__system___float_mul
281e4     1A 75 02 F6 | 	mov	arg01, result1
281e8     00 76 06 F6 | 	mov	arg02, #0
281ec     28 FD BF FD | 	call	#__system___float_tointeger
281f0     1A 77 0A F6 | 	mov	arg02, result1 wz
281f4     49 35 02 A6 |  if_e	mov	result1, local04
281f8     24 00 90 AD |  if_e	jmp	#LR__1718
281fc     3E 76 26 F4 | 	bith	arg02, #62
28200     0F 76 62 FD | 	qexp	arg02
28204     49 75 02 F6 | 	mov	arg01, local04
28208     18 76 62 FD | 	getqx	arg02
2820c     01 76 06 F1 | 	add	arg02, #1
28210     01 76 46 F0 | 	shr	arg02, #1
28214     00 80 1F FF 
28218     00 76 06 F1 | 	add	arg02, ##1056964608
2821c     08 F8 BF FD | 	call	#__system___float_mul
28220                 | LR__1718
28220     A8 F0 03 F6 | 	mov	ptra, fp
28224     B3 00 A0 FD | 	call	#popregs_
28228                 | __system____builtin_exp2f_ret
28228     2D 00 64 FD | 	ret
2822c                 | 
2822c                 | __system____builtin_log2f
2822c     05 4C 05 F6 | 	mov	COUNT_, #5
28230     A9 00 A0 FD | 	call	#pushregs_
28234     3A 8D 02 F6 | 	mov	local01, arg01
28238     3A 8F 0A F6 | 	mov	local02, arg01 wz
2823c     00 00 40 5F 
28240     00 8E 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
28244     00 C0 3F AF 
28248     00 34 06 A6 |  if_e	mov	result1, ##2139095040
2824c     1F 34 E6 A4 |  if_e	bitnot	result1, #31
28250     04 01 90 AD |  if_e	jmp	#LR__1723
28254     00 8E 56 F2 | 	cmps	local02, #0 wc
28258     00 E0 3F CF 
2825c     00 34 06 C6 |  if_b	mov	result1, ##2143289344
28260     F4 00 90 CD |  if_b	jmp	#LR__1723
28264     46 75 02 F6 | 	mov	arg01, local01
28268     00 90 20 FF 
2826c     00 76 06 F6 | 	mov	arg02, ##1092616192
28270     01 78 06 F6 | 	mov	arg03, #1
28274     08 FC BF FD | 	call	#__system___float_cmp
28278     00 34 0E F2 | 	cmp	result1, #0 wz
2827c     4D 2A 20 AF 
28280     78 34 06 A6 |  if_e	mov	result1, ##1079286392
28284     D0 00 90 AD |  if_e	jmp	#LR__1723
28288     46 75 02 F6 | 	mov	arg01, local01
2828c     FC 16 20 FF 
28290     54 76 06 F6 | 	mov	arg02, ##1076754516
28294     01 78 06 F6 | 	mov	arg03, #1
28298     E4 FB BF FD | 	call	#__system___float_cmp
2829c     00 34 0E F2 | 	cmp	result1, #0 wz
282a0     55 DC 1F AF 
282a4     3B 34 06 A6 |  if_e	mov	result1, ##1069066811
282a8     AC 00 90 AD |  if_e	jmp	#LR__1723
282ac     47 91 02 F6 | 	mov	local03, local02
282b0     17 90 46 F0 | 	shr	local03, #23
282b4     48 91 E2 F8 | 	getbyte	local03, local03, #0
282b8     17 8F 06 F4 | 	bitl	local02, #279
282bc     47 93 02 F6 | 	mov	local04, local02
282c0     FF 90 0E F2 | 	cmp	local03, #255 wz
282c4     1C 00 90 5D |  if_ne	jmp	#LR__1719
282c8     00 92 0E F2 | 	cmp	local04, #0 wz
282cc     00 C0 3F 5F 
282d0     00 94 06 56 |  if_ne	mov	local05, ##2139095040
282d4     00 E0 3F AF 
282d8     00 94 06 A6 |  if_e	mov	local05, ##2143289344
282dc     4A 35 02 F6 | 	mov	result1, local05
282e0     74 00 90 FD | 	jmp	#LR__1723
282e4                 | LR__1719
282e4     00 90 0E F2 | 	cmp	local03, #0 wz
282e8     17 92 26 54 |  if_ne	bith	local04, #23
282ec     7F 90 86 51 |  if_ne	sub	local03, #127
282f0     30 00 90 5D |  if_ne	jmp	#LR__1722
282f4     00 92 0E F2 | 	cmp	local04, #0 wz
282f8     00 C0 3F AF 
282fc     00 34 06 A6 |  if_e	mov	result1, ##2139095040
28300     1F 34 E6 A4 |  if_e	bitnot	result1, #31
28304     50 00 90 AD |  if_e	jmp	#LR__1723
28308     7E 90 66 F6 | 	neg	local03, #126
2830c     00 7D 9D FE | 	loc	pa,	#(@LR__1721-@LR__1720)
28310     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28314                 | LR__1720
28314     17 92 2E F4 | 	testbn	local04, #23 wz
28318     01 92 66 A0 |  if_e	shl	local04, #1
2831c     01 90 06 A1 |  if_e	add	local03, #1
28320     F0 FF 9F AD |  if_e	jmp	#LR__1720
28324                 | LR__1721
28324                 | LR__1722
28324     0E 92 62 FD | 	qlog	local04
28328     01 90 86 F1 | 	sub	local03, #1
2832c     48 75 02 F6 | 	mov	arg01, local03
28330     18 94 62 FD | 	getqx	local05
28334     9B 94 06 F4 | 	bitl	local05, #155
28338     08 94 06 F1 | 	add	local05, #8
2833c     04 94 46 F0 | 	shr	local05, #4
28340     00 C0 1F FF 
28344     00 94 06 F1 | 	add	local05, ##1065353216
28348     A8 F3 BF FD | 	call	#__system___float_fromint
2834c     1A 77 02 F6 | 	mov	arg02, result1
28350     4A 75 02 F6 | 	mov	arg01, local05
28354     CC F3 BF FD | 	call	#__system___float_add
28358                 | LR__1723
28358     A8 F0 03 F6 | 	mov	ptra, fp
2835c     B3 00 A0 FD | 	call	#popregs_
28360                 | __system____builtin_log2f_ret
28360     2D 00 64 FD | 	ret
28364                 | 
28364                 | __system____builtin_powf
28364     03 4C 05 F6 | 	mov	COUNT_, #3
28368     A9 00 A0 FD | 	call	#pushregs_
2836c     3A 8D 02 F6 | 	mov	local01, arg01
28370     3B 8F 02 F6 | 	mov	local02, arg02
28374     47 75 02 F6 | 	mov	arg01, local02
28378     00 76 06 F6 | 	mov	arg02, #0
2837c     98 FB BF FD | 	call	#__system___float_tointeger
28380     1A 91 02 F6 | 	mov	local03, result1
28384     48 75 02 F6 | 	mov	arg01, local03
28388     68 F3 BF FD | 	call	#__system___float_fromint
2838c     1A 75 02 F6 | 	mov	arg01, result1
28390     47 77 02 F6 | 	mov	arg02, local02
28394     01 78 06 F6 | 	mov	arg03, #1
28398     E4 FA BF FD | 	call	#__system___float_cmp
2839c     00 34 0E F2 | 	cmp	result1, #0 wz
283a0     18 00 90 5D |  if_ne	jmp	#LR__1724
283a4     00 C0 1F FF 
283a8     00 74 06 F6 | 	mov	arg01, ##1065353216
283ac     46 77 02 F6 | 	mov	arg02, local01
283b0     48 79 02 F6 | 	mov	arg03, local03
283b4     A0 00 B0 FD | 	call	#__system___float_pow_n
283b8     58 00 90 FD | 	jmp	#LR__1725
283bc                 | LR__1724
283bc     46 75 02 F6 | 	mov	arg01, local01
283c0     00 76 06 F6 | 	mov	arg02, #0
283c4     01 78 06 F6 | 	mov	arg03, #1
283c8     B4 FA BF FD | 	call	#__system___float_cmp
283cc     00 34 56 F2 | 	cmps	result1, #0 wc
283d0     00 E0 3F CF 
283d4     00 34 06 C6 |  if_b	mov	result1, ##2143289344
283d8     38 00 90 CD |  if_b	jmp	#LR__1725
283dc     46 75 02 F6 | 	mov	arg01, local01
283e0     00 76 06 F6 | 	mov	arg02, #0
283e4     01 78 06 F6 | 	mov	arg03, #1
283e8     94 FA BF FD | 	call	#__system___float_cmp
283ec     00 34 0E F2 | 	cmp	result1, #0 wz
283f0     00 34 06 A6 |  if_e	mov	result1, #0
283f4     1C 00 90 AD |  if_e	jmp	#LR__1725
283f8     46 75 02 F6 | 	mov	arg01, local01
283fc     2C FE BF FD | 	call	#__system____builtin_log2f
28400     1A 75 02 F6 | 	mov	arg01, result1
28404     47 77 02 F6 | 	mov	arg02, local02
28408     1C F6 BF FD | 	call	#__system___float_mul
2840c     1A 75 02 F6 | 	mov	arg01, result1
28410     0C FD BF FD | 	call	#__system____builtin_exp2f
28414                 | LR__1725
28414     A8 F0 03 F6 | 	mov	ptra, fp
28418     B3 00 A0 FD | 	call	#popregs_
2841c                 | __system____builtin_powf_ret
2841c     2D 00 64 FD | 	ret
28420                 | 
28420                 | __system____builtin_logbase
28420     02 4C 05 F6 | 	mov	COUNT_, #2
28424     A9 00 A0 FD | 	call	#pushregs_
28428     3A 8D 02 F6 | 	mov	local01, arg01
2842c     3B 75 02 F6 | 	mov	arg01, arg02
28430     F8 FD BF FD | 	call	#__system____builtin_log2f
28434     1A 8F 02 F6 | 	mov	local02, result1
28438     46 75 02 F6 | 	mov	arg01, local01
2843c     EC FD BF FD | 	call	#__system____builtin_log2f
28440     1A 77 02 F6 | 	mov	arg02, result1
28444     47 75 02 F6 | 	mov	arg01, local02
28448     FC F7 BF FD | 	call	#__system___float_div
2844c     A8 F0 03 F6 | 	mov	ptra, fp
28450     B3 00 A0 FD | 	call	#popregs_
28454                 | __system____builtin_logbase_ret
28454     2D 00 64 FD | 	ret
28458                 | 
28458                 | __system___float_pow_n
28458     05 4C 05 F6 | 	mov	COUNT_, #5
2845c     A9 00 A0 FD | 	call	#pushregs_
28460     3A 8D 02 F6 | 	mov	local01, arg01
28464     3B 8F 02 F6 | 	mov	local02, arg02
28468     3C 91 02 F6 | 	mov	local03, arg03
2846c     00 90 56 F2 | 	cmps	local03, #0 wc
28470     18 00 90 3D |  if_ae	jmp	#LR__1726
28474     01 92 06 F6 | 	mov	local04, #1
28478     48 91 62 F6 | 	neg	local03, local03
2847c     00 90 56 F2 | 	cmps	local03, #0 wc
28480     00 34 06 C6 |  if_b	mov	result1, #0
28484     94 00 90 CD |  if_b	jmp	#LR__1734
28488     04 00 90 FD | 	jmp	#LR__1727
2848c                 | LR__1726
2848c     00 92 06 F6 | 	mov	local04, #0
28490                 | LR__1727
28490     00 C0 1F FF 
28494     00 94 06 F6 | 	mov	local05, ##1065353216
28498                 | LR__1728
28498     01 90 56 F2 | 	cmps	local03, #1 wc
2849c     30 00 90 CD |  if_b	jmp	#LR__1730
284a0     01 90 CE F7 | 	test	local03, #1 wz
284a4     10 00 90 AD |  if_e	jmp	#LR__1729
284a8     4A 75 02 F6 | 	mov	arg01, local05
284ac     47 77 02 F6 | 	mov	arg02, local02
284b0     74 F5 BF FD | 	call	#__system___float_mul
284b4     1A 95 02 F6 | 	mov	local05, result1
284b8                 | LR__1729
284b8     01 90 C6 F0 | 	sar	local03, #1
284bc     47 75 02 F6 | 	mov	arg01, local02
284c0     47 77 02 F6 | 	mov	arg02, local02
284c4     60 F5 BF FD | 	call	#__system___float_mul
284c8     1A 8F 02 F6 | 	mov	local02, result1
284cc     C8 FF 9F FD | 	jmp	#LR__1728
284d0                 | LR__1730
284d0     00 92 0E F2 | 	cmp	local04, #0 wz
284d4     14 00 90 AD |  if_e	jmp	#LR__1731
284d8     46 75 02 F6 | 	mov	arg01, local01
284dc     4A 77 02 F6 | 	mov	arg02, local05
284e0     64 F7 BF FD | 	call	#__system___float_div
284e4     1A 95 02 F6 | 	mov	local05, result1
284e8     2C 00 90 FD | 	jmp	#LR__1733
284ec                 | LR__1731
284ec     46 75 02 F6 | 	mov	arg01, local01
284f0     00 C0 1F FF 
284f4     00 76 06 F6 | 	mov	arg02, ##1065353216
284f8     01 78 06 F6 | 	mov	arg03, #1
284fc     80 F9 BF FD | 	call	#__system___float_cmp
28500     00 34 0E F2 | 	cmp	result1, #0 wz
28504     10 00 90 AD |  if_e	jmp	#LR__1732
28508     46 75 02 F6 | 	mov	arg01, local01
2850c     4A 77 02 F6 | 	mov	arg02, local05
28510     14 F5 BF FD | 	call	#__system___float_mul
28514     1A 95 02 F6 | 	mov	local05, result1
28518                 | LR__1732
28518                 | LR__1733
28518     4A 35 02 F6 | 	mov	result1, local05
2851c                 | LR__1734
2851c     A8 F0 03 F6 | 	mov	ptra, fp
28520     B3 00 A0 FD | 	call	#popregs_
28524                 | __system___float_pow_n_ret
28524     2D 00 64 FD | 	ret
28528                 | 
28528                 | __system___gc_ptrs
28528     02 4C 05 F6 | 	mov	COUNT_, #2
2852c     A9 00 A0 FD | 	call	#pushregs_
28530     C5 8C 02 F6 | 	mov	local01, __heap_ptr
28534     46 8F 02 F6 | 	mov	local02, local01
28538     3F 00 00 FF 
2853c     F8 8F 06 F1 | 	add	local02, ##32760
28540     46 37 0A FB | 	rdlong	result2, local01 wz
28544     74 00 90 5D |  if_ne	jmp	#LR__1735
28548     47 37 02 F6 | 	mov	result2, local02
2854c     46 37 82 F1 | 	sub	result2, local01
28550     46 03 58 FC | 	wrword	#1, local01
28554     46 35 02 F6 | 	mov	result1, local01
28558     02 34 06 F1 | 	add	result1, #2
2855c     36 00 80 FF 
28560     1A 21 59 FC | 	wrword	##27792, result1
28564     46 35 02 F6 | 	mov	result1, local01
28568     04 34 06 F1 | 	add	result1, #4
2856c     1A 01 58 FC | 	wrword	#0, result1
28570     46 35 02 F6 | 	mov	result1, local01
28574     06 34 06 F1 | 	add	result1, #6
28578     1A 03 58 FC | 	wrword	#1, result1
2857c     10 8C 06 F1 | 	add	local01, #16
28580     1B 37 52 F6 | 	abs	result2, result2 wc
28584     04 36 46 F0 | 	shr	result2, #4
28588     1B 37 82 F6 | 	negc	result2, result2
2858c     46 37 52 FC | 	wrword	result2, local01
28590     46 37 02 F6 | 	mov	result2, local01
28594     02 36 06 F1 | 	add	result2, #2
28598     36 00 80 FF 
2859c     1B 1F 59 FC | 	wrword	##27791, result2
285a0     46 37 02 F6 | 	mov	result2, local01
285a4     04 36 06 F1 | 	add	result2, #4
285a8     1B 01 58 FC | 	wrword	#0, result2
285ac     46 37 02 F6 | 	mov	result2, local01
285b0     06 36 06 F1 | 	add	result2, #6
285b4     1B 01 58 FC | 	wrword	#0, result2
285b8     10 8C 86 F1 | 	sub	local01, #16
285bc                 | LR__1735
285bc     47 37 02 F6 | 	mov	result2, local02
285c0     46 35 02 F6 | 	mov	result1, local01
285c4     A8 F0 03 F6 | 	mov	ptra, fp
285c8     B3 00 A0 FD | 	call	#popregs_
285cc                 | __system___gc_ptrs_ret
285cc     2D 00 64 FD | 	ret
285d0                 | 
285d0                 | __system___gc_nextBlockPtr
285d0     02 4C 05 F6 | 	mov	COUNT_, #2
285d4     A9 00 A0 FD | 	call	#pushregs_
285d8     3A 8D 02 F6 | 	mov	local01, arg01
285dc     46 8F EA FA | 	rdword	local02, local01 wz
285e0     10 00 90 5D |  if_ne	jmp	#LR__1736
285e4     4B 01 00 FF 
285e8     F4 75 06 F6 | 	mov	arg01, ##@LR__1837
285ec     E8 01 B0 FD | 	call	#__system___gc_errmsg
285f0     0C 00 90 FD | 	jmp	#LR__1737
285f4                 | LR__1736
285f4     46 35 02 F6 | 	mov	result1, local01
285f8     04 8E 66 F0 | 	shl	local02, #4
285fc     47 35 02 F1 | 	add	result1, local02
28600                 | LR__1737
28600     A8 F0 03 F6 | 	mov	ptra, fp
28604     B3 00 A0 FD | 	call	#popregs_
28608                 | __system___gc_nextBlockPtr_ret
28608     2D 00 64 FD | 	ret
2860c                 | 
2860c                 | __system___gc_tryalloc
2860c     0D 4C 05 F6 | 	mov	COUNT_, #13
28610     A9 00 A0 FD | 	call	#pushregs_
28614     3A 8D 02 F6 | 	mov	local01, arg01
28618     3B 8F 02 F6 | 	mov	local02, arg02
2861c     08 FF BF FD | 	call	#__system___gc_ptrs
28620     1A 91 02 F6 | 	mov	local03, result1
28624     1B 93 02 F6 | 	mov	local04, result2
28628     48 95 02 F6 | 	mov	local05, local03
2862c     00 96 06 F6 | 	mov	local06, #0
28630     10 7A 9D FE | 	loc	pa,	#(@LR__1739-@LR__1738)
28634     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28638                 | LR__1738
28638     4A 99 02 F6 | 	mov	local07, local05
2863c     06 94 06 F1 | 	add	local05, #6
28640     4A 77 EA FA | 	rdword	arg02, local05 wz
28644     48 75 02 F6 | 	mov	arg01, local03
28648     00 34 06 A6 |  if_e	mov	result1, #0
2864c     04 76 66 50 |  if_ne	shl	arg02, #4
28650     3B 75 02 51 |  if_ne	add	arg01, arg02
28654     3A 35 02 56 |  if_ne	mov	result1, arg01
28658     1A 9B 02 F6 | 	mov	local08, result1
2865c     4D 95 0A F6 | 	mov	local05, local08 wz
28660     4A 9B 02 56 |  if_ne	mov	local08, local05
28664     4D 97 E2 5A |  if_ne	rdword	local06, local08
28668     00 94 0E F2 | 	cmp	local05, #0 wz
2866c     49 95 52 52 |  if_ne	cmps	local05, local04 wc
28670     08 00 90 1D |  if_a	jmp	#LR__1740
28674     4B 8D 5A 52 |  if_ne	cmps	local01, local06 wcz
28678     BC FF 9F 1D |  if_a	jmp	#LR__1738
2867c                 | LR__1739
2867c                 | LR__1740
2867c     00 94 0E F2 | 	cmp	local05, #0 wz
28680     4A 35 02 A6 |  if_e	mov	result1, local05
28684     44 01 90 AD |  if_e	jmp	#LR__1743
28688     4A 9B 02 F6 | 	mov	local08, local05
2868c     06 9A 06 F1 | 	add	local08, #6
28690     4D 9D E2 FA | 	rdword	local09, local08
28694     4B 8D 52 F2 | 	cmps	local01, local06 wc
28698     C0 00 90 3D |  if_ae	jmp	#LR__1742
2869c     4A 8D 52 FC | 	wrword	local01, local05
286a0     4A 75 02 F6 | 	mov	arg01, local05
286a4     46 9D 02 F6 | 	mov	local09, local01
286a8     04 9C 66 F0 | 	shl	local09, #4
286ac     4E 75 02 F1 | 	add	arg01, local09
286b0     4B 9B 02 F6 | 	mov	local08, local06
286b4     46 9B 82 F1 | 	sub	local08, local01
286b8     3A 9B 52 FC | 	wrword	local08, arg01
286bc     3A 9B 02 F6 | 	mov	local08, arg01
286c0     02 9A 06 F1 | 	add	local08, #2
286c4     36 00 80 FF 
286c8     4D 1F 59 FC | 	wrword	##27791, local08
286cc     4A 77 0A F6 | 	mov	arg02, local05 wz
286d0     00 34 06 A6 |  if_e	mov	result1, #0
286d4     48 77 82 51 |  if_ne	sub	arg02, local03
286d8     04 76 46 50 |  if_ne	shr	arg02, #4
286dc     3B 35 02 56 |  if_ne	mov	result1, arg02
286e0     3A 9D 02 F6 | 	mov	local09, arg01
286e4     04 9C 06 F1 | 	add	local09, #4
286e8     4E 35 52 FC | 	wrword	result1, local09
286ec     4A 9B 02 F6 | 	mov	local08, local05
286f0     06 9A 06 F1 | 	add	local08, #6
286f4     3A 9D 02 F6 | 	mov	local09, arg01
286f8     4D 9F E2 FA | 	rdword	local10, local08
286fc     06 9C 06 F1 | 	add	local09, #6
28700     4E 9F 52 FC | 	wrword	local10, local09
28704     3A A1 02 F6 | 	mov	local11, arg01
28708     50 77 0A F6 | 	mov	arg02, local11 wz
2870c     00 34 06 A6 |  if_e	mov	result1, #0
28710     48 77 82 51 |  if_ne	sub	arg02, local03
28714     04 76 46 50 |  if_ne	shr	arg02, #4
28718     3B 35 02 56 |  if_ne	mov	result1, arg02
2871c     1A 9D 02 F6 | 	mov	local09, result1
28720     AC FE BF FD | 	call	#__system___gc_nextBlockPtr
28724     1A A3 0A F6 | 	mov	local12, result1 wz
28728     30 00 90 AD |  if_e	jmp	#LR__1741
2872c     49 A3 52 F2 | 	cmps	local12, local04 wc
28730     28 00 90 3D |  if_ae	jmp	#LR__1741
28734     48 75 02 F6 | 	mov	arg01, local03
28738     50 77 0A F6 | 	mov	arg02, local11 wz
2873c     00 34 06 A6 |  if_e	mov	result1, #0
28740     3A 77 82 51 |  if_ne	sub	arg02, arg01
28744     04 76 46 50 |  if_ne	shr	arg02, #4
28748     3B 35 02 56 |  if_ne	mov	result1, arg02
2874c     1A 9B 02 F6 | 	mov	local08, result1
28750     51 A5 02 F6 | 	mov	local13, local12
28754     04 A4 06 F1 | 	add	local13, #4
28758     52 9B 52 FC | 	wrword	local08, local13
2875c                 | LR__1741
2875c                 | LR__1742
2875c     06 98 06 F1 | 	add	local07, #6
28760     4C 9D 52 FC | 	wrword	local09, local07
28764     36 00 00 FF 
28768     80 9A 06 F6 | 	mov	local08, ##27776
2876c     47 9B 42 F5 | 	or	local08, local02
28770     00 34 06 F6 | 	mov	result1, #0
28774     01 34 62 FD | 	cogid	result1
28778     1A 9B 42 F5 | 	or	local08, result1
2877c     4A 9F 02 F6 | 	mov	local10, local05
28780     02 9E 06 F1 | 	add	local10, #2
28784     4F 9B 52 FC | 	wrword	local08, local10
28788     48 9B 02 F6 | 	mov	local08, local03
2878c     08 9A 06 F1 | 	add	local08, #8
28790     4A A5 02 F6 | 	mov	local13, local05
28794     4D 9F E2 FA | 	rdword	local10, local08
28798     06 A4 06 F1 | 	add	local13, #6
2879c     52 9F 52 FC | 	wrword	local10, local13
287a0     4A 77 0A F6 | 	mov	arg02, local05 wz
287a4     00 34 06 A6 |  if_e	mov	result1, #0
287a8     48 77 82 51 |  if_ne	sub	arg02, local03
287ac     04 76 46 50 |  if_ne	shr	arg02, #4
287b0     3B 35 02 56 |  if_ne	mov	result1, arg02
287b4     08 90 06 F1 | 	add	local03, #8
287b8     48 35 52 FC | 	wrword	result1, local03
287bc     4A 35 02 F6 | 	mov	result1, local05
287c0     08 34 06 F1 | 	add	result1, #8
287c4     00 C0 31 FF 
287c8     00 34 46 F5 | 	or	result1, ##1669332992
287cc                 | LR__1743
287cc     A8 F0 03 F6 | 	mov	ptra, fp
287d0     B3 00 A0 FD | 	call	#popregs_
287d4                 | __system___gc_tryalloc_ret
287d4     2D 00 64 FD | 	ret
287d8                 | 
287d8                 | __system___gc_errmsg
287d8     01 4C 05 F6 | 	mov	COUNT_, #1
287dc     A9 00 A0 FD | 	call	#pushregs_
287e0     3A 8D 02 F6 | 	mov	local01, arg01
287e4                 | LR__1744
287e4     46 75 CA FA | 	rdbyte	arg01, local01 wz
287e8     01 8C 06 F1 | 	add	local01, #1
287ec     08 00 90 AD |  if_e	jmp	#LR__1745
287f0     D8 D4 BF FD | 	call	#__system___tx
287f4     EC FF 9F FD | 	jmp	#LR__1744
287f8                 | LR__1745
287f8     00 34 06 F6 | 	mov	result1, #0
287fc     A8 F0 03 F6 | 	mov	ptra, fp
28800     B3 00 A0 FD | 	call	#popregs_
28804                 | __system___gc_errmsg_ret
28804     2D 00 64 FD | 	ret
28808                 | 
28808                 | __system___gc_alloc_managed
28808     02 4C 05 F6 | 	mov	COUNT_, #2
2880c     A9 00 A0 FD | 	call	#pushregs_
28810     3A 8D 02 F6 | 	mov	local01, arg01
28814     00 76 06 F6 | 	mov	arg02, #0
28818     30 00 B0 FD | 	call	#__system___gc_doalloc
2881c     1A 8F 0A F6 | 	mov	local02, result1 wz
28820     18 00 90 5D |  if_ne	jmp	#LR__1746
28824     01 8C 56 F2 | 	cmps	local01, #1 wc
28828     10 00 90 CD |  if_b	jmp	#LR__1746
2882c     4C 01 00 FF 
28830     10 74 06 F6 | 	mov	arg01, ##@LR__1838
28834     A0 FF BF FD | 	call	#__system___gc_errmsg
28838     04 00 90 FD | 	jmp	#LR__1747
2883c                 | LR__1746
2883c     47 35 02 F6 | 	mov	result1, local02
28840                 | LR__1747
28840     A8 F0 03 F6 | 	mov	ptra, fp
28844     B3 00 A0 FD | 	call	#popregs_
28848                 | __system___gc_alloc_managed_ret
28848     2D 00 64 FD | 	ret
2884c                 | 
2884c                 | __system___gc_doalloc
2884c     06 4C 05 F6 | 	mov	COUNT_, #6
28850     A9 00 A0 FD | 	call	#pushregs_
28854     3A 8D 0A F6 | 	mov	local01, arg01 wz
28858     3B 8F 02 F6 | 	mov	local02, arg02
2885c     00 34 06 A6 |  if_e	mov	result1, #0
28860     90 00 90 AD |  if_e	jmp	#LR__1755
28864     17 8C 06 F1 | 	add	local01, #23
28868     0F 8C 26 F5 | 	andn	local01, #15
2886c     04 8C 46 F0 | 	shr	local01, #4
28870     14 A2 05 F1 | 	add	ptr___system__dat__, #20
28874     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
28878     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
2887c     F0 D3 BF FD | 	call	#__system___lockmem
28880     46 75 02 F6 | 	mov	arg01, local01
28884     47 77 02 F6 | 	mov	arg02, local02
28888     80 FD BF FD | 	call	#__system___gc_tryalloc
2888c     1A 91 0A F6 | 	mov	local03, result1 wz
28890     14 00 90 5D |  if_ne	jmp	#LR__1748
28894     74 03 B0 FD | 	call	#__system___gc_docollect
28898     46 75 02 F6 | 	mov	arg01, local01
2889c     47 77 02 F6 | 	mov	arg02, local02
288a0     68 FD BF FD | 	call	#__system___gc_tryalloc
288a4     1A 91 02 F6 | 	mov	local03, result1
288a8                 | LR__1748
288a8     14 A2 05 F1 | 	add	ptr___system__dat__, #20
288ac     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
288b0     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
288b4     3A 01 68 FC | 	wrlong	#0, arg01
288b8     00 90 0E F2 | 	cmp	local03, #0 wz
288bc     30 00 90 AD |  if_e	jmp	#LR__1754
288c0     04 8C 66 F0 | 	shl	local01, #4
288c4     08 8C 86 F1 | 	sub	local01, #8
288c8     46 93 52 F6 | 	abs	local04, local01 wc
288cc     02 92 46 F0 | 	shr	local04, #2
288d0     49 95 8A F6 | 	negc	local05, local04 wz
288d4     48 97 02 F6 | 	mov	local06, local03
288d8     14 00 90 AD |  if_e	jmp	#LR__1753
288dc     2C 77 9D FE | 	loc	pa,	#(@LR__1751-@LR__1749)
288e0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
288e4                 | LR__1749
288e4     4A 05 D8 FC | 	rep	@LR__1752, local05
288e8                 | LR__1750
288e8     4B 01 68 FC | 	wrlong	#0, local06
288ec     04 96 06 F1 | 	add	local06, #4
288f0                 | LR__1751
288f0                 | LR__1752
288f0                 | LR__1753
288f0                 | LR__1754
288f0     48 35 02 F6 | 	mov	result1, local03
288f4                 | LR__1755
288f4     A8 F0 03 F6 | 	mov	ptra, fp
288f8     B3 00 A0 FD | 	call	#popregs_
288fc                 | __system___gc_doalloc_ret
288fc     2D 00 64 FD | 	ret
28900                 | 
28900                 | __system___gc_isvalidptr
28900     3C 3B 02 F6 | 	mov	_var01, arg03
28904     1D 3D 02 F6 | 	mov	_var02, _var01
28908     00 F8 7F FF 
2890c     00 3C 06 F5 | 	and	_var02, ##-1048576
28910     00 C0 31 FF 
28914     00 3C 0E F2 | 	cmp	_var02, ##1669332992 wz
28918     00 34 06 56 |  if_ne	mov	result1, #0
2891c     58 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
28920     08 3A 86 F1 | 	sub	_var01, #8
28924     74 3B 06 F4 | 	bitl	_var01, #372
28928     3A 3B 52 F2 | 	cmps	_var01, arg01 wc
2892c     08 00 90 CD |  if_b	jmp	#LR__1756
28930     3B 3B 52 F2 | 	cmps	_var01, arg02 wc
28934     08 00 90 CD |  if_b	jmp	#LR__1757
28938                 | LR__1756
28938     00 34 06 F6 | 	mov	result1, #0
2893c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
28940                 | LR__1757
28940     1D 3D 02 F6 | 	mov	_var02, _var01
28944     3A 3D 62 F5 | 	xor	_var02, arg01
28948     0F 3C 0E F5 | 	and	_var02, #15 wz
2894c     00 34 06 56 |  if_ne	mov	result1, #0
28950     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
28954     1D 3D 02 F6 | 	mov	_var02, _var01
28958     02 3C 06 F1 | 	add	_var02, #2
2895c     1E 3D E2 FA | 	rdword	_var02, _var02
28960     7F 00 00 FF 
28964     C0 3D 06 F5 | 	and	_var02, ##65472
28968     36 00 00 FF 
2896c     80 3C 0E F2 | 	cmp	_var02, ##27776 wz
28970     00 34 06 56 |  if_ne	mov	result1, #0
28974     1D 35 02 A6 |  if_e	mov	result1, _var01
28978                 | __system___gc_isvalidptr_ret
28978     2D 00 64 FD | 	ret
2897c                 | 
2897c                 | __system___gc_free
2897c     01 4C 05 F6 | 	mov	COUNT_, #1
28980     A9 00 A0 FD | 	call	#pushregs_
28984     3A 8D 02 F6 | 	mov	local01, arg01
28988     9C FB BF FD | 	call	#__system___gc_ptrs
2898c     1A 75 02 F6 | 	mov	arg01, result1
28990     1B 77 02 F6 | 	mov	arg02, result2
28994     46 79 02 F6 | 	mov	arg03, local01
28998     64 FF BF FD | 	call	#__system___gc_isvalidptr
2899c     1A 8D 0A F6 | 	mov	local01, result1 wz
289a0     28 00 90 AD |  if_e	jmp	#LR__1758
289a4     14 A2 05 F1 | 	add	ptr___system__dat__, #20
289a8     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
289ac     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
289b0     BC D2 BF FD | 	call	#__system___lockmem
289b4     46 75 02 F6 | 	mov	arg01, local01
289b8     1C 00 B0 FD | 	call	#__system___gc_dofree
289bc     14 A2 05 F1 | 	add	ptr___system__dat__, #20
289c0     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
289c4     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
289c8     3A 01 68 FC | 	wrlong	#0, arg01
289cc                 | LR__1758
289cc     A8 F0 03 F6 | 	mov	ptra, fp
289d0     B3 00 A0 FD | 	call	#popregs_
289d4                 | __system___gc_free_ret
289d4     2D 00 64 FD | 	ret
289d8                 | 
289d8                 | __system___gc_dofree
289d8     0B 4C 05 F6 | 	mov	COUNT_, #11
289dc     A9 00 A0 FD | 	call	#pushregs_
289e0     3A 8D 02 F6 | 	mov	local01, arg01
289e4     40 FB BF FD | 	call	#__system___gc_ptrs
289e8     1A 8F 02 F6 | 	mov	local02, result1
289ec     1B 91 02 F6 | 	mov	local03, result2
289f0     46 75 02 F6 | 	mov	arg01, local01
289f4     02 74 06 F1 | 	add	arg01, #2
289f8     36 00 80 FF 
289fc     3A 1F 59 FC | 	wrword	##27791, arg01
28a00     46 93 02 F6 | 	mov	local04, local01
28a04     46 75 02 F6 | 	mov	arg01, local01
28a08     C4 FB BF FD | 	call	#__system___gc_nextBlockPtr
28a0c     1A 95 02 F6 | 	mov	local05, result1
28a10     34 76 9D FE | 	loc	pa,	#(@LR__1760-@LR__1759)
28a14     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28a18                 | LR__1759
28a18     04 92 06 F1 | 	add	local04, #4
28a1c     49 77 EA FA | 	rdword	arg02, local04 wz
28a20     47 75 02 F6 | 	mov	arg01, local02
28a24     00 34 06 A6 |  if_e	mov	result1, #0
28a28     04 76 66 50 |  if_ne	shl	arg02, #4
28a2c     3B 75 02 51 |  if_ne	add	arg01, arg02
28a30     3A 35 02 56 |  if_ne	mov	result1, arg01
28a34     1A 93 0A F6 | 	mov	local04, result1 wz
28a38     24 00 90 AD |  if_e	jmp	#LR__1761
28a3c     49 75 02 F6 | 	mov	arg01, local04
28a40     00 34 06 F6 | 	mov	result1, #0
28a44     02 74 06 F1 | 	add	arg01, #2
28a48     3A 75 E2 FA | 	rdword	arg01, arg01
28a4c     36 00 00 FF 
28a50     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
28a54     01 34 66 A6 |  if_e	neg	result1, #1
28a58     00 34 4E F2 | 	cmps	result1, #0 wz
28a5c     B8 FF 9F AD |  if_e	jmp	#LR__1759
28a60                 | LR__1760
28a60                 | LR__1761
28a60     00 92 0E F2 | 	cmp	local04, #0 wz
28a64     47 93 02 A6 |  if_e	mov	local04, local02
28a68     49 77 02 F6 | 	mov	arg02, local04
28a6c     06 76 06 F1 | 	add	arg02, #6
28a70     46 75 02 F6 | 	mov	arg01, local01
28a74     3B 77 E2 FA | 	rdword	arg02, arg02
28a78     06 74 06 F1 | 	add	arg01, #6
28a7c     3A 77 52 FC | 	wrword	arg02, arg01
28a80     46 77 0A F6 | 	mov	arg02, local01 wz
28a84     00 34 06 A6 |  if_e	mov	result1, #0
28a88     47 77 82 51 |  if_ne	sub	arg02, local02
28a8c     04 76 46 50 |  if_ne	shr	arg02, #4
28a90     3B 35 02 56 |  if_ne	mov	result1, arg02
28a94     49 75 02 F6 | 	mov	arg01, local04
28a98     06 74 06 F1 | 	add	arg01, #6
28a9c     3A 35 52 FC | 	wrword	result1, arg01
28aa0     47 93 0A F2 | 	cmp	local04, local02 wz
28aa4     84 00 90 AD |  if_e	jmp	#LR__1764
28aa8     49 75 02 F6 | 	mov	arg01, local04
28aac     20 FB BF FD | 	call	#__system___gc_nextBlockPtr
28ab0     46 35 0A F2 | 	cmp	result1, local01 wz
28ab4     74 00 90 5D |  if_ne	jmp	#LR__1763
28ab8     49 95 E2 FA | 	rdword	local05, local04
28abc     46 37 E2 FA | 	rdword	result2, local01
28ac0     1B 95 02 F1 | 	add	local05, result2
28ac4     49 95 52 FC | 	wrword	local05, local04
28ac8     46 95 02 F6 | 	mov	local05, local01
28acc     02 94 06 F1 | 	add	local05, #2
28ad0     4A 01 58 FC | 	wrword	#0, local05
28ad4     46 75 02 F6 | 	mov	arg01, local01
28ad8     F4 FA BF FD | 	call	#__system___gc_nextBlockPtr
28adc     1A 95 02 F6 | 	mov	local05, result1
28ae0     48 95 52 F2 | 	cmps	local05, local03 wc
28ae4     20 00 90 3D |  if_ae	jmp	#LR__1762
28ae8     49 77 0A F6 | 	mov	arg02, local04 wz
28aec     00 34 06 A6 |  if_e	mov	result1, #0
28af0     47 77 82 51 |  if_ne	sub	arg02, local02
28af4     04 76 46 50 |  if_ne	shr	arg02, #4
28af8     3B 35 02 56 |  if_ne	mov	result1, arg02
28afc     4A 37 02 F6 | 	mov	result2, local05
28b00     04 36 06 F1 | 	add	result2, #4
28b04     1B 35 52 FC | 	wrword	result1, result2
28b08                 | LR__1762
28b08     46 37 02 F6 | 	mov	result2, local01
28b0c     06 36 06 F1 | 	add	result2, #6
28b10     49 35 02 F6 | 	mov	result1, local04
28b14     1B 37 E2 FA | 	rdword	result2, result2
28b18     06 34 06 F1 | 	add	result1, #6
28b1c     1A 37 52 FC | 	wrword	result2, result1
28b20     06 8C 06 F1 | 	add	local01, #6
28b24     46 01 58 FC | 	wrword	#0, local01
28b28     49 8D 02 F6 | 	mov	local01, local04
28b2c                 | LR__1763
28b2c                 | LR__1764
28b2c     46 75 02 F6 | 	mov	arg01, local01
28b30     9C FA BF FD | 	call	#__system___gc_nextBlockPtr
28b34     1A 97 0A F6 | 	mov	local06, result1 wz
28b38     C0 00 90 AD |  if_e	jmp	#LR__1766
28b3c     48 97 52 F2 | 	cmps	local06, local03 wc
28b40     B8 00 90 3D |  if_ae	jmp	#LR__1766
28b44     4B 75 02 F6 | 	mov	arg01, local06
28b48     00 34 06 F6 | 	mov	result1, #0
28b4c     02 74 06 F1 | 	add	arg01, #2
28b50     3A 75 E2 FA | 	rdword	arg01, arg01
28b54     36 00 00 FF 
28b58     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
28b5c     01 34 66 A6 |  if_e	neg	result1, #1
28b60     00 34 0E F2 | 	cmp	result1, #0 wz
28b64     94 00 90 AD |  if_e	jmp	#LR__1766
28b68     46 93 02 F6 | 	mov	local04, local01
28b6c     49 95 E2 FA | 	rdword	local05, local04
28b70     4B 8D 02 F6 | 	mov	local01, local06
28b74     46 99 E2 FA | 	rdword	local07, local01
28b78     4C 95 02 F1 | 	add	local05, local07
28b7c     49 9B 02 F6 | 	mov	local08, local04
28b80     4D 95 52 FC | 	wrword	local05, local08
28b84     46 95 02 F6 | 	mov	local05, local01
28b88     06 94 06 F1 | 	add	local05, #6
28b8c     49 37 02 F6 | 	mov	result2, local04
28b90     4A 9D E2 FA | 	rdword	local09, local05
28b94     06 36 06 F1 | 	add	result2, #6
28b98     1B 9D 52 FC | 	wrword	local09, result2
28b9c     46 95 02 F6 | 	mov	local05, local01
28ba0     02 94 06 F1 | 	add	local05, #2
28ba4     4A 55 59 FC | 	wrword	#170, local05
28ba8     46 95 02 F6 | 	mov	local05, local01
28bac     06 94 06 F1 | 	add	local05, #6
28bb0     00 9E 06 F6 | 	mov	local10, #0
28bb4     4A 01 58 FC | 	wrword	#0, local05
28bb8     46 75 02 F6 | 	mov	arg01, local01
28bbc     10 FA BF FD | 	call	#__system___gc_nextBlockPtr
28bc0     1A A1 02 F6 | 	mov	local11, result1
28bc4     50 95 0A F6 | 	mov	local05, local11 wz
28bc8     30 00 90 AD |  if_e	jmp	#LR__1765
28bcc     48 95 52 F2 | 	cmps	local05, local03 wc
28bd0     28 00 90 3D |  if_ae	jmp	#LR__1765
28bd4     47 75 02 F6 | 	mov	arg01, local02
28bd8     49 77 0A F6 | 	mov	arg02, local04 wz
28bdc     00 34 06 A6 |  if_e	mov	result1, #0
28be0     3A 77 82 51 |  if_ne	sub	arg02, arg01
28be4     04 76 46 50 |  if_ne	shr	arg02, #4
28be8     3B 35 02 56 |  if_ne	mov	result1, arg02
28bec     1A A1 02 F6 | 	mov	local11, result1
28bf0     4A 9F 02 F6 | 	mov	local10, local05
28bf4     04 9E 06 F1 | 	add	local10, #4
28bf8     4F A1 52 FC | 	wrword	local11, local10
28bfc                 | LR__1765
28bfc                 | LR__1766
28bfc     4A 35 02 F6 | 	mov	result1, local05
28c00     A8 F0 03 F6 | 	mov	ptra, fp
28c04     B3 00 A0 FD | 	call	#popregs_
28c08                 | __system___gc_dofree_ret
28c08     2D 00 64 FD | 	ret
28c0c                 | 
28c0c                 | __system___gc_docollect
28c0c     09 4C 05 F6 | 	mov	COUNT_, #9
28c10     A9 00 A0 FD | 	call	#pushregs_
28c14     10 F9 BF FD | 	call	#__system___gc_ptrs
28c18     1B 8D 02 F6 | 	mov	local01, result2
28c1c     1A 8F 02 F6 | 	mov	local02, result1
28c20     47 75 02 F6 | 	mov	arg01, local02
28c24     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
28c28     1A 91 0A F6 | 	mov	local03, result1 wz
28c2c     00 92 06 F6 | 	mov	local04, #0
28c30     01 92 62 FD | 	cogid	local04
28c34     34 00 90 AD |  if_e	jmp	#LR__1768
28c38                 | LR__1767
28c38     46 91 52 F2 | 	cmps	local03, local01 wc
28c3c     2C 00 90 3D |  if_ae	jmp	#LR__1768
28c40     48 95 02 F6 | 	mov	local05, local03
28c44     02 94 06 F1 | 	add	local05, #2
28c48     4A 97 E2 FA | 	rdword	local06, local05
28c4c     20 96 26 F5 | 	andn	local06, #32
28c50     48 99 02 F6 | 	mov	local07, local03
28c54     02 98 06 F1 | 	add	local07, #2
28c58     4C 97 52 FC | 	wrword	local06, local07
28c5c     48 75 02 F6 | 	mov	arg01, local03
28c60     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
28c64     1A 91 0A F6 | 	mov	local03, result1 wz
28c68     CC FF 9F 5D |  if_ne	jmp	#LR__1767
28c6c                 | LR__1768
28c6c     00 96 06 F6 | 	mov	local06, #0
28c70     00 74 06 F6 | 	mov	arg01, #0
28c74     98 CF BF FD | 	call	#__system____topofstack
28c78     1A 77 02 F6 | 	mov	arg02, result1
28c7c     4B 75 02 F6 | 	mov	arg01, local06
28c80     90 00 B0 FD | 	call	#__system___gc_markhub
28c84     1C 01 B0 FD | 	call	#__system___gc_markcog
28c88     47 75 02 F6 | 	mov	arg01, local02
28c8c     40 F9 BF FD | 	call	#__system___gc_nextBlockPtr
28c90     1A 9B 0A F6 | 	mov	local08, result1 wz
28c94     10 00 90 5D |  if_ne	jmp	#LR__1769
28c98     4C 01 00 FF 
28c9c     2D 74 06 F6 | 	mov	arg01, ##@LR__1839
28ca0     34 FB BF FD | 	call	#__system___gc_errmsg
28ca4     60 00 90 FD | 	jmp	#LR__1773
28ca8                 | LR__1769
28ca8                 | LR__1770
28ca8     4D 91 02 F6 | 	mov	local03, local08
28cac     48 75 02 F6 | 	mov	arg01, local03
28cb0     1C F9 BF FD | 	call	#__system___gc_nextBlockPtr
28cb4     1A 9B 02 F6 | 	mov	local08, result1
28cb8     48 97 02 F6 | 	mov	local06, local03
28cbc     02 96 06 F1 | 	add	local06, #2
28cc0     4B 97 E2 FA | 	rdword	local06, local06
28cc4     20 96 CE F7 | 	test	local06, #32 wz
28cc8     30 00 90 5D |  if_ne	jmp	#LR__1772
28ccc     4B 95 02 F6 | 	mov	local05, local06
28cd0     10 94 0E F5 | 	and	local05, #16 wz
28cd4     24 00 90 5D |  if_ne	jmp	#LR__1772
28cd8     4B 97 42 F8 | 	getnib	local06, local06, #0
28cdc     4B 9D 02 F6 | 	mov	local09, local06
28ce0     49 9D 0A F2 | 	cmp	local09, local04 wz
28ce4     0E 9C 0E 52 |  if_ne	cmp	local09, #14 wz
28ce8     10 00 90 5D |  if_ne	jmp	#LR__1771
28cec     48 75 02 F6 | 	mov	arg01, local03
28cf0     E4 FC BF FD | 	call	#__system___gc_dofree
28cf4     1A 97 02 F6 | 	mov	local06, result1
28cf8     4B 9B 02 F6 | 	mov	local08, local06
28cfc                 | LR__1771
28cfc                 | LR__1772
28cfc     00 9A 0E F2 | 	cmp	local08, #0 wz
28d00     46 9B 52 52 |  if_ne	cmps	local08, local01 wc
28d04     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__1770
28d08                 | LR__1773
28d08     A8 F0 03 F6 | 	mov	ptra, fp
28d0c     B3 00 A0 FD | 	call	#popregs_
28d10                 | __system___gc_docollect_ret
28d10     2D 00 64 FD | 	ret
28d14                 | 
28d14                 | __system___gc_markhub
28d14     04 4C 05 F6 | 	mov	COUNT_, #4
28d18     A9 00 A0 FD | 	call	#pushregs_
28d1c     3A 8D 02 F6 | 	mov	local01, arg01
28d20     3B 8F 02 F6 | 	mov	local02, arg02
28d24     00 F8 BF FD | 	call	#__system___gc_ptrs
28d28     1A 91 02 F6 | 	mov	local03, result1
28d2c     1B 93 02 F6 | 	mov	local04, result2
28d30                 | LR__1774
28d30     47 8D 52 F2 | 	cmps	local01, local02 wc
28d34     60 00 90 3D |  if_ae	jmp	#LR__1775
28d38     46 79 02 FB | 	rdlong	arg03, local01
28d3c     04 8C 06 F1 | 	add	local01, #4
28d40     49 77 02 F6 | 	mov	arg02, local04
28d44     48 75 02 F6 | 	mov	arg01, local03
28d48     B4 FB BF FD | 	call	#__system___gc_isvalidptr
28d4c     1A 79 0A F6 | 	mov	arg03, result1 wz
28d50     DC FF 9F AD |  if_e	jmp	#LR__1774
28d54     3C 75 02 F6 | 	mov	arg01, arg03
28d58     00 34 06 F6 | 	mov	result1, #0
28d5c     02 74 06 F1 | 	add	arg01, #2
28d60     3A 75 E2 FA | 	rdword	arg01, arg01
28d64     36 00 00 FF 
28d68     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
28d6c     01 34 66 A6 |  if_e	neg	result1, #1
28d70     00 34 0E F2 | 	cmp	result1, #0 wz
28d74     B8 FF 9F 5D |  if_ne	jmp	#LR__1774
28d78     3C 37 02 F6 | 	mov	result2, arg03
28d7c     02 36 06 F1 | 	add	result2, #2
28d80     1B 37 E2 FA | 	rdword	result2, result2
28d84     0F 36 26 F5 | 	andn	result2, #15
28d88     2E 36 46 F5 | 	or	result2, #46
28d8c     02 78 06 F1 | 	add	arg03, #2
28d90     3C 37 52 FC | 	wrword	result2, arg03
28d94     98 FF 9F FD | 	jmp	#LR__1774
28d98                 | LR__1775
28d98     A8 F0 03 F6 | 	mov	ptra, fp
28d9c     B3 00 A0 FD | 	call	#popregs_
28da0                 | __system___gc_markhub_ret
28da0     2D 00 64 FD | 	ret
28da4                 | 
28da4                 | __system___gc_markcog
28da4     04 4C 05 F6 | 	mov	COUNT_, #4
28da8     A9 00 A0 FD | 	call	#pushregs_
28dac     78 F7 BF FD | 	call	#__system___gc_ptrs
28db0     1A 8D 02 F6 | 	mov	local01, result1
28db4     1B 8F 02 F6 | 	mov	local02, result2
28db8     00 90 06 F6 | 	mov	local03, #0
28dbc                 | LR__1776
28dbc     F0 93 06 F6 | 	mov	local04, #496
28dc0     48 93 82 F1 | 	sub	local04, local03
28dc4     F0 93 06 F1 | 	add	local04, #496
28dc8                 | 	'.live	local04
28dc8     00 92 96 F9 | 	alts	local04, #0
28dcc     49 93 02 F6 | 	mov	local04, local04
28dd0     46 75 02 F6 | 	mov	arg01, local01
28dd4     47 77 02 F6 | 	mov	arg02, local02
28dd8     49 79 02 F6 | 	mov	arg03, local04
28ddc     20 FB BF FD | 	call	#__system___gc_isvalidptr
28de0     00 34 0E F2 | 	cmp	result1, #0 wz
28de4     18 00 90 AD |  if_e	jmp	#LR__1777
28de8     1A 93 02 F6 | 	mov	local04, result1
28dec     02 92 06 F1 | 	add	local04, #2
28df0     49 93 E2 FA | 	rdword	local04, local04
28df4     20 92 46 F5 | 	or	local04, #32
28df8     02 34 06 F1 | 	add	result1, #2
28dfc     1A 93 52 FC | 	wrword	local04, result1
28e00                 | LR__1777
28e00     01 90 06 F1 | 	add	local03, #1
28e04     F0 91 56 F2 | 	cmps	local03, #496 wc
28e08     B0 FF 9F CD |  if_b	jmp	#LR__1776
28e0c     A8 F0 03 F6 | 	mov	ptra, fp
28e10     B3 00 A0 FD | 	call	#popregs_
28e14                 | __system___gc_markcog_ret
28e14     2D 00 64 FD | 	ret
28e18                 | 
28e18                 | __system____default_getc
28e18                 | __system____default_getc_ret
28e18     2D 00 64 FD | 	ret
28e1c                 | 
28e1c                 | __system____default_putc
28e1c                 | __system____default_putc_ret
28e1c     2D 00 64 FD | 	ret
28e20                 | 
28e20                 | __system____default_putc_terminal
28e20                 | __system____default_putc_terminal_ret
28e20     2D 00 64 FD | 	ret
28e24                 | 
28e24                 | __system____default_flush
28e24                 | __system____default_flush_ret
28e24     2D 00 64 FD | 	ret
28e28                 | 
28e28                 | __system____getftab
28e28     0A 74 16 F2 | 	cmp	arg01, #10 wc
28e2c     00 34 06 36 |  if_ae	mov	result1, #0
28e30     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
28e34     3A 35 02 F6 | 	mov	result1, arg01
28e38     01 34 66 F0 | 	shl	result1, #1
28e3c     3A 35 02 F1 | 	add	result1, arg01
28e40     04 34 66 F0 | 	shl	result1, #4
28e44     01 00 00 FF 
28e48     F4 A2 05 F1 | 	add	ptr___system__dat__, ##756
28e4c     D1 34 02 F1 | 	add	result1, ptr___system__dat__
28e50     01 00 00 FF 
28e54     F4 A2 85 F1 | 	sub	ptr___system__dat__, ##756
28e58                 | __system____getftab_ret
28e58     2D 00 64 FD | 	ret
28e5c                 | 
28e5c                 | __system__strncpy
28e5c     3A 3B 02 F6 | 	mov	_var01, arg01
28e60                 | LR__1778
28e60     01 78 86 F1 | 	sub	arg03, #1
28e64     00 78 56 F2 | 	cmps	arg03, #0 wc
28e68     18 00 90 CD |  if_b	jmp	#LR__1779
28e6c     3B 35 C2 FA | 	rdbyte	result1, arg02
28e70     1D 35 42 FC | 	wrbyte	result1, _var01
28e74     01 76 06 F1 | 	add	arg02, #1
28e78     1D 35 CA FA | 	rdbyte	result1, _var01 wz
28e7c     01 3A 06 F1 | 	add	_var01, #1
28e80     DC FF 9F 5D |  if_ne	jmp	#LR__1778
28e84                 | LR__1779
28e84     90 71 9D FE | 	loc	pa,	#(@LR__1781-@LR__1780)
28e88     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28e8c                 | LR__1780
28e8c     01 78 86 F1 | 	sub	arg03, #1
28e90     00 78 56 F2 | 	cmps	arg03, #0 wc
28e94     1D 3D 02 36 |  if_ae	mov	_var02, _var01
28e98     01 3A 06 31 |  if_ae	add	_var01, #1
28e9c     1E 01 48 3C |  if_ae	wrbyte	#0, _var02
28ea0     E8 FF 9F 3D |  if_ae	jmp	#LR__1780
28ea4                 | LR__1781
28ea4     3A 35 02 F6 | 	mov	result1, arg01
28ea8                 | __system__strncpy_ret
28ea8     2D 00 64 FD | 	ret
28eac                 | 
28eac                 | __system__strncat
28eac     3A 3B 02 F6 | 	mov	_var01, arg01
28eb0     3B 3D 02 F6 | 	mov	_var02, arg02
28eb4     3C 3F 02 F6 | 	mov	_var03, arg03
28eb8     1E 41 0A F6 | 	mov	_var04, _var02 wz
28ebc     6C 00 90 AD |  if_e	jmp	#LR__1786
28ec0     01 3E 16 F2 | 	cmp	_var03, #1 wc
28ec4     64 00 90 CD |  if_b	jmp	#LR__1786
28ec8     1D 43 02 F6 | 	mov	_var05, _var01
28ecc     80 71 9D FE | 	loc	pa,	#(@LR__1784-@LR__1782)
28ed0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28ed4                 | LR__1782
28ed4     21 45 CA FA | 	rdbyte	_var06, _var05 wz
28ed8     01 42 06 51 |  if_ne	add	_var05, #1
28edc     F4 FF 9F 5D |  if_ne	jmp	#LR__1782
28ee0     1F 47 02 F6 | 	mov	_var07, _var03
28ee4                 | LR__1783
28ee4     20 49 02 F6 | 	mov	_var08, _var04
28ee8     20 4B 02 F6 | 	mov	_var09, _var04
28eec     01 4A 06 F1 | 	add	_var09, #1
28ef0     25 41 02 F6 | 	mov	_var04, _var09
28ef4     24 4D C2 FA | 	rdbyte	_var10, _var08
28ef8     26 45 02 F6 | 	mov	_var06, _var10
28efc     07 44 4E F7 | 	zerox	_var06, #7 wz
28f00     20 00 90 AD |  if_e	jmp	#LR__1785
28f04     23 4F 02 F6 | 	mov	_var11, _var07
28f08     01 4E 86 F1 | 	sub	_var11, #1
28f0c     27 47 02 F6 | 	mov	_var07, _var11
28f10     00 46 56 F2 | 	cmps	_var07, #0 wc
28f14     21 45 02 36 |  if_ae	mov	_var06, _var05
28f18     01 42 06 31 |  if_ae	add	_var05, #1
28f1c     22 4D 42 3C |  if_ae	wrbyte	_var10, _var06
28f20     C0 FF 9F 3D |  if_ae	jmp	#LR__1783
28f24                 | LR__1784
28f24                 | LR__1785
28f24     00 44 06 F6 | 	mov	_var06, #0
28f28     21 01 48 FC | 	wrbyte	#0, _var05
28f2c                 | LR__1786
28f2c     1D 35 02 F6 | 	mov	result1, _var01
28f30                 | __system__strncat_ret
28f30     2D 00 64 FD | 	ret
28f34                 | 
28f34                 | __system__strncmp
28f34     3A 3B 0A F6 | 	mov	_var01, arg01 wz
28f38     14 00 90 5D |  if_ne	jmp	#LR__1787
28f3c     00 76 0E F2 | 	cmp	arg02, #0 wz
28f40     01 3C 66 56 |  if_ne	neg	_var02, #1
28f44     00 3C 06 A6 |  if_e	mov	_var02, #0
28f48     1E 35 02 F6 | 	mov	result1, _var02
28f4c     88 00 90 FD | 	jmp	#__system__strncmp_ret
28f50                 | LR__1787
28f50     00 76 0E F2 | 	cmp	arg02, #0 wz
28f54     01 34 06 A6 |  if_e	mov	result1, #1
28f58     7C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28f5c     3C 3F 02 F6 | 	mov	_var03, arg03
28f60     D8 70 9D FE | 	loc	pa,	#(@LR__1789-@LR__1788)
28f64     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28f68                 | LR__1788
28f68     1D 41 C2 FA | 	rdbyte	_var04, _var01
28f6c     3B 43 02 F6 | 	mov	_var05, arg02
28f70     3B 45 02 F6 | 	mov	_var06, arg02
28f74     01 44 06 F1 | 	add	_var06, #1
28f78     22 77 02 F6 | 	mov	arg02, _var06
28f7c     21 47 C2 FA | 	rdbyte	_var07, _var05
28f80     1F 3D 02 F6 | 	mov	_var02, _var03
28f84     01 3C 86 F1 | 	sub	_var02, #1
28f88     1E 3F 02 F6 | 	mov	_var03, _var02
28f8c     00 3E 56 F2 | 	cmps	_var03, #0 wc
28f90     01 3A 06 F1 | 	add	_var01, #1
28f94     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
28f98     08 00 90 2D |  if_nc_and_z	jmp	#LR__1790
28f9c     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
28fa0     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__1788
28fa4                 | LR__1789
28fa4                 | LR__1790
28fa4     00 3E 56 F2 | 	cmps	_var03, #0 wc
28fa8     00 34 06 C6 |  if_b	mov	result1, #0
28fac     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
28fb0     23 41 0A F2 | 	cmp	_var04, _var07 wz
28fb4     00 34 06 A6 |  if_e	mov	result1, #0
28fb8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28fbc     00 40 0E F2 | 	cmp	_var04, #0 wz
28fc0     01 34 66 A6 |  if_e	neg	result1, #1
28fc4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28fc8     00 46 0E F2 | 	cmp	_var07, #0 wz
28fcc     01 34 06 A6 |  if_e	mov	result1, #1
28fd0     20 35 02 56 |  if_ne	mov	result1, _var04
28fd4     23 35 82 51 |  if_ne	sub	result1, _var07
28fd8                 | __system__strncmp_ret
28fd8     2D 00 64 FD | 	ret
28fdc                 | 
28fdc                 | __system____root_opendir
28fdc     5C A2 05 F1 | 	add	ptr___system__dat__, #92
28fe0     04 74 06 F1 | 	add	arg01, #4
28fe4     3A A3 61 FC | 	wrlong	ptr___system__dat__, arg01
28fe8     00 34 06 F6 | 	mov	result1, #0
28fec     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
28ff0                 | __system____root_opendir_ret
28ff0     2D 00 64 FD | 	ret
28ff4                 | 
28ff4                 | __system____root_readdir
28ff4     03 4C 05 F6 | 	mov	COUNT_, #3
28ff8     A9 00 A0 FD | 	call	#pushregs_
28ffc     3A 8D 02 F6 | 	mov	local01, arg01
29000     3B 8F 02 F6 | 	mov	local02, arg02
29004     04 8C 06 F1 | 	add	local01, #4
29008     46 91 02 FB | 	rdlong	local03, local01
2900c     04 8C 86 F1 | 	sub	local01, #4
29010                 | LR__1791
29010     6C A2 05 F1 | 	add	ptr___system__dat__, #108
29014     D1 90 0A F2 | 	cmp	local03, ptr___system__dat__ wz
29018     6C A2 85 F1 | 	sub	ptr___system__dat__, #108
2901c     01 34 66 A6 |  if_e	neg	result1, #1
29020     48 00 90 AD |  if_e	jmp	#LR__1792
29024     48 79 0A FB | 	rdlong	arg03, local03 wz
29028     04 90 06 A1 |  if_e	add	local03, #4
2902c     E0 FF 9F AD |  if_e	jmp	#LR__1791
29030     48 77 02 FB | 	rdlong	arg02, local03
29034     01 76 06 F1 | 	add	arg02, #1
29038     47 75 02 F6 | 	mov	arg01, local02
2903c     40 78 06 F6 | 	mov	arg03, #64
29040     18 FE BF FD | 	call	#__system__strncpy
29044     50 8E 06 F1 | 	add	local02, #80
29048     47 03 48 FC | 	wrbyte	#1, local02
2904c     08 8E 86 F1 | 	sub	local02, #8
29050     47 01 68 FC | 	wrlong	#0, local02
29054     04 8E 06 F1 | 	add	local02, #4
29058     47 01 68 FC | 	wrlong	#0, local02
2905c     04 90 06 F1 | 	add	local03, #4
29060     04 8C 06 F1 | 	add	local01, #4
29064     46 91 62 FC | 	wrlong	local03, local01
29068     00 34 06 F6 | 	mov	result1, #0
2906c                 | LR__1792
2906c     A8 F0 03 F6 | 	mov	ptra, fp
29070     B3 00 A0 FD | 	call	#popregs_
29074                 | __system____root_readdir_ret
29074     2D 00 64 FD | 	ret
29078                 | 
29078                 | __system____root_closedir
29078     00 34 06 F6 | 	mov	result1, #0
2907c                 | __system____root_closedir_ret
2907c     2D 00 64 FD | 	ret
29080                 | 
29080                 | __system____root_stat
29080     01 4C 05 F6 | 	mov	COUNT_, #1
29084     A9 00 A0 FD | 	call	#pushregs_
29088     3B 8D 02 F6 | 	mov	local01, arg02
2908c     46 75 02 F6 | 	mov	arg01, local01
29090     00 76 06 F6 | 	mov	arg02, #0
29094     30 78 06 F6 | 	mov	arg03, #48
29098     99 00 A0 FD | 	call	#\builtin_bytefill_
2909c     08 8C 06 F1 | 	add	local01, #8
290a0     08 00 80 FF 
290a4     46 FF 6B FC | 	wrlong	##4607, local01
290a8     00 34 06 F6 | 	mov	result1, #0
290ac     A8 F0 03 F6 | 	mov	ptra, fp
290b0     B3 00 A0 FD | 	call	#popregs_
290b4                 | __system____root_stat_ret
290b4     2D 00 64 FD | 	ret
290b8                 | 
290b8                 | __system___strrev
290b8     3A 3B CA FA | 	rdbyte	_var01, arg01 wz
290bc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
290c0     3A 3D 02 F6 | 	mov	_var02, arg01
290c4     6C 6F 9D FE | 	loc	pa,	#(@LR__1795-@LR__1793)
290c8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
290cc                 | LR__1793
290cc     1E 3B CA FA | 	rdbyte	_var01, _var02 wz
290d0     01 3C 06 51 |  if_ne	add	_var02, #1
290d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1793
290d8     01 3C 86 F1 | 	sub	_var02, #1
290dc                 | LR__1794
290dc     3A 3D 5A F2 | 	cmps	_var02, arg01 wcz
290e0     1C 00 90 ED |  if_be	jmp	#LR__1796
290e4     3A 3B C2 FA | 	rdbyte	_var01, arg01
290e8     1E 3F C2 FA | 	rdbyte	_var03, _var02
290ec     3A 3F 42 FC | 	wrbyte	_var03, arg01
290f0     1E 3B 42 FC | 	wrbyte	_var01, _var02
290f4     01 74 06 F1 | 	add	arg01, #1
290f8     01 3C 86 F1 | 	sub	_var02, #1
290fc     DC FF 9F FD | 	jmp	#LR__1794
29100                 | LR__1795
29100                 | LR__1796
29100                 | __system___strrev_ret
29100     2D 00 64 FD | 	ret
29104                 | 
29104                 | __system___fmtpad
29104     07 4C 05 F6 | 	mov	COUNT_, #7
29108     A9 00 A0 FD | 	call	#pushregs_
2910c     3A 8D 02 F6 | 	mov	local01, arg01
29110     3B 8F 02 F6 | 	mov	local02, arg02
29114     3C 91 02 F6 | 	mov	local03, arg03
29118     47 75 EA F8 | 	getbyte	arg01, local02, #1
2911c     16 8E 46 F0 | 	shr	local02, #22
29120     03 8E 0E F5 | 	and	local02, #3 wz
29124     00 92 06 F6 | 	mov	local04, #0
29128     01 8E 06 A6 |  if_e	mov	local02, #1
2912c     3D 8F CA F7 | 	test	local02, arg04 wz
29130     00 34 06 A6 |  if_e	mov	result1, #0
29134     80 00 90 AD |  if_e	jmp	#LR__1800
29138     3A 91 C2 F2 | 	subr	local03, arg01
2913c     01 90 56 F2 | 	cmps	local03, #1 wc
29140     00 34 06 C6 |  if_b	mov	result1, #0
29144     70 00 90 CD |  if_b	jmp	#LR__1800
29148     03 8E 0E F2 | 	cmp	local02, #3 wz
2914c     18 00 90 5D |  if_ne	jmp	#LR__1797
29150     01 7A 0E F2 | 	cmp	arg04, #1 wz
29154     6E 8E 62 FD | 	wrz	local02
29158     47 91 02 F1 | 	add	local03, local02
2915c     48 91 52 F6 | 	abs	local03, local03 wc
29160     01 90 46 F0 | 	shr	local03, #1
29164     48 91 82 F6 | 	negc	local03, local03
29168                 | LR__1797
29168     00 94 06 F6 | 	mov	local05, #0
2916c                 | LR__1798
2916c     48 95 52 F2 | 	cmps	local05, local03 wc
29170     40 00 90 3D |  if_ae	jmp	#LR__1799
29174     46 97 02 F6 | 	mov	local06, local01
29178     4B 99 02 FB | 	rdlong	local07, local06
2917c     04 96 06 F1 | 	add	local06, #4
29180     4B 97 02 FB | 	rdlong	local06, local06
29184     20 74 06 F6 | 	mov	arg01, #32
29188     C9 8E 02 F6 | 	mov	local02, objptr
2918c     4C 93 01 F6 | 	mov	objptr, local07
29190     2D 96 62 FD | 	call	local06
29194     47 93 01 F6 | 	mov	objptr, local02
29198     1A 97 02 F6 | 	mov	local06, result1
2919c     00 96 56 F2 | 	cmps	local06, #0 wc
291a0     4B 35 02 C6 |  if_b	mov	result1, local06
291a4     10 00 90 CD |  if_b	jmp	#LR__1800
291a8     4B 93 02 F1 | 	add	local04, local06
291ac     01 94 06 F1 | 	add	local05, #1
291b0     B8 FF 9F FD | 	jmp	#LR__1798
291b4                 | LR__1799
291b4     49 35 02 F6 | 	mov	result1, local04
291b8                 | LR__1800
291b8     A8 F0 03 F6 | 	mov	ptra, fp
291bc     B3 00 A0 FD | 	call	#popregs_
291c0                 | __system___fmtpad_ret
291c0     2D 00 64 FD | 	ret
291c4                 | 
291c4                 | __system___uitoa
291c4     08 4C 05 F6 | 	mov	COUNT_, #8
291c8     A9 00 A0 FD | 	call	#pushregs_
291cc     3A 8D 02 F6 | 	mov	local01, arg01
291d0     3B 8F 02 F6 | 	mov	local02, arg02
291d4     3C 91 02 F6 | 	mov	local03, arg03
291d8     3D 93 02 F6 | 	mov	local04, arg04
291dc     3E 95 0A F6 | 	mov	local05, arg05 wz
291e0     46 97 02 F6 | 	mov	local06, local01
291e4     00 98 06 F6 | 	mov	local07, #0
291e8     37 9A 06 56 |  if_ne	mov	local08, #55
291ec     57 9A 06 A6 |  if_e	mov	local08, #87
291f0                 | LR__1801
291f0     48 8F 12 FD | 	qdiv	local02, local03
291f4     19 94 62 FD | 	getqy	local05
291f8     48 8F 12 FD | 	qdiv	local02, local03
291fc     0A 94 16 F2 | 	cmp	local05, #10 wc
29200     30 94 06 C1 |  if_b	add	local05, #48
29204     4D 95 02 31 |  if_ae	add	local05, local08
29208     4B 95 42 FC | 	wrbyte	local05, local06
2920c     01 96 06 F1 | 	add	local06, #1
29210     01 98 06 F1 | 	add	local07, #1
29214     18 8E 62 FD | 	getqx	local02
29218     00 8E 0E F2 | 	cmp	local02, #0 wz
2921c     D0 FF 9F 5D |  if_ne	jmp	#LR__1801
29220     49 99 12 F2 | 	cmp	local07, local04 wc
29224     C8 FF 9F CD |  if_b	jmp	#LR__1801
29228     4B 01 48 FC | 	wrbyte	#0, local06
2922c     46 75 02 F6 | 	mov	arg01, local01
29230     84 FE BF FD | 	call	#__system___strrev
29234     4C 35 02 F6 | 	mov	result1, local07
29238     A8 F0 03 F6 | 	mov	ptra, fp
2923c     B3 00 A0 FD | 	call	#popregs_
29240                 | __system___uitoa_ret
29240     2D 00 64 FD | 	ret
29244                 | 
29244                 | __system__disassemble_1264
29244     16 4C 05 F6 | 	mov	COUNT_, #22
29248     A9 00 A0 FD | 	call	#pushregs_
2924c     3A 8D 02 F6 | 	mov	local01, arg01
29250     3B 8F 02 F6 | 	mov	local02, arg02
29254     3C 91 02 F6 | 	mov	local03, arg03
29258     3D 93 02 F6 | 	mov	local04, arg04
2925c     3E 95 02 F6 | 	mov	local05, arg05
29260     4A 75 02 F6 | 	mov	arg01, local05
29264     8C E4 BF FD | 	call	#__system___float_fromint
29268     1A 97 02 F6 | 	mov	local06, result1
2926c     00 98 06 F6 | 	mov	local07, #0
29270     00 9A 06 F6 | 	mov	local08, #0
29274     01 9C 06 F6 | 	mov	local09, #1
29278     46 75 02 F6 | 	mov	arg01, local01
2927c     00 76 06 F6 | 	mov	arg02, #0
29280     01 78 06 F6 | 	mov	arg03, #1
29284     F8 EB BF FD | 	call	#__system___float_cmp
29288     00 34 0E F2 | 	cmp	result1, #0 wz
2928c     00 9E 06 A6 |  if_e	mov	local10, #0
29290     47 01 68 AC |  if_e	wrlong	#0, local02
29294     48 9F 62 AC |  if_e	wrlong	local10, local03
29298     BC 01 90 AD |  if_e	jmp	#LR__1814
2929c     46 75 02 F6 | 	mov	arg01, local01
292a0     2C EE BF FD | 	call	#__system____builtin_ilogb
292a4     1A A1 02 F6 | 	mov	local11, result1
292a8     0A 94 0E F2 | 	cmp	local05, #10 wz
292ac     24 00 90 5D |  if_ne	jmp	#LR__1802
292b0     50 9F 02 F6 | 	mov	local10, local11
292b4     01 9E 66 F0 | 	shl	local10, #1
292b8     50 9F 02 F1 | 	add	local10, local11
292bc     4F A1 52 F6 | 	abs	local11, local10 wc
292c0     0A A0 16 FD | 	qdiv	local11, #10
292c4     09 A2 06 F6 | 	mov	local12, #9
292c8     18 A0 62 FD | 	getqx	local11
292cc     50 A1 82 F6 | 	negc	local11, local11
292d0     04 00 90 FD | 	jmp	#LR__1803
292d4                 | LR__1802
292d4     18 A2 06 F6 | 	mov	local12, #24
292d8                 | LR__1803
292d8                 | LR__1804
292d8     08 98 56 F2 | 	cmps	local07, #8 wc
292dc     01 98 06 F1 | 	add	local07, #1
292e0     6C 00 90 3D |  if_ae	jmp	#LR__1805
292e4     00 C0 1F FF 
292e8     00 74 06 F6 | 	mov	arg01, ##1065353216
292ec     4B 77 02 F6 | 	mov	arg02, local06
292f0     50 79 02 F6 | 	mov	arg03, local11
292f4     60 F1 BF FD | 	call	#__system___float_pow_n
292f8     1A A5 02 F6 | 	mov	local13, result1
292fc     46 75 02 F6 | 	mov	arg01, local01
29300     52 77 02 F6 | 	mov	arg02, local13
29304     40 E9 BF FD | 	call	#__system___float_div
29308     1A A7 02 F6 | 	mov	local14, result1
2930c     01 9C 06 F6 | 	mov	local09, #1
29310     53 75 02 F6 | 	mov	arg01, local14
29314     00 C0 1F FF 
29318     00 76 06 F6 | 	mov	arg02, ##1065353216
2931c     01 78 06 F6 | 	mov	arg03, #1
29320     5C EB BF FD | 	call	#__system___float_cmp
29324     00 34 56 F2 | 	cmps	result1, #0 wc
29328     01 A0 86 C1 |  if_b	sub	local11, #1
2932c     A8 FF 9F CD |  if_b	jmp	#LR__1804
29330     4B 77 02 F6 | 	mov	arg02, local06
29334     01 9C 66 F6 | 	neg	local09, #1
29338     53 75 02 F6 | 	mov	arg01, local14
2933c     01 78 66 F6 | 	neg	arg03, #1
29340     3C EB BF FD | 	call	#__system___float_cmp
29344     00 34 56 F2 | 	cmps	result1, #0 wc
29348     01 A0 06 31 |  if_ae	add	local11, #1
2934c     88 FF 9F 3D |  if_ae	jmp	#LR__1804
29350                 | LR__1805
29350     53 75 02 F6 | 	mov	arg01, local14
29354     78 ED BF FD | 	call	#__system____builtin_ilogb
29358     1A A9 02 F6 | 	mov	local15, result1
2935c     53 AB 02 F6 | 	mov	local16, local14
29360     55 AD 02 F6 | 	mov	local17, local16
29364     17 AD 06 F4 | 	bitl	local17, #279
29368     17 AC 26 F4 | 	bith	local17, #23
2936c     54 AD 62 F0 | 	shl	local17, local15
29370     02 94 0E F2 | 	cmp	local05, #2 wz
29374     02 92 66 A0 |  if_e	shl	local04, #2
29378     00 AE 06 F6 | 	mov	local18, #0
2937c     00 92 56 F2 | 	cmps	local04, #0 wc
29380     10 00 90 3D |  if_ae	jmp	#LR__1806
29384     50 93 C2 F2 | 	subr	local04, local11
29388     00 92 56 F2 | 	cmps	local04, #0 wc
2938c     C0 00 90 CD |  if_b	jmp	#LR__1813
29390     04 00 90 FD | 	jmp	#LR__1807
29394                 | LR__1806
29394     01 92 06 F1 | 	add	local04, #1
29398                 | LR__1807
29398     51 93 7A F3 | 	fles	local04, local12 wcz
2939c     01 B0 06 F6 | 	mov	local19, #1
293a0     A0 6C 9D FE | 	loc	pa,	#(@LR__1809-@LR__1808)
293a4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
293a8                 | LR__1808
293a8     00 40 00 FF 
293ac     00 AE 16 F2 | 	cmp	local18, ##8388608 wc
293b0     38 00 90 3D |  if_ae	jmp	#LR__1810
293b4     01 92 56 F2 | 	cmps	local04, #1 wc
293b8     01 92 86 F1 | 	sub	local04, #1
293bc     2C 00 90 CD |  if_b	jmp	#LR__1810
293c0     4A AF 02 FD | 	qmul	local18, local05
293c4     56 B3 02 F6 | 	mov	local20, local17
293c8     17 B2 46 F0 | 	shr	local20, #23
293cc     17 AD 06 F4 | 	bitl	local17, #279
293d0     18 AE 62 FD | 	getqx	local18
293d4     4A B1 02 FD | 	qmul	local19, local05
293d8     18 B0 62 FD | 	getqx	local19
293dc     4A AD 02 FD | 	qmul	local17, local05
293e0     59 AF 02 F1 | 	add	local18, local20
293e4     18 AC 62 FD | 	getqx	local17
293e8     BC FF 9F FD | 	jmp	#LR__1808
293ec                 | LR__1809
293ec                 | LR__1810
293ec     4A 9F 02 F6 | 	mov	local10, local05
293f0     17 9E 66 F0 | 	shl	local10, #23
293f4     4F 9B 52 F6 | 	abs	local08, local10 wc
293f8     01 9A 46 F0 | 	shr	local08, #1
293fc     4D 9B 82 F6 | 	negc	local08, local08
29400     4D AD 1A F2 | 	cmp	local17, local08 wcz
29404     28 00 90 1D |  if_a	jmp	#LR__1811
29408     4A 9D 02 F6 | 	mov	local09, local05
2940c     17 9C 66 F0 | 	shl	local09, #23
29410     4E B5 52 F6 | 	abs	local21, local09 wc
29414     01 B4 46 F0 | 	shr	local21, #1
29418     5A B5 82 F6 | 	negc	local21, local21
2941c     5A AD 0A F2 | 	cmp	local17, local21 wz
29420     2C 00 90 5D |  if_ne	jmp	#LR__1812
29424     57 B7 02 F6 | 	mov	local22, local18
29428     01 B6 0E F5 | 	and	local22, #1 wz
2942c     20 00 90 AD |  if_e	jmp	#LR__1812
29430                 | LR__1811
29430     57 9F 02 F6 | 	mov	local10, local18
29434     57 9B 02 F6 | 	mov	local08, local18
29438     01 9A 06 F1 | 	add	local08, #1
2943c     4D AF 02 F6 | 	mov	local18, local08
29440     58 AF 0A F2 | 	cmp	local18, local19 wz
29444     50 9F 02 A6 |  if_e	mov	local10, local11
29448     01 9E 06 A1 |  if_e	add	local10, #1
2944c     4F A1 02 A6 |  if_e	mov	local11, local10
29450                 | LR__1812
29450                 | LR__1813
29450     47 AF 62 FC | 	wrlong	local18, local02
29454     48 A1 62 FC | 	wrlong	local11, local03
29458                 | LR__1814
29458     A8 F0 03 F6 | 	mov	ptra, fp
2945c     B3 00 A0 FD | 	call	#popregs_
29460                 | __system__disassemble_1264_ret
29460     2D 00 64 FD | 	ret
29464                 | 
29464                 | __system__emitsign_1266
29464     00 34 06 F6 | 	mov	result1, #0
29468     00 76 0E F2 | 	cmp	arg02, #0 wz
2946c     3A 3B 02 56 |  if_ne	mov	_var01, arg01
29470     01 74 06 51 |  if_ne	add	arg01, #1
29474     1D 77 42 5C |  if_ne	wrbyte	arg02, _var01
29478     01 34 06 56 |  if_ne	mov	result1, #1
2947c     00 78 0E F2 | 	cmp	arg03, #0 wz
29480     3A 61 48 5C |  if_ne	wrbyte	#48, arg01
29484     01 74 06 51 |  if_ne	add	arg01, #1
29488     3A 79 42 5C |  if_ne	wrbyte	arg03, arg01
2948c     02 34 06 51 |  if_ne	add	result1, #2
29490                 | __system__emitsign_1266_ret
29490     2D 00 64 FD | 	ret
29494                 | 
29494                 | __system___gettxfunc
29494     02 4C 05 F6 | 	mov	COUNT_, #2
29498     A9 00 A0 FD | 	call	#pushregs_
2949c     88 F9 BF FD | 	call	#__system____getftab
294a0     1A 8D 0A F6 | 	mov	local01, result1 wz
294a4     08 8C 06 51 |  if_ne	add	local01, #8
294a8     46 8F 02 5B |  if_ne	rdlong	local02, local01
294ac     08 8C 86 51 |  if_ne	sub	local01, #8
294b0     00 8E 4E 52 |  if_ne	cmps	local02, #0 wz
294b4     00 34 06 A6 |  if_e	mov	result1, #0
294b8     D0 76 02 56 |  if_ne	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
294bc     46 75 02 56 |  if_ne	mov	arg01, local01
294c0     74 C7 BF 5D |  if_ne	call	#__system___make_methodptr
294c4     A8 F0 03 F6 | 	mov	ptra, fp
294c8     B3 00 A0 FD | 	call	#popregs_
294cc                 | __system___gettxfunc_ret
294cc     2D 00 64 FD | 	ret
294d0                 | 
294d0                 | __system___getiolock_1306
294d0     02 4C 05 F6 | 	mov	COUNT_, #2
294d4     A9 00 A0 FD | 	call	#pushregs_
294d8     4C F9 BF FD | 	call	#__system____getftab
294dc     1A 8D 0A F6 | 	mov	local01, result1 wz
294e0     08 8C 06 51 |  if_ne	add	local01, #8
294e4     46 8F 02 5B |  if_ne	rdlong	local02, local01
294e8     08 8C 86 51 |  if_ne	sub	local01, #8
294ec     00 8E 4E 52 |  if_ne	cmps	local02, #0 wz
294f0     01 00 00 AF 
294f4     F0 A2 05 A1 |  if_e	add	ptr___system__dat__, ##752
294f8     D1 34 02 A6 |  if_e	mov	result1, ptr___system__dat__
294fc     01 00 00 AF 
29500     F0 A2 85 A1 |  if_e	sub	ptr___system__dat__, ##752
29504     0C 8C 06 51 |  if_ne	add	local01, #12
29508     46 35 02 56 |  if_ne	mov	result1, local01
2950c     A8 F0 03 F6 | 	mov	ptra, fp
29510     B3 00 A0 FD | 	call	#popregs_
29514                 | __system___getiolock_1306_ret
29514     2D 00 64 FD | 	ret
29518                 | 
29518                 | __system__pack_1346
29518     06 4C 05 F6 | 	mov	COUNT_, #6
2951c     A9 00 A0 FD | 	call	#pushregs_
29520     3A 8D 02 F6 | 	mov	local01, arg01
29524     3B 8F 02 F6 | 	mov	local02, arg02
29528     3C 91 02 F6 | 	mov	local03, arg03
2952c     3D 93 02 F6 | 	mov	local04, arg04
29530     7F 90 06 F1 | 	add	local03, #127
29534     04 92 CE F7 | 	test	local04, #4 wz
29538     10 00 90 AD |  if_e	jmp	#LR__1815
2953c     00 8C 0E F2 | 	cmp	local01, #0 wz
29540     16 8C C6 A9 |  if_e	decod	local01, #22
29544     F7 8C 26 F4 | 	bith	local01, #247
29548     B8 00 90 FD | 	jmp	#LR__1824
2954c                 | LR__1815
2954c     02 92 CE F7 | 	test	local04, #2 wz
29550     00 C0 3F 5F 
29554     00 8C 06 56 |  if_ne	mov	local01, ##2139095040
29558     00 8E 06 56 |  if_ne	mov	local02, #0
2955c     A4 00 90 5D |  if_ne	jmp	#LR__1823
29560     08 92 CE F7 | 	test	local04, #8 wz
29564     00 8C 06 56 |  if_ne	mov	local01, #0
29568     98 00 90 5D |  if_ne	jmp	#LR__1822
2956c     FF 90 56 F2 | 	cmps	local03, #255 wc
29570     00 C0 3F 3F 
29574     00 8C 06 36 |  if_ae	mov	local01, ##2139095040
29578     00 8E 06 36 |  if_ae	mov	local02, #0
2957c     84 00 90 3D |  if_ae	jmp	#LR__1821
29580     01 90 56 F2 | 	cmps	local03, #1 wc
29584     70 00 90 3D |  if_ae	jmp	#LR__1819
29588     01 8E 46 F0 | 	shr	local02, #1
2958c     46 95 02 F6 | 	mov	local05, local01
29590     01 94 06 F5 | 	and	local05, #1
29594     1F 94 66 F0 | 	shl	local05, #31
29598     4A 8F 42 F5 | 	or	local02, local05
2959c     01 8C 46 F0 | 	shr	local01, #1
295a0     98 6A 9D FE | 	loc	pa,	#(@LR__1817-@LR__1816)
295a4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
295a8                 | LR__1816
295a8     00 90 56 F2 | 	cmps	local03, #0 wc
295ac     34 00 90 3D |  if_ae	jmp	#LR__1818
295b0     00 8C 0E F2 | 	cmp	local01, #0 wz
295b4     2C 00 90 AD |  if_e	jmp	#LR__1818
295b8     47 97 02 F6 | 	mov	local06, local02
295bc     01 96 06 F5 | 	and	local06, #1
295c0     01 90 06 F1 | 	add	local03, #1
295c4     01 8E 46 F0 | 	shr	local02, #1
295c8     46 95 02 F6 | 	mov	local05, local01
295cc     01 94 06 F5 | 	and	local05, #1
295d0     1F 94 66 F0 | 	shl	local05, #31
295d4     4A 8F 42 F5 | 	or	local02, local05
295d8     4B 8F 42 F5 | 	or	local02, local06
295dc     01 8C 46 F0 | 	shr	local01, #1
295e0     C4 FF 9F FD | 	jmp	#LR__1816
295e4                 | LR__1817
295e4                 | LR__1818
295e4     00 90 56 F2 | 	cmps	local03, #0 wc
295e8     18 00 90 3D |  if_ae	jmp	#LR__1820
295ec     00 8E 0E F2 | 	cmp	local02, #0 wz
295f0     6F 8E 62 FD | 	wrnz	local02
295f4     0C 00 90 FD | 	jmp	#LR__1820
295f8                 | LR__1819
295f8     17 8D 06 F4 | 	bitl	local01, #279
295fc     17 90 66 F0 | 	shl	local03, #23
29600     48 8D 42 F5 | 	or	local01, local03
29604                 | LR__1820
29604                 | LR__1821
29604                 | LR__1822
29604                 | LR__1823
29604                 | LR__1824
29604     01 8C CE F7 | 	test	local01, #1 wz
29608     01 8E 46 55 |  if_ne	or	local02, #1
2960c     47 97 02 F6 | 	mov	local06, local02
29610     00 94 06 F6 | 	mov	local05, #0
29614     FF FF 3F FF 
29618     FF 8F 06 F1 | 	add	local02, ##2147483647
2961c     4B 8F 12 F2 | 	cmp	local02, local06 wc
29620     01 94 06 C6 |  if_b	mov	local05, #1
29624     4A 8D 02 F1 | 	add	local01, local05
29628     01 92 CE F7 | 	test	local04, #1 wz
2962c     1F 8C 26 54 |  if_ne	bith	local01, #31
29630     46 35 02 F6 | 	mov	result1, local01
29634     A8 F0 03 F6 | 	mov	ptra, fp
29638     B3 00 A0 FD | 	call	#popregs_
2963c                 | __system__pack_1346_ret
2963c     2D 00 64 FD | 	ret
29640                 | 
29640                 | __system___rxtxioctl_2096
29640     02 4C 05 F6 | 	mov	COUNT_, #2
29644     A9 00 A0 FD | 	call	#pushregs_
29648     3B 8D 02 F6 | 	mov	local01, arg02
2964c     3C 8F 02 F6 | 	mov	local02, arg03
29650     00 8D 0E F2 | 	cmp	local01, #256 wz
29654     0C 00 90 AD |  if_e	jmp	#LR__1825
29658     01 8D 0E F2 | 	cmp	local01, #257 wz
2965c     1C 00 90 AD |  if_e	jmp	#LR__1826
29660     30 00 90 FD | 	jmp	#LR__1827
29664                 | LR__1825
29664     08 A2 05 F1 | 	add	ptr___system__dat__, #8
29668     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
2966c     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
29670     47 35 62 FC | 	wrlong	result1, local02
29674     00 34 06 F6 | 	mov	result1, #0
29678     28 00 90 FD | 	jmp	#LR__1828
2967c                 | LR__1826
2967c     47 75 02 FB | 	rdlong	arg01, local02
29680     08 A2 05 F1 | 	add	ptr___system__dat__, #8
29684     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
29688     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
2968c     00 34 06 F6 | 	mov	result1, #0
29690     10 00 90 FD | 	jmp	#LR__1828
29694                 | LR__1827
29694     18 A2 05 F1 | 	add	ptr___system__dat__, #24
29698     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
2969c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
296a0     01 34 66 F6 | 	neg	result1, #1
296a4                 | LR__1828
296a4     A8 F0 03 F6 | 	mov	ptra, fp
296a8     B3 00 A0 FD | 	call	#popregs_
296ac                 | __system___rxtxioctl_2096_ret
296ac     2D 00 64 FD | 	ret
296b0                 | 
296b0                 | __system____dummy_flush_2097
296b0     00 34 06 F6 | 	mov	result1, #0
296b4                 | __system____dummy_flush_2097_ret
296b4     2D 00 64 FD | 	ret
296b8                 | 
296b8                 | __struct__s_vfs_file_t_putchar
296b8     04 4C 05 F6 | 	mov	COUNT_, #4
296bc     A9 00 A0 FD | 	call	#pushregs_
296c0     18 92 05 F1 | 	add	objptr, #24
296c4     C9 76 0A FB | 	rdlong	arg02, objptr wz
296c8     18 92 85 F1 | 	sub	objptr, #24
296cc     00 34 06 A6 |  if_e	mov	result1, #0
296d0     3C 00 90 AD |  if_e	jmp	#LR__1829
296d4     18 92 05 F1 | 	add	objptr, #24
296d8     C9 8C 02 FB | 	rdlong	local01, objptr
296dc     18 92 85 F1 | 	sub	objptr, #24
296e0     46 8F 02 FB | 	rdlong	local02, local01
296e4     04 8C 06 F1 | 	add	local01, #4
296e8     46 91 02 FB | 	rdlong	local03, local01
296ec     C9 76 02 F6 | 	mov	arg02, objptr
296f0     C9 92 02 F6 | 	mov	local04, objptr
296f4     47 93 01 F6 | 	mov	objptr, local02
296f8     2D 90 62 FD | 	call	local03
296fc     49 93 01 F6 | 	mov	objptr, local04
29700     00 34 56 F2 | 	cmps	result1, #0 wc
29704     00 8C 06 C6 |  if_b	mov	local01, #0
29708     01 8C 06 36 |  if_ae	mov	local01, #1
2970c     46 35 02 F6 | 	mov	result1, local01
29710                 | LR__1829
29710     A8 F0 03 F6 | 	mov	ptra, fp
29714     B3 00 A0 FD | 	call	#popregs_
29718                 | __struct__s_vfs_file_t_putchar_ret
29718     2D 00 64 FD | 	ret
2971c                 | 
2971c                 | __struct__s_vfs_file_t_getchar
2971c     03 4C 05 F6 | 	mov	COUNT_, #3
29720     A9 00 A0 FD | 	call	#pushregs_
29724     1C 92 05 F1 | 	add	objptr, #28
29728     C9 74 0A FB | 	rdlong	arg01, objptr wz
2972c     1C 92 85 F1 | 	sub	objptr, #28
29730     01 34 66 A6 |  if_e	neg	result1, #1
29734     2C 00 90 AD |  if_e	jmp	#LR__1830
29738                 | '         return getcf(__this);
29738     1C 92 05 F1 | 	add	objptr, #28
2973c     C9 74 02 FB | 	rdlong	arg01, objptr
29740     1C 92 85 F1 | 	sub	objptr, #28
29744     3A 8D 02 FB | 	rdlong	local01, arg01
29748     04 74 06 F1 | 	add	arg01, #4
2974c     3A 8F 02 FB | 	rdlong	local02, arg01
29750     C9 74 02 F6 | 	mov	arg01, objptr
29754     C9 90 02 F6 | 	mov	local03, objptr
29758     46 93 01 F6 | 	mov	objptr, local01
2975c     2D 8E 62 FD | 	call	local02
29760     48 93 01 F6 | 	mov	objptr, local03
29764                 | LR__1830
29764     A8 F0 03 F6 | 	mov	ptra, fp
29768     B3 00 A0 FD | 	call	#popregs_
2976c                 | __struct__s_vfs_file_t_getchar_ret
2976c     2D 00 64 FD | 	ret
29770                 | 
29770                 | __struct___bas_wrap_sender_tx
29770     03 4C 05 F6 | 	mov	COUNT_, #3
29774     A9 00 A0 FD | 	call	#pushregs_
29778     C9 8C 02 FB | 	rdlong	local01, objptr
2977c     46 8F 02 FB | 	rdlong	local02, local01
29780     04 8C 06 F1 | 	add	local01, #4
29784     46 8D 02 FB | 	rdlong	local01, local01
29788     C9 90 02 F6 | 	mov	local03, objptr
2978c     47 93 01 F6 | 	mov	objptr, local02
29790     2D 8C 62 FD | 	call	local01
29794     48 93 01 F6 | 	mov	objptr, local03
29798     01 34 06 F6 | 	mov	result1, #1
2979c     A8 F0 03 F6 | 	mov	ptra, fp
297a0     B3 00 A0 FD | 	call	#popregs_
297a4                 | __struct___bas_wrap_sender_tx_ret
297a4     2D 00 64 FD | 	ret
297a8                 | 
297a8                 | __struct___bas_wrap_sender_rx
297a8     03 4C 05 F6 | 	mov	COUNT_, #3
297ac     A9 00 A0 FD | 	call	#pushregs_
297b0     04 92 05 F1 | 	add	objptr, #4
297b4     C9 8C 02 FB | 	rdlong	local01, objptr
297b8     04 92 85 F1 | 	sub	objptr, #4
297bc     46 8F 02 FB | 	rdlong	local02, local01
297c0     04 8C 06 F1 | 	add	local01, #4
297c4     46 8D 02 FB | 	rdlong	local01, local01
297c8     C9 90 02 F6 | 	mov	local03, objptr
297cc     47 93 01 F6 | 	mov	objptr, local02
297d0     2D 8C 62 FD | 	call	local01
297d4     48 93 01 F6 | 	mov	objptr, local03
297d8     A8 F0 03 F6 | 	mov	ptra, fp
297dc     B3 00 A0 FD | 	call	#popregs_
297e0                 | __struct___bas_wrap_sender_rx_ret
297e0     2D 00 64 FD | 	ret
297e4                 | 
297e4                 | LR__1831
297e4     2F          | 	byte	"/"
297e5     00          | 	byte	0
297e6                 | LR__1832
297e6     69 6E 66    | 	byte	"inf"
297e9     00          | 	byte	0
297ea                 | LR__1833
297ea     6E 61 6E    | 	byte	"nan"
297ed     00          | 	byte	0
297ee                 | LR__1834
297ee     00          | 	byte	0
297ef     00          | 	byte	0
297f0                 | LR__1835
297f0     00          | 	byte	0
297f1     00          | 	byte	0
297f2                 | LR__1836
297f2     00          | 	byte	0
297f3     00          | 	byte	0
297f4                 | LR__1837
297f4     20 21 21 21 
297f8     20 63 6F 72 
297fc     72 75 70 74 
29800     65 64 20 68 
29804     65 61 70 3F 
29808     3F 3F 20 21 
2980c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2980f     00          | 	byte	0
29810                 | LR__1838
29810     20 21 21 21 
29814     20 6F 75 74 
29818     20 6F 66 20 
2981c     68 65 61 70 
29820     20 6D 65 6D 
29824     6F 72 79 20 
29828     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2982c     00          | 	byte	0
2982d                 | LR__1839
2982d     20 21 21 21 
29831     20 63 6F 72 
29835     72 75 70 74 
29839     65 64 20 68 
2983d     65 61 70 20 
29841     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
29845     00          | 	byte	0
29846                 | LR__1840
29846     00          | 	byte	0
29847     00          | 	byte	0
29848                 | LR__1841
29848     45 72 72 6F 
2984c     72 20 73 65 
29850     74 74 69 6E 
29854     67 20 75 70 
29858     20 4D 43 50 
2985c     32 33 30 31 
29860     37 3A 20 41 
29864     43 4B 3A 25 
29868     64 0A       | 	byte	"Error setting up MCP23017: ACK:%d",10
2986a     00          | 	byte	0
2986b                 | LR__1842
2986b     45 72 72 6F 
2986f     72 20 61 6C 
29873     6C 6F 63 61 
29877     74 69 6E 67 
2987b     20 6E 65 77 
2987f     20 6C 6F 63 
29883     6B 0A       | 	byte	"Error allocating new lock",10
29885     00          | 	byte	0
29886                 | LR__1843
29886     4D 75 73 74 
2988a     20 62 65 20 
2988e     69 6E 20 74 
29892     65 73 74 20 
29896     6D 6F 64 65 
2989a     20 74 6F 20 
2989e     72 75 6E 20 
298a2     74 65 73 74 
298a6     0A          | 	byte	"Must be in test mode to run test",10
298a7     00          | 	byte	0
298a8                 | LR__1844
298a8     44 69 73 70 
298ac     6C 61 79 20 
298b0     6E 6F 74 20 
298b4     66 6F 75 6E 
298b8     64          | 	byte	"Display not found"
298b9     00          | 	byte	0
298ba                 | LR__1845
298ba     45 72 72 6F 
298be     72 3A       | 	byte	"Error:"
298c0     00          | 	byte	0
298c1                 | LR__1846
298c1     4C 6F 61 64 
298c5     69 6E 67 20 
298c9     69 6D 61 67 
298cd     65 20       | 	byte	"Loading image "
298cf     00          | 	byte	0
298d0                 | LR__1847
298d0     2F 73 64 2F 
298d4     69 6D 67    | 	byte	"/sd/img"
298d7     00          | 	byte	0
298d8                 | LR__1848
298d8     2F 73 64 2F 
298dc     69 6D 67    | 	byte	"/sd/img"
298df     00          | 	byte	0
298e0                 | LR__1849
298e0     4C 6F 61 64 
298e4     69 6E 67 20 
298e8     69 6D 61 67 
298ec     65 20       | 	byte	"Loading image "
298ee     00          | 	byte	0
298ef                 | LR__1850
298ef     72          | 	byte	"r"
298f0     00          | 	byte	0
298f1                 | LR__1851
298f1     45 72 72 6F 
298f5     72 20 6F 70 
298f9     65 6E 69 6E 
298fd     67 20 66 69 
29901     6C 65 28    | 	byte	"Error opening file("
29904     00          | 	byte	0
29905                 | LR__1852
29905     29 3A 20    | 	byte	"): "
29908     00          | 	byte	0
29909                 | LR__1853
29909     50 4C 4C 20 
2990d     69 6E 69 74 
29911     69 61 6C 20 
29915     66 61 69 6C 
29919     21          | 	byte	"PLL initial fail!"
2991a     00          | 	byte	0
2991b                 | LR__1854
2991b     53 44 52 41 
2991f     4D 20 69 6E 
29923     69 74 69 61 
29927     6C 20 66 61 
2992b     69 6C 21    | 	byte	"SDRAM initial fail!"
2992e     00          | 	byte	0
2992f                 | LR__1855
2992f     45 72 72 6F 
29933     72 3A 20 6A 
29937     73 6F 6E 5F 
2993b     63 72 65 61 
2993f     74 65 57 69 
29943     74 68 50 6F 
29947     6F 6C 3A 20 
2994b     69 6E 76 61 
2994f     6C 69 64 20 
29953     6A 73 6F 6E 
29957     20 73 74 72 
2995b     69 6E 67 28 
2995f     6D 69 73 73 
29963     69 6E 67 20 
29967     6F 70 65 6E 
2996b     69 6E 67 20 
2996f     7B 2F 5B 2E 
29973     0A          | 	byte	"Error: json_createWithPool: invalid json string(missing opening {/[.",10
29974     00          | 	byte	0
29975                 | LR__1856
29975     45 72 72 6F 
29979     72 3A 20 6A 
2997d     73 6F 6E 5F 
29981     63 72 65 61 
29985     74 65 57 69 
29989     74 68 50 6F 
2998d     6F 6C 3A 20 
29991     69 6E 76 61 
29995     6C 69 64 20 
29999     6A 73 6F 6E 
2999d     20 73 74 72 
299a1     69 6E 67 2E 
299a5     0A          | 	byte	"Error: json_createWithPool: invalid json string.",10
299a6     00          | 	byte	0
299a7                 | LR__1857
299a7     00          | 	byte	0
299a8     00          | 	byte	0
299a9                 | LR__1858
299a9     00          | 	byte	0
299aa     00          | 	byte	0
299ab                 | LR__1859
299ab     00          | 	byte	0
299ac     00          | 	byte	0
299ad                 | LR__1860
299ad     00          | 	byte	0
299ae     00          | 	byte	0
299af                 | LR__1861
299af     77          | 	byte	"w"
299b0     00          | 	byte	0
299b1                 | LR__1862
299b1     45 72 72 6F 
299b5     72 20 6F 70 
299b9     65 6E 69 6E 
299bd     67 20 66 69 
299c1     6C 65 3A    | 	byte	"Error opening file:"
299c4     00          | 	byte	0
299c5                 | LR__1863
299c5     7B          | 	byte	"{"
299c6     00          | 	byte	0
299c7                 | LR__1864
299c7     4E 61 6D 65 | 	byte	"Name"
299cb     00          | 	byte	0
299cc                 | LR__1865
299cc     77 72 69 74 
299d0     69 6E 67 20 
299d4     6E 61 6D 65 
299d8     3A 20       | 	byte	"writing name: "
299da     00          | 	byte	0
299db                 | LR__1866
299db     2C          | 	byte	","
299dc     00          | 	byte	0
299dd                 | LR__1867
299dd     4E 75 6D 62 
299e1     65 72       | 	byte	"Number"
299e3     00          | 	byte	0
299e4                 | LR__1868
299e4     2C          | 	byte	","
299e5     00          | 	byte	0
299e6                 | LR__1869
299e6     2C          | 	byte	","
299e7     00          | 	byte	0
299e8                 | LR__1870
299e8     7D          | 	byte	"}"
299e9     00          | 	byte	0
299ea                 | LR__1871
299ea     77          | 	byte	"w"
299eb     00          | 	byte	0
299ec                 | LR__1872
299ec     45 72 72 6F 
299f0     72 20 6F 70 
299f4     65 6E 69 6E 
299f8     67 20 66 69 
299fc     6C 65 3A 20 | 	byte	"Error opening file: "
29a00     00          | 	byte	0
29a01                 | LR__1873
29a01     7B          | 	byte	"{"
29a02     00          | 	byte	0
29a03                 | LR__1874
29a03     4E 61 6D 65 | 	byte	"Name"
29a07     00          | 	byte	0
29a08                 | LR__1875
29a08     53 61 6D 70 
29a0c     6C 65 20 53 
29a10     65 72 69 61 
29a14     6C 20 4E 75 
29a18     6D 62 65 72 | 	byte	"Sample Serial Number"
29a1c     00          | 	byte	0
29a1d                 | LR__1876
29a1d     2C          | 	byte	","
29a1e     00          | 	byte	0
29a1f                 | LR__1877
29a1f     4D 61 63 68 
29a23     69 6E 65 20 
29a27     50 72 6F 66 
29a2b     69 6C 65 20 
29a2f     4E 61 6D 65 | 	byte	"Machine Profile Name"
29a33     00          | 	byte	0
29a34                 | LR__1878
29a34     2C          | 	byte	","
29a35     00          | 	byte	0
29a36                 | LR__1879
29a36     53 61 6D 70 
29a3a     6C 65 20 50 
29a3e     72 6F 66 69 
29a42     6C 65 20 4E 
29a46     61 6D 65    | 	byte	"Sample Profile Name"
29a49     00          | 	byte	0
29a4a                 | LR__1880
29a4a     2C          | 	byte	","
29a4b     00          | 	byte	0
29a4c                 | LR__1881
29a4c     4D 6F 74 69 
29a50     6F 6E 20 50 
29a54     72 6F 66 69 
29a58     6C 65 20 4E 
29a5c     61 6D 65    | 	byte	"Motion Profile Name"
29a5f     00          | 	byte	0
29a60                 | LR__1882
29a60     2C          | 	byte	","
29a61     00          | 	byte	0
29a62                 | LR__1883
29a62     43 6F 6D 6D 
29a66     65 6E 74    | 	byte	"Comment"
29a69     00          | 	byte	0
29a6a                 | LR__1884
29a6a     7D          | 	byte	"}"
29a6b     00          | 	byte	0
29a6c                 | LR__1885
29a6c     77          | 	byte	"w"
29a6d     00          | 	byte	0
29a6e                 | LR__1886
29a6e     45 72 72 6F 
29a72     72 20 6F 70 
29a76     65 6E 69 6E 
29a7a     67 20 66 69 
29a7e     6C 65 3A 20 | 	byte	"Error opening file: "
29a82     00          | 	byte	0
29a83                 | LR__1887
29a83     7B          | 	byte	"{"
29a84     00          | 	byte	0
29a85                 | LR__1888
29a85     4E 61 6D 65 | 	byte	"Name"
29a89     00          | 	byte	0
29a8a                 | LR__1889
29a8a     2C          | 	byte	","
29a8b     00          | 	byte	0
29a8c                 | LR__1890
29a8c     4E 75 6D 62 
29a90     65 72       | 	byte	"Number"
29a92     00          | 	byte	0
29a93                 | LR__1891
29a93     2C          | 	byte	","
29a94     00          | 	byte	0
29a95                 | LR__1892
29a95     22 4D 6F 74 
29a99     69 6F 6E 20 
29a9d     53 65 74 73 
29aa1     22 3A 5B    | 	byte	34,"Motion Sets",34,":["
29aa4     00          | 	byte	0
29aa5                 | LR__1893
29aa5     77 72 69 74 
29aa9     69 6E 67 20 
29aad     6D 6F 74 69 
29ab1     6F 6E 20 73 
29ab5     65 74 3A 20 | 	byte	"writing motion set: "
29ab9     00          | 	byte	0
29aba                 | LR__1894
29aba     22 25 73 22 | 	byte	34,"%s",34
29abe     00          | 	byte	0
29abf                 | LR__1895
29abf     2C          | 	byte	","
29ac0     00          | 	byte	0
29ac1                 | LR__1896
29ac1     5D 7D       | 	byte	"]}"
29ac3     00          | 	byte	0
29ac4                 | LR__1897
29ac4     77          | 	byte	"w"
29ac5     00          | 	byte	0
29ac6                 | LR__1898
29ac6     45 72 72 6F 
29aca     72 20 6F 70 
29ace     65 6E 69 6E 
29ad2     67 20 66 69 
29ad6     6C 65 3A 20 | 	byte	"Error opening file: "
29ada     00          | 	byte	0
29adb                 | LR__1899
29adb     7B          | 	byte	"{"
29adc     00          | 	byte	0
29add                 | LR__1900
29add     4E 61 6D 65 | 	byte	"Name"
29ae1     00          | 	byte	0
29ae2                 | LR__1901
29ae2     2C          | 	byte	","
29ae3     00          | 	byte	0
29ae4                 | LR__1902
29ae4     4E 75 6D 62 
29ae8     65 72       | 	byte	"Number"
29aea     00          | 	byte	0
29aeb                 | LR__1903
29aeb     2C          | 	byte	","
29aec     00          | 	byte	0
29aed                 | LR__1904
29aed     54 79 70 65 | 	byte	"Type"
29af1     00          | 	byte	0
29af2                 | LR__1905
29af2     2C          | 	byte	","
29af3     00          | 	byte	0
29af4                 | LR__1906
29af4     45 78 65 63 
29af8     75 74 69 6F 
29afc     6E 73       | 	byte	"Executions"
29afe     00          | 	byte	0
29aff                 | LR__1907
29aff     2C          | 	byte	","
29b00     00          | 	byte	0
29b01                 | LR__1908
29b01     22 51 75 61 
29b05     72 74 65 74 
29b09     73 22 3A 5B | 	byte	34,"Quartets",34,":["
29b0d     00          | 	byte	0
29b0e                 | LR__1909
29b0e     22 25 73 22 | 	byte	34,"%s",34
29b12     00          | 	byte	0
29b13                 | LR__1910
29b13     2C          | 	byte	","
29b14     00          | 	byte	0
29b15                 | LR__1911
29b15     5D 7D       | 	byte	"]}"
29b17     00          | 	byte	0
29b18                 | LR__1912
29b18     77          | 	byte	"w"
29b19     00          | 	byte	0
29b1a                 | LR__1913
29b1a     45 72 72 6F 
29b1e     72 20 6F 70 
29b22     65 6E 69 6E 
29b26     67 20 66 69 
29b2a     6C 65 3A 20 | 	byte	"Error opening file: "
29b2e     00          | 	byte	0
29b2f                 | LR__1914
29b2f     7B          | 	byte	"{"
29b30     00          | 	byte	0
29b31                 | LR__1915
29b31     4E 61 6D 65 | 	byte	"Name"
29b35     00          | 	byte	0
29b36                 | LR__1916
29b36     2C          | 	byte	","
29b37     00          | 	byte	0
29b38                 | LR__1917
29b38     46 75 6E 63 
29b3c     74 69 6F 6E | 	byte	"Function"
29b40     00          | 	byte	0
29b41                 | LR__1918
29b41     2C          | 	byte	","
29b42     00          | 	byte	0
29b43                 | LR__1919
29b43     22 50 61 72 
29b47     61 6D 65 74 
29b4b     65 72 73 22 
29b4f     3A 5B       | 	byte	34,"Parameters",34,":["
29b51     00          | 	byte	0
29b52                 | LR__1920
29b52     25 66       | 	byte	"%f"
29b54     00          | 	byte	0
29b55                 | LR__1921
29b55     2C          | 	byte	","
29b56     00          | 	byte	0
29b57                 | LR__1922
29b57     5D 2C       | 	byte	"],"
29b59     00          | 	byte	0
29b5a                 | LR__1923
29b5a     44 77 65 6C 
29b5e     6C          | 	byte	"Dwell"
29b5f     00          | 	byte	0
29b60                 | LR__1924
29b60     7D          | 	byte	"}"
29b61     00          | 	byte	0
29b62                 | LR__1925
29b62     72          | 	byte	"r"
29b63     00          | 	byte	0
29b64                 | LR__1926
29b64     45 72 72 6F 
29b68     72 20 6F 70 
29b6c     65 6E 69 6E 
29b70     67 20 66 69 
29b74     6C 65 3A    | 	byte	"Error opening file:"
29b77     00          | 	byte	0
29b78                 | LR__1927
29b78     45 72 72 6F 
29b7c     72 20 61 6C 
29b80     6C 6F 63 61 
29b84     74 69 6E 67 
29b88     20 6D 65 6D 
29b8c     6F 72 79    | 	byte	"Error allocating memory"
29b8f     00          | 	byte	0
29b90                 | LR__1928
29b90     45 72 72 6F 
29b94     72 2C 20 74 
29b98     68 65 20 20 
29b9c     4A 53 4F 4E 
29ba0     20 63 61 6E 
29ba4     6E 6F 74 20 
29ba8     62 65 20 70 
29bac     61 72 73 65 
29bb0     64 2E       | 	byte	"Error, the  JSON cannot be parsed."
29bb2     00          | 	byte	0
29bb3                 | LR__1929
29bb3     4E 61 6D 65 | 	byte	"Name"
29bb7     00          | 	byte	0
29bb8                 | LR__1930
29bb8     4E 75 6D 62 
29bbc     65 72       | 	byte	"Number"
29bbe     00          | 	byte	0
29bbf                 | LR__1931
29bbf     43 6F 6E 66 
29bc3     69 67 75 72 
29bc7     61 74 69 6F 
29bcb     6E          | 	byte	"Configuration"
29bcc     00          | 	byte	0
29bcd                 | LR__1932
29bcd     45 72 72 6F 
29bd1     72 2C 20 74 
29bd5     68 65 20 20 
29bd9     4D 61 63 68 
29bdd     69 6E 65 20 
29be1     43 6F 6E 66 
29be5     69 67 75 72 
29be9     61 74 69 6F 
29bed     6E 20 20 70 
29bf1     72 6F 70 65 
29bf5     72 74 79 20 
29bf9     69 73 20 6E 
29bfd     6F 74 20 66 
29c01     6F 75 6E 64 
29c05     2E          | 	byte	"Error, the  Machine Configuration  property is not found."
29c06     00          | 	byte	0
29c07                 | LR__1933
29c07     50 65 72 66 
29c0b     6F 72 6D 61 
29c0f     6E 63 65    | 	byte	"Performance"
29c12     00          | 	byte	0
29c13                 | LR__1934
29c13     45 72 72 6F 
29c17     72 2C 20 74 
29c1b     68 65 20 20 
29c1f     4D 61 63 68 
29c23     69 6E 65 20 
29c27     50 72 6F 66 
29c2b     69 6C 65 20 
29c2f     20 70 72 6F 
29c33     70 65 72 74 
29c37     79 20 69 73 
29c3b     20 6E 6F 74 
29c3f     20 66 6F 75 
29c43     6E 64 2E    | 	byte	"Error, the  Machine Profile  property is not found."
29c46     00          | 	byte	0
29c47                 | LR__1935
29c47     72          | 	byte	"r"
29c48     00          | 	byte	0
29c49                 | LR__1936
29c49     45 72 72 6F 
29c4d     72 20 6F 70 
29c51     65 6E 69 6E 
29c55     67 20 66 69 
29c59     6C 65 3A    | 	byte	"Error opening file:"
29c5c     00          | 	byte	0
29c5d                 | LR__1937
29c5d     4E 61 6D 65 | 	byte	"Name"
29c61     00          | 	byte	0
29c62                 | LR__1938
29c62     4E 75 6D 62 
29c66     65 72       | 	byte	"Number"
29c68     00          | 	byte	0
29c69                 | LR__1939
29c69     4C 65 6E 67 
29c6d     74 68       | 	byte	"Length"
29c6f     00          | 	byte	0
29c70                 | LR__1940
29c70     53 74 72 65 
29c74     74 63 68 20 
29c78     4D 61 78    | 	byte	"Stretch Max"
29c7b     00          | 	byte	0
29c7c                 | LR__1941
29c7c     4D 61 78 20 
29c80     56 65 6C 6F 
29c84     63 69 74 79 | 	byte	"Max Velocity"
29c88     00          | 	byte	0
29c89                 | LR__1942
29c89     4D 61 78 20 
29c8d     41 63 63 65 
29c91     6C 65 72 61 
29c95     74 69 6F 6E | 	byte	"Max Acceleration"
29c99     00          | 	byte	0
29c9a                 | LR__1943
29c9a     4D 61 78 20 
29c9e     4A 65 72 6B | 	byte	"Max Jerk"
29ca2     00          | 	byte	0
29ca3                 | LR__1944
29ca3     4D 61 78 20 
29ca7     46 6F 72 63 
29cab     65 20 54 65 
29caf     6E 73 69 6C 
29cb3     65          | 	byte	"Max Force Tensile"
29cb4     00          | 	byte	0
29cb5                 | LR__1945
29cb5     4D 61 78 20 
29cb9     46 6F 72 63 
29cbd     65 20 43 6F 
29cc1     6D 70 72 65 
29cc5     73 73 69 6F 
29cc9     6E          | 	byte	"Max Force Compression"
29cca     00          | 	byte	0
29ccb                 | LR__1946
29ccb     62 65 66 6F 
29ccf     72 65 20 6F 
29cd3     70 65 6E    | 	byte	"before open"
29cd6     00          | 	byte	0
29cd7                 | LR__1947
29cd7     72          | 	byte	"r"
29cd8     00          | 	byte	0
29cd9                 | LR__1948
29cd9     61 66 74 65 
29cdd     72 20 6F 70 
29ce1     65 6E       | 	byte	"after open"
29ce3     00          | 	byte	0
29ce4                 | LR__1949
29ce4     45 72 72 6F 
29ce8     72 20 6F 70 
29cec     65 6E 69 6E 
29cf0     67 20 66 69 
29cf4     6C 65 3A    | 	byte	"Error opening file:"
29cf7     00          | 	byte	0
29cf8                 | LR__1950
29cf8     62 65 66 6F 
29cfc     72 65 20 72 
29d00     65 61 64    | 	byte	"before read"
29d03     00          | 	byte	0
29d04                 | LR__1951
29d04     4E 61 6D 65 | 	byte	"Name"
29d08     00          | 	byte	0
29d09                 | LR__1952
29d09     53 61 6D 70 
29d0d     6C 65 20 53 
29d11     65 72 69 61 
29d15     6C 20 4E 75 
29d19     6D 62 65 72 | 	byte	"Sample Serial Number"
29d1d     00          | 	byte	0
29d1e                 | LR__1953
29d1e     4D 61 63 68 
29d22     69 6E 65 20 
29d26     50 72 6F 66 
29d2a     69 6C 65 20 
29d2e     4E 61 6D 65 | 	byte	"Machine Profile Name"
29d32     00          | 	byte	0
29d33                 | LR__1954
29d33     53 61 6D 70 
29d37     6C 65 20 50 
29d3b     72 6F 66 69 
29d3f     6C 65 20 4E 
29d43     61 6D 65    | 	byte	"Sample Profile Name"
29d46     00          | 	byte	0
29d47                 | LR__1955
29d47     4D 6F 74 69 
29d4b     6F 6E 20 50 
29d4f     72 6F 66 69 
29d53     6C 65 20 4E 
29d57     61 6D 65    | 	byte	"Motion Profile Name"
29d5a     00          | 	byte	0
29d5b                 | LR__1956
29d5b     72          | 	byte	"r"
29d5c     00          | 	byte	0
29d5d                 | LR__1957
29d5d     45 72 72 6F 
29d61     72 20 6F 70 
29d65     65 6E 69 6E 
29d69     67 20 66 69 
29d6d     6C 65 3A    | 	byte	"Error opening file:"
29d70     00          | 	byte	0
29d71                 | LR__1958
29d71     62 65 66 6F 
29d75     72 65 20 72 
29d79     65 61 64    | 	byte	"before read"
29d7c     00          | 	byte	0
29d7d                 | LR__1959
29d7d     4E 61 6D 65 | 	byte	"Name"
29d81     00          | 	byte	0
29d82                 | LR__1960
29d82     4E 75 6D 62 
29d86     65 72       | 	byte	"Number"
29d88     00          | 	byte	0
29d89                 | LR__1961
29d89     4D 6F 74 69 
29d8d     6F 6E 20 53 
29d91     65 74 73    | 	byte	"Motion Sets"
29d94     00          | 	byte	0
29d95                 | LR__1962
29d95     72 65 61 64 
29d99     69 6E 67 20 
29d9d     6D 6F 74 69 
29da1     6F 6E 20 70 
29da5     72 6F 66 69 
29da9     6C 65 3A 20 | 	byte	"reading motion profile: "
29dad     00          | 	byte	0
29dae                 | LR__1963
29dae     72          | 	byte	"r"
29daf     00          | 	byte	0
29db0                 | LR__1964
29db0     45 72 72 6F 
29db4     72 20 6F 70 
29db8     65 6E 69 6E 
29dbc     67 20 66 69 
29dc0     6C 65 3A    | 	byte	"Error opening file:"
29dc3     00          | 	byte	0
29dc4                 | LR__1965
29dc4     4E 61 6D 65 | 	byte	"Name"
29dc8     00          | 	byte	0
29dc9                 | LR__1966
29dc9     4E 75 6D 62 
29dcd     65 72       | 	byte	"Number"
29dcf     00          | 	byte	0
29dd0                 | LR__1967
29dd0     54 79 70 65 | 	byte	"Type"
29dd4     00          | 	byte	0
29dd5                 | LR__1968
29dd5     45 78 65 63 
29dd9     75 74 69 6F 
29ddd     6E 73       | 	byte	"Executions"
29ddf     00          | 	byte	0
29de0                 | LR__1969
29de0     51 75 61 72 
29de4     74 65 74 73 | 	byte	"Quartets"
29de8     00          | 	byte	0
29de9                 | LR__1970
29de9     72 65 61 64 
29ded     69 6E 67 20 
29df1     6D 6F 74 69 
29df5     6F 6E 20 73 
29df9     65 74 3A 20 | 	byte	"reading motion set: "
29dfd     00          | 	byte	0
29dfe                 | LR__1971
29dfe     4F 70 65 6E 
29e02     69 6E 67 20 
29e06     66 69 6C 65 | 	byte	"Opening file"
29e0a     00          | 	byte	0
29e0b                 | LR__1972
29e0b     72          | 	byte	"r"
29e0c     00          | 	byte	0
29e0d                 | LR__1973
29e0d     45 72 72 6F 
29e11     72 20 6F 70 
29e15     65 6E 69 6E 
29e19     67 20 66 69 
29e1d     6C 65 3A    | 	byte	"Error opening file:"
29e20     00          | 	byte	0
29e21                 | LR__1974
29e21     66 69 6C 65 
29e25     20 6F 70 65 
29e29     6E 65 64    | 	byte	"file opened"
29e2c     00          | 	byte	0
29e2d                 | LR__1975
29e2d     70 61 72 73 
29e31     69 6E 67 20 
29e35     6E 61 6D 65 | 	byte	"parsing name"
29e39     00          | 	byte	0
29e3a                 | LR__1976
29e3a     4E 61 6D 65 | 	byte	"Name"
29e3e     00          | 	byte	0
29e3f                 | LR__1977
29e3f     70 61 72 73 
29e43     69 6E 67 20 
29e47     46 75 6E 63 
29e4b     74 69 6F 6E | 	byte	"parsing Function"
29e4f     00          | 	byte	0
29e50                 | LR__1978
29e50     46 75 6E 63 
29e54     74 69 6F 6E | 	byte	"Function"
29e58     00          | 	byte	0
29e59                 | LR__1979
29e59     70 61 72 73 
29e5d     69 6E 67 20 
29e61     50 61 72 61 
29e65     6D 65 74 65 
29e69     72 73       | 	byte	"parsing Parameters"
29e6b     00          | 	byte	0
29e6c                 | LR__1980
29e6c     50 61 72 61 
29e70     6D 65 74 65 
29e74     72 73       | 	byte	"Parameters"
29e76     00          | 	byte	0
29e77                 | LR__1981
29e77     70 61 72 61 
29e7b     6D 6F 75 74 
29e7f     65 72 3A    | 	byte	"paramouter:"
29e82     00          | 	byte	0
29e83                 | LR__1982
29e83     20          | 	byte	" "
29e84     00          | 	byte	0
29e85                 | LR__1983
29e85     70 61 72 73 
29e89     69 6E 67 20 
29e8d     44 77 65 6C 
29e91     6C          | 	byte	"parsing Dwell"
29e92     00          | 	byte	0
29e93                 | LR__1984
29e93     44 77 65 6C 
29e97     6C          | 	byte	"Dwell"
29e98     00          | 	byte	0
29e99                 | LR__1985
29e99     64 6F 6E 65 | 	byte	"done"
29e9d     00          | 	byte	0
29e9e                 | LR__1986
29e9e     4E 61 6D 65 
29ea2     3A          | 	byte	"Name:"
29ea3     00          | 	byte	0
29ea4                 | LR__1987
29ea4     4E 75 6D 62 
29ea8     65 72 3A    | 	byte	"Number:"
29eab     00          | 	byte	0
29eac                 | LR__1988
29eac     4E 61 6D 65 
29eb0     3A          | 	byte	"Name:"
29eb1     00          | 	byte	0
29eb2                 | LR__1989
29eb2     4E 75 6D 62 
29eb6     65 72 3A    | 	byte	"Number:"
29eb9     00          | 	byte	0
29eba                 | LR__1990
29eba     53 65 74 73 
29ebe     3A          | 	byte	"Sets:"
29ebf     00          | 	byte	0
29ec0                 | LR__1991
29ec0     46 6F 72 63 
29ec4     65 20 67 61 
29ec8     75 67 65 20 
29ecc     6E 6F 74 20 
29ed0     72 65 73 70 
29ed4     6F 6E 64 69 
29ed8     6E 67       | 	byte	"Force gauge not responding"
29eda     00          | 	byte	0
29edb                 | LR__1992
29edb     45 72 72 6F 
29edf     72 3A 20 54 
29ee3     6F 6F 20 6D 
29ee7     61 6E 79 20 
29eeb     63 68 69 6C 
29eef     64 72 65 6E | 	byte	"Error: Too many children"
29ef3     00          | 	byte	0
29ef4                 | LR__1993
29ef4     00          | 	byte	0
29ef5     00          | 	byte	0
29ef6                 | LR__1994
29ef6     6B 65 79 62 
29efa     6F 61 72 64 
29efe     20 72 75 6E 
29f02     6E 69 6E 67 
29f06     3A          | 	byte	"keyboard running:"
29f07     00          | 	byte	0
29f08                 | LR__1995
29f08     00          | 	byte	0
29f09     00          | 	byte	0
29f0a                 | LR__1996
29f0a     53 74 61 72 
29f0e     74 69 6E 67 
29f12     20 6E 61 76 
29f16     69 67 61 74 
29f1a     69 6F 6E 20 
29f1e     70 61 67 65 | 	byte	"Starting navigation page"
29f22     00          | 	byte	0
29f23                 | LR__1997
29f23     64 6F 6E 65 
29f27     20 64 72 61 
29f2b     77 69 6E 67 
29f2f     20 70 61 67 
29f33     65          | 	byte	"done drawing page"
29f34     00          | 	byte	0
29f35                 | LR__1998
29f35     2D 2D 2D 2D 
29f39     2D 2D 2D 2D 
29f3d     2D 2D 2D 2D 
29f41     2D 2D 2D 2D 
29f45     2D          | 	byte	"-----------------"
29f46     00          | 	byte	0
29f47                 | LR__1999
29f47     54 45 4D 50 
29f4b     20 44 49 53 
29f4f     50 4C 41 59 
29f53     3A 20       | 	byte	"TEMP DISPLAY: "
29f55     00          | 	byte	0
29f56                 | LR__2000
29f56     2D 2D 2D 2D 
29f5a     2D 2D 2D 2D 
29f5e     2D 2D 2D 2D 
29f62     2D 2D 2D 2D 
29f66     2D          | 	byte	"-----------------"
29f67     00          | 	byte	0
29f68                 | LR__2001
29f68     25 2E 32 66 | 	byte	"%.2f"
29f6c     00          | 	byte	0
29f6d                 | LR__2002
29f6d     25 2E 32 66 | 	byte	"%.2f"
29f71     00          | 	byte	0
29f72                 | LR__2003
29f72     50 6F 73 69 
29f76     74 69 6F 6E | 	byte	"Position"
29f7a     00          | 	byte	0
29f7b                 | LR__2004
29f7b     6D 6D       | 	byte	"mm"
29f7d     00          | 	byte	0
29f7e                 | LR__2005
29f7e     46 6F 72 63 
29f82     65          | 	byte	"Force"
29f83     00          | 	byte	0
29f84                 | LR__2006
29f84     4E          | 	byte	"N"
29f85     00          | 	byte	0
29f86                 | LR__2007
29f86     25 30 2E 33 
29f8a     66 6D 6D    | 	byte	"%0.3fmm"
29f8d     00          | 	byte	0
29f8e                 | LR__2008
29f8e     25 30 2E 33 
29f92     66 4E       | 	byte	"%0.3fN"
29f94     00          | 	byte	0
29f95                 | LR__2009
29f95     45 72 72 6F 
29f99     72 3A 20    | 	byte	"Error: "
29f9c     00          | 	byte	0
29f9d                 | LR__2010
29f9d     46 69 6C 65 
29fa1     3A 20       | 	byte	"File: "
29fa3     00          | 	byte	0
29fa4                 | LR__2011
29fa4     73 65 6C 65 
29fa8     63 74 69 6F 
29fac     6E 3A 20    | 	byte	"selection: "
29faf     00          | 	byte	0
29fb0                 | LR__2012
29fb0     64 6F 6E 65 
29fb4     20 64 72 61 
29fb8     77 69 6E 67 | 	byte	"done drawing"
29fbc     00          | 	byte	0
29fbd                 | LR__2013
29fbd     00          | 	byte	0
29fbe     00          | 	byte	0
29fbf                 | LR__2014
29fbf     2F          | 	byte	"/"
29fc0     00          | 	byte	0
29fc1                 | LR__2015
29fc1     50 61 74 68 
29fc5     3A          | 	byte	"Path:"
29fc6     00          | 	byte	0
29fc7                 | LR__2016
29fc7     61 64 64 69 
29fcb     6E 67 20 6F 
29fcf     70 74 69 6F 
29fd3     6E          | 	byte	"adding option"
29fd4     00          | 	byte	0
29fd5                 | LR__2017
29fd5     64 6F 6E 65 
29fd9     20 61 64 64 
29fdd     69 6E 67 20 
29fe1     6F 70 74 69 
29fe5     6F 6E       | 	byte	"done adding option"
29fe7     00          | 	byte	0
29fe8                 | LR__2018
29fe8     73 65 6C 65 
29fec     63 74 65 64 
29ff0     3A 20       | 	byte	"selected: "
29ff2     00          | 	byte	0
29ff3                 | LR__2019
29ff3     4C 69 6E 65 | 	byte	"Line"
29ff7     00          | 	byte	0
29ff8                 | LR__2020
29ff8     64 69 73 74 
29ffc     61 6E 63 65 | 	byte	"distance"
2a000     00          | 	byte	0
2a001                 | LR__2021
2a001     73 74 72 61 
2a005     69 6E 20 72 
2a009     61 74 65    | 	byte	"strain rate"
2a00c     00          | 	byte	0
2a00d                 | LR__2022
2a00d     53 69 67 6D 
2a011     6F 69 64    | 	byte	"Sigmoid"
2a014     00          | 	byte	0
2a015                 | LR__2023
2a015     64 69 73 74 
2a019     61 6E 63 65 | 	byte	"distance"
2a01d     00          | 	byte	0
2a01e                 | LR__2024
2a01e     73 74 72 61 
2a022     69 6E 20 72 
2a026     61 74 65    | 	byte	"strain rate"
2a029     00          | 	byte	0
2a02a                 | LR__2025
2a02a     65 72 72 6F 
2a02e     72          | 	byte	"error"
2a02f     00          | 	byte	0
2a030                 | LR__2026
2a030     00          | 	byte	0
2a031     00          | 	byte	0
2a032                 | LR__2027
2a032     2F 73 64    | 	byte	"/sd"
2a035     00          | 	byte	0
2a036                 | LR__2028
2a036     00          | 	byte	0
2a037     00          | 	byte	0
2a038                 | LR__2029
2a038     50 6F 73 69 
2a03c     74 69 6F 6E 
2a040     20 56 73 2E 
2a044     20 54 69 6D 
2a048     65          | 	byte	"Position Vs. Time"
2a049     00          | 	byte	0
2a04a                 | LR__2030
2a04a     6D 6D       | 	byte	"mm"
2a04c     00          | 	byte	0
2a04d                 | LR__2031
2a04d     00          | 	byte	0
2a04e     00          | 	byte	0
2a04f                 | LR__2032
2a04f     54 65 73 74 
2a053     20 70 72 6F 
2a057     66 69 6C 65 
2a05b     20 70 61 67 
2a05f     65 20 72 75 
2a063     6E 6E 69 6E 
2a067     67          | 	byte	"Test profile page running"
2a068     00          | 	byte	0
2a069                 | LR__2033
2a069     4D 6F 64 65 
2a06d     3A          | 	byte	"Mode:"
2a06e     00          | 	byte	0
2a06f                 | LR__2034
2a06f     51 75 61 72 
2a073     74 65 74    | 	byte	"Quartet"
2a076     00          | 	byte	0
2a077                 | LR__2035
2a077     51 75 61 72 
2a07b     74 65 74 20 
2a07f     6E 61 6D 65 
2a083     3A          | 	byte	"Quartet name:"
2a084     00          | 	byte	0
2a085                 | LR__2036
2a085     51 75 61 72 
2a089     74 65 74    | 	byte	"Quartet"
2a08c     00          | 	byte	0
2a08d                 | LR__2037
2a08d     4E 61 6D 65 
2a091     3A 20 25 73 | 	byte	"Name: %s"
2a095     00          | 	byte	0
2a096                 | LR__2038
2a096     4E 61 6D 65 
2a09a     3A          | 	byte	"Name:"
2a09b     00          | 	byte	0
2a09c                 | LR__2039
2a09c     46 75 6E 63 
2a0a0     74 69 6F 6E 
2a0a4     3A 20 25 73 | 	byte	"Function: %s"
2a0a8     00          | 	byte	0
2a0a9                 | LR__2040
2a0a9     20 20 20 20 
2a0ad     25 73 3A 20 
2a0b1     25 30 2E 33 
2a0b5     66          | 	byte	"    %s: %0.3f"
2a0b6     00          | 	byte	0
2a0b7                 | LR__2041
2a0b7     44 77 65 6C 
2a0bb     6C 20 28 6D 
2a0bf     73 29 3A 20 
2a0c3     25 30 2E 33 
2a0c7     66          | 	byte	"Dwell (ms): %0.3f"
2a0c8     00          | 	byte	0
2a0c9                 | LR__2042
2a0c9     53 65 74    | 	byte	"Set"
2a0cc     00          | 	byte	0
2a0cd                 | LR__2043
2a0cd     53 65 74    | 	byte	"Set"
2a0d0     00          | 	byte	0
2a0d1                 | LR__2044
2a0d1     4E 61 6D 65 
2a0d5     3A 20 25 73 | 	byte	"Name: %s"
2a0d9     00          | 	byte	0
2a0da                 | LR__2045
2a0da     4E 75 6D 62 
2a0de     65 72 3A 20 
2a0e2     25 64       | 	byte	"Number: %d"
2a0e4     00          | 	byte	0
2a0e5                 | LR__2046
2a0e5     54 79 70 65 
2a0e9     3A 20 25 73 | 	byte	"Type: %s"
2a0ed     00          | 	byte	0
2a0ee                 | LR__2047
2a0ee     45 78 65 63 
2a0f2     75 74 69 6F 
2a0f6     6E 73 3A 20 
2a0fa     25 64       | 	byte	"Executions: %d"
2a0fc     00          | 	byte	0
2a0fd                 | LR__2048
2a0fd     25 73       | 	byte	"%s"
2a0ff     00          | 	byte	0
2a100                 | LR__2049
2a100     4E 65 77 20 
2a104     51 75 61 72 
2a108     74 65 74    | 	byte	"New Quartet"
2a10b     00          | 	byte	0
2a10c                 | LR__2050
2a10c     53 74 61 72 
2a110     74 69 6E 67 
2a114     20 4D 41 44 
2a118     20 50 32    | 	byte	"Starting MAD P2"
2a11b     00          | 	byte	0
2a11c                 | LR__2051
2a11c     46 6C 61 73 
2a120     68 20 69 6E 
2a124     69 74       | 	byte	"Flash init"
2a126     00          | 	byte	0
2a127                 | LR__2052
2a127     67 65 74 74 
2a12b     69 6E 67 20 
2a12f     69 64       | 	byte	"getting id"
2a131     00          | 	byte	0
2a132                 | LR__2053
2a132     20 57 32 35 
2a136     51 78 78 20 
2a13a     49 44 20 69 
2a13e     73 20 3A 20 | 	byte	" W25Qxx ID is : "
2a142     00          | 	byte	0
2a143                 | LR__2054
2a143     30 78 25 30 
2a147     32 58 20    | 	byte	"0x%02X "
2a14a     00          | 	byte	0
2a14b                 | LR__2055
2a14b     0D          | 	byte	13
2a14c     00          | 	byte	0
2a14d                 | LR__2056
2a14d     51 53 50 49 
2a151     20 52 65 61 
2a155     64 20 44 61 
2a159     74 61 20 3A 
2a15d     20 0D       | 	byte	"QSPI Read Data : ",13
2a15f     00          | 	byte	0
2a160                 | LR__2057
2a160     30 78 25 30 
2a164     32 58 20 20 | 	byte	"0x%02X  "
2a168     00          | 	byte	0
2a169                 | LR__2058
2a169     0D          | 	byte	13
2a16a     00          | 	byte	0
2a16b                 | LR__2059
2a16b     0D          | 	byte	13
2a16c     00          | 	byte	0
2a16d                 | LR__2060
2a16d     52 65 61 64 
2a171     44 61 74 61 
2a175     3A          | 	byte	"ReadData:"
2a176     00          | 	byte	0
2a177                 | LR__2061
2a177     2C          | 	byte	","
2a178     00          | 	byte	0
2a179                 | LR__2062
2a179     2C          | 	byte	","
2a17a     00          | 	byte	0
2a17b                 | LR__2063
2a17b     45 72 72 6F 
2a17f     72 20 73 74 
2a183     61 72 74 69 
2a187     6E 67 20 64 
2a18b     69 73 70 6C 
2a18f     61 79       | 	byte	"Error starting display"
2a191     00          | 	byte	0
2a192                 | LR__2064
2a192     44 69 73 70 
2a196     6C 61 79 20 
2a19a     49 6E 69 74 
2a19e     69 61 6C 69 
2a1a2     7A 65 64 21 | 	byte	"Display Initialized!"
2a1a6     00          | 	byte	0
2a1a7                 | LR__2065
2a1a7     4C 6F 61 64 
2a1ab     65 64 20 4D 
2a1af     61 63 68 69 
2a1b3     6E 65 20 50 
2a1b7     72 6F 66 69 
2a1bb     6C 65       | 	byte	"Loaded Machine Profile"
2a1bd     00          | 	byte	0
2a1be                 | LR__2066
2a1be     41 6C 6C 20 
2a1c2     49 6D 61 67 
2a1c6     65 73 20 4C 
2a1ca     6F 61 64 65 
2a1ce     64          | 	byte	"All Images Loaded"
2a1cf     00          | 	byte	0
2a1d0                 | LR__2067
2a1d0     4D 6F 6E 69 
2a1d4     74 6F 72 20 
2a1d8     53 74 61 72 
2a1dc     74 65 64    | 	byte	"Monitor Started"
2a1df     00          | 	byte	0
2a1e0                 | LR__2068
2a1e0     4D 6F 6E 69 
2a1e4     74 6F 72 20 
2a1e8     46 61 69 6C 
2a1ec     65 64 2C 20 
2a1f0     70 6C 65 61 
2a1f4     73 65 20 72 
2a1f8     65 73 65 74 | 	byte	"Monitor Failed, please reset"
2a1fc     00          | 	byte	0
2a1fd                 | LR__2069
2a1fd     43 6F 6E 74 
2a201     72 6F 6C 53 
2a205     79 73 74 65 
2a209     6D 20 53 74 
2a20d     61 72 74 65 
2a211     64          | 	byte	"ControlSystem Started"
2a212     00          | 	byte	0
2a213                 | LR__2070
2a213     43 6F 6E 74 
2a217     72 6F 6C 53 
2a21b     79 73 74 65 
2a21f     6D 20 46 61 
2a223     69 6C 65 64 
2a227     2C 20 70 6C 
2a22b     65 61 73 65 
2a22f     20 72 65 73 
2a233     65 74       | 	byte	"ControlSystem Failed, please reset"
2a235     00          | 	byte	0
2a236                 | LR__2071
2a236     4D 61 63 68 
2a23a     69 6E 65 20 
2a23e     70 72 6F 70 
2a242     66 69 6C 65 
2a246     20 73 69 7A 
2a24a     65 3A       | 	byte	"Machine propfile size:"
2a24c     00          | 	byte	0
2a24d                 | LR__2072
2a24d     4C 6F 61 64 
2a251     69 6E 67 20 
2a255     73 74 61 74 
2a259     75 73 20 70 
2a25d     61 67 65    | 	byte	"Loading status page"
2a260     00          | 	byte	0
2a261                 | LR__2073
2a261     4C 65 61 76 
2a265     69 6E 67 20 
2a269     73 74 61 74 
2a26d     75 73 20 70 
2a271     61 67 65    | 	byte	"Leaving status page"
2a274     00          | 	byte	0
2a275                 | LR__2074
2a275     4C 6F 61 64 
2a279     69 6E 67 20 
2a27d     6D 61 6E 75 
2a281     61 6C 20 70 
2a285     61 67 65    | 	byte	"Loading manual page"
2a288     00          | 	byte	0
2a289                 | LR__2075
2a289     4C 65 61 76 
2a28d     69 6E 67 20 
2a291     6D 61 6E 75 
2a295     61 6C 20 70 
2a299     61 67 65    | 	byte	"Leaving manual page"
2a29c     00          | 	byte	0
2a29d                 | LR__2076
2a29d     4C 6F 61 64 
2a2a1     69 6E 67 20 
2a2a5     61 75 74 6F 
2a2a9     6D 61 74 69 
2a2ad     63 20 70 61 
2a2b1     67 65 2E 2E 
2a2b5     2E          | 	byte	"Loading automatic page..."
2a2b6     00          | 	byte	0
2a2b7                 | LR__2077
2a2b7     4C 65 61 76 
2a2bb     69 6E 67 20 
2a2bf     61 75 74 6F 
2a2c3     6D 61 74 69 
2a2c7     63 20 70 61 
2a2cb     67 65       | 	byte	"Leaving automatic page"
2a2cd     00          | 	byte	0
2a2ce                 | LR__2078
2a2ce     4C 6F 61 64 
2a2d2     69 6E 67 20 
2a2d6     66 6F 72 63 
2a2da     65 20 63 61 
2a2de     6C 69 62 72 
2a2e2     61 74 69 6F 
2a2e6     6E 20 70 61 
2a2ea     67 65 2E 2E 
2a2ee     2E          | 	byte	"Loading force calibration page..."
2a2ef     00          | 	byte	0
2a2f0                 | LR__2079
2a2f0     4C 65 61 76 
2a2f4     69 6E 67 20 
2a2f8     66 6F 72 63 
2a2fc     65 20 63 61 
2a300     6C 69 62 72 
2a304     61 74 69 6F 
2a308     6E 20 70 61 
2a30c     67 65       | 	byte	"Leaving force calibration page"
2a30e     00          | 	byte	0
2a30f                 | LR__2080
2a30f     4C 6F 61 64 
2a313     69 6E 67 20 
2a317     73 65 74 74 
2a31b     69 6E 67 73 
2a31f     20 70 61 67 
2a323     65 2E 2E 2E | 	byte	"Loading settings page..."
2a327     00          | 	byte	0
2a328                 | LR__2081
2a328     4C 65 61 76 
2a32c     69 6E 67 20 
2a330     73 65 74 74 
2a334     69 6E 67 73 
2a338     20 70 61 67 
2a33c     65          | 	byte	"Leaving settings page"
2a33d     00          | 	byte	0
2a33e                 | LR__2082
2a33e     53 65 6C 65 
2a342     63 74 69 6E 
2a346     67 20 6E 65 
2a34a     77 20 70 61 
2a34e     67 65       | 	byte	"Selecting new page"
2a350     00          | 	byte	0
2a351                 | LR__2083
2a351     2F 73 64    | 	byte	"/sd"
2a354     00          | 	byte	0
2a355                 | LR__2084
2a355     6B 65 79 62 
2a359     6F 61 72 64 
2a35d     2E 62 69 6E | 	byte	"keyboard.bin"
2a361     00          | 	byte	0
2a362                 | LR__2085
2a362     4E 61 6D 65 
2a366     3A          | 	byte	"Name:"
2a367     00          | 	byte	0
2a368                 | LR__2086
2a368     6D 61 6E 75 
2a36c     61 6C 2E 62 
2a370     69 6E       | 	byte	"manual.bin"
2a372     00          | 	byte	0
2a373                 | LR__2087
2a373     61 75 74 6F 
2a377     2E 62 69 6E | 	byte	"auto.bin"
2a37b     00          | 	byte	0
2a37c                 | LR__2088
2a37c     73 74 61 74 
2a380     75 73 2E 62 
2a384     69 6E       | 	byte	"status.bin"
2a386     00          | 	byte	0
2a387                 | LR__2089
2a387     63 61 6C 69 
2a38b     62 2E 62 69 
2a38f     6E          | 	byte	"calib.bin"
2a390     00          | 	byte	0
2a391                 | LR__2090
2a391     66 69 6C 65 
2a395     73 2E 62 69 
2a399     6E          | 	byte	"files.bin"
2a39a     00          | 	byte	0
2a39b                 | LR__2091
2a39b     6E 61 76 2E 
2a39f     62 69 6E    | 	byte	"nav.bin"
2a3a2     00          | 	byte	0
2a3a3                 | LR__2092
2a3a3     63 68 65 63 
2a3a7     6B 2E 62 69 
2a3ab     6E          | 	byte	"check.bin"
2a3ac     00          | 	byte	0
2a3ad                 | LR__2093
2a3ad     65 78 2E 62 
2a3b1     69 6E       | 	byte	"ex.bin"
2a3b3     00          | 	byte	0
2a3b4                 | LR__2094
2a3b4     61 64 64 2E 
2a3b8     62 69 6E    | 	byte	"add.bin"
2a3bb     00          | 	byte	0
2a3bc                 | LR__2095
2a3bc     67 61 72 62 
2a3c0     61 67 65 2E 
2a3c4     62 69 6E    | 	byte	"garbage.bin"
2a3c7     00          | 	byte	0
2a3c8                 | LR__2096
2a3c8     66 69 6C 65 
2a3cc     2E 62 69 6E | 	byte	"file.bin"
2a3d0     00          | 	byte	0
2a3d1                 | LR__2097
2a3d1     66 6F 6C 64 
2a3d5     65 72 2E 62 
2a3d9     69 6E       | 	byte	"folder.bin"
2a3db     00          | 	byte	0
2a3dc                 | LR__2098
2a3dc     4C 6F 61 64 
2a3e0     69 6E 67 20 
2a3e4     49 6D 61 67 
2a3e8     65 3A 20 6E 
2a3ec     61 76       | 	byte	"Loading Image: nav"
2a3ee     00          | 	byte	0
2a3ef                 | LR__2099
2a3ef     4C 6F 61 64 
2a3f3     69 6E 67 20 
2a3f7     49 6D 61 67 
2a3fb     65 3A 20 6D 
2a3ff     61 6E 75 61 
2a403     6C 20 70 61 
2a407     67 65       | 	byte	"Loading Image: manual page"
2a409     00          | 	byte	0
2a40a                 | LR__2100
2a40a     4C 6F 61 64 
2a40e     69 6E 67 20 
2a412     49 6D 61 67 
2a416     65 3A 20 61 
2a41a     75 74 6F 6D 
2a41e     61 74 69 63 
2a422     20 70 61 67 
2a426     65          | 	byte	"Loading Image: automatic page"
2a427     00          | 	byte	0
2a428                 | LR__2101
2a428     4C 6F 61 64 
2a42c     69 6E 67 20 
2a430     49 6D 61 67 
2a434     65 3A 20 73 
2a438     74 61 74 75 
2a43c     73 20 70 61 
2a440     67 65       | 	byte	"Loading Image: status page"
2a442     00          | 	byte	0
2a443                 | LR__2102
2a443     4C 6F 61 64 
2a447     69 6E 67 20 
2a44b     49 6D 61 67 
2a44f     65 3A 20 63 
2a453     61 6C 69 62 
2a457     72 61 74 65 
2a45b     20 70 61 67 
2a45f     65          | 	byte	"Loading Image: calibrate page"
2a460     00          | 	byte	0
2a461                 | LR__2103
2a461     4C 6F 61 64 
2a465     69 6E 67 20 
2a469     49 6D 61 67 
2a46d     65 3A 20 66 
2a471     69 6C 65 73 
2a475     20 70 61 67 
2a479     65          | 	byte	"Loading Image: files page"
2a47a     00          | 	byte	0
2a47b                 | LR__2104
2a47b     4C 6F 61 64 
2a47f     69 6E 67 20 
2a483     49 6D 61 67 
2a487     65 3A 20 63 
2a48b     68 65 63 6B 
2a48f     20 73 74 61 
2a493     74 75 73    | 	byte	"Loading Image: check status"
2a496     00          | 	byte	0
2a497                 | LR__2105
2a497     4C 6F 61 64 
2a49b     69 6E 67 20 
2a49f     49 6D 61 67 
2a4a3     65 3A 20 66 
2a4a7     61 69 6C 20 
2a4ab     73 74 61 74 
2a4af     75 73       | 	byte	"Loading Image: fail status"
2a4b1     00          | 	byte	0
2a4b2                 | LR__2106
2a4b2     4C 6F 61 64 
2a4b6     69 6E 67 20 
2a4ba     49 6D 61 67 
2a4be     65 3A 20 61 
2a4c2     64 64 20 73 
2a4c6     74 61 74 75 
2a4ca     73          | 	byte	"Loading Image: add status"
2a4cb     00          | 	byte	0
2a4cc                 | LR__2107
2a4cc     4C 6F 61 64 
2a4d0     69 6E 67 20 
2a4d4     49 6D 61 67 
2a4d8     65 3A 20 67 
2a4dc     61 72 62 61 
2a4e0     67 65 20 73 
2a4e4     74 61 74 75 
2a4e8     73          | 	byte	"Loading Image: garbage status"
2a4e9     00          | 	byte	0
2a4ea                 | LR__2108
2a4ea     4C 6F 61 64 
2a4ee     69 6E 67 20 
2a4f2     49 6D 61 67 
2a4f6     65 3A 20 66 
2a4fa     69 6C 65 20 
2a4fe     73 74 61 74 
2a502     75 73       | 	byte	"Loading Image: file status"
2a504     00          | 	byte	0
2a505                 | LR__2109
2a505     4C 6F 61 64 
2a509     69 6E 67 20 
2a50d     49 6D 61 67 
2a511     65 3A 20 66 
2a515     6F 6C 64 65 
2a519     72 20 73 74 
2a51d     61 74 75 73 | 	byte	"Loading Image: folder status"
2a521     00          | 	byte	0
2a522                 | LR__2110
2a522     2F 73 64 2F 
2a526     73 65 74 74 
2a52a     69 6E 67 73 | 	byte	"/sd/settings"
2a52e     00          | 	byte	0
2a52f                 | LR__2111
2a52f     57 72 69 74 
2a533     69 6E 67 20 
2a537     6D 61 63 68 
2a53b     69 6E 65 20 
2a53f     70 72 6F 66 
2a543     69 6C 65 20 
2a547     74 6F 20 73 
2a54b     65 74 74 69 
2a54f     6E 67 73 20 
2a553     66 69 6C 65 | 	byte	"Writing machine profile to settings file"
2a557     00          | 	byte	0
2a558                 | LR__2112
2a558     2F 73 64 2F 
2a55c     73 65 74 74 
2a560     69 6E 67 73 
2a564     2F 44 65 66 
2a568     61 75 6C 74 
2a56c     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
2a570     00          | 	byte	0
2a571                 | LR__2113
2a571     2F 73 64 2F 
2a575     73 65 74 74 
2a579     69 6E 67 73 
2a57d     2F 44 65 66 
2a581     61 75 6C 74 
2a585     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
2a589     00          | 	byte	0
2a58a                 | LR__2114
2a58a     4F 70 65 6E 
2a58e     69 6E 67 20 
2a592     65 78 69 73 
2a596     74 69 6E 67 
2a59a     20 70 72 6F 
2a59e     66 69 6C 65 | 	byte	"Opening existing profile"
2a5a2     00          | 	byte	0
2a5a3                 | LR__2115
2a5a3     2F 73 64 2F 
2a5a7     73 65 74 74 
2a5ab     69 6E 67 73 
2a5af     2F 44 65 66 
2a5b3     61 75 6C 74 
2a5b7     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
2a5bb     00          | 	byte	0
2a5bc                 | LR__2116
2a5bc     4E 6F 20 6D 
2a5c0     61 63 68 69 
2a5c4     6E 65 20 70 
2a5c8     72 6F 66 69 
2a5cc     6C 65 20 66 
2a5d0     6F 75 6E 64 
2a5d4     2C 20 63 72 
2a5d8     65 61 74 69 
2a5dc     6E 67 20 64 
2a5e0     65 66 61 75 
2a5e4     6C 74       | 	byte	"No machine profile found, creating default"
2a5e6     00          | 	byte	0
2a5e7                 | LR__2117
2a5e7     54 65 6E 73 
2a5eb     69 6C 65 5F 
2a5ef     54 65 73 74 
2a5f3     5F 31       | 	byte	"Tensile_Test_1"
2a5f5     00          | 	byte	0
2a5f6                 | LR__2118
2a5f6     36 34 30 2D 
2a5fa     44 53 54    | 	byte	"640-DST"
2a5fd     00          | 	byte	0
2a5fe                 | LR__2119
2a5fe     51 75 61 64 
2a602     45 6E 63 6F 
2a606     64 65 72    | 	byte	"QuadEncoder"
2a609     00          | 	byte	0
2a60a                 | LR__2120
2a60a     44 53 32 2D 
2a60e     35 4E       | 	byte	"DS2-5N"
2a610     00          | 	byte	0
2a611                 | LR__2121
2a611     2F 73 64 2F 
2a615     70 72 6F 66 
2a619     69 6C 65 73 | 	byte	"/sd/profiles"
2a61d     00          | 	byte	0
2a61e                 | LR__2122
2a61e     2F 73 64 2F 
2a622     70 72 6F 66 
2a626     69 6C 65 73 
2a62a     2F 54 65 73 
2a62e     74 31 2E 6D 
2a632     70          | 	byte	"/sd/profiles/Test1.mp"
2a633     00          | 	byte	0
2a634                 | LR__2123
2a634     2F 73 64 2F 
2a638     70 72 6F 66 
2a63c     69 6C 65 73 
2a640     2F 53 65 74 
2a644     5F 31 2E 73 
2a648     65 74       | 	byte	"/sd/profiles/Set_1.set"
2a64a     00          | 	byte	0
2a64b                 | LR__2124
2a64b     2F 73 64 2F 
2a64f     70 72 6F 66 
2a653     69 6C 65 73 
2a657     2F 71 72 74 
2a65b     31 2E 71 72 
2a65f     74          | 	byte	"/sd/profiles/qrt1.qrt"
2a660     00          | 	byte	0
2a661                 | LR__2125
2a661     2F 73 64 2F 
2a665     70 72 6F 66 
2a669     69 6C 65 73 
2a66d     2F 71 72 74 
2a671     32 2E 71 72 
2a675     74          | 	byte	"/sd/profiles/qrt2.qrt"
2a676     00          | 	byte	0
2a677                 | LR__2126
2a677     2F 73 64 2F 
2a67b     70 72 6F 66 
2a67f     69 6C 65 73 
2a683     2F 53 65 74 
2a687     5F 32 2E 73 
2a68b     65 74       | 	byte	"/sd/profiles/Set_2.set"
2a68d     00          | 	byte	0
2a68e                 | LR__2127
2a68e     2F 73 64 2F 
2a692     70 72 6F 66 
2a696     69 6C 65 73 
2a69a     2F 71 72 74 
2a69e     33 2E 71 72 
2a6a2     74          | 	byte	"/sd/profiles/qrt3.qrt"
2a6a3     00          | 	byte	0
2a6a4                 | LR__2128
2a6a4     2F 73 64 2F 
2a6a8     70 72 6F 66 
2a6ac     69 6C 65 73 
2a6b0     2F 71 72 74 
2a6b4     34 2E 71 72 
2a6b8     74          | 	byte	"/sd/profiles/qrt4.qrt"
2a6b9     00          | 	byte	0
2a6ba                 | LR__2129
2a6ba     45 72 72 6F 
2a6be     72 20 73 74 
2a6c2     61 72 74 69 
2a6c6     6E 67 20 64 
2a6ca     69 73 70 6C 
2a6ce     61 79 3A    | 	byte	"Error starting display:"
2a6d1     00          | 	byte	0
2a6d2                 | LR__2130
2a6d2     3F 3F 3F    | 	byte	"???"
2a6d5     00          | 	byte	0
2a6d6                 | LR__2131
2a6d6     22 25 73 22 
2a6da     3A 25 66    | 	byte	34,"%s",34,":%f"
2a6dd     00          | 	byte	0
2a6de                 | LR__2132
2a6de     22 25 73 22 
2a6e2     3A 25 64    | 	byte	34,"%s",34,":%d"
2a6e5     00          | 	byte	0
2a6e6                 | LR__2133
2a6e6     22 25 73 22 
2a6ea     3A 22 25 73 
2a6ee     22          | 	byte	34,"%s",34,":",34,"%s",34
2a6ef     00          | 	byte	0
2a6f0                 | LR__2134
2a6f0     45 72 72 6F 
2a6f4     72 2C 20 74 
2a6f8     68 65 20    | 	byte	"Error, the "
2a6fb     00          | 	byte	0
2a6fc                 | LR__2135
2a6fc     20 70 72 6F 
2a700     70 65 72 74 
2a704     79 20 69 73 
2a708     20 6E 6F 74 
2a70c     20 66 6F 75 
2a710     6E 64 2E    | 	byte	" property is not found."
2a713     00          | 	byte	0
2a714                 | LR__2136
2a714     45 72 72 6F 
2a718     72 2C 20 74 
2a71c     68 65 20    | 	byte	"Error, the "
2a71f     00          | 	byte	0
2a720                 | LR__2137
2a720     20 70 72 6F 
2a724     70 65 72 74 
2a728     79 20 69 73 
2a72c     20 6E 6F 74 
2a730     20 66 6F 75 
2a734     6E 64 2E    | 	byte	" property is not found."
2a737     00          | 	byte	0
2a738                 | LR__2138
2a738     45 72 72 6F 
2a73c     72 2C 20 74 
2a740     68 65 20    | 	byte	"Error, the "
2a743     00          | 	byte	0
2a744                 | LR__2139
2a744     20 70 72 6F 
2a748     70 65 72 74 
2a74c     79 20 69 73 
2a750     20 6E 6F 74 
2a754     20 66 6F 75 
2a758     6E 64 2E    | 	byte	" property is not found."
2a75b     00          | 	byte	0
2a75c                 | LR__2140
2a75c     70 61 72 61 
2a760     6D 3A       | 	byte	"param:"
2a762     00          | 	byte	0
2a763                 | LR__2141
2a763     20          | 	byte	" "
2a764     00          | 	byte	0
2a765                 | LR__2142
2a765     4D 6F 74 6F 
2a769     72 20 54 79 
2a76d     70 65       | 	byte	"Motor Type"
2a76f     00          | 	byte	0
2a770                 | LR__2143
2a770     4D 61 78 20 
2a774     4D 6F 74 6F 
2a778     72 20 52 50 
2a77c     4D          | 	byte	"Max Motor RPM"
2a77d     00          | 	byte	0
2a77e                 | LR__2144
2a77e     4D 61 78 20 
2a782     4D 6F 74 6F 
2a786     72 20 54 6F 
2a78a     72 71 75 65 | 	byte	"Max Motor Torque"
2a78e     00          | 	byte	0
2a78f                 | LR__2145
2a78f     47 65 61 72 
2a793     20 44 69 61 
2a797     6D 65 74 65 
2a79b     72          | 	byte	"Gear Diameter"
2a79c     00          | 	byte	0
2a79d                 | LR__2146
2a79d     47 65 61 72 
2a7a1     20 50 69 74 
2a7a5     63 68       | 	byte	"Gear Pitch"
2a7a7     00          | 	byte	0
2a7a8                 | LR__2147
2a7a8     53 79 73 74 
2a7ac     65 6D 20 49 
2a7b0     6E 74 65 72 
2a7b4     74 69 61    | 	byte	"System Intertia"
2a7b7     00          | 	byte	0
2a7b8                 | LR__2148
2a7b8     53 74 61 74 
2a7bc     69 63 20 54 
2a7c0     6F 72 71 75 
2a7c4     65          | 	byte	"Static Torque"
2a7c5     00          | 	byte	0
2a7c6                 | LR__2149
2a7c6     4C 6F 61 64 | 	byte	"Load"
2a7ca     00          | 	byte	0
2a7cb                 | LR__2150
2a7cb     50 6F 73 69 
2a7cf     74 69 6F 6E 
2a7d3     20 45 6E 63 
2a7d7     6F 64 65 72 
2a7db     20 54 79 70 
2a7df     65          | 	byte	"Position Encoder Type"
2a7e0     00          | 	byte	0
2a7e1                 | LR__2151
2a7e1     50 6F 73 69 
2a7e5     74 69 6F 6E 
2a7e9     20 45 6E 63 
2a7ed     6F 64 65 72 
2a7f1     20 53 63 61 
2a7f5     6C 65 20 46 
2a7f9     61 63 74 6F 
2a7fd     72          | 	byte	"Position Encoder Scale Factor"
2a7fe     00          | 	byte	0
2a7ff                 | LR__2152
2a7ff     46 6F 72 63 
2a803     65 20 47 61 
2a807     75 67 65    | 	byte	"Force Gauge"
2a80a     00          | 	byte	0
2a80b                 | LR__2153
2a80b     46 6F 72 63 
2a80f     65 20 47 61 
2a813     75 67 65 20 
2a817     53 63 61 6C 
2a81b     65 20 46 61 
2a81f     63 74 6F 72 | 	byte	"Force Gauge Scale Factor"
2a823     00          | 	byte	0
2a824                 | LR__2154
2a824     46 6F 72 63 
2a828     65 20 47 61 
2a82c     75 67 65 20 
2a830     5A 65 72 6F 
2a834     20 46 61 63 
2a838     74 6F 72    | 	byte	"Force Gauge Zero Factor"
2a83b     00          | 	byte	0
2a83c                 | LR__2155
2a83c     50 6F 73 69 
2a840     74 69 6F 6E 
2a844     20 4D 69 6E 
2a848     69 6D 75 6D | 	byte	"Position Minimum"
2a84c     00          | 	byte	0
2a84d                 | LR__2156
2a84d     50 6F 73 69 
2a851     74 69 6F 6E 
2a855     20 4D 61 78 
2a859     69 6D 75 6D | 	byte	"Position Maximum"
2a85d     00          | 	byte	0
2a85e                 | LR__2157
2a85e     56 65 6C 6F 
2a862     63 69 74 79 
2a866     20 4D 61 78 
2a86a     69 6D 75 6D | 	byte	"Velocity Maximum"
2a86e     00          | 	byte	0
2a86f                 | LR__2158
2a86f     41 63 63 65 
2a873     6C 65 72 61 
2a877     74 69 6F 6E 
2a87b     20 4D 61 78 
2a87f     69 6D 75 6D | 	byte	"Acceleration Maximum"
2a883     00          | 	byte	0
2a884                 | LR__2159
2a884     46 6F 72 63 
2a888     65 20 54 65 
2a88c     6E 73 69 6C 
2a890     65 20 4D 61 
2a894     78 69 6D 75 
2a898     6D          | 	byte	"Force Tensile Maximum"
2a899     00          | 	byte	0
2a89a                 | LR__2160
2a89a     46 6F 72 63 
2a89e     65 20 43 6F 
2a8a2     6D 70 72 65 
2a8a6     73 73 69 6F 
2a8aa     6E 20 4D 61 
2a8ae     78 69 6D 75 
2a8b2     6D          | 	byte	"Force Compression Maximum"
2a8b3     00          | 	byte	0
2a8b4                 | LR__2161
2a8b4     46 6F 72 63 
2a8b8     65 20 67 61 
2a8bc     75 67 65 20 
2a8c0     4E 65 75 74 
2a8c4     72 61 6C 20 
2a8c8     4F 66 66 73 
2a8cc     65 74       | 	byte	"Force gauge Neutral Offset"
2a8ce     00          | 	byte	0
2a8cf                 | LR__2162
2a8cf     22 43 6F 6E 
2a8d3     66 69 67 75 
2a8d7     72 61 74 69 
2a8db     6F 6E 22 3A 
2a8df     7B          | 	byte	34,"Configuration",34,":{"
2a8e0     00          | 	byte	0
2a8e1                 | LR__2163
2a8e1     4D 6F 74 6F 
2a8e5     72 20 54 79 
2a8e9     70 65       | 	byte	"Motor Type"
2a8eb     00          | 	byte	0
2a8ec                 | LR__2164
2a8ec     2C          | 	byte	","
2a8ed     00          | 	byte	0
2a8ee                 | LR__2165
2a8ee     4D 61 78 20 
2a8f2     4D 6F 74 6F 
2a8f6     72 20 52 50 
2a8fa     4D          | 	byte	"Max Motor RPM"
2a8fb     00          | 	byte	0
2a8fc                 | LR__2166
2a8fc     2C          | 	byte	","
2a8fd     00          | 	byte	0
2a8fe                 | LR__2167
2a8fe     4D 61 78 20 
2a902     4D 6F 74 6F 
2a906     72 20 54 6F 
2a90a     72 71 75 65 | 	byte	"Max Motor Torque"
2a90e     00          | 	byte	0
2a90f                 | LR__2168
2a90f     2C          | 	byte	","
2a910     00          | 	byte	0
2a911                 | LR__2169
2a911     47 65 61 72 
2a915     20 44 69 61 
2a919     6D 65 74 65 
2a91d     72          | 	byte	"Gear Diameter"
2a91e     00          | 	byte	0
2a91f                 | LR__2170
2a91f     2C          | 	byte	","
2a920     00          | 	byte	0
2a921                 | LR__2171
2a921     47 65 61 72 
2a925     20 50 69 74 
2a929     63 68       | 	byte	"Gear Pitch"
2a92b     00          | 	byte	0
2a92c                 | LR__2172
2a92c     2C          | 	byte	","
2a92d     00          | 	byte	0
2a92e                 | LR__2173
2a92e     53 79 73 74 
2a932     65 6D 20 49 
2a936     6E 74 65 72 
2a93a     74 69 61    | 	byte	"System Intertia"
2a93d     00          | 	byte	0
2a93e                 | LR__2174
2a93e     2C          | 	byte	","
2a93f     00          | 	byte	0
2a940                 | LR__2175
2a940     53 74 61 74 
2a944     69 63 20 54 
2a948     6F 72 71 75 
2a94c     65          | 	byte	"Static Torque"
2a94d     00          | 	byte	0
2a94e                 | LR__2176
2a94e     2C          | 	byte	","
2a94f     00          | 	byte	0
2a950                 | LR__2177
2a950     4C 6F 61 64 | 	byte	"Load"
2a954     00          | 	byte	0
2a955                 | LR__2178
2a955     2C          | 	byte	","
2a956     00          | 	byte	0
2a957                 | LR__2179
2a957     50 6F 73 69 
2a95b     74 69 6F 6E 
2a95f     20 45 6E 63 
2a963     6F 64 65 72 
2a967     20 54 79 70 
2a96b     65          | 	byte	"Position Encoder Type"
2a96c     00          | 	byte	0
2a96d                 | LR__2180
2a96d     2C          | 	byte	","
2a96e     00          | 	byte	0
2a96f                 | LR__2181
2a96f     50 6F 73 69 
2a973     74 69 6F 6E 
2a977     20 45 6E 63 
2a97b     6F 64 65 72 
2a97f     20 53 63 61 
2a983     6C 65 20 46 
2a987     61 63 74 6F 
2a98b     72          | 	byte	"Position Encoder Scale Factor"
2a98c     00          | 	byte	0
2a98d                 | LR__2182
2a98d     2C          | 	byte	","
2a98e     00          | 	byte	0
2a98f                 | LR__2183
2a98f     46 6F 72 63 
2a993     65 20 47 61 
2a997     75 67 65    | 	byte	"Force Gauge"
2a99a     00          | 	byte	0
2a99b                 | LR__2184
2a99b     2C          | 	byte	","
2a99c     00          | 	byte	0
2a99d                 | LR__2185
2a99d     46 6F 72 63 
2a9a1     65 20 47 61 
2a9a5     75 67 65 20 
2a9a9     53 63 61 6C 
2a9ad     65 20 46 61 
2a9b1     63 74 6F 72 | 	byte	"Force Gauge Scale Factor"
2a9b5     00          | 	byte	0
2a9b6                 | LR__2186
2a9b6     2C          | 	byte	","
2a9b7     00          | 	byte	0
2a9b8                 | LR__2187
2a9b8     46 6F 72 63 
2a9bc     65 20 47 61 
2a9c0     75 67 65 20 
2a9c4     5A 65 72 6F 
2a9c8     20 46 61 63 
2a9cc     74 6F 72    | 	byte	"Force Gauge Zero Factor"
2a9cf     00          | 	byte	0
2a9d0                 | LR__2188
2a9d0     7D          | 	byte	"}"
2a9d1     00          | 	byte	0
2a9d2                 | LR__2189
2a9d2     22 50 65 72 
2a9d6     66 6F 72 6D 
2a9da     61 6E 63 65 
2a9de     22 3A 7B    | 	byte	34,"Performance",34,":{"
2a9e1     00          | 	byte	0
2a9e2                 | LR__2190
2a9e2     50 6F 73 69 
2a9e6     74 69 6F 6E 
2a9ea     20 4D 69 6E 
2a9ee     69 6D 75 6D | 	byte	"Position Minimum"
2a9f2     00          | 	byte	0
2a9f3                 | LR__2191
2a9f3     2C          | 	byte	","
2a9f4     00          | 	byte	0
2a9f5                 | LR__2192
2a9f5     50 6F 73 69 
2a9f9     74 69 6F 6E 
2a9fd     20 4D 61 78 
2aa01     69 6D 75 6D | 	byte	"Position Maximum"
2aa05     00          | 	byte	0
2aa06                 | LR__2193
2aa06     2C          | 	byte	","
2aa07     00          | 	byte	0
2aa08                 | LR__2194
2aa08     56 65 6C 6F 
2aa0c     63 69 74 79 
2aa10     20 4D 61 78 
2aa14     69 6D 75 6D | 	byte	"Velocity Maximum"
2aa18     00          | 	byte	0
2aa19                 | LR__2195
2aa19     2C          | 	byte	","
2aa1a     00          | 	byte	0
2aa1b                 | LR__2196
2aa1b     41 63 63 65 
2aa1f     6C 65 72 61 
2aa23     74 69 6F 6E 
2aa27     20 4D 61 78 
2aa2b     69 6D 75 6D | 	byte	"Acceleration Maximum"
2aa2f     00          | 	byte	0
2aa30                 | LR__2197
2aa30     2C          | 	byte	","
2aa31     00          | 	byte	0
2aa32                 | LR__2198
2aa32     46 6F 72 63 
2aa36     65 20 54 65 
2aa3a     6E 73 69 6C 
2aa3e     65 20 4D 61 
2aa42     78 69 6D 75 
2aa46     6D          | 	byte	"Force Tensile Maximum"
2aa47     00          | 	byte	0
2aa48                 | LR__2199
2aa48     2C          | 	byte	","
2aa49     00          | 	byte	0
2aa4a                 | LR__2200
2aa4a     46 6F 72 63 
2aa4e     65 20 43 6F 
2aa52     6D 70 72 65 
2aa56     73 73 69 6F 
2aa5a     6E 20 4D 61 
2aa5e     78 69 6D 75 
2aa62     6D          | 	byte	"Force Compression Maximum"
2aa63     00          | 	byte	0
2aa64                 | LR__2201
2aa64     2C          | 	byte	","
2aa65     00          | 	byte	0
2aa66                 | LR__2202
2aa66     46 6F 72 63 
2aa6a     65 20 67 61 
2aa6e     75 67 65 20 
2aa72     4E 65 75 74 
2aa76     72 61 6C 20 
2aa7a     4F 66 66 73 
2aa7e     65 74       | 	byte	"Force gauge Neutral Offset"
2aa80     00          | 	byte	0
2aa81                 | LR__2203
2aa81     7D          | 	byte	"}"
2aa82     00          | 	byte	0
2aa83                 | LR__2204
2aa83     4D 61 63 68 
2aa87     69 6E 65 20 
2aa8b     43 6F 6E 66 
2aa8f     69 67 75 72 
2aa93     61 74 69 6F 
2aa97     6E 3A       | 	byte	"Machine Configuration:"
2aa99     00          | 	byte	0
2aa9a                 | LR__2205
2aa9a     20 20 20 20 
2aa9e     4D 6F 74 6F 
2aaa2     72 20 54 79 
2aaa6     70 65 3A 20 | 	byte	"    Motor Type: "
2aaaa     00          | 	byte	0
2aaab                 | LR__2206
2aaab     20 20 20 20 
2aaaf     6D 61 78 4D 
2aab3     6F 74 6F 72 
2aab7     54 6F 72 71 
2aabb     75 65 3A 20 | 	byte	"    maxMotorTorque: "
2aabf     00          | 	byte	0
2aac0                 | LR__2207
2aac0     20 20 20 20 
2aac4     6D 61 78 4D 
2aac8     6F 74 6F 72 
2aacc     52 50 4D 3A 
2aad0     20          | 	byte	"    maxMotorRPM: "
2aad1     00          | 	byte	0
2aad2                 | LR__2208
2aad2     20 20 20 20 
2aad6     67 65 61 72 
2aada     50 69 74 63 
2aade     68 3A 20    | 	byte	"    gearPitch: "
2aae1     00          | 	byte	0
2aae2                 | LR__2209
2aae2     20 20 20 20 
2aae6     73 79 73 74 
2aaea     65 6D 49 6E 
2aaee     74 65 72 74 
2aaf2     69 61 3A 20 | 	byte	"    systemIntertia: "
2aaf6     00          | 	byte	0
2aaf7                 | LR__2210
2aaf7     20 20 20 20 
2aafb     73 74 61 74 
2aaff     69 63 54 6F 
2ab03     72 71 75 65 
2ab07     3A 20       | 	byte	"    staticTorque: "
2ab09     00          | 	byte	0
2ab0a                 | LR__2211
2ab0a     20 20 20 20 
2ab0e     6C 6F 61 64 
2ab12     3A 20       | 	byte	"    load: "
2ab14     00          | 	byte	0
2ab15                 | LR__2212
2ab15     20 20 20 20 
2ab19     70 6F 73 69 
2ab1d     74 69 6F 6E 
2ab21     45 6E 63 6F 
2ab25     64 65 72 54 
2ab29     79 70 65 3A 
2ab2d     20          | 	byte	"    positionEncoderType: "
2ab2e     00          | 	byte	0
2ab2f                 | LR__2213
2ab2f     20 20 20 20 
2ab33     70 6F 73 69 
2ab37     74 69 6F 6E 
2ab3b     45 6E 63 6F 
2ab3f     64 65 72 53 
2ab43     63 61 6C 65 
2ab47     46 61 63 74 
2ab4b     6F 72 3A 20 | 	byte	"    positionEncoderScaleFactor: "
2ab4f     00          | 	byte	0
2ab50                 | LR__2214
2ab50     20 20 20 20 
2ab54     66 6F 72 63 
2ab58     65 47 61 75 
2ab5c     67 65 3A 20 | 	byte	"    forceGauge: "
2ab60     00          | 	byte	0
2ab61                 | LR__2215
2ab61     20 20 20 20 
2ab65     66 6F 72 63 
2ab69     65 47 61 75 
2ab6d     67 65 53 63 
2ab71     61 6C 65 46 
2ab75     61 63 74 6F 
2ab79     72 3A 20    | 	byte	"    forceGaugeScaleFactor: "
2ab7c     00          | 	byte	0
2ab7d                 | LR__2216
2ab7d     20 20 20 20 
2ab81     66 6F 72 63 
2ab85     65 47 61 75 
2ab89     67 65 5A 65 
2ab8d     72 6F 46 61 
2ab91     63 74 6F 72 
2ab95     3A 20       | 	byte	"    forceGaugeZeroFactor: "
2ab97     00          | 	byte	0
2ab98                 | LR__2217
2ab98     4D 61 63 68 
2ab9c     69 6E 65 20 
2aba0     70 65 72 66 
2aba4     6F 72 6D 61 
2aba8     6E 63 65 3A | 	byte	"Machine performance:"
2abac     00          | 	byte	0
2abad                 | LR__2218
2abad     20 20 20 20 
2abb1     6D 69 6E 50 
2abb5     6F 73 69 74 
2abb9     69 6F 6E 3A 
2abbd     20          | 	byte	"    minPosition: "
2abbe     00          | 	byte	0
2abbf                 | LR__2219
2abbf     20 20 20 20 
2abc3     6D 61 78 50 
2abc7     6F 73 69 74 
2abcb     69 6F 6E 3A 
2abcf     20          | 	byte	"    maxPosition: "
2abd0     00          | 	byte	0
2abd1                 | LR__2220
2abd1     20 20 20 20 
2abd5     6D 61 78 56 
2abd9     65 6C 6F 63 
2abdd     69 74 79 3A 
2abe1     20          | 	byte	"    maxVelocity: "
2abe2     00          | 	byte	0
2abe3                 | LR__2221
2abe3     20 20 20 20 
2abe7     6D 61 78 41 
2abeb     63 63 65 6C 
2abef     65 72 61 74 
2abf3     69 6F 6E 3A 
2abf7     20          | 	byte	"    maxAcceleration: "
2abf8     00          | 	byte	0
2abf9                 | LR__2222
2abf9     20 20 20 20 
2abfd     6D 61 78 46 
2ac01     6F 72 63 65 
2ac05     54 65 6E 73 
2ac09     69 6C 65 3A 
2ac0d     20          | 	byte	"    maxForceTensile: "
2ac0e     00          | 	byte	0
2ac0f                 | LR__2223
2ac0f     20 20 20 20 
2ac13     6D 61 78 46 
2ac17     6F 72 63 65 
2ac1b     43 6F 6D 70 
2ac1f     72 65 73 73 
2ac23     69 6F 6E 3A 
2ac27     20          | 	byte	"    maxForceCompression: "
2ac28     00          | 	byte	0
2ac29                 | LR__2224
2ac29     20 20 20 20 
2ac2d     66 6F 72 63 
2ac31     65 47 61 75 
2ac35     67 65 4E 65 
2ac39     75 74 72 61 
2ac3d     6C 4F 66 66 
2ac41     73 65 74 3A 
2ac45     20          | 	byte	"    forceGaugeNeutralOffset: "
2ac46     00          | 	byte	0
2ac47                 | LR__2225
2ac47     20 20 20 20 
2ac4b     20 20 20 20 
2ac4f     4E 61 6D 65 
2ac53     3A          | 	byte	"        Name:"
2ac54     00          | 	byte	0
2ac55                 | LR__2226
2ac55     20 20 20 20 
2ac59     20 20 20 20 
2ac5d     46 75 6E 63 
2ac61     74 69 6F 6E 
2ac65     3A          | 	byte	"        Function:"
2ac66     00          | 	byte	0
2ac67                 | LR__2227
2ac67     20 20 20 20 
2ac6b     20 20 20 20 
2ac6f     44 77 65 6C 
2ac73     6C 3A       | 	byte	"        Dwell:"
2ac75     00          | 	byte	0
2ac76                 | LR__2228
2ac76     20 20 20 20 
2ac7a     20 20 20 20 
2ac7e     50 61 72 61 
2ac82     6D 65 74 65 
2ac86     72 73 3A 5B | 	byte	"        Parameters:["
2ac8a     00          | 	byte	0
2ac8b                 | LR__2229
2ac8b     2C          | 	byte	","
2ac8c     00          | 	byte	0
2ac8d                 | LR__2230
2ac8d     20 20 20 20 
2ac91     4E 61 6D 65 
2ac95     3A          | 	byte	"    Name:"
2ac96     00          | 	byte	0
2ac97                 | LR__2231
2ac97     20 20 20 20 
2ac9b     4E 75 6D 62 
2ac9f     65 72 3A    | 	byte	"    Number:"
2aca2     00          | 	byte	0
2aca3                 | LR__2232
2aca3     20 20 20 20 
2aca7     54 79 70 65 
2acab     3A          | 	byte	"    Type:"
2acac     00          | 	byte	0
2acad                 | LR__2233
2acad     20 20 20 20 
2acb1     45 78 65 63 
2acb5     75 74 69 6F 
2acb9     6E 73 3A    | 	byte	"    Executions:"
2acbc     00          | 	byte	0
2acbd                 | LR__2234
2acbd     20 20 20 20 
2acc1     51 75 61 72 
2acc5     74 65 73 74 
2acc9     3A          | 	byte	"    Quartest:"
2acca     00          | 	byte	0
2accb                 | LR__2235
2accb     2F 64 61    | 	byte	"/da"
2acce     00          | 	byte	0
2accf                 | LR__2236
2accf     4D 6F 6E 69 
2acd3     74 6F 72 20 
2acd7     43 6F 67 20 
2acdb     53 74 61 72 
2acdf     74 65 64 20 
2ace3     61 74 20    | 	byte	"Monitor Cog Started at "
2ace6     00          | 	byte	0
2ace7                 | LR__2237
2ace7     48 7A 20 77 
2aceb     69 74 68 20 
2acef     64 65 6C 61 
2acf3     79 20 6F 66 
2acf7     3A          | 	byte	"Hz with delay of:"
2acf8     00          | 	byte	0
2acf9                 | LR__2238
2acf9     46 6F 72 63 
2acfd     65 20 47 61 
2ad01     75 67 65 20 
2ad05     64 69 73 63 
2ad09     6F 6E 6E 65 
2ad0d     63 74 65 64 
2ad11     2C 20 61 74 
2ad15     74 65 6D 70 
2ad19     74 69 6E 67 
2ad1d     20 74 6F 20 
2ad21     72 65 63 6F 
2ad25     6E 6E 65 63 
2ad29     74          | 	byte	"Force Gauge disconnected, attempting to reconnect"
2ad2a     00          | 	byte	0
2ad2b                 | LR__2239
2ad2b     2F 64 61 2F 
2ad2f     72 61 77 31 
2ad33     2E 74 78 74 | 	byte	"/da/raw1.txt"
2ad37     00          | 	byte	0
2ad38                 | LR__2240
2ad38     77          | 	byte	"w"
2ad39     00          | 	byte	0
2ad3a                 | LR__2241
2ad3a     46 61 69 6C 
2ad3e     65 64 20 74 
2ad42     6F 20 6F 70 
2ad46     65 6E 20 66 
2ad4a     69 6C 65    | 	byte	"Failed to open file"
2ad4d     00          | 	byte	0
2ad4e                 | LR__2242
2ad4e     6F 70 65 6E 
2ad52     69 6E 67 20 
2ad56     66 69 6C 65 | 	byte	"opening file"
2ad5a     00          | 	byte	0
2ad5b                 | LR__2243
2ad5b     74 69 6D 65 
2ad5f     20 28 6D 73 
2ad63     29 2C 66 6F 
2ad67     72 63 65 20 
2ad6b     28 6D 4E 29 
2ad6f     2C 70 6F 73 
2ad73     69 74 69 6F 
2ad77     6E 20 28 6D 
2ad7b     6D 29 2C 66 
2ad7f     6F 72 63 65 
2ad83     52 61 77 2C 
2ad87     65 6E 63 6F 
2ad8b     64 65 72 52 
2ad8f     61 77 0A    | 	byte	"time (ms),force (mN),position (mm),forceRaw,encoderRaw",10
2ad92     00          | 	byte	0
2ad93                 | LR__2244
2ad93     25 64 2C 25 
2ad97     64 2C 25 64 
2ad9b     0A          | 	byte	"%d,%d,%d",10
2ad9c     00          | 	byte	0
2ad9d                 | LR__2245
2ad9d     63 6C 6F 73 
2ada1     69 6E 67 20 
2ada5     66 69 6C 65 | 	byte	"closing file"
2ada9     00          | 	byte	0
2adaa                 | LR__2246
2adaa     6D 6F 76 69 
2adae     6E 67 20 72 
2adb2     65 6C 69 74 
2adb6     69 76 65    | 	byte	"moving relitive"
2adb9     00          | 	byte	0
2adba                 | LR__2247
2adba     4D 43 50 32 
2adbe     33 30 31 37 
2adc2     20 6E 6F 74 
2adc6     20 63 6F 6D 
2adca     6D 75 6E 69 
2adce     63 61 74 69 
2add2     6E 67 2C 20 
2add6     74 72 79 69 
2adda     6E 67 20 61 
2adde     67 61 69 6E | 	byte	"MCP23017 not communicating, trying again"
2ade2     00          | 	byte	0
2ade3                 | LR__2248
2ade3     43 6F 6E 74 
2ade7     72 6F 6C 20 
2adeb     63 6F 67 20 
2adef     73 74 61 72 
2adf3     74 65 64    | 	byte	"Control cog started"
2adf6     00          | 	byte	0
2adf7                 | LR__2249
2adf7     75 70 20 72 
2adfb     65 6C 65 61 
2adff     73 65 64    | 	byte	"up released"
2ae02     00          | 	byte	0
2ae03                 | LR__2250
2ae03     64 6F 77 6E 
2ae07     20 72 65 6C 
2ae0b     65 61 73 65 
2ae0f     64          | 	byte	"down released"
2ae10     00          | 	byte	0
2ae11                 | LR__2251
2ae11     2F 73 64    | 	byte	"/sd"
2ae14     00          | 	byte	0
2ae15                 | LR__2252
2ae15     46 69 6C 65 
2ae19     70 61 74 68 
2ae1d     3A 20       | 	byte	"Filepath: "
2ae1f     00          | 	byte	0
2ae20                 | LR__2253
2ae20     00          | 	byte	0
2ae21     00          | 	byte	0
2ae22                 | LR__2254
2ae22     46 69 6C 65 
2ae26     70 61 74 68 
2ae2a     3A 20       | 	byte	"Filepath: "
2ae2c     00          | 	byte	0
2ae2d                 | LR__2255
2ae2d     4E 61 6D 65 
2ae31     3A 20 25 73 | 	byte	"Name: %s"
2ae35     00          | 	byte	0
2ae36                 | LR__2256
2ae36     4E 75 6D 62 
2ae3a     65 72 3A 20 
2ae3e     25 64       | 	byte	"Number: %d"
2ae40     00          | 	byte	0
2ae41                 | LR__2257
2ae41     2F          | 	byte	"/"
2ae42     00          | 	byte	0
2ae43                 | LR__2258
2ae43     52 65 6D 6F 
2ae47     76 69 6E 67 
2ae4b     20          | 	byte	"Removing "
2ae4c     00          | 	byte	0
2ae4d                 | LR__2259
2ae4d     20 66 72 6F 
2ae51     6D 20       | 	byte	" from "
2ae53     00          | 	byte	0
2ae54                 | LR__2260
2ae54     00          | 	byte	0
2ae55     00          | 	byte	0
2ae56                 | LR__2261
2ae56     2F          | 	byte	"/"
2ae57     00          | 	byte	0
2ae58                 | LR__2262
2ae58     2F          | 	byte	"/"
2ae59     00          | 	byte	0
2ae5a                 | LR__2263
2ae5a     2F 73 64    | 	byte	"/sd"
2ae5d     00          | 	byte	0
2ae5e                 | LR__2264
2ae5e     00          | 	byte	0
2ae5f     00          | 	byte	0
2ae60                 | LR__2265
2ae60     46 6F 75 6E 
2ae64     64 20 6D 6F 
2ae68     64 65 3A    | 	byte	"Found mode:"
2ae6b     00          | 	byte	0
2ae6c                 | LR__2266
2ae6c     4D 6F 64 65 
2ae70     3A          | 	byte	"Mode:"
2ae71     00          | 	byte	0
2ae72                 | LR__2267
2ae72     51 75 61 72 
2ae76     74 65 74 20 
2ae7a     66 72 6F 6D 
2ae7e     20 6A 73 6F 
2ae82     6E          | 	byte	"Quartet from json"
2ae83     00          | 	byte	0
2ae84                 | LR__2268
2ae84     54 65 73 74 
2ae88     50 72 6F 66 
2ae8c     69 6C 65 20 
2ae90     42 75 74 74 
2ae94     6F 6E 20 6E 
2ae98     65 77 20 4B 
2ae9c     65 79 62 6F 
2aea0     61 72 64 20 
2aea4     63 6F 75 6C 
2aea8     64 20 6E 6F 
2aeac     74 20 61 6C 
2aeb0     6C 6F 63 61 
2aeb4     74 65 20 6D 
2aeb8     65 6D 6F 72 
2aebc     79          | 	byte	"TestProfile Button new Keyboard could not allocate memory"
2aebd     00          | 	byte	0
2aebe                 | LR__2269
2aebe     45 6E 74 65 
2aec2     72 20 66 69 
2aec6     6C 65 20 6E 
2aeca     61 6D 65 3A 
2aece     20          | 	byte	"Enter file name: "
2aecf     00          | 	byte	0
2aed0                 | LR__2270
2aed0     00          | 	byte	0
2aed1     00          | 	byte	0
2aed2                 | LR__2271
2aed2     2F 73 64    | 	byte	"/sd"
2aed5     00          | 	byte	0
2aed6                 | LR__2272
2aed6     54 65 73 74 
2aeda     70 72 6F 66 
2aede     69 6C 65 2E 
2aee2     63 20 65 78 
2aee6     70 6C 6F 72 
2aeea     65 72 20 63 
2aeee     6F 75 6C 64 
2aef2     20 6E 6F 74 
2aef6     20 61 6C 6C 
2aefa     6F 63 61 74 
2aefe     65 20 6D 65 
2af02     6D 6F 72 79 | 	byte	"Testprofile.c explorer could not allocate memory"
2af06     00          | 	byte	0
2af07                 | LR__2273
2af07     00          | 	byte	0
2af08     00          | 	byte	0
2af09                 | LR__2274
2af09     53 61 76 69 
2af0d     6E 67 20 71 
2af11     75 61 72 74 
2af15     65 74       | 	byte	"Saving quartet"
2af17     00          | 	byte	0
2af18                 | LR__2275
2af18     53 61 76 69 
2af1c     6E 67 20 73 
2af20     65 74       | 	byte	"Saving set"
2af22     00          | 	byte	0
2af23                 | LR__2276
2af23     53 61 76 69 
2af27     6E 67 20 6D 
2af2b     6F 74 69 6F 
2af2f     6E          | 	byte	"Saving motion"
2af30     00          | 	byte	0
2af31                 | LR__2277
2af31     53 61 76 69 
2af35     6E 67 20 74 
2af39     65 73 74    | 	byte	"Saving test"
2af3c     00          | 	byte	0
2af3d                 | LR__2278
2af3d     42 55 54 54 
2af41     4F 4E 5F 51 
2af45     55 41 52 54 
2af49     45 54 5F 69 
2af4d     64 3A       | 	byte	"BUTTON_QUARTET_id:"
2af4f     00          | 	byte	0
2af50                 | LR__2279
2af50     45 6E 74 65 
2af54     72 20 66 69 
2af58     6C 65 20 6E 
2af5c     61 6D 65 3A 
2af60     20          | 	byte	"Enter file name: "
2af61     00          | 	byte	0
2af62                 | LR__2280
2af62     00          | 	byte	0
2af63     00          | 	byte	0
2af64                 | LR__2281
2af64     66 75 6E 63 
2af68     74 69 6F 6E 
2af6c     3A          | 	byte	"function:"
2af6d     00          | 	byte	0
2af6e                 | LR__2282
2af6e     2C 6E 61 6D 
2af72     65 3A       | 	byte	",name:"
2af74     00          | 	byte	0
2af75                 | LR__2283
2af75     44 77 65 6C 
2af79     6C 3A 20    | 	byte	"Dwell: "
2af7c     00          | 	byte	0
2af7d                 | LR__2284
2af7d     3A 20       | 	byte	": "
2af7f     00          | 	byte	0
2af80                 | LR__2285
2af80     45 6E 74 65 
2af84     72 20 66 69 
2af88     6C 65 20 6E 
2af8c     61 6D 65 3A 
2af90     20          | 	byte	"Enter file name: "
2af91     00          | 	byte	0
2af92                 | LR__2286
2af92     00          | 	byte	0
2af93     00          | 	byte	0
2af94                 | LR__2287
2af94     4E 75 6D 62 
2af98     65 72 3A 20 | 	byte	"Number: "
2af9c     00          | 	byte	0
2af9d                 | LR__2288
2af9d     45 6E 74 65 
2afa1     72 20 66 69 
2afa5     6C 65 20 6E 
2afa9     61 6D 65 3A 
2afad     20          | 	byte	"Enter file name: "
2afae     00          | 	byte	0
2afaf                 | LR__2289
2afaf     00          | 	byte	0
2afb0     00          | 	byte	0
2afb1                 | LR__2290
2afb1     45 78 65 63 
2afb5     75 74 69 6F 
2afb9     6E 73 3A 20 | 	byte	"Executions: "
2afbd     00          | 	byte	0
2afbe                 | LR__2291
2afbe     2F 73 64    | 	byte	"/sd"
2afc1     00          | 	byte	0
2afc2                 | LR__2292
2afc2     00          | 	byte	0
2afc3     00          | 	byte	0
2afc4                 | LR__2293
2afc4     2F          | 	byte	"/"
2afc5     00          | 	byte	0
2afc6                 | LR__2294
2afc6     20 0A 0D 09 
2afca     0C          | 	byte	" ",10,13,9,12
2afcb     00          | 	byte	0
2afcc                 | LR__2295
2afcc     7D 5D       | 	byte	"}]"
2afce     00          | 	byte	0
2afcf                 | LR__2296
2afcf     20 0A 0D 09 
2afd3     0C          | 	byte	" ",10,13,9,12
2afd4     00          | 	byte	0
2afd5                 | LR__2297
2afd5     7D 5D       | 	byte	"}]"
2afd7     00          | 	byte	0
2afd8                 | LR__2298
2afd8     74 72 75 65 | 	byte	"true"
2afdc     00          | 	byte	0
2afdd                 | LR__2299
2afdd     66 61 6C 73 
2afe1     65          | 	byte	"false"
2afe2     00          | 	byte	0
2afe3                 | LR__2300
2afe3     6E 75 6C 6C | 	byte	"null"
2afe7     00          | 	byte	0
2afe8                 | LR__2301
2afe8     45 72 72 6F 
2afec     72 3A 20 55 
2aff0     6E 65 78 70 
2aff4     65 63 74 65 
2aff8     64 20 67 6F 
2affc     62 6C 61 6E 
2b000     6B 20 65 72 
2b004     72 6F 72 2E 
2b008     0A          | 	byte	"Error: Unexpected goblank error.",10
2b009     00          | 	byte	0
2b00a                 | LR__2302
2b00a     45 72 72 6F 
2b00e     72 3A 20 55 
2b012     6E 65 78 70 
2b016     65 63 74 65 
2b01a     64 20 61 6C 
2b01e     6C 6F 63 61 
2b022     74 69 6F 6E 
2b026     20 65 72 72 
2b02a     6F 72 2E 0A | 	byte	"Error: Unexpected allocation error.",10
2b02e     00          | 	byte	0
2b02f                 | LR__2303
2b02f     45 72 72 6F 
2b033     72 3A 20 55 
2b037     6E 65 78 70 
2b03b     65 63 74 65 
2b03f     64 20 71 75 
2b043     6F 74 65 20 
2b047     6D 69 73 73 
2b04b     69 6E 67 2E 
2b04f     0A          | 	byte	"Error: Unexpected quote missing.",10
2b050     00          | 	byte	0
2b051                 | LR__2304
2b051     45 72 72 6F 
2b055     72 3A 20 70 
2b059     72 6F 70 65 
2b05d     72 74 79 20 
2b061     6E 61 6D 65 
2b065     20 64 6F 65 
2b069     73 20 6E 6F 
2b06d     74 20 65 78 
2b071     69 73 74 2E 
2b075     0A          | 	byte	"Error: property name does not exist.",10
2b076     00          | 	byte	0
2b077                 | LR__2305
2b077     45 72 72 6F 
2b07b     72 3A 20 75 
2b07f     6E 61 62 6C 
2b083     65 20 74 6F 
2b087     20 70 61 72 
2b08b     73 65 20 76 
2b08f     61 6C 75 65 
2b093     2E 0A       | 	byte	"Error: unable to parse value.",10
2b095     00          | 	byte	0
2b096                 | LR__2306
2b096     00          | 	byte	0
2b097     00          | 	byte	0
2b098                 | LR__2307
2b098     20          | 	byte	" "
2b099     00          | 	byte	0
2b09a                 | LR__2308
2b09a     53 74 61 74 
2b09e     75 73 3A 20 
2b0a2     44 69 73 61 
2b0a6     62 6C 65 64 | 	byte	"Status: Disabled"
2b0aa     00          | 	byte	0
2b0ab                 | LR__2309
2b0ab     53 74 61 74 
2b0af     75 73 3A 20 
2b0b3     65 6E 61 62 
2b0b7     6C 65 64    | 	byte	"Status: enabled"
2b0ba     00          | 	byte	0
2b0bb                 | LR__2310
2b0bb     4F 46 46    | 	byte	"OFF"
2b0be     00          | 	byte	0
2b0bf                 | LR__2311
2b0bf     49 4E 43 52 
2b0c3     20 4A 4F 47 
2b0c7     3A 20 25 30 
2b0cb     2E 31 66 6D 
2b0cf     6D          | 	byte	"INCR JOG: %0.1fmm"
2b0d0     00          | 	byte	0
2b0d1                 | LR__2312
2b0d1     43 4F 4E 54 
2b0d5     20 4A 4F 47 
2b0d9     3A 20 25 64 
2b0dd     6D 6D       | 	byte	"CONT JOG: %dmm"
2b0df     00          | 	byte	0
2b0e0                 | LR__2313
2b0e0     50 4F 53 4E 
2b0e4     20 4D 4F 56 
2b0e8     45 3A 20 25 
2b0ec     64 6D 6D    | 	byte	"POSN MOVE: %dmm"
2b0ef     00          | 	byte	0
2b0f0                 | LR__2314
2b0f0     48 4F 4D 45 | 	byte	"HOME"
2b0f4     00          | 	byte	0
2b0f5                 | LR__2315
2b0f5     48 4F 4D 49 
2b0f9     4E 47       | 	byte	"HOMING"
2b0fb     00          | 	byte	0
2b0fc                 | LR__2316
2b0fc     48 4F 4D 49 
2b100     4E 47 20 53 
2b104     45 45 4B 49 
2b108     4E 47 20 53 
2b10c     4C 4F 57    | 	byte	"HOMING SEEKING SLOW"
2b10f     00          | 	byte	0
2b110                 | LR__2317
2b110     48 4F 4D 49 
2b114     4E 47 20 42 
2b118     41 43 4B 49 
2b11c     4E 47 20 4F 
2b120     46 46       | 	byte	"HOMING BACKING OFF"
2b122     00          | 	byte	0
2b123                 | LR__2318
2b123     48 4F 4D 49 
2b127     4E 47 20 43 
2b12b     4F 4D 50 4C 
2b12f     45 54 45    | 	byte	"HOMING COMPLETE"
2b132     00          | 	byte	0
2b133                 | LR__2319
2b133     47 41 55 47 
2b137     45 20 4C 45 
2b13b     4E 47 54 48 
2b13f     3A 20 25 64 
2b143     6D 6D       | 	byte	"GAUGE LENGTH: %dmm"
2b145     00          | 	byte	0
2b146                 | LR__2320
2b146     47 41 55 47 
2b14a     45 20 46 4F 
2b14e     52 43 45 3A 
2b152     20 25 64 6D 
2b156     4E          | 	byte	"GAUGE FORCE: %dmN"
2b157     00          | 	byte	0
2b158                 | LR__2321
2b158     4F 46 46    | 	byte	"OFF"
2b15b     00          | 	byte	0
2b15c                 | LR__2322
2b15c     2A 2B 2C 3A 
2b160     3B 3C 3D 3E 
2b164     5B 5D 7C 22 
2b168     3F 7F       | 	byte	"*+,:;<=>[]|",34,"?",127
2b16a     00          | 	byte	0
2b16b                 | LR__2323
2b16b     46 41 54 33 
2b16f     32 20 20 20 | 	byte	"FAT32   "
2b173     00          | 	byte	0
2b174                 | LR__2324
2b174     54 5A       | 	byte	"TZ"
2b176     00          | 	byte	0
2b177                 | LR__2325
2b177     00          | 	byte	0
2b178     00          | 	byte	0
2b179     00 00 00    | 	alignl
2b17c                 | _dat_
2b17c     00 00 00 00 
      ...             
406dc     00 00 00 00 
406e0     00 00 00 00 | 	byte	$00[87400]
406e4     05 00 00 00 
406e8     00 00 00 00 
406ec     00 00 00 00 
406f0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
406f4     BC 08 04 00 | 	long	@@@_dat_ + 87872
406f8     C4 08 04 00 | 	long	@@@_dat_ + 87880
406fc     00 00 00 00 | 	byte	$00, $00, $00, $00
40700     CC 08 04 00 | 	long	@@@_dat_ + 87888
40704     D4 08 04 00 | 	long	@@@_dat_ + 87896
40708     00 00 00 00 
4070c     00 00 00 00 | 	byte	$00[8]
40710     01 00 00 00 
40714     06 00 00 00 
40718     00 00 00 00 
4071c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40720     00 00 00 00 | 	byte	$00, $00, $00, $00
40724     DC 08 04 00 | 	long	@@@_dat_ + 87904
40728     E4 08 04 00 | 	long	@@@_dat_ + 87912
4072c     00 00 00 00 | 	byte	$00, $00, $00, $00
40730     EC 08 04 00 | 	long	@@@_dat_ + 87920
40734     F4 08 04 00 | 	long	@@@_dat_ + 87928
40738     00 00 00 00 
4073c     00 00 00 00 | 	byte	$00[8]
40740     01 00 00 00 
40744     06 00 00 00 
40748     00 00 00 00 
4074c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40750     00 00 00 00 | 	byte	$00, $00, $00, $00
40754     FC 08 04 00 | 	long	@@@_dat_ + 87936
40758     04 09 04 00 | 	long	@@@_dat_ + 87944
4075c     00 00 00 00 | 	byte	$00, $00, $00, $00
40760     0C 09 04 00 | 	long	@@@_dat_ + 87952
40764     14 09 04 00 | 	long	@@@_dat_ + 87960
40768     00 00 00 00 
      ...             
408b8     00 00 00 00 
408bc     00 00 00 00 | 	byte	$00[344]
408c0     CC 5C 02 00 | 	long	@@@__system___tx
408c4     00 00 00 00 | 	byte	$00, $00, $00, $00
408c8     0C 5D 02 00 | 	long	@@@__system___rx
408cc     00 00 00 00 | 	byte	$00, $00, $00, $00
408d0     10 32 01 00 | 	long	@@@__rxtxioctl_0495
408d4     00 00 00 00 | 	byte	$00, $00, $00, $00
408d8     80 32 01 00 | 	long	@@@___dummy_flush_0496
408dc     00 00 00 00 | 	byte	$00, $00, $00, $00
408e0     CC 5C 02 00 | 	long	@@@__system___tx
408e4     00 00 00 00 | 	byte	$00, $00, $00, $00
408e8     0C 5D 02 00 | 	long	@@@__system___rx
408ec     00 00 00 00 | 	byte	$00, $00, $00, $00
408f0     10 32 01 00 | 	long	@@@__rxtxioctl_0495
408f4     00 00 00 00 | 	byte	$00, $00, $00, $00
408f8     80 32 01 00 | 	long	@@@___dummy_flush_0496
408fc     00 00 00 00 | 	byte	$00, $00, $00, $00
40900     CC 5C 02 00 | 	long	@@@__system___tx
40904     00 00 00 00 | 	byte	$00, $00, $00, $00
40908     0C 5D 02 00 | 	long	@@@__system___rx
4090c     00 00 00 00 | 	byte	$00, $00, $00, $00
40910     10 32 01 00 | 	long	@@@__rxtxioctl_0495
40914     00 00 00 00 | 	byte	$00, $00, $00, $00
40918     80 32 01 00 | 	long	@@@___dummy_flush_0496
4091c     00 00 00 00 
      ...             
40a14     00 00 00 00 
40a18     00 00 00 00 | 	byte	$00[256]
40a1c     63 00 04 58 
40a20     02 0A 3D 00 
40a24     01 08 28 0F 
40a28     50 32 03 05 | 	byte	$63, $00, $04, $58, $02, $0a, $3d, $00, $01, $08, $28, $0f, $50, $32, $03, $05
40a2c     00 00 00 00 
40a30     00 00 00    | 	byte	$00[7]
40a33     17 19 1D 14 
40a37     90 2F 89 23 
40a3b     25 D3 07 00 
40a3f     00 00 02 03 | 	byte	$17, $19, $1d, $14, $90, $2f, $89, $23, $25, $d3, $07, $00, $00, $00, $02, $03
40a43     1D 00 00 00 
40a47     00 00 00 00 
40a4b     00 00 00 00 
40a4f     19 32 94 D5 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $19, $32, $94, $d5
40a53     02 07 00 00 
40a57     04 A2 1A 00 
40a5b     90 1E 00 80 
40a5f     23 00 73 28 | 	byte	$02, $07, $00, $00, $04, $a2, $1a, $00, $90, $1e, $00, $80, $23, $00, $73, $28
40a63     00 68 2E 00 
40a67     68 00 00 00 
40a6b     00 00 00 00 
40a6f     00 00 00 00 | 	byte	$00, $68, $2e, $00, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40a73     00 00 00 00 
40a77     00 00 00 00 
40a7b     00 00 00 00 
40a7f     00 00 00 00 
40a83     00 00 00 00 
40a87     00 00 00 00 
40a8b     00          | 	byte	$00[25]
40a8c     16 15 14 11 
40a90     10 0F 0E 0D 
40a94     0C 09 08 07 
40a98     06 05 04 01 | 	byte	$16, $15, $14, $11, $10, $0f, $0e, $0d, $0c, $09, $08, $07, $06, $05, $04, $01
40a9c     00 FF FF FF 
40aa0     00 00 00 00 
40aa4     00 00 00 00 
40aa8     00 00 29 28 | 	byte	$00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $29, $28
40aac     27 26 25 24 
40ab0     23 22 21 20 
40ab4     1F 1E 1C 1B 
40ab8     19 14 13 12 | 	byte	$27, $26, $25, $24, $23, $22, $21, $20, $1f, $1e, $1c, $1b, $19, $14, $13, $12
40abc     11 10 0F 0E 
40ac0     0D 0C 0A 08 
40ac4     07 06 04 02 
40ac8     00 FF 00 00 | 	byte	$11, $10, $0f, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $02, $00, $ff, $00, $00
40acc     00 00 00 00 
40ad0     00 00 00 00 | 	byte	$00[8]
40ad4     71 01 00 00 
40ad8     00 00 00 00 
40adc     00 00 00 00 
40ae0     00 00 00 00 | 	byte	$71, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40ae4     00 00 00 00 
      ...             
42244     00 00 00 00 
42248     00          | 	byte	$00[5989]
42249     53 74 61 74 
4224d     75 73 00 4D 
42251     61 6E 75 61 
42255     6C 00 54 65 | 	byte	$53, $74, $61, $74, $75, $73, $00, $4d, $61, $6e, $75, $61, $6c, $00, $54, $65
42259     73 74 00 43 
4225d     61 6C 69 62 
42261     72 61 74 65 
42265     00 53 65 74 | 	byte	$73, $74, $00, $43, $61, $6c, $69, $62, $72, $61, $74, $65, $00, $53, $65, $74
42269     74 69 6E 67 
4226d     73 00 43 72 
42271     65 61 74 65 
42275     20 50 72 6F | 	byte	$74, $69, $6e, $67, $73, $00, $43, $72, $65, $61, $74, $65, $20, $50, $72, $6f
42279     66 69 6C 65 
4227d     73 00 00 00 
42281     00 00 00 00 
42285     00 00 00 00 | 	byte	$66, $69, $6c, $65, $73, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42289     00 00 00 00 
      ...             
465cd     00 00 00 00 
465d1     00 00 00 00 | 	byte	$00[17228]
465d5     4D 61 63 68 
465d9     69 6E 65 20 
465dd     53 74 61 74 
465e1     65 00 43 68 | 	byte	$4d, $61, $63, $68, $69, $6e, $65, $20, $53, $74, $61, $74, $65, $00, $43, $68
465e5     61 72 67 65 
465e9     20 50 75 6D 
465ed     70 00 53 77 
465f1     69 74 63 68 | 	byte	$61, $72, $67, $65, $20, $50, $75, $6d, $70, $00, $53, $77, $69, $74, $63, $68
465f5     65 64 20 50 
465f9     6F 77 65 72 
465fd     00 45 53 44 
46601     20 53 77 69 | 	byte	$65, $64, $20, $50, $6f, $77, $65, $72, $00, $45, $53, $44, $20, $53, $77, $69
46605     74 63 68 00 
46609     45 53 44 20 
4660d     55 70 70 65 
46611     72 00 45 53 | 	byte	$74, $63, $68, $00, $45, $53, $44, $20, $55, $70, $70, $65, $72, $00, $45, $53
46615     44 20 4C 6F 
46619     77 65 72 00 
4661d     53 65 72 76 
46621     6F 20 52 65 | 	byte	$44, $20, $4c, $6f, $77, $65, $72, $00, $53, $65, $72, $76, $6f, $20, $52, $65
46625     61 64 79 00 
46629     46 6F 72 63 
4662d     65 20 43 6F 
46631     6D 6D 00 53 | 	byte	$61, $64, $79, $00, $46, $6f, $72, $63, $65, $20, $43, $6f, $6d, $6d, $00, $53
46635     65 72 76 6F 
46639     20 43 6F 6D 
4663d     6D 00 4D 61 
46641     63 68 69 6E | 	byte	$65, $72, $76, $6f, $20, $43, $6f, $6d, $6d, $00, $4d, $61, $63, $68, $69, $6e
46645     65 20 49 6E 
46649     66 6F 00 46 
4664d     6F 72 63 65 
46651     20 28 4E 29 | 	byte	$65, $20, $49, $6e, $66, $6f, $00, $46, $6f, $72, $63, $65, $20, $28, $4e, $29
46655     00 50 6F 73 
46659     69 74 69 6F 
4665d     6E 20 28 6D 
46661     6D 29 00 00 | 	byte	$00, $50, $6f, $73, $69, $74, $69, $6f, $6e, $20, $28, $6d, $6d, $29, $00, $00
46665     00 00 00 00 
      ...             
4aa35     00 00 00 00 
4aa39     00 00 00    | 	byte	$00[17367]
4aa3c     52 75 6E 20 
4aa40     54 65 73 74 
4aa44     20 50 72 6F 
4aa48     66 69 6C 65 | 	byte	$52, $75, $6e, $20, $54, $65, $73, $74, $20, $50, $72, $6f, $66, $69, $6c, $65
4aa4c     00 4F 70 65 
4aa50     6E 00 52 75 
4aa54     6E 21 00 43 
4aa58     61 6E 63 65 | 	byte	$00, $4f, $70, $65, $6e, $00, $52, $75, $6e, $21, $00, $43, $61, $6e, $63, $65
4aa5c     6C 00 2E 2E 
4aa60     00 3C 00 3E 
4aa64     00 44 6F 6E 
4aa68     65 00 00 00 | 	byte	$6c, $00, $2e, $2e, $00, $3c, $00, $3e, $00, $44, $6f, $6e, $65, $00, $00, $00
4aa6c     00 00 00 00 
      ...             
4dc98     00 00 00 00 
4dc9c     00 00 00 00 | 	byte	$00[12852]
4dca0     4F 70 65 6E 
4dca4     00 4E 65 77 
4dca8     00 53 61 76 
4dcac     65 00 00 00 | 	byte	$4f, $70, $65, $6e, $00, $4e, $65, $77, $00, $53, $61, $76, $65, $00, $00, $00
4dcb0     D1 DC 04 00 | 	long	@@@_dat_ + 142165
4dcb4     D9 DC 04 00 | 	long	@@@_dat_ + 142173
4dcb8     DD DC 04 00 | 	long	@@@_dat_ + 142177
4dcbc     E4 DC 04 00 | 	long	@@@_dat_ + 142184
4dcc0     E9 DC 04 00 | 	long	@@@_dat_ + 142189
4dcc4     EE DC 04 00 | 	long	@@@_dat_ + 142194
4dcc8     F3 DC 04 00 | 	long	@@@_dat_ + 142199
4dccc     F8 DC 04 00 | 	long	@@@_dat_ + 142204
4dcd0     00 51 75 61 
4dcd4     72 74 65 74 
4dcd8     00 53 65 74 
4dcdc     00 4D 6F 74 | 	byte	$00, $51, $75, $61, $72, $74, $65, $74, $00, $53, $65, $74, $00, $4d, $6f, $74
4dce0     69 6F 6E 00 
4dce4     54 65 73 74 
4dce8     00 2E 51 52 
4dcec     54 00 2E 53 | 	byte	$69, $6f, $6e, $00, $54, $65, $73, $74, $00, $2e, $51, $52, $54, $00, $2e, $53
4dcf0     45 54 00 2E 
4dcf4     4D 4F 54 00 
4dcf8     2E 54 53 54 
4dcfc     00 00 00 00 | 	byte	$45, $54, $00, $2e, $4d, $4f, $54, $00, $2e, $54, $53, $54, $00, $00, $00, $00
4dd00     00 00 00 00 
      ...             
4df80     00 00 00 00 
4df84     00 00 00 00 | 	byte	$00[648]
4df88     B0 DF 04 00 | 	long	@@@_dat_ + 142900
4df8c     B8 DF 04 00 | 	long	@@@_dat_ + 142908
4df90     C0 DF 04 00 | 	long	@@@_dat_ + 142916
4df94     C8 DF 04 00 | 	long	@@@_dat_ + 142924
4df98     00 00 00 00 
4df9c     00 00 00 00 
4dfa0     00 00 00 00 
4dfa4     00 00 00 00 
4dfa8     00 00 00 00 
4dfac     00 00 00 00 
4dfb0     00 00 00 00 | 	byte	$00[28]
4dfb4     D0 8B 01 00 | 	long	@@@___root_opendir
4dfb8     00 00 00 00 | 	byte	$00, $00, $00, $00
4dfbc     7C 8C 01 00 | 	long	@@@___root_closedir
4dfc0     00 00 00 00 | 	byte	$00, $00, $00, $00
4dfc4     F0 8B 01 00 | 	long	@@@___root_readdir
4dfc8     00 00 00 00 | 	byte	$00, $00, $00, $00
4dfcc     84 8C 01 00 | 	long	@@@___root_stat
4dfd0     22 22 00 00 
4dfd4     5C 5C 00 00 
4dfd8     2F 2F 00 00 
4dfdc     62 08 00 00 | 	byte	$22, $22, $00, $00, $5c, $5c, $00, $00, $2f, $2f, $00, $00, $62, $08, $00, $00
4dfe0     66 0C 00 00 
4dfe4     6E 0A 00 00 
4dfe8     72 0D 00 00 
4dfec     74 09 00 00 | 	byte	$66, $0c, $00, $00, $6e, $0a, $00, $00, $72, $0d, $00, $00, $74, $09, $00, $00
4dff0     2D 39 32 32 
4dff4     33 33 37 32 
4dff8     30 33 36 38 
4dffc     35 34 37 37 | 	byte	$2d, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38, $35, $34, $37, $37
4e000     35 38 30 38 
4e004     00 39 32 32 
4e008     33 33 37 32 
4e00c     30 33 36 38 | 	byte	$35, $38, $30, $38, $00, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38
4e010     35 34 37 37 
4e014     35 38 30 37 
4e018     00 00 00 00 
4e01c     00 00 00 00 | 	byte	$35, $34, $37, $37, $35, $38, $30, $37, $00, $00, $00, $00, $00, $00, $00, $00
4e020     00 00 00 00 
      ...             
55c30     00 00 00 00 
55c34     00 00 00 00 | 	byte	$00[31768]
55c38     F4 5C 05 00 | 	long	@@@_dat_ + 174968
55c3c     F6 5C 05 00 | 	long	@@@_dat_ + 174970
55c40     F8 5C 05 00 | 	long	@@@_dat_ + 174972
55c44     FA 5C 05 00 | 	long	@@@_dat_ + 174974
55c48     FC 5C 05 00 | 	long	@@@_dat_ + 174976
55c4c     FE 5C 05 00 | 	long	@@@_dat_ + 174978
55c50     00 5D 05 00 | 	long	@@@_dat_ + 174980
55c54     02 5D 05 00 | 	long	@@@_dat_ + 174982
55c58     04 5D 05 00 | 	long	@@@_dat_ + 174984
55c5c     06 5D 05 00 | 	long	@@@_dat_ + 174986
55c60     08 5D 05 00 | 	long	@@@_dat_ + 174988
55c64     0C 5D 05 00 | 	long	@@@_dat_ + 174992
55c68     0E 5D 05 00 | 	long	@@@_dat_ + 174994
55c6c     10 5D 05 00 | 	long	@@@_dat_ + 174996
55c70     12 5D 05 00 | 	long	@@@_dat_ + 174998
55c74     14 5D 05 00 | 	long	@@@_dat_ + 175000
55c78     16 5D 05 00 | 	long	@@@_dat_ + 175002
55c7c     18 5D 05 00 | 	long	@@@_dat_ + 175004
55c80     1A 5D 05 00 | 	long	@@@_dat_ + 175006
55c84     1C 5D 05 00 | 	long	@@@_dat_ + 175008
55c88     1E 5D 05 00 | 	long	@@@_dat_ + 175010
55c8c     20 5D 05 00 | 	long	@@@_dat_ + 175012
55c90     22 5D 05 00 | 	long	@@@_dat_ + 175014
55c94     24 5D 05 00 | 	long	@@@_dat_ + 175016
55c98     26 5D 05 00 | 	long	@@@_dat_ + 175018
55c9c     28 5D 05 00 | 	long	@@@_dat_ + 175020
55ca0     2A 5D 05 00 | 	long	@@@_dat_ + 175022
55ca4     2C 5D 05 00 | 	long	@@@_dat_ + 175024
55ca8     2E 5D 05 00 | 	long	@@@_dat_ + 175026
55cac     30 5D 05 00 | 	long	@@@_dat_ + 175028
55cb0     32 5D 05 00 | 	long	@@@_dat_ + 175030
55cb4     34 5D 05 00 | 	long	@@@_dat_ + 175032
55cb8     38 5D 05 00 | 	long	@@@_dat_ + 175036
55cbc     3E 5D 05 00 | 	long	@@@_dat_ + 175042
55cc0     40 5D 05 00 | 	long	@@@_dat_ + 175044
55cc4     42 5D 05 00 | 	long	@@@_dat_ + 175046
55cc8     44 5D 05 00 | 	long	@@@_dat_ + 175048
55ccc     46 5D 05 00 | 	long	@@@_dat_ + 175050
55cd0     48 5D 05 00 | 	long	@@@_dat_ + 175052
55cd4     4A 5D 05 00 | 	long	@@@_dat_ + 175054
55cd8     4C 5D 05 00 | 	long	@@@_dat_ + 175056
55cdc     4E 5D 05 00 | 	long	@@@_dat_ + 175058
55ce0     50 5D 05 00 | 	long	@@@_dat_ + 175060
55ce4     57 5D 05 00 | 	long	@@@_dat_ + 175067
55ce8     59 5D 05 00 | 	long	@@@_dat_ + 175069
55cec     5F 5D 05 00 | 	long	@@@_dat_ + 175075
55cf0     61 5D 05 00 | 	long	@@@_dat_ + 175077
55cf4     30 00 31 00 
55cf8     32 00 33 00 
55cfc     34 00 35 00 
55d00     36 00 37 00 | 	byte	$30, $00, $31, $00, $32, $00, $33, $00, $34, $00, $35, $00, $36, $00, $37, $00
55d04     38 00 39 00 
55d08     74 61 62 00 
55d0c     71 00 77 00 
55d10     65 00 72 00 | 	byte	$38, $00, $39, $00, $74, $61, $62, $00, $71, $00, $77, $00, $65, $00, $72, $00
55d14     74 00 79 00 
55d18     75 00 69 00 
55d1c     6F 00 70 00 
55d20     2D 00 61 00 | 	byte	$74, $00, $79, $00, $75, $00, $69, $00, $6f, $00, $70, $00, $2d, $00, $61, $00
55d24     73 00 64 00 
55d28     66 00 67 00 
55d2c     68 00 6A 00 
55d30     6B 00 6C 00 | 	byte	$73, $00, $64, $00, $66, $00, $67, $00, $68, $00, $6a, $00, $6b, $00, $6c, $00
55d34     64 65 6C 00 
55d38     73 68 69 66 
55d3c     74 00 7A 00 
55d40     78 00 63 00 | 	byte	$64, $65, $6c, $00, $73, $68, $69, $66, $74, $00, $7a, $00, $78, $00, $63, $00
55d44     76 00 62 00 
55d48     6E 00 6D 00 
55d4c     2C 00 2E 00 
55d50     63 61 6E 63 | 	byte	$76, $00, $62, $00, $6e, $00, $6d, $00, $2c, $00, $2e, $00, $63, $61, $6e, $63
55d54     65 6C 00 3C 
55d58     00 73 70 61 
55d5c     63 65 00 3E 
55d60     00 73 75 62 | 	byte	$65, $6c, $00, $3c, $00, $73, $70, $61, $63, $65, $00, $3e, $00, $73, $75, $62
55d64     6D 69 74 00 
55d68     44 49 53 41 
55d6c     42 4C 44 00 
55d70     45 4E 41 42 | 	byte	$6d, $69, $74, $00, $44, $49, $53, $41, $42, $4c, $44, $00, $45, $4e, $41, $42
55d74     4C 45 44 00 
55d78     53 4D 50 20 
55d7c     4C 49 4D 00 
55d80     4D 43 48 20 | 	byte	$4c, $45, $44, $00, $53, $4d, $50, $20, $4c, $49, $4d, $00, $4d, $43, $48, $20
55d84     4C 49 4D 00 
55d88     46 41 55 4C 
55d8c     54 45 44 00 
55d90     4C 45 4E 47 | 	byte	$4c, $49, $4d, $00, $46, $41, $55, $4c, $54, $45, $44, $00, $4c, $45, $4e, $47
55d94     54 48 00 46 
55d98     4F 52 43 45 
55d9c     00 54 45 4E 
55da0     53 49 4F 4E | 	byte	$54, $48, $00, $46, $4f, $52, $43, $45, $00, $54, $45, $4e, $53, $49, $4f, $4e
55da4     00 43 4F 4D 
55da8     50 52 45 53 
55dac     00 55 50 50 
55db0     45 52 00 4C | 	byte	$00, $43, $4f, $4d, $50, $52, $45, $53, $00, $55, $50, $50, $45, $52, $00, $4c
55db4     4F 57 45 52 
55db8     00 44 4F 4F 
55dbc     52 00 53 54 
55dc0     4F 50 50 45 | 	byte	$4f, $57, $45, $52, $00, $44, $4f, $4f, $52, $00, $53, $54, $4f, $50, $50, $45
55dc4     44 00 4D 4F 
55dc8     56 49 4E 47 
55dcc     00 4D 41 4E 
55dd0     55 41 4C 00 | 	byte	$44, $00, $4d, $4f, $56, $49, $4e, $47, $00, $4d, $41, $4e, $55, $41, $4c, $00
55dd4     54 45 53 54 
55dd8     00 52 55 4E 
55ddc     00 53 74 61 
55de0     74 75 73 00 | 	byte	$54, $45, $53, $54, $00, $52, $55, $4e, $00, $53, $74, $61, $74, $75, $73, $00
55de4     43 6F 6E 64 
55de8     69 74 69 6F 
55dec     6E 00 4D 6F 
55df0     64 65 00 4F | 	byte	$43, $6f, $6e, $64, $69, $74, $69, $6f, $6e, $00, $4d, $6f, $64, $65, $00, $4f
55df4     66 66 00 49 
55df8     4E 43 52 00 
55dfc     43 4F 4E 54 
55e00     00 50 4F 53 | 	byte	$66, $66, $00, $49, $4e, $43, $52, $00, $43, $4f, $4e, $54, $00, $50, $4f, $53
55e04     4E 00 48 4F 
55e08     4D 45 00 47 
55e0c     41 2D 4C 00 
55e10     47 41 2D 46 | 	byte	$4e, $00, $48, $4f, $4d, $45, $00, $47, $41, $2d, $4c, $00, $47, $41, $2d, $46
55e14     00 53 65 6C 
55e18     65 63 74 00 
55e1c     01 01 01 01 
55e20     01 01 01 01 | 	byte	$00, $53, $65, $6c, $65, $63, $74, $00, $01, $01, $01, $01, $01, $01, $01, $01
55e24     01 91 11 11 
55e28     11 11 01 01 
55e2c     01 01 01 01 
55e30     01 01 01 01 | 	byte	$01, $91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
55e34     01 01 01 01 
55e38     01 01 01 01 | 	byte	$01[8]
55e3c     90 20 20 20 
55e40     20 20 20 20 
55e44     20 20 20 20 
55e48     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
55e4c     42 42 42 42 
55e50     42 42 42 42 
55e54     42 42       | 	byte	$42[10]
55e56     20 20 20 20 
55e5a     20 20 20    | 	byte	$20[7]
55e5d     44 44 44 44 
55e61     44 44       | 	byte	$44[6]
55e63     04 04 04 04 
55e67     04 04 04 04 
55e6b     04 04 04 04 
55e6f     04 04 04 04 
55e73     04 04 04 04 | 	byte	$04[20]
55e77     20 20 20 20 
55e7b     20 20       | 	byte	$20[6]
55e7d     48 48 48 48 
55e81     48 48       | 	byte	$48[6]
55e83     08 08 08 08 
55e87     08 08 08 08 
55e8b     08 08 08 08 
55e8f     08 08 08 08 
55e93     08 08 08 08 | 	byte	$08[20]
55e97     20 20 20 20 
55e9b     01 00 00 00 
55e9f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
55ea0                 | 	alignl
55ea0                 | _jm_fullduplexserial_spin2_dat_
55ea0                 | 
55ea0                 |                 org
55ea0 000             | 
55ea0 000 28 06 64 FD | uart_mgr        setq      #4-1                                  ' get 4 parameters from hub
55ea4 001 00 3B 04 FB |                 rdlong    rxd, ptra
55ea8 002             | 
55ea8 002             | 
55ea8 002 1F 3A 14 F4 | uart_main       testb     rxd, #31                      wc      ' rx in use?
55eac 003 0C 00 B0 3D |     if_nc       call      #rx_serial
55eb0 004             | 
55eb0 004 1F 3C 14 F4 |                 testb     txd, #31                      wc      ' tx in use?
55eb4 005 2C 00 B0 3D |     if_nc       call      #tx_serial
55eb8 006             | 
55eb8 006 EC FF 9F FD |                 jmp       #uart_main
55ebc 007             | 
55ebc 007             | 
55ebc 007 40 3A 70 FD | rx_serial       testp     rxd                           wc      ' anything waiting?
55ec0 008 2D 00 64 3D |     if_nc       ret
55ec4 009             | 
55ec4 009 1D 46 88 FA |                 rdpin     t3, rxd                               ' read new byte
55ec8 00a 18 46 44 F0 |                 shr       t3, #24                               ' align lsb
55ecc 00b 1F 42 00 F6 |                 mov       t1, p_rxbuf                           ' t1 := @rxbuf
55ed0 00c 04 45 04 FB |                 rdlong    t2, ptra[4]                           ' t2 := rxhead
55ed4 00d 22 42 00 F1 |                 add       t1, t2
55ed8 00e 21 46 40 FC |                 wrbyte    t3, t1                                ' rxbuf[rxhead] := t3
55edc 00f FF 44 04 F7 |                 incmod    t2, #(BUF_SIZE-1)                     ' update head index
55ee0 010 04 45 64 0C |     _ret_       wrlong    t2, ptra[4]                           ' write head index back to hub
55ee4 011             | 
55ee4 011             | 
55ee4 011 1E 42 98 FA | tx_serial       rdpin     t1, txd                       wc      ' check busy flag
55ee8 012 2D 00 64 CD |     if_c        ret                                             '  abort if busy
55eec 013             | 
55eec 013 06 43 04 FB |                 rdlong    t1, ptra[6]                           ' t1 = txhead
55ef0 014 07 45 04 FB |                 rdlong    t2, ptra[7]                           ' t2 = txtail
55ef4 015 22 42 08 F2 |                 cmp       t1, t2                        wz      ' byte(s) to tx?
55ef8 016 2D 00 64 AD |     if_e        ret
55efc 017             | 
55efc 017 20 42 00 F6 |                 mov       t1, p_txbuf                           ' start of tx buffer
55f00 018 22 42 00 F1 |                 add       t1, t2                                ' add tail index
55f04 019 21 46 C0 FA |                 rdbyte    t3, t1                                ' t3 := txbuf[txtail]
55f08 01a 1E 46 20 FC |                 wypin     t3, txd                               ' load into sp uart
55f0c 01b FF 44 04 F7 |                 incmod    t2, #(BUF_SIZE-1)                     ' update tail index
55f10 01c 07 45 64 0C |     _ret_       wrlong    t2, ptra[7]                           ' write tail index back to hub
55f14 01d             | 
55f14 01d             | 
55f14 01d             | ' --------------------------------------------------------------------------------------------------
55f14 01d             | 
55f14 01d             | rxd             res       1                                     ' receive pin
55f14 01d             | rxd             res       1                                     ' receive pin
55f14 01d             | txd             res       1                                     ' transmit pin
55f14 01d             | txd             res       1                                     ' transmit pin
55f14 01d             | p_rxbuf         res       1                                     ' pointer to rxbuf
55f14 01d             | p_rxbuf         res       1                                     ' pointer to rxbuf
55f14 01d             | p_txbuf         res       1                                     ' pointer to txbuf
55f14 01d             | p_txbuf         res       1                                     ' pointer to txbuf
55f14 01d             | 
55f14 01d             | t1              res       1                                     ' work vars
55f14 01d             | t1              res       1                                     ' work vars
55f14 01d             | t2              res       1
55f14 01d             | t2              res       1
55f14 01d             | t3              res       1
55f14 01d             | t3              res       1
55f14 01d             |                 fit       496
55f14 01d             | _fatfs_cc_dat_
55f14 01d 43 55 45 41 
55f18 01e 41 41 41 43 
55f1c 01f 45 45 45 49 
55f20 020 49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
55f24 021 45 92 92 4F 
55f28 022 4F 4F 55 55 
55f2c 023 59 4F 55 4F 
55f30 024 9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
55f34 025 41 49 4F 55 
55f38 026 A5 A5 A6 A7 
55f3c 027 A8 A9 AA AB 
55f40 028 AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
55f44 029 B0 B1 B2 B3 
55f48 02a B4 41 41 41 
55f4c 02b B8 B9 BA BB 
55f50 02c BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
55f54 02d C0 C1 C2 C3 
55f58 02e C4 C5 41 41 
55f5c 02f C8 C9 CA CB 
55f60 030 CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
55f64 031 D1 D1 45 45 
55f68 032 45 49 49 49 
55f6c 033 49 D9 DA DB 
55f70 034 DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
55f74 035 4F E1 4F 4F 
55f78 036 4F 4F E6 E8 
55f7c 037 E8 55 55 55 
55f80 038 59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
55f84 039 F0 F1 F2 F3 
55f88 03a F4 F5 F6 F7 
55f8c 03b F8 F9 FA FB 
55f90 03c FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
55f94 03d 00 00 00 00 
55f98 03e 00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
55f9c 03f EC 5F 05 00 | 	long	@@@_fatfs_cc_dat_ + 216
55fa0 040 F4 5F 05 00 | 	long	@@@_fatfs_cc_dat_ + 224
55fa4 041 FC 5F 05 00 | 	long	@@@_fatfs_cc_dat_ + 232
55fa8 042 04 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 240
55fac 043 0C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 248
55fb0 044 00 00 00 00 
55fb4 045 00 00 00 00 
55fb8 046 00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55fbc 047 14 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 256
55fc0 048 1C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 264
55fc4 049 24 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 272
55fc8 04a 2C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 280
55fcc 04b 34 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 288
55fd0 04c 3C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 296
55fd4 04d 44 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 304
55fd8 04e 4C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 312
55fdc 04f 54 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 320
55fe0 050 5C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 328
55fe4 051 64 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 336
55fe8 052 6C 60 05 00 | 	long	@@@_fatfs_cc_dat_ + 344
55fec 053 00 00 00 00 | 	byte	$00, $00, $00, $00
55ff0 054 B0 3C 02 00 | 	long	@@@_fatfs_cc_v_close
55ff4 055 00 00 00 00 | 	byte	$00, $00, $00, $00
55ff8 056 BC 40 02 00 | 	long	@@@_fatfs_cc_v_read
55ffc 057 00 00 00 00 | 	byte	$00, $00, $00, $00
56000 058 D0 41 02 00 | 	long	@@@_fatfs_cc_v_write
56004 059 00 00 00 00 | 	byte	$00, $00, $00, $00
56008 05a B0 42 02 00 | 	long	@@@_fatfs_cc_v_lseek
5600c 05b 00 00 00 00 | 	byte	$00, $00, $00, $00
56010 05c 38 43 02 00 | 	long	@@@_fatfs_cc_v_ioctl
56014 05d 00 00 00 00 | 	byte	$00, $00, $00, $00
56018 05e 8C 43 02 00 | 	long	@@@_fatfs_cc_v_open
5601c 05f 00 00 00 00 | 	byte	$00, $00, $00, $00
56020 060 14 3C 02 00 | 	long	@@@_fatfs_cc_v_creat
56024 061 00 00 00 00 | 	byte	$00, $00, $00, $00
56028 062 F4 3C 02 00 | 	long	@@@_fatfs_cc_v_opendir
5602c 063 00 00 00 00 | 	byte	$00, $00, $00, $00
56030 064 68 3D 02 00 | 	long	@@@_fatfs_cc_v_closedir
56034 065 00 00 00 00 | 	byte	$00, $00, $00, $00
56038 066 A8 3D 02 00 | 	long	@@@_fatfs_cc_v_readdir
5603c 067 00 00 00 00 | 	byte	$00, $00, $00, $00
56040 068 CC 3E 02 00 | 	long	@@@_fatfs_cc_v_stat
56044 069 00 00 00 00 | 	byte	$00, $00, $00, $00
56048 06a 4C 43 02 00 | 	long	@@@_fatfs_cc_v_mkdir
5604c 06b 00 00 00 00 | 	byte	$00, $00, $00, $00
56050 06c 6C 43 02 00 | 	long	@@@_fatfs_cc_v_rmdir
56054 06d 00 00 00 00 | 	byte	$00, $00, $00, $00
56058 06e 5C 43 02 00 | 	long	@@@_fatfs_cc_v_remove
5605c 06f 00 00 00 00 | 	byte	$00, $00, $00, $00
56060 070 7C 43 02 00 | 	long	@@@_fatfs_cc_v_rename
56064 071 00 00 00 00 | 	byte	$00, $00, $00, $00
56068 072 84 44 02 00 | 	long	@@@_fatfs_cc_v_init
5606c 073 00 00 00 00 | 	byte	$00, $00, $00, $00
56070 074 8C 44 02 00 | 	long	@@@_fatfs_cc_v_deinit
56074 075 FF FF FF FF 
56078 076 1F 00 00 00 
5607c 077 1C 00 00 00 
56080 078 1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
56084 079 1E 00 00 00 
56088 07a 1F 00 00 00 
5608c 07b 1E 00 00 00 
56090 07c 1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
56094 07d 1F 00 00 00 
56098 07e 1E 00 00 00 
5609c 07f 1F 00 00 00 
560a0 080 1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
560a4 081 1F 00 00 00 
560a8 082 00 00 00 00 
560ac 083 1F 00 00 00 
560b0 084 3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
560b4 085 5A 00 00 00 
560b8 086 78 00 00 00 
560bc 087 97 00 00 00 
560c0 088 B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
560c4 089 D4 00 00 00 
560c8 08a F3 00 00 00 
560cc 08b 11 01 00 00 
560d0 08c 30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
560d4 08d 4E 01 00 00 
560d8 08e 6D 01 00 00 
560dc 08f FF FF FF FF 
560e0 090 00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
560e4 091 00 00 00 00 
      ...             
560fc 097 00 00 00 00 
56100 098 00 00 00 00 | 	byte	$00[32]
56104 099 22 61 05 00 | 	long	@@@_fatfs_cc_dat_ + 526
56108 09a 26 61 05 00 | 	long	@@@_fatfs_cc_dat_ + 530
5610c 09b 00 00 00 00 
56110 09c 00 00 00 00 
56114 09d 00 00 00 00 
56118 09e 00 00 00 00 
5611c 09f 00 00       | 	byte	$00[18]
5611e 09f 3F 3F 3F 00 
56122 0a0 55 43 54 00 
56126 0a1 55 43 54 00 
5612a 0a2 00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
5612e 0a3 00 00 00 00 
56132 0a4 00 00       | 	byte	$00[6]
56134 0a5 05 00 00 00 
56138 0a6 00 00 00 00 
5613c 0a7 00 00 00 00 
56140 0a8 00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
56144 0a9 0C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1016
56148 0aa 14 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1024
5614c 0ab 00 00 00 00 | 	byte	$00, $00, $00, $00
56150 0ac 1C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1032
56154 0ad 24 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1040
56158 0ae 00 00 00 00 
5615c 0af 00 00 00 00 | 	byte	$00[8]
56160 0b0 01 00 00 00 
56164 0b1 06 00 00 00 
56168 0b2 00 00 00 00 
5616c 0b3 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
56170 0b4 00 00 00 00 | 	byte	$00, $00, $00, $00
56174 0b5 2C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1048
56178 0b6 34 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1056
5617c 0b7 00 00 00 00 | 	byte	$00, $00, $00, $00
56180 0b8 3C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1064
56184 0b9 44 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1072
56188 0ba 00 00 00 00 
5618c 0bb 00 00 00 00 | 	byte	$00[8]
56190 0bc 01 00 00 00 
56194 0bd 06 00 00 00 
56198 0be 00 00 00 00 
5619c 0bf 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
561a0 0c0 00 00 00 00 | 	byte	$00, $00, $00, $00
561a4 0c1 4C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1080
561a8 0c2 54 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1088
561ac 0c3 00 00 00 00 | 	byte	$00, $00, $00, $00
561b0 0c4 5C 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1096
561b4 0c5 64 63 05 00 | 	long	@@@_fatfs_cc_dat_ + 1104
561b8 0c6 00 00 00 00 
      ...             
56308 11a 00 00 00 00 
5630c 11b 00 00 00 00 | 	byte	$00[344]
56310 11c CC 5C 02 00 | 	long	@@@__system___tx
56314 11d 00 00 00 00 | 	byte	$00, $00, $00, $00
56318 11e 0C 5D 02 00 | 	long	@@@__system___rx
5631c 11f 00 00 00 00 | 	byte	$00, $00, $00, $00
56320 120 40 52 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1434
56324 121 00 00 00 00 | 	byte	$00, $00, $00, $00
56328 122 B0 52 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1435
5632c 123 00 00 00 00 | 	byte	$00, $00, $00, $00
56330 124 CC 5C 02 00 | 	long	@@@__system___tx
56334 125 00 00 00 00 | 	byte	$00, $00, $00, $00
56338 126 0C 5D 02 00 | 	long	@@@__system___rx
5633c 127 00 00 00 00 | 	byte	$00, $00, $00, $00
56340 128 40 52 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1434
56344 129 00 00 00 00 | 	byte	$00, $00, $00, $00
56348 12a B0 52 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1435
5634c 12b 00 00 00 00 | 	byte	$00, $00, $00, $00
56350 12c CC 5C 02 00 | 	long	@@@__system___tx
56354 12d 00 00 00 00 | 	byte	$00, $00, $00, $00
56358 12e 0C 5D 02 00 | 	long	@@@__system___rx
5635c 12f 00 00 00 00 | 	byte	$00, $00, $00, $00
56360 130 40 52 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1434
56364 131 00 00 00 00 | 	byte	$00, $00, $00, $00
56368 132 B0 52 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1435
5636c 133 00 00 00 00 
56370 134 00 00 00 00 
56374 135 00          | 	byte	$00[9]
56375 135 CA 9A 3B 00 
56379 136 00 00 00 01 
5637d 137 01 01 01 01 
56381 138 01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
56385 139 91 11 11 11 
56389 13a 11 01 01 01 
5638d 13b 01 01 01 01 
56391 13c 01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
56395 13d 01 01 01 01 
56399 13e 01 01 01    | 	byte	$01[7]
5639c 13f 90 20 20 20 
563a0 140 20 20 20 20 
563a4 141 20 20 20 20 
563a8 142 20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
563ac 143 42 42 42 42 
563b0 144 42 42 42 42 
563b4 145 42 42       | 	byte	$42[10]
563b6 145 20 20 20 20 
563ba 146 20 20 20    | 	byte	$20[7]
563bd 147 44 44 44 44 
563c1 148 44 44       | 	byte	$44[6]
563c3 148 04 04 04 04 
563c7 149 04 04 04 04 
563cb 14a 04 04 04 04 
563cf 14b 04 04 04 04 
563d3 14c 04 04 04 04 | 	byte	$04[20]
563d7 14d 20 20 20 20 
563db 14e 20 20       | 	byte	$20[6]
563dd 14f 48 48 48 48 
563e1 150 48 48       | 	byte	$48[6]
563e3 150 08 08 08 08 
563e7 151 08 08 08 08 
563eb 152 08 08 08 08 
563ef 153 08 08 08 08 
563f3 154 08 08 08 08 | 	byte	$08[20]
563f7 155 20 20 20 20 
563fb 156 01 00 00 00 
563ff 157 00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
56400 158             | 	alignl
56400 158             | __system__dat_
56400 158 00 00 00 00 
56404 159 00 00 00 00 | 	byte	$00[8]
56408 15a 03 00 00 00 
5640c 15b 00 00 00 00 
56410 15c 00 00 00 00 
56414 15d 00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
56418 15e 00 00 00 00 
      ...             
5669c 1ff 00 00 00 00 
566a0 200 00 00 00 00 | 	byte	$00[652]
566a4 201 CC 66 05 00 | 	long	@@@__system__dat_ + 716
566a8 202 D4 66 05 00 | 	long	@@@__system__dat_ + 724
566ac 203 DC 66 05 00 | 	long	@@@__system__dat_ + 732
566b0 204 E4 66 05 00 | 	long	@@@__system__dat_ + 740
566b4 205 00 00 00 00 
566b8 206 00 00 00 00 
566bc 207 00 00 00 00 
566c0 208 00 00 00 00 
566c4 209 00 00 00 00 
566c8 20a 00 00 00 00 
566cc 20b 00 00 00 00 | 	byte	$00[28]
566d0 20c DC 8F 02 00 | 	long	@@@__system____root_opendir
566d4 20d 00 00 00 00 | 	byte	$00, $00, $00, $00
566d8 20e 78 90 02 00 | 	long	@@@__system____root_closedir
566dc 20f 00 00 00 00 | 	byte	$00, $00, $00, $00
566e0 210 F4 8F 02 00 | 	long	@@@__system____root_readdir
566e4 211 00 00 00 00 | 	byte	$00, $00, $00, $00
566e8 212 80 90 02 00 | 	long	@@@__system____root_stat
566ec 213 00 00 00 00 
566f0 214 00 00 00 00 
566f4 215 00 00 00 00 
566f8 216 00 00 00 00 | 	byte	$00[16]
566fc 217 05 00 00 00 
56700 218 00 00 00 00 
56704 219 00 00 00 00 
56708 21a 00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
5670c 21b D4 68 05 00 | 	long	@@@__system__dat_ + 1236
56710 21c DC 68 05 00 | 	long	@@@__system__dat_ + 1244
56714 21d 00 00 00 00 | 	byte	$00, $00, $00, $00
56718 21e E4 68 05 00 | 	long	@@@__system__dat_ + 1252
5671c 21f EC 68 05 00 | 	long	@@@__system__dat_ + 1260
56720 220 00 00 00 00 
56724 221 00 00 00 00 | 	byte	$00[8]
56728 222 01 00 00 00 
5672c 223 06 00 00 00 
56730 224 00 00 00 00 
56734 225 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
56738 226 00 00 00 00 | 	byte	$00, $00, $00, $00
5673c 227 F4 68 05 00 | 	long	@@@__system__dat_ + 1268
56740 228 FC 68 05 00 | 	long	@@@__system__dat_ + 1276
56744 229 00 00 00 00 | 	byte	$00, $00, $00, $00
56748 22a 04 69 05 00 | 	long	@@@__system__dat_ + 1284
5674c 22b 0C 69 05 00 | 	long	@@@__system__dat_ + 1292
56750 22c 00 00 00 00 
56754 22d 00 00 00 00 | 	byte	$00[8]
56758 22e 01 00 00 00 
5675c 22f 06 00 00 00 
56760 230 00 00 00 00 
56764 231 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
56768 232 00 00 00 00 | 	byte	$00, $00, $00, $00
5676c 233 14 69 05 00 | 	long	@@@__system__dat_ + 1300
56770 234 1C 69 05 00 | 	long	@@@__system__dat_ + 1308
56774 235 00 00 00 00 | 	byte	$00, $00, $00, $00
56778 236 24 69 05 00 | 	long	@@@__system__dat_ + 1316
5677c 237 2C 69 05 00 | 	long	@@@__system__dat_ + 1324
56780 238 00 00 00 00 
      ...             
568d0 28c 00 00 00 00 
568d4 28d 00 00 00 00 | 	byte	$00[344]
568d8 28e CC 5C 02 00 | 	long	@@@__system___tx
568dc 28f 00 00 00 00 | 	byte	$00, $00, $00, $00
568e0 290 0C 5D 02 00 | 	long	@@@__system___rx
568e4 291 00 00 00 00 | 	byte	$00, $00, $00, $00
568e8 292 40 96 02 00 | 	long	@@@__system___rxtxioctl_2096
568ec 293 00 00 00 00 | 	byte	$00, $00, $00, $00
568f0 294 B0 96 02 00 | 	long	@@@__system____dummy_flush_2097
568f4 295 00 00 00 00 | 	byte	$00, $00, $00, $00
568f8 296 CC 5C 02 00 | 	long	@@@__system___tx
568fc 297 00 00 00 00 | 	byte	$00, $00, $00, $00
56900 298 0C 5D 02 00 | 	long	@@@__system___rx
56904 299 00 00 00 00 | 	byte	$00, $00, $00, $00
56908 29a 40 96 02 00 | 	long	@@@__system___rxtxioctl_2096
5690c 29b 00 00 00 00 | 	byte	$00, $00, $00, $00
56910 29c B0 96 02 00 | 	long	@@@__system____dummy_flush_2097
56914 29d 00 00 00 00 | 	byte	$00, $00, $00, $00
56918 29e CC 5C 02 00 | 	long	@@@__system___tx
5691c 29f 00 00 00 00 | 	byte	$00, $00, $00, $00
56920 2a0 0C 5D 02 00 | 	long	@@@__system___rx
56924 2a1 00 00 00 00 | 	byte	$00, $00, $00, $00
56928 2a2 40 96 02 00 | 	long	@@@__system___rxtxioctl_2096
5692c 2a3 00 00 00 00 | 	byte	$00, $00, $00, $00
56930 2a4 B0 96 02 00 | 	long	@@@__system____dummy_flush_2097
56934 2a5             | __heap_base
56934 2a5 00 00 00 00 
      ...             
59e9c fff 00 00 00 00 
59ea0 1000 00 00 00 00 
59ea4 1001 00 00 00 00 
59ea8 1002 00 00 00 00 
59eac 1003 00 00 00 00 
59eb0 1004 00 00 00 00 
59eb4 1005 00 00 00 00 
59eb8 1006 00 00 00 00 
59ebc 1007 00 00 00 00 
59ec0 1008 00 00 00 00 
59ec4 1009 00 00 00 00 
59ec8 100a 00 00 00 00 
59ecc 100b 00 00 00 00 
59ed0 100c 00 00 00 00 
59ed4 100d 00 00 00 00 
59ed8 100e 00 00 00 00 
59edc 100f 00 00 00 00 
59ee0 1010 00 00 00 00 
59ee4 1011 00 00 00 00 
59ee8 1012 00 00 00 00 
59eec 1013 00 00 00 00 
59ef0 1014 00 00 00 00 
59ef4 1015 00 00 00 00 
59ef8 1016 00 00 00 00 
59efc 1017 00 00 00 00 
59f00 1018 00 00 00 00 
59f04 1019 00 00 00 00 
59f08 101a 00 00 00 00 
59f0c 101b 00 00 00 00 
59f10 101c 00 00 00 00 
59f14 101d 00 00 00 00 
59f18 101e 00 00 00 00 
59f1c 101f 00 00 00 00 
59f20 1020 00 00 00 00 
59f24 1021 00 00 00 00 
59f28 1022 00 00 00 00 
59f2c 1023 00 00 00 00 
59f30 1024 00 00 00 00 
59f34 1025 00 00 00 00 
59f38 1026 00 00 00 00 
59f3c 1027 00 00 00 00 
59f40 1028 00 00 00 00 
59f44 1029 00 00 00 00 
59f48 102a 00 00 00 00 
59f4c 102b 00 00 00 00 
59f50 102c 00 00 00 00 
59f54 102d 00 00 00 00 
59f58 102e 00 00 00 00 
59f5c 102f 00 00 00 00 
59f60 1030 00 00 00 00 
59f64 1031 00 00 00 00 
59f68 1032 00 00 00 00 
59f6c 1033 00 00 00 00 
59f70 1034 00 00 00 00 
59f74 1035 00 00 00 00 
59f78 1036 00 00 00 00 
59f7c 1037 00 00 00 00 
59f80 1038 00 00 00 00 
59f84 1039 00 00 00 00 
59f88 103a 00 00 00 00 
59f8c 103b 00 00 00 00 
59f90 103c 00 00 00 00 
59f94 103d 00 00 00 00 
59f98 103e 00 00 00 00 
59f9c 103f 00 00 00 00 
59fa0 1040 00 00 00 00 
59fa4 1041 00 00 00 00 
59fa8 1042 00 00 00 00 
59fac 1043 00 00 00 00 
59fb0 1044 00 00 00 00 
59fb4 1045 00 00 00 00 
59fb8 1046 00 00 00 00 
59fbc 1047 00 00 00 00 
59fc0 1048 00 00 00 00 
59fc4 1049 00 00 00 00 
59fc8 104a 00 00 00 00 
59fcc 104b 00 00 00 00 
59fd0 104c 00 00 00 00 
59fd4 104d 00 00 00 00 
59fd8 104e 00 00 00 00 
59fdc 104f 00 00 00 00 
59fe0 1050 00 00 00 00 
59fe4 1051 00 00 00 00 
59fe8 1052 00 00 00 00 
59fec 1053 00 00 00 00 
59ff0 1054 00 00 00 00 
59ff4 1055 00 00 00 00 
59ff8 1056 00 00 00 00 
59ffc 1057 00 00 00 00 
5a000 1058 00 00 00 00 
5a004 1059 00 00 00 00 
5a008 105a 00 00 00 00 
5a00c 105b 00 00 00 00 
5a010 105c 00 00 00 00 
5a014 105d 00 00 00 00 
5a018 105e 00 00 00 00 
5a01c 105f 00 00 00 00 
5a020 1060 00 00 00 00 
5a024 1061 00 00 00 00 
5a028 1062 00 00 00 00 
5a02c 1063 00 00 00 00 
5a030 1064 00 00 00 00 
5a034 1065 00 00 00 00 
5a038 1066 00 00 00 00 
5a03c 1067 00 00 00 00 
5a040 1068 00 00 00 00 
5a044 1069 00 00 00 00 
5a048 106a 00 00 00 00 
5a04c 106b 00 00 00 00 
5a050 106c 00 00 00 00 
5a054 106d 00 00 00 00 
5a058 106e 00 00 00 00 
5a05c 106f 00 00 00 00 
5a060 1070 00 00 00 00 
5a064 1071 00 00 00 00 
5a068 1072 00 00 00 00 
5a06c 1073 00 00 00 00 
5a070 1074 00 00 00 00 
5a074 1075 00 00 00 00 
5a078 1076 00 00 00 00 
5a07c 1077 00 00 00 00 
5a080 1078 00 00 00 00 
5a084 1079 00 00 00 00 
5a088 107a 00 00 00 00 
5a08c 107b 00 00 00 00 
5a090 107c 00 00 00 00 
5a094 107d 00 00 00 00 
5a098 107e 00 00 00 00 
5a09c 107f 00 00 00 00 
5a0a0 1080 00 00 00 00 
5a0a4 1081 00 00 00 00 
5a0a8 1082 00 00 00 00 
5a0ac 1083 00 00 00 00 
5a0b0 1084 00 00 00 00 
5a0b4 1085 00 00 00 00 
5a0b8 1086 00 00 00 00 
5a0bc 1087 00 00 00 00 
5a0c0 1088 00 00 00 00 
5a0c4 1089 00 00 00 00 
5a0c8 108a 00 00 00 00 
5a0cc 108b 00 00 00 00 
5a0d0 108c 00 00 00 00 
5a0d4 108d 00 00 00 00 
5a0d8 108e 00 00 00 00 
5a0dc 108f 00 00 00 00 
5a0e0 1090 00 00 00 00 
5a0e4 1091 00 00 00 00 
5a0e8 1092 00 00 00 00 
5a0ec 1093 00 00 00 00 
5a0f0 1094 00 00 00 00 
5a0f4 1095 00 00 00 00 
5a0f8 1096 00 00 00 00 
5a0fc 1097 00 00 00 00 
5a100 1098 00 00 00 00 
5a104 1099 00 00 00 00 
5a108 109a 00 00 00 00 
5a10c 109b 00 00 00 00 
5a110 109c 00 00 00 00 
5a114 109d 00 00 00 00 
5a118 109e 00 00 00 00 
5a11c 109f 00 00 00 00 
5a120 10a0 00 00 00 00 
5a124 10a1 00 00 00 00 
5a128 10a2 00 00 00 00 
5a12c 10a3 00 00 00 00 
5a130 10a4 00 00 00 00 
5a134 10a5 00 00 00 00 
5a138 10a6 00 00 00 00 
5a13c 10a7 00 00 00 00 
5a140 10a8 00 00 00 00 
5a144 10a9 00 00 00 00 
5a148 10aa 00 00 00 00 
5a14c 10ab 00 00 00 00 
5a150 10ac 00 00 00 00 
5a154 10ad 00 00 00 00 
5a158 10ae 00 00 00 00 
5a15c 10af 00 00 00 00 
5a160 10b0 00 00 00 00 
5a164 10b1 00 00 00 00 
5a168 10b2 00 00 00 00 
5a16c 10b3 00 00 00 00 
5a170 10b4 00 00 00 00 
5a174 10b5 00 00 00 00 
5a178 10b6 00 00 00 00 
5a17c 10b7 00 00 00 00 
5a180 10b8 00 00 00 00 
5a184 10b9 00 00 00 00 
5a188 10ba 00 00 00 00 
5a18c 10bb 00 00 00 00 
5a190 10bc 00 00 00 00 
5a194 10bd 00 00 00 00 
5a198 10be 00 00 00 00 
5a19c 10bf 00 00 00 00 
5a1a0 10c0 00 00 00 00 
5a1a4 10c1 00 00 00 00 
5a1a8 10c2 00 00 00 00 
5a1ac 10c3 00 00 00 00 
5a1b0 10c4 00 00 00 00 
5a1b4 10c5 00 00 00 00 
5a1b8 10c6 00 00 00 00 
5a1bc 10c7 00 00 00 00 
5a1c0 10c8 00 00 00 00 
5a1c4 10c9 00 00 00 00 
5a1c8 10ca 00 00 00 00 
5a1cc 10cb 00 00 00 00 
5a1d0 10cc 00 00 00 00 
5a1d4 10cd 00 00 00 00 
5a1d8 10ce 00 00 00 00 
5a1dc 10cf 00 00 00 00 
5a1e0 10d0 00 00 00 00 
5a1e4 10d1 00 00 00 00 
5a1e8 10d2 00 00 00 00 
5a1ec 10d3 00 00 00 00 
5a1f0 10d4 00 00 00 00 
5a1f4 10d5 00 00 00 00 
5a1f8 10d6 00 00 00 00 
5a1fc 10d7 00 00 00 00 
5a200 10d8 00 00 00 00 
5a204 10d9 00 00 00 00 
5a208 10da 00 00 00 00 
5a20c 10db 00 00 00 00 
5a210 10dc 00 00 00 00 
5a214 10dd 00 00 00 00 
5a218 10de 00 00 00 00 
5a21c 10df 00 00 00 00 
5a220 10e0 00 00 00 00 
5a224 10e1 00 00 00 00 
5a228 10e2 00 00 00 00 
5a22c 10e3 00 00 00 00 
5a230 10e4 00 00 00 00 
5a234 10e5 00 00 00 00 
5a238 10e6 00 00 00 00 
5a23c 10e7 00 00 00 00 
5a240 10e8 00 00 00 00 
5a244 10e9 00 00 00 00 
5a248 10ea 00 00 00 00 
5a24c 10eb 00 00 00 00 
5a250 10ec 00 00 00 00 
5a254 10ed 00 00 00 00 
5a258 10ee 00 00 00 00 
5a25c 10ef 00 00 00 00 
5a260 10f0 00 00 00 00 
5a264 10f1 00 00 00 00 
5a268 10f2 00 00 00 00 
5a26c 10f3 00 00 00 00 
5a270 10f4 00 00 00 00 
5a274 10f5 00 00 00 00 
5a278 10f6 00 00 00 00 
5a27c 10f7 00 00 00 00 
5a280 10f8 00 00 00 00 
5a284 10f9 00 00 00 00 
5a288 10fa 00 00 00 00 
5a28c 10fb 00 00 00 00 
5a290 10fc 00 00 00 00 
5a294 10fd 00 00 00 00 
5a298 10fe 00 00 00 00 
5a29c 10ff 00 00 00 00 
5a2a0 1100 00 00 00 00 
5a2a4 1101 00 00 00 00 
5a2a8 1102 00 00 00 00 
5a2ac 1103 00 00 00 00 
5a2b0 1104 00 00 00 00 
5a2b4 1105 00 00 00 00 
5a2b8 1106 00 00 00 00 
5a2bc 1107 00 00 00 00 
5a2c0 1108 00 00 00 00 
5a2c4 1109 00 00 00 00 
5a2c8 110a 00 00 00 00 
5a2cc 110b 00 00 00 00 
5a2d0 110c 00 00 00 00 
5a2d4 110d 00 00 00 00 
5a2d8 110e 00 00 00 00 
5a2dc 110f 00 00 00 00 
5a2e0 1110 00 00 00 00 
5a2e4 1111 00 00 00 00 
5a2e8 1112 00 00 00 00 
5a2ec 1113 00 00 00 00 
5a2f0 1114 00 00 00 00 
5a2f4 1115 00 00 00 00 
5a2f8 1116 00 00 00 00 
5a2fc 1117 00 00 00 00 
5a300 1118 00 00 00 00 
5a304 1119 00 00 00 00 
5a308 111a 00 00 00 00 
5a30c 111b 00 00 00 00 
5a310 111c 00 00 00 00 
5a314 111d 00 00 00 00 
5a318 111e 00 00 00 00 
5a31c 111f 00 00 00 00 
5a320 1120 00 00 00 00 
5a324 1121 00 00 00 00 
5a328 1122 00 00 00 00 
5a32c 1123 00 00 00 00 
5a330 1124 00 00 00 00 
5a334 1125 00 00 00 00 
5a338 1126 00 00 00 00 
5a33c 1127 00 00 00 00 
5a340 1128 00 00 00 00 
5a344 1129 00 00 00 00 
5a348 112a 00 00 00 00 
5a34c 112b 00 00 00 00 
5a350 112c 00 00 00 00 
5a354 112d 00 00 00 00 
5a358 112e 00 00 00 00 
5a35c 112f 00 00 00 00 
5a360 1130 00 00 00 00 
5a364 1131 00 00 00 00 
5a368 1132 00 00 00 00 
5a36c 1133 00 00 00 00 
5a370 1134 00 00 00 00 
5a374 1135 00 00 00 00 
5a378 1136 00 00 00 00 
5a37c 1137 00 00 00 00 
5a380 1138 00 00 00 00 
5a384 1139 00 00 00 00 
5a388 113a 00 00 00 00 
5a38c 113b 00 00 00 00 
5a390 113c 00 00 00 00 
5a394 113d 00 00 00 00 
5a398 113e 00 00 00 00 
5a39c 113f 00 00 00 00 
5a3a0 1140 00 00 00 00 
5a3a4 1141 00 00 00 00 
5a3a8 1142 00 00 00 00 
5a3ac 1143 00 00 00 00 
5a3b0 1144 00 00 00 00 
5a3b4 1145 00 00 00 00 
5a3b8 1146 00 00 00 00 
5a3bc 1147 00 00 00 00 
5a3c0 1148 00 00 00 00 
5a3c4 1149 00 00 00 00 
5a3c8 114a 00 00 00 00 
5a3cc 114b 00 00 00 00 
5a3d0 114c 00 00 00 00 
5a3d4 114d 00 00 00 00 
5a3d8 114e 00 00 00 00 
5a3dc 114f 00 00 00 00 
5a3e0 1150 00 00 00 00 
5a3e4 1151 00 00 00 00 
5a3e8 1152 00 00 00 00 
5a3ec 1153 00 00 00 00 
5a3f0 1154 00 00 00 00 
5a3f4 1155 00 00 00 00 
5a3f8 1156 00 00 00 00 
5a3fc 1157 00 00 00 00 
5a400 1158 00 00 00 00 
5a404 1159 00 00 00 00 
5a408 115a 00 00 00 00 
5a40c 115b 00 00 00 00 
5a410 115c 00 00 00 00 
5a414 115d 00 00 00 00 
5a418 115e 00 00 00 00 
5a41c 115f 00 00 00 00 
5a420 1160 00 00 00 00 
5a424 1161 00 00 00 00 
5a428 1162 00 00 00 00 
5a42c 1163 00 00 00 00 
5a430 1164 00 00 00 00 
5a434 1165 00 00 00 00 
5a438 1166 00 00 00 00 
5a43c 1167 00 00 00 00 
5a440 1168 00 00 00 00 
5a444 1169 00 00 00 00 
5a448 116a 00 00 00 00 
5a44c 116b 00 00 00 00 
5a450 116c 00 00 00 00 
5a454 116d 00 00 00 00 
5a458 116e 00 00 00 00 
5a45c 116f 00 00 00 00 
5a460 1170 00 00 00 00 
5a464 1171 00 00 00 00 
5a468 1172 00 00 00 00 
5a46c 1173 00 00 00 00 
5a470 1174 00 00 00 00 
5a474 1175 00 00 00 00 
5a478 1176 00 00 00 00 
5a47c 1177 00 00 00 00 
5a480 1178 00 00 00 00 
5a484 1179 00 00 00 00 
5a488 117a 00 00 00 00 
5a48c 117b 00 00 00 00 
5a490 117c 00 00 00 00 
5a494 117d 00 00 00 00 
5a498 117e 00 00 00 00 
5a49c 117f 00 00 00 00 
5a4a0 1180 00 00 00 00 
5a4a4 1181 00 00 00 00 
5a4a8 1182 00 00 00 00 
5a4ac 1183 00 00 00 00 
5a4b0 1184 00 00 00 00 
5a4b4 1185 00 00 00 00 
5a4b8 1186 00 00 00 00 
5a4bc 1187 00 00 00 00 
5a4c0 1188 00 00 00 00 
5a4c4 1189 00 00 00 00 
5a4c8 118a 00 00 00 00 
5a4cc 118b 00 00 00 00 
5a4d0 118c 00 00 00 00 
5a4d4 118d 00 00 00 00 
5a4d8 118e 00 00 00 00 
5a4dc 118f 00 00 00 00 
5a4e0 1190 00 00 00 00 
5a4e4 1191 00 00 00 00 
5a4e8 1192 00 00 00 00 
5a4ec 1193 00 00 00 00 
5a4f0 1194 00 00 00 00 
5a4f4 1195 00 00 00 00 
5a4f8 1196 00 00 00 00 
5a4fc 1197 00 00 00 00 
5a500 1198 00 00 00 00 
5a504 1199 00 00 00 00 
5a508 119a 00 00 00 00 
5a50c 119b 00 00 00 00 
5a510 119c 00 00 00 00 
5a514 119d 00 00 00 00 
5a518 119e 00 00 00 00 
5a51c 119f 00 00 00 00 
5a520 11a0 00 00 00 00 
5a524 11a1 00 00 00 00 
5a528 11a2 00 00 00 00 
5a52c 11a3 00 00 00 00 
5a530 11a4 00 00 00 00 
5a534 11a5 00 00 00 00 
5a538 11a6 00 00 00 00 
5a53c 11a7 00 00 00 00 
5a540 11a8 00 00 00 00 
5a544 11a9 00 00 00 00 
5a548 11aa 00 00 00 00 
5a54c 11ab 00 00 00 00 
5a550 11ac 00 00 00 00 
5a554 11ad 00 00 00 00 
5a558 11ae 00 00 00 00 
5a55c 11af 00 00 00 00 
5a560 11b0 00 00 00 00 
5a564 11b1 00 00 00 00 
5a568 11b2 00 00 00 00 
5a56c 11b3 00 00 00 00 
5a570 11b4 00 00 00 00 
5a574 11b5 00 00 00 00 
5a578 11b6 00 00 00 00 
5a57c 11b7 00 00 00 00 
5a580 11b8 00 00 00 00 
5a584 11b9 00 00 00 00 
5a588 11ba 00 00 00 00 
5a58c 11bb 00 00 00 00 
5a590 11bc 00 00 00 00 
5a594 11bd 00 00 00 00 
5a598 11be 00 00 00 00 
5a59c 11bf 00 00 00 00 
5a5a0 11c0 00 00 00 00 
5a5a4 11c1 00 00 00 00 
5a5a8 11c2 00 00 00 00 
5a5ac 11c3 00 00 00 00 
5a5b0 11c4 00 00 00 00 
5a5b4 11c5 00 00 00 00 
5a5b8 11c6 00 00 00 00 
5a5bc 11c7 00 00 00 00 
5a5c0 11c8 00 00 00 00 
5a5c4 11c9 00 00 00 00 
5a5c8 11ca 00 00 00 00 
5a5cc 11cb 00 00 00 00 
5a5d0 11cc 00 00 00 00 
5a5d4 11cd 00 00 00 00 
5a5d8 11ce 00 00 00 00 
5a5dc 11cf 00 00 00 00 
5a5e0 11d0 00 00 00 00 
5a5e4 11d1 00 00 00 00 
5a5e8 11d2 00 00 00 00 
5a5ec 11d3 00 00 00 00 
5a5f0 11d4 00 00 00 00 
5a5f4 11d5 00 00 00 00 
5a5f8 11d6 00 00 00 00 
5a5fc 11d7 00 00 00 00 
5a600 11d8 00 00 00 00 
5a604 11d9 00 00 00 00 
5a608 11da 00 00 00 00 
5a60c 11db 00 00 00 00 
5a610 11dc 00 00 00 00 
5a614 11dd 00 00 00 00 
5a618 11de 00 00 00 00 
5a61c 11df 00 00 00 00 
5a620 11e0 00 00 00 00 
5a624 11e1 00 00 00 00 
5a628 11e2 00 00 00 00 
5a62c 11e3 00 00 00 00 
5a630 11e4 00 00 00 00 
5a634 11e5 00 00 00 00 
5a638 11e6 00 00 00 00 
5a63c 11e7 00 00 00 00 
5a640 11e8 00 00 00 00 
5a644 11e9 00 00 00 00 
5a648 11ea 00 00 00 00 
5a64c 11eb 00 00 00 00 
5a650 11ec 00 00 00 00 
5a654 11ed 00 00 00 00 
5a658 11ee 00 00 00 00 
5a65c 11ef 00 00 00 00 
5a660 11f0 00 00 00 00 
5a664 11f1 00 00 00 00 
5a668 11f2 00 00 00 00 
5a66c 11f3 00 00 00 00 
5a670 11f4 00 00 00 00 
5a674 11f5 00 00 00 00 
5a678 11f6 00 00 00 00 
5a67c 11f7 00 00 00 00 
5a680 11f8 00 00 00 00 
5a684 11f9 00 00 00 00 
5a688 11fa 00 00 00 00 
5a68c 11fb 00 00 00 00 
5a690 11fc 00 00 00 00 
5a694 11fd 00 00 00 00 
5a698 11fe 00 00 00 00 
5a69c 11ff 00 00 00 00 
5a6a0 1200 00 00 00 00 
5a6a4 1201 00 00 00 00 
5a6a8 1202 00 00 00 00 
5a6ac 1203 00 00 00 00 
5a6b0 1204 00 00 00 00 
5a6b4 1205 00 00 00 00 
5a6b8 1206 00 00 00 00 
5a6bc 1207 00 00 00 00 
5a6c0 1208 00 00 00 00 
5a6c4 1209 00 00 00 00 
5a6c8 120a 00 00 00 00 
5a6cc 120b 00 00 00 00 
5a6d0 120c 00 00 00 00 
5a6d4 120d 00 00 00 00 
5a6d8 120e 00 00 00 00 
5a6dc 120f 00 00 00 00 
5a6e0 1210 00 00 00 00 
5a6e4 1211 00 00 00 00 
5a6e8 1212 00 00 00 00 
5a6ec 1213 00 00 00 00 
5a6f0 1214 00 00 00 00 
5a6f4 1215 00 00 00 00 
5a6f8 1216 00 00 00 00 
5a6fc 1217 00 00 00 00 
5a700 1218 00 00 00 00 
5a704 1219 00 00 00 00 
5a708 121a 00 00 00 00 
5a70c 121b 00 00 00 00 
5a710 121c 00 00 00 00 
5a714 121d 00 00 00 00 
5a718 121e 00 00 00 00 
5a71c 121f 00 00 00 00 
5a720 1220 00 00 00 00 
5a724 1221 00 00 00 00 
5a728 1222 00 00 00 00 
5a72c 1223 00 00 00 00 
5a730 1224 00 00 00 00 
5a734 1225 00 00 00 00 
5a738 1226 00 00 00 00 
5a73c 1227 00 00 00 00 
5a740 1228 00 00 00 00 
5a744 1229 00 00 00 00 
5a748 122a 00 00 00 00 
5a74c 122b 00 00 00 00 
5a750 122c 00 00 00 00 
5a754 122d 00 00 00 00 
5a758 122e 00 00 00 00 
5a75c 122f 00 00 00 00 
5a760 1230 00 00 00 00 
5a764 1231 00 00 00 00 
5a768 1232 00 00 00 00 
5a76c 1233 00 00 00 00 
5a770 1234 00 00 00 00 
5a774 1235 00 00 00 00 
5a778 1236 00 00 00 00 
5a77c 1237 00 00 00 00 
5a780 1238 00 00 00 00 
5a784 1239 00 00 00 00 
5a788 123a 00 00 00 00 
5a78c 123b 00 00 00 00 
5a790 123c 00 00 00 00 
5a794 123d 00 00 00 00 
5a798 123e 00 00 00 00 
5a79c 123f 00 00 00 00 
5a7a0 1240 00 00 00 00 
5a7a4 1241 00 00 00 00 
5a7a8 1242 00 00 00 00 
5a7ac 1243 00 00 00 00 
5a7b0 1244 00 00 00 00 
5a7b4 1245 00 00 00 00 
5a7b8 1246 00 00 00 00 
5a7bc 1247 00 00 00 00 
5a7c0 1248 00 00 00 00 
5a7c4 1249 00 00 00 00 
5a7c8 124a 00 00 00 00 
5a7cc 124b 00 00 00 00 
5a7d0 124c 00 00 00 00 
5a7d4 124d 00 00 00 00 
5a7d8 124e 00 00 00 00 
5a7dc 124f 00 00 00 00 
5a7e0 1250 00 00 00 00 
5a7e4 1251 00 00 00 00 
5a7e8 1252 00 00 00 00 
5a7ec 1253 00 00 00 00 
5a7f0 1254 00 00 00 00 
5a7f4 1255 00 00 00 00 
5a7f8 1256 00 00 00 00 
5a7fc 1257 00 00 00 00 
5a800 1258 00 00 00 00 
5a804 1259 00 00 00 00 
5a808 125a 00 00 00 00 
5a80c 125b 00 00 00 00 
5a810 125c 00 00 00 00 
5a814 125d 00 00 00 00 
5a818 125e 00 00 00 00 
5a81c 125f 00 00 00 00 
5a820 1260 00 00 00 00 
5a824 1261 00 00 00 00 
5a828 1262 00 00 00 00 
5a82c 1263 00 00 00 00 
5a830 1264 00 00 00 00 
5a834 1265 00 00 00 00 
5a838 1266 00 00 00 00 
5a83c 1267 00 00 00 00 
5a840 1268 00 00 00 00 
5a844 1269 00 00 00 00 
5a848 126a 00 00 00 00 
5a84c 126b 00 00 00 00 
5a850 126c 00 00 00 00 
5a854 126d 00 00 00 00 
5a858 126e 00 00 00 00 
5a85c 126f 00 00 00 00 
5a860 1270 00 00 00 00 
5a864 1271 00 00 00 00 
5a868 1272 00 00 00 00 
5a86c 1273 00 00 00 00 
5a870 1274 00 00 00 00 
5a874 1275 00 00 00 00 
5a878 1276 00 00 00 00 
5a87c 1277 00 00 00 00 
5a880 1278 00 00 00 00 
5a884 1279 00 00 00 00 
5a888 127a 00 00 00 00 
5a88c 127b 00 00 00 00 
5a890 127c 00 00 00 00 
5a894 127d 00 00 00 00 
5a898 127e 00 00 00 00 
5a89c 127f 00 00 00 00 
5a8a0 1280 00 00 00 00 
5a8a4 1281 00 00 00 00 
5a8a8 1282 00 00 00 00 
5a8ac 1283 00 00 00 00 
5a8b0 1284 00 00 00 00 
5a8b4 1285 00 00 00 00 
5a8b8 1286 00 00 00 00 
5a8bc 1287 00 00 00 00 
5a8c0 1288 00 00 00 00 
5a8c4 1289 00 00 00 00 
5a8c8 128a 00 00 00 00 
5a8cc 128b 00 00 00 00 
5a8d0 128c 00 00 00 00 
5a8d4 128d 00 00 00 00 
5a8d8 128e 00 00 00 00 
5a8dc 128f 00 00 00 00 
5a8e0 1290 00 00 00 00 
5a8e4 1291 00 00 00 00 
5a8e8 1292 00 00 00 00 
5a8ec 1293 00 00 00 00 
5a8f0 1294 00 00 00 00 
5a8f4 1295 00 00 00 00 
5a8f8 1296 00 00 00 00 
5a8fc 1297 00 00 00 00 
5a900 1298 00 00 00 00 
5a904 1299 00 00 00 00 
5a908 129a 00 00 00 00 
5a90c 129b 00 00 00 00 
5a910 129c 00 00 00 00 
5a914 129d 00 00 00 00 
5a918 129e 00 00 00 00 
5a91c 129f 00 00 00 00 
5a920 12a0 00 00 00 00 
5a924 12a1 00 00 00 00 
5a928 12a2 00 00 00 00 
5a92c 12a3 00 00 00 00 
5a930 12a4 00 00 00 00 
5a934 12a5 00 00 00 00 
5a938 12a6 00 00 00 00 
5a93c 12a7 00 00 00 00 
5a940 12a8 00 00 00 00 
5a944 12a9 00 00 00 00 
5a948 12aa 00 00 00 00 
5a94c 12ab 00 00 00 00 
5a950 12ac 00 00 00 00 
5a954 12ad 00 00 00 00 
5a958 12ae 00 00 00 00 
5a95c 12af 00 00 00 00 
5a960 12b0 00 00 00 00 
5a964 12b1 00 00 00 00 
5a968 12b2 00 00 00 00 
5a96c 12b3 00 00 00 00 
5a970 12b4 00 00 00 00 
5a974 12b5 00 00 00 00 
5a978 12b6 00 00 00 00 
5a97c 12b7 00 00 00 00 
5a980 12b8 00 00 00 00 
5a984 12b9 00 00 00 00 
5a988 12ba 00 00 00 00 
5a98c 12bb 00 00 00 00 
5a990 12bc 00 00 00 00 
5a994 12bd 00 00 00 00 
5a998 12be 00 00 00 00 
5a99c 12bf 00 00 00 00 
5a9a0 12c0 00 00 00 00 
5a9a4 12c1 00 00 00 00 
5a9a8 12c2 00 00 00 00 
5a9ac 12c3 00 00 00 00 
5a9b0 12c4 00 00 00 00 
5a9b4 12c5 00 00 00 00 
5a9b8 12c6 00 00 00 00 
5a9bc 12c7 00 00 00 00 
5a9c0 12c8 00 00 00 00 
5a9c4 12c9 00 00 00 00 
5a9c8 12ca 00 00 00 00 
5a9cc 12cb 00 00 00 00 
5a9d0 12cc 00 00 00 00 
5a9d4 12cd 00 00 00 00 
5a9d8 12ce 00 00 00 00 
5a9dc 12cf 00 00 00 00 
5a9e0 12d0 00 00 00 00 
5a9e4 12d1 00 00 00 00 
5a9e8 12d2 00 00 00 00 
5a9ec 12d3 00 00 00 00 
5a9f0 12d4 00 00 00 00 
5a9f4 12d5 00 00 00 00 
5a9f8 12d6 00 00 00 00 
5a9fc 12d7 00 00 00 00 
5aa00 12d8 00 00 00 00 
5aa04 12d9 00 00 00 00 
5aa08 12da 00 00 00 00 
5aa0c 12db 00 00 00 00 
5aa10 12dc 00 00 00 00 
5aa14 12dd 00 00 00 00 
5aa18 12de 00 00 00 00 
5aa1c 12df 00 00 00 00 
5aa20 12e0 00 00 00 00 
5aa24 12e1 00 00 00 00 
5aa28 12e2 00 00 00 00 
5aa2c 12e3 00 00 00 00 
5aa30 12e4 00 00 00 00 
5aa34 12e5 00 00 00 00 
5aa38 12e6 00 00 00 00 
5aa3c 12e7 00 00 00 00 
5aa40 12e8 00 00 00 00 
5aa44 12e9 00 00 00 00 
5aa48 12ea 00 00 00 00 
5aa4c 12eb 00 00 00 00 
5aa50 12ec 00 00 00 00 
5aa54 12ed 00 00 00 00 
5aa58 12ee 00 00 00 00 
5aa5c 12ef 00 00 00 00 
5aa60 12f0 00 00 00 00 
5aa64 12f1 00 00 00 00 
5aa68 12f2 00 00 00 00 
5aa6c 12f3 00 00 00 00 
5aa70 12f4 00 00 00 00 
5aa74 12f5 00 00 00 00 
5aa78 12f6 00 00 00 00 
5aa7c 12f7 00 00 00 00 
5aa80 12f8 00 00 00 00 
5aa84 12f9 00 00 00 00 
5aa88 12fa 00 00 00 00 
5aa8c 12fb 00 00 00 00 
5aa90 12fc 00 00 00 00 
5aa94 12fd 00 00 00 00 
5aa98 12fe 00 00 00 00 
5aa9c 12ff 00 00 00 00 
5aaa0 1300 00 00 00 00 
5aaa4 1301 00 00 00 00 
5aaa8 1302 00 00 00 00 
5aaac 1303 00 00 00 00 
5aab0 1304 00 00 00 00 
5aab4 1305 00 00 00 00 
5aab8 1306 00 00 00 00 
5aabc 1307 00 00 00 00 
5aac0 1308 00 00 00 00 
5aac4 1309 00 00 00 00 
5aac8 130a 00 00 00 00 
5aacc 130b 00 00 00 00 
5aad0 130c 00 00 00 00 
5aad4 130d 00 00 00 00 
5aad8 130e 00 00 00 00 
5aadc 130f 00 00 00 00 
5aae0 1310 00 00 00 00 
5aae4 1311 00 00 00 00 
5aae8 1312 00 00 00 00 
5aaec 1313 00 00 00 00 
5aaf0 1314 00 00 00 00 
5aaf4 1315 00 00 00 00 
5aaf8 1316 00 00 00 00 
5aafc 1317 00 00 00 00 
5ab00 1318 00 00 00 00 
5ab04 1319 00 00 00 00 
5ab08 131a 00 00 00 00 
5ab0c 131b 00 00 00 00 
5ab10 131c 00 00 00 00 
5ab14 131d 00 00 00 00 
5ab18 131e 00 00 00 00 
5ab1c 131f 00 00 00 00 
5ab20 1320 00 00 00 00 
5ab24 1321 00 00 00 00 
5ab28 1322 00 00 00 00 
5ab2c 1323 00 00 00 00 
5ab30 1324 00 00 00 00 
5ab34 1325 00 00 00 00 
5ab38 1326 00 00 00 00 
5ab3c 1327 00 00 00 00 
5ab40 1328 00 00 00 00 
5ab44 1329 00 00 00 00 
5ab48 132a 00 00 00 00 
5ab4c 132b 00 00 00 00 
5ab50 132c 00 00 00 00 
5ab54 132d 00 00 00 00 
5ab58 132e 00 00 00 00 
5ab5c 132f 00 00 00 00 
5ab60 1330 00 00 00 00 
5ab64 1331 00 00 00 00 
5ab68 1332 00 00 00 00 
5ab6c 1333 00 00 00 00 
5ab70 1334 00 00 00 00 
5ab74 1335 00 00 00 00 
5ab78 1336 00 00 00 00 
5ab7c 1337 00 00 00 00 
5ab80 1338 00 00 00 00 
5ab84 1339 00 00 00 00 
5ab88 133a 00 00 00 00 
5ab8c 133b 00 00 00 00 
5ab90 133c 00 00 00 00 
5ab94 133d 00 00 00 00 
5ab98 133e 00 00 00 00 
5ab9c 133f 00 00 00 00 
5aba0 1340 00 00 00 00 
5aba4 1341 00 00 00 00 
5aba8 1342 00 00 00 00 
5abac 1343 00 00 00 00 
5abb0 1344 00 00 00 00 
5abb4 1345 00 00 00 00 
5abb8 1346 00 00 00 00 
5abbc 1347 00 00 00 00 
5abc0 1348 00 00 00 00 
5abc4 1349 00 00 00 00 
5abc8 134a 00 00 00 00 
5abcc 134b 00 00 00 00 
5abd0 134c 00 00 00 00 
5abd4 134d 00 00 00 00 
5abd8 134e 00 00 00 00 
5abdc 134f 00 00 00 00 
5abe0 1350 00 00 00 00 
5abe4 1351 00 00 00 00 
5abe8 1352 00 00 00 00 
5abec 1353 00 00 00 00 
5abf0 1354 00 00 00 00 
5abf4 1355 00 00 00 00 
5abf8 1356 00 00 00 00 
5abfc 1357 00 00 00 00 
5ac00 1358 00 00 00 00 
5ac04 1359 00 00 00 00 
5ac08 135a 00 00 00 00 
5ac0c 135b 00 00 00 00 
5ac10 135c 00 00 00 00 
5ac14 135d 00 00 00 00 
5ac18 135e 00 00 00 00 
5ac1c 135f 00 00 00 00 
5ac20 1360 00 00 00 00 
5ac24 1361 00 00 00 00 
5ac28 1362 00 00 00 00 
5ac2c 1363 00 00 00 00 
5ac30 1364 00 00 00 00 
5ac34 1365 00 00 00 00 
5ac38 1366 00 00 00 00 
5ac3c 1367 00 00 00 00 
5ac40 1368 00 00 00 00 
5ac44 1369 00 00 00 00 
5ac48 136a 00 00 00 00 
5ac4c 136b 00 00 00 00 
5ac50 136c 00 00 00 00 
5ac54 136d 00 00 00 00 
5ac58 136e 00 00 00 00 
5ac5c 136f 00 00 00 00 
5ac60 1370 00 00 00 00 
5ac64 1371 00 00 00 00 
5ac68 1372 00 00 00 00 
5ac6c 1373 00 00 00 00 
5ac70 1374 00 00 00 00 
5ac74 1375 00 00 00 00 
5ac78 1376 00 00 00 00 
5ac7c 1377 00 00 00 00 
5ac80 1378 00 00 00 00 
5ac84 1379 00 00 00 00 
5ac88 137a 00 00 00 00 
5ac8c 137b 00 00 00 00 
5ac90 137c 00 00 00 00 
5ac94 137d 00 00 00 00 
5ac98 137e 00 00 00 00 
5ac9c 137f 00 00 00 00 
5aca0 1380 00 00 00 00 
5aca4 1381 00 00 00 00 
5aca8 1382 00 00 00 00 
5acac 1383 00 00 00 00 
5acb0 1384 00 00 00 00 
5acb4 1385 00 00 00 00 
5acb8 1386 00 00 00 00 
5acbc 1387 00 00 00 00 
5acc0 1388 00 00 00 00 
5acc4 1389 00 00 00 00 
5acc8 138a 00 00 00 00 
5accc 138b 00 00 00 00 
5acd0 138c 00 00 00 00 
5acd4 138d 00 00 00 00 
5acd8 138e 00 00 00 00 
5acdc 138f 00 00 00 00 
5ace0 1390 00 00 00 00 
5ace4 1391 00 00 00 00 
5ace8 1392 00 00 00 00 
5acec 1393 00 00 00 00 
5acf0 1394 00 00 00 00 
5acf4 1395 00 00 00 00 
5acf8 1396 00 00 00 00 
5acfc 1397 00 00 00 00 
5ad00 1398 00 00 00 00 
5ad04 1399 00 00 00 00 
5ad08 139a 00 00 00 00 
5ad0c 139b 00 00 00 00 
5ad10 139c 00 00 00 00 
5ad14 139d 00 00 00 00 
5ad18 139e 00 00 00 00 
5ad1c 139f 00 00 00 00 
5ad20 13a0 00 00 00 00 
5ad24 13a1 00 00 00 00 
5ad28 13a2 00 00 00 00 
5ad2c 13a3 00 00 00 00 
5ad30 13a4 00 00 00 00 
5ad34 13a5 00 00 00 00 
5ad38 13a6 00 00 00 00 
5ad3c 13a7 00 00 00 00 
5ad40 13a8 00 00 00 00 
5ad44 13a9 00 00 00 00 
5ad48 13aa 00 00 00 00 
5ad4c 13ab 00 00 00 00 
5ad50 13ac 00 00 00 00 
5ad54 13ad 00 00 00 00 
5ad58 13ae 00 00 00 00 
5ad5c 13af 00 00 00 00 
5ad60 13b0 00 00 00 00 
5ad64 13b1 00 00 00 00 
5ad68 13b2 00 00 00 00 
5ad6c 13b3 00 00 00 00 
5ad70 13b4 00 00 00 00 
5ad74 13b5 00 00 00 00 
5ad78 13b6 00 00 00 00 
5ad7c 13b7 00 00 00 00 
5ad80 13b8 00 00 00 00 
5ad84 13b9 00 00 00 00 
5ad88 13ba 00 00 00 00 
5ad8c 13bb 00 00 00 00 
5ad90 13bc 00 00 00 00 
5ad94 13bd 00 00 00 00 
5ad98 13be 00 00 00 00 
5ad9c 13bf 00 00 00 00 
5ada0 13c0 00 00 00 00 
5ada4 13c1 00 00 00 00 
5ada8 13c2 00 00 00 00 
5adac 13c3 00 00 00 00 
5adb0 13c4 00 00 00 00 
5adb4 13c5 00 00 00 00 
5adb8 13c6 00 00 00 00 
5adbc 13c7 00 00 00 00 
5adc0 13c8 00 00 00 00 
5adc4 13c9 00 00 00 00 
5adc8 13ca 00 00 00 00 
5adcc 13cb 00 00 00 00 
5add0 13cc 00 00 00 00 
5add4 13cd 00 00 00 00 
5add8 13ce 00 00 00 00 
5addc 13cf 00 00 00 00 
5ade0 13d0 00 00 00 00 
5ade4 13d1 00 00 00 00 
5ade8 13d2 00 00 00 00 
5adec 13d3 00 00 00 00 
5adf0 13d4 00 00 00 00 
5adf4 13d5 00 00 00 00 
5adf8 13d6 00 00 00 00 
5adfc 13d7 00 00 00 00 
5ae00 13d8 00 00 00 00 
5ae04 13d9 00 00 00 00 
5ae08 13da 00 00 00 00 
5ae0c 13db 00 00 00 00 
5ae10 13dc 00 00 00 00 
5ae14 13dd 00 00 00 00 
5ae18 13de 00 00 00 00 
5ae1c 13df 00 00 00 00 
5ae20 13e0 00 00 00 00 
5ae24 13e1 00 00 00 00 
5ae28 13e2 00 00 00 00 
5ae2c 13e3 00 00 00 00 
5ae30 13e4 00 00 00 00 
5ae34 13e5 00 00 00 00 
5ae38 13e6 00 00 00 00 
5ae3c 13e7 00 00 00 00 
5ae40 13e8 00 00 00 00 
5ae44 13e9 00 00 00 00 
5ae48 13ea 00 00 00 00 
5ae4c 13eb 00 00 00 00 
5ae50 13ec 00 00 00 00 
5ae54 13ed 00 00 00 00 
5ae58 13ee 00 00 00 00 
5ae5c 13ef 00 00 00 00 
5ae60 13f0 00 00 00 00 
5ae64 13f1 00 00 00 00 
5ae68 13f2 00 00 00 00 
5ae6c 13f3 00 00 00 00 
5ae70 13f4 00 00 00 00 
5ae74 13f5 00 00 00 00 
5ae78 13f6 00 00 00 00 
5ae7c 13f7 00 00 00 00 
5ae80 13f8 00 00 00 00 
5ae84 13f9 00 00 00 00 
5ae88 13fa 00 00 00 00 
5ae8c 13fb 00 00 00 00 
5ae90 13fc 00 00 00 00 
5ae94 13fd 00 00 00 00 
5ae98 13fe 00 00 00 00 
5ae9c 13ff 00 00 00 00 
5aea0 1400 00 00 00 00 
5aea4 1401 00 00 00 00 
5aea8 1402 00 00 00 00 
5aeac 1403 00 00 00 00 
5aeb0 1404 00 00 00 00 
5aeb4 1405 00 00 00 00 
5aeb8 1406 00 00 00 00 
5aebc 1407 00 00 00 00 
5aec0 1408 00 00 00 00 
5aec4 1409 00 00 00 00 
5aec8 140a 00 00 00 00 
5aecc 140b 00 00 00 00 
5aed0 140c 00 00 00 00 
5aed4 140d 00 00 00 00 
5aed8 140e 00 00 00 00 
5aedc 140f 00 00 00 00 
5aee0 1410 00 00 00 00 
5aee4 1411 00 00 00 00 
5aee8 1412 00 00 00 00 
5aeec 1413 00 00 00 00 
5aef0 1414 00 00 00 00 
5aef4 1415 00 00 00 00 
5aef8 1416 00 00 00 00 
5aefc 1417 00 00 00 00 
5af00 1418 00 00 00 00 
5af04 1419 00 00 00 00 
5af08 141a 00 00 00 00 
5af0c 141b 00 00 00 00 
5af10 141c 00 00 00 00 
5af14 141d 00 00 00 00 
5af18 141e 00 00 00 00 
5af1c 141f 00 00 00 00 
5af20 1420 00 00 00 00 
5af24 1421 00 00 00 00 
5af28 1422 00 00 00 00 
5af2c 1423 00 00 00 00 
5af30 1424 00 00 00 00 
5af34 1425 00 00 00 00 
5af38 1426 00 00 00 00 
5af3c 1427 00 00 00 00 
5af40 1428 00 00 00 00 
5af44 1429 00 00 00 00 
5af48 142a 00 00 00 00 
5af4c 142b 00 00 00 00 
5af50 142c 00 00 00 00 
5af54 142d 00 00 00 00 
5af58 142e 00 00 00 00 
5af5c 142f 00 00 00 00 
5af60 1430 00 00 00 00 
5af64 1431 00 00 00 00 
5af68 1432 00 00 00 00 
5af6c 1433 00 00 00 00 
5af70 1434 00 00 00 00 
5af74 1435 00 00 00 00 
5af78 1436 00 00 00 00 
5af7c 1437 00 00 00 00 
5af80 1438 00 00 00 00 
5af84 1439 00 00 00 00 
5af88 143a 00 00 00 00 
5af8c 143b 00 00 00 00 
5af90 143c 00 00 00 00 
5af94 143d 00 00 00 00 
5af98 143e 00 00 00 00 
5af9c 143f 00 00 00 00 
5afa0 1440 00 00 00 00 
5afa4 1441 00 00 00 00 
5afa8 1442 00 00 00 00 
5afac 1443 00 00 00 00 
5afb0 1444 00 00 00 00 
5afb4 1445 00 00 00 00 
5afb8 1446 00 00 00 00 
5afbc 1447 00 00 00 00 
5afc0 1448 00 00 00 00 
5afc4 1449 00 00 00 00 
5afc8 144a 00 00 00 00 
5afcc 144b 00 00 00 00 
5afd0 144c 00 00 00 00 
5afd4 144d 00 00 00 00 
5afd8 144e 00 00 00 00 
5afdc 144f 00 00 00 00 
5afe0 1450 00 00 00 00 
5afe4 1451 00 00 00 00 
5afe8 1452 00 00 00 00 
5afec 1453 00 00 00 00 
5aff0 1454 00 00 00 00 
5aff4 1455 00 00 00 00 
5aff8 1456 00 00 00 00 
5affc 1457 00 00 00 00 
5b000 1458 00 00 00 00 
5b004 1459 00 00 00 00 
5b008 145a 00 00 00 00 
5b00c 145b 00 00 00 00 
5b010 145c 00 00 00 00 
5b014 145d 00 00 00 00 
5b018 145e 00 00 00 00 
5b01c 145f 00 00 00 00 
5b020 1460 00 00 00 00 
5b024 1461 00 00 00 00 
5b028 1462 00 00 00 00 
5b02c 1463 00 00 00 00 
5b030 1464 00 00 00 00 
5b034 1465 00 00 00 00 
5b038 1466 00 00 00 00 
5b03c 1467 00 00 00 00 
5b040 1468 00 00 00 00 
5b044 1469 00 00 00 00 
5b048 146a 00 00 00 00 
5b04c 146b 00 00 00 00 
5b050 146c 00 00 00 00 
5b054 146d 00 00 00 00 
5b058 146e 00 00 00 00 
5b05c 146f 00 00 00 00 
5b060 1470 00 00 00 00 
5b064 1471 00 00 00 00 
5b068 1472 00 00 00 00 
5b06c 1473 00 00 00 00 
5b070 1474 00 00 00 00 
5b074 1475 00 00 00 00 
5b078 1476 00 00 00 00 
5b07c 1477 00 00 00 00 
5b080 1478 00 00 00 00 
5b084 1479 00 00 00 00 
5b088 147a 00 00 00 00 
5b08c 147b 00 00 00 00 
5b090 147c 00 00 00 00 
5b094 147d 00 00 00 00 
5b098 147e 00 00 00 00 
5b09c 147f 00 00 00 00 
5b0a0 1480 00 00 00 00 
5b0a4 1481 00 00 00 00 
5b0a8 1482 00 00 00 00 
5b0ac 1483 00 00 00 00 
5b0b0 1484 00 00 00 00 
5b0b4 1485 00 00 00 00 
5b0b8 1486 00 00 00 00 
5b0bc 1487 00 00 00 00 
5b0c0 1488 00 00 00 00 
5b0c4 1489 00 00 00 00 
5b0c8 148a 00 00 00 00 
5b0cc 148b 00 00 00 00 
5b0d0 148c 00 00 00 00 
5b0d4 148d 00 00 00 00 
5b0d8 148e 00 00 00 00 
5b0dc 148f 00 00 00 00 
5b0e0 1490 00 00 00 00 
5b0e4 1491 00 00 00 00 
5b0e8 1492 00 00 00 00 
5b0ec 1493 00 00 00 00 
5b0f0 1494 00 00 00 00 
5b0f4 1495 00 00 00 00 
5b0f8 1496 00 00 00 00 
5b0fc 1497 00 00 00 00 
5b100 1498 00 00 00 00 
5b104 1499 00 00 00 00 
5b108 149a 00 00 00 00 
5b10c 149b 00 00 00 00 
5b110 149c 00 00 00 00 
5b114 149d 00 00 00 00 
5b118 149e 00 00 00 00 
5b11c 149f 00 00 00 00 
5b120 14a0 00 00 00 00 
5b124 14a1 00 00 00 00 
5b128 14a2 00 00 00 00 
5b12c 14a3 00 00 00 00 
5b130 14a4 00 00 00 00 
5b134 14a5 00 00 00 00 
5b138 14a6 00 00 00 00 
5b13c 14a7 00 00 00 00 
5b140 14a8 00 00 00 00 
5b144 14a9 00 00 00 00 
5b148 14aa 00 00 00 00 
5b14c 14ab 00 00 00 00 
5b150 14ac 00 00 00 00 
5b154 14ad 00 00 00 00 
5b158 14ae 00 00 00 00 
5b15c 14af 00 00 00 00 
5b160 14b0 00 00 00 00 
5b164 14b1 00 00 00 00 
5b168 14b2 00 00 00 00 
5b16c 14b3 00 00 00 00 
5b170 14b4 00 00 00 00 
5b174 14b5 00 00 00 00 
5b178 14b6 00 00 00 00 
5b17c 14b7 00 00 00 00 
5b180 14b8 00 00 00 00 
5b184 14b9 00 00 00 00 
5b188 14ba 00 00 00 00 
5b18c 14bb 00 00 00 00 
5b190 14bc 00 00 00 00 
5b194 14bd 00 00 00 00 
5b198 14be 00 00 00 00 
5b19c 14bf 00 00 00 00 
5b1a0 14c0 00 00 00 00 
5b1a4 14c1 00 00 00 00 
5b1a8 14c2 00 00 00 00 
5b1ac 14c3 00 00 00 00 
5b1b0 14c4 00 00 00 00 
5b1b4 14c5 00 00 00 00 
5b1b8 14c6 00 00 00 00 
5b1bc 14c7 00 00 00 00 
5b1c0 14c8 00 00 00 00 
5b1c4 14c9 00 00 00 00 
5b1c8 14ca 00 00 00 00 
5b1cc 14cb 00 00 00 00 
5b1d0 14cc 00 00 00 00 
5b1d4 14cd 00 00 00 00 
5b1d8 14ce 00 00 00 00 
5b1dc 14cf 00 00 00 00 
5b1e0 14d0 00 00 00 00 
5b1e4 14d1 00 00 00 00 
5b1e8 14d2 00 00 00 00 
5b1ec 14d3 00 00 00 00 
5b1f0 14d4 00 00 00 00 
5b1f4 14d5 00 00 00 00 
5b1f8 14d6 00 00 00 00 
5b1fc 14d7 00 00 00 00 
5b200 14d8 00 00 00 00 
5b204 14d9 00 00 00 00 
5b208 14da 00 00 00 00 
5b20c 14db 00 00 00 00 
5b210 14dc 00 00 00 00 
5b214 14dd 00 00 00 00 
5b218 14de 00 00 00 00 
5b21c 14df 00 00 00 00 
5b220 14e0 00 00 00 00 
5b224 14e1 00 00 00 00 
5b228 14e2 00 00 00 00 
5b22c 14e3 00 00 00 00 
5b230 14e4 00 00 00 00 
5b234 14e5 00 00 00 00 
5b238 14e6 00 00 00 00 
5b23c 14e7 00 00 00 00 
5b240 14e8 00 00 00 00 
5b244 14e9 00 00 00 00 
5b248 14ea 00 00 00 00 
5b24c 14eb 00 00 00 00 
5b250 14ec 00 00 00 00 
5b254 14ed 00 00 00 00 
5b258 14ee 00 00 00 00 
5b25c 14ef 00 00 00 00 
5b260 14f0 00 00 00 00 
5b264 14f1 00 00 00 00 
5b268 14f2 00 00 00 00 
5b26c 14f3 00 00 00 00 
5b270 14f4 00 00 00 00 
5b274 14f5 00 00 00 00 
5b278 14f6 00 00 00 00 
5b27c 14f7 00 00 00 00 
5b280 14f8 00 00 00 00 
5b284 14f9 00 00 00 00 
5b288 14fa 00 00 00 00 
5b28c 14fb 00 00 00 00 
5b290 14fc 00 00 00 00 
5b294 14fd 00 00 00 00 
5b298 14fe 00 00 00 00 
5b29c 14ff 00 00 00 00 
5b2a0 1500 00 00 00 00 
5b2a4 1501 00 00 00 00 
5b2a8 1502 00 00 00 00 
5b2ac 1503 00 00 00 00 
5b2b0 1504 00 00 00 00 
5b2b4 1505 00 00 00 00 
5b2b8 1506 00 00 00 00 
5b2bc 1507 00 00 00 00 
5b2c0 1508 00 00 00 00 
5b2c4 1509 00 00 00 00 
5b2c8 150a 00 00 00 00 
5b2cc 150b 00 00 00 00 
5b2d0 150c 00 00 00 00 
5b2d4 150d 00 00 00 00 
5b2d8 150e 00 00 00 00 
5b2dc 150f 00 00 00 00 
5b2e0 1510 00 00 00 00 
5b2e4 1511 00 00 00 00 
5b2e8 1512 00 00 00 00 
5b2ec 1513 00 00 00 00 
5b2f0 1514 00 00 00 00 
5b2f4 1515 00 00 00 00 
5b2f8 1516 00 00 00 00 
5b2fc 1517 00 00 00 00 
5b300 1518 00 00 00 00 
5b304 1519 00 00 00 00 
5b308 151a 00 00 00 00 
5b30c 151b 00 00 00 00 
5b310 151c 00 00 00 00 
5b314 151d 00 00 00 00 
5b318 151e 00 00 00 00 
5b31c 151f 00 00 00 00 
5b320 1520 00 00 00 00 
5b324 1521 00 00 00 00 
5b328 1522 00 00 00 00 
5b32c 1523 00 00 00 00 
5b330 1524 00 00 00 00 
5b334 1525 00 00 00 00 
5b338 1526 00 00 00 00 
5b33c 1527 00 00 00 00 
5b340 1528 00 00 00 00 
5b344 1529 00 00 00 00 
5b348 152a 00 00 00 00 
5b34c 152b 00 00 00 00 
5b350 152c 00 00 00 00 
5b354 152d 00 00 00 00 
5b358 152e 00 00 00 00 
5b35c 152f 00 00 00 00 
5b360 1530 00 00 00 00 
5b364 1531 00 00 00 00 
5b368 1532 00 00 00 00 
5b36c 1533 00 00 00 00 
5b370 1534 00 00 00 00 
5b374 1535 00 00 00 00 
5b378 1536 00 00 00 00 
5b37c 1537 00 00 00 00 
5b380 1538 00 00 00 00 
5b384 1539 00 00 00 00 
5b388 153a 00 00 00 00 
5b38c 153b 00 00 00 00 
5b390 153c 00 00 00 00 
5b394 153d 00 00 00 00 
5b398 153e 00 00 00 00 
5b39c 153f 00 00 00 00 
5b3a0 1540 00 00 00 00 
5b3a4 1541 00 00 00 00 
5b3a8 1542 00 00 00 00 
5b3ac 1543 00 00 00 00 
5b3b0 1544 00 00 00 00 
5b3b4 1545 00 00 00 00 
5b3b8 1546 00 00 00 00 
5b3bc 1547 00 00 00 00 
5b3c0 1548 00 00 00 00 
5b3c4 1549 00 00 00 00 
5b3c8 154a 00 00 00 00 
5b3cc 154b 00 00 00 00 
5b3d0 154c 00 00 00 00 
5b3d4 154d 00 00 00 00 
5b3d8 154e 00 00 00 00 
5b3dc 154f 00 00 00 00 
5b3e0 1550 00 00 00 00 
5b3e4 1551 00 00 00 00 
5b3e8 1552 00 00 00 00 
5b3ec 1553 00 00 00 00 
5b3f0 1554 00 00 00 00 
5b3f4 1555 00 00 00 00 
5b3f8 1556 00 00 00 00 
5b3fc 1557 00 00 00 00 
5b400 1558 00 00 00 00 
5b404 1559 00 00 00 00 
5b408 155a 00 00 00 00 
5b40c 155b 00 00 00 00 
5b410 155c 00 00 00 00 
5b414 155d 00 00 00 00 
5b418 155e 00 00 00 00 
5b41c 155f 00 00 00 00 
5b420 1560 00 00 00 00 
5b424 1561 00 00 00 00 
5b428 1562 00 00 00 00 
5b42c 1563 00 00 00 00 
5b430 1564 00 00 00 00 
5b434 1565 00 00 00 00 
5b438 1566 00 00 00 00 
5b43c 1567 00 00 00 00 
5b440 1568 00 00 00 00 
5b444 1569 00 00 00 00 
5b448 156a 00 00 00 00 
5b44c 156b 00 00 00 00 
5b450 156c 00 00 00 00 
5b454 156d 00 00 00 00 
5b458 156e 00 00 00 00 
5b45c 156f 00 00 00 00 
5b460 1570 00 00 00 00 
5b464 1571 00 00 00 00 
5b468 1572 00 00 00 00 
5b46c 1573 00 00 00 00 
5b470 1574 00 00 00 00 
5b474 1575 00 00 00 00 
5b478 1576 00 00 00 00 
5b47c 1577 00 00 00 00 
5b480 1578 00 00 00 00 
5b484 1579 00 00 00 00 
5b488 157a 00 00 00 00 
5b48c 157b 00 00 00 00 
5b490 157c 00 00 00 00 
5b494 157d 00 00 00 00 
5b498 157e 00 00 00 00 
5b49c 157f 00 00 00 00 
5b4a0 1580 00 00 00 00 
5b4a4 1581 00 00 00 00 
5b4a8 1582 00 00 00 00 
5b4ac 1583 00 00 00 00 
5b4b0 1584 00 00 00 00 
5b4b4 1585 00 00 00 00 
5b4b8 1586 00 00 00 00 
5b4bc 1587 00 00 00 00 
5b4c0 1588 00 00 00 00 
5b4c4 1589 00 00 00 00 
5b4c8 158a 00 00 00 00 
5b4cc 158b 00 00 00 00 
5b4d0 158c 00 00 00 00 
5b4d4 158d 00 00 00 00 
5b4d8 158e 00 00 00 00 
5b4dc 158f 00 00 00 00 
5b4e0 1590 00 00 00 00 
5b4e4 1591 00 00 00 00 
5b4e8 1592 00 00 00 00 
5b4ec 1593 00 00 00 00 
5b4f0 1594 00 00 00 00 
5b4f4 1595 00 00 00 00 
5b4f8 1596 00 00 00 00 
5b4fc 1597 00 00 00 00 
5b500 1598 00 00 00 00 
5b504 1599 00 00 00 00 
5b508 159a 00 00 00 00 
5b50c 159b 00 00 00 00 
5b510 159c 00 00 00 00 
5b514 159d 00 00 00 00 
5b518 159e 00 00 00 00 
5b51c 159f 00 00 00 00 
5b520 15a0 00 00 00 00 
5b524 15a1 00 00 00 00 
5b528 15a2 00 00 00 00 
5b52c 15a3 00 00 00 00 
5b530 15a4 00 00 00 00 
5b534 15a5 00 00 00 00 
5b538 15a6 00 00 00 00 
5b53c 15a7 00 00 00 00 
5b540 15a8 00 00 00 00 
5b544 15a9 00 00 00 00 
5b548 15aa 00 00 00 00 
5b54c 15ab 00 00 00 00 
5b550 15ac 00 00 00 00 
5b554 15ad 00 00 00 00 
5b558 15ae 00 00 00 00 
5b55c 15af 00 00 00 00 
5b560 15b0 00 00 00 00 
5b564 15b1 00 00 00 00 
5b568 15b2 00 00 00 00 
5b56c 15b3 00 00 00 00 
5b570 15b4 00 00 00 00 
5b574 15b5 00 00 00 00 
5b578 15b6 00 00 00 00 
5b57c 15b7 00 00 00 00 
5b580 15b8 00 00 00 00 
5b584 15b9 00 00 00 00 
5b588 15ba 00 00 00 00 
5b58c 15bb 00 00 00 00 
5b590 15bc 00 00 00 00 
5b594 15bd 00 00 00 00 
5b598 15be 00 00 00 00 
5b59c 15bf 00 00 00 00 
5b5a0 15c0 00 00 00 00 
5b5a4 15c1 00 00 00 00 
5b5a8 15c2 00 00 00 00 
5b5ac 15c3 00 00 00 00 
5b5b0 15c4 00 00 00 00 
5b5b4 15c5 00 00 00 00 
5b5b8 15c6 00 00 00 00 
5b5bc 15c7 00 00 00 00 
5b5c0 15c8 00 00 00 00 
5b5c4 15c9 00 00 00 00 
5b5c8 15ca 00 00 00 00 
5b5cc 15cb 00 00 00 00 
5b5d0 15cc 00 00 00 00 
5b5d4 15cd 00 00 00 00 
5b5d8 15ce 00 00 00 00 
5b5dc 15cf 00 00 00 00 
5b5e0 15d0 00 00 00 00 
5b5e4 15d1 00 00 00 00 
5b5e8 15d2 00 00 00 00 
5b5ec 15d3 00 00 00 00 
5b5f0 15d4 00 00 00 00 
5b5f4 15d5 00 00 00 00 
5b5f8 15d6 00 00 00 00 
5b5fc 15d7 00 00 00 00 
5b600 15d8 00 00 00 00 
5b604 15d9 00 00 00 00 
5b608 15da 00 00 00 00 
5b60c 15db 00 00 00 00 
5b610 15dc 00 00 00 00 
5b614 15dd 00 00 00 00 
5b618 15de 00 00 00 00 
5b61c 15df 00 00 00 00 
5b620 15e0 00 00 00 00 
5b624 15e1 00 00 00 00 
5b628 15e2 00 00 00 00 
5b62c 15e3 00 00 00 00 
5b630 15e4 00 00 00 00 
5b634 15e5 00 00 00 00 
5b638 15e6 00 00 00 00 
5b63c 15e7 00 00 00 00 
5b640 15e8 00 00 00 00 
5b644 15e9 00 00 00 00 
5b648 15ea 00 00 00 00 
5b64c 15eb 00 00 00 00 
5b650 15ec 00 00 00 00 
5b654 15ed 00 00 00 00 
5b658 15ee 00 00 00 00 
5b65c 15ef 00 00 00 00 
5b660 15f0 00 00 00 00 
5b664 15f1 00 00 00 00 
5b668 15f2 00 00 00 00 
5b66c 15f3 00 00 00 00 
5b670 15f4 00 00 00 00 
5b674 15f5 00 00 00 00 
5b678 15f6 00 00 00 00 
5b67c 15f7 00 00 00 00 
5b680 15f8 00 00 00 00 
5b684 15f9 00 00 00 00 
5b688 15fa 00 00 00 00 
5b68c 15fb 00 00 00 00 
5b690 15fc 00 00 00 00 
5b694 15fd 00 00 00 00 
5b698 15fe 00 00 00 00 
5b69c 15ff 00 00 00 00 
5b6a0 1600 00 00 00 00 
5b6a4 1601 00 00 00 00 
5b6a8 1602 00 00 00 00 
5b6ac 1603 00 00 00 00 
5b6b0 1604 00 00 00 00 
5b6b4 1605 00 00 00 00 
5b6b8 1606 00 00 00 00 
5b6bc 1607 00 00 00 00 
5b6c0 1608 00 00 00 00 
5b6c4 1609 00 00 00 00 
5b6c8 160a 00 00 00 00 
5b6cc 160b 00 00 00 00 
5b6d0 160c 00 00 00 00 
5b6d4 160d 00 00 00 00 
5b6d8 160e 00 00 00 00 
5b6dc 160f 00 00 00 00 
5b6e0 1610 00 00 00 00 
5b6e4 1611 00 00 00 00 
5b6e8 1612 00 00 00 00 
5b6ec 1613 00 00 00 00 
5b6f0 1614 00 00 00 00 
5b6f4 1615 00 00 00 00 
5b6f8 1616 00 00 00 00 
5b6fc 1617 00 00 00 00 
5b700 1618 00 00 00 00 
5b704 1619 00 00 00 00 
5b708 161a 00 00 00 00 
5b70c 161b 00 00 00 00 
5b710 161c 00 00 00 00 
5b714 161d 00 00 00 00 
5b718 161e 00 00 00 00 
5b71c 161f 00 00 00 00 
5b720 1620 00 00 00 00 
5b724 1621 00 00 00 00 
5b728 1622 00 00 00 00 
5b72c 1623 00 00 00 00 
5b730 1624 00 00 00 00 
5b734 1625 00 00 00 00 
5b738 1626 00 00 00 00 
5b73c 1627 00 00 00 00 
5b740 1628 00 00 00 00 
5b744 1629 00 00 00 00 
5b748 162a 00 00 00 00 
5b74c 162b 00 00 00 00 
5b750 162c 00 00 00 00 
5b754 162d 00 00 00 00 
5b758 162e 00 00 00 00 
5b75c 162f 00 00 00 00 
5b760 1630 00 00 00 00 
5b764 1631 00 00 00 00 
5b768 1632 00 00 00 00 
5b76c 1633 00 00 00 00 
5b770 1634 00 00 00 00 
5b774 1635 00 00 00 00 
5b778 1636 00 00 00 00 
5b77c 1637 00 00 00 00 
5b780 1638 00 00 00 00 
5b784 1639 00 00 00 00 
5b788 163a 00 00 00 00 
5b78c 163b 00 00 00 00 
5b790 163c 00 00 00 00 
5b794 163d 00 00 00 00 
5b798 163e 00 00 00 00 
5b79c 163f 00 00 00 00 
5b7a0 1640 00 00 00 00 
5b7a4 1641 00 00 00 00 
5b7a8 1642 00 00 00 00 
5b7ac 1643 00 00 00 00 
5b7b0 1644 00 00 00 00 
5b7b4 1645 00 00 00 00 
5b7b8 1646 00 00 00 00 
5b7bc 1647 00 00 00 00 
5b7c0 1648 00 00 00 00 
5b7c4 1649 00 00 00 00 
5b7c8 164a 00 00 00 00 
5b7cc 164b 00 00 00 00 
5b7d0 164c 00 00 00 00 
5b7d4 164d 00 00 00 00 
5b7d8 164e 00 00 00 00 
5b7dc 164f 00 00 00 00 
5b7e0 1650 00 00 00 00 
5b7e4 1651 00 00 00 00 
5b7e8 1652 00 00 00 00 
5b7ec 1653 00 00 00 00 
5b7f0 1654 00 00 00 00 
5b7f4 1655 00 00 00 00 
5b7f8 1656 00 00 00 00 
5b7fc 1657 00 00 00 00 
5b800 1658 00 00 00 00 
5b804 1659 00 00 00 00 
5b808 165a 00 00 00 00 
5b80c 165b 00 00 00 00 
5b810 165c 00 00 00 00 
5b814 165d 00 00 00 00 
5b818 165e 00 00 00 00 
5b81c 165f 00 00 00 00 
5b820 1660 00 00 00 00 
5b824 1661 00 00 00 00 
5b828 1662 00 00 00 00 
5b82c 1663 00 00 00 00 
5b830 1664 00 00 00 00 
5b834 1665 00 00 00 00 
5b838 1666 00 00 00 00 
5b83c 1667 00 00 00 00 
5b840 1668 00 00 00 00 
5b844 1669 00 00 00 00 
5b848 166a 00 00 00 00 
5b84c 166b 00 00 00 00 
5b850 166c 00 00 00 00 
5b854 166d 00 00 00 00 
5b858 166e 00 00 00 00 
5b85c 166f 00 00 00 00 
5b860 1670 00 00 00 00 
5b864 1671 00 00 00 00 
5b868 1672 00 00 00 00 
5b86c 1673 00 00 00 00 
5b870 1674 00 00 00 00 
5b874 1675 00 00 00 00 
5b878 1676 00 00 00 00 
5b87c 1677 00 00 00 00 
5b880 1678 00 00 00 00 
5b884 1679 00 00 00 00 
5b888 167a 00 00 00 00 
5b88c 167b 00 00 00 00 
5b890 167c 00 00 00 00 
5b894 167d 00 00 00 00 
5b898 167e 00 00 00 00 
5b89c 167f 00 00 00 00 
5b8a0 1680 00 00 00 00 
5b8a4 1681 00 00 00 00 
5b8a8 1682 00 00 00 00 
5b8ac 1683 00 00 00 00 
5b8b0 1684 00 00 00 00 
5b8b4 1685 00 00 00 00 
5b8b8 1686 00 00 00 00 
5b8bc 1687 00 00 00 00 
5b8c0 1688 00 00 00 00 
5b8c4 1689 00 00 00 00 
5b8c8 168a 00 00 00 00 
5b8cc 168b 00 00 00 00 
5b8d0 168c 00 00 00 00 
5b8d4 168d 00 00 00 00 
5b8d8 168e 00 00 00 00 
5b8dc 168f 00 00 00 00 
5b8e0 1690 00 00 00 00 
5b8e4 1691 00 00 00 00 
5b8e8 1692 00 00 00 00 
5b8ec 1693 00 00 00 00 
5b8f0 1694 00 00 00 00 
5b8f4 1695 00 00 00 00 
5b8f8 1696 00 00 00 00 
5b8fc 1697 00 00 00 00 
5b900 1698 00 00 00 00 
5b904 1699 00 00 00 00 
5b908 169a 00 00 00 00 
5b90c 169b 00 00 00 00 
5b910 169c 00 00 00 00 
5b914 169d 00 00 00 00 
5b918 169e 00 00 00 00 
5b91c 169f 00 00 00 00 
5b920 16a0 00 00 00 00 
5b924 16a1 00 00 00 00 
5b928 16a2 00 00 00 00 
5b92c 16a3 00 00 00 00 
5b930 16a4 00 00 00 00 
5b934 16a5 00 00 00 00 
5b938 16a6 00 00 00 00 
5b93c 16a7 00 00 00 00 
5b940 16a8 00 00 00 00 
5b944 16a9 00 00 00 00 
5b948 16aa 00 00 00 00 
5b94c 16ab 00 00 00 00 
5b950 16ac 00 00 00 00 
5b954 16ad 00 00 00 00 
5b958 16ae 00 00 00 00 
5b95c 16af 00 00 00 00 
5b960 16b0 00 00 00 00 
5b964 16b1 00 00 00 00 
5b968 16b2 00 00 00 00 
5b96c 16b3 00 00 00 00 
5b970 16b4 00 00 00 00 
5b974 16b5 00 00 00 00 
5b978 16b6 00 00 00 00 
5b97c 16b7 00 00 00 00 
5b980 16b8 00 00 00 00 
5b984 16b9 00 00 00 00 
5b988 16ba 00 00 00 00 
5b98c 16bb 00 00 00 00 
5b990 16bc 00 00 00 00 
5b994 16bd 00 00 00 00 
5b998 16be 00 00 00 00 
5b99c 16bf 00 00 00 00 
5b9a0 16c0 00 00 00 00 
5b9a4 16c1 00 00 00 00 
5b9a8 16c2 00 00 00 00 
5b9ac 16c3 00 00 00 00 
5b9b0 16c4 00 00 00 00 
5b9b4 16c5 00 00 00 00 
5b9b8 16c6 00 00 00 00 
5b9bc 16c7 00 00 00 00 
5b9c0 16c8 00 00 00 00 
5b9c4 16c9 00 00 00 00 
5b9c8 16ca 00 00 00 00 
5b9cc 16cb 00 00 00 00 
5b9d0 16cc 00 00 00 00 
5b9d4 16cd 00 00 00 00 
5b9d8 16ce 00 00 00 00 
5b9dc 16cf 00 00 00 00 
5b9e0 16d0 00 00 00 00 
5b9e4 16d1 00 00 00 00 
5b9e8 16d2 00 00 00 00 
5b9ec 16d3 00 00 00 00 
5b9f0 16d4 00 00 00 00 
5b9f4 16d5 00 00 00 00 
5b9f8 16d6 00 00 00 00 
5b9fc 16d7 00 00 00 00 
5ba00 16d8 00 00 00 00 
5ba04 16d9 00 00 00 00 
5ba08 16da 00 00 00 00 
5ba0c 16db 00 00 00 00 
5ba10 16dc 00 00 00 00 
5ba14 16dd 00 00 00 00 
5ba18 16de 00 00 00 00 
5ba1c 16df 00 00 00 00 
5ba20 16e0 00 00 00 00 
5ba24 16e1 00 00 00 00 
5ba28 16e2 00 00 00 00 
5ba2c 16e3 00 00 00 00 
5ba30 16e4 00 00 00 00 
5ba34 16e5 00 00 00 00 
5ba38 16e6 00 00 00 00 
5ba3c 16e7 00 00 00 00 
5ba40 16e8 00 00 00 00 
5ba44 16e9 00 00 00 00 
5ba48 16ea 00 00 00 00 
5ba4c 16eb 00 00 00 00 
5ba50 16ec 00 00 00 00 
5ba54 16ed 00 00 00 00 
5ba58 16ee 00 00 00 00 
5ba5c 16ef 00 00 00 00 
5ba60 16f0 00 00 00 00 
5ba64 16f1 00 00 00 00 
5ba68 16f2 00 00 00 00 
5ba6c 16f3 00 00 00 00 
5ba70 16f4 00 00 00 00 
5ba74 16f5 00 00 00 00 
5ba78 16f6 00 00 00 00 
5ba7c 16f7 00 00 00 00 
5ba80 16f8 00 00 00 00 
5ba84 16f9 00 00 00 00 
5ba88 16fa 00 00 00 00 
5ba8c 16fb 00 00 00 00 
5ba90 16fc 00 00 00 00 
5ba94 16fd 00 00 00 00 
5ba98 16fe 00 00 00 00 
5ba9c 16ff 00 00 00 00 
5baa0 1700 00 00 00 00 
5baa4 1701 00 00 00 00 
5baa8 1702 00 00 00 00 
5baac 1703 00 00 00 00 
5bab0 1704 00 00 00 00 
5bab4 1705 00 00 00 00 
5bab8 1706 00 00 00 00 
5babc 1707 00 00 00 00 
5bac0 1708 00 00 00 00 
5bac4 1709 00 00 00 00 
5bac8 170a 00 00 00 00 
5bacc 170b 00 00 00 00 
5bad0 170c 00 00 00 00 
5bad4 170d 00 00 00 00 
5bad8 170e 00 00 00 00 
5badc 170f 00 00 00 00 
5bae0 1710 00 00 00 00 
5bae4 1711 00 00 00 00 
5bae8 1712 00 00 00 00 
5baec 1713 00 00 00 00 
5baf0 1714 00 00 00 00 
5baf4 1715 00 00 00 00 
5baf8 1716 00 00 00 00 
5bafc 1717 00 00 00 00 
5bb00 1718 00 00 00 00 
5bb04 1719 00 00 00 00 
5bb08 171a 00 00 00 00 
5bb0c 171b 00 00 00 00 
5bb10 171c 00 00 00 00 
5bb14 171d 00 00 00 00 
5bb18 171e 00 00 00 00 
5bb1c 171f 00 00 00 00 
5bb20 1720 00 00 00 00 
5bb24 1721 00 00 00 00 
5bb28 1722 00 00 00 00 
5bb2c 1723 00 00 00 00 
5bb30 1724 00 00 00 00 
5bb34 1725 00 00 00 00 
5bb38 1726 00 00 00 00 
5bb3c 1727 00 00 00 00 
5bb40 1728 00 00 00 00 
5bb44 1729 00 00 00 00 
5bb48 172a 00 00 00 00 
5bb4c 172b 00 00 00 00 
5bb50 172c 00 00 00 00 
5bb54 172d 00 00 00 00 
5bb58 172e 00 00 00 00 
5bb5c 172f 00 00 00 00 
5bb60 1730 00 00 00 00 
5bb64 1731 00 00 00 00 
5bb68 1732 00 00 00 00 
5bb6c 1733 00 00 00 00 
5bb70 1734 00 00 00 00 
5bb74 1735 00 00 00 00 
5bb78 1736 00 00 00 00 
5bb7c 1737 00 00 00 00 
5bb80 1738 00 00 00 00 
5bb84 1739 00 00 00 00 
5bb88 173a 00 00 00 00 
5bb8c 173b 00 00 00 00 
5bb90 173c 00 00 00 00 
5bb94 173d 00 00 00 00 
5bb98 173e 00 00 00 00 
5bb9c 173f 00 00 00 00 
5bba0 1740 00 00 00 00 
5bba4 1741 00 00 00 00 
5bba8 1742 00 00 00 00 
5bbac 1743 00 00 00 00 
5bbb0 1744 00 00 00 00 
5bbb4 1745 00 00 00 00 
5bbb8 1746 00 00 00 00 
5bbbc 1747 00 00 00 00 
5bbc0 1748 00 00 00 00 
5bbc4 1749 00 00 00 00 
5bbc8 174a 00 00 00 00 
5bbcc 174b 00 00 00 00 
5bbd0 174c 00 00 00 00 
5bbd4 174d 00 00 00 00 
5bbd8 174e 00 00 00 00 
5bbdc 174f 00 00 00 00 
5bbe0 1750 00 00 00 00 
5bbe4 1751 00 00 00 00 
5bbe8 1752 00 00 00 00 
5bbec 1753 00 00 00 00 
5bbf0 1754 00 00 00 00 
5bbf4 1755 00 00 00 00 
5bbf8 1756 00 00 00 00 
5bbfc 1757 00 00 00 00 
5bc00 1758 00 00 00 00 
5bc04 1759 00 00 00 00 
5bc08 175a 00 00 00 00 
5bc0c 175b 00 00 00 00 
5bc10 175c 00 00 00 00 
5bc14 175d 00 00 00 00 
5bc18 175e 00 00 00 00 
5bc1c 175f 00 00 00 00 
5bc20 1760 00 00 00 00 
5bc24 1761 00 00 00 00 
5bc28 1762 00 00 00 00 
5bc2c 1763 00 00 00 00 
5bc30 1764 00 00 00 00 
5bc34 1765 00 00 00 00 
5bc38 1766 00 00 00 00 
5bc3c 1767 00 00 00 00 
5bc40 1768 00 00 00 00 
5bc44 1769 00 00 00 00 
5bc48 176a 00 00 00 00 
5bc4c 176b 00 00 00 00 
5bc50 176c 00 00 00 00 
5bc54 176d 00 00 00 00 
5bc58 176e 00 00 00 00 
5bc5c 176f 00 00 00 00 
5bc60 1770 00 00 00 00 
5bc64 1771 00 00 00 00 
5bc68 1772 00 00 00 00 
5bc6c 1773 00 00 00 00 
5bc70 1774 00 00 00 00 
5bc74 1775 00 00 00 00 
5bc78 1776 00 00 00 00 
5bc7c 1777 00 00 00 00 
5bc80 1778 00 00 00 00 
5bc84 1779 00 00 00 00 
5bc88 177a 00 00 00 00 
5bc8c 177b 00 00 00 00 
5bc90 177c 00 00 00 00 
5bc94 177d 00 00 00 00 
5bc98 177e 00 00 00 00 
5bc9c 177f 00 00 00 00 
5bca0 1780 00 00 00 00 
5bca4 1781 00 00 00 00 
5bca8 1782 00 00 00 00 
5bcac 1783 00 00 00 00 
5bcb0 1784 00 00 00 00 
5bcb4 1785 00 00 00 00 
5bcb8 1786 00 00 00 00 
5bcbc 1787 00 00 00 00 
5bcc0 1788 00 00 00 00 
5bcc4 1789 00 00 00 00 
5bcc8 178a 00 00 00 00 
5bccc 178b 00 00 00 00 
5bcd0 178c 00 00 00 00 
5bcd4 178d 00 00 00 00 
5bcd8 178e 00 00 00 00 
5bcdc 178f 00 00 00 00 
5bce0 1790 00 00 00 00 
5bce4 1791 00 00 00 00 
5bce8 1792 00 00 00 00 
5bcec 1793 00 00 00 00 
5bcf0 1794 00 00 00 00 
5bcf4 1795 00 00 00 00 
5bcf8 1796 00 00 00 00 
5bcfc 1797 00 00 00 00 
5bd00 1798 00 00 00 00 
5bd04 1799 00 00 00 00 
5bd08 179a 00 00 00 00 
5bd0c 179b 00 00 00 00 
5bd10 179c 00 00 00 00 
5bd14 179d 00 00 00 00 
5bd18 179e 00 00 00 00 
5bd1c 179f 00 00 00 00 
5bd20 17a0 00 00 00 00 
5bd24 17a1 00 00 00 00 
5bd28 17a2 00 00 00 00 
5bd2c 17a3 00 00 00 00 
5bd30 17a4 00 00 00 00 
5bd34 17a5 00 00 00 00 
5bd38 17a6 00 00 00 00 
5bd3c 17a7 00 00 00 00 
5bd40 17a8 00 00 00 00 
5bd44 17a9 00 00 00 00 
5bd48 17aa 00 00 00 00 
5bd4c 17ab 00 00 00 00 
5bd50 17ac 00 00 00 00 
5bd54 17ad 00 00 00 00 
5bd58 17ae 00 00 00 00 
5bd5c 17af 00 00 00 00 
5bd60 17b0 00 00 00 00 
5bd64 17b1 00 00 00 00 
5bd68 17b2 00 00 00 00 
5bd6c 17b3 00 00 00 00 
5bd70 17b4 00 00 00 00 
5bd74 17b5 00 00 00 00 
5bd78 17b6 00 00 00 00 
5bd7c 17b7 00 00 00 00 
5bd80 17b8 00 00 00 00 
5bd84 17b9 00 00 00 00 
5bd88 17ba 00 00 00 00 
5bd8c 17bb 00 00 00 00 
5bd90 17bc 00 00 00 00 
5bd94 17bd 00 00 00 00 
5bd98 17be 00 00 00 00 
5bd9c 17bf 00 00 00 00 
5bda0 17c0 00 00 00 00 
5bda4 17c1 00 00 00 00 
5bda8 17c2 00 00 00 00 
5bdac 17c3 00 00 00 00 
5bdb0 17c4 00 00 00 00 
5bdb4 17c5 00 00 00 00 
5bdb8 17c6 00 00 00 00 
5bdbc 17c7 00 00 00 00 
5bdc0 17c8 00 00 00 00 
5bdc4 17c9 00 00 00 00 
5bdc8 17ca 00 00 00 00 
5bdcc 17cb 00 00 00 00 
5bdd0 17cc 00 00 00 00 
5bdd4 17cd 00 00 00 00 
5bdd8 17ce 00 00 00 00 
5bddc 17cf 00 00 00 00 
5bde0 17d0 00 00 00 00 
5bde4 17d1 00 00 00 00 
5bde8 17d2 00 00 00 00 
5bdec 17d3 00 00 00 00 
5bdf0 17d4 00 00 00 00 
5bdf4 17d5 00 00 00 00 
5bdf8 17d6 00 00 00 00 
5bdfc 17d7 00 00 00 00 
5be00 17d8 00 00 00 00 
5be04 17d9 00 00 00 00 
5be08 17da 00 00 00 00 
5be0c 17db 00 00 00 00 
5be10 17dc 00 00 00 00 
5be14 17dd 00 00 00 00 
5be18 17de 00 00 00 00 
5be1c 17df 00 00 00 00 
5be20 17e0 00 00 00 00 
5be24 17e1 00 00 00 00 
5be28 17e2 00 00 00 00 
5be2c 17e3 00 00 00 00 
5be30 17e4 00 00 00 00 
5be34 17e5 00 00 00 00 
5be38 17e6 00 00 00 00 
5be3c 17e7 00 00 00 00 
5be40 17e8 00 00 00 00 
5be44 17e9 00 00 00 00 
5be48 17ea 00 00 00 00 
5be4c 17eb 00 00 00 00 
5be50 17ec 00 00 00 00 
5be54 17ed 00 00 00 00 
5be58 17ee 00 00 00 00 
5be5c 17ef 00 00 00 00 
5be60 17f0 00 00 00 00 
5be64 17f1 00 00 00 00 
5be68 17f2 00 00 00 00 
5be6c 17f3 00 00 00 00 
5be70 17f4 00 00 00 00 
5be74 17f5 00 00 00 00 
5be78 17f6 00 00 00 00 
5be7c 17f7 00 00 00 00 
5be80 17f8 00 00 00 00 
5be84 17f9 00 00 00 00 
5be88 17fa 00 00 00 00 
5be8c 17fb 00 00 00 00 
5be90 17fc 00 00 00 00 
5be94 17fd 00 00 00 00 
5be98 17fe 00 00 00 00 
5be9c 17ff 00 00 00 00 
5bea0 1800 00 00 00 00 
5bea4 1801 00 00 00 00 
5bea8 1802 00 00 00 00 
5beac 1803 00 00 00 00 
5beb0 1804 00 00 00 00 
5beb4 1805 00 00 00 00 
5beb8 1806 00 00 00 00 
5bebc 1807 00 00 00 00 
5bec0 1808 00 00 00 00 
5bec4 1809 00 00 00 00 
5bec8 180a 00 00 00 00 
5becc 180b 00 00 00 00 
5bed0 180c 00 00 00 00 
5bed4 180d 00 00 00 00 
5bed8 180e 00 00 00 00 
5bedc 180f 00 00 00 00 
5bee0 1810 00 00 00 00 
5bee4 1811 00 00 00 00 
5bee8 1812 00 00 00 00 
5beec 1813 00 00 00 00 
5bef0 1814 00 00 00 00 
5bef4 1815 00 00 00 00 
5bef8 1816 00 00 00 00 
5befc 1817 00 00 00 00 
5bf00 1818 00 00 00 00 
5bf04 1819 00 00 00 00 
5bf08 181a 00 00 00 00 
5bf0c 181b 00 00 00 00 
5bf10 181c 00 00 00 00 
5bf14 181d 00 00 00 00 
5bf18 181e 00 00 00 00 
5bf1c 181f 00 00 00 00 
5bf20 1820 00 00 00 00 
5bf24 1821 00 00 00 00 
5bf28 1822 00 00 00 00 
5bf2c 1823 00 00 00 00 
5bf30 1824 00 00 00 00 
5bf34 1825 00 00 00 00 
5bf38 1826 00 00 00 00 
5bf3c 1827 00 00 00 00 
5bf40 1828 00 00 00 00 
5bf44 1829 00 00 00 00 
5bf48 182a 00 00 00 00 
5bf4c 182b 00 00 00 00 
5bf50 182c 00 00 00 00 
5bf54 182d 00 00 00 00 
5bf58 182e 00 00 00 00 
5bf5c 182f 00 00 00 00 
5bf60 1830 00 00 00 00 
5bf64 1831 00 00 00 00 
5bf68 1832 00 00 00 00 
5bf6c 1833 00 00 00 00 
5bf70 1834 00 00 00 00 
5bf74 1835 00 00 00 00 
5bf78 1836 00 00 00 00 
5bf7c 1837 00 00 00 00 
5bf80 1838 00 00 00 00 
5bf84 1839 00 00 00 00 
5bf88 183a 00 00 00 00 
5bf8c 183b 00 00 00 00 
5bf90 183c 00 00 00 00 
5bf94 183d 00 00 00 00 
5bf98 183e 00 00 00 00 
5bf9c 183f 00 00 00 00 
5bfa0 1840 00 00 00 00 
5bfa4 1841 00 00 00 00 
5bfa8 1842 00 00 00 00 
5bfac 1843 00 00 00 00 
5bfb0 1844 00 00 00 00 
5bfb4 1845 00 00 00 00 
5bfb8 1846 00 00 00 00 
5bfbc 1847 00 00 00 00 
5bfc0 1848 00 00 00 00 
5bfc4 1849 00 00 00 00 
5bfc8 184a 00 00 00 00 
5bfcc 184b 00 00 00 00 
5bfd0 184c 00 00 00 00 
5bfd4 184d 00 00 00 00 
5bfd8 184e 00 00 00 00 
5bfdc 184f 00 00 00 00 
5bfe0 1850 00 00 00 00 
5bfe4 1851 00 00 00 00 
5bfe8 1852 00 00 00 00 
5bfec 1853 00 00 00 00 
5bff0 1854 00 00 00 00 
5bff4 1855 00 00 00 00 
5bff8 1856 00 00 00 00 
5bffc 1857 00 00 00 00 
5c000 1858 00 00 00 00 
5c004 1859 00 00 00 00 
5c008 185a 00 00 00 00 
5c00c 185b 00 00 00 00 
5c010 185c 00 00 00 00 
5c014 185d 00 00 00 00 
5c018 185e 00 00 00 00 
5c01c 185f 00 00 00 00 
5c020 1860 00 00 00 00 
5c024 1861 00 00 00 00 
5c028 1862 00 00 00 00 
5c02c 1863 00 00 00 00 
5c030 1864 00 00 00 00 
5c034 1865 00 00 00 00 
5c038 1866 00 00 00 00 
5c03c 1867 00 00 00 00 
5c040 1868 00 00 00 00 
5c044 1869 00 00 00 00 
5c048 186a 00 00 00 00 
5c04c 186b 00 00 00 00 
5c050 186c 00 00 00 00 
5c054 186d 00 00 00 00 
5c058 186e 00 00 00 00 
5c05c 186f 00 00 00 00 
5c060 1870 00 00 00 00 
5c064 1871 00 00 00 00 
5c068 1872 00 00 00 00 
5c06c 1873 00 00 00 00 
5c070 1874 00 00 00 00 
5c074 1875 00 00 00 00 
5c078 1876 00 00 00 00 
5c07c 1877 00 00 00 00 
5c080 1878 00 00 00 00 
5c084 1879 00 00 00 00 
5c088 187a 00 00 00 00 
5c08c 187b 00 00 00 00 
5c090 187c 00 00 00 00 
5c094 187d 00 00 00 00 
5c098 187e 00 00 00 00 
5c09c 187f 00 00 00 00 
5c0a0 1880 00 00 00 00 
5c0a4 1881 00 00 00 00 
5c0a8 1882 00 00 00 00 
5c0ac 1883 00 00 00 00 
5c0b0 1884 00 00 00 00 
5c0b4 1885 00 00 00 00 
5c0b8 1886 00 00 00 00 
5c0bc 1887 00 00 00 00 
5c0c0 1888 00 00 00 00 
5c0c4 1889 00 00 00 00 
5c0c8 188a 00 00 00 00 
5c0cc 188b 00 00 00 00 
5c0d0 188c 00 00 00 00 
5c0d4 188d 00 00 00 00 
5c0d8 188e 00 00 00 00 
5c0dc 188f 00 00 00 00 
5c0e0 1890 00 00 00 00 
5c0e4 1891 00 00 00 00 
5c0e8 1892 00 00 00 00 
5c0ec 1893 00 00 00 00 
5c0f0 1894 00 00 00 00 
5c0f4 1895 00 00 00 00 
5c0f8 1896 00 00 00 00 
5c0fc 1897 00 00 00 00 
5c100 1898 00 00 00 00 
5c104 1899 00 00 00 00 
5c108 189a 00 00 00 00 
5c10c 189b 00 00 00 00 
5c110 189c 00 00 00 00 
5c114 189d 00 00 00 00 
5c118 189e 00 00 00 00 
5c11c 189f 00 00 00 00 
5c120 18a0 00 00 00 00 
5c124 18a1 00 00 00 00 
5c128 18a2 00 00 00 00 
5c12c 18a3 00 00 00 00 
5c130 18a4 00 00 00 00 
5c134 18a5 00 00 00 00 
5c138 18a6 00 00 00 00 
5c13c 18a7 00 00 00 00 
5c140 18a8 00 00 00 00 
5c144 18a9 00 00 00 00 
5c148 18aa 00 00 00 00 
5c14c 18ab 00 00 00 00 
5c150 18ac 00 00 00 00 
5c154 18ad 00 00 00 00 
5c158 18ae 00 00 00 00 
5c15c 18af 00 00 00 00 
5c160 18b0 00 00 00 00 
5c164 18b1 00 00 00 00 
5c168 18b2 00 00 00 00 
5c16c 18b3 00 00 00 00 
5c170 18b4 00 00 00 00 
5c174 18b5 00 00 00 00 
5c178 18b6 00 00 00 00 
5c17c 18b7 00 00 00 00 
5c180 18b8 00 00 00 00 
5c184 18b9 00 00 00 00 
5c188 18ba 00 00 00 00 
5c18c 18bb 00 00 00 00 
5c190 18bc 00 00 00 00 
5c194 18bd 00 00 00 00 
5c198 18be 00 00 00 00 
5c19c 18bf 00 00 00 00 
5c1a0 18c0 00 00 00 00 
5c1a4 18c1 00 00 00 00 
5c1a8 18c2 00 00 00 00 
5c1ac 18c3 00 00 00 00 
5c1b0 18c4 00 00 00 00 
5c1b4 18c5 00 00 00 00 
5c1b8 18c6 00 00 00 00 
5c1bc 18c7 00 00 00 00 
5c1c0 18c8 00 00 00 00 
5c1c4 18c9 00 00 00 00 
5c1c8 18ca 00 00 00 00 
5c1cc 18cb 00 00 00 00 
5c1d0 18cc 00 00 00 00 
5c1d4 18cd 00 00 00 00 
5c1d8 18ce 00 00 00 00 
5c1dc 18cf 00 00 00 00 
5c1e0 18d0 00 00 00 00 
5c1e4 18d1 00 00 00 00 
5c1e8 18d2 00 00 00 00 
5c1ec 18d3 00 00 00 00 
5c1f0 18d4 00 00 00 00 
5c1f4 18d5 00 00 00 00 
5c1f8 18d6 00 00 00 00 
5c1fc 18d7 00 00 00 00 
5c200 18d8 00 00 00 00 
5c204 18d9 00 00 00 00 
5c208 18da 00 00 00 00 
5c20c 18db 00 00 00 00 
5c210 18dc 00 00 00 00 
5c214 18dd 00 00 00 00 
5c218 18de 00 00 00 00 
5c21c 18df 00 00 00 00 
5c220 18e0 00 00 00 00 
5c224 18e1 00 00 00 00 
5c228 18e2 00 00 00 00 
5c22c 18e3 00 00 00 00 
5c230 18e4 00 00 00 00 
5c234 18e5 00 00 00 00 
5c238 18e6 00 00 00 00 
5c23c 18e7 00 00 00 00 
5c240 18e8 00 00 00 00 
5c244 18e9 00 00 00 00 
5c248 18ea 00 00 00 00 
5c24c 18eb 00 00 00 00 
5c250 18ec 00 00 00 00 
5c254 18ed 00 00 00 00 
5c258 18ee 00 00 00 00 
5c25c 18ef 00 00 00 00 
5c260 18f0 00 00 00 00 
5c264 18f1 00 00 00 00 
5c268 18f2 00 00 00 00 
5c26c 18f3 00 00 00 00 
5c270 18f4 00 00 00 00 
5c274 18f5 00 00 00 00 
5c278 18f6 00 00 00 00 
5c27c 18f7 00 00 00 00 
5c280 18f8 00 00 00 00 
5c284 18f9 00 00 00 00 
5c288 18fa 00 00 00 00 
5c28c 18fb 00 00 00 00 
5c290 18fc 00 00 00 00 
5c294 18fd 00 00 00 00 
5c298 18fe 00 00 00 00 
5c29c 18ff 00 00 00 00 
5c2a0 1900 00 00 00 00 
5c2a4 1901 00 00 00 00 
5c2a8 1902 00 00 00 00 
5c2ac 1903 00 00 00 00 
5c2b0 1904 00 00 00 00 
5c2b4 1905 00 00 00 00 
5c2b8 1906 00 00 00 00 
5c2bc 1907 00 00 00 00 
5c2c0 1908 00 00 00 00 
5c2c4 1909 00 00 00 00 
5c2c8 190a 00 00 00 00 
5c2cc 190b 00 00 00 00 
5c2d0 190c 00 00 00 00 
5c2d4 190d 00 00 00 00 
5c2d8 190e 00 00 00 00 
5c2dc 190f 00 00 00 00 
5c2e0 1910 00 00 00 00 
5c2e4 1911 00 00 00 00 
5c2e8 1912 00 00 00 00 
5c2ec 1913 00 00 00 00 
5c2f0 1914 00 00 00 00 
5c2f4 1915 00 00 00 00 
5c2f8 1916 00 00 00 00 
5c2fc 1917 00 00 00 00 
5c300 1918 00 00 00 00 
5c304 1919 00 00 00 00 
5c308 191a 00 00 00 00 
5c30c 191b 00 00 00 00 
5c310 191c 00 00 00 00 
5c314 191d 00 00 00 00 
5c318 191e 00 00 00 00 
5c31c 191f 00 00 00 00 
5c320 1920 00 00 00 00 
5c324 1921 00 00 00 00 
5c328 1922 00 00 00 00 
5c32c 1923 00 00 00 00 
5c330 1924 00 00 00 00 
5c334 1925 00 00 00 00 
5c338 1926 00 00 00 00 
5c33c 1927 00 00 00 00 
5c340 1928 00 00 00 00 
5c344 1929 00 00 00 00 
5c348 192a 00 00 00 00 
5c34c 192b 00 00 00 00 
5c350 192c 00 00 00 00 
5c354 192d 00 00 00 00 
5c358 192e 00 00 00 00 
5c35c 192f 00 00 00 00 
5c360 1930 00 00 00 00 
5c364 1931 00 00 00 00 
5c368 1932 00 00 00 00 
5c36c 1933 00 00 00 00 
5c370 1934 00 00 00 00 
5c374 1935 00 00 00 00 
5c378 1936 00 00 00 00 
5c37c 1937 00 00 00 00 
5c380 1938 00 00 00 00 
5c384 1939 00 00 00 00 
5c388 193a 00 00 00 00 
5c38c 193b 00 00 00 00 
5c390 193c 00 00 00 00 
5c394 193d 00 00 00 00 
5c398 193e 00 00 00 00 
5c39c 193f 00 00 00 00 
5c3a0 1940 00 00 00 00 
5c3a4 1941 00 00 00 00 
5c3a8 1942 00 00 00 00 
5c3ac 1943 00 00 00 00 
5c3b0 1944 00 00 00 00 
5c3b4 1945 00 00 00 00 
5c3b8 1946 00 00 00 00 
5c3bc 1947 00 00 00 00 
5c3c0 1948 00 00 00 00 
5c3c4 1949 00 00 00 00 
5c3c8 194a 00 00 00 00 
5c3cc 194b 00 00 00 00 
5c3d0 194c 00 00 00 00 
5c3d4 194d 00 00 00 00 
5c3d8 194e 00 00 00 00 
5c3dc 194f 00 00 00 00 
5c3e0 1950 00 00 00 00 
5c3e4 1951 00 00 00 00 
5c3e8 1952 00 00 00 00 
5c3ec 1953 00 00 00 00 
5c3f0 1954 00 00 00 00 
5c3f4 1955 00 00 00 00 
5c3f8 1956 00 00 00 00 
5c3fc 1957 00 00 00 00 
5c400 1958 00 00 00 00 
5c404 1959 00 00 00 00 
5c408 195a 00 00 00 00 
5c40c 195b 00 00 00 00 
5c410 195c 00 00 00 00 
5c414 195d 00 00 00 00 
5c418 195e 00 00 00 00 
5c41c 195f 00 00 00 00 
5c420 1960 00 00 00 00 
5c424 1961 00 00 00 00 
5c428 1962 00 00 00 00 
5c42c 1963 00 00 00 00 
5c430 1964 00 00 00 00 
5c434 1965 00 00 00 00 
5c438 1966 00 00 00 00 
5c43c 1967 00 00 00 00 
5c440 1968 00 00 00 00 
5c444 1969 00 00 00 00 
5c448 196a 00 00 00 00 
5c44c 196b 00 00 00 00 
5c450 196c 00 00 00 00 
5c454 196d 00 00 00 00 
5c458 196e 00 00 00 00 
5c45c 196f 00 00 00 00 
5c460 1970 00 00 00 00 
5c464 1971 00 00 00 00 
5c468 1972 00 00 00 00 
5c46c 1973 00 00 00 00 
5c470 1974 00 00 00 00 
5c474 1975 00 00 00 00 
5c478 1976 00 00 00 00 
5c47c 1977 00 00 00 00 
5c480 1978 00 00 00 00 
5c484 1979 00 00 00 00 
5c488 197a 00 00 00 00 
5c48c 197b 00 00 00 00 
5c490 197c 00 00 00 00 
5c494 197d 00 00 00 00 
5c498 197e 00 00 00 00 
5c49c 197f 00 00 00 00 
5c4a0 1980 00 00 00 00 
5c4a4 1981 00 00 00 00 
5c4a8 1982 00 00 00 00 
5c4ac 1983 00 00 00 00 
5c4b0 1984 00 00 00 00 
5c4b4 1985 00 00 00 00 
5c4b8 1986 00 00 00 00 
5c4bc 1987 00 00 00 00 
5c4c0 1988 00 00 00 00 
5c4c4 1989 00 00 00 00 
5c4c8 198a 00 00 00 00 
5c4cc 198b 00 00 00 00 
5c4d0 198c 00 00 00 00 
5c4d4 198d 00 00 00 00 
5c4d8 198e 00 00 00 00 
5c4dc 198f 00 00 00 00 
5c4e0 1990 00 00 00 00 
5c4e4 1991 00 00 00 00 
5c4e8 1992 00 00 00 00 
5c4ec 1993 00 00 00 00 
5c4f0 1994 00 00 00 00 
5c4f4 1995 00 00 00 00 
5c4f8 1996 00 00 00 00 
5c4fc 1997 00 00 00 00 
5c500 1998 00 00 00 00 
5c504 1999 00 00 00 00 
5c508 199a 00 00 00 00 
5c50c 199b 00 00 00 00 
5c510 199c 00 00 00 00 
5c514 199d 00 00 00 00 
5c518 199e 00 00 00 00 
5c51c 199f 00 00 00 00 
5c520 19a0 00 00 00 00 
5c524 19a1 00 00 00 00 
5c528 19a2 00 00 00 00 
5c52c 19a3 00 00 00 00 
5c530 19a4 00 00 00 00 
5c534 19a5 00 00 00 00 
5c538 19a6 00 00 00 00 
5c53c 19a7 00 00 00 00 
5c540 19a8 00 00 00 00 
5c544 19a9 00 00 00 00 
5c548 19aa 00 00 00 00 
5c54c 19ab 00 00 00 00 
5c550 19ac 00 00 00 00 
5c554 19ad 00 00 00 00 
5c558 19ae 00 00 00 00 
5c55c 19af 00 00 00 00 
5c560 19b0 00 00 00 00 
5c564 19b1 00 00 00 00 
5c568 19b2 00 00 00 00 
5c56c 19b3 00 00 00 00 
5c570 19b4 00 00 00 00 
5c574 19b5 00 00 00 00 
5c578 19b6 00 00 00 00 
5c57c 19b7 00 00 00 00 
5c580 19b8 00 00 00 00 
5c584 19b9 00 00 00 00 
5c588 19ba 00 00 00 00 
5c58c 19bb 00 00 00 00 
5c590 19bc 00 00 00 00 
5c594 19bd 00 00 00 00 
5c598 19be 00 00 00 00 
5c59c 19bf 00 00 00 00 
5c5a0 19c0 00 00 00 00 
5c5a4 19c1 00 00 00 00 
5c5a8 19c2 00 00 00 00 
5c5ac 19c3 00 00 00 00 
5c5b0 19c4 00 00 00 00 
5c5b4 19c5 00 00 00 00 
5c5b8 19c6 00 00 00 00 
5c5bc 19c7 00 00 00 00 
5c5c0 19c8 00 00 00 00 
5c5c4 19c9 00 00 00 00 
5c5c8 19ca 00 00 00 00 
5c5cc 19cb 00 00 00 00 
5c5d0 19cc 00 00 00 00 
5c5d4 19cd 00 00 00 00 
5c5d8 19ce 00 00 00 00 
5c5dc 19cf 00 00 00 00 
5c5e0 19d0 00 00 00 00 
5c5e4 19d1 00 00 00 00 
5c5e8 19d2 00 00 00 00 
5c5ec 19d3 00 00 00 00 
5c5f0 19d4 00 00 00 00 
5c5f4 19d5 00 00 00 00 
5c5f8 19d6 00 00 00 00 
5c5fc 19d7 00 00 00 00 
5c600 19d8 00 00 00 00 
5c604 19d9 00 00 00 00 
5c608 19da 00 00 00 00 
5c60c 19db 00 00 00 00 
5c610 19dc 00 00 00 00 
5c614 19dd 00 00 00 00 
5c618 19de 00 00 00 00 
5c61c 19df 00 00 00 00 
5c620 19e0 00 00 00 00 
5c624 19e1 00 00 00 00 
5c628 19e2 00 00 00 00 
5c62c 19e3 00 00 00 00 
5c630 19e4 00 00 00 00 
5c634 19e5 00 00 00 00 
5c638 19e6 00 00 00 00 
5c63c 19e7 00 00 00 00 
5c640 19e8 00 00 00 00 
5c644 19e9 00 00 00 00 
5c648 19ea 00 00 00 00 
5c64c 19eb 00 00 00 00 
5c650 19ec 00 00 00 00 
5c654 19ed 00 00 00 00 
5c658 19ee 00 00 00 00 
5c65c 19ef 00 00 00 00 
5c660 19f0 00 00 00 00 
5c664 19f1 00 00 00 00 
5c668 19f2 00 00 00 00 
5c66c 19f3 00 00 00 00 
5c670 19f4 00 00 00 00 
5c674 19f5 00 00 00 00 
5c678 19f6 00 00 00 00 
5c67c 19f7 00 00 00 00 
5c680 19f8 00 00 00 00 
5c684 19f9 00 00 00 00 
5c688 19fa 00 00 00 00 
5c68c 19fb 00 00 00 00 
5c690 19fc 00 00 00 00 
5c694 19fd 00 00 00 00 
5c698 19fe 00 00 00 00 
5c69c 19ff 00 00 00 00 
5c6a0 1a00 00 00 00 00 
5c6a4 1a01 00 00 00 00 
5c6a8 1a02 00 00 00 00 
5c6ac 1a03 00 00 00 00 
5c6b0 1a04 00 00 00 00 
5c6b4 1a05 00 00 00 00 
5c6b8 1a06 00 00 00 00 
5c6bc 1a07 00 00 00 00 
5c6c0 1a08 00 00 00 00 
5c6c4 1a09 00 00 00 00 
5c6c8 1a0a 00 00 00 00 
5c6cc 1a0b 00 00 00 00 
5c6d0 1a0c 00 00 00 00 
5c6d4 1a0d 00 00 00 00 
5c6d8 1a0e 00 00 00 00 
5c6dc 1a0f 00 00 00 00 
5c6e0 1a10 00 00 00 00 
5c6e4 1a11 00 00 00 00 
5c6e8 1a12 00 00 00 00 
5c6ec 1a13 00 00 00 00 
5c6f0 1a14 00 00 00 00 
5c6f4 1a15 00 00 00 00 
5c6f8 1a16 00 00 00 00 
5c6fc 1a17 00 00 00 00 
5c700 1a18 00 00 00 00 
5c704 1a19 00 00 00 00 
5c708 1a1a 00 00 00 00 
5c70c 1a1b 00 00 00 00 
5c710 1a1c 00 00 00 00 
5c714 1a1d 00 00 00 00 
5c718 1a1e 00 00 00 00 
5c71c 1a1f 00 00 00 00 
5c720 1a20 00 00 00 00 
5c724 1a21 00 00 00 00 
5c728 1a22 00 00 00 00 
5c72c 1a23 00 00 00 00 
5c730 1a24 00 00 00 00 
5c734 1a25 00 00 00 00 
5c738 1a26 00 00 00 00 
5c73c 1a27 00 00 00 00 
5c740 1a28 00 00 00 00 
5c744 1a29 00 00 00 00 
5c748 1a2a 00 00 00 00 
5c74c 1a2b 00 00 00 00 
5c750 1a2c 00 00 00 00 
5c754 1a2d 00 00 00 00 
5c758 1a2e 00 00 00 00 
5c75c 1a2f 00 00 00 00 
5c760 1a30 00 00 00 00 
5c764 1a31 00 00 00 00 
5c768 1a32 00 00 00 00 
5c76c 1a33 00 00 00 00 
5c770 1a34 00 00 00 00 
5c774 1a35 00 00 00 00 
5c778 1a36 00 00 00 00 
5c77c 1a37 00 00 00 00 
5c780 1a38 00 00 00 00 
5c784 1a39 00 00 00 00 
5c788 1a3a 00 00 00 00 
5c78c 1a3b 00 00 00 00 
5c790 1a3c 00 00 00 00 
5c794 1a3d 00 00 00 00 
5c798 1a3e 00 00 00 00 
5c79c 1a3f 00 00 00 00 
5c7a0 1a40 00 00 00 00 
5c7a4 1a41 00 00 00 00 
5c7a8 1a42 00 00 00 00 
5c7ac 1a43 00 00 00 00 
5c7b0 1a44 00 00 00 00 
5c7b4 1a45 00 00 00 00 
5c7b8 1a46 00 00 00 00 
5c7bc 1a47 00 00 00 00 
5c7c0 1a48 00 00 00 00 
5c7c4 1a49 00 00 00 00 
5c7c8 1a4a 00 00 00 00 
5c7cc 1a4b 00 00 00 00 
5c7d0 1a4c 00 00 00 00 
5c7d4 1a4d 00 00 00 00 
5c7d8 1a4e 00 00 00 00 
5c7dc 1a4f 00 00 00 00 
5c7e0 1a50 00 00 00 00 
5c7e4 1a51 00 00 00 00 
5c7e8 1a52 00 00 00 00 
5c7ec 1a53 00 00 00 00 
5c7f0 1a54 00 00 00 00 
5c7f4 1a55 00 00 00 00 
5c7f8 1a56 00 00 00 00 
5c7fc 1a57 00 00 00 00 
5c800 1a58 00 00 00 00 
5c804 1a59 00 00 00 00 
5c808 1a5a 00 00 00 00 
5c80c 1a5b 00 00 00 00 
5c810 1a5c 00 00 00 00 
5c814 1a5d 00 00 00 00 
5c818 1a5e 00 00 00 00 
5c81c 1a5f 00 00 00 00 
5c820 1a60 00 00 00 00 
5c824 1a61 00 00 00 00 
5c828 1a62 00 00 00 00 
5c82c 1a63 00 00 00 00 
5c830 1a64 00 00 00 00 
5c834 1a65 00 00 00 00 
5c838 1a66 00 00 00 00 
5c83c 1a67 00 00 00 00 
5c840 1a68 00 00 00 00 
5c844 1a69 00 00 00 00 
5c848 1a6a 00 00 00 00 
5c84c 1a6b 00 00 00 00 
5c850 1a6c 00 00 00 00 
5c854 1a6d 00 00 00 00 
5c858 1a6e 00 00 00 00 
5c85c 1a6f 00 00 00 00 
5c860 1a70 00 00 00 00 
5c864 1a71 00 00 00 00 
5c868 1a72 00 00 00 00 
5c86c 1a73 00 00 00 00 
5c870 1a74 00 00 00 00 
5c874 1a75 00 00 00 00 
5c878 1a76 00 00 00 00 
5c87c 1a77 00 00 00 00 
5c880 1a78 00 00 00 00 
5c884 1a79 00 00 00 00 
5c888 1a7a 00 00 00 00 
5c88c 1a7b 00 00 00 00 
5c890 1a7c 00 00 00 00 
5c894 1a7d 00 00 00 00 
5c898 1a7e 00 00 00 00 
5c89c 1a7f 00 00 00 00 
5c8a0 1a80 00 00 00 00 
5c8a4 1a81 00 00 00 00 
5c8a8 1a82 00 00 00 00 
5c8ac 1a83 00 00 00 00 
5c8b0 1a84 00 00 00 00 
5c8b4 1a85 00 00 00 00 
5c8b8 1a86 00 00 00 00 
5c8bc 1a87 00 00 00 00 
5c8c0 1a88 00 00 00 00 
5c8c4 1a89 00 00 00 00 
5c8c8 1a8a 00 00 00 00 
5c8cc 1a8b 00 00 00 00 
5c8d0 1a8c 00 00 00 00 
5c8d4 1a8d 00 00 00 00 
5c8d8 1a8e 00 00 00 00 
5c8dc 1a8f 00 00 00 00 
5c8e0 1a90 00 00 00 00 
5c8e4 1a91 00 00 00 00 
5c8e8 1a92 00 00 00 00 
5c8ec 1a93 00 00 00 00 
5c8f0 1a94 00 00 00 00 
5c8f4 1a95 00 00 00 00 
5c8f8 1a96 00 00 00 00 
5c8fc 1a97 00 00 00 00 
5c900 1a98 00 00 00 00 
5c904 1a99 00 00 00 00 
5c908 1a9a 00 00 00 00 
5c90c 1a9b 00 00 00 00 
5c910 1a9c 00 00 00 00 
5c914 1a9d 00 00 00 00 
5c918 1a9e 00 00 00 00 
5c91c 1a9f 00 00 00 00 
5c920 1aa0 00 00 00 00 
5c924 1aa1 00 00 00 00 
5c928 1aa2 00 00 00 00 
5c92c 1aa3 00 00 00 00 
5c930 1aa4 00 00 00 00 
5c934 1aa5 00 00 00 00 
5c938 1aa6 00 00 00 00 
5c93c 1aa7 00 00 00 00 
5c940 1aa8 00 00 00 00 
5c944 1aa9 00 00 00 00 
5c948 1aaa 00 00 00 00 
5c94c 1aab 00 00 00 00 
5c950 1aac 00 00 00 00 
5c954 1aad 00 00 00 00 
5c958 1aae 00 00 00 00 
5c95c 1aaf 00 00 00 00 
5c960 1ab0 00 00 00 00 
5c964 1ab1 00 00 00 00 
5c968 1ab2 00 00 00 00 
5c96c 1ab3 00 00 00 00 
5c970 1ab4 00 00 00 00 
5c974 1ab5 00 00 00 00 
5c978 1ab6 00 00 00 00 
5c97c 1ab7 00 00 00 00 
5c980 1ab8 00 00 00 00 
5c984 1ab9 00 00 00 00 
5c988 1aba 00 00 00 00 
5c98c 1abb 00 00 00 00 
5c990 1abc 00 00 00 00 
5c994 1abd 00 00 00 00 
5c998 1abe 00 00 00 00 
5c99c 1abf 00 00 00 00 
5c9a0 1ac0 00 00 00 00 
5c9a4 1ac1 00 00 00 00 
5c9a8 1ac2 00 00 00 00 
5c9ac 1ac3 00 00 00 00 
5c9b0 1ac4 00 00 00 00 
5c9b4 1ac5 00 00 00 00 
5c9b8 1ac6 00 00 00 00 
5c9bc 1ac7 00 00 00 00 
5c9c0 1ac8 00 00 00 00 
5c9c4 1ac9 00 00 00 00 
5c9c8 1aca 00 00 00 00 
5c9cc 1acb 00 00 00 00 
5c9d0 1acc 00 00 00 00 
5c9d4 1acd 00 00 00 00 
5c9d8 1ace 00 00 00 00 
5c9dc 1acf 00 00 00 00 
5c9e0 1ad0 00 00 00 00 
5c9e4 1ad1 00 00 00 00 
5c9e8 1ad2 00 00 00 00 
5c9ec 1ad3 00 00 00 00 
5c9f0 1ad4 00 00 00 00 
5c9f4 1ad5 00 00 00 00 
5c9f8 1ad6 00 00 00 00 
5c9fc 1ad7 00 00 00 00 
5ca00 1ad8 00 00 00 00 
5ca04 1ad9 00 00 00 00 
5ca08 1ada 00 00 00 00 
5ca0c 1adb 00 00 00 00 
5ca10 1adc 00 00 00 00 
5ca14 1add 00 00 00 00 
5ca18 1ade 00 00 00 00 
5ca1c 1adf 00 00 00 00 
5ca20 1ae0 00 00 00 00 
5ca24 1ae1 00 00 00 00 
5ca28 1ae2 00 00 00 00 
5ca2c 1ae3 00 00 00 00 
5ca30 1ae4 00 00 00 00 
5ca34 1ae5 00 00 00 00 
5ca38 1ae6 00 00 00 00 
5ca3c 1ae7 00 00 00 00 
5ca40 1ae8 00 00 00 00 
5ca44 1ae9 00 00 00 00 
5ca48 1aea 00 00 00 00 
5ca4c 1aeb 00 00 00 00 
5ca50 1aec 00 00 00 00 
5ca54 1aed 00 00 00 00 
5ca58 1aee 00 00 00 00 
5ca5c 1aef 00 00 00 00 
5ca60 1af0 00 00 00 00 
5ca64 1af1 00 00 00 00 
5ca68 1af2 00 00 00 00 
5ca6c 1af3 00 00 00 00 
5ca70 1af4 00 00 00 00 
5ca74 1af5 00 00 00 00 
5ca78 1af6 00 00 00 00 
5ca7c 1af7 00 00 00 00 
5ca80 1af8 00 00 00 00 
5ca84 1af9 00 00 00 00 
5ca88 1afa 00 00 00 00 
5ca8c 1afb 00 00 00 00 
5ca90 1afc 00 00 00 00 
5ca94 1afd 00 00 00 00 
5ca98 1afe 00 00 00 00 
5ca9c 1aff 00 00 00 00 
5caa0 1b00 00 00 00 00 
5caa4 1b01 00 00 00 00 
5caa8 1b02 00 00 00 00 
5caac 1b03 00 00 00 00 
5cab0 1b04 00 00 00 00 
5cab4 1b05 00 00 00 00 
5cab8 1b06 00 00 00 00 
5cabc 1b07 00 00 00 00 
5cac0 1b08 00 00 00 00 
5cac4 1b09 00 00 00 00 
5cac8 1b0a 00 00 00 00 
5cacc 1b0b 00 00 00 00 
5cad0 1b0c 00 00 00 00 
5cad4 1b0d 00 00 00 00 
5cad8 1b0e 00 00 00 00 
5cadc 1b0f 00 00 00 00 
5cae0 1b10 00 00 00 00 
5cae4 1b11 00 00 00 00 
5cae8 1b12 00 00 00 00 
5caec 1b13 00 00 00 00 
5caf0 1b14 00 00 00 00 
5caf4 1b15 00 00 00 00 
5caf8 1b16 00 00 00 00 
5cafc 1b17 00 00 00 00 
5cb00 1b18 00 00 00 00 
5cb04 1b19 00 00 00 00 
5cb08 1b1a 00 00 00 00 
5cb0c 1b1b 00 00 00 00 
5cb10 1b1c 00 00 00 00 
5cb14 1b1d 00 00 00 00 
5cb18 1b1e 00 00 00 00 
5cb1c 1b1f 00 00 00 00 
5cb20 1b20 00 00 00 00 
5cb24 1b21 00 00 00 00 
5cb28 1b22 00 00 00 00 
5cb2c 1b23 00 00 00 00 
5cb30 1b24 00 00 00 00 
5cb34 1b25 00 00 00 00 
5cb38 1b26 00 00 00 00 
5cb3c 1b27 00 00 00 00 
5cb40 1b28 00 00 00 00 
5cb44 1b29 00 00 00 00 
5cb48 1b2a 00 00 00 00 
5cb4c 1b2b 00 00 00 00 
5cb50 1b2c 00 00 00 00 
5cb54 1b2d 00 00 00 00 
5cb58 1b2e 00 00 00 00 
5cb5c 1b2f 00 00 00 00 
5cb60 1b30 00 00 00 00 
5cb64 1b31 00 00 00 00 
5cb68 1b32 00 00 00 00 
5cb6c 1b33 00 00 00 00 
5cb70 1b34 00 00 00 00 
5cb74 1b35 00 00 00 00 
5cb78 1b36 00 00 00 00 
5cb7c 1b37 00 00 00 00 
5cb80 1b38 00 00 00 00 
5cb84 1b39 00 00 00 00 
5cb88 1b3a 00 00 00 00 
5cb8c 1b3b 00 00 00 00 
5cb90 1b3c 00 00 00 00 
5cb94 1b3d 00 00 00 00 
5cb98 1b3e 00 00 00 00 
5cb9c 1b3f 00 00 00 00 
5cba0 1b40 00 00 00 00 
5cba4 1b41 00 00 00 00 
5cba8 1b42 00 00 00 00 
5cbac 1b43 00 00 00 00 
5cbb0 1b44 00 00 00 00 
5cbb4 1b45 00 00 00 00 
5cbb8 1b46 00 00 00 00 
5cbbc 1b47 00 00 00 00 
5cbc0 1b48 00 00 00 00 
5cbc4 1b49 00 00 00 00 
5cbc8 1b4a 00 00 00 00 
5cbcc 1b4b 00 00 00 00 
5cbd0 1b4c 00 00 00 00 
5cbd4 1b4d 00 00 00 00 
5cbd8 1b4e 00 00 00 00 
5cbdc 1b4f 00 00 00 00 
5cbe0 1b50 00 00 00 00 
5cbe4 1b51 00 00 00 00 
5cbe8 1b52 00 00 00 00 
5cbec 1b53 00 00 00 00 
5cbf0 1b54 00 00 00 00 
5cbf4 1b55 00 00 00 00 
5cbf8 1b56 00 00 00 00 
5cbfc 1b57 00 00 00 00 
5cc00 1b58 00 00 00 00 
5cc04 1b59 00 00 00 00 
5cc08 1b5a 00 00 00 00 
5cc0c 1b5b 00 00 00 00 
5cc10 1b5c 00 00 00 00 
5cc14 1b5d 00 00 00 00 
5cc18 1b5e 00 00 00 00 
5cc1c 1b5f 00 00 00 00 
5cc20 1b60 00 00 00 00 
5cc24 1b61 00 00 00 00 
5cc28 1b62 00 00 00 00 
5cc2c 1b63 00 00 00 00 
5cc30 1b64 00 00 00 00 
5cc34 1b65 00 00 00 00 
5cc38 1b66 00 00 00 00 
5cc3c 1b67 00 00 00 00 
5cc40 1b68 00 00 00 00 
5cc44 1b69 00 00 00 00 
5cc48 1b6a 00 00 00 00 
5cc4c 1b6b 00 00 00 00 
5cc50 1b6c 00 00 00 00 
5cc54 1b6d 00 00 00 00 
5cc58 1b6e 00 00 00 00 
5cc5c 1b6f 00 00 00 00 
5cc60 1b70 00 00 00 00 
5cc64 1b71 00 00 00 00 
5cc68 1b72 00 00 00 00 
5cc6c 1b73 00 00 00 00 
5cc70 1b74 00 00 00 00 
5cc74 1b75 00 00 00 00 
5cc78 1b76 00 00 00 00 
5cc7c 1b77 00 00 00 00 
5cc80 1b78 00 00 00 00 
5cc84 1b79 00 00 00 00 
5cc88 1b7a 00 00 00 00 
5cc8c 1b7b 00 00 00 00 
5cc90 1b7c 00 00 00 00 
5cc94 1b7d 00 00 00 00 
5cc98 1b7e 00 00 00 00 
5cc9c 1b7f 00 00 00 00 
5cca0 1b80 00 00 00 00 
5cca4 1b81 00 00 00 00 
5cca8 1b82 00 00 00 00 
5ccac 1b83 00 00 00 00 
5ccb0 1b84 00 00 00 00 
5ccb4 1b85 00 00 00 00 
5ccb8 1b86 00 00 00 00 
5ccbc 1b87 00 00 00 00 
5ccc0 1b88 00 00 00 00 
5ccc4 1b89 00 00 00 00 
5ccc8 1b8a 00 00 00 00 
5cccc 1b8b 00 00 00 00 
5ccd0 1b8c 00 00 00 00 
5ccd4 1b8d 00 00 00 00 
5ccd8 1b8e 00 00 00 00 
5ccdc 1b8f 00 00 00 00 
5cce0 1b90 00 00 00 00 
5cce4 1b91 00 00 00 00 
5cce8 1b92 00 00 00 00 
5ccec 1b93 00 00 00 00 
5ccf0 1b94 00 00 00 00 
5ccf4 1b95 00 00 00 00 
5ccf8 1b96 00 00 00 00 
5ccfc 1b97 00 00 00 00 
5cd00 1b98 00 00 00 00 
5cd04 1b99 00 00 00 00 
5cd08 1b9a 00 00 00 00 
5cd0c 1b9b 00 00 00 00 
5cd10 1b9c 00 00 00 00 
5cd14 1b9d 00 00 00 00 
5cd18 1b9e 00 00 00 00 
5cd1c 1b9f 00 00 00 00 
5cd20 1ba0 00 00 00 00 
5cd24 1ba1 00 00 00 00 
5cd28 1ba2 00 00 00 00 
5cd2c 1ba3 00 00 00 00 
5cd30 1ba4 00 00 00 00 
5cd34 1ba5 00 00 00 00 
5cd38 1ba6 00 00 00 00 
5cd3c 1ba7 00 00 00 00 
5cd40 1ba8 00 00 00 00 
5cd44 1ba9 00 00 00 00 
5cd48 1baa 00 00 00 00 
5cd4c 1bab 00 00 00 00 
5cd50 1bac 00 00 00 00 
5cd54 1bad 00 00 00 00 
5cd58 1bae 00 00 00 00 
5cd5c 1baf 00 00 00 00 
5cd60 1bb0 00 00 00 00 
5cd64 1bb1 00 00 00 00 
5cd68 1bb2 00 00 00 00 
5cd6c 1bb3 00 00 00 00 
5cd70 1bb4 00 00 00 00 
5cd74 1bb5 00 00 00 00 
5cd78 1bb6 00 00 00 00 
5cd7c 1bb7 00 00 00 00 
5cd80 1bb8 00 00 00 00 
5cd84 1bb9 00 00 00 00 
5cd88 1bba 00 00 00 00 
5cd8c 1bbb 00 00 00 00 
5cd90 1bbc 00 00 00 00 
5cd94 1bbd 00 00 00 00 
5cd98 1bbe 00 00 00 00 
5cd9c 1bbf 00 00 00 00 
5cda0 1bc0 00 00 00 00 
5cda4 1bc1 00 00 00 00 
5cda8 1bc2 00 00 00 00 
5cdac 1bc3 00 00 00 00 
5cdb0 1bc4 00 00 00 00 
5cdb4 1bc5 00 00 00 00 
5cdb8 1bc6 00 00 00 00 
5cdbc 1bc7 00 00 00 00 
5cdc0 1bc8 00 00 00 00 
5cdc4 1bc9 00 00 00 00 
5cdc8 1bca 00 00 00 00 
5cdcc 1bcb 00 00 00 00 
5cdd0 1bcc 00 00 00 00 
5cdd4 1bcd 00 00 00 00 
5cdd8 1bce 00 00 00 00 
5cddc 1bcf 00 00 00 00 
5cde0 1bd0 00 00 00 00 
5cde4 1bd1 00 00 00 00 
5cde8 1bd2 00 00 00 00 
5cdec 1bd3 00 00 00 00 
5cdf0 1bd4 00 00 00 00 
5cdf4 1bd5 00 00 00 00 
5cdf8 1bd6 00 00 00 00 
5cdfc 1bd7 00 00 00 00 
5ce00 1bd8 00 00 00 00 
5ce04 1bd9 00 00 00 00 
5ce08 1bda 00 00 00 00 
5ce0c 1bdb 00 00 00 00 
5ce10 1bdc 00 00 00 00 
5ce14 1bdd 00 00 00 00 
5ce18 1bde 00 00 00 00 
5ce1c 1bdf 00 00 00 00 
5ce20 1be0 00 00 00 00 
5ce24 1be1 00 00 00 00 
5ce28 1be2 00 00 00 00 
5ce2c 1be3 00 00 00 00 
5ce30 1be4 00 00 00 00 
5ce34 1be5 00 00 00 00 
5ce38 1be6 00 00 00 00 
5ce3c 1be7 00 00 00 00 
5ce40 1be8 00 00 00 00 
5ce44 1be9 00 00 00 00 
5ce48 1bea 00 00 00 00 
5ce4c 1beb 00 00 00 00 
5ce50 1bec 00 00 00 00 
5ce54 1bed 00 00 00 00 
5ce58 1bee 00 00 00 00 
5ce5c 1bef 00 00 00 00 
5ce60 1bf0 00 00 00 00 
5ce64 1bf1 00 00 00 00 
5ce68 1bf2 00 00 00 00 
5ce6c 1bf3 00 00 00 00 
5ce70 1bf4 00 00 00 00 
5ce74 1bf5 00 00 00 00 
5ce78 1bf6 00 00 00 00 
5ce7c 1bf7 00 00 00 00 
5ce80 1bf8 00 00 00 00 
5ce84 1bf9 00 00 00 00 
5ce88 1bfa 00 00 00 00 
5ce8c 1bfb 00 00 00 00 
5ce90 1bfc 00 00 00 00 
5ce94 1bfd 00 00 00 00 
5ce98 1bfe 00 00 00 00 
5ce9c 1bff 00 00 00 00 
5cea0 1c00 00 00 00 00 
5cea4 1c01 00 00 00 00 
5cea8 1c02 00 00 00 00 
5ceac 1c03 00 00 00 00 
5ceb0 1c04 00 00 00 00 
5ceb4 1c05 00 00 00 00 
5ceb8 1c06 00 00 00 00 
5cebc 1c07 00 00 00 00 
5cec0 1c08 00 00 00 00 
5cec4 1c09 00 00 00 00 
5cec8 1c0a 00 00 00 00 
5cecc 1c0b 00 00 00 00 
5ced0 1c0c 00 00 00 00 
5ced4 1c0d 00 00 00 00 
5ced8 1c0e 00 00 00 00 
5cedc 1c0f 00 00 00 00 
5cee0 1c10 00 00 00 00 
5cee4 1c11 00 00 00 00 
5cee8 1c12 00 00 00 00 
5ceec 1c13 00 00 00 00 
5cef0 1c14 00 00 00 00 
5cef4 1c15 00 00 00 00 
5cef8 1c16 00 00 00 00 
5cefc 1c17 00 00 00 00 
5cf00 1c18 00 00 00 00 
5cf04 1c19 00 00 00 00 
5cf08 1c1a 00 00 00 00 
5cf0c 1c1b 00 00 00 00 
5cf10 1c1c 00 00 00 00 
5cf14 1c1d 00 00 00 00 
5cf18 1c1e 00 00 00 00 
5cf1c 1c1f 00 00 00 00 
5cf20 1c20 00 00 00 00 
5cf24 1c21 00 00 00 00 
5cf28 1c22 00 00 00 00 
5cf2c 1c23 00 00 00 00 
5cf30 1c24 00 00 00 00 
5cf34 1c25 00 00 00 00 
5cf38 1c26 00 00 00 00 
5cf3c 1c27 00 00 00 00 
5cf40 1c28 00 00 00 00 
5cf44 1c29 00 00 00 00 
5cf48 1c2a 00 00 00 00 
5cf4c 1c2b 00 00 00 00 
5cf50 1c2c 00 00 00 00 
5cf54 1c2d 00 00 00 00 
5cf58 1c2e 00 00 00 00 
5cf5c 1c2f 00 00 00 00 
5cf60 1c30 00 00 00 00 
5cf64 1c31 00 00 00 00 
5cf68 1c32 00 00 00 00 
5cf6c 1c33 00 00 00 00 
5cf70 1c34 00 00 00 00 
5cf74 1c35 00 00 00 00 
5cf78 1c36 00 00 00 00 
5cf7c 1c37 00 00 00 00 
5cf80 1c38 00 00 00 00 
5cf84 1c39 00 00 00 00 
5cf88 1c3a 00 00 00 00 
5cf8c 1c3b 00 00 00 00 
5cf90 1c3c 00 00 00 00 
5cf94 1c3d 00 00 00 00 
5cf98 1c3e 00 00 00 00 
5cf9c 1c3f 00 00 00 00 
5cfa0 1c40 00 00 00 00 
5cfa4 1c41 00 00 00 00 
5cfa8 1c42 00 00 00 00 
5cfac 1c43 00 00 00 00 
5cfb0 1c44 00 00 00 00 
5cfb4 1c45 00 00 00 00 
5cfb8 1c46 00 00 00 00 
5cfbc 1c47 00 00 00 00 
5cfc0 1c48 00 00 00 00 
5cfc4 1c49 00 00 00 00 
5cfc8 1c4a 00 00 00 00 
5cfcc 1c4b 00 00 00 00 
5cfd0 1c4c 00 00 00 00 
5cfd4 1c4d 00 00 00 00 
5cfd8 1c4e 00 00 00 00 
5cfdc 1c4f 00 00 00 00 
5cfe0 1c50 00 00 00 00 
5cfe4 1c51 00 00 00 00 
5cfe8 1c52 00 00 00 00 
5cfec 1c53 00 00 00 00 
5cff0 1c54 00 00 00 00 
5cff4 1c55 00 00 00 00 
5cff8 1c56 00 00 00 00 
5cffc 1c57 00 00 00 00 
5d000 1c58 00 00 00 00 
5d004 1c59 00 00 00 00 
5d008 1c5a 00 00 00 00 
5d00c 1c5b 00 00 00 00 
5d010 1c5c 00 00 00 00 
5d014 1c5d 00 00 00 00 
5d018 1c5e 00 00 00 00 
5d01c 1c5f 00 00 00 00 
5d020 1c60 00 00 00 00 
5d024 1c61 00 00 00 00 
5d028 1c62 00 00 00 00 
5d02c 1c63 00 00 00 00 
5d030 1c64 00 00 00 00 
5d034 1c65 00 00 00 00 
5d038 1c66 00 00 00 00 
5d03c 1c67 00 00 00 00 
5d040 1c68 00 00 00 00 
5d044 1c69 00 00 00 00 
5d048 1c6a 00 00 00 00 
5d04c 1c6b 00 00 00 00 
5d050 1c6c 00 00 00 00 
5d054 1c6d 00 00 00 00 
5d058 1c6e 00 00 00 00 
5d05c 1c6f 00 00 00 00 
5d060 1c70 00 00 00 00 
5d064 1c71 00 00 00 00 
5d068 1c72 00 00 00 00 
5d06c 1c73 00 00 00 00 
5d070 1c74 00 00 00 00 
5d074 1c75 00 00 00 00 
5d078 1c76 00 00 00 00 
5d07c 1c77 00 00 00 00 
5d080 1c78 00 00 00 00 
5d084 1c79 00 00 00 00 
5d088 1c7a 00 00 00 00 
5d08c 1c7b 00 00 00 00 
5d090 1c7c 00 00 00 00 
5d094 1c7d 00 00 00 00 
5d098 1c7e 00 00 00 00 
5d09c 1c7f 00 00 00 00 
5d0a0 1c80 00 00 00 00 
5d0a4 1c81 00 00 00 00 
5d0a8 1c82 00 00 00 00 
5d0ac 1c83 00 00 00 00 
5d0b0 1c84 00 00 00 00 
5d0b4 1c85 00 00 00 00 
5d0b8 1c86 00 00 00 00 
5d0bc 1c87 00 00 00 00 
5d0c0 1c88 00 00 00 00 
5d0c4 1c89 00 00 00 00 
5d0c8 1c8a 00 00 00 00 
5d0cc 1c8b 00 00 00 00 
5d0d0 1c8c 00 00 00 00 
5d0d4 1c8d 00 00 00 00 
5d0d8 1c8e 00 00 00 00 
5d0dc 1c8f 00 00 00 00 
5d0e0 1c90 00 00 00 00 
5d0e4 1c91 00 00 00 00 
5d0e8 1c92 00 00 00 00 
5d0ec 1c93 00 00 00 00 
5d0f0 1c94 00 00 00 00 
5d0f4 1c95 00 00 00 00 
5d0f8 1c96 00 00 00 00 
5d0fc 1c97 00 00 00 00 
5d100 1c98 00 00 00 00 
5d104 1c99 00 00 00 00 
5d108 1c9a 00 00 00 00 
5d10c 1c9b 00 00 00 00 
5d110 1c9c 00 00 00 00 
5d114 1c9d 00 00 00 00 
5d118 1c9e 00 00 00 00 
5d11c 1c9f 00 00 00 00 
5d120 1ca0 00 00 00 00 
5d124 1ca1 00 00 00 00 
5d128 1ca2 00 00 00 00 
5d12c 1ca3 00 00 00 00 
5d130 1ca4 00 00 00 00 
5d134 1ca5 00 00 00 00 
5d138 1ca6 00 00 00 00 
5d13c 1ca7 00 00 00 00 
5d140 1ca8 00 00 00 00 
5d144 1ca9 00 00 00 00 
5d148 1caa 00 00 00 00 
5d14c 1cab 00 00 00 00 
5d150 1cac 00 00 00 00 
5d154 1cad 00 00 00 00 
5d158 1cae 00 00 00 00 
5d15c 1caf 00 00 00 00 
5d160 1cb0 00 00 00 00 
5d164 1cb1 00 00 00 00 
5d168 1cb2 00 00 00 00 
5d16c 1cb3 00 00 00 00 
5d170 1cb4 00 00 00 00 
5d174 1cb5 00 00 00 00 
5d178 1cb6 00 00 00 00 
5d17c 1cb7 00 00 00 00 
5d180 1cb8 00 00 00 00 
5d184 1cb9 00 00 00 00 
5d188 1cba 00 00 00 00 
5d18c 1cbb 00 00 00 00 
5d190 1cbc 00 00 00 00 
5d194 1cbd 00 00 00 00 
5d198 1cbe 00 00 00 00 
5d19c 1cbf 00 00 00 00 
5d1a0 1cc0 00 00 00 00 
5d1a4 1cc1 00 00 00 00 
5d1a8 1cc2 00 00 00 00 
5d1ac 1cc3 00 00 00 00 
5d1b0 1cc4 00 00 00 00 
5d1b4 1cc5 00 00 00 00 
5d1b8 1cc6 00 00 00 00 
5d1bc 1cc7 00 00 00 00 
5d1c0 1cc8 00 00 00 00 
5d1c4 1cc9 00 00 00 00 
5d1c8 1cca 00 00 00 00 
5d1cc 1ccb 00 00 00 00 
5d1d0 1ccc 00 00 00 00 
5d1d4 1ccd 00 00 00 00 
5d1d8 1cce 00 00 00 00 
5d1dc 1ccf 00 00 00 00 
5d1e0 1cd0 00 00 00 00 
5d1e4 1cd1 00 00 00 00 
5d1e8 1cd2 00 00 00 00 
5d1ec 1cd3 00 00 00 00 
5d1f0 1cd4 00 00 00 00 
5d1f4 1cd5 00 00 00 00 
5d1f8 1cd6 00 00 00 00 
5d1fc 1cd7 00 00 00 00 
5d200 1cd8 00 00 00 00 
5d204 1cd9 00 00 00 00 
5d208 1cda 00 00 00 00 
5d20c 1cdb 00 00 00 00 
5d210 1cdc 00 00 00 00 
5d214 1cdd 00 00 00 00 
5d218 1cde 00 00 00 00 
5d21c 1cdf 00 00 00 00 
5d220 1ce0 00 00 00 00 
5d224 1ce1 00 00 00 00 
5d228 1ce2 00 00 00 00 
5d22c 1ce3 00 00 00 00 
5d230 1ce4 00 00 00 00 
5d234 1ce5 00 00 00 00 
5d238 1ce6 00 00 00 00 
5d23c 1ce7 00 00 00 00 
5d240 1ce8 00 00 00 00 
5d244 1ce9 00 00 00 00 
5d248 1cea 00 00 00 00 
5d24c 1ceb 00 00 00 00 
5d250 1cec 00 00 00 00 
5d254 1ced 00 00 00 00 
5d258 1cee 00 00 00 00 
5d25c 1cef 00 00 00 00 
5d260 1cf0 00 00 00 00 
5d264 1cf1 00 00 00 00 
5d268 1cf2 00 00 00 00 
5d26c 1cf3 00 00 00 00 
5d270 1cf4 00 00 00 00 
5d274 1cf5 00 00 00 00 
5d278 1cf6 00 00 00 00 
5d27c 1cf7 00 00 00 00 
5d280 1cf8 00 00 00 00 
5d284 1cf9 00 00 00 00 
5d288 1cfa 00 00 00 00 
5d28c 1cfb 00 00 00 00 
5d290 1cfc 00 00 00 00 
5d294 1cfd 00 00 00 00 
5d298 1cfe 00 00 00 00 
5d29c 1cff 00 00 00 00 
5d2a0 1d00 00 00 00 00 
5d2a4 1d01 00 00 00 00 
5d2a8 1d02 00 00 00 00 
5d2ac 1d03 00 00 00 00 
5d2b0 1d04 00 00 00 00 
5d2b4 1d05 00 00 00 00 
5d2b8 1d06 00 00 00 00 
5d2bc 1d07 00 00 00 00 
5d2c0 1d08 00 00 00 00 
5d2c4 1d09 00 00 00 00 
5d2c8 1d0a 00 00 00 00 
5d2cc 1d0b 00 00 00 00 
5d2d0 1d0c 00 00 00 00 
5d2d4 1d0d 00 00 00 00 
5d2d8 1d0e 00 00 00 00 
5d2dc 1d0f 00 00 00 00 
5d2e0 1d10 00 00 00 00 
5d2e4 1d11 00 00 00 00 
5d2e8 1d12 00 00 00 00 
5d2ec 1d13 00 00 00 00 
5d2f0 1d14 00 00 00 00 
5d2f4 1d15 00 00 00 00 
5d2f8 1d16 00 00 00 00 
5d2fc 1d17 00 00 00 00 
5d300 1d18 00 00 00 00 
5d304 1d19 00 00 00 00 
5d308 1d1a 00 00 00 00 
5d30c 1d1b 00 00 00 00 
5d310 1d1c 00 00 00 00 
5d314 1d1d 00 00 00 00 
5d318 1d1e 00 00 00 00 
5d31c 1d1f 00 00 00 00 
5d320 1d20 00 00 00 00 
5d324 1d21 00 00 00 00 
5d328 1d22 00 00 00 00 
5d32c 1d23 00 00 00 00 
5d330 1d24 00 00 00 00 
5d334 1d25 00 00 00 00 
5d338 1d26 00 00 00 00 
5d33c 1d27 00 00 00 00 
5d340 1d28 00 00 00 00 
5d344 1d29 00 00 00 00 
5d348 1d2a 00 00 00 00 
5d34c 1d2b 00 00 00 00 
5d350 1d2c 00 00 00 00 
5d354 1d2d 00 00 00 00 
5d358 1d2e 00 00 00 00 
5d35c 1d2f 00 00 00 00 
5d360 1d30 00 00 00 00 
5d364 1d31 00 00 00 00 
5d368 1d32 00 00 00 00 
5d36c 1d33 00 00 00 00 
5d370 1d34 00 00 00 00 
5d374 1d35 00 00 00 00 
5d378 1d36 00 00 00 00 
5d37c 1d37 00 00 00 00 
5d380 1d38 00 00 00 00 
5d384 1d39 00 00 00 00 
5d388 1d3a 00 00 00 00 
5d38c 1d3b 00 00 00 00 
5d390 1d3c 00 00 00 00 
5d394 1d3d 00 00 00 00 
5d398 1d3e 00 00 00 00 
5d39c 1d3f 00 00 00 00 
5d3a0 1d40 00 00 00 00 
5d3a4 1d41 00 00 00 00 
5d3a8 1d42 00 00 00 00 
5d3ac 1d43 00 00 00 00 
5d3b0 1d44 00 00 00 00 
5d3b4 1d45 00 00 00 00 
5d3b8 1d46 00 00 00 00 
5d3bc 1d47 00 00 00 00 
5d3c0 1d48 00 00 00 00 
5d3c4 1d49 00 00 00 00 
5d3c8 1d4a 00 00 00 00 
5d3cc 1d4b 00 00 00 00 
5d3d0 1d4c 00 00 00 00 
5d3d4 1d4d 00 00 00 00 
5d3d8 1d4e 00 00 00 00 
5d3dc 1d4f 00 00 00 00 
5d3e0 1d50 00 00 00 00 
5d3e4 1d51 00 00 00 00 
5d3e8 1d52 00 00 00 00 
5d3ec 1d53 00 00 00 00 
5d3f0 1d54 00 00 00 00 
5d3f4 1d55 00 00 00 00 
5d3f8 1d56 00 00 00 00 
5d3fc 1d57 00 00 00 00 
5d400 1d58 00 00 00 00 
5d404 1d59 00 00 00 00 
5d408 1d5a 00 00 00 00 
5d40c 1d5b 00 00 00 00 
5d410 1d5c 00 00 00 00 
5d414 1d5d 00 00 00 00 
5d418 1d5e 00 00 00 00 
5d41c 1d5f 00 00 00 00 
5d420 1d60 00 00 00 00 
5d424 1d61 00 00 00 00 
5d428 1d62 00 00 00 00 
5d42c 1d63 00 00 00 00 
5d430 1d64 00 00 00 00 
5d434 1d65 00 00 00 00 
5d438 1d66 00 00 00 00 
5d43c 1d67 00 00 00 00 
5d440 1d68 00 00 00 00 
5d444 1d69 00 00 00 00 
5d448 1d6a 00 00 00 00 
5d44c 1d6b 00 00 00 00 
5d450 1d6c 00 00 00 00 
5d454 1d6d 00 00 00 00 
5d458 1d6e 00 00 00 00 
5d45c 1d6f 00 00 00 00 
5d460 1d70 00 00 00 00 
5d464 1d71 00 00 00 00 
5d468 1d72 00 00 00 00 
5d46c 1d73 00 00 00 00 
5d470 1d74 00 00 00 00 
5d474 1d75 00 00 00 00 
5d478 1d76 00 00 00 00 
5d47c 1d77 00 00 00 00 
5d480 1d78 00 00 00 00 
5d484 1d79 00 00 00 00 
5d488 1d7a 00 00 00 00 
5d48c 1d7b 00 00 00 00 
5d490 1d7c 00 00 00 00 
5d494 1d7d 00 00 00 00 
5d498 1d7e 00 00 00 00 
5d49c 1d7f 00 00 00 00 
5d4a0 1d80 00 00 00 00 
5d4a4 1d81 00 00 00 00 
5d4a8 1d82 00 00 00 00 
5d4ac 1d83 00 00 00 00 
5d4b0 1d84 00 00 00 00 
5d4b4 1d85 00 00 00 00 
5d4b8 1d86 00 00 00 00 
5d4bc 1d87 00 00 00 00 
5d4c0 1d88 00 00 00 00 
5d4c4 1d89 00 00 00 00 
5d4c8 1d8a 00 00 00 00 
5d4cc 1d8b 00 00 00 00 
5d4d0 1d8c 00 00 00 00 
5d4d4 1d8d 00 00 00 00 
5d4d8 1d8e 00 00 00 00 
5d4dc 1d8f 00 00 00 00 
5d4e0 1d90 00 00 00 00 
5d4e4 1d91 00 00 00 00 
5d4e8 1d92 00 00 00 00 
5d4ec 1d93 00 00 00 00 
5d4f0 1d94 00 00 00 00 
5d4f4 1d95 00 00 00 00 
5d4f8 1d96 00 00 00 00 
5d4fc 1d97 00 00 00 00 
5d500 1d98 00 00 00 00 
5d504 1d99 00 00 00 00 
5d508 1d9a 00 00 00 00 
5d50c 1d9b 00 00 00 00 
5d510 1d9c 00 00 00 00 
5d514 1d9d 00 00 00 00 
5d518 1d9e 00 00 00 00 
5d51c 1d9f 00 00 00 00 
5d520 1da0 00 00 00 00 
5d524 1da1 00 00 00 00 
5d528 1da2 00 00 00 00 
5d52c 1da3 00 00 00 00 
5d530 1da4 00 00 00 00 
5d534 1da5 00 00 00 00 
5d538 1da6 00 00 00 00 
5d53c 1da7 00 00 00 00 
5d540 1da8 00 00 00 00 
5d544 1da9 00 00 00 00 
5d548 1daa 00 00 00 00 
5d54c 1dab 00 00 00 00 
5d550 1dac 00 00 00 00 
5d554 1dad 00 00 00 00 
5d558 1dae 00 00 00 00 
5d55c 1daf 00 00 00 00 
5d560 1db0 00 00 00 00 
5d564 1db1 00 00 00 00 
5d568 1db2 00 00 00 00 
5d56c 1db3 00 00 00 00 
5d570 1db4 00 00 00 00 
5d574 1db5 00 00 00 00 
5d578 1db6 00 00 00 00 
5d57c 1db7 00 00 00 00 
5d580 1db8 00 00 00 00 
5d584 1db9 00 00 00 00 
5d588 1dba 00 00 00 00 
5d58c 1dbb 00 00 00 00 
5d590 1dbc 00 00 00 00 
5d594 1dbd 00 00 00 00 
5d598 1dbe 00 00 00 00 
5d59c 1dbf 00 00 00 00 
5d5a0 1dc0 00 00 00 00 
5d5a4 1dc1 00 00 00 00 
5d5a8 1dc2 00 00 00 00 
5d5ac 1dc3 00 00 00 00 
5d5b0 1dc4 00 00 00 00 
5d5b4 1dc5 00 00 00 00 
5d5b8 1dc6 00 00 00 00 
5d5bc 1dc7 00 00 00 00 
5d5c0 1dc8 00 00 00 00 
5d5c4 1dc9 00 00 00 00 
5d5c8 1dca 00 00 00 00 
5d5cc 1dcb 00 00 00 00 
5d5d0 1dcc 00 00 00 00 
5d5d4 1dcd 00 00 00 00 
5d5d8 1dce 00 00 00 00 
5d5dc 1dcf 00 00 00 00 
5d5e0 1dd0 00 00 00 00 
5d5e4 1dd1 00 00 00 00 
5d5e8 1dd2 00 00 00 00 
5d5ec 1dd3 00 00 00 00 
5d5f0 1dd4 00 00 00 00 
5d5f4 1dd5 00 00 00 00 
5d5f8 1dd6 00 00 00 00 
5d5fc 1dd7 00 00 00 00 
5d600 1dd8 00 00 00 00 
5d604 1dd9 00 00 00 00 
5d608 1dda 00 00 00 00 
5d60c 1ddb 00 00 00 00 
5d610 1ddc 00 00 00 00 
5d614 1ddd 00 00 00 00 
5d618 1dde 00 00 00 00 
5d61c 1ddf 00 00 00 00 
5d620 1de0 00 00 00 00 
5d624 1de1 00 00 00 00 
5d628 1de2 00 00 00 00 
5d62c 1de3 00 00 00 00 
5d630 1de4 00 00 00 00 
5d634 1de5 00 00 00 00 
5d638 1de6 00 00 00 00 
5d63c 1de7 00 00 00 00 
5d640 1de8 00 00 00 00 
5d644 1de9 00 00 00 00 
5d648 1dea 00 00 00 00 
5d64c 1deb 00 00 00 00 
5d650 1dec 00 00 00 00 
5d654 1ded 00 00 00 00 
5d658 1dee 00 00 00 00 
5d65c 1def 00 00 00 00 
5d660 1df0 00 00 00 00 
5d664 1df1 00 00 00 00 
5d668 1df2 00 00 00 00 
5d66c 1df3 00 00 00 00 
5d670 1df4 00 00 00 00 
5d674 1df5 00 00 00 00 
5d678 1df6 00 00 00 00 
5d67c 1df7 00 00 00 00 
5d680 1df8 00 00 00 00 
5d684 1df9 00 00 00 00 
5d688 1dfa 00 00 00 00 
5d68c 1dfb 00 00 00 00 
5d690 1dfc 00 00 00 00 
5d694 1dfd 00 00 00 00 
5d698 1dfe 00 00 00 00 
5d69c 1dff 00 00 00 00 
5d6a0 1e00 00 00 00 00 
5d6a4 1e01 00 00 00 00 
5d6a8 1e02 00 00 00 00 
5d6ac 1e03 00 00 00 00 
5d6b0 1e04 00 00 00 00 
5d6b4 1e05 00 00 00 00 
5d6b8 1e06 00 00 00 00 
5d6bc 1e07 00 00 00 00 
5d6c0 1e08 00 00 00 00 
5d6c4 1e09 00 00 00 00 
5d6c8 1e0a 00 00 00 00 
5d6cc 1e0b 00 00 00 00 
5d6d0 1e0c 00 00 00 00 
5d6d4 1e0d 00 00 00 00 
5d6d8 1e0e 00 00 00 00 
5d6dc 1e0f 00 00 00 00 
5d6e0 1e10 00 00 00 00 
5d6e4 1e11 00 00 00 00 
5d6e8 1e12 00 00 00 00 
5d6ec 1e13 00 00 00 00 
5d6f0 1e14 00 00 00 00 
5d6f4 1e15 00 00 00 00 
5d6f8 1e16 00 00 00 00 
5d6fc 1e17 00 00 00 00 
5d700 1e18 00 00 00 00 
5d704 1e19 00 00 00 00 
5d708 1e1a 00 00 00 00 
5d70c 1e1b 00 00 00 00 
5d710 1e1c 00 00 00 00 
5d714 1e1d 00 00 00 00 
5d718 1e1e 00 00 00 00 
5d71c 1e1f 00 00 00 00 
5d720 1e20 00 00 00 00 
5d724 1e21 00 00 00 00 
5d728 1e22 00 00 00 00 
5d72c 1e23 00 00 00 00 
5d730 1e24 00 00 00 00 
5d734 1e25 00 00 00 00 
5d738 1e26 00 00 00 00 
5d73c 1e27 00 00 00 00 
5d740 1e28 00 00 00 00 
5d744 1e29 00 00 00 00 
5d748 1e2a 00 00 00 00 
5d74c 1e2b 00 00 00 00 
5d750 1e2c 00 00 00 00 
5d754 1e2d 00 00 00 00 
5d758 1e2e 00 00 00 00 
5d75c 1e2f 00 00 00 00 
5d760 1e30 00 00 00 00 
5d764 1e31 00 00 00 00 
5d768 1e32 00 00 00 00 
5d76c 1e33 00 00 00 00 
5d770 1e34 00 00 00 00 
5d774 1e35 00 00 00 00 
5d778 1e36 00 00 00 00 
5d77c 1e37 00 00 00 00 
5d780 1e38 00 00 00 00 
5d784 1e39 00 00 00 00 
5d788 1e3a 00 00 00 00 
5d78c 1e3b 00 00 00 00 
5d790 1e3c 00 00 00 00 
5d794 1e3d 00 00 00 00 
5d798 1e3e 00 00 00 00 
5d79c 1e3f 00 00 00 00 
5d7a0 1e40 00 00 00 00 
5d7a4 1e41 00 00 00 00 
5d7a8 1e42 00 00 00 00 
5d7ac 1e43 00 00 00 00 
5d7b0 1e44 00 00 00 00 
5d7b4 1e45 00 00 00 00 
5d7b8 1e46 00 00 00 00 
5d7bc 1e47 00 00 00 00 
5d7c0 1e48 00 00 00 00 
5d7c4 1e49 00 00 00 00 
5d7c8 1e4a 00 00 00 00 
5d7cc 1e4b 00 00 00 00 
5d7d0 1e4c 00 00 00 00 
5d7d4 1e4d 00 00 00 00 
5d7d8 1e4e 00 00 00 00 
5d7dc 1e4f 00 00 00 00 
5d7e0 1e50 00 00 00 00 
5d7e4 1e51 00 00 00 00 
5d7e8 1e52 00 00 00 00 
5d7ec 1e53 00 00 00 00 
5d7f0 1e54 00 00 00 00 
5d7f4 1e55 00 00 00 00 
5d7f8 1e56 00 00 00 00 
5d7fc 1e57 00 00 00 00 
5d800 1e58 00 00 00 00 
5d804 1e59 00 00 00 00 
5d808 1e5a 00 00 00 00 
5d80c 1e5b 00 00 00 00 
5d810 1e5c 00 00 00 00 
5d814 1e5d 00 00 00 00 
5d818 1e5e 00 00 00 00 
5d81c 1e5f 00 00 00 00 
5d820 1e60 00 00 00 00 
5d824 1e61 00 00 00 00 
5d828 1e62 00 00 00 00 
5d82c 1e63 00 00 00 00 
5d830 1e64 00 00 00 00 
5d834 1e65 00 00 00 00 
5d838 1e66 00 00 00 00 
5d83c 1e67 00 00 00 00 
5d840 1e68 00 00 00 00 
5d844 1e69 00 00 00 00 
5d848 1e6a 00 00 00 00 
5d84c 1e6b 00 00 00 00 
5d850 1e6c 00 00 00 00 
5d854 1e6d 00 00 00 00 
5d858 1e6e 00 00 00 00 
5d85c 1e6f 00 00 00 00 
5d860 1e70 00 00 00 00 
5d864 1e71 00 00 00 00 
5d868 1e72 00 00 00 00 
5d86c 1e73 00 00 00 00 
5d870 1e74 00 00 00 00 
5d874 1e75 00 00 00 00 
5d878 1e76 00 00 00 00 
5d87c 1e77 00 00 00 00 
5d880 1e78 00 00 00 00 
5d884 1e79 00 00 00 00 
5d888 1e7a 00 00 00 00 
5d88c 1e7b 00 00 00 00 
5d890 1e7c 00 00 00 00 
5d894 1e7d 00 00 00 00 
5d898 1e7e 00 00 00 00 
5d89c 1e7f 00 00 00 00 
5d8a0 1e80 00 00 00 00 
5d8a4 1e81 00 00 00 00 
5d8a8 1e82 00 00 00 00 
5d8ac 1e83 00 00 00 00 
5d8b0 1e84 00 00 00 00 
5d8b4 1e85 00 00 00 00 
5d8b8 1e86 00 00 00 00 
5d8bc 1e87 00 00 00 00 
5d8c0 1e88 00 00 00 00 
5d8c4 1e89 00 00 00 00 
5d8c8 1e8a 00 00 00 00 
5d8cc 1e8b 00 00 00 00 
5d8d0 1e8c 00 00 00 00 
5d8d4 1e8d 00 00 00 00 
5d8d8 1e8e 00 00 00 00 
5d8dc 1e8f 00 00 00 00 
5d8e0 1e90 00 00 00 00 
5d8e4 1e91 00 00 00 00 
5d8e8 1e92 00 00 00 00 
5d8ec 1e93 00 00 00 00 
5d8f0 1e94 00 00 00 00 
5d8f4 1e95 00 00 00 00 
5d8f8 1e96 00 00 00 00 
5d8fc 1e97 00 00 00 00 
5d900 1e98 00 00 00 00 
5d904 1e99 00 00 00 00 
5d908 1e9a 00 00 00 00 
5d90c 1e9b 00 00 00 00 
5d910 1e9c 00 00 00 00 
5d914 1e9d 00 00 00 00 
5d918 1e9e 00 00 00 00 
5d91c 1e9f 00 00 00 00 
5d920 1ea0 00 00 00 00 
5d924 1ea1 00 00 00 00 
5d928 1ea2 00 00 00 00 
5d92c 1ea3 00 00 00 00 
5d930 1ea4 00 00 00 00 
5d934 1ea5 00 00 00 00 
5d938 1ea6 00 00 00 00 
5d93c 1ea7 00 00 00 00 
5d940 1ea8 00 00 00 00 
5d944 1ea9 00 00 00 00 
5d948 1eaa 00 00 00 00 
5d94c 1eab 00 00 00 00 
5d950 1eac 00 00 00 00 
5d954 1ead 00 00 00 00 
5d958 1eae 00 00 00 00 
5d95c 1eaf 00 00 00 00 
5d960 1eb0 00 00 00 00 
5d964 1eb1 00 00 00 00 
5d968 1eb2 00 00 00 00 
5d96c 1eb3 00 00 00 00 
5d970 1eb4 00 00 00 00 
5d974 1eb5 00 00 00 00 
5d978 1eb6 00 00 00 00 
5d97c 1eb7 00 00 00 00 
5d980 1eb8 00 00 00 00 
5d984 1eb9 00 00 00 00 
5d988 1eba 00 00 00 00 
5d98c 1ebb 00 00 00 00 
5d990 1ebc 00 00 00 00 
5d994 1ebd 00 00 00 00 
5d998 1ebe 00 00 00 00 
5d99c 1ebf 00 00 00 00 
5d9a0 1ec0 00 00 00 00 
5d9a4 1ec1 00 00 00 00 
5d9a8 1ec2 00 00 00 00 
5d9ac 1ec3 00 00 00 00 
5d9b0 1ec4 00 00 00 00 
5d9b4 1ec5 00 00 00 00 
5d9b8 1ec6 00 00 00 00 
5d9bc 1ec7 00 00 00 00 
5d9c0 1ec8 00 00 00 00 
5d9c4 1ec9 00 00 00 00 
5d9c8 1eca 00 00 00 00 
5d9cc 1ecb 00 00 00 00 
5d9d0 1ecc 00 00 00 00 
5d9d4 1ecd 00 00 00 00 
5d9d8 1ece 00 00 00 00 
5d9dc 1ecf 00 00 00 00 
5d9e0 1ed0 00 00 00 00 
5d9e4 1ed1 00 00 00 00 
5d9e8 1ed2 00 00 00 00 
5d9ec 1ed3 00 00 00 00 
5d9f0 1ed4 00 00 00 00 
5d9f4 1ed5 00 00 00 00 
5d9f8 1ed6 00 00 00 00 
5d9fc 1ed7 00 00 00 00 
5da00 1ed8 00 00 00 00 
5da04 1ed9 00 00 00 00 
5da08 1eda 00 00 00 00 
5da0c 1edb 00 00 00 00 
5da10 1edc 00 00 00 00 
5da14 1edd 00 00 00 00 
5da18 1ede 00 00 00 00 
5da1c 1edf 00 00 00 00 
5da20 1ee0 00 00 00 00 
5da24 1ee1 00 00 00 00 
5da28 1ee2 00 00 00 00 
5da2c 1ee3 00 00 00 00 
5da30 1ee4 00 00 00 00 
5da34 1ee5 00 00 00 00 
5da38 1ee6 00 00 00 00 
5da3c 1ee7 00 00 00 00 
5da40 1ee8 00 00 00 00 
5da44 1ee9 00 00 00 00 
5da48 1eea 00 00 00 00 
5da4c 1eeb 00 00 00 00 
5da50 1eec 00 00 00 00 
5da54 1eed 00 00 00 00 
5da58 1eee 00 00 00 00 
5da5c 1eef 00 00 00 00 
5da60 1ef0 00 00 00 00 
5da64 1ef1 00 00 00 00 
5da68 1ef2 00 00 00 00 
5da6c 1ef3 00 00 00 00 
5da70 1ef4 00 00 00 00 
5da74 1ef5 00 00 00 00 
5da78 1ef6 00 00 00 00 
5da7c 1ef7 00 00 00 00 
5da80 1ef8 00 00 00 00 
5da84 1ef9 00 00 00 00 
5da88 1efa 00 00 00 00 
5da8c 1efb 00 00 00 00 
5da90 1efc 00 00 00 00 
5da94 1efd 00 00 00 00 
5da98 1efe 00 00 00 00 
5da9c 1eff 00 00 00 00 
5daa0 1f00 00 00 00 00 
5daa4 1f01 00 00 00 00 
5daa8 1f02 00 00 00 00 
5daac 1f03 00 00 00 00 
5dab0 1f04 00 00 00 00 
5dab4 1f05 00 00 00 00 
5dab8 1f06 00 00 00 00 
5dabc 1f07 00 00 00 00 
5dac0 1f08 00 00 00 00 
5dac4 1f09 00 00 00 00 
5dac8 1f0a 00 00 00 00 
5dacc 1f0b 00 00 00 00 
5dad0 1f0c 00 00 00 00 
5dad4 1f0d 00 00 00 00 
5dad8 1f0e 00 00 00 00 
5dadc 1f0f 00 00 00 00 
5dae0 1f10 00 00 00 00 
5dae4 1f11 00 00 00 00 
5dae8 1f12 00 00 00 00 
5daec 1f13 00 00 00 00 
5daf0 1f14 00 00 00 00 
5daf4 1f15 00 00 00 00 
5daf8 1f16 00 00 00 00 
5dafc 1f17 00 00 00 00 
5db00 1f18 00 00 00 00 
5db04 1f19 00 00 00 00 
5db08 1f1a 00 00 00 00 
5db0c 1f1b 00 00 00 00 
5db10 1f1c 00 00 00 00 
5db14 1f1d 00 00 00 00 
5db18 1f1e 00 00 00 00 
5db1c 1f1f 00 00 00 00 
5db20 1f20 00 00 00 00 
5db24 1f21 00 00 00 00 
5db28 1f22 00 00 00 00 
5db2c 1f23 00 00 00 00 
5db30 1f24 00 00 00 00 
5db34 1f25 00 00 00 00 
5db38 1f26 00 00 00 00 
5db3c 1f27 00 00 00 00 
5db40 1f28 00 00 00 00 
5db44 1f29 00 00 00 00 
5db48 1f2a 00 00 00 00 
5db4c 1f2b 00 00 00 00 
5db50 1f2c 00 00 00 00 
5db54 1f2d 00 00 00 00 
5db58 1f2e 00 00 00 00 
5db5c 1f2f 00 00 00 00 
5db60 1f30 00 00 00 00 
5db64 1f31 00 00 00 00 
5db68 1f32 00 00 00 00 
5db6c 1f33 00 00 00 00 
5db70 1f34 00 00 00 00 
5db74 1f35 00 00 00 00 
5db78 1f36 00 00 00 00 
5db7c 1f37 00 00 00 00 
5db80 1f38 00 00 00 00 
5db84 1f39 00 00 00 00 
5db88 1f3a 00 00 00 00 
5db8c 1f3b 00 00 00 00 
5db90 1f3c 00 00 00 00 
5db94 1f3d 00 00 00 00 
5db98 1f3e 00 00 00 00 
5db9c 1f3f 00 00 00 00 
5dba0 1f40 00 00 00 00 
5dba4 1f41 00 00 00 00 
5dba8 1f42 00 00 00 00 
5dbac 1f43 00 00 00 00 
5dbb0 1f44 00 00 00 00 
5dbb4 1f45 00 00 00 00 
5dbb8 1f46 00 00 00 00 
5dbbc 1f47 00 00 00 00 
5dbc0 1f48 00 00 00 00 
5dbc4 1f49 00 00 00 00 
5dbc8 1f4a 00 00 00 00 
5dbcc 1f4b 00 00 00 00 
5dbd0 1f4c 00 00 00 00 
5dbd4 1f4d 00 00 00 00 
5dbd8 1f4e 00 00 00 00 
5dbdc 1f4f 00 00 00 00 
5dbe0 1f50 00 00 00 00 
5dbe4 1f51 00 00 00 00 
5dbe8 1f52 00 00 00 00 
5dbec 1f53 00 00 00 00 
5dbf0 1f54 00 00 00 00 
5dbf4 1f55 00 00 00 00 
5dbf8 1f56 00 00 00 00 
5dbfc 1f57 00 00 00 00 
5dc00 1f58 00 00 00 00 
5dc04 1f59 00 00 00 00 
5dc08 1f5a 00 00 00 00 
5dc0c 1f5b 00 00 00 00 
5dc10 1f5c 00 00 00 00 
5dc14 1f5d 00 00 00 00 
5dc18 1f5e 00 00 00 00 
5dc1c 1f5f 00 00 00 00 
5dc20 1f60 00 00 00 00 
5dc24 1f61 00 00 00 00 
5dc28 1f62 00 00 00 00 
5dc2c 1f63 00 00 00 00 
5dc30 1f64 00 00 00 00 
5dc34 1f65 00 00 00 00 
5dc38 1f66 00 00 00 00 
5dc3c 1f67 00 00 00 00 
5dc40 1f68 00 00 00 00 
5dc44 1f69 00 00 00 00 
5dc48 1f6a 00 00 00 00 
5dc4c 1f6b 00 00 00 00 
5dc50 1f6c 00 00 00 00 
5dc54 1f6d 00 00 00 00 
5dc58 1f6e 00 00 00 00 
5dc5c 1f6f 00 00 00 00 
5dc60 1f70 00 00 00 00 
5dc64 1f71 00 00 00 00 
5dc68 1f72 00 00 00 00 
5dc6c 1f73 00 00 00 00 
5dc70 1f74 00 00 00 00 
5dc74 1f75 00 00 00 00 
5dc78 1f76 00 00 00 00 
5dc7c 1f77 00 00 00 00 
5dc80 1f78 00 00 00 00 
5dc84 1f79 00 00 00 00 
5dc88 1f7a 00 00 00 00 
5dc8c 1f7b 00 00 00 00 
5dc90 1f7c 00 00 00 00 
5dc94 1f7d 00 00 00 00 
5dc98 1f7e 00 00 00 00 
5dc9c 1f7f 00 00 00 00 
5dca0 1f80 00 00 00 00 
5dca4 1f81 00 00 00 00 
5dca8 1f82 00 00 00 00 
5dcac 1f83 00 00 00 00 
5dcb0 1f84 00 00 00 00 
5dcb4 1f85 00 00 00 00 
5dcb8 1f86 00 00 00 00 
5dcbc 1f87 00 00 00 00 
5dcc0 1f88 00 00 00 00 
5dcc4 1f89 00 00 00 00 
5dcc8 1f8a 00 00 00 00 
5dccc 1f8b 00 00 00 00 
5dcd0 1f8c 00 00 00 00 
5dcd4 1f8d 00 00 00 00 
5dcd8 1f8e 00 00 00 00 
5dcdc 1f8f 00 00 00 00 
5dce0 1f90 00 00 00 00 
5dce4 1f91 00 00 00 00 
5dce8 1f92 00 00 00 00 
5dcec 1f93 00 00 00 00 
5dcf0 1f94 00 00 00 00 
5dcf4 1f95 00 00 00 00 
5dcf8 1f96 00 00 00 00 
5dcfc 1f97 00 00 00 00 
5dd00 1f98 00 00 00 00 
5dd04 1f99 00 00 00 00 
5dd08 1f9a 00 00 00 00 
5dd0c 1f9b 00 00 00 00 
5dd10 1f9c 00 00 00 00 
5dd14 1f9d 00 00 00 00 
5dd18 1f9e 00 00 00 00 
5dd1c 1f9f 00 00 00 00 
5dd20 1fa0 00 00 00 00 
5dd24 1fa1 00 00 00 00 
5dd28 1fa2 00 00 00 00 
5dd2c 1fa3 00 00 00 00 
5dd30 1fa4 00 00 00 00 
5dd34 1fa5 00 00 00 00 
5dd38 1fa6 00 00 00 00 
5dd3c 1fa7 00 00 00 00 
5dd40 1fa8 00 00 00 00 
5dd44 1fa9 00 00 00 00 
5dd48 1faa 00 00 00 00 
5dd4c 1fab 00 00 00 00 
5dd50 1fac 00 00 00 00 
5dd54 1fad 00 00 00 00 
5dd58 1fae 00 00 00 00 
5dd5c 1faf 00 00 00 00 
5dd60 1fb0 00 00 00 00 
5dd64 1fb1 00 00 00 00 
5dd68 1fb2 00 00 00 00 
5dd6c 1fb3 00 00 00 00 
5dd70 1fb4 00 00 00 00 
5dd74 1fb5 00 00 00 00 
5dd78 1fb6 00 00 00 00 
5dd7c 1fb7 00 00 00 00 
5dd80 1fb8 00 00 00 00 
5dd84 1fb9 00 00 00 00 
5dd88 1fba 00 00 00 00 
5dd8c 1fbb 00 00 00 00 
5dd90 1fbc 00 00 00 00 
5dd94 1fbd 00 00 00 00 
5dd98 1fbe 00 00 00 00 
5dd9c 1fbf 00 00 00 00 
5dda0 1fc0 00 00 00 00 
5dda4 1fc1 00 00 00 00 
5dda8 1fc2 00 00 00 00 
5ddac 1fc3 00 00 00 00 
5ddb0 1fc4 00 00 00 00 
5ddb4 1fc5 00 00 00 00 
5ddb8 1fc6 00 00 00 00 
5ddbc 1fc7 00 00 00 00 
5ddc0 1fc8 00 00 00 00 
5ddc4 1fc9 00 00 00 00 
5ddc8 1fca 00 00 00 00 
5ddcc 1fcb 00 00 00 00 
5ddd0 1fcc 00 00 00 00 
5ddd4 1fcd 00 00 00 00 
5ddd8 1fce 00 00 00 00 
5dddc 1fcf 00 00 00 00 
5dde0 1fd0 00 00 00 00 
5dde4 1fd1 00 00 00 00 
5dde8 1fd2 00 00 00 00 
5ddec 1fd3 00 00 00 00 
5ddf0 1fd4 00 00 00 00 
5ddf4 1fd5 00 00 00 00 
5ddf8 1fd6 00 00 00 00 
5ddfc 1fd7 00 00 00 00 
5de00 1fd8 00 00 00 00 
5de04 1fd9 00 00 00 00 
5de08 1fda 00 00 00 00 
5de0c 1fdb 00 00 00 00 
5de10 1fdc 00 00 00 00 
5de14 1fdd 00 00 00 00 
5de18 1fde 00 00 00 00 
5de1c 1fdf 00 00 00 00 
5de20 1fe0 00 00 00 00 
5de24 1fe1 00 00 00 00 
5de28 1fe2 00 00 00 00 
5de2c 1fe3 00 00 00 00 
5de30 1fe4 00 00 00 00 
5de34 1fe5 00 00 00 00 
5de38 1fe6 00 00 00 00 
5de3c 1fe7 00 00 00 00 
5de40 1fe8 00 00 00 00 
5de44 1fe9 00 00 00 00 
5de48 1fea 00 00 00 00 
5de4c 1feb 00 00 00 00 
5de50 1fec 00 00 00 00 
5de54 1fed 00 00 00 00 
5de58 1fee 00 00 00 00 
5de5c 1fef 00 00 00 00 
5de60 1ff0 00 00 00 00 
5de64 1ff1 00 00 00 00 
5de68 1ff2 00 00 00 00 
5de6c 1ff3 00 00 00 00 
5de70 1ff4 00 00 00 00 
5de74 1ff5 00 00 00 00 
5de78 1ff6 00 00 00 00 
5de7c 1ff7 00 00 00 00 
5de80 1ff8 00 00 00 00 
5de84 1ff9 00 00 00 00 
5de88 1ffa 00 00 00 00 
5de8c 1ffb 00 00 00 00 
5de90 1ffc 00 00 00 00 
5de94 1ffd 00 00 00 00 
5de98 1ffe 00 00 00 00 
5de9c 1fff 00 00 00 00 
5dea0 2000 00 00 00 00 
5dea4 2001 00 00 00 00 
5dea8 2002 00 00 00 00 
5deac 2003 00 00 00 00 
5deb0 2004 00 00 00 00 
5deb4 2005 00 00 00 00 
5deb8 2006 00 00 00 00 
5debc 2007 00 00 00 00 
5dec0 2008 00 00 00 00 
5dec4 2009 00 00 00 00 
5dec8 200a 00 00 00 00 
5decc 200b 00 00 00 00 
5ded0 200c 00 00 00 00 
5ded4 200d 00 00 00 00 
5ded8 200e 00 00 00 00 
5dedc 200f 00 00 00 00 
5dee0 2010 00 00 00 00 
5dee4 2011 00 00 00 00 
5dee8 2012 00 00 00 00 
5deec 2013 00 00 00 00 
5def0 2014 00 00 00 00 
5def4 2015 00 00 00 00 
5def8 2016 00 00 00 00 
5defc 2017 00 00 00 00 
5df00 2018 00 00 00 00 
5df04 2019 00 00 00 00 
5df08 201a 00 00 00 00 
5df0c 201b 00 00 00 00 
5df10 201c 00 00 00 00 
5df14 201d 00 00 00 00 
5df18 201e 00 00 00 00 
5df1c 201f 00 00 00 00 
5df20 2020 00 00 00 00 
5df24 2021 00 00 00 00 
5df28 2022 00 00 00 00 
5df2c 2023 00 00 00 00 
5df30 2024 00 00 00 00 
5df34 2025 00 00 00 00 
5df38 2026 00 00 00 00 
5df3c 2027 00 00 00 00 
5df40 2028 00 00 00 00 
5df44 2029 00 00 00 00 
5df48 202a 00 00 00 00 
5df4c 202b 00 00 00 00 
5df50 202c 00 00 00 00 
5df54 202d 00 00 00 00 
5df58 202e 00 00 00 00 
5df5c 202f 00 00 00 00 
5df60 2030 00 00 00 00 
5df64 2031 00 00 00 00 
5df68 2032 00 00 00 00 
5df6c 2033 00 00 00 00 
5df70 2034 00 00 00 00 
5df74 2035 00 00 00 00 
5df78 2036 00 00 00 00 
5df7c 2037 00 00 00 00 
5df80 2038 00 00 00 00 
5df84 2039 00 00 00 00 
5df88 203a 00 00 00 00 
5df8c 203b 00 00 00 00 
5df90 203c 00 00 00 00 
5df94 203d 00 00 00 00 
5df98 203e 00 00 00 00 
5df9c 203f 00 00 00 00 
5dfa0 2040 00 00 00 00 
5dfa4 2041 00 00 00 00 
5dfa8 2042 00 00 00 00 
5dfac 2043 00 00 00 00 
5dfb0 2044 00 00 00 00 
5dfb4 2045 00 00 00 00 
5dfb8 2046 00 00 00 00 
5dfbc 2047 00 00 00 00 
5dfc0 2048 00 00 00 00 
5dfc4 2049 00 00 00 00 
5dfc8 204a 00 00 00 00 
5dfcc 204b 00 00 00 00 
5dfd0 204c 00 00 00 00 
5dfd4 204d 00 00 00 00 
5dfd8 204e 00 00 00 00 
5dfdc 204f 00 00 00 00 
5dfe0 2050 00 00 00 00 
5dfe4 2051 00 00 00 00 
5dfe8 2052 00 00 00 00 
5dfec 2053 00 00 00 00 
5dff0 2054 00 00 00 00 
5dff4 2055 00 00 00 00 
5dff8 2056 00 00 00 00 
5dffc 2057 00 00 00 00 
5e000 2058 00 00 00 00 
5e004 2059 00 00 00 00 
5e008 205a 00 00 00 00 
5e00c 205b 00 00 00 00 
5e010 205c 00 00 00 00 
5e014 205d 00 00 00 00 
5e018 205e 00 00 00 00 
5e01c 205f 00 00 00 00 
5e020 2060 00 00 00 00 
5e024 2061 00 00 00 00 
5e028 2062 00 00 00 00 
5e02c 2063 00 00 00 00 
5e030 2064 00 00 00 00 
5e034 2065 00 00 00 00 
5e038 2066 00 00 00 00 
5e03c 2067 00 00 00 00 
5e040 2068 00 00 00 00 
5e044 2069 00 00 00 00 
5e048 206a 00 00 00 00 
5e04c 206b 00 00 00 00 
5e050 206c 00 00 00 00 
5e054 206d 00 00 00 00 
5e058 206e 00 00 00 00 
5e05c 206f 00 00 00 00 
5e060 2070 00 00 00 00 
5e064 2071 00 00 00 00 
5e068 2072 00 00 00 00 
5e06c 2073 00 00 00 00 
5e070 2074 00 00 00 00 
5e074 2075 00 00 00 00 
5e078 2076 00 00 00 00 
5e07c 2077 00 00 00 00 
5e080 2078 00 00 00 00 
5e084 2079 00 00 00 00 
5e088 207a 00 00 00 00 
5e08c 207b 00 00 00 00 
5e090 207c 00 00 00 00 
5e094 207d 00 00 00 00 
5e098 207e 00 00 00 00 
5e09c 207f 00 00 00 00 
5e0a0 2080 00 00 00 00 
5e0a4 2081 00 00 00 00 
5e0a8 2082 00 00 00 00 
5e0ac 2083 00 00 00 00 
5e0b0 2084 00 00 00 00 
5e0b4 2085 00 00 00 00 
5e0b8 2086 00 00 00 00 
5e0bc 2087 00 00 00 00 
5e0c0 2088 00 00 00 00 
5e0c4 2089 00 00 00 00 
5e0c8 208a 00 00 00 00 
5e0cc 208b 00 00 00 00 
5e0d0 208c 00 00 00 00 
5e0d4 208d 00 00 00 00 
5e0d8 208e 00 00 00 00 
5e0dc 208f 00 00 00 00 
5e0e0 2090 00 00 00 00 
5e0e4 2091 00 00 00 00 
5e0e8 2092 00 00 00 00 
5e0ec 2093 00 00 00 00 
5e0f0 2094 00 00 00 00 
5e0f4 2095 00 00 00 00 
5e0f8 2096 00 00 00 00 
5e0fc 2097 00 00 00 00 
5e100 2098 00 00 00 00 
5e104 2099 00 00 00 00 
5e108 209a 00 00 00 00 
5e10c 209b 00 00 00 00 
5e110 209c 00 00 00 00 
5e114 209d 00 00 00 00 
5e118 209e 00 00 00 00 
5e11c 209f 00 00 00 00 
5e120 20a0 00 00 00 00 
5e124 20a1 00 00 00 00 
5e128 20a2 00 00 00 00 
5e12c 20a3 00 00 00 00 
5e130 20a4 00 00 00 00 
5e134 20a5 00 00 00 00 
5e138 20a6 00 00 00 00 
5e13c 20a7 00 00 00 00 
5e140 20a8 00 00 00 00 
5e144 20a9 00 00 00 00 
5e148 20aa 00 00 00 00 
5e14c 20ab 00 00 00 00 
5e150 20ac 00 00 00 00 
5e154 20ad 00 00 00 00 
5e158 20ae 00 00 00 00 
5e15c 20af 00 00 00 00 
5e160 20b0 00 00 00 00 
5e164 20b1 00 00 00 00 
5e168 20b2 00 00 00 00 
5e16c 20b3 00 00 00 00 
5e170 20b4 00 00 00 00 
5e174 20b5 00 00 00 00 
5e178 20b6 00 00 00 00 
5e17c 20b7 00 00 00 00 
5e180 20b8 00 00 00 00 
5e184 20b9 00 00 00 00 
5e188 20ba 00 00 00 00 
5e18c 20bb 00 00 00 00 
5e190 20bc 00 00 00 00 
5e194 20bd 00 00 00 00 
5e198 20be 00 00 00 00 
5e19c 20bf 00 00 00 00 
5e1a0 20c0 00 00 00 00 
5e1a4 20c1 00 00 00 00 
5e1a8 20c2 00 00 00 00 
5e1ac 20c3 00 00 00 00 
5e1b0 20c4 00 00 00 00 
5e1b4 20c5 00 00 00 00 
5e1b8 20c6 00 00 00 00 
5e1bc 20c7 00 00 00 00 
5e1c0 20c8 00 00 00 00 
5e1c4 20c9 00 00 00 00 
5e1c8 20ca 00 00 00 00 
5e1cc 20cb 00 00 00 00 
5e1d0 20cc 00 00 00 00 
5e1d4 20cd 00 00 00 00 
5e1d8 20ce 00 00 00 00 
5e1dc 20cf 00 00 00 00 
5e1e0 20d0 00 00 00 00 
5e1e4 20d1 00 00 00 00 
5e1e8 20d2 00 00 00 00 
5e1ec 20d3 00 00 00 00 
5e1f0 20d4 00 00 00 00 
5e1f4 20d5 00 00 00 00 
5e1f8 20d6 00 00 00 00 
5e1fc 20d7 00 00 00 00 
5e200 20d8 00 00 00 00 
5e204 20d9 00 00 00 00 
5e208 20da 00 00 00 00 
5e20c 20db 00 00 00 00 
5e210 20dc 00 00 00 00 
5e214 20dd 00 00 00 00 
5e218 20de 00 00 00 00 
5e21c 20df 00 00 00 00 
5e220 20e0 00 00 00 00 
5e224 20e1 00 00 00 00 
5e228 20e2 00 00 00 00 
5e22c 20e3 00 00 00 00 
5e230 20e4 00 00 00 00 
5e234 20e5 00 00 00 00 
5e238 20e6 00 00 00 00 
5e23c 20e7 00 00 00 00 
5e240 20e8 00 00 00 00 
5e244 20e9 00 00 00 00 
5e248 20ea 00 00 00 00 
5e24c 20eb 00 00 00 00 
5e250 20ec 00 00 00 00 
5e254 20ed 00 00 00 00 
5e258 20ee 00 00 00 00 
5e25c 20ef 00 00 00 00 
5e260 20f0 00 00 00 00 
5e264 20f1 00 00 00 00 
5e268 20f2 00 00 00 00 
5e26c 20f3 00 00 00 00 
5e270 20f4 00 00 00 00 
5e274 20f5 00 00 00 00 
5e278 20f6 00 00 00 00 
5e27c 20f7 00 00 00 00 
5e280 20f8 00 00 00 00 
5e284 20f9 00 00 00 00 
5e288 20fa 00 00 00 00 
5e28c 20fb 00 00 00 00 
5e290 20fc 00 00 00 00 
5e294 20fd 00 00 00 00 
5e298 20fe 00 00 00 00 
5e29c 20ff 00 00 00 00 
5e2a0 2100 00 00 00 00 
5e2a4 2101 00 00 00 00 
5e2a8 2102 00 00 00 00 
5e2ac 2103 00 00 00 00 
5e2b0 2104 00 00 00 00 
5e2b4 2105 00 00 00 00 
5e2b8 2106 00 00 00 00 
5e2bc 2107 00 00 00 00 
5e2c0 2108 00 00 00 00 
5e2c4 2109 00 00 00 00 
5e2c8 210a 00 00 00 00 
5e2cc 210b 00 00 00 00 
5e2d0 210c 00 00 00 00 
5e2d4 210d 00 00 00 00 
5e2d8 210e 00 00 00 00 
5e2dc 210f 00 00 00 00 
5e2e0 2110 00 00 00 00 
5e2e4 2111 00 00 00 00 
5e2e8 2112 00 00 00 00 
5e2ec 2113 00 00 00 00 
5e2f0 2114 00 00 00 00 
5e2f4 2115 00 00 00 00 
5e2f8 2116 00 00 00 00 
5e2fc 2117 00 00 00 00 
5e300 2118 00 00 00 00 
5e304 2119 00 00 00 00 
5e308 211a 00 00 00 00 
5e30c 211b 00 00 00 00 
5e310 211c 00 00 00 00 
5e314 211d 00 00 00 00 
5e318 211e 00 00 00 00 
5e31c 211f 00 00 00 00 
5e320 2120 00 00 00 00 
5e324 2121 00 00 00 00 
5e328 2122 00 00 00 00 
5e32c 2123 00 00 00 00 
5e330 2124 00 00 00 00 
5e334 2125 00 00 00 00 
5e338 2126 00 00 00 00 
5e33c 2127 00 00 00 00 
5e340 2128 00 00 00 00 
5e344 2129 00 00 00 00 
5e348 212a 00 00 00 00 
5e34c 212b 00 00 00 00 
5e350 212c 00 00 00 00 
5e354 212d 00 00 00 00 
5e358 212e 00 00 00 00 
5e35c 212f 00 00 00 00 
5e360 2130 00 00 00 00 
5e364 2131 00 00 00 00 
5e368 2132 00 00 00 00 
5e36c 2133 00 00 00 00 
5e370 2134 00 00 00 00 
5e374 2135 00 00 00 00 
5e378 2136 00 00 00 00 
5e37c 2137 00 00 00 00 
5e380 2138 00 00 00 00 
5e384 2139 00 00 00 00 
5e388 213a 00 00 00 00 
5e38c 213b 00 00 00 00 
5e390 213c 00 00 00 00 
5e394 213d 00 00 00 00 
5e398 213e 00 00 00 00 
5e39c 213f 00 00 00 00 
5e3a0 2140 00 00 00 00 
5e3a4 2141 00 00 00 00 
5e3a8 2142 00 00 00 00 
5e3ac 2143 00 00 00 00 
5e3b0 2144 00 00 00 00 
5e3b4 2145 00 00 00 00 
5e3b8 2146 00 00 00 00 
5e3bc 2147 00 00 00 00 
5e3c0 2148 00 00 00 00 
5e3c4 2149 00 00 00 00 
5e3c8 214a 00 00 00 00 
5e3cc 214b 00 00 00 00 
5e3d0 214c 00 00 00 00 
5e3d4 214d 00 00 00 00 
5e3d8 214e 00 00 00 00 
5e3dc 214f 00 00 00 00 
5e3e0 2150 00 00 00 00 
5e3e4 2151 00 00 00 00 
5e3e8 2152 00 00 00 00 
5e3ec 2153 00 00 00 00 
5e3f0 2154 00 00 00 00 
5e3f4 2155 00 00 00 00 
5e3f8 2156 00 00 00 00 
5e3fc 2157 00 00 00 00 
5e400 2158 00 00 00 00 
5e404 2159 00 00 00 00 
5e408 215a 00 00 00 00 
5e40c 215b 00 00 00 00 
5e410 215c 00 00 00 00 
5e414 215d 00 00 00 00 
5e418 215e 00 00 00 00 
5e41c 215f 00 00 00 00 
5e420 2160 00 00 00 00 
5e424 2161 00 00 00 00 
5e428 2162 00 00 00 00 
5e42c 2163 00 00 00 00 
5e430 2164 00 00 00 00 
5e434 2165 00 00 00 00 
5e438 2166 00 00 00 00 
5e43c 2167 00 00 00 00 
5e440 2168 00 00 00 00 
5e444 2169 00 00 00 00 
5e448 216a 00 00 00 00 
5e44c 216b 00 00 00 00 
5e450 216c 00 00 00 00 
5e454 216d 00 00 00 00 
5e458 216e 00 00 00 00 
5e45c 216f 00 00 00 00 
5e460 2170 00 00 00 00 
5e464 2171 00 00 00 00 
5e468 2172 00 00 00 00 
5e46c 2173 00 00 00 00 
5e470 2174 00 00 00 00 
5e474 2175 00 00 00 00 
5e478 2176 00 00 00 00 
5e47c 2177 00 00 00 00 
5e480 2178 00 00 00 00 
5e484 2179 00 00 00 00 
5e488 217a 00 00 00 00 
5e48c 217b 00 00 00 00 
5e490 217c 00 00 00 00 
5e494 217d 00 00 00 00 
5e498 217e 00 00 00 00 
5e49c 217f 00 00 00 00 
5e4a0 2180 00 00 00 00 
5e4a4 2181 00 00 00 00 
5e4a8 2182 00 00 00 00 
5e4ac 2183 00 00 00 00 
5e4b0 2184 00 00 00 00 
5e4b4 2185 00 00 00 00 
5e4b8 2186 00 00 00 00 
5e4bc 2187 00 00 00 00 
5e4c0 2188 00 00 00 00 
5e4c4 2189 00 00 00 00 
5e4c8 218a 00 00 00 00 
5e4cc 218b 00 00 00 00 
5e4d0 218c 00 00 00 00 
5e4d4 218d 00 00 00 00 
5e4d8 218e 00 00 00 00 
5e4dc 218f 00 00 00 00 
5e4e0 2190 00 00 00 00 
5e4e4 2191 00 00 00 00 
5e4e8 2192 00 00 00 00 
5e4ec 2193 00 00 00 00 
5e4f0 2194 00 00 00 00 
5e4f4 2195 00 00 00 00 
5e4f8 2196 00 00 00 00 
5e4fc 2197 00 00 00 00 
5e500 2198 00 00 00 00 
5e504 2199 00 00 00 00 
5e508 219a 00 00 00 00 
5e50c 219b 00 00 00 00 
5e510 219c 00 00 00 00 
5e514 219d 00 00 00 00 
5e518 219e 00 00 00 00 
5e51c 219f 00 00 00 00 
5e520 21a0 00 00 00 00 
5e524 21a1 00 00 00 00 
5e528 21a2 00 00 00 00 
5e52c 21a3 00 00 00 00 
5e530 21a4 00 00 00 00 
5e534 21a5 00 00 00 00 
5e538 21a6 00 00 00 00 
5e53c 21a7 00 00 00 00 
5e540 21a8 00 00 00 00 
5e544 21a9 00 00 00 00 
5e548 21aa 00 00 00 00 
5e54c 21ab 00 00 00 00 
5e550 21ac 00 00 00 00 
5e554 21ad 00 00 00 00 
5e558 21ae 00 00 00 00 
5e55c 21af 00 00 00 00 
5e560 21b0 00 00 00 00 
5e564 21b1 00 00 00 00 
5e568 21b2 00 00 00 00 
5e56c 21b3 00 00 00 00 
5e570 21b4 00 00 00 00 
5e574 21b5 00 00 00 00 
5e578 21b6 00 00 00 00 
5e57c 21b7 00 00 00 00 
5e580 21b8 00 00 00 00 
5e584 21b9 00 00 00 00 
5e588 21ba 00 00 00 00 
5e58c 21bb 00 00 00 00 
5e590 21bc 00 00 00 00 
5e594 21bd 00 00 00 00 
5e598 21be 00 00 00 00 
5e59c 21bf 00 00 00 00 
5e5a0 21c0 00 00 00 00 
5e5a4 21c1 00 00 00 00 
5e5a8 21c2 00 00 00 00 
5e5ac 21c3 00 00 00 00 
5e5b0 21c4 00 00 00 00 
5e5b4 21c5 00 00 00 00 
5e5b8 21c6 00 00 00 00 
5e5bc 21c7 00 00 00 00 
5e5c0 21c8 00 00 00 00 
5e5c4 21c9 00 00 00 00 
5e5c8 21ca 00 00 00 00 
5e5cc 21cb 00 00 00 00 
5e5d0 21cc 00 00 00 00 
5e5d4 21cd 00 00 00 00 
5e5d8 21ce 00 00 00 00 
5e5dc 21cf 00 00 00 00 
5e5e0 21d0 00 00 00 00 
5e5e4 21d1 00 00 00 00 
5e5e8 21d2 00 00 00 00 
5e5ec 21d3 00 00 00 00 
5e5f0 21d4 00 00 00 00 
5e5f4 21d5 00 00 00 00 
5e5f8 21d6 00 00 00 00 
5e5fc 21d7 00 00 00 00 
5e600 21d8 00 00 00 00 
5e604 21d9 00 00 00 00 
5e608 21da 00 00 00 00 
5e60c 21db 00 00 00 00 
5e610 21dc 00 00 00 00 
5e614 21dd 00 00 00 00 
5e618 21de 00 00 00 00 
5e61c 21df 00 00 00 00 
5e620 21e0 00 00 00 00 
5e624 21e1 00 00 00 00 
5e628 21e2 00 00 00 00 
5e62c 21e3 00 00 00 00 
5e630 21e4 00 00 00 00 
5e634 21e5 00 00 00 00 
5e638 21e6 00 00 00 00 
5e63c 21e7 00 00 00 00 
5e640 21e8 00 00 00 00 
5e644 21e9 00 00 00 00 
5e648 21ea 00 00 00 00 
5e64c 21eb 00 00 00 00 
5e650 21ec 00 00 00 00 
5e654 21ed 00 00 00 00 
5e658 21ee 00 00 00 00 
5e65c 21ef 00 00 00 00 
5e660 21f0 00 00 00 00 
5e664 21f1 00 00 00 00 
5e668 21f2 00 00 00 00 
5e66c 21f3 00 00 00 00 
5e670 21f4 00 00 00 00 
5e674 21f5 00 00 00 00 
5e678 21f6 00 00 00 00 
5e67c 21f7 00 00 00 00 
5e680 21f8 00 00 00 00 
5e684 21f9 00 00 00 00 
5e688 21fa 00 00 00 00 
5e68c 21fb 00 00 00 00 
5e690 21fc 00 00 00 00 
5e694 21fd 00 00 00 00 
5e698 21fe 00 00 00 00 
5e69c 21ff 00 00 00 00 
5e6a0 2200 00 00 00 00 
5e6a4 2201 00 00 00 00 
5e6a8 2202 00 00 00 00 
5e6ac 2203 00 00 00 00 
5e6b0 2204 00 00 00 00 
5e6b4 2205 00 00 00 00 
5e6b8 2206 00 00 00 00 
5e6bc 2207 00 00 00 00 
5e6c0 2208 00 00 00 00 
5e6c4 2209 00 00 00 00 
5e6c8 220a 00 00 00 00 
5e6cc 220b 00 00 00 00 
5e6d0 220c 00 00 00 00 
5e6d4 220d 00 00 00 00 
5e6d8 220e 00 00 00 00 
5e6dc 220f 00 00 00 00 
5e6e0 2210 00 00 00 00 
5e6e4 2211 00 00 00 00 
5e6e8 2212 00 00 00 00 
5e6ec 2213 00 00 00 00 
5e6f0 2214 00 00 00 00 
5e6f4 2215 00 00 00 00 
5e6f8 2216 00 00 00 00 
5e6fc 2217 00 00 00 00 
5e700 2218 00 00 00 00 
5e704 2219 00 00 00 00 
5e708 221a 00 00 00 00 
5e70c 221b 00 00 00 00 
5e710 221c 00 00 00 00 
5e714 221d 00 00 00 00 
5e718 221e 00 00 00 00 
5e71c 221f 00 00 00 00 
5e720 2220 00 00 00 00 
5e724 2221 00 00 00 00 
5e728 2222 00 00 00 00 
5e72c 2223 00 00 00 00 
5e730 2224 00 00 00 00 
5e734 2225 00 00 00 00 
5e738 2226 00 00 00 00 
5e73c 2227 00 00 00 00 
5e740 2228 00 00 00 00 
5e744 2229 00 00 00 00 
5e748 222a 00 00 00 00 
5e74c 222b 00 00 00 00 
5e750 222c 00 00 00 00 
5e754 222d 00 00 00 00 
5e758 222e 00 00 00 00 
5e75c 222f 00 00 00 00 
5e760 2230 00 00 00 00 
5e764 2231 00 00 00 00 
5e768 2232 00 00 00 00 
5e76c 2233 00 00 00 00 
5e770 2234 00 00 00 00 
5e774 2235 00 00 00 00 
5e778 2236 00 00 00 00 
5e77c 2237 00 00 00 00 
5e780 2238 00 00 00 00 
5e784 2239 00 00 00 00 
5e788 223a 00 00 00 00 
5e78c 223b 00 00 00 00 
5e790 223c 00 00 00 00 
5e794 223d 00 00 00 00 
5e798 223e 00 00 00 00 
5e79c 223f 00 00 00 00 
5e7a0 2240 00 00 00 00 
5e7a4 2241 00 00 00 00 
5e7a8 2242 00 00 00 00 
5e7ac 2243 00 00 00 00 
5e7b0 2244 00 00 00 00 
5e7b4 2245 00 00 00 00 
5e7b8 2246 00 00 00 00 
5e7bc 2247 00 00 00 00 
5e7c0 2248 00 00 00 00 
5e7c4 2249 00 00 00 00 
5e7c8 224a 00 00 00 00 
5e7cc 224b 00 00 00 00 
5e7d0 224c 00 00 00 00 
5e7d4 224d 00 00 00 00 
5e7d8 224e 00 00 00 00 
5e7dc 224f 00 00 00 00 
5e7e0 2250 00 00 00 00 
5e7e4 2251 00 00 00 00 
5e7e8 2252 00 00 00 00 
5e7ec 2253 00 00 00 00 
5e7f0 2254 00 00 00 00 
5e7f4 2255 00 00 00 00 
5e7f8 2256 00 00 00 00 
5e7fc 2257 00 00 00 00 
5e800 2258 00 00 00 00 
5e804 2259 00 00 00 00 
5e808 225a 00 00 00 00 
5e80c 225b 00 00 00 00 
5e810 225c 00 00 00 00 
5e814 225d 00 00 00 00 
5e818 225e 00 00 00 00 
5e81c 225f 00 00 00 00 
5e820 2260 00 00 00 00 
5e824 2261 00 00 00 00 
5e828 2262 00 00 00 00 
5e82c 2263 00 00 00 00 
5e830 2264 00 00 00 00 
5e834 2265 00 00 00 00 
5e838 2266 00 00 00 00 
5e83c 2267 00 00 00 00 
5e840 2268 00 00 00 00 
5e844 2269 00 00 00 00 
5e848 226a 00 00 00 00 
5e84c 226b 00 00 00 00 
5e850 226c 00 00 00 00 
5e854 226d 00 00 00 00 
5e858 226e 00 00 00 00 
5e85c 226f 00 00 00 00 
5e860 2270 00 00 00 00 
5e864 2271 00 00 00 00 
5e868 2272 00 00 00 00 
5e86c 2273 00 00 00 00 
5e870 2274 00 00 00 00 
5e874 2275 00 00 00 00 
5e878 2276 00 00 00 00 
5e87c 2277 00 00 00 00 
5e880 2278 00 00 00 00 
5e884 2279 00 00 00 00 
5e888 227a 00 00 00 00 
5e88c 227b 00 00 00 00 
5e890 227c 00 00 00 00 
5e894 227d 00 00 00 00 
5e898 227e 00 00 00 00 
5e89c 227f 00 00 00 00 
5e8a0 2280 00 00 00 00 
5e8a4 2281 00 00 00 00 
5e8a8 2282 00 00 00 00 
5e8ac 2283 00 00 00 00 
5e8b0 2284 00 00 00 00 
5e8b4 2285 00 00 00 00 
5e8b8 2286 00 00 00 00 
5e8bc 2287 00 00 00 00 
5e8c0 2288 00 00 00 00 
5e8c4 2289 00 00 00 00 
5e8c8 228a 00 00 00 00 
5e8cc 228b 00 00 00 00 
5e8d0 228c 00 00 00 00 
5e8d4 228d 00 00 00 00 
5e8d8 228e 00 00 00 00 
5e8dc 228f 00 00 00 00 
5e8e0 2290 00 00 00 00 
5e8e4 2291 00 00 00 00 
5e8e8 2292 00 00 00 00 
5e8ec 2293 00 00 00 00 
5e8f0 2294 00 00 00 00 
5e8f4 2295 00 00 00 00 
5e8f8 2296 00 00 00 00 
5e8fc 2297 00 00 00 00 
5e900 2298 00 00 00 00 
5e904 2299 00 00 00 00 
5e908 229a 00 00 00 00 
5e90c 229b 00 00 00 00 
5e910 229c 00 00 00 00 
5e914 229d 00 00 00 00 
5e918 229e 00 00 00 00 
5e91c 229f 00 00 00 00 
5e920 22a0 00 00 00 00 
5e924 22a1 00 00 00 00 
5e928 22a2 00 00 00 00 
5e92c 22a3 00 00 00 00 
5e930 22a4 00 00 00 00 
5e934 22a5 00 00 00 00 
5e938 22a6 00 00 00 00 | 	long	0[8194]
5e93c 22a7             | objmem
5e93c 22a7             | 	long	0[0]
5e93c 22a7             | stackspace
5e93c 22a7 00 00 00 00 | 	long	0[1]
5e940 11d             | 	org	COG_BSS_START
5e940 11d             | _var01
5e940 11d             | 	res	1
5e940 11e             | _var02
5e940 11e             | 	res	1
5e940 11f             | _var03
5e940 11f             | 	res	1
5e940 120             | _var04
5e940 120             | 	res	1
5e940 121             | _var05
5e940 121             | 	res	1
5e940 122             | _var06
5e940 122             | 	res	1
5e940 123             | _var07
5e940 123             | 	res	1
5e940 124             | _var08
5e940 124             | 	res	1
5e940 125             | _var09
5e940 125             | 	res	1
5e940 126             | _var10
5e940 126             | 	res	1
5e940 127             | _var11
5e940 127             | 	res	1
5e940 128             | _var12
5e940 128             | 	res	1
5e940 129             | _var13
5e940 129             | 	res	1
5e940 12a             | _var14
5e940 12a             | 	res	1
5e940 12b             | _var15
5e940 12b             | 	res	1
5e940 12c             | _var16
5e940 12c             | 	res	1
5e940 12d             | _var17
5e940 12d             | 	res	1
5e940 12e             | _var18
5e940 12e             | 	res	1
5e940 12f             | _var19
5e940 12f             | 	res	1
5e940 130             | _var20
5e940 130             | 	res	1
5e940 131             | _var21
5e940 131             | 	res	1
5e940 132             | _var22
5e940 132             | 	res	1
5e940 133             | _var23
5e940 133             | 	res	1
5e940 134             | _var24
5e940 134             | 	res	1
5e940 135             | _var25
5e940 135             | 	res	1
5e940 136             | _var26
5e940 136             | 	res	1
5e940 137             | _var27
5e940 137             | 	res	1
5e940 138             | _var28
5e940 138             | 	res	1
5e940 139             | _var29
5e940 139             | 	res	1
5e940 13a             | arg01
5e940 13a             | 	res	1
5e940 13b             | arg02
5e940 13b             | 	res	1
5e940 13c             | arg03
5e940 13c             | 	res	1
5e940 13d             | arg04
5e940 13d             | 	res	1
5e940 13e             | arg05
5e940 13e             | 	res	1
5e940 13f             | arg06
5e940 13f             | 	res	1
5e940 140             | arg07
5e940 140             | 	res	1
5e940 141             | arg08
5e940 141             | 	res	1
5e940 142             | arg09
5e940 142             | 	res	1
5e940 143             | arg10
5e940 143             | 	res	1
5e940 144             | arg11
5e940 144             | 	res	1
5e940 145             | arg12
5e940 145             | 	res	1
5e940 146             | local01
5e940 146             | 	res	1
5e940 147             | local02
5e940 147             | 	res	1
5e940 148             | local03
5e940 148             | 	res	1
5e940 149             | local04
5e940 149             | 	res	1
5e940 14a             | local05
5e940 14a             | 	res	1
5e940 14b             | local06
5e940 14b             | 	res	1
5e940 14c             | local07
5e940 14c             | 	res	1
5e940 14d             | local08
5e940 14d             | 	res	1
5e940 14e             | local09
5e940 14e             | 	res	1
5e940 14f             | local10
5e940 14f             | 	res	1
5e940 150             | local11
5e940 150             | 	res	1
5e940 151             | local12
5e940 151             | 	res	1
5e940 152             | local13
5e940 152             | 	res	1
5e940 153             | local14
5e940 153             | 	res	1
5e940 154             | local15
5e940 154             | 	res	1
5e940 155             | local16
5e940 155             | 	res	1
5e940 156             | local17
5e940 156             | 	res	1
5e940 157             | local18
5e940 157             | 	res	1
5e940 158             | local19
5e940 158             | 	res	1
5e940 159             | local20
5e940 159             | 	res	1
5e940 15a             | local21
5e940 15a             | 	res	1
5e940 15b             | local22
5e940 15b             | 	res	1
5e940 15c             | local23
5e940 15c             | 	res	1
5e940 15d             | local24
5e940 15d             | 	res	1
5e940 15e             | local25
5e940 15e             | 	res	1
5e940 15f             | local26
5e940 15f             | 	res	1
5e940 160             | local27
5e940 160             | 	res	1
5e940 161             | local28
5e940 161             | 	res	1
5e940 162             | local29
5e940 162             | 	res	1
5e940 163             | local30
5e940 163             | 	res	1
5e940 164             | local31
5e940 164             | 	res	1
5e940 165             | local32
5e940 165             | 	res	1
5e940 166             | local33
5e940 166             | 	res	1
5e940 167             | local34
5e940 167             | 	res	1
5e940 168             | local35
5e940 168             | 	res	1
5e940 169             | local36
5e940 169             | 	res	1
5e940 16a             | local37
5e940 16a             | 	res	1
5e940 16b             | local38
5e940 16b             | 	res	1
5e940 16c             | local39
5e940 16c             | 	res	1
5e940 16d             | local40
5e940 16d             | 	res	1
5e940 16e             | local41
5e940 16e             | 	res	1
5e940 16f             | local42
5e940 16f             | 	res	1
5e940 170             | muldiva_
5e940 170             | 	res	1
5e940 171             | muldivb_
5e940 171             | 	res	1
5e940 172             | 	fit	480
5e940 172             | 
