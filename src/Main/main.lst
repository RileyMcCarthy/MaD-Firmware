00000                 | 
00000                 | #line 1 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/src/Main/main.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 34 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 19 F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E4 19 A1 FD | 	call	#_main
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 74 62 FD | 	cogid	arg01
00614 084 03 74 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 93 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 35 06 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 75 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D 34 62 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c 2B 30 61 FD |     pop	fcache_tmpb_
00638 08d F6 31 01 F1 |     add	fcache_tmpb_, pa
0063c 08e 2A 30 61 FD |     push	fcache_tmpb_
00640 08f F6 31 81 F1 |     sub	fcache_tmpb_, pa
00644 090 02 EC 47 F0 |     shr	pa, #2
00648 091 00 EC 8F F9 |     altd	pa
0064c 092 97 00 00 F6 |     mov	 0-0, ret_instr_
00650 093 01 EC 87 F1 |     sub	pa, #1
00654 094 28 EC 63 FD |     setq	pa
00658 095 98 00 00 FB |     rdlong	$0, fcache_tmpb_
0065c 096 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00660 097             | ret_instr_
00660 097 2D 00 64 FD |     ret
00664 098             | fcache_tmpb_
00664 098 00 00 00 00 |     long 0
00668 099             | builtin_bytefill_
00668 099 01 78 56 F0 |         shr	arg03, #1 wc
0066c 09a 3A 77 42 CC |  if_c   wrbyte	arg02, arg01
00670 09b 01 74 06 C1 |  if_c   add	arg01, #1
00674 09c 00 76 FE F9 |         movbyts	arg02, #0
00678 09d             | builtin_wordfill_
00678 09d 01 78 56 F0 |         shr	arg03, #1 wc
0067c 09e 3A 77 52 CC |  if_c   wrword	arg02, arg01
00680 09f 02 74 06 C1 |  if_c   add	arg01, #2
00684 0a0 3B 77 2A F9 |         setword	arg02, arg02, #1
00688 0a1             | builtin_longfill_
00688 0a1 3A 01 88 FC |         wrfast	#0,arg01
0068c 0a2 00 78 0E F2 |         cmp	arg03, #0 wz
00690 0a3 3C 03 D8 5C |  if_nz  rep	#1, arg03
00694 0a4 17 76 62 5D |  if_nz  wflong	arg02
00698 0a5 2D 00 64 FD |         ret
0069c 0a6             | COUNT_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | RETADDR_
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | fp
006a4 0a8 00 00 00 00 |     long 0
006a8 0a9             | pushregs_
006a8 0a9 2B EC 63 FD |     pop  pa
006ac 0aa 2B 4E 61 FD |     pop  RETADDR_
006b0 0ab 03 4C 95 FB |     tjz  COUNT_, #pushregs_done_
006b4 0ac FF 4D 8D F9 |     altd  COUNT_, #511
006b8 0ad 28 00 64 FD |     setq #0-0
006bc 0ae 61 8D 66 FC |     wrlong local01, ptra++
006c0 0af             | pushregs_done_
006c0 0af 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c4 0b0 61 4D 65 FC |     wrlong COUNT_, ptra++
006c8 0b1 F8 51 01 F6 |     mov    fp, ptra
006cc 0b2 2C EC 63 FD |     jmp  pa
006d0 0b3             |  popregs_
006d0 0b3 2B EC 63 FD |     pop    pa
006d4 0b4 28 04 64 FD |     setq   #2
006d8 0b5 5F 4D 05 FB |     rdlong COUNT_, --ptra
006dc 0b6 02 4C 75 FB |     djf    COUNT_, #popregs__ret
006e0 0b7 28 4C 61 FD |     setq   COUNT_
006e4 0b8 5F 8D 06 FB |     rdlong local01, --ptra
006e8 0b9             | popregs__ret
006e8 0b9 2A 4E 61 FD |     push   RETADDR_
006ec 0ba 2C EC 63 FD |     jmp    pa
006f0 0bb             | 
006f0 0bb             | divide_
006f0 0bb 71 E3 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f4 0bc 6C 90 61 FD |        wrc     itmp2_                         'store sign of y
006f8 0bd 70 E1 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006fc 0be 71 E1 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
00700 0bf 01 90 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00704 0c0 18 E2 62 FD |        getqx   muldivb_                       'get quotient
00708 0c1 19 E0 62 FD |        getqy   muldiva_                       'get remainder
0070c 0c2 70 E1 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
00710 0c3 00 90 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00714 0c4 71 E3 82 06 |  _ret_ negc    muldivb_,muldivb_     
00718 0c5             | 
00718 0c5             | __heap_ptr
00718 0c5 44 5F 05 00 | 	long	@__heap_base
0071c 0c6             | entryptr__
0071c 0c6 04 04 00 00 | 	long	@entry
00720 0c7             | itmp1_
00720 0c7 00 00 00 00 | 	long	0
00724 0c8             | itmp2_
00724 0c8 00 00 00 00 | 	long	0
00728 0c9             | objptr
00728 0c9 4C DF 05 00 | 	long	@objmem
0072c 0ca             | ptr____default_flush_
0072c 0ca 1C 13 00 00 | 	long	@___default_flush
00730 0cb             | ptr____default_getc_
00730 0cb 8C 11 00 00 | 	long	@___default_getc
00734 0cc             | ptr____default_putc_
00734 0cc 08 12 00 00 | 	long	@___default_putc
00738 0cd             | ptr____default_putc_terminal_
00738 0cd 90 12 00 00 | 	long	@___default_putc_terminal
0073c 0ce             | ptr___struct___anon_9b5668f900000005_sputc_
0073c 0ce 60 4F 02 00 | 	long	@__struct___anon_9b5668f900000005_sputc
00740 0cf             | ptr___struct___fmtfile_putchar_
00740 0cf 90 4F 02 00 | 	long	@__struct___fmtfile_putchar
00744 0d0             | ptr___struct__s_vfs_file_t_putchar_
00744 0d0 30 8D 02 00 | 	long	@__struct__s_vfs_file_t_putchar
00748 0d1             | ptr___system__dat__
00748 0d1 10 5A 05 00 | 	long	@__system__dat_
0074c 0d2             | ptr__button_callback_1829_
0074c 0d2 E8 9D 01 00 | 	long	@_button_callback_1829
00750 0d3             | ptr__button_cancel_0893_
00750 0d3 EC 68 01 00 | 	long	@_button_cancel_0893
00754 0d4             | ptr__button_delete_0891_
00754 0d4 D4 67 01 00 | 	long	@_button_delete_0891
00758 0d5             | ptr__button_done_0902_
00758 0d5 30 6A 01 00 | 	long	@_button_done_0902
0075c 0d6             | ptr__button_dotdot_0896_
0075c 0d6 28 69 01 00 | 	long	@_button_dotdot_0896
00760 0d7             | ptr__button_files_0906_
00760 0d7 3C 6A 01 00 | 	long	@_button_files_0906
00764 0d8             | ptr__button_nav_0857_
00764 0d8 7C 64 01 00 | 	long	@_button_nav_0857
00768 0d9             | ptr__button_navigation_0764_
00768 0d9 9C 4B 01 00 | 	long	@_button_navigation_0764
0076c 0da             | ptr__button_navigation_0981_
0076c 0da 40 6B 01 00 | 	long	@_button_navigation_0981
00770 0db             | ptr__button_new_0996_
00770 0db 80 6E 01 00 | 	long	@_button_new_0996
00774 0dc             | ptr__button_next_0900_
00774 0dc 0C 6A 01 00 | 	long	@_button_next_0900
00778 0dd             | ptr__button_open_0860_
00778 0dd 88 64 01 00 | 	long	@_button_open_0860
0077c 0de             | ptr__button_open_0988_
0077c 0de 9C 6B 01 00 | 	long	@_button_open_0988
00780 0df             | ptr__button_prev_0898_
00780 0df C4 69 01 00 | 	long	@_button_prev_0898
00784 0e0             | ptr__button_quartet_1020_
00784 0e0 F8 72 01 00 | 	long	@_button_quartet_1020
00788 0e1             | ptr__button_quartet_parameters_1025_
00788 0e1 48 75 01 00 | 	long	@_button_quartet_parameters_1025
0078c 0e2             | ptr__button_run_0855_
0078c 0e2 64 64 01 00 | 	long	@_button_run_0855
00790 0e3             | ptr__button_save_1011_
00790 0e3 24 71 01 00 | 	long	@_button_save_1011
00794 0e4             | ptr__button_set_1035_
00794 0e4 64 76 01 00 | 	long	@_button_set_1035
00798 0e5             | ptr__button_set_add_
00798 0e5 EC 77 01 00 | 	long	@_button_set_add
0079c 0e6             | ptr__button_set_function_1901_
0079c 0e6 3C A5 01 00 | 	long	@_button_set_function_1901
007a0 0e7             | ptr__button_set_remove_
007a0 0e7 7C 78 01 00 | 	long	@_button_set_remove
007a4 0e8             | ptr__check_buttons_0722_
007a4 0e8 D4 46 01 00 | 	long	@_check_buttons_0722
007a8 0e9             | ptr__check_buttons_1974_
007a8 0e9 BC B2 01 00 | 	long	@_check_buttons_1974
007ac 0ea             | ptr__control_cog_0827_
007ac 0ea 70 4D 01 00 | 	long	@_control_cog_0827
007b0 0eb             | ptr__dat__
007b0 0eb 7C A7 02 00 | 	long	@_dat_
007b4 0ec             | ptr__fatfs_cc___default_flush_
007b4 0ec F8 28 02 00 | 	long	@_fatfs_cc___default_flush
007b8 0ed             | ptr__fatfs_cc___default_getc_
007b8 0ed 68 27 02 00 | 	long	@_fatfs_cc___default_getc
007bc 0ee             | ptr__fatfs_cc___default_putc_
007bc 0ee E4 27 02 00 | 	long	@_fatfs_cc___default_putc
007c0 0ef             | ptr__fatfs_cc___default_putc_terminal_
007c0 0ef 6C 28 02 00 | 	long	@_fatfs_cc___default_putc_terminal
007c4 0f0             | ptr__fatfs_cc_dat__
007c4 0f0 24 55 05 00 | 	long	@_fatfs_cc_dat_
007c8 0f1             | ptr__fatfs_cc_v_close_
007c8 0f1 60 33 02 00 | 	long	@_fatfs_cc_v_close
007cc 0f2             | ptr__fatfs_cc_v_closedir_
007cc 0f2 18 34 02 00 | 	long	@_fatfs_cc_v_closedir
007d0 0f3             | ptr__fatfs_cc_v_creat_
007d0 0f3 C4 32 02 00 | 	long	@_fatfs_cc_v_creat
007d4 0f4             | ptr__fatfs_cc_v_deinit_
007d4 0f4 3C 3B 02 00 | 	long	@_fatfs_cc_v_deinit
007d8 0f5             | ptr__fatfs_cc_v_init_
007d8 0f5 34 3B 02 00 | 	long	@_fatfs_cc_v_init
007dc 0f6             | ptr__fatfs_cc_v_ioctl_
007dc 0f6 E8 39 02 00 | 	long	@_fatfs_cc_v_ioctl
007e0 0f7             | ptr__fatfs_cc_v_lseek_
007e0 0f7 60 39 02 00 | 	long	@_fatfs_cc_v_lseek
007e4 0f8             | ptr__fatfs_cc_v_mkdir_
007e4 0f8 FC 39 02 00 | 	long	@_fatfs_cc_v_mkdir
007e8 0f9             | ptr__fatfs_cc_v_open_
007e8 0f9 3C 3A 02 00 | 	long	@_fatfs_cc_v_open
007ec 0fa             | ptr__fatfs_cc_v_opendir_
007ec 0fa A4 33 02 00 | 	long	@_fatfs_cc_v_opendir
007f0 0fb             | ptr__fatfs_cc_v_read_
007f0 0fb 6C 37 02 00 | 	long	@_fatfs_cc_v_read
007f4 0fc             | ptr__fatfs_cc_v_readdir_
007f4 0fc 58 34 02 00 | 	long	@_fatfs_cc_v_readdir
007f8 0fd             | ptr__fatfs_cc_v_remove_
007f8 0fd 0C 3A 02 00 | 	long	@_fatfs_cc_v_remove
007fc 0fe             | ptr__fatfs_cc_v_rename_
007fc 0fe 2C 3A 02 00 | 	long	@_fatfs_cc_v_rename
00800 0ff             | ptr__fatfs_cc_v_rmdir_
00800 0ff 1C 3A 02 00 | 	long	@_fatfs_cc_v_rmdir
00804 100             | ptr__fatfs_cc_v_stat_
00804 100 7C 35 02 00 | 	long	@_fatfs_cc_v_stat
00808 101             | ptr__fatfs_cc_v_write_
00808 101 80 38 02 00 | 	long	@_fatfs_cc_v_write
0080c 102             | ptr__jm_fullduplexserial_spin2_dat__
0080c 102 B0 54 05 00 | 	long	@_jm_fullduplexserial_spin2_dat_
00810 103             | ptr__key_pressed_1685_
00810 103 6C 98 01 00 | 	long	@_key_pressed_1685
00814 104             | ptr__module_animation_switch_page_down_
00814 104 34 89 00 00 | 	long	@_module_animation_switch_page_down
00818 105             | ptr__module_animation_switch_page_up_
00818 105 6C 88 00 00 | 	long	@_module_animation_switch_page_up
0081c 106             | ptr__module_animation_touch_1620_
0081c 106 20 95 01 00 | 	long	@_module_animation_touch_1620
00820 107             | ptr__module_graph_draw_1966_
00820 107 B0 B0 01 00 | 	long	@_module_graph_draw_1966
00824 108             | ptr__monitor_cog_0748_
00824 108 E8 46 01 00 | 	long	@_monitor_cog_0748
00828 109             | ptr__poolAlloc_
00828 109 24 94 01 00 | 	long	@_poolAlloc
0082c 10a             | ptr__poolInit_
0082c 10a 10 94 01 00 | 	long	@_poolInit
00830 10b             | ptr__sigmoid_
00830 10b 28 FD 00 00 | 	long	@_sigmoid
00834 10c             | ptr__update_condition_1841_
00834 10c 08 A1 01 00 | 	long	@_update_condition_1841
00838 10d             | ptr__update_continuous_1920_
00838 10d 3C AB 01 00 | 	long	@_update_continuous_1920
0083c 10e             | ptr__update_force_1940_
0083c 10e 98 AF 01 00 | 	long	@_update_force_1940
00840 10f             | ptr__update_header_1905_
00840 10f 54 A5 01 00 | 	long	@_update_header_1905
00844 110             | ptr__update_home_1930_
00844 110 68 AD 01 00 | 	long	@_update_home_1930
00848 111             | ptr__update_incremental_1915_
00848 111 28 AA 01 00 | 	long	@_update_incremental_1915
0084c 112             | ptr__update_length_1935_
0084c 112 80 AE 01 00 | 	long	@_update_length_1935
00850 113             | ptr__update_mode_1847_
00850 113 A0 A3 01 00 | 	long	@_update_mode_1847
00854 114             | ptr__update_off_1910_
00854 114 2C A9 01 00 | 	long	@_update_off_1910
00858 115             | ptr__update_positional_1925_
00858 115 50 AC 01 00 | 	long	@_update_positional_1925
0085c 116             | ptr__update_profileName_0863_
0085c 116 B8 65 01 00 | 	long	@_update_profileName_0863
00860 117             | ptr__update_profileNumber_0866_
00860 117 9C 66 01 00 | 	long	@_update_profileNumber_0866
00864 118             | ptr__update_status_1835_
00864 118 14 9F 01 00 | 	long	@_update_status_1835
00868 119             | ptr_stackspace_
00868 119 4C DF 05 00 | 	long	@stackspace
0086c 11a             | result1
0086c 11a 00 00 00 00 | 	long	0
00870 11b             | result2
00870 11b 01 00 00 00 | 	long	1
00874 11c             | result3
00874 11c 02 00 00 00 | 	long	2
00878 11d             | COG_BSS_START
00878 11d             | 	fit	480
00878                 | 	orgh
00878                 | hubentry
00878                 | 
00878                 | _count
00878     03 4C 05 F6 | 	mov	COUNT_, #3
0087c     A9 00 A0 FD | 	call	#pushregs_
00880     3A 8D 02 F6 | 	mov	local01, arg01
00884     3B 8F 02 F6 | 	mov	local02, arg02
00888     00 90 06 F6 | 	mov	local03, #0
0088c     00 78 56 F2 | 	cmps	arg03, #0 wc
00890     28 00 90 CD |  if_b	jmp	#LR__0001
00894     46 79 82 F1 | 	sub	arg03, local01
00898     3C 91 02 F6 | 	mov	local03, arg03
0089c     48 7B 42 F6 | 	abs	arg04, local03
008a0     04 7A 56 F2 | 	cmps	arg04, #4 wc
008a4                 | '     {
008a4                 | '        return -1;
008a4     01 34 66 36 |  if_ae	neg	result1, #1
008a8     50 00 90 3D |  if_ae	jmp	#LR__0002
008ac     00 90 56 F2 | 	cmps	local03, #0 wc
008b0     03 90 06 C5 |  if_b	and	local03, #3
008b4     04 90 46 C5 |  if_b	or	local03, #4
008b8     03 90 06 35 |  if_ae	and	local03, #3
008bc                 | LR__0001
008bc     1C 76 06 F6 | 	mov	arg02, #28
008c0     1C 90 66 F0 | 	shl	local03, #28
008c4     48 77 42 F5 | 	or	arg02, local03
008c8     00 78 06 F6 | 	mov	arg03, #0
008cc     00 7A 06 F6 | 	mov	arg04, #0
008d0     40 8C 62 FD | 	dirl	local01
008d4     46 77 02 FC | 	wrpin	arg02, local01
008d8     46 01 18 FC | 	wxpin	#0, local01
008dc     46 01 28 FC | 	wypin	#0, local01
008e0     41 8C 62 FD | 	dirh	local01
008e4     47 75 02 F6 | 	mov	arg01, local02
008e8     4C 4B B2 FD | 	call	#__system___waitms
008ec     00 34 06 F6 | 	mov	result1, #0
008f0     46 35 8A FA | 	rdpin	result1, local01
008f4     50 8C 62 FD | 	fltl	local01
008f8     46 01 08 FC | 	wrpin	#0, local01
008fc                 | '     {
008fc                 | '       pinOffset = (pinOffset & 0x03);
008fc                 | '     }
008fc                 | '   }
008fc                 | ' 
008fc                 | '   _pinstart(pin, p_count_rises | (pinOffset << 28), 0, 0);
008fc                 | ' 
008fc                 | '   _waitms(duration) ;
008fc                 | ' 
008fc                 | '   transitions = _rdpin(pin);
008fc                 | ' 
008fc                 | '   _pinclear(pin);
008fc                 | ' #line 93 "C:/flexprop/include/libsimpletools/count.c"
008fc                 | '   return transitions;
008fc                 | LR__0002
008fc     A8 F0 03 F6 | 	mov	ptra, fp
00900     B3 00 A0 FD | 	call	#popregs_
00904                 | _count_ret
00904     2D 00 64 FD | 	ret
00908                 | 
00908                 | _opendir
00908     06 4C 05 F6 | 	mov	COUNT_, #6
0090c     A9 00 A0 FD | 	call	#pushregs_
00910     3A 77 02 F6 | 	mov	arg02, arg01
00914                 | '     return tmpname;
00914     16 01 00 FF 
00918     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
0091c     EB 8C 02 F6 | 	mov	local01, ptr__dat__
00920     46 75 02 F6 | 	mov	arg01, local01
00924     00 78 06 F6 | 	mov	arg03, #0
00928     16 01 00 FF 
0092c     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
00930     24 71 B1 FD | 	call	#___getvfsforfile
00934     1A 8F 0A F6 | 	mov	local02, result1 wz
00938     28 8E 06 51 |  if_ne	add	local02, #40
0093c     47 75 02 5B |  if_ne	rdlong	arg01, local02
00940     28 8E 86 51 |  if_ne	sub	local02, #40
00944     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
00948     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
0094c     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
00950     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
00954                 | ' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
00954                 | '         _seterror( 16 );
00954                 | '         return 0;
00954     00 34 06 A6 |  if_e	mov	result1, #0
00958     80 00 90 AD |  if_e	jmp	#LR__0004
0095c     5C 74 06 F6 | 	mov	arg01, #92
00960                 | '     return _gc_alloc(size);
00960     10 76 06 F6 | 	mov	arg02, #16
00964     5C 75 B2 FD | 	call	#__system___gc_doalloc
00968     1A 91 0A F6 | 	mov	local03, result1 wz
0096c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
00970     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
00974     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
00978                 | ' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
00978                 | '         _seterror( 7 );
00978                 | '         return 0;
00978     00 34 06 A6 |  if_e	mov	result1, #0
0097c     5C 00 90 AD |  if_e	jmp	#LR__0004
00980     28 8E 06 F1 | 	add	local02, #40
00984     47 77 02 FB | 	rdlong	arg02, local02
00988     28 8E 86 F1 | 	sub	local02, #40
0098c     3B 93 02 FB | 	rdlong	local04, arg02
00990     04 76 06 F1 | 	add	arg02, #4
00994     3B 95 02 FB | 	rdlong	local05, arg02
00998     48 75 02 F6 | 	mov	arg01, local03
0099c     46 77 02 F6 | 	mov	arg02, local01
009a0     C9 96 02 F6 | 	mov	local06, objptr
009a4     49 93 01 F6 | 	mov	objptr, local04
009a8     2D 94 62 FD | 	call	local05
009ac     4B 93 01 F6 | 	mov	objptr, local06
009b0     1A 75 0A F6 | 	mov	arg01, result1 wz
009b4     1C 00 90 AD |  if_e	jmp	#LR__0003
009b8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
009bc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
009c0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
009c4     48 75 02 F6 | 	mov	arg01, local03
009c8                 | '     return _gc_free(ptr);
009c8     28 76 B2 FD | 	call	#__system___gc_free
009cc                 | ' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
009cc                 | '         _seterror(r);
009cc                 | '         free(dir);
009cc                 | '         return 0;
009cc     00 34 06 F6 | 	mov	result1, #0
009d0     08 00 90 FD | 	jmp	#LR__0004
009d4                 | LR__0003
009d4     48 8F 62 FC | 	wrlong	local02, local03
009d8                 | '     }
009d8                 | '     dir->vfs = v;
009d8                 | '     return dir;
009d8     48 35 02 F6 | 	mov	result1, local03
009dc                 | LR__0004
009dc     A8 F0 03 F6 | 	mov	ptra, fp
009e0     B3 00 A0 FD | 	call	#popregs_
009e4                 | _opendir_ret
009e4     2D 00 64 FD | 	ret
009e8                 | 
009e8                 | _closedir
009e8     04 4C 05 F6 | 	mov	COUNT_, #4
009ec     A9 00 A0 FD | 	call	#pushregs_
009f0     3A 8D 02 F6 | 	mov	local01, arg01
009f4     46 75 02 FB | 	rdlong	arg01, local01
009f8     2C 74 06 F1 | 	add	arg01, #44
009fc     3A 75 02 FB | 	rdlong	arg01, arg01
00a00     3A 8F 02 FB | 	rdlong	local02, arg01
00a04     04 74 06 F1 | 	add	arg01, #4
00a08     3A 91 02 FB | 	rdlong	local03, arg01
00a0c     46 75 02 F6 | 	mov	arg01, local01
00a10     C9 92 02 F6 | 	mov	local04, objptr
00a14     47 93 01 F6 | 	mov	objptr, local02
00a18     2D 90 62 FD | 	call	local03
00a1c     49 93 01 F6 | 	mov	objptr, local04
00a20     1A 93 02 F6 | 	mov	local04, result1
00a24     46 75 02 F6 | 	mov	arg01, local01
00a28                 | '     return _gc_free(ptr);
00a28     C8 75 B2 FD | 	call	#__system___gc_free
00a2c                 | '     r = v->closedir(dir);
00a2c                 | '     free(dir);
00a2c                 | '     return _seterror(r);
00a2c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
00a30     D1 92 62 FC | 	wrlong	local04, ptr___system__dat__
00a34     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
00a38     00 92 0E F2 | 	cmp	local04, #0 wz
00a3c     01 34 66 56 |  if_ne	neg	result1, #1
00a40     00 34 06 A6 |  if_e	mov	result1, #0
00a44     A8 F0 03 F6 | 	mov	ptra, fp
00a48     B3 00 A0 FD | 	call	#popregs_
00a4c                 | _closedir_ret
00a4c     2D 00 64 FD | 	ret
00a50                 | 
00a50                 | _readdir
00a50     04 4C 05 F6 | 	mov	COUNT_, #4
00a54     A9 00 A0 FD | 	call	#pushregs_
00a58     3A 77 0A FB | 	rdlong	arg02, arg01 wz
00a5c     08 74 06 F1 | 	add	arg01, #8
00a60     3A 8D 02 F6 | 	mov	local01, arg01
00a64                 | '         return 0;
00a64     08 74 86 F1 | 	sub	arg01, #8
00a68     00 34 06 A6 |  if_e	mov	result1, #0
00a6c     4C 00 90 AD |  if_e	jmp	#LR__0006
00a70     30 76 06 F1 | 	add	arg02, #48
00a74     3B 77 02 FB | 	rdlong	arg02, arg02
00a78     3B 8F 02 FB | 	rdlong	local02, arg02
00a7c     04 76 06 F1 | 	add	arg02, #4
00a80     3B 91 02 FB | 	rdlong	local03, arg02
00a84     46 77 02 F6 | 	mov	arg02, local01
00a88     C9 92 02 F6 | 	mov	local04, objptr
00a8c     47 93 01 F6 | 	mov	objptr, local02
00a90     2D 90 62 FD | 	call	local03
00a94     49 93 01 F6 | 	mov	objptr, local04
00a98     00 34 4E F2 | 	cmps	result1, #0 wz
00a9c     18 00 90 AD |  if_e	jmp	#LR__0005
00aa0     01 34 56 F2 | 	cmps	result1, #1 wc
00aa4     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
00aa8     D1 34 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
00aac     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
00ab0                 | '             _seterror(r);
00ab0                 | '         }
00ab0                 | '         return 0;
00ab0     00 34 06 F6 | 	mov	result1, #0
00ab4     04 00 90 FD | 	jmp	#LR__0006
00ab8                 | LR__0005
00ab8                 | '     }
00ab8                 | '     return D;
00ab8     46 35 02 F6 | 	mov	result1, local01
00abc                 | LR__0006
00abc     A8 F0 03 F6 | 	mov	ptra, fp
00ac0     B3 00 A0 FD | 	call	#popregs_
00ac4                 | _readdir_ret
00ac4     2D 00 64 FD | 	ret
00ac8                 | 
00ac8                 | __openraw
00ac8     0C 4C 05 F6 | 	mov	COUNT_, #12
00acc     A9 00 A0 FD | 	call	#pushregs_
00ad0     34 F0 07 F1 | 	add	ptra, #52
00ad4     04 50 05 F1 | 	add	fp, #4
00ad8     A8 74 62 FC | 	wrlong	arg01, fp
00adc     04 50 05 F1 | 	add	fp, #4
00ae0     A8 76 62 FC | 	wrlong	arg02, fp
00ae4     04 50 05 F1 | 	add	fp, #4
00ae8     A8 78 62 FC | 	wrlong	arg03, fp
00aec     04 50 05 F1 | 	add	fp, #4
00af0     A8 7A 62 FC | 	wrlong	arg04, fp
00af4     0C 50 05 F1 | 	add	fp, #12
00af8     A8 08 68 FC | 	wrlong	#4, fp
00afc     18 50 85 F1 | 	sub	fp, #24
00b00     A8 78 02 FB | 	rdlong	arg03, fp
00b04     1C 50 05 F1 | 	add	fp, #28
00b08     A8 78 62 FC | 	wrlong	arg03, fp
00b0c                 | '     return tmpname;
00b0c     16 01 00 FF 
00b10     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
00b14     EB 74 02 F6 | 	mov	arg01, ptr__dat__
00b18     16 01 00 FF 
00b1c     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
00b20     04 50 05 F1 | 	add	fp, #4
00b24     A8 74 62 FC | 	wrlong	arg01, fp
00b28     1C 50 85 F1 | 	sub	fp, #28
00b2c     A8 76 02 FB | 	rdlong	arg02, fp
00b30     08 50 85 F1 | 	sub	fp, #8
00b34     00 78 06 F6 | 	mov	arg03, #0
00b38     1C 6F B1 FD | 	call	#___getvfsforfile
00b3c     18 50 05 F1 | 	add	fp, #24
00b40     A8 34 62 FC | 	wrlong	result1, fp
00b44     00 34 4E F2 | 	cmps	result1, #0 wz
00b48     18 50 85 F1 | 	sub	fp, #24
00b4c     18 00 90 AD |  if_e	jmp	#LR__0007
00b50     18 50 05 F1 | 	add	fp, #24
00b54     A8 34 02 FB | 	rdlong	result1, fp
00b58     18 50 85 F1 | 	sub	fp, #24
00b5c     20 34 06 F1 | 	add	result1, #32
00b60     1A 35 0A FB | 	rdlong	result1, result1 wz
00b64     14 00 90 5D |  if_ne	jmp	#LR__0008
00b68                 | LR__0007
00b68                 | ' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
00b68                 | '         return _seterror( 16 );
00b68     18 A2 05 F1 | 	add	ptr___system__dat__, #24
00b6c     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
00b70     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
00b74     01 34 66 F6 | 	neg	result1, #1
00b78     74 04 90 FD | 	jmp	#LR__0023
00b7c                 | LR__0008
00b7c     20 50 05 F1 | 	add	fp, #32
00b80     A8 74 02 FB | 	rdlong	arg01, fp
00b84     20 50 85 F1 | 	sub	fp, #32
00b88     00 76 06 F6 | 	mov	arg02, #0
00b8c     30 78 06 F6 | 	mov	arg03, #48
00b90     3A 8D 02 F6 | 	mov	local01, arg01
00b94     99 00 A0 FD | 	call	#\builtin_bytefill_
00b98     18 50 05 F1 | 	add	fp, #24
00b9c     A8 8E 02 FB | 	rdlong	local02, fp
00ba0     47 91 02 F6 | 	mov	local03, local02
00ba4     20 90 06 F1 | 	add	local03, #32
00ba8     48 93 02 FB | 	rdlong	local04, local03
00bac     49 79 02 F6 | 	mov	arg03, local04
00bb0     3C 95 02 FB | 	rdlong	local05, arg03
00bb4     04 78 06 F1 | 	add	arg03, #4
00bb8     3C 97 02 FB | 	rdlong	local06, arg03
00bbc     4B 99 02 F6 | 	mov	local07, local06
00bc0     08 50 05 F1 | 	add	fp, #8
00bc4     A8 9A 02 FB | 	rdlong	local08, fp
00bc8     04 50 05 F1 | 	add	fp, #4
00bcc     A8 9C 02 FB | 	rdlong	local09, fp
00bd0     18 50 85 F1 | 	sub	fp, #24
00bd4     A8 9E 02 FB | 	rdlong	local10, fp
00bd8     0C 50 85 F1 | 	sub	fp, #12
00bdc     4D 75 02 F6 | 	mov	arg01, local08
00be0     4E 77 02 F6 | 	mov	arg02, local09
00be4     4F 79 02 F6 | 	mov	arg03, local10
00be8     C9 A0 02 F6 | 	mov	local11, objptr
00bec     4A 93 01 F6 | 	mov	objptr, local05
00bf0     2D 98 62 FD | 	call	local07
00bf4     50 93 01 F6 | 	mov	objptr, local11
00bf8     14 50 05 F1 | 	add	fp, #20
00bfc     A8 34 62 FC | 	wrlong	result1, fp
00c00     14 50 85 F1 | 	sub	fp, #20
00c04     00 34 0E F2 | 	cmp	result1, #0 wz
00c08     88 00 90 AD |  if_e	jmp	#LR__0009
00c0c     0C 50 05 F1 | 	add	fp, #12
00c10     A8 98 02 FB | 	rdlong	local07, fp
00c14     0C 50 85 F1 | 	sub	fp, #12
00c18     04 98 CE F7 | 	test	local07, #4 wz
00c1c     74 00 90 AD |  if_e	jmp	#LR__0009
00c20     18 50 05 F1 | 	add	fp, #24
00c24     A8 8E 02 FB | 	rdlong	local02, fp
00c28     47 91 02 F6 | 	mov	local03, local02
00c2c     24 90 06 F1 | 	add	local03, #36
00c30     48 93 02 FB | 	rdlong	local04, local03
00c34     24 90 86 F1 | 	sub	local03, #36
00c38     49 A1 02 F6 | 	mov	local11, local04
00c3c     50 95 02 FB | 	rdlong	local05, local11
00c40     04 A0 06 F1 | 	add	local11, #4
00c44     50 97 02 FB | 	rdlong	local06, local11
00c48     4B 99 02 F6 | 	mov	local07, local06
00c4c     08 50 05 F1 | 	add	fp, #8
00c50     A8 9A 02 FB | 	rdlong	local08, fp
00c54     04 50 05 F1 | 	add	fp, #4
00c58     A8 9C 02 FB | 	rdlong	local09, fp
00c5c     14 50 85 F1 | 	sub	fp, #20
00c60     A8 9E 02 FB | 	rdlong	local10, fp
00c64     10 50 85 F1 | 	sub	fp, #16
00c68     4D 75 02 F6 | 	mov	arg01, local08
00c6c     4E 77 02 F6 | 	mov	arg02, local09
00c70     4F 79 02 F6 | 	mov	arg03, local10
00c74     C9 A0 02 F6 | 	mov	local11, objptr
00c78     4A 93 01 F6 | 	mov	objptr, local05
00c7c     2D 98 62 FD | 	call	local07
00c80     50 93 01 F6 | 	mov	objptr, local11
00c84     1A A3 02 F6 | 	mov	local12, result1
00c88     14 50 05 F1 | 	add	fp, #20
00c8c     A8 A2 62 FC | 	wrlong	local12, fp
00c90     14 50 85 F1 | 	sub	fp, #20
00c94                 | LR__0009
00c94     14 50 05 F1 | 	add	fp, #20
00c98     A8 A2 0A FB | 	rdlong	local12, fp wz
00c9c     14 50 85 F1 | 	sub	fp, #20
00ca0     2C 03 90 5D |  if_ne	jmp	#LR__0022
00ca4     0C 50 05 F1 | 	add	fp, #12
00ca8     A8 A2 02 FB | 	rdlong	local12, fp
00cac     03 A2 0E F5 | 	and	local12, #3 wz
00cb0     1C 50 05 F1 | 	add	fp, #28
00cb4     A8 A2 62 FC | 	wrlong	local12, fp
00cb8     28 50 85 F1 | 	sub	fp, #40
00cbc     1C 50 05 51 |  if_ne	add	fp, #28
00cc0     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00cc4     02 A2 46 55 |  if_ne	or	local12, #2
00cc8     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00ccc     1C 50 85 51 |  if_ne	sub	fp, #28
00cd0     28 50 05 F1 | 	add	fp, #40
00cd4     A8 A2 02 FB | 	rdlong	local12, fp
00cd8     28 50 85 F1 | 	sub	fp, #40
00cdc     01 A2 0E F2 | 	cmp	local12, #1 wz
00ce0     1C 50 05 51 |  if_ne	add	fp, #28
00ce4     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00ce8     01 A2 46 55 |  if_ne	or	local12, #1
00cec     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00cf0     1C 50 85 51 |  if_ne	sub	fp, #28
00cf4     0C 50 05 F1 | 	add	fp, #12
00cf8     A8 A2 02 FB | 	rdlong	local12, fp
00cfc     0C 50 85 F1 | 	sub	fp, #12
00d00     20 A2 CE F7 | 	test	local12, #32 wz
00d04     1C 50 05 51 |  if_ne	add	fp, #28
00d08     A8 A2 02 5B |  if_ne	rdlong	local12, fp
00d0c     C0 A2 46 55 |  if_ne	or	local12, #192
00d10     A8 A2 62 5C |  if_ne	wrlong	local12, fp
00d14     1C 50 85 51 |  if_ne	sub	fp, #28
00d18     20 50 05 F1 | 	add	fp, #32
00d1c     A8 A2 02 FB | 	rdlong	local12, fp
00d20     04 50 85 F1 | 	sub	fp, #4
00d24     A8 98 02 FB | 	rdlong	local07, fp
00d28     08 A2 06 F1 | 	add	local12, #8
00d2c     51 99 62 FC | 	wrlong	local07, local12
00d30     04 50 05 F1 | 	add	fp, #4
00d34     A8 A2 02 FB | 	rdlong	local12, fp
00d38     20 50 85 F1 | 	sub	fp, #32
00d3c     10 A2 06 F1 | 	add	local12, #16
00d40     51 99 0A FB | 	rdlong	local07, local12 wz
00d44     24 00 90 5D |  if_ne	jmp	#LR__0010
00d48     20 50 05 F1 | 	add	fp, #32
00d4c     A8 A2 02 FB | 	rdlong	local12, fp
00d50     08 50 85 F1 | 	sub	fp, #8
00d54     A8 98 02 FB | 	rdlong	local07, fp
00d58     18 50 85 F1 | 	sub	fp, #24
00d5c     04 98 06 F1 | 	add	local07, #4
00d60     4C 8F 02 FB | 	rdlong	local02, local07
00d64     10 A2 06 F1 | 	add	local12, #16
00d68     51 8F 62 FC | 	wrlong	local02, local12
00d6c                 | LR__0010
00d6c     20 50 05 F1 | 	add	fp, #32
00d70     A8 A2 02 FB | 	rdlong	local12, fp
00d74     20 50 85 F1 | 	sub	fp, #32
00d78     14 A2 06 F1 | 	add	local12, #20
00d7c     51 99 0A FB | 	rdlong	local07, local12 wz
00d80     24 00 90 5D |  if_ne	jmp	#LR__0011
00d84     20 50 05 F1 | 	add	fp, #32
00d88     A8 A2 02 FB | 	rdlong	local12, fp
00d8c     08 50 85 F1 | 	sub	fp, #8
00d90     A8 98 02 FB | 	rdlong	local07, fp
00d94     18 50 85 F1 | 	sub	fp, #24
00d98     08 98 06 F1 | 	add	local07, #8
00d9c     4C 8F 02 FB | 	rdlong	local02, local07
00da0     14 A2 06 F1 | 	add	local12, #20
00da4     51 8F 62 FC | 	wrlong	local02, local12
00da8                 | LR__0011
00da8     20 50 05 F1 | 	add	fp, #32
00dac     A8 A2 02 FB | 	rdlong	local12, fp
00db0     20 50 85 F1 | 	sub	fp, #32
00db4     20 A2 06 F1 | 	add	local12, #32
00db8     51 99 0A FB | 	rdlong	local07, local12 wz
00dbc     20 00 90 5D |  if_ne	jmp	#LR__0012
00dc0     20 50 05 F1 | 	add	fp, #32
00dc4     A8 A2 02 FB | 	rdlong	local12, fp
00dc8     08 50 85 F1 | 	sub	fp, #8
00dcc     A8 98 02 FB | 	rdlong	local07, fp
00dd0     18 50 85 F1 | 	sub	fp, #24
00dd4     4C 8F 02 FB | 	rdlong	local02, local07
00dd8     20 A2 06 F1 | 	add	local12, #32
00ddc     51 8F 62 FC | 	wrlong	local02, local12
00de0                 | LR__0012
00de0     20 50 05 F1 | 	add	fp, #32
00de4     A8 A2 02 FB | 	rdlong	local12, fp
00de8     20 50 85 F1 | 	sub	fp, #32
00dec     24 A2 06 F1 | 	add	local12, #36
00df0     51 99 0A FB | 	rdlong	local07, local12 wz
00df4     24 00 90 5D |  if_ne	jmp	#LR__0013
00df8     20 50 05 F1 | 	add	fp, #32
00dfc     A8 A2 02 FB | 	rdlong	local12, fp
00e00     08 50 85 F1 | 	sub	fp, #8
00e04     A8 98 02 FB | 	rdlong	local07, fp
00e08     18 50 85 F1 | 	sub	fp, #24
00e0c     10 98 06 F1 | 	add	local07, #16
00e10     4C 8F 02 FB | 	rdlong	local02, local07
00e14     24 A2 06 F1 | 	add	local12, #36
00e18     51 8F 62 FC | 	wrlong	local02, local12
00e1c                 | LR__0013
00e1c     20 50 05 F1 | 	add	fp, #32
00e20     A8 A2 02 FB | 	rdlong	local12, fp
00e24     20 50 85 F1 | 	sub	fp, #32
00e28     2C A2 06 F1 | 	add	local12, #44
00e2c     51 99 0A FB | 	rdlong	local07, local12 wz
00e30     24 00 90 5D |  if_ne	jmp	#LR__0014
00e34     20 50 05 F1 | 	add	fp, #32
00e38     A8 A2 02 FB | 	rdlong	local12, fp
00e3c     08 50 85 F1 | 	sub	fp, #8
00e40     A8 98 02 FB | 	rdlong	local07, fp
00e44     18 50 85 F1 | 	sub	fp, #24
00e48     0C 98 06 F1 | 	add	local07, #12
00e4c     4C 8F 02 FB | 	rdlong	local02, local07
00e50     2C A2 06 F1 | 	add	local12, #44
00e54     51 8F 62 FC | 	wrlong	local02, local12
00e58                 | LR__0014
00e58     20 50 05 F1 | 	add	fp, #32
00e5c     A8 A2 02 FB | 	rdlong	local12, fp
00e60     20 50 85 F1 | 	sub	fp, #32
00e64     18 A2 06 F1 | 	add	local12, #24
00e68     51 99 0A FB | 	rdlong	local07, local12 wz
00e6c     B0 00 90 5D |  if_ne	jmp	#LR__0017
00e70     20 50 05 F1 | 	add	fp, #32
00e74     A8 74 02 FB | 	rdlong	arg01, fp
00e78     3A 91 02 F6 | 	mov	local03, arg01
00e7c     24 90 06 F1 | 	add	local03, #36
00e80     48 A3 02 FB | 	rdlong	local12, local03
00e84     51 95 02 FB | 	rdlong	local05, local12
00e88     04 A2 06 F1 | 	add	local12, #4
00e8c     51 99 02 FB | 	rdlong	local07, local12
00e90     10 50 05 F1 | 	add	fp, #16
00e94     A8 78 02 F6 | 	mov	arg03, fp
00e98     30 50 85 F1 | 	sub	fp, #48
00e9c     00 77 06 F6 | 	mov	arg02, #256
00ea0     C9 A0 02 F6 | 	mov	local11, objptr
00ea4     4A 93 01 F6 | 	mov	objptr, local05
00ea8     2D 98 62 FD | 	call	local07
00eac     50 93 01 F6 | 	mov	objptr, local11
00eb0     2C 50 05 F1 | 	add	fp, #44
00eb4     A8 34 62 FC | 	wrlong	result1, fp
00eb8     2C 50 85 F1 | 	sub	fp, #44
00ebc     00 34 0E F2 | 	cmp	result1, #0 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0015
00ec4     30 50 05 F1 | 	add	fp, #48
00ec8     A8 98 02 FB | 	rdlong	local07, fp
00ecc     30 50 85 F1 | 	sub	fp, #48
00ed0     02 98 CE F7 | 	test	local07, #2 wz
00ed4     28 00 90 AD |  if_e	jmp	#LR__0015
00ed8     20 50 05 F1 | 	add	fp, #32
00edc     A8 A2 02 FB | 	rdlong	local12, fp
00ee0     20 50 85 F1 | 	sub	fp, #32
00ee4     C9 74 02 F6 | 	mov	arg01, objptr
00ee8     CD 76 02 F6 | 	mov	arg02, ptr____default_putc_terminal_
00eec     F8 43 B2 FD | 	call	#__system___make_methodptr
00ef0     1A 99 02 F6 | 	mov	local07, result1
00ef4     18 A2 06 F1 | 	add	local12, #24
00ef8     51 99 62 FC | 	wrlong	local07, local12
00efc     20 00 90 FD | 	jmp	#LR__0016
00f00                 | LR__0015
00f00     20 50 05 F1 | 	add	fp, #32
00f04     A8 A2 02 FB | 	rdlong	local12, fp
00f08     20 50 85 F1 | 	sub	fp, #32
00f0c     C9 74 02 F6 | 	mov	arg01, objptr
00f10     CC 76 02 F6 | 	mov	arg02, ptr____default_putc_
00f14     D0 43 B2 FD | 	call	#__system___make_methodptr
00f18     18 A2 06 F1 | 	add	local12, #24
00f1c     51 35 62 FC | 	wrlong	result1, local12
00f20                 | LR__0016
00f20                 | LR__0017
00f20     20 50 05 F1 | 	add	fp, #32
00f24     A8 A2 02 FB | 	rdlong	local12, fp
00f28     20 50 85 F1 | 	sub	fp, #32
00f2c     1C A2 06 F1 | 	add	local12, #28
00f30     51 99 0A FB | 	rdlong	local07, local12 wz
00f34     20 00 90 5D |  if_ne	jmp	#LR__0018
00f38     20 50 05 F1 | 	add	fp, #32
00f3c     A8 A2 02 FB | 	rdlong	local12, fp
00f40     20 50 85 F1 | 	sub	fp, #32
00f44     C9 74 02 F6 | 	mov	arg01, objptr
00f48     CB 76 02 F6 | 	mov	arg02, ptr____default_getc_
00f4c     98 43 B2 FD | 	call	#__system___make_methodptr
00f50     1C A2 06 F1 | 	add	local12, #28
00f54     51 35 62 FC | 	wrlong	result1, local12
00f58                 | LR__0018
00f58     20 50 05 F1 | 	add	fp, #32
00f5c     A8 A2 02 FB | 	rdlong	local12, fp
00f60     20 50 85 F1 | 	sub	fp, #32
00f64     28 A2 06 F1 | 	add	local12, #40
00f68     51 99 0A FB | 	rdlong	local07, local12 wz
00f6c     60 00 90 5D |  if_ne	jmp	#LR__0021
00f70     18 50 05 F1 | 	add	fp, #24
00f74     A8 A2 02 FB | 	rdlong	local12, fp
00f78     18 50 85 F1 | 	sub	fp, #24
00f7c     14 A2 06 F1 | 	add	local12, #20
00f80     51 99 0A FB | 	rdlong	local07, local12 wz
00f84     28 00 90 AD |  if_e	jmp	#LR__0019
00f88     20 50 05 F1 | 	add	fp, #32
00f8c     A8 A2 02 FB | 	rdlong	local12, fp
00f90     08 50 85 F1 | 	sub	fp, #8
00f94     A8 98 02 FB | 	rdlong	local07, fp
00f98     18 50 85 F1 | 	sub	fp, #24
00f9c     14 98 06 F1 | 	add	local07, #20
00fa0     4C 8F 02 FB | 	rdlong	local02, local07
00fa4     28 A2 06 F1 | 	add	local12, #40
00fa8     51 8F 62 FC | 	wrlong	local02, local12
00fac     20 00 90 FD | 	jmp	#LR__0020
00fb0                 | LR__0019
00fb0     20 50 05 F1 | 	add	fp, #32
00fb4     A8 A2 02 FB | 	rdlong	local12, fp
00fb8     20 50 85 F1 | 	sub	fp, #32
00fbc     C9 74 02 F6 | 	mov	arg01, objptr
00fc0     CA 76 02 F6 | 	mov	arg02, ptr____default_flush_
00fc4     20 43 B2 FD | 	call	#__system___make_methodptr
00fc8     28 A2 06 F1 | 	add	local12, #40
00fcc     51 35 62 FC | 	wrlong	result1, local12
00fd0                 | LR__0020
00fd0                 | LR__0021
00fd0                 | LR__0022
00fd0     14 50 05 F1 | 	add	fp, #20
00fd4     A8 A2 0A FB | 	rdlong	local12, fp wz
00fd8     00 74 06 A6 |  if_e	mov	arg01, #0
00fdc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
00fe0     D1 74 62 AC |  if_e	wrlong	arg01, ptr___system__dat__
00fe4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
00fe8                 | '     return r;
00fe8     A8 34 02 FB | 	rdlong	result1, fp
00fec     14 50 85 F1 | 	sub	fp, #20
00ff0                 | LR__0023
00ff0     A8 F0 03 F6 | 	mov	ptra, fp
00ff4     B3 00 A0 FD | 	call	#popregs_
00ff8                 | __openraw_ret
00ff8     2D 00 64 FD | 	ret
00ffc                 | 
00ffc                 | __closeraw
00ffc     05 4C 05 F6 | 	mov	COUNT_, #5
01000     A9 00 A0 FD | 	call	#pushregs_
01004     3A 8D 02 F6 | 	mov	local01, arg01
01008     00 8E 06 F6 | 	mov	local02, #0
0100c     08 8C 06 F1 | 	add	local01, #8
01010     46 35 0A FB | 	rdlong	result1, local01 wz
01014     08 8C 86 F1 | 	sub	local01, #8
01018                 | '         return _seterror( 5 );
01018     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
0101c     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
01020     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01024     01 34 66 A6 |  if_e	neg	result1, #1
01028     90 00 90 AD |  if_e	jmp	#LR__0026
0102c     28 8C 06 F1 | 	add	local01, #40
01030     46 35 0A FB | 	rdlong	result1, local01 wz
01034     28 8C 86 F1 | 	sub	local01, #40
01038     2C 00 90 AD |  if_e	jmp	#LR__0024
0103c     28 8C 06 F1 | 	add	local01, #40
01040     46 75 02 FB | 	rdlong	arg01, local01
01044     28 8C 86 F1 | 	sub	local01, #40
01048     3A 91 02 FB | 	rdlong	local03, arg01
0104c     04 74 06 F1 | 	add	arg01, #4
01050     3A 93 02 FB | 	rdlong	local04, arg01
01054     46 75 02 F6 | 	mov	arg01, local01
01058     C9 94 02 F6 | 	mov	local05, objptr
0105c     48 93 01 F6 | 	mov	objptr, local03
01060     2D 92 62 FD | 	call	local04
01064     4A 93 01 F6 | 	mov	objptr, local05
01068                 | LR__0024
01068     20 8C 06 F1 | 	add	local01, #32
0106c     46 95 0A FB | 	rdlong	local05, local01 wz
01070     20 8C 86 F1 | 	sub	local01, #32
01074     30 00 90 AD |  if_e	jmp	#LR__0025
01078     20 8C 06 F1 | 	add	local01, #32
0107c     46 95 02 FB | 	rdlong	local05, local01
01080     20 8C 86 F1 | 	sub	local01, #32
01084     4A 91 02 FB | 	rdlong	local03, local05
01088     04 94 06 F1 | 	add	local05, #4
0108c     4A 93 02 FB | 	rdlong	local04, local05
01090     46 75 02 F6 | 	mov	arg01, local01
01094     C9 94 02 F6 | 	mov	local05, objptr
01098     48 93 01 F6 | 	mov	objptr, local03
0109c     2D 92 62 FD | 	call	local04
010a0     4A 93 01 F6 | 	mov	objptr, local05
010a4     1A 8F 02 F6 | 	mov	local02, result1
010a8                 | LR__0025
010a8     46 75 02 F6 | 	mov	arg01, local01
010ac     00 76 06 F6 | 	mov	arg02, #0
010b0     30 78 06 F6 | 	mov	arg03, #48
010b4     99 00 A0 FD | 	call	#\builtin_bytefill_
010b8                 | '     return r;
010b8     47 35 02 F6 | 	mov	result1, local02
010bc                 | LR__0026
010bc     A8 F0 03 F6 | 	mov	ptra, fp
010c0     B3 00 A0 FD | 	call	#popregs_
010c4                 | __closeraw_ret
010c4     2D 00 64 FD | 	ret
010c8                 | 
010c8                 | __vfs_open_sdcardx
010c8     06 4C 05 F6 | 	mov	COUNT_, #6
010cc     A9 00 A0 FD | 	call	#pushregs_
010d0     3A 8D 02 F6 | 	mov	local01, arg01
010d4     3B 8F 02 F6 | 	mov	local02, arg02
010d8     3C 91 02 F6 | 	mov	local03, arg03
010dc     3D 93 02 F6 | 	mov	local04, arg04
010e0     1C 74 06 F6 | 	mov	arg01, #28
010e4     98 6D B2 FD | 	call	#__system___gc_alloc_managed
010e8     1A 95 02 F6 | 	mov	local05, result1
010ec     01 00 00 FF 
010f0     30 74 06 F6 | 	mov	arg01, ##560
010f4     88 6D B2 FD | 	call	#__system___gc_alloc_managed
010f8     1A 97 02 F6 | 	mov	local06, result1
010fc     00 74 06 F6 | 	mov	arg01, #0
01100     46 77 02 F6 | 	mov	arg02, local01
01104     47 79 02 F6 | 	mov	arg03, local02
01108     48 7B 02 F6 | 	mov	arg04, local03
0110c     49 7D 02 F6 | 	mov	arg05, local04
01110     C9 92 02 F6 | 	mov	local04, objptr
01114     4A 93 01 F6 | 	mov	objptr, local05
01118     30 BA B1 FD | 	call	#_fatfs_cc_disk_setpins
0111c     49 93 01 F6 | 	mov	objptr, local04
01120     1A 93 0A F6 | 	mov	local04, result1 wz
01124     24 00 90 5D |  if_ne	jmp	#LR__0027
01128     47 01 00 FF 
0112c     BE 76 06 F6 | 	mov	arg02, ##@LR__1811
01130     4B 75 02 F6 | 	mov	arg01, local06
01134     00 78 06 F6 | 	mov	arg03, #0
01138     C9 90 02 F6 | 	mov	local03, objptr
0113c     4A 93 01 F6 | 	mov	objptr, local05
01140     20 DC B1 FD | 	call	#_fatfs_cc_f_mount
01144     48 93 01 F6 | 	mov	objptr, local03
01148     1A 93 02 F6 | 	mov	local04, result1
0114c                 | LR__0027
0114c     00 92 0E F2 | 	cmp	local04, #0 wz
01150     18 00 90 AD |  if_e	jmp	#LR__0028
01154     49 75 6A F6 | 	neg	arg01, local04 wz
01158     18 A2 05 F1 | 	add	ptr___system__dat__, #24
0115c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01160     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01164                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01164                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01164                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01164     00 34 06 F6 | 	mov	result1, #0
01168     14 00 90 FD | 	jmp	#LR__0029
0116c                 | LR__0028
0116c     4A 75 02 F6 | 	mov	arg01, local05
01170     C9 8C 02 F6 | 	mov	local01, objptr
01174     4A 93 01 F6 | 	mov	objptr, local05
01178     DC 29 B2 FD | 	call	#_fatfs_cc_get_vfs
0117c     46 93 01 F6 | 	mov	objptr, local01
01180                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01180                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01180                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01180                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
01180                 | LR__0029
01180     A8 F0 03 F6 | 	mov	ptra, fp
01184     B3 00 A0 FD | 	call	#popregs_
01188                 | __vfs_open_sdcardx_ret
01188     2D 00 64 FD | 	ret
0118c                 | 
0118c                 | ___default_getc
0118c     03 4C 05 F6 | 	mov	COUNT_, #3
01190     A9 00 A0 FD | 	call	#pushregs_
01194     3A 8D 02 F6 | 	mov	local01, arg01
01198     46 8F 02 FB | 	rdlong	local02, local01
0119c     08 8E 06 F1 | 	add	local02, #8
011a0     47 91 02 FB | 	rdlong	local03, local02
011a4     02 90 CE F7 | 	test	local03, #2 wz
011a8     46 75 02 56 |  if_ne	mov	arg01, local01
011ac     6C 01 B0 5D |  if_ne	call	#___default_flush
011b0     47 91 02 FB | 	rdlong	local03, local02
011b4     01 90 46 F5 | 	or	local03, #1
011b8     47 91 62 FC | 	wrlong	local03, local02
011bc     08 8E 86 F1 | 	sub	local02, #8
011c0     47 91 0A FB | 	rdlong	local03, local02 wz
011c4     0C 00 90 5D |  if_ne	jmp	#LR__0030
011c8     46 75 02 F6 | 	mov	arg01, local01
011cc     14 67 B1 FD | 	call	#___default_filbuf
011d0     1A 91 02 F6 | 	mov	local03, result1
011d4                 | LR__0030
011d4     01 90 56 F2 | 	cmps	local03, #1 wc
011d8                 | '         return -1;
011d8     01 34 66 C6 |  if_b	neg	result1, #1
011dc     1C 00 90 CD |  if_b	jmp	#LR__0031
011e0     01 90 86 F1 | 	sub	local03, #1
011e4     47 91 62 FC | 	wrlong	local03, local02
011e8     04 8E 06 F1 | 	add	local02, #4
011ec     47 91 02 FB | 	rdlong	local03, local02
011f0     48 35 C2 FA | 	rdbyte	result1, local03
011f4     01 90 06 F1 | 	add	local03, #1
011f8     47 91 62 FC | 	wrlong	local03, local02
011fc                 | '     }
011fc                 | '     b->cnt = i-1;
011fc                 | '     ptr = b->ptr;
011fc                 | '     i = *ptr++;
011fc                 | '     b->ptr = ptr;
011fc                 | '     return i;
011fc                 | LR__0031
011fc     A8 F0 03 F6 | 	mov	ptra, fp
01200     B3 00 A0 FD | 	call	#popregs_
01204                 | ___default_getc_ret
01204     2D 00 64 FD | 	ret
01208                 | 
01208                 | ___default_putc
01208     04 4C 05 F6 | 	mov	COUNT_, #4
0120c     A9 00 A0 FD | 	call	#pushregs_
01210     3A 8D 02 F6 | 	mov	local01, arg01
01214     3B 8F 02 F6 | 	mov	local02, arg02
01218     47 91 02 FB | 	rdlong	local03, local02
0121c     08 90 06 F1 | 	add	local03, #8
01220     48 35 02 FB | 	rdlong	result1, local03
01224     01 34 CE F7 | 	test	result1, #1 wz
01228     47 75 02 56 |  if_ne	mov	arg01, local02
0122c     EC 00 B0 5D |  if_ne	call	#___default_flush
01230     48 75 02 FB | 	rdlong	arg01, local03
01234     02 74 46 F5 | 	or	arg01, #2
01238     48 75 62 FC | 	wrlong	arg01, local03
0123c     08 90 86 F1 | 	sub	local03, #8
01240     48 75 02 FB | 	rdlong	arg01, local03
01244     3A 93 02 F6 | 	mov	local04, arg01
01248     0C 90 06 F1 | 	add	local03, #12
0124c     48 93 02 F1 | 	add	local04, local03
01250     49 8D 42 FC | 	wrbyte	local01, local04
01254     46 8D E2 F8 | 	getbyte	local01, local01, #0
01258     01 74 06 F1 | 	add	arg01, #1
0125c     0C 90 86 F1 | 	sub	local03, #12
01260     48 75 62 FC | 	wrlong	arg01, local03
01264     02 00 00 FF 
01268     00 74 0E F2 | 	cmp	arg01, ##1024 wz
0126c     10 00 90 5D |  if_ne	jmp	#LR__0032
01270     47 75 02 F6 | 	mov	arg01, local02
01274     A4 00 B0 FD | 	call	#___default_flush
01278     00 34 0E F2 | 	cmp	result1, #0 wz
0127c     01 8C 66 56 |  if_ne	neg	local01, #1
01280                 | LR__0032
01280                 | '             c = -1;
01280                 | '         }
01280                 | '     }
01280                 | '     return c;
01280     46 35 02 F6 | 	mov	result1, local01
01284     A8 F0 03 F6 | 	mov	ptra, fp
01288     B3 00 A0 FD | 	call	#popregs_
0128c                 | ___default_putc_ret
0128c     2D 00 64 FD | 	ret
01290                 | 
01290                 | ___default_putc_terminal
01290     04 4C 05 F6 | 	mov	COUNT_, #4
01294     A9 00 A0 FD | 	call	#pushregs_
01298     3A 8D 02 F6 | 	mov	local01, arg01
0129c     3B 8F 02 F6 | 	mov	local02, arg02
012a0     47 91 02 FB | 	rdlong	local03, local02
012a4     08 90 06 F1 | 	add	local03, #8
012a8     48 35 02 FB | 	rdlong	result1, local03
012ac     01 34 CE F7 | 	test	result1, #1 wz
012b0     47 75 02 56 |  if_ne	mov	arg01, local02
012b4     64 00 B0 5D |  if_ne	call	#___default_flush
012b8     48 75 02 FB | 	rdlong	arg01, local03
012bc     02 74 46 F5 | 	or	arg01, #2
012c0     48 75 62 FC | 	wrlong	arg01, local03
012c4     08 90 86 F1 | 	sub	local03, #8
012c8     48 75 02 FB | 	rdlong	arg01, local03
012cc     3A 93 02 F6 | 	mov	local04, arg01
012d0     0C 90 06 F1 | 	add	local03, #12
012d4     48 93 02 F1 | 	add	local04, local03
012d8     49 8D 42 FC | 	wrbyte	local01, local04
012dc     46 8D E2 F8 | 	getbyte	local01, local01, #0
012e0     0C 90 86 F1 | 	sub	local03, #12
012e4     01 74 06 F1 | 	add	arg01, #1
012e8     48 75 62 FC | 	wrlong	arg01, local03
012ec     0A 8C 0E F2 | 	cmp	local01, #10 wz
012f0     02 00 00 5F 
012f4     00 74 0E 52 |  if_ne	cmp	arg01, ##1024 wz
012f8     10 00 90 5D |  if_ne	jmp	#LR__0033
012fc     47 75 02 F6 | 	mov	arg01, local02
01300     18 00 B0 FD | 	call	#___default_flush
01304     00 34 0E F2 | 	cmp	result1, #0 wz
01308     01 8C 66 56 |  if_ne	neg	local01, #1
0130c                 | LR__0033
0130c                 | '             c = -1;
0130c                 | '         }
0130c                 | '     }
0130c                 | '     return c;
0130c     46 35 02 F6 | 	mov	result1, local01
01310     A8 F0 03 F6 | 	mov	ptra, fp
01314     B3 00 A0 FD | 	call	#popregs_
01318                 | ___default_putc_terminal_ret
01318     2D 00 64 FD | 	ret
0131c                 | 
0131c                 | ___default_flush
0131c     0D 4C 05 F6 | 	mov	COUNT_, #13
01320     A9 00 A0 FD | 	call	#pushregs_
01324     3A 8D 02 F6 | 	mov	local01, arg01
01328     46 8F 02 FB | 	rdlong	local02, local01
0132c     47 91 02 FB | 	rdlong	local03, local02
01330     08 8E 06 F1 | 	add	local02, #8
01334     47 93 02 FB | 	rdlong	local04, local02
01338     08 8E 86 F1 | 	sub	local02, #8
0133c     02 92 CE F7 | 	test	local04, #2 wz
01340     B8 00 90 AD |  if_e	jmp	#LR__0036
01344     01 90 56 F2 | 	cmps	local03, #1 wc
01348     24 01 90 CD |  if_b	jmp	#LR__0038
0134c     08 8C 06 F1 | 	add	local01, #8
01350     46 93 02 FB | 	rdlong	local04, local01
01354     08 8C 86 F1 | 	sub	local01, #8
01358     40 92 CE F7 | 	test	local04, #64 wz
0135c     5C 00 90 AD |  if_e	jmp	#LR__0035
01360     08 8C 06 F1 | 	add	local01, #8
01364     46 93 02 FB | 	rdlong	local04, local01
01368     08 8C 86 F1 | 	sub	local01, #8
0136c     80 92 CE F7 | 	test	local04, #128 wz
01370     48 00 90 AD |  if_e	jmp	#LR__0034
01374     2C 8C 06 F1 | 	add	local01, #44
01378     46 93 02 FB | 	rdlong	local04, local01
0137c     2C 8C 86 F1 | 	sub	local01, #44
01380     49 95 02 FB | 	rdlong	local05, local04
01384     04 92 06 F1 | 	add	local04, #4
01388     49 93 02 FB | 	rdlong	local04, local04
0138c     46 75 02 F6 | 	mov	arg01, local01
01390     00 76 06 F6 | 	mov	arg02, #0
01394     02 78 06 F6 | 	mov	arg03, #2
01398     C9 96 02 F6 | 	mov	local06, objptr
0139c     4A 93 01 F6 | 	mov	objptr, local05
013a0     2D 92 62 FD | 	call	local04
013a4     4B 93 01 F6 | 	mov	objptr, local06
013a8     08 8C 06 F1 | 	add	local01, #8
013ac     46 93 02 FB | 	rdlong	local04, local01
013b0     80 92 26 F5 | 	andn	local04, #128
013b4     46 93 62 FC | 	wrlong	local04, local01
013b8     08 8C 86 F1 | 	sub	local01, #8
013bc                 | LR__0034
013bc                 | LR__0035
013bc     14 8C 06 F1 | 	add	local01, #20
013c0     46 93 02 FB | 	rdlong	local04, local01
013c4     14 8C 86 F1 | 	sub	local01, #20
013c8     49 95 02 FB | 	rdlong	local05, local04
013cc     04 92 06 F1 | 	add	local04, #4
013d0     49 99 02 FB | 	rdlong	local07, local04
013d4     0C 8E 06 F1 | 	add	local02, #12
013d8     47 77 02 F6 | 	mov	arg02, local02
013dc     0C 8E 86 F1 | 	sub	local02, #12
013e0     46 75 02 F6 | 	mov	arg01, local01
013e4     48 79 02 F6 | 	mov	arg03, local03
013e8     C9 96 02 F6 | 	mov	local06, objptr
013ec     4A 93 01 F6 | 	mov	objptr, local05
013f0     2D 98 62 FD | 	call	local07
013f4     4B 93 01 F6 | 	mov	objptr, local06
013f8     74 00 90 FD | 	jmp	#LR__0038
013fc                 | LR__0036
013fc     08 8E 06 F1 | 	add	local02, #8
01400     47 93 02 FB | 	rdlong	local04, local02
01404     08 8E 86 F1 | 	sub	local02, #8
01408     01 92 CE F7 | 	test	local04, #1 wz
0140c     60 00 90 AD |  if_e	jmp	#LR__0037
01410     00 90 0E F2 | 	cmp	local03, #0 wz
01414     58 00 90 AD |  if_e	jmp	#LR__0037
01418     2C 8C 06 F1 | 	add	local01, #44
0141c     46 9B 02 FB | 	rdlong	local08, local01
01420     2C 8C 86 F1 | 	sub	local01, #44
01424     4D 93 02 F6 | 	mov	local04, local08
01428     49 95 02 FB | 	rdlong	local05, local04
0142c     04 92 06 F1 | 	add	local04, #4
01430     49 9D 02 FB | 	rdlong	local09, local04
01434     4E 99 02 F6 | 	mov	local07, local09
01438     46 9F 02 F6 | 	mov	local10, local01
0143c     48 A1 62 F6 | 	neg	local11, local03
01440     01 A2 06 F6 | 	mov	local12, #1
01444     4F 75 02 F6 | 	mov	arg01, local10
01448     50 77 02 F6 | 	mov	arg02, local11
0144c     01 78 06 F6 | 	mov	arg03, #1
01450     C9 96 02 F6 | 	mov	local06, objptr
01454     4A 93 01 F6 | 	mov	objptr, local05
01458     2D 98 62 FD | 	call	local07
0145c     4B 93 01 F6 | 	mov	objptr, local06
01460     1A 93 02 F6 | 	mov	local04, result1
01464     49 A5 02 F6 | 	mov	local13, local04
01468     00 A4 56 F2 | 	cmps	local13, #0 wc
0146c     48 A5 02 36 |  if_ae	mov	local13, local03
01470                 | LR__0037
01470                 | LR__0038
01470     47 01 68 FC | 	wrlong	#0, local02
01474     04 8E 06 F1 | 	add	local02, #4
01478     47 01 68 FC | 	wrlong	#0, local02
0147c     04 8E 06 F1 | 	add	local02, #4
01480     47 01 68 FC | 	wrlong	#0, local02
01484                 | '     }
01484                 | '     b->cnt = 0;
01484                 | '     b->ptr = 0;
01484                 | '     b->flags = 0;
01484                 | '     return 0;
01484     00 34 06 F6 | 	mov	result1, #0
01488     A8 F0 03 F6 | 	mov	ptra, fp
0148c     B3 00 A0 FD | 	call	#popregs_
01490                 | ___default_flush_ret
01490     2D 00 64 FD | 	ret
01494                 | 
01494                 | _open
01494     05 4C 05 F6 | 	mov	COUNT_, #5
01498     A9 00 A0 FD | 	call	#pushregs_
0149c     3A 8D 02 F6 | 	mov	local01, arg01
014a0     3B 8F 02 F6 | 	mov	local02, arg02
014a4     3C 91 02 F6 | 	mov	local03, arg03
014a8     AA 00 00 FF 
014ac     70 D7 05 F1 | 	add	ptr__dat__, ##87408
014b0     EB 92 02 F6 | 	mov	local04, ptr__dat__
014b4                 | ' 
014b4                 | '     for (fd = 0; fd <  10 ; fd++) {
014b4     00 94 06 F6 | 	mov	local05, #0
014b8     AA 00 00 FF 
014bc     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
014c0     68 EB 9F FE | 	loc	pa,	#(@LR__0040-@LR__0039)
014c4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
014c8                 | LR__0039
014c8     0A 94 56 F2 | 	cmps	local05, #10 wc
014cc     24 00 90 3D |  if_ae	jmp	#LR__0041
014d0     4A 35 02 F6 | 	mov	result1, local05
014d4     01 34 66 F0 | 	shl	result1, #1
014d8     4A 35 02 F1 | 	add	result1, local05
014dc     04 34 66 F0 | 	shl	result1, #4
014e0     49 35 02 F1 | 	add	result1, local04
014e4     08 34 06 F1 | 	add	result1, #8
014e8     1A 35 0A FB | 	rdlong	result1, result1 wz
014ec     01 94 06 51 |  if_ne	add	local05, #1
014f0     D4 FF 9F 5D |  if_ne	jmp	#LR__0039
014f4                 | LR__0040
014f4                 | LR__0041
014f4     0A 94 0E F2 | 	cmp	local05, #10 wz
014f8                 | '         return _seterror( 11 );
014f8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
014fc     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
01500     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01504     01 34 66 A6 |  if_e	neg	result1, #1
01508     2C 00 90 AD |  if_e	jmp	#LR__0042
0150c     4A 75 02 F6 | 	mov	arg01, local05
01510     01 74 66 F0 | 	shl	arg01, #1
01514     4A 75 02 F1 | 	add	arg01, local05
01518     04 74 66 F0 | 	shl	arg01, #4
0151c     49 75 02 F1 | 	add	arg01, local04
01520     46 77 02 F6 | 	mov	arg02, local01
01524     47 79 02 F6 | 	mov	arg03, local02
01528     48 7B 02 F6 | 	mov	arg04, local03
0152c     98 F5 BF FD | 	call	#__openraw
01530     00 34 4E F2 | 	cmps	result1, #0 wz
01534     4A 35 02 A6 |  if_e	mov	result1, local05
01538                 | '         r = fd;
01538                 | '     }
01538                 | '     return r;
01538                 | LR__0042
01538     A8 F0 03 F6 | 	mov	ptra, fp
0153c     B3 00 A0 FD | 	call	#popregs_
01540                 | _open_ret
01540     2D 00 64 FD | 	ret
01544                 | 
01544                 | _write
01544     01 4C 05 F6 | 	mov	COUNT_, #1
01548     A9 00 A0 FD | 	call	#pushregs_
0154c     3A 8D 02 F6 | 	mov	local01, arg01
01550     0A 8C 16 F2 | 	cmp	local01, #10 wc
01554                 | '         return _seterror( 5 );
01554     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
01558     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
0155c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
01560     01 34 66 36 |  if_ae	neg	result1, #1
01564     28 00 90 3D |  if_ae	jmp	#LR__0043
01568     46 75 02 F6 | 	mov	arg01, local01
0156c     01 74 66 F0 | 	shl	arg01, #1
01570     46 75 02 F1 | 	add	arg01, local01
01574     04 74 66 F0 | 	shl	arg01, #4
01578     AA 00 00 FF 
0157c     70 D7 05 F1 | 	add	ptr__dat__, ##87408
01580     EB 74 02 F1 | 	add	arg01, ptr__dat__
01584                 | '     }
01584                 | '     f = &__filetab[fd];
01584                 | '     return _vfswrite(f, vbuf, count);
01584     AA 00 00 FF 
01588     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
0158c     8C 15 B1 FD | 	call	#__vfswrite
01590                 | LR__0043
01590     A8 F0 03 F6 | 	mov	ptra, fp
01594     B3 00 A0 FD | 	call	#popregs_
01598                 | _write_ret
01598     2D 00 64 FD | 	ret
0159c                 | 
0159c                 | _read
0159c     01 4C 05 F6 | 	mov	COUNT_, #1
015a0     A9 00 A0 FD | 	call	#pushregs_
015a4     3A 8D 02 F6 | 	mov	local01, arg01
015a8     0A 8C 16 F2 | 	cmp	local01, #10 wc
015ac                 | '         return _seterror( 5 );
015ac     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
015b0     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
015b4     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
015b8     01 34 66 36 |  if_ae	neg	result1, #1
015bc     28 00 90 3D |  if_ae	jmp	#LR__0044
015c0     46 75 02 F6 | 	mov	arg01, local01
015c4     01 74 66 F0 | 	shl	arg01, #1
015c8     46 75 02 F1 | 	add	arg01, local01
015cc     04 74 66 F0 | 	shl	arg01, #4
015d0     AA 00 00 FF 
015d4     70 D7 05 F1 | 	add	ptr__dat__, ##87408
015d8     EB 74 02 F1 | 	add	arg01, ptr__dat__
015dc                 | '     }
015dc                 | '     f = &__filetab[fd];
015dc                 | '     return _vfsread(f, vbuf, count);
015dc     AA 00 00 FF 
015e0     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
015e4     D8 16 B1 FD | 	call	#__vfsread
015e8                 | LR__0044
015e8     A8 F0 03 F6 | 	mov	ptra, fp
015ec     B3 00 A0 FD | 	call	#popregs_
015f0                 | _read_ret
015f0     2D 00 64 FD | 	ret
015f4                 | 
015f4                 | _close
015f4     01 4C 05 F6 | 	mov	COUNT_, #1
015f8     A9 00 A0 FD | 	call	#pushregs_
015fc     3A 8D 02 F6 | 	mov	local01, arg01
01600     0A 8C 16 F2 | 	cmp	local01, #10 wc
01604                 | '         return _seterror( 5 );
01604     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
01608     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
0160c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
01610     01 34 66 36 |  if_ae	neg	result1, #1
01614     28 00 90 3D |  if_ae	jmp	#LR__0045
01618     46 75 02 F6 | 	mov	arg01, local01
0161c     01 74 66 F0 | 	shl	arg01, #1
01620     46 75 02 F1 | 	add	arg01, local01
01624     04 74 66 F0 | 	shl	arg01, #4
01628     AA 00 00 FF 
0162c     70 D7 05 F1 | 	add	ptr__dat__, ##87408
01630     EB 74 02 F1 | 	add	arg01, ptr__dat__
01634                 | '     }
01634                 | '     f = &__filetab[fd];
01634                 | '     return _closeraw(f);
01634     AA 00 00 FF 
01638     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
0163c     BC F9 BF FD | 	call	#__closeraw
01640                 | LR__0045
01640     A8 F0 03 F6 | 	mov	ptra, fp
01644     B3 00 A0 FD | 	call	#popregs_
01648                 | _close_ret
01648     2D 00 64 FD | 	ret
0164c                 | 
0164c                 | _lseek
0164c     06 4C 05 F6 | 	mov	COUNT_, #6
01650     A9 00 A0 FD | 	call	#pushregs_
01654     0A 74 16 F2 | 	cmp	arg01, #10 wc
01658                 | '         return _seterror( 5 );
01658     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
0165c     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
01660     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
01664     01 34 66 36 |  if_ae	neg	result1, #1
01668     C0 00 90 3D |  if_ae	jmp	#LR__0047
0166c     3A 8D 02 F6 | 	mov	local01, arg01
01670     01 8C 66 F0 | 	shl	local01, #1
01674     3A 8D 02 F1 | 	add	local01, arg01
01678     04 8C 66 F0 | 	shl	local01, #4
0167c     AA 00 00 FF 
01680     70 D7 05 F1 | 	add	ptr__dat__, ##87408
01684     EB 8C 02 F1 | 	add	local01, ptr__dat__
01688     2C 8C 06 F1 | 	add	local01, #44
0168c     46 75 0A FB | 	rdlong	arg01, local01 wz
01690     2C 8C 86 F1 | 	sub	local01, #44
01694     AA 00 00 FF 
01698     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
0169c                 | '         return _seterror( 16 );
0169c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
016a0     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
016a4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
016a8     01 34 66 A6 |  if_e	neg	result1, #1
016ac     7C 00 90 AD |  if_e	jmp	#LR__0047
016b0     08 8C 06 F1 | 	add	local01, #8
016b4     46 8F 02 FB | 	rdlong	local02, local01
016b8     08 8C 86 F1 | 	sub	local01, #8
016bc     40 8E CE F7 | 	test	local02, #64 wz
016c0     08 8C 06 51 |  if_ne	add	local01, #8
016c4     46 8F 02 5B |  if_ne	rdlong	local02, local01
016c8     80 8E 46 55 |  if_ne	or	local02, #128
016cc     46 8F 62 5C |  if_ne	wrlong	local02, local01
016d0     08 8C 86 51 |  if_ne	sub	local01, #8
016d4     2C 8C 06 F1 | 	add	local01, #44
016d8     46 8F 02 FB | 	rdlong	local02, local01
016dc     2C 8C 86 F1 | 	sub	local01, #44
016e0     47 91 02 FB | 	rdlong	local03, local02
016e4     04 8E 06 F1 | 	add	local02, #4
016e8     47 93 02 FB | 	rdlong	local04, local02
016ec     46 75 02 F6 | 	mov	arg01, local01
016f0     C9 94 02 F6 | 	mov	local05, objptr
016f4     48 93 01 F6 | 	mov	objptr, local03
016f8     2D 92 62 FD | 	call	local04
016fc     4A 93 01 F6 | 	mov	objptr, local05
01700     1A 97 02 F6 | 	mov	local06, result1
01704     00 96 56 F2 | 	cmps	local06, #0 wc
01708     1C 00 90 3D |  if_ae	jmp	#LR__0046
0170c                 | '         return _seterror(-r);
0170c     4B 75 6A F6 | 	neg	arg01, local06 wz
01710     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01714     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01718     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0171c     01 34 66 56 |  if_ne	neg	result1, #1
01720     00 34 06 A6 |  if_e	mov	result1, #0
01724     04 00 90 FD | 	jmp	#LR__0047
01728                 | LR__0046
01728                 | '     }
01728                 | '     return r;
01728     4B 35 02 F6 | 	mov	result1, local06
0172c                 | LR__0047
0172c     A8 F0 03 F6 | 	mov	ptra, fp
01730     B3 00 A0 FD | 	call	#popregs_
01734                 | _lseek_ret
01734     2D 00 64 FD | 	ret
01738                 | 
01738                 | _ioctl
01738     04 4C 05 F6 | 	mov	COUNT_, #4
0173c     A9 00 A0 FD | 	call	#pushregs_
01740     70 04 B0 FD | 	call	#___getftab
01744     1A 8D 0A F6 | 	mov	local01, result1 wz
01748                 | '         return _seterror( 5 );
01748     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
0174c     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
01750     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01754     01 34 66 A6 |  if_e	neg	result1, #1
01758     54 00 90 AD |  if_e	jmp	#LR__0049
0175c     24 8C 06 F1 | 	add	local01, #36
01760     46 75 02 FB | 	rdlong	arg01, local01
01764     24 8C 86 F1 | 	sub	local01, #36
01768     3A 8F 02 FB | 	rdlong	local02, arg01
0176c     04 74 06 F1 | 	add	arg01, #4
01770     3A 91 02 FB | 	rdlong	local03, arg01
01774     46 75 02 F6 | 	mov	arg01, local01
01778     C9 92 02 F6 | 	mov	local04, objptr
0177c     47 93 01 F6 | 	mov	objptr, local02
01780     2D 90 62 FD | 	call	local03
01784     49 93 01 F6 | 	mov	objptr, local04
01788     1A 75 0A F6 | 	mov	arg01, result1 wz
0178c     1C 00 90 AD |  if_e	jmp	#LR__0048
01790                 | '         return _seterror(r);
01790     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01794     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01798     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0179c     00 74 0E F2 | 	cmp	arg01, #0 wz
017a0     01 34 66 56 |  if_ne	neg	result1, #1
017a4     00 34 06 A6 |  if_e	mov	result1, #0
017a8     04 00 90 FD | 	jmp	#LR__0049
017ac                 | LR__0048
017ac                 | '     }
017ac                 | '     return 0;
017ac     00 34 06 F6 | 	mov	result1, #0
017b0                 | LR__0049
017b0     A8 F0 03 F6 | 	mov	ptra, fp
017b4     B3 00 A0 FD | 	call	#popregs_
017b8                 | _ioctl_ret
017b8     2D 00 64 FD | 	ret
017bc                 | 
017bc                 | _access
017bc     06 4C 05 F6 | 	mov	COUNT_, #6
017c0     A9 00 A0 FD | 	call	#pushregs_
017c4     3C F0 07 F1 | 	add	ptra, #60
017c8     04 50 05 F1 | 	add	fp, #4
017cc     A8 74 62 FC | 	wrlong	arg01, fp
017d0     04 50 05 F1 | 	add	fp, #4
017d4     A8 76 62 FC | 	wrlong	arg02, fp
017d8     04 50 85 F1 | 	sub	fp, #4
017dc     A8 74 02 FB | 	rdlong	arg01, fp
017e0     08 50 05 F1 | 	add	fp, #8
017e4     A8 76 02 F6 | 	mov	arg02, fp
017e8     0C 50 85 F1 | 	sub	fp, #12
017ec     F0 11 B1 FD | 	call	#_stat
017f0     00 34 56 F2 | 	cmps	result1, #0 wc
017f4                 | ' 		return -1;
017f4     01 34 66 C6 |  if_b	neg	result1, #1
017f8     DC 00 90 CD |  if_b	jmp	#LR__0053
017fc     08 50 05 F1 | 	add	fp, #8
01800     A8 8C 0A FB | 	rdlong	local01, fp wz
01804     08 50 85 F1 | 	sub	fp, #8
01808                 | ' 		return 0;
01808     00 34 06 A6 |  if_e	mov	result1, #0
0180c     C8 00 90 AD |  if_e	jmp	#LR__0053
01810     1C 50 05 F1 | 	add	fp, #28
01814     A8 8C E2 FA | 	rdword	local01, fp
01818     1C 50 85 F1 | 	sub	fp, #28
0181c     0F 8C 4E F7 | 	zerox	local01, #15 wz
01820     2C 00 90 5D |  if_ne	jmp	#LR__0050
01824     14 50 05 F1 | 	add	fp, #20
01828     A8 8C 02 FB | 	rdlong	local01, fp
0182c     06 8C 46 F0 | 	shr	local01, #6
01830     0C 50 85 F1 | 	sub	fp, #12
01834     A8 76 02 FB | 	rdlong	arg02, fp
01838     3B 8D 02 F5 | 	and	local01, arg02
0183c     08 50 85 F1 | 	sub	fp, #8
01840     3B 8D 0A F2 | 	cmp	local01, arg02 wz
01844                 | ' 			return 0;
01844     00 34 06 A6 |  if_e	mov	result1, #0
01848     8C 00 90 AD |  if_e	jmp	#LR__0053
0184c                 | ' 			goto accdn;
0184c     74 00 90 FD | 	jmp	#LR__0052
01850                 | LR__0050
01850     1E 50 05 F1 | 	add	fp, #30
01854     A8 8C E2 FA | 	rdword	local01, fp
01858     1E 50 85 F1 | 	sub	fp, #30
0185c     0F 8C 4E F7 | 	zerox	local01, #15 wz
01860     2C 00 90 5D |  if_ne	jmp	#LR__0051
01864     14 50 05 F1 | 	add	fp, #20
01868     A8 8C 02 FB | 	rdlong	local01, fp
0186c     03 8C 46 F0 | 	shr	local01, #3
01870     0C 50 85 F1 | 	sub	fp, #12
01874     A8 76 02 FB | 	rdlong	arg02, fp
01878     3B 8D 02 F5 | 	and	local01, arg02
0187c     08 50 85 F1 | 	sub	fp, #8
01880     3B 8D 0A F2 | 	cmp	local01, arg02 wz
01884                 | ' 			return 0;
01884     00 34 06 A6 |  if_e	mov	result1, #0
01888     4C 00 90 AD |  if_e	jmp	#LR__0053
0188c                 | ' 			goto accdn;
0188c     34 00 90 FD | 	jmp	#LR__0052
01890                 | LR__0051
01890     14 50 05 F1 | 	add	fp, #20
01894     A8 8E 02 FB | 	rdlong	local02, fp
01898     47 8D 02 F6 | 	mov	local01, local02
0189c     0C 50 85 F1 | 	sub	fp, #12
018a0     A8 90 02 FB | 	rdlong	local03, fp
018a4     48 93 02 F6 | 	mov	local04, local03
018a8     49 8D 02 F5 | 	and	local01, local04
018ac     48 95 02 F6 | 	mov	local05, local03
018b0     08 50 85 F1 | 	sub	fp, #8
018b4     4A 97 02 F6 | 	mov	local06, local05
018b8     4B 8D 0A F2 | 	cmp	local01, local06 wz
018bc                 | ' 		return 0;
018bc     00 34 06 A6 |  if_e	mov	result1, #0
018c0     14 00 90 AD |  if_e	jmp	#LR__0053
018c4                 | LR__0052
018c4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
018c8     D1 34 02 F6 | 	mov	result1, ptr___system__dat__
018cc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
018d0     1A 0D 68 FC | 	wrlong	#6, result1
018d4                 | ' accdn:
018d4                 | ' 	(*(_geterrnoptr()))  =  6 ; return -1;
018d4     01 34 66 F6 | 	neg	result1, #1
018d8                 | LR__0053
018d8     A8 F0 03 F6 | 	mov	ptra, fp
018dc     B3 00 A0 FD | 	call	#popregs_
018e0                 | _access_ret
018e0     2D 00 64 FD | 	ret
018e4                 | 
018e4                 | _isatty
018e4     00 4C 05 F6 | 	mov	COUNT_, #0
018e8     A9 00 A0 FD | 	call	#pushregs_
018ec     0C F0 07 F1 | 	add	ptra, #12
018f0     04 50 05 F1 | 	add	fp, #4
018f4     A8 74 62 FC | 	wrlong	arg01, fp
018f8     04 50 05 F1 | 	add	fp, #4
018fc     A8 78 02 F6 | 	mov	arg03, fp
01900     08 50 85 F1 | 	sub	fp, #8
01904     00 77 06 F6 | 	mov	arg02, #256
01908     2C FE BF FD | 	call	#_ioctl
0190c     00 34 0E F2 | 	cmp	result1, #0 wz
01910                 | '         return 1;
01910     01 34 06 A6 |  if_e	mov	result1, #1
01914                 | '     }
01914                 | '     return 0;
01914     00 34 06 56 |  if_ne	mov	result1, #0
01918     A8 F0 03 F6 | 	mov	ptra, fp
0191c     B3 00 A0 FD | 	call	#popregs_
01920                 | _isatty_ret
01920     2D 00 64 FD | 	ret
01924                 | 
01924                 | _chdir
01924     00 4C 05 F6 | 	mov	COUNT_, #0
01928     A9 00 A0 FD | 	call	#pushregs_
0192c     40 F0 07 F1 | 	add	ptra, #64
01930     04 50 05 F1 | 	add	fp, #4
01934     A8 74 62 FC | 	wrlong	arg01, fp
01938     04 50 05 F1 | 	add	fp, #4
0193c     A8 76 02 F6 | 	mov	arg02, fp
01940     08 50 85 F1 | 	sub	fp, #8
01944     98 10 B1 FD | 	call	#_stat
01948     3C 50 05 F1 | 	add	fp, #60
0194c     A8 34 62 FC | 	wrlong	result1, fp
01950     3C 50 85 F1 | 	sub	fp, #60
01954     00 34 0E F2 | 	cmp	result1, #0 wz
01958                 | ' #line 294 "C:/flexprop/include/libc/unix/_mount.c"
01958                 | '         return r;
01958     3C 50 05 51 |  if_ne	add	fp, #60
0195c     A8 34 02 5B |  if_ne	rdlong	result1, fp
01960     3C 50 85 51 |  if_ne	sub	fp, #60
01964     D4 00 90 5D |  if_ne	jmp	#LR__0056
01968     10 50 05 F1 | 	add	fp, #16
0196c     A8 74 02 FB | 	rdlong	arg01, fp
01970     10 50 85 F1 | 	sub	fp, #16
01974     78 00 00 FF 
01978     00 74 06 F5 | 	and	arg01, ##61440
0197c     08 00 00 FF 
01980     00 74 0E F2 | 	cmp	arg01, ##4096 wz
01984                 | ' #line 300 "C:/flexprop/include/libc/unix/_mount.c"
01984                 | '         return _seterror( 13 );
01984     18 A2 05 51 |  if_ne	add	ptr___system__dat__, #24
01988     D1 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
0198c     18 A2 85 51 |  if_ne	sub	ptr___system__dat__, #24
01990     01 34 66 56 |  if_ne	neg	result1, #1
01994     A4 00 90 5D |  if_ne	jmp	#LR__0056
01998     04 50 05 F1 | 	add	fp, #4
0199c     A8 78 02 FB | 	rdlong	arg03, fp
019a0     04 50 85 F1 | 	sub	fp, #4
019a4     3C 79 C2 FA | 	rdbyte	arg03, arg03
019a8     2F 78 0E F2 | 	cmp	arg03, #47 wz
019ac     2C 00 90 5D |  if_ne	jmp	#LR__0054
019b0     15 01 00 FF 
019b4     F4 D7 05 F1 | 	add	ptr__dat__, ##142324
019b8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
019bc     15 01 00 FF 
019c0     F4 D7 85 F1 | 	sub	ptr__dat__, ##142324
019c4     04 50 05 F1 | 	add	fp, #4
019c8     A8 76 02 FB | 	rdlong	arg02, fp
019cc     04 50 85 F1 | 	sub	fp, #4
019d0     00 79 06 F6 | 	mov	arg03, #256
019d4     A4 44 B0 FD | 	call	#_strncpy
019d8     5C 00 90 FD | 	jmp	#LR__0055
019dc                 | LR__0054
019dc                 | '     return tmpname;
019dc     16 01 00 FF 
019e0     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
019e4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
019e8     38 50 05 F1 | 	add	fp, #56
019ec     A8 74 62 FC | 	wrlong	arg01, fp
019f0     38 50 85 F1 | 	sub	fp, #56
019f4     00 D7 85 F1 | 	sub	ptr__dat__, #256
019f8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
019fc     15 01 00 FF 
01a00     F4 D7 85 F1 | 	sub	ptr__dat__, ##142324
01a04     00 79 06 F6 | 	mov	arg03, #256
01a08     70 44 B0 FD | 	call	#_strncpy
01a0c     38 50 05 F1 | 	add	fp, #56
01a10     A8 74 02 FB | 	rdlong	arg01, fp
01a14     34 50 85 F1 | 	sub	fp, #52
01a18     A8 76 02 FB | 	rdlong	arg02, fp
01a1c     04 50 85 F1 | 	sub	fp, #4
01a20     15 01 00 FF 
01a24     F4 D7 05 F1 | 	add	ptr__dat__, ##142324
01a28     EB 78 02 F6 | 	mov	arg03, ptr__dat__
01a2c     15 01 00 FF 
01a30     F4 D7 85 F1 | 	sub	ptr__dat__, ##142324
01a34     20 60 B1 FD | 	call	#___getvfsforfile
01a38                 | LR__0055
01a38                 | '         tmp = __getfilebuffer();
01a38                 | '         strncpy(tmp, curdir,  (256) );
01a38                 | '         __getvfsforfile(tmp, path, curdir);
01a38                 | '     }
01a38                 | '     return 0;
01a38     00 34 06 F6 | 	mov	result1, #0
01a3c                 | LR__0056
01a3c     A8 F0 03 F6 | 	mov	ptra, fp
01a40     B3 00 A0 FD | 	call	#popregs_
01a44                 | _chdir_ret
01a44     2D 00 64 FD | 	ret
01a48                 | 
01a48                 | _rmdir
01a48     06 4C 05 F6 | 	mov	COUNT_, #6
01a4c     A9 00 A0 FD | 	call	#pushregs_
01a50     3A 77 02 F6 | 	mov	arg02, arg01
01a54                 | '     return tmpname;
01a54     16 01 00 FF 
01a58     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
01a5c     EB 8C 02 F6 | 	mov	local01, ptr__dat__
01a60     46 75 02 F6 | 	mov	arg01, local01
01a64     00 78 06 F6 | 	mov	arg03, #0
01a68     16 01 00 FF 
01a6c     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
01a70     E4 5F B1 FD | 	call	#___getvfsforfile
01a74     1A 8F 0A F6 | 	mov	local02, result1 wz
01a78     3C 8E 06 51 |  if_ne	add	local02, #60
01a7c     47 75 02 5B |  if_ne	rdlong	arg01, local02
01a80     3C 8E 86 51 |  if_ne	sub	local02, #60
01a84     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
01a88                 | ' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
01a88                 | '         return _seterror( 16 );
01a88     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01a8c     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
01a90     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01a94     01 34 66 A6 |  if_e	neg	result1, #1
01a98     50 00 90 AD |  if_e	jmp	#LR__0058
01a9c     3C 8E 06 F1 | 	add	local02, #60
01aa0     47 75 02 FB | 	rdlong	arg01, local02
01aa4     3A 91 02 FB | 	rdlong	local03, arg01
01aa8     04 74 06 F1 | 	add	arg01, #4
01aac     3A 93 02 FB | 	rdlong	local04, arg01
01ab0     46 75 02 F6 | 	mov	arg01, local01
01ab4     C9 94 02 F6 | 	mov	local05, objptr
01ab8     48 93 01 F6 | 	mov	objptr, local03
01abc     2D 92 62 FD | 	call	local04
01ac0     4A 93 01 F6 | 	mov	objptr, local05
01ac4     1A 97 0A F6 | 	mov	local06, result1 wz
01ac8     1C 00 90 AD |  if_e	jmp	#LR__0057
01acc                 | '         return _seterror(-r);
01acc     4B 75 6A F6 | 	neg	arg01, local06 wz
01ad0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01ad4     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01ad8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01adc     01 34 66 56 |  if_ne	neg	result1, #1
01ae0     00 34 06 A6 |  if_e	mov	result1, #0
01ae4     04 00 90 FD | 	jmp	#LR__0058
01ae8                 | LR__0057
01ae8                 | '     }
01ae8                 | '     return r;
01ae8     4B 35 02 F6 | 	mov	result1, local06
01aec                 | LR__0058
01aec     A8 F0 03 F6 | 	mov	ptra, fp
01af0     B3 00 A0 FD | 	call	#popregs_
01af4                 | _rmdir_ret
01af4     2D 00 64 FD | 	ret
01af8                 | 
01af8                 | _mkdir
01af8     07 4C 05 F6 | 	mov	COUNT_, #7
01afc     A9 00 A0 FD | 	call	#pushregs_
01b00     3A 79 02 F6 | 	mov	arg03, arg01
01b04     3B 8D 02 F6 | 	mov	local01, arg02
01b08                 | '     return tmpname;
01b08     16 01 00 FF 
01b0c     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
01b10     EB 8E 02 F6 | 	mov	local02, ptr__dat__
01b14     47 75 02 F6 | 	mov	arg01, local02
01b18     3C 77 02 F6 | 	mov	arg02, arg03
01b1c     00 78 06 F6 | 	mov	arg03, #0
01b20     16 01 00 FF 
01b24     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
01b28     2C 5F B1 FD | 	call	#___getvfsforfile
01b2c     1A 91 0A F6 | 	mov	local03, result1 wz
01b30     20 90 06 51 |  if_ne	add	local03, #32
01b34     48 75 02 5B |  if_ne	rdlong	arg01, local03
01b38     20 90 86 51 |  if_ne	sub	local03, #32
01b3c     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
01b40                 | ' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
01b40                 | '         return _seterror( 16 );
01b40     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01b44     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
01b48     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01b4c     01 34 66 A6 |  if_e	neg	result1, #1
01b50     54 00 90 AD |  if_e	jmp	#LR__0060
01b54     38 90 06 F1 | 	add	local03, #56
01b58     48 77 02 FB | 	rdlong	arg02, local03
01b5c     3B 93 02 FB | 	rdlong	local04, arg02
01b60     04 76 06 F1 | 	add	arg02, #4
01b64     3B 95 02 FB | 	rdlong	local05, arg02
01b68     47 75 02 F6 | 	mov	arg01, local02
01b6c     46 77 02 F6 | 	mov	arg02, local01
01b70     C9 96 02 F6 | 	mov	local06, objptr
01b74     49 93 01 F6 | 	mov	objptr, local04
01b78     2D 94 62 FD | 	call	local05
01b7c     4B 93 01 F6 | 	mov	objptr, local06
01b80     1A 99 0A F6 | 	mov	local07, result1 wz
01b84     1C 00 90 AD |  if_e	jmp	#LR__0059
01b88                 | '         return _seterror(-r);
01b88     4C 75 6A F6 | 	neg	arg01, local07 wz
01b8c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01b90     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
01b94     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01b98     01 34 66 56 |  if_ne	neg	result1, #1
01b9c     00 34 06 A6 |  if_e	mov	result1, #0
01ba0     04 00 90 FD | 	jmp	#LR__0060
01ba4                 | LR__0059
01ba4                 | '     }
01ba4                 | '     return r;
01ba4     4C 35 02 F6 | 	mov	result1, local07
01ba8                 | LR__0060
01ba8     A8 F0 03 F6 | 	mov	ptra, fp
01bac     B3 00 A0 FD | 	call	#popregs_
01bb0                 | _mkdir_ret
01bb0     2D 00 64 FD | 	ret
01bb4                 | 
01bb4                 | ___getftab
01bb4     0A 74 16 F2 | 	cmp	arg01, #10 wc
01bb8                 | '         return 0;
01bb8     00 34 06 36 |  if_ae	mov	result1, #0
01bbc     24 00 90 3D |  if_ae	jmp	#___getftab_ret
01bc0                 | '     }
01bc0                 | '     return &__filetab[i];
01bc0     3A 35 02 F6 | 	mov	result1, arg01
01bc4     01 34 66 F0 | 	shl	result1, #1
01bc8     3A 35 02 F1 | 	add	result1, arg01
01bcc     04 34 66 F0 | 	shl	result1, #4
01bd0     AA 00 00 FF 
01bd4     70 D7 05 F1 | 	add	ptr__dat__, ##87408
01bd8     EB 34 02 F1 | 	add	result1, ptr__dat__
01bdc     AA 00 00 FF 
01be0     70 D7 85 F1 | 	sub	ptr__dat__, ##87408
01be4                 | ___getftab_ret
01be4     2D 00 64 FD | 	ret
01be8                 | 
01be8                 | _fgetc
01be8     03 4C 05 F6 | 	mov	COUNT_, #3
01bec     A9 00 A0 FD | 	call	#pushregs_
01bf0                 | '     return  (((f)->getcf)( (f) )) ;
01bf0     1C 74 06 F1 | 	add	arg01, #28
01bf4     3A 8D 02 FB | 	rdlong	local01, arg01
01bf8     1C 74 86 F1 | 	sub	arg01, #28
01bfc     46 8F 02 FB | 	rdlong	local02, local01
01c00     04 8C 06 F1 | 	add	local01, #4
01c04     46 8D 02 FB | 	rdlong	local01, local01
01c08     C9 90 02 F6 | 	mov	local03, objptr
01c0c     47 93 01 F6 | 	mov	objptr, local02
01c10     2D 8C 62 FD | 	call	local01
01c14     48 93 01 F6 | 	mov	objptr, local03
01c18     A8 F0 03 F6 | 	mov	ptra, fp
01c1c     B3 00 A0 FD | 	call	#popregs_
01c20                 | _fgetc_ret
01c20     2D 00 64 FD | 	ret
01c24                 | 
01c24                 | _sprintf
01c24     00 4C 05 F6 | 	mov	COUNT_, #0
01c28     A9 00 A0 FD | 	call	#pushregs_
01c2c     20 F0 07 F1 | 	add	ptra, #32
01c30     04 50 05 F1 | 	add	fp, #4
01c34     A8 74 62 FC | 	wrlong	arg01, fp
01c38     04 50 05 F1 | 	add	fp, #4
01c3c     A8 76 62 FC | 	wrlong	arg02, fp
01c40     04 50 05 F1 | 	add	fp, #4
01c44     A8 78 62 FC | 	wrlong	arg03, fp
01c48     08 50 85 F1 | 	sub	fp, #8
01c4c     A8 34 02 FB | 	rdlong	result1, fp
01c50     10 50 05 F1 | 	add	fp, #16
01c54     A8 34 62 FC | 	wrlong	result1, fp
01c58     10 50 85 F1 | 	sub	fp, #16
01c5c     A8 34 02 FB | 	rdlong	result1, fp
01c60     FF 7F 00 FF 
01c64     FF 35 06 F1 | 	add	result1, ##16777215
01c68     14 50 05 F1 | 	add	fp, #20
01c6c     A8 34 62 FC | 	wrlong	result1, fp
01c70     0C 50 85 F1 | 	sub	fp, #12
01c74     A8 34 02 FB | 	rdlong	result1, fp
01c78     A8 34 62 FC | 	wrlong	result1, fp
01c7c     08 50 05 F1 | 	add	fp, #8
01c80     A8 74 02 F6 | 	mov	arg01, fp
01c84     14 50 85 F1 | 	sub	fp, #20
01c88     CE 76 02 F6 | 	mov	arg02, ptr___struct___anon_9b5668f900000005_sputc_
01c8c     58 36 B2 FD | 	call	#__system___make_methodptr
01c90     1A 75 02 F6 | 	mov	arg01, result1
01c94     08 50 05 F1 | 	add	fp, #8
01c98     A8 76 02 FB | 	rdlong	arg02, fp
01c9c     04 50 05 F1 | 	add	fp, #4
01ca0     A8 78 02 F6 | 	mov	arg03, fp
01ca4     0C 50 85 F1 | 	sub	fp, #12
01ca8     50 64 B1 FD | 	call	#__dofmt
01cac     10 50 05 F1 | 	add	fp, #16
01cb0     A8 34 62 FC | 	wrlong	result1, fp
01cb4     04 50 05 F1 | 	add	fp, #4
01cb8     00 74 06 F6 | 	mov	arg01, #0
01cbc     C9 78 02 F6 | 	mov	arg03, objptr
01cc0     A8 92 01 F6 | 	mov	objptr, fp
01cc4     14 50 85 F1 | 	sub	fp, #20
01cc8     94 32 B2 FD | 	call	#__struct___anon_9b5668f900000005_sputc
01ccc     3C 93 01 F6 | 	mov	objptr, arg03
01cd0                 | '     r = _dofmt( &S.sputc, fmt, &args);
01cd0                 | '     ;
01cd0                 | '     S.sputc(0);
01cd0                 | '     return r;
01cd0     10 50 05 F1 | 	add	fp, #16
01cd4     A8 34 02 FB | 	rdlong	result1, fp
01cd8     10 50 85 F1 | 	sub	fp, #16
01cdc     A8 F0 03 F6 | 	mov	ptra, fp
01ce0     B3 00 A0 FD | 	call	#popregs_
01ce4                 | _sprintf_ret
01ce4     2D 00 64 FD | 	ret
01ce8                 | 
01ce8                 | _printf
01ce8     00 4C 05 F6 | 	mov	COUNT_, #0
01cec     A9 00 A0 FD | 	call	#pushregs_
01cf0     18 F0 07 F1 | 	add	ptra, #24
01cf4     04 50 05 F1 | 	add	fp, #4
01cf8     A8 74 62 FC | 	wrlong	arg01, fp
01cfc     04 50 05 F1 | 	add	fp, #4
01d00     A8 76 62 FC | 	wrlong	arg02, fp
01d04     08 50 85 F1 | 	sub	fp, #8
01d08     01 74 06 F6 | 	mov	arg01, #1
01d0c     A4 FE BF FD | 	call	#___getftab
01d10     10 50 05 F1 | 	add	fp, #16
01d14     A8 34 62 FC | 	wrlong	result1, fp
01d18     08 50 85 F1 | 	sub	fp, #8
01d1c     A8 34 02 FB | 	rdlong	result1, fp
01d20     A8 34 62 FC | 	wrlong	result1, fp
01d24     08 50 05 F1 | 	add	fp, #8
01d28     A8 74 02 F6 | 	mov	arg01, fp
01d2c     10 50 85 F1 | 	sub	fp, #16
01d30     CF 76 02 F6 | 	mov	arg02, ptr___struct___fmtfile_putchar_
01d34     B0 35 B2 FD | 	call	#__system___make_methodptr
01d38     1A 75 02 F6 | 	mov	arg01, result1
01d3c     04 50 05 F1 | 	add	fp, #4
01d40     A8 76 02 FB | 	rdlong	arg02, fp
01d44     04 50 05 F1 | 	add	fp, #4
01d48     A8 78 02 F6 | 	mov	arg03, fp
01d4c     08 50 85 F1 | 	sub	fp, #8
01d50     A8 63 B1 FD | 	call	#__dofmt
01d54     0C 50 05 F1 | 	add	fp, #12
01d58     A8 34 62 FC | 	wrlong	result1, fp
01d5c                 | '     r = _dofmt( &ff.putchar, fmt, &args);
01d5c                 | '     ;
01d5c                 | '     return r;
01d5c     0C 50 85 F1 | 	sub	fp, #12
01d60     A8 F0 03 F6 | 	mov	ptra, fp
01d64     B3 00 A0 FD | 	call	#popregs_
01d68                 | _printf_ret
01d68     2D 00 64 FD | 	ret
01d6c                 | 
01d6c                 | _fprintf
01d6c     00 4C 05 F6 | 	mov	COUNT_, #0
01d70     A9 00 A0 FD | 	call	#pushregs_
01d74     1C F0 07 F1 | 	add	ptra, #28
01d78     04 50 05 F1 | 	add	fp, #4
01d7c     A8 74 62 FC | 	wrlong	arg01, fp
01d80     04 50 05 F1 | 	add	fp, #4
01d84     A8 76 62 FC | 	wrlong	arg02, fp
01d88     04 50 05 F1 | 	add	fp, #4
01d8c     A8 78 62 FC | 	wrlong	arg03, fp
01d90     08 50 85 F1 | 	sub	fp, #8
01d94     A8 34 02 FB | 	rdlong	result1, fp
01d98     10 50 05 F1 | 	add	fp, #16
01d9c     A8 34 62 FC | 	wrlong	result1, fp
01da0     08 50 85 F1 | 	sub	fp, #8
01da4     A8 34 02 FB | 	rdlong	result1, fp
01da8     A8 34 62 FC | 	wrlong	result1, fp
01dac     08 50 05 F1 | 	add	fp, #8
01db0     A8 74 02 F6 | 	mov	arg01, fp
01db4     14 50 85 F1 | 	sub	fp, #20
01db8     CF 76 02 F6 | 	mov	arg02, ptr___struct___fmtfile_putchar_
01dbc     28 35 B2 FD | 	call	#__system___make_methodptr
01dc0     1A 75 02 F6 | 	mov	arg01, result1
01dc4     08 50 05 F1 | 	add	fp, #8
01dc8     A8 76 02 FB | 	rdlong	arg02, fp
01dcc     04 50 05 F1 | 	add	fp, #4
01dd0     A8 78 02 F6 | 	mov	arg03, fp
01dd4     0C 50 85 F1 | 	sub	fp, #12
01dd8     20 63 B1 FD | 	call	#__dofmt
01ddc     10 50 05 F1 | 	add	fp, #16
01de0     A8 34 62 FC | 	wrlong	result1, fp
01de4                 | '     r = _dofmt( &ff.putchar, fmt, &args);
01de4                 | '     ;
01de4                 | '     return r;
01de4     10 50 85 F1 | 	sub	fp, #16
01de8     A8 F0 03 F6 | 	mov	ptra, fp
01dec     B3 00 A0 FD | 	call	#popregs_
01df0                 | _fprintf_ret
01df0     2D 00 64 FD | 	ret
01df4                 | 
01df4                 | _fopen
01df4     10 4C 05 F6 | 	mov	COUNT_, #16
01df8     A9 00 A0 FD | 	call	#pushregs_
01dfc     3A 8D 02 F6 | 	mov	local01, arg01
01e00     3B 8F 02 F6 | 	mov	local02, arg02
01e04     00 90 06 F6 | 	mov	local03, #0
01e08     00 92 06 F6 | 	mov	local04, #0
01e0c     00 94 06 F6 | 	mov	local05, #0
01e10     00 96 06 F6 | 	mov	local06, #0
01e14     00 98 06 F6 | 	mov	local07, #0
01e18     00 9A 06 F6 | 	mov	local08, #0
01e1c                 | '     vfs_file_t *ftab;
01e1c                 | ' 
01e1c                 | '     while ((c = *mode++) != 0) {
01e1c                 | LR__0061
01e1c     47 9D 02 F6 | 	mov	local09, local02
01e20     47 9F 02 F6 | 	mov	local10, local02
01e24     01 9E 06 F1 | 	add	local10, #1
01e28     4F 8F 02 F6 | 	mov	local02, local10
01e2c     4E A1 C2 FA | 	rdbyte	local11, local09
01e30     50 A3 0A F6 | 	mov	local12, local11 wz
01e34     A0 00 90 AD |  if_e	jmp	#LR__0068
01e38                 | '         switch (c) {
01e38     51 A5 02 F6 | 	mov	local13, local12
01e3c     72 A4 0E F2 | 	cmp	local13, #114 wz
01e40     24 00 90 AD |  if_e	jmp	#LR__0062
01e44     77 A4 0E F2 | 	cmp	local13, #119 wz
01e48     24 00 90 AD |  if_e	jmp	#LR__0063
01e4c     61 A4 0E F2 | 	cmp	local13, #97 wz
01e50     2C 00 90 AD |  if_e	jmp	#LR__0064
01e54     62 A4 0E F2 | 	cmp	local13, #98 wz
01e58     34 00 90 AD |  if_e	jmp	#LR__0065
01e5c     2B A4 0E F2 | 	cmp	local13, #43 wz
01e60     34 00 90 AD |  if_e	jmp	#LR__0066
01e64     5C 00 90 FD | 	jmp	#LR__0067
01e68                 | LR__0062
01e68     01 90 06 F6 | 	mov	local03, #1
01e6c                 | '             want_read = 1;
01e6c                 | '             break;
01e6c     AC FF 9F FD | 	jmp	#LR__0061
01e70                 | LR__0063
01e70     01 98 06 F6 | 	mov	local07, #1
01e74     01 9A 06 F6 | 	mov	local08, #1
01e78     01 92 06 F6 | 	mov	local04, #1
01e7c                 | '             want_create = 1;
01e7c                 | '             want_trunc = 1;
01e7c                 | '             want_write = 1;
01e7c                 | '             break;
01e7c     9C FF 9F FD | 	jmp	#LR__0061
01e80                 | LR__0064
01e80     01 92 06 F6 | 	mov	local04, #1
01e84     01 98 06 F6 | 	mov	local07, #1
01e88     01 94 06 F6 | 	mov	local05, #1
01e8c                 | '             want_write = 1;
01e8c                 | '             want_create = 1;
01e8c                 | '             want_append = 1;
01e8c                 | '             break;
01e8c     8C FF 9F FD | 	jmp	#LR__0061
01e90                 | LR__0065
01e90     01 96 06 F6 | 	mov	local06, #1
01e94                 | '             want_binary = 1;
01e94                 | '             break;
01e94     84 FF 9F FD | 	jmp	#LR__0061
01e98                 | LR__0066
01e98     00 90 0E F2 | 	cmp	local03, #0 wz
01e9c     01 92 06 56 |  if_ne	mov	local04, #1
01ea0     78 FF 9F 5D |  if_ne	jmp	#LR__0061
01ea4     00 92 0E F2 | 	cmp	local04, #0 wz
01ea8     01 90 06 56 |  if_ne	mov	local03, #1
01eac                 | '                 want_read = 1;
01eac                 | '                 break;
01eac     6C FF 9F 5D |  if_ne	jmp	#LR__0061
01eb0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01eb4     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
01eb8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01ebc                 | '                 _seterror( 10 );
01ebc                 | '                 return 0;
01ebc     00 34 06 F6 | 	mov	result1, #0
01ec0     B4 00 90 FD | 	jmp	#LR__0071
01ec4                 | '             }
01ec4                 | '             break;
01ec4                 | LR__0067
01ec4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
01ec8     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
01ecc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
01ed0                 | '             _seterror( 10 );
01ed0                 | '             return 0;
01ed0     00 34 06 F6 | 	mov	result1, #0
01ed4     A0 00 90 FD | 	jmp	#LR__0071
01ed8                 | LR__0068
01ed8     00 90 0E F2 | 	cmp	local03, #0 wz
01edc     14 00 90 AD |  if_e	jmp	#LR__0069
01ee0     00 92 0E F2 | 	cmp	local04, #0 wz
01ee4     02 A6 06 56 |  if_ne	mov	local14, #2
01ee8     24 00 90 5D |  if_ne	jmp	#LR__0070
01eec     00 A6 06 F6 | 	mov	local14, #0
01ef0     1C 00 90 FD | 	jmp	#LR__0070
01ef4                 | LR__0069
01ef4     00 92 0E F2 | 	cmp	local04, #0 wz
01ef8     01 A6 06 56 |  if_ne	mov	local14, #1
01efc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
01f00     D1 14 68 AC |  if_e	wrlong	#10, ptr___system__dat__
01f04     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
01f08                 | '         _seterror( 10 );
01f08                 | '         return 0;
01f08     00 34 06 A6 |  if_e	mov	result1, #0
01f0c     68 00 90 AD |  if_e	jmp	#LR__0071
01f10                 | LR__0070
01f10     00 94 0E F2 | 	cmp	local05, #0 wz
01f14     20 A6 46 55 |  if_ne	or	local14, #32
01f18     00 98 0E F2 | 	cmp	local07, #0 wz
01f1c     04 A6 46 55 |  if_ne	or	local14, #4
01f20     00 9A 0E F2 | 	cmp	local08, #0 wz
01f24     08 A6 46 55 |  if_ne	or	local14, #8
01f28     53 77 02 F6 | 	mov	arg02, local14
01f2c     46 75 02 F6 | 	mov	arg01, local01
01f30     B6 79 06 F6 | 	mov	arg03, #438
01f34     5C F5 BF FD | 	call	#_open
01f38     1A A9 02 F6 | 	mov	local15, result1
01f3c     00 A8 56 F2 | 	cmps	local15, #0 wc
01f40                 | ' #line 82 "C:/flexprop/include/libc/stdio/fopen.c"
01f40                 | '         return 0;
01f40     00 34 06 C6 |  if_b	mov	result1, #0
01f44     30 00 90 CD |  if_b	jmp	#LR__0071
01f48     54 75 02 F6 | 	mov	arg01, local15
01f4c     64 FC BF FD | 	call	#___getftab
01f50     1A AB 02 F6 | 	mov	local16, result1
01f54     54 75 02 F6 | 	mov	arg01, local15
01f58     88 F9 BF FD | 	call	#_isatty
01f5c     00 34 0E F2 | 	cmp	result1, #0 wz
01f60     08 AA 06 51 |  if_ne	add	local16, #8
01f64     55 A1 02 5B |  if_ne	rdlong	local11, local16
01f68     00 A1 46 55 |  if_ne	or	local11, #256
01f6c     55 A1 62 5C |  if_ne	wrlong	local11, local16
01f70     08 AA 86 51 |  if_ne	sub	local16, #8
01f74                 | '         ftab->state |=  (0x100) ;
01f74                 | '     }
01f74                 | '     return ftab;
01f74     55 35 02 F6 | 	mov	result1, local16
01f78                 | LR__0071
01f78     A8 F0 03 F6 | 	mov	ptra, fp
01f7c     B3 00 A0 FD | 	call	#popregs_
01f80                 | _fopen_ret
01f80     2D 00 64 FD | 	ret
01f84                 | 
01f84                 | _fflush
01f84     03 4C 05 F6 | 	mov	COUNT_, #3
01f88     A9 00 A0 FD | 	call	#pushregs_
01f8c     00 8C 06 F6 | 	mov	local01, #0
01f90     28 74 06 F1 | 	add	arg01, #40
01f94     3A 35 0A FB | 	rdlong	result1, arg01 wz
01f98     28 74 86 F1 | 	sub	arg01, #40
01f9c     2C 00 90 AD |  if_e	jmp	#LR__0072
01fa0     28 74 06 F1 | 	add	arg01, #40
01fa4     3A 8D 02 FB | 	rdlong	local01, arg01
01fa8     28 74 86 F1 | 	sub	arg01, #40
01fac     46 8F 02 FB | 	rdlong	local02, local01
01fb0     04 8C 06 F1 | 	add	local01, #4
01fb4     46 8D 02 FB | 	rdlong	local01, local01
01fb8     C9 90 02 F6 | 	mov	local03, objptr
01fbc     47 93 01 F6 | 	mov	objptr, local02
01fc0     2D 8C 62 FD | 	call	local01
01fc4     48 93 01 F6 | 	mov	objptr, local03
01fc8     1A 8D 02 F6 | 	mov	local01, result1
01fcc                 | LR__0072
01fcc                 | '         r = (*f->flush)(f);
01fcc                 | '     }
01fcc                 | '     return r;
01fcc     46 35 02 F6 | 	mov	result1, local01
01fd0     A8 F0 03 F6 | 	mov	ptra, fp
01fd4     B3 00 A0 FD | 	call	#popregs_
01fd8                 | _fflush_ret
01fd8     2D 00 64 FD | 	ret
01fdc                 | 
01fdc                 | _fread
01fdc     05 4C 05 F6 | 	mov	COUNT_, #5
01fe0     A9 00 A0 FD | 	call	#pushregs_
01fe4     3C 77 02 FD | 	qmul	arg02, arg03
01fe8     3A 8D 02 F6 | 	mov	local01, arg01
01fec     3D 8F 02 F6 | 	mov	local02, arg04
01ff0     00 90 06 F6 | 	mov	local03, #0
01ff4     08 8E 06 F1 | 	add	local02, #8
01ff8     47 35 02 FB | 	rdlong	result1, local02
01ffc     08 8E 86 F1 | 	sub	local02, #8
02000     00 35 CE F7 | 	test	result1, #256 wz
02004     18 92 62 FD | 	getqx	local04
02008     30 00 90 AD |  if_e	jmp	#LR__0075
0200c     46 95 02 F6 | 	mov	local05, local01
02010                 | '         while (size > 0) {
02010                 | LR__0073
02010     01 92 16 F2 | 	cmp	local04, #1 wc
02014     1C 00 90 CD |  if_b	jmp	#LR__0074
02018     47 75 02 F6 | 	mov	arg01, local02
0201c     C8 FB BF FD | 	call	#_fgetc
02020     00 34 56 F2 | 	cmps	result1, #0 wc
02024     4A 35 42 3C |  if_ae	wrbyte	result1, local05
02028     01 90 06 31 |  if_ae	add	local03, #1
0202c     01 94 06 31 |  if_ae	add	local05, #1
02030     DC FF 9F 3D |  if_ae	jmp	#LR__0073
02034                 | LR__0074
02034                 | '             *dst++ = c;
02034                 | '             r++;
02034                 | '         }
02034                 | '         return r;
02034     48 35 02 F6 | 	mov	result1, local03
02038     18 00 90 FD | 	jmp	#LR__0076
0203c                 | LR__0075
0203c     47 75 02 F6 | 	mov	arg01, local02
02040     40 FF BF FD | 	call	#_fflush
02044     46 77 02 F6 | 	mov	arg02, local01
02048     49 79 02 F6 | 	mov	arg03, local04
0204c     47 75 02 F6 | 	mov	arg01, local02
02050     6C 0C B1 FD | 	call	#__vfsread
02054                 | '     }
02054                 | '     fflush(f);
02054                 | '     r = _vfsread(f, ptr, size);
02054                 | ' #line 36 "C:/flexprop/include/libc/stdio/fwrite.c"
02054                 | '     return r;
02054                 | LR__0076
02054     A8 F0 03 F6 | 	mov	ptra, fp
02058     B3 00 A0 FD | 	call	#popregs_
0205c                 | _fread_ret
0205c     2D 00 64 FD | 	ret
02060                 | 
02060                 | _fseek
02060     04 4C 05 F6 | 	mov	COUNT_, #4
02064     A9 00 A0 FD | 	call	#pushregs_
02068     3A 8D 02 F6 | 	mov	local01, arg01
0206c     3B 8F 02 F6 | 	mov	local02, arg02
02070     3C 91 02 F6 | 	mov	local03, arg03
02074                 | ' {
02074                 | '     return (f -  __getftab(0) );
02074     46 93 02 F6 | 	mov	local04, local01
02078     00 74 06 F6 | 	mov	arg01, #0
0207c     34 FB BF FD | 	call	#___getftab
02080     1A 93 82 F1 | 	sub	local04, result1
02084     30 92 16 FD | 	qdiv	local04, #48
02088     46 75 02 F6 | 	mov	arg01, local01
0208c     18 92 62 FD | 	getqx	local04
02090     F0 FE BF FD | 	call	#_fflush
02094     49 75 02 F6 | 	mov	arg01, local04
02098     47 77 02 F6 | 	mov	arg02, local02
0209c     48 79 02 F6 | 	mov	arg03, local03
020a0     A8 F5 BF FD | 	call	#_lseek
020a4     FF FF 7F FF 
020a8     FF 35 0E F2 | 	cmp	result1, ##-1 wz
020ac     00 34 06 56 |  if_ne	mov	result1, #0
020b0                 | '         r = 0;
020b0                 | '     }
020b0                 | '     return r;
020b0     A8 F0 03 F6 | 	mov	ptra, fp
020b4     B3 00 A0 FD | 	call	#popregs_
020b8                 | _fseek_ret
020b8     2D 00 64 FD | 	ret
020bc                 | 
020bc                 | _ftell
020bc     02 4C 05 F6 | 	mov	COUNT_, #2
020c0     A9 00 A0 FD | 	call	#pushregs_
020c4     3A 8D 02 F6 | 	mov	local01, arg01
020c8                 | ' {
020c8                 | '     return (f -  __getftab(0) );
020c8     3A 8F 02 F6 | 	mov	local02, arg01
020cc     00 74 06 F6 | 	mov	arg01, #0
020d0     E0 FA BF FD | 	call	#___getftab
020d4     1A 8F 82 F1 | 	sub	local02, result1
020d8     30 8E 16 FD | 	qdiv	local02, #48
020dc     46 75 02 F6 | 	mov	arg01, local01
020e0     18 8E 62 FD | 	getqx	local02
020e4     9C FE BF FD | 	call	#_fflush
020e8     47 75 02 F6 | 	mov	arg01, local02
020ec     00 76 06 F6 | 	mov	arg02, #0
020f0     01 78 06 F6 | 	mov	arg03, #1
020f4     54 F5 BF FD | 	call	#_lseek
020f8                 | ' 
020f8                 | '     fflush(f);
020f8                 | '     r = lseek(fd, 0,  1 );
020f8                 | '     return r;
020f8     A8 F0 03 F6 | 	mov	ptra, fp
020fc     B3 00 A0 FD | 	call	#popregs_
02100                 | _ftell_ret
02100     2D 00 64 FD | 	ret
02104                 | 
02104                 | _atol
02104     04 4C 05 F6 | 	mov	COUNT_, #4
02108     A9 00 A0 FD | 	call	#pushregs_
0210c     3A 8D 02 F6 | 	mov	local01, arg01
02110     00 8E 06 F6 | 	mov	local02, #0
02114     00 90 06 F6 | 	mov	local03, #0
02118                 | '   while (isspace(*str)) str++;
02118     56 01 00 FF 
0211c     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
02120     F8 DE 9F FE | 	loc	pa,	#(@LR__0078-@LR__0077)
02124     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02128                 | LR__0077
02128     46 75 C2 FA | 	rdbyte	arg01, local01
0212c                 | ' {
0212c                 | '   return  (__ctype_get(c) & 0x10 ) ;
0212c     80 74 36 F3 | 	fle	arg01, #128 wc
02130                 | '     return __ctype[c];
02130     EB 74 02 F1 | 	add	arg01, ptr__dat__
02134     3A 35 C2 FA | 	rdbyte	result1, arg01
02138     10 34 CE F7 | 	test	result1, #16 wz
0213c     01 8C 06 51 |  if_ne	add	local01, #1
02140     E4 FF 9F 5D |  if_ne	jmp	#LR__0077
02144                 | LR__0078
02144     56 01 00 FF 
02148     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
0214c     46 93 C2 FA | 	rdbyte	local04, local01
02150     2D 92 0E F2 | 	cmp	local04, #45 wz
02154     01 90 06 A6 |  if_e	mov	local03, #1
02158     01 8C 06 A1 |  if_e	add	local01, #1
0215c     EC DE 9F FE | 	loc	pa,	#(@LR__0080-@LR__0079)
02160     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02164                 | '     {
02164                 | '       neg=1;
02164                 | '       str++;
02164                 | '     }
02164                 | '   while (isdigit(*str))
02164                 | LR__0079
02164     46 75 C2 FA | 	rdbyte	arg01, local01
02168                 | ' {
02168                 | '   return  (__ctype_get(c) & 0x02 ) ;
02168     80 74 36 F3 | 	fle	arg01, #128 wc
0216c                 | '     return __ctype[c];
0216c     56 01 00 FF 
02170     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
02174     EB 74 02 F1 | 	add	arg01, ptr__dat__
02178     3A 35 C2 FA | 	rdbyte	result1, arg01
0217c     56 01 00 FF 
02180     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
02184     02 34 CE F7 | 	test	result1, #2 wz
02188     24 00 90 AD |  if_e	jmp	#LR__0081
0218c     47 93 02 F6 | 	mov	local04, local02
02190     02 92 66 F0 | 	shl	local04, #2
02194     47 93 02 F1 | 	add	local04, local02
02198     01 92 66 F0 | 	shl	local04, #1
0219c     46 8F C2 FA | 	rdbyte	local02, local01
021a0     30 8E 86 F1 | 	sub	local02, #48
021a4     49 8F 02 F1 | 	add	local02, local04
021a8     01 8C 06 F1 | 	add	local01, #1
021ac     B4 FF 9F FD | 	jmp	#LR__0079
021b0                 | LR__0080
021b0                 | LR__0081
021b0     00 90 0E F2 | 	cmp	local03, #0 wz
021b4     47 8F 62 56 |  if_ne	neg	local02, local02
021b8                 | '     num = -num;
021b8                 | '   return num;
021b8     47 35 02 F6 | 	mov	result1, local02
021bc     A8 F0 03 F6 | 	mov	ptra, fp
021c0     B3 00 A0 FD | 	call	#popregs_
021c4                 | _atol_ret
021c4     2D 00 64 FD | 	ret
021c8                 | 
021c8                 | _mcp23017_begin
021c8     03 4C 05 F6 | 	mov	COUNT_, #3
021cc     A9 00 A0 FD | 	call	#pushregs_
021d0     3A 8D 02 F6 | 	mov	local01, arg01
021d4     3B 8F 02 F6 | 	mov	local02, arg02
021d8     3D 75 02 F6 | 	mov	arg01, arg04
021dc     3C 77 02 F6 | 	mov	arg02, arg03
021e0     64 78 06 F6 | 	mov	arg03, #100
021e4     01 7A 06 F6 | 	mov	arg04, #1
021e8     C9 90 02 F6 | 	mov	local03, objptr
021ec     46 93 01 F6 | 	mov	objptr, local01
021f0     B8 92 B1 FD | 	call	#_jm_i2c_spin2_setup
021f4     48 93 01 F6 | 	mov	objptr, local03
021f8     47 91 E2 F8 | 	getbyte	local03, local02, #0
021fc     20 34 06 F6 | 	mov	result1, #32
02200     48 35 42 F5 | 	or	result1, local03
02204     01 34 66 F0 | 	shl	result1, #1
02208     FE 34 06 F5 | 	and	result1, #254
0220c     0C 8C 06 F1 | 	add	local01, #12
02210     46 35 42 FC | 	wrbyte	result1, local01
02214     47 8F E2 F8 | 	getbyte	local02, local02, #0
02218     20 90 06 F6 | 	mov	local03, #32
0221c     47 91 42 F5 | 	or	local03, local02
02220     01 90 66 F0 | 	shl	local03, #1
02224     01 90 46 F5 | 	or	local03, #1
02228     01 8C 06 F1 | 	add	local01, #1
0222c     46 91 42 FC | 	wrbyte	local03, local01
02230     0D 8C 86 F1 | 	sub	local01, #13
02234     46 75 02 F6 | 	mov	arg01, local01
02238     00 76 06 F6 | 	mov	arg02, #0
0223c     0F 78 06 F6 | 	mov	arg03, #15
02240     5C 67 B1 FD | 	call	#_write_register_1531
02244     46 75 02 F6 | 	mov	arg01, local01
02248     01 76 06 F6 | 	mov	arg02, #1
0224c     FF 78 06 F6 | 	mov	arg03, #255
02250     4C 67 B1 FD | 	call	#_write_register_1531
02254     1A 91 E2 F8 | 	getbyte	local03, result1, #0
02258     1A 8F E2 F8 | 	getbyte	local02, result1, #0
0225c     47 91 02 F5 | 	and	local03, local02
02260     46 75 02 F6 | 	mov	arg01, local01
02264     00 76 06 F6 | 	mov	arg02, #0
02268     B4 66 B1 FD | 	call	#_read_register_1529
0226c     1A 8F E2 F8 | 	getbyte	local02, result1, #0
02270     0F 8E 0E F2 | 	cmp	local02, #15 wz
02274     18 00 90 5D |  if_ne	jmp	#LR__0082
02278     46 75 02 F6 | 	mov	arg01, local01
0227c     01 76 06 F6 | 	mov	arg02, #1
02280     9C 66 B1 FD | 	call	#_read_register_1529
02284     1A 35 E2 F8 | 	getbyte	result1, result1, #0
02288     FF 34 0E F2 | 	cmp	result1, #255 wz
0228c     24 00 90 AD |  if_e	jmp	#LR__0083
02290                 | LR__0082
02290     47 01 00 FF 
02294     C0 74 06 F6 | 	mov	arg01, ##@LR__1812
02298     48 91 E2 F8 | 	getbyte	local03, local03, #0
0229c     F8 77 02 F6 | 	mov	arg02, ptra
022a0     61 91 66 FC | 	wrlong	local03, ptra++
022a4     40 FA BF FD | 	call	#_printf
022a8     04 F0 87 F1 | 	sub	ptra, #4
022ac                 | '     {
022ac                 | '         printf("Error setting up MCP23017: ACK:%d\n",ack);
022ac                 | '         return  (0) ;
022ac     00 34 06 F6 | 	mov	result1, #0
022b0     04 00 90 FD | 	jmp	#LR__0084
022b4                 | LR__0083
022b4                 | '     }
022b4                 | '     return  (1) ;
022b4     01 34 06 F6 | 	mov	result1, #1
022b8                 | LR__0084
022b8     A8 F0 03 F6 | 	mov	ptra, fp
022bc     B3 00 A0 FD | 	call	#popregs_
022c0                 | _mcp23017_begin_ret
022c0     2D 00 64 FD | 	ret
022c4                 | 
022c4                 | _mcp_update_register
022c4     01 4C 05 F6 | 	mov	COUNT_, #1
022c8     A9 00 A0 FD | 	call	#pushregs_
022cc     3A 8D 02 F6 | 	mov	local01, arg01
022d0     12 76 06 F6 | 	mov	arg02, #18
022d4     48 66 B1 FD | 	call	#_read_register_1529
022d8     0E 8C 06 F1 | 	add	local01, #14
022dc     46 35 42 FC | 	wrbyte	result1, local01
022e0     0E 8C 86 F1 | 	sub	local01, #14
022e4     46 75 02 F6 | 	mov	arg01, local01
022e8     13 76 06 F6 | 	mov	arg02, #19
022ec     30 66 B1 FD | 	call	#_read_register_1529
022f0     0F 8C 06 F1 | 	add	local01, #15
022f4     46 35 42 FC | 	wrbyte	result1, local01
022f8     A8 F0 03 F6 | 	mov	ptra, fp
022fc     B3 00 A0 FD | 	call	#popregs_
02300                 | _mcp_update_register_ret
02300     2D 00 64 FD | 	ret
02304                 | 
02304                 | _mcp_set_pin
02304     04 4C 05 F6 | 	mov	COUNT_, #4
02308     A9 00 A0 FD | 	call	#pushregs_
0230c     3A 8D 02 F6 | 	mov	local01, arg01
02310     3B 8F 02 F6 | 	mov	local02, arg02
02314     3D 91 02 F6 | 	mov	local03, arg04
02318     3C 77 02 F6 | 	mov	arg02, arg03
0231c     07 76 4E F7 | 	zerox	arg02, #7 wz
02320     12 92 06 A6 |  if_e	mov	local04, #18
02324     13 92 06 56 |  if_ne	mov	local04, #19
02328     46 75 02 F6 | 	mov	arg01, local01
0232c     49 77 02 F6 | 	mov	arg02, local04
02330     EC 65 B1 FD | 	call	#_read_register_1529
02334     1A 79 E2 F8 | 	getbyte	arg03, result1, #0
02338     00 90 0E F2 | 	cmp	local03, #0 wz
0233c     47 8F 32 59 |  if_ne	getword	local02, local02, #0
02340     47 91 C2 59 |  if_ne	decod	local03, local02
02344     48 79 42 55 |  if_ne	or	arg03, local03
02348     47 8F 32 A9 |  if_e	getword	local02, local02, #0
0234c     47 91 C2 A9 |  if_e	decod	local03, local02
02350     48 79 22 A5 |  if_e	andn	arg03, local03
02354     46 75 02 F6 | 	mov	arg01, local01
02358     49 77 02 F6 | 	mov	arg02, local04
0235c     40 66 B1 FD | 	call	#_write_register_1531
02360     A8 F0 03 F6 | 	mov	ptra, fp
02364     B3 00 A0 FD | 	call	#popregs_
02368                 | _mcp_set_pin_ret
02368     2D 00 64 FD | 	ret
0236c                 | 
0236c                 | _mcp_get_pin
0236c                 | '     (state ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
0236c                 | '     write_register(mcp23017, reg, value);
0236c                 | ' }
0236c                 | ' uint8_t mcp_get_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
0236c                 | ' {
0236c                 | '     return  (((reg == 0x00 ? mcp23017->dira : mcp23017->dirb) >> (pin)) & 0x01) ;
0236c     07 78 4E F7 | 	zerox	arg03, #7 wz
02370     0E 74 06 A1 |  if_e	add	arg01, #14
02374     3A 3B C2 AA |  if_e	rdbyte	_var01, arg01
02378     0F 74 06 51 |  if_ne	add	arg01, #15
0237c     3A 3B C2 5A |  if_ne	rdbyte	_var01, arg01
02380     1D 35 E2 F8 | 	getbyte	result1, _var01, #0
02384     3B 77 32 F9 | 	getword	arg02, arg02, #0
02388     3B 35 42 F0 | 	shr	result1, arg02
0238c     01 34 06 F5 | 	and	result1, #1
02390                 | _mcp_get_pin_ret
02390     2D 00 64 FD | 	ret
02394                 | 
02394                 | _dyn4_begin
02394     02 4C 05 F6 | 	mov	COUNT_, #2
02398     A9 00 A0 FD | 	call	#pushregs_
0239c     24 F0 07 F1 | 	add	ptra, #36
023a0     04 50 05 F1 | 	add	fp, #4
023a4     A8 74 62 FC | 	wrlong	arg01, fp
023a8     04 50 05 F1 | 	add	fp, #4
023ac     A8 76 62 FC | 	wrlong	arg02, fp
023b0     04 50 05 F1 | 	add	fp, #4
023b4     A8 78 62 FC | 	wrlong	arg03, fp
023b8     04 50 05 F1 | 	add	fp, #4
023bc     A8 7A 62 FC | 	wrlong	arg04, fp
023c0     0C 50 85 F1 | 	sub	fp, #12
023c4     A8 34 02 FB | 	rdlong	result1, fp
023c8     1A 7B 62 FC | 	wrlong	arg04, result1
023cc     A8 8C 02 FB | 	rdlong	local01, fp
023d0     04 8C 06 F1 | 	add	local01, #4
023d4     04 50 05 F1 | 	add	fp, #4
023d8     A8 74 02 FB | 	rdlong	arg01, fp
023dc     04 50 05 F1 | 	add	fp, #4
023e0     A8 76 02 FB | 	rdlong	arg02, fp
023e4     0C 50 85 F1 | 	sub	fp, #12
023e8     02 78 06 F6 | 	mov	arg03, #2
023ec     4B 00 00 FF 
023f0     00 7A 06 F6 | 	mov	arg04, ##38400
023f4     C9 8E 02 F6 | 	mov	local02, objptr
023f8     46 93 01 F6 | 	mov	objptr, local01
023fc     18 93 B1 FD | 	call	#_jm_fullduplexserial_spin2_start
02400     47 93 01 F6 | 	mov	objptr, local02
02404     04 50 05 F1 | 	add	fp, #4
02408     A8 74 02 FB | 	rdlong	arg01, fp
0240c     10 50 05 F1 | 	add	fp, #16
02410     A8 76 02 F6 | 	mov	arg02, fp
02414     14 50 85 F1 | 	sub	fp, #20
02418     EC 02 B0 FD | 	call	#_dyn4_get_status
0241c     20 50 05 F1 | 	add	fp, #32
02420     A8 34 62 FC | 	wrlong	result1, fp
02424     20 50 85 F1 | 	sub	fp, #32
02428     00 34 0E F2 | 	cmp	result1, #0 wz
0242c                 | '     {
0242c                 | ' 
0242c                 | '         return ret;
0242c     20 50 05 51 |  if_ne	add	fp, #32
02430     A8 34 02 5B |  if_ne	rdlong	result1, fp
02434     20 50 85 51 |  if_ne	sub	fp, #32
02438                 | '     }
02438                 | ' 
02438                 | ' 
02438                 | ' 
02438                 | ' 
02438                 | '     return ret;
02438     20 50 05 A1 |  if_e	add	fp, #32
0243c     A8 34 02 AB |  if_e	rdlong	result1, fp
02440     20 50 85 A1 |  if_e	sub	fp, #32
02444     A8 F0 03 F6 | 	mov	ptra, fp
02448     B3 00 A0 FD | 	call	#popregs_
0244c                 | _dyn4_begin_ret
0244c     2D 00 64 FD | 	ret
02450                 | 
02450                 | _dyn4_send_command
02450     09 4C 05 F6 | 	mov	COUNT_, #9
02454     A9 00 A0 FD | 	call	#pushregs_
02458     2C F0 07 F1 | 	add	ptra, #44
0245c     3A 8D 02 F6 | 	mov	local01, arg01
02460     3B 8F 02 F6 | 	mov	local02, arg02
02464     00 08 00 FF 
02468     00 78 56 F2 | 	cmps	arg03, ##1048576 wc
0246c     0C 00 90 3D |  if_ae	jmp	#LR__0085
02470     00 F8 7F FF 
02474     00 78 56 F2 | 	cmps	arg03, ##-1048576 wc
02478     08 00 90 3D |  if_ae	jmp	#LR__0086
0247c                 | LR__0085
0247c     04 90 06 F6 | 	mov	local03, #4
02480     40 00 90 FD | 	jmp	#LR__0093
02484                 | LR__0086
02484     10 00 00 FF 
02488     00 78 56 F2 | 	cmps	arg03, ##8192 wc
0248c     0C 00 90 3D |  if_ae	jmp	#LR__0087
02490     F0 FF 7F FF 
02494     00 78 56 F2 | 	cmps	arg03, ##-8192 wc
02498     08 00 90 3D |  if_ae	jmp	#LR__0088
0249c                 | LR__0087
0249c     03 90 06 F6 | 	mov	local03, #3
024a0     20 00 90 FD | 	jmp	#LR__0092
024a4                 | LR__0088
024a4     40 78 56 F2 | 	cmps	arg03, #64 wc
024a8     0C 00 90 3D |  if_ae	jmp	#LR__0089
024ac     FF FF 7F FF 
024b0     C0 79 56 F2 | 	cmps	arg03, ##-64 wc
024b4     08 00 90 3D |  if_ae	jmp	#LR__0090
024b8                 | LR__0089
024b8     02 90 06 F6 | 	mov	local03, #2
024bc     04 00 90 FD | 	jmp	#LR__0091
024c0                 | LR__0090
024c0     01 90 06 F6 | 	mov	local03, #1
024c4                 | LR__0091
024c4                 | LR__0092
024c4                 | LR__0093
024c4     03 76 06 F6 | 	mov	arg02, #3
024c8     48 77 02 F1 | 	add	arg02, local03
024cc     3B 75 02 F6 | 	mov	arg01, arg02
024d0     01 74 86 F1 | 	sub	arg01, #1
024d4     14 50 05 F1 | 	add	fp, #20
024d8     46 93 02 FB | 	rdlong	local04, local01
024dc     A8 74 02 F1 | 	add	arg01, fp
024e0     3A 93 42 FC | 	wrbyte	local04, arg01
024e4     3B 95 02 F6 | 	mov	local05, arg02
024e8     02 94 86 F1 | 	sub	local05, #2
024ec     A8 94 02 F1 | 	add	local05, fp
024f0     48 75 02 F6 | 	mov	arg01, local03
024f4     01 74 86 F1 | 	sub	arg01, #1
024f8     05 74 66 F0 | 	shl	arg01, #5
024fc     80 92 06 F6 | 	mov	local04, #128
02500     3A 93 02 F1 | 	add	local04, arg01
02504     47 8F E2 F8 | 	getbyte	local02, local02, #0
02508     47 93 02 F1 | 	add	local04, local02
0250c     4A 93 42 FC | 	wrbyte	local04, local05
02510     3B 8F 02 F6 | 	mov	local02, arg02
02514     01 8E 86 F1 | 	sub	local02, #1
02518     A8 8E 02 F1 | 	add	local02, fp
0251c     47 97 C2 FA | 	rdbyte	local06, local02
02520     3B 99 02 F6 | 	mov	local07, arg02
02524     02 98 86 F1 | 	sub	local07, #2
02528     A8 98 02 F1 | 	add	local07, fp
0252c     4C 9B C2 FA | 	rdbyte	local08, local07
02530     4D 97 02 F1 | 	add	local06, local08
02534     00 9C 06 F6 | 	mov	local09, #0
02538                 | '     for (int i = 0; i < n; i++)
02538     14 50 85 F1 | 	sub	fp, #20
0253c     30 DB 9F FE | 	loc	pa,	#(@LR__0095-@LR__0094)
02540     8C 00 A0 FD | 	call	#FCACHE_LOAD_
02544                 | LR__0094
02544     48 9D 52 F2 | 	cmps	local09, local03 wc
02548     68 00 90 3D |  if_ae	jmp	#LR__0096
0254c     3B 95 02 F6 | 	mov	local05, arg02
02550     03 94 86 F1 | 	sub	local05, #3
02554     4E 95 82 F1 | 	sub	local05, local09
02558     14 50 05 F1 | 	add	fp, #20
0255c     A8 94 02 F1 | 	add	local05, fp
02560     3C 9B 02 F6 | 	mov	local08, arg03
02564     48 93 02 F6 | 	mov	local04, local03
02568     4E 93 82 F1 | 	sub	local04, local09
0256c     01 92 86 F1 | 	sub	local04, #1
02570     49 99 02 F6 | 	mov	local07, local04
02574     03 98 66 F0 | 	shl	local07, #3
02578     49 99 82 F1 | 	sub	local07, local04
0257c     4C 9B C2 F0 | 	sar	local08, local07
02580     7F 9A 06 F5 | 	and	local08, #127
02584     80 92 06 F6 | 	mov	local04, #128
02588     4D 93 02 F1 | 	add	local04, local08
0258c     4A 93 42 FC | 	wrbyte	local04, local05
02590     3B 93 02 F6 | 	mov	local04, arg02
02594     03 92 86 F1 | 	sub	local04, #3
02598     4E 93 82 F1 | 	sub	local04, local09
0259c     A8 92 02 F1 | 	add	local04, fp
025a0     49 95 C2 FA | 	rdbyte	local05, local04
025a4     4A 97 02 F1 | 	add	local06, local05
025a8     01 9C 06 F1 | 	add	local09, #1
025ac     14 50 85 F1 | 	sub	fp, #20
025b0     90 FF 9F FD | 	jmp	#LR__0094
025b4                 | LR__0095
025b4                 | LR__0096
025b4     4B 95 52 F6 | 	abs	local05, local06 wc
025b8     7F 94 06 F5 | 	and	local05, #127
025bc     4A 95 82 F6 | 	negc	local05, local05
025c0     80 9C 06 F6 | 	mov	local09, #128
025c4     4A 9D 02 F1 | 	add	local09, local05
025c8     14 50 05 F1 | 	add	fp, #20
025cc     A8 9C 42 FC | 	wrbyte	local09, fp
025d0     14 50 85 F1 | 	sub	fp, #20
025d4     01 76 86 F1 | 	sub	arg02, #1
025d8                 | '     {
025d8                 | '         bytes[package_size - 3 - i] = 0x80 + ((data >> ((n - i - 1) * 7)) & 0x7F);
025d8                 | ' 
025d8                 | '         totalData += bytes[package_size - 3 - i];
025d8                 | '     }
025d8                 | '     bytes[0] = 0x80 + (totalData % 128);
025d8                 | ' 
025d8                 | '     for (int i = package_size - 1; i >= 0; i--)
025d8                 | LR__0097
025d8     00 76 56 F2 | 	cmps	arg02, #0 wc
025dc     34 00 90 CD |  if_b	jmp	#LR__0098
025e0     04 8C 06 F1 | 	add	local01, #4
025e4     3B 93 02 F6 | 	mov	local04, arg02
025e8     14 50 05 F1 | 	add	fp, #20
025ec     A8 92 02 F1 | 	add	local04, fp
025f0     49 75 C2 FA | 	rdbyte	arg01, local04
025f4     C9 8E 02 F6 | 	mov	local02, objptr
025f8     46 93 01 F6 | 	mov	objptr, local01
025fc     14 50 85 F1 | 	sub	fp, #20
02600     00 94 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
02604     47 93 01 F6 | 	mov	objptr, local02
02608     01 76 86 F1 | 	sub	arg02, #1
0260c     04 8C 86 F1 | 	sub	local01, #4
02610     C4 FF 9F FD | 	jmp	#LR__0097
02614                 | LR__0098
02614     A8 F0 03 F6 | 	mov	ptra, fp
02618     B3 00 A0 FD | 	call	#popregs_
0261c                 | _dyn4_send_command_ret
0261c     2D 00 64 FD | 	ret
02620                 | 
02620                 | _dyn4_read_command
02620     06 4C 05 F6 | 	mov	COUNT_, #6
02624     A9 00 A0 FD | 	call	#pushregs_
02628     3A 8D 02 F6 | 	mov	local01, arg01
0262c     00 8E 06 F6 | 	mov	local02, #0
02630                 | ' {
02630                 | '     uint8_t byte;
02630                 | ' 
02630                 | '     for (int i = 0; i < 10; i++)
02630                 | LR__0099
02630     0A 8E 56 F2 | 	cmps	local02, #10 wc
02634     38 00 90 3D |  if_ae	jmp	#LR__0100
02638     04 8C 06 F1 | 	add	local01, #4
0263c     64 74 06 F6 | 	mov	arg01, #100
02640     C9 90 02 F6 | 	mov	local03, objptr
02644     46 93 01 F6 | 	mov	objptr, local01
02648     34 93 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0264c     48 93 01 F6 | 	mov	objptr, local03
02650     1A 93 02 F6 | 	mov	local04, result1
02654     49 91 E2 F8 | 	getbyte	local03, local04, #0
02658     04 8C 86 F1 | 	sub	local01, #4
0265c     46 75 02 FB | 	rdlong	arg01, local01
02660     3A 91 0A F2 | 	cmp	local03, arg01 wz
02664                 | '         {
02664                 | '             break;
02664     01 92 66 56 |  if_ne	neg	local04, #1
02668     01 8E 06 51 |  if_ne	add	local02, #1
0266c     C0 FF 9F 5D |  if_ne	jmp	#LR__0099
02670                 | LR__0100
02670     49 93 E2 F8 | 	getbyte	local04, local04, #0
02674     FF FF 7F FF 
02678     FF 93 0E F2 | 	cmp	local04, ##-1 wz
0267c                 | '     {
0267c                 | '         return -1;
0267c     01 34 66 A6 |  if_e	neg	result1, #1
02680     78 00 90 AD |  if_e	jmp	#LR__0103
02684     04 8C 06 F1 | 	add	local01, #4
02688     C8 74 06 F6 | 	mov	arg01, #200
0268c     C9 90 02 F6 | 	mov	local03, objptr
02690     46 93 01 F6 | 	mov	objptr, local01
02694     E8 92 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
02698     48 93 01 F6 | 	mov	objptr, local03
0269c     04 8C 86 F1 | 	sub	local01, #4
026a0     1A 95 E2 F8 | 	getbyte	local05, result1, #0
026a4     05 94 46 F0 | 	shr	local05, #5
026a8     03 94 06 F5 | 	and	local05, #3
026ac     00 96 06 F6 | 	mov	local06, #0
026b0                 | '     for (int i = n - 1; i >= 0; i--)
026b0                 | LR__0101
026b0     00 94 56 F2 | 	cmps	local05, #0 wc
026b4     40 00 90 CD |  if_b	jmp	#LR__0102
026b8     04 8C 06 F1 | 	add	local01, #4
026bc     C8 74 06 F6 | 	mov	arg01, #200
026c0     C9 90 02 F6 | 	mov	local03, objptr
026c4     46 93 01 F6 | 	mov	objptr, local01
026c8     B4 92 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
026cc     48 93 01 F6 | 	mov	objptr, local03
026d0     1A 35 E2 F8 | 	getbyte	result1, result1, #0
026d4     7F 34 06 F5 | 	and	result1, #127
026d8     4A 93 02 F6 | 	mov	local04, local05
026dc     03 92 66 F0 | 	shl	local04, #3
026e0     4A 93 82 F1 | 	sub	local04, local05
026e4     49 35 62 F0 | 	shl	result1, local04
026e8     1A 97 02 F1 | 	add	local06, result1
026ec     01 94 86 F1 | 	sub	local05, #1
026f0     04 8C 86 F1 | 	sub	local01, #4
026f4     B8 FF 9F FD | 	jmp	#LR__0101
026f8                 | LR__0102
026f8                 | '     {
026f8                 | '         data += ((uint8_t)dyn4->serial.rxtime(200) & 0x7F) << (7 * i);
026f8                 | '     }
026f8                 | '     return data;
026f8     4B 35 02 F6 | 	mov	result1, local06
026fc                 | LR__0103
026fc     A8 F0 03 F6 | 	mov	ptra, fp
02700     B3 00 A0 FD | 	call	#popregs_
02704                 | _dyn4_read_command_ret
02704     2D 00 64 FD | 	ret
02708                 | 
02708                 | _dyn4_get_status
02708     02 4C 05 F6 | 	mov	COUNT_, #2
0270c     A9 00 A0 FD | 	call	#pushregs_
02710     3A 8D 02 F6 | 	mov	local01, arg01
02714     3B 8F 02 F6 | 	mov	local02, arg02
02718     46 75 02 F6 | 	mov	arg01, local01
0271c     09 76 06 F6 | 	mov	arg02, #9
02720     01 78 06 F6 | 	mov	arg03, #1
02724     28 FD BF FD | 	call	#_dyn4_send_command
02728     46 75 02 F6 | 	mov	arg01, local01
0272c     19 76 06 F6 | 	mov	arg02, #25
02730     EC FE BF FD | 	call	#_dyn4_read_command
02734     1A 8D 02 F6 | 	mov	local01, result1
02738     46 79 E2 F8 | 	getbyte	arg03, local01, #0
0273c     FF FF 7F FF 
02740     FF 79 0E F2 | 	cmp	arg03, ##-1 wz
02744                 | '     {
02744                 | '         return DYN4_NOT_RESPONDING;
02744     65 34 06 A6 |  if_e	mov	result1, #101
02748     60 00 90 AD |  if_e	jmp	#LR__0104
0274c     46 35 E2 F8 | 	getbyte	result1, local01, #0
02750     01 34 06 F5 | 	and	result1, #1
02754     47 35 42 FC | 	wrbyte	result1, local02
02758     46 35 E2 F8 | 	getbyte	result1, local01, #0
0275c     02 34 06 F5 | 	and	result1, #2
02760     01 34 C6 F0 | 	sar	result1, #1
02764     01 8E 06 F1 | 	add	local02, #1
02768     47 35 42 FC | 	wrbyte	result1, local02
0276c     46 35 E2 F8 | 	getbyte	result1, local01, #0
02770     1C 34 06 F5 | 	and	result1, #28
02774     02 34 C6 F0 | 	sar	result1, #2
02778     03 8E 06 F1 | 	add	local02, #3
0277c     47 35 62 FC | 	wrlong	result1, local02
02780     46 35 E2 F8 | 	getbyte	result1, local01, #0
02784     20 34 06 F5 | 	and	result1, #32
02788     05 34 C6 F0 | 	sar	result1, #5
0278c     04 8E 06 F1 | 	add	local02, #4
02790     47 35 42 FC | 	wrbyte	result1, local02
02794     46 8D E2 F8 | 	getbyte	local01, local01, #0
02798     40 8C 06 F5 | 	and	local01, #64
0279c     06 8C C6 F0 | 	sar	local01, #6
027a0     01 8E 06 F1 | 	add	local02, #1
027a4     47 8D 42 FC | 	wrbyte	local01, local02
027a8                 | '     }
027a8                 | '     status->onRange = (statusReg & (0x01 <<  0x00 )) >>  0x00 ;
027a8                 | '     status->motorFree = (statusReg & (0x01 <<  0x01 )) >>  0x01 ;
027a8                 | '     status->alarm = (statusReg & (0x07 <<  0x02 )) >>  0x02 ;
027a8                 | '     status->motorBusy = (statusReg & (0x01 <<  0x05 )) >>  0x05 ;
027a8                 | '     status->jp3P2Status = (statusReg & (0x01 <<  0x06 )) >>  0x06 ;
027a8                 | '     return SUCCESS;
027a8     00 34 06 F6 | 	mov	result1, #0
027ac                 | LR__0104
027ac     A8 F0 03 F6 | 	mov	ptra, fp
027b0     B3 00 A0 FD | 	call	#popregs_
027b4                 | _dyn4_get_status_ret
027b4     2D 00 64 FD | 	ret
027b8                 | 
027b8                 | _machine_state_init
027b8     3A 01 68 FC | 	wrlong	#0, arg01
027bc     04 74 06 F1 | 	add	arg01, #4
027c0     3A 01 48 FC | 	wrbyte	#0, arg01
027c4     04 74 06 F1 | 	add	arg01, #4
027c8     3A 01 48 FC | 	wrbyte	#0, arg01
027cc     04 74 06 F1 | 	add	arg01, #4
027d0     3A 01 68 FC | 	wrlong	#0, arg01
027d4     04 74 06 F1 | 	add	arg01, #4
027d8     3A 01 48 FC | 	wrbyte	#0, arg01
027dc     01 74 06 F1 | 	add	arg01, #1
027e0     3A 01 48 FC | 	wrbyte	#0, arg01
027e4     01 74 06 F1 | 	add	arg01, #1
027e8     3A 01 48 FC | 	wrbyte	#0, arg01
027ec     01 74 06 F1 | 	add	arg01, #1
027f0     3A 01 48 FC | 	wrbyte	#0, arg01
027f4     01 74 06 F1 | 	add	arg01, #1
027f8     3A 03 48 FC | 	wrbyte	#1, arg01
027fc     08 74 06 F1 | 	add	arg01, #8
02800     3A 0F 68 FC | 	wrlong	#7, arg01
02804     04 74 06 F1 | 	add	arg01, #4
02808     3A 01 68 FC | 	wrlong	#0, arg01
0280c     08 74 86 F1 | 	sub	arg01, #8
02810     3A 01 68 FC | 	wrlong	#0, arg01
02814     0C 74 06 F1 | 	add	arg01, #12
02818     3A 01 68 FC | 	wrlong	#0, arg01
0281c     00 34 06 F6 | 	mov	result1, #0
02820     04 34 62 FD | 	locknew	result1
02824     08 74 06 F1 | 	add	arg01, #8
02828     3A 35 62 FC | 	wrlong	result1, arg01
0282c     FF FF 7F FF 
02830     FF 35 0E F2 | 	cmp	result1, ##-1 wz
02834     47 01 00 AF 
02838     E3 74 06 A6 |  if_e	mov	arg01, ##@LR__1813
0283c     A8 F4 BF AD |  if_e	call	#_printf
02840                 | _machine_state_init_ret
02840     2D 00 64 FD | 	ret
02844                 | 
02844                 | _state_machine_set
02844     04 4C 05 F6 | 	mov	COUNT_, #4
02848     A9 00 A0 FD | 	call	#pushregs_
0284c     3A 8D 02 F6 | 	mov	local01, arg01
02850     3B 8F 02 F6 | 	mov	local02, arg02
02854     3C 91 02 F6 | 	mov	local03, arg03
02858                 | ' {
02858                 | '     switch (param)
02858     0C 8E 26 F3 | 	fle	local02, #12
0285c     30 8E 62 FD | 	jmprel	local02
02860                 | LR__0105
02860     30 00 90 FD | 	jmp	#LR__0106
02864     54 00 90 FD | 	jmp	#LR__0107
02868     78 00 90 FD | 	jmp	#LR__0108
0286c     9C 00 90 FD | 	jmp	#LR__0109
02870     C0 00 90 FD | 	jmp	#LR__0110
02874     E4 00 90 FD | 	jmp	#LR__0111
02878     08 01 90 FD | 	jmp	#LR__0112
0287c     2C 01 90 FD | 	jmp	#LR__0113
02880     50 01 90 FD | 	jmp	#LR__0114
02884     74 01 90 FD | 	jmp	#LR__0115
02888     98 01 90 FD | 	jmp	#LR__0116
0288c     E8 01 90 FD | 	jmp	#LR__0119
02890     08 02 90 FD | 	jmp	#LR__0120
02894                 | LR__0106
02894     04 8C 06 F1 | 	add	local01, #4
02898     46 8F C2 FA | 	rdbyte	local02, local01
0289c     04 8C 86 F1 | 	sub	local01, #4
028a0     48 8F 0A F2 | 	cmp	local02, local03 wz
028a4     04 8C 06 51 |  if_ne	add	local01, #4
028a8     46 91 42 5C |  if_ne	wrbyte	local03, local01
028ac     04 8C 86 51 |  if_ne	sub	local01, #4
028b0     46 75 02 56 |  if_ne	mov	arg01, local01
028b4     3C 09 B1 5D |  if_ne	call	#_state_machine_update_0551
028b8                 | '         {
028b8                 | '             machineState->selfCheckParameters.chargePump = state;
028b8                 | '             state_machine_update(machineState);
028b8                 | '         }
028b8                 | '         break;
028b8     E0 01 90 FD | 	jmp	#LR__0120
028bc                 | LR__0107
028bc     08 8C 06 F1 | 	add	local01, #8
028c0     46 8F C2 FA | 	rdbyte	local02, local01
028c4     08 8C 86 F1 | 	sub	local01, #8
028c8     48 8F 0A F2 | 	cmp	local02, local03 wz
028cc     08 8C 06 51 |  if_ne	add	local01, #8
028d0     46 91 42 5C |  if_ne	wrbyte	local03, local01
028d4     08 8C 86 51 |  if_ne	sub	local01, #8
028d8     46 75 02 56 |  if_ne	mov	arg01, local01
028dc     14 09 B1 5D |  if_ne	call	#_state_machine_update_0551
028e0                 | '         {
028e0                 | '             machineState->machineCheckParameters.switchedPower = state;
028e0                 | '             state_machine_update(machineState);
028e0                 | '         }
028e0                 | '         break;
028e0     B8 01 90 FD | 	jmp	#LR__0120
028e4                 | LR__0108
028e4     0C 8C 06 F1 | 	add	local01, #12
028e8     46 8F 02 FB | 	rdlong	local02, local01
028ec     0C 8C 86 F1 | 	sub	local01, #12
028f0     48 8F 0A F2 | 	cmp	local02, local03 wz
028f4     0C 8C 06 51 |  if_ne	add	local01, #12
028f8     46 91 62 5C |  if_ne	wrlong	local03, local01
028fc     0C 8C 86 51 |  if_ne	sub	local01, #12
02900     46 75 02 56 |  if_ne	mov	arg01, local01
02904     EC 08 B1 5D |  if_ne	call	#_state_machine_update_0551
02908                 | '         {
02908                 | '             machineState->machineCheckParameters.esdTravelLimit = state;
02908                 | '             state_machine_update(machineState);
02908                 | '         }
02908                 | '         break;
02908     90 01 90 FD | 	jmp	#LR__0120
0290c                 | LR__0109
0290c     10 8C 06 F1 | 	add	local01, #16
02910     46 8F C2 FA | 	rdbyte	local02, local01
02914     10 8C 86 F1 | 	sub	local01, #16
02918     48 8F 0A F2 | 	cmp	local02, local03 wz
0291c     10 8C 06 51 |  if_ne	add	local01, #16
02920     46 91 42 5C |  if_ne	wrbyte	local03, local01
02924     10 8C 86 51 |  if_ne	sub	local01, #16
02928     46 75 02 56 |  if_ne	mov	arg01, local01
0292c     C4 08 B1 5D |  if_ne	call	#_state_machine_update_0551
02930                 | '         {
02930                 | '             machineState->machineCheckParameters.esdSwitch = state;
02930                 | '             state_machine_update(machineState);
02930                 | '         }
02930                 | '         break;
02930     68 01 90 FD | 	jmp	#LR__0120
02934                 | LR__0110
02934     11 8C 06 F1 | 	add	local01, #17
02938     46 8F C2 FA | 	rdbyte	local02, local01
0293c     11 8C 86 F1 | 	sub	local01, #17
02940     48 8F 0A F2 | 	cmp	local02, local03 wz
02944     11 8C 06 51 |  if_ne	add	local01, #17
02948     46 91 42 5C |  if_ne	wrbyte	local03, local01
0294c     11 8C 86 51 |  if_ne	sub	local01, #17
02950     46 75 02 56 |  if_ne	mov	arg01, local01
02954     9C 08 B1 5D |  if_ne	call	#_state_machine_update_0551
02958                 | '         {
02958                 | '             machineState->machineCheckParameters.servoOK = state;
02958                 | '             state_machine_update(machineState);
02958                 | '         }
02958                 | '         break;
02958     40 01 90 FD | 	jmp	#LR__0120
0295c                 | LR__0111
0295c     12 8C 06 F1 | 	add	local01, #18
02960     46 8F C2 FA | 	rdbyte	local02, local01
02964     12 8C 86 F1 | 	sub	local01, #18
02968     48 8F 0A F2 | 	cmp	local02, local03 wz
0296c     12 8C 06 51 |  if_ne	add	local01, #18
02970     46 91 42 5C |  if_ne	wrbyte	local03, local01
02974     12 8C 86 51 |  if_ne	sub	local01, #18
02978     46 75 02 56 |  if_ne	mov	arg01, local01
0297c     74 08 B1 5D |  if_ne	call	#_state_machine_update_0551
02980                 | '         {
02980                 | '             machineState->machineCheckParameters.forceGaugeCom = state;
02980                 | '             state_machine_update(machineState);
02980                 | '         }
02980                 | '         break;
02980     18 01 90 FD | 	jmp	#LR__0120
02984                 | LR__0112
02984     13 8C 06 F1 | 	add	local01, #19
02988     46 8F C2 FA | 	rdbyte	local02, local01
0298c     13 8C 86 F1 | 	sub	local01, #19
02990     48 8F 0A F2 | 	cmp	local02, local03 wz
02994     13 8C 06 51 |  if_ne	add	local01, #19
02998     46 91 42 5C |  if_ne	wrbyte	local03, local01
0299c     13 8C 86 51 |  if_ne	sub	local01, #19
029a0     46 75 02 56 |  if_ne	mov	arg01, local01
029a4     4C 08 B1 5D |  if_ne	call	#_state_machine_update_0551
029a8                 | '         {
029a8                 | '             machineState->machineCheckParameters.servoCom = state;
029a8                 | '             state_machine_update(machineState);
029a8                 | '         }
029a8                 | '         break;
029a8     F0 00 90 FD | 	jmp	#LR__0120
029ac                 | LR__0113
029ac     14 8C 06 F1 | 	add	local01, #20
029b0     46 8F C2 FA | 	rdbyte	local02, local01
029b4     14 8C 86 F1 | 	sub	local01, #20
029b8     48 8F 0A F2 | 	cmp	local02, local03 wz
029bc     14 8C 06 51 |  if_ne	add	local01, #20
029c0     46 91 42 5C |  if_ne	wrbyte	local03, local01
029c4     14 8C 86 51 |  if_ne	sub	local01, #20
029c8     46 75 02 56 |  if_ne	mov	arg01, local01
029cc     24 08 B1 5D |  if_ne	call	#_state_machine_update_0551
029d0                 | '         {
029d0                 | '             machineState->machineCheckParameters.rtcCom = state;
029d0                 | '             state_machine_update(machineState);
029d0                 | '         }
029d0                 | '         break;
029d0     C8 00 90 FD | 	jmp	#LR__0120
029d4                 | LR__0114
029d4     18 8C 06 F1 | 	add	local01, #24
029d8     46 8F 02 FB | 	rdlong	local02, local01
029dc     18 8C 86 F1 | 	sub	local01, #24
029e0     48 8F 0A F2 | 	cmp	local02, local03 wz
029e4     18 8C 06 51 |  if_ne	add	local01, #24
029e8     46 91 62 5C |  if_ne	wrlong	local03, local01
029ec     18 8C 86 51 |  if_ne	sub	local01, #24
029f0     46 75 02 56 |  if_ne	mov	arg01, local01
029f4     FC 07 B1 5D |  if_ne	call	#_state_machine_update_0551
029f8                 | '         {
029f8                 | '             machineState->motionParameters.status = state;
029f8                 | '             state_machine_update(machineState);
029f8                 | '         }
029f8                 | '         break;
029f8     A0 00 90 FD | 	jmp	#LR__0120
029fc                 | LR__0115
029fc     1C 8C 06 F1 | 	add	local01, #28
02a00     46 8F 02 FB | 	rdlong	local02, local01
02a04     1C 8C 86 F1 | 	sub	local01, #28
02a08     48 8F 0A F2 | 	cmp	local02, local03 wz
02a0c     1C 8C 06 51 |  if_ne	add	local01, #28
02a10     46 91 62 5C |  if_ne	wrlong	local03, local01
02a14     1C 8C 86 51 |  if_ne	sub	local01, #28
02a18     46 75 02 56 |  if_ne	mov	arg01, local01
02a1c     D4 07 B1 5D |  if_ne	call	#_state_machine_update_0551
02a20                 | '         {
02a20                 | '             machineState->motionParameters.condition = state;
02a20                 | '             state_machine_update(machineState);
02a20                 | '         }
02a20                 | '         break;
02a20     78 00 90 FD | 	jmp	#LR__0120
02a24                 | LR__0116
02a24     20 8C 06 F1 | 	add	local01, #32
02a28     46 8F 02 FB | 	rdlong	local02, local01
02a2c     20 8C 86 F1 | 	sub	local01, #32
02a30     48 8F 0A F2 | 	cmp	local02, local03 wz
02a34     40 00 90 AD |  if_e	jmp	#LR__0118
02a38     20 8C 06 F1 | 	add	local01, #32
02a3c     46 75 02 FB | 	rdlong	arg01, local01
02a40     20 8C 86 F1 | 	sub	local01, #32
02a44     01 74 0E F2 | 	cmp	arg01, #1 wz
02a48     18 00 90 AD |  if_e	jmp	#LR__0117
02a4c     02 90 0E F2 | 	cmp	local03, #2 wz
02a50     10 00 90 5D |  if_ne	jmp	#LR__0117
02a54     47 01 00 FF 
02a58     FE 74 06 F6 | 	mov	arg01, ##@LR__1814
02a5c     88 F2 BF FD | 	call	#_printf
02a60                 | '             {
02a60                 | '                 printf("Must be in test mode to run test\n");
02a60                 | '                 break;
02a60     38 00 90 FD | 	jmp	#LR__0120
02a64                 | LR__0117
02a64     20 8C 06 F1 | 	add	local01, #32
02a68     46 91 62 FC | 	wrlong	local03, local01
02a6c     20 8C 86 F1 | 	sub	local01, #32
02a70     46 75 02 F6 | 	mov	arg01, local01
02a74     7C 07 B1 FD | 	call	#_state_machine_update_0551
02a78                 | LR__0118
02a78                 | LR__0119
02a78     24 8C 06 F1 | 	add	local01, #36
02a7c     46 93 02 FB | 	rdlong	local04, local01
02a80     24 8C 86 F1 | 	sub	local01, #36
02a84     48 93 0A F2 | 	cmp	local04, local03 wz
02a88     24 8C 06 51 |  if_ne	add	local01, #36
02a8c     46 91 62 5C |  if_ne	wrlong	local03, local01
02a90     24 8C 86 51 |  if_ne	sub	local01, #36
02a94     46 75 02 56 |  if_ne	mov	arg01, local01
02a98     58 07 B1 5D |  if_ne	call	#_state_machine_update_0551
02a9c                 | '         {
02a9c                 | '             machineState->function = state;
02a9c                 | '             state_machine_update(machineState);
02a9c                 | '         }
02a9c                 | '         break;
02a9c                 | LR__0120
02a9c     A8 F0 03 F6 | 	mov	ptra, fp
02aa0     B3 00 A0 FD | 	call	#popregs_
02aa4                 | _state_machine_set_ret
02aa4     2D 00 64 FD | 	ret
02aa8                 | 
02aa8                 | _state_machine_check_equal
02aa8     3A 3B 02 F6 | 	mov	_var01, arg01
02aac     3B 3D 02 F6 | 	mov	_var02, arg02
02ab0                 | ' {
02ab0                 | '     return motionParameters1->switchedPower == motionParameters2->switchedPower &&
02ab0     1D 3F C2 FA | 	rdbyte	_var03, _var01
02ab4     00 40 06 F6 | 	mov	_var04, #0
02ab8     1E 43 C2 FA | 	rdbyte	_var05, _var02
02abc     21 3F 0A F2 | 	cmp	_var03, _var05 wz
02ac0     F0 00 90 5D |  if_ne	jmp	#LR__0121
02ac4     04 3A 06 F1 | 	add	_var01, #4
02ac8     1D 45 02 FB | 	rdlong	_var06, _var01
02acc     04 3A 86 F1 | 	sub	_var01, #4
02ad0     22 47 02 F6 | 	mov	_var07, _var06
02ad4     04 3C 06 F1 | 	add	_var02, #4
02ad8     1E 49 02 FB | 	rdlong	_var08, _var02
02adc     04 3C 86 F1 | 	sub	_var02, #4
02ae0     24 4B 02 F6 | 	mov	_var09, _var08
02ae4     25 47 0A F2 | 	cmp	_var07, _var09 wz
02ae8     C8 00 90 5D |  if_ne	jmp	#LR__0121
02aec     08 3A 06 F1 | 	add	_var01, #8
02af0     1D 4D C2 FA | 	rdbyte	_var10, _var01
02af4     08 3A 86 F1 | 	sub	_var01, #8
02af8     26 4F E2 F8 | 	getbyte	_var11, _var10, #0
02afc     08 3C 06 F1 | 	add	_var02, #8
02b00     1E 51 C2 FA | 	rdbyte	_var12, _var02
02b04     08 3C 86 F1 | 	sub	_var02, #8
02b08     28 53 E2 F8 | 	getbyte	_var13, _var12, #0
02b0c     29 4F 0A F2 | 	cmp	_var11, _var13 wz
02b10     A0 00 90 5D |  if_ne	jmp	#LR__0121
02b14     09 3A 06 F1 | 	add	_var01, #9
02b18     1D 55 C2 FA | 	rdbyte	_var14, _var01
02b1c     09 3A 86 F1 | 	sub	_var01, #9
02b20     2A 57 E2 F8 | 	getbyte	_var15, _var14, #0
02b24     09 3C 06 F1 | 	add	_var02, #9
02b28     1E 59 C2 FA | 	rdbyte	_var16, _var02
02b2c     09 3C 86 F1 | 	sub	_var02, #9
02b30     2C 5B E2 F8 | 	getbyte	_var17, _var16, #0
02b34     2D 57 0A F2 | 	cmp	_var15, _var17 wz
02b38     78 00 90 5D |  if_ne	jmp	#LR__0121
02b3c     0A 3A 06 F1 | 	add	_var01, #10
02b40     1D 5D C2 FA | 	rdbyte	_var18, _var01
02b44     0A 3A 86 F1 | 	sub	_var01, #10
02b48     2E 5F E2 F8 | 	getbyte	_var19, _var18, #0
02b4c     0A 3C 06 F1 | 	add	_var02, #10
02b50     1E 61 C2 FA | 	rdbyte	_var20, _var02
02b54     0A 3C 86 F1 | 	sub	_var02, #10
02b58     30 63 E2 F8 | 	getbyte	_var21, _var20, #0
02b5c     31 5F 0A F2 | 	cmp	_var19, _var21 wz
02b60     50 00 90 5D |  if_ne	jmp	#LR__0121
02b64     0B 3A 06 F1 | 	add	_var01, #11
02b68     1D 65 C2 FA | 	rdbyte	_var22, _var01
02b6c     0B 3A 86 F1 | 	sub	_var01, #11
02b70     32 67 E2 F8 | 	getbyte	_var23, _var22, #0
02b74     0B 3C 06 F1 | 	add	_var02, #11
02b78     1E 69 C2 FA | 	rdbyte	_var24, _var02
02b7c     0B 3C 86 F1 | 	sub	_var02, #11
02b80     34 6B E2 F8 | 	getbyte	_var25, _var24, #0
02b84     35 67 0A F2 | 	cmp	_var23, _var25 wz
02b88     28 00 90 5D |  if_ne	jmp	#LR__0121
02b8c     0C 3A 06 F1 | 	add	_var01, #12
02b90     1D 6D C2 FA | 	rdbyte	_var26, _var01
02b94     0C 3A 86 F1 | 	sub	_var01, #12
02b98     36 6F E2 F8 | 	getbyte	_var27, _var26, #0
02b9c     0C 3C 06 F1 | 	add	_var02, #12
02ba0     1E 71 C2 FA | 	rdbyte	_var28, _var02
02ba4     0C 3C 86 F1 | 	sub	_var02, #12
02ba8     38 73 E2 F8 | 	getbyte	_var29, _var28, #0
02bac     39 6F 0A F2 | 	cmp	_var27, _var29 wz
02bb0     01 40 06 A6 |  if_e	mov	_var04, #1
02bb4                 | LR__0121
02bb4     20 35 02 F6 | 	mov	result1, _var04
02bb8                 | _state_machine_check_equal_ret
02bb8     2D 00 64 FD | 	ret
02bbc                 | 
02bbc                 | _state_machine_motion_equal
02bbc     3A 3B 02 F6 | 	mov	_var01, arg01
02bc0     3B 3D 02 F6 | 	mov	_var02, arg02
02bc4                 | ' {
02bc4                 | '     return motionParameters1->status == motionParameters2->status &&
02bc4     1D 3F 02 FB | 	rdlong	_var03, _var01
02bc8     00 40 06 F6 | 	mov	_var04, #0
02bcc     1E 43 02 FB | 	rdlong	_var05, _var02
02bd0     21 3F 0A F2 | 	cmp	_var03, _var05 wz
02bd4     50 00 90 5D |  if_ne	jmp	#LR__0122
02bd8     08 3A 06 F1 | 	add	_var01, #8
02bdc     1D 45 02 FB | 	rdlong	_var06, _var01
02be0     08 3A 86 F1 | 	sub	_var01, #8
02be4     22 47 02 F6 | 	mov	_var07, _var06
02be8     08 3C 06 F1 | 	add	_var02, #8
02bec     1E 49 02 FB | 	rdlong	_var08, _var02
02bf0     08 3C 86 F1 | 	sub	_var02, #8
02bf4     24 4B 02 F6 | 	mov	_var09, _var08
02bf8     25 47 0A F2 | 	cmp	_var07, _var09 wz
02bfc     28 00 90 5D |  if_ne	jmp	#LR__0122
02c00     04 3A 06 F1 | 	add	_var01, #4
02c04     1D 4D 02 FB | 	rdlong	_var10, _var01
02c08     04 3A 86 F1 | 	sub	_var01, #4
02c0c     26 4F 02 F6 | 	mov	_var11, _var10
02c10     04 3C 06 F1 | 	add	_var02, #4
02c14     1E 51 02 FB | 	rdlong	_var12, _var02
02c18     04 3C 86 F1 | 	sub	_var02, #4
02c1c     28 53 02 F6 | 	mov	_var13, _var12
02c20     29 4F 0A F2 | 	cmp	_var11, _var13 wz
02c24     01 40 06 A6 |  if_e	mov	_var04, #1
02c28                 | LR__0122
02c28     20 35 02 F6 | 	mov	result1, _var04
02c2c                 | _state_machine_motion_equal_ret
02c2c     2D 00 64 FD | 	ret
02c30                 | 
02c30                 | _state_machine_equal
02c30     10 4C 05 F6 | 	mov	COUNT_, #16
02c34     A9 00 A0 FD | 	call	#pushregs_
02c38     3A 8D 02 F6 | 	mov	local01, arg01
02c3c     3B 8F 02 F6 | 	mov	local02, arg02
02c40                 | ' {
02c40                 | '     return state_machine_self_check_equal(&(machineState1->selfCheckParameters), &(machineState2->selfCheckParameters)) &&
02c40     00 90 06 F6 | 	mov	local03, #0
02c44     04 8C 06 F1 | 	add	local01, #4
02c48     46 75 02 F6 | 	mov	arg01, local01
02c4c     04 8C 86 F1 | 	sub	local01, #4
02c50     04 8E 06 F1 | 	add	local02, #4
02c54     47 77 02 F6 | 	mov	arg02, local02
02c58     04 8E 86 F1 | 	sub	local02, #4
02c5c                 | ' {
02c5c                 | '     return selfCheckParameters1->chargePump == selfCheckParameters2->chargePump;
02c5c     3A 75 C2 FA | 	rdbyte	arg01, arg01
02c60     00 34 06 F6 | 	mov	result1, #0
02c64     3B 77 C2 FA | 	rdbyte	arg02, arg02
02c68     3B 75 0A F2 | 	cmp	arg01, arg02 wz
02c6c     01 34 06 A6 |  if_e	mov	result1, #1
02c70     1A 93 0A F6 | 	mov	local04, result1 wz
02c74     A8 00 90 AD |  if_e	jmp	#LR__0123
02c78     08 8C 06 F1 | 	add	local01, #8
02c7c     46 75 02 F6 | 	mov	arg01, local01
02c80     08 8C 86 F1 | 	sub	local01, #8
02c84     08 8E 06 F1 | 	add	local02, #8
02c88     47 77 02 F6 | 	mov	arg02, local02
02c8c     08 8E 86 F1 | 	sub	local02, #8
02c90     14 FE BF FD | 	call	#_state_machine_check_equal
02c94     1A 95 0A F6 | 	mov	local05, result1 wz
02c98     84 00 90 AD |  if_e	jmp	#LR__0123
02c9c     18 8C 06 F1 | 	add	local01, #24
02ca0     46 75 02 F6 | 	mov	arg01, local01
02ca4     18 8C 86 F1 | 	sub	local01, #24
02ca8     18 8E 06 F1 | 	add	local02, #24
02cac     47 77 02 F6 | 	mov	arg02, local02
02cb0     18 8E 86 F1 | 	sub	local02, #24
02cb4     04 FF BF FD | 	call	#_state_machine_motion_equal
02cb8     1A 97 0A F6 | 	mov	local06, result1 wz
02cbc     60 00 90 AD |  if_e	jmp	#LR__0123
02cc0     46 99 02 FB | 	rdlong	local07, local01
02cc4     47 9B 02 FB | 	rdlong	local08, local02
02cc8     4D 99 0A F2 | 	cmp	local07, local08 wz
02ccc     50 00 90 5D |  if_ne	jmp	#LR__0123
02cd0     24 8C 06 F1 | 	add	local01, #36
02cd4     46 9D 02 FB | 	rdlong	local09, local01
02cd8     24 8C 86 F1 | 	sub	local01, #36
02cdc     4E 9F 02 F6 | 	mov	local10, local09
02ce0     24 8E 06 F1 | 	add	local02, #36
02ce4     47 A1 02 FB | 	rdlong	local11, local02
02ce8     24 8E 86 F1 | 	sub	local02, #36
02cec     50 A3 02 F6 | 	mov	local12, local11
02cf0     51 9F 0A F2 | 	cmp	local10, local12 wz
02cf4     28 00 90 5D |  if_ne	jmp	#LR__0123
02cf8     28 8C 06 F1 | 	add	local01, #40
02cfc     46 A5 02 FB | 	rdlong	local13, local01
02d00     28 8C 86 F1 | 	sub	local01, #40
02d04     52 A7 02 F6 | 	mov	local14, local13
02d08     28 8E 06 F1 | 	add	local02, #40
02d0c     47 A9 02 FB | 	rdlong	local15, local02
02d10     28 8E 86 F1 | 	sub	local02, #40
02d14     54 AB 02 F6 | 	mov	local16, local15
02d18     55 A7 0A F2 | 	cmp	local14, local16 wz
02d1c     01 90 66 A5 |  if_e	xor	local03, #1
02d20                 | LR__0123
02d20     48 35 02 F6 | 	mov	result1, local03
02d24     A8 F0 03 F6 | 	mov	ptra, fp
02d28     B3 00 A0 FD | 	call	#popregs_
02d2c                 | _state_machine_equal_ret
02d2c     2D 00 64 FD | 	ret
02d30                 | 
02d30                 | _display_begin
02d30     07 4C 05 F6 | 	mov	COUNT_, #7
02d34     A9 00 A0 FD | 	call	#pushregs_
02d38     3A 8D 02 F6 | 	mov	local01, arg01
02d3c     3B 8F 02 F6 | 	mov	local02, arg02
02d40     3F 91 02 F6 | 	mov	local03, arg06
02d44     40 93 02 F6 | 	mov	local04, arg07
02d48     41 95 02 F6 | 	mov	local05, arg08
02d4c     04 8C 06 F1 | 	add	local01, #4
02d50     46 8F 62 FC | 	wrlong	local02, local01
02d54     04 8C 86 F1 | 	sub	local01, #4
02d58     46 79 62 FC | 	wrlong	arg03, local01
02d5c     10 8C 06 F1 | 	add	local01, #16
02d60     46 91 62 FC | 	wrlong	local03, local01
02d64     08 8C 86 F1 | 	sub	local01, #8
02d68     46 7B 62 FC | 	wrlong	arg04, local01
02d6c     04 8C 06 F1 | 	add	local01, #4
02d70     46 7D 62 FC | 	wrlong	arg05, local01
02d74     2C 8C 06 F1 | 	add	local01, #44
02d78     3E 75 02 F6 | 	mov	arg01, arg05
02d7c     3D 77 02 F6 | 	mov	arg02, arg04
02d80     48 79 02 F6 | 	mov	arg03, local03
02d84     13 00 00 FF 
02d88     10 7B 06 F6 | 	mov	arg04, ##10000
02d8c     C9 96 02 F6 | 	mov	local06, objptr
02d90     46 93 01 F6 | 	mov	objptr, local01
02d94     D8 8C B1 FD | 	call	#_jm_spi_spin2_start
02d98     0C 8C 86 F1 | 	sub	local01, #12
02d9c     46 93 01 F6 | 	mov	objptr, local01
02da0     49 75 02 F6 | 	mov	arg01, local04
02da4     4A 77 02 F6 | 	mov	arg02, local05
02da8     64 78 06 F6 | 	mov	arg03, #100
02dac     01 7A 06 F6 | 	mov	arg04, #1
02db0     F8 86 B1 FD | 	call	#_jm_i2c_spin2_setup
02db4     4B 93 01 F6 | 	mov	objptr, local06
02db8     18 8C 86 F1 | 	sub	local01, #24
02dbc     46 75 69 FC | 	wrlong	#186, local01
02dc0     04 8C 06 F1 | 	add	local01, #4
02dc4     46 77 69 FC | 	wrlong	#187, local01
02dc8     14 8C 86 F1 | 	sub	local01, #20
02dcc     46 75 02 FB | 	rdlong	arg01, local01
02dd0     58 74 62 FD | 	drvl	arg01
02dd4     02 74 06 F6 | 	mov	arg01, #2
02dd8     5C 26 B2 FD | 	call	#__system___waitms
02ddc     46 75 02 FB | 	rdlong	arg01, local01
02de0     04 8C 86 F1 | 	sub	local01, #4
02de4     59 74 62 FD | 	drvh	arg01
02de8     02 74 06 F6 | 	mov	arg01, #2
02dec     48 26 B2 FD | 	call	#__system___waitms
02df0     01 00 00 FF 
02df4     E8 75 06 F6 | 	mov	arg01, ##1000
02df8     3C 26 B2 FD | 	call	#__system___waitms
02dfc     AC 00 00 FF 
02e00     B0 D6 05 F1 | 	add	ptr__dat__, ##88240
02e04     EB 76 02 F6 | 	mov	arg02, ptr__dat__
02e08     AC 00 00 FF 
02e0c     B0 D6 85 F1 | 	sub	ptr__dat__, ##88240
02e10     46 75 02 F6 | 	mov	arg01, local01
02e14     BA 78 06 F6 | 	mov	arg03, #186
02e18     10 1D B0 FD | 	call	#_display_gt9271_send_cfg
02e1c     46 75 02 FB | 	rdlong	arg01, local01
02e20     59 74 62 FD | 	drvh	arg01
02e24     58 90 62 FD | 	drvl	local03
02e28     59 8E 62 FD | 	drvh	local02
02e2c     01 74 06 F6 | 	mov	arg01, #1
02e30     04 26 B2 FD | 	call	#__system___waitms
02e34     04 8C 06 F1 | 	add	local01, #4
02e38     46 75 02 FB | 	rdlong	arg01, local01
02e3c     04 8C 86 F1 | 	sub	local01, #4
02e40     58 74 62 FD | 	drvl	arg01
02e44     01 74 06 F6 | 	mov	arg01, #1
02e48     EC 25 B2 FD | 	call	#__system___waitms
02e4c     59 8E 62 FD | 	drvh	local02
02e50     0A 74 06 F6 | 	mov	arg01, #10
02e54     E0 25 B2 FD | 	call	#__system___waitms
02e58     01 76 06 F6 | 	mov	arg02, #1
02e5c     08 78 06 F6 | 	mov	arg03, #8
02e60     46 75 02 F6 | 	mov	arg01, local01
02e64     A8 28 B0 FD | 	call	#_lcdRegWrite
02e68     46 75 02 F6 | 	mov	arg01, local01
02e6c     08 76 06 F6 | 	mov	arg02, #8
02e70     00 29 B0 FD | 	call	#_lcdDataWrite
02e74     64 74 06 F6 | 	mov	arg01, #100
02e78     BC 25 B2 FD | 	call	#__system___waitms
02e7c     46 75 02 F6 | 	mov	arg01, local01
02e80     FF 76 06 F6 | 	mov	arg02, #255
02e84     3A 97 02 F6 | 	mov	local06, arg01
02e88     84 28 B0 FD | 	call	#_lcdRegWrite
02e8c     4B 75 02 F6 | 	mov	arg01, local06
02e90     44 29 B0 FD | 	call	#_lcdDataRead
02e94                 | ' {
02e94                 | '   lcdRegWrite(display, reg);
02e94                 | '   lcdDataWrite(display, data);
02e94                 | ' }
02e94                 | ' 
02e94                 | ' 
02e94                 | ' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
02e94                 | ' {
02e94                 | '   lcdRegWrite(display, reg);
02e94                 | '   uint8_t data = lcdDataRead(display);
02e94                 | '   return data;
02e94     1A 97 E2 F8 | 	getbyte	local06, result1, #0
02e98     76 96 0E F2 | 	cmp	local06, #118 wz
02e9c     6C 00 90 AD |  if_e	jmp	#LR__0124
02ea0     46 75 02 F6 | 	mov	arg01, local01
02ea4     FF 76 06 F6 | 	mov	arg02, #255
02ea8     3A 95 02 F6 | 	mov	local05, arg01
02eac     60 28 B0 FD | 	call	#_lcdRegWrite
02eb0     4A 75 02 F6 | 	mov	arg01, local05
02eb4     20 29 B0 FD | 	call	#_lcdDataRead
02eb8                 | ' {
02eb8                 | '   lcdRegWrite(display, reg);
02eb8                 | '   lcdDataWrite(display, data);
02eb8                 | ' }
02eb8                 | ' 
02eb8                 | ' 
02eb8                 | ' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
02eb8                 | ' {
02eb8                 | '   lcdRegWrite(display, reg);
02eb8                 | '   uint8_t data = lcdDataRead(display);
02eb8                 | '   return data;
02eb8     1A 95 E2 F8 | 	getbyte	local05, result1, #0
02ebc     77 94 0E F2 | 	cmp	local05, #119 wz
02ec0     48 00 90 AD |  if_e	jmp	#LR__0124
02ec4     00 74 06 F6 | 	mov	arg01, #0
02ec8     7C 5C B2 FD | 	call	#__system___getiolock_1205
02ecc     1A 75 02 F6 | 	mov	arg01, result1
02ed0     4C 24 B2 FD | 	call	#__system___lockmem
02ed4     47 01 00 FF 
02ed8     20 77 06 F6 | 	mov	arg02, ##@LR__1815
02edc     00 74 06 F6 | 	mov	arg01, #0
02ee0     00 78 06 F6 | 	mov	arg03, #0
02ee4     CC 29 B2 FD | 	call	#__system___basic_print_string
02ee8     00 74 06 F6 | 	mov	arg01, #0
02eec     0A 76 06 F6 | 	mov	arg02, #10
02ef0     00 78 06 F6 | 	mov	arg03, #0
02ef4     70 29 B2 FD | 	call	#__system___basic_print_char
02ef8     00 74 06 F6 | 	mov	arg01, #0
02efc     48 5C B2 FD | 	call	#__system___getiolock_1205
02f00     1A 01 68 FC | 	wrlong	#0, result1
02f04                 | '     return DISPLAY_NOT_FOUND;
02f04     02 34 06 F6 | 	mov	result1, #2
02f08     70 00 90 FD | 	jmp	#LR__0126
02f0c                 | LR__0124
02f0c     46 75 02 F6 | 	mov	arg01, local01
02f10     B4 17 B0 FD | 	call	#_display_initialize
02f14     1A 99 0A F6 | 	mov	local07, result1 wz
02f18     5C 00 90 AD |  if_e	jmp	#LR__0125
02f1c     00 74 06 F6 | 	mov	arg01, #0
02f20     24 5C B2 FD | 	call	#__system___getiolock_1205
02f24     1A 75 02 F6 | 	mov	arg01, result1
02f28     F4 23 B2 FD | 	call	#__system___lockmem
02f2c     47 01 00 FF 
02f30     32 77 06 F6 | 	mov	arg02, ##@LR__1816
02f34     00 74 06 F6 | 	mov	arg01, #0
02f38     00 78 06 F6 | 	mov	arg03, #0
02f3c     74 29 B2 FD | 	call	#__system___basic_print_string
02f40     00 74 06 F6 | 	mov	arg01, #0
02f44     4C 77 02 F6 | 	mov	arg02, local07
02f48     00 78 06 F6 | 	mov	arg03, #0
02f4c     0A 7A 06 F6 | 	mov	arg04, #10
02f50     A4 29 B2 FD | 	call	#__system___basic_print_integer
02f54     00 74 06 F6 | 	mov	arg01, #0
02f58     0A 76 06 F6 | 	mov	arg02, #10
02f5c     00 78 06 F6 | 	mov	arg03, #0
02f60     04 29 B2 FD | 	call	#__system___basic_print_char
02f64     00 74 06 F6 | 	mov	arg01, #0
02f68     DC 5B B2 FD | 	call	#__system___getiolock_1205
02f6c     1A 01 68 FC | 	wrlong	#0, result1
02f70                 | '     return err;
02f70     4C 35 02 F6 | 	mov	result1, local07
02f74     04 00 90 FD | 	jmp	#LR__0126
02f78                 | LR__0125
02f78                 | '   }
02f78                 | '   return SUCCESS;
02f78     00 34 06 F6 | 	mov	result1, #0
02f7c                 | LR__0126
02f7c     A8 F0 03 F6 | 	mov	ptra, fp
02f80     B3 00 A0 FD | 	call	#popregs_
02f84                 | _display_begin_ret
02f84     2D 00 64 FD | 	ret
02f88                 | 
02f88                 | _display_load_image
02f88     08 4C 05 F6 | 	mov	COUNT_, #8
02f8c     A9 00 A0 FD | 	call	#pushregs_
02f90     3A 8D 02 F6 | 	mov	local01, arg01
02f94     3B 8F 02 F6 | 	mov	local02, arg02
02f98     00 74 06 F6 | 	mov	arg01, #0
02f9c     A8 5B B2 FD | 	call	#__system___getiolock_1205
02fa0     1A 75 02 F6 | 	mov	arg01, result1
02fa4     78 23 B2 FD | 	call	#__system___lockmem
02fa8     47 01 00 FF 
02fac     39 77 06 F6 | 	mov	arg02, ##@LR__1817
02fb0     00 74 06 F6 | 	mov	arg01, #0
02fb4     00 78 06 F6 | 	mov	arg03, #0
02fb8     F8 28 B2 FD | 	call	#__system___basic_print_string
02fbc     00 74 06 F6 | 	mov	arg01, #0
02fc0     47 77 02 F6 | 	mov	arg02, local02
02fc4     00 78 06 F6 | 	mov	arg03, #0
02fc8     E8 28 B2 FD | 	call	#__system___basic_print_string
02fcc     00 74 06 F6 | 	mov	arg01, #0
02fd0     0A 76 06 F6 | 	mov	arg02, #10
02fd4     00 78 06 F6 | 	mov	arg03, #0
02fd8     8C 28 B2 FD | 	call	#__system___basic_print_char
02fdc     00 74 06 F6 | 	mov	arg01, #0
02fe0     64 5B B2 FD | 	call	#__system___getiolock_1205
02fe4     1A 01 68 FC | 	wrlong	#0, result1
02fe8     14 8E 06 F1 | 	add	local02, #20
02fec     47 91 02 FB | 	rdlong	local03, local02
02ff0     14 8E 86 F1 | 	sub	local02, #20
02ff4     01 90 0E F2 | 	cmp	local03, #1 wz
02ff8     10 00 90 5D |  if_ne	jmp	#LR__0127
02ffc     46 75 02 F6 | 	mov	arg01, local01
03000     00 76 06 F6 | 	mov	arg02, #0
03004     CC 08 B0 FD | 	call	#_display_canvas_image_start_address
03008     48 00 90 FD | 	jmp	#LR__0130
0300c                 | LR__0127
0300c     14 8E 06 F1 | 	add	local02, #20
03010     47 91 02 FB | 	rdlong	local03, local02
03014     14 8E 86 F1 | 	sub	local02, #20
03018     02 90 0E F2 | 	cmp	local03, #2 wz
0301c     14 00 90 5D |  if_ne	jmp	#LR__0128
03020     46 75 02 F6 | 	mov	arg01, local01
03024     60 09 00 FF 
03028     00 76 06 F6 | 	mov	arg02, ##1228800
0302c     A4 08 B0 FD | 	call	#_display_canvas_image_start_address
03030     20 00 90 FD | 	jmp	#LR__0129
03034                 | LR__0128
03034     14 8E 06 F1 | 	add	local02, #20
03038     47 91 02 FB | 	rdlong	local03, local02
0303c     14 8E 86 F1 | 	sub	local02, #20
03040     03 90 0E F2 | 	cmp	local03, #3 wz
03044     46 75 02 A6 |  if_e	mov	arg01, local01
03048     C0 12 00 AF 
0304c     00 76 06 A6 |  if_e	mov	arg02, ##2457600
03050     80 08 B0 AD |  if_e	call	#_display_canvas_image_start_address
03054                 | LR__0129
03054                 | LR__0130
03054     47 01 00 FF 
03058     48 75 06 F6 | 	mov	arg01, ##@LR__1818
0305c     00 76 06 F6 | 	mov	arg02, #0
03060     94 EA BF FD | 	call	#_mkdir
03064     47 01 00 FF 
03068     50 75 06 F6 | 	mov	arg01, ##@LR__1819
0306c     B4 E8 BF FD | 	call	#_chdir
03070     00 74 06 F6 | 	mov	arg01, #0
03074     D0 5A B2 FD | 	call	#__system___getiolock_1205
03078     1A 75 02 F6 | 	mov	arg01, result1
0307c     A0 22 B2 FD | 	call	#__system___lockmem
03080     47 01 00 FF 
03084     58 77 06 F6 | 	mov	arg02, ##@LR__1820
03088     00 74 06 F6 | 	mov	arg01, #0
0308c     00 78 06 F6 | 	mov	arg03, #0
03090     20 28 B2 FD | 	call	#__system___basic_print_string
03094     00 74 06 F6 | 	mov	arg01, #0
03098     47 77 02 F6 | 	mov	arg02, local02
0309c     00 78 06 F6 | 	mov	arg03, #0
030a0     10 28 B2 FD | 	call	#__system___basic_print_string
030a4     00 74 06 F6 | 	mov	arg01, #0
030a8     0A 76 06 F6 | 	mov	arg02, #10
030ac     00 78 06 F6 | 	mov	arg03, #0
030b0     B4 27 B2 FD | 	call	#__system___basic_print_char
030b4     00 74 06 F6 | 	mov	arg01, #0
030b8     8C 5A B2 FD | 	call	#__system___getiolock_1205
030bc     1A 01 68 FC | 	wrlong	#0, result1
030c0     47 01 00 FF 
030c4     67 77 06 F6 | 	mov	arg02, ##@LR__1821
030c8     47 75 02 F6 | 	mov	arg01, local02
030cc     24 ED BF FD | 	call	#_fopen
030d0     1A 93 0A F6 | 	mov	local04, result1 wz
030d4     B4 00 90 5D |  if_ne	jmp	#LR__0131
030d8     00 74 06 F6 | 	mov	arg01, #0
030dc     68 5A B2 FD | 	call	#__system___getiolock_1205
030e0     1A 75 02 F6 | 	mov	arg01, result1
030e4     38 22 B2 FD | 	call	#__system___lockmem
030e8     47 01 00 FF 
030ec     69 77 06 F6 | 	mov	arg02, ##@LR__1822
030f0     00 74 06 F6 | 	mov	arg01, #0
030f4     00 78 06 F6 | 	mov	arg03, #0
030f8     B8 27 B2 FD | 	call	#__system___basic_print_string
030fc     00 74 06 F6 | 	mov	arg01, #0
03100     47 77 02 F6 | 	mov	arg02, local02
03104     00 78 06 F6 | 	mov	arg03, #0
03108     A8 27 B2 FD | 	call	#__system___basic_print_string
0310c     47 01 00 FF 
03110     7D 77 06 F6 | 	mov	arg02, ##@LR__1823
03114     00 74 06 F6 | 	mov	arg01, #0
03118     00 78 06 F6 | 	mov	arg03, #0
0311c     94 27 B2 FD | 	call	#__system___basic_print_string
03120     00 74 06 F6 | 	mov	arg01, #0
03124     18 A2 05 F1 | 	add	ptr___system__dat__, #24
03128     D1 76 02 FB | 	rdlong	arg02, ptr___system__dat__
0312c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
03130     00 78 06 F6 | 	mov	arg03, #0
03134     0A 7A 06 F6 | 	mov	arg04, #10
03138     BC 27 B2 FD | 	call	#__system___basic_print_integer
0313c     00 74 06 F6 | 	mov	arg01, #0
03140     0A 76 06 F6 | 	mov	arg02, #10
03144     00 78 06 F6 | 	mov	arg03, #0
03148     1C 27 B2 FD | 	call	#__system___basic_print_char
0314c     00 74 06 F6 | 	mov	arg01, #0
03150     F4 59 B2 FD | 	call	#__system___getiolock_1205
03154     1A 01 68 FC | 	wrlong	#0, result1
03158     46 75 02 F6 | 	mov	arg01, local01
0315c     00 76 06 F6 | 	mov	arg02, #0
03160     70 07 B0 FD | 	call	#_display_canvas_image_start_address
03164     46 75 02 F6 | 	mov	arg01, local01
03168     00 76 06 F6 | 	mov	arg02, #0
0316c     00 78 06 F6 | 	mov	arg03, #0
03170     74 08 B0 FD | 	call	#_display_active_window_xy
03174     46 75 02 F6 | 	mov	arg01, local01
03178     0A 76 C6 F9 | 	decod	arg02, #10
0317c     01 00 00 FF 
03180     58 78 06 F6 | 	mov	arg03, ##600
03184     08 09 B0 FD | 	call	#_display_active_window_wh
03188                 | '     display_canvas_image_start_address(display,  0 );
03188                 | '     display_active_window_xy(display, 0, 0);
03188                 | '     display_active_window_wh(display,  1024 ,  600 );
03188                 | '     return;
03188     18 01 90 FD | 	jmp	#LR__0135
0318c                 | LR__0131
0318c     18 8E 06 F1 | 	add	local02, #24
03190     47 77 02 FB | 	rdlong	arg02, local02
03194     04 8E 06 F1 | 	add	local02, #4
03198     47 79 02 FB | 	rdlong	arg03, local02
0319c     04 8E 06 F1 | 	add	local02, #4
031a0     47 7B 02 FB | 	rdlong	arg04, local02
031a4     04 8E 06 F1 | 	add	local02, #4
031a8     47 7D 02 FB | 	rdlong	arg05, local02
031ac     46 75 02 F6 | 	mov	arg01, local01
031b0     3C 0B B0 FD | 	call	#_display_put_picture_16bpp
031b4     04 8E 86 F1 | 	sub	local02, #4
031b8     47 95 02 FB | 	rdlong	local05, local02
031bc     04 8E 06 F1 | 	add	local02, #4
031c0     47 91 02 FB | 	rdlong	local03, local02
031c4     48 95 02 FD | 	qmul	local05, local03
031c8     24 8E 86 F1 | 	sub	local02, #36
031cc     00 96 06 F6 | 	mov	local06, #0
031d0                 | ' 
031d0                 | '   for (int i = 0; i < imageSize; i++)
031d0     18 98 62 FD | 	getqx	local07
031d4                 | LR__0132
031d4     4C 97 52 F2 | 	cmps	local06, local07 wc
031d8     90 00 90 3D |  if_ae	jmp	#LR__0134
031dc     49 75 02 F6 | 	mov	arg01, local04
031e0     04 EA BF FD | 	call	#_fgetc
031e4     1A 95 02 F6 | 	mov	local05, result1
031e8     FF FF 7F FF 
031ec     FF 95 0E F2 | 	cmp	local05, ##-1 wz
031f0                 | '       break;
031f0     78 00 90 AD |  if_e	jmp	#LR__0134
031f4     4A 9B 02 F6 | 	mov	local08, local05
031f8     49 75 02 F6 | 	mov	arg01, local04
031fc     E8 E9 BF FD | 	call	#_fgetc
03200     FF FF 7F FF 
03204     FF 35 0E F2 | 	cmp	result1, ##-1 wz
03208                 | '       break;
03208     60 00 90 AD |  if_e	jmp	#LR__0134
0320c     4D 9B 32 F9 | 	getword	local08, local08, #0
03210     08 34 66 F0 | 	shl	result1, #8
03214     1A 9B 42 F5 | 	or	local08, result1
03218     4D 91 32 F9 | 	getword	local03, local08, #0
0321c     2A 8E 06 F1 | 	add	local02, #42
03220     47 95 E2 FA | 	rdword	local05, local02
03224     2A 8E 86 F1 | 	sub	local02, #42
03228     4A 91 0A F2 | 	cmp	local03, local05 wz
0322c     28 00 90 5D |  if_ne	jmp	#LR__0133
03230     2A 8E 06 F1 | 	add	local02, #42
03234     47 95 E2 FA | 	rdword	local05, local02
03238     02 8E 06 F1 | 	add	local02, #2
0323c     47 35 E2 FA | 	rdword	result1, local02
03240     2C 8E 86 F1 | 	sub	local02, #44
03244     1A 95 0A F2 | 	cmp	local05, result1 wz
03248     2C 8E 06 51 |  if_ne	add	local02, #44
0324c     47 91 E2 5A |  if_ne	rdword	local03, local02
03250     2C 8E 86 51 |  if_ne	sub	local02, #44
03254     48 9B 02 56 |  if_ne	mov	local08, local03
03258                 | LR__0133
03258     46 75 02 F6 | 	mov	arg01, local01
0325c     4D 77 02 F6 | 	mov	arg02, local08
03260     7C 26 B0 FD | 	call	#_lcdDataWrite16bbp
03264     01 96 06 F1 | 	add	local06, #1
03268     68 FF 9F FD | 	jmp	#LR__0132
0326c                 | LR__0134
0326c     49 75 02 F6 | 	mov	arg01, local04
03270                 | ' {
03270                 | '     return _closeraw(f);
03270     88 DD BF FD | 	call	#__closeraw
03274     46 75 02 F6 | 	mov	arg01, local01
03278     00 76 06 F6 | 	mov	arg02, #0
0327c     54 06 B0 FD | 	call	#_display_canvas_image_start_address
03280     46 75 02 F6 | 	mov	arg01, local01
03284     00 76 06 F6 | 	mov	arg02, #0
03288     00 78 06 F6 | 	mov	arg03, #0
0328c     58 07 B0 FD | 	call	#_display_active_window_xy
03290     46 75 02 F6 | 	mov	arg01, local01
03294     0A 76 C6 F9 | 	decod	arg02, #10
03298     01 00 00 FF 
0329c     58 78 06 F6 | 	mov	arg03, ##600
032a0     EC 07 B0 FD | 	call	#_display_active_window_wh
032a4                 | LR__0135
032a4     A8 F0 03 F6 | 	mov	ptra, fp
032a8     B3 00 A0 FD | 	call	#popregs_
032ac                 | _display_load_image_ret
032ac     2D 00 64 FD | 	ret
032b0                 | 
032b0                 | _display_bte_memory_copy_image
032b0     07 4C 05 F6 | 	mov	COUNT_, #7
032b4     A9 00 A0 FD | 	call	#pushregs_
032b8     3A 8D 02 F6 | 	mov	local01, arg01
032bc     3B 8F 02 F6 | 	mov	local02, arg02
032c0     3C 91 02 F6 | 	mov	local03, arg03
032c4     3D 93 02 F6 | 	mov	local04, arg04
032c8     00 94 06 F6 | 	mov	local05, #0
032cc                 | '   switch (image->page)
032cc     14 8E 06 F1 | 	add	local02, #20
032d0     47 97 02 FB | 	rdlong	local06, local02
032d4     14 8E 86 F1 | 	sub	local02, #20
032d8     4B 99 02 F6 | 	mov	local07, local06
032dc     01 98 86 F1 | 	sub	local07, #1
032e0     03 98 26 F3 | 	fle	local07, #3
032e4     30 98 62 FD | 	jmprel	local07
032e8                 | LR__0136
032e8     0C 00 90 FD | 	jmp	#LR__0137
032ec     10 00 90 FD | 	jmp	#LR__0138
032f0     18 00 90 FD | 	jmp	#LR__0139
032f4     20 00 90 FD | 	jmp	#LR__0140
032f8                 | LR__0137
032f8     00 94 06 F6 | 	mov	local05, #0
032fc                 | '     pageAddr =  0 ;
032fc                 | '     break;
032fc     18 00 90 FD | 	jmp	#LR__0141
03300                 | LR__0138
03300     60 09 00 FF 
03304     00 94 06 F6 | 	mov	local05, ##1228800
03308                 | '     pageAddr =  1024 * 600 * 2 ;
03308                 | '     break;
03308     0C 00 90 FD | 	jmp	#LR__0141
0330c                 | LR__0139
0330c     C0 12 00 FF 
03310     00 94 06 F6 | 	mov	local05, ##2457600
03314                 | '     pageAddr =  1024 * 600 * 2 * 2 ;
03314                 | '     break;
03314     00 00 90 FD | 	jmp	#LR__0141
03318                 | LR__0140
03318                 | '     break;
03318                 | LR__0141
03318     28 8E 06 F1 | 	add	local02, #40
0331c     47 97 E2 FA | 	rdword	local06, local02
03320     28 8E 86 F1 | 	sub	local02, #40
03324     0F 96 4E F7 | 	zerox	local06, #15 wz
03328     50 00 90 AD |  if_e	jmp	#LR__0142
0332c     46 75 02 F6 | 	mov	arg01, local01
03330     18 8E 06 F1 | 	add	local02, #24
03334     47 7B 02 FB | 	rdlong	arg04, local02
03338     04 8E 06 F1 | 	add	local02, #4
0333c     47 7D 02 FB | 	rdlong	arg05, local02
03340     48 8C 06 F1 | 	add	local01, #72
03344     46 7F 02 FB | 	rdlong	arg06, local01
03348     04 8E 06 F1 | 	add	local02, #4
0334c     47 87 02 FB | 	rdlong	arg10, local02
03350     04 8E 06 F1 | 	add	local02, #4
03354     47 89 02 FB | 	rdlong	arg11, local02
03358     04 8E 06 F1 | 	add	local02, #4
0335c     47 8B E2 FA | 	rdword	arg12, local02
03360     4A 77 02 F6 | 	mov	arg02, local05
03364     0A 78 C6 F9 | 	decod	arg03, #10
03368     0A 80 C6 F9 | 	decod	arg07, #10
0336c     48 83 02 F6 | 	mov	arg08, local03
03370     49 85 02 F6 | 	mov	arg09, local04
03374     40 12 B0 FD | 	call	#_display_bte_memory_copy_with_chroma_key
03378     44 00 90 FD | 	jmp	#LR__0143
0337c                 | LR__0142
0337c     46 75 02 F6 | 	mov	arg01, local01
03380     18 8E 06 F1 | 	add	local02, #24
03384     47 7B 02 FB | 	rdlong	arg04, local02
03388     04 8E 06 F1 | 	add	local02, #4
0338c     47 7D 02 FB | 	rdlong	arg05, local02
03390     48 8C 06 F1 | 	add	local01, #72
03394     46 7F 02 FB | 	rdlong	arg06, local01
03398     04 8E 06 F1 | 	add	local02, #4
0339c     47 87 02 FB | 	rdlong	arg10, local02
033a0     04 8E 06 F1 | 	add	local02, #4
033a4     47 89 02 FB | 	rdlong	arg11, local02
033a8     4A 77 02 F6 | 	mov	arg02, local05
033ac     0A 78 C6 F9 | 	decod	arg03, #10
033b0     0A 80 C6 F9 | 	decod	arg07, #10
033b4     48 83 02 F6 | 	mov	arg08, local03
033b8     49 85 02 F6 | 	mov	arg09, local04
033bc     F8 10 B0 FD | 	call	#_display_bte_memory_copy
033c0                 | LR__0143
033c0     A8 F0 03 F6 | 	mov	ptra, fp
033c4     B3 00 A0 FD | 	call	#popregs_
033c8                 | _display_bte_memory_copy_image_ret
033c8     2D 00 64 FD | 	ret
033cc                 | 
033cc                 | _display_on
033cc     02 4C 05 F6 | 	mov	COUNT_, #2
033d0     A9 00 A0 FD | 	call	#pushregs_
033d4     3A 8D 02 F6 | 	mov	local01, arg01
033d8     00 76 0E F2 | 	cmp	arg02, #0 wz
033dc     24 00 90 AD |  if_e	jmp	#LR__0144
033e0     12 76 06 F6 | 	mov	arg02, #18
033e4     C0 78 06 F6 | 	mov	arg03, #192
033e8     C0 8E 06 F6 | 	mov	local02, #192
033ec     46 75 02 F6 | 	mov	arg01, local01
033f0     1C 23 B0 FD | 	call	#_lcdRegWrite
033f4     46 75 02 F6 | 	mov	arg01, local01
033f8     47 77 02 F6 | 	mov	arg02, local02
033fc     74 23 B0 FD | 	call	#_lcdDataWrite
03400     20 00 90 FD | 	jmp	#LR__0145
03404                 | LR__0144
03404     12 76 06 F6 | 	mov	arg02, #18
03408     80 78 06 F6 | 	mov	arg03, #128
0340c     80 8E 06 F6 | 	mov	local02, #128
03410     46 75 02 F6 | 	mov	arg01, local01
03414     F8 22 B0 FD | 	call	#_lcdRegWrite
03418     46 75 02 F6 | 	mov	arg01, local01
0341c     47 77 02 F6 | 	mov	arg02, local02
03420     50 23 B0 FD | 	call	#_lcdDataWrite
03424                 | LR__0145
03424     14 74 06 F6 | 	mov	arg01, #20
03428     0C 20 B2 FD | 	call	#__system___waitms
0342c     A8 F0 03 F6 | 	mov	ptra, fp
03430     B3 00 A0 FD | 	call	#popregs_
03434                 | _display_on_ret
03434     2D 00 64 FD | 	ret
03438                 | 
03438                 | _display_lcd_horizontal_width_vertical_height
03438     04 4C 05 F6 | 	mov	COUNT_, #4
0343c     A9 00 A0 FD | 	call	#pushregs_
03440     3A 8D 02 F6 | 	mov	local01, arg01
03444     3B 8F 02 F6 | 	mov	local02, arg02
03448     3C 91 02 F6 | 	mov	local03, arg03
0344c     47 79 32 F9 | 	getword	arg03, local02, #0
03450     3C 79 52 F6 | 	abs	arg03, arg03 wc
03454     03 78 46 F0 | 	shr	arg03, #3
03458     3C 79 82 F6 | 	negc	arg03, arg03
0345c     01 78 86 F1 | 	sub	arg03, #1
03460     14 76 06 F6 | 	mov	arg02, #20
03464     3C 93 02 F6 | 	mov	local04, arg03
03468     46 75 02 F6 | 	mov	arg01, local01
0346c     A0 22 B0 FD | 	call	#_lcdRegWrite
03470     46 75 02 F6 | 	mov	arg01, local01
03474     49 77 02 F6 | 	mov	arg02, local04
03478     F8 22 B0 FD | 	call	#_lcdDataWrite
0347c     47 8F 32 F9 | 	getword	local02, local02, #0
03480     47 8F 52 F6 | 	abs	local02, local02 wc
03484     07 8E 06 F5 | 	and	local02, #7
03488     47 79 82 F6 | 	negc	arg03, local02
0348c     15 76 06 F6 | 	mov	arg02, #21
03490     3C 93 02 F6 | 	mov	local04, arg03
03494     46 75 02 F6 | 	mov	arg01, local01
03498     74 22 B0 FD | 	call	#_lcdRegWrite
0349c     46 75 02 F6 | 	mov	arg01, local01
034a0     49 77 02 F6 | 	mov	arg02, local04
034a4     CC 22 B0 FD | 	call	#_lcdDataWrite
034a8     48 79 32 F9 | 	getword	arg03, local03, #0
034ac     01 78 86 F1 | 	sub	arg03, #1
034b0     1A 76 06 F6 | 	mov	arg02, #26
034b4     3C 93 02 F6 | 	mov	local04, arg03
034b8     46 75 02 F6 | 	mov	arg01, local01
034bc     50 22 B0 FD | 	call	#_lcdRegWrite
034c0     46 75 02 F6 | 	mov	arg01, local01
034c4     49 77 02 F6 | 	mov	arg02, local04
034c8     A8 22 B0 FD | 	call	#_lcdDataWrite
034cc     48 79 32 F9 | 	getword	arg03, local03, #0
034d0     01 78 86 F1 | 	sub	arg03, #1
034d4     08 78 C6 F0 | 	sar	arg03, #8
034d8     1B 76 06 F6 | 	mov	arg02, #27
034dc     3C 93 02 F6 | 	mov	local04, arg03
034e0     46 75 02 F6 | 	mov	arg01, local01
034e4     28 22 B0 FD | 	call	#_lcdRegWrite
034e8     46 75 02 F6 | 	mov	arg01, local01
034ec     49 77 02 F6 | 	mov	arg02, local04
034f0     80 22 B0 FD | 	call	#_lcdDataWrite
034f4     A8 F0 03 F6 | 	mov	ptra, fp
034f8     B3 00 A0 FD | 	call	#popregs_
034fc                 | _display_lcd_horizontal_width_vertical_height_ret
034fc     2D 00 64 FD | 	ret
03500                 | 
03500                 | _display_lcd_horizontal_non_display
03500     03 4C 05 F6 | 	mov	COUNT_, #3
03504     A9 00 A0 FD | 	call	#pushregs_
03508     3A 8D 02 F6 | 	mov	local01, arg01
0350c     3B 8F 02 F6 | 	mov	local02, arg02
03510     47 79 32 F9 | 	getword	arg03, local02, #0
03514     08 78 16 F2 | 	cmp	arg03, #8 wc
03518     44 00 90 3D |  if_ae	jmp	#LR__0146
0351c     16 76 06 F6 | 	mov	arg02, #22
03520     00 78 06 F6 | 	mov	arg03, #0
03524     00 90 06 F6 | 	mov	local03, #0
03528     46 75 02 F6 | 	mov	arg01, local01
0352c     E0 21 B0 FD | 	call	#_lcdRegWrite
03530     46 75 02 F6 | 	mov	arg01, local01
03534     48 77 02 F6 | 	mov	arg02, local03
03538     38 22 B0 FD | 	call	#_lcdDataWrite
0353c     17 76 06 F6 | 	mov	arg02, #23
03540     47 79 02 F6 | 	mov	arg03, local02
03544     3C 91 02 F6 | 	mov	local03, arg03
03548     46 75 02 F6 | 	mov	arg01, local01
0354c     C0 21 B0 FD | 	call	#_lcdRegWrite
03550     46 75 02 F6 | 	mov	arg01, local01
03554     48 77 02 F6 | 	mov	arg02, local03
03558     18 22 B0 FD | 	call	#_lcdDataWrite
0355c     5C 00 90 FD | 	jmp	#LR__0147
03560                 | LR__0146
03560     47 79 32 F9 | 	getword	arg03, local02, #0
03564     3C 79 52 F6 | 	abs	arg03, arg03 wc
03568     03 78 46 F0 | 	shr	arg03, #3
0356c     3C 79 82 F6 | 	negc	arg03, arg03
03570     01 78 86 F1 | 	sub	arg03, #1
03574     16 76 06 F6 | 	mov	arg02, #22
03578     3C 91 02 F6 | 	mov	local03, arg03
0357c     46 75 02 F6 | 	mov	arg01, local01
03580     8C 21 B0 FD | 	call	#_lcdRegWrite
03584     46 75 02 F6 | 	mov	arg01, local01
03588     48 77 02 F6 | 	mov	arg02, local03
0358c     E4 21 B0 FD | 	call	#_lcdDataWrite
03590     47 8F 32 F9 | 	getword	local02, local02, #0
03594     47 8F 52 F6 | 	abs	local02, local02 wc
03598     07 8E 06 F5 | 	and	local02, #7
0359c     47 79 82 F6 | 	negc	arg03, local02
035a0     17 76 06 F6 | 	mov	arg02, #23
035a4     3C 91 02 F6 | 	mov	local03, arg03
035a8     46 75 02 F6 | 	mov	arg01, local01
035ac     60 21 B0 FD | 	call	#_lcdRegWrite
035b0     46 75 02 F6 | 	mov	arg01, local01
035b4     48 77 02 F6 | 	mov	arg02, local03
035b8     B8 21 B0 FD | 	call	#_lcdDataWrite
035bc                 | LR__0147
035bc     A8 F0 03 F6 | 	mov	ptra, fp
035c0     B3 00 A0 FD | 	call	#popregs_
035c4                 | _display_lcd_horizontal_non_display_ret
035c4     2D 00 64 FD | 	ret
035c8                 | 
035c8                 | _display_lcd_hsync_start_position
035c8     02 4C 05 F6 | 	mov	COUNT_, #2
035cc     A9 00 A0 FD | 	call	#pushregs_
035d0     3A 8D 02 F6 | 	mov	local01, arg01
035d4     3B 8F 02 F6 | 	mov	local02, arg02
035d8     47 79 32 F9 | 	getword	arg03, local02, #0
035dc     08 78 16 F2 | 	cmp	arg03, #8 wc
035e0     24 00 90 3D |  if_ae	jmp	#LR__0148
035e4     18 76 06 F6 | 	mov	arg02, #24
035e8     00 78 06 F6 | 	mov	arg03, #0
035ec     00 8E 06 F6 | 	mov	local02, #0
035f0     46 75 02 F6 | 	mov	arg01, local01
035f4     18 21 B0 FD | 	call	#_lcdRegWrite
035f8     46 75 02 F6 | 	mov	arg01, local01
035fc     47 77 02 F6 | 	mov	arg02, local02
03600     70 21 B0 FD | 	call	#_lcdDataWrite
03604     30 00 90 FD | 	jmp	#LR__0149
03608                 | LR__0148
03608     47 8F 32 F9 | 	getword	local02, local02, #0
0360c     47 8F 52 F6 | 	abs	local02, local02 wc
03610     03 8E 46 F0 | 	shr	local02, #3
03614     47 79 82 F6 | 	negc	arg03, local02
03618     01 78 86 F1 | 	sub	arg03, #1
0361c     18 76 06 F6 | 	mov	arg02, #24
03620     3C 8F 02 F6 | 	mov	local02, arg03
03624     46 75 02 F6 | 	mov	arg01, local01
03628     E4 20 B0 FD | 	call	#_lcdRegWrite
0362c     46 75 02 F6 | 	mov	arg01, local01
03630     47 77 02 F6 | 	mov	arg02, local02
03634     3C 21 B0 FD | 	call	#_lcdDataWrite
03638                 | LR__0149
03638     A8 F0 03 F6 | 	mov	ptra, fp
0363c     B3 00 A0 FD | 	call	#popregs_
03640                 | _display_lcd_hsync_start_position_ret
03640     2D 00 64 FD | 	ret
03644                 | 
03644                 | _display_lcd_hsync_pulse_width
03644     02 4C 05 F6 | 	mov	COUNT_, #2
03648     A9 00 A0 FD | 	call	#pushregs_
0364c     3A 8D 02 F6 | 	mov	local01, arg01
03650     3B 8F 02 F6 | 	mov	local02, arg02
03654     47 79 32 F9 | 	getword	arg03, local02, #0
03658     08 78 16 F2 | 	cmp	arg03, #8 wc
0365c     24 00 90 3D |  if_ae	jmp	#LR__0150
03660     19 76 06 F6 | 	mov	arg02, #25
03664     00 78 06 F6 | 	mov	arg03, #0
03668     00 8E 06 F6 | 	mov	local02, #0
0366c     46 75 02 F6 | 	mov	arg01, local01
03670     9C 20 B0 FD | 	call	#_lcdRegWrite
03674     46 75 02 F6 | 	mov	arg01, local01
03678     47 77 02 F6 | 	mov	arg02, local02
0367c     F4 20 B0 FD | 	call	#_lcdDataWrite
03680     30 00 90 FD | 	jmp	#LR__0151
03684                 | LR__0150
03684     47 8F 32 F9 | 	getword	local02, local02, #0
03688     47 8F 52 F6 | 	abs	local02, local02 wc
0368c     03 8E 46 F0 | 	shr	local02, #3
03690     47 79 82 F6 | 	negc	arg03, local02
03694     01 78 86 F1 | 	sub	arg03, #1
03698     19 76 06 F6 | 	mov	arg02, #25
0369c     3C 8F 02 F6 | 	mov	local02, arg03
036a0     46 75 02 F6 | 	mov	arg01, local01
036a4     68 20 B0 FD | 	call	#_lcdRegWrite
036a8     46 75 02 F6 | 	mov	arg01, local01
036ac     47 77 02 F6 | 	mov	arg02, local02
036b0     C0 20 B0 FD | 	call	#_lcdDataWrite
036b4                 | LR__0151
036b4     A8 F0 03 F6 | 	mov	ptra, fp
036b8     B3 00 A0 FD | 	call	#popregs_
036bc                 | _display_lcd_hsync_pulse_width_ret
036bc     2D 00 64 FD | 	ret
036c0                 | 
036c0                 | _display_lcd_vertical_non_display
036c0     03 4C 05 F6 | 	mov	COUNT_, #3
036c4     A9 00 A0 FD | 	call	#pushregs_
036c8     3A 8D 02 F6 | 	mov	local01, arg01
036cc     3B 8F 32 F9 | 	getword	local02, arg02, #0
036d0     01 8E 86 F1 | 	sub	local02, #1
036d4     1C 76 06 F6 | 	mov	arg02, #28
036d8     47 79 02 F6 | 	mov	arg03, local02
036dc     3C 91 02 F6 | 	mov	local03, arg03
036e0     46 75 02 F6 | 	mov	arg01, local01
036e4     28 20 B0 FD | 	call	#_lcdRegWrite
036e8     46 75 02 F6 | 	mov	arg01, local01
036ec     48 77 02 F6 | 	mov	arg02, local03
036f0     80 20 B0 FD | 	call	#_lcdDataWrite
036f4     47 79 E2 F8 | 	getbyte	arg03, local02, #0
036f8     08 78 46 F0 | 	shr	arg03, #8
036fc     1D 76 06 F6 | 	mov	arg02, #29
03700     3C 91 02 F6 | 	mov	local03, arg03
03704     46 75 02 F6 | 	mov	arg01, local01
03708     04 20 B0 FD | 	call	#_lcdRegWrite
0370c     46 75 02 F6 | 	mov	arg01, local01
03710     48 77 02 F6 | 	mov	arg02, local03
03714     5C 20 B0 FD | 	call	#_lcdDataWrite
03718     A8 F0 03 F6 | 	mov	ptra, fp
0371c     B3 00 A0 FD | 	call	#popregs_
03720                 | _display_lcd_vertical_non_display_ret
03720     2D 00 64 FD | 	ret
03724                 | 
03724                 | _display_image_start_address
03724     03 4C 05 F6 | 	mov	COUNT_, #3
03728     A9 00 A0 FD | 	call	#pushregs_
0372c     3A 8D 02 F6 | 	mov	local01, arg01
03730     3B 8F 02 F6 | 	mov	local02, arg02
03734     20 76 06 F6 | 	mov	arg02, #32
03738     47 79 02 F6 | 	mov	arg03, local02
0373c     3C 91 02 F6 | 	mov	local03, arg03
03740     46 75 02 F6 | 	mov	arg01, local01
03744     C8 1F B0 FD | 	call	#_lcdRegWrite
03748     46 75 02 F6 | 	mov	arg01, local01
0374c     48 77 02 F6 | 	mov	arg02, local03
03750     20 20 B0 FD | 	call	#_lcdDataWrite
03754     47 79 02 F6 | 	mov	arg03, local02
03758     08 78 46 F0 | 	shr	arg03, #8
0375c     21 76 06 F6 | 	mov	arg02, #33
03760     3C 91 02 F6 | 	mov	local03, arg03
03764     46 75 02 F6 | 	mov	arg01, local01
03768     A4 1F B0 FD | 	call	#_lcdRegWrite
0376c     46 75 02 F6 | 	mov	arg01, local01
03770     48 77 02 F6 | 	mov	arg02, local03
03774     FC 1F B0 FD | 	call	#_lcdDataWrite
03778     47 79 02 F6 | 	mov	arg03, local02
0377c     10 78 46 F0 | 	shr	arg03, #16
03780     22 76 06 F6 | 	mov	arg02, #34
03784     3C 91 02 F6 | 	mov	local03, arg03
03788     46 75 02 F6 | 	mov	arg01, local01
0378c     80 1F B0 FD | 	call	#_lcdRegWrite
03790     46 75 02 F6 | 	mov	arg01, local01
03794     48 77 02 F6 | 	mov	arg02, local03
03798     D8 1F B0 FD | 	call	#_lcdDataWrite
0379c     18 8E 46 F0 | 	shr	local02, #24
037a0     23 76 06 F6 | 	mov	arg02, #35
037a4     47 79 02 F6 | 	mov	arg03, local02
037a8     3C 91 02 F6 | 	mov	local03, arg03
037ac     46 75 02 F6 | 	mov	arg01, local01
037b0     5C 1F B0 FD | 	call	#_lcdRegWrite
037b4     46 75 02 F6 | 	mov	arg01, local01
037b8     48 77 02 F6 | 	mov	arg02, local03
037bc     B4 1F B0 FD | 	call	#_lcdDataWrite
037c0     A8 F0 03 F6 | 	mov	ptra, fp
037c4     B3 00 A0 FD | 	call	#popregs_
037c8                 | _display_image_start_address_ret
037c8     2D 00 64 FD | 	ret
037cc                 | 
037cc                 | _display_image_width
037cc     03 4C 05 F6 | 	mov	COUNT_, #3
037d0     A9 00 A0 FD | 	call	#pushregs_
037d4     3A 8D 02 F6 | 	mov	local01, arg01
037d8     3B 8F 02 F6 | 	mov	local02, arg02
037dc     24 76 06 F6 | 	mov	arg02, #36
037e0     47 79 02 F6 | 	mov	arg03, local02
037e4     3C 91 02 F6 | 	mov	local03, arg03
037e8     46 75 02 F6 | 	mov	arg01, local01
037ec     20 1F B0 FD | 	call	#_lcdRegWrite
037f0     46 75 02 F6 | 	mov	arg01, local01
037f4     48 77 02 F6 | 	mov	arg02, local03
037f8     78 1F B0 FD | 	call	#_lcdDataWrite
037fc     47 79 32 F9 | 	getword	arg03, local02, #0
03800     08 78 46 F0 | 	shr	arg03, #8
03804     25 76 06 F6 | 	mov	arg02, #37
03808     3C 91 02 F6 | 	mov	local03, arg03
0380c     46 75 02 F6 | 	mov	arg01, local01
03810     FC 1E B0 FD | 	call	#_lcdRegWrite
03814     46 75 02 F6 | 	mov	arg01, local01
03818     48 77 02 F6 | 	mov	arg02, local03
0381c     54 1F B0 FD | 	call	#_lcdDataWrite
03820     A8 F0 03 F6 | 	mov	ptra, fp
03824     B3 00 A0 FD | 	call	#popregs_
03828                 | _display_image_width_ret
03828     2D 00 64 FD | 	ret
0382c                 | 
0382c                 | _display_window_start_xy
0382c     04 4C 05 F6 | 	mov	COUNT_, #4
03830     A9 00 A0 FD | 	call	#pushregs_
03834     3A 8D 02 F6 | 	mov	local01, arg01
03838     3B 8F 02 F6 | 	mov	local02, arg02
0383c     3C 91 02 F6 | 	mov	local03, arg03
03840     26 76 06 F6 | 	mov	arg02, #38
03844     47 79 02 F6 | 	mov	arg03, local02
03848     3C 93 02 F6 | 	mov	local04, arg03
0384c     46 75 02 F6 | 	mov	arg01, local01
03850     BC 1E B0 FD | 	call	#_lcdRegWrite
03854     46 75 02 F6 | 	mov	arg01, local01
03858     49 77 02 F6 | 	mov	arg02, local04
0385c     14 1F B0 FD | 	call	#_lcdDataWrite
03860     47 79 32 F9 | 	getword	arg03, local02, #0
03864     08 78 46 F0 | 	shr	arg03, #8
03868     27 76 06 F6 | 	mov	arg02, #39
0386c     3C 93 02 F6 | 	mov	local04, arg03
03870     46 75 02 F6 | 	mov	arg01, local01
03874     98 1E B0 FD | 	call	#_lcdRegWrite
03878     46 75 02 F6 | 	mov	arg01, local01
0387c     49 77 02 F6 | 	mov	arg02, local04
03880     F0 1E B0 FD | 	call	#_lcdDataWrite
03884     28 76 06 F6 | 	mov	arg02, #40
03888     48 79 02 F6 | 	mov	arg03, local03
0388c     3C 93 02 F6 | 	mov	local04, arg03
03890     46 75 02 F6 | 	mov	arg01, local01
03894     78 1E B0 FD | 	call	#_lcdRegWrite
03898     46 75 02 F6 | 	mov	arg01, local01
0389c     49 77 02 F6 | 	mov	arg02, local04
038a0     D0 1E B0 FD | 	call	#_lcdDataWrite
038a4     48 79 32 F9 | 	getword	arg03, local03, #0
038a8     08 78 46 F0 | 	shr	arg03, #8
038ac     29 76 06 F6 | 	mov	arg02, #41
038b0     3C 93 02 F6 | 	mov	local04, arg03
038b4     46 75 02 F6 | 	mov	arg01, local01
038b8     54 1E B0 FD | 	call	#_lcdRegWrite
038bc     46 75 02 F6 | 	mov	arg01, local01
038c0     49 77 02 F6 | 	mov	arg02, local04
038c4     AC 1E B0 FD | 	call	#_lcdDataWrite
038c8     A8 F0 03 F6 | 	mov	ptra, fp
038cc     B3 00 A0 FD | 	call	#popregs_
038d0                 | _display_window_start_xy_ret
038d0     2D 00 64 FD | 	ret
038d4                 | 
038d4                 | _display_canvas_image_start_address
038d4     03 4C 05 F6 | 	mov	COUNT_, #3
038d8     A9 00 A0 FD | 	call	#pushregs_
038dc     3A 8D 02 F6 | 	mov	local01, arg01
038e0     3B 8F 02 F6 | 	mov	local02, arg02
038e4     48 8C 06 F1 | 	add	local01, #72
038e8     46 8F 62 FC | 	wrlong	local02, local01
038ec     48 8C 86 F1 | 	sub	local01, #72
038f0     50 76 06 F6 | 	mov	arg02, #80
038f4     47 79 02 F6 | 	mov	arg03, local02
038f8     3C 91 02 F6 | 	mov	local03, arg03
038fc     46 75 02 F6 | 	mov	arg01, local01
03900     0C 1E B0 FD | 	call	#_lcdRegWrite
03904     46 75 02 F6 | 	mov	arg01, local01
03908     48 77 02 F6 | 	mov	arg02, local03
0390c     64 1E B0 FD | 	call	#_lcdDataWrite
03910     47 79 02 F6 | 	mov	arg03, local02
03914     08 78 46 F0 | 	shr	arg03, #8
03918     51 76 06 F6 | 	mov	arg02, #81
0391c     3C 91 02 F6 | 	mov	local03, arg03
03920     46 75 02 F6 | 	mov	arg01, local01
03924     E8 1D B0 FD | 	call	#_lcdRegWrite
03928     46 75 02 F6 | 	mov	arg01, local01
0392c     48 77 02 F6 | 	mov	arg02, local03
03930     40 1E B0 FD | 	call	#_lcdDataWrite
03934     47 79 02 F6 | 	mov	arg03, local02
03938     10 78 46 F0 | 	shr	arg03, #16
0393c     52 76 06 F6 | 	mov	arg02, #82
03940     3C 91 02 F6 | 	mov	local03, arg03
03944     46 75 02 F6 | 	mov	arg01, local01
03948     C4 1D B0 FD | 	call	#_lcdRegWrite
0394c     46 75 02 F6 | 	mov	arg01, local01
03950     48 77 02 F6 | 	mov	arg02, local03
03954     1C 1E B0 FD | 	call	#_lcdDataWrite
03958     18 8E 46 F0 | 	shr	local02, #24
0395c     53 76 06 F6 | 	mov	arg02, #83
03960     47 79 02 F6 | 	mov	arg03, local02
03964     3C 91 02 F6 | 	mov	local03, arg03
03968     46 75 02 F6 | 	mov	arg01, local01
0396c     A0 1D B0 FD | 	call	#_lcdRegWrite
03970     46 75 02 F6 | 	mov	arg01, local01
03974     48 77 02 F6 | 	mov	arg02, local03
03978     F8 1D B0 FD | 	call	#_lcdDataWrite
0397c     A8 F0 03 F6 | 	mov	ptra, fp
03980     B3 00 A0 FD | 	call	#popregs_
03984                 | _display_canvas_image_start_address_ret
03984     2D 00 64 FD | 	ret
03988                 | 
03988                 | _display_canvas_image_width
03988     03 4C 05 F6 | 	mov	COUNT_, #3
0398c     A9 00 A0 FD | 	call	#pushregs_
03990     3A 8D 02 F6 | 	mov	local01, arg01
03994     3B 8F 02 F6 | 	mov	local02, arg02
03998     54 76 06 F6 | 	mov	arg02, #84
0399c     47 79 02 F6 | 	mov	arg03, local02
039a0     3C 91 02 F6 | 	mov	local03, arg03
039a4     46 75 02 F6 | 	mov	arg01, local01
039a8     64 1D B0 FD | 	call	#_lcdRegWrite
039ac     46 75 02 F6 | 	mov	arg01, local01
039b0     48 77 02 F6 | 	mov	arg02, local03
039b4     BC 1D B0 FD | 	call	#_lcdDataWrite
039b8     47 79 32 F9 | 	getword	arg03, local02, #0
039bc     08 78 46 F0 | 	shr	arg03, #8
039c0     55 76 06 F6 | 	mov	arg02, #85
039c4     3C 91 02 F6 | 	mov	local03, arg03
039c8     46 75 02 F6 | 	mov	arg01, local01
039cc     40 1D B0 FD | 	call	#_lcdRegWrite
039d0     46 75 02 F6 | 	mov	arg01, local01
039d4     48 77 02 F6 | 	mov	arg02, local03
039d8     98 1D B0 FD | 	call	#_lcdDataWrite
039dc     A8 F0 03 F6 | 	mov	ptra, fp
039e0     B3 00 A0 FD | 	call	#popregs_
039e4                 | _display_canvas_image_width_ret
039e4     2D 00 64 FD | 	ret
039e8                 | 
039e8                 | _display_active_window_xy
039e8     04 4C 05 F6 | 	mov	COUNT_, #4
039ec     A9 00 A0 FD | 	call	#pushregs_
039f0     3A 8D 02 F6 | 	mov	local01, arg01
039f4     3B 8F 02 F6 | 	mov	local02, arg02
039f8     3C 91 02 F6 | 	mov	local03, arg03
039fc     56 76 06 F6 | 	mov	arg02, #86
03a00     47 79 02 F6 | 	mov	arg03, local02
03a04     3C 93 02 F6 | 	mov	local04, arg03
03a08     46 75 02 F6 | 	mov	arg01, local01
03a0c     00 1D B0 FD | 	call	#_lcdRegWrite
03a10     46 75 02 F6 | 	mov	arg01, local01
03a14     49 77 02 F6 | 	mov	arg02, local04
03a18     58 1D B0 FD | 	call	#_lcdDataWrite
03a1c     47 79 32 F9 | 	getword	arg03, local02, #0
03a20     08 78 46 F0 | 	shr	arg03, #8
03a24     57 76 06 F6 | 	mov	arg02, #87
03a28     3C 93 02 F6 | 	mov	local04, arg03
03a2c     46 75 02 F6 | 	mov	arg01, local01
03a30     DC 1C B0 FD | 	call	#_lcdRegWrite
03a34     46 75 02 F6 | 	mov	arg01, local01
03a38     49 77 02 F6 | 	mov	arg02, local04
03a3c     34 1D B0 FD | 	call	#_lcdDataWrite
03a40     58 76 06 F6 | 	mov	arg02, #88
03a44     48 79 02 F6 | 	mov	arg03, local03
03a48     3C 93 02 F6 | 	mov	local04, arg03
03a4c     46 75 02 F6 | 	mov	arg01, local01
03a50     BC 1C B0 FD | 	call	#_lcdRegWrite
03a54     46 75 02 F6 | 	mov	arg01, local01
03a58     49 77 02 F6 | 	mov	arg02, local04
03a5c     14 1D B0 FD | 	call	#_lcdDataWrite
03a60     48 79 32 F9 | 	getword	arg03, local03, #0
03a64     08 78 46 F0 | 	shr	arg03, #8
03a68     59 76 06 F6 | 	mov	arg02, #89
03a6c     3C 93 02 F6 | 	mov	local04, arg03
03a70     46 75 02 F6 | 	mov	arg01, local01
03a74     98 1C B0 FD | 	call	#_lcdRegWrite
03a78     46 75 02 F6 | 	mov	arg01, local01
03a7c     49 77 02 F6 | 	mov	arg02, local04
03a80     F0 1C B0 FD | 	call	#_lcdDataWrite
03a84     A8 F0 03 F6 | 	mov	ptra, fp
03a88     B3 00 A0 FD | 	call	#popregs_
03a8c                 | _display_active_window_xy_ret
03a8c     2D 00 64 FD | 	ret
03a90                 | 
03a90                 | _display_active_window_wh
03a90     04 4C 05 F6 | 	mov	COUNT_, #4
03a94     A9 00 A0 FD | 	call	#pushregs_
03a98     3A 8D 02 F6 | 	mov	local01, arg01
03a9c     3B 8F 02 F6 | 	mov	local02, arg02
03aa0     3C 91 02 F6 | 	mov	local03, arg03
03aa4     5A 76 06 F6 | 	mov	arg02, #90
03aa8     47 79 02 F6 | 	mov	arg03, local02
03aac     3C 93 02 F6 | 	mov	local04, arg03
03ab0     46 75 02 F6 | 	mov	arg01, local01
03ab4     58 1C B0 FD | 	call	#_lcdRegWrite
03ab8     46 75 02 F6 | 	mov	arg01, local01
03abc     49 77 02 F6 | 	mov	arg02, local04
03ac0     B0 1C B0 FD | 	call	#_lcdDataWrite
03ac4     47 79 32 F9 | 	getword	arg03, local02, #0
03ac8     08 78 46 F0 | 	shr	arg03, #8
03acc     5B 76 06 F6 | 	mov	arg02, #91
03ad0     3C 93 02 F6 | 	mov	local04, arg03
03ad4     46 75 02 F6 | 	mov	arg01, local01
03ad8     34 1C B0 FD | 	call	#_lcdRegWrite
03adc     46 75 02 F6 | 	mov	arg01, local01
03ae0     49 77 02 F6 | 	mov	arg02, local04
03ae4     8C 1C B0 FD | 	call	#_lcdDataWrite
03ae8     5C 76 06 F6 | 	mov	arg02, #92
03aec     48 79 02 F6 | 	mov	arg03, local03
03af0     3C 93 02 F6 | 	mov	local04, arg03
03af4     46 75 02 F6 | 	mov	arg01, local01
03af8     14 1C B0 FD | 	call	#_lcdRegWrite
03afc     46 75 02 F6 | 	mov	arg01, local01
03b00     49 77 02 F6 | 	mov	arg02, local04
03b04     6C 1C B0 FD | 	call	#_lcdDataWrite
03b08     48 79 32 F9 | 	getword	arg03, local03, #0
03b0c     08 78 46 F0 | 	shr	arg03, #8
03b10     5D 76 06 F6 | 	mov	arg02, #93
03b14     3C 93 02 F6 | 	mov	local04, arg03
03b18     46 75 02 F6 | 	mov	arg01, local01
03b1c     F0 1B B0 FD | 	call	#_lcdRegWrite
03b20     46 75 02 F6 | 	mov	arg01, local01
03b24     49 77 02 F6 | 	mov	arg02, local04
03b28     48 1C B0 FD | 	call	#_lcdDataWrite
03b2c     A8 F0 03 F6 | 	mov	ptra, fp
03b30     B3 00 A0 FD | 	call	#popregs_
03b34                 | _display_active_window_wh_ret
03b34     2D 00 64 FD | 	ret
03b38                 | 
03b38                 | _display_fore_ground_color_16bpp
03b38     03 4C 05 F6 | 	mov	COUNT_, #3
03b3c     A9 00 A0 FD | 	call	#pushregs_
03b40     3A 8D 02 F6 | 	mov	local01, arg01
03b44     3B 8F 02 F6 | 	mov	local02, arg02
03b48     47 79 32 F9 | 	getword	arg03, local02, #0
03b4c     08 78 46 F0 | 	shr	arg03, #8
03b50     D2 76 06 F6 | 	mov	arg02, #210
03b54     3C 91 02 F6 | 	mov	local03, arg03
03b58     46 75 02 F6 | 	mov	arg01, local01
03b5c     B0 1B B0 FD | 	call	#_lcdRegWrite
03b60     46 75 02 F6 | 	mov	arg01, local01
03b64     48 77 02 F6 | 	mov	arg02, local03
03b68     08 1C B0 FD | 	call	#_lcdDataWrite
03b6c     47 79 32 F9 | 	getword	arg03, local02, #0
03b70     03 78 46 F0 | 	shr	arg03, #3
03b74     D3 76 06 F6 | 	mov	arg02, #211
03b78     3C 91 02 F6 | 	mov	local03, arg03
03b7c     46 75 02 F6 | 	mov	arg01, local01
03b80     8C 1B B0 FD | 	call	#_lcdRegWrite
03b84     46 75 02 F6 | 	mov	arg01, local01
03b88     48 77 02 F6 | 	mov	arg02, local03
03b8c     E4 1B B0 FD | 	call	#_lcdDataWrite
03b90     47 79 32 F9 | 	getword	arg03, local02, #0
03b94     03 78 66 F0 | 	shl	arg03, #3
03b98     D4 76 06 F6 | 	mov	arg02, #212
03b9c     3C 91 02 F6 | 	mov	local03, arg03
03ba0     46 75 02 F6 | 	mov	arg01, local01
03ba4     68 1B B0 FD | 	call	#_lcdRegWrite
03ba8     46 75 02 F6 | 	mov	arg01, local01
03bac     48 77 02 F6 | 	mov	arg02, local03
03bb0     C0 1B B0 FD | 	call	#_lcdDataWrite
03bb4     A8 F0 03 F6 | 	mov	ptra, fp
03bb8     B3 00 A0 FD | 	call	#popregs_
03bbc                 | _display_fore_ground_color_16bpp_ret
03bbc     2D 00 64 FD | 	ret
03bc0                 | 
03bc0                 | _display_back_ground_color_16bpp
03bc0     03 4C 05 F6 | 	mov	COUNT_, #3
03bc4     A9 00 A0 FD | 	call	#pushregs_
03bc8     3A 8D 02 F6 | 	mov	local01, arg01
03bcc     3B 8F 02 F6 | 	mov	local02, arg02
03bd0     47 79 32 F9 | 	getword	arg03, local02, #0
03bd4     08 78 46 F0 | 	shr	arg03, #8
03bd8     D5 76 06 F6 | 	mov	arg02, #213
03bdc     3C 91 02 F6 | 	mov	local03, arg03
03be0     46 75 02 F6 | 	mov	arg01, local01
03be4     28 1B B0 FD | 	call	#_lcdRegWrite
03be8     46 75 02 F6 | 	mov	arg01, local01
03bec     48 77 02 F6 | 	mov	arg02, local03
03bf0     80 1B B0 FD | 	call	#_lcdDataWrite
03bf4     47 79 32 F9 | 	getword	arg03, local02, #0
03bf8     03 78 46 F0 | 	shr	arg03, #3
03bfc     D6 76 06 F6 | 	mov	arg02, #214
03c00     3C 91 02 F6 | 	mov	local03, arg03
03c04     46 75 02 F6 | 	mov	arg01, local01
03c08     04 1B B0 FD | 	call	#_lcdRegWrite
03c0c     46 75 02 F6 | 	mov	arg01, local01
03c10     48 77 02 F6 | 	mov	arg02, local03
03c14     5C 1B B0 FD | 	call	#_lcdDataWrite
03c18     47 79 32 F9 | 	getword	arg03, local02, #0
03c1c     03 78 66 F0 | 	shl	arg03, #3
03c20     D7 76 06 F6 | 	mov	arg02, #215
03c24     3C 91 02 F6 | 	mov	local03, arg03
03c28     46 75 02 F6 | 	mov	arg01, local01
03c2c     E0 1A B0 FD | 	call	#_lcdRegWrite
03c30     46 75 02 F6 | 	mov	arg01, local01
03c34     48 77 02 F6 | 	mov	arg02, local03
03c38     38 1B B0 FD | 	call	#_lcdDataWrite
03c3c     A8 F0 03 F6 | 	mov	ptra, fp
03c40     B3 00 A0 FD | 	call	#popregs_
03c44                 | _display_back_ground_color_16bpp_ret
03c44     2D 00 64 FD | 	ret
03c48                 | 
03c48                 | _display_set_pixel_cursor
03c48     04 4C 05 F6 | 	mov	COUNT_, #4
03c4c     A9 00 A0 FD | 	call	#pushregs_
03c50     3A 8D 02 F6 | 	mov	local01, arg01
03c54     3B 8F 02 F6 | 	mov	local02, arg02
03c58     3C 91 02 F6 | 	mov	local03, arg03
03c5c     5F 76 06 F6 | 	mov	arg02, #95
03c60     47 79 02 F6 | 	mov	arg03, local02
03c64     3C 93 02 F6 | 	mov	local04, arg03
03c68     46 75 02 F6 | 	mov	arg01, local01
03c6c     A0 1A B0 FD | 	call	#_lcdRegWrite
03c70     46 75 02 F6 | 	mov	arg01, local01
03c74     49 77 02 F6 | 	mov	arg02, local04
03c78     F8 1A B0 FD | 	call	#_lcdDataWrite
03c7c     47 79 32 F9 | 	getword	arg03, local02, #0
03c80     08 78 46 F0 | 	shr	arg03, #8
03c84     60 76 06 F6 | 	mov	arg02, #96
03c88     3C 93 02 F6 | 	mov	local04, arg03
03c8c     46 75 02 F6 | 	mov	arg01, local01
03c90     7C 1A B0 FD | 	call	#_lcdRegWrite
03c94     46 75 02 F6 | 	mov	arg01, local01
03c98     49 77 02 F6 | 	mov	arg02, local04
03c9c     D4 1A B0 FD | 	call	#_lcdDataWrite
03ca0     61 76 06 F6 | 	mov	arg02, #97
03ca4     48 79 02 F6 | 	mov	arg03, local03
03ca8     3C 93 02 F6 | 	mov	local04, arg03
03cac     46 75 02 F6 | 	mov	arg01, local01
03cb0     5C 1A B0 FD | 	call	#_lcdRegWrite
03cb4     46 75 02 F6 | 	mov	arg01, local01
03cb8     49 77 02 F6 | 	mov	arg02, local04
03cbc     B4 1A B0 FD | 	call	#_lcdDataWrite
03cc0     48 79 32 F9 | 	getword	arg03, local03, #0
03cc4     08 78 46 F0 | 	shr	arg03, #8
03cc8     62 76 06 F6 | 	mov	arg02, #98
03ccc     3C 93 02 F6 | 	mov	local04, arg03
03cd0     46 75 02 F6 | 	mov	arg01, local01
03cd4     38 1A B0 FD | 	call	#_lcdRegWrite
03cd8     46 75 02 F6 | 	mov	arg01, local01
03cdc     49 77 02 F6 | 	mov	arg02, local04
03ce0     90 1A B0 FD | 	call	#_lcdDataWrite
03ce4     A8 F0 03 F6 | 	mov	ptra, fp
03ce8     B3 00 A0 FD | 	call	#popregs_
03cec                 | _display_set_pixel_cursor_ret
03cec     2D 00 64 FD | 	ret
03cf0                 | 
03cf0                 | _display_put_picture_16bpp
03cf0     05 4C 05 F6 | 	mov	COUNT_, #5
03cf4     A9 00 A0 FD | 	call	#pushregs_
03cf8     3A 8D 02 F6 | 	mov	local01, arg01
03cfc     3B 8F 02 F6 | 	mov	local02, arg02
03d00     3C 91 02 F6 | 	mov	local03, arg03
03d04     3D 93 02 F6 | 	mov	local04, arg04
03d08     3E 95 02 F6 | 	mov	local05, arg05
03d0c     46 75 02 F6 | 	mov	arg01, local01
03d10     47 77 02 F6 | 	mov	arg02, local02
03d14     48 79 02 F6 | 	mov	arg03, local03
03d18     CC FC BF FD | 	call	#_display_active_window_xy
03d1c     46 75 02 F6 | 	mov	arg01, local01
03d20     49 77 02 F6 | 	mov	arg02, local04
03d24     4A 79 02 F6 | 	mov	arg03, local05
03d28     64 FD BF FD | 	call	#_display_active_window_wh
03d2c     46 75 02 F6 | 	mov	arg01, local01
03d30     47 77 02 F6 | 	mov	arg02, local02
03d34     48 79 02 F6 | 	mov	arg03, local03
03d38     0C FF BF FD | 	call	#_display_set_pixel_cursor
03d3c     46 75 02 F6 | 	mov	arg01, local01
03d40     04 76 06 F6 | 	mov	arg02, #4
03d44     C8 19 B0 FD | 	call	#_lcdRegWrite
03d48     A8 F0 03 F6 | 	mov	ptra, fp
03d4c     B3 00 A0 FD | 	call	#popregs_
03d50                 | _display_put_picture_16bpp_ret
03d50     2D 00 64 FD | 	ret
03d54                 | 
03d54                 | _display_text_mode
03d54     02 4C 05 F6 | 	mov	COUNT_, #2
03d58     A9 00 A0 FD | 	call	#pushregs_
03d5c     3A 8D 02 F6 | 	mov	local01, arg01
03d60     00 76 0E F2 | 	cmp	arg02, #0 wz
03d64     24 00 90 AD |  if_e	jmp	#LR__0152
03d68     03 76 06 F6 | 	mov	arg02, #3
03d6c     04 78 06 F6 | 	mov	arg03, #4
03d70     04 8E 06 F6 | 	mov	local02, #4
03d74     46 75 02 F6 | 	mov	arg01, local01
03d78     94 19 B0 FD | 	call	#_lcdRegWrite
03d7c     46 75 02 F6 | 	mov	arg01, local01
03d80     47 77 02 F6 | 	mov	arg02, local02
03d84     EC 19 B0 FD | 	call	#_lcdDataWrite
03d88     20 00 90 FD | 	jmp	#LR__0153
03d8c                 | LR__0152
03d8c     03 76 06 F6 | 	mov	arg02, #3
03d90     00 78 06 F6 | 	mov	arg03, #0
03d94     00 8E 06 F6 | 	mov	local02, #0
03d98     46 75 02 F6 | 	mov	arg01, local01
03d9c     70 19 B0 FD | 	call	#_lcdRegWrite
03da0     46 75 02 F6 | 	mov	arg01, local01
03da4     47 77 02 F6 | 	mov	arg02, local02
03da8     C8 19 B0 FD | 	call	#_lcdDataWrite
03dac                 | LR__0153
03dac     A8 F0 03 F6 | 	mov	ptra, fp
03db0     B3 00 A0 FD | 	call	#popregs_
03db4                 | _display_text_mode_ret
03db4     2D 00 64 FD | 	ret
03db8                 | 
03db8                 | _display_set_text_cursor
03db8     04 4C 05 F6 | 	mov	COUNT_, #4
03dbc     A9 00 A0 FD | 	call	#pushregs_
03dc0     3A 8D 02 F6 | 	mov	local01, arg01
03dc4     3B 8F 02 F6 | 	mov	local02, arg02
03dc8     3C 91 02 F6 | 	mov	local03, arg03
03dcc     63 76 06 F6 | 	mov	arg02, #99
03dd0     47 79 02 F6 | 	mov	arg03, local02
03dd4     3C 93 02 F6 | 	mov	local04, arg03
03dd8     46 75 02 F6 | 	mov	arg01, local01
03ddc     30 19 B0 FD | 	call	#_lcdRegWrite
03de0     46 75 02 F6 | 	mov	arg01, local01
03de4     49 77 02 F6 | 	mov	arg02, local04
03de8     88 19 B0 FD | 	call	#_lcdDataWrite
03dec     47 79 32 F9 | 	getword	arg03, local02, #0
03df0     08 78 46 F0 | 	shr	arg03, #8
03df4     64 76 06 F6 | 	mov	arg02, #100
03df8     3C 93 02 F6 | 	mov	local04, arg03
03dfc     46 75 02 F6 | 	mov	arg01, local01
03e00     0C 19 B0 FD | 	call	#_lcdRegWrite
03e04     46 75 02 F6 | 	mov	arg01, local01
03e08     49 77 02 F6 | 	mov	arg02, local04
03e0c     64 19 B0 FD | 	call	#_lcdDataWrite
03e10     65 76 06 F6 | 	mov	arg02, #101
03e14     48 79 02 F6 | 	mov	arg03, local03
03e18     3C 93 02 F6 | 	mov	local04, arg03
03e1c     46 75 02 F6 | 	mov	arg01, local01
03e20     EC 18 B0 FD | 	call	#_lcdRegWrite
03e24     46 75 02 F6 | 	mov	arg01, local01
03e28     49 77 02 F6 | 	mov	arg02, local04
03e2c     44 19 B0 FD | 	call	#_lcdDataWrite
03e30     48 79 32 F9 | 	getword	arg03, local03, #0
03e34     08 78 46 F0 | 	shr	arg03, #8
03e38     66 76 06 F6 | 	mov	arg02, #102
03e3c     3C 93 02 F6 | 	mov	local04, arg03
03e40     46 75 02 F6 | 	mov	arg01, local01
03e44     C8 18 B0 FD | 	call	#_lcdRegWrite
03e48     46 75 02 F6 | 	mov	arg01, local01
03e4c     49 77 02 F6 | 	mov	arg02, local04
03e50     20 19 B0 FD | 	call	#_lcdDataWrite
03e54     A8 F0 03 F6 | 	mov	ptra, fp
03e58     B3 00 A0 FD | 	call	#popregs_
03e5c                 | _display_set_text_cursor_ret
03e5c     2D 00 64 FD | 	ret
03e60                 | 
03e60                 | _display_set_text_parameter1
03e60     02 4C 05 F6 | 	mov	COUNT_, #2
03e64     A9 00 A0 FD | 	call	#pushregs_
03e68     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
03e6c     06 76 66 F0 | 	shl	arg02, #6
03e70     3C 79 E2 F8 | 	getbyte	arg03, arg03, #0
03e74     04 78 66 F0 | 	shl	arg03, #4
03e78     3C 77 42 F5 | 	or	arg02, arg03
03e7c     3D 79 E2 F8 | 	getbyte	arg03, arg04, #0
03e80     3B 79 42 F5 | 	or	arg03, arg02
03e84     CC 76 06 F6 | 	mov	arg02, #204
03e88     3A 8D 02 F6 | 	mov	local01, arg01
03e8c     3C 8F 02 F6 | 	mov	local02, arg03
03e90     46 75 02 F6 | 	mov	arg01, local01
03e94     78 18 B0 FD | 	call	#_lcdRegWrite
03e98     46 75 02 F6 | 	mov	arg01, local01
03e9c     47 77 02 F6 | 	mov	arg02, local02
03ea0     D0 18 B0 FD | 	call	#_lcdDataWrite
03ea4     A8 F0 03 F6 | 	mov	ptra, fp
03ea8     B3 00 A0 FD | 	call	#popregs_
03eac                 | _display_set_text_parameter1_ret
03eac     2D 00 64 FD | 	ret
03eb0                 | 
03eb0                 | _display_set_text_parameter2
03eb0     02 4C 05 F6 | 	mov	COUNT_, #2
03eb4     A9 00 A0 FD | 	call	#pushregs_
03eb8     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
03ebc     07 76 66 F0 | 	shl	arg02, #7
03ec0     3C 79 E2 F8 | 	getbyte	arg03, arg03, #0
03ec4     06 78 66 F0 | 	shl	arg03, #6
03ec8     3C 77 42 F5 | 	or	arg02, arg03
03ecc     3D 79 E2 F8 | 	getbyte	arg03, arg04, #0
03ed0     02 78 66 F0 | 	shl	arg03, #2
03ed4     3C 77 42 F5 | 	or	arg02, arg03
03ed8     3E 79 E2 F8 | 	getbyte	arg03, arg05, #0
03edc     3B 79 42 F5 | 	or	arg03, arg02
03ee0     CD 76 06 F6 | 	mov	arg02, #205
03ee4     3A 8D 02 F6 | 	mov	local01, arg01
03ee8     3C 8F 02 F6 | 	mov	local02, arg03
03eec     46 75 02 F6 | 	mov	arg01, local01
03ef0     1C 18 B0 FD | 	call	#_lcdRegWrite
03ef4     46 75 02 F6 | 	mov	arg01, local01
03ef8     47 77 02 F6 | 	mov	arg02, local02
03efc     74 18 B0 FD | 	call	#_lcdDataWrite
03f00     A8 F0 03 F6 | 	mov	ptra, fp
03f04     B3 00 A0 FD | 	call	#popregs_
03f08                 | _display_set_text_parameter2_ret
03f08     2D 00 64 FD | 	ret
03f0c                 | 
03f0c                 | _display_draw_string
03f0c     04 4C 05 F6 | 	mov	COUNT_, #4
03f10     A9 00 A0 FD | 	call	#pushregs_
03f14     3A 8D 02 F6 | 	mov	local01, arg01
03f18     3B 8F 02 F6 | 	mov	local02, arg02
03f1c     3C 91 02 F6 | 	mov	local03, arg03
03f20     3D 93 02 F6 | 	mov	local04, arg04
03f24     46 75 02 F6 | 	mov	arg01, local01
03f28     01 76 06 F6 | 	mov	arg02, #1
03f2c     24 FE BF FD | 	call	#_display_text_mode
03f30     46 75 02 F6 | 	mov	arg01, local01
03f34     47 77 02 F6 | 	mov	arg02, local02
03f38     48 79 02 F6 | 	mov	arg03, local03
03f3c     78 FE BF FD | 	call	#_display_set_text_cursor
03f40     46 75 02 F6 | 	mov	arg01, local01
03f44     04 76 06 F6 | 	mov	arg02, #4
03f48     C4 17 B0 FD | 	call	#_lcdRegWrite
03f4c                 | ' {
03f4c                 | '   display_text_mode(display,  (1) );
03f4c                 | '   display_set_text_cursor(display, x0, y0);
03f4c                 | '   display_ram_access_prepare(display);
03f4c                 | '   while (*str != '\0')
03f4c                 | LR__0154
03f4c     49 91 CA FA | 	rdbyte	local03, local04 wz
03f50     1C 00 90 AD |  if_e	jmp	#LR__0155
03f54     46 75 02 F6 | 	mov	arg01, local01
03f58     00 1A B0 FD | 	call	#_checkWriteFifoNotFull
03f5c     46 75 02 F6 | 	mov	arg01, local01
03f60     49 77 C2 FA | 	rdbyte	arg02, local04
03f64     0C 18 B0 FD | 	call	#_lcdDataWrite
03f68     01 92 06 F1 | 	add	local04, #1
03f6c     DC FF 9F FD | 	jmp	#LR__0154
03f70                 | LR__0155
03f70     46 75 02 F6 | 	mov	arg01, local01
03f74     28 1A B0 FD | 	call	#_check2dBusy
03f78     46 75 02 F6 | 	mov	arg01, local01
03f7c     00 76 06 F6 | 	mov	arg02, #0
03f80     D0 FD BF FD | 	call	#_display_text_mode
03f84     A8 F0 03 F6 | 	mov	ptra, fp
03f88     B3 00 A0 FD | 	call	#popregs_
03f8c                 | _display_draw_string_ret
03f8c     2D 00 64 FD | 	ret
03f90                 | 
03f90                 | _display_draw_line
03f90     06 4C 05 F6 | 	mov	COUNT_, #6
03f94     A9 00 A0 FD | 	call	#pushregs_
03f98     3A 8D 02 F6 | 	mov	local01, arg01
03f9c     3B 8F 02 F6 | 	mov	local02, arg02
03fa0     3C 91 02 F6 | 	mov	local03, arg03
03fa4     3D 93 02 F6 | 	mov	local04, arg04
03fa8     3E 95 02 F6 | 	mov	local05, arg05
03fac     46 75 02 F6 | 	mov	arg01, local01
03fb0     3F 77 02 F6 | 	mov	arg02, arg06
03fb4     80 FB BF FD | 	call	#_display_fore_ground_color_16bpp
03fb8     68 76 06 F6 | 	mov	arg02, #104
03fbc     47 79 02 F6 | 	mov	arg03, local02
03fc0     3C 97 02 F6 | 	mov	local06, arg03
03fc4     46 75 02 F6 | 	mov	arg01, local01
03fc8     44 17 B0 FD | 	call	#_lcdRegWrite
03fcc     46 75 02 F6 | 	mov	arg01, local01
03fd0     4B 77 02 F6 | 	mov	arg02, local06
03fd4     9C 17 B0 FD | 	call	#_lcdDataWrite
03fd8     47 79 32 F9 | 	getword	arg03, local02, #0
03fdc     08 78 46 F0 | 	shr	arg03, #8
03fe0     69 76 06 F6 | 	mov	arg02, #105
03fe4     3C 97 02 F6 | 	mov	local06, arg03
03fe8     46 75 02 F6 | 	mov	arg01, local01
03fec     20 17 B0 FD | 	call	#_lcdRegWrite
03ff0     46 75 02 F6 | 	mov	arg01, local01
03ff4     4B 77 02 F6 | 	mov	arg02, local06
03ff8     78 17 B0 FD | 	call	#_lcdDataWrite
03ffc     6A 76 06 F6 | 	mov	arg02, #106
04000     48 79 02 F6 | 	mov	arg03, local03
04004     3C 97 02 F6 | 	mov	local06, arg03
04008     46 75 02 F6 | 	mov	arg01, local01
0400c     00 17 B0 FD | 	call	#_lcdRegWrite
04010     46 75 02 F6 | 	mov	arg01, local01
04014     4B 77 02 F6 | 	mov	arg02, local06
04018     58 17 B0 FD | 	call	#_lcdDataWrite
0401c     48 79 32 F9 | 	getword	arg03, local03, #0
04020     08 78 46 F0 | 	shr	arg03, #8
04024     6B 76 06 F6 | 	mov	arg02, #107
04028     3C 97 02 F6 | 	mov	local06, arg03
0402c     46 75 02 F6 | 	mov	arg01, local01
04030     DC 16 B0 FD | 	call	#_lcdRegWrite
04034     46 75 02 F6 | 	mov	arg01, local01
04038     4B 77 02 F6 | 	mov	arg02, local06
0403c     34 17 B0 FD | 	call	#_lcdDataWrite
04040     6C 76 06 F6 | 	mov	arg02, #108
04044     49 79 02 F6 | 	mov	arg03, local04
04048     3C 97 02 F6 | 	mov	local06, arg03
0404c     46 75 02 F6 | 	mov	arg01, local01
04050     BC 16 B0 FD | 	call	#_lcdRegWrite
04054     46 75 02 F6 | 	mov	arg01, local01
04058     4B 77 02 F6 | 	mov	arg02, local06
0405c     14 17 B0 FD | 	call	#_lcdDataWrite
04060     49 79 32 F9 | 	getword	arg03, local04, #0
04064     08 78 46 F0 | 	shr	arg03, #8
04068     6D 76 06 F6 | 	mov	arg02, #109
0406c     3C 97 02 F6 | 	mov	local06, arg03
04070     46 75 02 F6 | 	mov	arg01, local01
04074     98 16 B0 FD | 	call	#_lcdRegWrite
04078     46 75 02 F6 | 	mov	arg01, local01
0407c     4B 77 02 F6 | 	mov	arg02, local06
04080     F0 16 B0 FD | 	call	#_lcdDataWrite
04084     6E 76 06 F6 | 	mov	arg02, #110
04088     4A 79 02 F6 | 	mov	arg03, local05
0408c     3C 97 02 F6 | 	mov	local06, arg03
04090     46 75 02 F6 | 	mov	arg01, local01
04094     78 16 B0 FD | 	call	#_lcdRegWrite
04098     46 75 02 F6 | 	mov	arg01, local01
0409c     4B 77 02 F6 | 	mov	arg02, local06
040a0     D0 16 B0 FD | 	call	#_lcdDataWrite
040a4     4A 79 32 F9 | 	getword	arg03, local05, #0
040a8     08 78 46 F0 | 	shr	arg03, #8
040ac     6F 76 06 F6 | 	mov	arg02, #111
040b0     3C 97 02 F6 | 	mov	local06, arg03
040b4     46 75 02 F6 | 	mov	arg01, local01
040b8     54 16 B0 FD | 	call	#_lcdRegWrite
040bc     46 75 02 F6 | 	mov	arg01, local01
040c0     4B 77 02 F6 | 	mov	arg02, local06
040c4     AC 16 B0 FD | 	call	#_lcdDataWrite
040c8     67 76 06 F6 | 	mov	arg02, #103
040cc     80 78 06 F6 | 	mov	arg03, #128
040d0     80 96 06 F6 | 	mov	local06, #128
040d4     46 75 02 F6 | 	mov	arg01, local01
040d8     34 16 B0 FD | 	call	#_lcdRegWrite
040dc     46 75 02 F6 | 	mov	arg01, local01
040e0     4B 77 02 F6 | 	mov	arg02, local06
040e4     8C 16 B0 FD | 	call	#_lcdDataWrite
040e8     46 75 02 F6 | 	mov	arg01, local01
040ec     B0 18 B0 FD | 	call	#_check2dBusy
040f0     A8 F0 03 F6 | 	mov	ptra, fp
040f4     B3 00 A0 FD | 	call	#popregs_
040f8                 | _display_draw_line_ret
040f8     2D 00 64 FD | 	ret
040fc                 | 
040fc                 | _display_draw_square_fill
040fc     06 4C 05 F6 | 	mov	COUNT_, #6
04100     A9 00 A0 FD | 	call	#pushregs_
04104     3A 8D 02 F6 | 	mov	local01, arg01
04108     3B 8F 02 F6 | 	mov	local02, arg02
0410c     3C 91 02 F6 | 	mov	local03, arg03
04110     3D 93 02 F6 | 	mov	local04, arg04
04114     3E 95 02 F6 | 	mov	local05, arg05
04118     46 75 02 F6 | 	mov	arg01, local01
0411c     3F 77 02 F6 | 	mov	arg02, arg06
04120     14 FA BF FD | 	call	#_display_fore_ground_color_16bpp
04124     68 76 06 F6 | 	mov	arg02, #104
04128     47 79 02 F6 | 	mov	arg03, local02
0412c     3C 97 02 F6 | 	mov	local06, arg03
04130     46 75 02 F6 | 	mov	arg01, local01
04134     D8 15 B0 FD | 	call	#_lcdRegWrite
04138     46 75 02 F6 | 	mov	arg01, local01
0413c     4B 77 02 F6 | 	mov	arg02, local06
04140     30 16 B0 FD | 	call	#_lcdDataWrite
04144     47 79 32 F9 | 	getword	arg03, local02, #0
04148     08 78 46 F0 | 	shr	arg03, #8
0414c     69 76 06 F6 | 	mov	arg02, #105
04150     3C 97 02 F6 | 	mov	local06, arg03
04154     46 75 02 F6 | 	mov	arg01, local01
04158     B4 15 B0 FD | 	call	#_lcdRegWrite
0415c     46 75 02 F6 | 	mov	arg01, local01
04160     4B 77 02 F6 | 	mov	arg02, local06
04164     0C 16 B0 FD | 	call	#_lcdDataWrite
04168     6A 76 06 F6 | 	mov	arg02, #106
0416c     48 79 02 F6 | 	mov	arg03, local03
04170     3C 97 02 F6 | 	mov	local06, arg03
04174     46 75 02 F6 | 	mov	arg01, local01
04178     94 15 B0 FD | 	call	#_lcdRegWrite
0417c     46 75 02 F6 | 	mov	arg01, local01
04180     4B 77 02 F6 | 	mov	arg02, local06
04184     EC 15 B0 FD | 	call	#_lcdDataWrite
04188     48 79 32 F9 | 	getword	arg03, local03, #0
0418c     08 78 46 F0 | 	shr	arg03, #8
04190     6B 76 06 F6 | 	mov	arg02, #107
04194     3C 97 02 F6 | 	mov	local06, arg03
04198     46 75 02 F6 | 	mov	arg01, local01
0419c     70 15 B0 FD | 	call	#_lcdRegWrite
041a0     46 75 02 F6 | 	mov	arg01, local01
041a4     4B 77 02 F6 | 	mov	arg02, local06
041a8     C8 15 B0 FD | 	call	#_lcdDataWrite
041ac     6C 76 06 F6 | 	mov	arg02, #108
041b0     49 79 02 F6 | 	mov	arg03, local04
041b4     3C 97 02 F6 | 	mov	local06, arg03
041b8     46 75 02 F6 | 	mov	arg01, local01
041bc     50 15 B0 FD | 	call	#_lcdRegWrite
041c0     46 75 02 F6 | 	mov	arg01, local01
041c4     4B 77 02 F6 | 	mov	arg02, local06
041c8     A8 15 B0 FD | 	call	#_lcdDataWrite
041cc     49 79 32 F9 | 	getword	arg03, local04, #0
041d0     08 78 46 F0 | 	shr	arg03, #8
041d4     6D 76 06 F6 | 	mov	arg02, #109
041d8     3C 97 02 F6 | 	mov	local06, arg03
041dc     46 75 02 F6 | 	mov	arg01, local01
041e0     2C 15 B0 FD | 	call	#_lcdRegWrite
041e4     46 75 02 F6 | 	mov	arg01, local01
041e8     4B 77 02 F6 | 	mov	arg02, local06
041ec     84 15 B0 FD | 	call	#_lcdDataWrite
041f0     6E 76 06 F6 | 	mov	arg02, #110
041f4     4A 79 02 F6 | 	mov	arg03, local05
041f8     3C 97 02 F6 | 	mov	local06, arg03
041fc     46 75 02 F6 | 	mov	arg01, local01
04200     0C 15 B0 FD | 	call	#_lcdRegWrite
04204     46 75 02 F6 | 	mov	arg01, local01
04208     4B 77 02 F6 | 	mov	arg02, local06
0420c     64 15 B0 FD | 	call	#_lcdDataWrite
04210     4A 79 32 F9 | 	getword	arg03, local05, #0
04214     08 78 46 F0 | 	shr	arg03, #8
04218     6F 76 06 F6 | 	mov	arg02, #111
0421c     3C 97 02 F6 | 	mov	local06, arg03
04220     46 75 02 F6 | 	mov	arg01, local01
04224     E8 14 B0 FD | 	call	#_lcdRegWrite
04228     46 75 02 F6 | 	mov	arg01, local01
0422c     4B 77 02 F6 | 	mov	arg02, local06
04230     40 15 B0 FD | 	call	#_lcdDataWrite
04234     76 76 06 F6 | 	mov	arg02, #118
04238     E0 78 06 F6 | 	mov	arg03, #224
0423c     E0 96 06 F6 | 	mov	local06, #224
04240     46 75 02 F6 | 	mov	arg01, local01
04244     C8 14 B0 FD | 	call	#_lcdRegWrite
04248     46 75 02 F6 | 	mov	arg01, local01
0424c     4B 77 02 F6 | 	mov	arg02, local06
04250     20 15 B0 FD | 	call	#_lcdDataWrite
04254     46 75 02 F6 | 	mov	arg01, local01
04258     44 17 B0 FD | 	call	#_check2dBusy
0425c     A8 F0 03 F6 | 	mov	ptra, fp
04260     B3 00 A0 FD | 	call	#popregs_
04264                 | _display_draw_square_fill_ret
04264     2D 00 64 FD | 	ret
04268                 | 
04268                 | _display_draw_circle_square_fill
04268     08 4C 05 F6 | 	mov	COUNT_, #8
0426c     A9 00 A0 FD | 	call	#pushregs_
04270     3A 8D 02 F6 | 	mov	local01, arg01
04274     3B 8F 02 F6 | 	mov	local02, arg02
04278     3C 91 02 F6 | 	mov	local03, arg03
0427c     3D 93 02 F6 | 	mov	local04, arg04
04280     3E 95 02 F6 | 	mov	local05, arg05
04284     49 77 32 F9 | 	getword	arg02, local04, #0
04288     47 75 32 F9 | 	getword	arg01, local02, #0
0428c     3A 77 82 F1 | 	sub	arg02, arg01
04290     01 76 86 F1 | 	sub	arg02, #1
04294     3B 77 52 F6 | 	abs	arg02, arg02 wc
04298     01 76 46 F0 | 	shr	arg02, #1
0429c     3B 77 82 F6 | 	negc	arg02, arg02
042a0     4A 97 32 F9 | 	getword	local06, local05, #0
042a4     48 75 32 F9 | 	getword	arg01, local03, #0
042a8     3A 97 82 F1 | 	sub	local06, arg01
042ac     01 96 86 F1 | 	sub	local06, #1
042b0     4B 75 52 F6 | 	abs	arg01, local06 wc
042b4     01 74 46 F0 | 	shr	arg01, #1
042b8     3A 75 82 F6 | 	negc	arg01, arg01
042bc     3F 99 32 F9 | 	getword	local07, arg06, #0
042c0     3B 99 5A F2 | 	cmps	local07, arg02 wcz
042c4     3B 97 02 16 |  if_a	mov	local06, arg02
042c8     3F 97 02 E6 |  if_be	mov	local06, arg06
042cc     4B 9B 02 F6 | 	mov	local08, local06
042d0     40 99 32 F9 | 	getword	local07, arg07, #0
042d4     3A 99 5A F2 | 	cmps	local07, arg01 wcz
042d8     3A 97 02 16 |  if_a	mov	local06, arg01
042dc     40 97 02 E6 |  if_be	mov	local06, arg07
042e0     46 75 02 F6 | 	mov	arg01, local01
042e4     41 77 02 F6 | 	mov	arg02, arg08
042e8     4C F8 BF FD | 	call	#_display_fore_ground_color_16bpp
042ec     68 76 06 F6 | 	mov	arg02, #104
042f0     47 79 02 F6 | 	mov	arg03, local02
042f4     3C 99 02 F6 | 	mov	local07, arg03
042f8     46 75 02 F6 | 	mov	arg01, local01
042fc     10 14 B0 FD | 	call	#_lcdRegWrite
04300     46 75 02 F6 | 	mov	arg01, local01
04304     4C 77 02 F6 | 	mov	arg02, local07
04308     68 14 B0 FD | 	call	#_lcdDataWrite
0430c     47 79 32 F9 | 	getword	arg03, local02, #0
04310     08 78 46 F0 | 	shr	arg03, #8
04314     69 76 06 F6 | 	mov	arg02, #105
04318     3C 99 02 F6 | 	mov	local07, arg03
0431c     46 75 02 F6 | 	mov	arg01, local01
04320     EC 13 B0 FD | 	call	#_lcdRegWrite
04324     46 75 02 F6 | 	mov	arg01, local01
04328     4C 77 02 F6 | 	mov	arg02, local07
0432c     44 14 B0 FD | 	call	#_lcdDataWrite
04330     6A 76 06 F6 | 	mov	arg02, #106
04334     48 79 02 F6 | 	mov	arg03, local03
04338     3C 99 02 F6 | 	mov	local07, arg03
0433c     46 75 02 F6 | 	mov	arg01, local01
04340     CC 13 B0 FD | 	call	#_lcdRegWrite
04344     46 75 02 F6 | 	mov	arg01, local01
04348     4C 77 02 F6 | 	mov	arg02, local07
0434c     24 14 B0 FD | 	call	#_lcdDataWrite
04350     48 79 32 F9 | 	getword	arg03, local03, #0
04354     08 78 46 F0 | 	shr	arg03, #8
04358     6B 76 06 F6 | 	mov	arg02, #107
0435c     3C 99 02 F6 | 	mov	local07, arg03
04360     46 75 02 F6 | 	mov	arg01, local01
04364     A8 13 B0 FD | 	call	#_lcdRegWrite
04368     46 75 02 F6 | 	mov	arg01, local01
0436c     4C 77 02 F6 | 	mov	arg02, local07
04370     00 14 B0 FD | 	call	#_lcdDataWrite
04374     6C 76 06 F6 | 	mov	arg02, #108
04378     49 79 02 F6 | 	mov	arg03, local04
0437c     3C 99 02 F6 | 	mov	local07, arg03
04380     46 75 02 F6 | 	mov	arg01, local01
04384     88 13 B0 FD | 	call	#_lcdRegWrite
04388     46 75 02 F6 | 	mov	arg01, local01
0438c     4C 77 02 F6 | 	mov	arg02, local07
04390     E0 13 B0 FD | 	call	#_lcdDataWrite
04394     49 79 32 F9 | 	getword	arg03, local04, #0
04398     08 78 46 F0 | 	shr	arg03, #8
0439c     6D 76 06 F6 | 	mov	arg02, #109
043a0     3C 99 02 F6 | 	mov	local07, arg03
043a4     46 75 02 F6 | 	mov	arg01, local01
043a8     64 13 B0 FD | 	call	#_lcdRegWrite
043ac     46 75 02 F6 | 	mov	arg01, local01
043b0     4C 77 02 F6 | 	mov	arg02, local07
043b4     BC 13 B0 FD | 	call	#_lcdDataWrite
043b8     6E 76 06 F6 | 	mov	arg02, #110
043bc     4A 79 02 F6 | 	mov	arg03, local05
043c0     3C 99 02 F6 | 	mov	local07, arg03
043c4     46 75 02 F6 | 	mov	arg01, local01
043c8     44 13 B0 FD | 	call	#_lcdRegWrite
043cc     46 75 02 F6 | 	mov	arg01, local01
043d0     4C 77 02 F6 | 	mov	arg02, local07
043d4     9C 13 B0 FD | 	call	#_lcdDataWrite
043d8     4A 79 32 F9 | 	getword	arg03, local05, #0
043dc     08 78 46 F0 | 	shr	arg03, #8
043e0     6F 76 06 F6 | 	mov	arg02, #111
043e4     3C 99 02 F6 | 	mov	local07, arg03
043e8     46 75 02 F6 | 	mov	arg01, local01
043ec     20 13 B0 FD | 	call	#_lcdRegWrite
043f0     46 75 02 F6 | 	mov	arg01, local01
043f4     4C 77 02 F6 | 	mov	arg02, local07
043f8     78 13 B0 FD | 	call	#_lcdDataWrite
043fc     77 76 06 F6 | 	mov	arg02, #119
04400     4D 79 02 F6 | 	mov	arg03, local08
04404     3C 99 02 F6 | 	mov	local07, arg03
04408     46 75 02 F6 | 	mov	arg01, local01
0440c     00 13 B0 FD | 	call	#_lcdRegWrite
04410     46 75 02 F6 | 	mov	arg01, local01
04414     4C 77 02 F6 | 	mov	arg02, local07
04418     58 13 B0 FD | 	call	#_lcdDataWrite
0441c     4D 79 32 F9 | 	getword	arg03, local08, #0
04420     08 78 46 F0 | 	shr	arg03, #8
04424     78 76 06 F6 | 	mov	arg02, #120
04428     3C 9B 02 F6 | 	mov	local08, arg03
0442c     46 75 02 F6 | 	mov	arg01, local01
04430     DC 12 B0 FD | 	call	#_lcdRegWrite
04434     46 75 02 F6 | 	mov	arg01, local01
04438     4D 77 02 F6 | 	mov	arg02, local08
0443c     34 13 B0 FD | 	call	#_lcdDataWrite
04440     79 76 06 F6 | 	mov	arg02, #121
04444     4B 79 02 F6 | 	mov	arg03, local06
04448     3C 9B 02 F6 | 	mov	local08, arg03
0444c     46 75 02 F6 | 	mov	arg01, local01
04450     BC 12 B0 FD | 	call	#_lcdRegWrite
04454     46 75 02 F6 | 	mov	arg01, local01
04458     4D 77 02 F6 | 	mov	arg02, local08
0445c     14 13 B0 FD | 	call	#_lcdDataWrite
04460     4B 79 32 F9 | 	getword	arg03, local06, #0
04464     08 78 46 F0 | 	shr	arg03, #8
04468     7A 76 06 F6 | 	mov	arg02, #122
0446c     3C 9B 02 F6 | 	mov	local08, arg03
04470     46 75 02 F6 | 	mov	arg01, local01
04474     98 12 B0 FD | 	call	#_lcdRegWrite
04478     46 75 02 F6 | 	mov	arg01, local01
0447c     4D 77 02 F6 | 	mov	arg02, local08
04480     F0 12 B0 FD | 	call	#_lcdDataWrite
04484     76 76 06 F6 | 	mov	arg02, #118
04488     F0 78 06 F6 | 	mov	arg03, #240
0448c     F0 9A 06 F6 | 	mov	local08, #240
04490     46 75 02 F6 | 	mov	arg01, local01
04494     78 12 B0 FD | 	call	#_lcdRegWrite
04498     46 75 02 F6 | 	mov	arg01, local01
0449c     4D 77 02 F6 | 	mov	arg02, local08
044a0     D0 12 B0 FD | 	call	#_lcdDataWrite
044a4     46 75 02 F6 | 	mov	arg01, local01
044a8     F4 14 B0 FD | 	call	#_check2dBusy
044ac     A8 F0 03 F6 | 	mov	ptra, fp
044b0     B3 00 A0 FD | 	call	#popregs_
044b4                 | _display_draw_circle_square_fill_ret
044b4     2D 00 64 FD | 	ret
044b8                 | 
044b8                 | _display_bte_memory_copy
044b8     0A 4C 05 F6 | 	mov	COUNT_, #10
044bc     A9 00 A0 FD | 	call	#pushregs_
044c0     3A 8D 02 F6 | 	mov	local01, arg01
044c4     3C 8F 02 F6 | 	mov	local02, arg03
044c8     3D 91 02 F6 | 	mov	local03, arg04
044cc     3E 93 02 F6 | 	mov	local04, arg05
044d0     3F 95 02 F6 | 	mov	local05, arg06
044d4     40 97 02 F6 | 	mov	local06, arg07
044d8     41 99 02 F6 | 	mov	local07, arg08
044dc     42 9B 02 F6 | 	mov	local08, arg09
044e0     43 9D 02 F6 | 	mov	local09, arg10
044e4     44 9F 02 F6 | 	mov	local10, arg11
044e8     46 75 02 F6 | 	mov	arg01, local01
044ec     50 15 B0 FD | 	call	#_bte_Source0_MemoryStartAddr
044f0     46 75 02 F6 | 	mov	arg01, local01
044f4     47 77 02 F6 | 	mov	arg02, local02
044f8     EC 15 B0 FD | 	call	#_bte_Source0_ImageWidth
044fc     46 75 02 F6 | 	mov	arg01, local01
04500     48 77 02 F6 | 	mov	arg02, local03
04504     49 79 02 F6 | 	mov	arg03, local04
04508     3C 16 B0 FD | 	call	#_bte_Source0_WindowStartXY
0450c     46 75 02 F6 | 	mov	arg01, local01
04510     4A 77 02 F6 | 	mov	arg02, local05
04514     D8 16 B0 FD | 	call	#_bte_DestinationMemoryStartAddr
04518     46 75 02 F6 | 	mov	arg01, local01
0451c     4B 77 02 F6 | 	mov	arg02, local06
04520     74 17 B0 FD | 	call	#_bte_DestinationImageWidth
04524     46 75 02 F6 | 	mov	arg01, local01
04528     4C 77 02 F6 | 	mov	arg02, local07
0452c     4D 79 02 F6 | 	mov	arg03, local08
04530     C4 17 B0 FD | 	call	#_bte_DestinationWindowStartXY
04534     46 75 02 F6 | 	mov	arg01, local01
04538     4E 77 02 F6 | 	mov	arg02, local09
0453c     4F 79 02 F6 | 	mov	arg03, local10
04540     5C 18 B0 FD | 	call	#_bte_WindowSize
04544     91 76 06 F6 | 	mov	arg02, #145
04548     C2 78 06 F6 | 	mov	arg03, #194
0454c     C2 9E 06 F6 | 	mov	local10, #194
04550     46 75 02 F6 | 	mov	arg01, local01
04554     B8 11 B0 FD | 	call	#_lcdRegWrite
04558     46 75 02 F6 | 	mov	arg01, local01
0455c     4F 77 02 F6 | 	mov	arg02, local10
04560     10 12 B0 FD | 	call	#_lcdDataWrite
04564     92 76 06 F6 | 	mov	arg02, #146
04568     25 78 06 F6 | 	mov	arg03, #37
0456c     25 9E 06 F6 | 	mov	local10, #37
04570     46 75 02 F6 | 	mov	arg01, local01
04574     98 11 B0 FD | 	call	#_lcdRegWrite
04578     46 75 02 F6 | 	mov	arg01, local01
0457c     4F 77 02 F6 | 	mov	arg02, local10
04580     F0 11 B0 FD | 	call	#_lcdDataWrite
04584     90 76 06 F6 | 	mov	arg02, #144
04588     10 78 06 F6 | 	mov	arg03, #16
0458c     10 9E 06 F6 | 	mov	local10, #16
04590     46 75 02 F6 | 	mov	arg01, local01
04594     78 11 B0 FD | 	call	#_lcdRegWrite
04598     46 75 02 F6 | 	mov	arg01, local01
0459c     4F 77 02 F6 | 	mov	arg02, local10
045a0     D0 11 B0 FD | 	call	#_lcdDataWrite
045a4     46 75 02 F6 | 	mov	arg01, local01
045a8     F4 13 B0 FD | 	call	#_check2dBusy
045ac     A8 F0 03 F6 | 	mov	ptra, fp
045b0     B3 00 A0 FD | 	call	#popregs_
045b4                 | _display_bte_memory_copy_ret
045b4     2D 00 64 FD | 	ret
045b8                 | 
045b8                 | _display_bte_memory_copy_with_chroma_key
045b8     0B 4C 05 F6 | 	mov	COUNT_, #11
045bc     A9 00 A0 FD | 	call	#pushregs_
045c0     3A 8D 02 F6 | 	mov	local01, arg01
045c4     3C 8F 02 F6 | 	mov	local02, arg03
045c8     3D 91 02 F6 | 	mov	local03, arg04
045cc     3E 93 02 F6 | 	mov	local04, arg05
045d0     3F 95 02 F6 | 	mov	local05, arg06
045d4     40 97 02 F6 | 	mov	local06, arg07
045d8     41 99 02 F6 | 	mov	local07, arg08
045dc     42 9B 02 F6 | 	mov	local08, arg09
045e0     43 9D 02 F6 | 	mov	local09, arg10
045e4     44 9F 02 F6 | 	mov	local10, arg11
045e8     45 A1 02 F6 | 	mov	local11, arg12
045ec     46 75 02 F6 | 	mov	arg01, local01
045f0     4C 14 B0 FD | 	call	#_bte_Source0_MemoryStartAddr
045f4     46 75 02 F6 | 	mov	arg01, local01
045f8     47 77 02 F6 | 	mov	arg02, local02
045fc     E8 14 B0 FD | 	call	#_bte_Source0_ImageWidth
04600     46 75 02 F6 | 	mov	arg01, local01
04604     48 77 02 F6 | 	mov	arg02, local03
04608     49 79 02 F6 | 	mov	arg03, local04
0460c     38 15 B0 FD | 	call	#_bte_Source0_WindowStartXY
04610     46 75 02 F6 | 	mov	arg01, local01
04614     4A 77 02 F6 | 	mov	arg02, local05
04618     D4 15 B0 FD | 	call	#_bte_DestinationMemoryStartAddr
0461c     46 75 02 F6 | 	mov	arg01, local01
04620     4B 77 02 F6 | 	mov	arg02, local06
04624     70 16 B0 FD | 	call	#_bte_DestinationImageWidth
04628     46 75 02 F6 | 	mov	arg01, local01
0462c     4C 77 02 F6 | 	mov	arg02, local07
04630     4D 79 02 F6 | 	mov	arg03, local08
04634     C0 16 B0 FD | 	call	#_bte_DestinationWindowStartXY
04638     46 75 02 F6 | 	mov	arg01, local01
0463c     4E 77 02 F6 | 	mov	arg02, local09
04640     4F 79 02 F6 | 	mov	arg03, local10
04644     58 17 B0 FD | 	call	#_bte_WindowSize
04648     46 75 02 F6 | 	mov	arg01, local01
0464c     50 77 02 F6 | 	mov	arg02, local11
04650     6C F5 BF FD | 	call	#_display_back_ground_color_16bpp
04654     91 76 06 F6 | 	mov	arg02, #145
04658     05 78 06 F6 | 	mov	arg03, #5
0465c     05 A0 06 F6 | 	mov	local11, #5
04660     46 75 02 F6 | 	mov	arg01, local01
04664     A8 10 B0 FD | 	call	#_lcdRegWrite
04668     46 75 02 F6 | 	mov	arg01, local01
0466c     50 77 02 F6 | 	mov	arg02, local11
04670     00 11 B0 FD | 	call	#_lcdDataWrite
04674     92 76 06 F6 | 	mov	arg02, #146
04678     25 78 06 F6 | 	mov	arg03, #37
0467c     25 A0 06 F6 | 	mov	local11, #37
04680     46 75 02 F6 | 	mov	arg01, local01
04684     88 10 B0 FD | 	call	#_lcdRegWrite
04688     46 75 02 F6 | 	mov	arg01, local01
0468c     50 77 02 F6 | 	mov	arg02, local11
04690     E0 10 B0 FD | 	call	#_lcdDataWrite
04694     90 76 06 F6 | 	mov	arg02, #144
04698     10 78 06 F6 | 	mov	arg03, #16
0469c     10 A0 06 F6 | 	mov	local11, #16
046a0     46 75 02 F6 | 	mov	arg01, local01
046a4     68 10 B0 FD | 	call	#_lcdRegWrite
046a8     46 75 02 F6 | 	mov	arg01, local01
046ac     50 77 02 F6 | 	mov	arg02, local11
046b0     C0 10 B0 FD | 	call	#_lcdDataWrite
046b4     46 75 02 F6 | 	mov	arg01, local01
046b8     E4 12 B0 FD | 	call	#_check2dBusy
046bc     A8 F0 03 F6 | 	mov	ptra, fp
046c0     B3 00 A0 FD | 	call	#popregs_
046c4                 | _display_bte_memory_copy_with_chroma_key_ret
046c4     2D 00 64 FD | 	ret
046c8                 | 
046c8                 | _display_initialize
046c8     03 4C 05 F6 | 	mov	COUNT_, #3
046cc     A9 00 A0 FD | 	call	#pushregs_
046d0     3A 8D 02 F6 | 	mov	local01, arg01
046d4     64 02 B0 FD | 	call	#_display_pll_initial
046d8     00 34 0E F2 | 	cmp	result1, #0 wz
046dc     38 00 90 5D |  if_ne	jmp	#LR__0156
046e0     00 74 06 F6 | 	mov	arg01, #0
046e4     60 44 B2 FD | 	call	#__system___getiolock_1205
046e8     1A 75 02 F6 | 	mov	arg01, result1
046ec     30 0C B2 FD | 	call	#__system___lockmem
046f0     47 01 00 FF 
046f4     81 77 06 F6 | 	mov	arg02, ##@LR__1824
046f8     00 74 06 F6 | 	mov	arg01, #0
046fc     00 78 06 F6 | 	mov	arg03, #0
04700     B0 11 B2 FD | 	call	#__system___basic_print_string
04704     00 74 06 F6 | 	mov	arg01, #0
04708     3C 44 B2 FD | 	call	#__system___getiolock_1205
0470c     1A 01 68 FC | 	wrlong	#0, result1
04710                 | '     return DISPLAY_PLL_FAIL;
04710     03 34 06 F6 | 	mov	result1, #3
04714     18 02 90 FD | 	jmp	#LR__0158
04718                 | LR__0156
04718     46 75 02 F6 | 	mov	arg01, local01
0471c     3C 03 B0 FD | 	call	#_display_sdram_initial
04720     00 34 0E F2 | 	cmp	result1, #0 wz
04724     38 00 90 5D |  if_ne	jmp	#LR__0157
04728     00 74 06 F6 | 	mov	arg01, #0
0472c     18 44 B2 FD | 	call	#__system___getiolock_1205
04730     1A 75 02 F6 | 	mov	arg01, result1
04734     E8 0B B2 FD | 	call	#__system___lockmem
04738     47 01 00 FF 
0473c     93 77 06 F6 | 	mov	arg02, ##@LR__1825
04740     00 74 06 F6 | 	mov	arg01, #0
04744     00 78 06 F6 | 	mov	arg03, #0
04748     68 11 B2 FD | 	call	#__system___basic_print_string
0474c     00 74 06 F6 | 	mov	arg01, #0
04750     F4 43 B2 FD | 	call	#__system___getiolock_1205
04754     1A 01 68 FC | 	wrlong	#0, result1
04758                 | '     return DISPLAY_SDRAM_FAIL;
04758     04 34 06 F6 | 	mov	result1, #4
0475c     D0 01 90 FD | 	jmp	#LR__0158
04760                 | LR__0157
04760     46 75 02 F6 | 	mov	arg01, local01
04764     01 76 06 F6 | 	mov	arg02, #1
04768     A4 0F B0 FD | 	call	#_lcdRegWrite
0476c     46 75 02 F6 | 	mov	arg01, local01
04770     82 76 06 F6 | 	mov	arg02, #130
04774     FC 0F B0 FD | 	call	#_lcdDataWrite
04778     46 75 02 F6 | 	mov	arg01, local01
0477c     02 76 06 F6 | 	mov	arg02, #2
04780     8C 0F B0 FD | 	call	#_lcdRegWrite
04784     46 75 02 F6 | 	mov	arg01, local01
04788     00 76 06 F6 | 	mov	arg02, #0
0478c     E4 0F B0 FD | 	call	#_lcdDataWrite
04790     46 75 02 F6 | 	mov	arg01, local01
04794     03 76 06 F6 | 	mov	arg02, #3
04798     74 0F B0 FD | 	call	#_lcdRegWrite
0479c     46 75 02 F6 | 	mov	arg01, local01
047a0     00 76 06 F6 | 	mov	arg02, #0
047a4     CC 0F B0 FD | 	call	#_lcdDataWrite
047a8     46 75 02 F6 | 	mov	arg01, local01
047ac     10 76 06 F6 | 	mov	arg02, #16
047b0     5C 0F B0 FD | 	call	#_lcdRegWrite
047b4     46 75 02 F6 | 	mov	arg01, local01
047b8     04 76 06 F6 | 	mov	arg02, #4
047bc     B4 0F B0 FD | 	call	#_lcdDataWrite
047c0     46 75 02 F6 | 	mov	arg01, local01
047c4     11 76 06 F6 | 	mov	arg02, #17
047c8     44 0F B0 FD | 	call	#_lcdRegWrite
047cc     46 75 02 F6 | 	mov	arg01, local01
047d0     05 76 06 F6 | 	mov	arg02, #5
047d4     9C 0F B0 FD | 	call	#_lcdDataWrite
047d8     46 75 02 F6 | 	mov	arg01, local01
047dc     5E 76 06 F6 | 	mov	arg02, #94
047e0     2C 0F B0 FD | 	call	#_lcdRegWrite
047e4     46 75 02 F6 | 	mov	arg01, local01
047e8     01 76 06 F6 | 	mov	arg02, #1
047ec     84 0F B0 FD | 	call	#_lcdDataWrite
047f0     92 76 06 F6 | 	mov	arg02, #146
047f4     25 78 06 F6 | 	mov	arg03, #37
047f8     25 8E 06 F6 | 	mov	local02, #37
047fc     46 75 02 F6 | 	mov	arg01, local01
04800     0C 0F B0 FD | 	call	#_lcdRegWrite
04804     46 75 02 F6 | 	mov	arg01, local01
04808     47 77 02 F6 | 	mov	arg02, local02
0480c     64 0F B0 FD | 	call	#_lcdDataWrite
04810     46 75 02 F6 | 	mov	arg01, local01
04814     12 76 06 F6 | 	mov	arg02, #18
04818     F4 0E B0 FD | 	call	#_lcdRegWrite
0481c     46 75 02 F6 | 	mov	arg01, local01
04820     80 76 06 F6 | 	mov	arg02, #128
04824     4C 0F B0 FD | 	call	#_lcdDataWrite
04828     46 75 02 F6 | 	mov	arg01, local01
0482c     13 76 06 F6 | 	mov	arg02, #19
04830     DC 0E B0 FD | 	call	#_lcdRegWrite
04834     46 75 02 F6 | 	mov	arg01, local01
04838     C0 76 06 F6 | 	mov	arg02, #192
0483c     34 0F B0 FD | 	call	#_lcdDataWrite
04840     46 75 02 F6 | 	mov	arg01, local01
04844     0A 76 C6 F9 | 	decod	arg02, #10
04848     01 00 00 FF 
0484c     58 78 06 F6 | 	mov	arg03, ##600
04850     E4 EB BF FD | 	call	#_display_lcd_horizontal_width_vertical_height
04854     46 75 02 F6 | 	mov	arg01, local01
04858     A0 76 06 F6 | 	mov	arg02, #160
0485c     A0 EC BF FD | 	call	#_display_lcd_horizontal_non_display
04860     46 75 02 F6 | 	mov	arg01, local01
04864     A0 76 06 F6 | 	mov	arg02, #160
04868     5C ED BF FD | 	call	#_display_lcd_hsync_start_position
0486c     46 75 02 F6 | 	mov	arg01, local01
04870     46 76 06 F6 | 	mov	arg02, #70
04874     CC ED BF FD | 	call	#_display_lcd_hsync_pulse_width
04878     46 75 02 F6 | 	mov	arg01, local01
0487c     17 76 06 F6 | 	mov	arg02, #23
04880     3C EE BF FD | 	call	#_display_lcd_vertical_non_display
04884     0B 78 06 F6 | 	mov	arg03, #11
04888     1E 76 06 F6 | 	mov	arg02, #30
0488c     0B 8E 06 F6 | 	mov	local02, #11
04890     46 75 02 F6 | 	mov	arg01, local01
04894     78 0E B0 FD | 	call	#_lcdRegWrite
04898     46 75 02 F6 | 	mov	arg01, local01
0489c     47 77 02 F6 | 	mov	arg02, local02
048a0     D0 0E B0 FD | 	call	#_lcdDataWrite
048a4     09 78 06 F6 | 	mov	arg03, #9
048a8     1F 76 06 F6 | 	mov	arg02, #31
048ac     46 91 02 F6 | 	mov	local03, local01
048b0     09 8E 06 F6 | 	mov	local02, #9
048b4     48 75 02 F6 | 	mov	arg01, local03
048b8     54 0E B0 FD | 	call	#_lcdRegWrite
048bc     48 75 02 F6 | 	mov	arg01, local03
048c0     47 77 02 F6 | 	mov	arg02, local02
048c4     AC 0E B0 FD | 	call	#_lcdDataWrite
048c8     46 75 02 F6 | 	mov	arg01, local01
048cc     00 76 06 F6 | 	mov	arg02, #0
048d0     50 EE BF FD | 	call	#_display_image_start_address
048d4     46 75 02 F6 | 	mov	arg01, local01
048d8     0A 76 C6 F9 | 	decod	arg02, #10
048dc     EC EE BF FD | 	call	#_display_image_width
048e0     46 75 02 F6 | 	mov	arg01, local01
048e4     00 76 06 F6 | 	mov	arg02, #0
048e8     00 78 06 F6 | 	mov	arg03, #0
048ec     3C EF BF FD | 	call	#_display_window_start_xy
048f0     46 75 02 F6 | 	mov	arg01, local01
048f4     00 76 06 F6 | 	mov	arg02, #0
048f8     D8 EF BF FD | 	call	#_display_canvas_image_start_address
048fc     46 75 02 F6 | 	mov	arg01, local01
04900     0A 76 C6 F9 | 	decod	arg02, #10
04904     80 F0 BF FD | 	call	#_display_canvas_image_width
04908     46 75 02 F6 | 	mov	arg01, local01
0490c     00 76 06 F6 | 	mov	arg02, #0
04910     00 78 06 F6 | 	mov	arg03, #0
04914     D0 F0 BF FD | 	call	#_display_active_window_xy
04918     46 75 02 F6 | 	mov	arg01, local01
0491c     0A 76 C6 F9 | 	decod	arg02, #10
04920     01 00 00 FF 
04924     58 78 06 F6 | 	mov	arg03, ##600
04928     64 F1 BF FD | 	call	#_display_active_window_wh
0492c                 | '   }
0492c                 | '   lcdRegWrite(display,  0x01 );
0492c                 | '   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0  << 5 |  0  << 3 |  0  << 2 |  1  << 1 |  0 );
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x02 );
0492c                 | '   lcdDataWrite(display,  0  << 6 |  0  << 4 |  0  << 1);
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x03 );
0492c                 | '   lcdDataWrite(display,  0  << 3 |  0  << 2 |  0 );
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x10 );
0492c                 | '   lcdDataWrite(display,  0  << 7 |  0  << 6 |  0  << 4 |  1  << 2 |  0 );
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x11 );
0492c                 | '   lcdDataWrite(display,  1  << 2 |  1 );
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x5E );
0492c                 | '   lcdDataWrite(display,  0  << 2 |  1 );
0492c                 | ' 
0492c                 | '   lcdRegDataWrite(display,  0x92 ,  1  << 5 |  1  << 2 |  1 );
0492c                 | ' 
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x12 );
0492c                 | '   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0 );
0492c                 | ' 
0492c                 | '   lcdRegWrite(display,  0x13 );
0492c                 | '   lcdDataWrite(display,  1  << 7 |  1  << 6 |  0  << 5);
0492c                 | ' 
0492c                 | '   display_lcd_horizontal_width_vertical_height(display,  1024 ,  600 );
0492c                 | '   display_lcd_horizontal_non_display(display,  160 );
0492c                 | '   display_lcd_hsync_start_position(display,  160 );
0492c                 | '   display_lcd_hsync_pulse_width(display,  70 );
0492c                 | '   display_lcd_vertical_non_display(display,  23 );
0492c                 | '   display_lcd_vsync_start_position(display,  12 );
0492c                 | '   display_lcd_vsync_pulse_width(display,  10 );
0492c                 | ' 
0492c                 | ' 
0492c                 | '   display_image_start_address(display,  0 );
0492c                 | '   display_image_width(display,  1024 );
0492c                 | '   display_window_start_xy(display, 0, 0);
0492c                 | '   display_canvas_image_start_address(display,  0 );
0492c                 | '   display_canvas_image_width(display,  1024 );
0492c                 | '   display_active_window_xy(display, 0, 0);
0492c                 | '   display_active_window_wh(display,  1024 ,  600 );
0492c                 | '   return SUCCESS;
0492c     00 34 06 F6 | 	mov	result1, #0
04930                 | LR__0158
04930     A8 F0 03 F6 | 	mov	ptra, fp
04934     B3 00 A0 FD | 	call	#popregs_
04938                 | _display_initialize_ret
04938     2D 00 64 FD | 	ret
0493c                 | 
0493c                 | _display_pll_initial
0493c     03 4C 05 F6 | 	mov	COUNT_, #3
04940     A9 00 A0 FD | 	call	#pushregs_
04944     3A 8D 02 F6 | 	mov	local01, arg01
04948     05 76 06 F6 | 	mov	arg02, #5
0494c     06 78 06 F6 | 	mov	arg03, #6
04950     3A 8F 02 F6 | 	mov	local02, arg01
04954     06 90 06 F6 | 	mov	local03, #6
04958     47 75 02 F6 | 	mov	arg01, local02
0495c     B0 0D B0 FD | 	call	#_lcdRegWrite
04960     47 75 02 F6 | 	mov	arg01, local02
04964     48 77 02 F6 | 	mov	arg02, local03
04968     08 0E B0 FD | 	call	#_lcdDataWrite
0496c     06 76 06 F6 | 	mov	arg02, #6
04970     27 78 06 F6 | 	mov	arg03, #39
04974     27 90 06 F6 | 	mov	local03, #39
04978     46 75 02 F6 | 	mov	arg01, local01
0497c     90 0D B0 FD | 	call	#_lcdRegWrite
04980     46 75 02 F6 | 	mov	arg01, local01
04984     48 77 02 F6 | 	mov	arg02, local03
04988     E8 0D B0 FD | 	call	#_lcdDataWrite
0498c     07 76 06 F6 | 	mov	arg02, #7
04990     04 78 06 F6 | 	mov	arg03, #4
04994     04 90 06 F6 | 	mov	local03, #4
04998     46 75 02 F6 | 	mov	arg01, local01
0499c     70 0D B0 FD | 	call	#_lcdRegWrite
049a0     46 75 02 F6 | 	mov	arg01, local01
049a4     48 77 02 F6 | 	mov	arg02, local03
049a8     C8 0D B0 FD | 	call	#_lcdDataWrite
049ac     08 76 06 F6 | 	mov	arg02, #8
049b0     2F 78 06 F6 | 	mov	arg03, #47
049b4     2F 90 06 F6 | 	mov	local03, #47
049b8     46 75 02 F6 | 	mov	arg01, local01
049bc     50 0D B0 FD | 	call	#_lcdRegWrite
049c0     46 75 02 F6 | 	mov	arg01, local01
049c4     48 77 02 F6 | 	mov	arg02, local03
049c8     A8 0D B0 FD | 	call	#_lcdDataWrite
049cc     09 76 06 F6 | 	mov	arg02, #9
049d0     04 78 06 F6 | 	mov	arg03, #4
049d4     04 90 06 F6 | 	mov	local03, #4
049d8     46 75 02 F6 | 	mov	arg01, local01
049dc     30 0D B0 FD | 	call	#_lcdRegWrite
049e0     46 75 02 F6 | 	mov	arg01, local01
049e4     48 77 02 F6 | 	mov	arg02, local03
049e8     88 0D B0 FD | 	call	#_lcdDataWrite
049ec     0A 76 06 F6 | 	mov	arg02, #10
049f0     2F 78 06 F6 | 	mov	arg03, #47
049f4     2F 90 06 F6 | 	mov	local03, #47
049f8     46 75 02 F6 | 	mov	arg01, local01
049fc     10 0D B0 FD | 	call	#_lcdRegWrite
04a00     46 75 02 F6 | 	mov	arg01, local01
04a04     48 77 02 F6 | 	mov	arg02, local03
04a08     68 0D B0 FD | 	call	#_lcdDataWrite
04a0c     01 74 06 F6 | 	mov	arg01, #1
04a10     24 0A B2 FD | 	call	#__system___waitms
04a14     46 75 02 F6 | 	mov	arg01, local01
04a18     01 76 06 F6 | 	mov	arg02, #1
04a1c     F0 0C B0 FD | 	call	#_lcdRegWrite
04a20     46 75 02 F6 | 	mov	arg01, local01
04a24     80 76 06 F6 | 	mov	arg02, #128
04a28     48 0D B0 FD | 	call	#_lcdDataWrite
04a2c     02 74 06 F6 | 	mov	arg01, #2
04a30     04 0A B2 FD | 	call	#__system___waitms
04a34     46 75 02 F6 | 	mov	arg01, local01
04a38     9C 0D B0 FD | 	call	#_lcdDataRead
04a3c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
04a40     80 34 06 F5 | 	and	result1, #128
04a44     80 34 0E F2 | 	cmp	result1, #128 wz
04a48                 | '     return  (1) ;
04a48     01 34 06 A6 |  if_e	mov	result1, #1
04a4c                 | '     return  (0) ;
04a4c     00 34 06 56 |  if_ne	mov	result1, #0
04a50     A8 F0 03 F6 | 	mov	ptra, fp
04a54     B3 00 A0 FD | 	call	#popregs_
04a58                 | _display_pll_initial_ret
04a58     2D 00 64 FD | 	ret
04a5c                 | 
04a5c                 | _display_sdram_initial
04a5c     03 4C 05 F6 | 	mov	COUNT_, #3
04a60     A9 00 A0 FD | 	call	#pushregs_
04a64     3A 8D 02 F6 | 	mov	local01, arg01
04a68     E0 76 06 F6 | 	mov	arg02, #224
04a6c     29 78 06 F6 | 	mov	arg03, #41
04a70     3A 8F 02 F6 | 	mov	local02, arg01
04a74     29 90 06 F6 | 	mov	local03, #41
04a78     47 75 02 F6 | 	mov	arg01, local02
04a7c     90 0C B0 FD | 	call	#_lcdRegWrite
04a80     47 75 02 F6 | 	mov	arg01, local02
04a84     48 77 02 F6 | 	mov	arg02, local03
04a88     E8 0C B0 FD | 	call	#_lcdDataWrite
04a8c     E1 76 06 F6 | 	mov	arg02, #225
04a90     03 78 06 F6 | 	mov	arg03, #3
04a94     03 90 06 F6 | 	mov	local03, #3
04a98     46 75 02 F6 | 	mov	arg01, local01
04a9c     70 0C B0 FD | 	call	#_lcdRegWrite
04aa0     46 75 02 F6 | 	mov	arg01, local01
04aa4     48 77 02 F6 | 	mov	arg02, local03
04aa8     C8 0C B0 FD | 	call	#_lcdDataWrite
04aac     E2 76 06 F6 | 	mov	arg02, #226
04ab0     03 00 00 FF 
04ab4     51 79 06 F6 | 	mov	arg03, ##1873
04ab8     03 00 00 FF 
04abc     51 91 06 F6 | 	mov	local03, ##1873
04ac0     46 75 02 F6 | 	mov	arg01, local01
04ac4     48 0C B0 FD | 	call	#_lcdRegWrite
04ac8     46 75 02 F6 | 	mov	arg01, local01
04acc     48 77 02 F6 | 	mov	arg02, local03
04ad0     A0 0C B0 FD | 	call	#_lcdDataWrite
04ad4     E3 76 06 F6 | 	mov	arg02, #227
04ad8     07 78 06 F6 | 	mov	arg03, #7
04adc     07 90 06 F6 | 	mov	local03, #7
04ae0     46 75 02 F6 | 	mov	arg01, local01
04ae4     28 0C B0 FD | 	call	#_lcdRegWrite
04ae8     46 75 02 F6 | 	mov	arg01, local01
04aec     48 77 02 F6 | 	mov	arg02, local03
04af0     80 0C B0 FD | 	call	#_lcdDataWrite
04af4     E4 76 06 F6 | 	mov	arg02, #228
04af8     01 78 06 F6 | 	mov	arg03, #1
04afc     01 90 06 F6 | 	mov	local03, #1
04b00     46 75 02 F6 | 	mov	arg01, local01
04b04     08 0C B0 FD | 	call	#_lcdRegWrite
04b08     46 75 02 F6 | 	mov	arg01, local01
04b0c     48 77 02 F6 | 	mov	arg02, local03
04b10     60 0C B0 FD | 	call	#_lcdDataWrite
04b14     46 75 02 F6 | 	mov	arg01, local01
04b18     CC 0E B0 FD | 	call	#_checkSdramReady
04b1c                 | ' {
04b1c                 | '   uint8_t CAS_Latency;
04b1c                 | '   uint16_t Auto_Refresh;
04b1c                 | ' 
04b1c                 | '   CAS_Latency = 3;
04b1c                 | '   Auto_Refresh = (64 *  120  * 1000) / (4096);
04b1c                 | '   Auto_Refresh = Auto_Refresh - 2;
04b1c                 | '   lcdRegDataWrite(display, 0xe0, 0x29);
04b1c                 | '   lcdRegDataWrite(display, 0xe1, CAS_Latency);
04b1c                 | '   lcdRegDataWrite(display, 0xe2, Auto_Refresh);
04b1c                 | '   lcdRegDataWrite(display, 0xe3, Auto_Refresh >> 8);
04b1c                 | '   lcdRegDataWrite(display, 0xe4, 0x01);
04b1c                 | ' 
04b1c                 | '   checkSdramReady(display);
04b1c                 | '   return  (1) ;
04b1c     01 34 06 F6 | 	mov	result1, #1
04b20     A8 F0 03 F6 | 	mov	ptra, fp
04b24     B3 00 A0 FD | 	call	#popregs_
04b28                 | _display_sdram_initial_ret
04b28     2D 00 64 FD | 	ret
04b2c                 | 
04b2c                 | _display_gt9271_send_cfg
04b2c     01 4C 05 F6 | 	mov	COUNT_, #1
04b30     A9 00 A0 FD | 	call	#pushregs_
04b34     3B 8D 02 F6 | 	mov	local01, arg02
04b38     3C 7B 02 F6 | 	mov	arg04, arg03
04b3c     40 00 00 FF 
04b40     47 76 06 F6 | 	mov	arg02, ##32839
04b44     46 79 02 F6 | 	mov	arg03, local01
04b48     18 00 B0 FD | 	call	#_display_write_gt9271_touch_register
04b4c     0A 74 06 F6 | 	mov	arg01, #10
04b50     E4 08 B2 FD | 	call	#__system___waitms
04b54     00 34 06 F6 | 	mov	result1, #0
04b58     A8 F0 03 F6 | 	mov	ptra, fp
04b5c     B3 00 A0 FD | 	call	#popregs_
04b60                 | _display_gt9271_send_cfg_ret
04b60     2D 00 64 FD | 	ret
04b64                 | 
04b64                 | _display_write_gt9271_touch_register
04b64     02 4C 05 F6 | 	mov	COUNT_, #2
04b68     A9 00 A0 FD | 	call	#pushregs_
04b6c     3A 8D 02 F6 | 	mov	local01, arg01
04b70     2C 8C 06 F1 | 	add	local01, #44
04b74     C9 8E 02 F6 | 	mov	local02, objptr
04b78     46 93 01 F6 | 	mov	objptr, local01
04b7c     00 6A B1 FD | 	call	#_jm_i2c_spin2_start
04b80     46 93 01 F6 | 	mov	objptr, local01
04b84     18 8C 86 F1 | 	sub	local01, #24
04b88     46 75 02 FB | 	rdlong	arg01, local01
04b8c     38 6A B1 FD | 	call	#_jm_i2c_spin2_write
04b90     18 8C 06 F1 | 	add	local01, #24
04b94     46 93 01 F6 | 	mov	objptr, local01
04b98     3B 75 32 F9 | 	getword	arg01, arg02, #0
04b9c     08 74 46 F0 | 	shr	arg01, #8
04ba0     24 6A B1 FD | 	call	#_jm_i2c_spin2_write
04ba4     46 93 01 F6 | 	mov	objptr, local01
04ba8     2C 8C 86 F1 | 	sub	local01, #44
04bac     3B 75 32 F9 | 	getword	arg01, arg02, #0
04bb0     14 6A B1 FD | 	call	#_jm_i2c_spin2_write
04bb4     47 93 01 F6 | 	mov	objptr, local02
04bb8                 | ' {
04bb8                 | '   uint16_t i = 0;
04bb8                 | '   display->i2cBus.start();
04bb8                 | '   display->i2cBus.write(display->i2c_addr_write);
04bb8                 | '   display->i2cBus.write(regAddr >> 8);
04bb8                 | '   display->i2cBus.write(regAddr);
04bb8                 | '   for (i = 0; i < cnt; i++, val++)
04bb8     00 8E 06 F6 | 	mov	local02, #0
04bbc                 | LR__0159
04bbc     47 77 32 F9 | 	getword	arg02, local02, #0
04bc0     3D 75 32 F9 | 	getword	arg01, arg04, #0
04bc4     3A 77 12 F2 | 	cmp	arg02, arg01 wc
04bc8     28 00 90 3D |  if_ae	jmp	#LR__0160
04bcc     2C 8C 06 F1 | 	add	local01, #44
04bd0     3C 75 C2 FA | 	rdbyte	arg01, arg03
04bd4     C9 76 02 F6 | 	mov	arg02, objptr
04bd8     46 93 01 F6 | 	mov	objptr, local01
04bdc     E8 69 B1 FD | 	call	#_jm_i2c_spin2_write
04be0     3B 93 01 F6 | 	mov	objptr, arg02
04be4     01 8E 06 F1 | 	add	local02, #1
04be8     01 78 06 F1 | 	add	arg03, #1
04bec     2C 8C 86 F1 | 	sub	local01, #44
04bf0     C8 FF 9F FD | 	jmp	#LR__0159
04bf4                 | LR__0160
04bf4     2C 8C 06 F1 | 	add	local01, #44
04bf8     C9 8E 02 F6 | 	mov	local02, objptr
04bfc     46 93 01 F6 | 	mov	objptr, local01
04c00     D4 6A B1 FD | 	call	#_jm_i2c_spin2_stop
04c04     47 93 01 F6 | 	mov	objptr, local02
04c08     A8 F0 03 F6 | 	mov	ptra, fp
04c0c     B3 00 A0 FD | 	call	#popregs_
04c10                 | _display_write_gt9271_touch_register_ret
04c10     2D 00 64 FD | 	ret
04c14                 | 
04c14                 | _display_read_gt9271_touch_addr
04c14     07 4C 05 F6 | 	mov	COUNT_, #7
04c18     A9 00 A0 FD | 	call	#pushregs_
04c1c     3A 8D 02 F6 | 	mov	local01, arg01
04c20     3B 8F 02 F6 | 	mov	local02, arg02
04c24     3C 91 02 F6 | 	mov	local03, arg03
04c28     3D 93 02 F6 | 	mov	local04, arg04
04c2c     2C 8C 06 F1 | 	add	local01, #44
04c30     C9 94 02 F6 | 	mov	local05, objptr
04c34     46 93 01 F6 | 	mov	objptr, local01
04c38     44 69 B1 FD | 	call	#_jm_i2c_spin2_start
04c3c     46 93 01 F6 | 	mov	objptr, local01
04c40     18 8C 86 F1 | 	sub	local01, #24
04c44     46 75 02 FB | 	rdlong	arg01, local01
04c48     7C 69 B1 FD | 	call	#_jm_i2c_spin2_write
04c4c     18 8C 06 F1 | 	add	local01, #24
04c50     46 93 01 F6 | 	mov	objptr, local01
04c54     47 75 32 F9 | 	getword	arg01, local02, #0
04c58     08 74 46 F0 | 	shr	arg01, #8
04c5c     68 69 B1 FD | 	call	#_jm_i2c_spin2_write
04c60     46 93 01 F6 | 	mov	objptr, local01
04c64     47 75 32 F9 | 	getword	arg01, local02, #0
04c68     5C 69 B1 FD | 	call	#_jm_i2c_spin2_write
04c6c     46 93 01 F6 | 	mov	objptr, local01
04c70     0C 69 B1 FD | 	call	#_jm_i2c_spin2_start
04c74     46 93 01 F6 | 	mov	objptr, local01
04c78     14 8C 86 F1 | 	sub	local01, #20
04c7c     46 75 02 FB | 	rdlong	arg01, local01
04c80     18 8C 86 F1 | 	sub	local01, #24
04c84     40 69 B1 FD | 	call	#_jm_i2c_spin2_write
04c88     4A 93 01 F6 | 	mov	objptr, local05
04c8c                 | '   {
04c8c                 | '     display->i2cBus.write(*val);
04c8c                 | '   }
04c8c                 | ' 
04c8c                 | '   display->i2cBus.stop();
04c8c                 | ' }
04c8c                 | ' 
04c8c                 | ' uint8_t display_gt9271_send_cfg(Display *display, uint8_t *buf, uint16_t cfg_len)
04c8c                 | ' {
04c8c                 | '   display_write_gt9271_touch_register(display, 0x8047, buf, cfg_len);
04c8c                 | '   _waitms(10);
04c8c                 | ' }
04c8c                 | ' 
04c8c                 | ' uint8_t display_read_gt9271_touch_addr(Display *display, uint16_t regAddr, uint8_t *pBuf, uint8_t len)
04c8c                 | ' {
04c8c                 | '   uint8_t i;
04c8c                 | '   display->i2cBus.start();
04c8c                 | ' 
04c8c                 | '   display->i2cBus.write(display->i2c_addr_write);
04c8c                 | '   display->i2cBus.write(regAddr >> 8);
04c8c                 | '   display->i2cBus.write(regAddr);
04c8c                 | '   display->i2cBus.start();
04c8c                 | '   display->i2cBus.write(display->i2c_addr_read);
04c8c                 | '   for (i = 0; i < len; i++)
04c8c     00 96 06 F6 | 	mov	local06, #0
04c90                 | LR__0161
04c90     4B 95 E2 F8 | 	getbyte	local05, local06, #0
04c94     49 8F E2 F8 | 	getbyte	local02, local04, #0
04c98     47 95 12 F2 | 	cmp	local05, local02 wc
04c9c     70 00 90 3D |  if_ae	jmp	#LR__0163
04ca0     4B 95 E2 F8 | 	getbyte	local05, local06, #0
04ca4     49 75 E2 F8 | 	getbyte	arg01, local04, #0
04ca8     01 74 86 F1 | 	sub	arg01, #1
04cac     3A 95 0A F2 | 	cmp	local05, arg01 wz
04cb0     2C 00 90 5D |  if_ne	jmp	#LR__0162
04cb4     4B 95 02 F6 | 	mov	local05, local06
04cb8     48 95 02 F1 | 	add	local05, local03
04cbc     2C 8C 06 F1 | 	add	local01, #44
04cc0     01 74 06 F6 | 	mov	arg01, #1
04cc4     C9 92 02 F6 | 	mov	local04, objptr
04cc8     46 93 01 F6 | 	mov	objptr, local01
04ccc     80 69 B1 FD | 	call	#_jm_i2c_spin2_read
04cd0     49 93 01 F6 | 	mov	objptr, local04
04cd4     4A 35 42 FC | 	wrbyte	result1, local05
04cd8                 | '     {
04cd8                 | '       pBuf[i] = display->i2cBus.read(1);
04cd8                 | '       break;
04cd8     2C 8C 86 F1 | 	sub	local01, #44
04cdc     30 00 90 FD | 	jmp	#LR__0163
04ce0                 | LR__0162
04ce0     4B 95 02 F6 | 	mov	local05, local06
04ce4     48 95 02 F1 | 	add	local05, local03
04ce8     2C 8C 06 F1 | 	add	local01, #44
04cec     00 74 06 F6 | 	mov	arg01, #0
04cf0     C9 98 02 F6 | 	mov	local07, objptr
04cf4     46 93 01 F6 | 	mov	objptr, local01
04cf8     54 69 B1 FD | 	call	#_jm_i2c_spin2_read
04cfc     4C 93 01 F6 | 	mov	objptr, local07
04d00     4A 35 42 FC | 	wrbyte	result1, local05
04d04     01 96 06 F1 | 	add	local06, #1
04d08     2C 8C 86 F1 | 	sub	local01, #44
04d0c     80 FF 9F FD | 	jmp	#LR__0161
04d10                 | LR__0163
04d10     2C 8C 06 F1 | 	add	local01, #44
04d14     C9 98 02 F6 | 	mov	local07, objptr
04d18     46 93 01 F6 | 	mov	objptr, local01
04d1c     B8 69 B1 FD | 	call	#_jm_i2c_spin2_stop
04d20     4C 93 01 F6 | 	mov	objptr, local07
04d24                 | '     }
04d24                 | '     pBuf[i] = display->i2cBus.read(0);
04d24                 | '   }
04d24                 | '   display->i2cBus.stop();
04d24                 | '   return i;
04d24     4B 35 02 F6 | 	mov	result1, local06
04d28     A8 F0 03 F6 | 	mov	ptra, fp
04d2c     B3 00 A0 FD | 	call	#popregs_
04d30                 | _display_read_gt9271_touch_addr_ret
04d30     2D 00 64 FD | 	ret
04d34                 | 
04d34                 | _readGT9271TouchLocation
04d34     17 4C 05 F6 | 	mov	COUNT_, #23
04d38     A9 00 A0 FD | 	call	#pushregs_
04d3c     78 F0 07 F1 | 	add	ptra, #120
04d40     04 50 05 F1 | 	add	fp, #4
04d44     A8 74 62 FC | 	wrlong	arg01, fp
04d48     04 50 05 F1 | 	add	fp, #4
04d4c     A8 76 62 FC | 	wrlong	arg02, fp
04d50     04 50 05 F1 | 	add	fp, #4
04d54     A8 78 42 FC | 	wrbyte	arg03, fp
04d58     04 50 05 F1 | 	add	fp, #4
04d5c     A8 00 48 FC | 	wrbyte	#0, fp
04d60     04 50 05 F1 | 	add	fp, #4
04d64     A8 00 48 FC | 	wrbyte	#0, fp
04d68     04 50 05 F1 | 	add	fp, #4
04d6c     A8 00 48 FC | 	wrbyte	#0, fp
04d70                 | ' }
04d70                 | ' 
04d70                 | ' uint8_t readGT9271TouchLocation(Display *display, TouchLocation *pLoc, uint8_t num)
04d70                 | ' {
04d70                 | '   uint8_t retVal = 0;
04d70                 | '   uint8_t i = 0;
04d70                 | '   uint8_t k = 0;
04d70                 | '   uint8_t ss[1];
04d70                 | '   do
04d70     10 50 85 F1 | 	sub	fp, #16
04d74     A8 8C 0A FB | 	rdlong	local01, fp wz
04d78     08 50 85 F1 | 	sub	fp, #8
04d7c                 | '       break;
04d7c     B0 08 90 AD |  if_e	jmp	#LR__0182
04d80     0C 50 05 F1 | 	add	fp, #12
04d84     A8 8C CA FA | 	rdbyte	local01, fp wz
04d88     0C 50 85 F1 | 	sub	fp, #12
04d8c                 | '       break;
04d8c     A0 08 90 AD |  if_e	jmp	#LR__0182
04d90     1C 50 05 F1 | 	add	fp, #28
04d94     A8 00 48 FC | 	wrbyte	#0, fp
04d98     18 50 85 F1 | 	sub	fp, #24
04d9c     A8 74 02 FB | 	rdlong	arg01, fp
04da0     18 50 05 F1 | 	add	fp, #24
04da4     A8 78 02 F6 | 	mov	arg03, fp
04da8     1C 50 85 F1 | 	sub	fp, #28
04dac     40 00 00 FF 
04db0     4E 77 06 F6 | 	mov	arg02, ##33102
04db4     01 7A 06 F6 | 	mov	arg04, #1
04db8     58 FE BF FD | 	call	#_display_read_gt9271_touch_addr
04dbc     1C 50 05 F1 | 	add	fp, #28
04dc0     A8 8C C2 FA | 	rdbyte	local01, fp
04dc4     04 50 05 F1 | 	add	fp, #4
04dc8     A8 8C 42 FC | 	wrbyte	local01, fp
04dcc     A8 8C C2 FA | 	rdbyte	local01, fp
04dd0     20 50 85 F1 | 	sub	fp, #32
04dd4     0F 8C CE F7 | 	test	local01, #15 wz
04dd8                 | '       break;
04dd8     54 08 90 AD |  if_e	jmp	#LR__0182
04ddc     20 50 05 F1 | 	add	fp, #32
04de0     A8 8C C2 FA | 	rdbyte	local01, fp
04de4     46 8D 42 F8 | 	getnib	local01, local01, #0
04de8     04 50 05 F1 | 	add	fp, #4
04dec     A8 8C 42 FC | 	wrbyte	local01, fp
04df0     20 50 85 F1 | 	sub	fp, #32
04df4     A8 74 02 FB | 	rdlong	arg01, fp
04df8     24 50 05 F1 | 	add	fp, #36
04dfc     A8 78 02 F6 | 	mov	arg03, fp
04e00     28 50 85 F1 | 	sub	fp, #40
04e04     40 00 00 FF 
04e08     50 77 06 F6 | 	mov	arg02, ##33104
04e0c     20 7A 06 F6 | 	mov	arg04, #32
04e10     00 FE BF FD | 	call	#_display_read_gt9271_touch_addr
04e14     04 50 05 F1 | 	add	fp, #4
04e18     A8 74 02 FB | 	rdlong	arg01, fp
04e1c     44 50 05 F1 | 	add	fp, #68
04e20     A8 78 02 F6 | 	mov	arg03, fp
04e24     48 50 85 F1 | 	sub	fp, #72
04e28     40 00 00 FF 
04e2c     70 77 06 F6 | 	mov	arg02, ##33136
04e30     20 7A 06 F6 | 	mov	arg04, #32
04e34     DC FD BF FD | 	call	#_display_read_gt9271_touch_addr
04e38     04 50 05 F1 | 	add	fp, #4
04e3c     A8 74 02 FB | 	rdlong	arg01, fp
04e40     64 50 05 F1 | 	add	fp, #100
04e44     A8 8E 02 F6 | 	mov	local02, fp
04e48     10 90 06 F6 | 	mov	local03, #16
04e4c     40 00 00 FF 
04e50     90 77 06 F6 | 	mov	arg02, ##33168
04e54     47 79 02 F6 | 	mov	arg03, local02
04e58     10 7A 06 F6 | 	mov	arg04, #16
04e5c     68 50 85 F1 | 	sub	fp, #104
04e60     B0 FD BF FD | 	call	#_display_read_gt9271_touch_addr
04e64     24 50 05 F1 | 	add	fp, #36
04e68     A8 8C C2 FA | 	rdbyte	local01, fp
04e6c     24 50 85 F1 | 	sub	fp, #36
04e70     05 8C 16 F2 | 	cmp	local01, #5 wc
04e74     3C 01 90 3D |  if_ae	jmp	#LR__0166
04e78                 | '     {
04e78                 | '       for (k = 0, i = 0;
04e78     18 50 05 F1 | 	add	fp, #24
04e7c     A8 00 48 FC | 	wrbyte	#0, fp
04e80     04 50 85 F1 | 	sub	fp, #4
04e84     A8 00 48 FC | 	wrbyte	#0, fp
04e88     14 50 85 F1 | 	sub	fp, #20
04e8c                 | LR__0164
04e8c     14 50 05 F1 | 	add	fp, #20
04e90     A8 90 C2 FA | 	rdbyte	local03, fp
04e94     14 50 85 F1 | 	sub	fp, #20
04e98     48 8F E2 F8 | 	getbyte	local02, local03, #0
04e9c     20 8E 16 F2 | 	cmp	local02, #32 wc
04ea0     10 01 90 3D |  if_ae	jmp	#LR__0165
04ea4     18 50 05 F1 | 	add	fp, #24
04ea8     A8 92 C2 FA | 	rdbyte	local04, fp
04eac     49 95 E2 F8 | 	getbyte	local05, local04, #0
04eb0     0C 50 85 F1 | 	sub	fp, #12
04eb4     A8 96 C2 FA | 	rdbyte	local06, fp
04eb8     0C 50 85 F1 | 	sub	fp, #12
04ebc     4B 99 E2 F8 | 	getbyte	local07, local06, #0
04ec0     4C 95 12 F2 | 	cmp	local05, local07 wc
04ec4     EC 00 90 3D |  if_ae	jmp	#LR__0165
04ec8     08 50 05 F1 | 	add	fp, #8
04ecc     A8 90 02 FB | 	rdlong	local03, fp
04ed0     10 50 05 F1 | 	add	fp, #16
04ed4     A8 8E C2 FA | 	rdbyte	local02, fp
04ed8     02 8E 66 F0 | 	shl	local02, #2
04edc     48 8F 02 F1 | 	add	local02, local03
04ee0     04 50 85 F1 | 	sub	fp, #4
04ee4     A8 90 C2 FA | 	rdbyte	local03, fp
04ee8     48 8D E2 F8 | 	getbyte	local01, local03, #0
04eec     01 8C 06 F1 | 	add	local01, #1
04ef0     14 50 05 F1 | 	add	fp, #20
04ef4     A8 8C 02 F1 | 	add	local01, fp
04ef8     46 8D C2 FA | 	rdbyte	local01, local01
04efc     08 8C 66 F0 | 	shl	local01, #8
04f00     48 91 E2 F8 | 	getbyte	local03, local03, #0
04f04     A8 90 02 F1 | 	add	local03, fp
04f08     48 91 C2 FA | 	rdbyte	local03, local03
04f0c     48 8D 42 F5 | 	or	local01, local03
04f10     47 8D 52 FC | 	wrword	local01, local02
04f14     20 50 85 F1 | 	sub	fp, #32
04f18     A8 90 02 FB | 	rdlong	local03, fp
04f1c     10 50 05 F1 | 	add	fp, #16
04f20     A8 8E C2 FA | 	rdbyte	local02, fp
04f24     02 8E 66 F0 | 	shl	local02, #2
04f28     48 8F 02 F1 | 	add	local02, local03
04f2c     04 50 85 F1 | 	sub	fp, #4
04f30     A8 9A C2 FA | 	rdbyte	local08, fp
04f34     4D 9D E2 F8 | 	getbyte	local09, local08, #0
04f38     03 9C 06 F1 | 	add	local09, #3
04f3c     4E 9F 02 F6 | 	mov	local10, local09
04f40     14 50 05 F1 | 	add	fp, #20
04f44     A8 A0 02 F6 | 	mov	local11, fp
04f48     A8 9E 02 F1 | 	add	local10, fp
04f4c     4F 91 C2 FA | 	rdbyte	local03, local10
04f50     08 90 66 F0 | 	shl	local03, #8
04f54     4D A3 02 F6 | 	mov	local12, local08
04f58     51 A5 E2 F8 | 	getbyte	local13, local12, #0
04f5c     02 A4 06 F1 | 	add	local13, #2
04f60     52 A7 02 F6 | 	mov	local14, local13
04f64     A8 A8 02 F6 | 	mov	local15, fp
04f68     A8 A6 02 F1 | 	add	local14, fp
04f6c     53 AB C2 FA | 	rdbyte	local16, local14
04f70     55 91 42 F5 | 	or	local03, local16
04f74     02 8E 06 F1 | 	add	local02, #2
04f78     47 91 52 FC | 	wrword	local03, local02
04f7c     10 50 85 F1 | 	sub	fp, #16
04f80     A8 AC C2 FA | 	rdbyte	local17, fp
04f84     56 AF 02 F6 | 	mov	local18, local17
04f88     56 B1 02 F6 | 	mov	local19, local17
04f8c     58 B3 02 F6 | 	mov	local20, local19
04f90     01 B2 06 F1 | 	add	local20, #1
04f94     A8 B2 42 FC | 	wrbyte	local20, fp
04f98     04 50 85 F1 | 	sub	fp, #4
04f9c     A8 B4 C2 FA | 	rdbyte	local21, fp
04fa0     5A B7 E2 F8 | 	getbyte	local22, local21, #0
04fa4     08 B6 06 F1 | 	add	local22, #8
04fa8     A8 B6 42 FC | 	wrbyte	local22, fp
04fac     14 50 85 F1 | 	sub	fp, #20
04fb0     D8 FE 9F FD | 	jmp	#LR__0164
04fb4                 | LR__0165
04fb4                 | LR__0166
04fb4     24 50 05 F1 | 	add	fp, #36
04fb8     A8 8C C2 FA | 	rdbyte	local01, fp
04fbc     24 50 85 F1 | 	sub	fp, #36
04fc0     05 8C 16 F2 | 	cmp	local01, #5 wc
04fc4     7C 02 90 CD |  if_b	jmp	#LR__0172
04fc8                 | '     {
04fc8                 | '       for (k = 0, i = 0;
04fc8     18 50 05 F1 | 	add	fp, #24
04fcc     A8 00 48 FC | 	wrbyte	#0, fp
04fd0     04 50 85 F1 | 	sub	fp, #4
04fd4     A8 00 48 FC | 	wrbyte	#0, fp
04fd8     14 50 85 F1 | 	sub	fp, #20
04fdc     44 B1 9F FE | 	loc	pa,	#(@LR__0168-@LR__0167)
04fe0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
04fe4                 | LR__0167
04fe4     14 50 05 F1 | 	add	fp, #20
04fe8     A8 8E C2 FA | 	rdbyte	local02, fp
04fec     14 50 85 F1 | 	sub	fp, #20
04ff0     20 8E 16 F2 | 	cmp	local02, #32 wc
04ff4     10 01 90 3D |  if_ae	jmp	#LR__0169
04ff8     18 50 05 F1 | 	add	fp, #24
04ffc     A8 92 C2 FA | 	rdbyte	local04, fp
05000     49 95 E2 F8 | 	getbyte	local05, local04, #0
05004     0C 50 85 F1 | 	sub	fp, #12
05008     A8 96 C2 FA | 	rdbyte	local06, fp
0500c     0C 50 85 F1 | 	sub	fp, #12
05010     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05014     4C 95 12 F2 | 	cmp	local05, local07 wc
05018     EC 00 90 3D |  if_ae	jmp	#LR__0169
0501c     08 50 05 F1 | 	add	fp, #8
05020     A8 B6 02 FB | 	rdlong	local22, fp
05024     10 50 05 F1 | 	add	fp, #16
05028     A8 B2 C2 FA | 	rdbyte	local20, fp
0502c     02 B2 66 F0 | 	shl	local20, #2
05030     5B B3 02 F1 | 	add	local20, local22
05034     04 50 85 F1 | 	sub	fp, #4
05038     A8 A6 C2 FA | 	rdbyte	local14, fp
0503c     53 9F E2 F8 | 	getbyte	local10, local14, #0
05040     01 9E 06 F1 | 	add	local10, #1
05044     14 50 05 F1 | 	add	fp, #20
05048     A8 9E 02 F1 | 	add	local10, fp
0504c     4F B5 C2 FA | 	rdbyte	local21, local10
05050     08 B4 66 F0 | 	shl	local21, #8
05054     53 A7 E2 F8 | 	getbyte	local14, local14, #0
05058     A8 A6 02 F1 | 	add	local14, fp
0505c     53 AB C2 FA | 	rdbyte	local16, local14
05060     55 B5 42 F5 | 	or	local21, local16
05064     59 B5 52 FC | 	wrword	local21, local20
05068     20 50 85 F1 | 	sub	fp, #32
0506c     A8 B6 02 FB | 	rdlong	local22, fp
05070     10 50 05 F1 | 	add	fp, #16
05074     A8 B2 C2 FA | 	rdbyte	local20, fp
05078     02 B2 66 F0 | 	shl	local20, #2
0507c     5B B3 02 F1 | 	add	local20, local22
05080     04 50 85 F1 | 	sub	fp, #4
05084     A8 9A C2 FA | 	rdbyte	local08, fp
05088     4D 9D E2 F8 | 	getbyte	local09, local08, #0
0508c     03 9C 06 F1 | 	add	local09, #3
05090     4E 9F 02 F6 | 	mov	local10, local09
05094     14 50 05 F1 | 	add	fp, #20
05098     A8 A0 02 F6 | 	mov	local11, fp
0509c     A8 9E 02 F1 | 	add	local10, fp
050a0     4F B5 C2 FA | 	rdbyte	local21, local10
050a4     08 B4 66 F0 | 	shl	local21, #8
050a8     4D A3 02 F6 | 	mov	local12, local08
050ac     51 A5 E2 F8 | 	getbyte	local13, local12, #0
050b0     02 A4 06 F1 | 	add	local13, #2
050b4     52 A7 02 F6 | 	mov	local14, local13
050b8     A8 A8 02 F6 | 	mov	local15, fp
050bc     A8 A6 02 F1 | 	add	local14, fp
050c0     53 AB C2 FA | 	rdbyte	local16, local14
050c4     55 B5 42 F5 | 	or	local21, local16
050c8     02 B2 06 F1 | 	add	local20, #2
050cc     59 B5 52 FC | 	wrword	local21, local20
050d0     10 50 85 F1 | 	sub	fp, #16
050d4     A8 AC C2 FA | 	rdbyte	local17, fp
050d8     56 AF 02 F6 | 	mov	local18, local17
050dc     56 B1 02 F6 | 	mov	local19, local17
050e0     58 B3 02 F6 | 	mov	local20, local19
050e4     01 B2 06 F1 | 	add	local20, #1
050e8     A8 B2 42 FC | 	wrbyte	local20, fp
050ec     04 50 85 F1 | 	sub	fp, #4
050f0     A8 B4 C2 FA | 	rdbyte	local21, fp
050f4     5A B7 E2 F8 | 	getbyte	local22, local21, #0
050f8     08 B6 06 F1 | 	add	local22, #8
050fc     A8 B6 42 FC | 	wrbyte	local22, fp
05100     14 50 85 F1 | 	sub	fp, #20
05104     DC FE 9F FD | 	jmp	#LR__0167
05108                 | LR__0168
05108                 | LR__0169
05108                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
05108                 | '       {
05108                 | '         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
05108                 | '         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
05108                 | '       }
05108                 | ' 
05108                 | '       for (k = 4, i = 0;
05108     18 50 05 F1 | 	add	fp, #24
0510c     A8 08 48 FC | 	wrbyte	#4, fp
05110     04 50 85 F1 | 	sub	fp, #4
05114     A8 00 48 FC | 	wrbyte	#0, fp
05118     14 50 85 F1 | 	sub	fp, #20
0511c                 | LR__0170
0511c     14 50 05 F1 | 	add	fp, #20
05120     A8 90 C2 FA | 	rdbyte	local03, fp
05124     14 50 85 F1 | 	sub	fp, #20
05128     48 8F E2 F8 | 	getbyte	local02, local03, #0
0512c     20 8E 16 F2 | 	cmp	local02, #32 wc
05130     10 01 90 3D |  if_ae	jmp	#LR__0171
05134     18 50 05 F1 | 	add	fp, #24
05138     A8 92 C2 FA | 	rdbyte	local04, fp
0513c     49 95 E2 F8 | 	getbyte	local05, local04, #0
05140     0C 50 85 F1 | 	sub	fp, #12
05144     A8 96 C2 FA | 	rdbyte	local06, fp
05148     0C 50 85 F1 | 	sub	fp, #12
0514c     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05150     4C 95 12 F2 | 	cmp	local05, local07 wc
05154     EC 00 90 3D |  if_ae	jmp	#LR__0171
05158     08 50 05 F1 | 	add	fp, #8
0515c     A8 B6 02 FB | 	rdlong	local22, fp
05160     10 50 05 F1 | 	add	fp, #16
05164     A8 B2 C2 FA | 	rdbyte	local20, fp
05168     02 B2 66 F0 | 	shl	local20, #2
0516c     5B B3 02 F1 | 	add	local20, local22
05170     04 50 85 F1 | 	sub	fp, #4
05174     A8 A6 C2 FA | 	rdbyte	local14, fp
05178     53 9F E2 F8 | 	getbyte	local10, local14, #0
0517c     01 9E 06 F1 | 	add	local10, #1
05180     34 50 05 F1 | 	add	fp, #52
05184     A8 9E 02 F1 | 	add	local10, fp
05188     4F B5 C2 FA | 	rdbyte	local21, local10
0518c     08 B4 66 F0 | 	shl	local21, #8
05190     53 A7 E2 F8 | 	getbyte	local14, local14, #0
05194     A8 A6 02 F1 | 	add	local14, fp
05198     53 AB C2 FA | 	rdbyte	local16, local14
0519c     55 B5 42 F5 | 	or	local21, local16
051a0     59 B5 52 FC | 	wrword	local21, local20
051a4     40 50 85 F1 | 	sub	fp, #64
051a8     A8 B6 02 FB | 	rdlong	local22, fp
051ac     10 50 05 F1 | 	add	fp, #16
051b0     A8 B2 C2 FA | 	rdbyte	local20, fp
051b4     02 B2 66 F0 | 	shl	local20, #2
051b8     5B B3 02 F1 | 	add	local20, local22
051bc     04 50 85 F1 | 	sub	fp, #4
051c0     A8 9A C2 FA | 	rdbyte	local08, fp
051c4     4D 9D E2 F8 | 	getbyte	local09, local08, #0
051c8     03 9C 06 F1 | 	add	local09, #3
051cc     4E 9F 02 F6 | 	mov	local10, local09
051d0     34 50 05 F1 | 	add	fp, #52
051d4     A8 A0 02 F6 | 	mov	local11, fp
051d8     A8 9E 02 F1 | 	add	local10, fp
051dc     4F B5 C2 FA | 	rdbyte	local21, local10
051e0     08 B4 66 F0 | 	shl	local21, #8
051e4     4D A3 02 F6 | 	mov	local12, local08
051e8     51 A5 E2 F8 | 	getbyte	local13, local12, #0
051ec     02 A4 06 F1 | 	add	local13, #2
051f0     52 A7 02 F6 | 	mov	local14, local13
051f4     A8 A8 02 F6 | 	mov	local15, fp
051f8     A8 A6 02 F1 | 	add	local14, fp
051fc     53 AB C2 FA | 	rdbyte	local16, local14
05200     55 B5 42 F5 | 	or	local21, local16
05204     02 B2 06 F1 | 	add	local20, #2
05208     59 B5 52 FC | 	wrword	local21, local20
0520c     30 50 85 F1 | 	sub	fp, #48
05210     A8 AC C2 FA | 	rdbyte	local17, fp
05214     56 AF 02 F6 | 	mov	local18, local17
05218     56 B1 02 F6 | 	mov	local19, local17
0521c     58 B3 02 F6 | 	mov	local20, local19
05220     01 B2 06 F1 | 	add	local20, #1
05224     A8 B2 42 FC | 	wrbyte	local20, fp
05228     04 50 85 F1 | 	sub	fp, #4
0522c     A8 B4 C2 FA | 	rdbyte	local21, fp
05230     5A B7 E2 F8 | 	getbyte	local22, local21, #0
05234     08 B6 06 F1 | 	add	local22, #8
05238     A8 B6 42 FC | 	wrbyte	local22, fp
0523c     14 50 85 F1 | 	sub	fp, #20
05240     D8 FE 9F FD | 	jmp	#LR__0170
05244                 | LR__0171
05244                 | LR__0172
05244     24 50 05 F1 | 	add	fp, #36
05248     A8 B8 C2 FA | 	rdbyte	local23, fp
0524c     24 50 85 F1 | 	sub	fp, #36
05250     5C 8D E2 F8 | 	getbyte	local01, local23, #0
05254     09 8C 16 F2 | 	cmp	local01, #9 wc
05258     C0 03 90 CD |  if_b	jmp	#LR__0181
0525c                 | '     {
0525c                 | '       for (k = 0, i = 0;
0525c     18 50 05 F1 | 	add	fp, #24
05260     A8 00 48 FC | 	wrbyte	#0, fp
05264     04 50 85 F1 | 	sub	fp, #4
05268     A8 00 48 FC | 	wrbyte	#0, fp
0526c     14 50 85 F1 | 	sub	fp, #20
05270     B0 AE 9F FE | 	loc	pa,	#(@LR__0174-@LR__0173)
05274     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05278                 | LR__0173
05278     14 50 05 F1 | 	add	fp, #20
0527c     A8 8E C2 FA | 	rdbyte	local02, fp
05280     14 50 85 F1 | 	sub	fp, #20
05284     20 8E 16 F2 | 	cmp	local02, #32 wc
05288     10 01 90 3D |  if_ae	jmp	#LR__0175
0528c     18 50 05 F1 | 	add	fp, #24
05290     A8 92 C2 FA | 	rdbyte	local04, fp
05294     49 95 E2 F8 | 	getbyte	local05, local04, #0
05298     0C 50 85 F1 | 	sub	fp, #12
0529c     A8 96 C2 FA | 	rdbyte	local06, fp
052a0     0C 50 85 F1 | 	sub	fp, #12
052a4     4B 99 E2 F8 | 	getbyte	local07, local06, #0
052a8     4C 95 12 F2 | 	cmp	local05, local07 wc
052ac     EC 00 90 3D |  if_ae	jmp	#LR__0175
052b0     08 50 05 F1 | 	add	fp, #8
052b4     A8 B6 02 FB | 	rdlong	local22, fp
052b8     10 50 05 F1 | 	add	fp, #16
052bc     A8 B2 C2 FA | 	rdbyte	local20, fp
052c0     02 B2 66 F0 | 	shl	local20, #2
052c4     5B B3 02 F1 | 	add	local20, local22
052c8     04 50 85 F1 | 	sub	fp, #4
052cc     A8 A6 C2 FA | 	rdbyte	local14, fp
052d0     53 9F E2 F8 | 	getbyte	local10, local14, #0
052d4     01 9E 06 F1 | 	add	local10, #1
052d8     14 50 05 F1 | 	add	fp, #20
052dc     A8 9E 02 F1 | 	add	local10, fp
052e0     4F B5 C2 FA | 	rdbyte	local21, local10
052e4     08 B4 66 F0 | 	shl	local21, #8
052e8     53 A7 E2 F8 | 	getbyte	local14, local14, #0
052ec     A8 A6 02 F1 | 	add	local14, fp
052f0     53 AB C2 FA | 	rdbyte	local16, local14
052f4     55 B5 42 F5 | 	or	local21, local16
052f8     59 B5 52 FC | 	wrword	local21, local20
052fc     20 50 85 F1 | 	sub	fp, #32
05300     A8 B6 02 FB | 	rdlong	local22, fp
05304     10 50 05 F1 | 	add	fp, #16
05308     A8 B2 C2 FA | 	rdbyte	local20, fp
0530c     02 B2 66 F0 | 	shl	local20, #2
05310     5B B3 02 F1 | 	add	local20, local22
05314     04 50 85 F1 | 	sub	fp, #4
05318     A8 9A C2 FA | 	rdbyte	local08, fp
0531c     4D 9D E2 F8 | 	getbyte	local09, local08, #0
05320     03 9C 06 F1 | 	add	local09, #3
05324     4E 9F 02 F6 | 	mov	local10, local09
05328     14 50 05 F1 | 	add	fp, #20
0532c     A8 A0 02 F6 | 	mov	local11, fp
05330     A8 9E 02 F1 | 	add	local10, fp
05334     4F B5 C2 FA | 	rdbyte	local21, local10
05338     08 B4 66 F0 | 	shl	local21, #8
0533c     4D A3 02 F6 | 	mov	local12, local08
05340     51 A5 E2 F8 | 	getbyte	local13, local12, #0
05344     02 A4 06 F1 | 	add	local13, #2
05348     52 A7 02 F6 | 	mov	local14, local13
0534c     A8 A8 02 F6 | 	mov	local15, fp
05350     A8 A6 02 F1 | 	add	local14, fp
05354     53 AB C2 FA | 	rdbyte	local16, local14
05358     55 B5 42 F5 | 	or	local21, local16
0535c     02 B2 06 F1 | 	add	local20, #2
05360     59 B5 52 FC | 	wrword	local21, local20
05364     10 50 85 F1 | 	sub	fp, #16
05368     A8 AC C2 FA | 	rdbyte	local17, fp
0536c     56 AF 02 F6 | 	mov	local18, local17
05370     56 B1 02 F6 | 	mov	local19, local17
05374     58 B3 02 F6 | 	mov	local20, local19
05378     01 B2 06 F1 | 	add	local20, #1
0537c     A8 B2 42 FC | 	wrbyte	local20, fp
05380     04 50 85 F1 | 	sub	fp, #4
05384     A8 B4 C2 FA | 	rdbyte	local21, fp
05388     5A B7 E2 F8 | 	getbyte	local22, local21, #0
0538c     08 B6 06 F1 | 	add	local22, #8
05390     A8 B6 42 FC | 	wrbyte	local22, fp
05394     14 50 85 F1 | 	sub	fp, #20
05398     DC FE 9F FD | 	jmp	#LR__0173
0539c                 | LR__0174
0539c                 | LR__0175
0539c                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
0539c                 | '       {
0539c                 | '         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
0539c                 | '         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
0539c                 | '       }
0539c                 | ' 
0539c                 | '       for (k = 4, i = 0;
0539c     18 50 05 F1 | 	add	fp, #24
053a0     A8 08 48 FC | 	wrbyte	#4, fp
053a4     04 50 85 F1 | 	sub	fp, #4
053a8     A8 00 48 FC | 	wrbyte	#0, fp
053ac     14 50 85 F1 | 	sub	fp, #20
053b0     70 AD 9F FE | 	loc	pa,	#(@LR__0177-@LR__0176)
053b4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
053b8                 | LR__0176
053b8     14 50 05 F1 | 	add	fp, #20
053bc     A8 8E C2 FA | 	rdbyte	local02, fp
053c0     14 50 85 F1 | 	sub	fp, #20
053c4     20 8E 16 F2 | 	cmp	local02, #32 wc
053c8     10 01 90 3D |  if_ae	jmp	#LR__0178
053cc     18 50 05 F1 | 	add	fp, #24
053d0     A8 92 C2 FA | 	rdbyte	local04, fp
053d4     49 95 E2 F8 | 	getbyte	local05, local04, #0
053d8     0C 50 85 F1 | 	sub	fp, #12
053dc     A8 96 C2 FA | 	rdbyte	local06, fp
053e0     0C 50 85 F1 | 	sub	fp, #12
053e4     4B 99 E2 F8 | 	getbyte	local07, local06, #0
053e8     4C 95 12 F2 | 	cmp	local05, local07 wc
053ec     EC 00 90 3D |  if_ae	jmp	#LR__0178
053f0     08 50 05 F1 | 	add	fp, #8
053f4     A8 B6 02 FB | 	rdlong	local22, fp
053f8     10 50 05 F1 | 	add	fp, #16
053fc     A8 B2 C2 FA | 	rdbyte	local20, fp
05400     02 B2 66 F0 | 	shl	local20, #2
05404     5B B3 02 F1 | 	add	local20, local22
05408     04 50 85 F1 | 	sub	fp, #4
0540c     A8 A6 C2 FA | 	rdbyte	local14, fp
05410     53 9F E2 F8 | 	getbyte	local10, local14, #0
05414     01 9E 06 F1 | 	add	local10, #1
05418     34 50 05 F1 | 	add	fp, #52
0541c     A8 9E 02 F1 | 	add	local10, fp
05420     4F B5 C2 FA | 	rdbyte	local21, local10
05424     08 B4 66 F0 | 	shl	local21, #8
05428     53 A7 E2 F8 | 	getbyte	local14, local14, #0
0542c     A8 A6 02 F1 | 	add	local14, fp
05430     53 AB C2 FA | 	rdbyte	local16, local14
05434     55 B5 42 F5 | 	or	local21, local16
05438     59 B5 52 FC | 	wrword	local21, local20
0543c     40 50 85 F1 | 	sub	fp, #64
05440     A8 B6 02 FB | 	rdlong	local22, fp
05444     10 50 05 F1 | 	add	fp, #16
05448     A8 B2 C2 FA | 	rdbyte	local20, fp
0544c     02 B2 66 F0 | 	shl	local20, #2
05450     5B B3 02 F1 | 	add	local20, local22
05454     04 50 85 F1 | 	sub	fp, #4
05458     A8 9A C2 FA | 	rdbyte	local08, fp
0545c     4D 9D E2 F8 | 	getbyte	local09, local08, #0
05460     03 9C 06 F1 | 	add	local09, #3
05464     4E 9F 02 F6 | 	mov	local10, local09
05468     34 50 05 F1 | 	add	fp, #52
0546c     A8 A0 02 F6 | 	mov	local11, fp
05470     A8 9E 02 F1 | 	add	local10, fp
05474     4F B5 C2 FA | 	rdbyte	local21, local10
05478     08 B4 66 F0 | 	shl	local21, #8
0547c     4D A3 02 F6 | 	mov	local12, local08
05480     51 A5 E2 F8 | 	getbyte	local13, local12, #0
05484     02 A4 06 F1 | 	add	local13, #2
05488     52 A7 02 F6 | 	mov	local14, local13
0548c     A8 A8 02 F6 | 	mov	local15, fp
05490     A8 A6 02 F1 | 	add	local14, fp
05494     53 AB C2 FA | 	rdbyte	local16, local14
05498     55 B5 42 F5 | 	or	local21, local16
0549c     02 B2 06 F1 | 	add	local20, #2
054a0     59 B5 52 FC | 	wrword	local21, local20
054a4     30 50 85 F1 | 	sub	fp, #48
054a8     A8 AC C2 FA | 	rdbyte	local17, fp
054ac     56 AF 02 F6 | 	mov	local18, local17
054b0     56 B1 02 F6 | 	mov	local19, local17
054b4     58 B3 02 F6 | 	mov	local20, local19
054b8     01 B2 06 F1 | 	add	local20, #1
054bc     A8 B2 42 FC | 	wrbyte	local20, fp
054c0     04 50 85 F1 | 	sub	fp, #4
054c4     A8 B4 C2 FA | 	rdbyte	local21, fp
054c8     5A B7 E2 F8 | 	getbyte	local22, local21, #0
054cc     08 B6 06 F1 | 	add	local22, #8
054d0     A8 B6 42 FC | 	wrbyte	local22, fp
054d4     14 50 85 F1 | 	sub	fp, #20
054d8     DC FE 9F FD | 	jmp	#LR__0176
054dc                 | LR__0177
054dc                 | LR__0178
054dc                 | '            (i < 4 * 8) && (k < num); k++, i += 8)
054dc                 | '       {
054dc                 | '         pLoc[k].x = tbuf1[i + 1] << 8 | tbuf1[i + 0];
054dc                 | '         pLoc[k].y = tbuf1[i + 3] << 8 | tbuf1[i + 2];
054dc                 | '       }
054dc                 | ' 
054dc                 | '       for (k = 8, i = 0;
054dc     18 50 05 F1 | 	add	fp, #24
054e0     A8 10 48 FC | 	wrbyte	#8, fp
054e4     00 B8 06 F6 | 	mov	local23, #0
054e8     04 50 85 F1 | 	sub	fp, #4
054ec     A8 00 48 FC | 	wrbyte	#0, fp
054f0     14 50 85 F1 | 	sub	fp, #20
054f4                 | LR__0179
054f4     14 50 05 F1 | 	add	fp, #20
054f8     A8 90 C2 FA | 	rdbyte	local03, fp
054fc     14 50 85 F1 | 	sub	fp, #20
05500     48 8F E2 F8 | 	getbyte	local02, local03, #0
05504     10 8E 16 F2 | 	cmp	local02, #16 wc
05508     10 01 90 3D |  if_ae	jmp	#LR__0180
0550c     18 50 05 F1 | 	add	fp, #24
05510     A8 92 C2 FA | 	rdbyte	local04, fp
05514     49 95 E2 F8 | 	getbyte	local05, local04, #0
05518     0C 50 85 F1 | 	sub	fp, #12
0551c     A8 96 C2 FA | 	rdbyte	local06, fp
05520     0C 50 85 F1 | 	sub	fp, #12
05524     4B 99 E2 F8 | 	getbyte	local07, local06, #0
05528     4C 95 12 F2 | 	cmp	local05, local07 wc
0552c     EC 00 90 3D |  if_ae	jmp	#LR__0180
05530     08 50 05 F1 | 	add	fp, #8
05534     A8 B6 02 FB | 	rdlong	local22, fp
05538     10 50 05 F1 | 	add	fp, #16
0553c     A8 B2 C2 FA | 	rdbyte	local20, fp
05540     02 B2 66 F0 | 	shl	local20, #2
05544     5B B3 02 F1 | 	add	local20, local22
05548     04 50 85 F1 | 	sub	fp, #4
0554c     A8 A6 C2 FA | 	rdbyte	local14, fp
05550     53 9F E2 F8 | 	getbyte	local10, local14, #0
05554     01 9E 06 F1 | 	add	local10, #1
05558     54 50 05 F1 | 	add	fp, #84
0555c     A8 9E 02 F1 | 	add	local10, fp
05560     4F B5 C2 FA | 	rdbyte	local21, local10
05564     08 B4 66 F0 | 	shl	local21, #8
05568     53 A7 E2 F8 | 	getbyte	local14, local14, #0
0556c     A8 A6 02 F1 | 	add	local14, fp
05570     53 AB C2 FA | 	rdbyte	local16, local14
05574     55 B5 42 F5 | 	or	local21, local16
05578     59 B5 52 FC | 	wrword	local21, local20
0557c     60 50 85 F1 | 	sub	fp, #96
05580     A8 B6 02 FB | 	rdlong	local22, fp
05584     10 50 05 F1 | 	add	fp, #16
05588     A8 B2 C2 FA | 	rdbyte	local20, fp
0558c     02 B2 66 F0 | 	shl	local20, #2
05590     5B B3 02 F1 | 	add	local20, local22
05594     04 50 85 F1 | 	sub	fp, #4
05598     A8 9A C2 FA | 	rdbyte	local08, fp
0559c     4D 9D E2 F8 | 	getbyte	local09, local08, #0
055a0     03 9C 06 F1 | 	add	local09, #3
055a4     4E 9F 02 F6 | 	mov	local10, local09
055a8     54 50 05 F1 | 	add	fp, #84
055ac     A8 A0 02 F6 | 	mov	local11, fp
055b0     A8 9E 02 F1 | 	add	local10, fp
055b4     4F B5 C2 FA | 	rdbyte	local21, local10
055b8     08 B4 66 F0 | 	shl	local21, #8
055bc     4D A3 02 F6 | 	mov	local12, local08
055c0     51 A5 E2 F8 | 	getbyte	local13, local12, #0
055c4     02 A4 06 F1 | 	add	local13, #2
055c8     52 A7 02 F6 | 	mov	local14, local13
055cc     A8 A8 02 F6 | 	mov	local15, fp
055d0     A8 A6 02 F1 | 	add	local14, fp
055d4     53 AB C2 FA | 	rdbyte	local16, local14
055d8     55 B5 42 F5 | 	or	local21, local16
055dc     02 B2 06 F1 | 	add	local20, #2
055e0     59 B5 52 FC | 	wrword	local21, local20
055e4     50 50 85 F1 | 	sub	fp, #80
055e8     A8 AC C2 FA | 	rdbyte	local17, fp
055ec     56 AF 02 F6 | 	mov	local18, local17
055f0     56 B1 02 F6 | 	mov	local19, local17
055f4     58 B3 02 F6 | 	mov	local20, local19
055f8     01 B2 06 F1 | 	add	local20, #1
055fc     A8 B2 42 FC | 	wrbyte	local20, fp
05600     04 50 85 F1 | 	sub	fp, #4
05604     A8 B4 C2 FA | 	rdbyte	local21, fp
05608     5A B7 E2 F8 | 	getbyte	local22, local21, #0
0560c     08 B6 06 F1 | 	add	local22, #8
05610     A8 B6 42 FC | 	wrbyte	local22, fp
05614     14 50 85 F1 | 	sub	fp, #20
05618     D8 FE 9F FD | 	jmp	#LR__0179
0561c                 | LR__0180
0561c                 | LR__0181
0561c     24 50 05 F1 | 	add	fp, #36
05620     A8 8C C2 FA | 	rdbyte	local01, fp
05624     14 50 85 F1 | 	sub	fp, #20
05628     A8 8C 42 FC | 	wrbyte	local01, fp
0562c     10 50 85 F1 | 	sub	fp, #16
05630                 | LR__0182
05630     1C 50 05 F1 | 	add	fp, #28
05634     A8 00 48 FC | 	wrbyte	#0, fp
05638     18 50 85 F1 | 	sub	fp, #24
0563c     A8 74 02 FB | 	rdlong	arg01, fp
05640     18 50 05 F1 | 	add	fp, #24
05644     A8 78 02 F6 | 	mov	arg03, fp
05648     1C 50 85 F1 | 	sub	fp, #28
0564c     40 00 00 FF 
05650     4E 77 06 F6 | 	mov	arg02, ##33102
05654     01 7A 06 F6 | 	mov	arg04, #1
05658     08 F5 BF FD | 	call	#_display_write_gt9271_touch_register
0565c                 | ' 
0565c                 | '   ss[0] = 0;
0565c                 | '   display_write_gt9271_touch_register(display, 0x814e, ss, 1);
0565c                 | ' 
0565c                 | '   return retVal;
0565c     10 50 05 F1 | 	add	fp, #16
05660     A8 34 C2 FA | 	rdbyte	result1, fp
05664     10 50 85 F1 | 	sub	fp, #16
05668     A8 F0 03 F6 | 	mov	ptra, fp
0566c     B3 00 A0 FD | 	call	#popregs_
05670                 | _readGT9271TouchLocation_ret
05670     2D 00 64 FD | 	ret
05674                 | 
05674                 | _display_update_touch
05674     02 4C 05 F6 | 	mov	COUNT_, #2
05678     A9 00 A0 FD | 	call	#pushregs_
0567c     3A 8D 02 F6 | 	mov	local01, arg01
05680     20 8C 06 F1 | 	add	local01, #32
05684     46 77 02 F6 | 	mov	arg02, local01
05688     01 78 06 F6 | 	mov	arg03, #1
0568c     A4 F6 BF FD | 	call	#_readGT9271TouchLocation
05690     1A 8F E2 F8 | 	getbyte	local02, result1, #0
05694     04 8C 06 F1 | 	add	local01, #4
05698     46 35 E2 FA | 	rdword	result1, local01
0569c     04 8C 86 F1 | 	sub	local01, #4
056a0     46 79 E2 FA | 	rdword	arg03, local01
056a4     20 8C 86 F1 | 	sub	local01, #32
056a8     3C 35 0A F2 | 	cmp	result1, arg03 wz
056ac     1C 00 90 5D |  if_ne	jmp	#LR__0183
056b0     26 8C 06 F1 | 	add	local01, #38
056b4     46 35 E2 FA | 	rdword	result1, local01
056b8     04 8C 86 F1 | 	sub	local01, #4
056bc     46 79 E2 FA | 	rdword	arg03, local01
056c0     22 8C 86 F1 | 	sub	local01, #34
056c4     3C 35 0A F2 | 	cmp	result1, arg03 wz
056c8     10 00 90 AD |  if_e	jmp	#LR__0184
056cc                 | LR__0183
056cc     28 8C 06 F1 | 	add	local01, #40
056d0     46 8F 62 FC | 	wrlong	local02, local01
056d4     28 8C 86 F1 | 	sub	local01, #40
056d8     0C 00 90 FD | 	jmp	#LR__0185
056dc                 | LR__0184
056dc     28 8C 06 F1 | 	add	local01, #40
056e0     46 01 68 FC | 	wrlong	#0, local01
056e4     28 8C 86 F1 | 	sub	local01, #40
056e8                 | LR__0185
056e8     24 8C 06 F1 | 	add	local01, #36
056ec     46 75 02 F6 | 	mov	arg01, local01
056f0     04 8C 86 F1 | 	sub	local01, #4
056f4     46 77 02 F6 | 	mov	arg02, local01
056f8     04 78 06 F6 | 	mov	arg03, #4
056fc     08 FB B1 FD | 	call	#__system____builtin_memmove
05700                 | '   {
05700                 | '     display->locationCount = 0;
05700                 | '   }
05700                 | '   display->lastLocation[0] = display->location[0];
05700                 | '   return touchCount;
05700     47 35 02 F6 | 	mov	result1, local02
05704     A8 F0 03 F6 | 	mov	ptra, fp
05708     B3 00 A0 FD | 	call	#popregs_
0570c                 | _display_update_touch_ret
0570c     2D 00 64 FD | 	ret
05710                 | 
05710                 | _lcdRegWrite
05710     03 4C 05 F6 | 	mov	COUNT_, #3
05714     A9 00 A0 FD | 	call	#pushregs_
05718     3A 8D 02 F6 | 	mov	local01, arg01
0571c     3B 8F 02 F6 | 	mov	local02, arg02
05720     46 75 02 FB | 	rdlong	arg01, local01
05724     58 74 62 FD | 	drvl	arg01
05728     38 8C 06 F1 | 	add	local01, #56
0572c     01 74 06 F6 | 	mov	arg01, #1
05730     00 76 06 F6 | 	mov	arg02, #0
05734     08 78 06 F6 | 	mov	arg03, #8
05738     C9 90 02 F6 | 	mov	local03, objptr
0573c     46 93 01 F6 | 	mov	objptr, local01
05740     DC 65 B1 FD | 	call	#_jm_spi_spin2_shiftout
05744     46 93 01 F6 | 	mov	objptr, local01
05748     38 8C 86 F1 | 	sub	local01, #56
0574c     47 77 E2 F8 | 	getbyte	arg02, local02, #0
05750     01 74 06 F6 | 	mov	arg01, #1
05754     08 78 06 F6 | 	mov	arg03, #8
05758     C4 65 B1 FD | 	call	#_jm_spi_spin2_shiftout
0575c     48 93 01 F6 | 	mov	objptr, local03
05760     46 75 02 FB | 	rdlong	arg01, local01
05764     59 74 62 FD | 	drvh	arg01
05768     A8 F0 03 F6 | 	mov	ptra, fp
0576c     B3 00 A0 FD | 	call	#popregs_
05770                 | _lcdRegWrite_ret
05770     2D 00 64 FD | 	ret
05774                 | 
05774                 | _lcdDataWrite
05774     03 4C 05 F6 | 	mov	COUNT_, #3
05778     A9 00 A0 FD | 	call	#pushregs_
0577c     3A 8D 02 F6 | 	mov	local01, arg01
05780     3B 8F 02 F6 | 	mov	local02, arg02
05784     46 75 02 FB | 	rdlong	arg01, local01
05788     58 74 62 FD | 	drvl	arg01
0578c     38 8C 06 F1 | 	add	local01, #56
05790     01 74 06 F6 | 	mov	arg01, #1
05794     80 76 06 F6 | 	mov	arg02, #128
05798     08 78 06 F6 | 	mov	arg03, #8
0579c     C9 90 02 F6 | 	mov	local03, objptr
057a0     46 93 01 F6 | 	mov	objptr, local01
057a4     78 65 B1 FD | 	call	#_jm_spi_spin2_shiftout
057a8     46 93 01 F6 | 	mov	objptr, local01
057ac     38 8C 86 F1 | 	sub	local01, #56
057b0     47 77 E2 F8 | 	getbyte	arg02, local02, #0
057b4     01 74 06 F6 | 	mov	arg01, #1
057b8     08 78 06 F6 | 	mov	arg03, #8
057bc     60 65 B1 FD | 	call	#_jm_spi_spin2_shiftout
057c0     48 93 01 F6 | 	mov	objptr, local03
057c4     46 75 02 FB | 	rdlong	arg01, local01
057c8     59 74 62 FD | 	drvh	arg01
057cc     A8 F0 03 F6 | 	mov	ptra, fp
057d0     B3 00 A0 FD | 	call	#popregs_
057d4                 | _lcdDataWrite_ret
057d4     2D 00 64 FD | 	ret
057d8                 | 
057d8                 | _lcdDataRead
057d8     02 4C 05 F6 | 	mov	COUNT_, #2
057dc     A9 00 A0 FD | 	call	#pushregs_
057e0     3A 8D 02 F6 | 	mov	local01, arg01
057e4     46 75 02 FB | 	rdlong	arg01, local01
057e8     58 74 62 FD | 	drvl	arg01
057ec     38 8C 06 F1 | 	add	local01, #56
057f0     01 74 06 F6 | 	mov	arg01, #1
057f4     C0 76 06 F6 | 	mov	arg02, #192
057f8     08 78 06 F6 | 	mov	arg03, #8
057fc     C9 8E 02 F6 | 	mov	local02, objptr
05800     46 93 01 F6 | 	mov	objptr, local01
05804     18 65 B1 FD | 	call	#_jm_spi_spin2_shiftout
05808     30 8C 86 F1 | 	sub	local01, #48
0580c     46 75 02 FB | 	rdlong	arg01, local01
05810     59 74 62 FD | 	drvh	arg01
05814     30 8C 06 F1 | 	add	local01, #48
05818     01 74 06 F6 | 	mov	arg01, #1
0581c     08 76 06 F6 | 	mov	arg02, #8
05820     46 93 01 F6 | 	mov	objptr, local01
05824     40 64 B1 FD | 	call	#_jm_spi_spin2_shiftin
05828     47 93 01 F6 | 	mov	objptr, local02
0582c     38 8C 86 F1 | 	sub	local01, #56
05830     46 75 02 FB | 	rdlong	arg01, local01
05834     59 74 62 FD | 	drvh	arg01
05838                 | ' {
05838                 | '   _pinl(display->xnscs);
05838                 | ' 
05838                 | ' 
05838                 | ' 
05838                 | ' 
05838                 | '   display->spi.shiftout(1, 0x80 , (uint32_t)8);
05838                 | '   display->spi.shiftout(1,data, (uint32_t)8);
05838                 | '   _pinh(display->xnscs);
05838                 | ' }
05838                 | ' 
05838                 | ' 
05838                 | ' uint8_t lcdDataRead(Display *display)
05838                 | ' {
05838                 | '   _pinl(display->xnscs);
05838                 | ' 
05838                 | ' 
05838                 | '   display->spi.shiftout(1, 0xc0 , (uint32_t)8);
05838                 | '   _pinh(display->spi_mosi);
05838                 | ' 
05838                 | ' 
05838                 | '   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
05838                 | '   _pinh(display->xnscs);
05838                 | '   return data;
05838     A8 F0 03 F6 | 	mov	ptra, fp
0583c     B3 00 A0 FD | 	call	#popregs_
05840                 | _lcdDataRead_ret
05840     2D 00 64 FD | 	ret
05844                 | 
05844                 | _lcdStatusRead
05844     02 4C 05 F6 | 	mov	COUNT_, #2
05848     A9 00 A0 FD | 	call	#pushregs_
0584c     3A 8D 02 F6 | 	mov	local01, arg01
05850     46 75 02 FB | 	rdlong	arg01, local01
05854     58 74 62 FD | 	drvl	arg01
05858     38 8C 06 F1 | 	add	local01, #56
0585c     01 74 06 F6 | 	mov	arg01, #1
05860     40 76 06 F6 | 	mov	arg02, #64
05864     08 78 06 F6 | 	mov	arg03, #8
05868     C9 8E 02 F6 | 	mov	local02, objptr
0586c     46 93 01 F6 | 	mov	objptr, local01
05870     AC 64 B1 FD | 	call	#_jm_spi_spin2_shiftout
05874     30 8C 86 F1 | 	sub	local01, #48
05878     46 75 02 FB | 	rdlong	arg01, local01
0587c     59 74 62 FD | 	drvh	arg01
05880     30 8C 06 F1 | 	add	local01, #48
05884     01 74 06 F6 | 	mov	arg01, #1
05888     08 76 06 F6 | 	mov	arg02, #8
0588c     46 93 01 F6 | 	mov	objptr, local01
05890     D4 63 B1 FD | 	call	#_jm_spi_spin2_shiftin
05894     47 93 01 F6 | 	mov	objptr, local02
05898     38 8C 86 F1 | 	sub	local01, #56
0589c     46 75 02 FB | 	rdlong	arg01, local01
058a0     59 74 62 FD | 	drvh	arg01
058a4                 | ' }
058a4                 | ' 
058a4                 | ' 
058a4                 | ' uint8_t lcdStatusRead(Display *display)
058a4                 | ' {
058a4                 | '   _pinl(display->xnscs);
058a4                 | ' 
058a4                 | ' 
058a4                 | '   display->spi.shiftout(1, 0x40 , (uint32_t)8);
058a4                 | '   _pinh(display->spi_mosi);
058a4                 | ' 
058a4                 | ' 
058a4                 | '   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
058a4                 | '   _pinh(display->xnscs);
058a4                 | '   return data;
058a4     A8 F0 03 F6 | 	mov	ptra, fp
058a8     B3 00 A0 FD | 	call	#popregs_
058ac                 | _lcdStatusRead_ret
058ac     2D 00 64 FD | 	ret
058b0                 | 
058b0                 | _lcdRegDataWrite
058b0     02 4C 05 F6 | 	mov	COUNT_, #2
058b4     A9 00 A0 FD | 	call	#pushregs_
058b8     3A 8D 02 F6 | 	mov	local01, arg01
058bc     3C 8F 02 F6 | 	mov	local02, arg03
058c0     46 75 02 F6 | 	mov	arg01, local01
058c4     48 FE BF FD | 	call	#_lcdRegWrite
058c8     46 75 02 F6 | 	mov	arg01, local01
058cc     47 77 02 F6 | 	mov	arg02, local02
058d0     A0 FE BF FD | 	call	#_lcdDataWrite
058d4     A8 F0 03 F6 | 	mov	ptra, fp
058d8     B3 00 A0 FD | 	call	#popregs_
058dc                 | _lcdRegDataWrite_ret
058dc     2D 00 64 FD | 	ret
058e0                 | 
058e0                 | _lcdDataWrite16bbp
058e0     03 4C 05 F6 | 	mov	COUNT_, #3
058e4     A9 00 A0 FD | 	call	#pushregs_
058e8     3A 8D 02 F6 | 	mov	local01, arg01
058ec     3B 8F 02 F6 | 	mov	local02, arg02
058f0     46 75 02 FB | 	rdlong	arg01, local01
058f4     58 74 62 FD | 	drvl	arg01
058f8     38 8C 06 F1 | 	add	local01, #56
058fc     01 74 06 F6 | 	mov	arg01, #1
05900     80 76 06 F6 | 	mov	arg02, #128
05904     08 78 06 F6 | 	mov	arg03, #8
05908     C9 90 02 F6 | 	mov	local03, objptr
0590c     46 93 01 F6 | 	mov	objptr, local01
05910     0C 64 B1 FD | 	call	#_jm_spi_spin2_shiftout
05914     46 93 01 F6 | 	mov	objptr, local01
05918     47 77 32 F9 | 	getword	arg02, local02, #0
0591c     01 74 06 F6 | 	mov	arg01, #1
05920     08 78 06 F6 | 	mov	arg03, #8
05924     F8 63 B1 FD | 	call	#_jm_spi_spin2_shiftout
05928     46 93 01 F6 | 	mov	objptr, local01
0592c     38 8C 86 F1 | 	sub	local01, #56
05930     47 77 32 F9 | 	getword	arg02, local02, #0
05934     08 76 46 F0 | 	shr	arg02, #8
05938     01 74 06 F6 | 	mov	arg01, #1
0593c     08 78 06 F6 | 	mov	arg03, #8
05940     DC 63 B1 FD | 	call	#_jm_spi_spin2_shiftout
05944     48 93 01 F6 | 	mov	objptr, local03
05948     46 75 02 FB | 	rdlong	arg01, local01
0594c     59 74 62 FD | 	drvh	arg01
05950     A8 F0 03 F6 | 	mov	ptra, fp
05954     B3 00 A0 FD | 	call	#popregs_
05958                 | _lcdDataWrite16bbp_ret
05958     2D 00 64 FD | 	ret
0595c                 | 
0595c                 | _checkWriteFifoNotFull
0595c     02 4C 05 F6 | 	mov	COUNT_, #2
05960     A9 00 A0 FD | 	call	#pushregs_
05964     3A 8D 02 F6 | 	mov	local01, arg01
05968                 | ' {
05968                 | '   uint16_t i;
05968                 | '   for (i = 0; i < 10000; i++)
05968     00 8E 06 F6 | 	mov	local02, #0
0596c                 | LR__0186
0596c     47 35 32 F9 | 	getword	result1, local02, #0
05970     13 00 00 FF 
05974     10 35 16 F2 | 	cmp	result1, ##10000 wc
05978     18 00 90 3D |  if_ae	jmp	#LR__0187
0597c     46 75 02 F6 | 	mov	arg01, local01
05980     C0 FE BF FD | 	call	#_lcdStatusRead
05984     1A 35 E2 F8 | 	getbyte	result1, result1, #0
05988     80 34 CE F7 | 	test	result1, #128 wz
0598c                 | '     {
0598c                 | '       break;
0598c     01 8E 06 51 |  if_ne	add	local02, #1
05990     D8 FF 9F 5D |  if_ne	jmp	#LR__0186
05994                 | LR__0187
05994     A8 F0 03 F6 | 	mov	ptra, fp
05998     B3 00 A0 FD | 	call	#popregs_
0599c                 | _checkWriteFifoNotFull_ret
0599c     2D 00 64 FD | 	ret
059a0                 | 
059a0                 | _check2dBusy
059a0     02 4C 05 F6 | 	mov	COUNT_, #2
059a4     A9 00 A0 FD | 	call	#pushregs_
059a8     3A 8D 02 F6 | 	mov	local01, arg01
059ac                 | ' {
059ac                 | '   uint32_t i;
059ac                 | '   for (i = 0; i < 1000000; i++)
059ac     00 8E 06 F6 | 	mov	local02, #0
059b0                 | LR__0188
059b0     A1 07 00 FF 
059b4     40 8E 16 F2 | 	cmp	local02, ##1000000 wc
059b8     20 00 90 3D |  if_ae	jmp	#LR__0189
059bc     01 74 06 F6 | 	mov	arg01, #1
059c0     EC FA B1 FD | 	call	#__system___waitus
059c4     46 75 02 F6 | 	mov	arg01, local01
059c8     78 FE BF FD | 	call	#_lcdStatusRead
059cc     1A 35 E2 F8 | 	getbyte	result1, result1, #0
059d0     08 34 CE F7 | 	test	result1, #8 wz
059d4                 | '     {
059d4                 | '       break;
059d4     01 8E 06 51 |  if_ne	add	local02, #1
059d8     D4 FF 9F 5D |  if_ne	jmp	#LR__0188
059dc                 | LR__0189
059dc     A8 F0 03 F6 | 	mov	ptra, fp
059e0     B3 00 A0 FD | 	call	#popregs_
059e4                 | _check2dBusy_ret
059e4     2D 00 64 FD | 	ret
059e8                 | 
059e8                 | _checkSdramReady
059e8     02 4C 05 F6 | 	mov	COUNT_, #2
059ec     A9 00 A0 FD | 	call	#pushregs_
059f0     3A 8D 02 F6 | 	mov	local01, arg01
059f4                 | ' {
059f4                 | '   uint32_t i;
059f4                 | '   for (i = 0; i < 1000000; i++)
059f4     00 8E 06 F6 | 	mov	local02, #0
059f8                 | LR__0190
059f8     A1 07 00 FF 
059fc     40 8E 16 F2 | 	cmp	local02, ##1000000 wc
05a00     2C 00 90 3D |  if_ae	jmp	#LR__0191
05a04     01 74 06 F6 | 	mov	arg01, #1
05a08     2C FA B1 FD | 	call	#__system___waitms
05a0c     46 75 02 F6 | 	mov	arg01, local01
05a10     30 FE BF FD | 	call	#_lcdStatusRead
05a14     1A 35 E2 F8 | 	getbyte	result1, result1, #0
05a18     04 34 06 F5 | 	and	result1, #4
05a1c     04 34 0E F2 | 	cmp	result1, #4 wz
05a20                 | '     {
05a20                 | '       return  (1) ;
05a20     01 34 06 A6 |  if_e	mov	result1, #1
05a24     0C 00 90 AD |  if_e	jmp	#LR__0192
05a28     01 8E 06 F1 | 	add	local02, #1
05a2c     C8 FF 9F FD | 	jmp	#LR__0190
05a30                 | LR__0191
05a30                 | '     }
05a30                 | '   }
05a30                 | '   return  (0) ;
05a30     00 34 06 F6 | 	mov	result1, #0
05a34                 | LR__0192
05a34     A8 F0 03 F6 | 	mov	ptra, fp
05a38     B3 00 A0 FD | 	call	#popregs_
05a3c                 | _checkSdramReady_ret
05a3c     2D 00 64 FD | 	ret
05a40                 | 
05a40                 | _bte_Source0_MemoryStartAddr
05a40     03 4C 05 F6 | 	mov	COUNT_, #3
05a44     A9 00 A0 FD | 	call	#pushregs_
05a48     3A 8D 02 F6 | 	mov	local01, arg01
05a4c     3B 8F 02 F6 | 	mov	local02, arg02
05a50     93 76 06 F6 | 	mov	arg02, #147
05a54     47 79 02 F6 | 	mov	arg03, local02
05a58     3C 91 02 F6 | 	mov	local03, arg03
05a5c     46 75 02 F6 | 	mov	arg01, local01
05a60     AC FC BF FD | 	call	#_lcdRegWrite
05a64     46 75 02 F6 | 	mov	arg01, local01
05a68     48 77 02 F6 | 	mov	arg02, local03
05a6c     04 FD BF FD | 	call	#_lcdDataWrite
05a70     47 79 02 F6 | 	mov	arg03, local02
05a74     08 78 46 F0 | 	shr	arg03, #8
05a78     94 76 06 F6 | 	mov	arg02, #148
05a7c     3C 91 02 F6 | 	mov	local03, arg03
05a80     46 75 02 F6 | 	mov	arg01, local01
05a84     88 FC BF FD | 	call	#_lcdRegWrite
05a88     46 75 02 F6 | 	mov	arg01, local01
05a8c     48 77 02 F6 | 	mov	arg02, local03
05a90     E0 FC BF FD | 	call	#_lcdDataWrite
05a94     47 79 02 F6 | 	mov	arg03, local02
05a98     10 78 46 F0 | 	shr	arg03, #16
05a9c     95 76 06 F6 | 	mov	arg02, #149
05aa0     3C 91 02 F6 | 	mov	local03, arg03
05aa4     46 75 02 F6 | 	mov	arg01, local01
05aa8     64 FC BF FD | 	call	#_lcdRegWrite
05aac     46 75 02 F6 | 	mov	arg01, local01
05ab0     48 77 02 F6 | 	mov	arg02, local03
05ab4     BC FC BF FD | 	call	#_lcdDataWrite
05ab8     18 8E 46 F0 | 	shr	local02, #24
05abc     96 76 06 F6 | 	mov	arg02, #150
05ac0     47 79 02 F6 | 	mov	arg03, local02
05ac4     3C 91 02 F6 | 	mov	local03, arg03
05ac8     46 75 02 F6 | 	mov	arg01, local01
05acc     40 FC BF FD | 	call	#_lcdRegWrite
05ad0     46 75 02 F6 | 	mov	arg01, local01
05ad4     48 77 02 F6 | 	mov	arg02, local03
05ad8     98 FC BF FD | 	call	#_lcdDataWrite
05adc     A8 F0 03 F6 | 	mov	ptra, fp
05ae0     B3 00 A0 FD | 	call	#popregs_
05ae4                 | _bte_Source0_MemoryStartAddr_ret
05ae4     2D 00 64 FD | 	ret
05ae8                 | 
05ae8                 | _bte_Source0_ImageWidth
05ae8     03 4C 05 F6 | 	mov	COUNT_, #3
05aec     A9 00 A0 FD | 	call	#pushregs_
05af0     3A 8D 02 F6 | 	mov	local01, arg01
05af4     3B 8F 02 F6 | 	mov	local02, arg02
05af8     97 76 06 F6 | 	mov	arg02, #151
05afc     47 79 02 F6 | 	mov	arg03, local02
05b00     3C 91 02 F6 | 	mov	local03, arg03
05b04     46 75 02 F6 | 	mov	arg01, local01
05b08     04 FC BF FD | 	call	#_lcdRegWrite
05b0c     46 75 02 F6 | 	mov	arg01, local01
05b10     48 77 02 F6 | 	mov	arg02, local03
05b14     5C FC BF FD | 	call	#_lcdDataWrite
05b18     47 79 32 F9 | 	getword	arg03, local02, #0
05b1c     08 78 46 F0 | 	shr	arg03, #8
05b20     98 76 06 F6 | 	mov	arg02, #152
05b24     3C 91 02 F6 | 	mov	local03, arg03
05b28     46 75 02 F6 | 	mov	arg01, local01
05b2c     E0 FB BF FD | 	call	#_lcdRegWrite
05b30     46 75 02 F6 | 	mov	arg01, local01
05b34     48 77 02 F6 | 	mov	arg02, local03
05b38     38 FC BF FD | 	call	#_lcdDataWrite
05b3c     A8 F0 03 F6 | 	mov	ptra, fp
05b40     B3 00 A0 FD | 	call	#popregs_
05b44                 | _bte_Source0_ImageWidth_ret
05b44     2D 00 64 FD | 	ret
05b48                 | 
05b48                 | _bte_Source0_WindowStartXY
05b48     04 4C 05 F6 | 	mov	COUNT_, #4
05b4c     A9 00 A0 FD | 	call	#pushregs_
05b50     3A 8D 02 F6 | 	mov	local01, arg01
05b54     3B 8F 02 F6 | 	mov	local02, arg02
05b58     3C 91 02 F6 | 	mov	local03, arg03
05b5c     99 76 06 F6 | 	mov	arg02, #153
05b60     47 79 02 F6 | 	mov	arg03, local02
05b64     3C 93 02 F6 | 	mov	local04, arg03
05b68     46 75 02 F6 | 	mov	arg01, local01
05b6c     A0 FB BF FD | 	call	#_lcdRegWrite
05b70     46 75 02 F6 | 	mov	arg01, local01
05b74     49 77 02 F6 | 	mov	arg02, local04
05b78     F8 FB BF FD | 	call	#_lcdDataWrite
05b7c     47 79 32 F9 | 	getword	arg03, local02, #0
05b80     08 78 46 F0 | 	shr	arg03, #8
05b84     9A 76 06 F6 | 	mov	arg02, #154
05b88     3C 93 02 F6 | 	mov	local04, arg03
05b8c     46 75 02 F6 | 	mov	arg01, local01
05b90     7C FB BF FD | 	call	#_lcdRegWrite
05b94     46 75 02 F6 | 	mov	arg01, local01
05b98     49 77 02 F6 | 	mov	arg02, local04
05b9c     D4 FB BF FD | 	call	#_lcdDataWrite
05ba0     9B 76 06 F6 | 	mov	arg02, #155
05ba4     48 79 02 F6 | 	mov	arg03, local03
05ba8     3C 93 02 F6 | 	mov	local04, arg03
05bac     46 75 02 F6 | 	mov	arg01, local01
05bb0     5C FB BF FD | 	call	#_lcdRegWrite
05bb4     46 75 02 F6 | 	mov	arg01, local01
05bb8     49 77 02 F6 | 	mov	arg02, local04
05bbc     B4 FB BF FD | 	call	#_lcdDataWrite
05bc0     48 79 32 F9 | 	getword	arg03, local03, #0
05bc4     08 78 46 F0 | 	shr	arg03, #8
05bc8     9C 76 06 F6 | 	mov	arg02, #156
05bcc     3C 93 02 F6 | 	mov	local04, arg03
05bd0     46 75 02 F6 | 	mov	arg01, local01
05bd4     38 FB BF FD | 	call	#_lcdRegWrite
05bd8     46 75 02 F6 | 	mov	arg01, local01
05bdc     49 77 02 F6 | 	mov	arg02, local04
05be0     90 FB BF FD | 	call	#_lcdDataWrite
05be4     A8 F0 03 F6 | 	mov	ptra, fp
05be8     B3 00 A0 FD | 	call	#popregs_
05bec                 | _bte_Source0_WindowStartXY_ret
05bec     2D 00 64 FD | 	ret
05bf0                 | 
05bf0                 | _bte_DestinationMemoryStartAddr
05bf0     03 4C 05 F6 | 	mov	COUNT_, #3
05bf4     A9 00 A0 FD | 	call	#pushregs_
05bf8     3A 8D 02 F6 | 	mov	local01, arg01
05bfc     3B 8F 02 F6 | 	mov	local02, arg02
05c00     A7 76 06 F6 | 	mov	arg02, #167
05c04     47 79 02 F6 | 	mov	arg03, local02
05c08     3C 91 02 F6 | 	mov	local03, arg03
05c0c     46 75 02 F6 | 	mov	arg01, local01
05c10     FC FA BF FD | 	call	#_lcdRegWrite
05c14     46 75 02 F6 | 	mov	arg01, local01
05c18     48 77 02 F6 | 	mov	arg02, local03
05c1c     54 FB BF FD | 	call	#_lcdDataWrite
05c20     47 79 02 F6 | 	mov	arg03, local02
05c24     08 78 46 F0 | 	shr	arg03, #8
05c28     A8 76 06 F6 | 	mov	arg02, #168
05c2c     3C 91 02 F6 | 	mov	local03, arg03
05c30     46 75 02 F6 | 	mov	arg01, local01
05c34     D8 FA BF FD | 	call	#_lcdRegWrite
05c38     46 75 02 F6 | 	mov	arg01, local01
05c3c     48 77 02 F6 | 	mov	arg02, local03
05c40     30 FB BF FD | 	call	#_lcdDataWrite
05c44     47 79 02 F6 | 	mov	arg03, local02
05c48     10 78 46 F0 | 	shr	arg03, #16
05c4c     A9 76 06 F6 | 	mov	arg02, #169
05c50     3C 91 02 F6 | 	mov	local03, arg03
05c54     46 75 02 F6 | 	mov	arg01, local01
05c58     B4 FA BF FD | 	call	#_lcdRegWrite
05c5c     46 75 02 F6 | 	mov	arg01, local01
05c60     48 77 02 F6 | 	mov	arg02, local03
05c64     0C FB BF FD | 	call	#_lcdDataWrite
05c68     18 8E 46 F0 | 	shr	local02, #24
05c6c     AA 76 06 F6 | 	mov	arg02, #170
05c70     47 79 02 F6 | 	mov	arg03, local02
05c74     3C 91 02 F6 | 	mov	local03, arg03
05c78     46 75 02 F6 | 	mov	arg01, local01
05c7c     90 FA BF FD | 	call	#_lcdRegWrite
05c80     46 75 02 F6 | 	mov	arg01, local01
05c84     48 77 02 F6 | 	mov	arg02, local03
05c88     E8 FA BF FD | 	call	#_lcdDataWrite
05c8c     A8 F0 03 F6 | 	mov	ptra, fp
05c90     B3 00 A0 FD | 	call	#popregs_
05c94                 | _bte_DestinationMemoryStartAddr_ret
05c94     2D 00 64 FD | 	ret
05c98                 | 
05c98                 | _bte_DestinationImageWidth
05c98     03 4C 05 F6 | 	mov	COUNT_, #3
05c9c     A9 00 A0 FD | 	call	#pushregs_
05ca0     3A 8D 02 F6 | 	mov	local01, arg01
05ca4     3B 8F 02 F6 | 	mov	local02, arg02
05ca8     AB 76 06 F6 | 	mov	arg02, #171
05cac     47 79 02 F6 | 	mov	arg03, local02
05cb0     3C 91 02 F6 | 	mov	local03, arg03
05cb4     46 75 02 F6 | 	mov	arg01, local01
05cb8     54 FA BF FD | 	call	#_lcdRegWrite
05cbc     46 75 02 F6 | 	mov	arg01, local01
05cc0     48 77 02 F6 | 	mov	arg02, local03
05cc4     AC FA BF FD | 	call	#_lcdDataWrite
05cc8     47 79 32 F9 | 	getword	arg03, local02, #0
05ccc     08 78 46 F0 | 	shr	arg03, #8
05cd0     AC 76 06 F6 | 	mov	arg02, #172
05cd4     3C 91 02 F6 | 	mov	local03, arg03
05cd8     46 75 02 F6 | 	mov	arg01, local01
05cdc     30 FA BF FD | 	call	#_lcdRegWrite
05ce0     46 75 02 F6 | 	mov	arg01, local01
05ce4     48 77 02 F6 | 	mov	arg02, local03
05ce8     88 FA BF FD | 	call	#_lcdDataWrite
05cec     A8 F0 03 F6 | 	mov	ptra, fp
05cf0     B3 00 A0 FD | 	call	#popregs_
05cf4                 | _bte_DestinationImageWidth_ret
05cf4     2D 00 64 FD | 	ret
05cf8                 | 
05cf8                 | _bte_DestinationWindowStartXY
05cf8     04 4C 05 F6 | 	mov	COUNT_, #4
05cfc     A9 00 A0 FD | 	call	#pushregs_
05d00     3A 8D 02 F6 | 	mov	local01, arg01
05d04     3B 8F 02 F6 | 	mov	local02, arg02
05d08     3C 91 02 F6 | 	mov	local03, arg03
05d0c     AD 76 06 F6 | 	mov	arg02, #173
05d10     47 79 02 F6 | 	mov	arg03, local02
05d14     3C 93 02 F6 | 	mov	local04, arg03
05d18     46 75 02 F6 | 	mov	arg01, local01
05d1c     F0 F9 BF FD | 	call	#_lcdRegWrite
05d20     46 75 02 F6 | 	mov	arg01, local01
05d24     49 77 02 F6 | 	mov	arg02, local04
05d28     48 FA BF FD | 	call	#_lcdDataWrite
05d2c     47 79 32 F9 | 	getword	arg03, local02, #0
05d30     08 78 46 F0 | 	shr	arg03, #8
05d34     AE 76 06 F6 | 	mov	arg02, #174
05d38     3C 93 02 F6 | 	mov	local04, arg03
05d3c     46 75 02 F6 | 	mov	arg01, local01
05d40     CC F9 BF FD | 	call	#_lcdRegWrite
05d44     46 75 02 F6 | 	mov	arg01, local01
05d48     49 77 02 F6 | 	mov	arg02, local04
05d4c     24 FA BF FD | 	call	#_lcdDataWrite
05d50     AF 76 06 F6 | 	mov	arg02, #175
05d54     48 79 02 F6 | 	mov	arg03, local03
05d58     3C 93 02 F6 | 	mov	local04, arg03
05d5c     46 75 02 F6 | 	mov	arg01, local01
05d60     AC F9 BF FD | 	call	#_lcdRegWrite
05d64     46 75 02 F6 | 	mov	arg01, local01
05d68     49 77 02 F6 | 	mov	arg02, local04
05d6c     04 FA BF FD | 	call	#_lcdDataWrite
05d70     48 79 32 F9 | 	getword	arg03, local03, #0
05d74     08 78 46 F0 | 	shr	arg03, #8
05d78     B0 76 06 F6 | 	mov	arg02, #176
05d7c     3C 93 02 F6 | 	mov	local04, arg03
05d80     46 75 02 F6 | 	mov	arg01, local01
05d84     88 F9 BF FD | 	call	#_lcdRegWrite
05d88     46 75 02 F6 | 	mov	arg01, local01
05d8c     49 77 02 F6 | 	mov	arg02, local04
05d90     E0 F9 BF FD | 	call	#_lcdDataWrite
05d94     A8 F0 03 F6 | 	mov	ptra, fp
05d98     B3 00 A0 FD | 	call	#popregs_
05d9c                 | _bte_DestinationWindowStartXY_ret
05d9c     2D 00 64 FD | 	ret
05da0                 | 
05da0                 | _bte_WindowSize
05da0     04 4C 05 F6 | 	mov	COUNT_, #4
05da4     A9 00 A0 FD | 	call	#pushregs_
05da8     3A 8D 02 F6 | 	mov	local01, arg01
05dac     3B 8F 02 F6 | 	mov	local02, arg02
05db0     3C 91 02 F6 | 	mov	local03, arg03
05db4     B1 76 06 F6 | 	mov	arg02, #177
05db8     47 79 02 F6 | 	mov	arg03, local02
05dbc     3C 93 02 F6 | 	mov	local04, arg03
05dc0     46 75 02 F6 | 	mov	arg01, local01
05dc4     48 F9 BF FD | 	call	#_lcdRegWrite
05dc8     46 75 02 F6 | 	mov	arg01, local01
05dcc     49 77 02 F6 | 	mov	arg02, local04
05dd0     A0 F9 BF FD | 	call	#_lcdDataWrite
05dd4     47 79 32 F9 | 	getword	arg03, local02, #0
05dd8     08 78 46 F0 | 	shr	arg03, #8
05ddc     B2 76 06 F6 | 	mov	arg02, #178
05de0     3C 93 02 F6 | 	mov	local04, arg03
05de4     46 75 02 F6 | 	mov	arg01, local01
05de8     24 F9 BF FD | 	call	#_lcdRegWrite
05dec     46 75 02 F6 | 	mov	arg01, local01
05df0     49 77 02 F6 | 	mov	arg02, local04
05df4     7C F9 BF FD | 	call	#_lcdDataWrite
05df8     B3 76 06 F6 | 	mov	arg02, #179
05dfc     48 79 02 F6 | 	mov	arg03, local03
05e00     3C 93 02 F6 | 	mov	local04, arg03
05e04     46 75 02 F6 | 	mov	arg01, local01
05e08     04 F9 BF FD | 	call	#_lcdRegWrite
05e0c     46 75 02 F6 | 	mov	arg01, local01
05e10     49 77 02 F6 | 	mov	arg02, local04
05e14     5C F9 BF FD | 	call	#_lcdDataWrite
05e18     48 79 32 F9 | 	getword	arg03, local03, #0
05e1c     08 78 46 F0 | 	shr	arg03, #8
05e20     B4 76 06 F6 | 	mov	arg02, #180
05e24     3C 93 02 F6 | 	mov	local04, arg03
05e28     46 75 02 F6 | 	mov	arg01, local01
05e2c     E0 F8 BF FD | 	call	#_lcdRegWrite
05e30     46 75 02 F6 | 	mov	arg01, local01
05e34     49 77 02 F6 | 	mov	arg02, local04
05e38     38 F9 BF FD | 	call	#_lcdDataWrite
05e3c     A8 F0 03 F6 | 	mov	ptra, fp
05e40     B3 00 A0 FD | 	call	#popregs_
05e44                 | _bte_WindowSize_ret
05e44     2D 00 64 FD | 	ret
05e48                 | 
05e48                 | _strcpy
05e48     3A 3B 02 F6 | 	mov	_var01, arg01
05e4c     00 76 0E F2 | 	cmp	arg02, #0 wz
05e50     3A 35 02 A6 |  if_e	mov	result1, arg01
05e54     20 00 90 AD |  if_e	jmp	#_strcpy_ret
05e58     B8 A1 9F FE | 	loc	pa,	#(@LR__0194-@LR__0193)
05e5c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05e60                 | '         do {
05e60                 | LR__0193
05e60     3B 35 CA FA | 	rdbyte	result1, arg02 wz
05e64     1D 35 42 FC | 	wrbyte	result1, _var01
05e68     01 76 06 F1 | 	add	arg02, #1
05e6c     01 3A 06 F1 | 	add	_var01, #1
05e70     EC FF 9F 5D |  if_ne	jmp	#LR__0193
05e74                 | LR__0194
05e74                 | ' 	return(dst);
05e74     3A 35 02 F6 | 	mov	result1, arg01
05e78                 | _strcpy_ret
05e78     2D 00 64 FD | 	ret
05e7c                 | 
05e7c                 | _strncpy
05e7c     3A 3B 02 F6 | 	mov	_var01, arg01
05e80     A0 A1 9F FE | 	loc	pa,	#(@LR__0196-@LR__0195)
05e84     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05e88                 | ' 
05e88                 | ' 	dscan = dst;
05e88                 | ' 	sscan = src;
05e88                 | ' 	count = n;
05e88                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
05e88                 | LR__0195
05e88     01 78 86 F1 | 	sub	arg03, #1
05e8c     00 78 56 F2 | 	cmps	arg03, #0 wc
05e90     18 00 90 CD |  if_b	jmp	#LR__0197
05e94     3B 35 C2 FA | 	rdbyte	result1, arg02
05e98     1D 35 42 FC | 	wrbyte	result1, _var01
05e9c     01 76 06 F1 | 	add	arg02, #1
05ea0     1D 35 CA FA | 	rdbyte	result1, _var01 wz
05ea4                 | ' 		continue;
05ea4     01 3A 06 F1 | 	add	_var01, #1
05ea8     DC FF 9F 5D |  if_ne	jmp	#LR__0195
05eac                 | LR__0196
05eac                 | LR__0197
05eac     68 A1 9F FE | 	loc	pa,	#(@LR__0199-@LR__0198)
05eb0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05eb4                 | ' 	while (--count >= 0)
05eb4                 | LR__0198
05eb4     01 78 86 F1 | 	sub	arg03, #1
05eb8     00 78 56 F2 | 	cmps	arg03, #0 wc
05ebc     1D 3D 02 36 |  if_ae	mov	_var02, _var01
05ec0     01 3A 06 31 |  if_ae	add	_var01, #1
05ec4     1E 01 48 3C |  if_ae	wrbyte	#0, _var02
05ec8     E8 FF 9F 3D |  if_ae	jmp	#LR__0198
05ecc                 | LR__0199
05ecc                 | ' 		*dscan++ = '\0';
05ecc                 | ' 	return(dst);
05ecc     3A 35 02 F6 | 	mov	result1, arg01
05ed0                 | _strncpy_ret
05ed0     2D 00 64 FD | 	ret
05ed4                 | 
05ed4                 | _strcat
05ed4     00 76 4E F2 | 	cmps	arg02, #0 wz
05ed8     30 00 90 AD |  if_e	jmp	#LR__0203
05edc                 | ' 	{
05edc                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
05edc     3A 3B 02 F6 | 	mov	_var01, arg01
05ee0     40 A1 9F FE | 	loc	pa,	#(@LR__0202-@LR__0200)
05ee4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05ee8                 | LR__0200
05ee8     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
05eec                 | ' 		continue;
05eec     01 3A 06 51 |  if_ne	add	_var01, #1
05ef0     F4 FF 9F 5D |  if_ne	jmp	#LR__0200
05ef4                 | ' 	    while ((*dscan++ = *sscan++) != '\0')
05ef4                 | LR__0201
05ef4     3B 3D C2 FA | 	rdbyte	_var02, arg02
05ef8     1D 3D 42 FC | 	wrbyte	_var02, _var01
05efc     01 76 06 F1 | 	add	arg02, #1
05f00     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
05f04                 | ' 			continue;
05f04     01 3A 06 F1 | 	add	_var01, #1
05f08     E8 FF 9F 5D |  if_ne	jmp	#LR__0201
05f0c                 | LR__0202
05f0c                 | LR__0203
05f0c                 | ' 	}
05f0c                 | ' 	return(dst);
05f0c     3A 35 02 F6 | 	mov	result1, arg01
05f10                 | _strcat_ret
05f10     2D 00 64 FD | 	ret
05f14                 | 
05f14                 | _strncat
05f14     3A 3B 02 F6 | 	mov	_var01, arg01
05f18     3B 3D 02 F6 | 	mov	_var02, arg02
05f1c     3C 3F 02 F6 | 	mov	_var03, arg03
05f20     1E 41 0A F6 | 	mov	_var04, _var02 wz
05f24     6C 00 90 AD |  if_e	jmp	#LR__0208
05f28     01 3E 16 F2 | 	cmp	_var03, #1 wc
05f2c     64 00 90 CD |  if_b	jmp	#LR__0208
05f30                 | ' 	{
05f30                 | ' 	    for (dscan = dst; *dscan != '\0'; dscan++)
05f30     1D 43 02 F6 | 	mov	_var05, _var01
05f34     18 A1 9F FE | 	loc	pa,	#(@LR__0206-@LR__0204)
05f38     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05f3c                 | LR__0204
05f3c     21 45 CA FA | 	rdbyte	_var06, _var05 wz
05f40                 | ' 		continue;
05f40     01 42 06 51 |  if_ne	add	_var05, #1
05f44     F4 FF 9F 5D |  if_ne	jmp	#LR__0204
05f48     1F 47 02 F6 | 	mov	_var07, _var03
05f4c                 | ' 	    count = n;
05f4c                 | ' 	    while ((c = *sscan++) != '\0' && --count >= 0)
05f4c                 | LR__0205
05f4c     20 49 02 F6 | 	mov	_var08, _var04
05f50     20 4B 02 F6 | 	mov	_var09, _var04
05f54     01 4A 06 F1 | 	add	_var09, #1
05f58     25 41 02 F6 | 	mov	_var04, _var09
05f5c     24 4D C2 FA | 	rdbyte	_var10, _var08
05f60     26 45 02 F6 | 	mov	_var06, _var10
05f64     07 44 4E F7 | 	zerox	_var06, #7 wz
05f68     20 00 90 AD |  if_e	jmp	#LR__0207
05f6c     23 4F 02 F6 | 	mov	_var11, _var07
05f70     01 4E 86 F1 | 	sub	_var11, #1
05f74     27 47 02 F6 | 	mov	_var07, _var11
05f78     00 46 56 F2 | 	cmps	_var07, #0 wc
05f7c     21 45 02 36 |  if_ae	mov	_var06, _var05
05f80     01 42 06 31 |  if_ae	add	_var05, #1
05f84     22 4D 42 3C |  if_ae	wrbyte	_var10, _var06
05f88     C0 FF 9F 3D |  if_ae	jmp	#LR__0205
05f8c                 | LR__0206
05f8c                 | LR__0207
05f8c     00 44 06 F6 | 	mov	_var06, #0
05f90     21 01 48 FC | 	wrbyte	#0, _var05
05f94                 | LR__0208
05f94                 | ' 		*dscan++ = c;
05f94                 | ' 	    *dscan = '\0';
05f94                 | ' 	}
05f94                 | ' 	return(dst);
05f94     1D 35 02 F6 | 	mov	result1, _var01
05f98                 | _strncat_ret
05f98     2D 00 64 FD | 	ret
05f9c                 | 
05f9c                 | _strcmp
05f9c     3A 3B 0A F6 | 	mov	_var01, arg01 wz
05fa0     14 00 90 5D |  if_ne	jmp	#LR__0209
05fa4                 | '             return scan2 ? -1 : 0;
05fa4     00 76 0E F2 | 	cmp	arg02, #0 wz
05fa8     01 3C 66 56 |  if_ne	neg	_var02, #1
05fac     00 3C 06 A6 |  if_e	mov	_var02, #0
05fb0     1E 35 02 F6 | 	mov	result1, _var02
05fb4     64 00 90 FD | 	jmp	#_strcmp_ret
05fb8                 | LR__0209
05fb8     00 76 0E F2 | 	cmp	arg02, #0 wz
05fbc     01 34 06 A6 |  if_e	mov	result1, #1
05fc0     58 00 90 AD |  if_e	jmp	#_strcmp_ret
05fc4     60 A0 9F FE | 	loc	pa,	#(@LR__0211-@LR__0210)
05fc8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
05fcc                 | ' 
05fcc                 | ' 	do {
05fcc                 | LR__0210
05fcc     1D 3F CA FA | 	rdbyte	_var03, _var01 wz
05fd0     3B 41 02 F6 | 	mov	_var04, arg02
05fd4     3B 43 02 F6 | 	mov	_var05, arg02
05fd8     01 42 06 F1 | 	add	_var05, #1
05fdc     21 77 02 F6 | 	mov	arg02, _var05
05fe0     20 3D C2 FA | 	rdbyte	_var02, _var04
05fe4     01 3A 06 F1 | 	add	_var01, #1
05fe8     08 00 90 AD |  if_e	jmp	#LR__0212
05fec     1E 3F 0A F2 | 	cmp	_var03, _var02 wz
05ff0     D8 FF 9F AD |  if_e	jmp	#LR__0210
05ff4                 | LR__0211
05ff4                 | LR__0212
05ff4     1E 3F 0A F2 | 	cmp	_var03, _var02 wz
05ff8                 | ' 		return(0);
05ff8     00 34 06 A6 |  if_e	mov	result1, #0
05ffc     1C 00 90 AD |  if_e	jmp	#_strcmp_ret
06000     00 3E 0E F2 | 	cmp	_var03, #0 wz
06004                 | ' 		return(-1);
06004     01 34 66 A6 |  if_e	neg	result1, #1
06008     10 00 90 AD |  if_e	jmp	#_strcmp_ret
0600c     00 3C 0E F2 | 	cmp	_var02, #0 wz
06010                 | ' 		return(1);
06010     01 34 06 A6 |  if_e	mov	result1, #1
06014                 | ' 		return(c1 - c2);
06014     1F 35 02 56 |  if_ne	mov	result1, _var03
06018     1E 35 82 51 |  if_ne	sub	result1, _var02
0601c                 | _strcmp_ret
0601c     2D 00 64 FD | 	ret
06020                 | 
06020                 | _strncmp
06020     3A 3B 0A F6 | 	mov	_var01, arg01 wz
06024     14 00 90 5D |  if_ne	jmp	#LR__0213
06028                 | ' 		return scan2 ? -1 : 0;
06028     00 76 0E F2 | 	cmp	arg02, #0 wz
0602c     01 3C 66 56 |  if_ne	neg	_var02, #1
06030     00 3C 06 A6 |  if_e	mov	_var02, #0
06034     1E 35 02 F6 | 	mov	result1, _var02
06038     88 00 90 FD | 	jmp	#_strncmp_ret
0603c                 | LR__0213
0603c     00 76 0E F2 | 	cmp	arg02, #0 wz
06040     01 34 06 A6 |  if_e	mov	result1, #1
06044     7C 00 90 AD |  if_e	jmp	#_strncmp_ret
06048     3C 3F 02 F6 | 	mov	_var03, arg03
0604c     EC 9F 9F FE | 	loc	pa,	#(@LR__0215-@LR__0214)
06050     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06054                 | ' 	count = n;
06054                 | ' 	do {
06054                 | LR__0214
06054     1D 41 C2 FA | 	rdbyte	_var04, _var01
06058     3B 43 02 F6 | 	mov	_var05, arg02
0605c     3B 45 02 F6 | 	mov	_var06, arg02
06060     01 44 06 F1 | 	add	_var06, #1
06064     22 77 02 F6 | 	mov	arg02, _var06
06068     21 47 C2 FA | 	rdbyte	_var07, _var05
0606c     1F 3D 02 F6 | 	mov	_var02, _var03
06070     01 3C 86 F1 | 	sub	_var02, #1
06074     1E 3F 02 F6 | 	mov	_var03, _var02
06078     00 3E 56 F2 | 	cmps	_var03, #0 wc
0607c     01 3A 06 F1 | 	add	_var01, #1
06080     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
06084     08 00 90 2D |  if_nc_and_z	jmp	#LR__0216
06088     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
0608c     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0214
06090                 | LR__0215
06090                 | LR__0216
06090     00 3E 56 F2 | 	cmps	_var03, #0 wc
06094                 | ' 		return(0);
06094     00 34 06 C6 |  if_b	mov	result1, #0
06098     28 00 90 CD |  if_b	jmp	#_strncmp_ret
0609c     23 41 0A F2 | 	cmp	_var04, _var07 wz
060a0                 | ' 		return(0);
060a0     00 34 06 A6 |  if_e	mov	result1, #0
060a4     1C 00 90 AD |  if_e	jmp	#_strncmp_ret
060a8     00 40 0E F2 | 	cmp	_var04, #0 wz
060ac                 | ' 		return(-1);
060ac     01 34 66 A6 |  if_e	neg	result1, #1
060b0     10 00 90 AD |  if_e	jmp	#_strncmp_ret
060b4     00 46 0E F2 | 	cmp	_var07, #0 wz
060b8                 | ' 		return(1);
060b8     01 34 06 A6 |  if_e	mov	result1, #1
060bc                 | ' 		return(c1 - c2);
060bc     20 35 02 56 |  if_ne	mov	result1, _var04
060c0     23 35 82 51 |  if_ne	sub	result1, _var07
060c4                 | _strncmp_ret
060c4     2D 00 64 FD | 	ret
060c8                 | 
060c8                 | _strrchr
060c8     00 3A 06 F6 | 	mov	_var01, #0
060cc     4C 9F 9F FE | 	loc	pa,	#(@LR__0218-@LR__0217)
060d0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
060d4                 | ' 
060d4                 | ' 	place =  (0) ;
060d4                 | ' 	while ((c = *s++) != 0)
060d4                 | LR__0217
060d4     3A 3D CA FA | 	rdbyte	_var02, arg01 wz
060d8     01 74 06 F1 | 	add	arg01, #1
060dc     10 00 90 AD |  if_e	jmp	#LR__0219
060e0     3B 3D 0A F2 | 	cmp	_var02, arg02 wz
060e4     3A 3B 02 A6 |  if_e	mov	_var01, arg01
060e8     01 3A 86 A1 |  if_e	sub	_var01, #1
060ec     E4 FF 9F FD | 	jmp	#LR__0217
060f0                 | LR__0218
060f0                 | LR__0219
060f0     00 76 0E F2 | 	cmp	arg02, #0 wz
060f4     01 74 86 A1 |  if_e	sub	arg01, #1
060f8     3A 3B 02 A6 |  if_e	mov	_var01, arg01
060fc                 | ' 		place = (--s);
060fc                 | ' 	return (char *)place;
060fc     1D 35 02 F6 | 	mov	result1, _var01
06100                 | _strrchr_ret
06100     2D 00 64 FD | 	ret
06104                 | 
06104                 | _strlen
06104     3A 3B 0A F6 | 	mov	_var01, arg01 wz
06108     1D 3D 02 F6 | 	mov	_var02, _var01
0610c     01 3C 06 F1 | 	add	_var02, #1
06110     1E 3F 02 F6 | 	mov	_var03, _var02
06114     00 34 06 A6 |  if_e	mov	result1, #0
06118     1C 00 90 AD |  if_e	jmp	#_strlen_ret
0611c     EC 9E 9F FE | 	loc	pa,	#(@LR__0221-@LR__0220)
06120     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06124                 | ' 	while (*scan++ != '\0')
06124                 | LR__0220
06124     1D 3D CA FA | 	rdbyte	_var02, _var01 wz
06128                 | ' 		continue;
06128     01 3A 06 F1 | 	add	_var01, #1
0612c     F4 FF 9F 5D |  if_ne	jmp	#LR__0220
06130                 | LR__0221
06130                 | ' 	return (size_t)((long)scan - (long)start);
06130     1F 3B 82 F1 | 	sub	_var01, _var03
06134     1D 35 02 F6 | 	mov	result1, _var01
06138                 | _strlen_ret
06138     2D 00 64 FD | 	ret
0613c                 | 
0613c                 | _json_create
0613c     01 4C 05 F6 | 	mov	COUNT_, #1
06140     A9 00 A0 FD | 	call	#pushregs_
06144     24 F0 07 F1 | 	add	ptra, #36
06148     3A 8D 02 F6 | 	mov	local01, arg01
0614c     10 50 05 F1 | 	add	fp, #16
06150     A8 76 62 FC | 	wrlong	arg02, fp
06154     04 50 05 F1 | 	add	fp, #4
06158     A8 78 62 FC | 	wrlong	arg03, fp
0615c     14 50 85 F1 | 	sub	fp, #20
06160     C9 74 02 F6 | 	mov	arg01, objptr
06164     0A 77 02 F6 | 	mov	arg02, ptr__poolInit_
06168     7C F1 B1 FD | 	call	#__system___make_methodptr
0616c     1C 50 05 F1 | 	add	fp, #28
06170     A8 34 62 FC | 	wrlong	result1, fp
06174     1C 50 85 F1 | 	sub	fp, #28
06178     C9 74 02 F6 | 	mov	arg01, objptr
0617c     09 77 02 F6 | 	mov	arg02, ptr__poolAlloc_
06180     64 F1 B1 FD | 	call	#__system___make_methodptr
06184     20 50 05 F1 | 	add	fp, #32
06188     A8 34 62 FC | 	wrlong	result1, fp
0618c                 | ' {
0618c                 | '     jsonStaticPool_t spool;
0618c                 | '     spool.mem = mem;
0618c                 | '     spool.qty = qty;
0618c                 | '     spool.pool.init = poolInit;
0618c                 | '     spool.pool.alloc = poolAlloc;
0618c                 | '     return json_createWithPool(str, &spool.pool);
0618c     04 50 85 F1 | 	sub	fp, #4
06190     A8 76 02 F6 | 	mov	arg02, fp
06194     1C 50 85 F1 | 	sub	fp, #28
06198     46 75 02 F6 | 	mov	arg01, local01
0619c     70 00 B0 FD | 	call	#_json_createWithPool
061a0     A8 F0 03 F6 | 	mov	ptra, fp
061a4     B3 00 A0 FD | 	call	#popregs_
061a8                 | _json_create_ret
061a8     2D 00 64 FD | 	ret
061ac                 | 
061ac                 | _json_getProperty
061ac     02 4C 05 F6 | 	mov	COUNT_, #2
061b0     A9 00 A0 FD | 	call	#pushregs_
061b4     3A 8D 02 F6 | 	mov	local01, arg01
061b8     3B 8F 02 F6 | 	mov	local02, arg02
061bc                 | '     for (sibling = obj->u.c.child; sibling; sibling = sibling->sibling)
061bc     08 8C 06 F1 | 	add	local01, #8
061c0     46 8D 0A FB | 	rdlong	local01, local01 wz
061c4     38 00 90 AD |  if_e	jmp	#LR__0224
061c8                 | LR__0222
061c8     04 8C 06 F1 | 	add	local01, #4
061cc     46 35 0A FB | 	rdlong	result1, local01 wz
061d0     04 8C 86 F1 | 	sub	local01, #4
061d4     20 00 90 AD |  if_e	jmp	#LR__0223
061d8     04 8C 06 F1 | 	add	local01, #4
061dc     46 75 02 FB | 	rdlong	arg01, local01
061e0     04 8C 86 F1 | 	sub	local01, #4
061e4     47 77 02 F6 | 	mov	arg02, local02
061e8     B0 FD BF FD | 	call	#_strcmp
061ec     00 34 0E F2 | 	cmp	result1, #0 wz
061f0                 | '             return sibling;
061f0     46 35 02 A6 |  if_e	mov	result1, local01
061f4     0C 00 90 AD |  if_e	jmp	#LR__0225
061f8                 | LR__0223
061f8     46 8D 0A FB | 	rdlong	local01, local01 wz
061fc     C8 FF 9F 5D |  if_ne	jmp	#LR__0222
06200                 | LR__0224
06200                 | '     return 0;
06200     00 34 06 F6 | 	mov	result1, #0
06204                 | LR__0225
06204     A8 F0 03 F6 | 	mov	ptra, fp
06208     B3 00 A0 FD | 	call	#popregs_
0620c                 | _json_getProperty_ret
0620c     2D 00 64 FD | 	ret
06210                 | 
06210                 | _json_createWithPool
06210     06 4C 05 F6 | 	mov	COUNT_, #6
06214     A9 00 A0 FD | 	call	#pushregs_
06218     3B 8D 02 F6 | 	mov	local01, arg02
0621c                 | ' {
0621c                 | '     return goWhile(str, " \n\r\t\f");
0621c     52 01 00 FF 
06220     C7 77 06 F6 | 	mov	arg02, ##@LR__2251
06224     10 28 B1 FD | 	call	#_goWhile
06228     1A 8F 0A F6 | 	mov	local02, result1 wz
0622c     18 00 90 AD |  if_e	jmp	#LR__0226
06230     47 75 C2 FA | 	rdbyte	arg01, local02
06234     7B 74 0E F2 | 	cmp	arg01, #123 wz
06238     20 00 90 AD |  if_e	jmp	#LR__0227
0623c     47 75 C2 FA | 	rdbyte	arg01, local02
06240     5B 74 0E F2 | 	cmp	arg01, #91 wz
06244     14 00 90 AD |  if_e	jmp	#LR__0227
06248                 | LR__0226
06248     47 01 00 FF 
0624c     A7 75 06 F6 | 	mov	arg01, ##@LR__1826
06250     94 BA BF FD | 	call	#_printf
06254                 | '     {
06254                 | '         printf("Error: json_createWithPool: invalid json string(missing opening {/[.\n");
06254                 | '         return 0;
06254     00 34 06 F6 | 	mov	result1, #0
06258     74 00 90 FD | 	jmp	#LR__0229
0625c                 | LR__0227
0625c     46 75 02 FB | 	rdlong	arg01, local01
06260     3A 91 02 FB | 	rdlong	local03, arg01
06264     04 74 06 F1 | 	add	arg01, #4
06268     3A 93 02 FB | 	rdlong	local04, arg01
0626c     46 75 02 F6 | 	mov	arg01, local01
06270     C9 94 02 F6 | 	mov	local05, objptr
06274     48 93 01 F6 | 	mov	objptr, local03
06278     2D 92 62 FD | 	call	local04
0627c     4A 93 01 F6 | 	mov	objptr, local05
06280     1A 97 02 F6 | 	mov	local06, result1
06284     04 96 06 F1 | 	add	local06, #4
06288     4B 01 68 FC | 	wrlong	#0, local06
0628c     04 96 86 F1 | 	sub	local06, #4
06290     4B 01 68 FC | 	wrlong	#0, local06
06294     08 96 06 F1 | 	add	local06, #8
06298     4B 01 68 FC | 	wrlong	#0, local06
0629c     08 96 86 F1 | 	sub	local06, #8
062a0     46 79 02 F6 | 	mov	arg03, local01
062a4     47 75 02 F6 | 	mov	arg01, local02
062a8     4B 77 02 F6 | 	mov	arg02, local06
062ac     78 2E B1 FD | 	call	#_objValue
062b0     00 34 0E F2 | 	cmp	result1, #0 wz
062b4     14 00 90 5D |  if_ne	jmp	#LR__0228
062b8     47 01 00 FF 
062bc     ED 75 06 F6 | 	mov	arg01, ##@LR__1827
062c0     24 BA BF FD | 	call	#_printf
062c4                 | '     {
062c4                 | '         printf("Error: json_createWithPool: invalid json string.\n");
062c4                 | '         return 0;
062c4     00 34 06 F6 | 	mov	result1, #0
062c8     04 00 90 FD | 	jmp	#LR__0229
062cc                 | LR__0228
062cc                 | '     }
062cc                 | '     return obj;
062cc     4B 35 02 F6 | 	mov	result1, local06
062d0                 | LR__0229
062d0     A8 F0 03 F6 | 	mov	ptra, fp
062d4     B3 00 A0 FD | 	call	#popregs_
062d8                 | _json_createWithPool_ret
062d8     2D 00 64 FD | 	ret
062dc                 | 
062dc                 | _motion_quartet_init
062dc     01 4C 05 F6 | 	mov	COUNT_, #1
062e0     A9 00 A0 FD | 	call	#pushregs_
062e4     3A 8D 02 F6 | 	mov	local01, arg01
062e8     48 01 00 FF 
062ec     1F 76 06 F6 | 	mov	arg02, ##@LR__1828
062f0     46 75 02 F6 | 	mov	arg01, local01
062f4     A0 EF B1 FD | 	call	#__system____builtin_strcpy
062f8     34 8C 06 F1 | 	add	local01, #52
062fc     46 01 68 FC | 	wrlong	#0, local01
06300     34 8C 86 F1 | 	sub	local01, #52
06304     00 76 06 F6 | 	mov	arg02, #0
06308     1C 9D 9F FE | 	loc	pa,	#(@LR__0231-@LR__0230)
0630c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
06310                 | ' {
06310                 | '     __builtin_strcpy(quartet->name, "") ;
06310                 | '     quartet->function = 0;
06310                 | '     for (int i = 0; i <  10 ; i++)
06310                 | LR__0230
06310     0A 76 56 F2 | 	cmps	arg02, #10 wc
06314     20 00 90 3D |  if_ae	jmp	#LR__0232
06318     3B 75 02 F6 | 	mov	arg01, arg02
0631c     02 74 66 F0 | 	shl	arg01, #2
06320     38 8C 06 F1 | 	add	local01, #56
06324     46 75 02 F1 | 	add	arg01, local01
06328     3A 01 68 FC | 	wrlong	#0, arg01
0632c     01 76 06 F1 | 	add	arg02, #1
06330     38 8C 86 F1 | 	sub	local01, #56
06334     D8 FF 9F FD | 	jmp	#LR__0230
06338                 | LR__0231
06338                 | LR__0232
06338     60 8C 06 F1 | 	add	local01, #96
0633c     46 01 68 FC | 	wrlong	#0, local01
06340     A8 F0 03 F6 | 	mov	ptra, fp
06344     B3 00 A0 FD | 	call	#popregs_
06348                 | _motion_quartet_init_ret
06348     2D 00 64 FD | 	ret
0634c                 | 
0634c                 | _motion_set_init
0634c     02 4C 05 F6 | 	mov	COUNT_, #2
06350     A9 00 A0 FD | 	call	#pushregs_
06354     3A 8D 02 F6 | 	mov	local01, arg01
06358     48 01 00 FF 
0635c     21 76 06 F6 | 	mov	arg02, ##@LR__1829
06360     46 75 02 F6 | 	mov	arg01, local01
06364     30 EF B1 FD | 	call	#__system____builtin_strcpy
06368     34 8C 06 F1 | 	add	local01, #52
0636c     46 01 68 FC | 	wrlong	#0, local01
06370     04 8C 06 F1 | 	add	local01, #4
06374     46 75 02 F6 | 	mov	arg01, local01
06378     48 01 00 FF 
0637c     23 76 06 F6 | 	mov	arg02, ##@LR__1830
06380     14 EF B1 FD | 	call	#__system____builtin_strcpy
06384     0C 8C 06 F1 | 	add	local01, #12
06388     46 01 68 FC | 	wrlong	#0, local01
0638c     04 8C 06 F1 | 	add	local01, #4
06390     46 01 68 FC | 	wrlong	#0, local01
06394     48 8C 86 F1 | 	sub	local01, #72
06398     00 8E 06 F6 | 	mov	local02, #0
0639c                 | ' {
0639c                 | '     __builtin_strcpy(set->name, "") ;
0639c                 | '     set->number = 0;
0639c                 | '     __builtin_strcpy(set->type, "") ;
0639c                 | '     set->executions = 0;
0639c                 | '     set->quartetCount = 0;
0639c                 | '     for (int i = 0; i <  10 ; i++)
0639c                 | LR__0233
0639c     0A 8E 56 F2 | 	cmps	local02, #10 wc
063a0     20 00 90 3D |  if_ae	jmp	#LR__0234
063a4     64 8E 06 FD | 	qmul	local02, #100
063a8     4C 8C 06 F1 | 	add	local01, #76
063ac     18 74 62 FD | 	getqx	arg01
063b0     46 75 02 F1 | 	add	arg01, local01
063b4     24 FF BF FD | 	call	#_motion_quartet_init
063b8     01 8E 06 F1 | 	add	local02, #1
063bc     4C 8C 86 F1 | 	sub	local01, #76
063c0     D8 FF 9F FD | 	jmp	#LR__0233
063c4                 | LR__0234
063c4     A8 F0 03 F6 | 	mov	ptra, fp
063c8     B3 00 A0 FD | 	call	#popregs_
063cc                 | _motion_set_init_ret
063cc     2D 00 64 FD | 	ret
063d0                 | 
063d0                 | _motion_profile_init
063d0     02 4C 05 F6 | 	mov	COUNT_, #2
063d4     A9 00 A0 FD | 	call	#pushregs_
063d8     3A 8D 02 F6 | 	mov	local01, arg01
063dc     48 01 00 FF 
063e0     25 76 06 F6 | 	mov	arg02, ##@LR__1831
063e4     46 75 02 F6 | 	mov	arg01, local01
063e8     AC EE B1 FD | 	call	#__system____builtin_strcpy
063ec     34 8C 06 F1 | 	add	local01, #52
063f0     46 01 68 FC | 	wrlong	#0, local01
063f4     04 8C 06 F1 | 	add	local01, #4
063f8     46 01 68 FC | 	wrlong	#0, local01
063fc     38 8C 86 F1 | 	sub	local01, #56
06400     00 8E 06 F6 | 	mov	local02, #0
06404                 | ' {
06404                 | '     __builtin_strcpy(profile->name, "") ;
06404                 | '     profile->number = 0;
06404                 | '     profile->setCount = 0;
06404                 | '     for (int i = 0; i <  15 ; i++)
06404                 | LR__0235
06404     0F 8E 56 F2 | 	cmps	local02, #15 wc
06408     24 00 90 3D |  if_ae	jmp	#LR__0236
0640c     02 00 00 FF 
06410     34 8E 06 FD | 	qmul	local02, ##1076
06414     3C 8C 06 F1 | 	add	local01, #60
06418     18 74 62 FD | 	getqx	arg01
0641c     46 75 02 F1 | 	add	arg01, local01
06420     28 FF BF FD | 	call	#_motion_set_init
06424     01 8E 06 F1 | 	add	local02, #1
06428     3C 8C 86 F1 | 	sub	local01, #60
0642c     D4 FF 9F FD | 	jmp	#LR__0235
06430                 | LR__0236
06430     A8 F0 03 F6 | 	mov	ptra, fp
06434     B3 00 A0 FD | 	call	#popregs_
06438                 | _motion_profile_init_ret
06438     2D 00 64 FD | 	ret
0643c                 | 
0643c                 | _machine_profile_to_json
0643c     03 4C 05 F6 | 	mov	COUNT_, #3
06440     A9 00 A0 FD | 	call	#pushregs_
06444     3A 8D 02 F6 | 	mov	local01, arg01
06448     3B 8F 02 F6 | 	mov	local02, arg02
0644c     48 01 00 FF 
06450     27 76 06 F6 | 	mov	arg02, ##@LR__1832
06454     47 75 02 F6 | 	mov	arg01, local02
06458     98 B9 BF FD | 	call	#_fopen
0645c     1A 91 0A F6 | 	mov	local03, result1 wz
06460     58 00 90 5D |  if_ne	jmp	#LR__0237
06464     00 74 06 F6 | 	mov	arg01, #0
06468     DC 26 B2 FD | 	call	#__system___getiolock_1205
0646c     1A 75 02 F6 | 	mov	arg01, result1
06470     AC EE B1 FD | 	call	#__system___lockmem
06474     48 01 00 FF 
06478     29 76 06 F6 | 	mov	arg02, ##@LR__1833
0647c     00 74 06 F6 | 	mov	arg01, #0
06480     00 78 06 F6 | 	mov	arg03, #0
06484     2C F4 B1 FD | 	call	#__system___basic_print_string
06488     00 74 06 F6 | 	mov	arg01, #0
0648c     47 77 02 F6 | 	mov	arg02, local02
06490     00 78 06 F6 | 	mov	arg03, #0
06494     1C F4 B1 FD | 	call	#__system___basic_print_string
06498     00 74 06 F6 | 	mov	arg01, #0
0649c     0A 76 06 F6 | 	mov	arg02, #10
064a0     00 78 06 F6 | 	mov	arg03, #0
064a4     C0 F3 B1 FD | 	call	#__system___basic_print_char
064a8     00 74 06 F6 | 	mov	arg01, #0
064ac     98 26 B2 FD | 	call	#__system___getiolock_1205
064b0     1A 01 68 FC | 	wrlong	#0, result1
064b4                 | '         return JSON_FILE_ERROR;
064b4     C9 34 06 F6 | 	mov	result1, #201
064b8     F8 00 90 FD | 	jmp	#LR__0238
064bc                 | LR__0237
064bc     48 01 00 FF 
064c0     3D 76 06 F6 | 	mov	arg02, ##@LR__1834
064c4     48 75 02 F6 | 	mov	arg01, local03
064c8     A0 B8 BF FD | 	call	#_fprintf
064cc     48 01 00 FF 
064d0     3F 76 06 F6 | 	mov	arg02, ##@LR__1835
064d4     48 75 02 F6 | 	mov	arg01, local03
064d8     46 79 02 F6 | 	mov	arg03, local01
064dc     D8 CD B0 FD | 	call	#_string_to_json_0642
064e0     00 74 06 F6 | 	mov	arg01, #0
064e4     60 26 B2 FD | 	call	#__system___getiolock_1205
064e8     1A 75 02 F6 | 	mov	arg01, result1
064ec     30 EE B1 FD | 	call	#__system___lockmem
064f0     48 01 00 FF 
064f4     44 76 06 F6 | 	mov	arg02, ##@LR__1836
064f8     00 74 06 F6 | 	mov	arg01, #0
064fc     00 78 06 F6 | 	mov	arg03, #0
06500     B0 F3 B1 FD | 	call	#__system___basic_print_string
06504     00 74 06 F6 | 	mov	arg01, #0
06508     46 77 02 F6 | 	mov	arg02, local01
0650c     00 78 06 F6 | 	mov	arg03, #0
06510     A0 F3 B1 FD | 	call	#__system___basic_print_string
06514     00 74 06 F6 | 	mov	arg01, #0
06518     0A 76 06 F6 | 	mov	arg02, #10
0651c     00 78 06 F6 | 	mov	arg03, #0
06520     44 F3 B1 FD | 	call	#__system___basic_print_char
06524     00 74 06 F6 | 	mov	arg01, #0
06528     1C 26 B2 FD | 	call	#__system___getiolock_1205
0652c     1A 01 68 FC | 	wrlong	#0, result1
06530     48 01 00 FF 
06534     53 76 06 F6 | 	mov	arg02, ##@LR__1837
06538     48 75 02 F6 | 	mov	arg01, local03
0653c     2C B8 BF FD | 	call	#_fprintf
06540     48 01 00 FF 
06544     55 76 06 F6 | 	mov	arg02, ##@LR__1838
06548     14 8C 06 F1 | 	add	local01, #20
0654c     46 79 02 FB | 	rdlong	arg03, local01
06550     48 75 02 F6 | 	mov	arg01, local03
06554     24 CD B0 FD | 	call	#_int_to_json_0641
06558     48 01 00 FF 
0655c     5C 76 06 F6 | 	mov	arg02, ##@LR__1839
06560     48 75 02 F6 | 	mov	arg01, local03
06564     04 B8 BF FD | 	call	#_fprintf
06568     04 8C 06 F1 | 	add	local01, #4
0656c     46 77 02 F6 | 	mov	arg02, local01
06570     48 75 02 F6 | 	mov	arg01, local03
06574     68 D2 B0 FD | 	call	#_machine_configuration_to_json_0660
06578     48 01 00 FF 
0657c     5E 76 06 F6 | 	mov	arg02, ##@LR__1840
06580     48 75 02 F6 | 	mov	arg01, local03
06584     E4 B7 BF FD | 	call	#_fprintf
06588     64 8C 06 F1 | 	add	local01, #100
0658c     48 75 02 F6 | 	mov	arg01, local03
06590     46 77 02 F6 | 	mov	arg02, local01
06594     78 D4 B0 FD | 	call	#_machine_performance_to_json_0661
06598     48 01 00 FF 
0659c     60 76 06 F6 | 	mov	arg02, ##@LR__1841
065a0     48 75 02 F6 | 	mov	arg01, local03
065a4     C4 B7 BF FD | 	call	#_fprintf
065a8     48 75 02 F6 | 	mov	arg01, local03
065ac                 | ' {
065ac                 | '     return _closeraw(f);
065ac     4C AA BF FD | 	call	#__closeraw
065b0                 | '     fprintf(file, ",");
065b0                 | ' 
065b0                 | '     int_to_json(file, "Number", settings->number);
065b0                 | '     fprintf(file, ",");
065b0                 | ' 
065b0                 | '     machine_configuration_to_json(file, &(settings->configuration));
065b0                 | '     fprintf(file, ",");
065b0                 | ' 
065b0                 | '     machine_performance_to_json(file, &(settings->performance));
065b0                 | '     fprintf(file, "}");
065b0                 | '     fclose(file);
065b0                 | '     return SUCCESS;
065b0     00 34 06 F6 | 	mov	result1, #0
065b4                 | LR__0238
065b4     A8 F0 03 F6 | 	mov	ptra, fp
065b8     B3 00 A0 FD | 	call	#popregs_
065bc                 | _machine_profile_to_json_ret
065bc     2D 00 64 FD | 	ret
065c0                 | 
065c0                 | _test_profile_to_json
065c0     03 4C 05 F6 | 	mov	COUNT_, #3
065c4     A9 00 A0 FD | 	call	#pushregs_
065c8     3A 8D 02 F6 | 	mov	local01, arg01
065cc     3B 8F 02 F6 | 	mov	local02, arg02
065d0     48 01 00 FF 
065d4     62 76 06 F6 | 	mov	arg02, ##@LR__1842
065d8     47 75 02 F6 | 	mov	arg01, local02
065dc     14 B8 BF FD | 	call	#_fopen
065e0     1A 91 0A F6 | 	mov	local03, result1 wz
065e4     58 00 90 5D |  if_ne	jmp	#LR__0239
065e8     00 74 06 F6 | 	mov	arg01, #0
065ec     58 25 B2 FD | 	call	#__system___getiolock_1205
065f0     1A 75 02 F6 | 	mov	arg01, result1
065f4     28 ED B1 FD | 	call	#__system___lockmem
065f8     48 01 00 FF 
065fc     64 76 06 F6 | 	mov	arg02, ##@LR__1843
06600     00 74 06 F6 | 	mov	arg01, #0
06604     00 78 06 F6 | 	mov	arg03, #0
06608     A8 F2 B1 FD | 	call	#__system___basic_print_string
0660c     00 74 06 F6 | 	mov	arg01, #0
06610     47 77 02 F6 | 	mov	arg02, local02
06614     00 78 06 F6 | 	mov	arg03, #0
06618     98 F2 B1 FD | 	call	#__system___basic_print_string
0661c     00 74 06 F6 | 	mov	arg01, #0
06620     0A 76 06 F6 | 	mov	arg02, #10
06624     00 78 06 F6 | 	mov	arg03, #0
06628     3C F2 B1 FD | 	call	#__system___basic_print_char
0662c     00 74 06 F6 | 	mov	arg01, #0
06630     14 25 B2 FD | 	call	#__system___getiolock_1205
06634     1A 01 68 FC | 	wrlong	#0, result1
06638                 | '         return JSON_FILE_ERROR;
06638     C9 34 06 F6 | 	mov	result1, #201
0663c     FC 00 90 FD | 	jmp	#LR__0240
06640                 | LR__0239
06640     48 01 00 FF 
06644     79 76 06 F6 | 	mov	arg02, ##@LR__1844
06648     48 75 02 F6 | 	mov	arg01, local03
0664c     1C B7 BF FD | 	call	#_fprintf
06650     48 01 00 FF 
06654     7B 76 06 F6 | 	mov	arg02, ##@LR__1845
06658     46 79 02 FB | 	rdlong	arg03, local01
0665c     48 75 02 F6 | 	mov	arg01, local03
06660     54 CC B0 FD | 	call	#_string_to_json_0642
06664     48 01 00 FF 
06668     80 76 06 F6 | 	mov	arg02, ##@LR__1846
0666c     04 8C 06 F1 | 	add	local01, #4
06670     46 79 02 FB | 	rdlong	arg03, local01
06674     48 75 02 F6 | 	mov	arg01, local03
06678     00 CC B0 FD | 	call	#_int_to_json_0641
0667c     48 01 00 FF 
06680     95 76 06 F6 | 	mov	arg02, ##@LR__1847
06684     48 75 02 F6 | 	mov	arg01, local03
06688     E0 B6 BF FD | 	call	#_fprintf
0668c     48 01 00 FF 
06690     97 76 06 F6 | 	mov	arg02, ##@LR__1848
06694     04 8C 06 F1 | 	add	local01, #4
06698     46 79 02 FB | 	rdlong	arg03, local01
0669c     48 75 02 F6 | 	mov	arg01, local03
066a0     14 CC B0 FD | 	call	#_string_to_json_0642
066a4     48 01 00 FF 
066a8     AC 76 06 F6 | 	mov	arg02, ##@LR__1849
066ac     48 75 02 F6 | 	mov	arg01, local03
066b0     B8 B6 BF FD | 	call	#_fprintf
066b4     48 01 00 FF 
066b8     AE 76 06 F6 | 	mov	arg02, ##@LR__1850
066bc     04 8C 06 F1 | 	add	local01, #4
066c0     46 8F 02 FB | 	rdlong	local02, local01
066c4     47 79 02 FB | 	rdlong	arg03, local02
066c8     48 75 02 F6 | 	mov	arg01, local03
066cc     E8 CB B0 FD | 	call	#_string_to_json_0642
066d0     48 01 00 FF 
066d4     C2 76 06 F6 | 	mov	arg02, ##@LR__1851
066d8     48 75 02 F6 | 	mov	arg01, local03
066dc     8C B6 BF FD | 	call	#_fprintf
066e0     46 8F 02 FB | 	rdlong	local02, local01
066e4     48 01 00 FF 
066e8     C4 76 06 F6 | 	mov	arg02, ##@LR__1852
066ec     47 79 02 FB | 	rdlong	arg03, local02
066f0     48 75 02 F6 | 	mov	arg01, local03
066f4     C0 CB B0 FD | 	call	#_string_to_json_0642
066f8     48 01 00 FF 
066fc     D8 76 06 F6 | 	mov	arg02, ##@LR__1853
06700     48 75 02 F6 | 	mov	arg01, local03
06704     64 B6 BF FD | 	call	#_fprintf
06708     48 01 00 FF 
0670c     DA 76 06 F6 | 	mov	arg02, ##@LR__1854
06710     08 8C 06 F1 | 	add	local01, #8
06714     46 79 02 FB | 	rdlong	arg03, local01
06718     48 75 02 F6 | 	mov	arg01, local03
0671c     98 CB B0 FD | 	call	#_string_to_json_0642
06720     48 01 00 FF 
06724     E2 76 06 F6 | 	mov	arg02, ##@LR__1855
06728     48 75 02 F6 | 	mov	arg01, local03
0672c     3C B6 BF FD | 	call	#_fprintf
06730     48 75 02 F6 | 	mov	arg01, local03
06734                 | ' {
06734                 | '     return _closeraw(f);
06734     C4 A8 BF FD | 	call	#__closeraw
06738                 | '     }
06738                 | ' 
06738                 | '     fprintf(file, "{");
06738                 | '     string_to_json(file, "Name", test->name);
06738                 | ' 
06738                 | '     int_to_json(file, "Sample Serial Number", test->sampleSN);
06738                 | '     fprintf(file, ",");
06738                 | ' 
06738                 | '     string_to_json(file, "Machine Profile Name", test->machineProfile->name);
06738                 | '     fprintf(file, ",");
06738                 | ' 
06738                 | '     string_to_json(file, "Sample Profile Name", test->sampleProfile->name);
06738                 | '     fprintf(file, ",");
06738                 | ' 
06738                 | '     string_to_json(file, "Motion Profile Name", test->sampleProfile->name);
06738                 | '     fprintf(file, ",");
06738                 | ' 
06738                 | '     string_to_json(file, "Comment", test->comment);
06738                 | '     fprintf(file, "}");
06738                 | '     fclose(file);
06738                 | '     return SUCCESS;
06738     00 34 06 F6 | 	mov	result1, #0
0673c                 | LR__0240
0673c     A8 F0 03 F6 | 	mov	ptra, fp
06740     B3 00 A0 FD | 	call	#popregs_
06744                 | _test_profile_to_json_ret
06744     2D 00 64 FD | 	ret
06748                 | 
06748                 | _motion_profile_to_json
06748     04 4C 05 F6 | 	mov	COUNT_, #4
0674c     A9 00 A0 FD | 	call	#pushregs_
06750     3A 8D 02 F6 | 	mov	local01, arg01
06754     3B 8F 02 F6 | 	mov	local02, arg02
06758     48 01 00 FF 
0675c     E4 76 06 F6 | 	mov	arg02, ##@LR__1856
06760     47 75 02 F6 | 	mov	arg01, local02
06764     8C B6 BF FD | 	call	#_fopen
06768     1A 91 0A F6 | 	mov	local03, result1 wz
0676c     58 00 90 5D |  if_ne	jmp	#LR__0241
06770     00 74 06 F6 | 	mov	arg01, #0
06774     D0 23 B2 FD | 	call	#__system___getiolock_1205
06778     1A 75 02 F6 | 	mov	arg01, result1
0677c     A0 EB B1 FD | 	call	#__system___lockmem
06780     48 01 00 FF 
06784     E6 76 06 F6 | 	mov	arg02, ##@LR__1857
06788     00 74 06 F6 | 	mov	arg01, #0
0678c     00 78 06 F6 | 	mov	arg03, #0
06790     20 F1 B1 FD | 	call	#__system___basic_print_string
06794     00 74 06 F6 | 	mov	arg01, #0
06798     47 77 02 F6 | 	mov	arg02, local02
0679c     00 78 06 F6 | 	mov	arg03, #0
067a0     10 F1 B1 FD | 	call	#__system___basic_print_string
067a4     00 74 06 F6 | 	mov	arg01, #0
067a8     0A 76 06 F6 | 	mov	arg02, #10
067ac     00 78 06 F6 | 	mov	arg03, #0
067b0     B4 F0 B1 FD | 	call	#__system___basic_print_char
067b4     00 74 06 F6 | 	mov	arg01, #0
067b8     8C 23 B2 FD | 	call	#__system___getiolock_1205
067bc     1A 01 68 FC | 	wrlong	#0, result1
067c0                 | '         return JSON_FILE_ERROR;
067c0     C9 34 06 F6 | 	mov	result1, #201
067c4     5C 01 90 FD | 	jmp	#LR__0244
067c8                 | LR__0241
067c8     48 01 00 FF 
067cc     FB 76 06 F6 | 	mov	arg02, ##@LR__1858
067d0     48 75 02 F6 | 	mov	arg01, local03
067d4     94 B5 BF FD | 	call	#_fprintf
067d8     48 01 00 FF 
067dc     FD 76 06 F6 | 	mov	arg02, ##@LR__1859
067e0     48 75 02 F6 | 	mov	arg01, local03
067e4     46 79 02 F6 | 	mov	arg03, local01
067e8     CC CA B0 FD | 	call	#_string_to_json_0642
067ec     48 01 00 FF 
067f0     02 77 06 F6 | 	mov	arg02, ##@LR__1860
067f4     48 75 02 F6 | 	mov	arg01, local03
067f8     70 B5 BF FD | 	call	#_fprintf
067fc     48 01 00 FF 
06800     04 77 06 F6 | 	mov	arg02, ##@LR__1861
06804     34 8C 06 F1 | 	add	local01, #52
06808     46 79 02 FB | 	rdlong	arg03, local01
0680c     34 8C 86 F1 | 	sub	local01, #52
06810     48 75 02 F6 | 	mov	arg01, local03
06814     64 CA B0 FD | 	call	#_int_to_json_0641
06818     48 01 00 FF 
0681c     0B 77 06 F6 | 	mov	arg02, ##@LR__1862
06820     48 75 02 F6 | 	mov	arg01, local03
06824     44 B5 BF FD | 	call	#_fprintf
06828     48 75 02 F6 | 	mov	arg01, local03
0682c     48 01 00 FF 
06830     0D 77 06 F6 | 	mov	arg02, ##@LR__1863
06834     34 B5 BF FD | 	call	#_fprintf
06838     00 92 06 F6 | 	mov	local04, #0
0683c                 | '     }
0683c                 | ' 
0683c                 | '     fprintf(file, "{");
0683c                 | ' 
0683c                 | '     string_to_json(file, "Name", motion->name);
0683c                 | '     fprintf(file, ",");
0683c                 | ' 
0683c                 | '     int_to_json(file, "Number", motion->number);
0683c                 | '     fprintf(file, ",");
0683c                 | ' 
0683c                 | '     fprintf(file, "\"Motion Sets\":[");
0683c                 | '     for (int i = 0; i < motion->setCount; i++)
0683c                 | LR__0242
0683c     38 8C 06 F1 | 	add	local01, #56
06840     46 75 02 FB | 	rdlong	arg01, local01
06844     38 8C 86 F1 | 	sub	local01, #56
06848     3A 93 52 F2 | 	cmps	local04, arg01 wc
0684c     B8 00 90 3D |  if_ae	jmp	#LR__0243
06850     00 74 06 F6 | 	mov	arg01, #0
06854     F0 22 B2 FD | 	call	#__system___getiolock_1205
06858     1A 75 02 F6 | 	mov	arg01, result1
0685c     C0 EA B1 FD | 	call	#__system___lockmem
06860     48 01 00 FF 
06864     1D 77 06 F6 | 	mov	arg02, ##@LR__1864
06868     00 74 06 F6 | 	mov	arg01, #0
0686c     00 78 06 F6 | 	mov	arg03, #0
06870     40 F0 B1 FD | 	call	#__system___basic_print_string
06874     02 00 00 FF 
06878     34 92 06 FD | 	qmul	local04, ##1076
0687c     3C 8C 06 F1 | 	add	local01, #60
06880     00 74 06 F6 | 	mov	arg01, #0
06884     00 78 06 F6 | 	mov	arg03, #0
06888     18 76 62 FD | 	getqx	arg02
0688c     46 77 02 F1 | 	add	arg02, local01
06890     20 F0 B1 FD | 	call	#__system___basic_print_string
06894     00 74 06 F6 | 	mov	arg01, #0
06898     0A 76 06 F6 | 	mov	arg02, #10
0689c     00 78 06 F6 | 	mov	arg03, #0
068a0     C4 EF B1 FD | 	call	#__system___basic_print_char
068a4     00 74 06 F6 | 	mov	arg01, #0
068a8     9C 22 B2 FD | 	call	#__system___getiolock_1205
068ac     02 00 00 FF 
068b0     34 92 06 FD | 	qmul	local04, ##1076
068b4     1A 01 68 FC | 	wrlong	#0, result1
068b8     48 01 00 FF 
068bc     32 77 06 F6 | 	mov	arg02, ##@LR__1865
068c0     48 75 02 F6 | 	mov	arg01, local03
068c4     18 8E 62 FD | 	getqx	local02
068c8     46 8F 02 F1 | 	add	local02, local01
068cc     F8 79 02 F6 | 	mov	arg03, ptra
068d0     61 8F 66 FC | 	wrlong	local02, ptra++
068d4     94 B4 BF FD | 	call	#_fprintf
068d8     04 F0 87 F1 | 	sub	ptra, #4
068dc     04 8C 86 F1 | 	sub	local01, #4
068e0     46 8F 02 FB | 	rdlong	local02, local01
068e4     38 8C 86 F1 | 	sub	local01, #56
068e8     01 8E 86 F1 | 	sub	local02, #1
068ec     47 93 52 F2 | 	cmps	local04, local02 wc
068f0     48 01 00 CF 
068f4     37 77 06 C6 |  if_b	mov	arg02, ##@LR__1866
068f8     48 75 02 C6 |  if_b	mov	arg01, local03
068fc     6C B4 BF CD |  if_b	call	#_fprintf
06900     01 92 06 F1 | 	add	local04, #1
06904     34 FF 9F FD | 	jmp	#LR__0242
06908                 | LR__0243
06908     48 01 00 FF 
0690c     39 77 06 F6 | 	mov	arg02, ##@LR__1867
06910     48 75 02 F6 | 	mov	arg01, local03
06914     54 B4 BF FD | 	call	#_fprintf
06918     48 75 02 F6 | 	mov	arg01, local03
0691c                 | ' {
0691c                 | '     return _closeraw(f);
0691c     DC A6 BF FD | 	call	#__closeraw
06920                 | '         {
06920                 | '             fprintf(file, ",");
06920                 | '         }
06920                 | '     }
06920                 | '     fprintf(file, "]}");
06920                 | '     fclose(file);
06920                 | '     return SUCCESS;
06920     00 34 06 F6 | 	mov	result1, #0
06924                 | LR__0244
06924     A8 F0 03 F6 | 	mov	ptra, fp
06928     B3 00 A0 FD | 	call	#popregs_
0692c                 | _motion_profile_to_json_ret
0692c     2D 00 64 FD | 	ret
06930                 | 
06930                 | _motion_set_to_json
06930     04 4C 05 F6 | 	mov	COUNT_, #4
06934     A9 00 A0 FD | 	call	#pushregs_
06938     3A 8D 02 F6 | 	mov	local01, arg01
0693c     3B 8F 02 F6 | 	mov	local02, arg02
06940     48 01 00 FF 
06944     3C 77 06 F6 | 	mov	arg02, ##@LR__1868
06948     47 75 02 F6 | 	mov	arg01, local02
0694c     A4 B4 BF FD | 	call	#_fopen
06950     1A 91 0A F6 | 	mov	local03, result1 wz
06954     58 00 90 5D |  if_ne	jmp	#LR__0245
06958     00 74 06 F6 | 	mov	arg01, #0
0695c     E8 21 B2 FD | 	call	#__system___getiolock_1205
06960     1A 75 02 F6 | 	mov	arg01, result1
06964     B8 E9 B1 FD | 	call	#__system___lockmem
06968     48 01 00 FF 
0696c     3E 77 06 F6 | 	mov	arg02, ##@LR__1869
06970     00 74 06 F6 | 	mov	arg01, #0
06974     00 78 06 F6 | 	mov	arg03, #0
06978     38 EF B1 FD | 	call	#__system___basic_print_string
0697c     00 74 06 F6 | 	mov	arg01, #0
06980     47 77 02 F6 | 	mov	arg02, local02
06984     00 78 06 F6 | 	mov	arg03, #0
06988     28 EF B1 FD | 	call	#__system___basic_print_string
0698c     00 74 06 F6 | 	mov	arg01, #0
06990     0A 76 06 F6 | 	mov	arg02, #10
06994     00 78 06 F6 | 	mov	arg03, #0
06998     CC EE B1 FD | 	call	#__system___basic_print_char
0699c     00 74 06 F6 | 	mov	arg01, #0
069a0     A4 21 B2 FD | 	call	#__system___getiolock_1205
069a4     1A 01 68 FC | 	wrlong	#0, result1
069a8                 | '         return JSON_FILE_ERROR;
069a8     C9 34 06 F6 | 	mov	result1, #201
069ac     4C 01 90 FD | 	jmp	#LR__0248
069b0                 | LR__0245
069b0     48 01 00 FF 
069b4     53 77 06 F6 | 	mov	arg02, ##@LR__1870
069b8     48 75 02 F6 | 	mov	arg01, local03
069bc     AC B3 BF FD | 	call	#_fprintf
069c0     48 01 00 FF 
069c4     55 77 06 F6 | 	mov	arg02, ##@LR__1871
069c8     48 75 02 F6 | 	mov	arg01, local03
069cc     46 79 02 F6 | 	mov	arg03, local01
069d0     E4 C8 B0 FD | 	call	#_string_to_json_0642
069d4     48 01 00 FF 
069d8     5A 77 06 F6 | 	mov	arg02, ##@LR__1872
069dc     48 75 02 F6 | 	mov	arg01, local03
069e0     88 B3 BF FD | 	call	#_fprintf
069e4     48 01 00 FF 
069e8     5C 77 06 F6 | 	mov	arg02, ##@LR__1873
069ec     34 8C 06 F1 | 	add	local01, #52
069f0     46 79 02 FB | 	rdlong	arg03, local01
069f4     48 75 02 F6 | 	mov	arg01, local03
069f8     80 C8 B0 FD | 	call	#_int_to_json_0641
069fc     48 01 00 FF 
06a00     63 77 06 F6 | 	mov	arg02, ##@LR__1874
06a04     48 75 02 F6 | 	mov	arg01, local03
06a08     60 B3 BF FD | 	call	#_fprintf
06a0c     48 01 00 FF 
06a10     65 77 06 F6 | 	mov	arg02, ##@LR__1875
06a14     04 8C 06 F1 | 	add	local01, #4
06a18     46 79 02 F6 | 	mov	arg03, local01
06a1c     48 75 02 F6 | 	mov	arg01, local03
06a20     94 C8 B0 FD | 	call	#_string_to_json_0642
06a24     48 01 00 FF 
06a28     6A 77 06 F6 | 	mov	arg02, ##@LR__1876
06a2c     48 75 02 F6 | 	mov	arg01, local03
06a30     38 B3 BF FD | 	call	#_fprintf
06a34     48 01 00 FF 
06a38     6C 77 06 F6 | 	mov	arg02, ##@LR__1877
06a3c     0C 8C 06 F1 | 	add	local01, #12
06a40     46 79 02 FB | 	rdlong	arg03, local01
06a44     44 8C 86 F1 | 	sub	local01, #68
06a48     48 75 02 F6 | 	mov	arg01, local03
06a4c     2C C8 B0 FD | 	call	#_int_to_json_0641
06a50     48 01 00 FF 
06a54     77 77 06 F6 | 	mov	arg02, ##@LR__1878
06a58     48 75 02 F6 | 	mov	arg01, local03
06a5c     0C B3 BF FD | 	call	#_fprintf
06a60     48 75 02 F6 | 	mov	arg01, local03
06a64     48 01 00 FF 
06a68     79 77 06 F6 | 	mov	arg02, ##@LR__1879
06a6c     FC B2 BF FD | 	call	#_fprintf
06a70     00 92 06 F6 | 	mov	local04, #0
06a74                 | '     }
06a74                 | ' 
06a74                 | '     fprintf(file, "{");
06a74                 | ' 
06a74                 | '     string_to_json(file, "Name", set->name);
06a74                 | '     fprintf(file, ",");
06a74                 | ' 
06a74                 | '     int_to_json(file, "Number", set->number);
06a74                 | '     fprintf(file, ",");
06a74                 | ' 
06a74                 | '     string_to_json(file, "Type", set->type);
06a74                 | '     fprintf(file, ",");
06a74                 | ' 
06a74                 | '     int_to_json(file, "Executions", set->executions);
06a74                 | '     fprintf(file, ",");
06a74                 | ' 
06a74                 | ' 
06a74                 | '     fprintf(file, "\"Quartets\":[");
06a74                 | '     for (int i = 0; i < set->quartetCount; i++)
06a74                 | LR__0246
06a74     48 8C 06 F1 | 	add	local01, #72
06a78     46 77 02 FB | 	rdlong	arg02, local01
06a7c     48 8C 86 F1 | 	sub	local01, #72
06a80     3B 93 52 F2 | 	cmps	local04, arg02 wc
06a84     58 00 90 3D |  if_ae	jmp	#LR__0247
06a88     64 92 06 FD | 	qmul	local04, #100
06a8c     48 01 00 FF 
06a90     86 77 06 F6 | 	mov	arg02, ##@LR__1880
06a94     4C 8C 06 F1 | 	add	local01, #76
06a98     48 75 02 F6 | 	mov	arg01, local03
06a9c     18 8E 62 FD | 	getqx	local02
06aa0     46 8F 02 F1 | 	add	local02, local01
06aa4     F8 79 02 F6 | 	mov	arg03, ptra
06aa8     61 8F 66 FC | 	wrlong	local02, ptra++
06aac     BC B2 BF FD | 	call	#_fprintf
06ab0     04 F0 87 F1 | 	sub	ptra, #4
06ab4     04 8C 86 F1 | 	sub	local01, #4
06ab8     46 8F 02 FB | 	rdlong	local02, local01
06abc     48 8C 86 F1 | 	sub	local01, #72
06ac0     01 8E 86 F1 | 	sub	local02, #1
06ac4     47 93 52 F2 | 	cmps	local04, local02 wc
06ac8     48 01 00 CF 
06acc     8B 77 06 C6 |  if_b	mov	arg02, ##@LR__1881
06ad0     48 75 02 C6 |  if_b	mov	arg01, local03
06ad4     94 B2 BF CD |  if_b	call	#_fprintf
06ad8     01 92 06 F1 | 	add	local04, #1
06adc     94 FF 9F FD | 	jmp	#LR__0246
06ae0                 | LR__0247
06ae0     48 01 00 FF 
06ae4     8D 77 06 F6 | 	mov	arg02, ##@LR__1882
06ae8     48 75 02 F6 | 	mov	arg01, local03
06aec     7C B2 BF FD | 	call	#_fprintf
06af0     48 75 02 F6 | 	mov	arg01, local03
06af4                 | ' {
06af4                 | '     return _closeraw(f);
06af4     04 A5 BF FD | 	call	#__closeraw
06af8                 | '         {
06af8                 | '             fprintf(file, ",");
06af8                 | '         }
06af8                 | '     }
06af8                 | '     fprintf(file, "]}");
06af8                 | '     fclose(file);
06af8                 | '     return SUCCESS;
06af8     00 34 06 F6 | 	mov	result1, #0
06afc                 | LR__0248
06afc     A8 F0 03 F6 | 	mov	ptra, fp
06b00     B3 00 A0 FD | 	call	#popregs_
06b04                 | _motion_set_to_json_ret
06b04     2D 00 64 FD | 	ret
06b08                 | 
06b08                 | _motion_quartet_to_json
06b08     02 4C 05 F6 | 	mov	COUNT_, #2
06b0c     A9 00 A0 FD | 	call	#pushregs_
06b10     C4 F1 07 F1 | 	add	ptra, #452
06b14     04 50 05 F1 | 	add	fp, #4
06b18     A8 74 62 FC | 	wrlong	arg01, fp
06b1c     04 50 05 F1 | 	add	fp, #4
06b20     A8 76 62 FC | 	wrlong	arg02, fp
06b24     08 50 85 F1 | 	sub	fp, #8
06b28     48 01 00 FF 
06b2c     90 8D 06 F6 | 	mov	local01, ##@LR__1883
06b30     3B 75 02 F6 | 	mov	arg01, arg02
06b34     46 77 02 F6 | 	mov	arg02, local01
06b38     B8 B2 BF FD | 	call	#_fopen
06b3c     0C 50 05 F1 | 	add	fp, #12
06b40     A8 34 62 FC | 	wrlong	result1, fp
06b44     0C 50 85 F1 | 	sub	fp, #12
06b48     00 34 0E F2 | 	cmp	result1, #0 wz
06b4c     60 00 90 5D |  if_ne	jmp	#LR__0249
06b50     00 74 06 F6 | 	mov	arg01, #0
06b54     F0 1F B2 FD | 	call	#__system___getiolock_1205
06b58     1A 75 02 F6 | 	mov	arg01, result1
06b5c     C0 E7 B1 FD | 	call	#__system___lockmem
06b60     48 01 00 FF 
06b64     92 77 06 F6 | 	mov	arg02, ##@LR__1884
06b68     00 74 06 F6 | 	mov	arg01, #0
06b6c     00 78 06 F6 | 	mov	arg03, #0
06b70     40 ED B1 FD | 	call	#__system___basic_print_string
06b74     08 50 05 F1 | 	add	fp, #8
06b78     A8 76 02 FB | 	rdlong	arg02, fp
06b7c     08 50 85 F1 | 	sub	fp, #8
06b80     00 74 06 F6 | 	mov	arg01, #0
06b84     00 78 06 F6 | 	mov	arg03, #0
06b88     28 ED B1 FD | 	call	#__system___basic_print_string
06b8c     00 74 06 F6 | 	mov	arg01, #0
06b90     0A 76 06 F6 | 	mov	arg02, #10
06b94     00 78 06 F6 | 	mov	arg03, #0
06b98     CC EC B1 FD | 	call	#__system___basic_print_char
06b9c     00 74 06 F6 | 	mov	arg01, #0
06ba0     A4 1F B2 FD | 	call	#__system___getiolock_1205
06ba4     1A 01 68 FC | 	wrlong	#0, result1
06ba8                 | '         return JSON_FILE_ERROR;
06ba8     C9 34 06 F6 | 	mov	result1, #201
06bac     EC 01 90 FD | 	jmp	#LR__0252
06bb0                 | LR__0249
06bb0     0C 50 05 F1 | 	add	fp, #12
06bb4     A8 74 02 FB | 	rdlong	arg01, fp
06bb8     0C 50 85 F1 | 	sub	fp, #12
06bbc     48 01 00 FF 
06bc0     A7 77 06 F6 | 	mov	arg02, ##@LR__1885
06bc4     A4 B1 BF FD | 	call	#_fprintf
06bc8     0C 50 05 F1 | 	add	fp, #12
06bcc     A8 74 02 FB | 	rdlong	arg01, fp
06bd0     48 01 00 FF 
06bd4     A9 77 06 F6 | 	mov	arg02, ##@LR__1886
06bd8     08 50 85 F1 | 	sub	fp, #8
06bdc     A8 78 02 FB | 	rdlong	arg03, fp
06be0     04 50 85 F1 | 	sub	fp, #4
06be4     D0 C6 B0 FD | 	call	#_string_to_json_0642
06be8     0C 50 05 F1 | 	add	fp, #12
06bec     A8 74 02 FB | 	rdlong	arg01, fp
06bf0     0C 50 85 F1 | 	sub	fp, #12
06bf4     48 01 00 FF 
06bf8     AE 77 06 F6 | 	mov	arg02, ##@LR__1887
06bfc     6C B1 BF FD | 	call	#_fprintf
06c00     0C 50 05 F1 | 	add	fp, #12
06c04     A8 74 02 FB | 	rdlong	arg01, fp
06c08     48 01 00 FF 
06c0c     B0 77 06 F6 | 	mov	arg02, ##@LR__1888
06c10     08 50 85 F1 | 	sub	fp, #8
06c14     A8 78 02 FB | 	rdlong	arg03, fp
06c18     04 50 85 F1 | 	sub	fp, #4
06c1c     34 78 06 F1 | 	add	arg03, #52
06c20     3C 79 02 FB | 	rdlong	arg03, arg03
06c24     54 C6 B0 FD | 	call	#_int_to_json_0641
06c28     0C 50 05 F1 | 	add	fp, #12
06c2c     A8 74 02 FB | 	rdlong	arg01, fp
06c30     0C 50 85 F1 | 	sub	fp, #12
06c34     48 01 00 FF 
06c38     B9 77 06 F6 | 	mov	arg02, ##@LR__1889
06c3c     2C B1 BF FD | 	call	#_fprintf
06c40     10 50 05 F1 | 	add	fp, #16
06c44     A8 74 02 F6 | 	mov	arg01, fp
06c48     0C 50 85 F1 | 	sub	fp, #12
06c4c     A8 76 02 FB | 	rdlong	arg02, fp
06c50     04 50 85 F1 | 	sub	fp, #4
06c54     34 76 06 F1 | 	add	arg02, #52
06c58     3B 77 02 FB | 	rdlong	arg02, arg02
06c5c     44 8C B0 FD | 	call	#_get_function_info
06c60     0C 50 05 F1 | 	add	fp, #12
06c64     A8 74 02 FB | 	rdlong	arg01, fp
06c68     0C 50 85 F1 | 	sub	fp, #12
06c6c     48 01 00 FF 
06c70     BB 77 06 F6 | 	mov	arg02, ##@LR__1890
06c74     F4 B0 BF FD | 	call	#_fprintf
06c78     C0 51 05 F1 | 	add	fp, #448
06c7c     A8 00 68 FC | 	wrlong	#0, fp
06c80     C0 51 85 F1 | 	sub	fp, #448
06c84                 | '     }
06c84                 | '     fprintf(file, "{");
06c84                 | '     string_to_json(file, "Name", quartet->name);
06c84                 | '     fprintf(file, ",");
06c84                 | ' 
06c84                 | '     int_to_json(file, "Function", quartet->function);
06c84                 | '     fprintf(file, ",");
06c84                 | ' 
06c84                 | '     FunctionInfo info;
06c84                 | '     get_function_info(&info, quartet->function);
06c84                 | '     fprintf(file, "\"Parameters\":[");
06c84                 | '     for (int i = 0; i < info.args_count; i++)
06c84                 | LR__0250
06c84     C0 51 05 F1 | 	add	fp, #448
06c88     A8 76 02 FB | 	rdlong	arg02, fp
06c8c     94 51 85 F1 | 	sub	fp, #404
06c90     A8 74 02 FB | 	rdlong	arg01, fp
06c94     2C 50 85 F1 | 	sub	fp, #44
06c98     3A 77 52 F2 | 	cmps	arg02, arg01 wc
06c9c     90 00 90 3D |  if_ae	jmp	#LR__0251
06ca0     0C 50 05 F1 | 	add	fp, #12
06ca4     A8 74 02 FB | 	rdlong	arg01, fp
06ca8     48 01 00 FF 
06cac     CA 77 06 F6 | 	mov	arg02, ##@LR__1891
06cb0     08 50 85 F1 | 	sub	fp, #8
06cb4     A8 8C 02 FB | 	rdlong	local01, fp
06cb8     BC 51 05 F1 | 	add	fp, #444
06cbc     A8 78 02 FB | 	rdlong	arg03, fp
06cc0     C0 51 85 F1 | 	sub	fp, #448
06cc4     02 78 66 F0 | 	shl	arg03, #2
06cc8     38 8C 06 F1 | 	add	local01, #56
06ccc     46 79 02 F1 | 	add	arg03, local01
06cd0     3C 8D 02 FB | 	rdlong	local01, arg03
06cd4     F8 79 02 F6 | 	mov	arg03, ptra
06cd8     61 8D 66 FC | 	wrlong	local01, ptra++
06cdc     8C B0 BF FD | 	call	#_fprintf
06ce0     04 F0 87 F1 | 	sub	ptra, #4
06ce4     2C 50 05 F1 | 	add	fp, #44
06ce8     A8 8C 02 FB | 	rdlong	local01, fp
06cec     01 8C 86 F1 | 	sub	local01, #1
06cf0     94 51 05 F1 | 	add	fp, #404
06cf4     A8 8E 02 FB | 	rdlong	local02, fp
06cf8     C0 51 85 F1 | 	sub	fp, #448
06cfc     46 8F 52 F2 | 	cmps	local02, local01 wc
06d00     0C 50 05 C1 |  if_b	add	fp, #12
06d04     A8 74 02 CB |  if_b	rdlong	arg01, fp
06d08     0C 50 85 C1 |  if_b	sub	fp, #12
06d0c     48 01 00 CF 
06d10     CD 77 06 C6 |  if_b	mov	arg02, ##@LR__1892
06d14     54 B0 BF CD |  if_b	call	#_fprintf
06d18     C0 51 05 F1 | 	add	fp, #448
06d1c     A8 8E 02 FB | 	rdlong	local02, fp
06d20     01 8E 06 F1 | 	add	local02, #1
06d24     A8 8E 62 FC | 	wrlong	local02, fp
06d28     C0 51 85 F1 | 	sub	fp, #448
06d2c     54 FF 9F FD | 	jmp	#LR__0250
06d30                 | LR__0251
06d30     0C 50 05 F1 | 	add	fp, #12
06d34     A8 74 02 FB | 	rdlong	arg01, fp
06d38     0C 50 85 F1 | 	sub	fp, #12
06d3c     48 01 00 FF 
06d40     CF 77 06 F6 | 	mov	arg02, ##@LR__1893
06d44     24 B0 BF FD | 	call	#_fprintf
06d48     0C 50 05 F1 | 	add	fp, #12
06d4c     A8 74 02 FB | 	rdlong	arg01, fp
06d50     48 01 00 FF 
06d54     D2 77 06 F6 | 	mov	arg02, ##@LR__1894
06d58     08 50 85 F1 | 	sub	fp, #8
06d5c     A8 8E 02 FB | 	rdlong	local02, fp
06d60     04 50 85 F1 | 	sub	fp, #4
06d64     60 8E 06 F1 | 	add	local02, #96
06d68     47 79 02 FB | 	rdlong	arg03, local02
06d6c     D0 C4 B0 FD | 	call	#_double_to_json_0640
06d70     0C 50 05 F1 | 	add	fp, #12
06d74     A8 74 02 FB | 	rdlong	arg01, fp
06d78     0C 50 85 F1 | 	sub	fp, #12
06d7c     48 01 00 FF 
06d80     D8 77 06 F6 | 	mov	arg02, ##@LR__1895
06d84     E4 AF BF FD | 	call	#_fprintf
06d88     0C 50 05 F1 | 	add	fp, #12
06d8c     A8 74 02 FB | 	rdlong	arg01, fp
06d90     0C 50 85 F1 | 	sub	fp, #12
06d94                 | ' {
06d94                 | '     return _closeraw(f);
06d94     64 A2 BF FD | 	call	#__closeraw
06d98                 | '         {
06d98                 | '             fprintf(file, ",");
06d98                 | '         }
06d98                 | '     }
06d98                 | '     fprintf(file, "],");
06d98                 | '     double_to_json(file, "Dwell", quartet->dwell);
06d98                 | '     fprintf(file, "}");
06d98                 | '     fclose(file);
06d98                 | '     return SUCCESS;
06d98     00 34 06 F6 | 	mov	result1, #0
06d9c                 | LR__0252
06d9c     A8 F0 03 F6 | 	mov	ptra, fp
06da0     B3 00 A0 FD | 	call	#popregs_
06da4                 | _motion_quartet_to_json_ret
06da4     2D 00 64 FD | 	ret
06da8                 | 
06da8                 | _json_to_machine_profile
06da8     07 4C 05 F6 | 	mov	COUNT_, #7
06dac     A9 00 A0 FD | 	call	#pushregs_
06db0     3A 8D 02 F6 | 	mov	local01, arg01
06db4     3B 8F 02 F6 | 	mov	local02, arg02
06db8     48 01 00 FF 
06dbc     DA 77 06 F6 | 	mov	arg02, ##@LR__1896
06dc0     47 75 02 F6 | 	mov	arg01, local02
06dc4     2C B0 BF FD | 	call	#_fopen
06dc8     1A 91 0A F6 | 	mov	local03, result1 wz
06dcc     54 00 90 5D |  if_ne	jmp	#LR__0253
06dd0     00 74 06 F6 | 	mov	arg01, #0
06dd4     70 1D B2 FD | 	call	#__system___getiolock_1205
06dd8     1A 75 02 F6 | 	mov	arg01, result1
06ddc     40 E5 B1 FD | 	call	#__system___lockmem
06de0     48 01 00 FF 
06de4     DC 77 06 F6 | 	mov	arg02, ##@LR__1897
06de8     00 74 06 F6 | 	mov	arg01, #0
06dec     00 78 06 F6 | 	mov	arg03, #0
06df0     C0 EA B1 FD | 	call	#__system___basic_print_string
06df4     00 74 06 F6 | 	mov	arg01, #0
06df8     47 77 02 F6 | 	mov	arg02, local02
06dfc     00 78 06 F6 | 	mov	arg03, #0
06e00     B0 EA B1 FD | 	call	#__system___basic_print_string
06e04     00 74 06 F6 | 	mov	arg01, #0
06e08     0A 76 06 F6 | 	mov	arg02, #10
06e0c     00 78 06 F6 | 	mov	arg03, #0
06e10     54 EA B1 FD | 	call	#__system___basic_print_char
06e14     00 74 06 F6 | 	mov	arg01, #0
06e18     2C 1D B2 FD | 	call	#__system___getiolock_1205
06e1c     1A 01 68 FC | 	wrlong	#0, result1
06e20                 | '         return  (0) ;
06e20     E0 02 90 FD | 	jmp	#LR__0261
06e24                 | LR__0253
06e24     B8 00 00 FF 
06e28     DC D6 05 F1 | 	add	ptr__dat__, ##94428
06e2c     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
06e30     B8 00 00 FF 
06e34     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
06e38     48 75 02 F6 | 	mov	arg01, local03
06e3c     00 76 06 F6 | 	mov	arg02, #0
06e40     02 78 06 F6 | 	mov	arg03, #2
06e44     18 B2 BF FD | 	call	#_fseek
06e48     48 75 02 F6 | 	mov	arg01, local03
06e4c     6C B2 BF FD | 	call	#_ftell
06e50     1A 93 02 F6 | 	mov	local04, result1
06e54     48 75 02 F6 | 	mov	arg01, local03
06e58     00 76 06 F6 | 	mov	arg02, #0
06e5c     00 78 06 F6 | 	mov	arg03, #0
06e60     FC B1 BF FD | 	call	#_fseek
06e64     AC 00 00 FF 
06e68     6A D7 05 F1 | 	add	ptr__dat__, ##88426
06e6c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
06e70     AC 00 00 FF 
06e74     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
06e78     49 77 02 F6 | 	mov	arg02, local04
06e7c     01 78 06 F6 | 	mov	arg03, #1
06e80     48 7B 02 F6 | 	mov	arg04, local03
06e84     54 B1 BF FD | 	call	#_fread
06e88     48 75 02 F6 | 	mov	arg01, local03
06e8c                 | ' {
06e8c                 | '     return _closeraw(f);
06e8c     6C A1 BF FD | 	call	#__closeraw
06e90     AC 00 00 FF 
06e94     6A D7 05 F1 | 	add	ptr__dat__, ##88426
06e98     EB 92 02 F1 | 	add	local04, ptr__dat__
06e9c     49 01 48 FC | 	wrbyte	#0, local04
06ea0     00 74 06 F6 | 	mov	arg01, #0
06ea4     AC 00 00 FF 
06ea8     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
06eac     98 1C B2 FD | 	call	#__system___getiolock_1205
06eb0     1A 75 02 F6 | 	mov	arg01, result1
06eb4     68 E4 B1 FD | 	call	#__system___lockmem
06eb8     AC 00 00 FF 
06ebc     6A D7 05 F1 | 	add	ptr__dat__, ##88426
06ec0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
06ec4     AC 00 00 FF 
06ec8     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
06ecc     00 74 06 F6 | 	mov	arg01, #0
06ed0     00 78 06 F6 | 	mov	arg03, #0
06ed4     DC E9 B1 FD | 	call	#__system___basic_print_string
06ed8     00 74 06 F6 | 	mov	arg01, #0
06edc     0A 76 06 F6 | 	mov	arg02, #10
06ee0     00 78 06 F6 | 	mov	arg03, #0
06ee4     80 E9 B1 FD | 	call	#__system___basic_print_char
06ee8     00 74 06 F6 | 	mov	arg01, #0
06eec     58 1C B2 FD | 	call	#__system___getiolock_1205
06ef0     1A 01 68 FC | 	wrlong	#0, result1
06ef4     44 00 90 5D |  if_ne	jmp	#LR__0254
06ef8     00 74 06 F6 | 	mov	arg01, #0
06efc     48 1C B2 FD | 	call	#__system___getiolock_1205
06f00     1A 75 02 F6 | 	mov	arg01, result1
06f04     18 E4 B1 FD | 	call	#__system___lockmem
06f08     48 01 00 FF 
06f0c     F0 77 06 F6 | 	mov	arg02, ##@LR__1898
06f10     00 74 06 F6 | 	mov	arg01, #0
06f14     00 78 06 F6 | 	mov	arg03, #0
06f18     98 E9 B1 FD | 	call	#__system___basic_print_string
06f1c     00 74 06 F6 | 	mov	arg01, #0
06f20     0A 76 06 F6 | 	mov	arg02, #10
06f24     00 78 06 F6 | 	mov	arg03, #0
06f28     3C E9 B1 FD | 	call	#__system___basic_print_char
06f2c     00 74 06 F6 | 	mov	arg01, #0
06f30     14 1C B2 FD | 	call	#__system___getiolock_1205
06f34     1A 01 68 FC | 	wrlong	#0, result1
06f38                 | '         return  (0) ;
06f38     C8 01 90 FD | 	jmp	#LR__0261
06f3c                 | LR__0254
06f3c     AC 00 00 FF 
06f40     6A D7 05 F1 | 	add	ptr__dat__, ##88426
06f44     EB 74 02 F6 | 	mov	arg01, ptr__dat__
06f48     03 00 00 FF 
06f4c     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
06f50     EB 76 02 F6 | 	mov	arg02, ptr__dat__
06f54     C8 78 06 F6 | 	mov	arg03, #200
06f58     B0 00 00 FF 
06f5c     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
06f60     D8 F1 BF FD | 	call	#_json_create
06f64     1A 95 0A F6 | 	mov	local05, result1 wz
06f68     10 00 90 AD |  if_e	jmp	#LR__0255
06f6c     4A 75 02 F6 | 	mov	arg01, local05
06f70                 | ' {
06f70                 | '     return json->type;
06f70     10 74 06 F1 | 	add	arg01, #16
06f74     3A 35 0A FB | 	rdlong	result1, arg01 wz
06f78     44 00 90 AD |  if_e	jmp	#LR__0256
06f7c                 | LR__0255
06f7c     00 74 06 F6 | 	mov	arg01, #0
06f80     C4 1B B2 FD | 	call	#__system___getiolock_1205
06f84     1A 75 02 F6 | 	mov	arg01, result1
06f88     94 E3 B1 FD | 	call	#__system___lockmem
06f8c     49 01 00 FF 
06f90     08 76 06 F6 | 	mov	arg02, ##@LR__1899
06f94     00 74 06 F6 | 	mov	arg01, #0
06f98     00 78 06 F6 | 	mov	arg03, #0
06f9c     14 E9 B1 FD | 	call	#__system___basic_print_string
06fa0     00 74 06 F6 | 	mov	arg01, #0
06fa4     0A 76 06 F6 | 	mov	arg02, #10
06fa8     00 78 06 F6 | 	mov	arg03, #0
06fac     B8 E8 B1 FD | 	call	#__system___basic_print_char
06fb0     00 74 06 F6 | 	mov	arg01, #0
06fb4     90 1B B2 FD | 	call	#__system___getiolock_1205
06fb8     1A 01 68 FC | 	wrlong	#0, result1
06fbc                 | '         return  (0) ;
06fbc     44 01 90 FD | 	jmp	#LR__0261
06fc0                 | LR__0256
06fc0     49 01 00 FF 
06fc4     2B 76 06 F6 | 	mov	arg02, ##@LR__1900
06fc8     4A 75 02 F6 | 	mov	arg01, local05
06fcc     24 C3 B0 FD | 	call	#_json_property_to_string_0644
06fd0     1A 77 02 F6 | 	mov	arg02, result1
06fd4     46 75 02 F6 | 	mov	arg01, local01
06fd8     14 78 06 F6 | 	mov	arg03, #20
06fdc     9C EE BF FD | 	call	#_strncpy
06fe0     49 01 00 FF 
06fe4     30 76 06 F6 | 	mov	arg02, ##@LR__1901
06fe8     4A 75 02 F6 | 	mov	arg01, local05
06fec     94 C3 B0 FD | 	call	#_json_property_to_int_0646
06ff0     14 8C 06 F1 | 	add	local01, #20
06ff4     46 35 62 FC | 	wrlong	result1, local01
06ff8     14 8C 86 F1 | 	sub	local01, #20
06ffc     49 01 00 FF 
07000     37 76 06 F6 | 	mov	arg02, ##@LR__1902
07004     4A 75 02 F6 | 	mov	arg01, local05
07008     A0 F1 BF FD | 	call	#_json_getProperty
0700c     1A 97 0A F6 | 	mov	local06, result1 wz
07010     10 00 90 AD |  if_e	jmp	#LR__0257
07014     4B 75 02 F6 | 	mov	arg01, local06
07018                 | ' {
07018                 | '     return json->type;
07018     10 74 06 F1 | 	add	arg01, #16
0701c     3A 35 0A FB | 	rdlong	result1, arg01 wz
07020     40 00 90 AD |  if_e	jmp	#LR__0258
07024                 | LR__0257
07024     00 74 06 F6 | 	mov	arg01, #0
07028     1C 1B B2 FD | 	call	#__system___getiolock_1205
0702c     1A 75 02 F6 | 	mov	arg01, result1
07030     EC E2 B1 FD | 	call	#__system___lockmem
07034     49 01 00 FF 
07038     45 76 06 F6 | 	mov	arg02, ##@LR__1903
0703c     00 74 06 F6 | 	mov	arg01, #0
07040     00 78 06 F6 | 	mov	arg03, #0
07044     6C E8 B1 FD | 	call	#__system___basic_print_string
07048     00 74 06 F6 | 	mov	arg01, #0
0704c     0A 76 06 F6 | 	mov	arg02, #10
07050     00 78 06 F6 | 	mov	arg03, #0
07054     10 E8 B1 FD | 	call	#__system___basic_print_char
07058     00 74 06 F6 | 	mov	arg01, #0
0705c     E8 1A B2 FD | 	call	#__system___getiolock_1205
07060     1A 01 68 FC | 	wrlong	#0, result1
07064                 | LR__0258
07064     18 8C 06 F1 | 	add	local01, #24
07068     46 77 02 F6 | 	mov	arg02, local01
0706c     18 8C 86 F1 | 	sub	local01, #24
07070     4B 75 02 F6 | 	mov	arg01, local06
07074     34 C5 B0 FD | 	call	#_json_to_machine_configuration_0658
07078     49 01 00 FF 
0707c     7F 76 06 F6 | 	mov	arg02, ##@LR__1904
07080     4A 75 02 F6 | 	mov	arg01, local05
07084     24 F1 BF FD | 	call	#_json_getProperty
07088     1A 99 0A F6 | 	mov	local07, result1 wz
0708c     10 00 90 AD |  if_e	jmp	#LR__0259
07090     4C 75 02 F6 | 	mov	arg01, local07
07094                 | ' {
07094                 | '     return json->type;
07094     10 74 06 F1 | 	add	arg01, #16
07098     3A 35 0A FB | 	rdlong	result1, arg01 wz
0709c     40 00 90 AD |  if_e	jmp	#LR__0260
070a0                 | LR__0259
070a0     00 74 06 F6 | 	mov	arg01, #0
070a4     A0 1A B2 FD | 	call	#__system___getiolock_1205
070a8     1A 75 02 F6 | 	mov	arg01, result1
070ac     70 E2 B1 FD | 	call	#__system___lockmem
070b0     49 01 00 FF 
070b4     8B 76 06 F6 | 	mov	arg02, ##@LR__1905
070b8     00 74 06 F6 | 	mov	arg01, #0
070bc     00 78 06 F6 | 	mov	arg03, #0
070c0     F0 E7 B1 FD | 	call	#__system___basic_print_string
070c4     00 74 06 F6 | 	mov	arg01, #0
070c8     0A 76 06 F6 | 	mov	arg02, #10
070cc     00 78 06 F6 | 	mov	arg03, #0
070d0     94 E7 B1 FD | 	call	#__system___basic_print_char
070d4     00 74 06 F6 | 	mov	arg01, #0
070d8     6C 1A B2 FD | 	call	#__system___getiolock_1205
070dc     1A 01 68 FC | 	wrlong	#0, result1
070e0                 | LR__0260
070e0     7C 8C 06 F1 | 	add	local01, #124
070e4     46 77 02 F6 | 	mov	arg02, local01
070e8     4C 75 02 F6 | 	mov	arg01, local07
070ec     30 C6 B0 FD | 	call	#_json_to_machine_performance_0659
070f0     B8 00 00 FF 
070f4     DC D6 05 F1 | 	add	ptr__dat__, ##94428
070f8     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
070fc     B8 00 00 FF 
07100     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07104                 | LR__0261
07104     A8 F0 03 F6 | 	mov	ptra, fp
07108     B3 00 A0 FD | 	call	#popregs_
0710c                 | _json_to_machine_profile_ret
0710c     2D 00 64 FD | 	ret
07110                 | 
07110                 | _json_to_sample_profile
07110     03 4C 05 F6 | 	mov	COUNT_, #3
07114     A9 00 A0 FD | 	call	#pushregs_
07118     3A 8D 02 F6 | 	mov	local01, arg01
0711c     3B 8F 02 F6 | 	mov	local02, arg02
07120     49 01 00 FF 
07124     BF 76 06 F6 | 	mov	arg02, ##@LR__1906
07128     47 75 02 F6 | 	mov	arg01, local02
0712c     C4 AC BF FD | 	call	#_fopen
07130     1A 91 0A F6 | 	mov	local03, result1 wz
07134     54 00 90 5D |  if_ne	jmp	#LR__0262
07138     00 74 06 F6 | 	mov	arg01, #0
0713c     08 1A B2 FD | 	call	#__system___getiolock_1205
07140     1A 75 02 F6 | 	mov	arg01, result1
07144     D8 E1 B1 FD | 	call	#__system___lockmem
07148     49 01 00 FF 
0714c     C1 76 06 F6 | 	mov	arg02, ##@LR__1907
07150     00 74 06 F6 | 	mov	arg01, #0
07154     00 78 06 F6 | 	mov	arg03, #0
07158     58 E7 B1 FD | 	call	#__system___basic_print_string
0715c     00 74 06 F6 | 	mov	arg01, #0
07160     47 77 02 F6 | 	mov	arg02, local02
07164     00 78 06 F6 | 	mov	arg03, #0
07168     48 E7 B1 FD | 	call	#__system___basic_print_string
0716c     00 74 06 F6 | 	mov	arg01, #0
07170     0A 76 06 F6 | 	mov	arg02, #10
07174     00 78 06 F6 | 	mov	arg03, #0
07178     EC E6 B1 FD | 	call	#__system___basic_print_char
0717c     00 74 06 F6 | 	mov	arg01, #0
07180     C4 19 B2 FD | 	call	#__system___getiolock_1205
07184     1A 01 68 FC | 	wrlong	#0, result1
07188                 | '         return  (0) ;
07188     F4 01 90 FD | 	jmp	#LR__0263
0718c                 | LR__0262
0718c     B8 00 00 FF 
07190     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07194     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07198     B8 00 00 FF 
0719c     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
071a0     48 75 02 F6 | 	mov	arg01, local03
071a4     00 76 06 F6 | 	mov	arg02, #0
071a8     02 78 06 F6 | 	mov	arg03, #2
071ac     B0 AE BF FD | 	call	#_fseek
071b0     48 75 02 F6 | 	mov	arg01, local03
071b4     04 AF BF FD | 	call	#_ftell
071b8     1A 8F 02 F6 | 	mov	local02, result1
071bc     48 75 02 F6 | 	mov	arg01, local03
071c0     00 76 06 F6 | 	mov	arg02, #0
071c4     00 78 06 F6 | 	mov	arg03, #0
071c8     94 AE BF FD | 	call	#_fseek
071cc     AC 00 00 FF 
071d0     6A D7 05 F1 | 	add	ptr__dat__, ##88426
071d4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
071d8     AC 00 00 FF 
071dc     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
071e0     47 77 02 F6 | 	mov	arg02, local02
071e4     01 78 06 F6 | 	mov	arg03, #1
071e8     48 7B 02 F6 | 	mov	arg04, local03
071ec     EC AD BF FD | 	call	#_fread
071f0     48 75 02 F6 | 	mov	arg01, local03
071f4                 | ' {
071f4                 | '     return _closeraw(f);
071f4     04 9E BF FD | 	call	#__closeraw
071f8     AC 00 00 FF 
071fc     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07200     EB 8E 02 F1 | 	add	local02, ptr__dat__
07204     47 01 48 FC | 	wrbyte	#0, local02
07208     00 74 06 F6 | 	mov	arg01, #0
0720c     AC 00 00 FF 
07210     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07214     30 19 B2 FD | 	call	#__system___getiolock_1205
07218     1A 75 02 F6 | 	mov	arg01, result1
0721c     00 E1 B1 FD | 	call	#__system___lockmem
07220     AC 00 00 FF 
07224     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07228     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0722c     AC 00 00 FF 
07230     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07234     00 74 06 F6 | 	mov	arg01, #0
07238     00 78 06 F6 | 	mov	arg03, #0
0723c     74 E6 B1 FD | 	call	#__system___basic_print_string
07240     00 74 06 F6 | 	mov	arg01, #0
07244     0A 76 06 F6 | 	mov	arg02, #10
07248     00 78 06 F6 | 	mov	arg03, #0
0724c     18 E6 B1 FD | 	call	#__system___basic_print_char
07250     00 74 06 F6 | 	mov	arg01, #0
07254     F0 18 B2 FD | 	call	#__system___getiolock_1205
07258     1A 01 68 FC | 	wrlong	#0, result1
0725c     AC 00 00 FF 
07260     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07264     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07268     03 00 00 FF 
0726c     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
07270     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07274     B0 00 00 FF 
07278     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
0727c     C8 78 06 F6 | 	mov	arg03, #200
07280     B8 EE BF FD | 	call	#_json_create
07284     1A 91 02 F6 | 	mov	local03, result1
07288     46 8F 02 FB | 	rdlong	local02, local01
0728c     49 01 00 FF 
07290     D5 76 06 F6 | 	mov	arg02, ##@LR__1908
07294     48 75 02 F6 | 	mov	arg01, local03
07298     58 C0 B0 FD | 	call	#_json_property_to_string_0644
0729c     1A 77 02 F6 | 	mov	arg02, result1
072a0     47 75 02 F6 | 	mov	arg01, local02
072a4     32 78 06 F6 | 	mov	arg03, #50
072a8     D0 EB BF FD | 	call	#_strncpy
072ac     49 01 00 FF 
072b0     DA 76 06 F6 | 	mov	arg02, ##@LR__1909
072b4     48 75 02 F6 | 	mov	arg01, local03
072b8     C8 C0 B0 FD | 	call	#_json_property_to_int_0646
072bc     04 8C 06 F1 | 	add	local01, #4
072c0     46 35 62 FC | 	wrlong	result1, local01
072c4     49 01 00 FF 
072c8     E1 76 06 F6 | 	mov	arg02, ##@LR__1910
072cc     48 75 02 F6 | 	mov	arg01, local03
072d0     5C C1 B0 FD | 	call	#_json_property_to_double_0648
072d4     04 8C 06 F1 | 	add	local01, #4
072d8     46 35 62 FC | 	wrlong	result1, local01
072dc     49 01 00 FF 
072e0     E8 76 06 F6 | 	mov	arg02, ##@LR__1911
072e4     48 75 02 F6 | 	mov	arg01, local03
072e8     44 C1 B0 FD | 	call	#_json_property_to_double_0648
072ec     04 8C 06 F1 | 	add	local01, #4
072f0     46 35 62 FC | 	wrlong	result1, local01
072f4     49 01 00 FF 
072f8     F4 76 06 F6 | 	mov	arg02, ##@LR__1912
072fc     48 75 02 F6 | 	mov	arg01, local03
07300     2C C1 B0 FD | 	call	#_json_property_to_double_0648
07304     04 8C 06 F1 | 	add	local01, #4
07308     46 35 62 FC | 	wrlong	result1, local01
0730c     49 01 00 FF 
07310     01 77 06 F6 | 	mov	arg02, ##@LR__1913
07314     48 75 02 F6 | 	mov	arg01, local03
07318     14 C1 B0 FD | 	call	#_json_property_to_double_0648
0731c     04 8C 06 F1 | 	add	local01, #4
07320     46 35 62 FC | 	wrlong	result1, local01
07324     49 01 00 FF 
07328     12 77 06 F6 | 	mov	arg02, ##@LR__1914
0732c     48 75 02 F6 | 	mov	arg01, local03
07330     FC C0 B0 FD | 	call	#_json_property_to_double_0648
07334     04 8C 06 F1 | 	add	local01, #4
07338     46 35 62 FC | 	wrlong	result1, local01
0733c     49 01 00 FF 
07340     1B 77 06 F6 | 	mov	arg02, ##@LR__1915
07344     48 75 02 F6 | 	mov	arg01, local03
07348     E4 C0 B0 FD | 	call	#_json_property_to_double_0648
0734c     04 8C 06 F1 | 	add	local01, #4
07350     46 35 62 FC | 	wrlong	result1, local01
07354     49 01 00 FF 
07358     2D 77 06 F6 | 	mov	arg02, ##@LR__1916
0735c     48 75 02 F6 | 	mov	arg01, local03
07360     CC C0 B0 FD | 	call	#_json_property_to_double_0648
07364     04 8C 06 F1 | 	add	local01, #4
07368     46 35 62 FC | 	wrlong	result1, local01
0736c     B8 00 00 FF 
07370     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07374     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
07378     B8 00 00 FF 
0737c     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07380                 | LR__0263
07380     A8 F0 03 F6 | 	mov	ptra, fp
07384     B3 00 A0 FD | 	call	#popregs_
07388                 | _json_to_sample_profile_ret
07388     2D 00 64 FD | 	ret
0738c                 | 
0738c                 | _json_to_test_profile
0738c     03 4C 05 F6 | 	mov	COUNT_, #3
07390     A9 00 A0 FD | 	call	#pushregs_
07394     3A 8D 02 F6 | 	mov	local01, arg01
07398     3B 8F 02 F6 | 	mov	local02, arg02
0739c     00 74 06 F6 | 	mov	arg01, #0
073a0     A4 17 B2 FD | 	call	#__system___getiolock_1205
073a4     1A 75 02 F6 | 	mov	arg01, result1
073a8     74 DF B1 FD | 	call	#__system___lockmem
073ac     49 01 00 FF 
073b0     43 77 06 F6 | 	mov	arg02, ##@LR__1917
073b4     00 74 06 F6 | 	mov	arg01, #0
073b8     00 78 06 F6 | 	mov	arg03, #0
073bc     F4 E4 B1 FD | 	call	#__system___basic_print_string
073c0     00 74 06 F6 | 	mov	arg01, #0
073c4     0A 76 06 F6 | 	mov	arg02, #10
073c8     00 78 06 F6 | 	mov	arg03, #0
073cc     98 E4 B1 FD | 	call	#__system___basic_print_char
073d0     00 74 06 F6 | 	mov	arg01, #0
073d4     70 17 B2 FD | 	call	#__system___getiolock_1205
073d8     1A 01 68 FC | 	wrlong	#0, result1
073dc     49 01 00 FF 
073e0     4F 77 06 F6 | 	mov	arg02, ##@LR__1918
073e4     46 75 02 F6 | 	mov	arg01, local01
073e8     08 AA BF FD | 	call	#_fopen
073ec     1A 91 02 F6 | 	mov	local03, result1
073f0     00 74 06 F6 | 	mov	arg01, #0
073f4     50 17 B2 FD | 	call	#__system___getiolock_1205
073f8     1A 75 02 F6 | 	mov	arg01, result1
073fc     20 DF B1 FD | 	call	#__system___lockmem
07400     49 01 00 FF 
07404     51 77 06 F6 | 	mov	arg02, ##@LR__1919
07408     00 74 06 F6 | 	mov	arg01, #0
0740c     00 78 06 F6 | 	mov	arg03, #0
07410     A0 E4 B1 FD | 	call	#__system___basic_print_string
07414     00 74 06 F6 | 	mov	arg01, #0
07418     0A 76 06 F6 | 	mov	arg02, #10
0741c     00 78 06 F6 | 	mov	arg03, #0
07420     44 E4 B1 FD | 	call	#__system___basic_print_char
07424     00 74 06 F6 | 	mov	arg01, #0
07428     1C 17 B2 FD | 	call	#__system___getiolock_1205
0742c     1A 01 68 FC | 	wrlong	#0, result1
07430     00 90 0E F2 | 	cmp	local03, #0 wz
07434     54 00 90 5D |  if_ne	jmp	#LR__0264
07438     00 74 06 F6 | 	mov	arg01, #0
0743c     08 17 B2 FD | 	call	#__system___getiolock_1205
07440     1A 75 02 F6 | 	mov	arg01, result1
07444     D8 DE B1 FD | 	call	#__system___lockmem
07448     49 01 00 FF 
0744c     5C 77 06 F6 | 	mov	arg02, ##@LR__1920
07450     00 74 06 F6 | 	mov	arg01, #0
07454     00 78 06 F6 | 	mov	arg03, #0
07458     58 E4 B1 FD | 	call	#__system___basic_print_string
0745c     00 74 06 F6 | 	mov	arg01, #0
07460     46 77 02 F6 | 	mov	arg02, local01
07464     00 78 06 F6 | 	mov	arg03, #0
07468     48 E4 B1 FD | 	call	#__system___basic_print_string
0746c     00 74 06 F6 | 	mov	arg01, #0
07470     0A 76 06 F6 | 	mov	arg02, #10
07474     00 78 06 F6 | 	mov	arg03, #0
07478     EC E3 B1 FD | 	call	#__system___basic_print_char
0747c     00 74 06 F6 | 	mov	arg01, #0
07480     C4 16 B2 FD | 	call	#__system___getiolock_1205
07484     1A 01 68 FC | 	wrlong	#0, result1
07488                 | '         return  (0) ;
07488     EC 01 90 FD | 	jmp	#LR__0265
0748c                 | LR__0264
0748c     B8 00 00 FF 
07490     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07494     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07498     B8 00 00 FF 
0749c     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
074a0     48 75 02 F6 | 	mov	arg01, local03
074a4     00 76 06 F6 | 	mov	arg02, #0
074a8     02 78 06 F6 | 	mov	arg03, #2
074ac     B0 AB BF FD | 	call	#_fseek
074b0     48 75 02 F6 | 	mov	arg01, local03
074b4     04 AC BF FD | 	call	#_ftell
074b8     1A 8D 02 F6 | 	mov	local01, result1
074bc     48 75 02 F6 | 	mov	arg01, local03
074c0     00 76 06 F6 | 	mov	arg02, #0
074c4     00 78 06 F6 | 	mov	arg03, #0
074c8     94 AB BF FD | 	call	#_fseek
074cc     00 74 06 F6 | 	mov	arg01, #0
074d0     74 16 B2 FD | 	call	#__system___getiolock_1205
074d4     1A 75 02 F6 | 	mov	arg01, result1
074d8     44 DE B1 FD | 	call	#__system___lockmem
074dc     49 01 00 FF 
074e0     70 77 06 F6 | 	mov	arg02, ##@LR__1921
074e4     00 74 06 F6 | 	mov	arg01, #0
074e8     00 78 06 F6 | 	mov	arg03, #0
074ec     C4 E3 B1 FD | 	call	#__system___basic_print_string
074f0     00 74 06 F6 | 	mov	arg01, #0
074f4     0A 76 06 F6 | 	mov	arg02, #10
074f8     00 78 06 F6 | 	mov	arg03, #0
074fc     68 E3 B1 FD | 	call	#__system___basic_print_char
07500     00 74 06 F6 | 	mov	arg01, #0
07504     40 16 B2 FD | 	call	#__system___getiolock_1205
07508     1A 01 68 FC | 	wrlong	#0, result1
0750c     AC 00 00 FF 
07510     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07514     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07518     AC 00 00 FF 
0751c     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07520     46 77 02 F6 | 	mov	arg02, local01
07524     01 78 06 F6 | 	mov	arg03, #1
07528     48 7B 02 F6 | 	mov	arg04, local03
0752c     AC AA BF FD | 	call	#_fread
07530     48 75 02 F6 | 	mov	arg01, local03
07534                 | ' {
07534                 | '     return _closeraw(f);
07534     C4 9A BF FD | 	call	#__closeraw
07538     AC 00 00 FF 
0753c     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07540     EB 8C 02 F1 | 	add	local01, ptr__dat__
07544     46 01 48 FC | 	wrbyte	#0, local01
07548     00 74 06 F6 | 	mov	arg01, #0
0754c     AC 00 00 FF 
07550     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07554     F0 15 B2 FD | 	call	#__system___getiolock_1205
07558     1A 75 02 F6 | 	mov	arg01, result1
0755c     C0 DD B1 FD | 	call	#__system___lockmem
07560     AC 00 00 FF 
07564     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07568     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0756c     AC 00 00 FF 
07570     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07574     00 74 06 F6 | 	mov	arg01, #0
07578     00 78 06 F6 | 	mov	arg03, #0
0757c     34 E3 B1 FD | 	call	#__system___basic_print_string
07580     00 74 06 F6 | 	mov	arg01, #0
07584     0A 76 06 F6 | 	mov	arg02, #10
07588     00 78 06 F6 | 	mov	arg03, #0
0758c     D8 E2 B1 FD | 	call	#__system___basic_print_char
07590     00 74 06 F6 | 	mov	arg01, #0
07594     B0 15 B2 FD | 	call	#__system___getiolock_1205
07598     1A 01 68 FC | 	wrlong	#0, result1
0759c     AC 00 00 FF 
075a0     6A D7 05 F1 | 	add	ptr__dat__, ##88426
075a4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
075a8     03 00 00 FF 
075ac     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
075b0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
075b4     B0 00 00 FF 
075b8     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
075bc     C8 78 06 F6 | 	mov	arg03, #200
075c0     78 EB BF FD | 	call	#_json_create
075c4     1A 91 02 F6 | 	mov	local03, result1
075c8     47 8D 02 FB | 	rdlong	local01, local02
075cc     49 01 00 FF 
075d0     7C 77 06 F6 | 	mov	arg02, ##@LR__1922
075d4     48 75 02 F6 | 	mov	arg01, local03
075d8     18 BD B0 FD | 	call	#_json_property_to_string_0644
075dc     1A 77 02 F6 | 	mov	arg02, result1
075e0     46 75 02 F6 | 	mov	arg01, local01
075e4     32 78 06 F6 | 	mov	arg03, #50
075e8     90 E8 BF FD | 	call	#_strncpy
075ec     49 01 00 FF 
075f0     81 77 06 F6 | 	mov	arg02, ##@LR__1923
075f4     48 75 02 F6 | 	mov	arg01, local03
075f8     88 BD B0 FD | 	call	#_json_property_to_int_0646
075fc     04 8E 06 F1 | 	add	local02, #4
07600     47 35 62 FC | 	wrlong	result1, local02
07604     49 01 00 FF 
07608     96 77 06 F6 | 	mov	arg02, ##@LR__1924
0760c     48 75 02 F6 | 	mov	arg01, local03
07610     E0 BC B0 FD | 	call	#_json_property_to_string_0644
07614     1A 77 02 F6 | 	mov	arg02, result1
07618     04 8E 06 F1 | 	add	local02, #4
0761c     47 75 02 FB | 	rdlong	arg01, local02
07620     84 F7 BF FD | 	call	#_json_to_machine_profile
07624     49 01 00 FF 
07628     AB 77 06 F6 | 	mov	arg02, ##@LR__1925
0762c     48 75 02 F6 | 	mov	arg01, local03
07630     C0 BC B0 FD | 	call	#_json_property_to_string_0644
07634     1A 77 02 F6 | 	mov	arg02, result1
07638     04 8E 06 F1 | 	add	local02, #4
0763c     47 75 02 FB | 	rdlong	arg01, local02
07640     CC FA BF FD | 	call	#_json_to_sample_profile
07644     49 01 00 FF 
07648     BF 77 06 F6 | 	mov	arg02, ##@LR__1926
0764c     48 75 02 F6 | 	mov	arg01, local03
07650     A0 BC B0 FD | 	call	#_json_property_to_string_0644
07654     1A 75 02 F6 | 	mov	arg01, result1
07658     04 8E 06 F1 | 	add	local02, #4
0765c     47 77 02 FB | 	rdlong	arg02, local02
07660     20 00 B0 FD | 	call	#_json_to_motion_profile
07664     B8 00 00 FF 
07668     DC D6 05 F1 | 	add	ptr__dat__, ##94428
0766c     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
07670     B8 00 00 FF 
07674     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07678                 | LR__0265
07678     A8 F0 03 F6 | 	mov	ptra, fp
0767c     B3 00 A0 FD | 	call	#popregs_
07680                 | _json_to_test_profile_ret
07680     2D 00 64 FD | 	ret
07684                 | 
07684                 | _json_to_motion_profile
07684     02 4C 05 F6 | 	mov	COUNT_, #2
07688     A9 00 A0 FD | 	call	#pushregs_
0768c     01 00 00 FF 
07690     14 F1 07 F1 | 	add	ptra, ##788
07694     A8 74 62 FC | 	wrlong	arg01, fp
07698     04 50 05 F1 | 	add	fp, #4
0769c     A8 76 62 FC | 	wrlong	arg02, fp
076a0     04 50 85 F1 | 	sub	fp, #4
076a4     A8 74 02 FB | 	rdlong	arg01, fp
076a8     49 01 00 FF 
076ac     D3 77 06 F6 | 	mov	arg02, ##@LR__1927
076b0     40 A7 BF FD | 	call	#_fopen
076b4     08 50 05 F1 | 	add	fp, #8
076b8     A8 34 62 FC | 	wrlong	result1, fp
076bc     08 50 85 F1 | 	sub	fp, #8
076c0     00 34 0E F2 | 	cmp	result1, #0 wz
076c4     54 00 90 5D |  if_ne	jmp	#LR__0266
076c8     00 74 06 F6 | 	mov	arg01, #0
076cc     78 14 B2 FD | 	call	#__system___getiolock_1205
076d0     1A 75 02 F6 | 	mov	arg01, result1
076d4     48 DC B1 FD | 	call	#__system___lockmem
076d8     49 01 00 FF 
076dc     D5 77 06 F6 | 	mov	arg02, ##@LR__1928
076e0     00 74 06 F6 | 	mov	arg01, #0
076e4     00 78 06 F6 | 	mov	arg03, #0
076e8     C8 E1 B1 FD | 	call	#__system___basic_print_string
076ec     A8 76 02 FB | 	rdlong	arg02, fp
076f0     00 74 06 F6 | 	mov	arg01, #0
076f4     00 78 06 F6 | 	mov	arg03, #0
076f8     B8 E1 B1 FD | 	call	#__system___basic_print_string
076fc     00 74 06 F6 | 	mov	arg01, #0
07700     0A 76 06 F6 | 	mov	arg02, #10
07704     00 78 06 F6 | 	mov	arg03, #0
07708     5C E1 B1 FD | 	call	#__system___basic_print_char
0770c     00 74 06 F6 | 	mov	arg01, #0
07710     34 14 B2 FD | 	call	#__system___getiolock_1205
07714     1A 01 68 FC | 	wrlong	#0, result1
07718                 | '         return  (0) ;
07718     E4 03 90 FD | 	jmp	#LR__0271
0771c                 | LR__0266
0771c     00 74 06 F6 | 	mov	arg01, #0
07720     24 14 B2 FD | 	call	#__system___getiolock_1205
07724     1A 75 02 F6 | 	mov	arg01, result1
07728     F4 DB B1 FD | 	call	#__system___lockmem
0772c     49 01 00 FF 
07730     E9 77 06 F6 | 	mov	arg02, ##@LR__1929
07734     00 74 06 F6 | 	mov	arg01, #0
07738     00 78 06 F6 | 	mov	arg03, #0
0773c     74 E1 B1 FD | 	call	#__system___basic_print_string
07740     00 74 06 F6 | 	mov	arg01, #0
07744     0A 76 06 F6 | 	mov	arg02, #10
07748     00 78 06 F6 | 	mov	arg03, #0
0774c     18 E1 B1 FD | 	call	#__system___basic_print_char
07750     00 74 06 F6 | 	mov	arg01, #0
07754     F0 13 B2 FD | 	call	#__system___getiolock_1205
07758     1A 01 68 FC | 	wrlong	#0, result1
0775c     B8 00 00 FF 
07760     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07764     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07768     B8 00 00 FF 
0776c     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07770     08 50 05 F1 | 	add	fp, #8
07774     A8 74 02 FB | 	rdlong	arg01, fp
07778     08 50 85 F1 | 	sub	fp, #8
0777c     00 76 06 F6 | 	mov	arg02, #0
07780     02 78 06 F6 | 	mov	arg03, #2
07784     D8 A8 BF FD | 	call	#_fseek
07788     08 50 05 F1 | 	add	fp, #8
0778c     A8 74 02 FB | 	rdlong	arg01, fp
07790     08 50 85 F1 | 	sub	fp, #8
07794     24 A9 BF FD | 	call	#_ftell
07798     0C 50 05 F1 | 	add	fp, #12
0779c     A8 34 62 FC | 	wrlong	result1, fp
077a0     04 50 85 F1 | 	sub	fp, #4
077a4     A8 74 02 FB | 	rdlong	arg01, fp
077a8     08 50 85 F1 | 	sub	fp, #8
077ac     00 76 06 F6 | 	mov	arg02, #0
077b0     00 78 06 F6 | 	mov	arg03, #0
077b4     A8 A8 BF FD | 	call	#_fseek
077b8     AC 00 00 FF 
077bc     6A D7 05 F1 | 	add	ptr__dat__, ##88426
077c0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
077c4     AC 00 00 FF 
077c8     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
077cc     0C 50 05 F1 | 	add	fp, #12
077d0     A8 76 02 FB | 	rdlong	arg02, fp
077d4     04 50 85 F1 | 	sub	fp, #4
077d8     A8 7A 02 FB | 	rdlong	arg04, fp
077dc     08 50 85 F1 | 	sub	fp, #8
077e0     01 78 06 F6 | 	mov	arg03, #1
077e4     F4 A7 BF FD | 	call	#_fread
077e8     08 50 05 F1 | 	add	fp, #8
077ec     A8 74 02 FB | 	rdlong	arg01, fp
077f0     08 50 85 F1 | 	sub	fp, #8
077f4                 | ' {
077f4                 | '     return _closeraw(f);
077f4     04 98 BF FD | 	call	#__closeraw
077f8     0C 50 05 F1 | 	add	fp, #12
077fc     A8 74 02 FB | 	rdlong	arg01, fp
07800     0C 50 85 F1 | 	sub	fp, #12
07804     AC 00 00 FF 
07808     6A D7 05 F1 | 	add	ptr__dat__, ##88426
0780c     EB 74 02 F1 | 	add	arg01, ptr__dat__
07810     3A 01 48 FC | 	wrbyte	#0, arg01
07814     00 74 06 F6 | 	mov	arg01, #0
07818     AC 00 00 FF 
0781c     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07820     24 13 B2 FD | 	call	#__system___getiolock_1205
07824     1A 75 02 F6 | 	mov	arg01, result1
07828     F4 DA B1 FD | 	call	#__system___lockmem
0782c     AC 00 00 FF 
07830     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07834     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07838     AC 00 00 FF 
0783c     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07840     00 74 06 F6 | 	mov	arg01, #0
07844     00 78 06 F6 | 	mov	arg03, #0
07848     68 E0 B1 FD | 	call	#__system___basic_print_string
0784c     00 74 06 F6 | 	mov	arg01, #0
07850     0A 76 06 F6 | 	mov	arg02, #10
07854     00 78 06 F6 | 	mov	arg03, #0
07858     0C E0 B1 FD | 	call	#__system___basic_print_char
0785c     00 74 06 F6 | 	mov	arg01, #0
07860     E4 12 B2 FD | 	call	#__system___getiolock_1205
07864     1A 01 68 FC | 	wrlong	#0, result1
07868     AC 00 00 FF 
0786c     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07870     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07874     03 00 00 FF 
07878     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
0787c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07880     B0 00 00 FF 
07884     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
07888     C8 78 06 F6 | 	mov	arg03, #200
0788c     AC E8 BF FD | 	call	#_json_create
07890     10 50 05 F1 | 	add	fp, #16
07894     A8 34 62 FC | 	wrlong	result1, fp
07898     0C 50 85 F1 | 	sub	fp, #12
0789c     A8 8C 02 FB | 	rdlong	local01, fp
078a0     1A 75 02 F6 | 	mov	arg01, result1
078a4     04 50 85 F1 | 	sub	fp, #4
078a8     49 01 00 FF 
078ac     F5 77 06 F6 | 	mov	arg02, ##@LR__1930
078b0     40 BA B0 FD | 	call	#_json_property_to_string_0644
078b4     1A 77 02 F6 | 	mov	arg02, result1
078b8     46 75 02 F6 | 	mov	arg01, local01
078bc     32 78 06 F6 | 	mov	arg03, #50
078c0     B8 E5 BF FD | 	call	#_strncpy
078c4     04 50 05 F1 | 	add	fp, #4
078c8     A8 8C 02 FB | 	rdlong	local01, fp
078cc     0C 50 05 F1 | 	add	fp, #12
078d0     A8 74 02 FB | 	rdlong	arg01, fp
078d4     10 50 85 F1 | 	sub	fp, #16
078d8     49 01 00 FF 
078dc     FA 77 06 F6 | 	mov	arg02, ##@LR__1931
078e0     A0 BA B0 FD | 	call	#_json_property_to_int_0646
078e4     34 8C 06 F1 | 	add	local01, #52
078e8     46 35 62 FC | 	wrlong	result1, local01
078ec     10 50 05 F1 | 	add	fp, #16
078f0     A8 74 02 FB | 	rdlong	arg01, fp
078f4     10 50 85 F1 | 	sub	fp, #16
078f8     4A 01 00 FF 
078fc     01 76 06 F6 | 	mov	arg02, ##@LR__1932
07900     A8 E8 BF FD | 	call	#_json_getProperty
07904     14 50 05 F1 | 	add	fp, #20
07908     A8 34 62 FC | 	wrlong	result1, fp
0790c     04 50 05 F1 | 	add	fp, #4
07910     A8 00 68 FC | 	wrlong	#0, fp
07914     04 50 85 F1 | 	sub	fp, #4
07918     A8 74 02 FB | 	rdlong	arg01, fp
0791c                 | ' {
0791c                 | '     return json->u.c.child;
0791c     08 74 06 F1 | 	add	arg01, #8
07920     3A 8D 02 FB | 	rdlong	local01, arg01
07924     01 00 00 FF 
07928     F8 50 05 F1 | 	add	fp, ##760
0792c     A8 8C 62 FC | 	wrlong	local01, fp
07930     01 00 00 FF 
07934     0C 51 85 F1 | 	sub	fp, ##780
07938                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
07938                 | LR__0267
07938     01 00 00 FF 
0793c     0C 51 05 F1 | 	add	fp, ##780
07940     A8 8C 0A FB | 	rdlong	local01, fp wz
07944     01 00 00 FF 
07948     0C 51 85 F1 | 	sub	fp, ##780
0794c     70 00 90 AD |  if_e	jmp	#LR__0268
07950     18 50 05 F1 | 	add	fp, #24
07954     A8 8C 02 FB | 	rdlong	local01, fp
07958     32 8C 06 FD | 	qmul	local01, #50
0795c     04 50 05 F1 | 	add	fp, #4
07960                 | ' {
07960                 | '     return property->u.value;
07960     32 78 06 F6 | 	mov	arg03, #50
07964     18 8C 62 FD | 	getqx	local01
07968     A8 8C 02 F1 | 	add	local01, fp
0796c     01 00 00 FF 
07970     F0 50 05 F1 | 	add	fp, ##752
07974     A8 74 02 FB | 	rdlong	arg01, fp
07978     01 00 00 FF 
0797c     0C 51 85 F1 | 	sub	fp, ##780
07980     08 74 06 F1 | 	add	arg01, #8
07984     3A 77 02 FB | 	rdlong	arg02, arg01
07988     46 75 02 F6 | 	mov	arg01, local01
0798c     EC E4 BF FD | 	call	#_strncpy
07990     18 50 05 F1 | 	add	fp, #24
07994     A8 8C 02 FB | 	rdlong	local01, fp
07998     01 8C 06 F1 | 	add	local01, #1
0799c     A8 8C 62 FC | 	wrlong	local01, fp
079a0     01 00 00 FF 
079a4     F4 50 05 F1 | 	add	fp, ##756
079a8     A8 74 02 FB | 	rdlong	arg01, fp
079ac                 | ' {
079ac                 | '     return json->sibling;
079ac     3A 35 02 FB | 	rdlong	result1, arg01
079b0     A8 34 62 FC | 	wrlong	result1, fp
079b4     01 00 00 FF 
079b8     0C 51 85 F1 | 	sub	fp, ##780
079bc     78 FF 9F FD | 	jmp	#LR__0267
079c0                 | LR__0268
079c0     04 50 05 F1 | 	add	fp, #4
079c4     A8 8C 02 FB | 	rdlong	local01, fp
079c8     14 50 05 F1 | 	add	fp, #20
079cc     A8 8E 02 FB | 	rdlong	local02, fp
079d0     38 8C 06 F1 | 	add	local01, #56
079d4     46 8F 62 FC | 	wrlong	local02, local01
079d8     01 00 00 FF 
079dc     F8 50 05 F1 | 	add	fp, ##760
079e0     A8 00 68 FC | 	wrlong	#0, fp
079e4     01 00 00 FF 
079e8     10 51 85 F1 | 	sub	fp, ##784
079ec                 | '     {
079ec                 | '         strncpy(filenames[index], json_getValue(property),  50 );
079ec                 | '         index++;
079ec                 | '     }
079ec                 | '     profile->setCount = index;
079ec                 | ' 
079ec                 | '     for (int i = 0; i < profile->setCount; i++)
079ec                 | LR__0269
079ec     04 50 05 F1 | 	add	fp, #4
079f0     A8 8C 02 FB | 	rdlong	local01, fp
079f4     01 00 00 FF 
079f8     0C 51 05 F1 | 	add	fp, ##780
079fc     A8 8E 02 FB | 	rdlong	local02, fp
07a00     01 00 00 FF 
07a04     10 51 85 F1 | 	sub	fp, ##784
07a08     38 8C 06 F1 | 	add	local01, #56
07a0c     46 8D 02 FB | 	rdlong	local01, local01
07a10     46 8F 52 F2 | 	cmps	local02, local01 wc
07a14     D4 00 90 3D |  if_ae	jmp	#LR__0270
07a18     00 74 06 F6 | 	mov	arg01, #0
07a1c     28 11 B2 FD | 	call	#__system___getiolock_1205
07a20     1A 75 02 F6 | 	mov	arg01, result1
07a24     F8 D8 B1 FD | 	call	#__system___lockmem
07a28     4A 01 00 FF 
07a2c     0D 76 06 F6 | 	mov	arg02, ##@LR__1933
07a30     00 74 06 F6 | 	mov	arg01, #0
07a34     00 78 06 F6 | 	mov	arg03, #0
07a38     78 DE B1 FD | 	call	#__system___basic_print_string
07a3c     01 00 00 FF 
07a40     10 51 05 F1 | 	add	fp, ##784
07a44     A8 8E 02 FB | 	rdlong	local02, fp
07a48     32 8E 06 FD | 	qmul	local02, #50
07a4c     01 00 00 FF 
07a50     F4 50 85 F1 | 	sub	fp, ##756
07a54     00 74 06 F6 | 	mov	arg01, #0
07a58     00 78 06 F6 | 	mov	arg03, #0
07a5c     18 76 62 FD | 	getqx	arg02
07a60     A8 76 02 F1 | 	add	arg02, fp
07a64     1C 50 85 F1 | 	sub	fp, #28
07a68     48 DE B1 FD | 	call	#__system___basic_print_string
07a6c     00 74 06 F6 | 	mov	arg01, #0
07a70     0A 76 06 F6 | 	mov	arg02, #10
07a74     00 78 06 F6 | 	mov	arg03, #0
07a78     EC DD B1 FD | 	call	#__system___basic_print_char
07a7c     00 74 06 F6 | 	mov	arg01, #0
07a80     C4 10 B2 FD | 	call	#__system___getiolock_1205
07a84     1A 01 68 FC | 	wrlong	#0, result1
07a88     01 00 00 FF 
07a8c     10 51 05 F1 | 	add	fp, ##784
07a90     A8 8E 02 FB | 	rdlong	local02, fp
07a94     32 8E 06 FD | 	qmul	local02, #50
07a98     18 74 62 FD | 	getqx	arg01
07a9c     02 00 00 FF 
07aa0     34 8E 06 FD | 	qmul	local02, ##1076
07aa4     01 00 00 FF 
07aa8     F4 50 85 F1 | 	sub	fp, ##756
07aac     A8 74 02 F1 | 	add	arg01, fp
07ab0     18 50 85 F1 | 	sub	fp, #24
07ab4     A8 8E 02 FB | 	rdlong	local02, fp
07ab8     04 50 85 F1 | 	sub	fp, #4
07abc     3C 8E 06 F1 | 	add	local02, #60
07ac0     18 76 62 FD | 	getqx	arg02
07ac4     47 77 02 F1 | 	add	arg02, local02
07ac8     40 00 B0 FD | 	call	#_json_to_motion_set
07acc     01 00 00 FF 
07ad0     10 51 05 F1 | 	add	fp, ##784
07ad4     A8 8E 02 FB | 	rdlong	local02, fp
07ad8     01 8E 06 F1 | 	add	local02, #1
07adc     A8 8E 62 FC | 	wrlong	local02, fp
07ae0     01 00 00 FF 
07ae4     10 51 85 F1 | 	sub	fp, ##784
07ae8     00 FF 9F FD | 	jmp	#LR__0269
07aec                 | LR__0270
07aec     B8 00 00 FF 
07af0     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07af4     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
07af8     B8 00 00 FF 
07afc     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07b00                 | LR__0271
07b00     A8 F0 03 F6 | 	mov	ptra, fp
07b04     B3 00 A0 FD | 	call	#popregs_
07b08                 | _json_to_motion_profile_ret
07b08     2D 00 64 FD | 	ret
07b0c                 | 
07b0c                 | _json_to_motion_set
07b0c     02 4C 05 F6 | 	mov	COUNT_, #2
07b10     A9 00 A0 FD | 	call	#pushregs_
07b14     01 00 00 FF 
07b18     18 F0 07 F1 | 	add	ptra, ##536
07b1c     A8 74 62 FC | 	wrlong	arg01, fp
07b20     04 50 05 F1 | 	add	fp, #4
07b24     A8 76 62 FC | 	wrlong	arg02, fp
07b28     04 50 85 F1 | 	sub	fp, #4
07b2c     A8 74 02 FB | 	rdlong	arg01, fp
07b30     4A 01 00 FF 
07b34     26 76 06 F6 | 	mov	arg02, ##@LR__1934
07b38     B8 A2 BF FD | 	call	#_fopen
07b3c     08 50 05 F1 | 	add	fp, #8
07b40     A8 34 62 FC | 	wrlong	result1, fp
07b44     08 50 85 F1 | 	sub	fp, #8
07b48     00 34 0E F2 | 	cmp	result1, #0 wz
07b4c     54 00 90 5D |  if_ne	jmp	#LR__0272
07b50     00 74 06 F6 | 	mov	arg01, #0
07b54     F0 0F B2 FD | 	call	#__system___getiolock_1205
07b58     1A 75 02 F6 | 	mov	arg01, result1
07b5c     C0 D7 B1 FD | 	call	#__system___lockmem
07b60     4A 01 00 FF 
07b64     28 76 06 F6 | 	mov	arg02, ##@LR__1935
07b68     00 74 06 F6 | 	mov	arg01, #0
07b6c     00 78 06 F6 | 	mov	arg03, #0
07b70     40 DD B1 FD | 	call	#__system___basic_print_string
07b74     A8 76 02 FB | 	rdlong	arg02, fp
07b78     00 74 06 F6 | 	mov	arg01, #0
07b7c     00 78 06 F6 | 	mov	arg03, #0
07b80     30 DD B1 FD | 	call	#__system___basic_print_string
07b84     00 74 06 F6 | 	mov	arg01, #0
07b88     0A 76 06 F6 | 	mov	arg02, #10
07b8c     00 78 06 F6 | 	mov	arg03, #0
07b90     D4 DC B1 FD | 	call	#__system___basic_print_char
07b94     00 74 06 F6 | 	mov	arg01, #0
07b98     AC 0F B2 FD | 	call	#__system___getiolock_1205
07b9c     1A 01 68 FC | 	wrlong	#0, result1
07ba0                 | '         return  (0) ;
07ba0     FC 03 90 FD | 	jmp	#LR__0277
07ba4                 | LR__0272
07ba4     B8 00 00 FF 
07ba8     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07bac     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
07bb0     B8 00 00 FF 
07bb4     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07bb8     08 50 05 F1 | 	add	fp, #8
07bbc     A8 74 02 FB | 	rdlong	arg01, fp
07bc0     08 50 85 F1 | 	sub	fp, #8
07bc4     00 76 06 F6 | 	mov	arg02, #0
07bc8     02 78 06 F6 | 	mov	arg03, #2
07bcc     90 A4 BF FD | 	call	#_fseek
07bd0     08 50 05 F1 | 	add	fp, #8
07bd4     A8 74 02 FB | 	rdlong	arg01, fp
07bd8     08 50 85 F1 | 	sub	fp, #8
07bdc     DC A4 BF FD | 	call	#_ftell
07be0     0C 50 05 F1 | 	add	fp, #12
07be4     A8 34 62 FC | 	wrlong	result1, fp
07be8     04 50 85 F1 | 	sub	fp, #4
07bec     A8 74 02 FB | 	rdlong	arg01, fp
07bf0     08 50 85 F1 | 	sub	fp, #8
07bf4     00 76 06 F6 | 	mov	arg02, #0
07bf8     00 78 06 F6 | 	mov	arg03, #0
07bfc     60 A4 BF FD | 	call	#_fseek
07c00     AC 00 00 FF 
07c04     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07c08     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07c0c     AC 00 00 FF 
07c10     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07c14     0C 50 05 F1 | 	add	fp, #12
07c18     A8 76 02 FB | 	rdlong	arg02, fp
07c1c     04 50 85 F1 | 	sub	fp, #4
07c20     A8 7A 02 FB | 	rdlong	arg04, fp
07c24     08 50 85 F1 | 	sub	fp, #8
07c28     01 78 06 F6 | 	mov	arg03, #1
07c2c     AC A3 BF FD | 	call	#_fread
07c30     08 50 05 F1 | 	add	fp, #8
07c34     A8 74 02 FB | 	rdlong	arg01, fp
07c38     08 50 85 F1 | 	sub	fp, #8
07c3c                 | ' {
07c3c                 | '     return _closeraw(f);
07c3c     BC 93 BF FD | 	call	#__closeraw
07c40     0C 50 05 F1 | 	add	fp, #12
07c44     A8 74 02 FB | 	rdlong	arg01, fp
07c48     0C 50 85 F1 | 	sub	fp, #12
07c4c     AC 00 00 FF 
07c50     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07c54     EB 74 02 F1 | 	add	arg01, ptr__dat__
07c58     3A 01 48 FC | 	wrbyte	#0, arg01
07c5c     00 74 06 F6 | 	mov	arg01, #0
07c60     AC 00 00 FF 
07c64     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07c68     DC 0E B2 FD | 	call	#__system___getiolock_1205
07c6c     1A 75 02 F6 | 	mov	arg01, result1
07c70     AC D6 B1 FD | 	call	#__system___lockmem
07c74     AC 00 00 FF 
07c78     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07c7c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07c80     AC 00 00 FF 
07c84     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
07c88     00 74 06 F6 | 	mov	arg01, #0
07c8c     00 78 06 F6 | 	mov	arg03, #0
07c90     20 DC B1 FD | 	call	#__system___basic_print_string
07c94     00 74 06 F6 | 	mov	arg01, #0
07c98     0A 76 06 F6 | 	mov	arg02, #10
07c9c     00 78 06 F6 | 	mov	arg03, #0
07ca0     C4 DB B1 FD | 	call	#__system___basic_print_char
07ca4     00 74 06 F6 | 	mov	arg01, #0
07ca8     9C 0E B2 FD | 	call	#__system___getiolock_1205
07cac     1A 01 68 FC | 	wrlong	#0, result1
07cb0     AC 00 00 FF 
07cb4     6A D7 05 F1 | 	add	ptr__dat__, ##88426
07cb8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
07cbc     03 00 00 FF 
07cc0     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
07cc4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
07cc8     B0 00 00 FF 
07ccc     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
07cd0     C8 78 06 F6 | 	mov	arg03, #200
07cd4     64 E4 BF FD | 	call	#_json_create
07cd8     10 50 05 F1 | 	add	fp, #16
07cdc     A8 34 62 FC | 	wrlong	result1, fp
07ce0     0C 50 85 F1 | 	sub	fp, #12
07ce4     A8 8C 02 FB | 	rdlong	local01, fp
07ce8     1A 75 02 F6 | 	mov	arg01, result1
07cec     04 50 85 F1 | 	sub	fp, #4
07cf0     4A 01 00 FF 
07cf4     3C 76 06 F6 | 	mov	arg02, ##@LR__1936
07cf8     F8 B5 B0 FD | 	call	#_json_property_to_string_0644
07cfc     1A 77 02 F6 | 	mov	arg02, result1
07d00     46 75 02 F6 | 	mov	arg01, local01
07d04     32 78 06 F6 | 	mov	arg03, #50
07d08     70 E1 BF FD | 	call	#_strncpy
07d0c     04 50 05 F1 | 	add	fp, #4
07d10     A8 8C 02 FB | 	rdlong	local01, fp
07d14     0C 50 05 F1 | 	add	fp, #12
07d18     A8 74 02 FB | 	rdlong	arg01, fp
07d1c     10 50 85 F1 | 	sub	fp, #16
07d20     4A 01 00 FF 
07d24     41 76 06 F6 | 	mov	arg02, ##@LR__1937
07d28     58 B6 B0 FD | 	call	#_json_property_to_int_0646
07d2c     34 8C 06 F1 | 	add	local01, #52
07d30     46 35 62 FC | 	wrlong	result1, local01
07d34     04 50 05 F1 | 	add	fp, #4
07d38     A8 8C 02 FB | 	rdlong	local01, fp
07d3c     38 8C 06 F1 | 	add	local01, #56
07d40     0C 50 05 F1 | 	add	fp, #12
07d44     A8 74 02 FB | 	rdlong	arg01, fp
07d48     10 50 85 F1 | 	sub	fp, #16
07d4c     4A 01 00 FF 
07d50     48 76 06 F6 | 	mov	arg02, ##@LR__1938
07d54     9C B5 B0 FD | 	call	#_json_property_to_string_0644
07d58     1A 77 02 F6 | 	mov	arg02, result1
07d5c     46 75 02 F6 | 	mov	arg01, local01
07d60     0A 78 06 F6 | 	mov	arg03, #10
07d64     14 E1 BF FD | 	call	#_strncpy
07d68     04 50 05 F1 | 	add	fp, #4
07d6c     A8 8C 02 FB | 	rdlong	local01, fp
07d70     0C 50 05 F1 | 	add	fp, #12
07d74     A8 74 02 FB | 	rdlong	arg01, fp
07d78     10 50 85 F1 | 	sub	fp, #16
07d7c     4A 01 00 FF 
07d80     4D 76 06 F6 | 	mov	arg02, ##@LR__1939
07d84     FC B5 B0 FD | 	call	#_json_property_to_int_0646
07d88     44 8C 06 F1 | 	add	local01, #68
07d8c     46 35 62 FC | 	wrlong	result1, local01
07d90     10 50 05 F1 | 	add	fp, #16
07d94     A8 74 02 FB | 	rdlong	arg01, fp
07d98     10 50 85 F1 | 	sub	fp, #16
07d9c     4A 01 00 FF 
07da0     58 76 06 F6 | 	mov	arg02, ##@LR__1940
07da4     04 E4 BF FD | 	call	#_json_getProperty
07da8     01 00 00 FF 
07dac     08 50 05 F1 | 	add	fp, ##520
07db0     A8 34 62 FC | 	wrlong	result1, fp
07db4     04 50 05 F1 | 	add	fp, #4
07db8     A8 00 68 FC | 	wrlong	#0, fp
07dbc     04 50 85 F1 | 	sub	fp, #4
07dc0     A8 74 02 FB | 	rdlong	arg01, fp
07dc4                 | ' {
07dc4                 | '     return json->u.c.child;
07dc4     08 74 06 F1 | 	add	arg01, #8
07dc8     3A 8D 02 FB | 	rdlong	local01, arg01
07dcc     08 50 05 F1 | 	add	fp, #8
07dd0     A8 8C 62 FC | 	wrlong	local01, fp
07dd4     01 00 00 FF 
07dd8     10 50 85 F1 | 	sub	fp, ##528
07ddc                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
07ddc                 | LR__0273
07ddc     01 00 00 FF 
07de0     10 50 05 F1 | 	add	fp, ##528
07de4     A8 8C 0A FB | 	rdlong	local01, fp wz
07de8     01 00 00 FF 
07dec     10 50 85 F1 | 	sub	fp, ##528
07df0     70 00 90 AD |  if_e	jmp	#LR__0274
07df4     01 00 00 FF 
07df8     0C 50 05 F1 | 	add	fp, ##524
07dfc     A8 8C 02 FB | 	rdlong	local01, fp
07e00     32 8C 06 FD | 	qmul	local01, #50
07e04     F8 51 85 F1 | 	sub	fp, #504
07e08                 | ' {
07e08                 | '     return property->u.value;
07e08     32 78 06 F6 | 	mov	arg03, #50
07e0c     18 8C 62 FD | 	getqx	local01
07e10     A8 8C 02 F1 | 	add	local01, fp
07e14     FC 51 05 F1 | 	add	fp, #508
07e18     A8 74 02 FB | 	rdlong	arg01, fp
07e1c     01 00 00 FF 
07e20     10 50 85 F1 | 	sub	fp, ##528
07e24     08 74 06 F1 | 	add	arg01, #8
07e28     3A 77 02 FB | 	rdlong	arg02, arg01
07e2c     46 75 02 F6 | 	mov	arg01, local01
07e30     48 E0 BF FD | 	call	#_strncpy
07e34     01 00 00 FF 
07e38     0C 50 05 F1 | 	add	fp, ##524
07e3c     A8 8C 02 FB | 	rdlong	local01, fp
07e40     01 8C 06 F1 | 	add	local01, #1
07e44     A8 8C 62 FC | 	wrlong	local01, fp
07e48     04 50 05 F1 | 	add	fp, #4
07e4c     A8 74 02 FB | 	rdlong	arg01, fp
07e50                 | ' {
07e50                 | '     return json->sibling;
07e50     3A 35 02 FB | 	rdlong	result1, arg01
07e54     A8 34 62 FC | 	wrlong	result1, fp
07e58     01 00 00 FF 
07e5c     10 50 85 F1 | 	sub	fp, ##528
07e60     78 FF 9F FD | 	jmp	#LR__0273
07e64                 | LR__0274
07e64     04 50 05 F1 | 	add	fp, #4
07e68     A8 8C 02 FB | 	rdlong	local01, fp
07e6c     01 00 00 FF 
07e70     08 50 05 F1 | 	add	fp, ##520
07e74     A8 8E 02 FB | 	rdlong	local02, fp
07e78     48 8C 06 F1 | 	add	local01, #72
07e7c     46 8F 62 FC | 	wrlong	local02, local01
07e80     08 50 05 F1 | 	add	fp, #8
07e84     A8 00 68 FC | 	wrlong	#0, fp
07e88     01 00 00 FF 
07e8c     14 50 85 F1 | 	sub	fp, ##532
07e90                 | '     {
07e90                 | '         strncpy(filenames[index], json_getValue(property),  50 );
07e90                 | '         index++;
07e90                 | '     }
07e90                 | '     set->quartetCount = index;
07e90                 | ' 
07e90                 | '     for (int i = 0; i < set->quartetCount; i++)
07e90                 | LR__0275
07e90     04 50 05 F1 | 	add	fp, #4
07e94     A8 8C 02 FB | 	rdlong	local01, fp
07e98     01 00 00 FF 
07e9c     10 50 05 F1 | 	add	fp, ##528
07ea0     A8 8E 02 FB | 	rdlong	local02, fp
07ea4     01 00 00 FF 
07ea8     14 50 85 F1 | 	sub	fp, ##532
07eac     48 8C 06 F1 | 	add	local01, #72
07eb0     46 8D 02 FB | 	rdlong	local01, local01
07eb4     46 8F 52 F2 | 	cmps	local02, local01 wc
07eb8     D0 00 90 3D |  if_ae	jmp	#LR__0276
07ebc     00 74 06 F6 | 	mov	arg01, #0
07ec0     84 0C B2 FD | 	call	#__system___getiolock_1205
07ec4     1A 75 02 F6 | 	mov	arg01, result1
07ec8     54 D4 B1 FD | 	call	#__system___lockmem
07ecc     4A 01 00 FF 
07ed0     61 76 06 F6 | 	mov	arg02, ##@LR__1941
07ed4     00 74 06 F6 | 	mov	arg01, #0
07ed8     00 78 06 F6 | 	mov	arg03, #0
07edc     D4 D9 B1 FD | 	call	#__system___basic_print_string
07ee0     01 00 00 FF 
07ee4     14 50 05 F1 | 	add	fp, ##532
07ee8     A8 8E 02 FB | 	rdlong	local02, fp
07eec     32 8E 06 FD | 	qmul	local02, #50
07ef0     01 00 00 FF 
07ef4     00 50 85 F1 | 	sub	fp, ##512
07ef8     00 74 06 F6 | 	mov	arg01, #0
07efc     00 78 06 F6 | 	mov	arg03, #0
07f00     18 76 62 FD | 	getqx	arg02
07f04     A8 76 02 F1 | 	add	arg02, fp
07f08     14 50 85 F1 | 	sub	fp, #20
07f0c     A4 D9 B1 FD | 	call	#__system___basic_print_string
07f10     00 74 06 F6 | 	mov	arg01, #0
07f14     0A 76 06 F6 | 	mov	arg02, #10
07f18     00 78 06 F6 | 	mov	arg03, #0
07f1c     48 D9 B1 FD | 	call	#__system___basic_print_char
07f20     00 74 06 F6 | 	mov	arg01, #0
07f24     20 0C B2 FD | 	call	#__system___getiolock_1205
07f28     1A 01 68 FC | 	wrlong	#0, result1
07f2c     01 00 00 FF 
07f30     14 50 05 F1 | 	add	fp, ##532
07f34     A8 8E 02 FB | 	rdlong	local02, fp
07f38     32 8E 06 FD | 	qmul	local02, #50
07f3c     18 74 62 FD | 	getqx	arg01
07f40     64 8E 06 FD | 	qmul	local02, #100
07f44     01 00 00 FF 
07f48     00 50 85 F1 | 	sub	fp, ##512
07f4c     A8 74 02 F1 | 	add	arg01, fp
07f50     10 50 85 F1 | 	sub	fp, #16
07f54     A8 8E 02 FB | 	rdlong	local02, fp
07f58     04 50 85 F1 | 	sub	fp, #4
07f5c     4C 8E 06 F1 | 	add	local02, #76
07f60     18 76 62 FD | 	getqx	arg02
07f64     47 77 02 F1 | 	add	arg02, local02
07f68     40 00 B0 FD | 	call	#_json_to_motion_quartet
07f6c     01 00 00 FF 
07f70     14 50 05 F1 | 	add	fp, ##532
07f74     A8 8E 02 FB | 	rdlong	local02, fp
07f78     01 8E 06 F1 | 	add	local02, #1
07f7c     A8 8E 62 FC | 	wrlong	local02, fp
07f80     01 00 00 FF 
07f84     14 50 85 F1 | 	sub	fp, ##532
07f88     04 FF 9F FD | 	jmp	#LR__0275
07f8c                 | LR__0276
07f8c     B8 00 00 FF 
07f90     DC D6 05 F1 | 	add	ptr__dat__, ##94428
07f94     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
07f98     B8 00 00 FF 
07f9c     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
07fa0                 | LR__0277
07fa0     A8 F0 03 F6 | 	mov	ptra, fp
07fa4     B3 00 A0 FD | 	call	#popregs_
07fa8                 | _json_to_motion_set_ret
07fa8     2D 00 64 FD | 	ret
07fac                 | 
07fac                 | _json_to_motion_quartet
07fac     03 4C 05 F6 | 	mov	COUNT_, #3
07fb0     A9 00 A0 FD | 	call	#pushregs_
07fb4     3A 8D 02 F6 | 	mov	local01, arg01
07fb8     3B 8F 02 F6 | 	mov	local02, arg02
07fbc     00 74 06 F6 | 	mov	arg01, #0
07fc0     84 0B B2 FD | 	call	#__system___getiolock_1205
07fc4     1A 75 02 F6 | 	mov	arg01, result1
07fc8     54 D3 B1 FD | 	call	#__system___lockmem
07fcc     4A 01 00 FF 
07fd0     76 76 06 F6 | 	mov	arg02, ##@LR__1942
07fd4     00 74 06 F6 | 	mov	arg01, #0
07fd8     00 78 06 F6 | 	mov	arg03, #0
07fdc     D4 D8 B1 FD | 	call	#__system___basic_print_string
07fe0     00 74 06 F6 | 	mov	arg01, #0
07fe4     0A 76 06 F6 | 	mov	arg02, #10
07fe8     00 78 06 F6 | 	mov	arg03, #0
07fec     78 D8 B1 FD | 	call	#__system___basic_print_char
07ff0     00 74 06 F6 | 	mov	arg01, #0
07ff4     50 0B B2 FD | 	call	#__system___getiolock_1205
07ff8     1A 01 68 FC | 	wrlong	#0, result1
07ffc     4A 01 00 FF 
08000     83 76 06 F6 | 	mov	arg02, ##@LR__1943
08004     46 75 02 F6 | 	mov	arg01, local01
08008     E8 9D BF FD | 	call	#_fopen
0800c     1A 91 0A F6 | 	mov	local03, result1 wz
08010     54 00 90 5D |  if_ne	jmp	#LR__0278
08014     00 74 06 F6 | 	mov	arg01, #0
08018     2C 0B B2 FD | 	call	#__system___getiolock_1205
0801c     1A 75 02 F6 | 	mov	arg01, result1
08020     FC D2 B1 FD | 	call	#__system___lockmem
08024     4A 01 00 FF 
08028     85 76 06 F6 | 	mov	arg02, ##@LR__1944
0802c     00 74 06 F6 | 	mov	arg01, #0
08030     00 78 06 F6 | 	mov	arg03, #0
08034     7C D8 B1 FD | 	call	#__system___basic_print_string
08038     00 74 06 F6 | 	mov	arg01, #0
0803c     46 77 02 F6 | 	mov	arg02, local01
08040     00 78 06 F6 | 	mov	arg03, #0
08044     6C D8 B1 FD | 	call	#__system___basic_print_string
08048     00 74 06 F6 | 	mov	arg01, #0
0804c     0A 76 06 F6 | 	mov	arg02, #10
08050     00 78 06 F6 | 	mov	arg03, #0
08054     10 D8 B1 FD | 	call	#__system___basic_print_char
08058     00 74 06 F6 | 	mov	arg01, #0
0805c     E8 0A B2 FD | 	call	#__system___getiolock_1205
08060     1A 01 68 FC | 	wrlong	#0, result1
08064                 | '         return  (0) ;
08064     68 03 90 FD | 	jmp	#LR__0279
08068                 | LR__0278
08068     00 74 06 F6 | 	mov	arg01, #0
0806c     D8 0A B2 FD | 	call	#__system___getiolock_1205
08070     1A 75 02 F6 | 	mov	arg01, result1
08074     A8 D2 B1 FD | 	call	#__system___lockmem
08078     4A 01 00 FF 
0807c     99 76 06 F6 | 	mov	arg02, ##@LR__1945
08080     00 74 06 F6 | 	mov	arg01, #0
08084     00 78 06 F6 | 	mov	arg03, #0
08088     28 D8 B1 FD | 	call	#__system___basic_print_string
0808c     00 74 06 F6 | 	mov	arg01, #0
08090     0A 76 06 F6 | 	mov	arg02, #10
08094     00 78 06 F6 | 	mov	arg03, #0
08098     CC D7 B1 FD | 	call	#__system___basic_print_char
0809c     00 74 06 F6 | 	mov	arg01, #0
080a0     A4 0A B2 FD | 	call	#__system___getiolock_1205
080a4     1A 01 68 FC | 	wrlong	#0, result1
080a8     B8 00 00 FF 
080ac     DC D6 05 F1 | 	add	ptr__dat__, ##94428
080b0     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
080b4     B8 00 00 FF 
080b8     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
080bc     48 75 02 F6 | 	mov	arg01, local03
080c0     00 76 06 F6 | 	mov	arg02, #0
080c4     02 78 06 F6 | 	mov	arg03, #2
080c8     94 9F BF FD | 	call	#_fseek
080cc     48 75 02 F6 | 	mov	arg01, local03
080d0     E8 9F BF FD | 	call	#_ftell
080d4     1A 8D 02 F6 | 	mov	local01, result1
080d8     48 75 02 F6 | 	mov	arg01, local03
080dc     00 76 06 F6 | 	mov	arg02, #0
080e0     00 78 06 F6 | 	mov	arg03, #0
080e4     78 9F BF FD | 	call	#_fseek
080e8     AC 00 00 FF 
080ec     6A D7 05 F1 | 	add	ptr__dat__, ##88426
080f0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
080f4     AC 00 00 FF 
080f8     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
080fc     46 77 02 F6 | 	mov	arg02, local01
08100     01 78 06 F6 | 	mov	arg03, #1
08104     48 7B 02 F6 | 	mov	arg04, local03
08108     D0 9E BF FD | 	call	#_fread
0810c     48 75 02 F6 | 	mov	arg01, local03
08110                 | ' {
08110                 | '     return _closeraw(f);
08110     E8 8E BF FD | 	call	#__closeraw
08114     AC 00 00 FF 
08118     6A D7 05 F1 | 	add	ptr__dat__, ##88426
0811c     EB 8C 02 F1 | 	add	local01, ptr__dat__
08120     46 01 48 FC | 	wrbyte	#0, local01
08124     00 74 06 F6 | 	mov	arg01, #0
08128     AC 00 00 FF 
0812c     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
08130     14 0A B2 FD | 	call	#__system___getiolock_1205
08134     1A 75 02 F6 | 	mov	arg01, result1
08138     E4 D1 B1 FD | 	call	#__system___lockmem
0813c     AC 00 00 FF 
08140     6A D7 05 F1 | 	add	ptr__dat__, ##88426
08144     EB 76 02 F6 | 	mov	arg02, ptr__dat__
08148     AC 00 00 FF 
0814c     6A D7 85 F1 | 	sub	ptr__dat__, ##88426
08150     00 74 06 F6 | 	mov	arg01, #0
08154     00 78 06 F6 | 	mov	arg03, #0
08158     58 D7 B1 FD | 	call	#__system___basic_print_string
0815c     00 74 06 F6 | 	mov	arg01, #0
08160     0A 76 06 F6 | 	mov	arg02, #10
08164     00 78 06 F6 | 	mov	arg03, #0
08168     FC D6 B1 FD | 	call	#__system___basic_print_char
0816c     00 74 06 F6 | 	mov	arg01, #0
08170     D4 09 B2 FD | 	call	#__system___getiolock_1205
08174     1A 01 68 FC | 	wrlong	#0, result1
08178     AC 00 00 FF 
0817c     6A D7 05 F1 | 	add	ptr__dat__, ##88426
08180     EB 74 02 F6 | 	mov	arg01, ptr__dat__
08184     03 00 00 FF 
08188     D2 D7 05 F1 | 	add	ptr__dat__, ##2002
0818c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
08190     B0 00 00 FF 
08194     3C D7 85 F1 | 	sub	ptr__dat__, ##90428
08198     C8 78 06 F6 | 	mov	arg03, #200
0819c     9C DF BF FD | 	call	#_json_create
081a0     1A 91 02 F6 | 	mov	local03, result1
081a4     00 74 06 F6 | 	mov	arg01, #0
081a8     9C 09 B2 FD | 	call	#__system___getiolock_1205
081ac     1A 75 02 F6 | 	mov	arg01, result1
081b0     6C D1 B1 FD | 	call	#__system___lockmem
081b4     4A 01 00 FF 
081b8     A5 76 06 F6 | 	mov	arg02, ##@LR__1946
081bc     00 74 06 F6 | 	mov	arg01, #0
081c0     00 78 06 F6 | 	mov	arg03, #0
081c4     EC D6 B1 FD | 	call	#__system___basic_print_string
081c8     00 74 06 F6 | 	mov	arg01, #0
081cc     0A 76 06 F6 | 	mov	arg02, #10
081d0     00 78 06 F6 | 	mov	arg03, #0
081d4     90 D6 B1 FD | 	call	#__system___basic_print_char
081d8     00 74 06 F6 | 	mov	arg01, #0
081dc     68 09 B2 FD | 	call	#__system___getiolock_1205
081e0     1A 01 68 FC | 	wrlong	#0, result1
081e4     4A 01 00 FF 
081e8     B2 76 06 F6 | 	mov	arg02, ##@LR__1947
081ec     48 75 02 F6 | 	mov	arg01, local03
081f0     00 B1 B0 FD | 	call	#_json_property_to_string_0644
081f4     1A 77 02 F6 | 	mov	arg02, result1
081f8     47 75 02 F6 | 	mov	arg01, local02
081fc     32 78 06 F6 | 	mov	arg03, #50
08200     78 DC BF FD | 	call	#_strncpy
08204     00 74 06 F6 | 	mov	arg01, #0
08208     3C 09 B2 FD | 	call	#__system___getiolock_1205
0820c     1A 75 02 F6 | 	mov	arg01, result1
08210     0C D1 B1 FD | 	call	#__system___lockmem
08214     4A 01 00 FF 
08218     B7 76 06 F6 | 	mov	arg02, ##@LR__1948
0821c     00 74 06 F6 | 	mov	arg01, #0
08220     00 78 06 F6 | 	mov	arg03, #0
08224     8C D6 B1 FD | 	call	#__system___basic_print_string
08228     00 74 06 F6 | 	mov	arg01, #0
0822c     0A 76 06 F6 | 	mov	arg02, #10
08230     00 78 06 F6 | 	mov	arg03, #0
08234     30 D6 B1 FD | 	call	#__system___basic_print_char
08238     00 74 06 F6 | 	mov	arg01, #0
0823c     08 09 B2 FD | 	call	#__system___getiolock_1205
08240     1A 01 68 FC | 	wrlong	#0, result1
08244     4A 01 00 FF 
08248     C8 76 06 F6 | 	mov	arg02, ##@LR__1949
0824c     48 75 02 F6 | 	mov	arg01, local03
08250     30 B1 B0 FD | 	call	#_json_property_to_int_0646
08254     1A 8D 02 F6 | 	mov	local01, result1
08258     34 8E 06 F1 | 	add	local02, #52
0825c     47 8D 62 FC | 	wrlong	local01, local02
08260     00 74 06 F6 | 	mov	arg01, #0
08264     E0 08 B2 FD | 	call	#__system___getiolock_1205
08268     1A 75 02 F6 | 	mov	arg01, result1
0826c     B0 D0 B1 FD | 	call	#__system___lockmem
08270     4A 01 00 FF 
08274     D1 76 06 F6 | 	mov	arg02, ##@LR__1950
08278     00 74 06 F6 | 	mov	arg01, #0
0827c     00 78 06 F6 | 	mov	arg03, #0
08280     30 D6 B1 FD | 	call	#__system___basic_print_string
08284     00 74 06 F6 | 	mov	arg01, #0
08288     0A 76 06 F6 | 	mov	arg02, #10
0828c     00 78 06 F6 | 	mov	arg03, #0
08290     D4 D5 B1 FD | 	call	#__system___basic_print_char
08294     00 74 06 F6 | 	mov	arg01, #0
08298     AC 08 B2 FD | 	call	#__system___getiolock_1205
0829c     1A 01 68 FC | 	wrlong	#0, result1
082a0     04 8E 06 F1 | 	add	local02, #4
082a4     47 75 02 F6 | 	mov	arg01, local02
082a8     4A 01 00 FF 
082ac     E4 78 06 F6 | 	mov	arg03, ##@LR__1951
082b0     48 77 02 F6 | 	mov	arg02, local03
082b4     14 B2 B0 FD | 	call	#_json_property_to_double_array_0652
082b8     00 74 06 F6 | 	mov	arg01, #0
082bc     88 08 B2 FD | 	call	#__system___getiolock_1205
082c0     1A 75 02 F6 | 	mov	arg01, result1
082c4     58 D0 B1 FD | 	call	#__system___lockmem
082c8     4A 01 00 FF 
082cc     EF 76 06 F6 | 	mov	arg02, ##@LR__1952
082d0     00 74 06 F6 | 	mov	arg01, #0
082d4     00 78 06 F6 | 	mov	arg03, #0
082d8     D8 D5 B1 FD | 	call	#__system___basic_print_string
082dc     47 77 02 FB | 	rdlong	arg02, local02
082e0     00 74 06 F6 | 	mov	arg01, #0
082e4     00 78 06 F6 | 	mov	arg03, #0
082e8     66 7A 06 F6 | 	mov	arg04, #102
082ec     F8 F3 B1 FD | 	call	#__system___basic_print_float
082f0     4A 01 00 FF 
082f4     FB 76 06 F6 | 	mov	arg02, ##@LR__1953
082f8     00 74 06 F6 | 	mov	arg01, #0
082fc     00 78 06 F6 | 	mov	arg03, #0
08300     B0 D5 B1 FD | 	call	#__system___basic_print_string
08304     00 74 06 F6 | 	mov	arg01, #0
08308     0A 76 06 F6 | 	mov	arg02, #10
0830c     00 78 06 F6 | 	mov	arg03, #0
08310     54 D5 B1 FD | 	call	#__system___basic_print_char
08314     00 74 06 F6 | 	mov	arg01, #0
08318     2C 08 B2 FD | 	call	#__system___getiolock_1205
0831c     1A 01 68 FC | 	wrlong	#0, result1
08320     00 74 06 F6 | 	mov	arg01, #0
08324     20 08 B2 FD | 	call	#__system___getiolock_1205
08328     1A 75 02 F6 | 	mov	arg01, result1
0832c     F0 CF B1 FD | 	call	#__system___lockmem
08330     4A 01 00 FF 
08334     FD 76 06 F6 | 	mov	arg02, ##@LR__1954
08338     00 74 06 F6 | 	mov	arg01, #0
0833c     00 78 06 F6 | 	mov	arg03, #0
08340     70 D5 B1 FD | 	call	#__system___basic_print_string
08344     00 74 06 F6 | 	mov	arg01, #0
08348     0A 76 06 F6 | 	mov	arg02, #10
0834c     00 78 06 F6 | 	mov	arg03, #0
08350     14 D5 B1 FD | 	call	#__system___basic_print_char
08354     00 74 06 F6 | 	mov	arg01, #0
08358     EC 07 B2 FD | 	call	#__system___getiolock_1205
0835c     1A 01 68 FC | 	wrlong	#0, result1
08360     4A 01 00 FF 
08364     0B 77 06 F6 | 	mov	arg02, ##@LR__1955
08368     48 75 02 F6 | 	mov	arg01, local03
0836c     C0 B0 B0 FD | 	call	#_json_property_to_double_0648
08370     1A 91 02 F6 | 	mov	local03, result1
08374     28 8E 06 F1 | 	add	local02, #40
08378     47 91 62 FC | 	wrlong	local03, local02
0837c     00 74 06 F6 | 	mov	arg01, #0
08380     C4 07 B2 FD | 	call	#__system___getiolock_1205
08384     1A 75 02 F6 | 	mov	arg01, result1
08388     94 CF B1 FD | 	call	#__system___lockmem
0838c     4A 01 00 FF 
08390     11 77 06 F6 | 	mov	arg02, ##@LR__1956
08394     00 74 06 F6 | 	mov	arg01, #0
08398     00 78 06 F6 | 	mov	arg03, #0
0839c     14 D5 B1 FD | 	call	#__system___basic_print_string
083a0     00 74 06 F6 | 	mov	arg01, #0
083a4     0A 76 06 F6 | 	mov	arg02, #10
083a8     00 78 06 F6 | 	mov	arg03, #0
083ac     B8 D4 B1 FD | 	call	#__system___basic_print_char
083b0     00 74 06 F6 | 	mov	arg01, #0
083b4     90 07 B2 FD | 	call	#__system___getiolock_1205
083b8     1A 01 68 FC | 	wrlong	#0, result1
083bc     B8 00 00 FF 
083c0     DC D6 05 F1 | 	add	ptr__dat__, ##94428
083c4     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
083c8     B8 00 00 FF 
083cc     DC D6 85 F1 | 	sub	ptr__dat__, ##94428
083d0                 | LR__0279
083d0     A8 F0 03 F6 | 	mov	ptra, fp
083d4     B3 00 A0 FD | 	call	#popregs_
083d8                 | _json_to_motion_quartet_ret
083d8     2D 00 64 FD | 	ret
083dc                 | 
083dc                 | _json_print_machine_profile
083dc     01 4C 05 F6 | 	mov	COUNT_, #1
083e0     A9 00 A0 FD | 	call	#pushregs_
083e4     3A 8D 02 F6 | 	mov	local01, arg01
083e8     00 74 06 F6 | 	mov	arg01, #0
083ec     58 07 B2 FD | 	call	#__system___getiolock_1205
083f0     1A 75 02 F6 | 	mov	arg01, result1
083f4     28 CF B1 FD | 	call	#__system___lockmem
083f8     4A 01 00 FF 
083fc     16 77 06 F6 | 	mov	arg02, ##@LR__1957
08400     00 74 06 F6 | 	mov	arg01, #0
08404     00 78 06 F6 | 	mov	arg03, #0
08408     A8 D4 B1 FD | 	call	#__system___basic_print_string
0840c     00 74 06 F6 | 	mov	arg01, #0
08410     46 77 02 F6 | 	mov	arg02, local01
08414     00 78 06 F6 | 	mov	arg03, #0
08418     98 D4 B1 FD | 	call	#__system___basic_print_string
0841c     00 74 06 F6 | 	mov	arg01, #0
08420     0A 76 06 F6 | 	mov	arg02, #10
08424     00 78 06 F6 | 	mov	arg03, #0
08428     3C D4 B1 FD | 	call	#__system___basic_print_char
0842c     00 74 06 F6 | 	mov	arg01, #0
08430     14 07 B2 FD | 	call	#__system___getiolock_1205
08434     1A 01 68 FC | 	wrlong	#0, result1
08438     00 74 06 F6 | 	mov	arg01, #0
0843c     08 07 B2 FD | 	call	#__system___getiolock_1205
08440     1A 75 02 F6 | 	mov	arg01, result1
08444     D8 CE B1 FD | 	call	#__system___lockmem
08448     4A 01 00 FF 
0844c     1C 77 06 F6 | 	mov	arg02, ##@LR__1958
08450     00 74 06 F6 | 	mov	arg01, #0
08454     00 78 06 F6 | 	mov	arg03, #0
08458     58 D4 B1 FD | 	call	#__system___basic_print_string
0845c     14 8C 06 F1 | 	add	local01, #20
08460     46 77 02 FB | 	rdlong	arg02, local01
08464     00 74 06 F6 | 	mov	arg01, #0
08468     00 78 06 F6 | 	mov	arg03, #0
0846c     0A 7A 06 F6 | 	mov	arg04, #10
08470     84 D4 B1 FD | 	call	#__system___basic_print_integer
08474     00 74 06 F6 | 	mov	arg01, #0
08478     0A 76 06 F6 | 	mov	arg02, #10
0847c     00 78 06 F6 | 	mov	arg03, #0
08480     E4 D3 B1 FD | 	call	#__system___basic_print_char
08484     00 74 06 F6 | 	mov	arg01, #0
08488     BC 06 B2 FD | 	call	#__system___getiolock_1205
0848c     1A 01 68 FC | 	wrlong	#0, result1
08490     04 8C 06 F1 | 	add	local01, #4
08494     46 75 02 F6 | 	mov	arg01, local01
08498     B4 B6 B0 FD | 	call	#_json_print_machine_configuration_0675
0849c     64 8C 06 F1 | 	add	local01, #100
084a0     46 75 02 F6 | 	mov	arg01, local01
084a4     10 BB B0 FD | 	call	#_json_print_machine_performance_0676
084a8     A8 F0 03 F6 | 	mov	ptra, fp
084ac     B3 00 A0 FD | 	call	#popregs_
084b0                 | _json_print_machine_profile_ret
084b0     2D 00 64 FD | 	ret
084b4                 | 
084b4                 | _json_print_motion_profile
084b4     02 4C 05 F6 | 	mov	COUNT_, #2
084b8     A9 00 A0 FD | 	call	#pushregs_
084bc     3A 8D 02 F6 | 	mov	local01, arg01
084c0     00 74 06 F6 | 	mov	arg01, #0
084c4     80 06 B2 FD | 	call	#__system___getiolock_1205
084c8     1A 75 02 F6 | 	mov	arg01, result1
084cc     50 CE B1 FD | 	call	#__system___lockmem
084d0     4A 01 00 FF 
084d4     24 77 06 F6 | 	mov	arg02, ##@LR__1959
084d8     00 74 06 F6 | 	mov	arg01, #0
084dc     00 78 06 F6 | 	mov	arg03, #0
084e0     D0 D3 B1 FD | 	call	#__system___basic_print_string
084e4     00 74 06 F6 | 	mov	arg01, #0
084e8     46 77 02 F6 | 	mov	arg02, local01
084ec     00 78 06 F6 | 	mov	arg03, #0
084f0     C0 D3 B1 FD | 	call	#__system___basic_print_string
084f4     00 74 06 F6 | 	mov	arg01, #0
084f8     0A 76 06 F6 | 	mov	arg02, #10
084fc     00 78 06 F6 | 	mov	arg03, #0
08500     64 D3 B1 FD | 	call	#__system___basic_print_char
08504     00 74 06 F6 | 	mov	arg01, #0
08508     3C 06 B2 FD | 	call	#__system___getiolock_1205
0850c     1A 01 68 FC | 	wrlong	#0, result1
08510     00 74 06 F6 | 	mov	arg01, #0
08514     30 06 B2 FD | 	call	#__system___getiolock_1205
08518     1A 75 02 F6 | 	mov	arg01, result1
0851c     00 CE B1 FD | 	call	#__system___lockmem
08520     4A 01 00 FF 
08524     2A 77 06 F6 | 	mov	arg02, ##@LR__1960
08528     00 74 06 F6 | 	mov	arg01, #0
0852c     00 78 06 F6 | 	mov	arg03, #0
08530     80 D3 B1 FD | 	call	#__system___basic_print_string
08534     34 8C 06 F1 | 	add	local01, #52
08538     46 77 02 FB | 	rdlong	arg02, local01
0853c     34 8C 86 F1 | 	sub	local01, #52
08540     00 74 06 F6 | 	mov	arg01, #0
08544     00 78 06 F6 | 	mov	arg03, #0
08548     0A 7A 06 F6 | 	mov	arg04, #10
0854c     A8 D3 B1 FD | 	call	#__system___basic_print_integer
08550     00 74 06 F6 | 	mov	arg01, #0
08554     0A 76 06 F6 | 	mov	arg02, #10
08558     00 78 06 F6 | 	mov	arg03, #0
0855c     08 D3 B1 FD | 	call	#__system___basic_print_char
08560     00 74 06 F6 | 	mov	arg01, #0
08564     E0 05 B2 FD | 	call	#__system___getiolock_1205
08568     1A 01 68 FC | 	wrlong	#0, result1
0856c     00 74 06 F6 | 	mov	arg01, #0
08570     D4 05 B2 FD | 	call	#__system___getiolock_1205
08574     1A 75 02 F6 | 	mov	arg01, result1
08578     A4 CD B1 FD | 	call	#__system___lockmem
0857c     4A 01 00 FF 
08580     32 77 06 F6 | 	mov	arg02, ##@LR__1961
08584     00 74 06 F6 | 	mov	arg01, #0
08588     00 78 06 F6 | 	mov	arg03, #0
0858c     24 D3 B1 FD | 	call	#__system___basic_print_string
08590     00 74 06 F6 | 	mov	arg01, #0
08594     0A 76 06 F6 | 	mov	arg02, #10
08598     00 78 06 F6 | 	mov	arg03, #0
0859c     C8 D2 B1 FD | 	call	#__system___basic_print_char
085a0     00 74 06 F6 | 	mov	arg01, #0
085a4     A0 05 B2 FD | 	call	#__system___getiolock_1205
085a8     1A 01 68 FC | 	wrlong	#0, result1
085ac     00 8E 06 F6 | 	mov	local02, #0
085b0                 | '     for (int i = 0; i < profile->setCount; i++)
085b0                 | LR__0280
085b0     38 8C 06 F1 | 	add	local01, #56
085b4     46 75 02 FB | 	rdlong	arg01, local01
085b8     38 8C 86 F1 | 	sub	local01, #56
085bc     3A 8F 52 F2 | 	cmps	local02, arg01 wc
085c0     24 00 90 3D |  if_ae	jmp	#LR__0281
085c4     02 00 00 FF 
085c8     34 8E 06 FD | 	qmul	local02, ##1076
085cc     3C 8C 06 F1 | 	add	local01, #60
085d0     18 74 62 FD | 	getqx	arg01
085d4     46 75 02 F1 | 	add	arg01, local01
085d8     10 BF B0 FD | 	call	#_json_print_motion_set
085dc     01 8E 06 F1 | 	add	local02, #1
085e0     3C 8C 86 F1 | 	sub	local01, #60
085e4     C8 FF 9F FD | 	jmp	#LR__0280
085e8                 | LR__0281
085e8     A8 F0 03 F6 | 	mov	ptra, fp
085ec     B3 00 A0 FD | 	call	#popregs_
085f0                 | _json_print_motion_profile_ret
085f0     2D 00 64 FD | 	ret
085f4                 | 
085f4                 | _raw_to_force
085f4     01 4C 05 F6 | 	mov	COUNT_, #1
085f8     A9 00 A0 FD | 	call	#pushregs_
085fc     3B 8D 02 F6 | 	mov	local01, arg02
08600                 | ' {
08600                 | '     return  __builtin_round(raw - configuration->forceGaugeZeroFactor)  / (configuration->forceGaugeScaleFactor);
08600     60 8C 06 F1 | 	add	local01, #96
08604     46 35 02 FB | 	rdlong	result1, local01
08608     1A 75 82 F1 | 	sub	arg01, result1
0860c     5C E7 B1 FD | 	call	#__system___float_fromint
08610     1A 75 02 F6 | 	mov	arg01, result1
08614     01 76 06 F6 | 	mov	arg02, #1
08618     74 EF B1 FD | 	call	#__system___float_tointeger
0861c     1A 75 02 F6 | 	mov	arg01, result1
08620     48 E7 B1 FD | 	call	#__system___float_fromint
08624     1A 75 02 F6 | 	mov	arg01, result1
08628     04 8C 86 F1 | 	sub	local01, #4
0862c     46 77 02 FB | 	rdlong	arg02, local01
08630     8C EC B1 FD | 	call	#__system___float_div
08634     1A 75 02 F6 | 	mov	arg01, result1
08638     00 76 06 F6 | 	mov	arg02, #0
0863c     50 EF B1 FD | 	call	#__system___float_tointeger
08640     A8 F0 03 F6 | 	mov	ptra, fp
08644     B3 00 A0 FD | 	call	#popregs_
08648                 | _raw_to_force_ret
08648     2D 00 64 FD | 	ret
0864c                 | 
0864c                 | _force_gauge_get_raw
0864c     03 4C 05 F6 | 	mov	COUNT_, #3
08650     A9 00 A0 FD | 	call	#pushregs_
08654     3A 8D 02 F6 | 	mov	local01, arg01
08658     3B 8F 0A F6 | 	mov	local02, arg02 wz
0865c     47 01 68 5C |  if_ne	wrlong	#0, local02
08660     46 75 02 F6 | 	mov	arg01, local01
08664     01 76 06 F6 | 	mov	arg02, #1
08668     60 0E B1 FD | 	call	#_read_register_1606
0866c     1A 35 E2 F8 | 	getbyte	result1, result1, #0
08670     D8 34 0E F2 | 	cmp	result1, #216 wz
08674     50 00 90 AD |  if_e	jmp	#LR__0282
08678     00 74 06 F6 | 	mov	arg01, #0
0867c     C8 04 B2 FD | 	call	#__system___getiolock_1205
08680     1A 75 02 F6 | 	mov	arg01, result1
08684     98 CC B1 FD | 	call	#__system___lockmem
08688     4A 01 00 FF 
0868c     38 77 06 F6 | 	mov	arg02, ##@LR__1962
08690     00 74 06 F6 | 	mov	arg01, #0
08694     00 78 06 F6 | 	mov	arg03, #0
08698     18 D2 B1 FD | 	call	#__system___basic_print_string
0869c     00 74 06 F6 | 	mov	arg01, #0
086a0     0A 76 06 F6 | 	mov	arg02, #10
086a4     00 78 06 F6 | 	mov	arg03, #0
086a8     BC D1 B1 FD | 	call	#__system___basic_print_char
086ac     00 74 06 F6 | 	mov	arg01, #0
086b0     94 04 B2 FD | 	call	#__system___getiolock_1205
086b4     1A 01 68 FC | 	wrlong	#0, result1
086b8     00 8E 0E F2 | 	cmp	local02, #0 wz
086bc     47 31 69 5C |  if_ne	wrlong	#152, local02
086c0                 | '         seterror(err,FORCEGAUGE_CONNECTION_LOST);
086c0                 | '         return 0;
086c0     00 34 06 F6 | 	mov	result1, #0
086c4     74 00 90 FD | 	jmp	#LR__0283
086c8                 | LR__0282
086c8     46 75 02 F6 | 	mov	arg01, local01
086cc     02 76 06 F6 | 	mov	arg02, #2
086d0     F8 0D B1 FD | 	call	#_read_register_1606
086d4     0C 8C 06 F1 | 	add	local01, #12
086d8     55 74 06 F6 | 	mov	arg01, #85
086dc     C9 8E 02 F6 | 	mov	local02, objptr
086e0     46 93 01 F6 | 	mov	objptr, local01
086e4     1C 33 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
086e8     46 93 01 F6 | 	mov	objptr, local01
086ec     10 74 06 F6 | 	mov	arg01, #16
086f0     10 33 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
086f4     46 93 01 F6 | 	mov	objptr, local01
086f8     64 74 06 F6 | 	mov	arg01, #100
086fc     80 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
08700     46 93 01 F6 | 	mov	objptr, local01
08704     64 74 06 F6 | 	mov	arg01, #100
08708     74 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0870c     1A 91 02 F6 | 	mov	local03, result1
08710     46 93 01 F6 | 	mov	objptr, local01
08714     64 74 06 F6 | 	mov	arg01, #100
08718     64 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
0871c     08 34 66 F0 | 	shl	result1, #8
08720     1A 91 42 F5 | 	or	local03, result1
08724     64 74 06 F6 | 	mov	arg01, #100
08728     46 93 01 F6 | 	mov	objptr, local01
0872c     50 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
08730     47 93 01 F6 | 	mov	objptr, local02
08734     10 34 66 F0 | 	shl	result1, #16
08738                 | '     forceRaw |= forceGauge->serial.rxtime(100) << 8;
08738                 | '     forceRaw |= forceGauge->serial.rxtime(100) << 16;
08738                 | '     return forceRaw;
08738     48 35 42 F5 | 	or	result1, local03
0873c                 | LR__0283
0873c     A8 F0 03 F6 | 	mov	ptra, fp
08740     B3 00 A0 FD | 	call	#popregs_
08744                 | _force_gauge_get_raw_ret
08744     2D 00 64 FD | 	ret
08748                 | 
08748                 | _force_gauge_begin
08748     04 4C 05 F6 | 	mov	COUNT_, #4
0874c     A9 00 A0 FD | 	call	#pushregs_
08750     3A 8D 02 F6 | 	mov	local01, arg01
08754     3B 8F 02 F6 | 	mov	local02, arg02
08758     3C 91 02 F6 | 	mov	local03, arg03
0875c     64 74 06 F6 | 	mov	arg01, #100
08760     D4 CC B1 FD | 	call	#__system___waitms
08764     0C 8C 06 F1 | 	add	local01, #12
08768     47 75 02 F6 | 	mov	arg01, local02
0876c     48 77 02 F6 | 	mov	arg02, local03
08770     03 78 06 F6 | 	mov	arg03, #3
08774     4B 00 00 FF 
08778     00 7A 06 F6 | 	mov	arg04, ##38400
0877c     C9 90 02 F6 | 	mov	local03, objptr
08780     46 93 01 F6 | 	mov	objptr, local01
08784     90 2F B1 FD | 	call	#_jm_fullduplexserial_spin2_start
08788     46 93 01 F6 | 	mov	objptr, local01
0878c     55 74 06 F6 | 	mov	arg01, #85
08790     70 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08794     46 93 01 F6 | 	mov	objptr, local01
08798     0C 8C 86 F1 | 	sub	local01, #12
0879c     06 74 06 F6 | 	mov	arg01, #6
087a0     60 32 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
087a4     48 93 01 F6 | 	mov	objptr, local03
087a8     64 74 06 F6 | 	mov	arg01, #100
087ac     88 CC B1 FD | 	call	#__system___waitms
087b0     46 75 02 F6 | 	mov	arg01, local01
087b4     01 76 06 F6 | 	mov	arg02, #1
087b8     D8 78 06 F6 | 	mov	arg03, #216
087bc     B8 0C B1 FD | 	call	#_write_register_1604
087c0     46 75 02 F6 | 	mov	arg01, local01
087c4     02 76 06 F6 | 	mov	arg02, #2
087c8     40 78 06 F6 | 	mov	arg03, #64
087cc     A8 0C B1 FD | 	call	#_write_register_1604
087d0     46 75 02 F6 | 	mov	arg01, local01
087d4     04 76 06 F6 | 	mov	arg02, #4
087d8     77 78 06 F6 | 	mov	arg03, #119
087dc     98 0C B1 FD | 	call	#_write_register_1604
087e0     46 75 02 F6 | 	mov	arg01, local01
087e4     01 76 06 F6 | 	mov	arg02, #1
087e8     E0 0C B1 FD | 	call	#_read_register_1606
087ec     1A 35 E2 F8 | 	getbyte	result1, result1, #0
087f0     D8 34 0E F2 | 	cmp	result1, #216 wz
087f4                 | '     {
087f4                 | '         return FORCEGAUGE_NOT_RESPONDING;
087f4     97 34 06 56 |  if_ne	mov	result1, #151
087f8     64 00 90 5D |  if_ne	jmp	#LR__0284
087fc     46 75 02 F6 | 	mov	arg01, local01
08800     02 76 06 F6 | 	mov	arg02, #2
08804     C4 0C B1 FD | 	call	#_read_register_1606
08808     1A 35 E2 F8 | 	getbyte	result1, result1, #0
0880c     40 34 0E F2 | 	cmp	result1, #64 wz
08810                 | '     {
08810                 | '         return FORCEGAUGE_NOT_RESPONDING;
08810     97 34 06 56 |  if_ne	mov	result1, #151
08814     48 00 90 5D |  if_ne	jmp	#LR__0284
08818     46 75 02 F6 | 	mov	arg01, local01
0881c     04 76 06 F6 | 	mov	arg02, #4
08820     A8 0C B1 FD | 	call	#_read_register_1606
08824     1A 35 E2 F8 | 	getbyte	result1, result1, #0
08828     77 34 0E F2 | 	cmp	result1, #119 wz
0882c                 | '     {
0882c                 | '         return FORCEGAUGE_NOT_RESPONDING;
0882c     97 34 06 56 |  if_ne	mov	result1, #151
08830     2C 00 90 5D |  if_ne	jmp	#LR__0284
08834     0C 8C 06 F1 | 	add	local01, #12
08838     46 93 02 F6 | 	mov	local04, local01
0883c     55 74 06 F6 | 	mov	arg01, #85
08840     C9 90 02 F6 | 	mov	local03, objptr
08844     49 93 01 F6 | 	mov	objptr, local04
08848     B8 31 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
0884c     46 93 01 F6 | 	mov	objptr, local01
08850     08 74 06 F6 | 	mov	arg01, #8
08854     AC 31 B1 FD | 	call	#_jm_fullduplexserial_spin2_tx
08858     48 93 01 F6 | 	mov	objptr, local03
0885c                 | '     }
0885c                 | ' 
0885c                 | '     forceGauge->serial.tx(0x55);
0885c                 | '     forceGauge->serial.tx(0x08);
0885c                 | '     return SUCCESS;
0885c     00 34 06 F6 | 	mov	result1, #0
08860                 | LR__0284
08860     A8 F0 03 F6 | 	mov	ptra, fp
08864     B3 00 A0 FD | 	call	#popregs_
08868                 | _force_gauge_begin_ret
08868     2D 00 64 FD | 	ret
0886c                 | 
0886c                 | _module_animation_switch_page_up
0886c     02 4C 05 F6 | 	mov	COUNT_, #2
08870     A9 00 A0 FD | 	call	#pushregs_
08874     3A 8D 02 F6 | 	mov	local01, arg01
08878     64 8E 06 F6 | 	mov	local02, #100
0887c                 | ' 
0887c                 | '     for (int i = movePx; i <  600  - movePx; i += movePx)
0887c                 | LR__0285
0887c     F4 8F 56 F2 | 	cmps	local02, #500 wc
08880     6C 00 90 3D |  if_ae	jmp	#LR__0286
08884     46 75 02 F6 | 	mov	arg01, local01
08888     20 1C 00 FF 
0888c     00 76 06 F6 | 	mov	arg02, ##3686400
08890     0A 78 C6 F9 | 	decod	arg03, #10
08894     00 7A 06 F6 | 	mov	arg04, #0
08898     47 7D 02 F6 | 	mov	arg05, local02
0889c     00 7E 06 F6 | 	mov	arg06, #0
088a0     0A 80 C6 F9 | 	decod	arg07, #10
088a4     00 82 06 F6 | 	mov	arg08, #0
088a8     F4 85 06 F6 | 	mov	arg09, #500
088ac     0A 86 C6 F9 | 	decod	arg10, #10
088b0     64 88 06 F6 | 	mov	arg11, #100
088b4     00 BC BF FD | 	call	#_display_bte_memory_copy
088b8     46 75 02 F6 | 	mov	arg01, local01
088bc     00 76 06 F6 | 	mov	arg02, #0
088c0     0A 78 C6 F9 | 	decod	arg03, #10
088c4     00 7A 06 F6 | 	mov	arg04, #0
088c8     64 7C 06 F6 | 	mov	arg05, #100
088cc     00 7E 06 F6 | 	mov	arg06, #0
088d0     0A 80 C6 F9 | 	decod	arg07, #10
088d4     00 82 06 F6 | 	mov	arg08, #0
088d8     00 84 06 F6 | 	mov	arg09, #0
088dc     0A 86 C6 F9 | 	decod	arg10, #10
088e0     F4 89 06 F6 | 	mov	arg11, #500
088e4     D0 BB BF FD | 	call	#_display_bte_memory_copy
088e8     64 8E 06 F1 | 	add	local02, #100
088ec     8C FF 9F FD | 	jmp	#LR__0285
088f0                 | LR__0286
088f0     46 75 02 F6 | 	mov	arg01, local01
088f4     20 1C 00 FF 
088f8     00 76 06 F6 | 	mov	arg02, ##3686400
088fc     0A 78 C6 F9 | 	decod	arg03, #10
08900     00 7A 06 F6 | 	mov	arg04, #0
08904     00 7C 06 F6 | 	mov	arg05, #0
08908     00 7E 06 F6 | 	mov	arg06, #0
0890c     0A 80 C6 F9 | 	decod	arg07, #10
08910     00 82 06 F6 | 	mov	arg08, #0
08914     00 84 06 F6 | 	mov	arg09, #0
08918     0A 86 C6 F9 | 	decod	arg10, #10
0891c     01 00 00 FF 
08920     58 88 06 F6 | 	mov	arg11, ##600
08924     90 BB BF FD | 	call	#_display_bte_memory_copy
08928     A8 F0 03 F6 | 	mov	ptra, fp
0892c     B3 00 A0 FD | 	call	#popregs_
08930                 | _module_animation_switch_page_up_ret
08930     2D 00 64 FD | 	ret
08934                 | 
08934                 | _module_animation_switch_page_down
08934     02 4C 05 F6 | 	mov	COUNT_, #2
08938     A9 00 A0 FD | 	call	#pushregs_
0893c     3A 8D 02 F6 | 	mov	local01, arg01
08940     28 8E 06 F6 | 	mov	local02, #40
08944                 | '     for (int i = movePx; i <  600  - movePx; i += movePx)
08944                 | LR__0287
08944     01 00 00 FF 
08948     30 8E 56 F2 | 	cmps	local02, ##560 wc
0894c     44 00 90 3D |  if_ae	jmp	#LR__0288
08950     46 75 02 F6 | 	mov	arg01, local01
08954     01 00 00 FF 
08958     58 7C 06 F6 | 	mov	arg05, ##600
0895c     47 7D 82 F1 | 	sub	arg05, local02
08960     20 1C 00 FF 
08964     00 76 06 F6 | 	mov	arg02, ##3686400
08968     0A 78 C6 F9 | 	decod	arg03, #10
0896c     00 7A 06 F6 | 	mov	arg04, #0
08970     00 7E 06 F6 | 	mov	arg06, #0
08974     0A 80 C6 F9 | 	decod	arg07, #10
08978     00 82 06 F6 | 	mov	arg08, #0
0897c     00 84 06 F6 | 	mov	arg09, #0
08980     0A 86 C6 F9 | 	decod	arg10, #10
08984     47 89 02 F6 | 	mov	arg11, local02
08988     2C BB BF FD | 	call	#_display_bte_memory_copy
0898c     28 8E 06 F1 | 	add	local02, #40
08990     B0 FF 9F FD | 	jmp	#LR__0287
08994                 | LR__0288
08994     46 75 02 F6 | 	mov	arg01, local01
08998     20 1C 00 FF 
0899c     00 76 06 F6 | 	mov	arg02, ##3686400
089a0     0A 78 C6 F9 | 	decod	arg03, #10
089a4     00 7A 06 F6 | 	mov	arg04, #0
089a8     00 7C 06 F6 | 	mov	arg05, #0
089ac     00 7E 06 F6 | 	mov	arg06, #0
089b0     0A 80 C6 F9 | 	decod	arg07, #10
089b4     00 82 06 F6 | 	mov	arg08, #0
089b8     00 84 06 F6 | 	mov	arg09, #0
089bc     0A 86 C6 F9 | 	decod	arg10, #10
089c0     01 00 00 FF 
089c4     58 88 06 F6 | 	mov	arg11, ##600
089c8     EC BA BF FD | 	call	#_display_bte_memory_copy
089cc     A8 F0 03 F6 | 	mov	ptra, fp
089d0     B3 00 A0 FD | 	call	#popregs_
089d4                 | _module_animation_switch_page_down_ret
089d4     2D 00 64 FD | 	ret
089d8                 | 
089d8                 | _module_init
089d8     03 4C 05 F6 | 	mov	COUNT_, #3
089dc     A9 00 A0 FD | 	call	#pushregs_
089e0     3A 8D 02 F6 | 	mov	local01, arg01
089e4     3B 8F 02 F6 | 	mov	local02, arg02
089e8     46 8F 62 FC | 	wrlong	local02, local01
089ec     CC 8C 06 F1 | 	add	local01, #204
089f0     46 01 68 FC | 	wrlong	#0, local01
089f4     18 8C 06 F1 | 	add	local01, #24
089f8     46 01 68 FC | 	wrlong	#0, local01
089fc     34 8C 06 F1 | 	add	local01, #52
08a00     46 03 48 FC | 	wrbyte	#1, local01
08a04     04 8C 06 F1 | 	add	local01, #4
08a08     46 01 68 FC | 	wrlong	#0, local01
08a0c     04 8C 06 F1 | 	add	local01, #4
08a10     46 C9 68 FC | 	wrlong	#100, local01
08a14     14 8C 06 F1 | 	add	local01, #20
08a18     46 01 68 FC | 	wrlong	#0, local01
08a1c     04 8C 06 F1 | 	add	local01, #4
08a20     46 01 68 FC | 	wrlong	#0, local01
08a24     04 8C 06 F1 | 	add	local01, #4
08a28     46 01 68 FC | 	wrlong	#0, local01
08a2c     54 8C 86 F1 | 	sub	local01, #84
08a30     46 01 68 FC | 	wrlong	#0, local01
08a34     04 8C 06 F1 | 	add	local01, #4
08a38     46 01 68 FC | 	wrlong	#0, local01
08a3c     04 8C 06 F1 | 	add	local01, #4
08a40     46 01 68 FC | 	wrlong	#0, local01
08a44     04 8C 06 F1 | 	add	local01, #4
08a48     46 01 68 FC | 	wrlong	#0, local01
08a4c     04 8C 06 F1 | 	add	local01, #4
08a50     46 01 68 FC | 	wrlong	#0, local01
08a54     04 8C 06 F1 | 	add	local01, #4
08a58     46 01 68 FC | 	wrlong	#0, local01
08a5c     04 8C 06 F1 | 	add	local01, #4
08a60     46 01 68 FC | 	wrlong	#0, local01
08a64     04 8C 06 F1 | 	add	local01, #4
08a68     46 01 68 FC | 	wrlong	#0, local01
08a6c     04 8C 06 F1 | 	add	local01, #4
08a70     FF FF FF FF 
08a74     46 FF 6B FC | 	wrlong	##-1, local01
08a78     20 8C 06 F1 | 	add	local01, #32
08a7c     46 01 68 FC | 	wrlong	#0, local01
08a80     C9 74 02 F6 | 	mov	arg01, objptr
08a84     06 77 02 F6 | 	mov	arg02, ptr__module_animation_touch_1620_
08a88     5C C8 B1 FD | 	call	#__system___make_methodptr
08a8c     04 8C 06 F1 | 	add	local01, #4
08a90     46 35 62 FC | 	wrlong	result1, local01
08a94     04 8C 06 F1 | 	add	local01, #4
08a98     46 01 68 FC | 	wrlong	#0, local01
08a9c     30 8D 86 F1 | 	sub	local01, #304
08aa0     00 8E 0E F2 | 	cmp	local02, #0 wz
08aa4     7C 00 90 AD |  if_e	jmp	#LR__0291
08aa8     E4 8E 06 F1 | 	add	local02, #228
08aac     47 91 02 FB | 	rdlong	local03, local02
08ab0     E4 8E 86 F1 | 	sub	local02, #228
08ab4     32 90 56 F2 | 	cmps	local03, #50 wc
08ab8     28 00 90 3D |  if_ae	jmp	#LR__0289
08abc     E4 8E 06 F1 | 	add	local02, #228
08ac0     47 91 02 FB | 	rdlong	local03, local02
08ac4     01 90 06 F1 | 	add	local03, #1
08ac8     47 91 62 FC | 	wrlong	local03, local02
08acc     01 90 86 F1 | 	sub	local03, #1
08ad0     02 90 66 F0 | 	shl	local03, #2
08ad4     E0 8E 86 F1 | 	sub	local02, #224
08ad8     47 91 02 F1 | 	add	local03, local02
08adc     48 8D 62 FC | 	wrlong	local01, local03
08ae0     40 00 90 FD | 	jmp	#LR__0290
08ae4                 | LR__0289
08ae4     00 74 06 F6 | 	mov	arg01, #0
08ae8     5C 00 B2 FD | 	call	#__system___getiolock_1205
08aec     1A 75 02 F6 | 	mov	arg01, result1
08af0     2C C8 B1 FD | 	call	#__system___lockmem
08af4     4A 01 00 FF 
08af8     53 77 06 F6 | 	mov	arg02, ##@LR__1963
08afc     00 74 06 F6 | 	mov	arg01, #0
08b00     00 78 06 F6 | 	mov	arg03, #0
08b04     AC CD B1 FD | 	call	#__system___basic_print_string
08b08     00 74 06 F6 | 	mov	arg01, #0
08b0c     0A 76 06 F6 | 	mov	arg02, #10
08b10     00 78 06 F6 | 	mov	arg03, #0
08b14     50 CD B1 FD | 	call	#__system___basic_print_char
08b18     00 74 06 F6 | 	mov	arg01, #0
08b1c     28 00 B2 FD | 	call	#__system___getiolock_1205
08b20     1A 01 68 FC | 	wrlong	#0, result1
08b24                 | LR__0290
08b24                 | LR__0291
08b24     A8 F0 03 F6 | 	mov	ptra, fp
08b28     B3 00 A0 FD | 	call	#popregs_
08b2c                 | _module_init_ret
08b2c     2D 00 64 FD | 	ret
08b30                 | 
08b30                 | _module_update_check
08b30     05 4C 05 F6 | 	mov	COUNT_, #5
08b34     A9 00 A0 FD | 	call	#pushregs_
08b38                 | _module_update_check_enter
08b38     3A 8D 02 F6 | 	mov	local01, arg01
08b3c     3B 8F 02 F6 | 	mov	local02, arg02
08b40     3C 91 02 F6 | 	mov	local03, arg03
08b44     CC 8E 06 F1 | 	add	local02, #204
08b48     47 93 02 FB | 	rdlong	local04, local02
08b4c     CC 8E 86 F1 | 	sub	local02, #204
08b50     08 92 0E F2 | 	cmp	local04, #8 wz
08b54     D0 8E 06 A1 |  if_e	add	local02, #208
08b58     47 91 02 AB |  if_e	rdlong	local03, local02
08b5c     D0 8E 86 A1 |  if_e	sub	local02, #208
08b60     00 94 06 F6 | 	mov	local05, #0
08b64                 | '     {
08b64                 | '         arg = module->data.ptr;
08b64                 | '     }
08b64                 | '     for (int i = 0; i < module->numChildren; i++)
08b64                 | LR__0292
08b64     E4 8E 06 F1 | 	add	local02, #228
08b68     47 93 02 FB | 	rdlong	local04, local02
08b6c     E4 8E 86 F1 | 	sub	local02, #228
08b70     49 95 52 F2 | 	cmps	local05, local04 wc
08b74     2C 00 90 3D |  if_ae	jmp	#LR__0293
08b78     46 75 02 F6 | 	mov	arg01, local01
08b7c     4A 93 02 F6 | 	mov	local04, local05
08b80     02 92 66 F0 | 	shl	local04, #2
08b84     04 8E 06 F1 | 	add	local02, #4
08b88     47 93 02 F1 | 	add	local04, local02
08b8c     49 77 02 FB | 	rdlong	arg02, local04
08b90     48 79 02 F6 | 	mov	arg03, local03
08b94     98 FF BF FD | 	call	#_module_update_check
08b98     01 94 06 F1 | 	add	local05, #1
08b9c     04 8E 86 F1 | 	sub	local02, #4
08ba0     C0 FF 9F FD | 	jmp	#LR__0292
08ba4                 | LR__0293
08ba4     38 8F 06 F1 | 	add	local02, #312
08ba8     47 75 02 FB | 	rdlong	arg01, local02
08bac     38 8F 86 F1 | 	sub	local02, #312
08bb0     00 76 06 F6 | 	mov	arg02, #0
08bb4     A0 C7 B1 FD | 	call	#__system___funcptr_cmp
08bb8     00 34 0E F2 | 	cmp	result1, #0 wz
08bbc     34 00 90 AD |  if_e	jmp	#LR__0294
08bc0     38 8F 06 F1 | 	add	local02, #312
08bc4     47 93 02 FB | 	rdlong	local04, local02
08bc8     38 8F 86 F1 | 	sub	local02, #312
08bcc     49 95 02 FB | 	rdlong	local05, local04
08bd0     04 92 06 F1 | 	add	local04, #4
08bd4     49 93 02 FB | 	rdlong	local04, local04
08bd8     46 75 02 F6 | 	mov	arg01, local01
08bdc     47 77 02 F6 | 	mov	arg02, local02
08be0     48 79 02 F6 | 	mov	arg03, local03
08be4     C9 90 02 F6 | 	mov	local03, objptr
08be8     4A 93 01 F6 | 	mov	objptr, local05
08bec     2D 92 62 FD | 	call	local04
08bf0     48 93 01 F6 | 	mov	objptr, local03
08bf4                 | LR__0294
08bf4     A8 F0 03 F6 | 	mov	ptra, fp
08bf8     B3 00 A0 FD | 	call	#popregs_
08bfc                 | _module_update_check_ret
08bfc     2D 00 64 FD | 	ret
08c00                 | 
08c00                 | _module_touch_check
08c00     12 4C 05 F6 | 	mov	COUNT_, #18
08c04     A9 00 A0 FD | 	call	#pushregs_
08c08                 | _module_touch_check_enter
08c08     3A 8D 02 F6 | 	mov	local01, arg01
08c0c     3B 8F 02 F6 | 	mov	local02, arg02
08c10     3C 91 02 F6 | 	mov	local03, arg03
08c14     28 8E 06 F1 | 	add	local02, #40
08c18     47 77 0A FB | 	rdlong	arg02, local02 wz
08c1c     28 8E 86 F1 | 	sub	local02, #40
08c20     18 8D 06 51 |  if_ne	add	local01, #280
08c24     46 93 C2 5A |  if_ne	rdbyte	local04, local01
08c28     18 8D 86 51 |  if_ne	sub	local01, #280
08c2c     00 92 4E 52 |  if_ne	cmps	local04, #0 wz
08c30                 | '     {
08c30                 | '         return 0;
08c30     00 34 06 A6 |  if_e	mov	result1, #0
08c34     38 02 90 AD |  if_e	jmp	#LR__0301
08c38     CC 8C 06 F1 | 	add	local01, #204
08c3c     46 95 02 FB | 	rdlong	local05, local01
08c40     CC 8C 86 F1 | 	sub	local01, #204
08c44     08 94 0E F2 | 	cmp	local05, #8 wz
08c48     D0 8C 06 A1 |  if_e	add	local01, #208
08c4c     46 91 02 AB |  if_e	rdlong	local03, local01
08c50     D0 8C 86 A1 |  if_e	sub	local01, #208
08c54     00 96 06 F6 | 	mov	local06, #0
08c58     00 98 06 F6 | 	mov	local07, #0
08c5c                 | '     for (int i = 0; i < root->numChildren; i++)
08c5c                 | LR__0295
08c5c     E4 8C 06 F1 | 	add	local01, #228
08c60     46 95 02 FB | 	rdlong	local05, local01
08c64     E4 8C 86 F1 | 	sub	local01, #228
08c68     4A 99 52 F2 | 	cmps	local07, local05 wc
08c6c     34 00 90 3D |  if_ae	jmp	#LR__0296
08c70     4C 93 02 F6 | 	mov	local04, local07
08c74     02 92 66 F0 | 	shl	local04, #2
08c78     04 8C 06 F1 | 	add	local01, #4
08c7c     46 93 02 F1 | 	add	local04, local01
08c80     49 75 02 FB | 	rdlong	arg01, local04
08c84     47 77 02 F6 | 	mov	arg02, local02
08c88     48 79 02 F6 | 	mov	arg03, local03
08c8c     70 FF BF FD | 	call	#_module_touch_check
08c90     1A 9B 02 F6 | 	mov	local08, result1
08c94     1A 97 02 F1 | 	add	local06, result1
08c98     01 98 06 F1 | 	add	local07, #1
08c9c     04 8C 86 F1 | 	sub	local01, #4
08ca0     B8 FF 9F FD | 	jmp	#LR__0295
08ca4                 | LR__0296
08ca4     34 8D 06 F1 | 	add	local01, #308
08ca8     46 75 02 FB | 	rdlong	arg01, local01
08cac     00 76 06 F6 | 	mov	arg02, #0
08cb0     A4 C6 B1 FD | 	call	#__system___funcptr_cmp
08cb4     00 34 0E F2 | 	cmp	result1, #0 wz
08cb8     20 8E 06 F1 | 	add	local02, #32
08cbc     47 93 E2 FA | 	rdword	local04, local02
08cc0     20 8E 86 F1 | 	sub	local02, #32
08cc4     0A 94 C6 F9 | 	decod	local05, #10
08cc8     49 95 82 F1 | 	sub	local05, local04
08ccc     4C 8C 86 F1 | 	sub	local01, #76
08cd0     46 93 02 FB | 	rdlong	local04, local01
08cd4     E8 8C 86 F1 | 	sub	local01, #232
08cd8     49 95 5A F2 | 	cmps	local05, local04 wcz
08cdc     8C 01 90 ED |  if_be	jmp	#LR__0300
08ce0     20 8E 06 F1 | 	add	local02, #32
08ce4     47 9D E2 FA | 	rdword	local09, local02
08ce8     20 8E 86 F1 | 	sub	local02, #32
08cec     4E 9F 32 F9 | 	getword	local10, local09, #0
08cf0     0A A0 C6 F9 | 	decod	local11, #10
08cf4     4F A1 82 F1 | 	sub	local11, local10
08cf8     E8 8C 06 F1 | 	add	local01, #232
08cfc     46 A3 02 FB | 	rdlong	local12, local01
08d00     51 A5 02 F6 | 	mov	local13, local12
08d04     08 8C 06 F1 | 	add	local01, #8
08d08     46 A7 02 FB | 	rdlong	local14, local01
08d0c     F0 8C 86 F1 | 	sub	local01, #240
08d10     53 A9 02 F6 | 	mov	local15, local14
08d14     53 A5 02 F1 | 	add	local13, local14
08d18     52 A1 52 F2 | 	cmps	local11, local13 wc
08d1c     4C 01 90 3D |  if_ae	jmp	#LR__0300
08d20     22 8E 06 F1 | 	add	local02, #34
08d24     47 AB E2 FA | 	rdword	local16, local02
08d28     22 8E 86 F1 | 	sub	local02, #34
08d2c     55 AD 32 F9 | 	getword	local17, local16, #0
08d30     01 00 00 FF 
08d34     58 94 06 F6 | 	mov	local05, ##600
08d38     56 95 82 F1 | 	sub	local05, local17
08d3c     EC 8C 06 F1 | 	add	local01, #236
08d40     46 AF 02 FB | 	rdlong	local18, local01
08d44     EC 8C 86 F1 | 	sub	local01, #236
08d48     57 93 02 F6 | 	mov	local04, local18
08d4c     49 95 5A F2 | 	cmps	local05, local04 wcz
08d50     18 01 90 ED |  if_be	jmp	#LR__0299
08d54     22 8E 06 F1 | 	add	local02, #34
08d58     47 9D E2 FA | 	rdword	local09, local02
08d5c     22 8E 86 F1 | 	sub	local02, #34
08d60     4E 9F 32 F9 | 	getword	local10, local09, #0
08d64     01 00 00 FF 
08d68     58 A0 06 F6 | 	mov	local11, ##600
08d6c     4F A1 82 F1 | 	sub	local11, local10
08d70     EC 8C 06 F1 | 	add	local01, #236
08d74     46 A3 02 FB | 	rdlong	local12, local01
08d78     51 A5 02 F6 | 	mov	local13, local12
08d7c     08 8C 06 F1 | 	add	local01, #8
08d80     46 A7 02 FB | 	rdlong	local14, local01
08d84     F4 8C 86 F1 | 	sub	local01, #244
08d88     53 A9 02 F6 | 	mov	local15, local14
08d8c     53 A5 02 F1 | 	add	local13, local14
08d90     52 A1 52 F2 | 	cmps	local11, local13 wc
08d94     D4 00 90 3D |  if_ae	jmp	#LR__0299
08d98     34 8D 06 F1 | 	add	local01, #308
08d9c     46 75 02 FB | 	rdlong	arg01, local01
08da0     34 8D 86 F1 | 	sub	local01, #308
08da4     00 AC 06 F6 | 	mov	local17, #0
08da8     00 76 06 F6 | 	mov	arg02, #0
08dac     A8 C5 B1 FD | 	call	#__system___funcptr_cmp
08db0     1A 95 0A F6 | 	mov	local05, result1 wz
08db4     B4 00 90 AD |  if_e	jmp	#LR__0298
08db8     94 C3 B1 FD | 	call	#__system___getms
08dbc     1C 8D 06 F1 | 	add	local01, #284
08dc0     46 35 62 FC | 	wrlong	result1, local01
08dc4     18 8C 06 F1 | 	add	local01, #24
08dc8     46 93 02 FB | 	rdlong	local04, local01
08dcc     49 95 02 F6 | 	mov	local05, local04
08dd0     4A AD 02 FB | 	rdlong	local17, local05
08dd4     04 94 06 F1 | 	add	local05, #4
08dd8     4A AF 02 FB | 	rdlong	local18, local05
08ddc     57 AB 02 F6 | 	mov	local16, local18
08de0     10 8C 86 F1 | 	sub	local01, #16
08de4     46 A1 02 FB | 	rdlong	local11, local01
08de8     48 9F 02 F6 | 	mov	local10, local03
08dec     50 75 02 F6 | 	mov	arg01, local11
08df0     4F 77 02 F6 | 	mov	arg02, local10
08df4     C9 9C 02 F6 | 	mov	local09, objptr
08df8     56 93 01 F6 | 	mov	objptr, local17
08dfc     2D AA 62 FD | 	call	local16
08e00     4E 93 01 F6 | 	mov	objptr, local09
08e04     01 96 06 F1 | 	add	local06, #1
08e08     08 8C 06 F1 | 	add	local01, #8
08e0c     46 75 02 FB | 	rdlong	arg01, local01
08e10     2C 8D 86 F1 | 	sub	local01, #300
08e14     00 AC 06 F6 | 	mov	local17, #0
08e18     00 76 06 F6 | 	mov	arg02, #0
08e1c     38 C5 B1 FD | 	call	#__system___funcptr_cmp
08e20     1A 95 0A F6 | 	mov	local05, result1 wz
08e24     44 00 90 AD |  if_e	jmp	#LR__0297
08e28     2C 8D 06 F1 | 	add	local01, #300
08e2c     46 93 02 FB | 	rdlong	local04, local01
08e30     2C 8D 86 F1 | 	sub	local01, #300
08e34     49 95 02 F6 | 	mov	local05, local04
08e38     4A AD 02 FB | 	rdlong	local17, local05
08e3c     04 94 06 F1 | 	add	local05, #4
08e40     4A AF 02 FB | 	rdlong	local18, local05
08e44     04 94 86 F1 | 	sub	local05, #4
08e48     57 AB 02 F6 | 	mov	local16, local18
08e4c     47 A1 02 F6 | 	mov	local11, local02
08e50     46 9F 02 F6 | 	mov	local10, local01
08e54     50 75 02 F6 | 	mov	arg01, local11
08e58     4F 77 02 F6 | 	mov	arg02, local10
08e5c     C9 9C 02 F6 | 	mov	local09, objptr
08e60     56 93 01 F6 | 	mov	objptr, local17
08e64     2D AA 62 FD | 	call	local16
08e68     4E 93 01 F6 | 	mov	objptr, local09
08e6c                 | LR__0297
08e6c                 | LR__0298
08e6c                 | LR__0299
08e6c                 | LR__0300
08e6c                 | '                 {
08e6c                 | '                     root->touchAnimate(display, root);
08e6c                 | '                 }
08e6c                 | '             }
08e6c                 | '         }
08e6c                 | '     }
08e6c                 | '     return touchCount;
08e6c     4B 35 02 F6 | 	mov	result1, local06
08e70                 | LR__0301
08e70     A8 F0 03 F6 | 	mov	ptra, fp
08e74     B3 00 A0 FD | 	call	#popregs_
08e78                 | _module_touch_check_ret
08e78     2D 00 64 FD | 	ret
08e7c                 | 
08e7c                 | _module_copy
08e7c     CC 76 06 F1 | 	add	arg02, #204
08e80     3B 3B 02 FB | 	rdlong	_var01, arg02
08e84     CC 74 06 F1 | 	add	arg01, #204
08e88     3A 3B 62 FC | 	wrlong	_var01, arg01
08e8c     1C 76 06 F1 | 	add	arg02, #28
08e90     3B 3B 02 FB | 	rdlong	_var01, arg02
08e94     1C 74 06 F1 | 	add	arg01, #28
08e98     3A 3B 62 FC | 	wrlong	_var01, arg01
08e9c     04 76 06 F1 | 	add	arg02, #4
08ea0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ea4     04 74 06 F1 | 	add	arg01, #4
08ea8     3A 3B 62 FC | 	wrlong	_var01, arg01
08eac     04 76 06 F1 | 	add	arg02, #4
08eb0     3B 3B 02 FB | 	rdlong	_var01, arg02
08eb4     04 74 06 F1 | 	add	arg01, #4
08eb8     3A 3B 62 FC | 	wrlong	_var01, arg01
08ebc     04 76 06 F1 | 	add	arg02, #4
08ec0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ec4     04 74 06 F1 | 	add	arg01, #4
08ec8     3A 3B 62 FC | 	wrlong	_var01, arg01
08ecc     04 76 06 F1 | 	add	arg02, #4
08ed0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ed4     04 74 06 F1 | 	add	arg01, #4
08ed8     3A 3B 62 FC | 	wrlong	_var01, arg01
08edc     04 76 06 F1 | 	add	arg02, #4
08ee0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ee4     04 74 06 F1 | 	add	arg01, #4
08ee8     3A 3B 62 FC | 	wrlong	_var01, arg01
08eec     04 76 06 F1 | 	add	arg02, #4
08ef0     3B 3B 02 FB | 	rdlong	_var01, arg02
08ef4     04 74 06 F1 | 	add	arg01, #4
08ef8     3A 3B 62 FC | 	wrlong	_var01, arg01
08efc     04 76 06 F1 | 	add	arg02, #4
08f00     3B 3B 02 FB | 	rdlong	_var01, arg02
08f04     04 74 06 F1 | 	add	arg01, #4
08f08     3A 3B 62 FC | 	wrlong	_var01, arg01
08f0c     04 76 06 F1 | 	add	arg02, #4
08f10     3B 3B 02 FB | 	rdlong	_var01, arg02
08f14     04 74 06 F1 | 	add	arg01, #4
08f18     3A 3B 62 FC | 	wrlong	_var01, arg01
08f1c     04 76 06 F1 | 	add	arg02, #4
08f20     3B 3B 02 FB | 	rdlong	_var01, arg02
08f24     04 74 06 F1 | 	add	arg01, #4
08f28     3A 3B 62 FC | 	wrlong	_var01, arg01
08f2c     04 76 06 F1 | 	add	arg02, #4
08f30     3B 3B 02 FB | 	rdlong	_var01, arg02
08f34     04 74 06 F1 | 	add	arg01, #4
08f38     3A 3B 62 FC | 	wrlong	_var01, arg01
08f3c                 | _module_copy_ret
08f3c     2D 00 64 FD | 	ret
08f40                 | 
08f40                 | _module_set_image
08f40     CC 74 06 F1 | 	add	arg01, #204
08f44     3A 05 68 FC | 	wrlong	#2, arg01
08f48     04 74 06 F1 | 	add	arg01, #4
08f4c     3A 77 62 FC | 	wrlong	arg02, arg01
08f50     20 76 06 F1 | 	add	arg02, #32
08f54     3B 3B 02 FB | 	rdlong	_var01, arg02
08f58     20 74 06 F1 | 	add	arg01, #32
08f5c     3A 3B 62 FC | 	wrlong	_var01, arg01
08f60     04 76 06 F1 | 	add	arg02, #4
08f64     3B 3B 02 FB | 	rdlong	_var01, arg02
08f68     04 74 06 F1 | 	add	arg01, #4
08f6c     3A 3B 62 FC | 	wrlong	_var01, arg01
08f70                 | _module_set_image_ret
08f70     2D 00 64 FD | 	ret
08f74                 | 
08f74                 | _module_set_text
08f74     CC 74 06 F1 | 	add	arg01, #204
08f78     3A 03 68 FC | 	wrlong	#1, arg01
08f7c     04 74 06 F1 | 	add	arg01, #4
08f80     3A 77 62 FC | 	wrlong	arg02, arg01
08f84     04 74 06 F1 | 	add	arg01, #4
08f88     3A 03 68 FC | 	wrlong	#1, arg01
08f8c     08 74 06 F1 | 	add	arg01, #8
08f90     3A 03 68 FC | 	wrlong	#1, arg01
08f94     04 74 06 F1 | 	add	arg01, #4
08f98     3A 09 68 FC | 	wrlong	#4, arg01
08f9c     08 74 86 F1 | 	sub	arg01, #8
08fa0     3A 01 48 FC | 	wrbyte	#0, arg01
08fa4     D8 74 86 F1 | 	sub	arg01, #216
08fa8     24 00 B0 FD | 	call	#_module_text_fit
08fac                 | _module_set_text_ret
08fac     2D 00 64 FD | 	ret
08fb0                 | 
08fb0                 | _module_text_get
08fb0     CC 74 06 F1 | 	add	arg01, #204
08fb4     3A 3B 02 FB | 	rdlong	_var01, arg01
08fb8     CC 74 86 F1 | 	sub	arg01, #204
08fbc     01 3A 0E F2 | 	cmp	_var01, #1 wz
08fc0                 | '     {
08fc0                 | '         return module->data.text.value;
08fc0     D0 74 06 A1 |  if_e	add	arg01, #208
08fc4     3A 35 02 AB |  if_e	rdlong	result1, arg01
08fc8                 | '     }
08fc8                 | '     return  (0) ;
08fc8     00 34 06 56 |  if_ne	mov	result1, #0
08fcc                 | _module_text_get_ret
08fcc     2D 00 64 FD | 	ret
08fd0                 | 
08fd0                 | _module_text_fit
08fd0     05 4C 05 F6 | 	mov	COUNT_, #5
08fd4     A9 00 A0 FD | 	call	#pushregs_
08fd8     3A 8D 02 F6 | 	mov	local01, arg01
08fdc                 | ' {
08fdc                 | '     switch (module->data.text.font)
08fdc     D4 8C 06 F1 | 	add	local01, #212
08fe0     46 8F 02 FB | 	rdlong	local02, local01
08fe4     D4 8C 86 F1 | 	sub	local01, #212
08fe8     47 91 02 F6 | 	mov	local03, local02
08fec     03 90 26 F3 | 	fle	local03, #3
08ff0     30 90 62 FD | 	jmprel	local03
08ff4                 | LR__0302
08ff4     68 00 90 FD | 	jmp	#LR__0305
08ff8     30 00 90 FD | 	jmp	#LR__0304
08ffc     04 00 90 FD | 	jmp	#LR__0303
09000     88 00 90 FD | 	jmp	#LR__0306
09004                 | LR__0303
09004     D0 8C 06 F1 | 	add	local01, #208
09008     46 75 02 FB | 	rdlong	arg01, local01
0900c     F4 D0 BF FD | 	call	#_strlen
09010     04 34 66 F0 | 	shl	result1, #4
09014     20 8C 06 F1 | 	add	local01, #32
09018     46 35 62 FC | 	wrlong	result1, local01
0901c     04 8C 06 F1 | 	add	local01, #4
09020     46 41 68 FC | 	wrlong	#32, local01
09024     F4 8C 86 F1 | 	sub	local01, #244
09028                 | '         module->w = strlen(module->data.text.value) * 16;
09028                 | '         module->h = 32;
09028                 | '         break;
09028     60 00 90 FD | 	jmp	#LR__0306
0902c                 | LR__0304
0902c     D0 8C 06 F1 | 	add	local01, #208
09030     46 75 02 FB | 	rdlong	arg01, local01
09034     CC D0 BF FD | 	call	#_strlen
09038     1A 91 02 F6 | 	mov	local03, result1
0903c     01 90 66 F0 | 	shl	local03, #1
09040     1A 91 02 F1 | 	add	local03, result1
09044     02 90 66 F0 | 	shl	local03, #2
09048     20 8C 06 F1 | 	add	local01, #32
0904c     46 91 62 FC | 	wrlong	local03, local01
09050     04 8C 06 F1 | 	add	local01, #4
09054     46 31 68 FC | 	wrlong	#24, local01
09058     F4 8C 86 F1 | 	sub	local01, #244
0905c                 | '         module->w = strlen(module->data.text.value) * 12;
0905c                 | '         module->h = 24;
0905c                 | '         break;
0905c     2C 00 90 FD | 	jmp	#LR__0306
09060                 | LR__0305
09060     D0 8C 06 F1 | 	add	local01, #208
09064     46 75 02 FB | 	rdlong	arg01, local01
09068     98 D0 BF FD | 	call	#_strlen
0906c     1A 93 02 F6 | 	mov	local04, result1
09070     03 92 66 F0 | 	shl	local04, #3
09074     20 8C 06 F1 | 	add	local01, #32
09078     46 93 62 FC | 	wrlong	local04, local01
0907c     10 94 06 F6 | 	mov	local05, #16
09080     04 8C 06 F1 | 	add	local01, #4
09084     46 21 68 FC | 	wrlong	#16, local01
09088     F4 8C 86 F1 | 	sub	local01, #244
0908c                 | '         module->w = strlen(module->data.text.value) * 8;
0908c                 | '         module->h = 16;
0908c                 | '         break;
0908c                 | LR__0306
0908c     D8 8C 06 F1 | 	add	local01, #216
09090     46 8F CA FA | 	rdbyte	local02, local01 wz
09094     D8 8C 86 F1 | 	sub	local01, #216
09098     F4 8C 06 51 |  if_ne	add	local01, #244
0909c     46 8F 02 5B |  if_ne	rdlong	local02, local01
090a0     02 8E 06 51 |  if_ne	add	local02, #2
090a4     46 8F 62 5C |  if_ne	wrlong	local02, local01
090a8     A8 F0 03 F6 | 	mov	ptra, fp
090ac     B3 00 A0 FD | 	call	#popregs_
090b0                 | _module_text_fit_ret
090b0     2D 00 64 FD | 	ret
090b4                 | 
090b4                 | _module_text_font
090b4     02 4C 05 F6 | 	mov	COUNT_, #2
090b8     A9 00 A0 FD | 	call	#pushregs_
090bc     3A 8D 02 F6 | 	mov	local01, arg01
090c0     CC 8C 06 F1 | 	add	local01, #204
090c4     46 8F 02 FB | 	rdlong	local02, local01
090c8     CC 8C 86 F1 | 	sub	local01, #204
090cc     01 8E 0E F2 | 	cmp	local02, #1 wz
090d0                 | '         return;
090d0     04 01 90 5D |  if_ne	jmp	#LR__0311
090d4     FF FF 7F FF 
090d8     FF 77 0E F2 | 	cmp	arg02, ##-1 wz
090dc     F0 00 90 5D |  if_ne	jmp	#LR__0309
090e0     F4 8C 06 F1 | 	add	local01, #244
090e4     46 8F 02 FB | 	rdlong	local02, local01
090e8     F4 8C 86 F1 | 	sub	local01, #244
090ec     20 8E 56 F2 | 	cmps	local02, #32 wc
090f0     74 00 90 CD |  if_b	jmp	#LR__0307
090f4     D0 8C 06 F1 | 	add	local01, #208
090f8     46 75 02 FB | 	rdlong	arg01, local01
090fc     04 D0 BF FD | 	call	#_strlen
09100     1A 8F 02 F6 | 	mov	local02, result1
09104     04 8E 66 F0 | 	shl	local02, #4
09108     20 8C 06 F1 | 	add	local01, #32
0910c     46 77 02 FB | 	rdlong	arg02, local01
09110     F0 8C 86 F1 | 	sub	local01, #240
09114     47 77 5A F2 | 	cmps	arg02, local02 wcz
09118     D4 8C 06 11 |  if_a	add	local01, #212
0911c     46 05 68 1C |  if_a	wrlong	#2, local01
09120     B4 00 90 1D |  if_a	jmp	#LR__0310
09124     D0 8C 06 F1 | 	add	local01, #208
09128     46 75 02 FB | 	rdlong	arg01, local01
0912c     D4 CF BF FD | 	call	#_strlen
09130     1A 8F 02 F6 | 	mov	local02, result1
09134     01 8E 66 F0 | 	shl	local02, #1
09138     1A 8F 02 F1 | 	add	local02, result1
0913c     02 8E 66 F0 | 	shl	local02, #2
09140     20 8C 06 F1 | 	add	local01, #32
09144     46 35 02 FB | 	rdlong	result1, local01
09148     F0 8C 86 F1 | 	sub	local01, #240
0914c     47 35 5A F2 | 	cmps	result1, local02 wcz
09150     D4 8C 06 11 |  if_a	add	local01, #212
09154     46 03 68 1C |  if_a	wrlong	#1, local01
09158     7C 00 90 1D |  if_a	jmp	#LR__0310
0915c     D4 8C 06 F1 | 	add	local01, #212
09160     46 01 68 FC | 	wrlong	#0, local01
09164     70 00 90 FD | 	jmp	#LR__0310
09168                 | LR__0307
09168     46 8F 02 FB | 	rdlong	local02, local01
0916c     F4 8E 06 F1 | 	add	local02, #244
09170     47 8F 02 FB | 	rdlong	local02, local02
09174     18 8E 56 F2 | 	cmps	local02, #24 wc
09178     48 00 90 CD |  if_b	jmp	#LR__0308
0917c     46 8F 02 FB | 	rdlong	local02, local01
09180     D0 8C 06 F1 | 	add	local01, #208
09184     46 75 02 FB | 	rdlong	arg01, local01
09188     D0 8C 86 F1 | 	sub	local01, #208
0918c     74 CF BF FD | 	call	#_strlen
09190     1A 77 02 F6 | 	mov	arg02, result1
09194     01 76 66 F0 | 	shl	arg02, #1
09198     1A 77 02 F1 | 	add	arg02, result1
0919c     02 76 66 F0 | 	shl	arg02, #2
091a0     F0 8E 06 F1 | 	add	local02, #240
091a4     47 8F 02 FB | 	rdlong	local02, local02
091a8     3B 8F 5A F2 | 	cmps	local02, arg02 wcz
091ac     D4 8C 06 11 |  if_a	add	local01, #212
091b0     46 03 68 1C |  if_a	wrlong	#1, local01
091b4     20 00 90 1D |  if_a	jmp	#LR__0310
091b8     D4 8C 06 F1 | 	add	local01, #212
091bc     46 01 68 FC | 	wrlong	#0, local01
091c0     14 00 90 FD | 	jmp	#LR__0310
091c4                 | LR__0308
091c4     D4 8C 06 F1 | 	add	local01, #212
091c8     46 01 68 FC | 	wrlong	#0, local01
091cc     08 00 90 FD | 	jmp	#LR__0310
091d0                 | LR__0309
091d0     D4 8C 06 F1 | 	add	local01, #212
091d4     46 77 62 FC | 	wrlong	arg02, local01
091d8                 | LR__0310
091d8                 | LR__0311
091d8     A8 F0 03 F6 | 	mov	ptra, fp
091dc     B3 00 A0 FD | 	call	#popregs_
091e0                 | _module_text_font_ret
091e0     2D 00 64 FD | 	ret
091e4                 | 
091e4                 | _module_text_font_width
091e4     03 4C 05 F6 | 	mov	COUNT_, #3
091e8     A9 00 A0 FD | 	call	#pushregs_
091ec     3A 8D 02 F6 | 	mov	local01, arg01
091f0     CC 8C 06 F1 | 	add	local01, #204
091f4     46 8F 02 FB | 	rdlong	local02, local01
091f8     CC 8C 86 F1 | 	sub	local01, #204
091fc     01 8E 0E F2 | 	cmp	local02, #1 wz
09200                 | '         return 0;
09200     00 34 06 56 |  if_ne	mov	result1, #0
09204     74 00 90 5D |  if_ne	jmp	#LR__0317
09208                 | '     switch (module->data.text.font)
09208     D4 8C 06 F1 | 	add	local01, #212
0920c     46 91 02 FB | 	rdlong	local03, local01
09210     D4 8C 86 F1 | 	sub	local01, #212
09214     03 90 26 F3 | 	fle	local03, #3
09218     30 90 62 FD | 	jmprel	local03
0921c                 | LR__0312
0921c     44 00 90 FD | 	jmp	#LR__0315
09220     1C 00 90 FD | 	jmp	#LR__0314
09224     04 00 90 FD | 	jmp	#LR__0313
09228     4C 00 90 FD | 	jmp	#LR__0316
0922c                 | LR__0313
0922c                 | '         return strlen(module->data.text.value) * 16;
0922c     D0 8C 06 F1 | 	add	local01, #208
09230     46 75 02 FB | 	rdlong	arg01, local01
09234     CC CE BF FD | 	call	#_strlen
09238     04 34 66 F0 | 	shl	result1, #4
0923c     3C 00 90 FD | 	jmp	#LR__0317
09240                 | LR__0314
09240                 | '         return strlen(module->data.text.value) * 12;
09240     D0 8C 06 F1 | 	add	local01, #208
09244     46 75 02 FB | 	rdlong	arg01, local01
09248     B8 CE BF FD | 	call	#_strlen
0924c     1A 91 02 F6 | 	mov	local03, result1
09250     01 90 66 F0 | 	shl	local03, #1
09254     1A 91 02 F1 | 	add	local03, result1
09258     02 90 66 F0 | 	shl	local03, #2
0925c     48 35 02 F6 | 	mov	result1, local03
09260     18 00 90 FD | 	jmp	#LR__0317
09264                 | LR__0315
09264                 | '         return strlen(module->data.text.value) * 8;
09264     D0 8C 06 F1 | 	add	local01, #208
09268     46 75 02 FB | 	rdlong	arg01, local01
0926c     94 CE BF FD | 	call	#_strlen
09270     03 34 66 F0 | 	shl	result1, #3
09274     04 00 90 FD | 	jmp	#LR__0317
09278                 | LR__0316
09278                 | '     }
09278                 | '     return 0;
09278     00 34 06 F6 | 	mov	result1, #0
0927c                 | LR__0317
0927c     A8 F0 03 F6 | 	mov	ptra, fp
09280     B3 00 A0 FD | 	call	#popregs_
09284                 | _module_text_font_width_ret
09284     2D 00 64 FD | 	ret
09288                 | 
09288                 | _module_text_font_height
09288     3A 3B 02 F6 | 	mov	_var01, arg01
0928c     CC 3A 06 F1 | 	add	_var01, #204
09290     1D 3D 02 FB | 	rdlong	_var02, _var01
09294     CC 3A 86 F1 | 	sub	_var01, #204
09298     01 3C 0E F2 | 	cmp	_var02, #1 wz
0929c                 | '         return 0;
0929c     00 34 06 56 |  if_ne	mov	result1, #0
092a0     3C 00 90 5D |  if_ne	jmp	#_module_text_font_height_ret
092a4                 | '     switch (module->data.text.font)
092a4     D4 3A 06 F1 | 	add	_var01, #212
092a8     1D 3F 02 FB | 	rdlong	_var03, _var01
092ac     03 3E 26 F3 | 	fle	_var03, #3
092b0     30 3E 62 FD | 	jmprel	_var03
092b4                 | LR__0318
092b4     1C 00 90 FD | 	jmp	#LR__0321
092b8     10 00 90 FD | 	jmp	#LR__0320
092bc     04 00 90 FD | 	jmp	#LR__0319
092c0     18 00 90 FD | 	jmp	#LR__0322
092c4                 | LR__0319
092c4                 | '         return 32;
092c4     20 34 06 F6 | 	mov	result1, #32
092c8     14 00 90 FD | 	jmp	#_module_text_font_height_ret
092cc                 | LR__0320
092cc                 | '         return 24;
092cc     18 34 06 F6 | 	mov	result1, #24
092d0     0C 00 90 FD | 	jmp	#_module_text_font_height_ret
092d4                 | LR__0321
092d4                 | '         return 16;
092d4     10 34 06 F6 | 	mov	result1, #16
092d8     04 00 90 FD | 	jmp	#_module_text_font_height_ret
092dc                 | LR__0322
092dc                 | '     }
092dc                 | '     return 0;
092dc     00 34 06 F6 | 	mov	result1, #0
092e0                 | _module_text_font_height_ret
092e0     2D 00 64 FD | 	ret
092e4                 | 
092e4                 | _module_add_border
092e4     14 75 06 F1 | 	add	arg01, #276
092e8     3A 77 62 FC | 	wrlong	arg02, arg01
092ec     14 74 06 F1 | 	add	arg01, #20
092f0     3A 79 62 FC | 	wrlong	arg03, arg01
092f4     3C 77 02 F6 | 	mov	arg02, arg03
092f8     01 76 66 F0 | 	shl	arg02, #1
092fc     38 74 86 F1 | 	sub	arg01, #56
09300     3A 3B 02 FB | 	rdlong	_var01, arg01
09304     3B 3B 02 F1 | 	add	_var01, arg02
09308     3A 3B 62 FC | 	wrlong	_var01, arg01
0930c     01 78 66 F0 | 	shl	arg03, #1
09310     04 74 06 F1 | 	add	arg01, #4
09314     3A 3B 02 FB | 	rdlong	_var01, arg01
09318     3C 3B 02 F1 | 	add	_var01, arg03
0931c     3A 3B 62 FC | 	wrlong	_var01, arg01
09320                 | _module_add_border_ret
09320     2D 00 64 FD | 	ret
09324                 | 
09324                 | _module_align_inner_top
09324     3A 3B 02 FB | 	rdlong	_var01, arg01
09328     1D 3D 02 F6 | 	mov	_var02, _var01
0932c     EC 3A 06 F1 | 	add	_var01, #236
09330     1D 3B 02 FB | 	rdlong	_var01, _var01
09334     FC 3C 06 F1 | 	add	_var02, #252
09338     1E 3D 02 FB | 	rdlong	_var02, _var02
0933c     1E 3B 02 F1 | 	add	_var01, _var02
09340     EC 74 06 F1 | 	add	arg01, #236
09344     3A 3B 62 FC | 	wrlong	_var01, arg01
09348                 | _module_align_inner_top_ret
09348     2D 00 64 FD | 	ret
0934c                 | 
0934c                 | _module_align_inner_left
0934c     3A 3B 02 FB | 	rdlong	_var01, arg01
09350     1D 3D 02 F6 | 	mov	_var02, _var01
09354     E8 3A 06 F1 | 	add	_var01, #232
09358     1D 3B 02 FB | 	rdlong	_var01, _var01
0935c     F8 3C 06 F1 | 	add	_var02, #248
09360     1E 3D 02 FB | 	rdlong	_var02, _var02
09364     1E 3B 02 F1 | 	add	_var01, _var02
09368     E8 74 06 F1 | 	add	arg01, #232
0936c     3A 3B 62 FC | 	wrlong	_var01, arg01
09370                 | _module_align_inner_left_ret
09370     2D 00 64 FD | 	ret
09374                 | 
09374                 | _module_align_inner_right
09374     3A 3B 02 FB | 	rdlong	_var01, arg01
09378     1D 3D 02 F6 | 	mov	_var02, _var01
0937c     E8 3A 06 F1 | 	add	_var01, #232
09380     1D 3B 02 FB | 	rdlong	_var01, _var01
09384     F0 3C 06 F1 | 	add	_var02, #240
09388     1E 3D 02 FB | 	rdlong	_var02, _var02
0938c     1E 3B 02 F1 | 	add	_var01, _var02
09390     F0 74 06 F1 | 	add	arg01, #240
09394     3A 3D 02 FB | 	rdlong	_var02, arg01
09398     F0 74 86 F1 | 	sub	arg01, #240
0939c     1E 3B 82 F1 | 	sub	_var01, _var02
093a0     3A 3D 02 FB | 	rdlong	_var02, arg01
093a4     F8 3C 06 F1 | 	add	_var02, #248
093a8     1E 3D 02 FB | 	rdlong	_var02, _var02
093ac     1E 3B 82 F1 | 	sub	_var01, _var02
093b0     E8 74 06 F1 | 	add	arg01, #232
093b4     3A 3B 62 FC | 	wrlong	_var01, arg01
093b8                 | _module_align_inner_right_ret
093b8     2D 00 64 FD | 	ret
093bc                 | 
093bc                 | _module_align_inner_bottom
093bc     3A 3B 02 FB | 	rdlong	_var01, arg01
093c0     1D 3D 02 F6 | 	mov	_var02, _var01
093c4     EC 3A 06 F1 | 	add	_var01, #236
093c8     1D 3B 02 FB | 	rdlong	_var01, _var01
093cc     F4 3C 06 F1 | 	add	_var02, #244
093d0     1E 3D 02 FB | 	rdlong	_var02, _var02
093d4     1E 3B 02 F1 | 	add	_var01, _var02
093d8     F4 74 06 F1 | 	add	arg01, #244
093dc     3A 3D 02 FB | 	rdlong	_var02, arg01
093e0     F4 74 86 F1 | 	sub	arg01, #244
093e4     1E 3B 82 F1 | 	sub	_var01, _var02
093e8     3A 3D 02 FB | 	rdlong	_var02, arg01
093ec     FC 3C 06 F1 | 	add	_var02, #252
093f0     1E 3D 02 FB | 	rdlong	_var02, _var02
093f4     1E 3B 82 F1 | 	sub	_var01, _var02
093f8     EC 74 06 F1 | 	add	arg01, #236
093fc     3A 3B 62 FC | 	wrlong	_var01, arg01
09400                 | _module_align_inner_bottom_ret
09400     2D 00 64 FD | 	ret
09404                 | 
09404                 | _module_align_middle
09404     3A 3B 02 FB | 	rdlong	_var01, arg01
09408     1D 3D 02 F6 | 	mov	_var02, _var01
0940c     F4 3C 06 F1 | 	add	_var02, #244
09410     1E 3D 02 FB | 	rdlong	_var02, _var02
09414     1E 3D 52 F6 | 	abs	_var02, _var02 wc
09418     01 3C 46 F0 | 	shr	_var02, #1
0941c     1E 3D 82 F6 | 	negc	_var02, _var02
09420     EC 3A 06 F1 | 	add	_var01, #236
09424     1D 3B 02 FB | 	rdlong	_var01, _var01
09428     1E 3B 02 F1 | 	add	_var01, _var02
0942c     F4 74 06 F1 | 	add	arg01, #244
09430     3A 3D 02 FB | 	rdlong	_var02, arg01
09434     1E 3D 52 F6 | 	abs	_var02, _var02 wc
09438     01 3C 46 F0 | 	shr	_var02, #1
0943c     1E 3D 82 F6 | 	negc	_var02, _var02
09440     1E 3B 82 F1 | 	sub	_var01, _var02
09444     08 74 86 F1 | 	sub	arg01, #8
09448     3A 3B 62 FC | 	wrlong	_var01, arg01
0944c                 | _module_align_middle_ret
0944c     2D 00 64 FD | 	ret
09450                 | 
09450                 | _module_align_center_sector
09450     3A E1 02 FB | 	rdlong	muldiva_, arg01
09454     70 E3 02 F6 | 	mov	muldivb_, muldiva_
09458     F8 E2 06 F1 | 	add	muldivb_, #248
0945c     71 E3 02 FB | 	rdlong	muldivb_, muldivb_
09460     01 E2 66 F0 | 	shl	muldivb_, #1
09464     F0 E0 06 F1 | 	add	muldiva_, #240
09468     70 E1 02 FB | 	rdlong	muldiva_, muldiva_
0946c     71 E1 82 F1 | 	sub	muldiva_, muldivb_
09470     70 77 02 FD | 	qmul	arg02, muldiva_
09474     3A E1 02 FB | 	rdlong	muldiva_, arg01
09478     70 E3 02 F6 | 	mov	muldivb_, muldiva_
0947c     E8 E0 06 F1 | 	add	muldiva_, #232
09480     70 77 02 FB | 	rdlong	arg02, muldiva_
09484     F8 E2 06 F1 | 	add	muldivb_, #248
09488     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
0948c     70 77 02 F1 | 	add	arg02, muldiva_
09490     3C E3 02 F6 | 	mov	muldivb_, arg03
09494     18 E0 62 FD | 	getqx	muldiva_
09498     BB 00 A0 FD | 	call	#divide_
0949c     71 77 02 F1 | 	add	arg02, muldivb_
094a0     F0 74 06 F1 | 	add	arg01, #240
094a4     3A E1 02 FB | 	rdlong	muldiva_, arg01
094a8     70 E1 52 F6 | 	abs	muldiva_, muldiva_ wc
094ac     01 E0 46 F0 | 	shr	muldiva_, #1
094b0     70 E1 82 F6 | 	negc	muldiva_, muldiva_
094b4     70 77 82 F1 | 	sub	arg02, muldiva_
094b8     08 74 86 F1 | 	sub	arg01, #8
094bc     3A 77 62 FC | 	wrlong	arg02, arg01
094c0                 | _module_align_center_sector_ret
094c0     2D 00 64 FD | 	ret
094c4                 | 
094c4                 | _module_align_space_even
094c4     3A 3B 02 FB | 	rdlong	_var01, arg01
094c8     F0 74 06 F1 | 	add	arg01, #240
094cc     3A 3D 02 FB | 	rdlong	_var02, arg01
094d0     1E 79 02 FD | 	qmul	arg03, _var02
094d4     1D E1 02 F6 | 	mov	muldiva_, _var01
094d8     F0 E0 06 F1 | 	add	muldiva_, #240
094dc     70 E1 02 FB | 	rdlong	muldiva_, muldiva_
094e0     18 E2 62 FD | 	getqx	muldivb_
094e4     71 E1 82 F1 | 	sub	muldiva_, muldivb_
094e8     70 77 02 FD | 	qmul	arg02, muldiva_
094ec     01 78 06 F1 | 	add	arg03, #1
094f0     3C E3 02 F6 | 	mov	muldivb_, arg03
094f4     18 E0 62 FD | 	getqx	muldiva_
094f8     BB 00 A0 FD | 	call	#divide_
094fc     01 76 86 F1 | 	sub	arg02, #1
09500     1E 77 02 FD | 	qmul	arg02, _var02
09504     E8 3A 06 F1 | 	add	_var01, #232
09508     1D 3D 02 FB | 	rdlong	_var02, _var01
0950c     71 3D 02 F1 | 	add	_var02, muldivb_
09510     08 74 86 F1 | 	sub	arg01, #8
09514     18 3A 62 FD | 	getqx	_var01
09518     1D 3D 02 F1 | 	add	_var02, _var01
0951c     3A 3D 62 FC | 	wrlong	_var02, arg01
09520                 | _module_align_space_even_ret
09520     2D 00 64 FD | 	ret
09524                 | 
09524                 | _module_align_above
09524     EC 76 06 F1 | 	add	arg02, #236
09528     3B 3B 02 FB | 	rdlong	_var01, arg02
0952c     F4 74 06 F1 | 	add	arg01, #244
09530     3A 3D 02 FB | 	rdlong	_var02, arg01
09534     1E 3B 82 F1 | 	sub	_var01, _var02
09538     18 76 06 F1 | 	add	arg02, #24
0953c     3B 3D 02 FB | 	rdlong	_var02, arg02
09540     1E 3B 82 F1 | 	sub	_var01, _var02
09544     08 74 86 F1 | 	sub	arg01, #8
09548     3A 3B 62 FC | 	wrlong	_var01, arg01
0954c                 | _module_align_above_ret
0954c     2D 00 64 FD | 	ret
09550                 | 
09550                 | _module_align_left
09550     E8 76 06 F1 | 	add	arg02, #232
09554     3B 3B 02 FB | 	rdlong	_var01, arg02
09558     F0 74 06 F1 | 	add	arg01, #240
0955c     3A 3D 02 FB | 	rdlong	_var02, arg01
09560     1E 3B 82 F1 | 	sub	_var01, _var02
09564     18 76 06 F1 | 	add	arg02, #24
09568     3B 3D 02 FB | 	rdlong	_var02, arg02
0956c     1E 3B 82 F1 | 	sub	_var01, _var02
09570     08 74 86 F1 | 	sub	arg01, #8
09574     3A 3B 62 FC | 	wrlong	_var01, arg01
09578                 | _module_align_left_ret
09578     2D 00 64 FD | 	ret
0957c                 | 
0957c                 | _module_align_below
0957c     EC 76 06 F1 | 	add	arg02, #236
09580     3B 3B 02 FB | 	rdlong	_var01, arg02
09584     08 76 06 F1 | 	add	arg02, #8
09588     3B 3D 02 FB | 	rdlong	_var02, arg02
0958c     1E 3B 02 F1 | 	add	_var01, _var02
09590     10 76 06 F1 | 	add	arg02, #16
09594     3B 3D 02 FB | 	rdlong	_var02, arg02
09598     1E 3B 02 F1 | 	add	_var01, _var02
0959c     EC 74 06 F1 | 	add	arg01, #236
095a0     3A 3B 62 FC | 	wrlong	_var01, arg01
095a4                 | _module_align_below_ret
095a4     2D 00 64 FD | 	ret
095a8                 | 
095a8                 | _module_align_right
095a8     E8 76 06 F1 | 	add	arg02, #232
095ac     3B 3B 02 FB | 	rdlong	_var01, arg02
095b0     08 76 06 F1 | 	add	arg02, #8
095b4     3B 3D 02 FB | 	rdlong	_var02, arg02
095b8     1E 3B 02 F1 | 	add	_var01, _var02
095bc     10 76 06 F1 | 	add	arg02, #16
095c0     3B 3D 02 FB | 	rdlong	_var02, arg02
095c4     1E 3B 02 F1 | 	add	_var01, _var02
095c8     E8 74 06 F1 | 	add	arg01, #232
095cc     3A 3B 62 FC | 	wrlong	_var01, arg01
095d0                 | _module_align_right_ret
095d0     2D 00 64 FD | 	ret
095d4                 | 
095d4                 | _module_fit_width
095d4     3A 3B 02 FB | 	rdlong	_var01, arg01
095d8     1D 3D 02 F6 | 	mov	_var02, _var01
095dc     F0 3A 06 F1 | 	add	_var01, #240
095e0     1D 3B 02 FB | 	rdlong	_var01, _var01
095e4     F8 3C 06 F1 | 	add	_var02, #248
095e8     1E 3D 02 FB | 	rdlong	_var02, _var02
095ec     1E 3B 82 F1 | 	sub	_var01, _var02
095f0     3A 3D 02 FB | 	rdlong	_var02, arg01
095f4     F8 3C 06 F1 | 	add	_var02, #248
095f8     1E 3D 02 FB | 	rdlong	_var02, _var02
095fc     1E 3B 82 F1 | 	sub	_var01, _var02
09600     F0 74 06 F1 | 	add	arg01, #240
09604     3A 3B 62 FC | 	wrlong	_var01, arg01
09608                 | _module_fit_width_ret
09608     2D 00 64 FD | 	ret
0960c                 | 
0960c                 | _module_fit_space_even
0960c     3A E3 02 FB | 	rdlong	muldivb_, arg01
09610     00 75 06 F1 | 	add	arg01, #256
09614     3A E1 02 FB | 	rdlong	muldiva_, arg01
09618     70 77 02 FD | 	qmul	arg02, muldiva_
0961c     71 E1 02 F6 | 	mov	muldiva_, muldivb_
09620     00 E1 06 F1 | 	add	muldiva_, #256
09624     70 3B 02 FB | 	rdlong	_var01, muldiva_
09628     01 3A 66 F0 | 	shl	_var01, #1
0962c     F0 E2 06 F1 | 	add	muldivb_, #240
09630     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
09634     1D E1 82 F1 | 	sub	muldiva_, _var01
09638     3B E3 02 F6 | 	mov	muldivb_, arg02
0963c     18 3A 62 FD | 	getqx	_var01
09640     1D E1 82 F1 | 	sub	muldiva_, _var01
09644     BB 00 A0 FD | 	call	#divide_
09648     10 74 86 F1 | 	sub	arg01, #16
0964c     3A E3 62 FC | 	wrlong	muldivb_, arg01
09650                 | _module_fit_space_even_ret
09650     2D 00 64 FD | 	ret
09654                 | 
09654                 | _module_fit_space_even_verticle
09654     3A E3 02 FB | 	rdlong	muldivb_, arg01
09658     04 75 06 F1 | 	add	arg01, #260
0965c     3A E1 02 FB | 	rdlong	muldiva_, arg01
09660     70 77 02 FD | 	qmul	arg02, muldiva_
09664     71 E1 02 F6 | 	mov	muldiva_, muldivb_
09668     04 E1 06 F1 | 	add	muldiva_, #260
0966c     70 3B 02 FB | 	rdlong	_var01, muldiva_
09670     01 3A 66 F0 | 	shl	_var01, #1
09674     F4 E2 06 F1 | 	add	muldivb_, #244
09678     71 E1 02 FB | 	rdlong	muldiva_, muldivb_
0967c     1D E1 82 F1 | 	sub	muldiva_, _var01
09680     3B E3 02 F6 | 	mov	muldivb_, arg02
09684     18 3A 62 FD | 	getqx	_var01
09688     1D E1 82 F1 | 	sub	muldiva_, _var01
0968c     BB 00 A0 FD | 	call	#divide_
09690     10 74 86 F1 | 	sub	arg01, #16
09694     3A E3 62 FC | 	wrlong	muldivb_, arg01
09698                 | _module_fit_space_even_verticle_ret
09698     2D 00 64 FD | 	ret
0969c                 | 
0969c                 | _module_fit_height
0969c     3A 3B 02 FB | 	rdlong	_var01, arg01
096a0     1D 3D 02 F6 | 	mov	_var02, _var01
096a4     F4 3A 06 F1 | 	add	_var01, #244
096a8     1D 3B 02 FB | 	rdlong	_var01, _var01
096ac     FC 3C 06 F1 | 	add	_var02, #252
096b0     1E 3D 02 FB | 	rdlong	_var02, _var02
096b4     1E 3B 82 F1 | 	sub	_var01, _var02
096b8     3A 3D 02 FB | 	rdlong	_var02, arg01
096bc     FC 3C 06 F1 | 	add	_var02, #252
096c0     1E 3D 02 FB | 	rdlong	_var02, _var02
096c4     1E 3B 82 F1 | 	sub	_var01, _var02
096c8     F4 74 06 F1 | 	add	arg01, #244
096cc     3A 3B 62 FC | 	wrlong	_var01, arg01
096d0                 | _module_fit_height_ret
096d0     2D 00 64 FD | 	ret
096d4                 | 
096d4                 | _module_fit_below
096d4     03 4C 05 F6 | 	mov	COUNT_, #3
096d8     A9 00 A0 FD | 	call	#pushregs_
096dc     3A 8D 02 F6 | 	mov	local01, arg01
096e0     3B 8F 02 F6 | 	mov	local02, arg02
096e4     46 75 02 F6 | 	mov	arg01, local01
096e8     47 77 02 F6 | 	mov	arg02, local02
096ec     8C FE BF FD | 	call	#_module_align_below
096f0     46 77 02 FB | 	rdlong	arg02, local01
096f4     3B 75 02 F6 | 	mov	arg01, arg02
096f8     EC 8E 06 F1 | 	add	local02, #236
096fc     47 91 02 FB | 	rdlong	local03, local02
09700     EC 74 06 F1 | 	add	arg01, #236
09704     3A 75 02 FB | 	rdlong	arg01, arg01
09708     3A 91 82 F1 | 	sub	local03, arg01
0970c     F4 76 06 F1 | 	add	arg02, #244
09710     3B 77 02 FB | 	rdlong	arg02, arg02
09714     48 77 82 F1 | 	sub	arg02, local03
09718     08 8E 06 F1 | 	add	local02, #8
0971c     47 91 02 FB | 	rdlong	local03, local02
09720     48 77 82 F1 | 	sub	arg02, local03
09724     10 8E 06 F1 | 	add	local02, #16
09728     47 91 02 FB | 	rdlong	local03, local02
0972c     48 77 82 F1 | 	sub	arg02, local03
09730     46 91 02 FB | 	rdlong	local03, local01
09734     FC 90 06 F1 | 	add	local03, #252
09738     48 91 02 FB | 	rdlong	local03, local03
0973c     48 77 82 F1 | 	sub	arg02, local03
09740     F4 8C 06 F1 | 	add	local01, #244
09744     46 77 62 FC | 	wrlong	arg02, local01
09748     A8 F0 03 F6 | 	mov	ptra, fp
0974c     B3 00 A0 FD | 	call	#popregs_
09750                 | _module_fit_below_ret
09750     2D 00 64 FD | 	ret
09754                 | 
09754                 | _module_fit_right
09754     3A 3B 02 FB | 	rdlong	_var01, arg01
09758     1D 3D 02 F6 | 	mov	_var02, _var01
0975c     E8 76 06 F1 | 	add	arg02, #232
09760     3B 3F 02 FB | 	rdlong	_var03, arg02
09764     E8 3C 06 F1 | 	add	_var02, #232
09768     1E 3D 02 FB | 	rdlong	_var02, _var02
0976c     1E 3F 82 F1 | 	sub	_var03, _var02
09770     F0 3A 06 F1 | 	add	_var01, #240
09774     1D 3D 02 FB | 	rdlong	_var02, _var01
09778     1F 3D 82 F1 | 	sub	_var02, _var03
0977c     08 76 06 F1 | 	add	arg02, #8
09780     3B 3F 02 FB | 	rdlong	_var03, arg02
09784     1F 3D 82 F1 | 	sub	_var02, _var03
09788     10 76 06 F1 | 	add	arg02, #16
0978c     3B 3F 02 FB | 	rdlong	_var03, arg02
09790     1F 3D 82 F1 | 	sub	_var02, _var03
09794     3A 3F 02 FB | 	rdlong	_var03, arg01
09798     F8 3E 06 F1 | 	add	_var03, #248
0979c     1F 3F 02 FB | 	rdlong	_var03, _var03
097a0     1F 3D 82 F1 | 	sub	_var02, _var03
097a4     F0 74 06 F1 | 	add	arg01, #240
097a8     3A 3D 62 FC | 	wrlong	_var02, arg01
097ac                 | _module_fit_right_ret
097ac     2D 00 64 FD | 	ret
097b0                 | 
097b0                 | _module_draw
097b0     13 4C 05 F6 | 	mov	COUNT_, #19
097b4     A9 00 A0 FD | 	call	#pushregs_
097b8                 | _module_draw_enter
097b8     3A 8D 02 F6 | 	mov	local01, arg01
097bc     3B 8F 02 F6 | 	mov	local02, arg02
097c0     18 8F 06 F1 | 	add	local02, #280
097c4     47 35 CA FA | 	rdbyte	result1, local02 wz
097c8     18 8F 86 F1 | 	sub	local02, #280
097cc                 | '     {
097cc                 | '         return;
097cc     48 05 90 AD |  if_e	jmp	#LR__0346
097d0     30 8F 06 F1 | 	add	local02, #304
097d4     47 75 02 FB | 	rdlong	arg01, local02
097d8     00 76 06 F6 | 	mov	arg02, #0
097dc     78 BB B1 FD | 	call	#__system___funcptr_cmp
097e0     00 34 0E F2 | 	cmp	result1, #0 wz
097e4     46 75 02 56 |  if_ne	mov	arg01, local01
097e8     20 1C 00 5F 
097ec     00 76 06 56 |  if_ne	mov	arg02, ##3686400
097f0     E0 A0 BF 5D |  if_ne	call	#_display_canvas_image_start_address
097f4                 | '     {
097f4                 | '         display_canvas_image_start_address(display,  1024 * 600 * 2 * 3 );
097f4                 | '     }
097f4                 | '     switch (module->type)
097f4     64 8E 86 F1 | 	sub	local02, #100
097f8     47 91 02 FB | 	rdlong	local03, local02
097fc     CC 8E 86 F1 | 	sub	local02, #204
09800     48 93 02 F6 | 	mov	local04, local03
09804     01 92 86 F1 | 	sub	local04, #1
09808     07 92 26 F3 | 	fle	local04, #7
0980c     30 92 62 FD | 	jmprel	local04
09810                 | LR__0323
09810     1C 00 90 FD | 	jmp	#LR__0324
09814     D4 02 90 FD | 	jmp	#LR__0336
09818     F8 02 90 FD | 	jmp	#LR__0337
0981c     30 03 90 FD | 	jmp	#LR__0338
09820     74 03 90 FD | 	jmp	#LR__0339
09824     E4 03 90 FD | 	jmp	#LR__0340
09828     14 04 90 FD | 	jmp	#LR__0341
0982c     50 04 90 FD | 	jmp	#LR__0342
09830                 | LR__0324
09830     00 94 06 F6 | 	mov	local05, #0
09834     EC 8E 06 F1 | 	add	local02, #236
09838     47 97 02 FB | 	rdlong	local06, local02
0983c     EC 8E 86 F1 | 	sub	local02, #236
09840     47 75 02 F6 | 	mov	arg01, local02
09844     9C F9 BF FD | 	call	#_module_text_font_width
09848     1A 99 02 F6 | 	mov	local07, result1
0984c     47 75 02 F6 | 	mov	arg01, local02
09850     34 FA BF FD | 	call	#_module_text_font_height
09854     1A 9B 02 F6 | 	mov	local08, result1
09858                 | '         switch (module->data.text.alignmentH)
09858     DC 8E 06 F1 | 	add	local02, #220
0985c     47 9D 02 FB | 	rdlong	local09, local02
09860     DC 8E 86 F1 | 	sub	local02, #220
09864     4E 9F 02 F6 | 	mov	local10, local09
09868     01 9E 86 F1 | 	sub	local10, #1
0986c     03 9E 26 F3 | 	fle	local10, #3
09870     30 9E 62 FD | 	jmprel	local10
09874                 | LR__0325
09874     0C 00 90 FD | 	jmp	#LR__0326
09878     24 00 90 FD | 	jmp	#LR__0327
0987c     50 00 90 FD | 	jmp	#LR__0328
09880     84 00 90 FD | 	jmp	#LR__0329
09884                 | LR__0326
09884     E8 8E 06 F1 | 	add	local02, #232
09888     47 95 02 FB | 	rdlong	local05, local02
0988c     10 8E 06 F1 | 	add	local02, #16
09890     47 A1 02 FB | 	rdlong	local11, local02
09894     F8 8E 86 F1 | 	sub	local02, #248
09898     50 95 02 F1 | 	add	local05, local11
0989c                 | '             x = module->x + module->px;
0989c                 | '             break;
0989c     68 00 90 FD | 	jmp	#LR__0329
098a0                 | LR__0327
098a0     F0 8E 06 F1 | 	add	local02, #240
098a4     47 9D 02 FB | 	rdlong	local09, local02
098a8     4C 9D 82 F1 | 	sub	local09, local07
098ac     4E A3 52 F6 | 	abs	local12, local09 wc
098b0     01 A2 46 F0 | 	shr	local12, #1
098b4     51 A3 82 F6 | 	negc	local12, local12
098b8     08 8E 86 F1 | 	sub	local02, #8
098bc     47 A5 02 FB | 	rdlong	local13, local02
098c0     E8 8E 86 F1 | 	sub	local02, #232
098c4     52 95 02 F6 | 	mov	local05, local13
098c8     51 95 02 F1 | 	add	local05, local12
098cc                 | '             x = module->x + (module->w - width) / 2;
098cc                 | '             break;
098cc     38 00 90 FD | 	jmp	#LR__0329
098d0                 | LR__0328
098d0     E8 8E 06 F1 | 	add	local02, #232
098d4     47 A7 02 FB | 	rdlong	local14, local02
098d8     53 A9 02 F6 | 	mov	local15, local14
098dc     08 8E 06 F1 | 	add	local02, #8
098e0     47 A3 02 FB | 	rdlong	local12, local02
098e4     51 A1 02 F6 | 	mov	local11, local12
098e8     51 A9 02 F1 | 	add	local15, local12
098ec     4C A9 82 F1 | 	sub	local15, local07
098f0     08 8E 06 F1 | 	add	local02, #8
098f4     47 AB 02 FB | 	rdlong	local16, local02
098f8     F8 8E 86 F1 | 	sub	local02, #248
098fc     55 A5 02 F6 | 	mov	local13, local16
09900     52 A9 82 F1 | 	sub	local15, local13
09904     54 95 02 F6 | 	mov	local05, local15
09908                 | '             x = module->x + module->w - width - module->px;
09908                 | '             break;
09908                 | LR__0329
09908                 | '         }
09908                 | ' 
09908                 | '         switch (module->data.text.alignmentV)
09908     E0 8E 06 F1 | 	add	local02, #224
0990c     47 9D 02 FB | 	rdlong	local09, local02
09910     E0 8E 86 F1 | 	sub	local02, #224
09914     4E AD 02 F6 | 	mov	local17, local09
09918     04 AC 86 F1 | 	sub	local17, #4
0991c     03 AC 26 F3 | 	fle	local17, #3
09920     30 AC 62 FD | 	jmprel	local17
09924                 | LR__0330
09924     0C 00 90 FD | 	jmp	#LR__0331
09928     24 00 90 FD | 	jmp	#LR__0332
0992c     4C 00 90 FD | 	jmp	#LR__0333
09930     80 00 90 FD | 	jmp	#LR__0334
09934                 | LR__0331
09934     EC 8E 06 F1 | 	add	local02, #236
09938     47 97 02 FB | 	rdlong	local06, local02
0993c     10 8E 06 F1 | 	add	local02, #16
09940     47 A1 02 FB | 	rdlong	local11, local02
09944     FC 8E 86 F1 | 	sub	local02, #252
09948     50 97 02 F1 | 	add	local06, local11
0994c                 | '             y = module->y + module->py;
0994c                 | '             break;
0994c     64 00 90 FD | 	jmp	#LR__0334
09950                 | LR__0332
09950     F4 8E 06 F1 | 	add	local02, #244
09954     47 A7 02 FB | 	rdlong	local14, local02
09958     4D A7 82 F1 | 	sub	local14, local08
0995c     53 A3 52 F6 | 	abs	local12, local14 wc
09960     01 A2 46 F0 | 	shr	local12, #1
09964     51 A3 82 F6 | 	negc	local12, local12
09968     08 8E 86 F1 | 	sub	local02, #8
0996c     47 97 02 FB | 	rdlong	local06, local02
09970     EC 8E 86 F1 | 	sub	local02, #236
09974     51 97 02 F1 | 	add	local06, local12
09978                 | '             y = module->y + (module->h - height) / 2;
09978                 | '             break;
09978     38 00 90 FD | 	jmp	#LR__0334
0997c                 | LR__0333
0997c     EC 8E 06 F1 | 	add	local02, #236
09980     47 A7 02 FB | 	rdlong	local14, local02
09984     53 A9 02 F6 | 	mov	local15, local14
09988     08 8E 06 F1 | 	add	local02, #8
0998c     47 A3 02 FB | 	rdlong	local12, local02
09990     51 A1 02 F6 | 	mov	local11, local12
09994     51 A9 02 F1 | 	add	local15, local12
09998     4D A9 82 F1 | 	sub	local15, local08
0999c     08 8E 06 F1 | 	add	local02, #8
099a0     47 AB 02 FB | 	rdlong	local16, local02
099a4     FC 8E 86 F1 | 	sub	local02, #252
099a8     55 A5 02 F6 | 	mov	local13, local16
099ac     52 A9 82 F1 | 	sub	local15, local13
099b0     54 97 02 F6 | 	mov	local06, local15
099b4                 | '             y = module->y + module->h - height - module->py;
099b4                 | '             break;
099b4                 | LR__0334
099b4     D4 8E 06 F1 | 	add	local02, #212
099b8     47 79 02 FB | 	rdlong	arg03, local02
099bc     D4 8E 86 F1 | 	sub	local02, #212
099c0     46 75 02 F6 | 	mov	arg01, local01
099c4     00 76 06 F6 | 	mov	arg02, #0
099c8     00 7A 06 F6 | 	mov	arg04, #0
099cc     90 A4 BF FD | 	call	#_display_set_text_parameter1
099d0     46 75 02 F6 | 	mov	arg01, local01
099d4     00 76 06 F6 | 	mov	arg02, #0
099d8     00 78 06 F6 | 	mov	arg03, #0
099dc     00 7A 06 F6 | 	mov	arg04, #0
099e0     00 7C 06 F6 | 	mov	arg05, #0
099e4     C8 A4 BF FD | 	call	#_display_set_text_parameter2
099e8     47 A9 02 F6 | 	mov	local15, local02
099ec     0C 8F 06 F1 | 	add	local02, #268
099f0     47 A7 02 FB | 	rdlong	local14, local02
099f4     0C 8F 86 F1 | 	sub	local02, #268
099f8     47 75 02 F6 | 	mov	arg01, local02
099fc     20 FD B0 FD | 	call	#_get_radius_1634
09a00     1A 7B 02 F6 | 	mov	arg04, result1
09a04     46 75 02 F6 | 	mov	arg01, local01
09a08     54 77 02 F6 | 	mov	arg02, local15
09a0c     53 79 02 F6 | 	mov	arg03, local14
09a10     70 FD B0 FD | 	call	#_draw_border_rectangle_rounded_1636
09a14     00 34 0E F2 | 	cmp	result1, #0 wz
09a18     44 00 90 5D |  if_ne	jmp	#LR__0335
09a1c     E8 8E 06 F1 | 	add	local02, #232
09a20     47 77 02 FB | 	rdlong	arg02, local02
09a24     04 8E 06 F1 | 	add	local02, #4
09a28     47 79 02 FB | 	rdlong	arg03, local02
09a2c     3B 7B 02 F6 | 	mov	arg04, arg02
09a30     04 8E 06 F1 | 	add	local02, #4
09a34     47 AB 02 FB | 	rdlong	local16, local02
09a38     55 7B 02 F1 | 	add	arg04, local16
09a3c     3C 7D 02 F6 | 	mov	arg05, arg03
09a40     04 8E 06 F1 | 	add	local02, #4
09a44     47 AD 02 FB | 	rdlong	local17, local02
09a48     56 7D 02 F1 | 	add	arg05, local17
09a4c     18 8E 06 F1 | 	add	local02, #24
09a50     47 7F 02 FB | 	rdlong	arg06, local02
09a54     0C 8F 86 F1 | 	sub	local02, #268
09a58     46 75 02 F6 | 	mov	arg01, local01
09a5c     9C A6 BF FD | 	call	#_display_draw_square_fill
09a60                 | LR__0335
09a60     10 8F 06 F1 | 	add	local02, #272
09a64     47 77 02 FB | 	rdlong	arg02, local02
09a68     04 8E 86 F1 | 	sub	local02, #4
09a6c     47 79 02 FB | 	rdlong	arg03, local02
09a70     3C AD 02 F6 | 	mov	local17, arg03
09a74     46 75 02 F6 | 	mov	arg01, local01
09a78     BC A0 BF FD | 	call	#_display_fore_ground_color_16bpp
09a7c     46 75 02 F6 | 	mov	arg01, local01
09a80     56 77 02 F6 | 	mov	arg02, local17
09a84     38 A1 BF FD | 	call	#_display_back_ground_color_16bpp
09a88     3C 8E 86 F1 | 	sub	local02, #60
09a8c     47 7B 02 FB | 	rdlong	arg04, local02
09a90     46 75 02 F6 | 	mov	arg01, local01
09a94     4A 77 02 F6 | 	mov	arg02, local05
09a98     4B 79 02 F6 | 	mov	arg03, local06
09a9c     6C A4 BF FD | 	call	#_display_draw_string
09aa0     08 8E 06 F1 | 	add	local02, #8
09aa4     47 9D CA FA | 	rdbyte	local09, local02 wz
09aa8     D8 8E 86 F1 | 	sub	local02, #216
09aac     D0 01 90 AD |  if_e	jmp	#LR__0342
09ab0     4B 79 02 F6 | 	mov	arg03, local06
09ab4     4D 79 02 F1 | 	add	arg03, local08
09ab8     01 78 06 F1 | 	add	arg03, #1
09abc     4A 7B 02 F6 | 	mov	arg04, local05
09ac0     4C 7B 02 F1 | 	add	arg04, local07
09ac4     4D 97 02 F1 | 	add	local06, local08
09ac8     01 96 06 F1 | 	add	local06, #1
09acc     10 8F 06 F1 | 	add	local02, #272
09ad0     47 7F 02 FB | 	rdlong	arg06, local02
09ad4     10 8F 86 F1 | 	sub	local02, #272
09ad8     46 75 02 F6 | 	mov	arg01, local01
09adc     4A 77 02 F6 | 	mov	arg02, local05
09ae0     4B 7D 02 F6 | 	mov	arg05, local06
09ae4     A8 A4 BF FD | 	call	#_display_draw_line
09ae8                 | '             display_draw_line(display, x, y + height + 1, x + width, y + height + 1, module->foregroundColor);
09ae8                 | '         break;
09ae8     94 01 90 FD | 	jmp	#LR__0342
09aec                 | LR__0336
09aec     D0 8E 06 F1 | 	add	local02, #208
09af0     47 77 02 FB | 	rdlong	arg02, local02
09af4     18 8E 06 F1 | 	add	local02, #24
09af8     47 79 02 FB | 	rdlong	arg03, local02
09afc     04 8E 06 F1 | 	add	local02, #4
09b00     47 7B 02 FB | 	rdlong	arg04, local02
09b04     EC 8E 86 F1 | 	sub	local02, #236
09b08     46 75 02 F6 | 	mov	arg01, local01
09b0c     A0 97 BF FD | 	call	#_display_bte_memory_copy_image
09b10                 | '     {
09b10                 | '         display_bte_memory_copy_image(display, module->data.image, module->x, module->y);
09b10                 | '         break;
09b10     6C 01 90 FD | 	jmp	#LR__0342
09b14                 | LR__0337
09b14     E8 8E 06 F1 | 	add	local02, #232
09b18     47 77 02 FB | 	rdlong	arg02, local02
09b1c     04 8E 06 F1 | 	add	local02, #4
09b20     47 79 02 FB | 	rdlong	arg03, local02
09b24     3B 7B 02 F6 | 	mov	arg04, arg02
09b28     04 8E 06 F1 | 	add	local02, #4
09b2c     47 AB 02 FB | 	rdlong	local16, local02
09b30     55 7B 02 F1 | 	add	arg04, local16
09b34     3C 7D 02 F6 | 	mov	arg05, arg03
09b38     20 8E 06 F1 | 	add	local02, #32
09b3c     47 7F 02 FB | 	rdlong	arg06, local02
09b40     10 8F 86 F1 | 	sub	local02, #272
09b44     46 75 02 F6 | 	mov	arg01, local01
09b48     44 A4 BF FD | 	call	#_display_draw_line
09b4c                 | '     {
09b4c                 | '         display_draw_line(display, module->x, module->y, module->x + module->w, module->y, module->foregroundColor);
09b4c                 | '         break;
09b4c     30 01 90 FD | 	jmp	#LR__0342
09b50                 | LR__0338
09b50     E8 8E 06 F1 | 	add	local02, #232
09b54     47 77 02 FB | 	rdlong	arg02, local02
09b58     04 8E 06 F1 | 	add	local02, #4
09b5c     47 79 02 FB | 	rdlong	arg03, local02
09b60     3B 7B 02 F6 | 	mov	arg04, arg02
09b64     04 8E 06 F1 | 	add	local02, #4
09b68     47 AB 02 FB | 	rdlong	local16, local02
09b6c     55 7B 02 F1 | 	add	arg04, local16
09b70     3C 7D 02 F6 | 	mov	arg05, arg03
09b74     04 8E 06 F1 | 	add	local02, #4
09b78     47 AD 02 FB | 	rdlong	local17, local02
09b7c     56 7D 02 F1 | 	add	arg05, local17
09b80     1C 8E 06 F1 | 	add	local02, #28
09b84     47 7F 02 FB | 	rdlong	arg06, local02
09b88     10 8F 86 F1 | 	sub	local02, #272
09b8c     46 75 02 F6 | 	mov	arg01, local01
09b90     68 A5 BF FD | 	call	#_display_draw_square_fill
09b94                 | '     {
09b94                 | '         display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->foregroundColor);
09b94                 | '         break;
09b94     E8 00 90 FD | 	jmp	#LR__0342
09b98                 | LR__0339
09b98     47 75 02 F6 | 	mov	arg01, local02
09b9c     80 FB B0 FD | 	call	#_get_radius_1634
09ba0     1A AD 02 F6 | 	mov	local17, result1
09ba4     47 77 02 F6 | 	mov	arg02, local02
09ba8     10 8F 06 F1 | 	add	local02, #272
09bac     47 79 02 FB | 	rdlong	arg03, local02
09bb0     46 75 02 F6 | 	mov	arg01, local01
09bb4     56 7B 02 F6 | 	mov	arg04, local17
09bb8     C8 FB B0 FD | 	call	#_draw_border_rectangle_rounded_1636
09bbc     28 8E 86 F1 | 	sub	local02, #40
09bc0     47 77 02 FB | 	rdlong	arg02, local02
09bc4     04 8E 06 F1 | 	add	local02, #4
09bc8     47 79 02 FB | 	rdlong	arg03, local02
09bcc     3B 7B 02 F6 | 	mov	arg04, arg02
09bd0     04 8E 06 F1 | 	add	local02, #4
09bd4     47 AB 02 FB | 	rdlong	local16, local02
09bd8     55 7B 02 F1 | 	add	arg04, local16
09bdc     3C 7D 02 F6 | 	mov	arg05, arg03
09be0     04 8E 06 F1 | 	add	local02, #4
09be4     47 AB 02 FB | 	rdlong	local16, local02
09be8     55 7D 02 F1 | 	add	arg05, local16
09bec     1C 8E 06 F1 | 	add	local02, #28
09bf0     47 83 02 FB | 	rdlong	arg08, local02
09bf4     10 8F 86 F1 | 	sub	local02, #272
09bf8     46 75 02 F6 | 	mov	arg01, local01
09bfc     56 7F 02 F6 | 	mov	arg06, local17
09c00     56 81 02 F6 | 	mov	arg07, local17
09c04     60 A6 BF FD | 	call	#_display_draw_circle_square_fill
09c08                 | '     {
09c08                 | '         radius = get_radius(module);
09c08                 | '         draw_border_rectangle_rounded(display, module, module->foregroundColor, radius);
09c08                 | '         display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, module->foregroundColor);
09c08                 | '         break;
09c08     74 00 90 FD | 	jmp	#LR__0342
09c0c                 | LR__0340
09c0c     3C 8F 06 F1 | 	add	local02, #316
09c10     47 9D 02 FB | 	rdlong	local09, local02
09c14     3C 8F 86 F1 | 	sub	local02, #316
09c18     4E A9 02 FB | 	rdlong	local15, local09
09c1c     04 9C 06 F1 | 	add	local09, #4
09c20     4E A7 02 FB | 	rdlong	local14, local09
09c24     46 75 02 F6 | 	mov	arg01, local01
09c28     47 77 02 F6 | 	mov	arg02, local02
09c2c     C9 AC 02 F6 | 	mov	local17, objptr
09c30     54 93 01 F6 | 	mov	objptr, local15
09c34     2D A6 62 FD | 	call	local14
09c38     56 93 01 F6 | 	mov	objptr, local17
09c3c                 | '     {
09c3c                 | '         module->draw(display, module);
09c3c                 | '         break;
09c3c     40 00 90 FD | 	jmp	#LR__0342
09c40                 | LR__0341
09c40     3C 8F 06 F1 | 	add	local02, #316
09c44     47 A1 02 FB | 	rdlong	local11, local02
09c48     3C 8F 86 F1 | 	sub	local02, #316
09c4c     50 9D 02 F6 | 	mov	local09, local11
09c50     4E A9 02 FB | 	rdlong	local15, local09
09c54     04 9C 06 F1 | 	add	local09, #4
09c58     4E A3 02 FB | 	rdlong	local12, local09
09c5c     51 A7 02 F6 | 	mov	local14, local12
09c60     46 A5 02 F6 | 	mov	local13, local01
09c64     47 AB 02 F6 | 	mov	local16, local02
09c68     52 75 02 F6 | 	mov	arg01, local13
09c6c     55 77 02 F6 | 	mov	arg02, local16
09c70     C9 AE 02 F6 | 	mov	local18, objptr
09c74     54 93 01 F6 | 	mov	objptr, local15
09c78     2D A6 62 FD | 	call	local14
09c7c     57 93 01 F6 | 	mov	objptr, local18
09c80                 | '     {
09c80                 | '         module->draw(display, module);
09c80                 | '         break;
09c80                 | LR__0342
09c80     00 B0 06 F6 | 	mov	local19, #0
09c84                 | '     }
09c84                 | '     }
09c84                 | ' 
09c84                 | '     for (int i = 0; i < module->numChildren; i++)
09c84                 | LR__0343
09c84     E4 8E 06 F1 | 	add	local02, #228
09c88     47 91 02 FB | 	rdlong	local03, local02
09c8c     E4 8E 86 F1 | 	sub	local02, #228
09c90     48 B1 52 F2 | 	cmps	local19, local03 wc
09c94     28 00 90 3D |  if_ae	jmp	#LR__0344
09c98     46 75 02 F6 | 	mov	arg01, local01
09c9c     58 A1 02 F6 | 	mov	local11, local19
09ca0     02 A0 66 F0 | 	shl	local11, #2
09ca4     04 8E 06 F1 | 	add	local02, #4
09ca8     47 A1 02 F1 | 	add	local11, local02
09cac     50 77 02 FB | 	rdlong	arg02, local11
09cb0     FC FA BF FD | 	call	#_module_draw
09cb4     01 B0 06 F1 | 	add	local19, #1
09cb8     04 8E 86 F1 | 	sub	local02, #4
09cbc     C4 FF 9F FD | 	jmp	#LR__0343
09cc0                 | LR__0344
09cc0     30 8F 06 F1 | 	add	local02, #304
09cc4     47 75 02 FB | 	rdlong	arg01, local02
09cc8     30 8F 86 F1 | 	sub	local02, #304
09ccc     00 76 06 F6 | 	mov	arg02, #0
09cd0     84 B6 B1 FD | 	call	#__system___funcptr_cmp
09cd4     00 34 0E F2 | 	cmp	result1, #0 wz
09cd8     3C 00 90 AD |  if_e	jmp	#LR__0345
09cdc     30 8F 06 F1 | 	add	local02, #304
09ce0     47 91 02 FB | 	rdlong	local03, local02
09ce4     30 8F 86 F1 | 	sub	local02, #304
09ce8     48 9D 02 FB | 	rdlong	local09, local03
09cec     04 90 06 F1 | 	add	local03, #4
09cf0     48 A9 02 FB | 	rdlong	local15, local03
09cf4     46 75 02 F6 | 	mov	arg01, local01
09cf8     47 77 02 F6 | 	mov	arg02, local02
09cfc     C9 AA 02 F6 | 	mov	local16, objptr
09d00     4E 93 01 F6 | 	mov	objptr, local09
09d04     2D A8 62 FD | 	call	local15
09d08     55 93 01 F6 | 	mov	objptr, local16
09d0c     46 75 02 F6 | 	mov	arg01, local01
09d10     00 76 06 F6 | 	mov	arg02, #0
09d14     BC 9B BF FD | 	call	#_display_canvas_image_start_address
09d18                 | LR__0345
09d18                 | LR__0346
09d18     A8 F0 03 F6 | 	mov	ptra, fp
09d1c     B3 00 A0 FD | 	call	#popregs_
09d20                 | _module_draw_ret
09d20     2D 00 64 FD | 	ret
09d24                 | 
09d24                 | _keyboard_create
09d24     17 01 00 FF 
09d28     B0 D6 05 F1 | 	add	ptr__dat__, ##143024
09d2c     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
09d30     04 D6 05 F1 | 	add	ptr__dat__, #4
09d34     EB 76 62 FC | 	wrlong	arg02, ptr__dat__
09d38     04 D6 05 F1 | 	add	ptr__dat__, #4
09d3c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
09d40     17 01 00 FF 
09d44     B8 D6 85 F1 | 	sub	ptr__dat__, ##143032
09d48     4A 01 00 FF 
09d4c     6C 77 06 F6 | 	mov	arg02, ##@LR__1964
09d50     F4 C0 BF FD | 	call	#_strcpy
09d54                 | ' }
09d54                 | ' 
09d54                 | ' 
09d54                 | ' Keyboard *keyboard_create(Display *display, Images *images)
09d54                 | ' {
09d54                 | '     staticKeyboard.display = display;
09d54                 | '     staticKeyboard.images = images;
09d54                 | '     strcpy(staticKeyboard.keyboard_buffer, "");
09d54                 | '     return &staticKeyboard;
09d54     17 01 00 FF 
09d58     B0 D6 05 F1 | 	add	ptr__dat__, ##143024
09d5c     EB 34 02 F6 | 	mov	result1, ptr__dat__
09d60     17 01 00 FF 
09d64     B0 D6 85 F1 | 	sub	ptr__dat__, ##143024
09d68                 | _keyboard_create_ret
09d68     2D 00 64 FD | 	ret
09d6c                 | 
09d6c                 | _keyboard_get_input
09d6c     07 4C 05 F6 | 	mov	COUNT_, #7
09d70     A9 00 A0 FD | 	call	#pushregs_
09d74     3A 8D 02 F6 | 	mov	local01, arg01
09d78     3B 8F 02 F6 | 	mov	local02, arg02
09d7c     00 74 06 F6 | 	mov	arg01, #0
09d80     C4 ED B1 FD | 	call	#__system___getiolock_1205
09d84     1A 75 02 F6 | 	mov	arg01, result1
09d88     94 B5 B1 FD | 	call	#__system___lockmem
09d8c     4A 01 00 FF 
09d90     6E 77 06 F6 | 	mov	arg02, ##@LR__1965
09d94     00 74 06 F6 | 	mov	arg01, #0
09d98     00 78 06 F6 | 	mov	arg03, #0
09d9c     14 BB B1 FD | 	call	#__system___basic_print_string
09da0     00 74 06 F6 | 	mov	arg01, #0
09da4     47 77 02 F6 | 	mov	arg02, local02
09da8     00 78 06 F6 | 	mov	arg03, #0
09dac     04 BB B1 FD | 	call	#__system___basic_print_string
09db0     00 74 06 F6 | 	mov	arg01, #0
09db4     0A 76 06 F6 | 	mov	arg02, #10
09db8     00 78 06 F6 | 	mov	arg03, #0
09dbc     A8 BA B1 FD | 	call	#__system___basic_print_char
09dc0     00 74 06 F6 | 	mov	arg01, #0
09dc4     80 ED B1 FD | 	call	#__system___getiolock_1205
09dc8     1A 01 68 FC | 	wrlong	#0, result1
09dcc     5A 8C 06 F1 | 	add	local01, #90
09dd0     46 01 48 FC | 	wrbyte	#0, local01
09dd4     52 8C 86 F1 | 	sub	local01, #82
09dd8     46 75 02 F6 | 	mov	arg01, local01
09ddc     4A 01 00 FF 
09de0     80 77 06 F6 | 	mov	arg02, ##@LR__1966
09de4     60 C0 BF FD | 	call	#_strcpy
09de8     34 8C 06 F1 | 	add	local01, #52
09dec     46 75 02 F6 | 	mov	arg01, local01
09df0     3C 8C 86 F1 | 	sub	local01, #60
09df4     47 77 02 F6 | 	mov	arg02, local02
09df8     4C C0 BF FD | 	call	#_strcpy
09dfc     46 75 02 FB | 	rdlong	arg01, local01
09e00     00 76 06 F6 | 	mov	arg02, #0
09e04     0A 78 C6 F9 | 	decod	arg03, #10
09e08     00 7A 06 F6 | 	mov	arg04, #0
09e0c     00 7C 06 F6 | 	mov	arg05, #0
09e10     C0 12 00 FF 
09e14     00 7E 06 F6 | 	mov	arg06, ##2457600
09e18     0A 80 C6 F9 | 	decod	arg07, #10
09e1c     00 82 06 F6 | 	mov	arg08, #0
09e20     00 84 06 F6 | 	mov	arg09, #0
09e24     0A 86 C6 F9 | 	decod	arg10, #10
09e28     01 00 00 FF 
09e2c     58 88 06 F6 | 	mov	arg11, ##600
09e30     84 A6 BF FD | 	call	#_display_bte_memory_copy
09e34     5C 8C 06 F1 | 	add	local01, #92
09e38     46 91 02 F6 | 	mov	local03, local01
09e3c     48 75 02 F6 | 	mov	arg01, local03
09e40     00 76 06 F6 | 	mov	arg02, #0
09e44     90 EB BF FD | 	call	#_module_init
09e48     40 8D 06 F1 | 	add	local01, #320
09e4c     46 8F 02 F6 | 	mov	local02, local01
09e50     47 75 02 F6 | 	mov	arg01, local02
09e54     48 77 02 F6 | 	mov	arg02, local03
09e58     7C EB BF FD | 	call	#_module_init
09e5c     47 75 02 F6 | 	mov	arg01, local02
09e60     CC 74 06 F1 | 	add	arg01, #204
09e64     3A 09 68 FC | 	wrlong	#4, arg01
09e68     24 74 06 F1 | 	add	arg01, #36
09e6c     02 00 80 FF 
09e70     3A 01 68 FC | 	wrlong	##1024, arg01
09e74     04 74 06 F1 | 	add	arg01, #4
09e78     3A 37 6A FC | 	wrlong	#283, arg01
09e7c     47 75 02 F6 | 	mov	arg01, local02
09e80     E8 74 06 F1 | 	add	arg01, #232
09e84     3A 01 68 FC | 	wrlong	#0, arg01
09e88     04 74 06 F1 | 	add	arg01, #4
09e8c     3A 79 6A FC | 	wrlong	#316, arg01
09e90     47 75 02 F6 | 	mov	arg01, local02
09e94     F8 74 06 F1 | 	add	arg01, #248
09e98     3A 15 68 FC | 	wrlong	#10, arg01
09e9c     04 74 06 F1 | 	add	arg01, #4
09ea0     3A 15 68 FC | 	wrlong	#10, arg01
09ea4     47 75 02 F6 | 	mov	arg01, local02
09ea8     10 78 06 F6 | 	mov	arg03, #16
09eac     10 75 06 F1 | 	add	arg01, #272
09eb0     3A 21 68 FC | 	wrlong	#16, arg01
09eb4     04 74 86 F1 | 	sub	arg01, #4
09eb8     3A 21 68 FC | 	wrlong	#16, arg01
09ebc     40 8D 06 F1 | 	add	local01, #320
09ec0     46 93 02 F6 | 	mov	local04, local01
09ec4     49 75 02 F6 | 	mov	arg01, local04
09ec8     47 77 02 F6 | 	mov	arg02, local02
09ecc     08 EB BF FD | 	call	#_module_init
09ed0     49 75 02 F6 | 	mov	arg01, local04
09ed4     0A 76 C6 F9 | 	decod	arg02, #10
09ed8     28 78 06 F6 | 	mov	arg03, #40
09edc     CC 74 06 F1 | 	add	arg01, #204
09ee0     3A 09 68 FC | 	wrlong	#4, arg01
09ee4     24 74 06 F1 | 	add	arg01, #36
09ee8     02 00 80 FF 
09eec     3A 01 68 FC | 	wrlong	##1024, arg01
09ef0     04 74 06 F1 | 	add	arg01, #4
09ef4     3A 51 68 FC | 	wrlong	#40, arg01
09ef8     00 8E 06 F6 | 	mov	local02, #0
09efc     20 CF 21 FF 
09f00     00 94 06 F6 | 	mov	local05, ##1134444544
09f04     28 74 06 F6 | 	mov	arg01, #40
09f08     60 CE B1 FD | 	call	#__system___float_fromint
09f0c     1A 77 02 F6 | 	mov	arg02, result1
09f10     4A 75 02 F6 | 	mov	arg01, local05
09f14     1F 76 E6 F4 | 	bitnot	arg02, #31
09f18     80 CE B1 FD | 	call	#__system___float_add
09f1c     1A 75 02 F6 | 	mov	arg01, result1
09f20     00 76 06 F6 | 	mov	arg02, #0
09f24     68 D6 B1 FD | 	call	#__system___float_tointeger
09f28     49 75 02 F6 | 	mov	arg01, local04
09f2c     E8 74 06 F1 | 	add	arg01, #232
09f30     3A 8F 62 FC | 	wrlong	local02, arg01
09f34     04 74 06 F1 | 	add	arg01, #4
09f38     3A 35 62 FC | 	wrlong	result1, arg01
09f3c     49 75 02 F6 | 	mov	arg01, local04
09f40     00 78 06 F6 | 	mov	arg03, #0
09f44     10 75 06 F1 | 	add	arg01, #272
09f48     3A 01 68 FC | 	wrlong	#0, arg01
09f4c     04 74 86 F1 | 	sub	arg01, #4
09f50     3A 01 68 FC | 	wrlong	#0, arg01
09f54     40 8D 06 F1 | 	add	local01, #320
09f58     46 8F 02 F6 | 	mov	local02, local01
09f5c     47 75 02 F6 | 	mov	arg01, local02
09f60     49 77 02 F6 | 	mov	arg02, local04
09f64     70 EA BF FD | 	call	#_module_init
09f68     01 00 00 FF 
09f6c     E0 8D 86 F1 | 	sub	local01, ##992
09f70     46 77 02 F6 | 	mov	arg02, local01
09f74     3C 8C 86 F1 | 	sub	local01, #60
09f78     47 75 02 F6 | 	mov	arg01, local02
09f7c     F4 EF BF FD | 	call	#_module_set_text
09f80     47 75 02 F6 | 	mov	arg01, local02
09f84     02 76 06 F6 | 	mov	arg02, #2
09f88     28 F1 BF FD | 	call	#_module_text_font
09f8c     47 75 02 F6 | 	mov	arg01, local02
09f90     3C F0 BF FD | 	call	#_module_text_fit
09f94     47 75 02 F6 | 	mov	arg01, local02
09f98     01 76 06 F6 | 	mov	arg02, #1
09f9c     02 78 06 F6 | 	mov	arg03, #2
09fa0     AC F4 BF FD | 	call	#_module_align_center_sector
09fa4     47 75 02 F6 | 	mov	arg01, local02
09fa8     58 F4 BF FD | 	call	#_module_align_middle
09fac     47 75 02 F6 | 	mov	arg01, local02
09fb0     00 78 06 F6 | 	mov	arg03, #0
09fb4     10 75 06 F1 | 	add	arg01, #272
09fb8     7F 00 80 FF 
09fbc     3A FF 6B FC | 	wrlong	##65535, arg01
09fc0     04 74 86 F1 | 	sub	arg01, #4
09fc4     3A 01 68 FC | 	wrlong	#0, arg01
09fc8     46 75 02 F6 | 	mov	arg01, local01
09fcc     0A 76 06 F6 | 	mov	arg02, #10
09fd0     00 7A 06 F6 | 	mov	arg04, #0
09fd4     00 D0 1F FF 
09fd8     00 7C 06 F6 | 	mov	arg05, ##1067450368
09fdc     C8 F9 B0 FD | 	call	#_createKey_1688
09fe0     1A 95 02 F6 | 	mov	local05, result1
09fe4     46 75 02 F6 | 	mov	arg01, local01
09fe8     0B 76 06 F6 | 	mov	arg02, #11
09fec     4A 79 02 F6 | 	mov	arg03, local05
09ff0     00 7A 06 F6 | 	mov	arg04, #0
09ff4     00 C0 1F FF 
09ff8     00 7C 06 F6 | 	mov	arg05, ##1065353216
09ffc     A8 F9 B0 FD | 	call	#_createKey_1688
0a000     1A 79 02 F6 | 	mov	arg03, result1
0a004     46 75 02 F6 | 	mov	arg01, local01
0a008     0C 76 06 F6 | 	mov	arg02, #12
0a00c     00 7A 06 F6 | 	mov	arg04, #0
0a010     00 C0 1F FF 
0a014     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a018     8C F9 B0 FD | 	call	#_createKey_1688
0a01c     1A 79 02 F6 | 	mov	arg03, result1
0a020     46 75 02 F6 | 	mov	arg01, local01
0a024     0D 76 06 F6 | 	mov	arg02, #13
0a028     00 7A 06 F6 | 	mov	arg04, #0
0a02c     00 C0 1F FF 
0a030     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a034     70 F9 B0 FD | 	call	#_createKey_1688
0a038     1A 79 02 F6 | 	mov	arg03, result1
0a03c     46 75 02 F6 | 	mov	arg01, local01
0a040     0E 76 06 F6 | 	mov	arg02, #14
0a044     00 7A 06 F6 | 	mov	arg04, #0
0a048     00 C0 1F FF 
0a04c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a050     54 F9 B0 FD | 	call	#_createKey_1688
0a054     1A 79 02 F6 | 	mov	arg03, result1
0a058     46 75 02 F6 | 	mov	arg01, local01
0a05c     0F 76 06 F6 | 	mov	arg02, #15
0a060     00 7A 06 F6 | 	mov	arg04, #0
0a064     00 C0 1F FF 
0a068     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a06c     38 F9 B0 FD | 	call	#_createKey_1688
0a070     1A 79 02 F6 | 	mov	arg03, result1
0a074     46 75 02 F6 | 	mov	arg01, local01
0a078     10 76 06 F6 | 	mov	arg02, #16
0a07c     00 7A 06 F6 | 	mov	arg04, #0
0a080     00 C0 1F FF 
0a084     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a088     1C F9 B0 FD | 	call	#_createKey_1688
0a08c     1A 79 02 F6 | 	mov	arg03, result1
0a090     46 75 02 F6 | 	mov	arg01, local01
0a094     11 76 06 F6 | 	mov	arg02, #17
0a098     00 7A 06 F6 | 	mov	arg04, #0
0a09c     00 C0 1F FF 
0a0a0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a0a4     00 F9 B0 FD | 	call	#_createKey_1688
0a0a8     1A 79 02 F6 | 	mov	arg03, result1
0a0ac     46 75 02 F6 | 	mov	arg01, local01
0a0b0     12 76 06 F6 | 	mov	arg02, #18
0a0b4     00 7A 06 F6 | 	mov	arg04, #0
0a0b8     00 C0 1F FF 
0a0bc     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a0c0     E4 F8 B0 FD | 	call	#_createKey_1688
0a0c4     1A 79 02 F6 | 	mov	arg03, result1
0a0c8     46 75 02 F6 | 	mov	arg01, local01
0a0cc     13 76 06 F6 | 	mov	arg02, #19
0a0d0     00 7A 06 F6 | 	mov	arg04, #0
0a0d4     00 C0 1F FF 
0a0d8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a0dc     C8 F8 B0 FD | 	call	#_createKey_1688
0a0e0     1A 79 02 F6 | 	mov	arg03, result1
0a0e4     46 75 02 F6 | 	mov	arg01, local01
0a0e8     14 76 06 F6 | 	mov	arg02, #20
0a0ec     00 7A 06 F6 | 	mov	arg04, #0
0a0f0     00 C0 1F FF 
0a0f4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a0f8     AC F8 B0 FD | 	call	#_createKey_1688
0a0fc     46 75 02 F6 | 	mov	arg01, local01
0a100     15 76 06 F6 | 	mov	arg02, #21
0a104     00 78 06 F6 | 	mov	arg03, #0
0a108     4A 7B 02 F6 | 	mov	arg04, local05
0a10c     00 E0 1F FF 
0a110     00 7C 06 F6 | 	mov	arg05, ##1069547520
0a114     90 F8 B0 FD | 	call	#_createKey_1688
0a118     1A 79 02 F6 | 	mov	arg03, result1
0a11c     46 75 02 F6 | 	mov	arg01, local01
0a120     16 76 06 F6 | 	mov	arg02, #22
0a124     4A 7B 02 F6 | 	mov	arg04, local05
0a128     00 C0 1F FF 
0a12c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a130     74 F8 B0 FD | 	call	#_createKey_1688
0a134     1A 79 02 F6 | 	mov	arg03, result1
0a138     46 75 02 F6 | 	mov	arg01, local01
0a13c     17 76 06 F6 | 	mov	arg02, #23
0a140     4A 7B 02 F6 | 	mov	arg04, local05
0a144     00 C0 1F FF 
0a148     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a14c     58 F8 B0 FD | 	call	#_createKey_1688
0a150     1A 79 02 F6 | 	mov	arg03, result1
0a154     46 75 02 F6 | 	mov	arg01, local01
0a158     18 76 06 F6 | 	mov	arg02, #24
0a15c     4A 7B 02 F6 | 	mov	arg04, local05
0a160     00 C0 1F FF 
0a164     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a168     3C F8 B0 FD | 	call	#_createKey_1688
0a16c     1A 79 02 F6 | 	mov	arg03, result1
0a170     46 75 02 F6 | 	mov	arg01, local01
0a174     19 76 06 F6 | 	mov	arg02, #25
0a178     4A 7B 02 F6 | 	mov	arg04, local05
0a17c     00 C0 1F FF 
0a180     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a184     20 F8 B0 FD | 	call	#_createKey_1688
0a188     1A 79 02 F6 | 	mov	arg03, result1
0a18c     46 75 02 F6 | 	mov	arg01, local01
0a190     1A 76 06 F6 | 	mov	arg02, #26
0a194     4A 7B 02 F6 | 	mov	arg04, local05
0a198     00 C0 1F FF 
0a19c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1a0     04 F8 B0 FD | 	call	#_createKey_1688
0a1a4     1A 79 02 F6 | 	mov	arg03, result1
0a1a8     46 75 02 F6 | 	mov	arg01, local01
0a1ac     1B 76 06 F6 | 	mov	arg02, #27
0a1b0     4A 7B 02 F6 | 	mov	arg04, local05
0a1b4     00 C0 1F FF 
0a1b8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1bc     E8 F7 B0 FD | 	call	#_createKey_1688
0a1c0     1A 79 02 F6 | 	mov	arg03, result1
0a1c4     46 75 02 F6 | 	mov	arg01, local01
0a1c8     1C 76 06 F6 | 	mov	arg02, #28
0a1cc     4A 7B 02 F6 | 	mov	arg04, local05
0a1d0     00 C0 1F FF 
0a1d4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1d8     CC F7 B0 FD | 	call	#_createKey_1688
0a1dc     1A 79 02 F6 | 	mov	arg03, result1
0a1e0     46 75 02 F6 | 	mov	arg01, local01
0a1e4     1D 76 06 F6 | 	mov	arg02, #29
0a1e8     4A 7B 02 F6 | 	mov	arg04, local05
0a1ec     00 C0 1F FF 
0a1f0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a1f4     B0 F7 B0 FD | 	call	#_createKey_1688
0a1f8     1A 79 02 F6 | 	mov	arg03, result1
0a1fc     46 75 02 F6 | 	mov	arg01, local01
0a200     1E 76 06 F6 | 	mov	arg02, #30
0a204     4A 7B 02 F6 | 	mov	arg04, local05
0a208     00 C0 1F FF 
0a20c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a210     94 F7 B0 FD | 	call	#_createKey_1688
0a214     1A 79 02 F6 | 	mov	arg03, result1
0a218     46 75 02 F6 | 	mov	arg01, local01
0a21c     1F 76 06 F6 | 	mov	arg02, #31
0a220     4A 7B 02 F6 | 	mov	arg04, local05
0a224     00 E0 1F FF 
0a228     00 7C 06 F6 | 	mov	arg05, ##1069547520
0a22c     78 F7 B0 FD | 	call	#_createKey_1688
0a230     1A 95 02 F6 | 	mov	local05, result1
0a234     46 75 02 F6 | 	mov	arg01, local01
0a238     20 76 06 F6 | 	mov	arg02, #32
0a23c     00 78 06 F6 | 	mov	arg03, #0
0a240     4A 7B 02 F6 | 	mov	arg04, local05
0a244     00 08 20 FF 
0a248     00 7C 06 F6 | 	mov	arg05, ##1074790400
0a24c     58 F7 B0 FD | 	call	#_createKey_1688
0a250     1A 79 02 F6 | 	mov	arg03, result1
0a254     46 75 02 F6 | 	mov	arg01, local01
0a258     21 76 06 F6 | 	mov	arg02, #33
0a25c     4A 7B 02 F6 | 	mov	arg04, local05
0a260     00 C0 1F FF 
0a264     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a268     3C F7 B0 FD | 	call	#_createKey_1688
0a26c     1A 79 02 F6 | 	mov	arg03, result1
0a270     46 75 02 F6 | 	mov	arg01, local01
0a274     22 76 06 F6 | 	mov	arg02, #34
0a278     4A 7B 02 F6 | 	mov	arg04, local05
0a27c     00 C0 1F FF 
0a280     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a284     20 F7 B0 FD | 	call	#_createKey_1688
0a288     1A 79 02 F6 | 	mov	arg03, result1
0a28c     46 75 02 F6 | 	mov	arg01, local01
0a290     23 76 06 F6 | 	mov	arg02, #35
0a294     4A 7B 02 F6 | 	mov	arg04, local05
0a298     00 C0 1F FF 
0a29c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2a0     04 F7 B0 FD | 	call	#_createKey_1688
0a2a4     1A 79 02 F6 | 	mov	arg03, result1
0a2a8     46 75 02 F6 | 	mov	arg01, local01
0a2ac     24 76 06 F6 | 	mov	arg02, #36
0a2b0     4A 7B 02 F6 | 	mov	arg04, local05
0a2b4     00 C0 1F FF 
0a2b8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2bc     E8 F6 B0 FD | 	call	#_createKey_1688
0a2c0     1A 79 02 F6 | 	mov	arg03, result1
0a2c4     46 75 02 F6 | 	mov	arg01, local01
0a2c8     25 76 06 F6 | 	mov	arg02, #37
0a2cc     4A 7B 02 F6 | 	mov	arg04, local05
0a2d0     00 C0 1F FF 
0a2d4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2d8     CC F6 B0 FD | 	call	#_createKey_1688
0a2dc     1A 79 02 F6 | 	mov	arg03, result1
0a2e0     46 75 02 F6 | 	mov	arg01, local01
0a2e4     26 76 06 F6 | 	mov	arg02, #38
0a2e8     4A 7B 02 F6 | 	mov	arg04, local05
0a2ec     00 C0 1F FF 
0a2f0     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a2f4     B0 F6 B0 FD | 	call	#_createKey_1688
0a2f8     1A 79 02 F6 | 	mov	arg03, result1
0a2fc     46 75 02 F6 | 	mov	arg01, local01
0a300     27 76 06 F6 | 	mov	arg02, #39
0a304     4A 7B 02 F6 | 	mov	arg04, local05
0a308     00 C0 1F FF 
0a30c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a310     94 F6 B0 FD | 	call	#_createKey_1688
0a314     1A 79 02 F6 | 	mov	arg03, result1
0a318     46 75 02 F6 | 	mov	arg01, local01
0a31c     28 76 06 F6 | 	mov	arg02, #40
0a320     4A 7B 02 F6 | 	mov	arg04, local05
0a324     00 C0 1F FF 
0a328     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a32c     78 F6 B0 FD | 	call	#_createKey_1688
0a330     1A 79 02 F6 | 	mov	arg03, result1
0a334     46 75 02 F6 | 	mov	arg01, local01
0a338     29 76 06 F6 | 	mov	arg02, #41
0a33c     4A 7B 02 F6 | 	mov	arg04, local05
0a340     00 C0 1F FF 
0a344     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a348     5C F6 B0 FD | 	call	#_createKey_1688
0a34c     1A 97 02 F6 | 	mov	local06, result1
0a350     46 75 02 F6 | 	mov	arg01, local01
0a354     2A 76 06 F6 | 	mov	arg02, #42
0a358     00 78 06 F6 | 	mov	arg03, #0
0a35c     4B 7B 02 F6 | 	mov	arg04, local06
0a360     00 18 20 FF 
0a364     00 7C 06 F6 | 	mov	arg05, ##1076887552
0a368     3C F6 B0 FD | 	call	#_createKey_1688
0a36c     1A 79 02 F6 | 	mov	arg03, result1
0a370     46 75 02 F6 | 	mov	arg01, local01
0a374     2B 76 06 F6 | 	mov	arg02, #43
0a378     4B 7B 02 F6 | 	mov	arg04, local06
0a37c     00 D0 1F FF 
0a380     00 7C 06 F6 | 	mov	arg05, ##1067450368
0a384     20 F6 B0 FD | 	call	#_createKey_1688
0a388     1A 79 02 F6 | 	mov	arg03, result1
0a38c     46 75 02 F6 | 	mov	arg01, local01
0a390     2C 76 06 F6 | 	mov	arg02, #44
0a394     4B 7B 02 F6 | 	mov	arg04, local06
0a398     00 20 20 FF 
0a39c     00 7C 06 F6 | 	mov	arg05, ##1077936128
0a3a0     04 F6 B0 FD | 	call	#_createKey_1688
0a3a4     1A 79 02 F6 | 	mov	arg03, result1
0a3a8     46 75 02 F6 | 	mov	arg01, local01
0a3ac     2D 76 06 F6 | 	mov	arg02, #45
0a3b0     4B 7B 02 F6 | 	mov	arg04, local06
0a3b4     00 D0 1F FF 
0a3b8     00 7C 06 F6 | 	mov	arg05, ##1067450368
0a3bc     E8 F5 B0 FD | 	call	#_createKey_1688
0a3c0     1A 79 02 F6 | 	mov	arg03, result1
0a3c4     46 75 02 F6 | 	mov	arg01, local01
0a3c8     2E 76 06 F6 | 	mov	arg02, #46
0a3cc     4B 7B 02 F6 | 	mov	arg04, local06
0a3d0     1E 7C C6 F9 | 	decod	arg05, #30
0a3d4     D0 F5 B0 FD | 	call	#_createKey_1688
0a3d8     46 75 02 F6 | 	mov	arg01, local01
0a3dc     07 76 06 F6 | 	mov	arg02, #7
0a3e0     4A 79 02 F6 | 	mov	arg03, local05
0a3e4     00 7A 06 F6 | 	mov	arg04, #0
0a3e8     00 C0 1F FF 
0a3ec     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a3f0     B4 F5 B0 FD | 	call	#_createKey_1688
0a3f4     1A 79 02 F6 | 	mov	arg03, result1
0a3f8     46 75 02 F6 | 	mov	arg01, local01
0a3fc     08 76 06 F6 | 	mov	arg02, #8
0a400     00 7A 06 F6 | 	mov	arg04, #0
0a404     00 C0 1F FF 
0a408     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a40c     98 F5 B0 FD | 	call	#_createKey_1688
0a410     1A 79 02 F6 | 	mov	arg03, result1
0a414     46 75 02 F6 | 	mov	arg01, local01
0a418     09 76 06 F6 | 	mov	arg02, #9
0a41c     00 7A 06 F6 | 	mov	arg04, #0
0a420     00 C0 1F FF 
0a424     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a428     7C F5 B0 FD | 	call	#_createKey_1688
0a42c     1A 97 02 F6 | 	mov	local06, result1
0a430     46 75 02 F6 | 	mov	arg01, local01
0a434     04 76 06 F6 | 	mov	arg02, #4
0a438     4A 79 02 F6 | 	mov	arg03, local05
0a43c     4B 7B 02 F6 | 	mov	arg04, local06
0a440     00 C0 1F FF 
0a444     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a448     5C F5 B0 FD | 	call	#_createKey_1688
0a44c     1A 79 02 F6 | 	mov	arg03, result1
0a450     46 75 02 F6 | 	mov	arg01, local01
0a454     05 76 06 F6 | 	mov	arg02, #5
0a458     4B 7B 02 F6 | 	mov	arg04, local06
0a45c     00 C0 1F FF 
0a460     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a464     40 F5 B0 FD | 	call	#_createKey_1688
0a468     1A 99 02 F6 | 	mov	local07, result1
0a46c     46 75 02 F6 | 	mov	arg01, local01
0a470     06 76 06 F6 | 	mov	arg02, #6
0a474     4C 79 02 F6 | 	mov	arg03, local07
0a478     4B 7B 02 F6 | 	mov	arg04, local06
0a47c     00 C0 1F FF 
0a480     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a484     20 F5 B0 FD | 	call	#_createKey_1688
0a488     46 75 02 F6 | 	mov	arg01, local01
0a48c     01 76 06 F6 | 	mov	arg02, #1
0a490     4A 79 02 F6 | 	mov	arg03, local05
0a494     4C 7B 02 F6 | 	mov	arg04, local07
0a498     00 C0 1F FF 
0a49c     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a4a0     04 F5 B0 FD | 	call	#_createKey_1688
0a4a4     1A 79 02 F6 | 	mov	arg03, result1
0a4a8     46 75 02 F6 | 	mov	arg01, local01
0a4ac     02 76 06 F6 | 	mov	arg02, #2
0a4b0     4C 7B 02 F6 | 	mov	arg04, local07
0a4b4     00 C0 1F FF 
0a4b8     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a4bc     E8 F4 B0 FD | 	call	#_createKey_1688
0a4c0     1A 79 02 F6 | 	mov	arg03, result1
0a4c4     46 75 02 F6 | 	mov	arg01, local01
0a4c8     03 76 06 F6 | 	mov	arg02, #3
0a4cc     4C 7B 02 F6 | 	mov	arg04, local07
0a4d0     00 C0 1F FF 
0a4d4     00 7C 06 F6 | 	mov	arg05, ##1065353216
0a4d8     CC F4 B0 FD | 	call	#_createKey_1688
0a4dc     1A 7B 02 F6 | 	mov	arg04, result1
0a4e0     46 75 02 F6 | 	mov	arg01, local01
0a4e4     00 76 06 F6 | 	mov	arg02, #0
0a4e8     4A 79 02 F6 | 	mov	arg03, local05
0a4ec     00 30 20 FF 
0a4f0     00 7C 06 F6 | 	mov	arg05, ##1080033280
0a4f4     B0 F4 B0 FD | 	call	#_createKey_1688
0a4f8     5A 8C 06 F1 | 	add	local01, #90
0a4fc     46 01 48 FC | 	wrbyte	#0, local01
0a500     5A 8C 86 F1 | 	sub	local01, #90
0a504     46 75 02 FB | 	rdlong	arg01, local01
0a508     48 77 02 F6 | 	mov	arg02, local03
0a50c     A0 F2 BF FD | 	call	#_module_draw
0a510                 | ' 
0a510                 | ' 
0a510                 | '     display_bte_memory_copy(keyboard->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
0a510                 | ' 
0a510                 | ' 
0a510                 | '     Module *root = &(keyboard->root);
0a510                 | '     module_init(root,  (0) );
0a510                 | ' 
0a510                 | '     Module *background = &(keyboard->background);
0a510                 | '     module_init(background, root);
0a510                 | '     module_set_rectangle(background,  1024 , 283.5);
0a510                 | '     module_set_position(background, 0,  600  - 283.5);
0a510                 | '     module_set_padding(background, padding, padding);
0a510                 | '     module_set_color(background,  0x0010 ,  0x0010 );
0a510                 | ' 
0a510                 | '     Module *topBar = &(keyboard->topbar);
0a510                 | '     module_init(topBar, background);
0a510                 | '     module_set_rectangle(topBar,  1024 , topBarSize);
0a510                 | '     module_set_position(topBar, 0,  600  - 283.5 - topBarSize);
0a510                 | '     module_set_color(topBar,  0x0000 ,  0x0000 );
0a510                 | ' 
0a510                 | '     Module *topBarText = &(keyboard->topbarPrompt);
0a510                 | '     module_init(topBarText, topBar);
0a510                 | '     module_set_text(topBarText, keyboard->prompt);
0a510                 | '     module_text_font(topBarText,  2 );
0a510                 | '     module_text_fit(topBarText);
0a510                 | '     module_align_center(topBarText);
0a510                 | '     module_align_middle(topBarText);
0a510                 | '     module_set_color(topBarText,  0xffff ,  0x0000 );
0a510                 | ' 
0a510                 | '     Module *tab = createKey(keyboard, key_tab,  (0) ,  (0) , 1.25);
0a510                 | '     Module *q = createKey(keyboard, key_q, tab,  (0) , 1);
0a510                 | '     Module *w = createKey(keyboard, key_w, q,  (0) , 1);
0a510                 | '     Module *e = createKey(keyboard, key_e, w,  (0) , 1);
0a510                 | '     Module *r = createKey(keyboard, key_r, e,  (0) , 1);
0a510                 | '     Module *t = createKey(keyboard, key_t, r,  (0) , 1);
0a510                 | '     Module *y = createKey(keyboard, key_y, t,  (0) , 1);
0a510                 | '     Module *u = createKey(keyboard, key_u, y,  (0) , 1);
0a510                 | '     Module *i = createKey(keyboard, key_i, u,  (0) , 1);
0a510                 | '     Module *o = createKey(keyboard, key_o, i,  (0) , 1);
0a510                 | '     Module *p = createKey(keyboard, key_p, o,  (0) , 1);
0a510                 | ' 
0a510                 | '     Module *minus = createKey(keyboard, key_minus,  (0) , tab, 1.5);
0a510                 | '     Module *a = createKey(keyboard, key_a, minus, tab, 1);
0a510                 | '     Module *s = createKey(keyboard, key_s, a, tab, 1);
0a510                 | '     Module *d = createKey(keyboard, key_d, s, tab, 1);
0a510                 | '     Module *f = createKey(keyboard, key_f, d, tab, 1);
0a510                 | '     Module *g = createKey(keyboard, key_g, f, tab, 1);
0a510                 | '     Module *h = createKey(keyboard, key_h, g, tab, 1);
0a510                 | '     Module *j = createKey(keyboard, key_j, h, tab, 1);
0a510                 | '     Module *k = createKey(keyboard, key_k, j, tab, 1);
0a510                 | '     Module *l = createKey(keyboard, key_l, k, tab, 1);
0a510                 | '     Module *del = createKey(keyboard, key_del, l, tab, 1.5);
0a510                 | ' 
0a510                 | '     Module *shift = createKey(keyboard, key_shift,  (0) , del, 2.25);
0a510                 | '     Module *z = createKey(keyboard, key_z, shift, del, 1);
0a510                 | '     Module *x = createKey(keyboard, key_x, z, del, 1);
0a510                 | '     Module *c = createKey(keyboard, key_c, x, del, 1);
0a510                 | '     Module *v = createKey(keyboard, key_v, c, del, 1);
0a510                 | '     Module *b = createKey(keyboard, key_b, v, del, 1);
0a510                 | '     Module *n = createKey(keyboard, key_n, b, del, 1);
0a510                 | '     Module *m = createKey(keyboard, key_m, n, del, 1);
0a510                 | '     Module *comma = createKey(keyboard, key_comma, m, del, 1);
0a510                 | '     Module *period = createKey(keyboard, key_period, comma, del, 1);
0a510                 | ' 
0a510                 | '     Module *cancel = createKey(keyboard, key_cancel,  (0) , period, 2.75);
0a510                 | '     Module *left = createKey(keyboard, key_left, cancel, period, 1.25);
0a510                 | '     Module *space = createKey(keyboard, key_space, left, period, 3);
0a510                 | '     Module *right = createKey(keyboard, key_right, space, period, 1.25);
0a510                 | '     Module *submit = createKey(keyboard, key_submit, right, period, 2);
0a510                 | ' 
0a510                 | '     Module *seven = createKey(keyboard, key_7, del,  (0) , 1);
0a510                 | '     Module *eight = createKey(keyboard, key_8, seven,  (0) , 1);
0a510                 | '     Module *nine = createKey(keyboard, key_9, eight,  (0) , 1);
0a510                 | ' 
0a510                 | '     Module *four = createKey(keyboard, key_4, del, nine, 1);
0a510                 | '     Module *five = createKey(keyboard, key_5, four, nine, 1);
0a510                 | '     Module *six = createKey(keyboard, key_6, five, nine, 1);
0a510                 | ' 
0a510                 | '     Module *one = createKey(keyboard, key_1, del, five, 1);
0a510                 | '     Module *two = createKey(keyboard, key_2, one, five, 1);
0a510                 | '     Module *three = createKey(keyboard, key_3, two, five, 1);
0a510                 | ' 
0a510                 | '     createKey(keyboard, key_0, del, three, 3.5);
0a510                 | ' 
0a510                 | '     keyboard->keyboard_complete =  (0) ;
0a510                 | ' 
0a510                 | '     module_draw(keyboard->display, root);
0a510                 | '     while (!keyboard->keyboard_complete)
0a510                 | LR__0347
0a510     5A 8C 06 F1 | 	add	local01, #90
0a514     46 99 CA FA | 	rdbyte	local07, local01 wz
0a518     5A 8C 86 F1 | 	sub	local01, #90
0a51c     60 00 90 5D |  if_ne	jmp	#LR__0349
0a520     46 75 02 FB | 	rdlong	arg01, local01
0a524     49 77 02 F6 | 	mov	arg02, local04
0a528     84 F2 BF FD | 	call	#_module_draw
0a52c                 | '     {
0a52c                 | ' 
0a52c                 | '         module_draw(keyboard->display, topBar);
0a52c                 | '         do
0a52c                 | LR__0348
0a52c     46 75 02 FB | 	rdlong	arg01, local01
0a530     40 B1 BF FD | 	call	#_display_update_touch
0a534     46 77 02 FB | 	rdlong	arg02, local01
0a538     46 79 02 F6 | 	mov	arg03, local01
0a53c     48 75 02 F6 | 	mov	arg01, local03
0a540     BC E6 BF FD | 	call	#_module_touch_check
0a544     00 34 0E F2 | 	cmp	result1, #0 wz
0a548     E0 FF 9F AD |  if_e	jmp	#LR__0348
0a54c     08 8C 06 F1 | 	add	local01, #8
0a550     46 77 02 F6 | 	mov	arg02, local01
0a554     08 8C 86 F1 | 	sub	local01, #8
0a558     47 75 02 F6 | 	mov	arg01, local02
0a55c     D0 74 06 F1 | 	add	arg01, #208
0a560     3A 77 62 FC | 	wrlong	arg02, arg01
0a564     47 75 02 F6 | 	mov	arg01, local02
0a568     01 76 06 F6 | 	mov	arg02, #1
0a56c     02 78 06 F6 | 	mov	arg03, #2
0a570     DC EE BF FD | 	call	#_module_align_center_sector
0a574     47 75 02 F6 | 	mov	arg01, local02
0a578     88 EE BF FD | 	call	#_module_align_middle
0a57c     90 FF 9F FD | 	jmp	#LR__0347
0a580                 | LR__0349
0a580     46 75 02 FB | 	rdlong	arg01, local01
0a584     C0 12 00 FF 
0a588     00 76 06 F6 | 	mov	arg02, ##2457600
0a58c     0A 78 C6 F9 | 	decod	arg03, #10
0a590     00 7A 06 F6 | 	mov	arg04, #0
0a594     00 7C 06 F6 | 	mov	arg05, #0
0a598     00 7E 06 F6 | 	mov	arg06, #0
0a59c     0A 80 C6 F9 | 	decod	arg07, #10
0a5a0     00 82 06 F6 | 	mov	arg08, #0
0a5a4     00 84 06 F6 | 	mov	arg09, #0
0a5a8     0A 86 C6 F9 | 	decod	arg10, #10
0a5ac     01 00 00 FF 
0a5b0     58 88 06 F6 | 	mov	arg11, ##600
0a5b4     00 9F BF FD | 	call	#_display_bte_memory_copy
0a5b8                 | ' 
0a5b8                 | '         module_text_update(topBarText, keyboard->keyboard_buffer);
0a5b8                 | '         module_align_center(topBarText);
0a5b8                 | '         module_align_middle(topBarText);
0a5b8                 | '     }
0a5b8                 | '     display_bte_memory_copy(keyboard->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
0a5b8                 | ' 
0a5b8                 | '     return keyboard->keyboard_buffer;
0a5b8     08 8C 06 F1 | 	add	local01, #8
0a5bc     46 35 02 F6 | 	mov	result1, local01
0a5c0     A8 F0 03 F6 | 	mov	ptra, fp
0a5c4     B3 00 A0 FD | 	call	#popregs_
0a5c8                 | _keyboard_get_input_ret
0a5c8     2D 00 64 FD | 	ret
0a5cc                 | 
0a5cc                 | _navigation_page_init
0a5cc     03 4C 05 F6 | 	mov	COUNT_, #3
0a5d0     A9 00 A0 FD | 	call	#pushregs_
0a5d4     3A 8D 02 F6 | 	mov	local01, arg01
0a5d8     04 8C 06 F1 | 	add	local01, #4
0a5dc     46 77 62 FC | 	wrlong	arg02, local01
0a5e0     04 8C 06 F1 | 	add	local01, #4
0a5e4     46 79 62 FC | 	wrlong	arg03, local01
0a5e8     08 8C 06 F1 | 	add	local01, #8
0a5ec     46 8F 02 F6 | 	mov	local02, local01
0a5f0     47 75 02 F6 | 	mov	arg01, local02
0a5f4     00 76 06 F6 | 	mov	arg02, #0
0a5f8     DC E3 BF FD | 	call	#_module_init
0a5fc     40 8D 06 F1 | 	add	local01, #320
0a600     46 91 02 F6 | 	mov	local03, local01
0a604     48 75 02 F6 | 	mov	arg01, local03
0a608     47 77 02 F6 | 	mov	arg02, local02
0a60c     C8 E3 BF FD | 	call	#_module_init
0a610     48 75 02 F6 | 	mov	arg01, local03
0a614     CC 74 06 F1 | 	add	arg01, #204
0a618     3A 09 68 FC | 	wrlong	#4, arg01
0a61c     24 74 06 F1 | 	add	arg01, #36
0a620     02 00 80 FF 
0a624     3A 01 68 FC | 	wrlong	##1024, arg01
0a628     04 74 06 F1 | 	add	arg01, #4
0a62c     01 00 80 FF 
0a630     3A B1 68 FC | 	wrlong	##600, arg01
0a634     48 75 02 F6 | 	mov	arg01, local03
0a638     E8 74 06 F1 | 	add	arg01, #232
0a63c     3A 01 68 FC | 	wrlong	#0, arg01
0a640     04 74 06 F1 | 	add	arg01, #4
0a644     3A 01 68 FC | 	wrlong	#0, arg01
0a648     48 75 02 F6 | 	mov	arg01, local03
0a64c     F8 74 06 F1 | 	add	arg01, #248
0a650     3A 65 68 FC | 	wrlong	#50, arg01
0a654     04 74 06 F1 | 	add	arg01, #4
0a658     3A 65 68 FC | 	wrlong	#50, arg01
0a65c     48 75 02 F6 | 	mov	arg01, local03
0a660     01 00 00 FF 
0a664     73 78 06 F6 | 	mov	arg03, ##627
0a668     10 75 06 F1 | 	add	arg01, #272
0a66c     01 00 80 FF 
0a670     3A E7 68 FC | 	wrlong	##627, arg01
0a674     04 74 86 F1 | 	sub	arg01, #4
0a678     01 00 80 FF 
0a67c     3A E7 68 FC | 	wrlong	##627, arg01
0a680     C9 74 02 F6 | 	mov	arg01, objptr
0a684     04 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_down_
0a688     5C AC B1 FD | 	call	#__system___make_methodptr
0a68c     48 75 02 F6 | 	mov	arg01, local03
0a690     30 75 06 F1 | 	add	arg01, #304
0a694     3A 35 62 FC | 	wrlong	result1, arg01
0a698     40 8D 06 F1 | 	add	local01, #320
0a69c     46 8F 02 F6 | 	mov	local02, local01
0a6a0     47 75 02 F6 | 	mov	arg01, local02
0a6a4     48 77 02 F6 | 	mov	arg02, local03
0a6a8     2C E3 BF FD | 	call	#_module_init
0a6ac     01 00 00 FF 
0a6b0     88 8C 86 F1 | 	sub	local01, ##648
0a6b4     46 77 02 FB | 	rdlong	arg02, local01
0a6b8     90 76 06 F1 | 	add	arg02, #144
0a6bc     47 75 02 F6 | 	mov	arg01, local02
0a6c0     7C E8 BF FD | 	call	#_module_set_image
0a6c4     47 75 02 F6 | 	mov	arg01, local02
0a6c8     58 EC BF FD | 	call	#_module_align_inner_top
0a6cc     47 75 02 F6 | 	mov	arg01, local02
0a6d0     01 76 06 F6 | 	mov	arg02, #1
0a6d4     04 78 06 F6 | 	mov	arg03, #4
0a6d8     E8 ED BF FD | 	call	#_module_align_space_even
0a6dc     C9 74 02 F6 | 	mov	arg01, objptr
0a6e0     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0a6e4     00 AC B1 FD | 	call	#__system___make_methodptr
0a6e8     47 75 02 F6 | 	mov	arg01, local02
0a6ec     00 78 06 F6 | 	mov	arg03, #0
0a6f0     34 75 06 F1 | 	add	arg01, #308
0a6f4     3A 35 62 FC | 	wrlong	result1, arg01
0a6f8     10 74 86 F1 | 	sub	arg01, #16
0a6fc     3A 01 68 FC | 	wrlong	#0, arg01
0a700     01 00 00 FF 
0a704     C8 8D 06 F1 | 	add	local01, ##968
0a708     46 75 02 F6 | 	mov	arg01, local01
0a70c     47 77 02 F6 | 	mov	arg02, local02
0a710     C4 E2 BF FD | 	call	#_module_init
0a714     B8 00 00 FF 
0a718     DD D6 05 F1 | 	add	ptr__dat__, ##94429
0a71c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a720     B8 00 00 FF 
0a724     DD D6 85 F1 | 	sub	ptr__dat__, ##94429
0a728     46 75 02 F6 | 	mov	arg01, local01
0a72c     44 E8 BF FD | 	call	#_module_set_text
0a730     46 75 02 F6 | 	mov	arg01, local01
0a734     02 76 06 F6 | 	mov	arg02, #2
0a738     78 E9 BF FD | 	call	#_module_text_font
0a73c     46 75 02 F6 | 	mov	arg01, local01
0a740     8C E8 BF FD | 	call	#_module_text_fit
0a744     46 75 02 F6 | 	mov	arg01, local01
0a748     10 75 06 F1 | 	add	arg01, #272
0a74c     7F 00 80 FF 
0a750     3A FF 6B FC | 	wrlong	##65535, arg01
0a754     04 74 86 F1 | 	sub	arg01, #4
0a758     01 00 80 FF 
0a75c     3A E7 68 FC | 	wrlong	##627, arg01
0a760     46 77 02 FB | 	rdlong	arg02, local01
0a764     46 75 02 F6 | 	mov	arg01, local01
0a768     10 EE BF FD | 	call	#_module_align_below
0a76c     46 75 02 F6 | 	mov	arg01, local01
0a770     01 76 06 F6 | 	mov	arg02, #1
0a774     02 78 06 F6 | 	mov	arg03, #2
0a778     D4 EC BF FD | 	call	#_module_align_center_sector
0a77c     40 8D 06 F1 | 	add	local01, #320
0a780     46 8F 02 F6 | 	mov	local02, local01
0a784     47 75 02 F6 | 	mov	arg01, local02
0a788     48 77 02 F6 | 	mov	arg02, local03
0a78c     48 E2 BF FD | 	call	#_module_init
0a790     02 00 00 FF 
0a794     08 8D 86 F1 | 	sub	local01, ##1288
0a798     46 77 02 FB | 	rdlong	arg02, local01
0a79c     60 76 06 F1 | 	add	arg02, #96
0a7a0     47 75 02 F6 | 	mov	arg01, local02
0a7a4     98 E7 BF FD | 	call	#_module_set_image
0a7a8     47 75 02 F6 | 	mov	arg01, local02
0a7ac     74 EB BF FD | 	call	#_module_align_inner_top
0a7b0     47 75 02 F6 | 	mov	arg01, local02
0a7b4     02 76 06 F6 | 	mov	arg02, #2
0a7b8     04 78 06 F6 | 	mov	arg03, #4
0a7bc     04 ED BF FD | 	call	#_module_align_space_even
0a7c0     C9 74 02 F6 | 	mov	arg01, objptr
0a7c4     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0a7c8     1C AB B1 FD | 	call	#__system___make_methodptr
0a7cc     47 75 02 F6 | 	mov	arg01, local02
0a7d0     01 78 06 F6 | 	mov	arg03, #1
0a7d4     34 75 06 F1 | 	add	arg01, #308
0a7d8     3A 35 62 FC | 	wrlong	result1, arg01
0a7dc     10 74 86 F1 | 	sub	arg01, #16
0a7e0     3A 03 68 FC | 	wrlong	#1, arg01
0a7e4     03 00 00 FF 
0a7e8     48 8C 06 F1 | 	add	local01, ##1608
0a7ec     46 75 02 F6 | 	mov	arg01, local01
0a7f0     47 77 02 F6 | 	mov	arg02, local02
0a7f4     E0 E1 BF FD | 	call	#_module_init
0a7f8     B8 00 00 FF 
0a7fc     E4 D6 05 F1 | 	add	ptr__dat__, ##94436
0a800     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a804     B8 00 00 FF 
0a808     E4 D6 85 F1 | 	sub	ptr__dat__, ##94436
0a80c     46 75 02 F6 | 	mov	arg01, local01
0a810     60 E7 BF FD | 	call	#_module_set_text
0a814     46 75 02 F6 | 	mov	arg01, local01
0a818     02 76 06 F6 | 	mov	arg02, #2
0a81c     94 E8 BF FD | 	call	#_module_text_font
0a820     46 75 02 F6 | 	mov	arg01, local01
0a824     A8 E7 BF FD | 	call	#_module_text_fit
0a828     46 75 02 F6 | 	mov	arg01, local01
0a82c     10 75 06 F1 | 	add	arg01, #272
0a830     7F 00 80 FF 
0a834     3A FF 6B FC | 	wrlong	##65535, arg01
0a838     04 74 86 F1 | 	sub	arg01, #4
0a83c     01 00 80 FF 
0a840     3A E7 68 FC | 	wrlong	##627, arg01
0a844     46 77 02 FB | 	rdlong	arg02, local01
0a848     46 75 02 F6 | 	mov	arg01, local01
0a84c     2C ED BF FD | 	call	#_module_align_below
0a850     46 75 02 F6 | 	mov	arg01, local01
0a854     01 76 06 F6 | 	mov	arg02, #1
0a858     02 78 06 F6 | 	mov	arg03, #2
0a85c     F0 EB BF FD | 	call	#_module_align_center_sector
0a860     40 8D 06 F1 | 	add	local01, #320
0a864     46 8F 02 F6 | 	mov	local02, local01
0a868     47 75 02 F6 | 	mov	arg01, local02
0a86c     48 77 02 F6 | 	mov	arg02, local03
0a870     64 E1 BF FD | 	call	#_module_init
0a874     03 00 00 FF 
0a878     88 8D 86 F1 | 	sub	local01, ##1928
0a87c     46 77 02 FB | 	rdlong	arg02, local01
0a880     C0 76 06 F1 | 	add	arg02, #192
0a884     47 75 02 F6 | 	mov	arg01, local02
0a888     B4 E6 BF FD | 	call	#_module_set_image
0a88c     47 75 02 F6 | 	mov	arg01, local02
0a890     90 EA BF FD | 	call	#_module_align_inner_top
0a894     47 75 02 F6 | 	mov	arg01, local02
0a898     03 76 06 F6 | 	mov	arg02, #3
0a89c     04 78 06 F6 | 	mov	arg03, #4
0a8a0     20 EC BF FD | 	call	#_module_align_space_even
0a8a4     C9 74 02 F6 | 	mov	arg01, objptr
0a8a8     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0a8ac     38 AA B1 FD | 	call	#__system___make_methodptr
0a8b0     47 75 02 F6 | 	mov	arg01, local02
0a8b4     02 78 06 F6 | 	mov	arg03, #2
0a8b8     34 75 06 F1 | 	add	arg01, #308
0a8bc     3A 35 62 FC | 	wrlong	result1, arg01
0a8c0     10 74 86 F1 | 	sub	arg01, #16
0a8c4     3A 05 68 FC | 	wrlong	#2, arg01
0a8c8     04 00 00 FF 
0a8cc     C8 8C 06 F1 | 	add	local01, ##2248
0a8d0     46 75 02 F6 | 	mov	arg01, local01
0a8d4     47 77 02 F6 | 	mov	arg02, local02
0a8d8     FC E0 BF FD | 	call	#_module_init
0a8dc     B8 00 00 FF 
0a8e0     EB D6 05 F1 | 	add	ptr__dat__, ##94443
0a8e4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a8e8     B8 00 00 FF 
0a8ec     EB D6 85 F1 | 	sub	ptr__dat__, ##94443
0a8f0     46 75 02 F6 | 	mov	arg01, local01
0a8f4     7C E6 BF FD | 	call	#_module_set_text
0a8f8     46 75 02 F6 | 	mov	arg01, local01
0a8fc     02 76 06 F6 | 	mov	arg02, #2
0a900     B0 E7 BF FD | 	call	#_module_text_font
0a904     46 75 02 F6 | 	mov	arg01, local01
0a908     C4 E6 BF FD | 	call	#_module_text_fit
0a90c     46 75 02 F6 | 	mov	arg01, local01
0a910     10 75 06 F1 | 	add	arg01, #272
0a914     7F 00 80 FF 
0a918     3A FF 6B FC | 	wrlong	##65535, arg01
0a91c     04 74 86 F1 | 	sub	arg01, #4
0a920     01 00 80 FF 
0a924     3A E7 68 FC | 	wrlong	##627, arg01
0a928     46 77 02 FB | 	rdlong	arg02, local01
0a92c     46 75 02 F6 | 	mov	arg01, local01
0a930     48 EC BF FD | 	call	#_module_align_below
0a934     46 75 02 F6 | 	mov	arg01, local01
0a938     01 76 06 F6 | 	mov	arg02, #1
0a93c     02 78 06 F6 | 	mov	arg03, #2
0a940     0C EB BF FD | 	call	#_module_align_center_sector
0a944     40 8D 06 F1 | 	add	local01, #320
0a948     46 8F 02 F6 | 	mov	local02, local01
0a94c     47 75 02 F6 | 	mov	arg01, local02
0a950     48 77 02 F6 | 	mov	arg02, local03
0a954     80 E0 BF FD | 	call	#_module_init
0a958     05 00 00 FF 
0a95c     08 8C 86 F1 | 	sub	local01, ##2568
0a960     46 77 02 FB | 	rdlong	arg02, local01
0a964     F0 76 06 F1 | 	add	arg02, #240
0a968     47 75 02 F6 | 	mov	arg01, local02
0a96c     D0 E5 BF FD | 	call	#_module_set_image
0a970     47 75 02 F6 | 	mov	arg01, local02
0a974     AC E9 BF FD | 	call	#_module_align_inner_top
0a978     47 75 02 F6 | 	mov	arg01, local02
0a97c     04 76 06 F6 | 	mov	arg02, #4
0a980     04 78 06 F6 | 	mov	arg03, #4
0a984     3C EB BF FD | 	call	#_module_align_space_even
0a988     C9 74 02 F6 | 	mov	arg01, objptr
0a98c     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0a990     54 A9 B1 FD | 	call	#__system___make_methodptr
0a994     47 75 02 F6 | 	mov	arg01, local02
0a998     04 78 06 F6 | 	mov	arg03, #4
0a99c     34 75 06 F1 | 	add	arg01, #308
0a9a0     3A 35 62 FC | 	wrlong	result1, arg01
0a9a4     10 74 86 F1 | 	sub	arg01, #16
0a9a8     3A 09 68 FC | 	wrlong	#4, arg01
0a9ac     05 00 00 FF 
0a9b0     48 8D 06 F1 | 	add	local01, ##2888
0a9b4     46 75 02 F6 | 	mov	arg01, local01
0a9b8     47 77 02 F6 | 	mov	arg02, local02
0a9bc     18 E0 BF FD | 	call	#_module_init
0a9c0     B8 00 00 FF 
0a9c4     F0 D6 05 F1 | 	add	ptr__dat__, ##94448
0a9c8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0a9cc     B8 00 00 FF 
0a9d0     F0 D6 85 F1 | 	sub	ptr__dat__, ##94448
0a9d4     46 75 02 F6 | 	mov	arg01, local01
0a9d8     98 E5 BF FD | 	call	#_module_set_text
0a9dc     46 75 02 F6 | 	mov	arg01, local01
0a9e0     02 76 06 F6 | 	mov	arg02, #2
0a9e4     CC E6 BF FD | 	call	#_module_text_font
0a9e8     46 75 02 F6 | 	mov	arg01, local01
0a9ec     E0 E5 BF FD | 	call	#_module_text_fit
0a9f0     46 75 02 F6 | 	mov	arg01, local01
0a9f4     10 75 06 F1 | 	add	arg01, #272
0a9f8     7F 00 80 FF 
0a9fc     3A FF 6B FC | 	wrlong	##65535, arg01
0aa00     04 74 86 F1 | 	sub	arg01, #4
0aa04     01 00 80 FF 
0aa08     3A E7 68 FC | 	wrlong	##627, arg01
0aa0c     46 77 02 FB | 	rdlong	arg02, local01
0aa10     46 75 02 F6 | 	mov	arg01, local01
0aa14     64 EB BF FD | 	call	#_module_align_below
0aa18     46 75 02 F6 | 	mov	arg01, local01
0aa1c     01 76 06 F6 | 	mov	arg02, #1
0aa20     02 78 06 F6 | 	mov	arg03, #2
0aa24     28 EA BF FD | 	call	#_module_align_center_sector
0aa28     40 8D 06 F1 | 	add	local01, #320
0aa2c     46 8F 02 F6 | 	mov	local02, local01
0aa30     47 75 02 F6 | 	mov	arg01, local02
0aa34     48 77 02 F6 | 	mov	arg02, local03
0aa38     9C DF BF FD | 	call	#_module_init
0aa3c     47 75 02 F6 | 	mov	arg01, local02
0aa40     CC 74 06 F1 | 	add	arg01, #204
0aa44     3A 0B 68 FC | 	wrlong	#5, arg01
0aa48     24 74 06 F1 | 	add	arg01, #36
0aa4c     3A 91 69 FC | 	wrlong	#200, arg01
0aa50     04 74 06 F1 | 	add	arg01, #4
0aa54     3A 91 69 FC | 	wrlong	#200, arg01
0aa58     47 75 02 F6 | 	mov	arg01, local02
0aa5c     10 75 06 F1 | 	add	arg01, #272
0aa60     63 00 80 FF 
0aa64     3A 31 68 FC | 	wrlong	##50712, arg01
0aa68     04 74 86 F1 | 	sub	arg01, #4
0aa6c     01 00 80 FF 
0aa70     3A E7 68 FC | 	wrlong	##627, arg01
0aa74     47 75 02 F6 | 	mov	arg01, local02
0aa78     40 E9 BF FD | 	call	#_module_align_inner_bottom
0aa7c     47 75 02 F6 | 	mov	arg01, local02
0aa80     01 76 06 F6 | 	mov	arg02, #1
0aa84     04 78 06 F6 | 	mov	arg03, #4
0aa88     38 EA BF FD | 	call	#_module_align_space_even
0aa8c     C9 74 02 F6 | 	mov	arg01, objptr
0aa90     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0aa94     50 A8 B1 FD | 	call	#__system___make_methodptr
0aa98     47 75 02 F6 | 	mov	arg01, local02
0aa9c     03 78 06 F6 | 	mov	arg03, #3
0aaa0     34 75 06 F1 | 	add	arg01, #308
0aaa4     3A 35 62 FC | 	wrlong	result1, arg01
0aaa8     10 74 86 F1 | 	sub	arg01, #16
0aaac     3A 07 68 FC | 	wrlong	#3, arg01
0aab0     40 8D 06 F1 | 	add	local01, #320
0aab4     46 75 02 F6 | 	mov	arg01, local01
0aab8     47 77 02 F6 | 	mov	arg02, local02
0aabc     18 DF BF FD | 	call	#_module_init
0aac0     B8 00 00 FF 
0aac4     FA D6 05 F1 | 	add	ptr__dat__, ##94458
0aac8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0aacc     B8 00 00 FF 
0aad0     FA D6 85 F1 | 	sub	ptr__dat__, ##94458
0aad4     46 75 02 F6 | 	mov	arg01, local01
0aad8     98 E4 BF FD | 	call	#_module_set_text
0aadc     46 75 02 F6 | 	mov	arg01, local01
0aae0     02 76 06 F6 | 	mov	arg02, #2
0aae4     CC E5 BF FD | 	call	#_module_text_font
0aae8     46 75 02 F6 | 	mov	arg01, local01
0aaec     E0 E4 BF FD | 	call	#_module_text_fit
0aaf0     46 75 02 F6 | 	mov	arg01, local01
0aaf4     10 75 06 F1 | 	add	arg01, #272
0aaf8     7F 00 80 FF 
0aafc     3A FF 6B FC | 	wrlong	##65535, arg01
0ab00     04 74 86 F1 | 	sub	arg01, #4
0ab04     01 00 80 FF 
0ab08     3A E7 68 FC | 	wrlong	##627, arg01
0ab0c     46 77 02 FB | 	rdlong	arg02, local01
0ab10     46 75 02 F6 | 	mov	arg01, local01
0ab14     64 EA BF FD | 	call	#_module_align_below
0ab18     46 75 02 F6 | 	mov	arg01, local01
0ab1c     01 76 06 F6 | 	mov	arg02, #1
0ab20     02 78 06 F6 | 	mov	arg03, #2
0ab24     28 E9 BF FD | 	call	#_module_align_center_sector
0ab28     40 8D 06 F1 | 	add	local01, #320
0ab2c     46 8F 02 F6 | 	mov	local02, local01
0ab30     47 75 02 F6 | 	mov	arg01, local02
0ab34     48 77 02 F6 | 	mov	arg02, local03
0ab38     9C DE BF FD | 	call	#_module_init
0ab3c     47 75 02 F6 | 	mov	arg01, local02
0ab40     CC 74 06 F1 | 	add	arg01, #204
0ab44     3A 0B 68 FC | 	wrlong	#5, arg01
0ab48     24 74 06 F1 | 	add	arg01, #36
0ab4c     3A 91 69 FC | 	wrlong	#200, arg01
0ab50     04 74 06 F1 | 	add	arg01, #4
0ab54     3A 91 69 FC | 	wrlong	#200, arg01
0ab58     47 75 02 F6 | 	mov	arg01, local02
0ab5c     10 75 06 F1 | 	add	arg01, #272
0ab60     63 00 80 FF 
0ab64     3A 31 68 FC | 	wrlong	##50712, arg01
0ab68     04 74 86 F1 | 	sub	arg01, #4
0ab6c     01 00 80 FF 
0ab70     3A E7 68 FC | 	wrlong	##627, arg01
0ab74     47 75 02 F6 | 	mov	arg01, local02
0ab78     40 E8 BF FD | 	call	#_module_align_inner_bottom
0ab7c     47 75 02 F6 | 	mov	arg01, local02
0ab80     02 76 06 F6 | 	mov	arg02, #2
0ab84     04 78 06 F6 | 	mov	arg03, #4
0ab88     38 E9 BF FD | 	call	#_module_align_space_even
0ab8c     C9 74 02 F6 | 	mov	arg01, objptr
0ab90     E8 76 02 F6 | 	mov	arg02, ptr__check_buttons_0722_
0ab94     50 A7 B1 FD | 	call	#__system___make_methodptr
0ab98     47 75 02 F6 | 	mov	arg01, local02
0ab9c     05 78 06 F6 | 	mov	arg03, #5
0aba0     34 75 06 F1 | 	add	arg01, #308
0aba4     3A 35 62 FC | 	wrlong	result1, arg01
0aba8     10 74 86 F1 | 	sub	arg01, #16
0abac     3A 0B 68 FC | 	wrlong	#5, arg01
0abb0     40 8D 06 F1 | 	add	local01, #320
0abb4     46 75 02 F6 | 	mov	arg01, local01
0abb8     47 77 02 F6 | 	mov	arg02, local02
0abbc     18 DE BF FD | 	call	#_module_init
0abc0     B8 00 00 FF 
0abc4     03 D7 05 F1 | 	add	ptr__dat__, ##94467
0abc8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0abcc     B8 00 00 FF 
0abd0     03 D7 85 F1 | 	sub	ptr__dat__, ##94467
0abd4     46 75 02 F6 | 	mov	arg01, local01
0abd8     98 E3 BF FD | 	call	#_module_set_text
0abdc     46 75 02 F6 | 	mov	arg01, local01
0abe0     02 76 06 F6 | 	mov	arg02, #2
0abe4     CC E4 BF FD | 	call	#_module_text_font
0abe8     46 75 02 F6 | 	mov	arg01, local01
0abec     E0 E3 BF FD | 	call	#_module_text_fit
0abf0     46 75 02 F6 | 	mov	arg01, local01
0abf4     10 75 06 F1 | 	add	arg01, #272
0abf8     7F 00 80 FF 
0abfc     3A FF 6B FC | 	wrlong	##65535, arg01
0ac00     04 74 86 F1 | 	sub	arg01, #4
0ac04     01 00 80 FF 
0ac08     3A E7 68 FC | 	wrlong	##627, arg01
0ac0c     46 77 02 FB | 	rdlong	arg02, local01
0ac10     46 75 02 F6 | 	mov	arg01, local01
0ac14     64 E9 BF FD | 	call	#_module_align_below
0ac18     46 75 02 F6 | 	mov	arg01, local01
0ac1c     01 76 06 F6 | 	mov	arg02, #1
0ac20     02 78 06 F6 | 	mov	arg03, #2
0ac24     28 E8 BF FD | 	call	#_module_align_center_sector
0ac28     A8 F0 03 F6 | 	mov	ptra, fp
0ac2c     B3 00 A0 FD | 	call	#popregs_
0ac30                 | _navigation_page_init_ret
0ac30     2D 00 64 FD | 	ret
0ac34                 | 
0ac34                 | _navigation_page_run
0ac34     01 4C 05 F6 | 	mov	COUNT_, #1
0ac38     A9 00 A0 FD | 	call	#pushregs_
0ac3c     3A 8D 02 F6 | 	mov	local01, arg01
0ac40     00 74 06 F6 | 	mov	arg01, #0
0ac44     00 DF B1 FD | 	call	#__system___getiolock_1205
0ac48     1A 75 02 F6 | 	mov	arg01, result1
0ac4c     D0 A6 B1 FD | 	call	#__system___lockmem
0ac50     4A 01 00 FF 
0ac54     82 77 06 F6 | 	mov	arg02, ##@LR__1967
0ac58     00 74 06 F6 | 	mov	arg01, #0
0ac5c     00 78 06 F6 | 	mov	arg03, #0
0ac60     50 AC B1 FD | 	call	#__system___basic_print_string
0ac64     00 74 06 F6 | 	mov	arg01, #0
0ac68     0A 76 06 F6 | 	mov	arg02, #10
0ac6c     00 78 06 F6 | 	mov	arg03, #0
0ac70     F4 AB B1 FD | 	call	#__system___basic_print_char
0ac74     00 74 06 F6 | 	mov	arg01, #0
0ac78     CC DE B1 FD | 	call	#__system___getiolock_1205
0ac7c     1A 01 68 FC | 	wrlong	#0, result1
0ac80     46 01 48 FC | 	wrbyte	#0, local01
0ac84     04 8C 06 F1 | 	add	local01, #4
0ac88     46 75 02 FB | 	rdlong	arg01, local01
0ac8c     0C 8C 06 F1 | 	add	local01, #12
0ac90     46 77 02 F6 | 	mov	arg02, local01
0ac94     10 8C 86 F1 | 	sub	local01, #16
0ac98     14 EB BF FD | 	call	#_module_draw
0ac9c     00 74 06 F6 | 	mov	arg01, #0
0aca0     A4 DE B1 FD | 	call	#__system___getiolock_1205
0aca4     1A 75 02 F6 | 	mov	arg01, result1
0aca8     74 A6 B1 FD | 	call	#__system___lockmem
0acac     4A 01 00 FF 
0acb0     9B 77 06 F6 | 	mov	arg02, ##@LR__1968
0acb4     00 74 06 F6 | 	mov	arg01, #0
0acb8     00 78 06 F6 | 	mov	arg03, #0
0acbc     F4 AB B1 FD | 	call	#__system___basic_print_string
0acc0     00 74 06 F6 | 	mov	arg01, #0
0acc4     0A 76 06 F6 | 	mov	arg02, #10
0acc8     00 78 06 F6 | 	mov	arg03, #0
0accc     98 AB B1 FD | 	call	#__system___basic_print_char
0acd0     00 74 06 F6 | 	mov	arg01, #0
0acd4     70 DE B1 FD | 	call	#__system___getiolock_1205
0acd8     1A 01 68 FC | 	wrlong	#0, result1
0acdc                 | '     while (!page->complete)
0acdc                 | LR__0350
0acdc     46 75 CA FA | 	rdbyte	arg01, local01 wz
0ace0     2C 00 90 5D |  if_ne	jmp	#LR__0351
0ace4     04 8C 06 F1 | 	add	local01, #4
0ace8     46 75 02 FB | 	rdlong	arg01, local01
0acec     84 A9 BF FD | 	call	#_display_update_touch
0acf0     0C 8C 06 F1 | 	add	local01, #12
0acf4     46 75 02 F6 | 	mov	arg01, local01
0acf8     0C 8C 86 F1 | 	sub	local01, #12
0acfc     46 77 02 FB | 	rdlong	arg02, local01
0ad00     04 8C 86 F1 | 	sub	local01, #4
0ad04     46 79 02 F6 | 	mov	arg03, local01
0ad08     F4 DE BF FD | 	call	#_module_touch_check
0ad0c     CC FF 9F FD | 	jmp	#LR__0350
0ad10                 | LR__0351
0ad10                 | '     {
0ad10                 | '         display_update_touch(page->display);
0ad10                 | '         module_touch_check(&(page->root), page->display, page);
0ad10                 | '     }
0ad10                 | '     return page->newPage;
0ad10     0C 8C 06 F1 | 	add	local01, #12
0ad14     46 35 02 FB | 	rdlong	result1, local01
0ad18     A8 F0 03 F6 | 	mov	ptra, fp
0ad1c     B3 00 A0 FD | 	call	#popregs_
0ad20                 | _navigation_page_run_ret
0ad20     2D 00 64 FD | 	ret
0ad24                 | 
0ad24                 | _loading_overlay_display
0ad24     02 4C 05 F6 | 	mov	COUNT_, #2
0ad28     A9 00 A0 FD | 	call	#pushregs_
0ad2c     3A 8D 02 F6 | 	mov	local01, arg01
0ad30     3B 8F 02 F6 | 	mov	local02, arg02
0ad34     46 75 02 F6 | 	mov	arg01, local01
0ad38     00 76 06 F6 | 	mov	arg02, #0
0ad3c     02 78 06 F6 | 	mov	arg03, #2
0ad40     00 7A 06 F6 | 	mov	arg04, #0
0ad44     18 91 BF FD | 	call	#_display_set_text_parameter1
0ad48     46 75 02 F6 | 	mov	arg01, local01
0ad4c     00 76 06 F6 | 	mov	arg02, #0
0ad50     00 78 06 F6 | 	mov	arg03, #0
0ad54     00 7A 06 F6 | 	mov	arg04, #0
0ad58     00 7C 06 F6 | 	mov	arg05, #0
0ad5c     50 91 BF FD | 	call	#_display_set_text_parameter2
0ad60     46 75 02 F6 | 	mov	arg01, local01
0ad64     06 77 06 F6 | 	mov	arg02, #262
0ad68     C8 78 06 F6 | 	mov	arg03, #200
0ad6c     01 00 00 FF 
0ad70     FA 7A 06 F6 | 	mov	arg04, ##762
0ad74     90 7D 06 F6 | 	mov	arg05, #400
0ad78     32 7E 06 F6 | 	mov	arg06, #50
0ad7c     32 80 06 F6 | 	mov	arg07, #50
0ad80     1D 00 00 FF 
0ad84     74 83 06 F6 | 	mov	arg08, ##15220
0ad88     DC 94 BF FD | 	call	#_display_draw_circle_square_fill
0ad8c     00 76 06 F6 | 	mov	arg02, #0
0ad90     1D 00 00 FF 
0ad94     74 79 06 F6 | 	mov	arg03, ##15220
0ad98     46 75 02 F6 | 	mov	arg01, local01
0ad9c     98 8D BF FD | 	call	#_display_fore_ground_color_16bpp
0ada0     46 75 02 F6 | 	mov	arg01, local01
0ada4     1D 00 00 FF 
0ada8     74 77 06 F6 | 	mov	arg02, ##15220
0adac     10 8E BF FD | 	call	#_display_back_ground_color_16bpp
0adb0     47 75 02 F6 | 	mov	arg01, local02
0adb4     4C B3 BF FD | 	call	#_strlen
0adb8     03 34 66 F0 | 	shl	result1, #3
0adbc     09 76 C6 F9 | 	decod	arg02, #9
0adc0     1A 77 82 F1 | 	sub	arg02, result1
0adc4     46 75 02 F6 | 	mov	arg01, local01
0adc8     1C 79 06 F6 | 	mov	arg03, #284
0adcc     47 7B 02 F6 | 	mov	arg04, local02
0add0     38 91 BF FD | 	call	#_display_draw_string
0add4     00 74 06 F6 | 	mov	arg01, #0
0add8     6C DD B1 FD | 	call	#__system___getiolock_1205
0addc     1A 75 02 F6 | 	mov	arg01, result1
0ade0     3C A5 B1 FD | 	call	#__system___lockmem
0ade4     4A 01 00 FF 
0ade8     AD 77 06 F6 | 	mov	arg02, ##@LR__1969
0adec     00 74 06 F6 | 	mov	arg01, #0
0adf0     00 78 06 F6 | 	mov	arg03, #0
0adf4     BC AA B1 FD | 	call	#__system___basic_print_string
0adf8     00 74 06 F6 | 	mov	arg01, #0
0adfc     0A 76 06 F6 | 	mov	arg02, #10
0ae00     00 78 06 F6 | 	mov	arg03, #0
0ae04     60 AA B1 FD | 	call	#__system___basic_print_char
0ae08     4A 01 00 FF 
0ae0c     BF 77 06 F6 | 	mov	arg02, ##@LR__1970
0ae10     00 74 06 F6 | 	mov	arg01, #0
0ae14     00 78 06 F6 | 	mov	arg03, #0
0ae18     98 AA B1 FD | 	call	#__system___basic_print_string
0ae1c     00 74 06 F6 | 	mov	arg01, #0
0ae20     47 77 02 F6 | 	mov	arg02, local02
0ae24     00 78 06 F6 | 	mov	arg03, #0
0ae28     88 AA B1 FD | 	call	#__system___basic_print_string
0ae2c     00 74 06 F6 | 	mov	arg01, #0
0ae30     0A 76 06 F6 | 	mov	arg02, #10
0ae34     00 78 06 F6 | 	mov	arg03, #0
0ae38     2C AA B1 FD | 	call	#__system___basic_print_char
0ae3c     4A 01 00 FF 
0ae40     CE 77 06 F6 | 	mov	arg02, ##@LR__1971
0ae44     00 74 06 F6 | 	mov	arg01, #0
0ae48     00 78 06 F6 | 	mov	arg03, #0
0ae4c     64 AA B1 FD | 	call	#__system___basic_print_string
0ae50     00 74 06 F6 | 	mov	arg01, #0
0ae54     0A 76 06 F6 | 	mov	arg02, #10
0ae58     00 78 06 F6 | 	mov	arg03, #0
0ae5c     08 AA B1 FD | 	call	#__system___basic_print_char
0ae60     00 74 06 F6 | 	mov	arg01, #0
0ae64     E0 DC B1 FD | 	call	#__system___getiolock_1205
0ae68     1A 01 68 FC | 	wrlong	#0, result1
0ae6c     A8 F0 03 F6 | 	mov	ptra, fp
0ae70     B3 00 A0 FD | 	call	#popregs_
0ae74                 | _loading_overlay_display_ret
0ae74     2D 00 64 FD | 	ret
0ae78                 | 
0ae78                 | _monitor_begin
0ae78     10 74 06 F1 | 	add	arg01, #16
0ae7c     3A 79 62 FC | 	wrlong	arg03, arg01
0ae80     04 74 86 F1 | 	sub	arg01, #4
0ae84     3A 77 62 FC | 	wrlong	arg02, arg01
0ae88     0C 74 86 F1 | 	sub	arg01, #12
0ae8c     B8 00 00 FF 
0ae90     14 D7 05 F1 | 	add	ptr__dat__, ##94484
0ae94     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0ae98     3C 93 61 FC | 	wrlong	objptr, arg03
0ae9c     04 78 06 F1 | 	add	arg03, #4
0aea0     3C 11 62 FC | 	wrlong	ptr__monitor_cog_0748_, arg03
0aea4     04 78 06 F1 | 	add	arg03, #4
0aea8     3C 75 62 FC | 	wrlong	arg01, arg03
0aeac     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0aeb0     B8 00 00 FF 
0aeb4     14 D7 85 F1 | 	sub	ptr__dat__, ##94484
0aeb8     1E 34 06 F6 | 	mov	result1, #30
0aebc     28 78 62 FD | 	setq	arg03
0aec0     C6 34 F2 FC | 	coginit	result1, entryptr__ wc
0aec4     01 34 66 C6 |  if_b	neg	result1, #1
0aec8     14 74 06 F1 | 	add	arg01, #20
0aecc     3A 35 62 FC | 	wrlong	result1, arg01
0aed0     FF FF 7F FF 
0aed4     FF 35 0E F2 | 	cmp	result1, ##-1 wz
0aed8                 | '     {
0aed8                 | '         return  (1) ;
0aed8     01 34 06 56 |  if_ne	mov	result1, #1
0aedc                 | '     }
0aedc                 | '     return  (0) ;
0aedc     00 34 06 A6 |  if_e	mov	result1, #0
0aee0                 | _monitor_begin_ret
0aee0     2D 00 64 FD | 	ret
0aee4                 | 
0aee4                 | _navkey_begin
0aee4     03 4C 05 F6 | 	mov	COUNT_, #3
0aee8     A9 00 A0 FD | 	call	#pushregs_
0aeec     3A 8D 02 F6 | 	mov	local01, arg01
0aef0     3E 8F 02 F6 | 	mov	local02, arg05
0aef4     6C 8C 06 F1 | 	add	local01, #108
0aef8     46 7B 42 FC | 	wrbyte	arg04, local01
0aefc     6C 8C 86 F1 | 	sub	local01, #108
0af00     3B 75 02 F6 | 	mov	arg01, arg02
0af04     3C 77 02 F6 | 	mov	arg02, arg03
0af08     0A 78 06 F6 | 	mov	arg03, #10
0af0c     01 7A 06 F6 | 	mov	arg04, #1
0af10     C9 90 02 F6 | 	mov	local03, objptr
0af14     46 93 01 F6 | 	mov	objptr, local01
0af18     90 05 B1 FD | 	call	#_jm_i2c_spin2_setup
0af1c     48 93 01 F6 | 	mov	objptr, local03
0af20     46 75 02 F6 | 	mov	arg01, local01
0af24     00 76 06 F6 | 	mov	arg02, #0
0af28     80 78 06 F6 | 	mov	arg03, #128
0af2c     F8 EC B0 FD | 	call	#_writeNavKey8_1801
0af30     64 74 06 F6 | 	mov	arg01, #100
0af34     00 A5 B1 FD | 	call	#__system___waitms
0af38     46 75 02 F6 | 	mov	arg01, local01
0af3c     00 76 06 F6 | 	mov	arg02, #0
0af40     47 79 02 F6 | 	mov	arg03, local02
0af44     E0 EC B0 FD | 	call	#_writeNavKey8_1801
0af48     72 8C 06 F1 | 	add	local01, #114
0af4c     46 8F 42 FC | 	wrbyte	local02, local01
0af50     A8 F0 03 F6 | 	mov	ptra, fp
0af54     B3 00 A0 FD | 	call	#popregs_
0af58                 | _navkey_begin_ret
0af58     2D 00 64 FD | 	ret
0af5c                 | 
0af5c                 | _navkey_update_status
0af5c     01 4C 05 F6 | 	mov	COUNT_, #1
0af60     A9 00 A0 FD | 	call	#pushregs_
0af64     3A 8D 02 F6 | 	mov	local01, arg01
0af68     06 76 06 F6 | 	mov	arg02, #6
0af6c     00 EC B0 FD | 	call	#_readNavKeyInt_1798
0af70     1A 77 02 F6 | 	mov	arg02, result1
0af74     0F 76 66 F7 | 	signx	arg02, #15
0af78     01 76 06 F5 | 	and	arg02, #1
0af7c     14 8C 06 F1 | 	add	local01, #20
0af80     46 77 62 FC | 	wrlong	arg02, local01
0af84     1A 77 02 F6 | 	mov	arg02, result1
0af88     0F 76 66 F7 | 	signx	arg02, #15
0af8c     02 76 06 F5 | 	and	arg02, #2
0af90     04 8C 06 F1 | 	add	local01, #4
0af94     46 77 62 FC | 	wrlong	arg02, local01
0af98     1A 77 02 F6 | 	mov	arg02, result1
0af9c     0F 76 66 F7 | 	signx	arg02, #15
0afa0     04 76 06 F5 | 	and	arg02, #4
0afa4     04 8C 06 F1 | 	add	local01, #4
0afa8     46 77 62 FC | 	wrlong	arg02, local01
0afac     1A 77 02 F6 | 	mov	arg02, result1
0afb0     0F 76 66 F7 | 	signx	arg02, #15
0afb4     08 76 06 F5 | 	and	arg02, #8
0afb8     04 8C 06 F1 | 	add	local01, #4
0afbc     46 77 62 FC | 	wrlong	arg02, local01
0afc0     1A 77 02 F6 | 	mov	arg02, result1
0afc4     0F 76 66 F7 | 	signx	arg02, #15
0afc8     10 76 06 F5 | 	and	arg02, #16
0afcc     04 8C 06 F1 | 	add	local01, #4
0afd0     46 77 62 FC | 	wrlong	arg02, local01
0afd4     1A 77 02 F6 | 	mov	arg02, result1
0afd8     0F 76 66 F7 | 	signx	arg02, #15
0afdc     20 76 06 F5 | 	and	arg02, #32
0afe0     04 8C 06 F1 | 	add	local01, #4
0afe4     46 77 62 FC | 	wrlong	arg02, local01
0afe8     1A 77 02 F6 | 	mov	arg02, result1
0afec     0F 76 66 F7 | 	signx	arg02, #15
0aff0     40 76 06 F5 | 	and	arg02, #64
0aff4     04 8C 06 F1 | 	add	local01, #4
0aff8     46 77 62 FC | 	wrlong	arg02, local01
0affc     1A 77 02 F6 | 	mov	arg02, result1
0b000     0F 76 66 F7 | 	signx	arg02, #15
0b004     80 76 06 F5 | 	and	arg02, #128
0b008     04 8C 06 F1 | 	add	local01, #4
0b00c     46 77 62 FC | 	wrlong	arg02, local01
0b010     1A 77 02 F6 | 	mov	arg02, result1
0b014     0F 76 66 F7 | 	signx	arg02, #15
0b018     00 77 06 F5 | 	and	arg02, #256
0b01c     04 8C 06 F1 | 	add	local01, #4
0b020     46 77 62 FC | 	wrlong	arg02, local01
0b024     1A 77 02 F6 | 	mov	arg02, result1
0b028     0F 76 66 F7 | 	signx	arg02, #15
0b02c     01 00 00 FF 
0b030     00 76 06 F5 | 	and	arg02, ##512
0b034     04 8C 06 F1 | 	add	local01, #4
0b038     46 77 62 FC | 	wrlong	arg02, local01
0b03c     1A 77 02 F6 | 	mov	arg02, result1
0b040     0F 76 66 F7 | 	signx	arg02, #15
0b044     02 00 00 FF 
0b048     00 76 06 F5 | 	and	arg02, ##1024
0b04c     04 8C 06 F1 | 	add	local01, #4
0b050     46 77 62 FC | 	wrlong	arg02, local01
0b054     1A 77 02 F6 | 	mov	arg02, result1
0b058     0F 76 66 F7 | 	signx	arg02, #15
0b05c     04 00 00 FF 
0b060     00 76 06 F5 | 	and	arg02, ##2048
0b064     04 8C 06 F1 | 	add	local01, #4
0b068     46 77 62 FC | 	wrlong	arg02, local01
0b06c     1A 77 02 F6 | 	mov	arg02, result1
0b070     0F 76 66 F7 | 	signx	arg02, #15
0b074     08 00 00 FF 
0b078     00 76 06 F5 | 	and	arg02, ##4096
0b07c     04 8C 06 F1 | 	add	local01, #4
0b080     46 77 62 FC | 	wrlong	arg02, local01
0b084     1A 77 02 F6 | 	mov	arg02, result1
0b088     0F 76 66 F7 | 	signx	arg02, #15
0b08c     10 00 00 FF 
0b090     00 76 06 F5 | 	and	arg02, ##8192
0b094     04 8C 06 F1 | 	add	local01, #4
0b098     46 77 62 FC | 	wrlong	arg02, local01
0b09c     0F 34 66 F7 | 	signx	result1, #15
0b0a0     20 00 00 FF 
0b0a4     00 34 06 F5 | 	and	result1, ##16384
0b0a8     04 8C 06 F1 | 	add	local01, #4
0b0ac     46 35 62 FC | 	wrlong	result1, local01
0b0b0     A8 F0 03 F6 | 	mov	ptra, fp
0b0b4     B3 00 A0 FD | 	call	#popregs_
0b0b8                 | _navkey_update_status_ret
0b0b8     2D 00 64 FD | 	ret
0b0bc                 | 
0b0bc                 | _navkey_write_max
0b0bc     01 4C 05 F6 | 	mov	COUNT_, #1
0b0c0     A9 00 A0 FD | 	call	#pushregs_
0b0c4     3A 8D 02 F6 | 	mov	local01, arg01
0b0c8     3B 75 02 F6 | 	mov	arg01, arg02
0b0cc     9C BC B1 FD | 	call	#__system___float_fromint
0b0d0     1A 79 02 F6 | 	mov	arg03, result1
0b0d4     46 75 02 F6 | 	mov	arg01, local01
0b0d8     0E 76 06 F6 | 	mov	arg02, #14
0b0dc     58 EC B0 FD | 	call	#_writeNavKeyFloat_1804
0b0e0     A8 F0 03 F6 | 	mov	ptra, fp
0b0e4     B3 00 A0 FD | 	call	#popregs_
0b0e8                 | _navkey_write_max_ret
0b0e8     2D 00 64 FD | 	ret
0b0ec                 | 
0b0ec                 | _navkey_write_min
0b0ec     01 4C 05 F6 | 	mov	COUNT_, #1
0b0f0     A9 00 A0 FD | 	call	#pushregs_
0b0f4     3A 8D 02 F6 | 	mov	local01, arg01
0b0f8     3B 75 02 F6 | 	mov	arg01, arg02
0b0fc     6C BC B1 FD | 	call	#__system___float_fromint
0b100     1A 79 02 F6 | 	mov	arg03, result1
0b104     46 75 02 F6 | 	mov	arg01, local01
0b108     12 76 06 F6 | 	mov	arg02, #18
0b10c     28 EC B0 FD | 	call	#_writeNavKeyFloat_1804
0b110     A8 F0 03 F6 | 	mov	ptra, fp
0b114     B3 00 A0 FD | 	call	#popregs_
0b118                 | _navkey_write_min_ret
0b118     2D 00 64 FD | 	ret
0b11c                 | 
0b11c                 | _motion_state_window_init
0b11c     04 4C 05 F6 | 	mov	COUNT_, #4
0b120     A9 00 A0 FD | 	call	#pushregs_
0b124     3A 8D 02 F6 | 	mov	local01, arg01
0b128     46 79 62 FC | 	wrlong	arg03, local01
0b12c     3B 75 02 F6 | 	mov	arg01, arg02
0b130     CC 74 06 F1 | 	add	arg01, #204
0b134     3A 11 68 FC | 	wrlong	#8, arg01
0b138     04 74 06 F1 | 	add	arg01, #4
0b13c     3A 8D 62 FC | 	wrlong	local01, arg01
0b140     04 8C 06 F1 | 	add	local01, #4
0b144     46 8F 02 F6 | 	mov	local02, local01
0b148     47 75 02 F6 | 	mov	arg01, local02
0b14c     88 D8 BF FD | 	call	#_module_init
0b150     47 75 02 F6 | 	mov	arg01, local02
0b154     CC 74 06 F1 | 	add	arg01, #204
0b158     3A 0B 68 FC | 	wrlong	#5, arg01
0b15c     24 74 06 F1 | 	add	arg01, #36
0b160     3A 01 68 FC | 	wrlong	#0, arg01
0b164     04 74 06 F1 | 	add	arg01, #4
0b168     3A 01 68 FC | 	wrlong	#0, arg01
0b16c     47 75 02 F6 | 	mov	arg01, local02
0b170     0F 76 CE F9 | 	bmask	arg02, #15
0b174     01 78 06 F6 | 	mov	arg03, #1
0b178     68 E1 BF FD | 	call	#_module_add_border
0b17c     47 75 02 F6 | 	mov	arg01, local02
0b180     18 E5 BF FD | 	call	#_module_fit_height
0b184     47 75 02 F6 | 	mov	arg01, local02
0b188     48 E4 BF FD | 	call	#_module_fit_width
0b18c     47 75 02 F6 | 	mov	arg01, local02
0b190     F8 74 06 F1 | 	add	arg01, #248
0b194     3A 15 68 FC | 	wrlong	#10, arg01
0b198     04 74 06 F1 | 	add	arg01, #4
0b19c     3A 15 68 FC | 	wrlong	#10, arg01
0b1a0     47 75 02 F6 | 	mov	arg01, local02
0b1a4     01 00 00 FF 
0b1a8     73 78 06 F6 | 	mov	arg03, ##627
0b1ac     10 75 06 F1 | 	add	arg01, #272
0b1b0     1D 00 80 FF 
0b1b4     3A E9 6A FC | 	wrlong	##15220, arg01
0b1b8     04 74 86 F1 | 	sub	arg01, #4
0b1bc     01 00 80 FF 
0b1c0     3A E7 68 FC | 	wrlong	##627, arg01
0b1c4     47 75 02 F6 | 	mov	arg01, local02
0b1c8     80 E1 BF FD | 	call	#_module_align_inner_left
0b1cc     47 75 02 F6 | 	mov	arg01, local02
0b1d0     50 E1 BF FD | 	call	#_module_align_inner_top
0b1d4     40 8D 06 F1 | 	add	local01, #320
0b1d8     46 91 02 F6 | 	mov	local03, local01
0b1dc     48 75 02 F6 | 	mov	arg01, local03
0b1e0     47 77 02 F6 | 	mov	arg02, local02
0b1e4     F0 D7 BF FD | 	call	#_module_init
0b1e8     48 75 02 F6 | 	mov	arg01, local03
0b1ec     0A 78 06 F6 | 	mov	arg03, #10
0b1f0     00 75 06 F1 | 	add	arg01, #256
0b1f4     3A 15 68 FC | 	wrlong	#10, arg01
0b1f8     04 74 06 F1 | 	add	arg01, #4
0b1fc     3A 15 68 FC | 	wrlong	#10, arg01
0b200     56 01 00 FF 
0b204     78 D6 05 F1 | 	add	ptr__dat__, ##175224
0b208     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b20c     56 01 00 FF 
0b210     78 D6 85 F1 | 	sub	ptr__dat__, ##175224
0b214     48 75 02 F6 | 	mov	arg01, local03
0b218     58 DD BF FD | 	call	#_module_set_text
0b21c     48 75 02 F6 | 	mov	arg01, local03
0b220     01 76 06 F6 | 	mov	arg02, #1
0b224     8C DE BF FD | 	call	#_module_text_font
0b228     48 75 02 F6 | 	mov	arg01, local03
0b22c     A0 DD BF FD | 	call	#_module_text_fit
0b230     48 79 02 FB | 	rdlong	arg03, local03
0b234     10 79 06 F1 | 	add	arg03, #272
0b238     3C 79 02 FB | 	rdlong	arg03, arg03
0b23c     48 75 02 F6 | 	mov	arg01, local03
0b240     10 75 06 F1 | 	add	arg01, #272
0b244     7F 00 80 FF 
0b248     3A FF 6B FC | 	wrlong	##65535, arg01
0b24c     04 74 86 F1 | 	sub	arg01, #4
0b250     3A 79 62 FC | 	wrlong	arg03, arg01
0b254     48 75 02 F6 | 	mov	arg01, local03
0b258     01 76 06 F6 | 	mov	arg02, #1
0b25c     02 78 06 F6 | 	mov	arg03, #2
0b260     EC E1 BF FD | 	call	#_module_align_center_sector
0b264     48 75 02 F6 | 	mov	arg01, local03
0b268     B8 E0 BF FD | 	call	#_module_align_inner_top
0b26c     40 8D 06 F1 | 	add	local01, #320
0b270     46 93 02 F6 | 	mov	local04, local01
0b274     49 75 02 F6 | 	mov	arg01, local04
0b278     47 77 02 F6 | 	mov	arg02, local02
0b27c     58 D7 BF FD | 	call	#_module_init
0b280     49 75 02 F6 | 	mov	arg01, local04
0b284     0A 78 06 F6 | 	mov	arg03, #10
0b288     00 75 06 F1 | 	add	arg01, #256
0b28c     3A 15 68 FC | 	wrlong	#10, arg01
0b290     04 74 06 F1 | 	add	arg01, #4
0b294     3A 15 68 FC | 	wrlong	#10, arg01
0b298     56 01 00 FF 
0b29c     71 D6 05 F1 | 	add	ptr__dat__, ##175217
0b2a0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b2a4     56 01 00 FF 
0b2a8     71 D6 85 F1 | 	sub	ptr__dat__, ##175217
0b2ac     49 75 02 F6 | 	mov	arg01, local04
0b2b0     C0 DC BF FD | 	call	#_module_set_text
0b2b4     49 75 02 F6 | 	mov	arg01, local04
0b2b8     01 76 06 F6 | 	mov	arg02, #1
0b2bc     F4 DD BF FD | 	call	#_module_text_font
0b2c0     49 75 02 F6 | 	mov	arg01, local04
0b2c4     08 DD BF FD | 	call	#_module_text_fit
0b2c8     49 79 02 FB | 	rdlong	arg03, local04
0b2cc     10 79 06 F1 | 	add	arg03, #272
0b2d0     3C 79 02 FB | 	rdlong	arg03, arg03
0b2d4     49 75 02 F6 | 	mov	arg01, local04
0b2d8     10 75 06 F1 | 	add	arg01, #272
0b2dc     7F 00 80 FF 
0b2e0     3A FF 6B FC | 	wrlong	##65535, arg01
0b2e4     04 74 86 F1 | 	sub	arg01, #4
0b2e8     3A 79 62 FC | 	wrlong	arg03, arg01
0b2ec     49 75 02 F6 | 	mov	arg01, local04
0b2f0     48 77 02 F6 | 	mov	arg02, local03
0b2f4     58 E2 BF FD | 	call	#_module_align_left
0b2f8     49 75 02 F6 | 	mov	arg01, local04
0b2fc     24 E0 BF FD | 	call	#_module_align_inner_top
0b300     40 8D 06 F1 | 	add	local01, #320
0b304     46 75 02 F6 | 	mov	arg01, local01
0b308     47 77 02 F6 | 	mov	arg02, local02
0b30c     C8 D6 BF FD | 	call	#_module_init
0b310     46 75 02 F6 | 	mov	arg01, local01
0b314     0A 78 06 F6 | 	mov	arg03, #10
0b318     00 75 06 F1 | 	add	arg01, #256
0b31c     3A 15 68 FC | 	wrlong	#10, arg01
0b320     04 74 06 F1 | 	add	arg01, #4
0b324     3A 15 68 FC | 	wrlong	#10, arg01
0b328     56 01 00 FF 
0b32c     82 D6 05 F1 | 	add	ptr__dat__, ##175234
0b330     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b334     56 01 00 FF 
0b338     82 D6 85 F1 | 	sub	ptr__dat__, ##175234
0b33c     46 75 02 F6 | 	mov	arg01, local01
0b340     30 DC BF FD | 	call	#_module_set_text
0b344     46 75 02 F6 | 	mov	arg01, local01
0b348     01 76 06 F6 | 	mov	arg02, #1
0b34c     64 DD BF FD | 	call	#_module_text_font
0b350     46 75 02 F6 | 	mov	arg01, local01
0b354     78 DC BF FD | 	call	#_module_text_fit
0b358     49 79 02 FB | 	rdlong	arg03, local04
0b35c     10 79 06 F1 | 	add	arg03, #272
0b360     3C 79 02 FB | 	rdlong	arg03, arg03
0b364     46 75 02 F6 | 	mov	arg01, local01
0b368     10 75 06 F1 | 	add	arg01, #272
0b36c     7F 00 80 FF 
0b370     3A FF 6B FC | 	wrlong	##65535, arg01
0b374     04 74 86 F1 | 	sub	arg01, #4
0b378     3A 79 62 FC | 	wrlong	arg03, arg01
0b37c     46 75 02 F6 | 	mov	arg01, local01
0b380     48 77 02 F6 | 	mov	arg02, local03
0b384     20 E2 BF FD | 	call	#_module_align_right
0b388     46 75 02 F6 | 	mov	arg01, local01
0b38c     94 DF BF FD | 	call	#_module_align_inner_top
0b390     40 8D 06 F1 | 	add	local01, #320
0b394     46 91 02 F6 | 	mov	local03, local01
0b398     48 75 02 F6 | 	mov	arg01, local03
0b39c     47 77 02 F6 | 	mov	arg02, local02
0b3a0     34 D6 BF FD | 	call	#_module_init
0b3a4     48 75 02 F6 | 	mov	arg01, local03
0b3a8     CC 74 06 F1 | 	add	arg01, #204
0b3ac     3A 0B 68 FC | 	wrlong	#5, arg01
0b3b0     24 74 06 F1 | 	add	arg01, #36
0b3b4     3A 01 68 FC | 	wrlong	#0, arg01
0b3b8     04 74 06 F1 | 	add	arg01, #4
0b3bc     3A 01 68 FC | 	wrlong	#0, arg01
0b3c0     48 75 02 F6 | 	mov	arg01, local03
0b3c4     10 75 06 F1 | 	add	arg01, #272
0b3c8     43 00 80 FF 
0b3cc     3A E1 6B FC | 	wrlong	##34800, arg01
0b3d0     04 74 86 F1 | 	sub	arg01, #4
0b3d4     43 00 80 FF 
0b3d8     3A E1 6B FC | 	wrlong	##34800, arg01
0b3dc     48 75 02 F6 | 	mov	arg01, local03
0b3e0     7C 00 00 FF 
0b3e4     00 76 06 F6 | 	mov	arg02, ##63488
0b3e8     03 78 06 F6 | 	mov	arg03, #3
0b3ec     F4 DE BF FD | 	call	#_module_add_border
0b3f0     48 75 02 F6 | 	mov	arg01, local03
0b3f4     0A 78 06 F6 | 	mov	arg03, #10
0b3f8     00 75 06 F1 | 	add	arg01, #256
0b3fc     3A 15 68 FC | 	wrlong	#10, arg01
0b400     04 74 06 F1 | 	add	arg01, #4
0b404     3A 15 68 FC | 	wrlong	#10, arg01
0b408     48 75 02 F6 | 	mov	arg01, local03
0b40c     03 76 06 F6 | 	mov	arg02, #3
0b410     F8 E1 BF FD | 	call	#_module_fit_space_even
0b414     48 75 02 F6 | 	mov	arg01, local03
0b418     49 77 02 F6 | 	mov	arg02, local04
0b41c     B4 E2 BF FD | 	call	#_module_fit_below
0b420     48 75 02 F6 | 	mov	arg01, local03
0b424     01 76 06 F6 | 	mov	arg02, #1
0b428     03 78 06 F6 | 	mov	arg03, #3
0b42c     94 E0 BF FD | 	call	#_module_align_space_even
0b430     C9 74 02 F6 | 	mov	arg01, objptr
0b434     D2 76 02 F6 | 	mov	arg02, ptr__button_callback_1829_
0b438     AC 9E B1 FD | 	call	#__system___make_methodptr
0b43c     48 75 02 F6 | 	mov	arg01, local03
0b440     00 78 06 F6 | 	mov	arg03, #0
0b444     34 75 06 F1 | 	add	arg01, #308
0b448     3A 35 62 FC | 	wrlong	result1, arg01
0b44c     10 74 86 F1 | 	sub	arg01, #16
0b450     3A 01 68 FC | 	wrlong	#0, arg01
0b454     C9 74 02 F6 | 	mov	arg01, objptr
0b458     18 77 02 F6 | 	mov	arg02, ptr__update_status_1835_
0b45c     88 9E B1 FD | 	call	#__system___make_methodptr
0b460     48 75 02 F6 | 	mov	arg01, local03
0b464     38 75 06 F1 | 	add	arg01, #312
0b468     3A 35 62 FC | 	wrlong	result1, arg01
0b46c     40 8D 06 F1 | 	add	local01, #320
0b470     46 75 02 F6 | 	mov	arg01, local01
0b474     48 77 02 F6 | 	mov	arg02, local03
0b478     5C D5 BF FD | 	call	#_module_init
0b47c     55 01 00 FF 
0b480     FC D7 05 F1 | 	add	ptr__dat__, ##175100
0b484     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b488     55 01 00 FF 
0b48c     FC D7 85 F1 | 	sub	ptr__dat__, ##175100
0b490     46 75 02 F6 | 	mov	arg01, local01
0b494     DC DA BF FD | 	call	#_module_set_text
0b498     46 75 02 F6 | 	mov	arg01, local01
0b49c     01 76 06 F6 | 	mov	arg02, #1
0b4a0     10 DC BF FD | 	call	#_module_text_font
0b4a4     46 75 02 F6 | 	mov	arg01, local01
0b4a8     24 DB BF FD | 	call	#_module_text_fit
0b4ac     46 75 02 F6 | 	mov	arg01, local01
0b4b0     20 E1 BF FD | 	call	#_module_fit_width
0b4b4     46 91 02 FB | 	rdlong	local03, local01
0b4b8     10 91 06 F1 | 	add	local03, #272
0b4bc     48 79 02 FB | 	rdlong	arg03, local03
0b4c0     46 75 02 F6 | 	mov	arg01, local01
0b4c4     10 75 06 F1 | 	add	arg01, #272
0b4c8     7F 00 80 FF 
0b4cc     3A FF 6B FC | 	wrlong	##65535, arg01
0b4d0     04 74 86 F1 | 	sub	arg01, #4
0b4d4     3A 79 62 FC | 	wrlong	arg03, arg01
0b4d8     46 75 02 F6 | 	mov	arg01, local01
0b4dc     CC 74 06 F1 | 	add	arg01, #204
0b4e0     3A 91 02 FB | 	rdlong	local03, arg01
0b4e4     CC 74 86 F1 | 	sub	arg01, #204
0b4e8     01 90 0E F2 | 	cmp	local03, #1 wz
0b4ec                 | '         return;
0b4ec     DC 74 06 A1 |  if_e	add	arg01, #220
0b4f0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b4f4     46 75 02 F6 | 	mov	arg01, local01
0b4f8     50 DE BF FD | 	call	#_module_align_inner_left
0b4fc     46 75 02 F6 | 	mov	arg01, local01
0b500     00 DF BF FD | 	call	#_module_align_middle
0b504     40 8D 06 F1 | 	add	local01, #320
0b508     46 91 02 F6 | 	mov	local03, local01
0b50c     48 75 02 F6 | 	mov	arg01, local03
0b510     47 77 02 F6 | 	mov	arg02, local02
0b514     C0 D4 BF FD | 	call	#_module_init
0b518     48 75 02 F6 | 	mov	arg01, local03
0b51c     CC 74 06 F1 | 	add	arg01, #204
0b520     3A 0B 68 FC | 	wrlong	#5, arg01
0b524     24 74 06 F1 | 	add	arg01, #36
0b528     3A 01 68 FC | 	wrlong	#0, arg01
0b52c     04 74 06 F1 | 	add	arg01, #4
0b530     3A 01 68 FC | 	wrlong	#0, arg01
0b534     48 75 02 F6 | 	mov	arg01, local03
0b538     10 75 06 F1 | 	add	arg01, #272
0b53c     43 00 80 FF 
0b540     3A E1 6B FC | 	wrlong	##34800, arg01
0b544     04 74 86 F1 | 	sub	arg01, #4
0b548     43 00 80 FF 
0b54c     3A E1 6B FC | 	wrlong	##34800, arg01
0b550     48 75 02 F6 | 	mov	arg01, local03
0b554     00 75 06 F1 | 	add	arg01, #256
0b558     3A 15 68 FC | 	wrlong	#10, arg01
0b55c     04 74 06 F1 | 	add	arg01, #4
0b560     3A 15 68 FC | 	wrlong	#10, arg01
0b564     48 75 02 F6 | 	mov	arg01, local03
0b568     02 78 06 F6 | 	mov	arg03, #2
0b56c     F8 74 06 F1 | 	add	arg01, #248
0b570     3A 05 68 FC | 	wrlong	#2, arg01
0b574     04 74 06 F1 | 	add	arg01, #4
0b578     3A 05 68 FC | 	wrlong	#2, arg01
0b57c     48 75 02 F6 | 	mov	arg01, local03
0b580     03 76 06 F6 | 	mov	arg02, #3
0b584     84 E0 BF FD | 	call	#_module_fit_space_even
0b588     48 75 02 F6 | 	mov	arg01, local03
0b58c     49 77 02 F6 | 	mov	arg02, local04
0b590     40 E1 BF FD | 	call	#_module_fit_below
0b594     48 75 02 F6 | 	mov	arg01, local03
0b598     02 76 06 F6 | 	mov	arg02, #2
0b59c     03 78 06 F6 | 	mov	arg03, #3
0b5a0     20 DF BF FD | 	call	#_module_align_space_even
0b5a4     C9 74 02 F6 | 	mov	arg01, objptr
0b5a8     0C 77 02 F6 | 	mov	arg02, ptr__update_condition_1841_
0b5ac     38 9D B1 FD | 	call	#__system___make_methodptr
0b5b0     48 75 02 F6 | 	mov	arg01, local03
0b5b4     38 75 06 F1 | 	add	arg01, #312
0b5b8     3A 35 62 FC | 	wrlong	result1, arg01
0b5bc     40 8D 06 F1 | 	add	local01, #320
0b5c0     46 75 02 F6 | 	mov	arg01, local01
0b5c4     48 77 02 F6 | 	mov	arg02, local03
0b5c8     0C D4 BF FD | 	call	#_module_init
0b5cc     56 01 00 FF 
0b5d0     52 D6 05 F1 | 	add	ptr__dat__, ##175186
0b5d4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b5d8     56 01 00 FF 
0b5dc     52 D6 85 F1 | 	sub	ptr__dat__, ##175186
0b5e0     46 75 02 F6 | 	mov	arg01, local01
0b5e4     8C D9 BF FD | 	call	#_module_set_text
0b5e8     46 75 02 F6 | 	mov	arg01, local01
0b5ec     01 76 06 F6 | 	mov	arg02, #1
0b5f0     C0 DA BF FD | 	call	#_module_text_font
0b5f4     46 75 02 F6 | 	mov	arg01, local01
0b5f8     D4 D9 BF FD | 	call	#_module_text_fit
0b5fc     46 75 02 F6 | 	mov	arg01, local01
0b600     D0 DF BF FD | 	call	#_module_fit_width
0b604     46 91 02 FB | 	rdlong	local03, local01
0b608     10 91 06 F1 | 	add	local03, #272
0b60c     48 79 02 FB | 	rdlong	arg03, local03
0b610     46 75 02 F6 | 	mov	arg01, local01
0b614     10 75 06 F1 | 	add	arg01, #272
0b618     7F 00 80 FF 
0b61c     3A FF 6B FC | 	wrlong	##65535, arg01
0b620     04 74 86 F1 | 	sub	arg01, #4
0b624     3A 79 62 FC | 	wrlong	arg03, arg01
0b628     46 75 02 F6 | 	mov	arg01, local01
0b62c     CC 74 06 F1 | 	add	arg01, #204
0b630     3A 91 02 FB | 	rdlong	local03, arg01
0b634     CC 74 86 F1 | 	sub	arg01, #204
0b638     01 90 0E F2 | 	cmp	local03, #1 wz
0b63c                 | '         return;
0b63c     DC 74 06 A1 |  if_e	add	arg01, #220
0b640     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b644     46 75 02 F6 | 	mov	arg01, local01
0b648     00 DD BF FD | 	call	#_module_align_inner_left
0b64c     46 75 02 F6 | 	mov	arg01, local01
0b650     B0 DD BF FD | 	call	#_module_align_middle
0b654     40 8D 06 F1 | 	add	local01, #320
0b658     46 91 02 F6 | 	mov	local03, local01
0b65c     48 75 02 F6 | 	mov	arg01, local03
0b660     47 77 02 F6 | 	mov	arg02, local02
0b664     70 D3 BF FD | 	call	#_module_init
0b668     48 75 02 F6 | 	mov	arg01, local03
0b66c     CC 74 06 F1 | 	add	arg01, #204
0b670     3A 0B 68 FC | 	wrlong	#5, arg01
0b674     24 74 06 F1 | 	add	arg01, #36
0b678     3A 01 68 FC | 	wrlong	#0, arg01
0b67c     04 74 06 F1 | 	add	arg01, #4
0b680     3A 01 68 FC | 	wrlong	#0, arg01
0b684     48 75 02 F6 | 	mov	arg01, local03
0b688     10 75 06 F1 | 	add	arg01, #272
0b68c     43 00 80 FF 
0b690     3A E1 6B FC | 	wrlong	##34800, arg01
0b694     04 74 86 F1 | 	sub	arg01, #4
0b698     43 00 80 FF 
0b69c     3A E1 6B FC | 	wrlong	##34800, arg01
0b6a0     48 75 02 F6 | 	mov	arg01, local03
0b6a4     0A 78 06 F6 | 	mov	arg03, #10
0b6a8     00 75 06 F1 | 	add	arg01, #256
0b6ac     3A 15 68 FC | 	wrlong	#10, arg01
0b6b0     04 74 06 F1 | 	add	arg01, #4
0b6b4     3A 15 68 FC | 	wrlong	#10, arg01
0b6b8     48 75 02 F6 | 	mov	arg01, local03
0b6bc     03 76 06 F6 | 	mov	arg02, #3
0b6c0     48 DF BF FD | 	call	#_module_fit_space_even
0b6c4     48 75 02 F6 | 	mov	arg01, local03
0b6c8     49 77 02 F6 | 	mov	arg02, local04
0b6cc     04 E0 BF FD | 	call	#_module_fit_below
0b6d0     48 75 02 F6 | 	mov	arg01, local03
0b6d4     03 76 06 F6 | 	mov	arg02, #3
0b6d8     03 78 06 F6 | 	mov	arg03, #3
0b6dc     E4 DD BF FD | 	call	#_module_align_space_even
0b6e0     C9 74 02 F6 | 	mov	arg01, objptr
0b6e4     D2 76 02 F6 | 	mov	arg02, ptr__button_callback_1829_
0b6e8     FC 9B B1 FD | 	call	#__system___make_methodptr
0b6ec     48 75 02 F6 | 	mov	arg01, local03
0b6f0     02 78 06 F6 | 	mov	arg03, #2
0b6f4     34 75 06 F1 | 	add	arg01, #308
0b6f8     3A 35 62 FC | 	wrlong	result1, arg01
0b6fc     10 74 86 F1 | 	sub	arg01, #16
0b700     3A 05 68 FC | 	wrlong	#2, arg01
0b704     C9 74 02 F6 | 	mov	arg01, objptr
0b708     13 77 02 F6 | 	mov	arg02, ptr__update_mode_1847_
0b70c     D8 9B B1 FD | 	call	#__system___make_methodptr
0b710     48 75 02 F6 | 	mov	arg01, local03
0b714     38 75 06 F1 | 	add	arg01, #312
0b718     3A 35 62 FC | 	wrlong	result1, arg01
0b71c     40 8D 06 F1 | 	add	local01, #320
0b720     46 75 02 F6 | 	mov	arg01, local01
0b724     48 77 02 F6 | 	mov	arg02, local03
0b728     AC D2 BF FD | 	call	#_module_init
0b72c     56 01 00 FF 
0b730     61 D6 05 F1 | 	add	ptr__dat__, ##175201
0b734     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b738     56 01 00 FF 
0b73c     61 D6 85 F1 | 	sub	ptr__dat__, ##175201
0b740     46 75 02 F6 | 	mov	arg01, local01
0b744     2C D8 BF FD | 	call	#_module_set_text
0b748     46 75 02 F6 | 	mov	arg01, local01
0b74c     01 76 06 F6 | 	mov	arg02, #1
0b750     60 D9 BF FD | 	call	#_module_text_font
0b754     46 75 02 F6 | 	mov	arg01, local01
0b758     74 D8 BF FD | 	call	#_module_text_fit
0b75c     46 75 02 F6 | 	mov	arg01, local01
0b760     70 DE BF FD | 	call	#_module_fit_width
0b764     46 93 02 FB | 	rdlong	local04, local01
0b768     10 93 06 F1 | 	add	local04, #272
0b76c     49 79 02 FB | 	rdlong	arg03, local04
0b770     46 75 02 F6 | 	mov	arg01, local01
0b774     10 75 06 F1 | 	add	arg01, #272
0b778     7F 00 80 FF 
0b77c     3A FF 6B FC | 	wrlong	##65535, arg01
0b780     04 74 86 F1 | 	sub	arg01, #4
0b784     3A 79 62 FC | 	wrlong	arg03, arg01
0b788     46 75 02 F6 | 	mov	arg01, local01
0b78c     CC 74 06 F1 | 	add	arg01, #204
0b790     3A 93 02 FB | 	rdlong	local04, arg01
0b794     CC 74 86 F1 | 	sub	arg01, #204
0b798     01 92 0E F2 | 	cmp	local04, #1 wz
0b79c                 | '         return;
0b79c     DC 74 06 A1 |  if_e	add	arg01, #220
0b7a0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b7a4     46 75 02 F6 | 	mov	arg01, local01
0b7a8     A0 DB BF FD | 	call	#_module_align_inner_left
0b7ac     46 75 02 F6 | 	mov	arg01, local01
0b7b0     50 DC BF FD | 	call	#_module_align_middle
0b7b4     A8 F0 03 F6 | 	mov	ptra, fp
0b7b8     B3 00 A0 FD | 	call	#popregs_
0b7bc                 | _motion_state_window_init_ret
0b7bc     2D 00 64 FD | 	ret
0b7c0                 | 
0b7c0                 | _function_window_init
0b7c0     05 4C 05 F6 | 	mov	COUNT_, #5
0b7c4     A9 00 A0 FD | 	call	#pushregs_
0b7c8     3A 8D 02 F6 | 	mov	local01, arg01
0b7cc     46 79 62 FC | 	wrlong	arg03, local01
0b7d0     3B 75 02 F6 | 	mov	arg01, arg02
0b7d4     CC 74 06 F1 | 	add	arg01, #204
0b7d8     3A 11 68 FC | 	wrlong	#8, arg01
0b7dc     04 74 06 F1 | 	add	arg01, #4
0b7e0     3A 8D 62 FC | 	wrlong	local01, arg01
0b7e4     24 8C 06 F1 | 	add	local01, #36
0b7e8     46 8F 02 F6 | 	mov	local02, local01
0b7ec     47 75 02 F6 | 	mov	arg01, local02
0b7f0     E4 D1 BF FD | 	call	#_module_init
0b7f4     47 75 02 F6 | 	mov	arg01, local02
0b7f8     CC 74 06 F1 | 	add	arg01, #204
0b7fc     3A 0B 68 FC | 	wrlong	#5, arg01
0b800     24 74 06 F1 | 	add	arg01, #36
0b804     3A 01 68 FC | 	wrlong	#0, arg01
0b808     04 74 06 F1 | 	add	arg01, #4
0b80c     3A 01 68 FC | 	wrlong	#0, arg01
0b810     47 75 02 F6 | 	mov	arg01, local02
0b814     0F 76 CE F9 | 	bmask	arg02, #15
0b818     01 78 06 F6 | 	mov	arg03, #1
0b81c     C4 DA BF FD | 	call	#_module_add_border
0b820     47 75 02 F6 | 	mov	arg01, local02
0b824     74 DE BF FD | 	call	#_module_fit_height
0b828     47 75 02 F6 | 	mov	arg01, local02
0b82c     A4 DD BF FD | 	call	#_module_fit_width
0b830     47 75 02 F6 | 	mov	arg01, local02
0b834     F8 74 06 F1 | 	add	arg01, #248
0b838     3A 0B 68 FC | 	wrlong	#5, arg01
0b83c     04 74 06 F1 | 	add	arg01, #4
0b840     3A 0B 68 FC | 	wrlong	#5, arg01
0b844     47 75 02 F6 | 	mov	arg01, local02
0b848     01 00 00 FF 
0b84c     73 78 06 F6 | 	mov	arg03, ##627
0b850     10 75 06 F1 | 	add	arg01, #272
0b854     1D 00 80 FF 
0b858     3A E9 6A FC | 	wrlong	##15220, arg01
0b85c     04 74 86 F1 | 	sub	arg01, #4
0b860     01 00 80 FF 
0b864     3A E7 68 FC | 	wrlong	##627, arg01
0b868     47 75 02 F6 | 	mov	arg01, local02
0b86c     DC DA BF FD | 	call	#_module_align_inner_left
0b870     47 75 02 F6 | 	mov	arg01, local02
0b874     AC DA BF FD | 	call	#_module_align_inner_top
0b878     40 8D 06 F1 | 	add	local01, #320
0b87c     46 91 02 F6 | 	mov	local03, local01
0b880     48 75 02 F6 | 	mov	arg01, local03
0b884     47 77 02 F6 | 	mov	arg02, local02
0b888     4C D1 BF FD | 	call	#_module_init
0b88c     48 75 02 F6 | 	mov	arg01, local03
0b890     08 78 06 F6 | 	mov	arg03, #8
0b894     F8 74 06 F1 | 	add	arg01, #248
0b898     3A 11 68 FC | 	wrlong	#8, arg01
0b89c     04 74 06 F1 | 	add	arg01, #4
0b8a0     3A 11 68 FC | 	wrlong	#8, arg01
0b8a4     48 75 02 F6 | 	mov	arg01, local03
0b8a8     00 75 06 F1 | 	add	arg01, #256
0b8ac     3A 11 68 FC | 	wrlong	#8, arg01
0b8b0     04 74 06 F1 | 	add	arg01, #4
0b8b4     3A 11 68 FC | 	wrlong	#8, arg01
0b8b8     60 8D 86 F1 | 	sub	local01, #352
0b8bc     46 77 02 F6 | 	mov	arg02, local01
0b8c0     48 75 02 F6 | 	mov	arg01, local03
0b8c4     AC D6 BF FD | 	call	#_module_set_text
0b8c8     48 75 02 F6 | 	mov	arg01, local03
0b8cc     01 76 06 F6 | 	mov	arg02, #1
0b8d0     E0 D7 BF FD | 	call	#_module_text_font
0b8d4     48 79 02 FB | 	rdlong	arg03, local03
0b8d8     10 79 06 F1 | 	add	arg03, #272
0b8dc     3C 79 02 FB | 	rdlong	arg03, arg03
0b8e0     48 75 02 F6 | 	mov	arg01, local03
0b8e4     10 75 06 F1 | 	add	arg01, #272
0b8e8     7F 00 80 FF 
0b8ec     3A FF 6B FC | 	wrlong	##65535, arg01
0b8f0     04 74 86 F1 | 	sub	arg01, #4
0b8f4     3A 79 62 FC | 	wrlong	arg03, arg01
0b8f8     48 75 02 F6 | 	mov	arg01, local03
0b8fc     CC 74 06 F1 | 	add	arg01, #204
0b900     3A 77 02 FB | 	rdlong	arg02, arg01
0b904     CC 74 86 F1 | 	sub	arg01, #204
0b908     01 76 0E F2 | 	cmp	arg02, #1 wz
0b90c                 | '         return;
0b90c     DC 74 06 A1 |  if_e	add	arg01, #220
0b910     3A 05 68 AC |  if_e	wrlong	#2, arg01
0b914     48 75 02 F6 | 	mov	arg01, local03
0b918     08 DA BF FD | 	call	#_module_align_inner_top
0b91c     C9 74 02 F6 | 	mov	arg01, objptr
0b920     0F 77 02 F6 | 	mov	arg02, ptr__update_header_1905_
0b924     C0 99 B1 FD | 	call	#__system___make_methodptr
0b928     48 75 02 F6 | 	mov	arg01, local03
0b92c     38 75 06 F1 | 	add	arg01, #312
0b930     3A 35 62 FC | 	wrlong	result1, arg01
0b934     01 00 00 FF 
0b938     A0 8C 06 F1 | 	add	local01, ##672
0b93c     46 93 02 F6 | 	mov	local04, local01
0b940     49 75 02 F6 | 	mov	arg01, local04
0b944     47 77 02 F6 | 	mov	arg02, local02
0b948     8C D0 BF FD | 	call	#_module_init
0b94c     49 75 02 F6 | 	mov	arg01, local04
0b950     00 78 06 F6 | 	mov	arg03, #0
0b954     F8 74 06 F1 | 	add	arg01, #248
0b958     3A 01 68 FC | 	wrlong	#0, arg01
0b95c     04 74 06 F1 | 	add	arg01, #4
0b960     3A 01 68 FC | 	wrlong	#0, arg01
0b964     49 75 02 F6 | 	mov	arg01, local04
0b968     68 DC BF FD | 	call	#_module_fit_width
0b96c     49 75 02 F6 | 	mov	arg01, local04
0b970     48 77 02 F6 | 	mov	arg02, local03
0b974     5C DD BF FD | 	call	#_module_fit_below
0b978     49 75 02 F6 | 	mov	arg01, local04
0b97c     CC D9 BF FD | 	call	#_module_align_inner_left
0b980     49 75 02 F6 | 	mov	arg01, local04
0b984     48 77 02 F6 | 	mov	arg02, local03
0b988     F0 DB BF FD | 	call	#_module_align_below
0b98c     40 8D 06 F1 | 	add	local01, #320
0b990     46 8F 02 F6 | 	mov	local02, local01
0b994     47 75 02 F6 | 	mov	arg01, local02
0b998     49 77 02 F6 | 	mov	arg02, local04
0b99c     38 D0 BF FD | 	call	#_module_init
0b9a0     56 01 00 FF 
0b9a4     87 D6 05 F1 | 	add	ptr__dat__, ##175239
0b9a8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0b9ac     56 01 00 FF 
0b9b0     87 D6 85 F1 | 	sub	ptr__dat__, ##175239
0b9b4     47 75 02 F6 | 	mov	arg01, local02
0b9b8     B8 D5 BF FD | 	call	#_module_set_text
0b9bc     47 75 02 F6 | 	mov	arg01, local02
0b9c0     10 75 06 F1 | 	add	arg01, #272
0b9c4     7F 00 80 FF 
0b9c8     3A FF 6B FC | 	wrlong	##65535, arg01
0b9cc     04 74 86 F1 | 	sub	arg01, #4
0b9d0     43 00 80 FF 
0b9d4     3A E1 6B FC | 	wrlong	##34800, arg01
0b9d8     47 75 02 F6 | 	mov	arg01, local02
0b9dc     00 75 06 F1 | 	add	arg01, #256
0b9e0     3A 11 68 FC | 	wrlong	#8, arg01
0b9e4     04 74 06 F1 | 	add	arg01, #4
0b9e8     3A 11 68 FC | 	wrlong	#8, arg01
0b9ec     47 75 02 F6 | 	mov	arg01, local02
0b9f0     CC 74 06 F1 | 	add	arg01, #204
0b9f4     3A 91 02 FB | 	rdlong	local03, arg01
0b9f8     CC 74 86 F1 | 	sub	arg01, #204
0b9fc     01 90 0E F2 | 	cmp	local03, #1 wz
0ba00                 | '         return;
0ba00     DC 74 06 A1 |  if_e	add	arg01, #220
0ba04     3A 05 68 AC |  if_e	wrlong	#2, arg01
0ba08     47 75 02 F6 | 	mov	arg01, local02
0ba0c     CC 74 06 F1 | 	add	arg01, #204
0ba10     3A 91 02 FB | 	rdlong	local03, arg01
0ba14     CC 74 86 F1 | 	sub	arg01, #204
0ba18     01 90 0E F2 | 	cmp	local03, #1 wz
0ba1c                 | '         return;
0ba1c     E0 74 06 A1 |  if_e	add	arg01, #224
0ba20     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0ba24     47 75 02 F6 | 	mov	arg01, local02
0ba28     00 76 06 F6 | 	mov	arg02, #0
0ba2c     03 78 06 F6 | 	mov	arg03, #3
0ba30     B0 D8 BF FD | 	call	#_module_add_border
0ba34     47 75 02 F6 | 	mov	arg01, local02
0ba38     03 76 06 F6 | 	mov	arg02, #3
0ba3c     CC DB BF FD | 	call	#_module_fit_space_even
0ba40     47 75 02 F6 | 	mov	arg01, local02
0ba44     03 76 06 F6 | 	mov	arg02, #3
0ba48     08 DC BF FD | 	call	#_module_fit_space_even_verticle
0ba4c     47 75 02 F6 | 	mov	arg01, local02
0ba50     01 76 06 F6 | 	mov	arg02, #1
0ba54     03 78 06 F6 | 	mov	arg03, #3
0ba58     68 DA BF FD | 	call	#_module_align_space_even
0ba5c     47 75 02 F6 | 	mov	arg01, local02
0ba60     C0 D8 BF FD | 	call	#_module_align_inner_top
0ba64     C9 74 02 F6 | 	mov	arg01, objptr
0ba68     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0ba6c     78 98 B1 FD | 	call	#__system___make_methodptr
0ba70     47 75 02 F6 | 	mov	arg01, local02
0ba74     00 78 06 F6 | 	mov	arg03, #0
0ba78     34 75 06 F1 | 	add	arg01, #308
0ba7c     3A 35 62 FC | 	wrlong	result1, arg01
0ba80     10 74 86 F1 | 	sub	arg01, #16
0ba84     3A 01 68 FC | 	wrlong	#0, arg01
0ba88     C9 74 02 F6 | 	mov	arg01, objptr
0ba8c     14 77 02 F6 | 	mov	arg02, ptr__update_off_1910_
0ba90     54 98 B1 FD | 	call	#__system___make_methodptr
0ba94     47 75 02 F6 | 	mov	arg01, local02
0ba98     38 75 06 F1 | 	add	arg01, #312
0ba9c     3A 35 62 FC | 	wrlong	result1, arg01
0baa0     40 8D 06 F1 | 	add	local01, #320
0baa4     46 75 02 F6 | 	mov	arg01, local01
0baa8     49 77 02 F6 | 	mov	arg02, local04
0baac     28 CF BF FD | 	call	#_module_init
0bab0     46 75 02 F6 | 	mov	arg01, local01
0bab4     47 77 02 F6 | 	mov	arg02, local02
0bab8     C0 D3 BF FD | 	call	#_module_copy
0babc     56 01 00 FF 
0bac0     8B D6 05 F1 | 	add	ptr__dat__, ##175243
0bac4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bac8     56 01 00 FF 
0bacc     8B D6 85 F1 | 	sub	ptr__dat__, ##175243
0bad0     46 75 02 F6 | 	mov	arg01, local01
0bad4     9C D4 BF FD | 	call	#_module_set_text
0bad8     46 75 02 F6 | 	mov	arg01, local01
0badc     CC 74 06 F1 | 	add	arg01, #204
0bae0     3A 91 02 FB | 	rdlong	local03, arg01
0bae4     CC 74 86 F1 | 	sub	arg01, #204
0bae8     01 90 0E F2 | 	cmp	local03, #1 wz
0baec                 | '         return;
0baec     DC 74 06 A1 |  if_e	add	arg01, #220
0baf0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0baf4     46 75 02 F6 | 	mov	arg01, local01
0baf8     CC 74 06 F1 | 	add	arg01, #204
0bafc     3A 91 02 FB | 	rdlong	local03, arg01
0bb00     CC 74 86 F1 | 	sub	arg01, #204
0bb04     01 90 0E F2 | 	cmp	local03, #1 wz
0bb08                 | '         return;
0bb08     E0 74 06 A1 |  if_e	add	arg01, #224
0bb0c     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bb10     46 75 02 F6 | 	mov	arg01, local01
0bb14     00 76 06 F6 | 	mov	arg02, #0
0bb18     03 78 06 F6 | 	mov	arg03, #3
0bb1c     C4 D7 BF FD | 	call	#_module_add_border
0bb20     46 75 02 F6 | 	mov	arg01, local01
0bb24     03 76 06 F6 | 	mov	arg02, #3
0bb28     E0 DA BF FD | 	call	#_module_fit_space_even
0bb2c     46 75 02 F6 | 	mov	arg01, local01
0bb30     03 76 06 F6 | 	mov	arg02, #3
0bb34     1C DB BF FD | 	call	#_module_fit_space_even_verticle
0bb38     46 75 02 F6 | 	mov	arg01, local01
0bb3c     02 76 06 F6 | 	mov	arg02, #2
0bb40     03 78 06 F6 | 	mov	arg03, #3
0bb44     7C D9 BF FD | 	call	#_module_align_space_even
0bb48     C9 74 02 F6 | 	mov	arg01, objptr
0bb4c     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0bb50     94 97 B1 FD | 	call	#__system___make_methodptr
0bb54     46 75 02 F6 | 	mov	arg01, local01
0bb58     01 78 06 F6 | 	mov	arg03, #1
0bb5c     34 75 06 F1 | 	add	arg01, #308
0bb60     3A 35 62 FC | 	wrlong	result1, arg01
0bb64     10 74 86 F1 | 	sub	arg01, #16
0bb68     3A 03 68 FC | 	wrlong	#1, arg01
0bb6c     C9 74 02 F6 | 	mov	arg01, objptr
0bb70     11 77 02 F6 | 	mov	arg02, ptr__update_incremental_1915_
0bb74     70 97 B1 FD | 	call	#__system___make_methodptr
0bb78     46 75 02 F6 | 	mov	arg01, local01
0bb7c     38 75 06 F1 | 	add	arg01, #312
0bb80     3A 35 62 FC | 	wrlong	result1, arg01
0bb84     40 8D 06 F1 | 	add	local01, #320
0bb88     46 75 02 F6 | 	mov	arg01, local01
0bb8c     49 77 02 F6 | 	mov	arg02, local04
0bb90     44 CE BF FD | 	call	#_module_init
0bb94     46 75 02 F6 | 	mov	arg01, local01
0bb98     47 77 02 F6 | 	mov	arg02, local02
0bb9c     DC D2 BF FD | 	call	#_module_copy
0bba0     56 01 00 FF 
0bba4     90 D6 05 F1 | 	add	ptr__dat__, ##175248
0bba8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bbac     56 01 00 FF 
0bbb0     90 D6 85 F1 | 	sub	ptr__dat__, ##175248
0bbb4     46 75 02 F6 | 	mov	arg01, local01
0bbb8     B8 D3 BF FD | 	call	#_module_set_text
0bbbc     46 75 02 F6 | 	mov	arg01, local01
0bbc0     CC 74 06 F1 | 	add	arg01, #204
0bbc4     3A 91 02 FB | 	rdlong	local03, arg01
0bbc8     CC 74 86 F1 | 	sub	arg01, #204
0bbcc     01 90 0E F2 | 	cmp	local03, #1 wz
0bbd0                 | '         return;
0bbd0     DC 74 06 A1 |  if_e	add	arg01, #220
0bbd4     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bbd8     46 75 02 F6 | 	mov	arg01, local01
0bbdc     CC 74 06 F1 | 	add	arg01, #204
0bbe0     3A 91 02 FB | 	rdlong	local03, arg01
0bbe4     CC 74 86 F1 | 	sub	arg01, #204
0bbe8     01 90 0E F2 | 	cmp	local03, #1 wz
0bbec                 | '         return;
0bbec     E0 74 06 A1 |  if_e	add	arg01, #224
0bbf0     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bbf4     46 75 02 F6 | 	mov	arg01, local01
0bbf8     00 76 06 F6 | 	mov	arg02, #0
0bbfc     03 78 06 F6 | 	mov	arg03, #3
0bc00     E0 D6 BF FD | 	call	#_module_add_border
0bc04     46 75 02 F6 | 	mov	arg01, local01
0bc08     03 76 06 F6 | 	mov	arg02, #3
0bc0c     FC D9 BF FD | 	call	#_module_fit_space_even
0bc10     46 75 02 F6 | 	mov	arg01, local01
0bc14     03 76 06 F6 | 	mov	arg02, #3
0bc18     38 DA BF FD | 	call	#_module_fit_space_even_verticle
0bc1c     46 75 02 F6 | 	mov	arg01, local01
0bc20     03 76 06 F6 | 	mov	arg02, #3
0bc24     03 78 06 F6 | 	mov	arg03, #3
0bc28     98 D8 BF FD | 	call	#_module_align_space_even
0bc2c     C9 74 02 F6 | 	mov	arg01, objptr
0bc30     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0bc34     B0 96 B1 FD | 	call	#__system___make_methodptr
0bc38     46 75 02 F6 | 	mov	arg01, local01
0bc3c     02 78 06 F6 | 	mov	arg03, #2
0bc40     34 75 06 F1 | 	add	arg01, #308
0bc44     3A 35 62 FC | 	wrlong	result1, arg01
0bc48     10 74 86 F1 | 	sub	arg01, #16
0bc4c     3A 05 68 FC | 	wrlong	#2, arg01
0bc50     C9 74 02 F6 | 	mov	arg01, objptr
0bc54     0D 77 02 F6 | 	mov	arg02, ptr__update_continuous_1920_
0bc58     8C 96 B1 FD | 	call	#__system___make_methodptr
0bc5c     46 75 02 F6 | 	mov	arg01, local01
0bc60     38 75 06 F1 | 	add	arg01, #312
0bc64     3A 35 62 FC | 	wrlong	result1, arg01
0bc68     40 8D 06 F1 | 	add	local01, #320
0bc6c     46 95 02 F6 | 	mov	local05, local01
0bc70     4A 75 02 F6 | 	mov	arg01, local05
0bc74     49 77 02 F6 | 	mov	arg02, local04
0bc78     5C CD BF FD | 	call	#_module_init
0bc7c     4A 75 02 F6 | 	mov	arg01, local05
0bc80     47 77 02 F6 | 	mov	arg02, local02
0bc84     F4 D1 BF FD | 	call	#_module_copy
0bc88     56 01 00 FF 
0bc8c     95 D6 05 F1 | 	add	ptr__dat__, ##175253
0bc90     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bc94     56 01 00 FF 
0bc98     95 D6 85 F1 | 	sub	ptr__dat__, ##175253
0bc9c     4A 75 02 F6 | 	mov	arg01, local05
0bca0     D0 D2 BF FD | 	call	#_module_set_text
0bca4     4A 75 02 F6 | 	mov	arg01, local05
0bca8     CC 74 06 F1 | 	add	arg01, #204
0bcac     3A 91 02 FB | 	rdlong	local03, arg01
0bcb0     CC 74 86 F1 | 	sub	arg01, #204
0bcb4     01 90 0E F2 | 	cmp	local03, #1 wz
0bcb8                 | '         return;
0bcb8     DC 74 06 A1 |  if_e	add	arg01, #220
0bcbc     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bcc0     4A 75 02 F6 | 	mov	arg01, local05
0bcc4     CC 74 06 F1 | 	add	arg01, #204
0bcc8     3A 91 02 FB | 	rdlong	local03, arg01
0bccc     CC 74 86 F1 | 	sub	arg01, #204
0bcd0     01 90 0E F2 | 	cmp	local03, #1 wz
0bcd4                 | '         return;
0bcd4     E0 74 06 A1 |  if_e	add	arg01, #224
0bcd8     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bcdc     4A 75 02 F6 | 	mov	arg01, local05
0bce0     00 76 06 F6 | 	mov	arg02, #0
0bce4     03 78 06 F6 | 	mov	arg03, #3
0bce8     F8 D5 BF FD | 	call	#_module_add_border
0bcec     4A 75 02 F6 | 	mov	arg01, local05
0bcf0     03 76 06 F6 | 	mov	arg02, #3
0bcf4     14 D9 BF FD | 	call	#_module_fit_space_even
0bcf8     4A 75 02 F6 | 	mov	arg01, local05
0bcfc     03 76 06 F6 | 	mov	arg02, #3
0bd00     50 D9 BF FD | 	call	#_module_fit_space_even_verticle
0bd04     4A 75 02 F6 | 	mov	arg01, local05
0bd08     01 76 06 F6 | 	mov	arg02, #1
0bd0c     03 78 06 F6 | 	mov	arg03, #3
0bd10     B0 D7 BF FD | 	call	#_module_align_space_even
0bd14     4A 75 02 F6 | 	mov	arg01, local05
0bd18     47 77 02 F6 | 	mov	arg02, local02
0bd1c     5C D8 BF FD | 	call	#_module_align_below
0bd20     C9 74 02 F6 | 	mov	arg01, objptr
0bd24     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0bd28     BC 95 B1 FD | 	call	#__system___make_methodptr
0bd2c     4A 75 02 F6 | 	mov	arg01, local05
0bd30     03 78 06 F6 | 	mov	arg03, #3
0bd34     34 75 06 F1 | 	add	arg01, #308
0bd38     3A 35 62 FC | 	wrlong	result1, arg01
0bd3c     10 74 86 F1 | 	sub	arg01, #16
0bd40     3A 07 68 FC | 	wrlong	#3, arg01
0bd44     C9 74 02 F6 | 	mov	arg01, objptr
0bd48     15 77 02 F6 | 	mov	arg02, ptr__update_positional_1925_
0bd4c     98 95 B1 FD | 	call	#__system___make_methodptr
0bd50     4A 75 02 F6 | 	mov	arg01, local05
0bd54     38 75 06 F1 | 	add	arg01, #312
0bd58     3A 35 62 FC | 	wrlong	result1, arg01
0bd5c     40 8D 06 F1 | 	add	local01, #320
0bd60     46 91 02 F6 | 	mov	local03, local01
0bd64     48 75 02 F6 | 	mov	arg01, local03
0bd68     49 77 02 F6 | 	mov	arg02, local04
0bd6c     68 CC BF FD | 	call	#_module_init
0bd70     48 75 02 F6 | 	mov	arg01, local03
0bd74     4A 77 02 F6 | 	mov	arg02, local05
0bd78     00 D1 BF FD | 	call	#_module_copy
0bd7c     56 01 00 FF 
0bd80     9A D6 05 F1 | 	add	ptr__dat__, ##175258
0bd84     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bd88     56 01 00 FF 
0bd8c     9A D6 85 F1 | 	sub	ptr__dat__, ##175258
0bd90     48 75 02 F6 | 	mov	arg01, local03
0bd94     DC D1 BF FD | 	call	#_module_set_text
0bd98     48 75 02 F6 | 	mov	arg01, local03
0bd9c     CC 74 06 F1 | 	add	arg01, #204
0bda0     3A 35 02 FB | 	rdlong	result1, arg01
0bda4     CC 74 86 F1 | 	sub	arg01, #204
0bda8     01 34 0E F2 | 	cmp	result1, #1 wz
0bdac                 | '         return;
0bdac     DC 74 06 A1 |  if_e	add	arg01, #220
0bdb0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bdb4     48 75 02 F6 | 	mov	arg01, local03
0bdb8     CC 74 06 F1 | 	add	arg01, #204
0bdbc     3A 77 02 FB | 	rdlong	arg02, arg01
0bdc0     CC 74 86 F1 | 	sub	arg01, #204
0bdc4     01 76 0E F2 | 	cmp	arg02, #1 wz
0bdc8                 | '         return;
0bdc8     E0 74 06 A1 |  if_e	add	arg01, #224
0bdcc     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bdd0     48 75 02 F6 | 	mov	arg01, local03
0bdd4     00 76 06 F6 | 	mov	arg02, #0
0bdd8     03 78 06 F6 | 	mov	arg03, #3
0bddc     04 D5 BF FD | 	call	#_module_add_border
0bde0     48 75 02 F6 | 	mov	arg01, local03
0bde4     03 76 06 F6 | 	mov	arg02, #3
0bde8     20 D8 BF FD | 	call	#_module_fit_space_even
0bdec     48 75 02 F6 | 	mov	arg01, local03
0bdf0     03 76 06 F6 | 	mov	arg02, #3
0bdf4     5C D8 BF FD | 	call	#_module_fit_space_even_verticle
0bdf8     48 75 02 F6 | 	mov	arg01, local03
0bdfc     02 76 06 F6 | 	mov	arg02, #2
0be00     03 78 06 F6 | 	mov	arg03, #3
0be04     BC D6 BF FD | 	call	#_module_align_space_even
0be08     C9 74 02 F6 | 	mov	arg01, objptr
0be0c     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0be10     D4 94 B1 FD | 	call	#__system___make_methodptr
0be14     48 75 02 F6 | 	mov	arg01, local03
0be18     04 78 06 F6 | 	mov	arg03, #4
0be1c     34 75 06 F1 | 	add	arg01, #308
0be20     3A 35 62 FC | 	wrlong	result1, arg01
0be24     10 74 86 F1 | 	sub	arg01, #16
0be28     3A 09 68 FC | 	wrlong	#4, arg01
0be2c     C9 74 02 F6 | 	mov	arg01, objptr
0be30     10 77 02 F6 | 	mov	arg02, ptr__update_home_1930_
0be34     B0 94 B1 FD | 	call	#__system___make_methodptr
0be38     48 75 02 F6 | 	mov	arg01, local03
0be3c     38 75 06 F1 | 	add	arg01, #312
0be40     3A 35 62 FC | 	wrlong	result1, arg01
0be44     40 8D 06 F1 | 	add	local01, #320
0be48     46 75 02 F6 | 	mov	arg01, local01
0be4c     49 77 02 F6 | 	mov	arg02, local04
0be50     84 CB BF FD | 	call	#_module_init
0be54     46 75 02 F6 | 	mov	arg01, local01
0be58     48 77 02 F6 | 	mov	arg02, local03
0be5c     1C D0 BF FD | 	call	#_module_copy
0be60     56 01 00 FF 
0be64     9F D6 05 F1 | 	add	ptr__dat__, ##175263
0be68     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0be6c     56 01 00 FF 
0be70     9F D6 85 F1 | 	sub	ptr__dat__, ##175263
0be74     46 75 02 F6 | 	mov	arg01, local01
0be78     F8 D0 BF FD | 	call	#_module_set_text
0be7c     46 75 02 F6 | 	mov	arg01, local01
0be80     CC 74 06 F1 | 	add	arg01, #204
0be84     3A 91 02 FB | 	rdlong	local03, arg01
0be88     CC 74 86 F1 | 	sub	arg01, #204
0be8c     01 90 0E F2 | 	cmp	local03, #1 wz
0be90                 | '         return;
0be90     DC 74 06 A1 |  if_e	add	arg01, #220
0be94     3A 05 68 AC |  if_e	wrlong	#2, arg01
0be98     46 75 02 F6 | 	mov	arg01, local01
0be9c     CC 74 06 F1 | 	add	arg01, #204
0bea0     3A 91 02 FB | 	rdlong	local03, arg01
0bea4     CC 74 86 F1 | 	sub	arg01, #204
0bea8     01 90 0E F2 | 	cmp	local03, #1 wz
0beac                 | '         return;
0beac     E0 74 06 A1 |  if_e	add	arg01, #224
0beb0     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0beb4     46 75 02 F6 | 	mov	arg01, local01
0beb8     00 76 06 F6 | 	mov	arg02, #0
0bebc     03 78 06 F6 | 	mov	arg03, #3
0bec0     20 D4 BF FD | 	call	#_module_add_border
0bec4     46 75 02 F6 | 	mov	arg01, local01
0bec8     03 76 06 F6 | 	mov	arg02, #3
0becc     3C D7 BF FD | 	call	#_module_fit_space_even
0bed0     46 75 02 F6 | 	mov	arg01, local01
0bed4     03 76 06 F6 | 	mov	arg02, #3
0bed8     78 D7 BF FD | 	call	#_module_fit_space_even_verticle
0bedc     46 75 02 F6 | 	mov	arg01, local01
0bee0     03 76 06 F6 | 	mov	arg02, #3
0bee4     03 78 06 F6 | 	mov	arg03, #3
0bee8     D8 D5 BF FD | 	call	#_module_align_space_even
0beec     C9 74 02 F6 | 	mov	arg01, objptr
0bef0     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0bef4     F0 93 B1 FD | 	call	#__system___make_methodptr
0bef8     46 75 02 F6 | 	mov	arg01, local01
0befc     06 78 06 F6 | 	mov	arg03, #6
0bf00     34 75 06 F1 | 	add	arg01, #308
0bf04     3A 35 62 FC | 	wrlong	result1, arg01
0bf08     10 74 86 F1 | 	sub	arg01, #16
0bf0c     3A 0D 68 FC | 	wrlong	#6, arg01
0bf10     C9 74 02 F6 | 	mov	arg01, objptr
0bf14     0E 77 02 F6 | 	mov	arg02, ptr__update_force_1940_
0bf18     CC 93 B1 FD | 	call	#__system___make_methodptr
0bf1c     46 75 02 F6 | 	mov	arg01, local01
0bf20     38 75 06 F1 | 	add	arg01, #312
0bf24     3A 35 62 FC | 	wrlong	result1, arg01
0bf28     40 8D 06 F1 | 	add	local01, #320
0bf2c     46 75 02 F6 | 	mov	arg01, local01
0bf30     49 77 02 F6 | 	mov	arg02, local04
0bf34     A0 CA BF FD | 	call	#_module_init
0bf38     46 75 02 F6 | 	mov	arg01, local01
0bf3c     47 77 02 F6 | 	mov	arg02, local02
0bf40     38 CF BF FD | 	call	#_module_copy
0bf44     56 01 00 FF 
0bf48     A4 D6 05 F1 | 	add	ptr__dat__, ##175268
0bf4c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0bf50     56 01 00 FF 
0bf54     A4 D6 85 F1 | 	sub	ptr__dat__, ##175268
0bf58     46 75 02 F6 | 	mov	arg01, local01
0bf5c     14 D0 BF FD | 	call	#_module_set_text
0bf60     46 75 02 F6 | 	mov	arg01, local01
0bf64     CC 74 06 F1 | 	add	arg01, #204
0bf68     3A 93 02 FB | 	rdlong	local04, arg01
0bf6c     CC 74 86 F1 | 	sub	arg01, #204
0bf70     01 92 0E F2 | 	cmp	local04, #1 wz
0bf74                 | '         return;
0bf74     DC 74 06 A1 |  if_e	add	arg01, #220
0bf78     3A 05 68 AC |  if_e	wrlong	#2, arg01
0bf7c     46 75 02 F6 | 	mov	arg01, local01
0bf80     CC 74 06 F1 | 	add	arg01, #204
0bf84     3A 93 02 FB | 	rdlong	local04, arg01
0bf88     CC 74 86 F1 | 	sub	arg01, #204
0bf8c     01 92 0E F2 | 	cmp	local04, #1 wz
0bf90                 | '         return;
0bf90     E0 74 06 A1 |  if_e	add	arg01, #224
0bf94     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0bf98     46 75 02 F6 | 	mov	arg01, local01
0bf9c     00 76 06 F6 | 	mov	arg02, #0
0bfa0     03 78 06 F6 | 	mov	arg03, #3
0bfa4     3C D3 BF FD | 	call	#_module_add_border
0bfa8     46 75 02 F6 | 	mov	arg01, local01
0bfac     03 76 06 F6 | 	mov	arg02, #3
0bfb0     58 D6 BF FD | 	call	#_module_fit_space_even
0bfb4     46 75 02 F6 | 	mov	arg01, local01
0bfb8     03 76 06 F6 | 	mov	arg02, #3
0bfbc     94 D6 BF FD | 	call	#_module_fit_space_even_verticle
0bfc0     46 75 02 F6 | 	mov	arg01, local01
0bfc4     02 76 06 F6 | 	mov	arg02, #2
0bfc8     03 78 06 F6 | 	mov	arg03, #3
0bfcc     F4 D4 BF FD | 	call	#_module_align_space_even
0bfd0     46 75 02 F6 | 	mov	arg01, local01
0bfd4     4A 77 02 F6 | 	mov	arg02, local05
0bfd8     A0 D5 BF FD | 	call	#_module_align_below
0bfdc     C9 74 02 F6 | 	mov	arg01, objptr
0bfe0     E6 76 02 F6 | 	mov	arg02, ptr__button_set_function_1901_
0bfe4     00 93 B1 FD | 	call	#__system___make_methodptr
0bfe8     46 75 02 F6 | 	mov	arg01, local01
0bfec     05 78 06 F6 | 	mov	arg03, #5
0bff0     34 75 06 F1 | 	add	arg01, #308
0bff4     3A 35 62 FC | 	wrlong	result1, arg01
0bff8     10 74 86 F1 | 	sub	arg01, #16
0bffc     3A 0B 68 FC | 	wrlong	#5, arg01
0c000     C9 74 02 F6 | 	mov	arg01, objptr
0c004     12 77 02 F6 | 	mov	arg02, ptr__update_length_1935_
0c008     DC 92 B1 FD | 	call	#__system___make_methodptr
0c00c     38 8D 06 F1 | 	add	local01, #312
0c010     46 35 62 FC | 	wrlong	result1, local01
0c014     A8 F0 03 F6 | 	mov	ptra, fp
0c018     B3 00 A0 FD | 	call	#popregs_
0c01c                 | _function_window_init_ret
0c01c     2D 00 64 FD | 	ret
0c020                 | 
0c020                 | _module_set_graph
0c020     04 4C 05 F6 | 	mov	COUNT_, #4
0c024     A9 00 A0 FD | 	call	#pushregs_
0c028     3A 8D 02 F6 | 	mov	local01, arg01
0c02c     3B 8F 02 F6 | 	mov	local02, arg02
0c030     3C 91 02 F6 | 	mov	local03, arg03
0c034     3D 93 02 F6 | 	mov	local04, arg04
0c038     CC 8C 06 F1 | 	add	local01, #204
0c03c     46 0D 68 FC | 	wrlong	#6, local01
0c040     C9 74 02 F6 | 	mov	arg01, objptr
0c044     07 77 02 F6 | 	mov	arg02, ptr__module_graph_draw_1966_
0c048     9C 92 B1 FD | 	call	#__system___make_methodptr
0c04c     70 8C 06 F1 | 	add	local01, #112
0c050     46 35 62 FC | 	wrlong	result1, local01
0c054     6C 8C 86 F1 | 	sub	local01, #108
0c058     46 8F 62 FC | 	wrlong	local02, local01
0c05c     D0 8C 86 F1 | 	sub	local01, #208
0c060     6A 8E 06 F1 | 	add	local02, #106
0c064     47 03 48 FC | 	wrbyte	#1, local02
0c068     1E 8E 86 F1 | 	sub	local02, #30
0c06c     47 75 02 F6 | 	mov	arg01, local02
0c070     48 77 02 F6 | 	mov	arg02, local03
0c074     14 78 06 F6 | 	mov	arg03, #20
0c078     00 9E BF FD | 	call	#_strncpy
0c07c     14 8E 06 F1 | 	add	local02, #20
0c080     47 75 02 F6 | 	mov	arg01, local02
0c084     49 77 02 F6 | 	mov	arg02, local04
0c088     0A 78 06 F6 | 	mov	arg03, #10
0c08c     EC 9D BF FD | 	call	#_strncpy
0c090     0C 8E 06 F1 | 	add	local02, #12
0c094     47 75 02 F6 | 	mov	arg01, local02
0c098     46 77 02 F6 | 	mov	arg02, local01
0c09c     38 C9 BF FD | 	call	#_module_init
0c0a0     47 75 02 F6 | 	mov	arg01, local02
0c0a4     0A 78 06 F6 | 	mov	arg03, #10
0c0a8     00 75 06 F1 | 	add	arg01, #256
0c0ac     3A 15 68 FC | 	wrlong	#10, arg01
0c0b0     04 74 06 F1 | 	add	arg01, #4
0c0b4     3A 15 68 FC | 	wrlong	#10, arg01
0c0b8     47 75 02 F6 | 	mov	arg01, local02
0c0bc     20 8E 86 F1 | 	sub	local02, #32
0c0c0     47 77 02 F6 | 	mov	arg02, local02
0c0c4     AC CE BF FD | 	call	#_module_set_text
0c0c8     20 8E 06 F1 | 	add	local02, #32
0c0cc     47 75 02 F6 | 	mov	arg01, local02
0c0d0     02 76 06 F6 | 	mov	arg02, #2
0c0d4     DC CF BF FD | 	call	#_module_text_font
0c0d8     40 8F 06 F1 | 	add	local02, #320
0c0dc     47 75 02 F6 | 	mov	arg01, local02
0c0e0     EC CE BF FD | 	call	#_module_text_fit
0c0e4     40 8F 86 F1 | 	sub	local02, #320
0c0e8     47 75 02 F6 | 	mov	arg01, local02
0c0ec     47 93 02 FB | 	rdlong	local04, local02
0c0f0     10 93 06 F1 | 	add	local04, #272
0c0f4     49 79 02 FB | 	rdlong	arg03, local04
0c0f8     10 75 06 F1 | 	add	arg01, #272
0c0fc     7F 00 80 FF 
0c100     3A FF 6B FC | 	wrlong	##65535, arg01
0c104     04 74 86 F1 | 	sub	arg01, #4
0c108     3A 79 62 FC | 	wrlong	arg03, arg01
0c10c     47 75 02 F6 | 	mov	arg01, local02
0c110     10 D2 BF FD | 	call	#_module_align_inner_top
0c114     47 75 02 F6 | 	mov	arg01, local02
0c118     01 76 06 F6 | 	mov	arg02, #1
0c11c     02 78 06 F6 | 	mov	arg03, #2
0c120     2C D3 BF FD | 	call	#_module_align_center_sector
0c124     47 75 02 F6 | 	mov	arg01, local02
0c128     CC 74 06 F1 | 	add	arg01, #204
0c12c     3A 93 02 FB | 	rdlong	local04, arg01
0c130     CC 74 86 F1 | 	sub	arg01, #204
0c134     01 92 0E F2 | 	cmp	local04, #1 wz
0c138                 | '         return;
0c138     D8 74 06 A1 |  if_e	add	arg01, #216
0c13c     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0c140     40 8F 06 F1 | 	add	local02, #320
0c144     47 75 02 F6 | 	mov	arg01, local02
0c148     46 77 02 F6 | 	mov	arg02, local01
0c14c     88 C8 BF FD | 	call	#_module_init
0c150     03 00 00 FF 
0c154     80 8F 06 F1 | 	add	local02, ##1920
0c158     47 75 02 F6 | 	mov	arg01, local02
0c15c     4A 01 00 FF 
0c160     E0 77 06 F6 | 	mov	arg02, ##@LR__1972
0c164     04 00 00 FF 
0c168     20 8F 86 F1 | 	sub	local02, ##2336
0c16c     47 93 02 FB | 	rdlong	local04, local02
0c170     F8 79 02 F6 | 	mov	arg03, ptra
0c174     61 93 66 FC | 	wrlong	local04, ptra++
0c178     A8 5A BF FD | 	call	#_sprintf
0c17c     04 F0 87 F1 | 	sub	ptra, #4
0c180     A0 8F 06 F1 | 	add	local02, #416
0c184     47 75 02 F6 | 	mov	arg01, local02
0c188     03 78 06 F6 | 	mov	arg03, #3
0c18c     00 75 06 F1 | 	add	arg01, #256
0c190     3A 07 68 FC | 	wrlong	#3, arg01
0c194     04 74 06 F1 | 	add	arg01, #4
0c198     3A 07 68 FC | 	wrlong	#3, arg01
0c19c     47 75 02 F6 | 	mov	arg01, local02
0c1a0     03 00 00 FF 
0c1a4     80 8F 06 F1 | 	add	local02, ##1920
0c1a8     47 77 02 F6 | 	mov	arg02, local02
0c1ac     C4 CD BF FD | 	call	#_module_set_text
0c1b0     03 00 00 FF 
0c1b4     80 8F 86 F1 | 	sub	local02, ##1920
0c1b8     47 75 02 F6 | 	mov	arg01, local02
0c1bc     00 76 06 F6 | 	mov	arg02, #0
0c1c0     F0 CE BF FD | 	call	#_module_text_font
0c1c4     47 75 02 F6 | 	mov	arg01, local02
0c1c8     04 CE BF FD | 	call	#_module_text_fit
0c1cc     47 75 02 F6 | 	mov	arg01, local02
0c1d0     47 93 02 FB | 	rdlong	local04, local02
0c1d4     10 93 06 F1 | 	add	local04, #272
0c1d8     49 79 02 FB | 	rdlong	arg03, local04
0c1dc     10 75 06 F1 | 	add	arg01, #272
0c1e0     7F 00 80 FF 
0c1e4     3A FF 6B FC | 	wrlong	##65535, arg01
0c1e8     04 74 86 F1 | 	sub	arg01, #4
0c1ec     3A 79 62 FC | 	wrlong	arg03, arg01
0c1f0     47 75 02 F6 | 	mov	arg01, local02
0c1f4     C4 D1 BF FD | 	call	#_module_align_inner_bottom
0c1f8     47 75 02 F6 | 	mov	arg01, local02
0c1fc     4C D1 BF FD | 	call	#_module_align_inner_left
0c200     47 75 02 F6 | 	mov	arg01, local02
0c204     CC 74 06 F1 | 	add	arg01, #204
0c208     3A 93 02 FB | 	rdlong	local04, arg01
0c20c     CC 74 86 F1 | 	sub	arg01, #204
0c210     01 92 0E F2 | 	cmp	local04, #1 wz
0c214                 | '         return;
0c214     DC 74 06 A1 |  if_e	add	arg01, #220
0c218     3A 03 68 AC |  if_e	wrlong	#1, arg01
0c21c     03 00 00 FF 
0c220     8C 8F 06 F1 | 	add	local02, ##1932
0c224     47 75 02 F6 | 	mov	arg01, local02
0c228     4A 01 00 FF 
0c22c     E5 77 06 F6 | 	mov	arg02, ##@LR__1973
0c230     04 00 00 FF 
0c234     30 8F 86 F1 | 	sub	local02, ##2352
0c238     47 93 02 FB | 	rdlong	local04, local02
0c23c     F8 79 02 F6 | 	mov	arg03, ptra
0c240     61 93 66 FC | 	wrlong	local04, ptra++
0c244     DC 59 BF FD | 	call	#_sprintf
0c248     04 F0 87 F1 | 	sub	ptra, #4
0c24c     01 00 00 FF 
0c250     E4 8E 06 F1 | 	add	local02, ##740
0c254     47 75 02 F6 | 	mov	arg01, local02
0c258     46 77 02 F6 | 	mov	arg02, local01
0c25c     78 C7 BF FD | 	call	#_module_init
0c260     47 75 02 F6 | 	mov	arg01, local02
0c264     03 78 06 F6 | 	mov	arg03, #3
0c268     00 75 06 F1 | 	add	arg01, #256
0c26c     3A 07 68 FC | 	wrlong	#3, arg01
0c270     04 74 06 F1 | 	add	arg01, #4
0c274     3A 07 68 FC | 	wrlong	#3, arg01
0c278     47 75 02 F6 | 	mov	arg01, local02
0c27c     03 00 00 FF 
0c280     4C 8E 06 F1 | 	add	local02, ##1612
0c284     47 77 02 F6 | 	mov	arg02, local02
0c288     E8 CC BF FD | 	call	#_module_set_text
0c28c     03 00 00 FF 
0c290     4C 8E 86 F1 | 	sub	local02, ##1612
0c294     47 75 02 F6 | 	mov	arg01, local02
0c298     00 76 06 F6 | 	mov	arg02, #0
0c29c     14 CE BF FD | 	call	#_module_text_font
0c2a0     47 75 02 F6 | 	mov	arg01, local02
0c2a4     28 CD BF FD | 	call	#_module_text_fit
0c2a8     47 75 02 F6 | 	mov	arg01, local02
0c2ac     9C D0 BF FD | 	call	#_module_align_inner_left
0c2b0     47 75 02 F6 | 	mov	arg01, local02
0c2b4     CC 74 06 F1 | 	add	arg01, #204
0c2b8     3A 93 02 FB | 	rdlong	local04, arg01
0c2bc     CC 74 86 F1 | 	sub	arg01, #204
0c2c0     01 92 0E F2 | 	cmp	local04, #1 wz
0c2c4                 | '         return;
0c2c4     DC 74 06 A1 |  if_e	add	arg01, #220
0c2c8     3A 03 68 AC |  if_e	wrlong	#1, arg01
0c2cc     47 75 02 F6 | 	mov	arg01, local02
0c2d0     47 93 02 FB | 	rdlong	local04, local02
0c2d4     10 93 06 F1 | 	add	local04, #272
0c2d8     49 79 02 FB | 	rdlong	arg03, local04
0c2dc     10 75 06 F1 | 	add	arg01, #272
0c2e0     7F 00 80 FF 
0c2e4     3A FF 6B FC | 	wrlong	##65535, arg01
0c2e8     04 74 86 F1 | 	sub	arg01, #4
0c2ec     3A 79 62 FC | 	wrlong	arg03, arg01
0c2f0     47 75 02 F6 | 	mov	arg01, local02
0c2f4     01 00 00 FF 
0c2f8     80 8E 86 F1 | 	sub	local02, ##640
0c2fc     47 77 02 F6 | 	mov	arg02, local02
0c300     78 D2 BF FD | 	call	#_module_align_below
0c304     01 00 00 FF 
0c308     C0 8F 06 F1 | 	add	local02, ##960
0c30c     47 75 02 F6 | 	mov	arg01, local02
0c310     46 77 02 F6 | 	mov	arg02, local01
0c314     C0 C6 BF FD | 	call	#_module_init
0c318     47 75 02 F6 | 	mov	arg01, local02
0c31c     01 00 00 FF 
0c320     C0 8F 86 F1 | 	sub	local02, ##960
0c324     47 77 02 F6 | 	mov	arg02, local02
0c328     50 D2 BF FD | 	call	#_module_align_below
0c32c     01 00 00 FF 
0c330     C0 8F 06 F1 | 	add	local02, ##960
0c334     47 75 02 F6 | 	mov	arg01, local02
0c338     01 00 00 FF 
0c33c     C0 8F 86 F1 | 	sub	local02, ##960
0c340     47 77 02 F6 | 	mov	arg02, local02
0c344     8C D3 BF FD | 	call	#_module_fit_below
0c348     01 00 00 FF 
0c34c     C0 8F 06 F1 | 	add	local02, ##960
0c350     47 75 02 F6 | 	mov	arg01, local02
0c354     01 00 00 FF 
0c358     80 8E 86 F1 | 	sub	local02, ##640
0c35c     47 77 02 F6 | 	mov	arg02, local02
0c360     F0 D3 BF FD | 	call	#_module_fit_right
0c364     01 00 00 FF 
0c368     80 8E 06 F1 | 	add	local02, ##640
0c36c     47 75 02 F6 | 	mov	arg01, local02
0c370     01 00 00 FF 
0c374     80 8E 86 F1 | 	sub	local02, ##640
0c378     47 77 02 F6 | 	mov	arg02, local02
0c37c     28 D2 BF FD | 	call	#_module_align_right
0c380     01 00 00 FF 
0c384     80 8E 06 F1 | 	add	local02, ##640
0c388     47 75 02 F6 | 	mov	arg01, local02
0c38c     47 93 02 FB | 	rdlong	local04, local02
0c390     49 91 02 F6 | 	mov	local03, local04
0c394     10 91 06 F1 | 	add	local03, #272
0c398     48 77 02 FB | 	rdlong	arg02, local03
0c39c     0C 93 06 F1 | 	add	local04, #268
0c3a0     49 79 02 FB | 	rdlong	arg03, local04
0c3a4     10 75 06 F1 | 	add	arg01, #272
0c3a8     3A 77 62 FC | 	wrlong	arg02, arg01
0c3ac     04 74 86 F1 | 	sub	arg01, #4
0c3b0     3A 79 62 FC | 	wrlong	arg03, arg01
0c3b4     40 8F 06 F1 | 	add	local02, #320
0c3b8     47 75 02 F6 | 	mov	arg01, local02
0c3bc     46 77 02 F6 | 	mov	arg02, local01
0c3c0     14 C6 BF FD | 	call	#_module_init
0c3c4     47 75 02 F6 | 	mov	arg01, local02
0c3c8     0A 78 06 F6 | 	mov	arg03, #10
0c3cc     00 75 06 F1 | 	add	arg01, #256
0c3d0     3A 15 68 FC | 	wrlong	#10, arg01
0c3d4     04 74 06 F1 | 	add	arg01, #4
0c3d8     3A 15 68 FC | 	wrlong	#10, arg01
0c3dc     47 75 02 F6 | 	mov	arg01, local02
0c3e0     02 00 00 FF 
0c3e4     0C 8F 86 F1 | 	sub	local02, ##1292
0c3e8     47 77 02 F6 | 	mov	arg02, local02
0c3ec     84 CB BF FD | 	call	#_module_set_text
0c3f0     02 00 00 FF 
0c3f4     0C 8F 06 F1 | 	add	local02, ##1292
0c3f8     47 75 02 F6 | 	mov	arg01, local02
0c3fc     02 76 06 F6 | 	mov	arg02, #2
0c400     B0 CC BF FD | 	call	#_module_text_font
0c404     47 75 02 F6 | 	mov	arg01, local02
0c408     47 93 02 FB | 	rdlong	local04, local02
0c40c     10 93 06 F1 | 	add	local04, #272
0c410     49 79 02 FB | 	rdlong	arg03, local04
0c414     10 75 06 F1 | 	add	arg01, #272
0c418     7F 00 80 FF 
0c41c     3A FF 6B FC | 	wrlong	##65535, arg01
0c420     04 74 86 F1 | 	sub	arg01, #4
0c424     3A 79 62 FC | 	wrlong	arg03, arg01
0c428     47 75 02 F6 | 	mov	arg01, local02
0c42c     F4 CE BF FD | 	call	#_module_align_inner_top
0c430     47 75 02 F6 | 	mov	arg01, local02
0c434     14 CF BF FD | 	call	#_module_align_inner_left
0c438     40 8F 06 F1 | 	add	local02, #320
0c43c     47 75 02 F6 | 	mov	arg01, local02
0c440     01 00 00 FF 
0c444     80 8E 86 F1 | 	sub	local02, ##640
0c448     47 77 02 F6 | 	mov	arg02, local02
0c44c     88 C5 BF FD | 	call	#_module_init
0c450     01 00 00 FF 
0c454     80 8E 06 F1 | 	add	local02, ##640
0c458     47 75 02 F6 | 	mov	arg01, local02
0c45c     CC 74 06 F1 | 	add	arg01, #204
0c460     3A 09 68 FC | 	wrlong	#4, arg01
0c464     24 74 06 F1 | 	add	arg01, #36
0c468     3A 01 68 FC | 	wrlong	#0, arg01
0c46c     04 74 06 F1 | 	add	arg01, #4
0c470     3A 01 68 FC | 	wrlong	#0, arg01
0c474     47 75 02 F6 | 	mov	arg01, local02
0c478     58 D1 BF FD | 	call	#_module_fit_width
0c47c     47 75 02 F6 | 	mov	arg01, local02
0c480     01 76 06 F6 | 	mov	arg02, #1
0c484     02 78 06 F6 | 	mov	arg03, #2
0c488     C4 CF BF FD | 	call	#_module_align_center_sector
0c48c     47 75 02 F6 | 	mov	arg01, local02
0c490     70 CF BF FD | 	call	#_module_align_middle
0c494     47 75 02 F6 | 	mov	arg01, local02
0c498     0F 78 CE F9 | 	bmask	arg03, #15
0c49c     10 75 06 F1 | 	add	arg01, #272
0c4a0     7F 00 80 FF 
0c4a4     3A FF 6B FC | 	wrlong	##65535, arg01
0c4a8     04 74 86 F1 | 	sub	arg01, #4
0c4ac     7F 00 80 FF 
0c4b0     3A FF 6B FC | 	wrlong	##65535, arg01
0c4b4     40 8F 06 F1 | 	add	local02, #320
0c4b8     47 75 02 F6 | 	mov	arg01, local02
0c4bc     01 00 00 FF 
0c4c0     C0 8F 86 F1 | 	sub	local02, ##960
0c4c4     47 77 02 F6 | 	mov	arg02, local02
0c4c8     0C C5 BF FD | 	call	#_module_init
0c4cc     01 00 00 FF 
0c4d0     C0 8F 06 F1 | 	add	local02, ##960
0c4d4     47 75 02 F6 | 	mov	arg01, local02
0c4d8     CC 74 06 F1 | 	add	arg01, #204
0c4dc     3A 09 68 FC | 	wrlong	#4, arg01
0c4e0     24 74 06 F1 | 	add	arg01, #36
0c4e4     3A 01 68 FC | 	wrlong	#0, arg01
0c4e8     04 74 06 F1 | 	add	arg01, #4
0c4ec     3A 01 68 FC | 	wrlong	#0, arg01
0c4f0     47 75 02 F6 | 	mov	arg01, local02
0c4f4     A4 D1 BF FD | 	call	#_module_fit_height
0c4f8     47 75 02 F6 | 	mov	arg01, local02
0c4fc     4C CE BF FD | 	call	#_module_align_inner_left
0c500     47 75 02 F6 | 	mov	arg01, local02
0c504     1C CE BF FD | 	call	#_module_align_inner_top
0c508     10 8F 06 F1 | 	add	local02, #272
0c50c     7F 00 80 FF 
0c510     47 FF 6B FC | 	wrlong	##65535, local02
0c514     04 8E 86 F1 | 	sub	local02, #4
0c518     7F 00 80 FF 
0c51c     47 FF 6B FC | 	wrlong	##65535, local02
0c520     A8 F0 03 F6 | 	mov	ptra, fp
0c524     B3 00 A0 FD | 	call	#popregs_
0c528                 | _module_set_graph_ret
0c528     2D 00 64 FD | 	ret
0c52c                 | 
0c52c                 | _module_graph_insert
0c52c     03 4C 05 F6 | 	mov	COUNT_, #3
0c530     A9 00 A0 FD | 	call	#pushregs_
0c534     3B 8D 02 F6 | 	mov	local01, arg02
0c538     D0 74 06 F1 | 	add	arg01, #208
0c53c     3A 8F 02 FB | 	rdlong	local02, arg01
0c540     08 8E 06 F1 | 	add	local02, #8
0c544     47 77 02 FB | 	rdlong	arg02, local02
0c548     08 8E 86 F1 | 	sub	local02, #8
0c54c     46 75 02 F6 | 	mov	arg01, local01
0c550     01 78 66 F6 | 	neg	arg03, #1
0c554     A0 AF B1 FD | 	call	#__system___float_cmp
0c558     01 34 56 F2 | 	cmps	result1, #1 wc
0c55c     30 00 90 3D |  if_ae	jmp	#LR__0352
0c560     0C 8E 06 F1 | 	add	local02, #12
0c564     47 77 02 FB | 	rdlong	arg02, local02
0c568     0C 8E 86 F1 | 	sub	local02, #12
0c56c     46 75 02 F6 | 	mov	arg01, local01
0c570     01 78 06 F6 | 	mov	arg03, #1
0c574     80 AF B1 FD | 	call	#__system___float_cmp
0c578     00 34 56 F2 | 	cmps	result1, #0 wc
0c57c                 | '     {
0c57c                 | '         return;
0c57c     47 91 02 3B |  if_ae	rdlong	local03, local02
0c580     04 8E 06 31 |  if_ae	add	local02, #4
0c584     47 91 62 3C |  if_ae	wrlong	local03, local02
0c588     04 8E 86 31 |  if_ae	sub	local02, #4
0c58c     47 8D 62 3C |  if_ae	wrlong	local01, local02
0c590                 | LR__0352
0c590     A8 F0 03 F6 | 	mov	ptra, fp
0c594     B3 00 A0 FD | 	call	#popregs_
0c598                 | _module_graph_insert_ret
0c598     2D 00 64 FD | 	ret
0c59c                 | 
0c59c                 | _status_page_init
0c59c     08 4C 05 F6 | 	mov	COUNT_, #8
0c5a0     A9 00 A0 FD | 	call	#pushregs_
0c5a4     3A 8D 02 F6 | 	mov	local01, arg01
0c5a8     04 8C 06 F1 | 	add	local01, #4
0c5ac     46 77 62 FC | 	wrlong	arg02, local01
0c5b0     04 8C 06 F1 | 	add	local01, #4
0c5b4     46 79 62 FC | 	wrlong	arg03, local01
0c5b8     04 8C 06 F1 | 	add	local01, #4
0c5bc     46 7B 62 FC | 	wrlong	arg04, local01
0c5c0     04 8C 06 F1 | 	add	local01, #4
0c5c4     46 7D 62 FC | 	wrlong	arg05, local01
0c5c8     04 8C 06 F1 | 	add	local01, #4
0c5cc     46 7F 62 FC | 	wrlong	arg06, local01
0c5d0     04 8C 06 F1 | 	add	local01, #4
0c5d4     46 8F 02 F6 | 	mov	local02, local01
0c5d8     47 75 02 F6 | 	mov	arg01, local02
0c5dc     00 76 06 F6 | 	mov	arg02, #0
0c5e0     F4 C3 BF FD | 	call	#_module_init
0c5e4     40 8D 06 F1 | 	add	local01, #320
0c5e8     46 91 02 F6 | 	mov	local03, local01
0c5ec     48 75 02 F6 | 	mov	arg01, local03
0c5f0     47 77 02 F6 | 	mov	arg02, local02
0c5f4     E0 C3 BF FD | 	call	#_module_init
0c5f8     48 75 02 F6 | 	mov	arg01, local03
0c5fc     CC 74 06 F1 | 	add	arg01, #204
0c600     3A 0B 68 FC | 	wrlong	#5, arg01
0c604     24 74 06 F1 | 	add	arg01, #36
0c608     02 00 80 FF 
0c60c     3A 01 68 FC | 	wrlong	##1024, arg01
0c610     04 74 06 F1 | 	add	arg01, #4
0c614     01 00 80 FF 
0c618     3A B1 68 FC | 	wrlong	##600, arg01
0c61c     48 75 02 F6 | 	mov	arg01, local03
0c620     E8 74 06 F1 | 	add	arg01, #232
0c624     3A 01 68 FC | 	wrlong	#0, arg01
0c628     04 74 06 F1 | 	add	arg01, #4
0c62c     3A 01 68 FC | 	wrlong	#0, arg01
0c630     48 75 02 F6 | 	mov	arg01, local03
0c634     F8 74 06 F1 | 	add	arg01, #248
0c638     3A 15 68 FC | 	wrlong	#10, arg01
0c63c     04 74 06 F1 | 	add	arg01, #4
0c640     3A 15 68 FC | 	wrlong	#10, arg01
0c644     48 75 02 F6 | 	mov	arg01, local03
0c648     01 00 00 FF 
0c64c     73 78 06 F6 | 	mov	arg03, ##627
0c650     10 75 06 F1 | 	add	arg01, #272
0c654     01 00 80 FF 
0c658     3A E7 68 FC | 	wrlong	##627, arg01
0c65c     04 74 86 F1 | 	sub	arg01, #4
0c660     01 00 80 FF 
0c664     3A E7 68 FC | 	wrlong	##627, arg01
0c668     C9 74 02 F6 | 	mov	arg01, objptr
0c66c     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
0c670     74 8C B1 FD | 	call	#__system___make_methodptr
0c674     48 75 02 F6 | 	mov	arg01, local03
0c678     30 75 06 F1 | 	add	arg01, #304
0c67c     3A 35 62 FC | 	wrlong	result1, arg01
0c680     40 8D 06 F1 | 	add	local01, #320
0c684     46 8F 02 F6 | 	mov	local02, local01
0c688     47 75 02 F6 | 	mov	arg01, local02
0c68c     48 77 02 F6 | 	mov	arg02, local03
0c690     44 C3 BF FD | 	call	#_module_init
0c694     01 00 00 FF 
0c698     84 8C 86 F1 | 	sub	local01, ##644
0c69c     46 77 02 FB | 	rdlong	arg02, local01
0c6a0     30 76 06 F1 | 	add	arg02, #48
0c6a4     47 75 02 F6 | 	mov	arg01, local02
0c6a8     94 C8 BF FD | 	call	#_module_set_image
0c6ac     47 75 02 F6 | 	mov	arg01, local02
0c6b0     70 CC BF FD | 	call	#_module_align_inner_top
0c6b4     47 75 02 F6 | 	mov	arg01, local02
0c6b8     B8 CC BF FD | 	call	#_module_align_inner_right
0c6bc     C9 74 02 F6 | 	mov	arg01, objptr
0c6c0     D9 76 02 F6 | 	mov	arg02, ptr__button_navigation_0764_
0c6c4     20 8C B1 FD | 	call	#__system___make_methodptr
0c6c8     00 78 06 F6 | 	mov	arg03, #0
0c6cc     34 8F 06 F1 | 	add	local02, #308
0c6d0     47 35 62 FC | 	wrlong	result1, local02
0c6d4     10 8E 86 F1 | 	sub	local02, #16
0c6d8     47 01 68 FC | 	wrlong	#0, local02
0c6dc     01 00 00 FF 
0c6e0     C4 8D 06 F1 | 	add	local01, ##964
0c6e4     46 93 02 F6 | 	mov	local04, local01
0c6e8     49 75 02 F6 | 	mov	arg01, local04
0c6ec     48 77 02 F6 | 	mov	arg02, local03
0c6f0     E4 C2 BF FD | 	call	#_module_init
0c6f4     49 75 02 F6 | 	mov	arg01, local04
0c6f8     F8 74 06 F1 | 	add	arg01, #248
0c6fc     3A 11 68 FC | 	wrlong	#8, arg01
0c700     04 74 06 F1 | 	add	arg01, #4
0c704     3A 11 68 FC | 	wrlong	#8, arg01
0c708     49 75 02 F6 | 	mov	arg01, local04
0c70c     0F 76 CE F9 | 	bmask	arg02, #15
0c710     01 78 06 F6 | 	mov	arg03, #1
0c714     CC CB BF FD | 	call	#_module_add_border
0c718     49 75 02 F6 | 	mov	arg01, local04
0c71c     00 75 06 F1 | 	add	arg01, #256
0c720     3A 15 68 FC | 	wrlong	#10, arg01
0c724     04 74 06 F1 | 	add	arg01, #4
0c728     3A 15 68 FC | 	wrlong	#10, arg01
0c72c     49 75 02 F6 | 	mov	arg01, local04
0c730     CC 74 06 F1 | 	add	arg01, #204
0c734     3A 0B 68 FC | 	wrlong	#5, arg01
0c738     24 74 06 F1 | 	add	arg01, #36
0c73c     3A 01 68 FC | 	wrlong	#0, arg01
0c740     04 74 06 F1 | 	add	arg01, #4
0c744     3A 01 68 FC | 	wrlong	#0, arg01
0c748     49 75 02 F6 | 	mov	arg01, local04
0c74c     03 76 06 F6 | 	mov	arg02, #3
0c750     B8 CE BF FD | 	call	#_module_fit_space_even
0c754     49 75 02 F6 | 	mov	arg01, local04
0c758     40 CF BF FD | 	call	#_module_fit_height
0c75c     49 75 02 F6 | 	mov	arg01, local04
0c760     F8 74 06 F1 | 	add	arg01, #248
0c764     3A 11 68 FC | 	wrlong	#8, arg01
0c768     04 74 06 F1 | 	add	arg01, #4
0c76c     3A 11 68 FC | 	wrlong	#8, arg01
0c770     49 75 02 F6 | 	mov	arg01, local04
0c774     01 00 00 FF 
0c778     73 78 06 F6 | 	mov	arg03, ##627
0c77c     10 75 06 F1 | 	add	arg01, #272
0c780     1D 00 80 FF 
0c784     3A E9 6A FC | 	wrlong	##15220, arg01
0c788     04 74 86 F1 | 	sub	arg01, #4
0c78c     01 00 80 FF 
0c790     3A E7 68 FC | 	wrlong	##627, arg01
0c794     49 75 02 F6 | 	mov	arg01, local04
0c798     B0 CB BF FD | 	call	#_module_align_inner_left
0c79c     49 75 02 F6 | 	mov	arg01, local04
0c7a0     80 CB BF FD | 	call	#_module_align_inner_top
0c7a4     40 8D 06 F1 | 	add	local01, #320
0c7a8     46 95 02 F6 | 	mov	local05, local01
0c7ac     4A 75 02 F6 | 	mov	arg01, local05
0c7b0     49 77 02 F6 | 	mov	arg02, local04
0c7b4     20 C2 BF FD | 	call	#_module_init
0c7b8     4A 75 02 F6 | 	mov	arg01, local05
0c7bc     00 78 06 F6 | 	mov	arg03, #0
0c7c0     F8 74 06 F1 | 	add	arg01, #248
0c7c4     3A 01 68 FC | 	wrlong	#0, arg01
0c7c8     04 74 06 F1 | 	add	arg01, #4
0c7cc     3A 01 68 FC | 	wrlong	#0, arg01
0c7d0     4A 75 02 F6 | 	mov	arg01, local05
0c7d4     74 CB BF FD | 	call	#_module_align_inner_left
0c7d8     4A 75 02 F6 | 	mov	arg01, local05
0c7dc     44 CB BF FD | 	call	#_module_align_inner_top
0c7e0     4A 75 02 F6 | 	mov	arg01, local05
0c7e4     EC CD BF FD | 	call	#_module_fit_width
0c7e8     4A 75 02 F6 | 	mov	arg01, local05
0c7ec     AC CE BF FD | 	call	#_module_fit_height
0c7f0     40 8D 06 F1 | 	add	local01, #320
0c7f4     46 8F 02 F6 | 	mov	local02, local01
0c7f8     47 75 02 F6 | 	mov	arg01, local02
0c7fc     49 77 02 F6 | 	mov	arg02, local04
0c800     D4 C1 BF FD | 	call	#_module_init
0c804     DA 00 00 FF 
0c808     69 D6 05 F1 | 	add	ptr__dat__, ##111721
0c80c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0c810     DA 00 00 FF 
0c814     69 D6 85 F1 | 	sub	ptr__dat__, ##111721
0c818     47 75 02 F6 | 	mov	arg01, local02
0c81c     54 C7 BF FD | 	call	#_module_set_text
0c820     47 75 02 F6 | 	mov	arg01, local02
0c824     08 78 06 F6 | 	mov	arg03, #8
0c828     00 75 06 F1 | 	add	arg01, #256
0c82c     3A 11 68 FC | 	wrlong	#8, arg01
0c830     04 74 06 F1 | 	add	arg01, #4
0c834     3A 11 68 FC | 	wrlong	#8, arg01
0c838     47 75 02 F6 | 	mov	arg01, local02
0c83c     02 76 06 F6 | 	mov	arg02, #2
0c840     70 C8 BF FD | 	call	#_module_text_font
0c844     47 75 02 F6 | 	mov	arg01, local02
0c848     84 C7 BF FD | 	call	#_module_text_fit
0c84c     47 75 02 F6 | 	mov	arg01, local02
0c850     10 75 06 F1 | 	add	arg01, #272
0c854     7F 00 80 FF 
0c858     3A FF 6B FC | 	wrlong	##65535, arg01
0c85c     04 74 86 F1 | 	sub	arg01, #4
0c860     1D 00 80 FF 
0c864     3A E9 6A FC | 	wrlong	##15220, arg01
0c868     47 75 02 F6 | 	mov	arg01, local02
0c86c     B4 CA BF FD | 	call	#_module_align_inner_top
0c870     47 75 02 F6 | 	mov	arg01, local02
0c874     01 76 06 F6 | 	mov	arg02, #1
0c878     02 78 06 F6 | 	mov	arg03, #2
0c87c     D0 CB BF FD | 	call	#_module_align_center_sector
0c880     47 75 02 F6 | 	mov	arg01, local02
0c884     CC 74 06 F1 | 	add	arg01, #204
0c888     3A 77 02 FB | 	rdlong	arg02, arg01
0c88c     CC 74 86 F1 | 	sub	arg01, #204
0c890     01 76 0E F2 | 	cmp	arg02, #1 wz
0c894                 | '         return;
0c894     D8 74 06 A1 |  if_e	add	arg01, #216
0c898     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0c89c     40 8D 06 F1 | 	add	local01, #320
0c8a0     46 97 02 F6 | 	mov	local06, local01
0c8a4     4B 75 02 F6 | 	mov	arg01, local06
0c8a8     49 77 02 F6 | 	mov	arg02, local04
0c8ac     28 C1 BF FD | 	call	#_module_init
0c8b0     4B 75 02 F6 | 	mov	arg01, local06
0c8b4     08 78 06 F6 | 	mov	arg03, #8
0c8b8     00 75 06 F1 | 	add	arg01, #256
0c8bc     3A 11 68 FC | 	wrlong	#8, arg01
0c8c0     04 74 06 F1 | 	add	arg01, #4
0c8c4     3A 11 68 FC | 	wrlong	#8, arg01
0c8c8     DA 00 00 FF 
0c8cc     77 D6 05 F1 | 	add	ptr__dat__, ##111735
0c8d0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0c8d4     DA 00 00 FF 
0c8d8     77 D6 85 F1 | 	sub	ptr__dat__, ##111735
0c8dc     4B 75 02 F6 | 	mov	arg01, local06
0c8e0     90 C6 BF FD | 	call	#_module_set_text
0c8e4     4B 75 02 F6 | 	mov	arg01, local06
0c8e8     01 76 06 F6 | 	mov	arg02, #1
0c8ec     C4 C7 BF FD | 	call	#_module_text_font
0c8f0     4B 75 02 F6 | 	mov	arg01, local06
0c8f4     1D 00 00 FF 
0c8f8     74 79 06 F6 | 	mov	arg03, ##15220
0c8fc     10 75 06 F1 | 	add	arg01, #272
0c900     7F 00 80 FF 
0c904     3A FF 6B FC | 	wrlong	##65535, arg01
0c908     04 74 86 F1 | 	sub	arg01, #4
0c90c     1D 00 80 FF 
0c910     3A E9 6A FC | 	wrlong	##15220, arg01
0c914     4B 75 02 F6 | 	mov	arg01, local06
0c918     47 77 02 F6 | 	mov	arg02, local02
0c91c     5C CC BF FD | 	call	#_module_align_below
0c920     4B 75 02 F6 | 	mov	arg01, local06
0c924     24 CA BF FD | 	call	#_module_align_inner_left
0c928     40 8D 06 F1 | 	add	local01, #320
0c92c     46 99 02 F6 | 	mov	local07, local01
0c930     4C 75 02 F6 | 	mov	arg01, local07
0c934     4A 77 02 F6 | 	mov	arg02, local05
0c938     9C C0 BF FD | 	call	#_module_init
0c93c     04 00 00 FF 
0c940     C4 8C 86 F1 | 	sub	local01, ##2244
0c944     46 77 02 FB | 	rdlong	arg02, local01
0c948     80 77 06 F1 | 	add	arg02, #384
0c94c     4C 75 02 F6 | 	mov	arg01, local07
0c950     EC C5 BF FD | 	call	#_module_set_image
0c954     4C 75 02 F6 | 	mov	arg01, local07
0c958     47 77 02 F6 | 	mov	arg02, local02
0c95c     1C CC BF FD | 	call	#_module_align_below
0c960     4C 75 02 F6 | 	mov	arg01, local07
0c964     0C CA BF FD | 	call	#_module_align_inner_right
0c968     05 00 00 FF 
0c96c     04 8C 06 F1 | 	add	local01, ##2564
0c970     46 8F 02 F6 | 	mov	local02, local01
0c974     47 75 02 F6 | 	mov	arg01, local02
0c978     49 77 02 F6 | 	mov	arg02, local04
0c97c     58 C0 BF FD | 	call	#_module_init
0c980     47 75 02 F6 | 	mov	arg01, local02
0c984     4B 77 02 F6 | 	mov	arg02, local06
0c988     F0 C4 BF FD | 	call	#_module_copy
0c98c     DA 00 00 FF 
0c990     83 D6 05 F1 | 	add	ptr__dat__, ##111747
0c994     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0c998     DA 00 00 FF 
0c99c     83 D6 85 F1 | 	sub	ptr__dat__, ##111747
0c9a0     47 75 02 F6 | 	mov	arg01, local02
0c9a4     CC C5 BF FD | 	call	#_module_set_text
0c9a8     47 75 02 F6 | 	mov	arg01, local02
0c9ac     01 76 06 F6 | 	mov	arg02, #1
0c9b0     00 C7 BF FD | 	call	#_module_text_font
0c9b4     47 75 02 F6 | 	mov	arg01, local02
0c9b8     4B 77 02 F6 | 	mov	arg02, local06
0c9bc     BC CB BF FD | 	call	#_module_align_below
0c9c0     40 8D 06 F1 | 	add	local01, #320
0c9c4     46 99 02 F6 | 	mov	local07, local01
0c9c8     4C 75 02 F6 | 	mov	arg01, local07
0c9cc     4A 77 02 F6 | 	mov	arg02, local05
0c9d0     04 C0 BF FD | 	call	#_module_init
0c9d4     05 00 00 FF 
0c9d8     44 8D 86 F1 | 	sub	local01, ##2884
0c9dc     46 77 02 FB | 	rdlong	arg02, local01
0c9e0     80 77 06 F1 | 	add	arg02, #384
0c9e4     4C 75 02 F6 | 	mov	arg01, local07
0c9e8     54 C5 BF FD | 	call	#_module_set_image
0c9ec     4C 75 02 F6 | 	mov	arg01, local07
0c9f0     4B 77 02 F6 | 	mov	arg02, local06
0c9f4     84 CB BF FD | 	call	#_module_align_below
0c9f8     4C 75 02 F6 | 	mov	arg01, local07
0c9fc     74 C9 BF FD | 	call	#_module_align_inner_right
0ca00     06 00 00 FF 
0ca04     84 8C 06 F1 | 	add	local01, ##3204
0ca08     46 9B 02 F6 | 	mov	local08, local01
0ca0c     4D 75 02 F6 | 	mov	arg01, local08
0ca10     49 77 02 F6 | 	mov	arg02, local04
0ca14     C0 BF BF FD | 	call	#_module_init
0ca18     4D 75 02 F6 | 	mov	arg01, local08
0ca1c     4B 77 02 F6 | 	mov	arg02, local06
0ca20     58 C4 BF FD | 	call	#_module_copy
0ca24     DA 00 00 FF 
0ca28     92 D6 05 F1 | 	add	ptr__dat__, ##111762
0ca2c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ca30     DA 00 00 FF 
0ca34     92 D6 85 F1 | 	sub	ptr__dat__, ##111762
0ca38     4D 75 02 F6 | 	mov	arg01, local08
0ca3c     34 C5 BF FD | 	call	#_module_set_text
0ca40     4D 75 02 F6 | 	mov	arg01, local08
0ca44     01 76 06 F6 | 	mov	arg02, #1
0ca48     68 C6 BF FD | 	call	#_module_text_font
0ca4c     4D 75 02 F6 | 	mov	arg01, local08
0ca50     47 77 02 F6 | 	mov	arg02, local02
0ca54     24 CB BF FD | 	call	#_module_align_below
0ca58     40 8D 06 F1 | 	add	local01, #320
0ca5c     46 99 02 F6 | 	mov	local07, local01
0ca60     4C 75 02 F6 | 	mov	arg01, local07
0ca64     4A 77 02 F6 | 	mov	arg02, local05
0ca68     6C BF BF FD | 	call	#_module_init
0ca6c     06 00 00 FF 
0ca70     C4 8D 86 F1 | 	sub	local01, ##3524
0ca74     46 77 02 FB | 	rdlong	arg02, local01
0ca78     80 77 06 F1 | 	add	arg02, #384
0ca7c     4C 75 02 F6 | 	mov	arg01, local07
0ca80     BC C4 BF FD | 	call	#_module_set_image
0ca84     4C 75 02 F6 | 	mov	arg01, local07
0ca88     47 77 02 F6 | 	mov	arg02, local02
0ca8c     EC CA BF FD | 	call	#_module_align_below
0ca90     4C 75 02 F6 | 	mov	arg01, local07
0ca94     DC C8 BF FD | 	call	#_module_align_inner_right
0ca98     07 00 00 FF 
0ca9c     04 8D 06 F1 | 	add	local01, ##3844
0caa0     46 8F 02 F6 | 	mov	local02, local01
0caa4     47 75 02 F6 | 	mov	arg01, local02
0caa8     49 77 02 F6 | 	mov	arg02, local04
0caac     28 BF BF FD | 	call	#_module_init
0cab0     47 75 02 F6 | 	mov	arg01, local02
0cab4     4B 77 02 F6 | 	mov	arg02, local06
0cab8     C0 C3 BF FD | 	call	#_module_copy
0cabc     DA 00 00 FF 
0cac0     9D D6 05 F1 | 	add	ptr__dat__, ##111773
0cac4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cac8     DA 00 00 FF 
0cacc     9D D6 85 F1 | 	sub	ptr__dat__, ##111773
0cad0     47 75 02 F6 | 	mov	arg01, local02
0cad4     9C C4 BF FD | 	call	#_module_set_text
0cad8     47 75 02 F6 | 	mov	arg01, local02
0cadc     01 76 06 F6 | 	mov	arg02, #1
0cae0     D0 C5 BF FD | 	call	#_module_text_font
0cae4     47 75 02 F6 | 	mov	arg01, local02
0cae8     4D 77 02 F6 | 	mov	arg02, local08
0caec     8C CA BF FD | 	call	#_module_align_below
0caf0     40 8D 06 F1 | 	add	local01, #320
0caf4     46 99 02 F6 | 	mov	local07, local01
0caf8     4C 75 02 F6 | 	mov	arg01, local07
0cafc     4A 77 02 F6 | 	mov	arg02, local05
0cb00     D4 BE BF FD | 	call	#_module_init
0cb04     08 00 00 FF 
0cb08     44 8C 86 F1 | 	sub	local01, ##4164
0cb0c     46 77 02 FB | 	rdlong	arg02, local01
0cb10     80 77 06 F1 | 	add	arg02, #384
0cb14     4C 75 02 F6 | 	mov	arg01, local07
0cb18     24 C4 BF FD | 	call	#_module_set_image
0cb1c     4C 75 02 F6 | 	mov	arg01, local07
0cb20     4D 77 02 F6 | 	mov	arg02, local08
0cb24     54 CA BF FD | 	call	#_module_align_below
0cb28     4C 75 02 F6 | 	mov	arg01, local07
0cb2c     44 C8 BF FD | 	call	#_module_align_inner_right
0cb30     08 00 00 FF 
0cb34     84 8D 06 F1 | 	add	local01, ##4484
0cb38     46 9B 02 F6 | 	mov	local08, local01
0cb3c     4D 75 02 F6 | 	mov	arg01, local08
0cb40     49 77 02 F6 | 	mov	arg02, local04
0cb44     90 BE BF FD | 	call	#_module_init
0cb48     4D 75 02 F6 | 	mov	arg01, local08
0cb4c     4B 77 02 F6 | 	mov	arg02, local06
0cb50     28 C3 BF FD | 	call	#_module_copy
0cb54     DA 00 00 FF 
0cb58     A7 D6 05 F1 | 	add	ptr__dat__, ##111783
0cb5c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cb60     DA 00 00 FF 
0cb64     A7 D6 85 F1 | 	sub	ptr__dat__, ##111783
0cb68     4D 75 02 F6 | 	mov	arg01, local08
0cb6c     04 C4 BF FD | 	call	#_module_set_text
0cb70     4D 75 02 F6 | 	mov	arg01, local08
0cb74     01 76 06 F6 | 	mov	arg02, #1
0cb78     38 C5 BF FD | 	call	#_module_text_font
0cb7c     4D 75 02 F6 | 	mov	arg01, local08
0cb80     47 77 02 F6 | 	mov	arg02, local02
0cb84     F4 C9 BF FD | 	call	#_module_align_below
0cb88     40 8D 06 F1 | 	add	local01, #320
0cb8c     46 99 02 F6 | 	mov	local07, local01
0cb90     4C 75 02 F6 | 	mov	arg01, local07
0cb94     4A 77 02 F6 | 	mov	arg02, local05
0cb98     3C BE BF FD | 	call	#_module_init
0cb9c     09 00 00 FF 
0cba0     C4 8C 86 F1 | 	sub	local01, ##4804
0cba4     46 77 02 FB | 	rdlong	arg02, local01
0cba8     80 77 06 F1 | 	add	arg02, #384
0cbac     4C 75 02 F6 | 	mov	arg01, local07
0cbb0     8C C3 BF FD | 	call	#_module_set_image
0cbb4     4C 75 02 F6 | 	mov	arg01, local07
0cbb8     47 77 02 F6 | 	mov	arg02, local02
0cbbc     BC C9 BF FD | 	call	#_module_align_below
0cbc0     4C 75 02 F6 | 	mov	arg01, local07
0cbc4     AC C7 BF FD | 	call	#_module_align_inner_right
0cbc8     0A 00 00 FF 
0cbcc     04 8C 06 F1 | 	add	local01, ##5124
0cbd0     46 8F 02 F6 | 	mov	local02, local01
0cbd4     47 75 02 F6 | 	mov	arg01, local02
0cbd8     49 77 02 F6 | 	mov	arg02, local04
0cbdc     F8 BD BF FD | 	call	#_module_init
0cbe0     47 75 02 F6 | 	mov	arg01, local02
0cbe4     4B 77 02 F6 | 	mov	arg02, local06
0cbe8     90 C2 BF FD | 	call	#_module_copy
0cbec     DA 00 00 FF 
0cbf0     B1 D6 05 F1 | 	add	ptr__dat__, ##111793
0cbf4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cbf8     DA 00 00 FF 
0cbfc     B1 D6 85 F1 | 	sub	ptr__dat__, ##111793
0cc00     47 75 02 F6 | 	mov	arg01, local02
0cc04     6C C3 BF FD | 	call	#_module_set_text
0cc08     47 75 02 F6 | 	mov	arg01, local02
0cc0c     01 76 06 F6 | 	mov	arg02, #1
0cc10     A0 C4 BF FD | 	call	#_module_text_font
0cc14     47 75 02 F6 | 	mov	arg01, local02
0cc18     4D 77 02 F6 | 	mov	arg02, local08
0cc1c     5C C9 BF FD | 	call	#_module_align_below
0cc20     40 8D 06 F1 | 	add	local01, #320
0cc24     46 99 02 F6 | 	mov	local07, local01
0cc28     4C 75 02 F6 | 	mov	arg01, local07
0cc2c     4A 77 02 F6 | 	mov	arg02, local05
0cc30     A4 BD BF FD | 	call	#_module_init
0cc34     0A 00 00 FF 
0cc38     44 8D 86 F1 | 	sub	local01, ##5444
0cc3c     46 77 02 FB | 	rdlong	arg02, local01
0cc40     80 77 06 F1 | 	add	arg02, #384
0cc44     4C 75 02 F6 | 	mov	arg01, local07
0cc48     F4 C2 BF FD | 	call	#_module_set_image
0cc4c     4C 75 02 F6 | 	mov	arg01, local07
0cc50     4D 77 02 F6 | 	mov	arg02, local08
0cc54     24 C9 BF FD | 	call	#_module_align_below
0cc58     4C 75 02 F6 | 	mov	arg01, local07
0cc5c     14 C7 BF FD | 	call	#_module_align_inner_right
0cc60     0B 00 00 FF 
0cc64     84 8C 06 F1 | 	add	local01, ##5764
0cc68     46 9B 02 F6 | 	mov	local08, local01
0cc6c     4D 75 02 F6 | 	mov	arg01, local08
0cc70     49 77 02 F6 | 	mov	arg02, local04
0cc74     60 BD BF FD | 	call	#_module_init
0cc78     4D 75 02 F6 | 	mov	arg01, local08
0cc7c     4B 77 02 F6 | 	mov	arg02, local06
0cc80     F8 C1 BF FD | 	call	#_module_copy
0cc84     DA 00 00 FF 
0cc88     BD D6 05 F1 | 	add	ptr__dat__, ##111805
0cc8c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cc90     DA 00 00 FF 
0cc94     BD D6 85 F1 | 	sub	ptr__dat__, ##111805
0cc98     4D 75 02 F6 | 	mov	arg01, local08
0cc9c     D4 C2 BF FD | 	call	#_module_set_text
0cca0     4D 75 02 F6 | 	mov	arg01, local08
0cca4     01 76 06 F6 | 	mov	arg02, #1
0cca8     08 C4 BF FD | 	call	#_module_text_font
0ccac     4D 75 02 F6 | 	mov	arg01, local08
0ccb0     47 77 02 F6 | 	mov	arg02, local02
0ccb4     C4 C8 BF FD | 	call	#_module_align_below
0ccb8     40 8D 06 F1 | 	add	local01, #320
0ccbc     46 99 02 F6 | 	mov	local07, local01
0ccc0     4C 75 02 F6 | 	mov	arg01, local07
0ccc4     4A 77 02 F6 | 	mov	arg02, local05
0ccc8     0C BD BF FD | 	call	#_module_init
0cccc     0B 00 00 FF 
0ccd0     C4 8D 86 F1 | 	sub	local01, ##6084
0ccd4     46 77 02 FB | 	rdlong	arg02, local01
0ccd8     80 77 06 F1 | 	add	arg02, #384
0ccdc     4C 75 02 F6 | 	mov	arg01, local07
0cce0     5C C2 BF FD | 	call	#_module_set_image
0cce4     4C 75 02 F6 | 	mov	arg01, local07
0cce8     47 77 02 F6 | 	mov	arg02, local02
0ccec     8C C8 BF FD | 	call	#_module_align_below
0ccf0     4C 75 02 F6 | 	mov	arg01, local07
0ccf4     7C C6 BF FD | 	call	#_module_align_inner_right
0ccf8     0C 00 00 FF 
0ccfc     04 8D 06 F1 | 	add	local01, ##6404
0cd00     46 75 02 F6 | 	mov	arg01, local01
0cd04     49 77 02 F6 | 	mov	arg02, local04
0cd08     CC BC BF FD | 	call	#_module_init
0cd0c     46 75 02 F6 | 	mov	arg01, local01
0cd10     4B 77 02 F6 | 	mov	arg02, local06
0cd14     64 C1 BF FD | 	call	#_module_copy
0cd18     DA 00 00 FF 
0cd1c     C8 D6 05 F1 | 	add	ptr__dat__, ##111816
0cd20     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cd24     DA 00 00 FF 
0cd28     C8 D6 85 F1 | 	sub	ptr__dat__, ##111816
0cd2c     46 75 02 F6 | 	mov	arg01, local01
0cd30     40 C2 BF FD | 	call	#_module_set_text
0cd34     46 75 02 F6 | 	mov	arg01, local01
0cd38     01 76 06 F6 | 	mov	arg02, #1
0cd3c     74 C3 BF FD | 	call	#_module_text_font
0cd40     46 75 02 F6 | 	mov	arg01, local01
0cd44     4D 77 02 F6 | 	mov	arg02, local08
0cd48     30 C8 BF FD | 	call	#_module_align_below
0cd4c     40 8D 06 F1 | 	add	local01, #320
0cd50     46 99 02 F6 | 	mov	local07, local01
0cd54     4C 75 02 F6 | 	mov	arg01, local07
0cd58     4A 77 02 F6 | 	mov	arg02, local05
0cd5c     78 BC BF FD | 	call	#_module_init
0cd60     0D 00 00 FF 
0cd64     44 8C 86 F1 | 	sub	local01, ##6724
0cd68     46 77 02 FB | 	rdlong	arg02, local01
0cd6c     80 77 06 F1 | 	add	arg02, #384
0cd70     4C 75 02 F6 | 	mov	arg01, local07
0cd74     C8 C1 BF FD | 	call	#_module_set_image
0cd78     4C 75 02 F6 | 	mov	arg01, local07
0cd7c     4D 77 02 F6 | 	mov	arg02, local08
0cd80     F8 C7 BF FD | 	call	#_module_align_below
0cd84     4C 75 02 F6 | 	mov	arg01, local07
0cd88     E8 C5 BF FD | 	call	#_module_align_inner_right
0cd8c     0D 00 00 FF 
0cd90     84 8D 06 F1 | 	add	local01, ##7044
0cd94     46 9B 02 F6 | 	mov	local08, local01
0cd98     4D 75 02 F6 | 	mov	arg01, local08
0cd9c     48 77 02 F6 | 	mov	arg02, local03
0cda0     34 BC BF FD | 	call	#_module_init
0cda4     4D 75 02 F6 | 	mov	arg01, local08
0cda8     F8 74 06 F1 | 	add	arg01, #248
0cdac     3A 11 68 FC | 	wrlong	#8, arg01
0cdb0     04 74 06 F1 | 	add	arg01, #4
0cdb4     3A 11 68 FC | 	wrlong	#8, arg01
0cdb8     4D 75 02 F6 | 	mov	arg01, local08
0cdbc     0F 76 CE F9 | 	bmask	arg02, #15
0cdc0     01 78 06 F6 | 	mov	arg03, #1
0cdc4     1C C5 BF FD | 	call	#_module_add_border
0cdc8     4D 75 02 F6 | 	mov	arg01, local08
0cdcc     00 75 06 F1 | 	add	arg01, #256
0cdd0     3A 15 68 FC | 	wrlong	#10, arg01
0cdd4     04 74 06 F1 | 	add	arg01, #4
0cdd8     3A 15 68 FC | 	wrlong	#10, arg01
0cddc     4D 75 02 F6 | 	mov	arg01, local08
0cde0     CC 74 06 F1 | 	add	arg01, #204
0cde4     3A 0B 68 FC | 	wrlong	#5, arg01
0cde8     24 74 06 F1 | 	add	arg01, #36
0cdec     3A 01 68 FC | 	wrlong	#0, arg01
0cdf0     04 74 06 F1 | 	add	arg01, #4
0cdf4     3A 01 68 FC | 	wrlong	#0, arg01
0cdf8     4D 75 02 F6 | 	mov	arg01, local08
0cdfc     03 76 06 F6 | 	mov	arg02, #3
0ce00     08 C8 BF FD | 	call	#_module_fit_space_even
0ce04     4D 75 02 F6 | 	mov	arg01, local08
0ce08     F8 74 06 F1 | 	add	arg01, #248
0ce0c     3A 11 68 FC | 	wrlong	#8, arg01
0ce10     04 74 06 F1 | 	add	arg01, #4
0ce14     3A 11 68 FC | 	wrlong	#8, arg01
0ce18     4D 75 02 F6 | 	mov	arg01, local08
0ce1c     7C C8 BF FD | 	call	#_module_fit_height
0ce20     4D 75 02 F6 | 	mov	arg01, local08
0ce24     01 00 00 FF 
0ce28     73 78 06 F6 | 	mov	arg03, ##627
0ce2c     10 75 06 F1 | 	add	arg01, #272
0ce30     1D 00 80 FF 
0ce34     3A E9 6A FC | 	wrlong	##15220, arg01
0ce38     04 74 86 F1 | 	sub	arg01, #4
0ce3c     01 00 80 FF 
0ce40     3A E7 68 FC | 	wrlong	##627, arg01
0ce44     4D 75 02 F6 | 	mov	arg01, local08
0ce48     49 77 02 F6 | 	mov	arg02, local04
0ce4c     58 C7 BF FD | 	call	#_module_align_right
0ce50     4D 75 02 F6 | 	mov	arg01, local08
0ce54     CC C4 BF FD | 	call	#_module_align_inner_top
0ce58     40 8D 06 F1 | 	add	local01, #320
0ce5c     46 8F 02 F6 | 	mov	local02, local01
0ce60     47 75 02 F6 | 	mov	arg01, local02
0ce64     4D 77 02 F6 | 	mov	arg02, local08
0ce68     6C BB BF FD | 	call	#_module_init
0ce6c     DA 00 00 FF 
0ce70     D3 D6 05 F1 | 	add	ptr__dat__, ##111827
0ce74     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ce78     DA 00 00 FF 
0ce7c     D3 D6 85 F1 | 	sub	ptr__dat__, ##111827
0ce80     47 75 02 F6 | 	mov	arg01, local02
0ce84     EC C0 BF FD | 	call	#_module_set_text
0ce88     47 75 02 F6 | 	mov	arg01, local02
0ce8c     08 78 06 F6 | 	mov	arg03, #8
0ce90     00 75 06 F1 | 	add	arg01, #256
0ce94     3A 11 68 FC | 	wrlong	#8, arg01
0ce98     04 74 06 F1 | 	add	arg01, #4
0ce9c     3A 11 68 FC | 	wrlong	#8, arg01
0cea0     47 75 02 F6 | 	mov	arg01, local02
0cea4     02 76 06 F6 | 	mov	arg02, #2
0cea8     08 C2 BF FD | 	call	#_module_text_font
0ceac     47 75 02 F6 | 	mov	arg01, local02
0ceb0     1C C1 BF FD | 	call	#_module_text_fit
0ceb4     47 75 02 F6 | 	mov	arg01, local02
0ceb8     10 75 06 F1 | 	add	arg01, #272
0cebc     7F 00 80 FF 
0cec0     3A FF 6B FC | 	wrlong	##65535, arg01
0cec4     04 74 86 F1 | 	sub	arg01, #4
0cec8     1D 00 80 FF 
0cecc     3A E9 6A FC | 	wrlong	##15220, arg01
0ced0     47 75 02 F6 | 	mov	arg01, local02
0ced4     4C C4 BF FD | 	call	#_module_align_inner_top
0ced8     47 75 02 F6 | 	mov	arg01, local02
0cedc     01 76 06 F6 | 	mov	arg02, #1
0cee0     02 78 06 F6 | 	mov	arg03, #2
0cee4     68 C5 BF FD | 	call	#_module_align_center_sector
0cee8     47 75 02 F6 | 	mov	arg01, local02
0ceec     CC 74 06 F1 | 	add	arg01, #204
0cef0     3A 99 02 FB | 	rdlong	local07, arg01
0cef4     CC 74 86 F1 | 	sub	arg01, #204
0cef8     01 98 0E F2 | 	cmp	local07, #1 wz
0cefc                 | '         return;
0cefc     D8 74 06 A1 |  if_e	add	arg01, #216
0cf00     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0cf04     40 8D 06 F1 | 	add	local01, #320
0cf08     46 97 02 F6 | 	mov	local06, local01
0cf0c     4B 75 02 F6 | 	mov	arg01, local06
0cf10     4D 77 02 F6 | 	mov	arg02, local08
0cf14     C0 BA BF FD | 	call	#_module_init
0cf18     4B 75 02 F6 | 	mov	arg01, local06
0cf1c     08 78 06 F6 | 	mov	arg03, #8
0cf20     00 75 06 F1 | 	add	arg01, #256
0cf24     3A 11 68 FC | 	wrlong	#8, arg01
0cf28     04 74 06 F1 | 	add	arg01, #4
0cf2c     3A 11 68 FC | 	wrlong	#8, arg01
0cf30     DA 00 00 FF 
0cf34     E0 D6 05 F1 | 	add	ptr__dat__, ##111840
0cf38     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0cf3c     DA 00 00 FF 
0cf40     E0 D6 85 F1 | 	sub	ptr__dat__, ##111840
0cf44     4B 75 02 F6 | 	mov	arg01, local06
0cf48     28 C0 BF FD | 	call	#_module_set_text
0cf4c     4B 75 02 F6 | 	mov	arg01, local06
0cf50     01 76 06 F6 | 	mov	arg02, #1
0cf54     5C C1 BF FD | 	call	#_module_text_font
0cf58     4B 75 02 F6 | 	mov	arg01, local06
0cf5c     70 C0 BF FD | 	call	#_module_text_fit
0cf60     4B 75 02 F6 | 	mov	arg01, local06
0cf64     1D 00 00 FF 
0cf68     74 79 06 F6 | 	mov	arg03, ##15220
0cf6c     10 75 06 F1 | 	add	arg01, #272
0cf70     7F 00 80 FF 
0cf74     3A FF 6B FC | 	wrlong	##65535, arg01
0cf78     04 74 86 F1 | 	sub	arg01, #4
0cf7c     1D 00 80 FF 
0cf80     3A E9 6A FC | 	wrlong	##15220, arg01
0cf84     4B 75 02 F6 | 	mov	arg01, local06
0cf88     47 77 02 F6 | 	mov	arg02, local02
0cf8c     EC C5 BF FD | 	call	#_module_align_below
0cf90     4B 75 02 F6 | 	mov	arg01, local06
0cf94     B4 C3 BF FD | 	call	#_module_align_inner_left
0cf98     40 8D 06 F1 | 	add	local01, #320
0cf9c     46 99 02 F6 | 	mov	local07, local01
0cfa0     4C 75 02 F6 | 	mov	arg01, local07
0cfa4     4D 77 02 F6 | 	mov	arg02, local08
0cfa8     2C BA BF FD | 	call	#_module_init
0cfac     4C 75 02 F6 | 	mov	arg01, local07
0cfb0     4B 77 02 F6 | 	mov	arg02, local06
0cfb4     C4 BE BF FD | 	call	#_module_copy
0cfb8     1A 00 00 FF 
0cfbc     70 8C 06 F1 | 	add	local01, ##13424
0cfc0     46 77 02 F6 | 	mov	arg02, local01
0cfc4     4C 75 02 F6 | 	mov	arg01, local07
0cfc8     A8 BF BF FD | 	call	#_module_set_text
0cfcc     4C 75 02 F6 | 	mov	arg01, local07
0cfd0     01 76 06 F6 | 	mov	arg02, #1
0cfd4     DC C0 BF FD | 	call	#_module_text_font
0cfd8     4C 75 02 F6 | 	mov	arg01, local07
0cfdc     F0 BF BF FD | 	call	#_module_text_fit
0cfe0     4C 75 02 F6 | 	mov	arg01, local07
0cfe4     4B 77 02 F6 | 	mov	arg02, local06
0cfe8     68 C7 BF FD | 	call	#_module_fit_right
0cfec     4C 75 02 F6 | 	mov	arg01, local07
0cff0     4B 77 02 F6 | 	mov	arg02, local06
0cff4     B0 C5 BF FD | 	call	#_module_align_right
0cff8     4C 75 02 F6 | 	mov	arg01, local07
0cffc     CC 74 06 F1 | 	add	arg01, #204
0d000     3A 99 02 FB | 	rdlong	local07, arg01
0d004     CC 74 86 F1 | 	sub	arg01, #204
0d008     01 98 0E F2 | 	cmp	local07, #1 wz
0d00c                 | '         return;
0d00c     DC 74 06 A1 |  if_e	add	arg01, #220
0d010     3A 07 68 AC |  if_e	wrlong	#3, arg01
0d014     19 00 00 FF 
0d018     30 8D 86 F1 | 	sub	local01, ##13104
0d01c     46 8F 02 F6 | 	mov	local02, local01
0d020     47 75 02 F6 | 	mov	arg01, local02
0d024     4D 77 02 F6 | 	mov	arg02, local08
0d028     AC B9 BF FD | 	call	#_module_init
0d02c     47 75 02 F6 | 	mov	arg01, local02
0d030     08 78 06 F6 | 	mov	arg03, #8
0d034     00 75 06 F1 | 	add	arg01, #256
0d038     3A 11 68 FC | 	wrlong	#8, arg01
0d03c     04 74 06 F1 | 	add	arg01, #4
0d040     3A 11 68 FC | 	wrlong	#8, arg01
0d044     DA 00 00 FF 
0d048     EA D6 05 F1 | 	add	ptr__dat__, ##111850
0d04c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0d050     DA 00 00 FF 
0d054     EA D6 85 F1 | 	sub	ptr__dat__, ##111850
0d058     47 75 02 F6 | 	mov	arg01, local02
0d05c     14 BF BF FD | 	call	#_module_set_text
0d060     47 75 02 F6 | 	mov	arg01, local02
0d064     01 76 06 F6 | 	mov	arg02, #1
0d068     48 C0 BF FD | 	call	#_module_text_font
0d06c     47 75 02 F6 | 	mov	arg01, local02
0d070     5C BF BF FD | 	call	#_module_text_fit
0d074     47 75 02 F6 | 	mov	arg01, local02
0d078     1D 00 00 FF 
0d07c     74 79 06 F6 | 	mov	arg03, ##15220
0d080     10 75 06 F1 | 	add	arg01, #272
0d084     7F 00 80 FF 
0d088     3A FF 6B FC | 	wrlong	##65535, arg01
0d08c     04 74 86 F1 | 	sub	arg01, #4
0d090     1D 00 80 FF 
0d094     3A E9 6A FC | 	wrlong	##15220, arg01
0d098     47 75 02 F6 | 	mov	arg01, local02
0d09c     4B 77 02 F6 | 	mov	arg02, local06
0d0a0     D8 C4 BF FD | 	call	#_module_align_below
0d0a4     47 75 02 F6 | 	mov	arg01, local02
0d0a8     A0 C2 BF FD | 	call	#_module_align_inner_left
0d0ac     40 8D 06 F1 | 	add	local01, #320
0d0b0     46 99 02 F6 | 	mov	local07, local01
0d0b4     4C 75 02 F6 | 	mov	arg01, local07
0d0b8     4D 77 02 F6 | 	mov	arg02, local08
0d0bc     18 B9 BF FD | 	call	#_module_init
0d0c0     4C 75 02 F6 | 	mov	arg01, local07
0d0c4     47 77 02 F6 | 	mov	arg02, local02
0d0c8     B0 BD BF FD | 	call	#_module_copy
0d0cc     19 00 00 FF 
0d0d0     04 8C 06 F1 | 	add	local01, ##12804
0d0d4     46 77 02 F6 | 	mov	arg02, local01
0d0d8     4C 75 02 F6 | 	mov	arg01, local07
0d0dc     94 BE BF FD | 	call	#_module_set_text
0d0e0     4C 75 02 F6 | 	mov	arg01, local07
0d0e4     01 76 06 F6 | 	mov	arg02, #1
0d0e8     C8 BF BF FD | 	call	#_module_text_font
0d0ec     4C 75 02 F6 | 	mov	arg01, local07
0d0f0     DC BE BF FD | 	call	#_module_text_fit
0d0f4     4C 75 02 F6 | 	mov	arg01, local07
0d0f8     47 77 02 F6 | 	mov	arg02, local02
0d0fc     54 C6 BF FD | 	call	#_module_fit_right
0d100     4C 75 02 F6 | 	mov	arg01, local07
0d104     47 77 02 F6 | 	mov	arg02, local02
0d108     9C C4 BF FD | 	call	#_module_align_right
0d10c     4C 75 02 F6 | 	mov	arg01, local07
0d110     CC 74 06 F1 | 	add	arg01, #204
0d114     3A 99 02 FB | 	rdlong	local07, arg01
0d118     CC 74 86 F1 | 	sub	arg01, #204
0d11c     01 98 0E F2 | 	cmp	local07, #1 wz
0d120                 | '         return;
0d120     DC 74 06 A1 |  if_e	add	arg01, #220
0d124     3A 07 68 AC |  if_e	wrlong	#3, arg01
0d128     18 00 00 FF 
0d12c     C4 8C 86 F1 | 	sub	local01, ##12484
0d130     46 99 02 F6 | 	mov	local07, local01
0d134     4C 75 02 F6 | 	mov	arg01, local07
0d138     4D 77 02 F6 | 	mov	arg02, local08
0d13c     98 B8 BF FD | 	call	#_module_init
0d140     4C 75 02 F6 | 	mov	arg01, local07
0d144     00 75 06 F1 | 	add	arg01, #256
0d148     3A 15 68 FC | 	wrlong	#10, arg01
0d14c     04 74 06 F1 | 	add	arg01, #4
0d150     3A 15 68 FC | 	wrlong	#10, arg01
0d154     4C 75 02 F6 | 	mov	arg01, local07
0d158     F0 74 06 F1 | 	add	arg01, #240
0d15c     3A 01 68 FC | 	wrlong	#0, arg01
0d160     04 74 06 F1 | 	add	arg01, #4
0d164     3A 91 69 FC | 	wrlong	#200, arg01
0d168     4C 75 02 F6 | 	mov	arg01, local07
0d16c     47 77 02 F6 | 	mov	arg02, local02
0d170     08 C4 BF FD | 	call	#_module_align_below
0d174     4C 75 02 F6 | 	mov	arg01, local07
0d178     D0 C1 BF FD | 	call	#_module_align_inner_left
0d17c     4C 97 02 FB | 	rdlong	local06, local07
0d180     10 97 06 F1 | 	add	local06, #272
0d184     4B 77 02 FB | 	rdlong	arg02, local06
0d188     4C 97 02 FB | 	rdlong	local06, local07
0d18c     0C 97 06 F1 | 	add	local06, #268
0d190     4B 79 02 FB | 	rdlong	arg03, local06
0d194     4C 75 02 F6 | 	mov	arg01, local07
0d198     10 75 06 F1 | 	add	arg01, #272
0d19c     3A 77 62 FC | 	wrlong	arg02, arg01
0d1a0     04 74 86 F1 | 	sub	arg01, #4
0d1a4     3A 79 62 FC | 	wrlong	arg03, arg01
0d1a8     4C 75 02 F6 | 	mov	arg01, local07
0d1ac     24 C4 BF FD | 	call	#_module_fit_width
0d1b0     40 8D 06 F1 | 	add	local01, #320
0d1b4     46 77 02 F6 | 	mov	arg02, local01
0d1b8     4A 01 00 FF 
0d1bc     EA 79 06 F6 | 	mov	arg03, ##@LR__1974
0d1c0     4A 01 00 FF 
0d1c4     F3 7B 06 F6 | 	mov	arg04, ##@LR__1975
0d1c8     4C 75 02 F6 | 	mov	arg01, local07
0d1cc     50 EE BF FD | 	call	#_module_set_graph
0d1d0     4C 75 02 F6 | 	mov	arg01, local07
0d1d4     00 90 60 FF 
0d1d8     00 78 06 F6 | 	mov	arg03, ##-1054867456
0d1dc     D0 74 06 F1 | 	add	arg01, #208
0d1e0     3A 75 02 FB | 	rdlong	arg01, arg01
0d1e4     08 74 06 F1 | 	add	arg01, #8
0d1e8     00 90 A0 FF 
0d1ec     3A 01 68 FC | 	wrlong	##1092616192, arg01
0d1f0     04 74 06 F1 | 	add	arg01, #4
0d1f4     00 90 E0 FF 
0d1f8     3A 01 68 FC | 	wrlong	##-1054867456, arg01
0d1fc     04 00 00 FF 
0d200     44 8D 06 F1 | 	add	local01, ##2372
0d204     46 97 02 F6 | 	mov	local06, local01
0d208     4B 75 02 F6 | 	mov	arg01, local06
0d20c     4D 77 02 F6 | 	mov	arg02, local08
0d210     C4 B7 BF FD | 	call	#_module_init
0d214     4B 75 02 F6 | 	mov	arg01, local06
0d218     00 75 06 F1 | 	add	arg01, #256
0d21c     3A 15 68 FC | 	wrlong	#10, arg01
0d220     04 74 06 F1 | 	add	arg01, #4
0d224     3A 15 68 FC | 	wrlong	#10, arg01
0d228     4B 75 02 F6 | 	mov	arg01, local06
0d22c     F0 74 06 F1 | 	add	arg01, #240
0d230     3A 01 68 FC | 	wrlong	#0, arg01
0d234     04 74 06 F1 | 	add	arg01, #4
0d238     3A 91 69 FC | 	wrlong	#200, arg01
0d23c     4B 75 02 F6 | 	mov	arg01, local06
0d240     4C 77 02 F6 | 	mov	arg02, local07
0d244     34 C3 BF FD | 	call	#_module_align_below
0d248     EC 96 06 F1 | 	add	local06, #236
0d24c     4B 99 02 FB | 	rdlong	local07, local06
0d250     0A 98 06 F1 | 	add	local07, #10
0d254     4B 99 62 FC | 	wrlong	local07, local06
0d258     EC 96 86 F1 | 	sub	local06, #236
0d25c     4B 75 02 F6 | 	mov	arg01, local06
0d260     E8 C0 BF FD | 	call	#_module_align_inner_left
0d264     4B 9B 02 FB | 	rdlong	local08, local06
0d268     10 9B 06 F1 | 	add	local08, #272
0d26c     4D 77 02 FB | 	rdlong	arg02, local08
0d270     4B 9B 02 FB | 	rdlong	local08, local06
0d274     0C 9B 06 F1 | 	add	local08, #268
0d278     4D 79 02 FB | 	rdlong	arg03, local08
0d27c     4B 75 02 F6 | 	mov	arg01, local06
0d280     10 75 06 F1 | 	add	arg01, #272
0d284     3A 77 62 FC | 	wrlong	arg02, arg01
0d288     04 74 86 F1 | 	sub	arg01, #4
0d28c     3A 79 62 FC | 	wrlong	arg03, arg01
0d290     4B 75 02 F6 | 	mov	arg01, local06
0d294     3C C3 BF FD | 	call	#_module_fit_width
0d298     40 8D 06 F1 | 	add	local01, #320
0d29c     46 77 02 F6 | 	mov	arg02, local01
0d2a0     4A 01 00 FF 
0d2a4     F6 79 06 F6 | 	mov	arg03, ##@LR__1976
0d2a8     4A 01 00 FF 
0d2ac     FC 7B 06 F6 | 	mov	arg04, ##@LR__1977
0d2b0     4B 75 02 F6 | 	mov	arg01, local06
0d2b4     68 ED BF FD | 	call	#_module_set_graph
0d2b8     00 50 60 FF 
0d2bc     00 78 06 F6 | 	mov	arg03, ##-1063256064
0d2c0     D0 96 06 F1 | 	add	local06, #208
0d2c4     4B 97 02 FB | 	rdlong	local06, local06
0d2c8     08 96 06 F1 | 	add	local06, #8
0d2cc     00 50 A0 FF 
0d2d0     4B 01 68 FC | 	wrlong	##1084227584, local06
0d2d4     04 96 06 F1 | 	add	local06, #4
0d2d8     00 50 E0 FF 
0d2dc     4B 01 68 FC | 	wrlong	##-1063256064, local06
0d2e0     04 00 00 FF 
0d2e4     44 8D 06 F1 | 	add	local01, ##2372
0d2e8     46 8F 02 F6 | 	mov	local02, local01
0d2ec     47 75 02 F6 | 	mov	arg01, local02
0d2f0     48 77 02 F6 | 	mov	arg02, local03
0d2f4     E0 B6 BF FD | 	call	#_module_init
0d2f8     47 75 02 F6 | 	mov	arg01, local02
0d2fc     F8 74 06 F1 | 	add	arg01, #248
0d300     3A 11 68 FC | 	wrlong	#8, arg01
0d304     04 74 06 F1 | 	add	arg01, #4
0d308     3A 11 68 FC | 	wrlong	#8, arg01
0d30c     47 75 02 F6 | 	mov	arg01, local02
0d310     00 75 06 F1 | 	add	arg01, #256
0d314     3A 15 68 FC | 	wrlong	#10, arg01
0d318     04 74 06 F1 | 	add	arg01, #4
0d31c     3A 15 68 FC | 	wrlong	#10, arg01
0d320     47 75 02 F6 | 	mov	arg01, local02
0d324     F0 74 06 F1 | 	add	arg01, #240
0d328     3A 01 68 FC | 	wrlong	#0, arg01
0d32c     04 74 06 F1 | 	add	arg01, #4
0d330     3A 91 69 FC | 	wrlong	#200, arg01
0d334     47 75 02 F6 | 	mov	arg01, local02
0d338     03 76 06 F6 | 	mov	arg02, #3
0d33c     CC C2 BF FD | 	call	#_module_fit_space_even
0d340     47 75 02 F6 | 	mov	arg01, local02
0d344     03 76 06 F6 | 	mov	arg02, #3
0d348     03 78 06 F6 | 	mov	arg03, #3
0d34c     74 C1 BF FD | 	call	#_module_align_space_even
0d350     47 75 02 F6 | 	mov	arg01, local02
0d354     64 C0 BF FD | 	call	#_module_align_inner_bottom
0d358     40 8D 06 F1 | 	add	local01, #320
0d35c     46 75 02 F6 | 	mov	arg01, local01
0d360     1C 00 00 FF 
0d364     58 8D 86 F1 | 	sub	local01, ##14680
0d368     46 79 02 FB | 	rdlong	arg03, local01
0d36c     47 77 02 F6 | 	mov	arg02, local02
0d370     4C E4 BF FD | 	call	#_function_window_init
0d374     22 00 00 FF 
0d378     FC 8D 06 F1 | 	add	local01, ##17916
0d37c     46 9B 02 F6 | 	mov	local08, local01
0d380     4D 75 02 F6 | 	mov	arg01, local08
0d384     48 77 02 F6 | 	mov	arg02, local03
0d388     4C B6 BF FD | 	call	#_module_init
0d38c     4D 75 02 F6 | 	mov	arg01, local08
0d390     F8 74 06 F1 | 	add	arg01, #248
0d394     3A 11 68 FC | 	wrlong	#8, arg01
0d398     04 74 06 F1 | 	add	arg01, #4
0d39c     3A 11 68 FC | 	wrlong	#8, arg01
0d3a0     4D 75 02 F6 | 	mov	arg01, local08
0d3a4     00 75 06 F1 | 	add	arg01, #256
0d3a8     3A 15 68 FC | 	wrlong	#10, arg01
0d3ac     04 74 06 F1 | 	add	arg01, #4
0d3b0     3A 15 68 FC | 	wrlong	#10, arg01
0d3b4     4D 75 02 F6 | 	mov	arg01, local08
0d3b8     F0 74 06 F1 | 	add	arg01, #240
0d3bc     3A 01 68 FC | 	wrlong	#0, arg01
0d3c0     04 74 06 F1 | 	add	arg01, #4
0d3c4     3A DD 68 FC | 	wrlong	#110, arg01
0d3c8     4D 75 02 F6 | 	mov	arg01, local08
0d3cc     03 76 06 F6 | 	mov	arg02, #3
0d3d0     38 C2 BF FD | 	call	#_module_fit_space_even
0d3d4     4D 75 02 F6 | 	mov	arg01, local08
0d3d8     03 76 06 F6 | 	mov	arg02, #3
0d3dc     03 78 06 F6 | 	mov	arg03, #3
0d3e0     E0 C0 BF FD | 	call	#_module_align_space_even
0d3e4     4D 75 02 F6 | 	mov	arg01, local08
0d3e8     47 77 02 F6 | 	mov	arg02, local02
0d3ec     34 C1 BF FD | 	call	#_module_align_above
0d3f0     40 8D 06 F1 | 	add	local01, #320
0d3f4     46 75 02 F6 | 	mov	arg01, local01
0d3f8     23 00 00 FF 
0d3fc     3C 8D 86 F1 | 	sub	local01, ##18236
0d400     46 79 02 FB | 	rdlong	arg03, local01
0d404     4D 77 02 F6 | 	mov	arg02, local08
0d408     10 DD BF FD | 	call	#_motion_state_window_init
0d40c     A8 F0 03 F6 | 	mov	ptra, fp
0d410     B3 00 A0 FD | 	call	#popregs_
0d414                 | _status_page_init_ret
0d414     2D 00 64 FD | 	ret
0d418                 | 
0d418                 | _status_page_run
0d418     08 4C 05 F6 | 	mov	COUNT_, #8
0d41c     A9 00 A0 FD | 	call	#pushregs_
0d420     70 F0 07 F1 | 	add	ptra, #112
0d424     A8 74 62 FC | 	wrlong	arg01, fp
0d428     DA 00 00 FF 
0d42c     68 D6 05 F1 | 	add	ptr__dat__, ##111720
0d430     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
0d434     DA 00 00 FF 
0d438     68 D6 85 F1 | 	sub	ptr__dat__, ##111720
0d43c     A8 8C 02 FB | 	rdlong	local01, fp
0d440     04 8C 06 F1 | 	add	local01, #4
0d444     46 75 02 FB | 	rdlong	arg01, local01
0d448     A8 76 02 FB | 	rdlong	arg02, fp
0d44c     18 76 06 F1 | 	add	arg02, #24
0d450     5C C3 BF FD | 	call	#_module_draw
0d454     04 50 05 F1 | 	add	fp, #4
0d458     A8 74 02 F6 | 	mov	arg01, fp
0d45c     04 50 85 F1 | 	sub	fp, #4
0d460     A8 78 02 FB | 	rdlong	arg03, fp
0d464     08 78 06 F1 | 	add	arg03, #8
0d468     3C 77 02 FB | 	rdlong	arg02, arg03
0d46c     30 78 06 F6 | 	mov	arg03, #48
0d470     94 7D B1 FD | 	call	#__system____builtin_memmove
0d474     34 50 05 F1 | 	add	fp, #52
0d478     A8 02 48 FC | 	wrbyte	#1, fp
0d47c     04 50 05 F1 | 	add	fp, #4
0d480     A8 02 48 FC | 	wrbyte	#1, fp
0d484     04 50 05 F1 | 	add	fp, #4
0d488     A8 00 68 FC | 	wrlong	#0, fp
0d48c     3C 50 85 F1 | 	sub	fp, #60
0d490                 | ' 
0d490                 | '     while (!complete)
0d490                 | LR__0353
0d490     DA 00 00 FF 
0d494     68 D6 05 F1 | 	add	ptr__dat__, ##111720
0d498     EB 8E CA FA | 	rdbyte	local02, ptr__dat__ wz
0d49c     DA 00 00 FF 
0d4a0     68 D6 85 F1 | 	sub	ptr__dat__, ##111720
0d4a4     D8 07 90 5D |  if_ne	jmp	#LR__0382
0d4a8     40 50 05 F1 | 	add	fp, #64
0d4ac     A8 74 02 F6 | 	mov	arg01, fp
0d4b0     40 50 85 F1 | 	sub	fp, #64
0d4b4     A8 8E 02 FB | 	rdlong	local02, fp
0d4b8     08 8E 06 F1 | 	add	local02, #8
0d4bc     47 77 02 FB | 	rdlong	arg02, local02
0d4c0     30 78 06 F6 | 	mov	arg03, #48
0d4c4     40 7D B1 FD | 	call	#__system____builtin_memmove
0d4c8     44 50 05 F1 | 	add	fp, #68
0d4cc     A8 8E C2 FA | 	rdbyte	local02, fp
0d4d0     3C 50 85 F1 | 	sub	fp, #60
0d4d4     A8 90 C2 FA | 	rdbyte	local03, fp
0d4d8     08 50 85 F1 | 	sub	fp, #8
0d4dc     48 8F 0A F2 | 	cmp	local02, local03 wz
0d4e0     34 50 05 A1 |  if_e	add	fp, #52
0d4e4     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d4e8     34 50 85 A1 |  if_e	sub	fp, #52
0d4ec     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d4f0     5C 00 90 AD |  if_e	jmp	#LR__0356
0d4f4     38 50 05 F1 | 	add	fp, #56
0d4f8     A8 02 48 FC | 	wrbyte	#1, fp
0d4fc     0C 50 05 F1 | 	add	fp, #12
0d500     A8 8E CA FA | 	rdbyte	local02, fp wz
0d504     44 50 85 F1 | 	sub	fp, #68
0d508     24 00 90 AD |  if_e	jmp	#LR__0354
0d50c     A8 74 02 FB | 	rdlong	arg01, fp
0d510     04 00 00 FF 
0d514     D8 74 06 F1 | 	add	arg01, ##2264
0d518     A8 90 02 FB | 	rdlong	local03, fp
0d51c     14 90 06 F1 | 	add	local03, #20
0d520     48 77 02 FB | 	rdlong	arg02, local03
0d524     50 77 06 F1 | 	add	arg02, #336
0d528     14 BA BF FD | 	call	#_module_set_image
0d52c     20 00 90 FD | 	jmp	#LR__0355
0d530                 | LR__0354
0d530     A8 74 02 FB | 	rdlong	arg01, fp
0d534     04 00 00 FF 
0d538     D8 74 06 F1 | 	add	arg01, ##2264
0d53c     A8 90 02 FB | 	rdlong	local03, fp
0d540     14 90 06 F1 | 	add	local03, #20
0d544     48 77 02 FB | 	rdlong	arg02, local03
0d548     80 77 06 F1 | 	add	arg02, #384
0d54c     F0 B9 BF FD | 	call	#_module_set_image
0d550                 | LR__0355
0d550                 | LR__0356
0d550     48 50 05 F1 | 	add	fp, #72
0d554     A8 8E C2 FA | 	rdbyte	local02, fp
0d558     3C 50 85 F1 | 	sub	fp, #60
0d55c     A8 90 C2 FA | 	rdbyte	local03, fp
0d560     0C 50 85 F1 | 	sub	fp, #12
0d564     48 8F 0A F2 | 	cmp	local02, local03 wz
0d568     34 50 05 A1 |  if_e	add	fp, #52
0d56c     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d570     34 50 85 A1 |  if_e	sub	fp, #52
0d574     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d578     6C 00 90 AD |  if_e	jmp	#LR__0359
0d57c     38 50 05 F1 | 	add	fp, #56
0d580     A8 02 48 FC | 	wrbyte	#1, fp
0d584     38 50 85 F1 | 	sub	fp, #56
0d588     A8 8E 02 FB | 	rdlong	local02, fp
0d58c     08 8E 06 F1 | 	add	local02, #8
0d590     47 8D 02 FB | 	rdlong	local01, local02
0d594     08 8C 06 F1 | 	add	local01, #8
0d598     46 91 CA FA | 	rdbyte	local03, local01 wz
0d59c     28 00 90 AD |  if_e	jmp	#LR__0357
0d5a0     A8 74 02 FB | 	rdlong	arg01, fp
0d5a4     05 00 00 FF 
0d5a8     58 75 06 F1 | 	add	arg01, ##2904
0d5ac     A8 90 02 FB | 	rdlong	local03, fp
0d5b0     14 90 06 F1 | 	add	local03, #20
0d5b4     48 93 02 FB | 	rdlong	local04, local03
0d5b8     50 93 06 F1 | 	add	local04, #336
0d5bc     49 77 02 F6 | 	mov	arg02, local04
0d5c0     7C B9 BF FD | 	call	#_module_set_image
0d5c4     20 00 90 FD | 	jmp	#LR__0358
0d5c8                 | LR__0357
0d5c8     A8 74 02 FB | 	rdlong	arg01, fp
0d5cc     05 00 00 FF 
0d5d0     58 75 06 F1 | 	add	arg01, ##2904
0d5d4     A8 90 02 FB | 	rdlong	local03, fp
0d5d8     14 90 06 F1 | 	add	local03, #20
0d5dc     48 77 02 FB | 	rdlong	arg02, local03
0d5e0     80 77 06 F1 | 	add	arg02, #384
0d5e4     58 B9 BF FD | 	call	#_module_set_image
0d5e8                 | LR__0358
0d5e8                 | LR__0359
0d5e8     4C 50 05 F1 | 	add	fp, #76
0d5ec     A8 8E 02 FB | 	rdlong	local02, fp
0d5f0     3C 50 85 F1 | 	sub	fp, #60
0d5f4     A8 90 02 FB | 	rdlong	local03, fp
0d5f8     10 50 85 F1 | 	sub	fp, #16
0d5fc     48 8F 0A F2 | 	cmp	local02, local03 wz
0d600     34 50 05 A1 |  if_e	add	fp, #52
0d604     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d608     34 50 85 A1 |  if_e	sub	fp, #52
0d60c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d610     24 01 90 AD |  if_e	jmp	#LR__0365
0d614     38 50 05 F1 | 	add	fp, #56
0d618     A8 02 48 FC | 	wrbyte	#1, fp
0d61c     38 50 85 F1 | 	sub	fp, #56
0d620     A8 8E 02 FB | 	rdlong	local02, fp
0d624     08 8E 06 F1 | 	add	local02, #8
0d628     47 8D 02 FB | 	rdlong	local01, local02
0d62c     0C 8C 06 F1 | 	add	local01, #12
0d630     46 91 0A FB | 	rdlong	local03, local01 wz
0d634     44 00 90 5D |  if_ne	jmp	#LR__0360
0d638     A8 74 02 FB | 	rdlong	arg01, fp
0d63c     08 00 00 FF 
0d640     58 74 06 F1 | 	add	arg01, ##4184
0d644     A8 90 02 FB | 	rdlong	local03, fp
0d648     14 90 06 F1 | 	add	local03, #20
0d64c     48 77 02 FB | 	rdlong	arg02, local03
0d650     50 77 06 F1 | 	add	arg02, #336
0d654     E8 B8 BF FD | 	call	#_module_set_image
0d658     A8 74 02 FB | 	rdlong	arg01, fp
0d65c     09 00 00 FF 
0d660     D8 74 06 F1 | 	add	arg01, ##4824
0d664     A8 90 02 FB | 	rdlong	local03, fp
0d668     14 90 06 F1 | 	add	local03, #20
0d66c     48 77 02 FB | 	rdlong	arg02, local03
0d670     50 77 06 F1 | 	add	arg02, #336
0d674     C8 B8 BF FD | 	call	#_module_set_image
0d678     BC 00 90 FD | 	jmp	#LR__0364
0d67c                 | LR__0360
0d67c     A8 8E 02 FB | 	rdlong	local02, fp
0d680     08 8E 06 F1 | 	add	local02, #8
0d684     47 8D 02 FB | 	rdlong	local01, local02
0d688     0C 8C 06 F1 | 	add	local01, #12
0d68c     46 91 02 FB | 	rdlong	local03, local01
0d690     02 90 0E F2 | 	cmp	local03, #2 wz
0d694     44 00 90 5D |  if_ne	jmp	#LR__0361
0d698     A8 74 02 FB | 	rdlong	arg01, fp
0d69c     08 00 00 FF 
0d6a0     58 74 06 F1 | 	add	arg01, ##4184
0d6a4     A8 90 02 FB | 	rdlong	local03, fp
0d6a8     14 90 06 F1 | 	add	local03, #20
0d6ac     48 77 02 FB | 	rdlong	arg02, local03
0d6b0     50 77 06 F1 | 	add	arg02, #336
0d6b4     88 B8 BF FD | 	call	#_module_set_image
0d6b8     A8 74 02 FB | 	rdlong	arg01, fp
0d6bc     09 00 00 FF 
0d6c0     D8 74 06 F1 | 	add	arg01, ##4824
0d6c4     A8 90 02 FB | 	rdlong	local03, fp
0d6c8     14 90 06 F1 | 	add	local03, #20
0d6cc     48 77 02 FB | 	rdlong	arg02, local03
0d6d0     80 77 06 F1 | 	add	arg02, #384
0d6d4     68 B8 BF FD | 	call	#_module_set_image
0d6d8     5C 00 90 FD | 	jmp	#LR__0363
0d6dc                 | LR__0361
0d6dc     A8 8E 02 FB | 	rdlong	local02, fp
0d6e0     08 8E 06 F1 | 	add	local02, #8
0d6e4     47 8D 02 FB | 	rdlong	local01, local02
0d6e8     0C 8C 06 F1 | 	add	local01, #12
0d6ec     46 91 02 FB | 	rdlong	local03, local01
0d6f0     01 90 0E F2 | 	cmp	local03, #1 wz
0d6f4     40 00 90 5D |  if_ne	jmp	#LR__0362
0d6f8     A8 74 02 FB | 	rdlong	arg01, fp
0d6fc     08 00 00 FF 
0d700     58 74 06 F1 | 	add	arg01, ##4184
0d704     A8 90 02 FB | 	rdlong	local03, fp
0d708     14 90 06 F1 | 	add	local03, #20
0d70c     48 77 02 FB | 	rdlong	arg02, local03
0d710     80 77 06 F1 | 	add	arg02, #384
0d714     28 B8 BF FD | 	call	#_module_set_image
0d718     A8 74 02 FB | 	rdlong	arg01, fp
0d71c     09 00 00 FF 
0d720     D8 74 06 F1 | 	add	arg01, ##4824
0d724     A8 90 02 FB | 	rdlong	local03, fp
0d728     14 90 06 F1 | 	add	local03, #20
0d72c     48 77 02 FB | 	rdlong	arg02, local03
0d730     50 77 06 F1 | 	add	arg02, #336
0d734     08 B8 BF FD | 	call	#_module_set_image
0d738                 | LR__0362
0d738                 | LR__0363
0d738                 | LR__0364
0d738                 | LR__0365
0d738     50 50 05 F1 | 	add	fp, #80
0d73c     A8 8E C2 FA | 	rdbyte	local02, fp
0d740     3C 50 85 F1 | 	sub	fp, #60
0d744     A8 90 C2 FA | 	rdbyte	local03, fp
0d748     14 50 85 F1 | 	sub	fp, #20
0d74c     48 8F 0A F2 | 	cmp	local02, local03 wz
0d750     34 50 05 A1 |  if_e	add	fp, #52
0d754     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d758     34 50 85 A1 |  if_e	sub	fp, #52
0d75c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d760     68 00 90 AD |  if_e	jmp	#LR__0368
0d764     38 50 05 F1 | 	add	fp, #56
0d768     A8 02 48 FC | 	wrbyte	#1, fp
0d76c     38 50 85 F1 | 	sub	fp, #56
0d770     A8 8E 02 FB | 	rdlong	local02, fp
0d774     08 8E 06 F1 | 	add	local02, #8
0d778     47 8D 02 FB | 	rdlong	local01, local02
0d77c     10 8C 06 F1 | 	add	local01, #16
0d780     46 91 CA FA | 	rdbyte	local03, local01 wz
0d784     24 00 90 AD |  if_e	jmp	#LR__0366
0d788     A8 74 02 FB | 	rdlong	arg01, fp
0d78c     06 00 00 FF 
0d790     D8 75 06 F1 | 	add	arg01, ##3544
0d794     A8 90 02 FB | 	rdlong	local03, fp
0d798     14 90 06 F1 | 	add	local03, #20
0d79c     48 77 02 FB | 	rdlong	arg02, local03
0d7a0     50 77 06 F1 | 	add	arg02, #336
0d7a4     98 B7 BF FD | 	call	#_module_set_image
0d7a8     20 00 90 FD | 	jmp	#LR__0367
0d7ac                 | LR__0366
0d7ac     A8 74 02 FB | 	rdlong	arg01, fp
0d7b0     06 00 00 FF 
0d7b4     D8 75 06 F1 | 	add	arg01, ##3544
0d7b8     A8 90 02 FB | 	rdlong	local03, fp
0d7bc     14 90 06 F1 | 	add	local03, #20
0d7c0     48 77 02 FB | 	rdlong	arg02, local03
0d7c4     80 77 06 F1 | 	add	arg02, #384
0d7c8     74 B7 BF FD | 	call	#_module_set_image
0d7cc                 | LR__0367
0d7cc                 | LR__0368
0d7cc     51 50 05 F1 | 	add	fp, #81
0d7d0     A8 8E C2 FA | 	rdbyte	local02, fp
0d7d4     3C 50 85 F1 | 	sub	fp, #60
0d7d8     A8 90 C2 FA | 	rdbyte	local03, fp
0d7dc     15 50 85 F1 | 	sub	fp, #21
0d7e0     48 8F 0A F2 | 	cmp	local02, local03 wz
0d7e4     34 50 05 A1 |  if_e	add	fp, #52
0d7e8     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d7ec     34 50 85 A1 |  if_e	sub	fp, #52
0d7f0     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d7f4     68 00 90 AD |  if_e	jmp	#LR__0371
0d7f8     38 50 05 F1 | 	add	fp, #56
0d7fc     A8 02 48 FC | 	wrbyte	#1, fp
0d800     38 50 85 F1 | 	sub	fp, #56
0d804     A8 8E 02 FB | 	rdlong	local02, fp
0d808     08 8E 06 F1 | 	add	local02, #8
0d80c     47 8D 02 FB | 	rdlong	local01, local02
0d810     11 8C 06 F1 | 	add	local01, #17
0d814     46 91 CA FA | 	rdbyte	local03, local01 wz
0d818     24 00 90 AD |  if_e	jmp	#LR__0369
0d81c     A8 74 02 FB | 	rdlong	arg01, fp
0d820     0A 00 00 FF 
0d824     58 75 06 F1 | 	add	arg01, ##5464
0d828     A8 90 02 FB | 	rdlong	local03, fp
0d82c     14 90 06 F1 | 	add	local03, #20
0d830     48 77 02 FB | 	rdlong	arg02, local03
0d834     50 77 06 F1 | 	add	arg02, #336
0d838     04 B7 BF FD | 	call	#_module_set_image
0d83c     20 00 90 FD | 	jmp	#LR__0370
0d840                 | LR__0369
0d840     A8 74 02 FB | 	rdlong	arg01, fp
0d844     0A 00 00 FF 
0d848     58 75 06 F1 | 	add	arg01, ##5464
0d84c     A8 90 02 FB | 	rdlong	local03, fp
0d850     14 90 06 F1 | 	add	local03, #20
0d854     48 77 02 FB | 	rdlong	arg02, local03
0d858     80 77 06 F1 | 	add	arg02, #384
0d85c     E0 B6 BF FD | 	call	#_module_set_image
0d860                 | LR__0370
0d860                 | LR__0371
0d860     52 50 05 F1 | 	add	fp, #82
0d864     A8 8E C2 FA | 	rdbyte	local02, fp
0d868     3C 50 85 F1 | 	sub	fp, #60
0d86c     A8 90 C2 FA | 	rdbyte	local03, fp
0d870     16 50 85 F1 | 	sub	fp, #22
0d874     48 8F 0A F2 | 	cmp	local02, local03 wz
0d878     34 50 05 A1 |  if_e	add	fp, #52
0d87c     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d880     34 50 85 A1 |  if_e	sub	fp, #52
0d884     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d888     68 00 90 AD |  if_e	jmp	#LR__0374
0d88c     38 50 05 F1 | 	add	fp, #56
0d890     A8 02 48 FC | 	wrbyte	#1, fp
0d894     38 50 85 F1 | 	sub	fp, #56
0d898     A8 8E 02 FB | 	rdlong	local02, fp
0d89c     08 8E 06 F1 | 	add	local02, #8
0d8a0     47 8D 02 FB | 	rdlong	local01, local02
0d8a4     12 8C 06 F1 | 	add	local01, #18
0d8a8     46 91 CA FA | 	rdbyte	local03, local01 wz
0d8ac     24 00 90 AD |  if_e	jmp	#LR__0372
0d8b0     A8 74 02 FB | 	rdlong	arg01, fp
0d8b4     0B 00 00 FF 
0d8b8     D8 75 06 F1 | 	add	arg01, ##6104
0d8bc     A8 90 02 FB | 	rdlong	local03, fp
0d8c0     14 90 06 F1 | 	add	local03, #20
0d8c4     48 77 02 FB | 	rdlong	arg02, local03
0d8c8     50 77 06 F1 | 	add	arg02, #336
0d8cc     70 B6 BF FD | 	call	#_module_set_image
0d8d0     20 00 90 FD | 	jmp	#LR__0373
0d8d4                 | LR__0372
0d8d4     A8 74 02 FB | 	rdlong	arg01, fp
0d8d8     0B 00 00 FF 
0d8dc     D8 75 06 F1 | 	add	arg01, ##6104
0d8e0     A8 90 02 FB | 	rdlong	local03, fp
0d8e4     14 90 06 F1 | 	add	local03, #20
0d8e8     48 77 02 FB | 	rdlong	arg02, local03
0d8ec     80 77 06 F1 | 	add	arg02, #384
0d8f0     4C B6 BF FD | 	call	#_module_set_image
0d8f4                 | LR__0373
0d8f4                 | LR__0374
0d8f4     53 50 05 F1 | 	add	fp, #83
0d8f8     A8 8E C2 FA | 	rdbyte	local02, fp
0d8fc     3C 50 85 F1 | 	sub	fp, #60
0d900     A8 96 C2 FA | 	rdbyte	local06, fp
0d904     17 50 85 F1 | 	sub	fp, #23
0d908     4B 91 E2 F8 | 	getbyte	local03, local06, #0
0d90c     48 8F 0A F2 | 	cmp	local02, local03 wz
0d910     34 50 05 A1 |  if_e	add	fp, #52
0d914     A8 92 C2 AA |  if_e	rdbyte	local04, fp
0d918     34 50 85 A1 |  if_e	sub	fp, #52
0d91c     49 95 0A A6 |  if_e	mov	local05, local04 wz
0d920     78 00 90 AD |  if_e	jmp	#LR__0377
0d924     38 50 05 F1 | 	add	fp, #56
0d928     A8 02 48 FC | 	wrbyte	#1, fp
0d92c     38 50 85 F1 | 	sub	fp, #56
0d930     A8 8E 02 FB | 	rdlong	local02, fp
0d934     08 8E 06 F1 | 	add	local02, #8
0d938     47 8D 02 FB | 	rdlong	local01, local02
0d93c     13 8C 06 F1 | 	add	local01, #19
0d940     46 97 CA FA | 	rdbyte	local06, local01 wz
0d944     2C 00 90 AD |  if_e	jmp	#LR__0375
0d948     A8 74 02 FB | 	rdlong	arg01, fp
0d94c     0D 00 00 FF 
0d950     58 74 06 F1 | 	add	arg01, ##6744
0d954     A8 90 02 FB | 	rdlong	local03, fp
0d958     14 90 06 F1 | 	add	local03, #20
0d95c     48 95 02 FB | 	rdlong	local05, local03
0d960     4A 93 02 F6 | 	mov	local04, local05
0d964     50 93 06 F1 | 	add	local04, #336
0d968     49 77 02 F6 | 	mov	arg02, local04
0d96c     D0 B5 BF FD | 	call	#_module_set_image
0d970     28 00 90 FD | 	jmp	#LR__0376
0d974                 | LR__0375
0d974     A8 74 02 FB | 	rdlong	arg01, fp
0d978     0D 00 00 FF 
0d97c     58 74 06 F1 | 	add	arg01, ##6744
0d980     A8 90 02 FB | 	rdlong	local03, fp
0d984     14 90 06 F1 | 	add	local03, #20
0d988     48 95 02 FB | 	rdlong	local05, local03
0d98c     4A 93 02 F6 | 	mov	local04, local05
0d990     80 93 06 F1 | 	add	local04, #384
0d994     49 77 02 F6 | 	mov	arg02, local04
0d998     A4 B5 BF FD | 	call	#_module_set_image
0d99c                 | LR__0376
0d99c                 | LR__0377
0d99c     A8 74 02 FB | 	rdlong	arg01, fp
0d9a0     18 74 06 F1 | 	add	arg01, #24
0d9a4     A8 90 02 FB | 	rdlong	local03, fp
0d9a8     04 90 06 F1 | 	add	local03, #4
0d9ac     48 77 02 FB | 	rdlong	arg02, local03
0d9b0     A8 78 02 FB | 	rdlong	arg03, fp
0d9b4     48 B2 BF FD | 	call	#_module_touch_check
0d9b8     A8 8C 02 FB | 	rdlong	local01, fp
0d9bc     04 8C 06 F1 | 	add	local01, #4
0d9c0     46 75 02 FB | 	rdlong	arg01, local01
0d9c4     A8 76 02 FB | 	rdlong	arg02, fp
0d9c8     18 76 06 F1 | 	add	arg02, #24
0d9cc     A8 78 02 FB | 	rdlong	arg03, fp
0d9d0     5C B1 BF FD | 	call	#_module_update_check
0d9d4     38 50 05 F1 | 	add	fp, #56
0d9d8     A8 8E CA FA | 	rdbyte	local02, fp wz
0d9dc     38 50 85 F1 | 	sub	fp, #56
0d9e0     28 00 90 AD |  if_e	jmp	#LR__0378
0d9e4     A8 8C 02 FB | 	rdlong	local01, fp
0d9e8     04 8C 06 F1 | 	add	local01, #4
0d9ec     46 75 02 FB | 	rdlong	arg01, local01
0d9f0     A8 76 02 FB | 	rdlong	arg02, fp
0d9f4     01 00 00 FF 
0d9f8     D8 77 06 F1 | 	add	arg02, ##984
0d9fc     B0 BD BF FD | 	call	#_module_draw
0da00     38 50 05 F1 | 	add	fp, #56
0da04     A8 00 48 FC | 	wrbyte	#0, fp
0da08     38 50 85 F1 | 	sub	fp, #56
0da0c                 | LR__0378
0da0c                 | '         {
0da0c                 | '             module_draw(page->display, &(page->machineStateWindow));
0da0c                 | '             updateMachineState =  (0) ;
0da0c                 | '         }
0da0c                 | '         while (display_update_touch(page->display) == 0 && state_machine_equal(page->stateMachine, &currentState))
0da0c                 | LR__0379
0da0c     A8 8C 02 FB | 	rdlong	local01, fp
0da10     04 8C 06 F1 | 	add	local01, #4
0da14     46 75 02 FB | 	rdlong	arg01, local01
0da18     58 7C BF FD | 	call	#_display_update_touch
0da1c     00 34 0E F2 | 	cmp	result1, #0 wz
0da20     30 02 90 5D |  if_ne	jmp	#LR__0381
0da24     A8 90 02 FB | 	rdlong	local03, fp
0da28     08 90 06 F1 | 	add	local03, #8
0da2c     48 75 02 FB | 	rdlong	arg01, local03
0da30     40 50 05 F1 | 	add	fp, #64
0da34     A8 76 02 F6 | 	mov	arg02, fp
0da38     40 50 85 F1 | 	sub	fp, #64
0da3c     F0 51 BF FD | 	call	#_state_machine_equal
0da40     00 34 0E F2 | 	cmp	result1, #0 wz
0da44     0C 02 90 AD |  if_e	jmp	#LR__0381
0da48     04 77 B1 FD | 	call	#__system___getms
0da4c     1A 8F 02 F6 | 	mov	local02, result1
0da50     3C 50 05 F1 | 	add	fp, #60
0da54     A8 90 02 FB | 	rdlong	local03, fp
0da58     3C 50 85 F1 | 	sub	fp, #60
0da5c     48 8F 82 F1 | 	sub	local02, local03
0da60     65 8E 16 F2 | 	cmp	local02, #101 wc
0da64     10 01 90 CD |  if_b	jmp	#LR__0380
0da68     E4 76 B1 FD | 	call	#__system___getms
0da6c     3C 50 05 F1 | 	add	fp, #60
0da70     A8 34 62 FC | 	wrlong	result1, fp
0da74     3C 50 85 F1 | 	sub	fp, #60
0da78     A8 8E 02 FB | 	rdlong	local02, fp
0da7c     29 00 00 FF 
0da80     DC 8F 06 F1 | 	add	local02, ##21468
0da84     4A 01 00 FF 
0da88     FE 8D 06 F6 | 	mov	local01, ##@LR__1978
0da8c     A8 96 02 FB | 	rdlong	local06, fp
0da90     10 96 06 F1 | 	add	local06, #16
0da94     4B 95 02 FB | 	rdlong	local05, local06
0da98     04 94 06 F1 | 	add	local05, #4
0da9c     4A 75 02 FB | 	rdlong	arg01, local05
0daa0     A8 94 02 FB | 	rdlong	local05, fp
0daa4     0C 94 06 F1 | 	add	local05, #12
0daa8     4A 77 02 FB | 	rdlong	arg02, local05
0daac     18 76 06 F1 | 	add	arg02, #24
0dab0     E4 23 B0 FD | 	call	#_steps_to_mm
0dab4     1A 91 02 F6 | 	mov	local03, result1
0dab8     47 75 02 F6 | 	mov	arg01, local02
0dabc     46 77 02 F6 | 	mov	arg02, local01
0dac0     F8 79 02 F6 | 	mov	arg03, ptra
0dac4     61 91 66 FC | 	wrlong	local03, ptra++
0dac8     58 41 BF FD | 	call	#_sprintf
0dacc     04 F0 87 F1 | 	sub	ptra, #4
0dad0     A8 8E 02 FB | 	rdlong	local02, fp
0dad4     29 00 00 FF 
0dad8     C8 8F 06 F1 | 	add	local02, ##21448
0dadc     4B 01 00 FF 
0dae0     06 8C 06 F6 | 	mov	local01, ##@LR__1979
0dae4     A8 96 02 FB | 	rdlong	local06, fp
0dae8     10 96 06 F1 | 	add	local06, #16
0daec     4B 95 02 FB | 	rdlong	local05, local06
0daf0     4A 75 02 FB | 	rdlong	arg01, local05
0daf4     A8 94 02 FB | 	rdlong	local05, fp
0daf8     0C 94 06 F1 | 	add	local05, #12
0dafc     4A 99 02 FB | 	rdlong	local07, local05
0db00     18 98 06 F1 | 	add	local07, #24
0db04     4C 77 02 F6 | 	mov	arg02, local07
0db08     E8 AA BF FD | 	call	#_raw_to_force
0db0c     1A 75 02 F6 | 	mov	arg01, result1
0db10     58 92 B1 FD | 	call	#__system___float_fromint
0db14     1A 75 02 F6 | 	mov	arg01, result1
0db18     00 3D 22 FF 
0db1c     00 76 06 F6 | 	mov	arg02, ##1148846080
0db20     9C 97 B1 FD | 	call	#__system___float_div
0db24     1A 91 02 F6 | 	mov	local03, result1
0db28     47 75 02 F6 | 	mov	arg01, local02
0db2c     46 77 02 F6 | 	mov	arg02, local01
0db30     F8 79 02 F6 | 	mov	arg03, ptra
0db34     61 91 66 FC | 	wrlong	local03, ptra++
0db38     E8 40 BF FD | 	call	#_sprintf
0db3c     04 F0 87 F1 | 	sub	ptra, #4
0db40     A8 8C 02 FB | 	rdlong	local01, fp
0db44     04 8C 06 F1 | 	add	local01, #4
0db48     46 75 02 FB | 	rdlong	arg01, local01
0db4c     A8 76 02 FB | 	rdlong	arg02, fp
0db50     0F 00 00 FF 
0db54     58 77 06 F1 | 	add	arg02, ##8024
0db58     54 BC BF FD | 	call	#_module_draw
0db5c     A8 8C 02 FB | 	rdlong	local01, fp
0db60     04 8C 06 F1 | 	add	local01, #4
0db64     46 75 02 FB | 	rdlong	arg01, local01
0db68     A8 76 02 FB | 	rdlong	arg02, fp
0db6c     10 00 00 FF 
0db70     D8 77 06 F1 | 	add	arg02, ##8664
0db74     38 BC BF FD | 	call	#_module_draw
0db78                 | LR__0380
0db78     A8 8E 02 FB | 	rdlong	local02, fp
0db7c     11 00 00 FF 
0db80     18 8F 06 F1 | 	add	local02, ##8984
0db84     A8 90 02 FB | 	rdlong	local03, fp
0db88     10 90 06 F1 | 	add	local03, #16
0db8c     48 97 02 FB | 	rdlong	local06, local03
0db90     04 96 06 F1 | 	add	local06, #4
0db94     4B 75 02 FB | 	rdlong	arg01, local06
0db98     A8 96 02 FB | 	rdlong	local06, fp
0db9c     0C 96 06 F1 | 	add	local06, #12
0dba0     4B 77 02 FB | 	rdlong	arg02, local06
0dba4     18 76 06 F1 | 	add	arg02, #24
0dba8     EC 22 B0 FD | 	call	#_steps_to_mm
0dbac     1A 77 02 F6 | 	mov	arg02, result1
0dbb0     47 75 02 F6 | 	mov	arg01, local02
0dbb4     74 E9 BF FD | 	call	#_module_graph_insert
0dbb8     A8 8C 02 FB | 	rdlong	local01, fp
0dbbc     04 8C 06 F1 | 	add	local01, #4
0dbc0     46 75 02 FB | 	rdlong	arg01, local01
0dbc4     A8 76 02 FB | 	rdlong	arg02, fp
0dbc8     11 00 00 FF 
0dbcc     18 77 06 F1 | 	add	arg02, ##8984
0dbd0     DC BB BF FD | 	call	#_module_draw
0dbd4     A8 8E 02 FB | 	rdlong	local02, fp
0dbd8     16 00 00 FF 
0dbdc     9C 8F 06 F1 | 	add	local02, ##11676
0dbe0     A8 90 02 FB | 	rdlong	local03, fp
0dbe4     10 90 06 F1 | 	add	local03, #16
0dbe8     48 97 02 FB | 	rdlong	local06, local03
0dbec     4B 75 02 FB | 	rdlong	arg01, local06
0dbf0     A8 96 02 FB | 	rdlong	local06, fp
0dbf4     0C 96 06 F1 | 	add	local06, #12
0dbf8     4B 93 02 FB | 	rdlong	local04, local06
0dbfc     49 95 02 F6 | 	mov	local05, local04
0dc00     18 94 06 F1 | 	add	local05, #24
0dc04     4A 9B 02 F6 | 	mov	local08, local05
0dc08     4D 77 02 F6 | 	mov	arg02, local08
0dc0c     E4 A9 BF FD | 	call	#_raw_to_force
0dc10     1A 75 02 F6 | 	mov	arg01, result1
0dc14     54 91 B1 FD | 	call	#__system___float_fromint
0dc18     1A 75 02 F6 | 	mov	arg01, result1
0dc1c     00 3D 22 FF 
0dc20     00 76 06 F6 | 	mov	arg02, ##1148846080
0dc24     98 96 B1 FD | 	call	#__system___float_div
0dc28     1A 77 02 F6 | 	mov	arg02, result1
0dc2c     47 75 02 F6 | 	mov	arg01, local02
0dc30     F8 E8 BF FD | 	call	#_module_graph_insert
0dc34     A8 8C 02 FB | 	rdlong	local01, fp
0dc38     04 8C 06 F1 | 	add	local01, #4
0dc3c     46 75 02 FB | 	rdlong	arg01, local01
0dc40     A8 76 02 FB | 	rdlong	arg02, fp
0dc44     16 00 00 FF 
0dc48     9C 77 06 F1 | 	add	arg02, ##11676
0dc4c     60 BB BF FD | 	call	#_module_draw
0dc50     B8 FD 9F FD | 	jmp	#LR__0379
0dc54                 | LR__0381
0dc54     04 50 05 F1 | 	add	fp, #4
0dc58     A8 74 02 F6 | 	mov	arg01, fp
0dc5c     3C 50 05 F1 | 	add	fp, #60
0dc60     A8 76 02 F6 | 	mov	arg02, fp
0dc64     40 50 85 F1 | 	sub	fp, #64
0dc68     30 78 06 F6 | 	mov	arg03, #48
0dc6c     98 75 B1 FD | 	call	#__system____builtin_memmove
0dc70     34 50 05 F1 | 	add	fp, #52
0dc74     A8 00 48 FC | 	wrbyte	#0, fp
0dc78     34 50 85 F1 | 	sub	fp, #52
0dc7c     10 F8 9F FD | 	jmp	#LR__0353
0dc80                 | LR__0382
0dc80     A8 F0 03 F6 | 	mov	ptra, fp
0dc84     B3 00 A0 FD | 	call	#popregs_
0dc88                 | _status_page_run_ret
0dc88     2D 00 64 FD | 	ret
0dc8c                 | 
0dc8c                 | _control_begin
0dc8c     3A 77 62 FC | 	wrlong	arg02, arg01
0dc90     04 74 06 F1 | 	add	arg01, #4
0dc94     3A 7B 62 FC | 	wrlong	arg04, arg01
0dc98     04 74 06 F1 | 	add	arg01, #4
0dc9c     3A 79 62 FC | 	wrlong	arg03, arg01
0dca0     08 74 86 F1 | 	sub	arg01, #8
0dca4     DA 00 00 FF 
0dca8     F8 D6 05 F1 | 	add	ptr__dat__, ##111864
0dcac     EB 7A 02 F6 | 	mov	arg04, ptr__dat__
0dcb0     3D 93 61 FC | 	wrlong	objptr, arg04
0dcb4     04 7A 06 F1 | 	add	arg04, #4
0dcb8     3D D5 61 FC | 	wrlong	ptr__control_cog_0827_, arg04
0dcbc     04 7A 06 F1 | 	add	arg04, #4
0dcc0     3D 75 62 FC | 	wrlong	arg01, arg04
0dcc4     EB 78 02 F6 | 	mov	arg03, ptr__dat__
0dcc8     DA 00 00 FF 
0dccc     F8 D6 85 F1 | 	sub	ptr__dat__, ##111864
0dcd0     1E 34 06 F6 | 	mov	result1, #30
0dcd4     28 78 62 FD | 	setq	arg03
0dcd8     C6 34 F2 FC | 	coginit	result1, entryptr__ wc
0dcdc     01 34 66 C6 |  if_b	neg	result1, #1
0dce0     1F 00 00 FF 
0dce4     54 75 06 F1 | 	add	arg01, ##16212
0dce8     3A 35 62 FC | 	wrlong	result1, arg01
0dcec     FF FF 7F FF 
0dcf0     FF 35 0E F2 | 	cmp	result1, ##-1 wz
0dcf4                 | '     {
0dcf4                 | '         return  (1) ;
0dcf4     01 34 06 56 |  if_ne	mov	result1, #1
0dcf8                 | '     }
0dcf8                 | '     return  (0) ;
0dcf8     00 34 06 A6 |  if_e	mov	result1, #0
0dcfc                 | _control_begin_ret
0dcfc     2D 00 64 FD | 	ret
0dd00                 | 
0dd00                 | _automatic_page_init
0dd00     05 4C 05 F6 | 	mov	COUNT_, #5
0dd04     A9 00 A0 FD | 	call	#pushregs_
0dd08     3A 8D 02 F6 | 	mov	local01, arg01
0dd0c     46 77 62 FC | 	wrlong	arg02, local01
0dd10     04 8C 06 F1 | 	add	local01, #4
0dd14     46 79 62 FC | 	wrlong	arg03, local01
0dd18     04 8C 06 F1 | 	add	local01, #4
0dd1c     46 7B 62 FC | 	wrlong	arg04, local01
0dd20     04 8C 06 F1 | 	add	local01, #4
0dd24     46 7D 62 FC | 	wrlong	arg05, local01
0dd28     08 8C 06 F1 | 	add	local01, #8
0dd2c     46 8F 02 F6 | 	mov	local02, local01
0dd30     47 75 02 F6 | 	mov	arg01, local02
0dd34     00 76 06 F6 | 	mov	arg02, #0
0dd38     9C AC BF FD | 	call	#_module_init
0dd3c     40 8D 06 F1 | 	add	local01, #320
0dd40     46 91 02 F6 | 	mov	local03, local01
0dd44     48 75 02 F6 | 	mov	arg01, local03
0dd48     47 77 02 F6 | 	mov	arg02, local02
0dd4c     88 AC BF FD | 	call	#_module_init
0dd50     48 75 02 F6 | 	mov	arg01, local03
0dd54     CC 74 06 F1 | 	add	arg01, #204
0dd58     3A 0B 68 FC | 	wrlong	#5, arg01
0dd5c     24 74 06 F1 | 	add	arg01, #36
0dd60     02 00 80 FF 
0dd64     3A 01 68 FC | 	wrlong	##1024, arg01
0dd68     04 74 06 F1 | 	add	arg01, #4
0dd6c     01 00 80 FF 
0dd70     3A B1 68 FC | 	wrlong	##600, arg01
0dd74     48 75 02 F6 | 	mov	arg01, local03
0dd78     E8 74 06 F1 | 	add	arg01, #232
0dd7c     3A 01 68 FC | 	wrlong	#0, arg01
0dd80     04 74 06 F1 | 	add	arg01, #4
0dd84     3A 01 68 FC | 	wrlong	#0, arg01
0dd88     48 75 02 F6 | 	mov	arg01, local03
0dd8c     F8 74 06 F1 | 	add	arg01, #248
0dd90     3A 29 68 FC | 	wrlong	#20, arg01
0dd94     04 74 06 F1 | 	add	arg01, #4
0dd98     3A 29 68 FC | 	wrlong	#20, arg01
0dd9c     48 75 02 F6 | 	mov	arg01, local03
0dda0     01 00 00 FF 
0dda4     73 78 06 F6 | 	mov	arg03, ##627
0dda8     10 75 06 F1 | 	add	arg01, #272
0ddac     01 00 80 FF 
0ddb0     3A E7 68 FC | 	wrlong	##627, arg01
0ddb4     04 74 86 F1 | 	sub	arg01, #4
0ddb8     01 00 80 FF 
0ddbc     3A E7 68 FC | 	wrlong	##627, arg01
0ddc0     C9 74 02 F6 | 	mov	arg01, objptr
0ddc4     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
0ddc8     1C 75 B1 FD | 	call	#__system___make_methodptr
0ddcc     48 75 02 F6 | 	mov	arg01, local03
0ddd0     30 75 06 F1 | 	add	arg01, #304
0ddd4     3A 35 62 FC | 	wrlong	result1, arg01
0ddd8     40 8D 06 F1 | 	add	local01, #320
0dddc     46 93 02 F6 | 	mov	local04, local01
0dde0     49 75 02 F6 | 	mov	arg01, local04
0dde4     48 77 02 F6 | 	mov	arg02, local03
0dde8     EC AB BF FD | 	call	#_module_init
0ddec     49 75 02 F6 | 	mov	arg01, local04
0ddf0     CC 74 06 F1 | 	add	arg01, #204
0ddf4     3A 0B 68 FC | 	wrlong	#5, arg01
0ddf8     24 74 06 F1 | 	add	arg01, #36
0ddfc     3A AB 6A FC | 	wrlong	#341, arg01
0de00     04 74 06 F1 | 	add	arg01, #4
0de04     3A 01 68 FC | 	wrlong	#0, arg01
0de08     49 75 02 F6 | 	mov	arg01, local04
0de0c     8C B8 BF FD | 	call	#_module_fit_height
0de10     49 75 02 F6 | 	mov	arg01, local04
0de14     F8 74 06 F1 | 	add	arg01, #248
0de18     3A 29 68 FC | 	wrlong	#20, arg01
0de1c     04 74 06 F1 | 	add	arg01, #4
0de20     3A 29 68 FC | 	wrlong	#20, arg01
0de24     49 75 02 F6 | 	mov	arg01, local04
0de28     00 75 06 F1 | 	add	arg01, #256
0de2c     3A 15 68 FC | 	wrlong	#10, arg01
0de30     04 74 06 F1 | 	add	arg01, #4
0de34     3A 15 68 FC | 	wrlong	#10, arg01
0de38     49 75 02 F6 | 	mov	arg01, local04
0de3c     10 75 06 F1 | 	add	arg01, #272
0de40     1D 00 80 FF 
0de44     3A E9 6A FC | 	wrlong	##15220, arg01
0de48     04 74 86 F1 | 	sub	arg01, #4
0de4c     01 00 80 FF 
0de50     3A E7 68 FC | 	wrlong	##627, arg01
0de54     49 75 02 F6 | 	mov	arg01, local04
0de58     01 76 06 F6 | 	mov	arg02, #1
0de5c     02 78 06 F6 | 	mov	arg03, #2
0de60     EC B5 BF FD | 	call	#_module_align_center_sector
0de64     49 75 02 F6 | 	mov	arg01, local04
0de68     B8 B4 BF FD | 	call	#_module_align_inner_top
0de6c     40 8D 06 F1 | 	add	local01, #320
0de70     46 8F 02 F6 | 	mov	local02, local01
0de74     47 75 02 F6 | 	mov	arg01, local02
0de78     49 77 02 F6 | 	mov	arg02, local04
0de7c     58 AB BF FD | 	call	#_module_init
0de80     47 75 02 F6 | 	mov	arg01, local02
0de84     05 78 06 F6 | 	mov	arg03, #5
0de88     00 75 06 F1 | 	add	arg01, #256
0de8c     3A 0B 68 FC | 	wrlong	#5, arg01
0de90     04 74 06 F1 | 	add	arg01, #4
0de94     3A 0B 68 FC | 	wrlong	#5, arg01
0de98     FC 00 00 FF 
0de9c     D0 D6 05 F1 | 	add	ptr__dat__, ##129232
0dea0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0dea4     FC 00 00 FF 
0dea8     D0 D6 85 F1 | 	sub	ptr__dat__, ##129232
0deac     47 75 02 F6 | 	mov	arg01, local02
0deb0     C0 B0 BF FD | 	call	#_module_set_text
0deb4     47 75 02 F6 | 	mov	arg01, local02
0deb8     02 76 06 F6 | 	mov	arg02, #2
0debc     F4 B1 BF FD | 	call	#_module_text_font
0dec0     47 75 02 F6 | 	mov	arg01, local02
0dec4     08 B1 BF FD | 	call	#_module_text_fit
0dec8     47 75 02 F6 | 	mov	arg01, local02
0decc     CC 74 06 F1 | 	add	arg01, #204
0ded0     3A 79 02 FB | 	rdlong	arg03, arg01
0ded4     CC 74 86 F1 | 	sub	arg01, #204
0ded8     01 78 0E F2 | 	cmp	arg03, #1 wz
0dedc                 | '         return;
0dedc     D8 74 06 A1 |  if_e	add	arg01, #216
0dee0     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0dee4     47 75 02 F6 | 	mov	arg01, local02
0dee8     10 75 06 F1 | 	add	arg01, #272
0deec     3A 01 68 FC | 	wrlong	#0, arg01
0def0     04 74 86 F1 | 	sub	arg01, #4
0def4     1D 00 80 FF 
0def8     3A E9 6A FC | 	wrlong	##15220, arg01
0defc     47 75 02 F6 | 	mov	arg01, local02
0df00     20 B4 BF FD | 	call	#_module_align_inner_top
0df04     47 75 02 F6 | 	mov	arg01, local02
0df08     01 76 06 F6 | 	mov	arg02, #1
0df0c     02 78 06 F6 | 	mov	arg03, #2
0df10     3C B5 BF FD | 	call	#_module_align_center_sector
0df14     40 8D 06 F1 | 	add	local01, #320
0df18     46 95 02 F6 | 	mov	local05, local01
0df1c     4A 75 02 F6 | 	mov	arg01, local05
0df20     49 77 02 F6 | 	mov	arg02, local04
0df24     B0 AA BF FD | 	call	#_module_init
0df28     4A 75 02 F6 | 	mov	arg01, local05
0df2c     05 78 06 F6 | 	mov	arg03, #5
0df30     00 75 06 F1 | 	add	arg01, #256
0df34     3A 0B 68 FC | 	wrlong	#5, arg01
0df38     04 74 06 F1 | 	add	arg01, #4
0df3c     3A 0B 68 FC | 	wrlong	#5, arg01
0df40     04 00 00 FF 
0df44     C0 8C 06 F1 | 	add	local01, ##2240
0df48     46 77 02 F6 | 	mov	arg02, local01
0df4c     4A 75 02 F6 | 	mov	arg01, local05
0df50     20 B0 BF FD | 	call	#_module_set_text
0df54     4A 75 02 F6 | 	mov	arg01, local05
0df58     01 76 06 F6 | 	mov	arg02, #1
0df5c     54 B1 BF FD | 	call	#_module_text_font
0df60     4A 75 02 F6 | 	mov	arg01, local05
0df64     68 B0 BF FD | 	call	#_module_text_fit
0df68     4A 75 02 F6 | 	mov	arg01, local05
0df6c     64 B6 BF FD | 	call	#_module_fit_width
0df70     4A 75 02 F6 | 	mov	arg01, local05
0df74     CC 74 06 F1 | 	add	arg01, #204
0df78     3A 79 02 FB | 	rdlong	arg03, arg01
0df7c     CC 74 86 F1 | 	sub	arg01, #204
0df80     01 78 0E F2 | 	cmp	arg03, #1 wz
0df84                 | '         return;
0df84     DC 74 06 A1 |  if_e	add	arg01, #220
0df88     3A 05 68 AC |  if_e	wrlong	#2, arg01
0df8c     4A 75 02 F6 | 	mov	arg01, local05
0df90     47 77 02 F6 | 	mov	arg02, local02
0df94     E4 B5 BF FD | 	call	#_module_align_below
0df98     4A 75 02 F6 | 	mov	arg01, local05
0df9c     01 76 06 F6 | 	mov	arg02, #1
0dfa0     02 78 06 F6 | 	mov	arg03, #2
0dfa4     A8 B4 BF FD | 	call	#_module_align_center_sector
0dfa8     4A 8F 02 FB | 	rdlong	local02, local05
0dfac     10 8F 06 F1 | 	add	local02, #272
0dfb0     47 79 02 FB | 	rdlong	arg03, local02
0dfb4     4A 75 02 F6 | 	mov	arg01, local05
0dfb8     10 75 06 F1 | 	add	arg01, #272
0dfbc     3A 01 68 FC | 	wrlong	#0, arg01
0dfc0     04 74 86 F1 | 	sub	arg01, #4
0dfc4     3A 79 62 FC | 	wrlong	arg03, arg01
0dfc8     C9 74 02 F6 | 	mov	arg01, objptr
0dfcc     16 77 02 F6 | 	mov	arg02, ptr__update_profileName_0863_
0dfd0     14 73 B1 FD | 	call	#__system___make_methodptr
0dfd4     4A 75 02 F6 | 	mov	arg01, local05
0dfd8     38 75 06 F1 | 	add	arg01, #312
0dfdc     3A 35 62 FC | 	wrlong	result1, arg01
0dfe0     03 00 00 FF 
0dfe4     80 8D 86 F1 | 	sub	local01, ##1920
0dfe8     46 8F 02 F6 | 	mov	local02, local01
0dfec     47 75 02 F6 | 	mov	arg01, local02
0dff0     49 77 02 F6 | 	mov	arg02, local04
0dff4     E0 A9 BF FD | 	call	#_module_init
0dff8     03 00 00 FF 
0dffc     B4 8D 06 F1 | 	add	local01, ##1972
0e000     46 77 02 F6 | 	mov	arg02, local01
0e004     47 75 02 F6 | 	mov	arg01, local02
0e008     68 AF BF FD | 	call	#_module_set_text
0e00c     47 75 02 F6 | 	mov	arg01, local02
0e010     01 76 06 F6 | 	mov	arg02, #1
0e014     9C B0 BF FD | 	call	#_module_text_font
0e018     47 75 02 F6 | 	mov	arg01, local02
0e01c     B0 AF BF FD | 	call	#_module_text_fit
0e020     47 75 02 F6 | 	mov	arg01, local02
0e024     CC 74 06 F1 | 	add	arg01, #204
0e028     3A 79 02 FB | 	rdlong	arg03, arg01
0e02c     CC 74 86 F1 | 	sub	arg01, #204
0e030     01 78 0E F2 | 	cmp	arg03, #1 wz
0e034                 | '         return;
0e034     DC 74 06 A1 |  if_e	add	arg01, #220
0e038     3A 05 68 AC |  if_e	wrlong	#2, arg01
0e03c     47 75 02 F6 | 	mov	arg01, local02
0e040     90 B5 BF FD | 	call	#_module_fit_width
0e044     47 75 02 F6 | 	mov	arg01, local02
0e048     01 76 06 F6 | 	mov	arg02, #1
0e04c     02 78 06 F6 | 	mov	arg03, #2
0e050     FC B3 BF FD | 	call	#_module_align_center_sector
0e054     47 75 02 F6 | 	mov	arg01, local02
0e058     4A 77 02 F6 | 	mov	arg02, local05
0e05c     1C B5 BF FD | 	call	#_module_align_below
0e060     47 95 02 FB | 	rdlong	local05, local02
0e064     10 95 06 F1 | 	add	local05, #272
0e068     4A 79 02 FB | 	rdlong	arg03, local05
0e06c     47 75 02 F6 | 	mov	arg01, local02
0e070     10 75 06 F1 | 	add	arg01, #272
0e074     3A 01 68 FC | 	wrlong	#0, arg01
0e078     04 74 86 F1 | 	sub	arg01, #4
0e07c     3A 79 62 FC | 	wrlong	arg03, arg01
0e080     C9 74 02 F6 | 	mov	arg01, objptr
0e084     17 77 02 F6 | 	mov	arg02, ptr__update_profileNumber_0866_
0e088     5C 72 B1 FD | 	call	#__system___make_methodptr
0e08c     38 8F 06 F1 | 	add	local02, #312
0e090     47 35 62 FC | 	wrlong	result1, local02
0e094     03 00 00 FF 
0e098     74 8C 86 F1 | 	sub	local01, ##1652
0e09c     46 8F 02 F6 | 	mov	local02, local01
0e0a0     47 75 02 F6 | 	mov	arg01, local02
0e0a4     49 77 02 F6 | 	mov	arg02, local04
0e0a8     2C A9 BF FD | 	call	#_module_init
0e0ac     47 75 02 F6 | 	mov	arg01, local02
0e0b0     CC 74 06 F1 | 	add	arg01, #204
0e0b4     3A 0B 68 FC | 	wrlong	#5, arg01
0e0b8     24 74 06 F1 | 	add	arg01, #36
0e0bc     3A C9 68 FC | 	wrlong	#100, arg01
0e0c0     04 74 06 F1 | 	add	arg01, #4
0e0c4     3A 65 68 FC | 	wrlong	#50, arg01
0e0c8     47 75 02 F6 | 	mov	arg01, local02
0e0cc     10 75 06 F1 | 	add	arg01, #272
0e0d0     43 00 80 FF 
0e0d4     3A E1 6B FC | 	wrlong	##34800, arg01
0e0d8     04 74 86 F1 | 	sub	arg01, #4
0e0dc     43 00 80 FF 
0e0e0     3A E1 6B FC | 	wrlong	##34800, arg01
0e0e4     47 75 02 F6 | 	mov	arg01, local02
0e0e8     F8 74 06 F1 | 	add	arg01, #248
0e0ec     3A 29 68 FC | 	wrlong	#20, arg01
0e0f0     04 74 06 F1 | 	add	arg01, #4
0e0f4     3A 29 68 FC | 	wrlong	#20, arg01
0e0f8     47 75 02 F6 | 	mov	arg01, local02
0e0fc     01 76 06 F6 | 	mov	arg02, #1
0e100     02 78 06 F6 | 	mov	arg03, #2
0e104     BC B3 BF FD | 	call	#_module_align_space_even
0e108     47 75 02 F6 | 	mov	arg01, local02
0e10c     AC B2 BF FD | 	call	#_module_align_inner_bottom
0e110     C9 74 02 F6 | 	mov	arg01, objptr
0e114     DD 76 02 F6 | 	mov	arg02, ptr__button_open_0860_
0e118     CC 71 B1 FD | 	call	#__system___make_methodptr
0e11c     47 75 02 F6 | 	mov	arg01, local02
0e120     00 78 06 F6 | 	mov	arg03, #0
0e124     34 75 06 F1 | 	add	arg01, #308
0e128     3A 35 62 FC | 	wrlong	result1, arg01
0e12c     10 74 86 F1 | 	sub	arg01, #16
0e130     3A 01 68 FC | 	wrlong	#0, arg01
0e134     40 8D 06 F1 | 	add	local01, #320
0e138     46 75 02 F6 | 	mov	arg01, local01
0e13c     47 77 02 F6 | 	mov	arg02, local02
0e140     94 A8 BF FD | 	call	#_module_init
0e144     FC 00 00 FF 
0e148     E1 D6 05 F1 | 	add	ptr__dat__, ##129249
0e14c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e150     FC 00 00 FF 
0e154     E1 D6 85 F1 | 	sub	ptr__dat__, ##129249
0e158     46 75 02 F6 | 	mov	arg01, local01
0e15c     14 AE BF FD | 	call	#_module_set_text
0e160     46 75 02 F6 | 	mov	arg01, local01
0e164     02 76 06 F6 | 	mov	arg02, #2
0e168     48 AF BF FD | 	call	#_module_text_font
0e16c     46 75 02 F6 | 	mov	arg01, local01
0e170     5C AE BF FD | 	call	#_module_text_fit
0e174     46 75 02 F6 | 	mov	arg01, local01
0e178     01 76 06 F6 | 	mov	arg02, #1
0e17c     02 78 06 F6 | 	mov	arg03, #2
0e180     CC B2 BF FD | 	call	#_module_align_center_sector
0e184     46 75 02 F6 | 	mov	arg01, local01
0e188     78 B2 BF FD | 	call	#_module_align_middle
0e18c     46 95 02 FB | 	rdlong	local05, local01
0e190     10 95 06 F1 | 	add	local05, #272
0e194     4A 79 02 FB | 	rdlong	arg03, local05
0e198     46 75 02 F6 | 	mov	arg01, local01
0e19c     10 75 06 F1 | 	add	arg01, #272
0e1a0     3A 01 68 FC | 	wrlong	#0, arg01
0e1a4     04 74 86 F1 | 	sub	arg01, #4
0e1a8     3A 79 62 FC | 	wrlong	arg03, arg01
0e1ac     40 8D 06 F1 | 	add	local01, #320
0e1b0     46 8F 02 F6 | 	mov	local02, local01
0e1b4     47 75 02 F6 | 	mov	arg01, local02
0e1b8     49 77 02 F6 | 	mov	arg02, local04
0e1bc     18 A8 BF FD | 	call	#_module_init
0e1c0     47 75 02 F6 | 	mov	arg01, local02
0e1c4     CC 74 06 F1 | 	add	arg01, #204
0e1c8     3A 0B 68 FC | 	wrlong	#5, arg01
0e1cc     24 74 06 F1 | 	add	arg01, #36
0e1d0     3A C9 68 FC | 	wrlong	#100, arg01
0e1d4     04 74 06 F1 | 	add	arg01, #4
0e1d8     3A 65 68 FC | 	wrlong	#50, arg01
0e1dc     47 75 02 F6 | 	mov	arg01, local02
0e1e0     10 75 06 F1 | 	add	arg01, #272
0e1e4     43 00 80 FF 
0e1e8     3A E1 6B FC | 	wrlong	##34800, arg01
0e1ec     04 74 86 F1 | 	sub	arg01, #4
0e1f0     43 00 80 FF 
0e1f4     3A E1 6B FC | 	wrlong	##34800, arg01
0e1f8     47 75 02 F6 | 	mov	arg01, local02
0e1fc     F8 74 06 F1 | 	add	arg01, #248
0e200     3A 29 68 FC | 	wrlong	#20, arg01
0e204     04 74 06 F1 | 	add	arg01, #4
0e208     3A 29 68 FC | 	wrlong	#20, arg01
0e20c     47 75 02 F6 | 	mov	arg01, local02
0e210     02 76 06 F6 | 	mov	arg02, #2
0e214     02 78 06 F6 | 	mov	arg03, #2
0e218     A8 B2 BF FD | 	call	#_module_align_space_even
0e21c     47 75 02 F6 | 	mov	arg01, local02
0e220     98 B1 BF FD | 	call	#_module_align_inner_bottom
0e224     C9 74 02 F6 | 	mov	arg01, objptr
0e228     E2 76 02 F6 | 	mov	arg02, ptr__button_run_0855_
0e22c     B8 70 B1 FD | 	call	#__system___make_methodptr
0e230     47 75 02 F6 | 	mov	arg01, local02
0e234     00 78 06 F6 | 	mov	arg03, #0
0e238     34 75 06 F1 | 	add	arg01, #308
0e23c     3A 35 62 FC | 	wrlong	result1, arg01
0e240     10 74 86 F1 | 	sub	arg01, #16
0e244     3A 01 68 FC | 	wrlong	#0, arg01
0e248     40 8D 06 F1 | 	add	local01, #320
0e24c     46 75 02 F6 | 	mov	arg01, local01
0e250     47 77 02 F6 | 	mov	arg02, local02
0e254     80 A7 BF FD | 	call	#_module_init
0e258     FC 00 00 FF 
0e25c     E6 D6 05 F1 | 	add	ptr__dat__, ##129254
0e260     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e264     FC 00 00 FF 
0e268     E6 D6 85 F1 | 	sub	ptr__dat__, ##129254
0e26c     46 75 02 F6 | 	mov	arg01, local01
0e270     00 AD BF FD | 	call	#_module_set_text
0e274     46 75 02 F6 | 	mov	arg01, local01
0e278     02 76 06 F6 | 	mov	arg02, #2
0e27c     34 AE BF FD | 	call	#_module_text_font
0e280     46 75 02 F6 | 	mov	arg01, local01
0e284     48 AD BF FD | 	call	#_module_text_fit
0e288     46 75 02 F6 | 	mov	arg01, local01
0e28c     01 76 06 F6 | 	mov	arg02, #1
0e290     02 78 06 F6 | 	mov	arg03, #2
0e294     B8 B1 BF FD | 	call	#_module_align_center_sector
0e298     46 75 02 F6 | 	mov	arg01, local01
0e29c     64 B1 BF FD | 	call	#_module_align_middle
0e2a0     46 95 02 FB | 	rdlong	local05, local01
0e2a4     10 95 06 F1 | 	add	local05, #272
0e2a8     4A 79 02 FB | 	rdlong	arg03, local05
0e2ac     46 75 02 F6 | 	mov	arg01, local01
0e2b0     10 75 06 F1 | 	add	arg01, #272
0e2b4     3A 01 68 FC | 	wrlong	#0, arg01
0e2b8     04 74 86 F1 | 	sub	arg01, #4
0e2bc     3A 79 62 FC | 	wrlong	arg03, arg01
0e2c0     40 8D 06 F1 | 	add	local01, #320
0e2c4     46 75 02 F6 | 	mov	arg01, local01
0e2c8     48 77 02 F6 | 	mov	arg02, local03
0e2cc     08 A7 BF FD | 	call	#_module_init
0e2d0     46 75 02 F6 | 	mov	arg01, local01
0e2d4     CC 74 06 F1 | 	add	arg01, #204
0e2d8     3A 0B 68 FC | 	wrlong	#5, arg01
0e2dc     24 74 06 F1 | 	add	arg01, #36
0e2e0     3A C9 68 FC | 	wrlong	#100, arg01
0e2e4     04 74 06 F1 | 	add	arg01, #4
0e2e8     3A C9 68 FC | 	wrlong	#100, arg01
0e2ec     46 75 02 F6 | 	mov	arg01, local01
0e2f0     10 75 06 F1 | 	add	arg01, #272
0e2f4     43 00 80 FF 
0e2f8     3A E1 6B FC | 	wrlong	##34800, arg01
0e2fc     04 74 86 F1 | 	sub	arg01, #4
0e300     43 00 80 FF 
0e304     3A E1 6B FC | 	wrlong	##34800, arg01
0e308     46 75 02 F6 | 	mov	arg01, local01
0e30c     14 78 06 F6 | 	mov	arg03, #20
0e310     F8 74 06 F1 | 	add	arg01, #248
0e314     3A 29 68 FC | 	wrlong	#20, arg01
0e318     04 74 06 F1 | 	add	arg01, #4
0e31c     3A 29 68 FC | 	wrlong	#20, arg01
0e320     46 75 02 F6 | 	mov	arg01, local01
0e324     4C B0 BF FD | 	call	#_module_align_inner_right
0e328     46 75 02 F6 | 	mov	arg01, local01
0e32c     F4 AF BF FD | 	call	#_module_align_inner_top
0e330     C9 74 02 F6 | 	mov	arg01, objptr
0e334     D8 76 02 F6 | 	mov	arg02, ptr__button_nav_0857_
0e338     AC 6F B1 FD | 	call	#__system___make_methodptr
0e33c     34 8D 06 F1 | 	add	local01, #308
0e340     46 35 62 FC | 	wrlong	result1, local01
0e344     10 8C 86 F1 | 	sub	local01, #16
0e348     46 01 68 FC | 	wrlong	#0, local01
0e34c     A8 F0 03 F6 | 	mov	ptra, fp
0e350     B3 00 A0 FD | 	call	#popregs_
0e354                 | _automatic_page_init_ret
0e354     2D 00 64 FD | 	ret
0e358                 | 
0e358                 | _automatic_page_run
0e358     01 4C 05 F6 | 	mov	COUNT_, #1
0e35c     A9 00 A0 FD | 	call	#pushregs_
0e360     3A 8D 02 F6 | 	mov	local01, arg01
0e364     10 8C 06 F1 | 	add	local01, #16
0e368     46 01 48 FC | 	wrbyte	#0, local01
0e36c     10 8C 86 F1 | 	sub	local01, #16
0e370     46 75 02 FB | 	rdlong	arg01, local01
0e374     14 8C 06 F1 | 	add	local01, #20
0e378     46 77 02 F6 | 	mov	arg02, local01
0e37c     14 8C 86 F1 | 	sub	local01, #20
0e380     2C B4 BF FD | 	call	#_module_draw
0e384                 | ' {
0e384                 | '     page->complete =  (0) ;
0e384                 | '     module_draw(page->display, &(page->root));
0e384                 | ' 
0e384                 | '     while (!page->complete)
0e384                 | LR__0383
0e384     10 8C 06 F1 | 	add	local01, #16
0e388     46 35 CA FA | 	rdbyte	result1, local01 wz
0e38c     10 8C 86 F1 | 	sub	local01, #16
0e390     44 00 90 5D |  if_ne	jmp	#LR__0385
0e394     14 8C 06 F1 | 	add	local01, #20
0e398     46 75 02 F6 | 	mov	arg01, local01
0e39c     14 8C 86 F1 | 	sub	local01, #20
0e3a0     46 77 02 FB | 	rdlong	arg02, local01
0e3a4     46 79 02 F6 | 	mov	arg03, local01
0e3a8     54 A8 BF FD | 	call	#_module_touch_check
0e3ac     46 75 02 FB | 	rdlong	arg01, local01
0e3b0     14 8C 06 F1 | 	add	local01, #20
0e3b4     46 77 02 F6 | 	mov	arg02, local01
0e3b8     14 8C 86 F1 | 	sub	local01, #20
0e3bc     46 79 02 F6 | 	mov	arg03, local01
0e3c0     6C A7 BF FD | 	call	#_module_update_check
0e3c4                 | '     {
0e3c4                 | '         module_touch_check(&(page->root), page->display, page);
0e3c4                 | '         module_update_check(page->display, &(page->root), page);
0e3c4                 | '         while (display_update_touch(page->display) == 0)
0e3c4                 | LR__0384
0e3c4     46 75 02 FB | 	rdlong	arg01, local01
0e3c8     A8 72 BF FD | 	call	#_display_update_touch
0e3cc     00 34 0E F2 | 	cmp	result1, #0 wz
0e3d0     F0 FF 9F AD |  if_e	jmp	#LR__0384
0e3d4     AC FF 9F FD | 	jmp	#LR__0383
0e3d8                 | LR__0385
0e3d8     A8 F0 03 F6 | 	mov	ptra, fp
0e3dc     B3 00 A0 FD | 	call	#popregs_
0e3e0                 | _automatic_page_run_ret
0e3e0     2D 00 64 FD | 	ret
0e3e4                 | 
0e3e4                 | _explorer_create
0e3e4     FC 00 00 FF 
0e3e8     00 D7 05 F1 | 	add	ptr__dat__, ##129280
0e3ec     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
0e3f0     FC D6 05 F1 | 	add	ptr__dat__, #252
0e3f4     EB 76 62 FC | 	wrlong	arg02, ptr__dat__
0e3f8     04 D6 05 F1 | 	add	ptr__dat__, #4
0e3fc     EB 78 62 FC | 	wrlong	arg03, ptr__dat__
0e400     18 00 00 FF 
0e404     C8 D6 05 F1 | 	add	ptr__dat__, ##12488
0e408     EB 74 02 F6 | 	mov	arg01, ptr__dat__
0e40c     15 01 00 FF 
0e410     C8 D6 85 F1 | 	sub	ptr__dat__, ##142024
0e414     3E 77 02 F6 | 	mov	arg02, arg05
0e418     2C 7A BF FD | 	call	#_strcpy
0e41c     FD 00 00 FF 
0e420     04 D6 05 F1 | 	add	ptr__dat__, ##129540
0e424     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
0e428     00 D7 85 F1 | 	sub	ptr__dat__, #256
0e42c     EB 7A 62 FC | 	wrlong	arg04, ptr__dat__
0e430     19 00 00 FF 
0e434     28 D6 05 F1 | 	add	ptr__dat__, ##12840
0e438     EB 00 68 FC | 	wrlong	#0, ptr__dat__
0e43c     04 D6 05 F1 | 	add	ptr__dat__, #4
0e440     FF FF FF FF 
0e444     EB FE 6B FC | 	wrlong	##-1, ptr__dat__
0e448                 | ' {
0e448                 | '     staticExplorer.display = display;
0e448                 | '     staticExplorer.x = x;
0e448                 | '     staticExplorer.y = y;
0e448                 | '     strcpy(staticExplorer.pathBuffer, path);
0e448                 | '     staticExplorer.complete =  (0) ;
0e448                 | '     staticExplorer.mode = mode;
0e448                 | '     staticExplorer.page = 0;
0e448                 | '     staticExplorer.selection = -1;
0e448                 | '     return &staticExplorer;
0e448     19 00 00 FF 
0e44c     30 D6 85 F1 | 	sub	ptr__dat__, ##12848
0e450     EB 34 02 F6 | 	mov	result1, ptr__dat__
0e454     FC 00 00 FF 
0e458     00 D7 85 F1 | 	sub	ptr__dat__, ##129280
0e45c                 | _explorer_create_ret
0e45c     2D 00 64 FD | 	ret
0e460                 | 
0e460                 | _explorer_run
0e460     2A 4C 05 F6 | 	mov	COUNT_, #42
0e464     A9 00 A0 FD | 	call	#pushregs_
0e468     3A 8D 02 F6 | 	mov	local01, arg01
0e46c     46 75 02 FB | 	rdlong	arg01, local01
0e470     C0 12 00 FF 
0e474     00 8E 06 F6 | 	mov	local02, ##2457600
0e478     0A 90 C6 F9 | 	decod	local03, #10
0e47c     00 92 06 F6 | 	mov	local04, #0
0e480     00 94 06 F6 | 	mov	local05, #0
0e484     0A 96 C6 F9 | 	decod	local06, #10
0e488     01 00 00 FF 
0e48c     58 98 06 F6 | 	mov	local07, ##600
0e490     00 76 06 F6 | 	mov	arg02, #0
0e494     0A 78 C6 F9 | 	decod	arg03, #10
0e498     00 7A 06 F6 | 	mov	arg04, #0
0e49c     00 7C 06 F6 | 	mov	arg05, #0
0e4a0     C0 12 00 FF 
0e4a4     00 7E 06 F6 | 	mov	arg06, ##2457600
0e4a8     0A 80 C6 F9 | 	decod	arg07, #10
0e4ac     00 82 06 F6 | 	mov	arg08, #0
0e4b0     00 84 06 F6 | 	mov	arg09, #0
0e4b4     0A 86 C6 F9 | 	decod	arg10, #10
0e4b8     01 00 00 FF 
0e4bc     58 88 06 F6 | 	mov	arg11, ##600
0e4c0     F4 5F BF FD | 	call	#_display_bte_memory_copy
0e4c4     4B 9A 06 F6 | 	mov	local08, #75
0e4c8     20 9C 06 F6 | 	mov	local09, #32
0e4cc     0A 9E 06 F6 | 	mov	local10, #10
0e4d0     04 8D 06 F1 | 	add	local01, #260
0e4d4     46 01 48 FC | 	wrbyte	#0, local01
0e4d8     04 8C 06 F1 | 	add	local01, #4
0e4dc     46 A1 02 F6 | 	mov	local11, local01
0e4e0     50 75 02 F6 | 	mov	arg01, local11
0e4e4     00 76 06 F6 | 	mov	arg02, #0
0e4e8     EC A4 BF FD | 	call	#_module_init
0e4ec     40 8D 06 F1 | 	add	local01, #320
0e4f0     46 A3 02 F6 | 	mov	local12, local01
0e4f4     51 75 02 F6 | 	mov	arg01, local12
0e4f8     50 77 02 F6 | 	mov	arg02, local11
0e4fc     D8 A4 BF FD | 	call	#_module_init
0e500     51 75 02 F6 | 	mov	arg01, local12
0e504     CC 74 06 F1 | 	add	arg01, #204
0e508     3A 0B 68 FC | 	wrlong	#5, arg01
0e50c     24 74 06 F1 | 	add	arg01, #36
0e510     01 00 80 FF 
0e514     3A 01 6A FC | 	wrlong	##768, arg01
0e518     04 74 06 F1 | 	add	arg01, #4
0e51c     3A 21 6B FC | 	wrlong	#400, arg01
0e520     4C 8D 86 F1 | 	sub	local01, #332
0e524     46 77 02 FB | 	rdlong	arg02, local01
0e528     04 8C 06 F1 | 	add	local01, #4
0e52c     46 79 02 FB | 	rdlong	arg03, local01
0e530     51 75 02 F6 | 	mov	arg01, local12
0e534     E8 74 06 F1 | 	add	arg01, #232
0e538     3A 77 62 FC | 	wrlong	arg02, arg01
0e53c     04 74 06 F1 | 	add	arg01, #4
0e540     3A 79 62 FC | 	wrlong	arg03, arg01
0e544     51 75 02 F6 | 	mov	arg01, local12
0e548     F8 74 06 F1 | 	add	arg01, #248
0e54c     3A 3D 68 FC | 	wrlong	#30, arg01
0e550     04 74 06 F1 | 	add	arg01, #4
0e554     3A 15 68 FC | 	wrlong	#10, arg01
0e558     51 75 02 F6 | 	mov	arg01, local12
0e55c     10 75 06 F1 | 	add	arg01, #272
0e560     63 00 80 FF 
0e564     3A 31 68 FC | 	wrlong	##50712, arg01
0e568     04 74 86 F1 | 	sub	arg01, #4
0e56c     63 00 80 FF 
0e570     3A 31 68 FC | 	wrlong	##50712, arg01
0e574     51 75 02 F6 | 	mov	arg01, local12
0e578     00 76 06 F6 | 	mov	arg02, #0
0e57c     01 78 06 F6 | 	mov	arg03, #1
0e580     60 AD BF FD | 	call	#_module_add_border
0e584     51 75 02 F6 | 	mov	arg01, local12
0e588     08 75 06 F1 | 	add	arg01, #264
0e58c     3A 29 68 FC | 	wrlong	#20, arg01
0e590     01 00 00 FF 
0e594     88 8C 06 F1 | 	add	local01, ##648
0e598     46 A5 02 F6 | 	mov	local13, local01
0e59c     52 75 02 F6 | 	mov	arg01, local13
0e5a0     51 77 02 F6 | 	mov	arg02, local12
0e5a4     30 A4 BF FD | 	call	#_module_init
0e5a8     52 75 02 F6 | 	mov	arg01, local13
0e5ac     0A 78 06 F6 | 	mov	arg03, #10
0e5b0     00 75 06 F1 | 	add	arg01, #256
0e5b4     3A 15 68 FC | 	wrlong	#10, arg01
0e5b8     04 74 06 F1 | 	add	arg01, #4
0e5bc     3A 15 68 FC | 	wrlong	#10, arg01
0e5c0     17 00 00 FF 
0e5c4     40 8C 06 F1 | 	add	local01, ##11840
0e5c8     46 77 02 F6 | 	mov	arg02, local01
0e5cc     52 75 02 F6 | 	mov	arg01, local13
0e5d0     A0 A9 BF FD | 	call	#_module_set_text
0e5d4     52 75 02 F6 | 	mov	arg01, local13
0e5d8     02 76 06 F6 | 	mov	arg02, #2
0e5dc     D4 AA BF FD | 	call	#_module_text_font
0e5e0     52 75 02 F6 | 	mov	arg01, local13
0e5e4     E8 A9 BF FD | 	call	#_module_text_fit
0e5e8     52 75 02 F6 | 	mov	arg01, local13
0e5ec     E4 AF BF FD | 	call	#_module_fit_width
0e5f0     52 79 02 FB | 	rdlong	arg03, local13
0e5f4     10 79 06 F1 | 	add	arg03, #272
0e5f8     3C 79 02 FB | 	rdlong	arg03, arg03
0e5fc     52 75 02 F6 | 	mov	arg01, local13
0e600     10 75 06 F1 | 	add	arg01, #272
0e604     3A 01 68 FC | 	wrlong	#0, arg01
0e608     04 74 86 F1 | 	sub	arg01, #4
0e60c     3A 79 62 FC | 	wrlong	arg03, arg01
0e610     52 75 02 F6 | 	mov	arg01, local13
0e614     0C AD BF FD | 	call	#_module_align_inner_top
0e618     52 75 02 F6 | 	mov	arg01, local13
0e61c     01 76 06 F6 | 	mov	arg02, #1
0e620     02 78 06 F6 | 	mov	arg03, #2
0e624     28 AE BF FD | 	call	#_module_align_center_sector
0e628     52 75 02 F6 | 	mov	arg01, local13
0e62c     CC 74 06 F1 | 	add	arg01, #204
0e630     3A 35 02 FB | 	rdlong	result1, arg01
0e634     CC 74 86 F1 | 	sub	arg01, #204
0e638     01 34 0E F2 | 	cmp	result1, #1 wz
0e63c                 | '         return;
0e63c     DC 74 06 A1 |  if_e	add	arg01, #220
0e640     3A 05 68 AC |  if_e	wrlong	#2, arg01
0e644     52 75 02 F6 | 	mov	arg01, local13
0e648     CC 74 06 F1 | 	add	arg01, #204
0e64c     3A A7 02 FB | 	rdlong	local14, arg01
0e650     CC 74 86 F1 | 	sub	arg01, #204
0e654     01 A6 0E F2 | 	cmp	local14, #1 wz
0e658                 | '         return;
0e658     D8 74 06 A1 |  if_e	add	arg01, #216
0e65c     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0e660     16 00 00 FF 
0e664     00 8D 86 F1 | 	sub	local01, ##11520
0e668     46 A9 02 F6 | 	mov	local15, local01
0e66c     54 75 02 F6 | 	mov	arg01, local15
0e670     51 77 02 F6 | 	mov	arg02, local12
0e674     60 A3 BF FD | 	call	#_module_init
0e678     54 75 02 F6 | 	mov	arg01, local15
0e67c     00 75 06 F1 | 	add	arg01, #256
0e680     3A 15 68 FC | 	wrlong	#10, arg01
0e684     04 74 06 F1 | 	add	arg01, #4
0e688     3A 15 68 FC | 	wrlong	#10, arg01
0e68c     21 00 00 FF 
0e690     74 D6 05 F1 | 	add	ptr__dat__, ##17012
0e694     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e698     21 00 00 FF 
0e69c     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
0e6a0     54 75 02 F6 | 	mov	arg01, local15
0e6a4     98 A8 BF FD | 	call	#_module_set_image
0e6a8     54 75 02 F6 | 	mov	arg01, local15
0e6ac     74 AC BF FD | 	call	#_module_align_inner_top
0e6b0     54 75 02 F6 | 	mov	arg01, local15
0e6b4     94 AC BF FD | 	call	#_module_align_inner_left
0e6b8     54 75 02 F6 | 	mov	arg01, local15
0e6bc     7C 00 00 FF 
0e6c0     00 78 06 F6 | 	mov	arg03, ##63488
0e6c4     10 75 06 F1 | 	add	arg01, #272
0e6c8     7C 00 80 FF 
0e6cc     3A 01 68 FC | 	wrlong	##63488, arg01
0e6d0     04 74 86 F1 | 	sub	arg01, #4
0e6d4     7C 00 80 FF 
0e6d8     3A 01 68 FC | 	wrlong	##63488, arg01
0e6dc     C9 74 02 F6 | 	mov	arg01, objptr
0e6e0     D4 76 02 F6 | 	mov	arg02, ptr__button_delete_0891_
0e6e4     00 6C B1 FD | 	call	#__system___make_methodptr
0e6e8     54 75 02 F6 | 	mov	arg01, local15
0e6ec     00 78 06 F6 | 	mov	arg03, #0
0e6f0     34 75 06 F1 | 	add	arg01, #308
0e6f4     3A 35 62 FC | 	wrlong	result1, arg01
0e6f8     10 74 86 F1 | 	sub	arg01, #16
0e6fc     3A 01 68 FC | 	wrlong	#0, arg01
0e700     40 8D 06 F1 | 	add	local01, #320
0e704     46 AB 02 F6 | 	mov	local16, local01
0e708     55 75 02 F6 | 	mov	arg01, local16
0e70c     51 77 02 F6 | 	mov	arg02, local12
0e710     C4 A2 BF FD | 	call	#_module_init
0e714     55 75 02 F6 | 	mov	arg01, local16
0e718     CC 74 06 F1 | 	add	arg01, #204
0e71c     3A 0B 68 FC | 	wrlong	#5, arg01
0e720     24 74 06 F1 | 	add	arg01, #36
0e724     3A 97 68 FC | 	wrlong	#75, arg01
0e728     04 74 06 F1 | 	add	arg01, #4
0e72c     3A 41 68 FC | 	wrlong	#32, arg01
0e730     55 75 02 F6 | 	mov	arg01, local16
0e734     01 76 06 F6 | 	mov	arg02, #1
0e738     06 78 06 F6 | 	mov	arg03, #6
0e73c     10 AD BF FD | 	call	#_module_align_center_sector
0e740     55 75 02 F6 | 	mov	arg01, local16
0e744     74 AC BF FD | 	call	#_module_align_inner_bottom
0e748     55 79 02 FB | 	rdlong	arg03, local16
0e74c     10 79 06 F1 | 	add	arg03, #272
0e750     3C 79 02 FB | 	rdlong	arg03, arg03
0e754     55 75 02 F6 | 	mov	arg01, local16
0e758     10 75 06 F1 | 	add	arg01, #272
0e75c     7C 00 80 FF 
0e760     3A 01 68 FC | 	wrlong	##63488, arg01
0e764     04 74 86 F1 | 	sub	arg01, #4
0e768     3A 79 62 FC | 	wrlong	arg03, arg01
0e76c     55 75 02 F6 | 	mov	arg01, local16
0e770     0A 78 06 F6 | 	mov	arg03, #10
0e774     00 75 06 F1 | 	add	arg01, #256
0e778     3A 15 68 FC | 	wrlong	#10, arg01
0e77c     04 74 06 F1 | 	add	arg01, #4
0e780     3A 15 68 FC | 	wrlong	#10, arg01
0e784     C9 74 02 F6 | 	mov	arg01, objptr
0e788     D3 76 02 F6 | 	mov	arg02, ptr__button_cancel_0893_
0e78c     58 6B B1 FD | 	call	#__system___make_methodptr
0e790     55 75 02 F6 | 	mov	arg01, local16
0e794     00 78 06 F6 | 	mov	arg03, #0
0e798     34 75 06 F1 | 	add	arg01, #308
0e79c     3A 35 62 FC | 	wrlong	result1, arg01
0e7a0     10 74 86 F1 | 	sub	arg01, #16
0e7a4     3A 01 68 FC | 	wrlong	#0, arg01
0e7a8     40 8D 06 F1 | 	add	local01, #320
0e7ac     46 AD 02 F6 | 	mov	local17, local01
0e7b0     56 75 02 F6 | 	mov	arg01, local17
0e7b4     55 77 02 F6 | 	mov	arg02, local16
0e7b8     1C A2 BF FD | 	call	#_module_init
0e7bc     FC 00 00 FF 
0e7c0     EB D6 05 F1 | 	add	ptr__dat__, ##129259
0e7c4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e7c8     FC 00 00 FF 
0e7cc     EB D6 85 F1 | 	sub	ptr__dat__, ##129259
0e7d0     56 75 02 F6 | 	mov	arg01, local17
0e7d4     9C A7 BF FD | 	call	#_module_set_text
0e7d8     56 75 02 F6 | 	mov	arg01, local17
0e7dc     00 76 06 F6 | 	mov	arg02, #0
0e7e0     D0 A8 BF FD | 	call	#_module_text_font
0e7e4     56 75 02 F6 | 	mov	arg01, local17
0e7e8     E4 A7 BF FD | 	call	#_module_text_fit
0e7ec     56 75 02 F6 | 	mov	arg01, local17
0e7f0     01 76 06 F6 | 	mov	arg02, #1
0e7f4     02 78 06 F6 | 	mov	arg03, #2
0e7f8     54 AC BF FD | 	call	#_module_align_center_sector
0e7fc     56 75 02 F6 | 	mov	arg01, local17
0e800     00 AC BF FD | 	call	#_module_align_middle
0e804     56 79 02 FB | 	rdlong	arg03, local17
0e808     10 79 06 F1 | 	add	arg03, #272
0e80c     3C 79 02 FB | 	rdlong	arg03, arg03
0e810     56 75 02 F6 | 	mov	arg01, local17
0e814     10 75 06 F1 | 	add	arg01, #272
0e818     3A 01 68 FC | 	wrlong	#0, arg01
0e81c     04 74 86 F1 | 	sub	arg01, #4
0e820     3A 79 62 FC | 	wrlong	arg03, arg01
0e824     40 8D 06 F1 | 	add	local01, #320
0e828     46 AF 02 F6 | 	mov	local18, local01
0e82c     57 75 02 F6 | 	mov	arg01, local18
0e830     51 77 02 F6 | 	mov	arg02, local12
0e834     A0 A1 BF FD | 	call	#_module_init
0e838     57 75 02 F6 | 	mov	arg01, local18
0e83c     55 77 02 F6 | 	mov	arg02, local16
0e840     38 A6 BF FD | 	call	#_module_copy
0e844     57 75 02 F6 | 	mov	arg01, local18
0e848     55 77 02 F6 | 	mov	arg02, local16
0e84c     58 AD BF FD | 	call	#_module_align_right
0e850     57 75 02 F6 | 	mov	arg01, local18
0e854     7F 00 00 FF 
0e858     E0 79 06 F6 | 	mov	arg03, ##65504
0e85c     10 75 06 F1 | 	add	arg01, #272
0e860     7F 00 80 FF 
0e864     3A C1 6B FC | 	wrlong	##65504, arg01
0e868     04 74 86 F1 | 	sub	arg01, #4
0e86c     7F 00 80 FF 
0e870     3A C1 6B FC | 	wrlong	##65504, arg01
0e874     C9 74 02 F6 | 	mov	arg01, objptr
0e878     D6 76 02 F6 | 	mov	arg02, ptr__button_dotdot_0896_
0e87c     68 6A B1 FD | 	call	#__system___make_methodptr
0e880     57 75 02 F6 | 	mov	arg01, local18
0e884     00 78 06 F6 | 	mov	arg03, #0
0e888     34 75 06 F1 | 	add	arg01, #308
0e88c     3A 35 62 FC | 	wrlong	result1, arg01
0e890     10 74 86 F1 | 	sub	arg01, #16
0e894     3A 01 68 FC | 	wrlong	#0, arg01
0e898     40 8D 06 F1 | 	add	local01, #320
0e89c     46 B1 02 F6 | 	mov	local19, local01
0e8a0     58 75 02 F6 | 	mov	arg01, local19
0e8a4     57 77 02 F6 | 	mov	arg02, local18
0e8a8     2C A1 BF FD | 	call	#_module_init
0e8ac     FC 00 00 FF 
0e8b0     F2 D6 05 F1 | 	add	ptr__dat__, ##129266
0e8b4     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e8b8     FC 00 00 FF 
0e8bc     F2 D6 85 F1 | 	sub	ptr__dat__, ##129266
0e8c0     58 75 02 F6 | 	mov	arg01, local19
0e8c4     AC A6 BF FD | 	call	#_module_set_text
0e8c8     58 75 02 F6 | 	mov	arg01, local19
0e8cc     00 76 06 F6 | 	mov	arg02, #0
0e8d0     E0 A7 BF FD | 	call	#_module_text_font
0e8d4     58 75 02 F6 | 	mov	arg01, local19
0e8d8     F4 A6 BF FD | 	call	#_module_text_fit
0e8dc     58 75 02 F6 | 	mov	arg01, local19
0e8e0     01 76 06 F6 | 	mov	arg02, #1
0e8e4     02 78 06 F6 | 	mov	arg03, #2
0e8e8     64 AB BF FD | 	call	#_module_align_center_sector
0e8ec     58 75 02 F6 | 	mov	arg01, local19
0e8f0     10 AB BF FD | 	call	#_module_align_middle
0e8f4     58 79 02 FB | 	rdlong	arg03, local19
0e8f8     10 79 06 F1 | 	add	arg03, #272
0e8fc     3C 79 02 FB | 	rdlong	arg03, arg03
0e900     58 75 02 F6 | 	mov	arg01, local19
0e904     10 75 06 F1 | 	add	arg01, #272
0e908     3A 01 68 FC | 	wrlong	#0, arg01
0e90c     04 74 86 F1 | 	sub	arg01, #4
0e910     3A 79 62 FC | 	wrlong	arg03, arg01
0e914     40 8D 06 F1 | 	add	local01, #320
0e918     46 B3 02 F6 | 	mov	local20, local01
0e91c     59 75 02 F6 | 	mov	arg01, local20
0e920     51 77 02 F6 | 	mov	arg02, local12
0e924     B0 A0 BF FD | 	call	#_module_init
0e928     59 75 02 F6 | 	mov	arg01, local20
0e92c     57 77 02 F6 | 	mov	arg02, local18
0e930     48 A5 BF FD | 	call	#_module_copy
0e934     59 75 02 F6 | 	mov	arg01, local20
0e938     57 77 02 F6 | 	mov	arg02, local18
0e93c     68 AC BF FD | 	call	#_module_align_right
0e940     C9 74 02 F6 | 	mov	arg01, objptr
0e944     DF 76 02 F6 | 	mov	arg02, ptr__button_prev_0898_
0e948     9C 69 B1 FD | 	call	#__system___make_methodptr
0e94c     59 75 02 F6 | 	mov	arg01, local20
0e950     00 78 06 F6 | 	mov	arg03, #0
0e954     34 75 06 F1 | 	add	arg01, #308
0e958     3A 35 62 FC | 	wrlong	result1, arg01
0e95c     10 74 86 F1 | 	sub	arg01, #16
0e960     3A 01 68 FC | 	wrlong	#0, arg01
0e964     40 8D 06 F1 | 	add	local01, #320
0e968     46 B5 02 F6 | 	mov	local21, local01
0e96c     5A 75 02 F6 | 	mov	arg01, local21
0e970     59 77 02 F6 | 	mov	arg02, local20
0e974     60 A0 BF FD | 	call	#_module_init
0e978     FC 00 00 FF 
0e97c     F5 D6 05 F1 | 	add	ptr__dat__, ##129269
0e980     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0e984     FC 00 00 FF 
0e988     F5 D6 85 F1 | 	sub	ptr__dat__, ##129269
0e98c     5A 75 02 F6 | 	mov	arg01, local21
0e990     E0 A5 BF FD | 	call	#_module_set_text
0e994     5A 75 02 F6 | 	mov	arg01, local21
0e998     00 76 06 F6 | 	mov	arg02, #0
0e99c     14 A7 BF FD | 	call	#_module_text_font
0e9a0     5A 75 02 F6 | 	mov	arg01, local21
0e9a4     28 A6 BF FD | 	call	#_module_text_fit
0e9a8     5A 75 02 F6 | 	mov	arg01, local21
0e9ac     01 76 06 F6 | 	mov	arg02, #1
0e9b0     02 78 06 F6 | 	mov	arg03, #2
0e9b4     98 AA BF FD | 	call	#_module_align_center_sector
0e9b8     5A 75 02 F6 | 	mov	arg01, local21
0e9bc     44 AA BF FD | 	call	#_module_align_middle
0e9c0     5A 79 02 FB | 	rdlong	arg03, local21
0e9c4     10 79 06 F1 | 	add	arg03, #272
0e9c8     3C 79 02 FB | 	rdlong	arg03, arg03
0e9cc     5A 75 02 F6 | 	mov	arg01, local21
0e9d0     10 75 06 F1 | 	add	arg01, #272
0e9d4     3A 01 68 FC | 	wrlong	#0, arg01
0e9d8     04 74 86 F1 | 	sub	arg01, #4
0e9dc     3A 79 62 FC | 	wrlong	arg03, arg01
0e9e0     40 8D 06 F1 | 	add	local01, #320
0e9e4     46 B7 02 F6 | 	mov	local22, local01
0e9e8     5B 75 02 F6 | 	mov	arg01, local22
0e9ec     51 77 02 F6 | 	mov	arg02, local12
0e9f0     E4 9F BF FD | 	call	#_module_init
0e9f4     5B 75 02 F6 | 	mov	arg01, local22
0e9f8     59 77 02 F6 | 	mov	arg02, local20
0e9fc     7C A4 BF FD | 	call	#_module_copy
0ea00     5B 75 02 F6 | 	mov	arg01, local22
0ea04     59 77 02 F6 | 	mov	arg02, local20
0ea08     9C AB BF FD | 	call	#_module_align_right
0ea0c     C9 74 02 F6 | 	mov	arg01, objptr
0ea10     DC 76 02 F6 | 	mov	arg02, ptr__button_next_0900_
0ea14     D0 68 B1 FD | 	call	#__system___make_methodptr
0ea18     5B 75 02 F6 | 	mov	arg01, local22
0ea1c     00 78 06 F6 | 	mov	arg03, #0
0ea20     34 75 06 F1 | 	add	arg01, #308
0ea24     3A 35 62 FC | 	wrlong	result1, arg01
0ea28     10 74 86 F1 | 	sub	arg01, #16
0ea2c     3A 01 68 FC | 	wrlong	#0, arg01
0ea30     40 8D 06 F1 | 	add	local01, #320
0ea34     46 B9 02 F6 | 	mov	local23, local01
0ea38     5C 75 02 F6 | 	mov	arg01, local23
0ea3c     5B 77 02 F6 | 	mov	arg02, local22
0ea40     94 9F BF FD | 	call	#_module_init
0ea44     FC 00 00 FF 
0ea48     F7 D6 05 F1 | 	add	ptr__dat__, ##129271
0ea4c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0ea50     FC 00 00 FF 
0ea54     F7 D6 85 F1 | 	sub	ptr__dat__, ##129271
0ea58     5C 75 02 F6 | 	mov	arg01, local23
0ea5c     14 A5 BF FD | 	call	#_module_set_text
0ea60     5C 75 02 F6 | 	mov	arg01, local23
0ea64     00 76 06 F6 | 	mov	arg02, #0
0ea68     48 A6 BF FD | 	call	#_module_text_font
0ea6c     5C 75 02 F6 | 	mov	arg01, local23
0ea70     5C A5 BF FD | 	call	#_module_text_fit
0ea74     5C 75 02 F6 | 	mov	arg01, local23
0ea78     01 76 06 F6 | 	mov	arg02, #1
0ea7c     02 78 06 F6 | 	mov	arg03, #2
0ea80     CC A9 BF FD | 	call	#_module_align_center_sector
0ea84     5C 75 02 F6 | 	mov	arg01, local23
0ea88     78 A9 BF FD | 	call	#_module_align_middle
0ea8c     5C 79 02 FB | 	rdlong	arg03, local23
0ea90     10 79 06 F1 | 	add	arg03, #272
0ea94     3C 79 02 FB | 	rdlong	arg03, arg03
0ea98     5C 75 02 F6 | 	mov	arg01, local23
0ea9c     10 75 06 F1 | 	add	arg01, #272
0eaa0     3A 01 68 FC | 	wrlong	#0, arg01
0eaa4     04 74 86 F1 | 	sub	arg01, #4
0eaa8     3A 79 62 FC | 	wrlong	arg03, arg01
0eaac     40 8D 06 F1 | 	add	local01, #320
0eab0     46 BB 02 F6 | 	mov	local24, local01
0eab4     5D 75 02 F6 | 	mov	arg01, local24
0eab8     51 77 02 F6 | 	mov	arg02, local12
0eabc     18 9F BF FD | 	call	#_module_init
0eac0     5D 75 02 F6 | 	mov	arg01, local24
0eac4     5B 77 02 F6 | 	mov	arg02, local22
0eac8     B0 A3 BF FD | 	call	#_module_copy
0eacc     5D 75 02 F6 | 	mov	arg01, local24
0ead0     05 76 06 F6 | 	mov	arg02, #5
0ead4     06 78 06 F6 | 	mov	arg03, #6
0ead8     74 A9 BF FD | 	call	#_module_align_center_sector
0eadc     5D 79 02 FB | 	rdlong	arg03, local24
0eae0     10 79 06 F1 | 	add	arg03, #272
0eae4     3C 79 02 FB | 	rdlong	arg03, arg03
0eae8     5D 75 02 F6 | 	mov	arg01, local24
0eaec     10 75 06 F1 | 	add	arg01, #272
0eaf0     03 00 80 FF 
0eaf4     3A C1 6B FC | 	wrlong	##2016, arg01
0eaf8     04 74 86 F1 | 	sub	arg01, #4
0eafc     3A 79 62 FC | 	wrlong	arg03, arg01
0eb00     C9 74 02 F6 | 	mov	arg01, objptr
0eb04     D5 76 02 F6 | 	mov	arg02, ptr__button_done_0902_
0eb08     DC 67 B1 FD | 	call	#__system___make_methodptr
0eb0c     5D 75 02 F6 | 	mov	arg01, local24
0eb10     00 78 06 F6 | 	mov	arg03, #0
0eb14     34 75 06 F1 | 	add	arg01, #308
0eb18     3A 35 62 FC | 	wrlong	result1, arg01
0eb1c     10 74 86 F1 | 	sub	arg01, #16
0eb20     3A 01 68 FC | 	wrlong	#0, arg01
0eb24     40 8D 06 F1 | 	add	local01, #320
0eb28     46 BD 02 F6 | 	mov	local25, local01
0eb2c     5E 75 02 F6 | 	mov	arg01, local25
0eb30     5D 77 02 F6 | 	mov	arg02, local24
0eb34     A0 9E BF FD | 	call	#_module_init
0eb38     FC 00 00 FF 
0eb3c     F9 D6 05 F1 | 	add	ptr__dat__, ##129273
0eb40     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0eb44     FC 00 00 FF 
0eb48     F9 D6 85 F1 | 	sub	ptr__dat__, ##129273
0eb4c     5E 75 02 F6 | 	mov	arg01, local25
0eb50     20 A4 BF FD | 	call	#_module_set_text
0eb54     5E 75 02 F6 | 	mov	arg01, local25
0eb58     00 76 06 F6 | 	mov	arg02, #0
0eb5c     54 A5 BF FD | 	call	#_module_text_font
0eb60     5E 75 02 F6 | 	mov	arg01, local25
0eb64     68 A4 BF FD | 	call	#_module_text_fit
0eb68     5E 75 02 F6 | 	mov	arg01, local25
0eb6c     01 76 06 F6 | 	mov	arg02, #1
0eb70     02 78 06 F6 | 	mov	arg03, #2
0eb74     D8 A8 BF FD | 	call	#_module_align_center_sector
0eb78     5E 75 02 F6 | 	mov	arg01, local25
0eb7c     84 A8 BF FD | 	call	#_module_align_middle
0eb80     5E 79 02 FB | 	rdlong	arg03, local25
0eb84     10 79 06 F1 | 	add	arg03, #272
0eb88     3C 79 02 FB | 	rdlong	arg03, arg03
0eb8c     5E 75 02 F6 | 	mov	arg01, local25
0eb90     10 75 06 F1 | 	add	arg01, #272
0eb94     3A 01 68 FC | 	wrlong	#0, arg01
0eb98     04 74 86 F1 | 	sub	arg01, #4
0eb9c     3A 79 62 FC | 	wrlong	arg03, arg01
0eba0     40 8D 06 F1 | 	add	local01, #320
0eba4     46 BF 02 F6 | 	mov	local26, local01
0eba8     5F 75 02 F6 | 	mov	arg01, local26
0ebac     51 77 02 F6 | 	mov	arg02, local12
0ebb0     24 9E BF FD | 	call	#_module_init
0ebb4     5F 75 02 F6 | 	mov	arg01, local26
0ebb8     52 77 02 F6 | 	mov	arg02, local13
0ebbc     BC A9 BF FD | 	call	#_module_align_below
0ebc0     5F 75 02 F6 | 	mov	arg01, local26
0ebc4     52 77 02 F6 | 	mov	arg02, local13
0ebc8     08 AB BF FD | 	call	#_module_fit_below
0ebcc     5F 75 02 F6 | 	mov	arg01, local26
0ebd0     00 AA BF FD | 	call	#_module_fit_width
0ebd4     5F 75 02 F6 | 	mov	arg01, local26
0ebd8     70 A7 BF FD | 	call	#_module_align_inner_left
0ebdc     5F 75 02 F6 | 	mov	arg01, local26
0ebe0     5F C1 02 FB | 	rdlong	local27, local26
0ebe4     10 C1 06 F1 | 	add	local27, #272
0ebe8     60 77 02 FB | 	rdlong	arg02, local27
0ebec     5F C3 02 FB | 	rdlong	local28, local26
0ebf0     0C C3 06 F1 | 	add	local28, #268
0ebf4     61 C5 02 FB | 	rdlong	local29, local28
0ebf8     0C C3 86 F1 | 	sub	local28, #268
0ebfc     62 79 02 F6 | 	mov	arg03, local29
0ec00     10 75 06 F1 | 	add	arg01, #272
0ec04     3A 77 62 FC | 	wrlong	arg02, arg01
0ec08     04 74 86 F1 | 	sub	arg01, #4
0ec0c     3A 79 62 FC | 	wrlong	arg03, arg01
0ec10     52 C7 02 F6 | 	mov	local30, local13
0ec14     00 C8 06 F6 | 	mov	local31, #0
0ec18     00 CA 06 F6 | 	mov	local32, #0
0ec1c                 | '     for (int i = 0; i <  2 ; i++)
0ec1c     09 00 00 FF 
0ec20     88 8C 86 F1 | 	sub	local01, ##4744
0ec24                 | LR__0386
0ec24     02 CA 56 F2 | 	cmps	local32, #2 wc
0ec28     B8 01 90 3D |  if_ae	jmp	#LR__0389
0ec2c     00 CC 06 F6 | 	mov	local33, #0
0ec30                 | '     {
0ec30                 | '         Module *file;
0ec30                 | '         for (int j = 0; j <  6 ; j++)
0ec30                 | LR__0387
0ec30     06 CC 56 F2 | 	cmps	local33, #6 wc
0ec34     98 01 90 3D |  if_ae	jmp	#LR__0388
0ec38     64 CF 02 F6 | 	mov	local34, local31
0ec3c     02 CE 66 F0 | 	shl	local34, #2
0ec40     64 CF 02 F1 | 	add	local34, local31
0ec44     06 CE 66 F0 | 	shl	local34, #6
0ec48     09 00 00 FF 
0ec4c     C8 8D 06 F1 | 	add	local01, ##5064
0ec50     46 CF 02 F1 | 	add	local34, local01
0ec54     67 75 02 F6 | 	mov	arg01, local34
0ec58     5F 77 02 F6 | 	mov	arg02, local26
0ec5c     78 9D BF FD | 	call	#_module_init
0ec60     67 75 02 F6 | 	mov	arg01, local34
0ec64     00 75 06 F1 | 	add	arg01, #256
0ec68     3A 15 68 FC | 	wrlong	#10, arg01
0ec6c     04 74 06 F1 | 	add	arg01, #4
0ec70     3A 15 68 FC | 	wrlong	#10, arg01
0ec74     67 75 02 F6 | 	mov	arg01, local34
0ec78     CC 74 06 F1 | 	add	arg01, #204
0ec7c     3A 09 68 FC | 	wrlong	#4, arg01
0ec80     24 74 06 F1 | 	add	arg01, #36
0ec84     3A C9 68 FC | 	wrlong	#100, arg01
0ec88     04 74 06 F1 | 	add	arg01, #4
0ec8c     3A C9 68 FC | 	wrlong	#100, arg01
0ec90     67 C3 02 FB | 	rdlong	local28, local34
0ec94     10 C3 06 F1 | 	add	local28, #272
0ec98     61 79 02 FB | 	rdlong	arg03, local28
0ec9c     67 75 02 F6 | 	mov	arg01, local34
0eca0     10 75 06 F1 | 	add	arg01, #272
0eca4     7C 00 80 FF 
0eca8     3A 01 68 FC | 	wrlong	##63488, arg01
0ecac     04 74 86 F1 | 	sub	arg01, #4
0ecb0     3A 79 62 FC | 	wrlong	arg03, arg01
0ecb4     67 75 02 F6 | 	mov	arg01, local34
0ecb8     63 77 02 F6 | 	mov	arg02, local30
0ecbc     BC A8 BF FD | 	call	#_module_align_below
0ecc0     66 77 02 F6 | 	mov	arg02, local33
0ecc4     01 76 06 F1 | 	add	arg02, #1
0ecc8     67 75 02 F6 | 	mov	arg01, local34
0eccc     06 78 06 F6 | 	mov	arg03, #6
0ecd0     F0 A7 BF FD | 	call	#_module_align_space_even
0ecd4     67 75 02 F6 | 	mov	arg01, local34
0ecd8     18 75 06 F1 | 	add	arg01, #280
0ecdc     3A 01 48 FC | 	wrbyte	#0, arg01
0ece0     64 D1 02 F6 | 	mov	local35, local31
0ece4     02 D0 66 F0 | 	shl	local35, #2
0ece8     64 D1 02 F1 | 	add	local35, local31
0ecec     06 D0 66 F0 | 	shl	local35, #6
0ecf0     07 00 00 FF 
0ecf4     00 8D 06 F1 | 	add	local01, ##3840
0ecf8     46 C1 02 F6 | 	mov	local27, local01
0ecfc     46 D1 02 F1 | 	add	local35, local01
0ed00     68 75 02 F6 | 	mov	arg01, local35
0ed04     67 77 02 F6 | 	mov	arg02, local34
0ed08     CC 9C BF FD | 	call	#_module_init
0ed0c     64 8F 02 F6 | 	mov	local02, local31
0ed10     02 8E 66 F0 | 	shl	local02, #2
0ed14     64 8F 02 F1 | 	add	local02, local31
0ed18     02 8E 66 F0 | 	shl	local02, #2
0ed1c     11 00 00 FF 
0ed20     C0 8C 86 F1 | 	sub	local01, ##8896
0ed24     46 8F 02 F1 | 	add	local02, local01
0ed28     68 75 02 F6 | 	mov	arg01, local35
0ed2c     47 77 02 F6 | 	mov	arg02, local02
0ed30     40 A2 BF FD | 	call	#_module_set_text
0ed34     68 75 02 F6 | 	mov	arg01, local35
0ed38     00 76 06 F6 | 	mov	arg02, #0
0ed3c     74 A3 BF FD | 	call	#_module_text_font
0ed40     68 75 02 F6 | 	mov	arg01, local35
0ed44     88 A2 BF FD | 	call	#_module_text_fit
0ed48     68 75 02 F6 | 	mov	arg01, local35
0ed4c     00 75 06 F1 | 	add	arg01, #256
0ed50     3A 15 68 FC | 	wrlong	#10, arg01
0ed54     04 74 06 F1 | 	add	arg01, #4
0ed58     3A 15 68 FC | 	wrlong	#10, arg01
0ed5c     68 C3 02 FB | 	rdlong	local28, local35
0ed60     0C C3 06 F1 | 	add	local28, #268
0ed64     61 C5 02 FB | 	rdlong	local29, local28
0ed68     0C C3 86 F1 | 	sub	local28, #268
0ed6c     68 75 02 F6 | 	mov	arg01, local35
0ed70     10 75 06 F1 | 	add	arg01, #272
0ed74     3A 01 68 FC | 	wrlong	#0, arg01
0ed78     04 74 86 F1 | 	sub	arg01, #4
0ed7c     3A C5 62 FC | 	wrlong	local29, arg01
0ed80     68 75 02 F6 | 	mov	arg01, local35
0ed84     4C A8 BF FD | 	call	#_module_fit_width
0ed88     68 75 02 F6 | 	mov	arg01, local35
0ed8c     01 76 06 F6 | 	mov	arg02, #1
0ed90     02 78 06 F6 | 	mov	arg03, #2
0ed94     B8 A6 BF FD | 	call	#_module_align_center_sector
0ed98     68 75 02 F6 | 	mov	arg01, local35
0ed9c     CC 74 06 F1 | 	add	arg01, #204
0eda0     3A A7 02 FB | 	rdlong	local14, arg01
0eda4     CC 74 86 F1 | 	sub	arg01, #204
0eda8     01 A6 0E F2 | 	cmp	local14, #1 wz
0edac                 | '         return;
0edac     DC 74 06 A1 |  if_e	add	arg01, #220
0edb0     3A 05 68 AC |  if_e	wrlong	#2, arg01
0edb4     68 75 02 F6 | 	mov	arg01, local35
0edb8     68 77 02 FB | 	rdlong	arg02, local35
0edbc     BC A7 BF FD | 	call	#_module_align_below
0edc0     01 C8 06 F1 | 	add	local31, #1
0edc4     01 CC 06 F1 | 	add	local33, #1
0edc8     08 8C 86 F1 | 	sub	local01, #8
0edcc     60 FE 9F FD | 	jmp	#LR__0387
0edd0                 | LR__0388
0edd0     04 CE 06 F1 | 	add	local34, #4
0edd4     67 C7 02 FB | 	rdlong	local30, local34
0edd8     04 CE 86 F1 | 	sub	local34, #4
0eddc     01 CA 06 F1 | 	add	local32, #1
0ede0     40 FE 9F FD | 	jmp	#LR__0386
0ede4                 | LR__0389
0ede4                 | '         {
0ede4                 | '             file = &(explorer->fileModule[index]);
0ede4                 | '             module_init(file, subroot);
0ede4                 | '             module_set_margin(file, padding, padding);
0ede4                 | '             module_set_rectangle(file, 100, 100);
0ede4                 | '             module_set_color(file,  0xf800 , file->parent->foregroundColor);
0ede4                 | '             module_align_below(file, below);
0ede4                 | '             module_align_space_even(file, (j + 1),  6 );
0ede4                 | '             module_set_visable(file,  (0) );
0ede4                 | ' 
0ede4                 | '             Module *text = &(explorer->fileText[index]);
0ede4                 | '             module_init(text, file);
0ede4                 | '             module_set_text(text, explorer->files[index]);
0ede4                 | '             module_text_font(text,  0 );
0ede4                 | '             module_text_fit(text);
0ede4                 | '             module_set_margin(text, padding, padding);
0ede4                 | '             module_set_color(text,  0x0000 , text->parent->backgroundColor);
0ede4                 | '             module_fit_width(text);
0ede4                 | '             module_align_center(text);
0ede4                 | '             module_text_align(text, MODULE_TEXT_ALIGN_INNER_CENTER);
0ede4                 | '             module_align_below(text, text->parent);
0ede4                 | '             index++;
0ede4                 | '         }
0ede4                 | '         below = file->child[0];
0ede4                 | '     }
0ede4                 | ' 
0ede4                 | '     while (!explorer->complete)
0ede4                 | LR__0390
0ede4     04 8D 06 F1 | 	add	local01, #260
0ede8     46 35 CA FA | 	rdbyte	result1, local01 wz
0edec     04 8D 86 F1 | 	sub	local01, #260
0edf0     CC 03 90 5D |  if_ne	jmp	#LR__0403
0edf4     18 00 00 FF 
0edf8     C8 8D 06 F1 | 	add	local01, ##12744
0edfc     46 75 02 F6 | 	mov	arg01, local01
0ee00     20 2B BF FD | 	call	#_chdir
0ee04     46 75 02 F6 | 	mov	arg01, local01
0ee08     18 00 00 FF 
0ee0c     C8 8D 86 F1 | 	sub	local01, ##12744
0ee10     F4 1A BF FD | 	call	#_opendir
0ee14     1A D3 0A F6 | 	mov	local36, result1 wz
0ee18     64 00 90 5D |  if_ne	jmp	#LR__0391
0ee1c     00 74 06 F6 | 	mov	arg01, #0
0ee20     24 9D B1 FD | 	call	#__system___getiolock_1205
0ee24     1A 75 02 F6 | 	mov	arg01, result1
0ee28     F4 64 B1 FD | 	call	#__system___lockmem
0ee2c     4B 01 00 FF 
0ee30     0D 76 06 F6 | 	mov	arg02, ##@LR__1980
0ee34     00 74 06 F6 | 	mov	arg01, #0
0ee38     00 78 06 F6 | 	mov	arg03, #0
0ee3c     74 6A B1 FD | 	call	#__system___basic_print_string
0ee40     00 74 06 F6 | 	mov	arg01, #0
0ee44     18 A2 05 F1 | 	add	ptr___system__dat__, #24
0ee48     D1 76 02 FB | 	rdlong	arg02, ptr___system__dat__
0ee4c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
0ee50     00 78 06 F6 | 	mov	arg03, #0
0ee54     0A 7A 06 F6 | 	mov	arg04, #10
0ee58     9C 6A B1 FD | 	call	#__system___basic_print_integer
0ee5c     00 74 06 F6 | 	mov	arg01, #0
0ee60     0A 76 06 F6 | 	mov	arg02, #10
0ee64     00 78 06 F6 | 	mov	arg03, #0
0ee68     FC 69 B1 FD | 	call	#__system___basic_print_char
0ee6c     00 74 06 F6 | 	mov	arg01, #0
0ee70     D4 9C B1 FD | 	call	#__system___getiolock_1205
0ee74     1A 01 68 FC | 	wrlong	#0, result1
0ee78                 | '             return  (0) ;
0ee78     00 34 06 F6 | 	mov	result1, #0
0ee7c     6C 04 90 FD | 	jmp	#LR__0406
0ee80                 | LR__0391
0ee80     00 D4 06 F6 | 	mov	local37, #0
0ee84                 | '         }
0ee84                 | ' 
0ee84                 | '         for (int i = 0; i < explorer->page *  ( 6 * 2 ) ; i++)
0ee84                 | LR__0392
0ee84     19 00 00 FF 
0ee88     2C 8C 06 F1 | 	add	local01, ##12844
0ee8c     46 75 02 FB | 	rdlong	arg01, local01
0ee90     19 00 00 FF 
0ee94     2C 8C 86 F1 | 	sub	local01, ##12844
0ee98     3A D7 02 F6 | 	mov	local38, arg01
0ee9c     01 D6 66 F0 | 	shl	local38, #1
0eea0     3A D7 02 F1 | 	add	local38, arg01
0eea4     02 D6 66 F0 | 	shl	local38, #2
0eea8     6B D5 52 F2 | 	cmps	local37, local38 wc
0eeac     14 00 90 3D |  if_ae	jmp	#LR__0393
0eeb0     69 75 02 F6 | 	mov	arg01, local36
0eeb4     98 1B BF FD | 	call	#_readdir
0eeb8     00 34 0E F2 | 	cmp	result1, #0 wz
0eebc                 | '             {
0eebc                 | '                 break;
0eebc     01 D4 06 51 |  if_ne	add	local37, #1
0eec0     C0 FF 9F 5D |  if_ne	jmp	#LR__0392
0eec4                 | LR__0393
0eec4     00 D8 06 F6 | 	mov	local39, #0
0eec8                 | '             }
0eec8                 | '         }
0eec8                 | ' 
0eec8                 | '         for (int i = 0; i <  ( 6 * 2 ) ; i++)
0eec8                 | LR__0394
0eec8     0C D8 56 F2 | 	cmps	local39, #12 wc
0eecc     6C 02 90 3D |  if_ae	jmp	#LR__0401
0eed0     6C D7 02 F6 | 	mov	local38, local39
0eed4     02 D6 66 F0 | 	shl	local38, #2
0eed8     04 BE 06 F1 | 	add	local26, #4
0eedc     5F DB 02 F6 | 	mov	local40, local26
0eee0     5F D7 02 F1 | 	add	local38, local26
0eee4     6B DD 02 FB | 	rdlong	local41, local38
0eee8     69 75 02 F6 | 	mov	arg01, local36
0eeec     60 1B BF FD | 	call	#_readdir
0eef0     1A DF 0A F6 | 	mov	local42, result1 wz
0eef4     04 BE 86 F1 | 	sub	local26, #4
0eef8     14 02 90 AD |  if_e	jmp	#LR__0399
0eefc     6C 75 02 F6 | 	mov	arg01, local39
0ef00     02 74 66 F0 | 	shl	arg01, #2
0ef04     6C 75 02 F1 | 	add	arg01, local39
0ef08     02 74 66 F0 | 	shl	arg01, #2
0ef0c     08 8C 06 F1 | 	add	local01, #8
0ef10     46 75 02 F1 | 	add	arg01, local01
0ef14     6F 77 02 F6 | 	mov	arg02, local42
0ef18     2C 6F BF FD | 	call	#_strcpy
0ef1c     00 74 06 F6 | 	mov	arg01, #0
0ef20     24 9C B1 FD | 	call	#__system___getiolock_1205
0ef24     1A 75 02 F6 | 	mov	arg01, result1
0ef28     F4 63 B1 FD | 	call	#__system___lockmem
0ef2c     4B 01 00 FF 
0ef30     15 76 06 F6 | 	mov	arg02, ##@LR__1981
0ef34     00 74 06 F6 | 	mov	arg01, #0
0ef38     00 78 06 F6 | 	mov	arg03, #0
0ef3c     74 69 B1 FD | 	call	#__system___basic_print_string
0ef40     6C 91 02 F6 | 	mov	local03, local39
0ef44     02 90 66 F0 | 	shl	local03, #2
0ef48     6C 91 02 F1 | 	add	local03, local39
0ef4c     02 90 66 F0 | 	shl	local03, #2
0ef50     46 93 02 F6 | 	mov	local04, local01
0ef54     46 91 02 F1 | 	add	local03, local01
0ef58     48 95 02 F6 | 	mov	local05, local03
0ef5c     00 74 06 F6 | 	mov	arg01, #0
0ef60     4A 77 02 F6 | 	mov	arg02, local05
0ef64     00 78 06 F6 | 	mov	arg03, #0
0ef68     48 69 B1 FD | 	call	#__system___basic_print_string
0ef6c     00 74 06 F6 | 	mov	arg01, #0
0ef70     0A 76 06 F6 | 	mov	arg02, #10
0ef74     00 78 06 F6 | 	mov	arg03, #0
0ef78     EC 68 B1 FD | 	call	#__system___basic_print_char
0ef7c     00 74 06 F6 | 	mov	arg01, #0
0ef80     C4 9B B1 FD | 	call	#__system___getiolock_1205
0ef84     1A 01 68 FC | 	wrlong	#0, result1
0ef88     00 8E 06 F6 | 	mov	local02, #0
0ef8c     6F 75 02 F6 | 	mov	arg01, local42
0ef90     F0 77 B0 FD | 	call	#_isFile_0888
0ef94     00 34 0E F2 | 	cmp	result1, #0 wz
0ef98     08 8C 86 F1 | 	sub	local01, #8
0ef9c     20 00 90 AD |  if_e	jmp	#LR__0395
0efa0     21 00 00 FF 
0efa4     A4 D6 05 F1 | 	add	ptr__dat__, ##17060
0efa8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0efac     21 00 00 FF 
0efb0     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
0efb4     6E 75 02 F6 | 	mov	arg01, local41
0efb8     84 9F BF FD | 	call	#_module_set_image
0efbc     1C 00 90 FD | 	jmp	#LR__0396
0efc0                 | LR__0395
0efc0     21 00 00 FF 
0efc4     D4 D6 05 F1 | 	add	ptr__dat__, ##17108
0efc8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0efcc     21 00 00 FF 
0efd0     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
0efd4     6E 75 02 F6 | 	mov	arg01, local41
0efd8     64 9F BF FD | 	call	#_module_set_image
0efdc                 | LR__0396
0efdc     6E 75 02 F6 | 	mov	arg01, local41
0efe0     64 78 06 F6 | 	mov	arg03, #100
0efe4     F0 74 06 F1 | 	add	arg01, #240
0efe8     3A C9 68 FC | 	wrlong	#100, arg01
0efec     04 74 06 F1 | 	add	arg01, #4
0eff0     3A C9 68 FC | 	wrlong	#100, arg01
0eff4     6E 75 02 F6 | 	mov	arg01, local41
0eff8     01 76 06 F6 | 	mov	arg02, #1
0effc     18 75 06 F1 | 	add	arg01, #280
0f000     3A 03 48 FC | 	wrbyte	#1, arg01
0f004     19 00 00 FF 
0f008     30 8C 06 F1 | 	add	local01, ##12848
0f00c     46 D7 02 FB | 	rdlong	local38, local01
0f010     19 00 00 FF 
0f014     30 8C 86 F1 | 	sub	local01, ##12848
0f018     6C D7 0A F2 | 	cmp	local38, local39 wz
0f01c     9C 00 90 5D |  if_ne	jmp	#LR__0397
0f020     00 74 06 F6 | 	mov	arg01, #0
0f024     20 9B B1 FD | 	call	#__system___getiolock_1205
0f028     1A 75 02 F6 | 	mov	arg01, result1
0f02c     F0 62 B1 FD | 	call	#__system___lockmem
0f030     4B 01 00 FF 
0f034     1C 76 06 F6 | 	mov	arg02, ##@LR__1982
0f038     00 74 06 F6 | 	mov	arg01, #0
0f03c     00 78 06 F6 | 	mov	arg03, #0
0f040     70 68 B1 FD | 	call	#__system___basic_print_string
0f044     19 00 00 FF 
0f048     30 8C 06 F1 | 	add	local01, ##12848
0f04c     46 77 02 FB | 	rdlong	arg02, local01
0f050     19 00 00 FF 
0f054     30 8C 86 F1 | 	sub	local01, ##12848
0f058     0A 90 06 F6 | 	mov	local03, #10
0f05c     00 74 06 F6 | 	mov	arg01, #0
0f060     00 78 06 F6 | 	mov	arg03, #0
0f064     0A 7A 06 F6 | 	mov	arg04, #10
0f068     8C 68 B1 FD | 	call	#__system___basic_print_integer
0f06c     00 74 06 F6 | 	mov	arg01, #0
0f070     0A 76 06 F6 | 	mov	arg02, #10
0f074     00 78 06 F6 | 	mov	arg03, #0
0f078     EC 67 B1 FD | 	call	#__system___basic_print_char
0f07c     00 74 06 F6 | 	mov	arg01, #0
0f080     C4 9A B1 FD | 	call	#__system___getiolock_1205
0f084     1A 01 68 FC | 	wrlong	#0, result1
0f088     00 8E 06 F6 | 	mov	local02, #0
0f08c     04 DC 06 F1 | 	add	local41, #4
0f090     6E 75 02 FB | 	rdlong	arg01, local41
0f094     04 DC 86 F1 | 	sub	local41, #4
0f098     63 00 00 FF 
0f09c     18 78 06 F6 | 	mov	arg03, ##50712
0f0a0     10 75 06 F1 | 	add	arg01, #272
0f0a4     03 00 80 FF 
0f0a8     3A C1 6B FC | 	wrlong	##2016, arg01
0f0ac     04 74 86 F1 | 	sub	arg01, #4
0f0b0     63 00 80 FF 
0f0b4     3A 31 68 FC | 	wrlong	##50712, arg01
0f0b8     28 00 90 FD | 	jmp	#LR__0398
0f0bc                 | LR__0397
0f0bc     04 DC 06 F1 | 	add	local41, #4
0f0c0     6E 75 02 FB | 	rdlong	arg01, local41
0f0c4     04 DC 86 F1 | 	sub	local41, #4
0f0c8     63 00 00 FF 
0f0cc     18 78 06 F6 | 	mov	arg03, ##50712
0f0d0     10 75 06 F1 | 	add	arg01, #272
0f0d4     3A 01 68 FC | 	wrlong	#0, arg01
0f0d8     04 74 86 F1 | 	sub	arg01, #4
0f0dc     63 00 80 FF 
0f0e0     3A 31 68 FC | 	wrlong	##50712, arg01
0f0e4                 | LR__0398
0f0e4     C9 74 02 F6 | 	mov	arg01, objptr
0f0e8     D7 76 02 F6 | 	mov	arg02, ptr__button_files_0906_
0f0ec     F8 61 B1 FD | 	call	#__system___make_methodptr
0f0f0     1A 77 02 F6 | 	mov	arg02, result1
0f0f4     6E 75 02 F6 | 	mov	arg01, local41
0f0f8     6C 79 02 F6 | 	mov	arg03, local39
0f0fc     34 75 06 F1 | 	add	arg01, #308
0f100     3A 77 62 FC | 	wrlong	arg02, arg01
0f104     10 74 86 F1 | 	sub	arg01, #16
0f108     3A 79 62 FC | 	wrlong	arg03, arg01
0f10c     24 00 90 FD | 	jmp	#LR__0400
0f110                 | LR__0399
0f110     6E 75 02 F6 | 	mov	arg01, local41
0f114     00 76 06 F6 | 	mov	arg02, #0
0f118     18 75 06 F1 | 	add	arg01, #280
0f11c     3A 01 48 FC | 	wrbyte	#0, arg01
0f120     00 78 06 F6 | 	mov	arg03, #0
0f124     34 DD 06 F1 | 	add	local41, #308
0f128     6E 01 68 FC | 	wrlong	#0, local41
0f12c     10 DC 86 F1 | 	sub	local41, #16
0f130     6E 01 68 FC | 	wrlong	#0, local41
0f134                 | LR__0400
0f134     01 D8 06 F1 | 	add	local39, #1
0f138     8C FD 9F FD | 	jmp	#LR__0394
0f13c                 | LR__0401
0f13c     69 75 02 F6 | 	mov	arg01, local36
0f140     A4 18 BF FD | 	call	#_closedir
0f144     46 75 02 FB | 	rdlong	arg01, local01
0f148     50 77 02 F6 | 	mov	arg02, local11
0f14c     60 A6 BF FD | 	call	#_module_draw
0f150     00 74 06 F6 | 	mov	arg01, #0
0f154     F0 99 B1 FD | 	call	#__system___getiolock_1205
0f158     1A 75 02 F6 | 	mov	arg01, result1
0f15c     C0 61 B1 FD | 	call	#__system___lockmem
0f160     4B 01 00 FF 
0f164     28 76 06 F6 | 	mov	arg02, ##@LR__1983
0f168     00 74 06 F6 | 	mov	arg01, #0
0f16c     00 78 06 F6 | 	mov	arg03, #0
0f170     40 67 B1 FD | 	call	#__system___basic_print_string
0f174     00 74 06 F6 | 	mov	arg01, #0
0f178     0A 76 06 F6 | 	mov	arg02, #10
0f17c     00 78 06 F6 | 	mov	arg03, #0
0f180     E4 66 B1 FD | 	call	#__system___basic_print_char
0f184     01 C2 06 F6 | 	mov	local28, #1
0f188     00 74 06 F6 | 	mov	arg01, #0
0f18c     B8 99 B1 FD | 	call	#__system___getiolock_1205
0f190     1A 01 68 FC | 	wrlong	#0, result1
0f194     00 C4 06 F6 | 	mov	local29, #0
0f198                 | '         do
0f198                 | LR__0402
0f198     46 75 02 FB | 	rdlong	arg01, local01
0f19c     D4 64 BF FD | 	call	#_display_update_touch
0f1a0     46 77 02 FB | 	rdlong	arg02, local01
0f1a4     46 C1 02 F6 | 	mov	local27, local01
0f1a8     50 75 02 F6 | 	mov	arg01, local11
0f1ac     60 79 02 F6 | 	mov	arg03, local27
0f1b0     4C 9A BF FD | 	call	#_module_touch_check
0f1b4     00 34 0E F2 | 	cmp	result1, #0 wz
0f1b8     DC FF 9F AD |  if_e	jmp	#LR__0402
0f1bc     24 FC 9F FD | 	jmp	#LR__0390
0f1c0                 | LR__0403
0f1c0     46 75 02 FB | 	rdlong	arg01, local01
0f1c4     C0 12 00 FF 
0f1c8     00 76 06 F6 | 	mov	arg02, ##2457600
0f1cc     0A 78 C6 F9 | 	decod	arg03, #10
0f1d0     00 7A 06 F6 | 	mov	arg04, #0
0f1d4     00 7C 06 F6 | 	mov	arg05, #0
0f1d8     00 7E 06 F6 | 	mov	arg06, #0
0f1dc     0A 80 C6 F9 | 	decod	arg07, #10
0f1e0     00 82 06 F6 | 	mov	arg08, #0
0f1e4     00 84 06 F6 | 	mov	arg09, #0
0f1e8     0A 86 C6 F9 | 	decod	arg10, #10
0f1ec     01 00 00 FF 
0f1f0     58 88 06 F6 | 	mov	arg11, ##600
0f1f4     C0 52 BF FD | 	call	#_display_bte_memory_copy
0f1f8     04 8C 06 F1 | 	add	local01, #4
0f1fc     46 D7 0A FB | 	rdlong	local38, local01 wz
0f200     04 8C 86 F1 | 	sub	local01, #4
0f204     88 00 90 5D |  if_ne	jmp	#LR__0405
0f208     19 00 00 FF 
0f20c     30 8C 06 F1 | 	add	local01, ##12848
0f210     46 D7 02 FB | 	rdlong	local38, local01
0f214     19 00 00 FF 
0f218     30 8C 86 F1 | 	sub	local01, ##12848
0f21c     FF FF 7F FF 
0f220     FF D7 0E F2 | 	cmp	local38, ##-1 wz
0f224     20 00 90 5D |  if_ne	jmp	#LR__0404
0f228     18 00 00 FF 
0f22c     C8 8D 06 F1 | 	add	local01, ##12744
0f230     46 75 02 F6 | 	mov	arg01, local01
0f234     4B 01 00 FF 
0f238     35 76 06 F6 | 	mov	arg02, ##@LR__1984
0f23c     08 6C BF FD | 	call	#_strcpy
0f240                 | '         {
0f240                 | '             strcpy(explorer->pathBuffer, "");
0f240                 | '             return explorer->pathBuffer;
0f240     46 35 02 F6 | 	mov	result1, local01
0f244     A4 00 90 FD | 	jmp	#LR__0406
0f248                 | LR__0404
0f248     18 00 00 FF 
0f24c     C8 8D 06 F1 | 	add	local01, ##12744
0f250     46 75 02 F6 | 	mov	arg01, local01
0f254     4B 01 00 FF 
0f258     37 76 06 F6 | 	mov	arg02, ##@LR__1985
0f25c     74 6C BF FD | 	call	#_strcat
0f260     46 75 02 F6 | 	mov	arg01, local01
0f264     68 8C 06 F1 | 	add	local01, #104
0f268     46 C1 02 FB | 	rdlong	local27, local01
0f26c     60 77 02 F6 | 	mov	arg02, local27
0f270     02 76 66 F0 | 	shl	arg02, #2
0f274     60 77 02 F1 | 	add	arg02, local27
0f278     02 76 66 F0 | 	shl	arg02, #2
0f27c     19 00 00 FF 
0f280     28 8C 86 F1 | 	sub	local01, ##12840
0f284     46 77 02 F1 | 	add	arg02, local01
0f288     48 6C BF FD | 	call	#_strcat
0f28c     08 8C 86 F1 | 	sub	local01, #8
0f290                 | LR__0405
0f290     00 74 06 F6 | 	mov	arg01, #0
0f294     B0 98 B1 FD | 	call	#__system___getiolock_1205
0f298     1A 75 02 F6 | 	mov	arg01, result1
0f29c     80 60 B1 FD | 	call	#__system___lockmem
0f2a0     4B 01 00 FF 
0f2a4     39 76 06 F6 | 	mov	arg02, ##@LR__1986
0f2a8     00 74 06 F6 | 	mov	arg01, #0
0f2ac     00 78 06 F6 | 	mov	arg03, #0
0f2b0     00 66 B1 FD | 	call	#__system___basic_print_string
0f2b4     18 00 00 FF 
0f2b8     C8 8D 06 F1 | 	add	local01, ##12744
0f2bc     46 77 02 F6 | 	mov	arg02, local01
0f2c0     00 74 06 F6 | 	mov	arg01, #0
0f2c4     00 78 06 F6 | 	mov	arg03, #0
0f2c8     E8 65 B1 FD | 	call	#__system___basic_print_string
0f2cc     00 74 06 F6 | 	mov	arg01, #0
0f2d0     0A 76 06 F6 | 	mov	arg02, #10
0f2d4     00 78 06 F6 | 	mov	arg03, #0
0f2d8     8C 65 B1 FD | 	call	#__system___basic_print_char
0f2dc     00 74 06 F6 | 	mov	arg01, #0
0f2e0     64 98 B1 FD | 	call	#__system___getiolock_1205
0f2e4     1A 01 68 FC | 	wrlong	#0, result1
0f2e8                 | '     return explorer->pathBuffer;
0f2e8     46 35 02 F6 | 	mov	result1, local01
0f2ec                 | LR__0406
0f2ec     A8 F0 03 F6 | 	mov	ptra, fp
0f2f0     B3 00 A0 FD | 	call	#popregs_
0f2f4                 | _explorer_run_ret
0f2f4     2D 00 64 FD | 	ret
0f2f8                 | 
0f2f8                 | _selection_init
0f2f8     07 4C 05 F6 | 	mov	COUNT_, #7
0f2fc     A9 00 A0 FD | 	call	#pushregs_
0f300     3A 8D 02 F6 | 	mov	local01, arg01
0f304     3B 8F 02 F6 | 	mov	local02, arg02
0f308     04 8C 06 F1 | 	add	local01, #4
0f30c     46 91 02 F6 | 	mov	local03, local01
0f310     48 75 02 F6 | 	mov	arg01, local03
0f314     00 76 06 F6 | 	mov	arg02, #0
0f318     BC 96 BF FD | 	call	#_module_init
0f31c     40 8D 06 F1 | 	add	local01, #320
0f320     46 93 02 F6 | 	mov	local04, local01
0f324     49 75 02 F6 | 	mov	arg01, local04
0f328     48 77 02 F6 | 	mov	arg02, local03
0f32c     A8 96 BF FD | 	call	#_module_init
0f330     49 75 02 F6 | 	mov	arg01, local04
0f334     CC 74 06 F1 | 	add	arg01, #204
0f338     3A 0B 68 FC | 	wrlong	#5, arg01
0f33c     24 74 06 F1 | 	add	arg01, #36
0f340     3A 21 6B FC | 	wrlong	#400, arg01
0f344     04 74 06 F1 | 	add	arg01, #4
0f348     3A 01 68 FC | 	wrlong	#0, arg01
0f34c     49 75 02 F6 | 	mov	arg01, local04
0f350     E8 74 06 F1 | 	add	arg01, #232
0f354     3A 71 6A FC | 	wrlong	#312, arg01
0f358     04 74 06 F1 | 	add	arg01, #4
0f35c     3A C9 68 FC | 	wrlong	#100, arg01
0f360     49 75 02 F6 | 	mov	arg01, local04
0f364     F8 74 06 F1 | 	add	arg01, #248
0f368     3A 15 68 FC | 	wrlong	#10, arg01
0f36c     04 74 06 F1 | 	add	arg01, #4
0f370     3A 15 68 FC | 	wrlong	#10, arg01
0f374     49 75 02 F6 | 	mov	arg01, local04
0f378     10 75 06 F1 | 	add	arg01, #272
0f37c     63 00 80 FF 
0f380     3A 31 68 FC | 	wrlong	##50712, arg01
0f384     04 74 86 F1 | 	sub	arg01, #4
0f388     3A 3F 68 FC | 	wrlong	#31, arg01
0f38c     49 75 02 F6 | 	mov	arg01, local04
0f390     00 76 06 F6 | 	mov	arg02, #0
0f394     01 78 06 F6 | 	mov	arg03, #1
0f398     48 9F BF FD | 	call	#_module_add_border
0f39c     40 8D 06 F1 | 	add	local01, #320
0f3a0     46 91 02 F6 | 	mov	local03, local01
0f3a4     48 75 02 F6 | 	mov	arg01, local03
0f3a8     49 77 02 F6 | 	mov	arg02, local04
0f3ac     28 96 BF FD | 	call	#_module_init
0f3b0     48 75 02 F6 | 	mov	arg01, local03
0f3b4     0A 78 06 F6 | 	mov	arg03, #10
0f3b8     00 75 06 F1 | 	add	arg01, #256
0f3bc     3A 15 68 FC | 	wrlong	#10, arg01
0f3c0     04 74 06 F1 | 	add	arg01, #4
0f3c4     3A 15 68 FC | 	wrlong	#10, arg01
0f3c8     56 01 00 FF 
0f3cc     A9 D6 05 F1 | 	add	ptr__dat__, ##175273
0f3d0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
0f3d4     56 01 00 FF 
0f3d8     A9 D6 85 F1 | 	sub	ptr__dat__, ##175273
0f3dc     48 75 02 F6 | 	mov	arg01, local03
0f3e0     90 9B BF FD | 	call	#_module_set_text
0f3e4     48 75 02 F6 | 	mov	arg01, local03
0f3e8     02 76 06 F6 | 	mov	arg02, #2
0f3ec     C4 9C BF FD | 	call	#_module_text_font
0f3f0     48 75 02 F6 | 	mov	arg01, local03
0f3f4     D8 9B BF FD | 	call	#_module_text_fit
0f3f8     48 79 02 FB | 	rdlong	arg03, local03
0f3fc     10 79 06 F1 | 	add	arg03, #272
0f400     3C 79 02 FB | 	rdlong	arg03, arg03
0f404     48 75 02 F6 | 	mov	arg01, local03
0f408     10 75 06 F1 | 	add	arg01, #272
0f40c     3A 01 68 FC | 	wrlong	#0, arg01
0f410     04 74 86 F1 | 	sub	arg01, #4
0f414     3A 79 62 FC | 	wrlong	arg03, arg01
0f418     48 75 02 F6 | 	mov	arg01, local03
0f41c     04 9F BF FD | 	call	#_module_align_inner_top
0f420     48 75 02 F6 | 	mov	arg01, local03
0f424     01 76 06 F6 | 	mov	arg02, #1
0f428     02 78 06 F6 | 	mov	arg03, #2
0f42c     20 A0 BF FD | 	call	#_module_align_center_sector
0f430     48 75 02 F6 | 	mov	arg01, local03
0f434     CC 74 06 F1 | 	add	arg01, #204
0f438     3A 95 02 FB | 	rdlong	local05, arg01
0f43c     CC 74 86 F1 | 	sub	arg01, #204
0f440     01 94 0E F2 | 	cmp	local05, #1 wz
0f444                 | '         return;
0f444     D8 74 06 A1 |  if_e	add	arg01, #216
0f448     3A 03 48 AC |  if_e	wrbyte	#1, arg01
0f44c     00 96 06 F6 | 	mov	local06, #0
0f450                 | ' 
0f450                 | ' 
0f450                 | '     Module *root = &(selection->root);
0f450                 | '     module_init(root,  (0) );
0f450                 | ' 
0f450                 | ' 
0f450                 | '     Module *window = &(selection->window);
0f450                 | '     module_init(window, root);
0f450                 | '     module_set_rectangle_circle(window,  400 , 0);
0f450                 | '     module_set_position(window, x, y);
0f450                 | '     module_set_padding(window, padding, padding);
0f450                 | '     module_set_color(window,  0xC618 ,  0x001f );
0f450                 | '     module_add_border(window,  0x0000 , 1);
0f450                 | ' 
0f450                 | ' 
0f450                 | '     Module *title = &(selection->title);
0f450                 | '     module_init(title, window);
0f450                 | '     module_set_margin(title, padding, padding);
0f450                 | '     module_set_text(title, selectBuffer);
0f450                 | '     module_text_font(title,  2 );
0f450                 | '     module_text_fit(title);
0f450                 | '     module_set_color(title,  0x0000 , title->parent->foregroundColor);
0f450                 | '     module_align_inner_top(title);
0f450                 | '     module_align_center(title);
0f450                 | '     module_text_underline(title);
0f450                 | ' 
0f450                 | '     Module *below = title;
0f450                 | '     for (int i = 0; i <  10 ; i++)
0f450     01 00 00 FF 
0f454     84 8C 86 F1 | 	sub	local01, ##644
0f458                 | LR__0407
0f458     0A 96 56 F2 | 	cmps	local06, #10 wc
0f45c     48 01 90 3D |  if_ae	jmp	#LR__0408
0f460     4B 99 02 F6 | 	mov	local07, local06
0f464     02 98 66 F0 | 	shl	local07, #2
0f468     4B 99 02 F1 | 	add	local07, local06
0f46c     06 98 66 F0 | 	shl	local07, #6
0f470     01 00 00 FF 
0f474     C4 8D 06 F1 | 	add	local01, ##964
0f478     46 99 02 F1 | 	add	local07, local01
0f47c     4C 75 02 F6 | 	mov	arg01, local07
0f480     49 77 02 F6 | 	mov	arg02, local04
0f484     50 95 BF FD | 	call	#_module_init
0f488     4B 77 02 F6 | 	mov	arg02, local06
0f48c     02 76 66 F0 | 	shl	arg02, #2
0f490     4B 77 02 F1 | 	add	arg02, local06
0f494     02 76 66 F0 | 	shl	arg02, #2
0f498     06 00 00 FF 
0f49c     80 8C 06 F1 | 	add	local01, ##3200
0f4a0     46 77 02 F1 | 	add	arg02, local01
0f4a4     4C 75 02 F6 | 	mov	arg01, local07
0f4a8     C8 9A BF FD | 	call	#_module_set_text
0f4ac     4C 75 02 F6 | 	mov	arg01, local07
0f4b0     01 76 06 F6 | 	mov	arg02, #1
0f4b4     FC 9B BF FD | 	call	#_module_text_font
0f4b8     4C 75 02 F6 | 	mov	arg01, local07
0f4bc     F0 74 06 F1 | 	add	arg01, #240
0f4c0     3A 01 68 FC | 	wrlong	#0, arg01
0f4c4     04 74 06 F1 | 	add	arg01, #4
0f4c8     3A 51 68 FC | 	wrlong	#40, arg01
0f4cc     4C 75 02 F6 | 	mov	arg01, local07
0f4d0     00 A1 BF FD | 	call	#_module_fit_width
0f4d4     4C 75 02 F6 | 	mov	arg01, local07
0f4d8     00 75 06 F1 | 	add	arg01, #256
0f4dc     3A 15 68 FC | 	wrlong	#10, arg01
0f4e0     04 74 06 F1 | 	add	arg01, #4
0f4e4     3A 15 68 FC | 	wrlong	#10, arg01
0f4e8     4C 79 02 FB | 	rdlong	arg03, local07
0f4ec     10 79 06 F1 | 	add	arg03, #272
0f4f0     3C 79 02 FB | 	rdlong	arg03, arg03
0f4f4     4C 75 02 F6 | 	mov	arg01, local07
0f4f8     10 75 06 F1 | 	add	arg01, #272
0f4fc     3A 01 68 FC | 	wrlong	#0, arg01
0f500     04 74 86 F1 | 	sub	arg01, #4
0f504     3A 79 62 FC | 	wrlong	arg03, arg01
0f508     4C 75 02 F6 | 	mov	arg01, local07
0f50c     3C 9E BF FD | 	call	#_module_align_inner_left
0f510     4C 75 02 F6 | 	mov	arg01, local07
0f514     48 77 02 F6 | 	mov	arg02, local03
0f518     60 A0 BF FD | 	call	#_module_align_below
0f51c     4C 75 02 F6 | 	mov	arg01, local07
0f520     00 76 06 F6 | 	mov	arg02, #0
0f524     01 78 06 F6 | 	mov	arg03, #1
0f528     B8 9D BF FD | 	call	#_module_add_border
0f52c     4C 75 02 F6 | 	mov	arg01, local07
0f530     CC 74 06 F1 | 	add	arg01, #204
0f534     3A 95 02 FB | 	rdlong	local05, arg01
0f538     CC 74 86 F1 | 	sub	arg01, #204
0f53c     01 94 0E F2 | 	cmp	local05, #1 wz
0f540                 | '         return;
0f540     DC 74 06 A1 |  if_e	add	arg01, #220
0f544     3A 05 68 AC |  if_e	wrlong	#2, arg01
0f548     4C 75 02 F6 | 	mov	arg01, local07
0f54c     CC 74 06 F1 | 	add	arg01, #204
0f550     3A 95 02 FB | 	rdlong	local05, arg01
0f554     CC 74 86 F1 | 	sub	arg01, #204
0f558     01 94 0E F2 | 	cmp	local05, #1 wz
0f55c                 | '         return;
0f55c     E0 74 06 A1 |  if_e	add	arg01, #224
0f560     3A 0B 68 AC |  if_e	wrlong	#5, arg01
0f564     4C 75 02 F6 | 	mov	arg01, local07
0f568     18 75 06 F1 | 	add	arg01, #280
0f56c     3A 01 48 FC | 	wrbyte	#0, arg01
0f570     C9 74 02 F6 | 	mov	arg01, objptr
0f574     E9 76 02 F6 | 	mov	arg02, ptr__check_buttons_1974_
0f578     6C 5D B1 FD | 	call	#__system___make_methodptr
0f57c     4C 75 02 F6 | 	mov	arg01, local07
0f580     4B 79 02 F6 | 	mov	arg03, local06
0f584     34 75 06 F1 | 	add	arg01, #308
0f588     3A 35 62 FC | 	wrlong	result1, arg01
0f58c     10 74 86 F1 | 	sub	arg01, #16
0f590     3A 79 62 FC | 	wrlong	arg03, arg01
0f594     4C 91 02 F6 | 	mov	local03, local07
0f598     01 96 06 F1 | 	add	local06, #1
0f59c     08 00 00 FF 
0f5a0     44 8C 86 F1 | 	sub	local01, ##4164
0f5a4     B0 FE 9F FD | 	jmp	#LR__0407
0f5a8                 | LR__0408
0f5a8     F4 92 06 F1 | 	add	local04, #244
0f5ac     49 C9 68 FC | 	wrlong	#100, local04
0f5b0     08 00 00 FF 
0f5b4     0C 8D 06 F1 | 	add	local01, ##4364
0f5b8     46 01 68 FC | 	wrlong	#0, local01
0f5bc     04 8C 06 F1 | 	add	local01, #4
0f5c0     FF FF FF FF 
0f5c4     46 FF 6B FC | 	wrlong	##-1, local01
0f5c8     08 00 00 FF 
0f5cc     10 8D 86 F1 | 	sub	local01, ##4368
0f5d0     46 8F 62 FC | 	wrlong	local02, local01
0f5d4     A8 F0 03 F6 | 	mov	ptra, fp
0f5d8     B3 00 A0 FD | 	call	#popregs_
0f5dc                 | _selection_init_ret
0f5dc     2D 00 64 FD | 	ret
0f5e0                 | 
0f5e0                 | _selection_add_option
0f5e0     03 4C 05 F6 | 	mov	COUNT_, #3
0f5e4     A9 00 A0 FD | 	call	#pushregs_
0f5e8     3A 8D 02 F6 | 	mov	local01, arg01
0f5ec     3B 8F 02 F6 | 	mov	local02, arg02
0f5f0     00 74 06 F6 | 	mov	arg01, #0
0f5f4     50 95 B1 FD | 	call	#__system___getiolock_1205
0f5f8     1A 75 02 F6 | 	mov	arg01, result1
0f5fc     20 5D B1 FD | 	call	#__system___lockmem
0f600     4B 01 00 FF 
0f604     3F 76 06 F6 | 	mov	arg02, ##@LR__1987
0f608     00 74 06 F6 | 	mov	arg01, #0
0f60c     00 78 06 F6 | 	mov	arg03, #0
0f610     A0 62 B1 FD | 	call	#__system___basic_print_string
0f614     00 74 06 F6 | 	mov	arg01, #0
0f618     0A 76 06 F6 | 	mov	arg02, #10
0f61c     00 78 06 F6 | 	mov	arg03, #0
0f620     44 62 B1 FD | 	call	#__system___basic_print_char
0f624     00 74 06 F6 | 	mov	arg01, #0
0f628     1C 95 B1 FD | 	call	#__system___getiolock_1205
0f62c     1A 01 68 FC | 	wrlong	#0, result1
0f630     08 00 00 FF 
0f634     0C 8D 06 F1 | 	add	local01, ##4364
0f638     46 79 02 FB | 	rdlong	arg03, local01
0f63c     3C 91 02 F6 | 	mov	local03, arg03
0f640     02 90 66 F0 | 	shl	local03, #2
0f644     3C 91 02 F1 | 	add	local03, arg03
0f648     06 90 66 F0 | 	shl	local03, #6
0f64c     06 00 00 FF 
0f650     48 8D 86 F1 | 	sub	local01, ##3400
0f654     46 91 02 F1 | 	add	local03, local01
0f658     3C 75 02 F6 | 	mov	arg01, arg03
0f65c     02 74 66 F0 | 	shl	arg01, #2
0f660     3C 75 02 F1 | 	add	arg01, arg03
0f664     02 74 66 F0 | 	shl	arg01, #2
0f668     06 00 00 FF 
0f66c     80 8C 06 F1 | 	add	local01, ##3200
0f670     46 75 02 F1 | 	add	arg01, local01
0f674     47 77 02 F6 | 	mov	arg02, local02
0f678     14 78 06 F6 | 	mov	arg03, #20
0f67c     FC 67 BF FD | 	call	#_strncpy
0f680     48 75 02 F6 | 	mov	arg01, local03
0f684     01 76 06 F6 | 	mov	arg02, #1
0f688     18 75 06 F1 | 	add	arg01, #280
0f68c     3A 03 48 FC | 	wrbyte	#1, arg01
0f690     C8 8C 06 F1 | 	add	local01, #200
0f694     46 8F 02 FB | 	rdlong	local02, local01
0f698     01 8E 06 F1 | 	add	local02, #1
0f69c     46 8F 62 FC | 	wrlong	local02, local01
0f6a0     EC 90 06 F1 | 	add	local03, #236
0f6a4     48 8F 02 FB | 	rdlong	local02, local03
0f6a8     08 90 06 F1 | 	add	local03, #8
0f6ac     48 75 02 FB | 	rdlong	arg01, local03
0f6b0     3A 8F 02 F1 | 	add	local02, arg01
0f6b4     08 90 06 F1 | 	add	local03, #8
0f6b8     48 91 02 FB | 	rdlong	local03, local03
0f6bc     48 8F 02 F1 | 	add	local02, local03
0f6c0     07 00 00 FF 
0f6c4     D4 8C 86 F1 | 	sub	local01, ##3796
0f6c8     46 8F 62 FC | 	wrlong	local02, local01
0f6cc     00 74 06 F6 | 	mov	arg01, #0
0f6d0     74 94 B1 FD | 	call	#__system___getiolock_1205
0f6d4     1A 75 02 F6 | 	mov	arg01, result1
0f6d8     44 5C B1 FD | 	call	#__system___lockmem
0f6dc     4B 01 00 FF 
0f6e0     4D 76 06 F6 | 	mov	arg02, ##@LR__1988
0f6e4     00 74 06 F6 | 	mov	arg01, #0
0f6e8     00 78 06 F6 | 	mov	arg03, #0
0f6ec     C4 61 B1 FD | 	call	#__system___basic_print_string
0f6f0     00 74 06 F6 | 	mov	arg01, #0
0f6f4     0A 76 06 F6 | 	mov	arg02, #10
0f6f8     00 78 06 F6 | 	mov	arg03, #0
0f6fc     68 61 B1 FD | 	call	#__system___basic_print_char
0f700     00 74 06 F6 | 	mov	arg01, #0
0f704     40 94 B1 FD | 	call	#__system___getiolock_1205
0f708     1A 01 68 FC | 	wrlong	#0, result1
0f70c     A8 F0 03 F6 | 	mov	ptra, fp
0f710     B3 00 A0 FD | 	call	#popregs_
0f714                 | _selection_add_option_ret
0f714     2D 00 64 FD | 	ret
0f718                 | 
0f718                 | _selection_run
0f718     01 4C 05 F6 | 	mov	COUNT_, #1
0f71c     A9 00 A0 FD | 	call	#pushregs_
0f720     3A 8D 02 F6 | 	mov	local01, arg01
0f724     46 75 02 FB | 	rdlong	arg01, local01
0f728     00 76 06 F6 | 	mov	arg02, #0
0f72c     0A 78 C6 F9 | 	decod	arg03, #10
0f730     00 7A 06 F6 | 	mov	arg04, #0
0f734     00 7C 06 F6 | 	mov	arg05, #0
0f738     C0 12 00 FF 
0f73c     00 7E 06 F6 | 	mov	arg06, ##2457600
0f740     0A 80 C6 F9 | 	decod	arg07, #10
0f744     00 82 06 F6 | 	mov	arg08, #0
0f748     00 84 06 F6 | 	mov	arg09, #0
0f74c     0A 86 C6 F9 | 	decod	arg10, #10
0f750     01 00 00 FF 
0f754     58 88 06 F6 | 	mov	arg11, ##600
0f758     5C 4D BF FD | 	call	#_display_bte_memory_copy
0f75c     46 75 02 FB | 	rdlong	arg01, local01
0f760     04 8C 06 F1 | 	add	local01, #4
0f764     46 77 02 F6 | 	mov	arg02, local01
0f768     04 8C 86 F1 | 	sub	local01, #4
0f76c     40 A0 BF FD | 	call	#_module_draw
0f770                 | ' {
0f770                 | ' 
0f770                 | '     display_bte_memory_copy(selection->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
0f770                 | '     module_draw(selection->display, &(selection->root));
0f770                 | ' 
0f770                 | '     do
0f770                 | LR__0409
0f770     46 75 02 FB | 	rdlong	arg01, local01
0f774     FC 5E BF FD | 	call	#_display_update_touch
0f778     04 8C 06 F1 | 	add	local01, #4
0f77c     46 75 02 F6 | 	mov	arg01, local01
0f780     04 8C 86 F1 | 	sub	local01, #4
0f784     46 77 02 FB | 	rdlong	arg02, local01
0f788     46 79 02 F6 | 	mov	arg03, local01
0f78c     70 94 BF FD | 	call	#_module_touch_check
0f790     00 34 0E F2 | 	cmp	result1, #0 wz
0f794     D8 FF 9F AD |  if_e	jmp	#LR__0409
0f798     00 74 06 F6 | 	mov	arg01, #0
0f79c     A8 93 B1 FD | 	call	#__system___getiolock_1205
0f7a0     1A 75 02 F6 | 	mov	arg01, result1
0f7a4     78 5B B1 FD | 	call	#__system___lockmem
0f7a8     4B 01 00 FF 
0f7ac     60 76 06 F6 | 	mov	arg02, ##@LR__1989
0f7b0     00 74 06 F6 | 	mov	arg01, #0
0f7b4     00 78 06 F6 | 	mov	arg03, #0
0f7b8     F8 60 B1 FD | 	call	#__system___basic_print_string
0f7bc     08 00 00 FF 
0f7c0     10 8D 06 F1 | 	add	local01, ##4368
0f7c4     46 77 02 FB | 	rdlong	arg02, local01
0f7c8     08 00 00 FF 
0f7cc     10 8D 86 F1 | 	sub	local01, ##4368
0f7d0     00 74 06 F6 | 	mov	arg01, #0
0f7d4     00 78 06 F6 | 	mov	arg03, #0
0f7d8     0A 7A 06 F6 | 	mov	arg04, #10
0f7dc     18 61 B1 FD | 	call	#__system___basic_print_integer
0f7e0     00 74 06 F6 | 	mov	arg01, #0
0f7e4     0A 76 06 F6 | 	mov	arg02, #10
0f7e8     00 78 06 F6 | 	mov	arg03, #0
0f7ec     78 60 B1 FD | 	call	#__system___basic_print_char
0f7f0     00 74 06 F6 | 	mov	arg01, #0
0f7f4     50 93 B1 FD | 	call	#__system___getiolock_1205
0f7f8     1A 01 68 FC | 	wrlong	#0, result1
0f7fc     46 75 02 FB | 	rdlong	arg01, local01
0f800     C0 12 00 FF 
0f804     00 76 06 F6 | 	mov	arg02, ##2457600
0f808     0A 78 C6 F9 | 	decod	arg03, #10
0f80c     00 7A 06 F6 | 	mov	arg04, #0
0f810     00 7C 06 F6 | 	mov	arg05, #0
0f814     00 7E 06 F6 | 	mov	arg06, #0
0f818     0A 80 C6 F9 | 	decod	arg07, #10
0f81c     00 82 06 F6 | 	mov	arg08, #0
0f820     00 84 06 F6 | 	mov	arg09, #0
0f824     0A 86 C6 F9 | 	decod	arg10, #10
0f828     01 00 00 FF 
0f82c     58 88 06 F6 | 	mov	arg11, ##600
0f830     84 4C BF FD | 	call	#_display_bte_memory_copy
0f834                 | ' 
0f834                 | ' 
0f834                 | '     display_bte_memory_copy(selection->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
0f834                 | '     return selection->selected;
0f834     08 00 00 FF 
0f838     10 8D 06 F1 | 	add	local01, ##4368
0f83c     46 35 02 FB | 	rdlong	result1, local01
0f840     A8 F0 03 F6 | 	mov	ptra, fp
0f844     B3 00 A0 FD | 	call	#popregs_
0f848                 | _selection_run_ret
0f848     2D 00 64 FD | 	ret
0f84c                 | 
0f84c                 | _run_motion_profile_init
0f84c     3A 01 68 FC | 	wrlong	#0, arg01
0f850     04 74 06 F1 | 	add	arg01, #4
0f854     3A 01 68 FC | 	wrlong	#0, arg01
0f858     04 74 06 F1 | 	add	arg01, #4
0f85c     3A 01 68 FC | 	wrlong	#0, arg01
0f860     04 74 06 F1 | 	add	arg01, #4
0f864     3A 01 48 FC | 	wrbyte	#0, arg01
0f868     01 74 06 F1 | 	add	arg01, #1
0f86c     3A 01 48 FC | 	wrbyte	#0, arg01
0f870     01 74 06 F1 | 	add	arg01, #1
0f874     3A 01 48 FC | 	wrbyte	#0, arg01
0f878     02 74 06 F1 | 	add	arg01, #2
0f87c     3A 01 68 FC | 	wrlong	#0, arg01
0f880     0C 74 06 F1 | 	add	arg01, #12
0f884     3A 01 68 FC | 	wrlong	#0, arg01
0f888     04 74 06 F1 | 	add	arg01, #4
0f88c     3A 01 68 FC | 	wrlong	#0, arg01
0f890     08 74 86 F1 | 	sub	arg01, #8
0f894     3A 01 68 FC | 	wrlong	#0, arg01
0f898     04 74 86 F1 | 	sub	arg01, #4
0f89c     3A 01 68 FC | 	wrlong	#0, arg01
0f8a0                 | _run_motion_profile_init_ret
0f8a0     2D 00 64 FD | 	ret
0f8a4                 | 
0f8a4                 | _get_function_info
0f8a4     02 4C 05 F6 | 	mov	COUNT_, #2
0f8a8     A9 00 A0 FD | 	call	#pushregs_
0f8ac     3A 8D 02 F6 | 	mov	local01, arg01
0f8b0     3B 8F 0A F6 | 	mov	local02, arg02 wz
0f8b4                 | ' {
0f8b4                 | '     switch (id)
0f8b4     0C 00 90 AD |  if_e	jmp	#LR__0410
0f8b8     01 8E 0E F2 | 	cmp	local02, #1 wz
0f8bc     64 00 90 AD |  if_e	jmp	#LR__0411
0f8c0     E4 00 90 FD | 	jmp	#LR__0412
0f8c4                 | LR__0410
0f8c4     46 01 68 FC | 	wrlong	#0, local01
0f8c8     04 8C 06 F1 | 	add	local01, #4
0f8cc     46 75 02 F6 | 	mov	arg01, local01
0f8d0     4B 01 00 FF 
0f8d4     6B 76 06 F6 | 	mov	arg02, ##@LR__1990
0f8d8     0A 78 06 F6 | 	mov	arg03, #10
0f8dc     9C 65 BF FD | 	call	#_strncpy
0f8e0     14 8C 06 F1 | 	add	local01, #20
0f8e4     46 01 68 FC | 	wrlong	#0, local01
0f8e8     04 8C 06 F1 | 	add	local01, #4
0f8ec     46 05 68 FC | 	wrlong	#2, local01
0f8f0     04 8C 06 F1 | 	add	local01, #4
0f8f4     46 75 02 F6 | 	mov	arg01, local01
0f8f8     4B 01 00 FF 
0f8fc     70 76 06 F6 | 	mov	arg02, ##@LR__1991
0f900     14 78 06 F6 | 	mov	arg03, #20
0f904     74 65 BF FD | 	call	#_strncpy
0f908     14 8C 06 F1 | 	add	local01, #20
0f90c     4B 01 00 FF 
0f910     79 76 06 F6 | 	mov	arg02, ##@LR__1992
0f914     46 75 02 F6 | 	mov	arg01, local01
0f918     14 78 06 F6 | 	mov	arg03, #20
0f91c     5C 65 BF FD | 	call	#_strncpy
0f920                 | '     {
0f920                 | '         info->id = QUARTET_FUNC_LINE;
0f920                 | ' 
0f920                 | '         strncpy(info->name, "Line",  10 );
0f920                 | ' 
0f920                 | '         info->func =  (0) ;
0f920                 | ' 
0f920                 | '         info->args_count = 2;
0f920                 | '         strncpy(info->args[0], "distance",  20 );
0f920                 | '         strncpy(info->args[1], "strain rate",  20 );
0f920                 | '         break;
0f920     AC 00 90 FD | 	jmp	#LR__0413
0f924                 | LR__0411
0f924     46 03 68 FC | 	wrlong	#1, local01
0f928     04 8C 06 F1 | 	add	local01, #4
0f92c     46 75 02 F6 | 	mov	arg01, local01
0f930     4B 01 00 FF 
0f934     85 76 06 F6 | 	mov	arg02, ##@LR__1993
0f938     0A 78 06 F6 | 	mov	arg03, #10
0f93c     3C 65 BF FD | 	call	#_strncpy
0f940     C9 74 02 F6 | 	mov	arg01, objptr
0f944     0B 77 02 F6 | 	mov	arg02, ptr__sigmoid_
0f948     9C 59 B1 FD | 	call	#__system___make_methodptr
0f94c     14 8C 06 F1 | 	add	local01, #20
0f950     46 35 62 FC | 	wrlong	result1, local01
0f954     04 8C 06 F1 | 	add	local01, #4
0f958     46 07 68 FC | 	wrlong	#3, local01
0f95c     04 8C 06 F1 | 	add	local01, #4
0f960     46 75 02 F6 | 	mov	arg01, local01
0f964     4B 01 00 FF 
0f968     8D 76 06 F6 | 	mov	arg02, ##@LR__1994
0f96c     14 78 06 F6 | 	mov	arg03, #20
0f970     08 65 BF FD | 	call	#_strncpy
0f974     14 8C 06 F1 | 	add	local01, #20
0f978     46 75 02 F6 | 	mov	arg01, local01
0f97c     4B 01 00 FF 
0f980     96 76 06 F6 | 	mov	arg02, ##@LR__1995
0f984     14 78 06 F6 | 	mov	arg03, #20
0f988     F0 64 BF FD | 	call	#_strncpy
0f98c     14 8C 06 F1 | 	add	local01, #20
0f990     4B 01 00 FF 
0f994     A2 76 06 F6 | 	mov	arg02, ##@LR__1996
0f998     46 75 02 F6 | 	mov	arg01, local01
0f99c     14 78 06 F6 | 	mov	arg03, #20
0f9a0     D8 64 BF FD | 	call	#_strncpy
0f9a4                 | '     {
0f9a4                 | '         info->id = QUARTET_FUNC_SIGMOIDAL;
0f9a4                 | ' 
0f9a4                 | '         strncpy(info->name, "Sigmoid",  10 );
0f9a4                 | ' 
0f9a4                 | '         info->func = sigmoid;
0f9a4                 | ' 
0f9a4                 | '         info->args_count = 3;
0f9a4                 | '         strncpy(info->args[0], "distance",  20 );
0f9a4                 | '         strncpy(info->args[1], "strain rate",  20 );
0f9a4                 | '         strncpy(info->args[2], "error",  20 );
0f9a4                 | '         break;
0f9a4     28 00 90 FD | 	jmp	#LR__0413
0f9a8                 | LR__0412
0f9a8     46 03 68 FC | 	wrlong	#1, local01
0f9ac     04 8C 06 F1 | 	add	local01, #4
0f9b0     46 75 02 F6 | 	mov	arg01, local01
0f9b4     4B 01 00 FF 
0f9b8     A8 76 06 F6 | 	mov	arg02, ##@LR__1997
0f9bc     D8 58 B1 FD | 	call	#__system____builtin_strcpy
0f9c0     14 8C 06 F1 | 	add	local01, #20
0f9c4     46 01 68 FC | 	wrlong	#0, local01
0f9c8     04 8C 06 F1 | 	add	local01, #4
0f9cc     46 01 68 FC | 	wrlong	#0, local01
0f9d0                 | '         info->id = QUARTET_FUNC_SIGMOIDAL;
0f9d0                 | ' 
0f9d0                 | '         __builtin_strcpy(info->name, "") ;
0f9d0                 | ' 
0f9d0                 | '         info->func =  (0) ;
0f9d0                 | ' 
0f9d0                 | '         info->args_count = 0;
0f9d0                 | '         break;
0f9d0                 | LR__0413
0f9d0     A8 F0 03 F6 | 	mov	ptra, fp
0f9d4     B3 00 A0 FD | 	call	#popregs_
0f9d8                 | _get_function_info_ret
0f9d8     2D 00 64 FD | 	ret
0f9dc                 | 
0f9dc                 | _position_profile
0f9dc     02 4C 05 F6 | 	mov	COUNT_, #2
0f9e0     A9 00 A0 FD | 	call	#pushregs_
0f9e4     3B 8D 02 F6 | 	mov	local01, arg02
0f9e8     46 35 02 FB | 	rdlong	result1, local01
0f9ec     02 00 00 FF 
0f9f0     34 34 06 FD | 	qmul	result1, ##1076
0f9f4     3C 8F 02 F6 | 	mov	local02, arg03
0f9f8     3C 8E 06 F1 | 	add	local02, #60
0f9fc     46 77 02 F6 | 	mov	arg02, local01
0fa00     18 78 62 FD | 	getqx	arg03
0fa04     47 79 02 F1 | 	add	arg03, local02
0fa08     58 00 B0 FD | 	call	#_position_set
0fa0c     1A 79 02 F6 | 	mov	arg03, result1
0fa10     0D 8C 06 F1 | 	add	local01, #13
0fa14     46 35 CA FA | 	rdbyte	result1, local01 wz
0fa18     0D 8C 86 F1 | 	sub	local01, #13
0fa1c     3C 8E 86 F1 | 	sub	local02, #60
0fa20     18 00 90 AD |  if_e	jmp	#LR__0414
0fa24     46 35 02 FB | 	rdlong	result1, local01
0fa28     01 34 06 F1 | 	add	result1, #1
0fa2c     46 35 62 FC | 	wrlong	result1, local01
0fa30     0D 8C 06 F1 | 	add	local01, #13
0fa34     46 01 48 FC | 	wrbyte	#0, local01
0fa38     0D 8C 86 F1 | 	sub	local01, #13
0fa3c                 | LR__0414
0fa3c     46 35 02 FB | 	rdlong	result1, local01
0fa40     38 8E 06 F1 | 	add	local02, #56
0fa44     47 8F 02 FB | 	rdlong	local02, local02
0fa48     47 35 52 F2 | 	cmps	result1, local02 wc
0fa4c     0C 8C 06 31 |  if_ae	add	local01, #12
0fa50     46 03 48 3C |  if_ae	wrbyte	#1, local01
0fa54                 | '     {
0fa54                 | '         run->profileComplete =  (1) ;
0fa54                 | '     }
0fa54                 | '     return position;
0fa54     3C 35 02 F6 | 	mov	result1, arg03
0fa58     A8 F0 03 F6 | 	mov	ptra, fp
0fa5c     B3 00 A0 FD | 	call	#popregs_
0fa60                 | _position_profile_ret
0fa60     2D 00 64 FD | 	ret
0fa64                 | 
0fa64                 | _position_set
0fa64     02 4C 05 F6 | 	mov	COUNT_, #2
0fa68     A9 00 A0 FD | 	call	#pushregs_
0fa6c     3B 8D 02 F6 | 	mov	local01, arg02
0fa70     08 8C 06 F1 | 	add	local01, #8
0fa74     46 35 02 FB | 	rdlong	result1, local01
0fa78     64 34 06 FD | 	qmul	result1, #100
0fa7c     3C 8F 02 F6 | 	mov	local02, arg03
0fa80     4C 8E 06 F1 | 	add	local02, #76
0fa84     18 78 62 FD | 	getqx	arg03
0fa88     47 79 02 F1 | 	add	arg03, local02
0fa8c     A8 00 B0 FD | 	call	#_position_quartet
0fa90     1A 79 02 F6 | 	mov	arg03, result1
0fa94     06 8C 06 F1 | 	add	local01, #6
0fa98     46 35 CA FA | 	rdbyte	result1, local01 wz
0fa9c     0E 8C 86 F1 | 	sub	local01, #14
0faa0     4C 8E 86 F1 | 	sub	local02, #76
0faa4     1C 00 90 AD |  if_e	jmp	#LR__0415
0faa8     08 8C 06 F1 | 	add	local01, #8
0faac     46 35 02 FB | 	rdlong	result1, local01
0fab0     01 34 06 F1 | 	add	result1, #1
0fab4     46 35 62 FC | 	wrlong	result1, local01
0fab8     06 8C 06 F1 | 	add	local01, #6
0fabc     46 01 48 FC | 	wrbyte	#0, local01
0fac0     0E 8C 86 F1 | 	sub	local01, #14
0fac4                 | LR__0415
0fac4     08 8C 06 F1 | 	add	local01, #8
0fac8     46 77 02 FB | 	rdlong	arg02, local01
0facc     08 8C 86 F1 | 	sub	local01, #8
0fad0     48 8E 06 F1 | 	add	local02, #72
0fad4     47 35 02 FB | 	rdlong	result1, local02
0fad8     48 8E 86 F1 | 	sub	local02, #72
0fadc     1A 77 52 F2 | 	cmps	arg02, result1 wc
0fae0     1C 00 90 CD |  if_b	jmp	#LR__0416
0fae4     04 8C 06 F1 | 	add	local01, #4
0fae8     46 35 02 FB | 	rdlong	result1, local01
0faec     01 34 06 F1 | 	add	result1, #1
0faf0     46 35 62 FC | 	wrlong	result1, local01
0faf4     04 8C 06 F1 | 	add	local01, #4
0faf8     46 01 68 FC | 	wrlong	#0, local01
0fafc     08 8C 86 F1 | 	sub	local01, #8
0fb00                 | LR__0416
0fb00     04 8C 06 F1 | 	add	local01, #4
0fb04     46 77 02 FB | 	rdlong	arg02, local01
0fb08     04 8C 86 F1 | 	sub	local01, #4
0fb0c     44 8E 06 F1 | 	add	local02, #68
0fb10     47 8F 02 FB | 	rdlong	local02, local02
0fb14     47 77 52 F2 | 	cmps	arg02, local02 wc
0fb18     0D 8C 06 31 |  if_ae	add	local01, #13
0fb1c     46 03 48 3C |  if_ae	wrbyte	#1, local01
0fb20     09 8C 86 31 |  if_ae	sub	local01, #9
0fb24     46 01 68 3C |  if_ae	wrlong	#0, local01
0fb28                 | '     {
0fb28                 | ' 
0fb28                 | '         run->setComplete =  (1) ;
0fb28                 | '         run->currentExecution = 0;
0fb28                 | '     }
0fb28                 | '     return position;
0fb28     3C 35 02 F6 | 	mov	result1, arg03
0fb2c     A8 F0 03 F6 | 	mov	ptra, fp
0fb30     B3 00 A0 FD | 	call	#popregs_
0fb34                 | _position_set_ret
0fb34     2D 00 64 FD | 	ret
0fb38                 | 
0fb38                 | _position_quartet
0fb38     03 4C 05 F6 | 	mov	COUNT_, #3
0fb3c     A9 00 A0 FD | 	call	#pushregs_
0fb40     C8 F1 07 F1 | 	add	ptra, #456
0fb44     04 50 05 F1 | 	add	fp, #4
0fb48     A8 74 62 FC | 	wrlong	arg01, fp
0fb4c     04 50 05 F1 | 	add	fp, #4
0fb50     A8 76 62 FC | 	wrlong	arg02, fp
0fb54     04 50 05 F1 | 	add	fp, #4
0fb58     A8 78 62 FC | 	wrlong	arg03, fp
0fb5c     04 50 05 F1 | 	add	fp, #4
0fb60     A8 74 02 F6 | 	mov	arg01, fp
0fb64     10 50 85 F1 | 	sub	fp, #16
0fb68     3C 77 02 F6 | 	mov	arg02, arg03
0fb6c     34 76 06 F1 | 	add	arg02, #52
0fb70     3B 77 02 FB | 	rdlong	arg02, arg02
0fb74     2C FD BF FD | 	call	#_get_function_info
0fb78     28 50 05 F1 | 	add	fp, #40
0fb7c     A8 74 02 FB | 	rdlong	arg01, fp
0fb80     28 50 85 F1 | 	sub	fp, #40
0fb84     00 76 06 F6 | 	mov	arg02, #0
0fb88     CC 57 B1 FD | 	call	#__system___funcptr_cmp
0fb8c     00 34 0E F2 | 	cmp	result1, #0 wz
0fb90     68 00 90 5D |  if_ne	jmp	#LR__0417
0fb94     08 50 05 F1 | 	add	fp, #8
0fb98     A8 34 02 FB | 	rdlong	result1, fp
0fb9c     04 50 85 F1 | 	sub	fp, #4
0fba0     A8 76 02 FB | 	rdlong	arg02, fp
0fba4     10 34 06 F1 | 	add	result1, #16
0fba8     1A 77 62 FC | 	wrlong	arg02, result1
0fbac     04 50 05 F1 | 	add	fp, #4
0fbb0     A8 76 02 FB | 	rdlong	arg02, fp
0fbb4     3B 8D 02 F6 | 	mov	local01, arg02
0fbb8     1C 76 06 F1 | 	add	arg02, #28
0fbbc     3B 75 02 FB | 	rdlong	arg01, arg02
0fbc0     04 50 05 F1 | 	add	fp, #4
0fbc4     A8 76 02 FB | 	rdlong	arg02, fp
0fbc8     0C 50 85 F1 | 	sub	fp, #12
0fbcc     38 76 06 F1 | 	add	arg02, #56
0fbd0     3B 77 02 FB | 	rdlong	arg02, arg02
0fbd4     C4 71 B1 FD | 	call	#__system___float_add
0fbd8     1C 8C 06 F1 | 	add	local01, #28
0fbdc     46 35 62 FC | 	wrlong	result1, local01
0fbe0     08 50 05 F1 | 	add	fp, #8
0fbe4     A8 8C 02 FB | 	rdlong	local01, fp
0fbe8     08 50 85 F1 | 	sub	fp, #8
0fbec     0E 8C 06 F1 | 	add	local01, #14
0fbf0     46 03 48 FC | 	wrbyte	#1, local01
0fbf4                 | '     {
0fbf4                 | ' 
0fbf4                 | '         run->lastQuartetTime = t;
0fbf4                 | '         run->lastQuartetDistance += quartet->parameters[0];
0fbf4                 | '         run->quartetComplete =  (1) ;
0fbf4                 | '         return 0;
0fbf4     00 34 06 F6 | 	mov	result1, #0
0fbf8     20 01 90 FD | 	jmp	#LR__0419
0fbfc                 | LR__0417
0fbfc     28 50 05 F1 | 	add	fp, #40
0fc00     A8 8C 02 FB | 	rdlong	local01, fp
0fc04     46 8F 02 FB | 	rdlong	local02, local01
0fc08     04 8C 06 F1 | 	add	local01, #4
0fc0c     46 8D 02 FB | 	rdlong	local01, local01
0fc10     24 50 85 F1 | 	sub	fp, #36
0fc14     A8 74 02 FB | 	rdlong	arg01, fp
0fc18     04 50 05 F1 | 	add	fp, #4
0fc1c     A8 76 02 FB | 	rdlong	arg02, fp
0fc20     08 50 85 F1 | 	sub	fp, #8
0fc24     10 76 06 F1 | 	add	arg02, #16
0fc28     3B 77 02 FB | 	rdlong	arg02, arg02
0fc2c     1F 76 E6 F4 | 	bitnot	arg02, #31
0fc30     68 71 B1 FD | 	call	#__system___float_add
0fc34     1A 75 02 F6 | 	mov	arg01, result1
0fc38     0C 50 05 F1 | 	add	fp, #12
0fc3c     A8 76 02 FB | 	rdlong	arg02, fp
0fc40     0C 50 85 F1 | 	sub	fp, #12
0fc44     38 76 06 F1 | 	add	arg02, #56
0fc48     C9 90 02 F6 | 	mov	local03, objptr
0fc4c     47 93 01 F6 | 	mov	objptr, local02
0fc50     2D 8C 62 FD | 	call	local01
0fc54     48 93 01 F6 | 	mov	objptr, local03
0fc58     C0 51 05 F1 | 	add	fp, #448
0fc5c     A8 34 62 FC | 	wrlong	result1, fp
0fc60     B8 51 85 F1 | 	sub	fp, #440
0fc64     A8 8C 02 FB | 	rdlong	local01, fp
0fc68     1C 8C 06 F1 | 	add	local01, #28
0fc6c     46 91 02 FB | 	rdlong	local03, local01
0fc70     BC 51 05 F1 | 	add	fp, #444
0fc74     A8 90 62 FC | 	wrlong	local03, fp
0fc78     04 50 85 F1 | 	sub	fp, #4
0fc7c     A8 74 02 FB | 	rdlong	arg01, fp
0fc80     B4 51 85 F1 | 	sub	fp, #436
0fc84     A8 90 02 FB | 	rdlong	local03, fp
0fc88     0C 50 85 F1 | 	sub	fp, #12
0fc8c     38 90 06 F1 | 	add	local03, #56
0fc90     48 77 02 FB | 	rdlong	arg02, local03
0fc94     01 78 06 F6 | 	mov	arg03, #1
0fc98     5C 78 B1 FD | 	call	#__system___float_cmp
0fc9c     00 34 0E F2 | 	cmp	result1, #0 wz
0fca0     60 00 90 5D |  if_ne	jmp	#LR__0418
0fca4     08 50 05 F1 | 	add	fp, #8
0fca8     A8 8C 02 FB | 	rdlong	local01, fp
0fcac     04 50 85 F1 | 	sub	fp, #4
0fcb0     A8 90 02 FB | 	rdlong	local03, fp
0fcb4     10 8C 06 F1 | 	add	local01, #16
0fcb8     46 91 62 FC | 	wrlong	local03, local01
0fcbc     04 50 05 F1 | 	add	fp, #4
0fcc0     A8 90 02 FB | 	rdlong	local03, fp
0fcc4     48 8D 02 F6 | 	mov	local01, local03
0fcc8     1C 90 06 F1 | 	add	local03, #28
0fccc     48 75 02 FB | 	rdlong	arg01, local03
0fcd0     04 50 05 F1 | 	add	fp, #4
0fcd4     A8 90 02 FB | 	rdlong	local03, fp
0fcd8     0C 50 85 F1 | 	sub	fp, #12
0fcdc     38 90 06 F1 | 	add	local03, #56
0fce0     48 77 02 FB | 	rdlong	arg02, local03
0fce4     B4 70 B1 FD | 	call	#__system___float_add
0fce8     1C 8C 06 F1 | 	add	local01, #28
0fcec     46 35 62 FC | 	wrlong	result1, local01
0fcf0     08 50 05 F1 | 	add	fp, #8
0fcf4     A8 8C 02 FB | 	rdlong	local01, fp
0fcf8     08 50 85 F1 | 	sub	fp, #8
0fcfc     0E 8C 06 F1 | 	add	local01, #14
0fd00     46 03 48 FC | 	wrbyte	#1, local01
0fd04                 | LR__0418
0fd04                 | '     {
0fd04                 | '         run->lastQuartetTime = t;
0fd04                 | '         run->lastQuartetDistance += quartet->parameters[0];
0fd04                 | '         run->quartetComplete =  (1) ;
0fd04                 | '     }
0fd04                 | '     return lastQuartetDistance + position;
0fd04     C4 51 05 F1 | 	add	fp, #452
0fd08     A8 74 02 FB | 	rdlong	arg01, fp
0fd0c     04 50 85 F1 | 	sub	fp, #4
0fd10     A8 76 02 FB | 	rdlong	arg02, fp
0fd14     C0 51 85 F1 | 	sub	fp, #448
0fd18     80 70 B1 FD | 	call	#__system___float_add
0fd1c                 | LR__0419
0fd1c     A8 F0 03 F6 | 	mov	ptra, fp
0fd20     B3 00 A0 FD | 	call	#popregs_
0fd24                 | _position_quartet_ret
0fd24     2D 00 64 FD | 	ret
0fd28                 | 
0fd28                 | _sigmoid
0fd28     06 4C 05 F6 | 	mov	COUNT_, #6
0fd2c     A9 00 A0 FD | 	call	#pushregs_
0fd30     3A 8D 02 F6 | 	mov	local01, arg01
0fd34     3B 8F 02 FB | 	rdlong	local02, arg02
0fd38     04 76 06 F1 | 	add	arg02, #4
0fd3c     3B 91 02 FB | 	rdlong	local03, arg02
0fd40     04 76 06 F1 | 	add	arg02, #4
0fd44     3B 93 02 FB | 	rdlong	local04, arg02
0fd48     01 94 06 F6 | 	mov	local05, #1
0fd4c     47 75 02 F6 | 	mov	arg01, local02
0fd50     00 76 06 F6 | 	mov	arg02, #0
0fd54     01 78 06 F6 | 	mov	arg03, #1
0fd58     9C 77 B1 FD | 	call	#__system___float_cmp
0fd5c     00 34 56 F2 | 	cmps	result1, #0 wc
0fd60     01 94 66 C6 |  if_b	neg	local05, #1
0fd64     1F 8E E6 C4 |  if_b	bitnot	local02, #31
0fd68     48 75 02 F6 | 	mov	arg01, local03
0fd6c     00 40 20 FF 
0fd70     00 76 06 F6 | 	mov	arg02, ##1082130432
0fd74     28 73 B1 FD | 	call	#__system___float_mul
0fd78     1A 75 02 F6 | 	mov	arg01, result1
0fd7c     47 77 02 F6 | 	mov	arg02, local02
0fd80     3C 75 B1 FD | 	call	#__system___float_div
0fd84     1A 91 02 F6 | 	mov	local03, result1
0fd88     47 75 02 F6 | 	mov	arg01, local02
0fd8c     49 77 02 F6 | 	mov	arg02, local04
0fd90     2C 75 B1 FD | 	call	#__system___float_div
0fd94     1A 75 02 F6 | 	mov	arg01, result1
0fd98     00 C0 1F FF 
0fd9c     00 76 06 F6 | 	mov	arg02, ##1065353216
0fda0     1F 76 E6 F4 | 	bitnot	arg02, #31
0fda4     F4 6F B1 FD | 	call	#__system___float_add
0fda8     1A 77 02 F6 | 	mov	arg02, result1
0fdac     FC 16 20 FF 
0fdb0     54 74 06 F6 | 	mov	arg01, ##1076754516
0fdb4     E0 7C B1 FD | 	call	#__system____builtin_logbase
0fdb8     1A 75 02 F6 | 	mov	arg01, result1
0fdbc     48 77 02 F6 | 	mov	arg02, local03
0fdc0     FC 74 B1 FD | 	call	#__system___float_div
0fdc4     1A 97 02 F6 | 	mov	local06, result1
0fdc8     00 C0 5F FF 
0fdcc     00 74 06 F6 | 	mov	arg01, ##-1082130432
0fdd0     48 77 02 F6 | 	mov	arg02, local03
0fdd4     C8 72 B1 FD | 	call	#__system___float_mul
0fdd8     1A 91 02 F6 | 	mov	local03, result1
0fddc     46 75 02 F6 | 	mov	arg01, local01
0fde0     4B 77 02 F6 | 	mov	arg02, local06
0fde4     1F 76 E6 F4 | 	bitnot	arg02, #31
0fde8     B0 6F B1 FD | 	call	#__system___float_add
0fdec     1A 77 02 F6 | 	mov	arg02, result1
0fdf0     48 75 02 F6 | 	mov	arg01, local03
0fdf4     A8 72 B1 FD | 	call	#__system___float_mul
0fdf8     1A 77 02 F6 | 	mov	arg02, result1
0fdfc     FC 16 20 FF 
0fe00     54 74 06 F6 | 	mov	arg01, ##1076754516
0fe04     D4 7B B1 FD | 	call	#__system____builtin_powf
0fe08     1A 77 02 F6 | 	mov	arg02, result1
0fe0c     00 C0 1F FF 
0fe10     00 74 06 F6 | 	mov	arg01, ##1065353216
0fe14     84 6F B1 FD | 	call	#__system___float_add
0fe18     1A 77 02 F6 | 	mov	arg02, result1
0fe1c     47 75 02 F6 | 	mov	arg01, local02
0fe20     9C 74 B1 FD | 	call	#__system___float_div
0fe24     1A 97 02 F6 | 	mov	local06, result1
0fe28     4B 75 02 F6 | 	mov	arg01, local06
0fe2c     1F 74 06 F4 | 	bitl	arg01, #31
0fe30     47 77 02 F6 | 	mov	arg02, local02
0fe34     1F 76 06 F4 | 	bitl	arg02, #31
0fe38     1F 76 E6 F4 | 	bitnot	arg02, #31
0fe3c     5C 6F B1 FD | 	call	#__system___float_add
0fe40     1F 34 06 F4 | 	bitl	result1, #31
0fe44     1A 75 02 F6 | 	mov	arg01, result1
0fe48     1F 92 06 F4 | 	bitl	local04, #31
0fe4c     49 77 02 F6 | 	mov	arg02, local04
0fe50     01 78 06 F6 | 	mov	arg03, #1
0fe54     A0 76 B1 FD | 	call	#__system___float_cmp
0fe58     00 34 56 F2 | 	cmps	result1, #0 wc
0fe5c     18 00 90 3D |  if_ae	jmp	#LR__0420
0fe60                 | '     {
0fe60                 | '         return dir * distance;
0fe60     4A 75 02 F6 | 	mov	arg01, local05
0fe64     04 6F B1 FD | 	call	#__system___float_fromint
0fe68     1A 75 02 F6 | 	mov	arg01, result1
0fe6c     47 77 02 F6 | 	mov	arg02, local02
0fe70     2C 72 B1 FD | 	call	#__system___float_mul
0fe74     14 00 90 FD | 	jmp	#LR__0421
0fe78                 | LR__0420
0fe78                 | '     }
0fe78                 | '     return dir * position;
0fe78     4A 75 02 F6 | 	mov	arg01, local05
0fe7c     EC 6E B1 FD | 	call	#__system___float_fromint
0fe80     1A 75 02 F6 | 	mov	arg01, result1
0fe84     4B 77 02 F6 | 	mov	arg02, local06
0fe88     14 72 B1 FD | 	call	#__system___float_mul
0fe8c                 | LR__0421
0fe8c     A8 F0 03 F6 | 	mov	ptra, fp
0fe90     B3 00 A0 FD | 	call	#popregs_
0fe94                 | _sigmoid_ret
0fe94     2D 00 64 FD | 	ret
0fe98                 | 
0fe98                 | _steps_to_mm
0fe98     02 4C 05 F6 | 	mov	COUNT_, #2
0fe9c     A9 00 A0 FD | 	call	#pushregs_
0fea0     3B 8D 02 F6 | 	mov	local01, arg02
0fea4                 | ' {
0fea4                 | '     return steps * (config->gearDiameter * 3.14159) / config->positionEncoderStepsPerRev;
0fea4     C4 6E B1 FD | 	call	#__system___float_fromint
0fea8     1A 8F 02 F6 | 	mov	local02, result1
0feac     1C 8C 06 F1 | 	add	local01, #28
0feb0     46 75 02 FB | 	rdlong	arg01, local01
0feb4     87 24 20 FF 
0feb8     D0 77 06 F6 | 	mov	arg02, ##1078530000
0febc     E0 71 B1 FD | 	call	#__system___float_mul
0fec0     1A 77 02 F6 | 	mov	arg02, result1
0fec4     47 75 02 F6 | 	mov	arg01, local02
0fec8     D4 71 B1 FD | 	call	#__system___float_mul
0fecc     1A 75 02 F6 | 	mov	arg01, result1
0fed0     28 8C 06 F1 | 	add	local01, #40
0fed4     46 77 02 FB | 	rdlong	arg02, local01
0fed8     E4 73 B1 FD | 	call	#__system___float_div
0fedc     A8 F0 03 F6 | 	mov	ptra, fp
0fee0     B3 00 A0 FD | 	call	#popregs_
0fee4                 | _steps_to_mm_ret
0fee4     2D 00 64 FD | 	ret
0fee8                 | 
0fee8                 | _mm_to_steps
0fee8     02 4C 05 F6 | 	mov	COUNT_, #2
0feec     A9 00 A0 FD | 	call	#pushregs_
0fef0     3B 8D 02 F6 | 	mov	local01, arg02
0fef4                 | ' {
0fef4                 | '     return (int) __builtin_round(mm * (double)config->positionEncoderStepsPerRev / (double)(config->gearDiameter * 3.14159)) ;
0fef4     44 8C 06 F1 | 	add	local01, #68
0fef8     46 77 02 FB | 	rdlong	arg02, local01
0fefc     A0 71 B1 FD | 	call	#__system___float_mul
0ff00     1A 8F 02 F6 | 	mov	local02, result1
0ff04     28 8C 86 F1 | 	sub	local01, #40
0ff08     46 75 02 FB | 	rdlong	arg01, local01
0ff0c     87 24 20 FF 
0ff10     D0 77 06 F6 | 	mov	arg02, ##1078530000
0ff14     88 71 B1 FD | 	call	#__system___float_mul
0ff18     1A 77 02 F6 | 	mov	arg02, result1
0ff1c     47 75 02 F6 | 	mov	arg01, local02
0ff20     9C 73 B1 FD | 	call	#__system___float_div
0ff24     1A 75 02 F6 | 	mov	arg01, result1
0ff28     01 76 06 F6 | 	mov	arg02, #1
0ff2c     60 76 B1 FD | 	call	#__system___float_tointeger
0ff30     A8 F0 03 F6 | 	mov	ptra, fp
0ff34     B3 00 A0 FD | 	call	#popregs_
0ff38                 | _mm_to_steps_ret
0ff38     2D 00 64 FD | 	ret
0ff3c                 | 
0ff3c                 | _test_profile_page_init
0ff3c     07 4C 05 F6 | 	mov	COUNT_, #7
0ff40     A9 00 A0 FD | 	call	#pushregs_
0ff44     3A 8D 02 F6 | 	mov	local01, arg01
0ff48     04 8C 06 F1 | 	add	local01, #4
0ff4c     46 77 62 FC | 	wrlong	arg02, local01
0ff50     04 8C 06 F1 | 	add	local01, #4
0ff54     46 79 62 FC | 	wrlong	arg03, local01
0ff58     04 8C 06 F1 | 	add	local01, #4
0ff5c     FF FF FF FF 
0ff60     46 FF 6B FC | 	wrlong	##-1, local01
0ff64     04 8C 06 F1 | 	add	local01, #4
0ff68     46 75 02 F6 | 	mov	arg01, local01
0ff6c     4B 01 00 FF 
0ff70     AA 76 06 F6 | 	mov	arg02, ##@LR__1998
0ff74     20 53 B1 FD | 	call	#__system____builtin_strcpy
0ff78     64 8C 06 F1 | 	add	local01, #100
0ff7c     46 75 02 F6 | 	mov	arg01, local01
0ff80     4B 01 00 FF 
0ff84     AE 76 06 F6 | 	mov	arg02, ##@LR__1999
0ff88     0C 53 B1 FD | 	call	#__system____builtin_strcpy
0ff8c     22 00 00 FF 
0ff90     0C 8C 06 F1 | 	add	local01, ##17420
0ff94     46 8F 02 F6 | 	mov	local02, local01
0ff98     47 75 02 F6 | 	mov	arg01, local02
0ff9c     00 76 06 F6 | 	mov	arg02, #0
0ffa0     34 8A BF FD | 	call	#_module_init
0ffa4     40 8D 06 F1 | 	add	local01, #320
0ffa8     46 91 02 F6 | 	mov	local03, local01
0ffac     48 75 02 F6 | 	mov	arg01, local03
0ffb0     47 77 02 F6 | 	mov	arg02, local02
0ffb4     20 8A BF FD | 	call	#_module_init
0ffb8     48 75 02 F6 | 	mov	arg01, local03
0ffbc     CC 74 06 F1 | 	add	arg01, #204
0ffc0     3A 0B 68 FC | 	wrlong	#5, arg01
0ffc4     24 74 06 F1 | 	add	arg01, #36
0ffc8     02 00 80 FF 
0ffcc     3A 01 68 FC | 	wrlong	##1024, arg01
0ffd0     04 74 06 F1 | 	add	arg01, #4
0ffd4     01 00 80 FF 
0ffd8     3A B1 68 FC | 	wrlong	##600, arg01
0ffdc     48 75 02 F6 | 	mov	arg01, local03
0ffe0     E8 74 06 F1 | 	add	arg01, #232
0ffe4     3A 01 68 FC | 	wrlong	#0, arg01
0ffe8     04 74 06 F1 | 	add	arg01, #4
0ffec     3A 01 68 FC | 	wrlong	#0, arg01
0fff0     48 75 02 F6 | 	mov	arg01, local03
0fff4     F8 74 06 F1 | 	add	arg01, #248
0fff8     3A 15 68 FC | 	wrlong	#10, arg01
0fffc     04 74 06 F1 | 	add	arg01, #4
10000     3A 15 68 FC | 	wrlong	#10, arg01
10004     48 75 02 F6 | 	mov	arg01, local03
10008     01 00 00 FF 
1000c     73 78 06 F6 | 	mov	arg03, ##627
10010     10 75 06 F1 | 	add	arg01, #272
10014     01 00 80 FF 
10018     3A E7 68 FC | 	wrlong	##627, arg01
1001c     04 74 86 F1 | 	sub	arg01, #4
10020     01 00 80 FF 
10024     3A E7 68 FC | 	wrlong	##627, arg01
10028     C9 74 02 F6 | 	mov	arg01, objptr
1002c     05 77 02 F6 | 	mov	arg02, ptr__module_animation_switch_page_up_
10030     B4 52 B1 FD | 	call	#__system___make_methodptr
10034     48 75 02 F6 | 	mov	arg01, local03
10038     30 75 06 F1 | 	add	arg01, #304
1003c     3A 35 62 FC | 	wrlong	result1, arg01
10040     40 8D 06 F1 | 	add	local01, #320
10044     46 93 02 F6 | 	mov	local04, local01
10048     49 75 02 F6 | 	mov	arg01, local04
1004c     48 77 02 F6 | 	mov	arg02, local03
10050     84 89 BF FD | 	call	#_module_init
10054     49 75 02 F6 | 	mov	arg01, local04
10058     CC 74 06 F1 | 	add	arg01, #204
1005c     3A 0B 68 FC | 	wrlong	#5, arg01
10060     24 74 06 F1 | 	add	arg01, #36
10064     3A AB 6A FC | 	wrlong	#341, arg01
10068     04 74 06 F1 | 	add	arg01, #4
1006c     3A 01 68 FC | 	wrlong	#0, arg01
10070     49 75 02 F6 | 	mov	arg01, local04
10074     24 96 BF FD | 	call	#_module_fit_height
10078     49 75 02 F6 | 	mov	arg01, local04
1007c     F8 74 06 F1 | 	add	arg01, #248
10080     3A 15 68 FC | 	wrlong	#10, arg01
10084     04 74 06 F1 | 	add	arg01, #4
10088     3A 15 68 FC | 	wrlong	#10, arg01
1008c     49 75 02 F6 | 	mov	arg01, local04
10090     10 75 06 F1 | 	add	arg01, #272
10094     1D 00 80 FF 
10098     3A E9 6A FC | 	wrlong	##15220, arg01
1009c     04 74 86 F1 | 	sub	arg01, #4
100a0     01 00 80 FF 
100a4     3A E7 68 FC | 	wrlong	##627, arg01
100a8     49 75 02 F6 | 	mov	arg01, local04
100ac     0F 76 CE F9 | 	bmask	arg02, #15
100b0     01 78 06 F6 | 	mov	arg03, #1
100b4     2C 92 BF FD | 	call	#_module_add_border
100b8     49 75 02 F6 | 	mov	arg01, local04
100bc     8C 92 BF FD | 	call	#_module_align_inner_left
100c0     49 75 02 F6 | 	mov	arg01, local04
100c4     5C 92 BF FD | 	call	#_module_align_inner_top
100c8     49 75 02 F6 | 	mov	arg01, local04
100cc     0A 78 06 F6 | 	mov	arg03, #10
100d0     00 75 06 F1 | 	add	arg01, #256
100d4     3A 15 68 FC | 	wrlong	#10, arg01
100d8     04 74 06 F1 | 	add	arg01, #4
100dc     3A 15 68 FC | 	wrlong	#10, arg01
100e0     40 8D 06 F1 | 	add	local01, #320
100e4     46 8F 02 F6 | 	mov	local02, local01
100e8     47 75 02 F6 | 	mov	arg01, local02
100ec     49 77 02 F6 | 	mov	arg02, local04
100f0     E4 88 BF FD | 	call	#_module_init
100f4     47 75 02 F6 | 	mov	arg01, local02
100f8     CC 74 06 F1 | 	add	arg01, #204
100fc     3A 0B 68 FC | 	wrlong	#5, arg01
10100     24 74 06 F1 | 	add	arg01, #36
10104     3A C9 68 FC | 	wrlong	#100, arg01
10108     04 74 06 F1 | 	add	arg01, #4
1010c     3A 65 68 FC | 	wrlong	#50, arg01
10110     47 75 02 F6 | 	mov	arg01, local02
10114     10 75 06 F1 | 	add	arg01, #272
10118     43 00 80 FF 
1011c     3A E1 6B FC | 	wrlong	##34800, arg01
10120     04 74 86 F1 | 	sub	arg01, #4
10124     43 00 80 FF 
10128     3A E1 6B FC | 	wrlong	##34800, arg01
1012c     47 75 02 F6 | 	mov	arg01, local02
10130     F8 74 06 F1 | 	add	arg01, #248
10134     3A 15 68 FC | 	wrlong	#10, arg01
10138     04 74 06 F1 | 	add	arg01, #4
1013c     3A 15 68 FC | 	wrlong	#10, arg01
10140     47 75 02 F6 | 	mov	arg01, local02
10144     01 76 06 F6 | 	mov	arg02, #1
10148     02 78 06 F6 | 	mov	arg03, #2
1014c     74 93 BF FD | 	call	#_module_align_space_even
10150     47 75 02 F6 | 	mov	arg01, local02
10154     CC 91 BF FD | 	call	#_module_align_inner_top
10158     C9 74 02 F6 | 	mov	arg01, objptr
1015c     DE 76 02 F6 | 	mov	arg02, ptr__button_open_0988_
10160     84 51 B1 FD | 	call	#__system___make_methodptr
10164     47 75 02 F6 | 	mov	arg01, local02
10168     00 78 06 F6 | 	mov	arg03, #0
1016c     34 75 06 F1 | 	add	arg01, #308
10170     3A 35 62 FC | 	wrlong	result1, arg01
10174     10 74 86 F1 | 	sub	arg01, #16
10178     3A 01 68 FC | 	wrlong	#0, arg01
1017c     40 8D 06 F1 | 	add	local01, #320
10180     46 95 02 F6 | 	mov	local05, local01
10184     4A 75 02 F6 | 	mov	arg01, local05
10188     47 77 02 F6 | 	mov	arg02, local02
1018c     48 88 BF FD | 	call	#_module_init
10190     15 01 00 FF 
10194     34 D7 05 F1 | 	add	ptr__dat__, ##142132
10198     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1019c     15 01 00 FF 
101a0     34 D7 85 F1 | 	sub	ptr__dat__, ##142132
101a4     4A 75 02 F6 | 	mov	arg01, local05
101a8     C8 8D BF FD | 	call	#_module_set_text
101ac     4A 75 02 F6 | 	mov	arg01, local05
101b0     01 76 66 F6 | 	neg	arg02, #1
101b4     FC 8E BF FD | 	call	#_module_text_font
101b8     4A 75 02 F6 | 	mov	arg01, local05
101bc     10 8E BF FD | 	call	#_module_text_fit
101c0     4A 75 02 F6 | 	mov	arg01, local05
101c4     01 76 06 F6 | 	mov	arg02, #1
101c8     02 78 06 F6 | 	mov	arg03, #2
101cc     80 92 BF FD | 	call	#_module_align_center_sector
101d0     4A 75 02 F6 | 	mov	arg01, local05
101d4     2C 92 BF FD | 	call	#_module_align_middle
101d8     4A 79 02 FB | 	rdlong	arg03, local05
101dc     10 79 06 F1 | 	add	arg03, #272
101e0     3C 79 02 FB | 	rdlong	arg03, arg03
101e4     4A 75 02 F6 | 	mov	arg01, local05
101e8     10 75 06 F1 | 	add	arg01, #272
101ec     3A 01 68 FC | 	wrlong	#0, arg01
101f0     04 74 86 F1 | 	sub	arg01, #4
101f4     3A 79 62 FC | 	wrlong	arg03, arg01
101f8     40 8D 06 F1 | 	add	local01, #320
101fc     46 97 02 F6 | 	mov	local06, local01
10200     4B 75 02 F6 | 	mov	arg01, local06
10204     49 77 02 F6 | 	mov	arg02, local04
10208     CC 87 BF FD | 	call	#_module_init
1020c     4B 75 02 F6 | 	mov	arg01, local06
10210     47 77 02 F6 | 	mov	arg02, local02
10214     64 8C BF FD | 	call	#_module_copy
10218     4B 75 02 F6 | 	mov	arg01, local06
1021c     02 76 06 F6 | 	mov	arg02, #2
10220     02 78 06 F6 | 	mov	arg03, #2
10224     9C 92 BF FD | 	call	#_module_align_space_even
10228     C9 74 02 F6 | 	mov	arg01, objptr
1022c     DB 76 02 F6 | 	mov	arg02, ptr__button_new_0996_
10230     B4 50 B1 FD | 	call	#__system___make_methodptr
10234     4B 75 02 F6 | 	mov	arg01, local06
10238     00 78 06 F6 | 	mov	arg03, #0
1023c     34 75 06 F1 | 	add	arg01, #308
10240     3A 35 62 FC | 	wrlong	result1, arg01
10244     10 74 86 F1 | 	sub	arg01, #16
10248     3A 01 68 FC | 	wrlong	#0, arg01
1024c     40 8D 06 F1 | 	add	local01, #320
10250     46 75 02 F6 | 	mov	arg01, local01
10254     4B 77 02 F6 | 	mov	arg02, local06
10258     7C 87 BF FD | 	call	#_module_init
1025c     46 75 02 F6 | 	mov	arg01, local01
10260     4A 77 02 F6 | 	mov	arg02, local05
10264     14 8C BF FD | 	call	#_module_copy
10268     15 01 00 FF 
1026c     39 D7 05 F1 | 	add	ptr__dat__, ##142137
10270     EB 76 02 F6 | 	mov	arg02, ptr__dat__
10274     15 01 00 FF 
10278     39 D7 85 F1 | 	sub	ptr__dat__, ##142137
1027c     46 75 02 F6 | 	mov	arg01, local01
10280     F0 8C BF FD | 	call	#_module_set_text
10284     46 75 02 F6 | 	mov	arg01, local01
10288     01 76 66 F6 | 	neg	arg02, #1
1028c     24 8E BF FD | 	call	#_module_text_font
10290     46 75 02 F6 | 	mov	arg01, local01
10294     38 8D BF FD | 	call	#_module_text_fit
10298     46 75 02 F6 | 	mov	arg01, local01
1029c     01 76 06 F6 | 	mov	arg02, #1
102a0     02 78 06 F6 | 	mov	arg03, #2
102a4     A8 91 BF FD | 	call	#_module_align_center_sector
102a8     40 8D 06 F1 | 	add	local01, #320
102ac     46 99 02 F6 | 	mov	local07, local01
102b0     4C 75 02 F6 | 	mov	arg01, local07
102b4     49 77 02 F6 | 	mov	arg02, local04
102b8     1C 87 BF FD | 	call	#_module_init
102bc     4C 75 02 F6 | 	mov	arg01, local07
102c0     47 77 02 F6 | 	mov	arg02, local02
102c4     B4 8B BF FD | 	call	#_module_copy
102c8     4C 75 02 F6 | 	mov	arg01, local07
102cc     01 76 06 F6 | 	mov	arg02, #1
102d0     02 78 06 F6 | 	mov	arg03, #2
102d4     78 91 BF FD | 	call	#_module_align_center_sector
102d8     4C 75 02 F6 | 	mov	arg01, local07
102dc     DC 90 BF FD | 	call	#_module_align_inner_bottom
102e0     C9 74 02 F6 | 	mov	arg01, objptr
102e4     E3 76 02 F6 | 	mov	arg02, ptr__button_save_1011_
102e8     FC 4F B1 FD | 	call	#__system___make_methodptr
102ec     4C 75 02 F6 | 	mov	arg01, local07
102f0     00 78 06 F6 | 	mov	arg03, #0
102f4     34 75 06 F1 | 	add	arg01, #308
102f8     3A 35 62 FC | 	wrlong	result1, arg01
102fc     10 74 86 F1 | 	sub	arg01, #16
10300     3A 01 68 FC | 	wrlong	#0, arg01
10304     40 8D 06 F1 | 	add	local01, #320
10308     46 75 02 F6 | 	mov	arg01, local01
1030c     4C 77 02 F6 | 	mov	arg02, local07
10310     C4 86 BF FD | 	call	#_module_init
10314     46 75 02 F6 | 	mov	arg01, local01
10318     4A 77 02 F6 | 	mov	arg02, local05
1031c     5C 8B BF FD | 	call	#_module_copy
10320     15 01 00 FF 
10324     3D D7 05 F1 | 	add	ptr__dat__, ##142141
10328     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1032c     15 01 00 FF 
10330     3D D7 85 F1 | 	sub	ptr__dat__, ##142141
10334     46 75 02 F6 | 	mov	arg01, local01
10338     38 8C BF FD | 	call	#_module_set_text
1033c     46 75 02 F6 | 	mov	arg01, local01
10340     01 76 66 F6 | 	neg	arg02, #1
10344     6C 8D BF FD | 	call	#_module_text_font
10348     46 75 02 F6 | 	mov	arg01, local01
1034c     80 8C BF FD | 	call	#_module_text_fit
10350     46 75 02 F6 | 	mov	arg01, local01
10354     01 76 06 F6 | 	mov	arg02, #1
10358     02 78 06 F6 | 	mov	arg03, #2
1035c     F0 90 BF FD | 	call	#_module_align_center_sector
10360     46 75 02 F6 | 	mov	arg01, local01
10364     9C 90 BF FD | 	call	#_module_align_middle
10368     40 8D 06 F1 | 	add	local01, #320
1036c     46 99 02 F6 | 	mov	local07, local01
10370     4C 75 02 F6 | 	mov	arg01, local07
10374     48 77 02 F6 | 	mov	arg02, local03
10378     5C 86 BF FD | 	call	#_module_init
1037c     27 00 00 FF 
10380     B8 8D 86 F1 | 	sub	local01, ##20408
10384     46 77 02 FB | 	rdlong	arg02, local01
10388     30 76 06 F1 | 	add	arg02, #48
1038c     4C 75 02 F6 | 	mov	arg01, local07
10390     AC 8B BF FD | 	call	#_module_set_image
10394     4C 75 02 F6 | 	mov	arg01, local07
10398     88 8F BF FD | 	call	#_module_align_inner_top
1039c     4C 75 02 F6 | 	mov	arg01, local07
103a0     D0 8F BF FD | 	call	#_module_align_inner_right
103a4     C9 74 02 F6 | 	mov	arg01, objptr
103a8     DA 76 02 F6 | 	mov	arg02, ptr__button_navigation_0981_
103ac     38 4F B1 FD | 	call	#__system___make_methodptr
103b0     00 78 06 F6 | 	mov	arg03, #0
103b4     34 99 06 F1 | 	add	local07, #308
103b8     4C 35 62 FC | 	wrlong	result1, local07
103bc     10 98 86 F1 | 	sub	local07, #16
103c0     4C 01 68 FC | 	wrlong	#0, local07
103c4     29 00 00 FF 
103c8     38 8C 06 F1 | 	add	local01, ##21048
103cc     46 99 02 F6 | 	mov	local07, local01
103d0     4C 75 02 F6 | 	mov	arg01, local07
103d4     48 77 02 F6 | 	mov	arg02, local03
103d8     FC 85 BF FD | 	call	#_module_init
103dc     4C 75 02 F6 | 	mov	arg01, local07
103e0     00 75 06 F1 | 	add	arg01, #256
103e4     3A 15 68 FC | 	wrlong	#10, arg01
103e8     04 74 06 F1 | 	add	arg01, #4
103ec     3A 15 68 FC | 	wrlong	#10, arg01
103f0     4C 75 02 F6 | 	mov	arg01, local07
103f4     F0 74 06 F1 | 	add	arg01, #240
103f8     01 00 80 FF 
103fc     3A 01 68 FC | 	wrlong	##512, arg01
10400     04 74 06 F1 | 	add	arg01, #4
10404     3A 1D 6A FC | 	wrlong	#270, arg01
10408     4C 75 02 F6 | 	mov	arg01, local07
1040c     49 77 02 F6 | 	mov	arg02, local04
10410     94 91 BF FD | 	call	#_module_align_right
10414     4C 75 02 F6 | 	mov	arg01, local07
10418     08 8F BF FD | 	call	#_module_align_inner_top
1041c     4C 95 02 FB | 	rdlong	local05, local07
10420     10 95 06 F1 | 	add	local05, #272
10424     4A 77 02 FB | 	rdlong	arg02, local05
10428     4C 95 02 FB | 	rdlong	local05, local07
1042c     0C 95 06 F1 | 	add	local05, #268
10430     4A 79 02 FB | 	rdlong	arg03, local05
10434     4C 75 02 F6 | 	mov	arg01, local07
10438     10 75 06 F1 | 	add	arg01, #272
1043c     3A 77 62 FC | 	wrlong	arg02, arg01
10440     04 74 86 F1 | 	sub	arg01, #4
10444     3A 79 62 FC | 	wrlong	arg03, arg01
10448     40 8D 06 F1 | 	add	local01, #320
1044c     46 77 02 F6 | 	mov	arg02, local01
10450     4B 01 00 FF 
10454     B0 78 06 F6 | 	mov	arg03, ##@LR__2000
10458     4B 01 00 FF 
1045c     C2 7A 06 F6 | 	mov	arg04, ##@LR__2001
10460     4C 75 02 F6 | 	mov	arg01, local07
10464     B8 BB BF FD | 	call	#_module_set_graph
10468     00 50 60 FF 
1046c     00 78 06 F6 | 	mov	arg03, ##-1063256064
10470     D0 98 06 F1 | 	add	local07, #208
10474     4C 99 02 FB | 	rdlong	local07, local07
10478     08 98 06 F1 | 	add	local07, #8
1047c     00 50 A0 FF 
10480     4C 01 68 FC | 	wrlong	##1084227584, local07
10484     04 98 06 F1 | 	add	local07, #4
10488     00 50 E0 FF 
1048c     4C 01 68 FC | 	wrlong	##-1063256064, local07
10490     04 00 00 FF 
10494     44 8D 06 F1 | 	add	local01, ##2372
10498     46 99 02 F6 | 	mov	local07, local01
1049c     4C 75 02 F6 | 	mov	arg01, local07
104a0     49 77 02 F6 | 	mov	arg02, local04
104a4     30 85 BF FD | 	call	#_module_init
104a8     4C 75 02 F6 | 	mov	arg01, local07
104ac     4B 77 02 F6 | 	mov	arg02, local06
104b0     C8 90 BF FD | 	call	#_module_align_below
104b4     4C 75 02 F6 | 	mov	arg01, local07
104b8     4B 77 02 F6 | 	mov	arg02, local06
104bc     14 92 BF FD | 	call	#_module_fit_below
104c0     4C 75 02 F6 | 	mov	arg01, local07
104c4     0C 91 BF FD | 	call	#_module_fit_width
104c8     4C 75 02 F6 | 	mov	arg01, local07
104cc     7C 8E BF FD | 	call	#_module_align_inner_left
104d0     4C 97 02 FB | 	rdlong	local06, local07
104d4     10 97 06 F1 | 	add	local06, #272
104d8     4B 77 02 FB | 	rdlong	arg02, local06
104dc     4C 97 02 FB | 	rdlong	local06, local07
104e0     0C 97 06 F1 | 	add	local06, #268
104e4     4B 79 02 FB | 	rdlong	arg03, local06
104e8     4C 75 02 F6 | 	mov	arg01, local07
104ec     10 75 06 F1 | 	add	arg01, #272
104f0     3A 77 62 FC | 	wrlong	arg02, arg01
104f4     04 74 86 F1 | 	sub	arg01, #4
104f8     3A 79 62 FC | 	wrlong	arg03, arg01
104fc     4C 75 02 F6 | 	mov	arg01, local07
10500     00 78 06 F6 | 	mov	arg03, #0
10504     F8 74 06 F1 | 	add	arg01, #248
10508     3A 01 68 FC | 	wrlong	#0, arg01
1050c     04 74 06 F1 | 	add	arg01, #4
10510     3A 01 68 FC | 	wrlong	#0, arg01
10514     05 00 00 FF 
10518     C4 8D 86 F1 | 	sub	local01, ##3012
1051c     46 97 02 F6 | 	mov	local06, local01
10520     4B 75 02 F6 | 	mov	arg01, local06
10524     4C 77 02 F6 | 	mov	arg02, local07
10528     AC 84 BF FD | 	call	#_module_init
1052c     4B 75 02 F6 | 	mov	arg01, local06
10530     0A 78 06 F6 | 	mov	arg03, #10
10534     00 75 06 F1 | 	add	arg01, #256
10538     3A 01 68 FC | 	wrlong	#0, arg01
1053c     04 74 06 F1 | 	add	arg01, #4
10540     3A 15 68 FC | 	wrlong	#10, arg01
10544     13 00 00 FF 
10548     28 8C 06 F1 | 	add	local01, ##9768
1054c     46 77 02 F6 | 	mov	arg02, local01
10550     3B 00 00 FF 
10554     28 8D 86 F1 | 	sub	local01, ##30504
10558     4B 75 02 F6 | 	mov	arg01, local06
1055c     14 8A BF FD | 	call	#_module_set_text
10560     4B 75 02 F6 | 	mov	arg01, local06
10564     02 76 06 F6 | 	mov	arg02, #2
10568     48 8B BF FD | 	call	#_module_text_font
1056c     4B 75 02 F6 | 	mov	arg01, local06
10570     5C 8A BF FD | 	call	#_module_text_fit
10574     4B 75 02 F6 | 	mov	arg01, local06
10578     58 90 BF FD | 	call	#_module_fit_width
1057c     4B 75 02 F6 | 	mov	arg01, local06
10580     CC 74 06 F1 | 	add	arg01, #204
10584     3A 95 02 FB | 	rdlong	local05, arg01
10588     CC 74 86 F1 | 	sub	arg01, #204
1058c     01 94 0E F2 | 	cmp	local05, #1 wz
10590                 | '         return;
10590     DC 74 06 A1 |  if_e	add	arg01, #220
10594     3A 03 68 AC |  if_e	wrlong	#1, arg01
10598     4B 75 02 F6 | 	mov	arg01, local06
1059c     10 75 06 F1 | 	add	arg01, #272
105a0     7F 00 80 FF 
105a4     3A FF 6B FC | 	wrlong	##65535, arg01
105a8     04 74 86 F1 | 	sub	arg01, #4
105ac     1D 00 80 FF 
105b0     3A E9 6A FC | 	wrlong	##15220, arg01
105b4     4B 75 02 F6 | 	mov	arg01, local06
105b8     68 8D BF FD | 	call	#_module_align_inner_top
105bc     4B 75 02 F6 | 	mov	arg01, local06
105c0     01 76 06 F6 | 	mov	arg02, #1
105c4     02 78 06 F6 | 	mov	arg03, #2
105c8     84 8E BF FD | 	call	#_module_align_center_sector
105cc     00 94 06 F6 | 	mov	local05, #0
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *root = &(page->root);
105d0                 | '     module_init(root,  (0) );
105d0                 | ' 
105d0                 | '     Module *background = &(page->background);
105d0                 | '     module_init(background, root);
105d0                 | '     module_set_rectangle_circle(background,  1024 ,  600 );
105d0                 | '     module_set_position(background, 0, 0);
105d0                 | '     module_set_padding(background, padding, padding);
105d0                 | '     module_set_color(background,  0x0273 ,  0x0273 );
105d0                 | '     module_animate_draw(background, module_animation_switch_page_up);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *editWindow = &(page->editWindow);
105d0                 | '     module_init(editWindow, background);
105d0                 | '     module_set_rectangle_circle(editWindow,  1024  / 3, 0);
105d0                 | '     module_fit_height(editWindow);
105d0                 | '     module_set_padding(editWindow, padding, padding);
105d0                 | '     module_set_color(editWindow,  0x3B74 ,  0x0273 );
105d0                 | '     module_add_border(editWindow,  0xffff , 1);
105d0                 | '     module_align_inner_left(editWindow);
105d0                 | '     module_align_inner_top(editWindow);
105d0                 | '     module_set_margin(editWindow, 10, 10);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *openButton = &(page->openButton);
105d0                 | '     module_init(openButton, editWindow);
105d0                 | '     module_set_rectangle_circle(openButton, 100, 50);
105d0                 | '     module_set_color(openButton,  0x87f0 ,  0x87f0 );
105d0                 | '     module_set_padding(openButton, padding, padding);
105d0                 | '     module_align_space_even(openButton, 1, 2);
105d0                 | '     module_align_inner_top(openButton);
105d0                 | '     module_touch_callback(openButton, button_open, 0);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *openText = &(page->openText);
105d0                 | '     module_init(openText, openButton);
105d0                 | '     module_set_text(openText, openTextBuffer);
105d0                 | '     module_text_font(openText, -1);
105d0                 | '     module_text_fit(openText);
105d0                 | '     module_align_center(openText);
105d0                 | '     module_align_middle(openText);
105d0                 | '     module_set_color(openText,  0x0000 , openText->parent->foregroundColor);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *newButton = &(page->newButton);
105d0                 | '     module_init(newButton, editWindow);
105d0                 | '     module_copy(newButton, openButton);
105d0                 | '     module_align_space_even(newButton, 2, 2);
105d0                 | '     module_touch_callback(newButton, button_new, 0);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *newText = &(page->newText);
105d0                 | '     module_init(newText, newButton);
105d0                 | '     module_copy(newText, openText);
105d0                 | '     module_set_text(newText, newTextBuffer);
105d0                 | '     module_text_font(newText, -1);
105d0                 | '     module_text_fit(newText);
105d0                 | '     module_align_center(newText);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *saveButton = &(page->saveButton);
105d0                 | '     module_init(saveButton, editWindow);
105d0                 | '     module_copy(saveButton, openButton);
105d0                 | '     module_align_center(saveButton);
105d0                 | '     module_align_inner_bottom(saveButton);
105d0                 | '     module_touch_callback(saveButton, button_save, 0);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *saveText = &(page->saveText);
105d0                 | '     module_init(saveText, saveButton);
105d0                 | '     module_copy(saveText, openText);
105d0                 | '     module_set_text(saveText, saveTextBuffer);
105d0                 | '     module_text_font(saveText, -1);
105d0                 | '     module_text_fit(saveText);
105d0                 | '     module_align_center(saveText);
105d0                 | '     module_align_middle(saveText);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *navigationButton = &(page->navigationButton);
105d0                 | '     module_init(navigationButton, background);
105d0                 | '     module_set_image(navigationButton, &(page->images->navigationImage));
105d0                 | '     module_align_inner_top(navigationButton);
105d0                 | '     module_align_inner_right(navigationButton);
105d0                 | '     module_touch_callback(navigationButton, button_navigation, 0);
105d0                 | ' 
105d0                 | '     Module *graphPositionContainer = &(page->graphPositionContainer);
105d0                 | '     module_init(graphPositionContainer, background);
105d0                 | '     module_set_margin(graphPositionContainer, 10, 10);
105d0                 | '     module_set_size(graphPositionContainer,  1024  / 2,  600  / 2 - padding * 3);
105d0                 | '     module_align_right(graphPositionContainer, editWindow);
105d0                 | '     module_align_inner_top(graphPositionContainer);
105d0                 | '     module_set_color(graphPositionContainer, graphPositionContainer->parent->foregroundColor, graphPositionContainer->parent->backgroundColor);
105d0                 | '     module_set_graph(graphPositionContainer, &(page->graphPosition), "Position Vs. Time", "mm");
105d0                 | '     module_graph_set_range(graphPositionContainer, 5, -5);
105d0                 | ' 
105d0                 | '     Module *subroot = &(page->subroot);
105d0                 | '     module_init(subroot, editWindow);
105d0                 | '     module_align_below(subroot, newButton);
105d0                 | '     module_fit_below(subroot, newButton);
105d0                 | '     module_fit_width(subroot);
105d0                 | '     module_align_inner_left(subroot);
105d0                 | '     module_set_color(subroot, subroot->parent->foregroundColor, subroot->parent->backgroundColor);
105d0                 | '     module_set_padding(subroot, 0, 0);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *editWindowTitle = &(page->editWindowTitle);
105d0                 | '     module_init(editWindowTitle, subroot);
105d0                 | '     module_set_margin(editWindowTitle, 0, 10);
105d0                 | '     module_set_text(editWindowTitle, page->editWindowTitleBuffer);
105d0                 | '     module_text_font(editWindowTitle,  2 );
105d0                 | '     module_text_fit(editWindowTitle);
105d0                 | '     module_fit_width(editWindowTitle);
105d0                 | '     module_text_align(editWindowTitle, MODULE_TEXT_ALIGN_INNER_LEFT);
105d0                 | '     module_set_color(editWindowTitle,  0xffff ,  0x3B74 );
105d0                 | '     module_align_inner_top(editWindowTitle);
105d0                 | '     module_align_center(editWindowTitle);
105d0                 | ' 
105d0                 | ' 
105d0                 | '     Module *below = editWindowTitle;
105d0                 | '     for (int i = 0; i < 20; i++)
105d0                 | LR__0422
105d0     14 94 56 F2 | 	cmps	local05, #20 wc
105d4     88 01 90 3D |  if_ae	jmp	#LR__0423
105d8     4A 93 02 F6 | 	mov	local04, local05
105dc     02 92 66 F0 | 	shl	local04, #2
105e0     4A 93 02 F1 | 	add	local04, local05
105e4     06 92 66 F0 | 	shl	local04, #6
105e8     2F 00 00 FF 
105ec     04 8C 06 F1 | 	add	local01, ##24068
105f0     46 93 02 F1 | 	add	local04, local01
105f4     49 75 02 F6 | 	mov	arg01, local04
105f8     4C 77 02 F6 | 	mov	arg02, local07
105fc     D8 83 BF FD | 	call	#_module_init
10600     4A 75 02 F6 | 	mov	arg01, local05
10604     04 74 66 F0 | 	shl	arg01, #4
10608     4A 75 82 F1 | 	sub	arg01, local05
1060c     01 74 66 F0 | 	shl	arg01, #1
10610     0C 00 00 FF 
10614     44 8D 06 F1 | 	add	local01, ##6468
10618     46 75 02 F1 | 	add	arg01, local01
1061c     4B 01 00 FF 
10620     C5 76 06 F6 | 	mov	arg02, ##@LR__2002
10624     70 4C B1 FD | 	call	#__system____builtin_strcpy
10628     4A 77 02 F6 | 	mov	arg02, local05
1062c     04 76 66 F0 | 	shl	arg02, #4
10630     4A 77 82 F1 | 	sub	arg02, local05
10634     01 76 66 F0 | 	shl	arg02, #1
10638     46 77 02 F1 | 	add	arg02, local01
1063c     49 75 02 F6 | 	mov	arg01, local04
10640     30 89 BF FD | 	call	#_module_set_text
10644     49 75 02 F6 | 	mov	arg01, local04
10648     01 76 06 F6 | 	mov	arg02, #1
1064c     64 8A BF FD | 	call	#_module_text_font
10650     49 75 02 F6 | 	mov	arg01, local04
10654     F0 74 06 F1 | 	add	arg01, #240
10658     3A 01 68 FC | 	wrlong	#0, arg01
1065c     04 74 06 F1 | 	add	arg01, #4
10660     3A 41 68 FC | 	wrlong	#32, arg01
10664     49 75 02 F6 | 	mov	arg01, local04
10668     68 8F BF FD | 	call	#_module_fit_width
1066c     49 75 02 F6 | 	mov	arg01, local04
10670     08 75 06 F1 | 	add	arg01, #264
10674     3A 0B 68 FC | 	wrlong	#5, arg01
10678     49 75 02 F6 | 	mov	arg01, local04
1067c     CC 74 06 F1 | 	add	arg01, #204
10680     3A 91 02 FB | 	rdlong	local03, arg01
10684     CC 74 86 F1 | 	sub	arg01, #204
10688     01 90 0E F2 | 	cmp	local03, #1 wz
1068c                 | '         return;
1068c     DC 74 06 A1 |  if_e	add	arg01, #220
10690     3A 03 68 AC |  if_e	wrlong	#1, arg01
10694     49 75 02 F6 | 	mov	arg01, local04
10698     CC 74 06 F1 | 	add	arg01, #204
1069c     3A 91 02 FB | 	rdlong	local03, arg01
106a0     CC 74 86 F1 | 	sub	arg01, #204
106a4     01 90 0E F2 | 	cmp	local03, #1 wz
106a8                 | '         return;
106a8     E0 74 06 A1 |  if_e	add	arg01, #224
106ac     3A 0B 68 AC |  if_e	wrlong	#5, arg01
106b0     49 75 02 F6 | 	mov	arg01, local04
106b4     4B 77 02 F6 | 	mov	arg02, local06
106b8     C0 8E BF FD | 	call	#_module_align_below
106bc     49 75 02 F6 | 	mov	arg01, local04
106c0     88 8C BF FD | 	call	#_module_align_inner_left
106c4     49 75 02 F6 | 	mov	arg01, local04
106c8     63 00 00 FF 
106cc     18 78 06 F6 | 	mov	arg03, ##50712
106d0     10 75 06 F1 | 	add	arg01, #272
106d4     3A 01 68 FC | 	wrlong	#0, arg01
106d8     04 74 86 F1 | 	sub	arg01, #4
106dc     63 00 80 FF 
106e0     3A 31 68 FC | 	wrlong	##50712, arg01
106e4     C9 74 02 F6 | 	mov	arg01, objptr
106e8     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1020_
106ec     F8 4B B1 FD | 	call	#__system___make_methodptr
106f0     49 75 02 F6 | 	mov	arg01, local04
106f4     34 75 06 F1 | 	add	arg01, #308
106f8     3A 35 62 FC | 	wrlong	result1, arg01
106fc     10 74 86 F1 | 	sub	arg01, #16
10700     3A 01 68 FC | 	wrlong	#0, arg01
10704     49 75 02 F6 | 	mov	arg01, local04
10708     00 76 06 F6 | 	mov	arg02, #0
1070c     02 78 06 F6 | 	mov	arg03, #2
10710     D0 8B BF FD | 	call	#_module_add_border
10714     49 75 02 F6 | 	mov	arg01, local04
10718     00 75 06 F1 | 	add	arg01, #256
1071c     3A 15 68 FC | 	wrlong	#10, arg01
10720     04 74 06 F1 | 	add	arg01, #4
10724     3A 15 68 FC | 	wrlong	#10, arg01
10728     49 75 02 F6 | 	mov	arg01, local04
1072c     00 78 06 F6 | 	mov	arg03, #0
10730     F8 74 06 F1 | 	add	arg01, #248
10734     3A 15 68 FC | 	wrlong	#10, arg01
10738     04 74 06 F1 | 	add	arg01, #4
1073c     3A 01 68 FC | 	wrlong	#0, arg01
10740     49 75 02 F6 | 	mov	arg01, local04
10744     18 75 06 F1 | 	add	arg01, #280
10748     3A 01 48 FC | 	wrbyte	#0, arg01
1074c     49 97 02 F6 | 	mov	local06, local04
10750     01 94 06 F1 | 	add	local05, #1
10754     3B 00 00 FF 
10758     48 8D 86 F1 | 	sub	local01, ##30536
1075c     70 FE 9F FD | 	jmp	#LR__0422
10760                 | LR__0423
10760     A8 F0 03 F6 | 	mov	ptra, fp
10764     B3 00 A0 FD | 	call	#popregs_
10768                 | _test_profile_page_init_ret
10768     2D 00 64 FD | 	ret
1076c                 | 
1076c                 | _test_profile_page_run
1076c     1C 4C 05 F6 | 	mov	COUNT_, #28
10770     A9 00 A0 FD | 	call	#pushregs_
10774     3A 8D 02 F6 | 	mov	local01, arg01
10778     15 01 00 FF 
1077c     64 D7 05 F1 | 	add	ptr__dat__, ##142180
10780     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
10784     15 01 00 FF 
10788     64 D7 85 F1 | 	sub	ptr__dat__, ##142180
1078c     00 74 06 F6 | 	mov	arg01, #0
10790     B4 83 B1 FD | 	call	#__system___getiolock_1205
10794     1A 75 02 F6 | 	mov	arg01, result1
10798     84 4B B1 FD | 	call	#__system___lockmem
1079c     4B 01 00 FF 
107a0     C7 76 06 F6 | 	mov	arg02, ##@LR__2003
107a4     00 74 06 F6 | 	mov	arg01, #0
107a8     00 78 06 F6 | 	mov	arg03, #0
107ac     04 51 B1 FD | 	call	#__system___basic_print_string
107b0     00 74 06 F6 | 	mov	arg01, #0
107b4     0A 76 06 F6 | 	mov	arg02, #10
107b8     00 78 06 F6 | 	mov	arg03, #0
107bc     A8 50 B1 FD | 	call	#__system___basic_print_char
107c0     00 74 06 F6 | 	mov	arg01, #0
107c4     80 83 B1 FD | 	call	#__system___getiolock_1205
107c8     1A 01 68 FC | 	wrlong	#0, result1
107cc     04 8C 06 F1 | 	add	local01, #4
107d0     46 75 02 FB | 	rdlong	arg01, local01
107d4     22 00 00 FF 
107d8     7C 8C 06 F1 | 	add	local01, ##17532
107dc     46 77 02 F6 | 	mov	arg02, local01
107e0     22 00 00 FF 
107e4     80 8C 86 F1 | 	sub	local01, ##17536
107e8     C4 8F BF FD | 	call	#_module_draw
107ec     01 8E 66 F6 | 	neg	local02, #1
107f0                 | '     while (!complete)
107f0                 | LR__0424
107f0     15 01 00 FF 
107f4     64 D7 05 F1 | 	add	ptr__dat__, ##142180
107f8     EB 34 CA FA | 	rdbyte	result1, ptr__dat__ wz
107fc     15 01 00 FF 
10800     64 D7 85 F1 | 	sub	ptr__dat__, ##142180
10804     20 09 90 5D |  if_ne	jmp	#LR__0440
10808     00 74 06 F6 | 	mov	arg01, #0
1080c     38 83 B1 FD | 	call	#__system___getiolock_1205
10810     1A 75 02 F6 | 	mov	arg01, result1
10814     08 4B B1 FD | 	call	#__system___lockmem
10818     4B 01 00 FF 
1081c     E1 76 06 F6 | 	mov	arg02, ##@LR__2004
10820     00 74 06 F6 | 	mov	arg01, #0
10824     00 78 06 F6 | 	mov	arg03, #0
10828     88 50 B1 FD | 	call	#__system___basic_print_string
1082c     1A 91 02 F6 | 	mov	local03, result1
10830     0C 8C 06 F1 | 	add	local01, #12
10834     46 77 02 FB | 	rdlong	arg02, local01
10838     0A 92 06 F6 | 	mov	local04, #10
1083c     00 74 06 F6 | 	mov	arg01, #0
10840     00 78 06 F6 | 	mov	arg03, #0
10844     0A 7A 06 F6 | 	mov	arg04, #10
10848     AC 50 B1 FD | 	call	#__system___basic_print_integer
1084c     1A 95 02 F6 | 	mov	local05, result1
10850     00 74 06 F6 | 	mov	arg01, #0
10854     0A 76 06 F6 | 	mov	arg02, #10
10858     00 78 06 F6 | 	mov	arg03, #0
1085c     08 50 B1 FD | 	call	#__system___basic_print_char
10860     01 96 06 F6 | 	mov	local06, #1
10864     00 74 06 F6 | 	mov	arg01, #0
10868     DC 82 B1 FD | 	call	#__system___getiolock_1205
1086c     1A 01 68 FC | 	wrlong	#0, result1
10870     00 34 06 F6 | 	mov	result1, #0
10874     00 98 06 F6 | 	mov	local07, #0
10878     46 9B 02 FB | 	rdlong	local08, local01
1087c     0C 8C 86 F1 | 	sub	local01, #12
10880     47 9B 0A F2 | 	cmp	local08, local02 wz
10884     4C 00 90 AD |  if_e	jmp	#LR__0427
10888     00 9C 06 F6 | 	mov	local09, #0
1088c                 | '         {
1088c                 | '             for (int i = 0; i < 20; i++)
1088c                 | LR__0425
1088c     14 9C 56 F2 | 	cmps	local09, #20 wc
10890     40 00 90 3D |  if_ae	jmp	#LR__0426
10894     4E 9B 02 F6 | 	mov	local08, local09
10898     02 9A 66 F0 | 	shl	local08, #2
1089c     2E 00 00 FF 
108a0     C8 8C 06 F1 | 	add	local01, ##23752
108a4     46 91 02 F6 | 	mov	local03, local01
108a8     46 9B 02 F1 | 	add	local08, local01
108ac     4D 75 02 FB | 	rdlong	arg01, local08
108b0     00 76 06 F6 | 	mov	arg02, #0
108b4     18 75 06 F1 | 	add	arg01, #280
108b8     3A 01 48 FC | 	wrbyte	#0, arg01
108bc     4E 9B 02 F6 | 	mov	local08, local09
108c0     01 9A 06 F1 | 	add	local08, #1
108c4     4D 9D 02 F6 | 	mov	local09, local08
108c8     2E 00 00 FF 
108cc     C8 8C 86 F1 | 	sub	local01, ##23752
108d0     B8 FF 9F FD | 	jmp	#LR__0425
108d4                 | LR__0426
108d4                 | LR__0427
108d4                 | '             {
108d4                 | '                 module_set_visable(page->subroot.child[i],  (0) );
108d4                 | '             }
108d4                 | '         }
108d4                 | '         switch (page->mode)
108d4     0C 8C 06 F1 | 	add	local01, #12
108d8     46 9F 02 FB | 	rdlong	local10, local01
108dc     0C 8C 86 F1 | 	sub	local01, #12
108e0     4F A1 02 F6 | 	mov	local11, local10
108e4     04 A0 26 F3 | 	fle	local11, #4
108e8     30 A0 62 FD | 	jmprel	local11
108ec                 | LR__0428
108ec     10 00 90 FD | 	jmp	#LR__0429
108f0     F4 03 90 FD | 	jmp	#LR__0433
108f4     CC 07 90 FD | 	jmp	#LR__0438
108f8     C8 07 90 FD | 	jmp	#LR__0438
108fc     C4 07 90 FD | 	jmp	#LR__0437
10900                 | LR__0429
10900     00 8E 0E F2 | 	cmp	local02, #0 wz
10904     90 00 90 AD |  if_e	jmp	#LR__0430
10908     3B 00 00 FF 
1090c     28 8D 06 F1 | 	add	local01, ##30504
10910     46 75 02 F6 | 	mov	arg01, local01
10914     4B 01 00 FF 
10918     E7 76 06 F6 | 	mov	arg02, ##@LR__2005
1091c     78 49 B1 FD | 	call	#__system____builtin_strcpy
10920     3B 00 00 FF 
10924     24 8D 86 F1 | 	sub	local01, ##30500
10928     46 75 02 FB | 	rdlong	arg01, local01
1092c     22 00 00 FF 
10930     7C 8C 06 F1 | 	add	local01, ##17532
10934     46 77 02 F6 | 	mov	arg02, local01
10938     74 8E BF FD | 	call	#_module_draw
1093c     00 74 06 F6 | 	mov	arg01, #0
10940     04 82 B1 FD | 	call	#__system___getiolock_1205
10944     1A 75 02 F6 | 	mov	arg01, result1
10948     D4 49 B1 FD | 	call	#__system___lockmem
1094c     4B 01 00 FF 
10950     EF 76 06 F6 | 	mov	arg02, ##@LR__2006
10954     00 74 06 F6 | 	mov	arg01, #0
10958     00 78 06 F6 | 	mov	arg03, #0
1095c     54 4F B1 FD | 	call	#__system___basic_print_string
10960     21 00 00 FF 
10964     F8 8D 86 F1 | 	sub	local01, ##17400
10968     46 77 02 F6 | 	mov	arg02, local01
1096c     88 8C 86 F1 | 	sub	local01, #136
10970     00 74 06 F6 | 	mov	arg01, #0
10974     00 78 06 F6 | 	mov	arg03, #0
10978     38 4F B1 FD | 	call	#__system___basic_print_string
1097c     00 74 06 F6 | 	mov	arg01, #0
10980     0A 76 06 F6 | 	mov	arg02, #10
10984     00 78 06 F6 | 	mov	arg03, #0
10988     DC 4E B1 FD | 	call	#__system___basic_print_char
1098c     00 74 06 F6 | 	mov	arg01, #0
10990     B4 81 B1 FD | 	call	#__system___getiolock_1205
10994     1A 01 68 FC | 	wrlong	#0, result1
10998                 | LR__0430
10998     00 74 06 F6 | 	mov	arg01, #0
1099c     A8 81 B1 FD | 	call	#__system___getiolock_1205
109a0     1A 75 02 F6 | 	mov	arg01, result1
109a4     78 49 B1 FD | 	call	#__system___lockmem
109a8     4B 01 00 FF 
109ac     FD 76 06 F6 | 	mov	arg02, ##@LR__2007
109b0     00 74 06 F6 | 	mov	arg01, #0
109b4     00 78 06 F6 | 	mov	arg03, #0
109b8     F8 4E B1 FD | 	call	#__system___basic_print_string
109bc     00 74 06 F6 | 	mov	arg01, #0
109c0     0A 76 06 F6 | 	mov	arg02, #10
109c4     00 78 06 F6 | 	mov	arg03, #0
109c8     9C 4E B1 FD | 	call	#__system___basic_print_char
109cc     00 74 06 F6 | 	mov	arg01, #0
109d0     74 81 B1 FD | 	call	#__system___getiolock_1205
109d4     1A 01 68 FC | 	wrlong	#0, result1
109d8     00 A2 06 F6 | 	mov	local12, #0
109dc     2F 00 00 FF 
109e0     04 8C 06 F1 | 	add	local01, ##24068
109e4     46 A5 02 F6 | 	mov	local13, local01
109e8     0C 00 00 FF 
109ec     44 8D 06 F1 | 	add	local01, ##6468
109f0     46 75 02 F6 | 	mov	arg01, local01
109f4     4B 01 00 FF 
109f8     05 77 06 F6 | 	mov	arg02, ##@LR__2008
109fc     3B 00 00 FF 
10a00     C0 8C 86 F1 | 	sub	local01, ##30400
10a04     F8 79 02 F6 | 	mov	arg03, ptra
10a08     61 8D 66 FC | 	wrlong	local01, ptra++
10a0c     14 12 BF FD | 	call	#_sprintf
10a10     04 F0 87 F1 | 	sub	ptra, #4
10a14     C9 74 02 F6 | 	mov	arg01, objptr
10a18     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1020_
10a1c     C8 48 B1 FD | 	call	#__system___make_methodptr
10a20     52 75 02 F6 | 	mov	arg01, local13
10a24     00 78 06 F6 | 	mov	arg03, #0
10a28     34 75 06 F1 | 	add	arg01, #308
10a2c     3A 35 62 FC | 	wrlong	result1, arg01
10a30     10 74 86 F1 | 	sub	arg01, #16
10a34     3A 01 68 FC | 	wrlong	#0, arg01
10a38     52 75 02 F6 | 	mov	arg01, local13
10a3c     01 76 06 F6 | 	mov	arg02, #1
10a40     18 75 06 F1 | 	add	arg01, #280
10a44     3A 03 48 FC | 	wrbyte	#1, arg01
10a48     00 74 06 F6 | 	mov	arg01, #0
10a4c     F8 80 B1 FD | 	call	#__system___getiolock_1205
10a50     1A 75 02 F6 | 	mov	arg01, result1
10a54     C8 48 B1 FD | 	call	#__system___lockmem
10a58     4B 01 00 FF 
10a5c     0E 77 06 F6 | 	mov	arg02, ##@LR__2009
10a60     00 74 06 F6 | 	mov	arg01, #0
10a64     00 78 06 F6 | 	mov	arg03, #0
10a68     48 4E B1 FD | 	call	#__system___basic_print_string
10a6c     51 A7 02 F6 | 	mov	local14, local12
10a70     04 A6 66 F0 | 	shl	local14, #4
10a74     51 A7 82 F1 | 	sub	local14, local12
10a78     01 A6 66 F0 | 	shl	local14, #1
10a7c     3B 00 00 FF 
10a80     C0 8C 06 F1 | 	add	local01, ##30400
10a84     46 A9 02 F6 | 	mov	local15, local01
10a88     46 A7 02 F1 | 	add	local14, local01
10a8c     53 AB 02 F6 | 	mov	local16, local14
10a90     00 74 06 F6 | 	mov	arg01, #0
10a94     55 77 02 F6 | 	mov	arg02, local16
10a98     00 78 06 F6 | 	mov	arg03, #0
10a9c     14 4E B1 FD | 	call	#__system___basic_print_string
10aa0     00 74 06 F6 | 	mov	arg01, #0
10aa4     0A 76 06 F6 | 	mov	arg02, #10
10aa8     00 78 06 F6 | 	mov	arg03, #0
10aac     B8 4D B1 FD | 	call	#__system___basic_print_char
10ab0     00 74 06 F6 | 	mov	arg01, #0
10ab4     90 80 B1 FD | 	call	#__system___getiolock_1205
10ab8     1A 01 68 FC | 	wrlong	#0, result1
10abc     01 A2 06 F1 | 	add	local12, #1
10ac0     51 AD 02 F6 | 	mov	local17, local12
10ac4     02 AC 66 F0 | 	shl	local17, #2
10ac8     51 AD 02 F1 | 	add	local17, local12
10acc     06 AC 66 F0 | 	shl	local17, #6
10ad0     0C 00 00 FF 
10ad4     44 8D 86 F1 | 	sub	local01, ##6468
10ad8     46 AD 02 F1 | 	add	local17, local01
10adc     0D 00 00 FF 
10ae0     9C 8D 06 F1 | 	add	local01, ##7068
10ae4     46 75 02 F6 | 	mov	arg01, local01
10ae8     3C 00 00 FF 
10aec     E4 8C 86 F1 | 	sub	local01, ##30948
10af0     46 77 02 FB | 	rdlong	arg02, local01
10af4     AC ED BF FD | 	call	#_get_function_info
10af8     51 75 02 F6 | 	mov	arg01, local12
10afc     04 74 66 F0 | 	shl	arg01, #4
10b00     51 75 82 F1 | 	sub	arg01, local12
10b04     01 74 66 F0 | 	shl	arg01, #1
10b08     3B 00 00 FF 
10b0c     8C 8C 06 F1 | 	add	local01, ##30348
10b10     46 75 02 F1 | 	add	arg01, local01
10b14     4B 01 00 FF 
10b18     14 77 06 F6 | 	mov	arg02, ##@LR__2010
10b1c     01 00 00 FF 
10b20     5C 8C 06 F1 | 	add	local01, ##604
10b24     F8 79 02 F6 | 	mov	arg03, ptra
10b28     61 8D 66 FC | 	wrlong	local01, ptra++
10b2c     F4 10 BF FD | 	call	#_sprintf
10b30     04 F0 87 F1 | 	sub	ptra, #4
10b34     C9 74 02 F6 | 	mov	arg01, objptr
10b38     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1020_
10b3c     A8 47 B1 FD | 	call	#__system___make_methodptr
10b40     56 75 02 F6 | 	mov	arg01, local17
10b44     34 75 06 F1 | 	add	arg01, #308
10b48     3A 35 62 FC | 	wrlong	result1, arg01
10b4c     10 74 86 F1 | 	sub	arg01, #16
10b50     3A 03 68 FC | 	wrlong	#1, arg01
10b54     56 75 02 F6 | 	mov	arg01, local17
10b58     18 75 06 F1 | 	add	arg01, #280
10b5c     3A 03 48 FC | 	wrbyte	#1, arg01
10b60     01 A2 06 F1 | 	add	local12, #1
10b64     00 AE 06 F6 | 	mov	local18, #0
10b68                 | ' 
10b68                 | '             paramIndex++;
10b68                 | '             Module *funcModule = &(page->profileParameters[paramIndex]);
10b68                 | '             get_function_info(&(page->info), page->quartet.function);
10b68                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Function: %s", page->info.name);
10b68                 | '             module_touch_callback(funcModule, button_quartet,  1 );
10b68                 | '             module_set_visable(funcModule,  (1) );
10b68                 | ' 
10b68                 | '             paramIndex++;
10b68                 | '             for (int i = 0; i < page->info.args_count; i++)
10b68     3C 00 00 FF 
10b6c     A4 8D 86 F1 | 	sub	local01, ##31140
10b70                 | LR__0431
10b70     3C 00 00 FF 
10b74     BC 8D 06 F1 | 	add	local01, ##31164
10b78     46 9B 02 FB | 	rdlong	local08, local01
10b7c     3C 00 00 FF 
10b80     BC 8D 86 F1 | 	sub	local01, ##31164
10b84     4D AF 52 F2 | 	cmps	local18, local08 wc
10b88     C8 00 90 3D |  if_ae	jmp	#LR__0432
10b8c     51 B1 02 F6 | 	mov	local19, local12
10b90     02 B0 66 F0 | 	shl	local19, #2
10b94     51 B1 02 F1 | 	add	local19, local12
10b98     06 B0 66 F0 | 	shl	local19, #6
10b9c     2F 00 00 FF 
10ba0     04 8C 06 F1 | 	add	local01, ##24068
10ba4     46 B1 02 F1 | 	add	local19, local01
10ba8     51 75 02 F6 | 	mov	arg01, local12
10bac     04 74 66 F0 | 	shl	arg01, #4
10bb0     51 75 82 F1 | 	sub	arg01, local12
10bb4     01 74 66 F0 | 	shl	arg01, #1
10bb8     0C 00 00 FF 
10bbc     44 8D 06 F1 | 	add	local01, ##6468
10bc0     46 75 02 F1 | 	add	arg01, local01
10bc4     4B 01 00 FF 
10bc8     21 77 06 F6 | 	mov	arg02, ##@LR__2011
10bcc     57 AB 02 F6 | 	mov	local16, local18
10bd0     02 AA 66 F0 | 	shl	local16, #2
10bd4     57 AB 02 F1 | 	add	local16, local18
10bd8     02 AA 66 F0 | 	shl	local16, #2
10bdc     01 00 00 FF 
10be0     78 8C 06 F1 | 	add	local01, ##632
10be4     46 AB 02 F1 | 	add	local16, local01
10be8     57 A7 02 F6 | 	mov	local14, local18
10bec     02 A6 66 F0 | 	shl	local14, #2
10bf0     3C 00 00 FF 
10bf4     00 8D 86 F1 | 	sub	local01, ##30976
10bf8     46 A9 02 F6 | 	mov	local15, local01
10bfc     46 A7 02 F1 | 	add	local14, local01
10c00     53 93 02 FB | 	rdlong	local04, local14
10c04     F8 79 02 F6 | 	mov	arg03, ptra
10c08     61 AB 66 FC | 	wrlong	local16, ptra++
10c0c     61 93 66 FC | 	wrlong	local04, ptra++
10c10     10 10 BF FD | 	call	#_sprintf
10c14     08 F0 87 F1 | 	sub	ptra, #8
10c18     C9 74 02 F6 | 	mov	arg01, objptr
10c1c     E1 76 02 F6 | 	mov	arg02, ptr__button_quartet_parameters_1025_
10c20     C4 46 B1 FD | 	call	#__system___make_methodptr
10c24     58 75 02 F6 | 	mov	arg01, local19
10c28     34 75 06 F1 | 	add	arg01, #308
10c2c     3A 35 62 FC | 	wrlong	result1, arg01
10c30     10 74 86 F1 | 	sub	arg01, #16
10c34     3A AF 62 FC | 	wrlong	local18, arg01
10c38     58 75 02 F6 | 	mov	arg01, local19
10c3c     18 75 06 F1 | 	add	arg01, #280
10c40     3A 03 48 FC | 	wrbyte	#1, arg01
10c44     01 A2 06 F1 | 	add	local12, #1
10c48     01 AE 06 F1 | 	add	local18, #1
10c4c     C0 8C 86 F1 | 	sub	local01, #192
10c50     1C FF 9F FD | 	jmp	#LR__0431
10c54                 | LR__0432
10c54     51 B3 02 F6 | 	mov	local20, local12
10c58     02 B2 66 F0 | 	shl	local20, #2
10c5c     51 B3 02 F1 | 	add	local20, local12
10c60     06 B2 66 F0 | 	shl	local20, #6
10c64     2F 00 00 FF 
10c68     04 8C 06 F1 | 	add	local01, ##24068
10c6c     46 B3 02 F1 | 	add	local20, local01
10c70     51 75 02 F6 | 	mov	arg01, local12
10c74     04 74 66 F0 | 	shl	arg01, #4
10c78     51 75 82 F1 | 	sub	arg01, local12
10c7c     01 74 66 F0 | 	shl	arg01, #1
10c80     0C 00 00 FF 
10c84     44 8D 06 F1 | 	add	local01, ##6468
10c88     46 75 02 F1 | 	add	arg01, local01
10c8c     4B 01 00 FF 
10c90     2F 77 06 F6 | 	mov	arg02, ##@LR__2012
10c94     3B 00 00 FF 
10c98     60 8C 86 F1 | 	sub	local01, ##30304
10c9c     46 95 02 FB | 	rdlong	local05, local01
10ca0     E8 8C 86 F1 | 	sub	local01, #232
10ca4     F8 79 02 F6 | 	mov	arg03, ptra
10ca8     61 95 66 FC | 	wrlong	local05, ptra++
10cac     74 0F BF FD | 	call	#_sprintf
10cb0     04 F0 87 F1 | 	sub	ptra, #4
10cb4     C9 74 02 F6 | 	mov	arg01, objptr
10cb8     E0 76 02 F6 | 	mov	arg02, ptr__button_quartet_1020_
10cbc     28 46 B1 FD | 	call	#__system___make_methodptr
10cc0     59 75 02 F6 | 	mov	arg01, local20
10cc4     02 78 06 F6 | 	mov	arg03, #2
10cc8     34 75 06 F1 | 	add	arg01, #308
10ccc     3A 35 62 FC | 	wrlong	result1, arg01
10cd0     10 74 86 F1 | 	sub	arg01, #16
10cd4     3A 05 68 FC | 	wrlong	#2, arg01
10cd8     59 75 02 F6 | 	mov	arg01, local20
10cdc     18 75 06 F1 | 	add	arg01, #280
10ce0     3A 03 48 FC | 	wrbyte	#1, arg01
10ce4                 | '             {
10ce4                 | '                 Module *paramModule = &(page->profileParameters[paramIndex]);
10ce4                 | '                 sprintf(page->profileParametersBuffer[paramIndex], "    %s: %0.3f", page->info.args[i], page->quartet.parameters[i]);
10ce4                 | '                 module_touch_callback(paramModule, button_quartet_parameters, i);
10ce4                 | '                 module_set_visable(paramModule,  (1) );
10ce4                 | '                 paramIndex++;
10ce4                 | '             }
10ce4                 | ' 
10ce4                 | '             Module *dwellModule = &(page->profileParameters[paramIndex]);
10ce4                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Dwell (ms): %0.3f", page->quartet.dwell);
10ce4                 | '             module_touch_callback(dwellModule, button_quartet,  2 );
10ce4                 | '             module_set_visable(dwellModule,  (1) );
10ce4                 | '             break;
10ce4     DC 03 90 FD | 	jmp	#LR__0438
10ce8                 | LR__0433
10ce8     01 8E 0E F2 | 	cmp	local02, #1 wz
10cec     3C 00 90 AD |  if_e	jmp	#LR__0434
10cf0     3B 00 00 FF 
10cf4     28 8D 06 F1 | 	add	local01, ##30504
10cf8     46 75 02 F6 | 	mov	arg01, local01
10cfc     4B 01 00 FF 
10d00     41 77 06 F6 | 	mov	arg02, ##@LR__2013
10d04     90 45 B1 FD | 	call	#__system____builtin_strcpy
10d08     3B 00 00 FF 
10d0c     24 8D 86 F1 | 	sub	local01, ##30500
10d10     46 75 02 FB | 	rdlong	arg01, local01
10d14     22 00 00 FF 
10d18     7C 8C 06 F1 | 	add	local01, ##17532
10d1c     46 77 02 F6 | 	mov	arg02, local01
10d20     22 00 00 FF 
10d24     80 8C 86 F1 | 	sub	local01, ##17536
10d28     84 8A BF FD | 	call	#_module_draw
10d2c                 | LR__0434
10d2c     00 74 06 F6 | 	mov	arg01, #0
10d30     14 7E B1 FD | 	call	#__system___getiolock_1205
10d34     1A 75 02 F6 | 	mov	arg01, result1
10d38     E4 45 B1 FD | 	call	#__system___lockmem
10d3c     4B 01 00 FF 
10d40     45 77 06 F6 | 	mov	arg02, ##@LR__2014
10d44     00 74 06 F6 | 	mov	arg01, #0
10d48     00 78 06 F6 | 	mov	arg03, #0
10d4c     64 4B B1 FD | 	call	#__system___basic_print_string
10d50     00 74 06 F6 | 	mov	arg01, #0
10d54     0A 76 06 F6 | 	mov	arg02, #10
10d58     00 78 06 F6 | 	mov	arg03, #0
10d5c     08 4B B1 FD | 	call	#__system___basic_print_char
10d60     00 74 06 F6 | 	mov	arg01, #0
10d64     E0 7D B1 FD | 	call	#__system___getiolock_1205
10d68     1A 01 68 FC | 	wrlong	#0, result1
10d6c     00 B4 06 F6 | 	mov	local21, #0
10d70     2F 00 00 FF 
10d74     04 8C 06 F1 | 	add	local01, ##24068
10d78     46 B7 02 F6 | 	mov	local22, local01
10d7c     0C 00 00 FF 
10d80     44 8D 06 F1 | 	add	local01, ##6468
10d84     46 75 02 F6 | 	mov	arg01, local01
10d88     4B 01 00 FF 
10d8c     49 77 06 F6 | 	mov	arg02, ##@LR__2015
10d90     3B 00 00 FF 
10d94     5C 8C 86 F1 | 	sub	local01, ##30300
10d98     F8 79 02 F6 | 	mov	arg03, ptra
10d9c     61 8D 66 FC | 	wrlong	local01, ptra++
10da0     80 0E BF FD | 	call	#_sprintf
10da4     04 F0 87 F1 | 	sub	ptra, #4
10da8     C9 74 02 F6 | 	mov	arg01, objptr
10dac     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1035_
10db0     34 45 B1 FD | 	call	#__system___make_methodptr
10db4     5B 75 02 F6 | 	mov	arg01, local22
10db8     34 75 06 F1 | 	add	arg01, #308
10dbc     3A 35 62 FC | 	wrlong	result1, arg01
10dc0     10 74 86 F1 | 	sub	arg01, #16
10dc4     3A 01 68 FC | 	wrlong	#0, arg01
10dc8     5B 75 02 F6 | 	mov	arg01, local22
10dcc     18 75 06 F1 | 	add	arg01, #280
10dd0     3A 03 48 FC | 	wrbyte	#1, arg01
10dd4     01 B4 06 F1 | 	add	local21, #1
10dd8     5A B9 02 F6 | 	mov	local23, local21
10ddc     02 B8 66 F0 | 	shl	local23, #2
10de0     5A B9 02 F1 | 	add	local23, local21
10de4     06 B8 66 F0 | 	shl	local23, #6
10de8     2E 00 00 FF 
10dec     18 8D 06 F1 | 	add	local01, ##23832
10df0     46 B9 02 F1 | 	add	local23, local01
10df4     5A 75 02 F6 | 	mov	arg01, local21
10df8     04 74 66 F0 | 	shl	arg01, #4
10dfc     5A 75 82 F1 | 	sub	arg01, local21
10e00     01 74 66 F0 | 	shl	arg01, #1
10e04     0C 00 00 FF 
10e08     44 8D 06 F1 | 	add	local01, ##6468
10e0c     46 75 02 F1 | 	add	arg01, local01
10e10     4B 01 00 FF 
10e14     52 77 06 F6 | 	mov	arg02, ##@LR__2016
10e18     3B 00 00 FF 
10e1c     28 8C 86 F1 | 	sub	local01, ##30248
10e20     46 95 02 FB | 	rdlong	local05, local01
10e24     F8 79 02 F6 | 	mov	arg03, ptra
10e28     61 95 66 FC | 	wrlong	local05, ptra++
10e2c     F4 0D BF FD | 	call	#_sprintf
10e30     04 F0 87 F1 | 	sub	ptra, #4
10e34     C9 74 02 F6 | 	mov	arg01, objptr
10e38     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1035_
10e3c     A8 44 B1 FD | 	call	#__system___make_methodptr
10e40     5C 75 02 F6 | 	mov	arg01, local23
10e44     34 75 06 F1 | 	add	arg01, #308
10e48     3A 35 62 FC | 	wrlong	result1, arg01
10e4c     10 74 86 F1 | 	sub	arg01, #16
10e50     3A 03 68 FC | 	wrlong	#1, arg01
10e54     5C 75 02 F6 | 	mov	arg01, local23
10e58     18 75 06 F1 | 	add	arg01, #280
10e5c     3A 03 48 FC | 	wrbyte	#1, arg01
10e60     01 B4 06 F1 | 	add	local21, #1
10e64     5A BB 02 F6 | 	mov	local24, local21
10e68     02 BA 66 F0 | 	shl	local24, #2
10e6c     5A BB 02 F1 | 	add	local24, local21
10e70     06 BA 66 F0 | 	shl	local24, #6
10e74     2E 00 00 FF 
10e78     E4 8C 06 F1 | 	add	local01, ##23780
10e7c     46 BB 02 F1 | 	add	local24, local01
10e80     5A 75 02 F6 | 	mov	arg01, local21
10e84     04 74 66 F0 | 	shl	arg01, #4
10e88     5A 75 82 F1 | 	sub	arg01, local21
10e8c     01 74 66 F0 | 	shl	arg01, #1
10e90     0C 00 00 FF 
10e94     44 8D 06 F1 | 	add	local01, ##6468
10e98     46 75 02 F1 | 	add	arg01, local01
10e9c     4B 01 00 FF 
10ea0     5D 77 06 F6 | 	mov	arg02, ##@LR__2017
10ea4     3B 00 00 FF 
10ea8     24 8C 86 F1 | 	sub	local01, ##30244
10eac     F8 79 02 F6 | 	mov	arg03, ptra
10eb0     61 8D 66 FC | 	wrlong	local01, ptra++
10eb4     6C 0D BF FD | 	call	#_sprintf
10eb8     04 F0 87 F1 | 	sub	ptra, #4
10ebc     C9 74 02 F6 | 	mov	arg01, objptr
10ec0     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1035_
10ec4     20 44 B1 FD | 	call	#__system___make_methodptr
10ec8     5D 75 02 F6 | 	mov	arg01, local24
10ecc     34 75 06 F1 | 	add	arg01, #308
10ed0     3A 35 62 FC | 	wrlong	result1, arg01
10ed4     10 74 86 F1 | 	sub	arg01, #16
10ed8     3A 05 68 FC | 	wrlong	#2, arg01
10edc     5D 75 02 F6 | 	mov	arg01, local24
10ee0     18 75 06 F1 | 	add	arg01, #280
10ee4     3A 03 48 FC | 	wrbyte	#1, arg01
10ee8     01 B4 06 F1 | 	add	local21, #1
10eec     5A BD 02 F6 | 	mov	local25, local21
10ef0     02 BC 66 F0 | 	shl	local25, #2
10ef4     5A BD 02 F1 | 	add	local25, local21
10ef8     06 BC 66 F0 | 	shl	local25, #6
10efc     2E 00 00 FF 
10f00     E0 8C 06 F1 | 	add	local01, ##23776
10f04     46 BD 02 F1 | 	add	local25, local01
10f08     5A 75 02 F6 | 	mov	arg01, local21
10f0c     04 74 66 F0 | 	shl	arg01, #4
10f10     5A 75 82 F1 | 	sub	arg01, local21
10f14     01 74 66 F0 | 	shl	arg01, #1
10f18     0C 00 00 FF 
10f1c     44 8D 06 F1 | 	add	local01, ##6468
10f20     46 75 02 F1 | 	add	arg01, local01
10f24     4B 01 00 FF 
10f28     66 77 06 F6 | 	mov	arg02, ##@LR__2018
10f2c     3B 00 00 FF 
10f30     18 8C 86 F1 | 	sub	local01, ##30232
10f34     46 95 02 FB | 	rdlong	local05, local01
10f38     30 8D 86 F1 | 	sub	local01, #304
10f3c     F8 79 02 F6 | 	mov	arg03, ptra
10f40     61 95 66 FC | 	wrlong	local05, ptra++
10f44     DC 0C BF FD | 	call	#_sprintf
10f48     04 F0 87 F1 | 	sub	ptra, #4
10f4c     C9 74 02 F6 | 	mov	arg01, objptr
10f50     E4 76 02 F6 | 	mov	arg02, ptr__button_set_1035_
10f54     90 43 B1 FD | 	call	#__system___make_methodptr
10f58     5E 75 02 F6 | 	mov	arg01, local25
10f5c     03 78 06 F6 | 	mov	arg03, #3
10f60     34 75 06 F1 | 	add	arg01, #308
10f64     3A 35 62 FC | 	wrlong	result1, arg01
10f68     10 74 86 F1 | 	sub	arg01, #16
10f6c     3A 07 68 FC | 	wrlong	#3, arg01
10f70     5E 75 02 F6 | 	mov	arg01, local25
10f74     18 75 06 F1 | 	add	arg01, #280
10f78     3A 03 48 FC | 	wrbyte	#1, arg01
10f7c     00 BE 06 F6 | 	mov	local26, #0
10f80                 | ' 
10f80                 | '             Module *nameModule = &(page->profileParameters[paramIndex]);
10f80                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Name: %s", page->set.name);
10f80                 | '             module_touch_callback(nameModule, button_set,  0 );
10f80                 | '             module_set_visable(nameModule,  (1) );
10f80                 | ' 
10f80                 | '             paramIndex++;
10f80                 | '             Module *numberModule = &(page->profileParameters[paramIndex]);
10f80                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Number: %d", page->set.number);
10f80                 | '             module_touch_callback(numberModule, button_set,  1 );
10f80                 | '             module_set_visable(numberModule,  (1) );
10f80                 | ' 
10f80                 | '             paramIndex++;
10f80                 | '             Module *typeModule = &(page->profileParameters[paramIndex]);
10f80                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Type: %s", page->set.type);
10f80                 | '             module_touch_callback(typeModule, button_set,  2 );
10f80                 | '             module_set_visable(typeModule,  (1) );
10f80                 | ' 
10f80                 | '             paramIndex++;
10f80                 | '             Module *executionsModule = &(page->profileParameters[paramIndex]);
10f80                 | '             sprintf(page->profileParametersBuffer[paramIndex], "Executions: %d", page->set.executions);
10f80                 | '             module_touch_callback(executionsModule, button_set,  3 );
10f80                 | '             module_set_visable(executionsModule,  (1) );
10f80                 | ' 
10f80                 | '             for (int i = 0; i < page->set.quartetCount; i++)
10f80                 | LR__0435
10f80     34 8D 06 F1 | 	add	local01, #308
10f84     46 9B 02 FB | 	rdlong	local08, local01
10f88     34 8D 86 F1 | 	sub	local01, #308
10f8c     4D BF 52 F2 | 	cmps	local26, local08 wc
10f90     AC 00 90 3D |  if_ae	jmp	#LR__0436
10f94     64 BE 06 FD | 	qmul	local26, #100
10f98     01 B4 06 F1 | 	add	local21, #1
10f9c     5A C1 02 F6 | 	mov	local27, local21
10fa0     02 C0 66 F0 | 	shl	local27, #2
10fa4     5A C1 02 F1 | 	add	local27, local21
10fa8     06 C0 66 F0 | 	shl	local27, #6
10fac     2F 00 00 FF 
10fb0     04 8C 06 F1 | 	add	local01, ##24068
10fb4     46 C1 02 F1 | 	add	local27, local01
10fb8     5A 75 02 F6 | 	mov	arg01, local21
10fbc     04 74 66 F0 | 	shl	arg01, #4
10fc0     5A 75 82 F1 | 	sub	arg01, local21
10fc4     01 74 66 F0 | 	shl	arg01, #1
10fc8     0C 00 00 FF 
10fcc     44 8D 06 F1 | 	add	local01, ##6468
10fd0     46 75 02 F1 | 	add	arg01, local01
10fd4     4B 01 00 FF 
10fd8     75 77 06 F6 | 	mov	arg02, ##@LR__2019
10fdc     3B 00 00 FF 
10fe0     10 8C 86 F1 | 	sub	local01, ##30224
10fe4     46 A9 02 F6 | 	mov	local15, local01
10fe8     18 A6 62 FD | 	getqx	local14
10fec     46 A7 02 F1 | 	add	local14, local01
10ff0     53 AB 02 F6 | 	mov	local16, local14
10ff4     F8 79 02 F6 | 	mov	arg03, ptra
10ff8     61 AB 66 FC | 	wrlong	local16, ptra++
10ffc     24 0C BF FD | 	call	#_sprintf
11000     04 F0 87 F1 | 	sub	ptra, #4
11004     C9 74 02 F6 | 	mov	arg01, objptr
11008     E7 76 02 F6 | 	mov	arg02, ptr__button_set_remove_
1100c     D8 42 B1 FD | 	call	#__system___make_methodptr
11010     60 75 02 F6 | 	mov	arg01, local27
11014     5F 79 02 F6 | 	mov	arg03, local26
11018     34 75 06 F1 | 	add	arg01, #308
1101c     3A 35 62 FC | 	wrlong	result1, arg01
11020     10 74 86 F1 | 	sub	arg01, #16
11024     3A 79 62 FC | 	wrlong	arg03, arg01
11028     60 75 02 F6 | 	mov	arg01, local27
1102c     18 75 06 F1 | 	add	arg01, #280
11030     3A 03 48 FC | 	wrbyte	#1, arg01
11034     01 BE 06 F1 | 	add	local26, #1
11038     38 8D 86 F1 | 	sub	local01, #312
1103c     40 FF 9F FD | 	jmp	#LR__0435
11040                 | LR__0436
11040     01 B4 06 F1 | 	add	local21, #1
11044     5A C3 02 F6 | 	mov	local28, local21
11048     02 C2 66 F0 | 	shl	local28, #2
1104c     5A C3 02 F1 | 	add	local28, local21
11050     06 C2 66 F0 | 	shl	local28, #6
11054     2F 00 00 FF 
11058     04 8C 06 F1 | 	add	local01, ##24068
1105c     46 C3 02 F1 | 	add	local28, local01
11060     5A 75 02 F6 | 	mov	arg01, local21
11064     04 74 66 F0 | 	shl	arg01, #4
11068     5A 75 82 F1 | 	sub	arg01, local21
1106c     01 74 66 F0 | 	shl	arg01, #1
11070     0C 00 00 FF 
11074     44 8D 06 F1 | 	add	local01, ##6468
11078     46 75 02 F1 | 	add	arg01, local01
1107c     4B 01 00 FF 
11080     78 77 06 F6 | 	mov	arg02, ##@LR__2020
11084     9C 0B BF FD | 	call	#_sprintf
11088     C9 74 02 F6 | 	mov	arg01, objptr
1108c     E5 76 02 F6 | 	mov	arg02, ptr__button_set_add_
11090     54 42 B1 FD | 	call	#__system___make_methodptr
11094     61 75 02 F6 | 	mov	arg01, local28
11098     00 78 06 F6 | 	mov	arg03, #0
1109c     34 75 06 F1 | 	add	arg01, #308
110a0     3A 35 62 FC | 	wrlong	result1, arg01
110a4     10 74 86 F1 | 	sub	arg01, #16
110a8     3A 01 68 FC | 	wrlong	#0, arg01
110ac     61 75 02 F6 | 	mov	arg01, local28
110b0     18 75 06 F1 | 	add	arg01, #280
110b4     3A 03 48 FC | 	wrbyte	#1, arg01
110b8                 | '             {
110b8                 | '                 paramIndex++;
110b8                 | '                 Module *quartetModule = &(page->profileParameters[paramIndex]);
110b8                 | '                 sprintf(page->profileParametersBuffer[paramIndex], "%s", page->set.quartets[i].name);
110b8                 | '                 module_touch_callback(quartetModule, button_set_remove, i);
110b8                 | '                 module_set_visable(quartetModule,  (1) );
110b8                 | '             }
110b8                 | ' 
110b8                 | '             paramIndex++;
110b8                 | '             Module *quartetModule = &(page->profileParameters[paramIndex]);
110b8                 | '             sprintf(page->profileParametersBuffer[paramIndex], "New Quartet");
110b8                 | '             module_touch_callback(quartetModule, button_set_add, 0);
110b8                 | '             module_set_visable(quartetModule,  (1) );
110b8                 | '             break;
110b8     3B 00 00 FF 
110bc     48 8D 86 F1 | 	sub	local01, ##30536
110c0     00 00 90 FD | 	jmp	#LR__0438
110c4                 | '         {
110c4                 | '             break;
110c4                 | '         {
110c4                 | '             break;
110c4                 | LR__0437
110c4                 | '             break;
110c4                 | LR__0438
110c4     0C 8C 06 F1 | 	add	local01, #12
110c8     46 8F 02 FB | 	rdlong	local02, local01
110cc     08 8C 86 F1 | 	sub	local01, #8
110d0     46 75 02 FB | 	rdlong	arg01, local01
110d4     2E 00 00 FF 
110d8     C0 8C 06 F1 | 	add	local01, ##23744
110dc     46 77 02 F6 | 	mov	arg02, local01
110e0     2E 00 00 FF 
110e4     C4 8C 86 F1 | 	sub	local01, ##23748
110e8     C4 86 BF FD | 	call	#_module_draw
110ec                 | '         }
110ec                 | '         lastMode = page->mode;
110ec                 | '         module_draw(page->display, &(page->subroot));
110ec                 | '         do
110ec                 | LR__0439
110ec     04 8C 06 F1 | 	add	local01, #4
110f0     46 75 02 FB | 	rdlong	arg01, local01
110f4     7C 45 BF FD | 	call	#_display_update_touch
110f8     22 00 00 FF 
110fc     7C 8C 06 F1 | 	add	local01, ##17532
11100     46 75 02 F6 | 	mov	arg01, local01
11104     22 00 00 FF 
11108     7C 8C 86 F1 | 	sub	local01, ##17532
1110c     46 77 02 FB | 	rdlong	arg02, local01
11110     04 8C 86 F1 | 	sub	local01, #4
11114     46 79 02 F6 | 	mov	arg03, local01
11118     E4 7A BF FD | 	call	#_module_touch_check
1111c     00 34 0E F2 | 	cmp	result1, #0 wz
11120     C8 FF 9F AD |  if_e	jmp	#LR__0439
11124     C8 F6 9F FD | 	jmp	#LR__0424
11128                 | LR__0440
11128     A8 F0 03 F6 | 	mov	ptra, fp
1112c     B3 00 A0 FD | 	call	#popregs_
11130                 | _test_profile_page_run_ret
11130     2D 00 64 FD | 	ret
11134                 | 
11134                 | _mad_begin
11134     0A 4C 05 F6 | 	mov	COUNT_, #10
11138     A9 00 A0 FD | 	call	#pushregs_
1113c     00 74 06 F6 | 	mov	arg01, #0
11140     04 7A B1 FD | 	call	#__system___getiolock_1205
11144     1A 75 02 F6 | 	mov	arg01, result1
11148     D4 41 B1 FD | 	call	#__system___lockmem
1114c     4B 01 00 FF 
11150     84 77 06 F6 | 	mov	arg02, ##@LR__2021
11154     00 74 06 F6 | 	mov	arg01, #0
11158     00 78 06 F6 | 	mov	arg03, #0
1115c     54 47 B1 FD | 	call	#__system___basic_print_string
11160     00 74 06 F6 | 	mov	arg01, #0
11164     0A 76 06 F6 | 	mov	arg02, #10
11168     00 78 06 F6 | 	mov	arg03, #0
1116c     F8 46 B1 FD | 	call	#__system___basic_print_char
11170     00 74 06 F6 | 	mov	arg01, #0
11174     D0 79 B1 FD | 	call	#__system___getiolock_1205
11178     1A 01 68 FC | 	wrlong	#0, result1
1117c     E4 16 B0 FD | 	call	#_start_display_0343
11180     00 34 0E F2 | 	cmp	result1, #0 wz
11184     44 00 90 5D |  if_ne	jmp	#LR__0441
11188     00 74 06 F6 | 	mov	arg01, #0
1118c     B8 79 B1 FD | 	call	#__system___getiolock_1205
11190     1A 75 02 F6 | 	mov	arg01, result1
11194     88 41 B1 FD | 	call	#__system___lockmem
11198     4B 01 00 FF 
1119c     94 77 06 F6 | 	mov	arg02, ##@LR__2022
111a0     00 74 06 F6 | 	mov	arg01, #0
111a4     00 78 06 F6 | 	mov	arg03, #0
111a8     08 47 B1 FD | 	call	#__system___basic_print_string
111ac     00 74 06 F6 | 	mov	arg01, #0
111b0     0A 76 06 F6 | 	mov	arg02, #10
111b4     00 78 06 F6 | 	mov	arg03, #0
111b8     AC 46 B1 FD | 	call	#__system___basic_print_char
111bc     00 74 06 F6 | 	mov	arg01, #0
111c0     84 79 B1 FD | 	call	#__system___getiolock_1205
111c4     1A 01 68 FC | 	wrlong	#0, result1
111c8                 | '     return;
111c8     94 06 90 FD | 	jmp	#LR__0456
111cc                 | LR__0441
111cc     1F 00 00 FF 
111d0     80 D7 05 F1 | 	add	ptr__dat__, ##16256
111d4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
111d8     1F 00 00 FF 
111dc     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
111e0     4B 01 00 FF 
111e4     AB 77 06 F6 | 	mov	arg02, ##@LR__2023
111e8     01 78 06 F6 | 	mov	arg03, #1
111ec     34 9B BF FD | 	call	#_loading_overlay_display
111f0     C8 74 06 F6 | 	mov	arg01, #200
111f4     40 42 B1 FD | 	call	#__system___waitms
111f8     B0 11 B0 FD | 	call	#_load_machine_profile_0339
111fc     1F 00 00 FF 
11200     80 D7 05 F1 | 	add	ptr__dat__, ##16256
11204     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11208     1F 00 00 FF 
1120c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
11210     4B 01 00 FF 
11214     C0 77 06 F6 | 	mov	arg02, ##@LR__2024
11218     01 78 06 F6 | 	mov	arg03, #1
1121c     04 9B BF FD | 	call	#_loading_overlay_display
11220     04 08 B0 FD | 	call	#_load_images_0337
11224     1F 00 00 FF 
11228     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1122c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11230     1F 00 00 FF 
11234     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
11238     4B 01 00 FF 
1123c     D7 77 06 F6 | 	mov	arg02, ##@LR__2025
11240     01 78 06 F6 | 	mov	arg03, #1
11244     DC 9A BF FD | 	call	#_loading_overlay_display
11248     20 00 00 FF 
1124c     64 D6 05 F1 | 	add	ptr__dat__, ##16484
11250     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11254     20 00 00 FF 
11258     64 D6 85 F1 | 	sub	ptr__dat__, ##16484
1125c     58 15 BF FD | 	call	#_machine_state_init
11260     10 D6 05 F1 | 	add	ptr__dat__, #16
11264     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11268     20 00 00 FF 
1126c     54 D6 05 F1 | 	add	ptr__dat__, ##16468
11270     EB 76 02 F6 | 	mov	arg02, ptr__dat__
11274     20 00 00 FF 
11278     64 D6 85 F1 | 	sub	ptr__dat__, ##16484
1127c     0A 78 06 F6 | 	mov	arg03, #10
11280     F4 9B BF FD | 	call	#_monitor_begin
11284     00 34 0E F2 | 	cmp	result1, #0 wz
11288     28 00 90 AD |  if_e	jmp	#LR__0442
1128c     1F 00 00 FF 
11290     80 D7 05 F1 | 	add	ptr__dat__, ##16256
11294     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11298     1F 00 00 FF 
1129c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
112a0     4B 01 00 FF 
112a4     E9 77 06 F6 | 	mov	arg02, ##@LR__2026
112a8     01 78 06 F6 | 	mov	arg03, #1
112ac     74 9A BF FD | 	call	#_loading_overlay_display
112b0     28 00 90 FD | 	jmp	#LR__0443
112b4                 | LR__0442
112b4     1F 00 00 FF 
112b8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
112bc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
112c0     1F 00 00 FF 
112c4     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
112c8     4B 01 00 FF 
112cc     F9 77 06 F6 | 	mov	arg02, ##@LR__2027
112d0     01 78 06 F6 | 	mov	arg03, #1
112d4     4C 9A BF FD | 	call	#_loading_overlay_display
112d8                 | '   {
112d8                 | '     loading_overlay_display(&display, "Monitor Failed, please reset", OVERLAY_TYPE_LOADING);
112d8                 | '     return;
112d8     84 05 90 FD | 	jmp	#LR__0456
112dc                 | LR__0443
112dc     28 D6 05 F1 | 	add	ptr__dat__, #40
112e0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
112e4     1F 00 00 FF 
112e8     A4 D7 05 F1 | 	add	ptr__dat__, ##16292
112ec     EB 76 02 F6 | 	mov	arg02, ptr__dat__
112f0     98 D6 05 F1 | 	add	ptr__dat__, #152
112f4     EB 78 02 F6 | 	mov	arg03, ptr__dat__
112f8     20 00 00 FF 
112fc     54 D6 85 F1 | 	sub	ptr__dat__, ##16468
11300     EB 7A 02 F6 | 	mov	arg04, ptr__dat__
11304     10 D6 85 F1 | 	sub	ptr__dat__, #16
11308     80 C9 BF FD | 	call	#_control_begin
1130c     00 34 0E F2 | 	cmp	result1, #0 wz
11310     2C 00 90 AD |  if_e	jmp	#LR__0444
11314     1F 00 00 FF 
11318     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1131c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11320     1F 00 00 FF 
11324     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
11328     4C 01 00 FF 
1132c     16 76 06 F6 | 	mov	arg02, ##@LR__2028
11330     01 78 06 F6 | 	mov	arg03, #1
11334     EC 99 BF FD | 	call	#_loading_overlay_display
11338     B0 12 B0 FD | 	call	#_static_test_profile_0341
1133c     28 00 90 FD | 	jmp	#LR__0445
11340                 | LR__0444
11340     1F 00 00 FF 
11344     80 D7 05 F1 | 	add	ptr__dat__, ##16256
11348     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1134c     1F 00 00 FF 
11350     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
11354     4C 01 00 FF 
11358     2C 76 06 F6 | 	mov	arg02, ##@LR__2029
1135c     01 78 06 F6 | 	mov	arg03, #1
11360     C0 99 BF FD | 	call	#_loading_overlay_display
11364                 | '   {
11364                 | '     loading_overlay_display(&display, "ControlSystem Failed, please reset", OVERLAY_TYPE_LOADING);
11364                 | '     return;
11364     F8 04 90 FD | 	jmp	#LR__0456
11368                 | LR__0445
11368     20 00 00 FF 
1136c     64 D6 05 F1 | 	add	ptr__dat__, ##16484
11370     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11374     20 00 00 FF 
11378     64 D6 85 F1 | 	sub	ptr__dat__, ##16484
1137c     00 76 06 F6 | 	mov	arg02, #0
11380     01 78 06 F6 | 	mov	arg03, #1
11384     BC 14 BF FD | 	call	#_state_machine_set
11388     21 00 00 FF 
1138c     04 D7 05 F1 | 	add	ptr__dat__, ##17156
11390     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11394     01 00 00 FF 
11398     84 D7 85 F1 | 	sub	ptr__dat__, ##900
1139c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
113a0     E4 D6 05 F1 | 	add	ptr__dat__, #228
113a4     EB 78 02 F6 | 	mov	arg03, ptr__dat__
113a8     98 D6 85 F1 | 	sub	ptr__dat__, #152
113ac     EB 7A 02 F6 | 	mov	arg04, ptr__dat__
113b0     1F 00 00 FF 
113b4     BC D7 85 F1 | 	sub	ptr__dat__, ##16316
113b8     EB 7C 02 F6 | 	mov	arg05, ptr__dat__
113bc     20 00 00 FF 
113c0     84 D6 05 F1 | 	add	ptr__dat__, ##16516
113c4     EB 7E 02 F6 | 	mov	arg06, ptr__dat__
113c8     20 00 00 FF 
113cc     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
113d0     C8 B1 BF FD | 	call	#_status_page_init
113d4     4B 00 00 FF 
113d8     04 D7 05 F1 | 	add	ptr__dat__, ##38660
113dc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
113e0     2B 00 00 FF 
113e4     84 D7 85 F1 | 	sub	ptr__dat__, ##22404
113e8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
113ec     14 D7 05 F1 | 	add	ptr__dat__, #276
113f0     EB 78 02 F6 | 	mov	arg03, ptr__dat__
113f4     30 D6 85 F1 | 	sub	ptr__dat__, #48
113f8     EB 7A 02 F6 | 	mov	arg04, ptr__dat__
113fc     20 00 00 FF 
11400     3C D6 85 F1 | 	sub	ptr__dat__, ##16444
11404     EB 7C 02 F6 | 	mov	arg05, ptr__dat__
11408     28 D6 85 F1 | 	sub	ptr__dat__, #40
1140c     F0 C8 BF FD | 	call	#_automatic_page_init
11410     5B 00 00 FF 
11414     68 D7 05 F1 | 	add	ptr__dat__, ##46952
11418     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1141c     3B 00 00 FF 
11420     E8 D7 85 F1 | 	sub	ptr__dat__, ##30696
11424     EB 76 02 F6 | 	mov	arg02, ptr__dat__
11428     14 D7 05 F1 | 	add	ptr__dat__, #276
1142c     EB 78 02 F6 | 	mov	arg03, ptr__dat__
11430     20 00 00 FF 
11434     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
11438     00 EB BF FD | 	call	#_test_profile_page_init
1143c     A1 00 00 FF 
11440     CC D7 05 F1 | 	add	ptr__dat__, ##82892
11444     EB 8C 02 F6 | 	mov	local01, ptr__dat__
11448     82 00 00 FF 
1144c     4C D6 85 F1 | 	sub	ptr__dat__, ##66636
11450     EB 76 02 F6 | 	mov	arg02, ptr__dat__
11454     14 D7 05 F1 | 	add	ptr__dat__, #276
11458     EB 78 02 F6 | 	mov	arg03, ptr__dat__
1145c     20 00 00 FF 
11460     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
11464     46 75 02 F6 | 	mov	arg01, local01
11468     60 91 BF FD | 	call	#_navigation_page_init
1146c     00 74 06 F6 | 	mov	arg01, #0
11470     D4 76 B1 FD | 	call	#__system___getiolock_1205
11474     1A 75 02 F6 | 	mov	arg01, result1
11478     A4 3E B1 FD | 	call	#__system___lockmem
1147c     00 8E 06 F6 | 	mov	local02, #0
11480     4C 01 00 FF 
11484     4F 76 06 F6 | 	mov	arg02, ##@LR__2030
11488     00 74 06 F6 | 	mov	arg01, #0
1148c     00 78 06 F6 | 	mov	arg03, #0
11490     20 44 B1 FD | 	call	#__system___basic_print_string
11494     1A 91 02 F6 | 	mov	local03, result1
11498     0A 92 06 F6 | 	mov	local04, #10
1149c     00 74 06 F6 | 	mov	arg01, #0
114a0     98 76 06 F6 | 	mov	arg02, #152
114a4     00 78 06 F6 | 	mov	arg03, #0
114a8     0A 7A 06 F6 | 	mov	arg04, #10
114ac     48 44 B1 FD | 	call	#__system___basic_print_integer
114b0     1A 95 02 F6 | 	mov	local05, result1
114b4     00 74 06 F6 | 	mov	arg01, #0
114b8     0A 76 06 F6 | 	mov	arg02, #10
114bc     00 78 06 F6 | 	mov	arg03, #0
114c0     A4 43 B1 FD | 	call	#__system___basic_print_char
114c4     01 96 06 F6 | 	mov	local06, #1
114c8     00 74 06 F6 | 	mov	arg01, #0
114cc     78 76 B1 FD | 	call	#__system___getiolock_1205
114d0     1A 01 68 FC | 	wrlong	#0, result1
114d4     00 34 06 F6 | 	mov	result1, #0
114d8     00 98 06 F6 | 	mov	local07, #0
114dc     05 9A 06 F6 | 	mov	local08, #5
114e0                 | ' 
114e0                 | '   Page currentPage = PAGE_TEST_PROFILE;
114e0                 | '   while (1)
114e0                 | LR__0446
114e0                 | '   {
114e0                 | '     switch (currentPage)
114e0     4D 9D 02 F6 | 	mov	local09, local08
114e4     06 9C 26 F3 | 	fle	local09, #6
114e8     30 9C 62 FD | 	jmprel	local09
114ec                 | LR__0447
114ec     18 00 90 FD | 	jmp	#LR__0448
114f0     B0 00 90 FD | 	jmp	#LR__0449
114f4     30 01 90 FD | 	jmp	#LR__0450
114f8     50 02 90 FD | 	jmp	#LR__0452
114fc     C4 01 90 FD | 	jmp	#LR__0451
11500     CC 02 90 FD | 	jmp	#LR__0453
11504     E4 02 90 FD | 	jmp	#LR__0454
11508                 | LR__0448
11508     00 74 06 F6 | 	mov	arg01, #0
1150c     38 76 B1 FD | 	call	#__system___getiolock_1205
11510     1A 75 02 F6 | 	mov	arg01, result1
11514     08 3E B1 FD | 	call	#__system___lockmem
11518     4C 01 00 FF 
1151c     66 76 06 F6 | 	mov	arg02, ##@LR__2031
11520     00 74 06 F6 | 	mov	arg01, #0
11524     00 78 06 F6 | 	mov	arg03, #0
11528     88 43 B1 FD | 	call	#__system___basic_print_string
1152c     00 74 06 F6 | 	mov	arg01, #0
11530     0A 76 06 F6 | 	mov	arg02, #10
11534     00 78 06 F6 | 	mov	arg03, #0
11538     2C 43 B1 FD | 	call	#__system___basic_print_char
1153c     00 74 06 F6 | 	mov	arg01, #0
11540     04 76 B1 FD | 	call	#__system___getiolock_1205
11544     1A 01 68 FC | 	wrlong	#0, result1
11548     21 00 00 FF 
1154c     04 D7 05 F1 | 	add	ptr__dat__, ##17156
11550     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11554     21 00 00 FF 
11558     04 D7 85 F1 | 	sub	ptr__dat__, ##17156
1155c     B8 BE BF FD | 	call	#_status_page_run
11560     00 74 06 F6 | 	mov	arg01, #0
11564     E0 75 B1 FD | 	call	#__system___getiolock_1205
11568     1A 75 02 F6 | 	mov	arg01, result1
1156c     B0 3D B1 FD | 	call	#__system___lockmem
11570     4C 01 00 FF 
11574     7A 76 06 F6 | 	mov	arg02, ##@LR__2032
11578     00 74 06 F6 | 	mov	arg01, #0
1157c     00 78 06 F6 | 	mov	arg03, #0
11580     30 43 B1 FD | 	call	#__system___basic_print_string
11584     00 74 06 F6 | 	mov	arg01, #0
11588     0A 76 06 F6 | 	mov	arg02, #10
1158c     00 78 06 F6 | 	mov	arg03, #0
11590     D4 42 B1 FD | 	call	#__system___basic_print_char
11594     00 74 06 F6 | 	mov	arg01, #0
11598     AC 75 B1 FD | 	call	#__system___getiolock_1205
1159c     1A 01 68 FC | 	wrlong	#0, result1
115a0                 | '       break;
115a0     48 02 90 FD | 	jmp	#LR__0455
115a4                 | LR__0449
115a4     00 74 06 F6 | 	mov	arg01, #0
115a8     9C 75 B1 FD | 	call	#__system___getiolock_1205
115ac     1A 75 02 F6 | 	mov	arg01, result1
115b0     6C 3D B1 FD | 	call	#__system___lockmem
115b4     4C 01 00 FF 
115b8     8E 76 06 F6 | 	mov	arg02, ##@LR__2033
115bc     00 74 06 F6 | 	mov	arg01, #0
115c0     00 78 06 F6 | 	mov	arg03, #0
115c4     EC 42 B1 FD | 	call	#__system___basic_print_string
115c8     00 74 06 F6 | 	mov	arg01, #0
115cc     0A 76 06 F6 | 	mov	arg02, #10
115d0     00 78 06 F6 | 	mov	arg03, #0
115d4     90 42 B1 FD | 	call	#__system___basic_print_char
115d8     00 74 06 F6 | 	mov	arg01, #0
115dc     68 75 B1 FD | 	call	#__system___getiolock_1205
115e0     1A 01 68 FC | 	wrlong	#0, result1
115e4     00 74 06 F6 | 	mov	arg01, #0
115e8     5C 75 B1 FD | 	call	#__system___getiolock_1205
115ec     1A 75 02 F6 | 	mov	arg01, result1
115f0     2C 3D B1 FD | 	call	#__system___lockmem
115f4     4C 01 00 FF 
115f8     A2 76 06 F6 | 	mov	arg02, ##@LR__2034
115fc     00 74 06 F6 | 	mov	arg01, #0
11600     00 78 06 F6 | 	mov	arg03, #0
11604     AC 42 B1 FD | 	call	#__system___basic_print_string
11608     00 74 06 F6 | 	mov	arg01, #0
1160c     0A 76 06 F6 | 	mov	arg02, #10
11610     00 78 06 F6 | 	mov	arg03, #0
11614     50 42 B1 FD | 	call	#__system___basic_print_char
11618     00 74 06 F6 | 	mov	arg01, #0
1161c     28 75 B1 FD | 	call	#__system___getiolock_1205
11620     1A 01 68 FC | 	wrlong	#0, result1
11624                 | '       break;
11624     C4 01 90 FD | 	jmp	#LR__0455
11628                 | LR__0450
11628     00 74 06 F6 | 	mov	arg01, #0
1162c     18 75 B1 FD | 	call	#__system___getiolock_1205
11630     1A 75 02 F6 | 	mov	arg01, result1
11634     E8 3C B1 FD | 	call	#__system___lockmem
11638     4C 01 00 FF 
1163c     B6 76 06 F6 | 	mov	arg02, ##@LR__2035
11640     00 74 06 F6 | 	mov	arg01, #0
11644     00 78 06 F6 | 	mov	arg03, #0
11648     68 42 B1 FD | 	call	#__system___basic_print_string
1164c     00 74 06 F6 | 	mov	arg01, #0
11650     0A 76 06 F6 | 	mov	arg02, #10
11654     00 78 06 F6 | 	mov	arg03, #0
11658     0C 42 B1 FD | 	call	#__system___basic_print_char
1165c     00 74 06 F6 | 	mov	arg01, #0
11660     E4 74 B1 FD | 	call	#__system___getiolock_1205
11664     1A 01 68 FC | 	wrlong	#0, result1
11668     4B 00 00 FF 
1166c     04 D7 05 F1 | 	add	ptr__dat__, ##38660
11670     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11674     4B 00 00 FF 
11678     04 D7 85 F1 | 	sub	ptr__dat__, ##38660
1167c     D8 CC BF FD | 	call	#_automatic_page_run
11680     00 74 06 F6 | 	mov	arg01, #0
11684     C0 74 B1 FD | 	call	#__system___getiolock_1205
11688     1A 75 02 F6 | 	mov	arg01, result1
1168c     90 3C B1 FD | 	call	#__system___lockmem
11690     4C 01 00 FF 
11694     D0 76 06 F6 | 	mov	arg02, ##@LR__2036
11698     00 74 06 F6 | 	mov	arg01, #0
1169c     00 78 06 F6 | 	mov	arg03, #0
116a0     10 42 B1 FD | 	call	#__system___basic_print_string
116a4     00 74 06 F6 | 	mov	arg01, #0
116a8     0A 76 06 F6 | 	mov	arg02, #10
116ac     00 78 06 F6 | 	mov	arg03, #0
116b0     B4 41 B1 FD | 	call	#__system___basic_print_char
116b4     00 74 06 F6 | 	mov	arg01, #0
116b8     8C 74 B1 FD | 	call	#__system___getiolock_1205
116bc     1A 01 68 FC | 	wrlong	#0, result1
116c0                 | '       break;
116c0     28 01 90 FD | 	jmp	#LR__0455
116c4                 | LR__0451
116c4     00 74 06 F6 | 	mov	arg01, #0
116c8     7C 74 B1 FD | 	call	#__system___getiolock_1205
116cc     1A 75 02 F6 | 	mov	arg01, result1
116d0     4C 3C B1 FD | 	call	#__system___lockmem
116d4     4C 01 00 FF 
116d8     E7 76 06 F6 | 	mov	arg02, ##@LR__2037
116dc     00 74 06 F6 | 	mov	arg01, #0
116e0     00 78 06 F6 | 	mov	arg03, #0
116e4     CC 41 B1 FD | 	call	#__system___basic_print_string
116e8     00 74 06 F6 | 	mov	arg01, #0
116ec     0A 76 06 F6 | 	mov	arg02, #10
116f0     00 78 06 F6 | 	mov	arg03, #0
116f4     70 41 B1 FD | 	call	#__system___basic_print_char
116f8     00 74 06 F6 | 	mov	arg01, #0
116fc     48 74 B1 FD | 	call	#__system___getiolock_1205
11700     1A 01 68 FC | 	wrlong	#0, result1
11704     00 9E 06 F6 | 	mov	local10, #0
11708     00 74 06 F6 | 	mov	arg01, #0
1170c     38 74 B1 FD | 	call	#__system___getiolock_1205
11710     1A 75 02 F6 | 	mov	arg01, result1
11714     08 3C B1 FD | 	call	#__system___lockmem
11718     4C 01 00 FF 
1171c     09 77 06 F6 | 	mov	arg02, ##@LR__2038
11720     00 74 06 F6 | 	mov	arg01, #0
11724     00 78 06 F6 | 	mov	arg03, #0
11728     88 41 B1 FD | 	call	#__system___basic_print_string
1172c     00 74 06 F6 | 	mov	arg01, #0
11730     0A 76 06 F6 | 	mov	arg02, #10
11734     00 78 06 F6 | 	mov	arg03, #0
11738     2C 41 B1 FD | 	call	#__system___basic_print_char
1173c     00 74 06 F6 | 	mov	arg01, #0
11740     04 74 B1 FD | 	call	#__system___getiolock_1205
11744     1A 01 68 FC | 	wrlong	#0, result1
11748                 | '       break;
11748     A0 00 90 FD | 	jmp	#LR__0455
1174c                 | LR__0452
1174c     00 74 06 F6 | 	mov	arg01, #0
11750     F4 73 B1 FD | 	call	#__system___getiolock_1205
11754     1A 75 02 F6 | 	mov	arg01, result1
11758     C4 3B B1 FD | 	call	#__system___lockmem
1175c     4C 01 00 FF 
11760     28 77 06 F6 | 	mov	arg02, ##@LR__2039
11764     00 74 06 F6 | 	mov	arg01, #0
11768     00 78 06 F6 | 	mov	arg03, #0
1176c     44 41 B1 FD | 	call	#__system___basic_print_string
11770     00 74 06 F6 | 	mov	arg01, #0
11774     0A 76 06 F6 | 	mov	arg02, #10
11778     00 78 06 F6 | 	mov	arg03, #0
1177c     E8 40 B1 FD | 	call	#__system___basic_print_char
11780     00 74 06 F6 | 	mov	arg01, #0
11784     C0 73 B1 FD | 	call	#__system___getiolock_1205
11788     1A 01 68 FC | 	wrlong	#0, result1
1178c     00 74 06 F6 | 	mov	arg01, #0
11790     B4 73 B1 FD | 	call	#__system___getiolock_1205
11794     1A 75 02 F6 | 	mov	arg01, result1
11798     84 3B B1 FD | 	call	#__system___lockmem
1179c     4C 01 00 FF 
117a0     41 77 06 F6 | 	mov	arg02, ##@LR__2040
117a4     00 74 06 F6 | 	mov	arg01, #0
117a8     00 78 06 F6 | 	mov	arg03, #0
117ac     04 41 B1 FD | 	call	#__system___basic_print_string
117b0     00 74 06 F6 | 	mov	arg01, #0
117b4     0A 76 06 F6 | 	mov	arg02, #10
117b8     00 78 06 F6 | 	mov	arg03, #0
117bc     A8 40 B1 FD | 	call	#__system___basic_print_char
117c0     00 74 06 F6 | 	mov	arg01, #0
117c4     80 73 B1 FD | 	call	#__system___getiolock_1205
117c8     1A 01 68 FC | 	wrlong	#0, result1
117cc                 | '       break;
117cc     1C 00 90 FD | 	jmp	#LR__0455
117d0                 | LR__0453
117d0     5B 00 00 FF 
117d4     68 D7 05 F1 | 	add	ptr__dat__, ##46952
117d8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
117dc     5B 00 00 FF 
117e0     68 D7 85 F1 | 	sub	ptr__dat__, ##46952
117e4     84 EF BF FD | 	call	#_test_profile_page_run
117e8                 | '     {
117e8                 | '       test_profile_page_run(&testProfilePage);
117e8                 | '       break;
117e8     00 00 90 FD | 	jmp	#LR__0455
117ec                 | LR__0454
117ec                 | '       break;
117ec                 | LR__0455
117ec     00 74 06 F6 | 	mov	arg01, #0
117f0     54 73 B1 FD | 	call	#__system___getiolock_1205
117f4     1A 75 02 F6 | 	mov	arg01, result1
117f8     24 3B B1 FD | 	call	#__system___lockmem
117fc     4C 01 00 FF 
11800     57 77 06 F6 | 	mov	arg02, ##@LR__2041
11804     00 74 06 F6 | 	mov	arg01, #0
11808     00 78 06 F6 | 	mov	arg03, #0
1180c     A4 40 B1 FD | 	call	#__system___basic_print_string
11810     1A 91 02 F6 | 	mov	local03, result1
11814     00 74 06 F6 | 	mov	arg01, #0
11818     0A 76 06 F6 | 	mov	arg02, #10
1181c     00 78 06 F6 | 	mov	arg03, #0
11820     44 40 B1 FD | 	call	#__system___basic_print_char
11824     01 94 06 F6 | 	mov	local05, #1
11828     00 74 06 F6 | 	mov	arg01, #0
1182c     18 73 B1 FD | 	call	#__system___getiolock_1205
11830     1A 01 68 FC | 	wrlong	#0, result1
11834     00 96 06 F6 | 	mov	local06, #0
11838     A1 00 00 FF 
1183c     CC D7 05 F1 | 	add	ptr__dat__, ##82892
11840     EB 8E 02 F6 | 	mov	local02, ptr__dat__
11844     47 75 02 F6 | 	mov	arg01, local02
11848     A1 00 00 FF 
1184c     CC D7 85 F1 | 	sub	ptr__dat__, ##82892
11850     E0 93 BF FD | 	call	#_navigation_page_run
11854     1A 8D 02 F6 | 	mov	local01, result1
11858     46 9B 02 F6 | 	mov	local08, local01
1185c     80 FC 9F FD | 	jmp	#LR__0446
11860                 | LR__0456
11860     A8 F0 03 F6 | 	mov	ptra, fp
11864     B3 00 A0 FD | 	call	#popregs_
11868                 | _mad_begin_ret
11868     2D 00 64 FD | 	ret
1186c                 | 
1186c                 | _atof
1186c     06 4C 05 F6 | 	mov	COUNT_, #6
11870     A9 00 A0 FD | 	call	#pushregs_
11874     3A 8D 02 F6 | 	mov	local01, arg01
11878     00 8E 06 F6 | 	mov	local02, #0
1187c     00 C0 1F FF 
11880     00 90 06 F6 | 	mov	local03, ##1065353216
11884                 | ' 
11884                 | '     while (isspace(*str))
11884     56 01 00 FF 
11888     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
1188c     8C E7 9E FE | 	loc	pa,	#(@LR__0458-@LR__0457)
11890     8C 00 A0 FD | 	call	#FCACHE_LOAD_
11894                 | LR__0457
11894     46 75 C2 FA | 	rdbyte	arg01, local01
11898                 | ' {
11898                 | '   return  (__ctype_get(c) & 0x10 ) ;
11898     80 74 36 F3 | 	fle	arg01, #128 wc
1189c                 | '     return __ctype[c];
1189c     EB 74 02 F1 | 	add	arg01, ptr__dat__
118a0     3A 35 C2 FA | 	rdbyte	result1, arg01
118a4     10 34 CE F7 | 	test	result1, #16 wz
118a8     01 8C 06 51 |  if_ne	add	local01, #1
118ac     E4 FF 9F 5D |  if_ne	jmp	#LR__0457
118b0                 | LR__0458
118b0     56 01 00 FF 
118b4     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
118b8     46 93 C2 FA | 	rdbyte	local04, local01
118bc     2D 92 0E F2 | 	cmp	local04, #45 wz
118c0     01 94 C6 F6 | 	negz	local05, #1
118c4     49 97 02 F6 | 	mov	local06, local04
118c8     2D 96 0E F2 | 	cmp	local06, #45 wz
118cc     46 93 C2 5A |  if_ne	rdbyte	local04, local01
118d0     2B 92 0E 52 |  if_ne	cmp	local04, #43 wz
118d4     01 8C 06 A1 |  if_e	add	local01, #1
118d8                 | '         str++;
118d8                 | ' 
118d8                 | '     while (isdigit(*str))
118d8                 | LR__0459
118d8     46 75 C2 FA | 	rdbyte	arg01, local01
118dc                 | ' {
118dc                 | '   return  (__ctype_get(c) & 0x02 ) ;
118dc     80 74 36 F3 | 	fle	arg01, #128 wc
118e0                 | '     return __ctype[c];
118e0     56 01 00 FF 
118e4     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
118e8     EB 74 02 F1 | 	add	arg01, ptr__dat__
118ec     3A 35 C2 FA | 	rdbyte	result1, arg01
118f0     56 01 00 FF 
118f4     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
118f8     02 34 CE F7 | 	test	result1, #2 wz
118fc     38 00 90 AD |  if_e	jmp	#LR__0460
11900     00 90 20 FF 
11904     00 74 06 F6 | 	mov	arg01, ##1092616192
11908     47 77 02 F6 | 	mov	arg02, local02
1190c     90 57 B1 FD | 	call	#__system___float_mul
11910     1A 97 02 F6 | 	mov	local06, result1
11914     46 75 C2 FA | 	rdbyte	arg01, local01
11918     30 74 86 F1 | 	sub	arg01, #48
1191c     4C 54 B1 FD | 	call	#__system___float_fromint
11920     1A 77 02 F6 | 	mov	arg02, result1
11924     4B 75 02 F6 | 	mov	arg01, local06
11928     70 54 B1 FD | 	call	#__system___float_add
1192c     1A 8F 02 F6 | 	mov	local02, result1
11930     01 8C 06 F1 | 	add	local01, #1
11934     A0 FF 9F FD | 	jmp	#LR__0459
11938                 | LR__0460
11938     46 97 C2 FA | 	rdbyte	local06, local01
1193c     2E 96 0E F2 | 	cmp	local06, #46 wz
11940     01 8C 06 A1 |  if_e	add	local01, #1
11944                 | '         str++;
11944                 | ' 
11944                 | '     while (isdigit(*str))
11944                 | LR__0461
11944     46 75 C2 FA | 	rdbyte	arg01, local01
11948                 | ' {
11948                 | '   return  (__ctype_get(c) & 0x02 ) ;
11948     80 74 36 F3 | 	fle	arg01, #128 wc
1194c                 | '     return __ctype[c];
1194c     56 01 00 FF 
11950     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
11954     EB 74 02 F1 | 	add	arg01, ptr__dat__
11958     3A 35 C2 FA | 	rdbyte	result1, arg01
1195c     56 01 00 FF 
11960     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
11964     02 34 CE F7 | 	test	result1, #2 wz
11968     4C 00 90 AD |  if_e	jmp	#LR__0462
1196c     00 90 20 FF 
11970     00 74 06 F6 | 	mov	arg01, ##1092616192
11974     47 77 02 F6 | 	mov	arg02, local02
11978     24 57 B1 FD | 	call	#__system___float_mul
1197c     1A 97 02 F6 | 	mov	local06, result1
11980     46 75 C2 FA | 	rdbyte	arg01, local01
11984     30 74 86 F1 | 	sub	arg01, #48
11988     E0 53 B1 FD | 	call	#__system___float_fromint
1198c     1A 77 02 F6 | 	mov	arg02, result1
11990     4B 75 02 F6 | 	mov	arg01, local06
11994     04 54 B1 FD | 	call	#__system___float_add
11998     1A 8F 02 F6 | 	mov	local02, result1
1199c     48 75 02 F6 | 	mov	arg01, local03
119a0     00 90 20 FF 
119a4     00 76 06 F6 | 	mov	arg02, ##1092616192
119a8     F4 56 B1 FD | 	call	#__system___float_mul
119ac     1A 91 02 F6 | 	mov	local03, result1
119b0     01 8C 06 F1 | 	add	local01, #1
119b4     8C FF 9F FD | 	jmp	#LR__0461
119b8                 | LR__0462
119b8                 | '     {
119b8                 | '         number = 10.0 * number + (*str - '0');
119b8                 | '         power *= 10.0;
119b8                 | '         str++;
119b8                 | '     }
119b8                 | ' 
119b8                 | '     return sign * number / power;
119b8     4A 75 02 F6 | 	mov	arg01, local05
119bc     AC 53 B1 FD | 	call	#__system___float_fromint
119c0     1A 75 02 F6 | 	mov	arg01, result1
119c4     47 77 02 F6 | 	mov	arg02, local02
119c8     D4 56 B1 FD | 	call	#__system___float_mul
119cc     1A 75 02 F6 | 	mov	arg01, result1
119d0     48 77 02 F6 | 	mov	arg02, local03
119d4     E8 58 B1 FD | 	call	#__system___float_div
119d8     A8 F0 03 F6 | 	mov	ptra, fp
119dc     B3 00 A0 FD | 	call	#popregs_
119e0                 | _atof_ret
119e0     2D 00 64 FD | 	ret
119e4                 | 
119e4                 | _main
119e4     01 4C 05 F6 | 	mov	COUNT_, #1
119e8     A9 00 A0 FD | 	call	#pushregs_
119ec     4C 01 00 FF 
119f0     6A 8D 06 F6 | 	mov	local01, ##@LR__2042
119f4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
119f4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
119f4                 | ' 	const BYTE *wbuff = (const BYTE*)buff;
119f4     3D 74 06 F6 | 	mov	arg01, #61
119f8     3C 76 06 F6 | 	mov	arg02, #60
119fc     3B 78 06 F6 | 	mov	arg03, #59
11a00     3A 7A 06 F6 | 	mov	arg04, #58
11a04     C0 F6 BE FD | 	call	#__vfs_open_sdcardx
11a08     1A 77 02 F6 | 	mov	arg02, result1
11a0c     46 75 02 F6 | 	mov	arg01, local01
11a10     D0 63 B0 FD | 	call	#__mount
11a14     1C F7 BF FD | 	call	#_mad_begin
11a18                 | ' {
11a18                 | ' 
11a18                 | ' 
11a18                 | '     mount("/sd", _vfs_open_sdcard());
11a18                 | ' 
11a18                 | '     mad_begin();
11a18                 | '     while (1)
11a18                 | LR__0463
11a18     FC FF 9F FD | 	jmp	#LR__0463
11a1c                 | '         ;
11a1c                 | '     return 0;
11a1c     A8 F0 03 F6 | 	mov	ptra, fp
11a20     B3 00 A0 FD | 	call	#popregs_
11a24                 | _main_ret
11a24     2D 00 64 FD | 	ret
11a28                 | 
11a28                 | _load_images_0337
11a28     20 00 00 FF 
11a2c     94 D6 05 F1 | 	add	ptr__dat__, ##16532
11a30     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11a34     20 00 00 FF 
11a38     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
11a3c     4C 01 00 FF 
11a40     6E 77 06 F6 | 	mov	arg02, ##@LR__2043
11a44     50 38 B1 FD | 	call	#__system____builtin_strcpy
11a48     20 00 00 FF 
11a4c     A8 D6 05 F1 | 	add	ptr__dat__, ##16552
11a50     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11a54     0C D6 05 F1 | 	add	ptr__dat__, #12
11a58     02 00 80 FF 
11a5c     EB 04 68 FC | 	wrlong	##1026, ptr__dat__
11a60     04 D6 05 F1 | 	add	ptr__dat__, #4
11a64     EB 38 6A FC | 	wrlong	#284, ptr__dat__
11a68     0C D6 85 F1 | 	sub	ptr__dat__, #12
11a6c     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11a70     01 00 00 FF 
11a74     58 74 06 F6 | 	mov	arg01, ##600
11a78     0C D6 05 F1 | 	add	ptr__dat__, #12
11a7c     EB 34 02 FB | 	rdlong	result1, ptr__dat__
11a80     1A 75 82 F1 | 	sub	arg01, result1
11a84     08 D6 85 F1 | 	sub	ptr__dat__, #8
11a88     EB 74 62 FC | 	wrlong	arg01, ptr__dat__
11a8c     0C D6 05 F1 | 	add	ptr__dat__, #12
11a90     EB 00 58 FC | 	wrword	#0, ptr__dat__
11a94     02 D6 05 F1 | 	add	ptr__dat__, #2
11a98     EB 00 58 FC | 	wrword	#0, ptr__dat__
11a9c     02 D6 05 F1 | 	add	ptr__dat__, #2
11aa0     EB 00 58 FC | 	wrword	#0, ptr__dat__
11aa4     20 00 00 FF 
11aa8     C0 D6 85 F1 | 	sub	ptr__dat__, ##16576
11aac     00 74 06 F6 | 	mov	arg01, #0
11ab0     94 70 B1 FD | 	call	#__system___getiolock_1205
11ab4     1A 75 02 F6 | 	mov	arg01, result1
11ab8     64 38 B1 FD | 	call	#__system___lockmem
11abc     4C 01 00 FF 
11ac0     7B 77 06 F6 | 	mov	arg02, ##@LR__2044
11ac4     00 74 06 F6 | 	mov	arg01, #0
11ac8     00 78 06 F6 | 	mov	arg03, #0
11acc     E4 3D B1 FD | 	call	#__system___basic_print_string
11ad0     20 00 00 FF 
11ad4     94 D6 05 F1 | 	add	ptr__dat__, ##16532
11ad8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
11adc     20 00 00 FF 
11ae0     94 D6 85 F1 | 	sub	ptr__dat__, ##16532
11ae4     00 74 06 F6 | 	mov	arg01, #0
11ae8     00 78 06 F6 | 	mov	arg03, #0
11aec     C4 3D B1 FD | 	call	#__system___basic_print_string
11af0     00 74 06 F6 | 	mov	arg01, #0
11af4     0A 76 06 F6 | 	mov	arg02, #10
11af8     00 78 06 F6 | 	mov	arg03, #0
11afc     68 3D B1 FD | 	call	#__system___basic_print_char
11b00     00 74 06 F6 | 	mov	arg01, #0
11b04     40 70 B1 FD | 	call	#__system___getiolock_1205
11b08     1A 01 68 FC | 	wrlong	#0, result1
11b0c     20 00 00 FF 
11b10     F4 D6 05 F1 | 	add	ptr__dat__, ##16628
11b14     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11b18     20 00 00 FF 
11b1c     F4 D6 85 F1 | 	sub	ptr__dat__, ##16628
11b20     4C 01 00 FF 
11b24     81 77 06 F6 | 	mov	arg02, ##@LR__2045
11b28     6C 37 B1 FD | 	call	#__system____builtin_strcpy
11b2c     20 00 00 FF 
11b30     08 D7 05 F1 | 	add	ptr__dat__, ##16648
11b34     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11b38     0C D6 05 F1 | 	add	ptr__dat__, #12
11b3c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11b40     04 D6 05 F1 | 	add	ptr__dat__, #4
11b44     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11b48     0C D6 85 F1 | 	sub	ptr__dat__, #12
11b4c     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11b50     04 D6 05 F1 | 	add	ptr__dat__, #4
11b54     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11b58     0C D6 05 F1 | 	add	ptr__dat__, #12
11b5c     7C 00 80 FF 
11b60     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11b64     02 D6 05 F1 | 	add	ptr__dat__, #2
11b68     EB 00 58 FC | 	wrword	#0, ptr__dat__
11b6c     02 D6 05 F1 | 	add	ptr__dat__, #2
11b70     63 00 80 FF 
11b74     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11b78     34 D6 05 F1 | 	add	ptr__dat__, #52
11b7c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11b80     20 00 00 FF 
11b84     54 D7 85 F1 | 	sub	ptr__dat__, ##16724
11b88     4C 01 00 FF 
11b8c     8C 77 06 F6 | 	mov	arg02, ##@LR__2046
11b90     04 37 B1 FD | 	call	#__system____builtin_strcpy
11b94     20 00 00 FF 
11b98     68 D7 05 F1 | 	add	ptr__dat__, ##16744
11b9c     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11ba0     0C D6 05 F1 | 	add	ptr__dat__, #12
11ba4     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11ba8     04 D6 05 F1 | 	add	ptr__dat__, #4
11bac     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11bb0     0C D6 85 F1 | 	sub	ptr__dat__, #12
11bb4     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11bb8     04 D6 05 F1 | 	add	ptr__dat__, #4
11bbc     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11bc0     0C D6 05 F1 | 	add	ptr__dat__, #12
11bc4     7C 00 80 FF 
11bc8     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11bcc     02 D6 05 F1 | 	add	ptr__dat__, #2
11bd0     EB 00 58 FC | 	wrword	#0, ptr__dat__
11bd4     02 D6 05 F1 | 	add	ptr__dat__, #2
11bd8     63 00 80 FF 
11bdc     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11be0     5C D6 85 F1 | 	sub	ptr__dat__, #92
11be4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11be8     20 00 00 FF 
11bec     24 D7 85 F1 | 	sub	ptr__dat__, ##16676
11bf0     4C 01 00 FF 
11bf4     95 77 06 F6 | 	mov	arg02, ##@LR__2047
11bf8     9C 36 B1 FD | 	call	#__system____builtin_strcpy
11bfc     20 00 00 FF 
11c00     38 D7 05 F1 | 	add	ptr__dat__, ##16696
11c04     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11c08     0C D6 05 F1 | 	add	ptr__dat__, #12
11c0c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11c10     04 D6 05 F1 | 	add	ptr__dat__, #4
11c14     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11c18     0C D6 85 F1 | 	sub	ptr__dat__, #12
11c1c     EB 20 6B FC | 	wrlong	#400, ptr__dat__
11c20     04 D6 05 F1 | 	add	ptr__dat__, #4
11c24     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11c28     0C D6 05 F1 | 	add	ptr__dat__, #12
11c2c     7C 00 80 FF 
11c30     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11c34     02 D6 05 F1 | 	add	ptr__dat__, #2
11c38     EB 00 58 FC | 	wrword	#0, ptr__dat__
11c3c     02 D6 05 F1 | 	add	ptr__dat__, #2
11c40     63 00 80 FF 
11c44     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11c48     34 D6 05 F1 | 	add	ptr__dat__, #52
11c4c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11c50     20 00 00 FF 
11c54     84 D7 85 F1 | 	sub	ptr__dat__, ##16772
11c58     4C 01 00 FF 
11c5c     A0 77 06 F6 | 	mov	arg02, ##@LR__2048
11c60     34 36 B1 FD | 	call	#__system____builtin_strcpy
11c64     20 00 00 FF 
11c68     98 D7 05 F1 | 	add	ptr__dat__, ##16792
11c6c     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11c70     0C D6 05 F1 | 	add	ptr__dat__, #12
11c74     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11c78     04 D6 05 F1 | 	add	ptr__dat__, #4
11c7c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11c80     0C D6 85 F1 | 	sub	ptr__dat__, #12
11c84     01 00 80 FF 
11c88     EB B0 68 FC | 	wrlong	##600, ptr__dat__
11c8c     04 D6 05 F1 | 	add	ptr__dat__, #4
11c90     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11c94     0C D6 05 F1 | 	add	ptr__dat__, #12
11c98     7C 00 80 FF 
11c9c     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11ca0     02 D6 05 F1 | 	add	ptr__dat__, #2
11ca4     EB 00 58 FC | 	wrword	#0, ptr__dat__
11ca8     02 D6 05 F1 | 	add	ptr__dat__, #2
11cac     63 00 80 FF 
11cb0     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11cb4     04 D6 05 F1 | 	add	ptr__dat__, #4
11cb8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11cbc     20 00 00 FF 
11cc0     B4 D7 85 F1 | 	sub	ptr__dat__, ##16820
11cc4     4C 01 00 FF 
11cc8     AA 77 06 F6 | 	mov	arg02, ##@LR__2049
11ccc     C8 35 B1 FD | 	call	#__system____builtin_strcpy
11cd0     20 00 00 FF 
11cd4     C8 D7 05 F1 | 	add	ptr__dat__, ##16840
11cd8     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11cdc     0C D6 05 F1 | 	add	ptr__dat__, #12
11ce0     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11ce4     04 D6 05 F1 | 	add	ptr__dat__, #4
11ce8     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11cec     0C D6 85 F1 | 	sub	ptr__dat__, #12
11cf0     01 00 80 FF 
11cf4     EB 40 6A FC | 	wrlong	##800, ptr__dat__
11cf8     04 D6 05 F1 | 	add	ptr__dat__, #4
11cfc     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11d00     0C D6 05 F1 | 	add	ptr__dat__, #12
11d04     7C 00 80 FF 
11d08     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11d0c     02 D6 05 F1 | 	add	ptr__dat__, #2
11d10     EB 00 58 FC | 	wrword	#0, ptr__dat__
11d14     02 D6 05 F1 | 	add	ptr__dat__, #2
11d18     63 00 80 FF 
11d1c     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11d20     1C D7 85 F1 | 	sub	ptr__dat__, #284
11d24     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11d28     20 00 00 FF 
11d2c     C4 D6 85 F1 | 	sub	ptr__dat__, ##16580
11d30     4C 01 00 FF 
11d34     B4 77 06 F6 | 	mov	arg02, ##@LR__2050
11d38     5C 35 B1 FD | 	call	#__system____builtin_strcpy
11d3c     20 00 00 FF 
11d40     D8 D6 05 F1 | 	add	ptr__dat__, ##16600
11d44     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11d48     0C D6 05 F1 | 	add	ptr__dat__, #12
11d4c     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11d50     04 D6 05 F1 | 	add	ptr__dat__, #4
11d54     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11d58     0C D6 85 F1 | 	sub	ptr__dat__, #12
11d5c     EB 00 68 FC | 	wrlong	#0, ptr__dat__
11d60     04 D6 05 F1 | 	add	ptr__dat__, #4
11d64     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11d68     0C D6 05 F1 | 	add	ptr__dat__, #12
11d6c     7C 00 80 FF 
11d70     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11d74     02 D6 05 F1 | 	add	ptr__dat__, #2
11d78     EB 00 58 FC | 	wrword	#0, ptr__dat__
11d7c     02 D6 05 F1 | 	add	ptr__dat__, #2
11d80     63 00 80 FF 
11d84     EB 30 58 FC | 	wrword	##50712, ptr__dat__
11d88     F4 D6 05 F1 | 	add	ptr__dat__, #244
11d8c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11d90     20 00 00 FF 
11d94     E4 D7 85 F1 | 	sub	ptr__dat__, ##16868
11d98     4C 01 00 FF 
11d9c     BC 77 06 F6 | 	mov	arg02, ##@LR__2051
11da0     F4 34 B1 FD | 	call	#__system____builtin_strcpy
11da4     20 00 00 FF 
11da8     F8 D7 05 F1 | 	add	ptr__dat__, ##16888
11dac     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11db0     0C D6 05 F1 | 	add	ptr__dat__, #12
11db4     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11db8     04 D6 05 F1 | 	add	ptr__dat__, #4
11dbc     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11dc0     0C D6 85 F1 | 	sub	ptr__dat__, #12
11dc4     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11dc8     04 D6 05 F1 | 	add	ptr__dat__, #4
11dcc     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11dd0     0C D6 05 F1 | 	add	ptr__dat__, #12
11dd4     7C 00 80 FF 
11dd8     EB 00 58 FC | 	wrword	##63488, ptr__dat__
11ddc     02 D6 05 F1 | 	add	ptr__dat__, #2
11de0     EB 00 58 FC | 	wrword	#0, ptr__dat__
11de4     02 D6 05 F1 | 	add	ptr__dat__, #2
11de8     EB 00 58 FC | 	wrword	#0, ptr__dat__
11dec     04 D6 05 F1 | 	add	ptr__dat__, #4
11df0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11df4     21 00 00 FF 
11df8     14 D6 85 F1 | 	sub	ptr__dat__, ##16916
11dfc     4C 01 00 FF 
11e00     C6 77 06 F6 | 	mov	arg02, ##@LR__2052
11e04     90 34 B1 FD | 	call	#__system____builtin_strcpy
11e08     21 00 00 FF 
11e0c     28 D6 05 F1 | 	add	ptr__dat__, ##16936
11e10     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11e14     0C D6 05 F1 | 	add	ptr__dat__, #12
11e18     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11e1c     04 D6 05 F1 | 	add	ptr__dat__, #4
11e20     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11e24     0C D6 85 F1 | 	sub	ptr__dat__, #12
11e28     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11e2c     04 D6 05 F1 | 	add	ptr__dat__, #4
11e30     EB C2 69 FC | 	wrlong	#225, ptr__dat__
11e34     0C D6 05 F1 | 	add	ptr__dat__, #12
11e38     03 00 80 FF 
11e3c     EB C0 5B FC | 	wrword	##2016, ptr__dat__
11e40     02 D6 05 F1 | 	add	ptr__dat__, #2
11e44     EB 00 58 FC | 	wrword	#0, ptr__dat__
11e48     02 D6 05 F1 | 	add	ptr__dat__, #2
11e4c     EB 00 58 FC | 	wrword	#0, ptr__dat__
11e50     04 D6 05 F1 | 	add	ptr__dat__, #4
11e54     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11e58     21 00 00 FF 
11e5c     44 D6 85 F1 | 	sub	ptr__dat__, ##16964
11e60     4C 01 00 FF 
11e64     CD 77 06 F6 | 	mov	arg02, ##@LR__2053
11e68     2C 34 B1 FD | 	call	#__system____builtin_strcpy
11e6c     21 00 00 FF 
11e70     58 D6 05 F1 | 	add	ptr__dat__, ##16984
11e74     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11e78     0C D6 05 F1 | 	add	ptr__dat__, #12
11e7c     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11e80     04 D6 05 F1 | 	add	ptr__dat__, #4
11e84     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11e88     0C D6 85 F1 | 	sub	ptr__dat__, #12
11e8c     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11e90     04 D6 05 F1 | 	add	ptr__dat__, #4
11e94     EB F4 69 FC | 	wrlong	#250, ptr__dat__
11e98     0C D6 05 F1 | 	add	ptr__dat__, #12
11e9c     7F 00 80 FF 
11ea0     EB FE 5B FC | 	wrword	##65535, ptr__dat__
11ea4     02 D6 05 F1 | 	add	ptr__dat__, #2
11ea8     EB 00 58 FC | 	wrword	#0, ptr__dat__
11eac     02 D6 05 F1 | 	add	ptr__dat__, #2
11eb0     EB 00 58 FC | 	wrword	#0, ptr__dat__
11eb4     04 D6 05 F1 | 	add	ptr__dat__, #4
11eb8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11ebc     21 00 00 FF 
11ec0     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
11ec4     4C 01 00 FF 
11ec8     D5 77 06 F6 | 	mov	arg02, ##@LR__2054
11ecc     C8 33 B1 FD | 	call	#__system____builtin_strcpy
11ed0     21 00 00 FF 
11ed4     88 D6 05 F1 | 	add	ptr__dat__, ##17032
11ed8     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11edc     0C D6 05 F1 | 	add	ptr__dat__, #12
11ee0     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11ee4     04 D6 05 F1 | 	add	ptr__dat__, #4
11ee8     EB 32 68 FC | 	wrlong	#25, ptr__dat__
11eec     0C D6 85 F1 | 	sub	ptr__dat__, #12
11ef0     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11ef4     04 D6 05 F1 | 	add	ptr__dat__, #4
11ef8     EB 26 6A FC | 	wrlong	#275, ptr__dat__
11efc     0C D6 05 F1 | 	add	ptr__dat__, #12
11f00     7F 00 80 FF 
11f04     EB FE 5B FC | 	wrword	##65535, ptr__dat__
11f08     02 D6 05 F1 | 	add	ptr__dat__, #2
11f0c     EB 00 58 FC | 	wrword	#0, ptr__dat__
11f10     02 D6 05 F1 | 	add	ptr__dat__, #2
11f14     EB 00 58 FC | 	wrword	#0, ptr__dat__
11f18     04 D6 05 F1 | 	add	ptr__dat__, #4
11f1c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11f20     21 00 00 FF 
11f24     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
11f28     4C 01 00 FF 
11f2c     E1 77 06 F6 | 	mov	arg02, ##@LR__2055
11f30     64 33 B1 FD | 	call	#__system____builtin_strcpy
11f34     21 00 00 FF 
11f38     B8 D6 05 F1 | 	add	ptr__dat__, ##17080
11f3c     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11f40     0C D6 05 F1 | 	add	ptr__dat__, #12
11f44     EB AE 68 FC | 	wrlong	#87, ptr__dat__
11f48     04 D6 05 F1 | 	add	ptr__dat__, #4
11f4c     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11f50     0C D6 85 F1 | 	sub	ptr__dat__, #12
11f54     EB 2C 69 FC | 	wrlong	#150, ptr__dat__
11f58     04 D6 05 F1 | 	add	ptr__dat__, #4
11f5c     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11f60     0C D6 05 F1 | 	add	ptr__dat__, #12
11f64     7F 00 80 FF 
11f68     EB FE 5B FC | 	wrword	##65535, ptr__dat__
11f6c     02 D6 05 F1 | 	add	ptr__dat__, #2
11f70     EB 00 58 FC | 	wrword	#0, ptr__dat__
11f74     02 D6 05 F1 | 	add	ptr__dat__, #2
11f78     EB 00 58 FC | 	wrword	#0, ptr__dat__
11f7c     04 D6 05 F1 | 	add	ptr__dat__, #4
11f80     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11f84     21 00 00 FF 
11f88     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
11f8c     4C 01 00 FF 
11f90     EA 77 06 F6 | 	mov	arg02, ##@LR__2056
11f94     00 33 B1 FD | 	call	#__system____builtin_strcpy
11f98     21 00 00 FF 
11f9c     E8 D6 05 F1 | 	add	ptr__dat__, ##17128
11fa0     EB 04 68 FC | 	wrlong	#2, ptr__dat__
11fa4     0C D6 05 F1 | 	add	ptr__dat__, #12
11fa8     EB C8 68 FC | 	wrlong	#100, ptr__dat__
11fac     04 D6 05 F1 | 	add	ptr__dat__, #4
11fb0     EB A0 68 FC | 	wrlong	#80, ptr__dat__
11fb4     0C D6 85 F1 | 	sub	ptr__dat__, #12
11fb8     EB F4 69 FC | 	wrlong	#250, ptr__dat__
11fbc     04 D6 05 F1 | 	add	ptr__dat__, #4
11fc0     EB 90 69 FC | 	wrlong	#200, ptr__dat__
11fc4     0C D6 05 F1 | 	add	ptr__dat__, #12
11fc8     7F 00 80 FF 
11fcc     EB FE 5B FC | 	wrword	##65535, ptr__dat__
11fd0     02 D6 05 F1 | 	add	ptr__dat__, #2
11fd4     EB 00 58 FC | 	wrword	#0, ptr__dat__
11fd8     02 D6 05 F1 | 	add	ptr__dat__, #2
11fdc     EB 00 58 FC | 	wrword	#0, ptr__dat__
11fe0     01 00 00 FF 
11fe4     80 D7 85 F1 | 	sub	ptr__dat__, ##896
11fe8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
11fec     1F 00 00 FF 
11ff0     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
11ff4     4C 01 00 FF 
11ff8     F5 77 06 F6 | 	mov	arg02, ##@LR__2057
11ffc     01 78 06 F6 | 	mov	arg03, #1
12000     20 8D BF FD | 	call	#_loading_overlay_display
12004     1F 00 00 FF 
12008     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1200c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12010     44 D7 05 F1 | 	add	ptr__dat__, #324
12014     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12018     20 00 00 FF 
1201c     C4 D6 85 F1 | 	sub	ptr__dat__, ##16580
12020     64 0F BF FD | 	call	#_display_load_image
12024     1F 00 00 FF 
12028     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1202c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12030     1F 00 00 FF 
12034     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12038     4D 01 00 FF 
1203c     08 76 06 F6 | 	mov	arg02, ##@LR__2058
12040     01 78 06 F6 | 	mov	arg03, #1
12044     DC 8C BF FD | 	call	#_loading_overlay_display
12048     1F 00 00 FF 
1204c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12050     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12054     74 D7 05 F1 | 	add	ptr__dat__, #372
12058     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1205c     20 00 00 FF 
12060     F4 D6 85 F1 | 	sub	ptr__dat__, ##16628
12064     20 0F BF FD | 	call	#_display_load_image
12068     1F 00 00 FF 
1206c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12070     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12074     1F 00 00 FF 
12078     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1207c     4D 01 00 FF 
12080     23 76 06 F6 | 	mov	arg02, ##@LR__2059
12084     01 78 06 F6 | 	mov	arg03, #1
12088     98 8C BF FD | 	call	#_loading_overlay_display
1208c     1F 00 00 FF 
12090     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12094     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12098     D4 D7 05 F1 | 	add	ptr__dat__, #468
1209c     EB 76 02 F6 | 	mov	arg02, ptr__dat__
120a0     20 00 00 FF 
120a4     54 D7 85 F1 | 	sub	ptr__dat__, ##16724
120a8     DC 0E BF FD | 	call	#_display_load_image
120ac     1F 00 00 FF 
120b0     80 D7 05 F1 | 	add	ptr__dat__, ##16256
120b4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
120b8     1F 00 00 FF 
120bc     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
120c0     4D 01 00 FF 
120c4     41 76 06 F6 | 	mov	arg02, ##@LR__2060
120c8     01 78 06 F6 | 	mov	arg03, #1
120cc     54 8C BF FD | 	call	#_loading_overlay_display
120d0     1F 00 00 FF 
120d4     80 D7 05 F1 | 	add	ptr__dat__, ##16256
120d8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
120dc     A4 D7 05 F1 | 	add	ptr__dat__, #420
120e0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
120e4     20 00 00 FF 
120e8     24 D7 85 F1 | 	sub	ptr__dat__, ##16676
120ec     98 0E BF FD | 	call	#_display_load_image
120f0     1F 00 00 FF 
120f4     80 D7 05 F1 | 	add	ptr__dat__, ##16256
120f8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
120fc     1F 00 00 FF 
12100     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12104     4D 01 00 FF 
12108     5C 76 06 F6 | 	mov	arg02, ##@LR__2061
1210c     01 78 06 F6 | 	mov	arg03, #1
12110     10 8C BF FD | 	call	#_loading_overlay_display
12114     1F 00 00 FF 
12118     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1211c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12120     01 00 00 FF 
12124     04 D6 05 F1 | 	add	ptr__dat__, ##516
12128     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1212c     20 00 00 FF 
12130     84 D7 85 F1 | 	sub	ptr__dat__, ##16772
12134     50 0E BF FD | 	call	#_display_load_image
12138     1F 00 00 FF 
1213c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12140     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12144     1F 00 00 FF 
12148     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1214c     4D 01 00 FF 
12150     7A 76 06 F6 | 	mov	arg02, ##@LR__2062
12154     01 78 06 F6 | 	mov	arg03, #1
12158     C8 8B BF FD | 	call	#_loading_overlay_display
1215c     1F 00 00 FF 
12160     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12164     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12168     01 00 00 FF 
1216c     34 D6 05 F1 | 	add	ptr__dat__, ##564
12170     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12174     20 00 00 FF 
12178     B4 D7 85 F1 | 	sub	ptr__dat__, ##16820
1217c     08 0E BF FD | 	call	#_display_load_image
12180     1F 00 00 FF 
12184     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12188     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1218c     1F 00 00 FF 
12190     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12194     4D 01 00 FF 
12198     94 76 06 F6 | 	mov	arg02, ##@LR__2063
1219c     01 78 06 F6 | 	mov	arg03, #1
121a0     80 8B BF FD | 	call	#_loading_overlay_display
121a4     1F 00 00 FF 
121a8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
121ac     EB 74 02 F6 | 	mov	arg01, ptr__dat__
121b0     01 00 00 FF 
121b4     64 D6 05 F1 | 	add	ptr__dat__, ##612
121b8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
121bc     20 00 00 FF 
121c0     E4 D7 85 F1 | 	sub	ptr__dat__, ##16868
121c4     C0 0D BF FD | 	call	#_display_load_image
121c8     1F 00 00 FF 
121cc     80 D7 05 F1 | 	add	ptr__dat__, ##16256
121d0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
121d4     1F 00 00 FF 
121d8     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
121dc     4D 01 00 FF 
121e0     B0 76 06 F6 | 	mov	arg02, ##@LR__2064
121e4     01 78 06 F6 | 	mov	arg03, #1
121e8     38 8B BF FD | 	call	#_loading_overlay_display
121ec     1F 00 00 FF 
121f0     80 D7 05 F1 | 	add	ptr__dat__, ##16256
121f4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
121f8     01 00 00 FF 
121fc     94 D6 05 F1 | 	add	ptr__dat__, ##660
12200     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12204     21 00 00 FF 
12208     14 D6 85 F1 | 	sub	ptr__dat__, ##16916
1220c     78 0D BF FD | 	call	#_display_load_image
12210     1F 00 00 FF 
12214     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12218     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1221c     1F 00 00 FF 
12220     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12224     4D 01 00 FF 
12228     CB 76 06 F6 | 	mov	arg02, ##@LR__2065
1222c     01 78 06 F6 | 	mov	arg03, #1
12230     F0 8A BF FD | 	call	#_loading_overlay_display
12234     1F 00 00 FF 
12238     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1223c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12240     01 00 00 FF 
12244     C4 D6 05 F1 | 	add	ptr__dat__, ##708
12248     EB 76 02 F6 | 	mov	arg02, ptr__dat__
1224c     21 00 00 FF 
12250     44 D6 85 F1 | 	sub	ptr__dat__, ##16964
12254     30 0D BF FD | 	call	#_display_load_image
12258     1F 00 00 FF 
1225c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12260     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12264     1F 00 00 FF 
12268     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1226c     4D 01 00 FF 
12270     E5 76 06 F6 | 	mov	arg02, ##@LR__2066
12274     01 78 06 F6 | 	mov	arg03, #1
12278     A8 8A BF FD | 	call	#_loading_overlay_display
1227c     1F 00 00 FF 
12280     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12284     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12288     01 00 00 FF 
1228c     F4 D6 05 F1 | 	add	ptr__dat__, ##756
12290     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12294     21 00 00 FF 
12298     74 D6 85 F1 | 	sub	ptr__dat__, ##17012
1229c     E8 0C BF FD | 	call	#_display_load_image
122a0     1F 00 00 FF 
122a4     80 D7 05 F1 | 	add	ptr__dat__, ##16256
122a8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
122ac     1F 00 00 FF 
122b0     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
122b4     4D 01 00 FF 
122b8     03 77 06 F6 | 	mov	arg02, ##@LR__2067
122bc     01 78 06 F6 | 	mov	arg03, #1
122c0     60 8A BF FD | 	call	#_loading_overlay_display
122c4     1F 00 00 FF 
122c8     80 D7 05 F1 | 	add	ptr__dat__, ##16256
122cc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
122d0     01 00 00 FF 
122d4     24 D7 05 F1 | 	add	ptr__dat__, ##804
122d8     EB 76 02 F6 | 	mov	arg02, ptr__dat__
122dc     21 00 00 FF 
122e0     A4 D6 85 F1 | 	sub	ptr__dat__, ##17060
122e4     A0 0C BF FD | 	call	#_display_load_image
122e8     1F 00 00 FF 
122ec     80 D7 05 F1 | 	add	ptr__dat__, ##16256
122f0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
122f4     1F 00 00 FF 
122f8     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
122fc     4D 01 00 FF 
12300     1E 77 06 F6 | 	mov	arg02, ##@LR__2068
12304     01 78 06 F6 | 	mov	arg03, #1
12308     18 8A BF FD | 	call	#_loading_overlay_display
1230c     1F 00 00 FF 
12310     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12314     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12318     01 00 00 FF 
1231c     54 D7 05 F1 | 	add	ptr__dat__, ##852
12320     EB 76 02 F6 | 	mov	arg02, ptr__dat__
12324     21 00 00 FF 
12328     D4 D6 85 F1 | 	sub	ptr__dat__, ##17108
1232c     58 0C BF FD | 	call	#_display_load_image
12330                 | _load_images_0337_ret
12330     2D 00 64 FD | 	ret
12334                 | 
12334                 | _write_machine_profile_0338
12334     01 4C 05 F6 | 	mov	COUNT_, #1
12338     A9 00 A0 FD | 	call	#pushregs_
1233c     3A 8D 02 F6 | 	mov	local01, arg01
12340     4D 01 00 FF 
12344     3B 75 06 F6 | 	mov	arg01, ##@LR__2069
12348     00 76 06 F6 | 	mov	arg02, #0
1234c     A8 F7 BE FD | 	call	#_mkdir
12350     00 74 06 F6 | 	mov	arg01, #0
12354     F0 67 B1 FD | 	call	#__system___getiolock_1205
12358     1A 75 02 F6 | 	mov	arg01, result1
1235c     C0 2F B1 FD | 	call	#__system___lockmem
12360     4D 01 00 FF 
12364     48 77 06 F6 | 	mov	arg02, ##@LR__2070
12368     00 74 06 F6 | 	mov	arg01, #0
1236c     00 78 06 F6 | 	mov	arg03, #0
12370     40 35 B1 FD | 	call	#__system___basic_print_string
12374     00 74 06 F6 | 	mov	arg01, #0
12378     0A 76 06 F6 | 	mov	arg02, #10
1237c     00 78 06 F6 | 	mov	arg03, #0
12380     E4 34 B1 FD | 	call	#__system___basic_print_char
12384     00 74 06 F6 | 	mov	arg01, #0
12388     BC 67 B1 FD | 	call	#__system___getiolock_1205
1238c     1A 01 68 FC | 	wrlong	#0, result1
12390     4D 01 00 FF 
12394     71 77 06 F6 | 	mov	arg02, ##@LR__2071
12398     46 75 02 F6 | 	mov	arg01, local01
1239c     9C 40 BF FD | 	call	#_machine_profile_to_json
123a0     A8 F0 03 F6 | 	mov	ptra, fp
123a4     B3 00 A0 FD | 	call	#popregs_
123a8                 | _write_machine_profile_0338_ret
123a8     2D 00 64 FD | 	ret
123ac                 | 
123ac                 | _load_machine_profile_0339
123ac     4D 01 00 FF 
123b0     8A 75 06 F6 | 	mov	arg01, ##@LR__2072
123b4     00 76 06 F6 | 	mov	arg02, #0
123b8     00 F4 BE FD | 	call	#_access
123bc     00 34 0E F2 | 	cmp	result1, #0 wz
123c0     7C 00 90 5D |  if_ne	jmp	#LR__0464
123c4     00 74 06 F6 | 	mov	arg01, #0
123c8     7C 67 B1 FD | 	call	#__system___getiolock_1205
123cc     1A 75 02 F6 | 	mov	arg01, result1
123d0     4C 2F B1 FD | 	call	#__system___lockmem
123d4     4D 01 00 FF 
123d8     A3 77 06 F6 | 	mov	arg02, ##@LR__2073
123dc     00 74 06 F6 | 	mov	arg01, #0
123e0     00 78 06 F6 | 	mov	arg03, #0
123e4     CC 34 B1 FD | 	call	#__system___basic_print_string
123e8     00 74 06 F6 | 	mov	arg01, #0
123ec     0A 76 06 F6 | 	mov	arg02, #10
123f0     00 78 06 F6 | 	mov	arg03, #0
123f4     70 34 B1 FD | 	call	#__system___basic_print_char
123f8     00 74 06 F6 | 	mov	arg01, #0
123fc     48 67 B1 FD | 	call	#__system___getiolock_1205
12400     1A 01 68 FC | 	wrlong	#0, result1
12404     1F 00 00 FF 
12408     CC D7 05 F1 | 	add	ptr__dat__, ##16332
1240c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12410     1F 00 00 FF 
12414     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12418     4D 01 00 FF 
1241c     BC 77 06 F6 | 	mov	arg02, ##@LR__2074
12420     84 49 BF FD | 	call	#_json_to_machine_profile
12424     1F 00 00 FF 
12428     CC D7 05 F1 | 	add	ptr__dat__, ##16332
1242c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12430     1F 00 00 FF 
12434     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12438     A0 5F BF FD | 	call	#_json_print_machine_profile
1243c                 | '     json_to_machine_profile(&machineProfile, "/sd/settings/Default.mcp");
1243c                 | '     json_print_machine_profile(&machineProfile);
1243c                 | '     return;
1243c     A8 01 90 FD | 	jmp	#LR__0465
12440                 | LR__0464
12440     00 74 06 F6 | 	mov	arg01, #0
12444     00 67 B1 FD | 	call	#__system___getiolock_1205
12448     1A 75 02 F6 | 	mov	arg01, result1
1244c     D0 2E B1 FD | 	call	#__system___lockmem
12450     4D 01 00 FF 
12454     D5 77 06 F6 | 	mov	arg02, ##@LR__2075
12458     00 74 06 F6 | 	mov	arg01, #0
1245c     00 78 06 F6 | 	mov	arg03, #0
12460     50 34 B1 FD | 	call	#__system___basic_print_string
12464     00 74 06 F6 | 	mov	arg01, #0
12468     0A 76 06 F6 | 	mov	arg02, #10
1246c     00 78 06 F6 | 	mov	arg03, #0
12470     F4 33 B1 FD | 	call	#__system___basic_print_char
12474     00 74 06 F6 | 	mov	arg01, #0
12478     CC 66 B1 FD | 	call	#__system___getiolock_1205
1247c     1A 01 68 FC | 	wrlong	#0, result1
12480     1F 00 00 FF 
12484     CC D7 05 F1 | 	add	ptr__dat__, ##16332
12488     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1248c     1F 00 00 FF 
12490     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
12494     4E 01 00 FF 
12498     00 76 06 F6 | 	mov	arg02, ##@LR__2076
1249c     F8 2D B1 FD | 	call	#__system____builtin_strcpy
124a0     1F 00 00 FF 
124a4     E0 D7 05 F1 | 	add	ptr__dat__, ##16352
124a8     EB 02 68 FC | 	wrlong	#1, ptr__dat__
124ac     04 D6 05 F1 | 	add	ptr__dat__, #4
124b0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
124b4     1F 00 00 FF 
124b8     E4 D7 85 F1 | 	sub	ptr__dat__, ##16356
124bc     4E 01 00 FF 
124c0     0F 76 06 F6 | 	mov	arg02, ##@LR__2077
124c4     D0 2D B1 FD | 	call	#__system____builtin_strcpy
124c8     1F 00 00 FF 
124cc     F8 D7 05 F1 | 	add	ptr__dat__, ##16376
124d0     3D 3A A0 FF 
124d4     EB C2 69 FC | 	wrlong	##1081375457, ptr__dat__
124d8     04 D6 05 F1 | 	add	ptr__dat__, #4
124dc     20 CE A2 FF 
124e0     EB 00 68 FC | 	wrlong	##1167867904, ptr__dat__
124e4     04 D6 05 F1 | 	add	ptr__dat__, #4
124e8     00 10 A1 FF 
124ec     EB 00 68 FC | 	wrlong	##1109393408, ptr__dat__
124f0     04 D6 05 F1 | 	add	ptr__dat__, #4
124f4     00 00 A0 FF 
124f8     EB 00 68 FC | 	wrlong	##1073741824, ptr__dat__
124fc     04 D6 05 F1 | 	add	ptr__dat__, #4
12500     4C 4F 9D FF 
12504     EB BA 69 FC | 	wrlong	##983472349, ptr__dat__
12508     04 D6 05 F1 | 	add	ptr__dat__, #4
1250c     6C 87 9F FF 
12510     EB 2E 6A FC | 	wrlong	##1057937687, ptr__dat__
12514     04 D6 05 F1 | 	add	ptr__dat__, #4
12518     99 0B A1 FF 
1251c     EB 66 6A FC | 	wrlong	##1108816691, ptr__dat__
12520     04 D6 05 F1 | 	add	ptr__dat__, #4
12524     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12528     20 00 00 FF 
1252c     14 D6 85 F1 | 	sub	ptr__dat__, ##16404
12530     4E 01 00 FF 
12534     17 76 06 F6 | 	mov	arg02, ##@LR__2078
12538     5C 2D B1 FD | 	call	#__system____builtin_strcpy
1253c     20 00 00 FF 
12540     28 D6 05 F1 | 	add	ptr__dat__, ##16424
12544     00 00 A3 FF 
12548     EB 00 68 FC | 	wrlong	##1174405120, ptr__dat__
1254c     04 D6 05 F1 | 	add	ptr__dat__, #4
12550     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12554     20 00 00 FF 
12558     2C D6 85 F1 | 	sub	ptr__dat__, ##16428
1255c     4E 01 00 FF 
12560     23 76 06 F6 | 	mov	arg02, ##@LR__2079
12564     30 2D B1 FD | 	call	#__system____builtin_strcpy
12568     20 00 00 FF 
1256c     40 D6 05 F1 | 	add	ptr__dat__, ##16448
12570     00 C0 9F FF 
12574     EB 00 68 FC | 	wrlong	##1065353216, ptr__dat__
12578     04 D6 05 F1 | 	add	ptr__dat__, #4
1257c     EB 00 68 FC | 	wrlong	#0, ptr__dat__
12580     04 D6 05 F1 | 	add	ptr__dat__, #4
12584     EB 11 9E FF 
12588     EB 14 6A FC | 	wrlong	##1008981770, ptr__dat__
1258c     04 D6 05 F1 | 	add	ptr__dat__, #4
12590     00 25 A1 FF 
12594     EB 00 68 FC | 	wrlong	##1112145920, ptr__dat__
12598     04 D6 05 F1 | 	add	ptr__dat__, #4
1259c     40 A4 A1 FF 
125a0     EB 00 68 FC | 	wrlong	##1128824832, ptr__dat__
125a4     04 D6 05 F1 | 	add	ptr__dat__, #4
125a8     80 64 A1 FF 
125ac     EB 00 68 FC | 	wrlong	##1120468992, ptr__dat__
125b0     04 D6 05 F1 | 	add	ptr__dat__, #4
125b4     00 30 A0 FF 
125b8     EB 00 68 FC | 	wrlong	##1080033280, ptr__dat__
125bc     04 D6 05 F1 | 	add	ptr__dat__, #4
125c0     33 23 A0 FF 
125c4     EB CC 68 FC | 	wrlong	##1078355558, ptr__dat__
125c8     04 D6 05 F1 | 	add	ptr__dat__, #4
125cc     00 80 9F FF 
125d0     EB 00 68 FC | 	wrlong	##1056964608, ptr__dat__
125d4     94 D6 85 F1 | 	sub	ptr__dat__, #148
125d8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
125dc     1F 00 00 FF 
125e0     CC D7 85 F1 | 	sub	ptr__dat__, ##16332
125e4     4C FD BF FD | 	call	#_write_machine_profile_0338
125e8                 | LR__0465
125e8                 | _load_machine_profile_0339_ret
125e8     2D 00 64 FD | 	ret
125ec                 | 
125ec                 | _static_test_profile_0341
125ec     01 4C 05 F6 | 	mov	COUNT_, #1
125f0     A9 00 A0 FD | 	call	#pushregs_
125f4     4E 01 00 FF 
125f8     2A 74 06 F6 | 	mov	arg01, ##@LR__2080
125fc     00 76 06 F6 | 	mov	arg02, #0
12600     F4 F4 BE FD | 	call	#_mkdir
12604     1F 00 00 FF 
12608     48 75 06 F6 | 	mov	arg01, ##16200
1260c                 | '     return _gc_alloc(size);
1260c     10 76 06 F6 | 	mov	arg02, #16
12610     B0 58 B1 FD | 	call	#__system___gc_doalloc
12614     1A 8D 02 F6 | 	mov	local01, result1
12618     4E 01 00 FF 
1261c     37 76 06 F6 | 	mov	arg02, ##@LR__2081
12620     46 75 02 F6 | 	mov	arg01, local01
12624     70 2C B1 FD | 	call	#__system____builtin_strcpy
12628     34 8C 06 F1 | 	add	local01, #52
1262c     46 03 68 FC | 	wrlong	#1, local01
12630     04 8C 06 F1 | 	add	local01, #4
12634     46 05 68 FC | 	wrlong	#2, local01
12638     04 8C 06 F1 | 	add	local01, #4
1263c     46 75 02 F6 | 	mov	arg01, local01
12640     4E 01 00 FF 
12644     4D 76 06 F6 | 	mov	arg02, ##@LR__2082
12648     4C 2C B1 FD | 	call	#__system____builtin_strcpy
1264c     34 8C 06 F1 | 	add	local01, #52
12650     46 03 68 FC | 	wrlong	#1, local01
12654     10 8C 06 F1 | 	add	local01, #16
12658     46 05 68 FC | 	wrlong	#2, local01
1265c     04 8C 06 F1 | 	add	local01, #4
12660     46 05 68 FC | 	wrlong	#2, local01
12664     04 8C 06 F1 | 	add	local01, #4
12668     46 75 02 F6 | 	mov	arg01, local01
1266c     4E 01 00 FF 
12670     64 76 06 F6 | 	mov	arg02, ##@LR__2083
12674     20 2C B1 FD | 	call	#__system____builtin_strcpy
12678     34 8C 06 F1 | 	add	local01, #52
1267c     46 03 68 FC | 	wrlong	#1, local01
12680     04 8C 06 F1 | 	add	local01, #4
12684     00 90 A0 FF 
12688     46 01 68 FC | 	wrlong	##1092616192, local01
1268c     04 8C 06 F1 | 	add	local01, #4
12690     00 D0 A0 FF 
12694     46 01 68 FC | 	wrlong	##1101004800, local01
12698     04 8C 06 F1 | 	add	local01, #4
1269c     EB 11 9E FF 
126a0     46 15 6A FC | 	wrlong	##1008981770, local01
126a4     20 8C 06 F1 | 	add	local01, #32
126a8     00 FD A1 FF 
126ac     46 01 68 FC | 	wrlong	##1140457472, local01
126b0     04 8C 06 F1 | 	add	local01, #4
126b4     46 75 02 F6 | 	mov	arg01, local01
126b8     4E 01 00 FF 
126bc     7A 76 06 F6 | 	mov	arg02, ##@LR__2084
126c0     D4 2B B1 FD | 	call	#__system____builtin_strcpy
126c4     34 8C 06 F1 | 	add	local01, #52
126c8     46 03 68 FC | 	wrlong	#1, local01
126cc     04 8C 06 F1 | 	add	local01, #4
126d0     00 90 E0 FF 
126d4     46 01 68 FC | 	wrlong	##-1054867456, local01
126d8     04 8C 06 F1 | 	add	local01, #4
126dc     00 00 A0 FF 
126e0     46 01 68 FC | 	wrlong	##1073741824, local01
126e4     04 8C 06 F1 | 	add	local01, #4
126e8     EB 11 9E FF 
126ec     46 15 6A FC | 	wrlong	##1008981770, local01
126f0     20 8C 06 F1 | 	add	local01, #32
126f4     00 A4 A1 FF 
126f8     46 01 68 FC | 	wrlong	##1128792064, local01
126fc     01 00 00 FF 
12700     24 8D 06 F1 | 	add	local01, ##804
12704     46 75 02 F6 | 	mov	arg01, local01
12708     4E 01 00 FF 
1270c     90 76 06 F6 | 	mov	arg02, ##@LR__2085
12710     84 2B B1 FD | 	call	#__system____builtin_strcpy
12714     34 8C 06 F1 | 	add	local01, #52
12718     46 05 68 FC | 	wrlong	#2, local01
1271c     10 8C 06 F1 | 	add	local01, #16
12720     46 03 68 FC | 	wrlong	#1, local01
12724     04 8C 06 F1 | 	add	local01, #4
12728     46 05 68 FC | 	wrlong	#2, local01
1272c     04 8C 06 F1 | 	add	local01, #4
12730     46 75 02 F6 | 	mov	arg01, local01
12734     4E 01 00 FF 
12738     A7 76 06 F6 | 	mov	arg02, ##@LR__2086
1273c     58 2B B1 FD | 	call	#__system____builtin_strcpy
12740     34 8C 06 F1 | 	add	local01, #52
12744     46 03 68 FC | 	wrlong	#1, local01
12748     04 8C 06 F1 | 	add	local01, #4
1274c     00 90 A0 FF 
12750     46 01 68 FC | 	wrlong	##1092616192, local01
12754     04 8C 06 F1 | 	add	local01, #4
12758     00 10 A1 FF 
1275c     46 01 68 FC | 	wrlong	##1109393408, local01
12760     04 8C 06 F1 | 	add	local01, #4
12764     EB 11 9E FF 
12768     46 15 6A FC | 	wrlong	##1008981770, local01
1276c     20 8C 06 F1 | 	add	local01, #32
12770     00 FD A1 FF 
12774     46 01 68 FC | 	wrlong	##1140457472, local01
12778     04 8C 06 F1 | 	add	local01, #4
1277c     46 75 02 F6 | 	mov	arg01, local01
12780     4E 01 00 FF 
12784     BD 76 06 F6 | 	mov	arg02, ##@LR__2087
12788     0C 2B B1 FD | 	call	#__system____builtin_strcpy
1278c     34 8C 06 F1 | 	add	local01, #52
12790     46 03 68 FC | 	wrlong	#1, local01
12794     04 8C 06 F1 | 	add	local01, #4
12798     00 90 E0 FF 
1279c     46 01 68 FC | 	wrlong	##-1054867456, local01
127a0     04 8C 06 F1 | 	add	local01, #4
127a4     00 90 A0 FF 
127a8     46 01 68 FC | 	wrlong	##1092616192, local01
127ac     04 8C 06 F1 | 	add	local01, #4
127b0     EB 11 9E FF 
127b4     46 15 6A FC | 	wrlong	##1008981770, local01
127b8     20 8C 06 F1 | 	add	local01, #32
127bc     00 FD A1 FF 
127c0     46 01 68 FC | 	wrlong	##1140457472, local01
127c4     02 00 00 FF 
127c8     80 8D 86 F1 | 	sub	local01, ##1408
127cc     46 75 02 F6 | 	mov	arg01, local01
127d0     46 77 02 F6 | 	mov	arg02, local01
127d4     70 3F BF FD | 	call	#_motion_profile_to_json
127d8     3C 8C 06 F1 | 	add	local01, #60
127dc     46 75 02 F6 | 	mov	arg01, local01
127e0     46 77 02 F6 | 	mov	arg02, local01
127e4     48 41 BF FD | 	call	#_motion_set_to_json
127e8     02 00 00 FF 
127ec     34 8C 06 F1 | 	add	local01, ##1076
127f0     46 75 02 F6 | 	mov	arg01, local01
127f4     46 77 02 F6 | 	mov	arg02, local01
127f8     34 41 BF FD | 	call	#_motion_set_to_json
127fc     01 00 00 FF 
12800     E8 8D 86 F1 | 	sub	local01, ##1000
12804     46 75 02 F6 | 	mov	arg01, local01
12808     46 77 02 F6 | 	mov	arg02, local01
1280c     F8 42 BF FD | 	call	#_motion_quartet_to_json
12810     64 8C 06 F1 | 	add	local01, #100
12814     46 75 02 F6 | 	mov	arg01, local01
12818     46 77 02 F6 | 	mov	arg02, local01
1281c     E8 42 BF FD | 	call	#_motion_quartet_to_json
12820     01 00 00 FF 
12824     D0 8D 06 F1 | 	add	local01, ##976
12828     46 75 02 F6 | 	mov	arg01, local01
1282c     46 77 02 F6 | 	mov	arg02, local01
12830     D4 42 BF FD | 	call	#_motion_quartet_to_json
12834     64 8C 06 F1 | 	add	local01, #100
12838     46 75 02 F6 | 	mov	arg01, local01
1283c     46 77 02 F6 | 	mov	arg02, local01
12840     02 00 00 FF 
12844     20 8D 86 F1 | 	sub	local01, ##1312
12848     BC 42 BF FD | 	call	#_motion_quartet_to_json
1284c     46 75 02 F6 | 	mov	arg01, local01
12850     60 5C BF FD | 	call	#_json_print_motion_profile
12854                 | '   __builtin_strcpy(profile->name, "/sd/profiles/Test1.mp") ;
12854                 | ' 
12854                 | '   profile->number = 1;
12854                 | '   profile->setCount = 2;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[0].name, "/sd/profiles/Set_1.set") ;
12854                 | ' 
12854                 | '   profile->sets[0].number = 1;
12854                 | '   profile->sets[0].executions = 2;
12854                 | '   profile->sets[0].quartetCount = 2;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[0].quartets[0].name, "/sd/profiles/qrt1.qrt") ;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[0].parameters[0] = 10;
12854                 | '   profile->sets[0].quartets[0].parameters[1] = 20;
12854                 | '   profile->sets[0].quartets[0].parameters[2] = 0.01;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[0].dwell = 500;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[0].quartets[1].name, "/sd/profiles/qrt2.qrt") ;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[1].parameters[0] = -10;
12854                 | '   profile->sets[0].quartets[1].parameters[1] = 2;
12854                 | '   profile->sets[0].quartets[1].parameters[2] = 0.01;
12854                 | ' 
12854                 | '   profile->sets[0].quartets[1].dwell = 200;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[1].name, "/sd/profiles/Set_2.set") ;
12854                 | ' 
12854                 | '   profile->sets[1].number = 2;
12854                 | '   profile->sets[1].executions = 1;
12854                 | '   profile->sets[1].quartetCount = 2;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[1].quartets[0].name, "/sd/profiles/qrt3.qrt") ;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[0].parameters[0] = 10;
12854                 | '   profile->sets[1].quartets[0].parameters[1] = 40;
12854                 | '   profile->sets[1].quartets[0].parameters[2] = 0.01;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[0].dwell = 500;
12854                 | ' 
12854                 | ' 
12854                 | '   __builtin_strcpy(profile->sets[1].quartets[1].name, "/sd/profiles/qrt4.qrt") ;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[1].parameters[0] = -10;
12854                 | '   profile->sets[1].quartets[1].parameters[1] = 10;
12854                 | '   profile->sets[1].quartets[1].parameters[2] = 0.01;
12854                 | ' 
12854                 | '   profile->sets[1].quartets[1].dwell = 500;
12854                 | ' 
12854                 | '   motion_profile_to_json(profile, profile->name);
12854                 | '   motion_set_to_json(&(profile->sets[0]), profile->sets[0].name);
12854                 | '   motion_set_to_json(&(profile->sets[1]), profile->sets[1].name);
12854                 | '   motion_quartet_to_json(&(profile->sets[0].quartets[0]), profile->sets[0].quartets[0].name);
12854                 | '   motion_quartet_to_json(&(profile->sets[0].quartets[1]), profile->sets[0].quartets[1].name);
12854                 | '   motion_quartet_to_json(&(profile->sets[1].quartets[0]), profile->sets[1].quartets[0].name);
12854                 | '   motion_quartet_to_json(&(profile->sets[1].quartets[1]), profile->sets[1].quartets[1].name);
12854                 | '   json_print_motion_profile(profile);
12854                 | ' 
12854                 | ' 
12854                 | ' 
12854                 | ' 
12854                 | ' 
12854                 | '   return  (0) ;
12854     00 34 06 F6 | 	mov	result1, #0
12858     A8 F0 03 F6 | 	mov	ptra, fp
1285c     B3 00 A0 FD | 	call	#popregs_
12860                 | _static_test_profile_0341_ret
12860     2D 00 64 FD | 	ret
12864                 | 
12864                 | _start_display_0343
12864     01 4C 05 F6 | 	mov	COUNT_, #1
12868     A9 00 A0 FD | 	call	#pushregs_
1286c     1F 00 00 FF 
12870     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12874     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12878     1F 00 00 FF 
1287c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12880     36 76 06 F6 | 	mov	arg02, #54
12884     37 78 06 F6 | 	mov	arg03, #55
12888     34 7A 06 F6 | 	mov	arg04, #52
1288c     35 7C 06 F6 | 	mov	arg05, #53
12890     33 7E 06 F6 | 	mov	arg06, #51
12894     38 80 06 F6 | 	mov	arg07, #56
12898     39 82 06 F6 | 	mov	arg08, #57
1289c     90 04 BF FD | 	call	#_display_begin
128a0     1A 8D 0A F6 | 	mov	local01, result1 wz
128a4     5C 00 90 AD |  if_e	jmp	#LR__0466
128a8     00 74 06 F6 | 	mov	arg01, #0
128ac     98 62 B1 FD | 	call	#__system___getiolock_1205
128b0     1A 75 02 F6 | 	mov	arg01, result1
128b4     68 2A B1 FD | 	call	#__system___lockmem
128b8     4E 01 00 FF 
128bc     D3 76 06 F6 | 	mov	arg02, ##@LR__2088
128c0     00 74 06 F6 | 	mov	arg01, #0
128c4     00 78 06 F6 | 	mov	arg03, #0
128c8     E8 2F B1 FD | 	call	#__system___basic_print_string
128cc     00 74 06 F6 | 	mov	arg01, #0
128d0     46 77 02 F6 | 	mov	arg02, local01
128d4     00 78 06 F6 | 	mov	arg03, #0
128d8     0A 7A 06 F6 | 	mov	arg04, #10
128dc     18 30 B1 FD | 	call	#__system___basic_print_integer
128e0     00 74 06 F6 | 	mov	arg01, #0
128e4     0A 76 06 F6 | 	mov	arg02, #10
128e8     00 78 06 F6 | 	mov	arg03, #0
128ec     78 2F B1 FD | 	call	#__system___basic_print_char
128f0     00 74 06 F6 | 	mov	arg01, #0
128f4     50 62 B1 FD | 	call	#__system___getiolock_1205
128f8     1A 01 68 FC | 	wrlong	#0, result1
128fc                 | '     return  (0) ;
128fc     00 34 06 F6 | 	mov	result1, #0
12900     D0 00 90 FD | 	jmp	#LR__0467
12904                 | LR__0466
12904     1F 00 00 FF 
12908     80 D7 05 F1 | 	add	ptr__dat__, ##16256
1290c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12910     1F 00 00 FF 
12914     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12918     01 76 06 F6 | 	mov	arg02, #1
1291c     AC 0A BF FD | 	call	#_display_on
12920     1F 00 00 FF 
12924     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12928     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1292c     1F 00 00 FF 
12930     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12934     00 76 06 F6 | 	mov	arg02, #0
12938     98 0F BF FD | 	call	#_display_canvas_image_start_address
1293c     1F 00 00 FF 
12940     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12944     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12948     1F 00 00 FF 
1294c     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
12950     0A 76 C6 F9 | 	decod	arg02, #10
12954     30 10 BF FD | 	call	#_display_canvas_image_width
12958     1F 00 00 FF 
1295c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12960     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12964     1F 00 00 FF 
12968     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1296c     00 76 06 F6 | 	mov	arg02, #0
12970     00 78 06 F6 | 	mov	arg03, #0
12974     70 10 BF FD | 	call	#_display_active_window_xy
12978     1F 00 00 FF 
1297c     80 D7 05 F1 | 	add	ptr__dat__, ##16256
12980     EB 74 02 F6 | 	mov	arg01, ptr__dat__
12984     1F 00 00 FF 
12988     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
1298c     0A 76 C6 F9 | 	decod	arg02, #10
12990     01 00 00 FF 
12994     58 78 06 F6 | 	mov	arg03, ##600
12998     F4 10 BF FD | 	call	#_display_active_window_wh
1299c     1F 00 00 FF 
129a0     80 D7 05 F1 | 	add	ptr__dat__, ##16256
129a4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
129a8     1F 00 00 FF 
129ac     80 D7 85 F1 | 	sub	ptr__dat__, ##16256
129b0     00 76 06 F6 | 	mov	arg02, #0
129b4     00 78 06 F6 | 	mov	arg03, #0
129b8     09 7A CE F9 | 	bmask	arg04, #9
129bc     01 00 00 FF 
129c0     57 7C 06 F6 | 	mov	arg05, ##599
129c4     01 00 00 FF 
129c8     73 7E 06 F6 | 	mov	arg06, ##627
129cc     2C 17 BF FD | 	call	#_display_draw_square_fill
129d0                 | '   }
129d0                 | ' 
129d0                 | '   display_on(&display,  (1) );
129d0                 | ' 
129d0                 | ' 
129d0                 | '   display_canvas_image_start_address(&display,  0 );
129d0                 | '   display_canvas_image_width(&display,  1024 );
129d0                 | '   display_active_window_xy(&display, 0, 0);
129d0                 | '   display_active_window_wh(&display,  1024 ,  600 );
129d0                 | '   display_draw_square_fill(&display, 0, 0,  1024  - 1,  600  - 1,  0x0273 );
129d0                 | '   return  (1) ;
129d0     01 34 06 F6 | 	mov	result1, #1
129d4                 | LR__0467
129d4     A8 F0 03 F6 | 	mov	ptra, fp
129d8     B3 00 A0 FD | 	call	#popregs_
129dc                 | _start_display_0343_ret
129dc     2D 00 64 FD | 	ret
129e0                 | 
129e0                 | _stat
129e0     07 4C 05 F6 | 	mov	COUNT_, #7
129e4     A9 00 A0 FD | 	call	#pushregs_
129e8     3A 79 02 F6 | 	mov	arg03, arg01
129ec     3B 8D 02 F6 | 	mov	local01, arg02
129f0                 | '     return tmpname;
129f0     16 01 00 FF 
129f4     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
129f8     EB 8E 02 F6 | 	mov	local02, ptr__dat__
129fc     47 75 02 F6 | 	mov	arg01, local02
12a00     3C 77 02 F6 | 	mov	arg02, arg03
12a04     00 78 06 F6 | 	mov	arg03, #0
12a08     16 01 00 FF 
12a0c     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
12a10     44 50 B0 FD | 	call	#___getvfsforfile
12a14     1A 91 0A F6 | 	mov	local03, result1 wz
12a18     34 90 06 51 |  if_ne	add	local03, #52
12a1c     48 75 02 5B |  if_ne	rdlong	arg01, local03
12a20     34 90 86 51 |  if_ne	sub	local03, #52
12a24     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
12a28                 | ' #line 22 "C:/flexprop/include/libc/unix/stat.c"
12a28                 | '         return _seterror( 16 );
12a28     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
12a2c     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
12a30     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
12a34     01 34 66 A6 |  if_e	neg	result1, #1
12a38     5C 00 90 AD |  if_e	jmp	#LR__0468
12a3c     46 75 02 F6 | 	mov	arg01, local01
12a40     00 76 06 F6 | 	mov	arg02, #0
12a44     30 78 06 F6 | 	mov	arg03, #48
12a48     3A 93 02 F6 | 	mov	local04, arg01
12a4c     99 00 A0 FD | 	call	#\builtin_bytefill_
12a50     49 35 02 F6 | 	mov	result1, local04
12a54     47 77 CA FA | 	rdbyte	arg02, local02 wz
12a58     08 8C 06 A1 |  if_e	add	local01, #8
12a5c     08 00 80 AF 
12a60     46 FF 6B AC |  if_e	wrlong	##4607, local01
12a64                 | ' #line 29 "C:/flexprop/include/libc/unix/stat.c"
12a64                 | '         buf->st_mode =  0010000  | 0777;
12a64                 | '         return 0;
12a64     00 34 06 A6 |  if_e	mov	result1, #0
12a68     2C 00 90 AD |  if_e	jmp	#LR__0468
12a6c     34 90 06 F1 | 	add	local03, #52
12a70     48 77 02 FB | 	rdlong	arg02, local03
12a74     3B 95 02 FB | 	rdlong	local05, arg02
12a78     04 76 06 F1 | 	add	arg02, #4
12a7c     3B 97 02 FB | 	rdlong	local06, arg02
12a80     47 75 02 F6 | 	mov	arg01, local02
12a84     46 77 02 F6 | 	mov	arg02, local01
12a88     C9 98 02 F6 | 	mov	local07, objptr
12a8c     4A 93 01 F6 | 	mov	objptr, local05
12a90     2D 96 62 FD | 	call	local06
12a94     4C 93 01 F6 | 	mov	objptr, local07
12a98                 | '     }
12a98                 | ' #line 39 "C:/flexprop/include/libc/unix/stat.c"
12a98                 | '     r = v->stat(name, buf);
12a98                 | ' #line 43 "C:/flexprop/include/libc/unix/stat.c"
12a98                 | '     return r;
12a98                 | LR__0468
12a98     A8 F0 03 F6 | 	mov	ptra, fp
12a9c     B3 00 A0 FD | 	call	#popregs_
12aa0                 | _stat_ret
12aa0     2D 00 64 FD | 	ret
12aa4                 | 
12aa4                 | __rxtxioctl_0485
12aa4     02 4C 05 F6 | 	mov	COUNT_, #2
12aa8     A9 00 A0 FD | 	call	#pushregs_
12aac     3B 8D 02 F6 | 	mov	local01, arg02
12ab0     3C 8F 02 F6 | 	mov	local02, arg03
12ab4                 | '     switch (req) {
12ab4     00 8D 0E F2 | 	cmp	local01, #256 wz
12ab8     0C 00 90 AD |  if_e	jmp	#LR__0469
12abc     01 8D 0E F2 | 	cmp	local01, #257 wz
12ac0     1C 00 90 AD |  if_e	jmp	#LR__0470
12ac4     30 00 90 FD | 	jmp	#LR__0471
12ac8                 | LR__0469
12ac8     08 A2 05 F1 | 	add	ptr___system__dat__, #8
12acc     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
12ad0     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
12ad4     47 35 62 FC | 	wrlong	result1, local02
12ad8                 | '         *argl = _getrxtxflags();
12ad8                 | '         return 0;
12ad8     00 34 06 F6 | 	mov	result1, #0
12adc     28 00 90 FD | 	jmp	#LR__0472
12ae0                 | LR__0470
12ae0     47 75 02 FB | 	rdlong	arg01, local02
12ae4     08 A2 05 F1 | 	add	ptr___system__dat__, #8
12ae8     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
12aec     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
12af0                 | '         _setrxtxflags(*argl);
12af0                 | '         return 0;
12af0     00 34 06 F6 | 	mov	result1, #0
12af4     10 00 90 FD | 	jmp	#LR__0472
12af8                 | LR__0471
12af8                 | '         return _seterror( 10 );
12af8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
12afc     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
12b00     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
12b04     01 34 66 F6 | 	neg	result1, #1
12b08                 | LR__0472
12b08     A8 F0 03 F6 | 	mov	ptra, fp
12b0c     B3 00 A0 FD | 	call	#popregs_
12b10                 | __rxtxioctl_0485_ret
12b10     2D 00 64 FD | 	ret
12b14                 | 
12b14                 | ___dummy_flush_0486
12b14                 | ' {
12b14                 | '     return 0;
12b14     00 34 06 F6 | 	mov	result1, #0
12b18                 | ___dummy_flush_0486_ret
12b18     2D 00 64 FD | 	ret
12b1c                 | 
12b1c                 | __vfswrite
12b1c     09 4C 05 F6 | 	mov	COUNT_, #9
12b20     A9 00 A0 FD | 	call	#pushregs_
12b24     3A 8D 02 F6 | 	mov	local01, arg01
12b28     3B 8F 02 F6 | 	mov	local02, arg02
12b2c     3C 91 02 F6 | 	mov	local03, arg03
12b30     47 93 02 F6 | 	mov	local04, local02
12b34     08 8C 06 F1 | 	add	local01, #8
12b38     46 75 02 FB | 	rdlong	arg01, local01
12b3c     08 8C 86 F1 | 	sub	local01, #8
12b40     02 74 CE F7 | 	test	arg01, #2 wz
12b44                 | '         return _seterror( 6 );
12b44     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
12b48     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
12b4c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
12b50     01 34 66 A6 |  if_e	neg	result1, #1
12b54     5C 01 90 AD |  if_e	jmp	#LR__0479
12b58     08 8C 06 F1 | 	add	local01, #8
12b5c     46 35 02 FB | 	rdlong	result1, local01
12b60     08 8C 86 F1 | 	sub	local01, #8
12b64     40 34 CE F7 | 	test	result1, #64 wz
12b68     5C 00 90 AD |  if_e	jmp	#LR__0474
12b6c     08 8C 06 F1 | 	add	local01, #8
12b70     46 35 02 FB | 	rdlong	result1, local01
12b74     08 8C 86 F1 | 	sub	local01, #8
12b78     80 34 CE F7 | 	test	result1, #128 wz
12b7c     48 00 90 AD |  if_e	jmp	#LR__0473
12b80     2C 8C 06 F1 | 	add	local01, #44
12b84     46 79 02 FB | 	rdlong	arg03, local01
12b88     2C 8C 86 F1 | 	sub	local01, #44
12b8c     3C 95 02 FB | 	rdlong	local05, arg03
12b90     04 78 06 F1 | 	add	arg03, #4
12b94     3C 97 02 FB | 	rdlong	local06, arg03
12b98     46 75 02 F6 | 	mov	arg01, local01
12b9c     00 76 06 F6 | 	mov	arg02, #0
12ba0     02 78 06 F6 | 	mov	arg03, #2
12ba4     C9 98 02 F6 | 	mov	local07, objptr
12ba8     4A 93 01 F6 | 	mov	objptr, local05
12bac     2D 96 62 FD | 	call	local06
12bb0     4C 93 01 F6 | 	mov	objptr, local07
12bb4     08 8C 06 F1 | 	add	local01, #8
12bb8     46 99 02 FB | 	rdlong	local07, local01
12bbc     80 98 26 F5 | 	andn	local07, #128
12bc0     46 99 62 FC | 	wrlong	local07, local01
12bc4     08 8C 86 F1 | 	sub	local01, #8
12bc8                 | LR__0473
12bc8                 | LR__0474
12bc8     14 8C 06 F1 | 	add	local01, #20
12bcc     46 99 0A FB | 	rdlong	local07, local01 wz
12bd0     14 8C 86 F1 | 	sub	local01, #20
12bd4     74 00 90 AD |  if_e	jmp	#LR__0476
12bd8     14 8C 06 F1 | 	add	local01, #20
12bdc     46 99 02 FB | 	rdlong	local07, local01
12be0     14 8C 86 F1 | 	sub	local01, #20
12be4     4C 95 02 FB | 	rdlong	local05, local07
12be8     04 98 06 F1 | 	add	local07, #4
12bec     4C 97 02 FB | 	rdlong	local06, local07
12bf0     47 77 02 F6 | 	mov	arg02, local02
12bf4     48 79 02 F6 | 	mov	arg03, local03
12bf8     46 75 02 F6 | 	mov	arg01, local01
12bfc     C9 98 02 F6 | 	mov	local07, objptr
12c00     4A 93 01 F6 | 	mov	objptr, local05
12c04     2D 96 62 FD | 	call	local06
12c08     4C 93 01 F6 | 	mov	objptr, local07
12c0c     1A 9B 02 F6 | 	mov	local08, result1
12c10     00 9A 56 F2 | 	cmps	local08, #0 wc
12c14     2C 00 90 3D |  if_ae	jmp	#LR__0475
12c18     08 8C 06 F1 | 	add	local01, #8
12c1c     46 99 02 FB | 	rdlong	local07, local01
12c20     20 98 46 F5 | 	or	local07, #32
12c24     46 99 62 FC | 	wrlong	local07, local01
12c28                 | '             f->state |=  (0x20) ;
12c28                 | '             return _seterror(r);
12c28     18 A2 05 F1 | 	add	ptr___system__dat__, #24
12c2c     D1 9A 62 FC | 	wrlong	local08, ptr___system__dat__
12c30     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
12c34     00 9A 0E F2 | 	cmp	local08, #0 wz
12c38     01 34 66 56 |  if_ne	neg	result1, #1
12c3c     00 34 06 A6 |  if_e	mov	result1, #0
12c40     70 00 90 FD | 	jmp	#LR__0479
12c44                 | LR__0475
12c44                 | '         }
12c44                 | '         return r;
12c44     4D 35 02 F6 | 	mov	result1, local08
12c48     68 00 90 FD | 	jmp	#LR__0479
12c4c                 | LR__0476
12c4c     18 8C 06 F1 | 	add	local01, #24
12c50     46 9D 0A FB | 	rdlong	local09, local01 wz
12c54     18 8C 86 F1 | 	sub	local01, #24
12c58                 | '         return _seterror( 6 );
12c58     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
12c5c     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
12c60     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
12c64     01 34 66 A6 |  if_e	neg	result1, #1
12c68     48 00 90 AD |  if_e	jmp	#LR__0479
12c6c     00 9A 06 F6 | 	mov	local08, #0
12c70                 | '     }
12c70                 | '     r = 0;
12c70                 | '     while (count > 0) {
12c70                 | LR__0477
12c70     01 90 16 F2 | 	cmp	local03, #1 wc
12c74     38 00 90 CD |  if_b	jmp	#LR__0478
12c78     4E 99 02 F6 | 	mov	local07, local09
12c7c     4C 95 02 FB | 	rdlong	local05, local07
12c80     04 98 06 F1 | 	add	local07, #4
12c84     4C 97 02 FB | 	rdlong	local06, local07
12c88     49 75 C2 FA | 	rdbyte	arg01, local04
12c8c     46 77 02 F6 | 	mov	arg02, local01
12c90     C9 98 02 F6 | 	mov	local07, objptr
12c94     4A 93 01 F6 | 	mov	objptr, local05
12c98     2D 96 62 FD | 	call	local06
12c9c     4C 93 01 F6 | 	mov	objptr, local07
12ca0     1A 9B 02 F1 | 	add	local08, result1
12ca4     01 90 86 F1 | 	sub	local03, #1
12ca8     01 92 06 F1 | 	add	local04, #1
12cac     C0 FF 9F FD | 	jmp	#LR__0477
12cb0                 | LR__0478
12cb0                 | '         r += (*tx)(*buf++, f);
12cb0                 | '         --count;
12cb0                 | '     }
12cb0                 | '     return r;
12cb0     4D 35 02 F6 | 	mov	result1, local08
12cb4                 | LR__0479
12cb4     A8 F0 03 F6 | 	mov	ptra, fp
12cb8     B3 00 A0 FD | 	call	#popregs_
12cbc                 | __vfswrite_ret
12cbc     2D 00 64 FD | 	ret
12cc0                 | 
12cc0                 | __vfsread
12cc0     0B 4C 05 F6 | 	mov	COUNT_, #11
12cc4     A9 00 A0 FD | 	call	#pushregs_
12cc8     28 F0 07 F1 | 	add	ptra, #40
12ccc     04 50 05 F1 | 	add	fp, #4
12cd0     A8 74 62 FC | 	wrlong	arg01, fp
12cd4     04 50 05 F1 | 	add	fp, #4
12cd8     A8 76 62 FC | 	wrlong	arg02, fp
12cdc     04 50 05 F1 | 	add	fp, #4
12ce0     A8 78 62 FC | 	wrlong	arg03, fp
12ce4     04 50 85 F1 | 	sub	fp, #4
12ce8     A8 8C 02 FB | 	rdlong	local01, fp
12cec     14 50 05 F1 | 	add	fp, #20
12cf0     A8 8C 62 FC | 	wrlong	local01, fp
12cf4     04 50 05 F1 | 	add	fp, #4
12cf8     A8 00 68 FC | 	wrlong	#0, fp
12cfc     1C 50 85 F1 | 	sub	fp, #28
12d00     A8 8E 02 FB | 	rdlong	local02, fp
12d04     04 50 85 F1 | 	sub	fp, #4
12d08     08 8E 06 F1 | 	add	local02, #8
12d0c     47 8D 02 FB | 	rdlong	local01, local02
12d10     01 8C CE F7 | 	test	local01, #1 wz
12d14                 | ' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
12d14                 | '         return _seterror( 6 );
12d14     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
12d18     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
12d1c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
12d20     01 34 66 A6 |  if_e	neg	result1, #1
12d24     70 02 90 AD |  if_e	jmp	#LR__0486
12d28     04 50 05 F1 | 	add	fp, #4
12d2c     A8 8C 02 FB | 	rdlong	local01, fp
12d30     04 50 85 F1 | 	sub	fp, #4
12d34     10 8C 06 F1 | 	add	local01, #16
12d38     46 8D 0A FB | 	rdlong	local01, local01 wz
12d3c     AC 00 90 AD |  if_e	jmp	#LR__0481
12d40     04 50 05 F1 | 	add	fp, #4
12d44     A8 74 02 FB | 	rdlong	arg01, fp
12d48     3A 8F 02 F6 | 	mov	local02, arg01
12d4c     10 8E 06 F1 | 	add	local02, #16
12d50     47 8D 02 FB | 	rdlong	local01, local02
12d54     46 8F 02 FB | 	rdlong	local02, local01
12d58     04 8C 06 F1 | 	add	local01, #4
12d5c     46 8D 02 FB | 	rdlong	local01, local01
12d60     04 50 05 F1 | 	add	fp, #4
12d64     A8 76 02 FB | 	rdlong	arg02, fp
12d68     04 50 05 F1 | 	add	fp, #4
12d6c     A8 78 02 FB | 	rdlong	arg03, fp
12d70     0C 50 85 F1 | 	sub	fp, #12
12d74     C9 90 02 F6 | 	mov	local03, objptr
12d78     47 93 01 F6 | 	mov	objptr, local02
12d7c     2D 8C 62 FD | 	call	local01
12d80     48 93 01 F6 | 	mov	objptr, local03
12d84     10 50 05 F1 | 	add	fp, #16
12d88     A8 34 62 FC | 	wrlong	result1, fp
12d8c     10 50 85 F1 | 	sub	fp, #16
12d90     00 34 56 F2 | 	cmps	result1, #0 wc
12d94     44 00 90 3D |  if_ae	jmp	#LR__0480
12d98     04 50 05 F1 | 	add	fp, #4
12d9c     A8 90 02 FB | 	rdlong	local03, fp
12da0     48 8D 02 F6 | 	mov	local01, local03
12da4     08 90 06 F1 | 	add	local03, #8
12da8     48 91 02 FB | 	rdlong	local03, local03
12dac     20 90 46 F5 | 	or	local03, #32
12db0     08 8C 06 F1 | 	add	local01, #8
12db4     46 91 62 FC | 	wrlong	local03, local01
12db8                 | '             f->state |=  (0x20) ;
12db8                 | '             return _seterror(r);
12db8     0C 50 05 F1 | 	add	fp, #12
12dbc     A8 74 0A FB | 	rdlong	arg01, fp wz
12dc0     10 50 85 F1 | 	sub	fp, #16
12dc4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
12dc8     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
12dcc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
12dd0     01 34 66 56 |  if_ne	neg	result1, #1
12dd4     00 34 06 A6 |  if_e	mov	result1, #0
12dd8     BC 01 90 FD | 	jmp	#LR__0486
12ddc                 | LR__0480
12ddc                 | '         }
12ddc                 | '         return r;
12ddc     10 50 05 F1 | 	add	fp, #16
12de0     A8 34 02 FB | 	rdlong	result1, fp
12de4     10 50 85 F1 | 	sub	fp, #16
12de8     AC 01 90 FD | 	jmp	#LR__0486
12dec                 | LR__0481
12dec     04 50 05 F1 | 	add	fp, #4
12df0     A8 8C 02 FB | 	rdlong	local01, fp
12df4     1C 8C 06 F1 | 	add	local01, #28
12df8     46 8D 0A FB | 	rdlong	local01, local01 wz
12dfc     14 50 05 F1 | 	add	fp, #20
12e00     A8 8C 62 FC | 	wrlong	local01, fp
12e04     18 50 85 F1 | 	sub	fp, #24
12e08                 | '         return _seterror( 6 );
12e08     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
12e0c     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
12e10     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
12e14     01 34 66 A6 |  if_e	neg	result1, #1
12e18     7C 01 90 AD |  if_e	jmp	#LR__0486
12e1c     04 50 05 F1 | 	add	fp, #4
12e20     A8 8C 02 FB | 	rdlong	local01, fp
12e24     04 50 85 F1 | 	sub	fp, #4
12e28     24 8C 06 F1 | 	add	local01, #36
12e2c     46 93 0A FB | 	rdlong	local04, local01 wz
12e30     90 00 90 AD |  if_e	jmp	#LR__0483
12e34     04 50 05 F1 | 	add	fp, #4
12e38     A8 94 02 FB | 	rdlong	local05, fp
12e3c     4A 97 02 F6 | 	mov	local06, local05
12e40     24 96 06 F1 | 	add	local06, #36
12e44     4B 99 02 FB | 	rdlong	local07, local06
12e48     4C 8D 02 F6 | 	mov	local01, local07
12e4c     46 8F 02 FB | 	rdlong	local02, local01
12e50     04 8C 06 F1 | 	add	local01, #4
12e54     46 9B 02 FB | 	rdlong	local08, local01
12e58     4D 93 02 F6 | 	mov	local04, local08
12e5c     4A 9D 02 F6 | 	mov	local09, local05
12e60     00 9F 06 F6 | 	mov	local10, #256
12e64     20 50 05 F1 | 	add	fp, #32
12e68     A8 A0 02 F6 | 	mov	local11, fp
12e6c     4E 75 02 F6 | 	mov	arg01, local09
12e70     00 77 06 F6 | 	mov	arg02, #256
12e74     50 79 02 F6 | 	mov	arg03, local11
12e78     C9 90 02 F6 | 	mov	local03, objptr
12e7c     47 93 01 F6 | 	mov	objptr, local02
12e80     24 50 85 F1 | 	sub	fp, #36
12e84     2D 92 62 FD | 	call	local04
12e88     48 93 01 F6 | 	mov	objptr, local03
12e8c     10 50 05 F1 | 	add	fp, #16
12e90     A8 34 62 FC | 	wrlong	result1, fp
12e94     1A 8F 0A F6 | 	mov	local02, result1 wz
12e98     10 50 85 F1 | 	sub	fp, #16
12e9c     24 00 90 5D |  if_ne	jmp	#LR__0482
12ea0     24 50 05 F1 | 	add	fp, #36
12ea4     A8 96 02 FB | 	rdlong	local06, fp
12ea8     24 50 85 F1 | 	sub	fp, #36
12eac     4B 93 02 F6 | 	mov	local04, local06
12eb0     02 92 0E F5 | 	and	local04, #2 wz
12eb4     01 8C 06 56 |  if_ne	mov	local01, #1
12eb8     20 50 05 51 |  if_ne	add	fp, #32
12ebc     A8 02 68 5C |  if_ne	wrlong	#1, fp
12ec0     20 50 85 51 |  if_ne	sub	fp, #32
12ec4                 | LR__0482
12ec4                 | LR__0483
12ec4     10 50 05 F1 | 	add	fp, #16
12ec8     A8 00 68 FC | 	wrlong	#0, fp
12ecc     10 50 85 F1 | 	sub	fp, #16
12ed0                 | '             break_on_nl = 1;
12ed0                 | '         }
12ed0                 | '     }
12ed0                 | '     r = 0;
12ed0                 | '     while (count > 0) {
12ed0                 | LR__0484
12ed0     0C 50 05 F1 | 	add	fp, #12
12ed4     A8 8C 02 FB | 	rdlong	local01, fp
12ed8     0C 50 85 F1 | 	sub	fp, #12
12edc     01 8C 16 F2 | 	cmp	local01, #1 wc
12ee0     A8 00 90 CD |  if_b	jmp	#LR__0485
12ee4     18 50 05 F1 | 	add	fp, #24
12ee8     A8 8C 02 FB | 	rdlong	local01, fp
12eec     46 8F 02 FB | 	rdlong	local02, local01
12ef0     04 8C 06 F1 | 	add	local01, #4
12ef4     46 93 02 FB | 	rdlong	local04, local01
12ef8     14 50 85 F1 | 	sub	fp, #20
12efc     A8 74 02 FB | 	rdlong	arg01, fp
12f00     04 50 85 F1 | 	sub	fp, #4
12f04     C9 9A 02 F6 | 	mov	local08, objptr
12f08     47 93 01 F6 | 	mov	objptr, local02
12f0c     2D 92 62 FD | 	call	local04
12f10     4D 93 01 F6 | 	mov	objptr, local08
12f14     14 50 05 F1 | 	add	fp, #20
12f18     A8 34 62 FC | 	wrlong	result1, fp
12f1c     14 50 85 F1 | 	sub	fp, #20
12f20     00 34 56 F2 | 	cmps	result1, #0 wc
12f24     64 00 90 CD |  if_b	jmp	#LR__0485
12f28     1C 50 05 F1 | 	add	fp, #28
12f2c     A8 8E 02 FB | 	rdlong	local02, fp
12f30     47 93 02 F6 | 	mov	local04, local02
12f34     01 92 06 F1 | 	add	local04, #1
12f38     A8 92 62 FC | 	wrlong	local04, fp
12f3c     08 50 85 F1 | 	sub	fp, #8
12f40     A8 94 02 FB | 	rdlong	local05, fp
12f44     47 95 42 FC | 	wrbyte	local05, local02
12f48     04 50 85 F1 | 	sub	fp, #4
12f4c     A8 8C 02 FB | 	rdlong	local01, fp
12f50     01 8C 06 F1 | 	add	local01, #1
12f54     A8 8C 62 FC | 	wrlong	local01, fp
12f58     04 50 85 F1 | 	sub	fp, #4
12f5c     A8 8C 02 FB | 	rdlong	local01, fp
12f60     01 8C 86 F1 | 	sub	local01, #1
12f64     A8 8C 62 FC | 	wrlong	local01, fp
12f68     14 50 05 F1 | 	add	fp, #20
12f6c     A8 8C 0A FB | 	rdlong	local01, fp wz
12f70     20 50 85 F1 | 	sub	fp, #32
12f74     58 FF 9F AD |  if_e	jmp	#LR__0484
12f78     14 50 05 F1 | 	add	fp, #20
12f7c     A8 92 02 FB | 	rdlong	local04, fp
12f80     14 50 85 F1 | 	sub	fp, #20
12f84     0A 92 0E F2 | 	cmp	local04, #10 wz
12f88                 | '             break;
12f88     44 FF 9F 5D |  if_ne	jmp	#LR__0484
12f8c                 | LR__0485
12f8c                 | '         }
12f8c                 | '     }
12f8c                 | '     return r;
12f8c     10 50 05 F1 | 	add	fp, #16
12f90     A8 34 02 FB | 	rdlong	result1, fp
12f94     10 50 85 F1 | 	sub	fp, #16
12f98                 | LR__0486
12f98     A8 F0 03 F6 | 	mov	ptra, fp
12f9c     B3 00 A0 FD | 	call	#popregs_
12fa0                 | __vfsread_ret
12fa0     2D 00 64 FD | 	ret
12fa4                 | 
12fa4                 | _state_machine_check_0548
12fa4     08 4C 05 F6 | 	mov	COUNT_, #8
12fa8     A9 00 A0 FD | 	call	#pushregs_
12fac     1C F0 07 F1 | 	add	ptra, #28
12fb0     3A 8D 02 F6 | 	mov	local01, arg01
12fb4     04 74 06 F1 | 	add	arg01, #4
12fb8     3A 03 48 FC | 	wrbyte	#1, arg01
12fbc     3A 75 CA FA | 	rdbyte	arg01, arg01 wz
12fc0     01 34 06 56 |  if_ne	mov	result1, #1
12fc4     00 34 06 A6 |  if_e	mov	result1, #0
12fc8                 | '     {
12fc8                 | '         newState = STATE_SELFCHECK;
12fc8                 | '     }
12fc8                 | ' 
12fc8                 | '     return newState;
12fc8     01 34 0E F2 | 	cmp	result1, #1 wz
12fcc                 | '     {
12fcc                 | '         return newState;
12fcc     94 00 90 5D |  if_ne	jmp	#LR__0488
12fd0     0C 50 05 F1 | 	add	fp, #12
12fd4     A8 74 02 F6 | 	mov	arg01, fp
12fd8     0C 50 85 F1 | 	sub	fp, #12
12fdc     08 8C 06 F1 | 	add	local01, #8
12fe0     46 77 02 F6 | 	mov	arg02, local01
12fe4     10 78 06 F6 | 	mov	arg03, #16
12fe8     1C 22 B1 FD | 	call	#__system____builtin_memmove
12fec     0C 50 05 F1 | 	add	fp, #12
12ff0     A8 8E CA FA | 	rdbyte	local02, fp wz
12ff4     0C 50 85 F1 | 	sub	fp, #12
12ff8     64 00 90 AD |  if_e	jmp	#LR__0487
12ffc     10 50 05 F1 | 	add	fp, #16
13000     A8 90 0A FB | 	rdlong	local03, fp wz
13004     10 50 85 F1 | 	sub	fp, #16
13008     54 00 90 5D |  if_ne	jmp	#LR__0487
1300c     14 50 05 F1 | 	add	fp, #20
13010     A8 92 CA FA | 	rdbyte	local04, fp wz
13014     14 50 85 F1 | 	sub	fp, #20
13018     44 00 90 AD |  if_e	jmp	#LR__0487
1301c     15 50 05 F1 | 	add	fp, #21
13020     A8 94 CA FA | 	rdbyte	local05, fp wz
13024     15 50 85 F1 | 	sub	fp, #21
13028     34 00 90 AD |  if_e	jmp	#LR__0487
1302c     16 50 05 F1 | 	add	fp, #22
13030     A8 96 CA FA | 	rdbyte	local06, fp wz
13034     16 50 85 F1 | 	sub	fp, #22
13038     24 00 90 AD |  if_e	jmp	#LR__0487
1303c     17 50 05 F1 | 	add	fp, #23
13040     A8 98 CA FA | 	rdbyte	local07, fp wz
13044     17 50 85 F1 | 	sub	fp, #23
13048     14 00 90 AD |  if_e	jmp	#LR__0487
1304c     18 50 05 F1 | 	add	fp, #24
13050     A8 9A CA FA | 	rdbyte	local08, fp wz
13054     18 50 85 F1 | 	sub	fp, #24
13058                 | '         params.esdTravelLimit == MOTION_LIMIT_OK &&
13058                 | '         params.esdSwitch &&
13058                 | '         params.servoOK &&
13058                 | '         params.forceGaugeCom &&
13058                 | '         params.servoCom &&
13058                 | '         params.rtcCom)
13058                 | '     {
13058                 | '         return STATE_MOTION;
13058     02 34 06 56 |  if_ne	mov	result1, #2
1305c     04 00 90 5D |  if_ne	jmp	#LR__0488
13060                 | LR__0487
13060                 | '     {
13060                 | ' 
13060                 | '         return STATE_MACHINECHECK;
13060     01 34 06 F6 | 	mov	result1, #1
13064                 | LR__0488
13064     A8 F0 03 F6 | 	mov	ptra, fp
13068     B3 00 A0 FD | 	call	#popregs_
1306c                 | _state_machine_check_0548_ret
1306c     2D 00 64 FD | 	ret
13070                 | 
13070                 | _state_machine_motion_0550
13070     04 4C 05 F6 | 	mov	COUNT_, #4
13074     A9 00 A0 FD | 	call	#pushregs_
13078     3A 8D 02 F6 | 	mov	local01, arg01
1307c     24 FF BF FD | 	call	#_state_machine_check_0548
13080     1A 8F 02 F6 | 	mov	local02, result1
13084     02 8E 0E F2 | 	cmp	local02, #2 wz
13088     58 00 90 AD |  if_e	jmp	#LR__0492
1308c     46 35 02 FB | 	rdlong	result1, local01
13090     02 34 0E F2 | 	cmp	result1, #2 wz
13094     30 00 90 5D |  if_ne	jmp	#LR__0490
13098     0C 8C 06 F1 | 	add	local01, #12
1309c     46 35 0A FB | 	rdlong	result1, local01 wz
130a0     0C 8C 86 F1 | 	sub	local01, #12
130a4     10 00 90 5D |  if_ne	jmp	#LR__0489
130a8     10 8C 06 F1 | 	add	local01, #16
130ac     46 35 CA FA | 	rdbyte	result1, local01 wz
130b0     10 8C 86 F1 | 	sub	local01, #16
130b4     10 00 90 5D |  if_ne	jmp	#LR__0490
130b8                 | LR__0489
130b8     18 8C 06 F1 | 	add	local01, #24
130bc     46 09 68 FC | 	wrlong	#4, local01
130c0     18 8C 86 F1 | 	sub	local01, #24
130c4     0C 00 90 FD | 	jmp	#LR__0491
130c8                 | LR__0490
130c8     18 8C 06 F1 | 	add	local01, #24
130cc     46 01 68 FC | 	wrlong	#0, local01
130d0     18 8C 86 F1 | 	sub	local01, #24
130d4                 | LR__0491
130d4     20 8C 06 F1 | 	add	local01, #32
130d8     46 01 68 FC | 	wrlong	#0, local01
130dc                 | '         {
130dc                 | '             machineState->motionParameters.status = STATUS_DISABLED;
130dc                 | '         }
130dc                 | ' 
130dc                 | '         machineState->motionParameters.mode = MODE_MANUAL;
130dc                 | '         return newState;
130dc     47 35 02 F6 | 	mov	result1, local02
130e0     04 01 90 FD | 	jmp	#LR__0505
130e4                 | LR__0492
130e4     18 8C 06 F1 | 	add	local01, #24
130e8     46 91 0A FB | 	rdlong	local03, local01 wz
130ec     18 8C 86 F1 | 	sub	local01, #24
130f0     E8 00 90 AD |  if_e	jmp	#LR__0503
130f4                 | '     {
130f4                 | '         switch (machineState->motionParameters.condition)
130f4     1C 8C 06 F1 | 	add	local01, #28
130f8     46 93 02 FB | 	rdlong	local04, local01
130fc     1C 8C 86 F1 | 	sub	local01, #28
13100     09 92 26 F3 | 	fle	local04, #9
13104     30 92 62 FD | 	jmprel	local04
13108                 | LR__0493
13108     24 00 90 FD | 	jmp	#LR__0494
1310c     2C 00 90 FD | 	jmp	#LR__0495
13110     34 00 90 FD | 	jmp	#LR__0496
13114     3C 00 90 FD | 	jmp	#LR__0497
13118     44 00 90 FD | 	jmp	#LR__0498
1311c     4C 00 90 FD | 	jmp	#LR__0499
13120     54 00 90 FD | 	jmp	#LR__0500
13124     5C 00 90 FD | 	jmp	#LR__0501
13128     84 00 90 FD | 	jmp	#LR__0502
1312c     B4 00 90 FD | 	jmp	#LR__0504
13130                 | LR__0494
13130     18 8C 06 F1 | 	add	local01, #24
13134     46 05 68 FC | 	wrlong	#2, local01
13138                 | '             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
13138                 | '             break;
13138     A8 00 90 FD | 	jmp	#LR__0504
1313c                 | LR__0495
1313c     18 8C 06 F1 | 	add	local01, #24
13140     46 05 68 FC | 	wrlong	#2, local01
13144                 | '             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
13144                 | '             break;
13144     9C 00 90 FD | 	jmp	#LR__0504
13148                 | LR__0496
13148     18 8C 06 F1 | 	add	local01, #24
1314c     46 07 68 FC | 	wrlong	#3, local01
13150                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13150                 | '             break;
13150     90 00 90 FD | 	jmp	#LR__0504
13154                 | LR__0497
13154     18 8C 06 F1 | 	add	local01, #24
13158     46 07 68 FC | 	wrlong	#3, local01
1315c                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
1315c                 | '             break;
1315c     84 00 90 FD | 	jmp	#LR__0504
13160                 | LR__0498
13160     18 8C 06 F1 | 	add	local01, #24
13164     46 07 68 FC | 	wrlong	#3, local01
13168                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13168                 | '             break;
13168     78 00 90 FD | 	jmp	#LR__0504
1316c                 | LR__0499
1316c     18 8C 06 F1 | 	add	local01, #24
13170     46 07 68 FC | 	wrlong	#3, local01
13174                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13174                 | '             break;
13174     6C 00 90 FD | 	jmp	#LR__0504
13178                 | LR__0500
13178     18 8C 06 F1 | 	add	local01, #24
1317c     46 07 68 FC | 	wrlong	#3, local01
13180                 | '             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
13180                 | '             break;
13180     60 00 90 FD | 	jmp	#LR__0504
13184                 | LR__0501
13184     18 8C 06 F1 | 	add	local01, #24
13188     46 93 02 FB | 	rdlong	local04, local01
1318c     18 8C 86 F1 | 	sub	local01, #24
13190     01 92 0E F2 | 	cmp	local04, #1 wz
13194     4C 00 90 AD |  if_e	jmp	#LR__0504
13198     18 8C 06 F1 | 	add	local01, #24
1319c     46 93 0A FB | 	rdlong	local04, local01 wz
131a0     18 8C 86 F1 | 	sub	local01, #24
131a4     18 8C 06 51 |  if_ne	add	local01, #24
131a8     46 03 68 5C |  if_ne	wrlong	#1, local01
131ac                 | '             {
131ac                 | ' 
131ac                 | '                 machineState->motionParameters.status = STATUS_ENABLED;
131ac                 | '             }
131ac                 | '             break;
131ac     34 00 90 FD | 	jmp	#LR__0504
131b0                 | LR__0502
131b0     18 8C 06 F1 | 	add	local01, #24
131b4     46 93 02 FB | 	rdlong	local04, local01
131b8     18 8C 86 F1 | 	sub	local01, #24
131bc     01 92 0E F2 | 	cmp	local04, #1 wz
131c0     20 00 90 AD |  if_e	jmp	#LR__0504
131c4     18 8C 06 F1 | 	add	local01, #24
131c8     46 93 0A FB | 	rdlong	local04, local01 wz
131cc     18 8C 86 F1 | 	sub	local01, #24
131d0     18 8C 06 51 |  if_ne	add	local01, #24
131d4     46 03 68 5C |  if_ne	wrlong	#1, local01
131d8                 | '             {
131d8                 | ' 
131d8                 | '                 machineState->motionParameters.status = STATUS_ENABLED;
131d8                 | '             }
131d8                 | '             break;
131d8     08 00 90 FD | 	jmp	#LR__0504
131dc                 | LR__0503
131dc     20 8C 06 F1 | 	add	local01, #32
131e0     46 01 68 FC | 	wrlong	#0, local01
131e4                 | LR__0504
131e4                 | '     {
131e4                 | '         machineState->motionParameters.mode = MODE_MANUAL;
131e4                 | '     }
131e4                 | ' 
131e4                 | '     return STATE_MOTION;
131e4     02 34 06 F6 | 	mov	result1, #2
131e8                 | LR__0505
131e8     A8 F0 03 F6 | 	mov	ptra, fp
131ec     B3 00 A0 FD | 	call	#popregs_
131f0                 | _state_machine_motion_0550_ret
131f0     2D 00 64 FD | 	ret
131f4                 | 
131f4                 | _state_machine_update_0551
131f4     01 4C 05 F6 | 	mov	COUNT_, #1
131f8     A9 00 A0 FD | 	call	#pushregs_
131fc     3A 8D 02 F6 | 	mov	local01, arg01
13200                 | ' {
13200                 | '     while(!_locktry(machineState->lock));
13200     2C 8C 06 F1 | 	add	local01, #44
13204     04 CE 9E FE | 	loc	pa,	#(@LR__0507-@LR__0506)
13208     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1320c                 | LR__0506
1320c     46 75 02 FB | 	rdlong	arg01, local01
13210     06 74 72 FD | 	locktry	arg01 wc
13214     F4 FF 9F 3D |  if_ae	jmp	#LR__0506
13218                 | LR__0507
13218     2C 8C 86 F1 | 	sub	local01, #44
1321c     46 75 02 F6 | 	mov	arg01, local01
13220     4C FE BF FD | 	call	#_state_machine_motion_0550
13224     46 35 62 FC | 	wrlong	result1, local01
13228     2C 8C 06 F1 | 	add	local01, #44
1322c     46 75 02 FB | 	rdlong	arg01, local01
13230     07 74 72 FD | 	lockrel	arg01 wc
13234     A8 F0 03 F6 | 	mov	ptra, fp
13238     B3 00 A0 FD | 	call	#popregs_
1323c                 | _state_machine_update_0551_ret
1323c     2D 00 64 FD | 	ret
13240                 | 
13240                 | _double_to_json_0640
13240     03 4C 05 F6 | 	mov	COUNT_, #3
13244     A9 00 A0 FD | 	call	#pushregs_
13248     4E 01 00 FF 
1324c     EB 8C 06 F6 | 	mov	local01, ##@LR__2089
13250     3B 8F 02 F6 | 	mov	local02, arg02
13254     3C 91 02 F6 | 	mov	local03, arg03
13258     46 77 02 F6 | 	mov	arg02, local01
1325c     F8 79 02 F6 | 	mov	arg03, ptra
13260     61 8F 66 FC | 	wrlong	local02, ptra++
13264     61 91 66 FC | 	wrlong	local03, ptra++
13268     00 EB BE FD | 	call	#_fprintf
1326c     08 F0 87 F1 | 	sub	ptra, #8
13270     A8 F0 03 F6 | 	mov	ptra, fp
13274     B3 00 A0 FD | 	call	#popregs_
13278                 | _double_to_json_0640_ret
13278     2D 00 64 FD | 	ret
1327c                 | 
1327c                 | _int_to_json_0641
1327c     03 4C 05 F6 | 	mov	COUNT_, #3
13280     A9 00 A0 FD | 	call	#pushregs_
13284     4E 01 00 FF 
13288     F3 8C 06 F6 | 	mov	local01, ##@LR__2090
1328c     3B 8F 02 F6 | 	mov	local02, arg02
13290     3C 91 02 F6 | 	mov	local03, arg03
13294     46 77 02 F6 | 	mov	arg02, local01
13298     F8 79 02 F6 | 	mov	arg03, ptra
1329c     61 8F 66 FC | 	wrlong	local02, ptra++
132a0     61 91 66 FC | 	wrlong	local03, ptra++
132a4     C4 EA BE FD | 	call	#_fprintf
132a8     08 F0 87 F1 | 	sub	ptra, #8
132ac     A8 F0 03 F6 | 	mov	ptra, fp
132b0     B3 00 A0 FD | 	call	#popregs_
132b4                 | _int_to_json_0641_ret
132b4     2D 00 64 FD | 	ret
132b8                 | 
132b8                 | _string_to_json_0642
132b8     03 4C 05 F6 | 	mov	COUNT_, #3
132bc     A9 00 A0 FD | 	call	#pushregs_
132c0     4E 01 00 FF 
132c4     FB 8C 06 F6 | 	mov	local01, ##@LR__2091
132c8     3B 8F 02 F6 | 	mov	local02, arg02
132cc     3C 91 02 F6 | 	mov	local03, arg03
132d0     46 77 02 F6 | 	mov	arg02, local01
132d4     F8 79 02 F6 | 	mov	arg03, ptra
132d8     61 8F 66 FC | 	wrlong	local02, ptra++
132dc     61 91 66 FC | 	wrlong	local03, ptra++
132e0     88 EA BE FD | 	call	#_fprintf
132e4     08 F0 87 F1 | 	sub	ptra, #8
132e8     A8 F0 03 F6 | 	mov	ptra, fp
132ec     B3 00 A0 FD | 	call	#popregs_
132f0                 | _string_to_json_0642_ret
132f0     2D 00 64 FD | 	ret
132f4                 | 
132f4                 | _json_property_to_string_0644
132f4     02 4C 05 F6 | 	mov	COUNT_, #2
132f8     A9 00 A0 FD | 	call	#pushregs_
132fc     3B 8D 02 F6 | 	mov	local01, arg02
13300     A8 2E BF FD | 	call	#_json_getProperty
13304     1A 8F 0A F6 | 	mov	local02, result1 wz
13308     64 00 90 5D |  if_ne	jmp	#LR__0508
1330c     00 74 06 F6 | 	mov	arg01, #0
13310     34 58 B1 FD | 	call	#__system___getiolock_1205
13314     1A 75 02 F6 | 	mov	arg01, result1
13318     04 20 B1 FD | 	call	#__system___lockmem
1331c     4E 01 00 FF 
13320     05 77 06 F6 | 	mov	arg02, ##@LR__2092
13324     00 74 06 F6 | 	mov	arg01, #0
13328     00 78 06 F6 | 	mov	arg03, #0
1332c     84 25 B1 FD | 	call	#__system___basic_print_string
13330     00 74 06 F6 | 	mov	arg01, #0
13334     46 77 02 F6 | 	mov	arg02, local01
13338     00 78 06 F6 | 	mov	arg03, #0
1333c     74 25 B1 FD | 	call	#__system___basic_print_string
13340     4E 01 00 FF 
13344     11 77 06 F6 | 	mov	arg02, ##@LR__2093
13348     00 74 06 F6 | 	mov	arg01, #0
1334c     00 78 06 F6 | 	mov	arg03, #0
13350     60 25 B1 FD | 	call	#__system___basic_print_string
13354     00 74 06 F6 | 	mov	arg01, #0
13358     0A 76 06 F6 | 	mov	arg02, #10
1335c     00 78 06 F6 | 	mov	arg03, #0
13360     04 25 B1 FD | 	call	#__system___basic_print_char
13364     00 74 06 F6 | 	mov	arg01, #0
13368     DC 57 B1 FD | 	call	#__system___getiolock_1205
1336c     1A 01 68 FC | 	wrlong	#0, result1
13370                 | LR__0508
13370                 | '     }
13370                 | '     return json_getValue(property);
13370                 | ' {
13370                 | '     return property->u.value;
13370     08 8E 06 F1 | 	add	local02, #8
13374     47 35 02 FB | 	rdlong	result1, local02
13378     A8 F0 03 F6 | 	mov	ptra, fp
1337c     B3 00 A0 FD | 	call	#popregs_
13380                 | _json_property_to_string_0644_ret
13380     2D 00 64 FD | 	ret
13384                 | 
13384                 | _json_property_to_int_0646
13384     02 4C 05 F6 | 	mov	COUNT_, #2
13388     A9 00 A0 FD | 	call	#pushregs_
1338c     3B 8D 02 F6 | 	mov	local01, arg02
13390     18 2E BF FD | 	call	#_json_getProperty
13394     1A 8F 0A F6 | 	mov	local02, result1 wz
13398     14 00 90 AD |  if_e	jmp	#LR__0509
1339c     47 75 02 F6 | 	mov	arg01, local02
133a0                 | ' {
133a0                 | '     return json->type;
133a0     10 74 06 F1 | 	add	arg01, #16
133a4     3A 35 02 FB | 	rdlong	result1, arg01
133a8     04 34 0E F2 | 	cmp	result1, #4 wz
133ac     64 00 90 AD |  if_e	jmp	#LR__0510
133b0                 | LR__0509
133b0     00 74 06 F6 | 	mov	arg01, #0
133b4     90 57 B1 FD | 	call	#__system___getiolock_1205
133b8     1A 75 02 F6 | 	mov	arg01, result1
133bc     60 1F B1 FD | 	call	#__system___lockmem
133c0     4E 01 00 FF 
133c4     29 77 06 F6 | 	mov	arg02, ##@LR__2094
133c8     00 74 06 F6 | 	mov	arg01, #0
133cc     00 78 06 F6 | 	mov	arg03, #0
133d0     E0 24 B1 FD | 	call	#__system___basic_print_string
133d4     00 74 06 F6 | 	mov	arg01, #0
133d8     46 77 02 F6 | 	mov	arg02, local01
133dc     00 78 06 F6 | 	mov	arg03, #0
133e0     D0 24 B1 FD | 	call	#__system___basic_print_string
133e4     4E 01 00 FF 
133e8     35 77 06 F6 | 	mov	arg02, ##@LR__2095
133ec     00 74 06 F6 | 	mov	arg01, #0
133f0     00 78 06 F6 | 	mov	arg03, #0
133f4     BC 24 B1 FD | 	call	#__system___basic_print_string
133f8     00 74 06 F6 | 	mov	arg01, #0
133fc     0A 76 06 F6 | 	mov	arg02, #10
13400     00 78 06 F6 | 	mov	arg03, #0
13404     60 24 B1 FD | 	call	#__system___basic_print_char
13408     00 74 06 F6 | 	mov	arg01, #0
1340c     38 57 B1 FD | 	call	#__system___getiolock_1205
13410     1A 01 68 FC | 	wrlong	#0, result1
13414                 | LR__0510
13414                 | '     }
13414                 | '     return (int)json_getInteger(property);
13414     47 75 02 F6 | 	mov	arg01, local02
13418                 | ' {
13418                 | '     return atoi(property->u.value);
13418     08 74 06 F1 | 	add	arg01, #8
1341c     3A 75 02 FB | 	rdlong	arg01, arg01
13420                 | ' {
13420                 | '   return (int)atol(str);
13420     E0 EC BE FD | 	call	#_atol
13424     A8 F0 03 F6 | 	mov	ptra, fp
13428     B3 00 A0 FD | 	call	#popregs_
1342c                 | _json_property_to_int_0646_ret
1342c     2D 00 64 FD | 	ret
13430                 | 
13430                 | _json_property_to_double_0648
13430     02 4C 05 F6 | 	mov	COUNT_, #2
13434     A9 00 A0 FD | 	call	#pushregs_
13438     3B 8D 02 F6 | 	mov	local01, arg02
1343c     6C 2D BF FD | 	call	#_json_getProperty
13440     1A 8F 0A F6 | 	mov	local02, result1 wz
13444     14 00 90 AD |  if_e	jmp	#LR__0511
13448     47 75 02 F6 | 	mov	arg01, local02
1344c                 | ' {
1344c                 | '     return json->type;
1344c     10 74 06 F1 | 	add	arg01, #16
13450     3A 35 02 FB | 	rdlong	result1, arg01
13454     05 34 0E F2 | 	cmp	result1, #5 wz
13458     54 00 90 AD |  if_e	jmp	#LR__0512
1345c                 | LR__0511
1345c     00 74 06 F6 | 	mov	arg01, #0
13460     E4 56 B1 FD | 	call	#__system___getiolock_1205
13464     1A 75 02 F6 | 	mov	arg01, result1
13468     B4 1E B1 FD | 	call	#__system___lockmem
1346c     4E 01 00 FF 
13470     4D 77 06 F6 | 	mov	arg02, ##@LR__2096
13474     00 74 06 F6 | 	mov	arg01, #0
13478     00 78 06 F6 | 	mov	arg03, #0
1347c     34 24 B1 FD | 	call	#__system___basic_print_string
13480     00 74 06 F6 | 	mov	arg01, #0
13484     46 77 02 F6 | 	mov	arg02, local01
13488     00 78 06 F6 | 	mov	arg03, #0
1348c     24 24 B1 FD | 	call	#__system___basic_print_string
13490     4E 01 00 FF 
13494     59 77 06 F6 | 	mov	arg02, ##@LR__2097
13498     00 74 06 F6 | 	mov	arg01, #0
1349c     00 78 06 F6 | 	mov	arg03, #0
134a0     10 24 B1 FD | 	call	#__system___basic_print_string
134a4     00 74 06 F6 | 	mov	arg01, #0
134a8     9C 56 B1 FD | 	call	#__system___getiolock_1205
134ac     1A 01 68 FC | 	wrlong	#0, result1
134b0                 | LR__0512
134b0                 | '     }
134b0                 | '     return json_getReal(property);
134b0     47 75 02 F6 | 	mov	arg01, local02
134b4                 | ' {
134b4                 | '     return atof(property->u.value);
134b4     08 74 06 F1 | 	add	arg01, #8
134b8     3A 75 02 FB | 	rdlong	arg01, arg01
134bc     AC E3 BF FD | 	call	#_atof
134c0     A8 F0 03 F6 | 	mov	ptra, fp
134c4     B3 00 A0 FD | 	call	#popregs_
134c8                 | _json_property_to_double_0648_ret
134c8     2D 00 64 FD | 	ret
134cc                 | 
134cc                 | _json_property_to_double_array_0652
134cc     04 4C 05 F6 | 	mov	COUNT_, #4
134d0     A9 00 A0 FD | 	call	#pushregs_
134d4     3A 8D 02 F6 | 	mov	local01, arg01
134d8     3B 75 02 F6 | 	mov	arg01, arg02
134dc     3C 77 02 F6 | 	mov	arg02, arg03
134e0     C8 2C BF FD | 	call	#_json_getProperty
134e4     00 8E 06 F6 | 	mov	local02, #0
134e8                 | ' {
134e8                 | '     return json->u.c.child;
134e8     08 34 06 F1 | 	add	result1, #8
134ec     1A 35 02 FB | 	rdlong	result1, result1
134f0     1A 91 0A F6 | 	mov	local03, result1 wz
134f4                 | '     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
134f4     A4 00 90 AD |  if_e	jmp	#LR__0514
134f8                 | LR__0513
134f8     47 93 02 F6 | 	mov	local04, local02
134fc     02 92 66 F0 | 	shl	local04, #2
13500     46 93 02 F1 | 	add	local04, local01
13504     48 75 02 F6 | 	mov	arg01, local03
13508                 | ' {
13508                 | '     return atof(property->u.value);
13508     08 74 06 F1 | 	add	arg01, #8
1350c     3A 75 02 FB | 	rdlong	arg01, arg01
13510     58 E3 BF FD | 	call	#_atof
13514     49 35 62 FC | 	wrlong	result1, local04
13518     00 74 06 F6 | 	mov	arg01, #0
1351c     28 56 B1 FD | 	call	#__system___getiolock_1205
13520     1A 75 02 F6 | 	mov	arg01, result1
13524     F8 1D B1 FD | 	call	#__system___lockmem
13528     4E 01 00 FF 
1352c     71 77 06 F6 | 	mov	arg02, ##@LR__2098
13530     00 74 06 F6 | 	mov	arg01, #0
13534     00 78 06 F6 | 	mov	arg03, #0
13538     78 23 B1 FD | 	call	#__system___basic_print_string
1353c     47 93 02 F6 | 	mov	local04, local02
13540     02 92 66 F0 | 	shl	local04, #2
13544     46 93 02 F1 | 	add	local04, local01
13548     49 77 02 FB | 	rdlong	arg02, local04
1354c     00 74 06 F6 | 	mov	arg01, #0
13550     00 78 06 F6 | 	mov	arg03, #0
13554     66 7A 06 F6 | 	mov	arg04, #102
13558     8C 41 B1 FD | 	call	#__system___basic_print_float
1355c     4E 01 00 FF 
13560     78 77 06 F6 | 	mov	arg02, ##@LR__2099
13564     00 74 06 F6 | 	mov	arg01, #0
13568     00 78 06 F6 | 	mov	arg03, #0
1356c     44 23 B1 FD | 	call	#__system___basic_print_string
13570     00 74 06 F6 | 	mov	arg01, #0
13574     0A 76 06 F6 | 	mov	arg02, #10
13578     00 78 06 F6 | 	mov	arg03, #0
1357c     E8 22 B1 FD | 	call	#__system___basic_print_char
13580     00 74 06 F6 | 	mov	arg01, #0
13584     C0 55 B1 FD | 	call	#__system___getiolock_1205
13588     1A 01 68 FC | 	wrlong	#0, result1
1358c     01 8E 06 F1 | 	add	local02, #1
13590                 | ' {
13590                 | '     return json->sibling;
13590     48 35 02 FB | 	rdlong	result1, local03
13594     1A 91 0A F6 | 	mov	local03, result1 wz
13598     5C FF 9F 5D |  if_ne	jmp	#LR__0513
1359c                 | LR__0514
1359c                 | '         index++;
1359c                 | '     }
1359c                 | ' 
1359c                 | '     return index;
1359c     47 35 02 F6 | 	mov	result1, local02
135a0     A8 F0 03 F6 | 	mov	ptra, fp
135a4     B3 00 A0 FD | 	call	#popregs_
135a8                 | _json_property_to_double_array_0652_ret
135a8     2D 00 64 FD | 	ret
135ac                 | 
135ac                 | _json_to_machine_configuration_0658
135ac     02 4C 05 F6 | 	mov	COUNT_, #2
135b0     A9 00 A0 FD | 	call	#pushregs_
135b4     3A 8D 02 F6 | 	mov	local01, arg01
135b8     3B 8F 02 F6 | 	mov	local02, arg02
135bc     4E 01 00 FF 
135c0     7A 77 06 F6 | 	mov	arg02, ##@LR__2100
135c4     46 75 02 F6 | 	mov	arg01, local01
135c8     28 FD BF FD | 	call	#_json_property_to_string_0644
135cc     1A 77 02 F6 | 	mov	arg02, result1
135d0     47 75 02 F6 | 	mov	arg01, local02
135d4     14 78 06 F6 | 	mov	arg03, #20
135d8     A0 28 BF FD | 	call	#_strncpy
135dc     4E 01 00 FF 
135e0     85 77 06 F6 | 	mov	arg02, ##@LR__2101
135e4     46 75 02 F6 | 	mov	arg01, local01
135e8     44 FE BF FD | 	call	#_json_property_to_double_0648
135ec     18 8E 06 F1 | 	add	local02, #24
135f0     47 35 62 FC | 	wrlong	result1, local02
135f4     4E 01 00 FF 
135f8     93 77 06 F6 | 	mov	arg02, ##@LR__2102
135fc     46 75 02 F6 | 	mov	arg01, local01
13600     2C FE BF FD | 	call	#_json_property_to_double_0648
13604     04 8E 86 F1 | 	sub	local02, #4
13608     47 35 62 FC | 	wrlong	result1, local02
1360c     4E 01 00 FF 
13610     A4 77 06 F6 | 	mov	arg02, ##@LR__2103
13614     46 75 02 F6 | 	mov	arg01, local01
13618     14 FE BF FD | 	call	#_json_property_to_double_0648
1361c     08 8E 06 F1 | 	add	local02, #8
13620     47 35 62 FC | 	wrlong	result1, local02
13624     4E 01 00 FF 
13628     B2 77 06 F6 | 	mov	arg02, ##@LR__2104
1362c     46 75 02 F6 | 	mov	arg01, local01
13630     FC FD BF FD | 	call	#_json_property_to_double_0648
13634     04 8E 06 F1 | 	add	local02, #4
13638     47 35 62 FC | 	wrlong	result1, local02
1363c     4E 01 00 FF 
13640     BD 77 06 F6 | 	mov	arg02, ##@LR__2105
13644     46 75 02 F6 | 	mov	arg01, local01
13648     E4 FD BF FD | 	call	#_json_property_to_double_0648
1364c     04 8E 06 F1 | 	add	local02, #4
13650     47 35 62 FC | 	wrlong	result1, local02
13654     4E 01 00 FF 
13658     CD 77 06 F6 | 	mov	arg02, ##@LR__2106
1365c     46 75 02 F6 | 	mov	arg01, local01
13660     CC FD BF FD | 	call	#_json_property_to_double_0648
13664     04 8E 06 F1 | 	add	local02, #4
13668     47 35 62 FC | 	wrlong	result1, local02
1366c     4E 01 00 FF 
13670     DB 77 06 F6 | 	mov	arg02, ##@LR__2107
13674     46 75 02 F6 | 	mov	arg01, local01
13678     B4 FD BF FD | 	call	#_json_property_to_double_0648
1367c     04 8E 06 F1 | 	add	local02, #4
13680     47 35 62 FC | 	wrlong	result1, local02
13684     04 8E 06 F1 | 	add	local02, #4
13688     4E 01 00 FF 
1368c     E0 77 06 F6 | 	mov	arg02, ##@LR__2108
13690     46 75 02 F6 | 	mov	arg01, local01
13694     5C FC BF FD | 	call	#_json_property_to_string_0644
13698     1A 77 02 F6 | 	mov	arg02, result1
1369c     47 75 02 F6 | 	mov	arg01, local02
136a0     14 78 06 F6 | 	mov	arg03, #20
136a4     D4 27 BF FD | 	call	#_strncpy
136a8     4E 01 00 FF 
136ac     F6 77 06 F6 | 	mov	arg02, ##@LR__2109
136b0     46 75 02 F6 | 	mov	arg01, local01
136b4     78 FD BF FD | 	call	#_json_property_to_double_0648
136b8     14 8E 06 F1 | 	add	local02, #20
136bc     47 35 62 FC | 	wrlong	result1, local02
136c0     04 8E 06 F1 | 	add	local02, #4
136c4     4F 01 00 FF 
136c8     14 76 06 F6 | 	mov	arg02, ##@LR__2110
136cc     46 75 02 F6 | 	mov	arg01, local01
136d0     20 FC BF FD | 	call	#_json_property_to_string_0644
136d4     1A 77 02 F6 | 	mov	arg02, result1
136d8     47 75 02 F6 | 	mov	arg01, local02
136dc     14 78 06 F6 | 	mov	arg03, #20
136e0     98 27 BF FD | 	call	#_strncpy
136e4     4F 01 00 FF 
136e8     20 76 06 F6 | 	mov	arg02, ##@LR__2111
136ec     46 75 02 F6 | 	mov	arg01, local01
136f0     3C FD BF FD | 	call	#_json_property_to_double_0648
136f4     14 8E 06 F1 | 	add	local02, #20
136f8     47 35 62 FC | 	wrlong	result1, local02
136fc     4F 01 00 FF 
13700     39 76 06 F6 | 	mov	arg02, ##@LR__2112
13704     46 75 02 F6 | 	mov	arg01, local01
13708     78 FC BF FD | 	call	#_json_property_to_int_0646
1370c     04 8E 06 F1 | 	add	local02, #4
13710     47 35 62 FC | 	wrlong	result1, local02
13714     A8 F0 03 F6 | 	mov	ptra, fp
13718     B3 00 A0 FD | 	call	#popregs_
1371c                 | _json_to_machine_configuration_0658_ret
1371c     2D 00 64 FD | 	ret
13720                 | 
13720                 | _json_to_machine_performance_0659
13720     02 4C 05 F6 | 	mov	COUNT_, #2
13724     A9 00 A0 FD | 	call	#pushregs_
13728     3A 8D 02 F6 | 	mov	local01, arg01
1372c     3B 8F 02 F6 | 	mov	local02, arg02
13730     4F 01 00 FF 
13734     51 76 06 F6 | 	mov	arg02, ##@LR__2113
13738     46 75 02 F6 | 	mov	arg01, local01
1373c     F0 FC BF FD | 	call	#_json_property_to_double_0648
13740     47 35 62 FC | 	wrlong	result1, local02
13744     4F 01 00 FF 
13748     62 76 06 F6 | 	mov	arg02, ##@LR__2114
1374c     46 75 02 F6 | 	mov	arg01, local01
13750     DC FC BF FD | 	call	#_json_property_to_double_0648
13754     04 8E 06 F1 | 	add	local02, #4
13758     47 35 62 FC | 	wrlong	result1, local02
1375c     4F 01 00 FF 
13760     73 76 06 F6 | 	mov	arg02, ##@LR__2115
13764     46 75 02 F6 | 	mov	arg01, local01
13768     C4 FC BF FD | 	call	#_json_property_to_double_0648
1376c     04 8E 06 F1 | 	add	local02, #4
13770     47 35 62 FC | 	wrlong	result1, local02
13774     4F 01 00 FF 
13778     84 76 06 F6 | 	mov	arg02, ##@LR__2116
1377c     46 75 02 F6 | 	mov	arg01, local01
13780     AC FC BF FD | 	call	#_json_property_to_double_0648
13784     04 8E 06 F1 | 	add	local02, #4
13788     47 35 62 FC | 	wrlong	result1, local02
1378c     4F 01 00 FF 
13790     99 76 06 F6 | 	mov	arg02, ##@LR__2117
13794     46 75 02 F6 | 	mov	arg01, local01
13798     94 FC BF FD | 	call	#_json_property_to_double_0648
1379c     04 8E 06 F1 | 	add	local02, #4
137a0     47 35 62 FC | 	wrlong	result1, local02
137a4     4F 01 00 FF 
137a8     AF 76 06 F6 | 	mov	arg02, ##@LR__2118
137ac     46 75 02 F6 | 	mov	arg01, local01
137b0     7C FC BF FD | 	call	#_json_property_to_double_0648
137b4     04 8E 06 F1 | 	add	local02, #4
137b8     47 35 62 FC | 	wrlong	result1, local02
137bc     4F 01 00 FF 
137c0     C9 76 06 F6 | 	mov	arg02, ##@LR__2119
137c4     46 75 02 F6 | 	mov	arg01, local01
137c8     64 FC BF FD | 	call	#_json_property_to_double_0648
137cc     04 8E 06 F1 | 	add	local02, #4
137d0     47 35 62 FC | 	wrlong	result1, local02
137d4     A8 F0 03 F6 | 	mov	ptra, fp
137d8     B3 00 A0 FD | 	call	#popregs_
137dc                 | _json_to_machine_performance_0659_ret
137dc     2D 00 64 FD | 	ret
137e0                 | 
137e0                 | _machine_configuration_to_json_0660
137e0     02 4C 05 F6 | 	mov	COUNT_, #2
137e4     A9 00 A0 FD | 	call	#pushregs_
137e8     3A 8D 02 F6 | 	mov	local01, arg01
137ec     3B 8F 02 F6 | 	mov	local02, arg02
137f0     4F 01 00 FF 
137f4     E4 76 06 F6 | 	mov	arg02, ##@LR__2120
137f8     46 75 02 F6 | 	mov	arg01, local01
137fc     6C E5 BE FD | 	call	#_fprintf
13800     4F 01 00 FF 
13804     F6 76 06 F6 | 	mov	arg02, ##@LR__2121
13808     46 75 02 F6 | 	mov	arg01, local01
1380c     47 79 02 F6 | 	mov	arg03, local02
13810     A4 FA BF FD | 	call	#_string_to_json_0642
13814     4F 01 00 FF 
13818     01 77 06 F6 | 	mov	arg02, ##@LR__2122
1381c     46 75 02 F6 | 	mov	arg01, local01
13820     48 E5 BE FD | 	call	#_fprintf
13824     4F 01 00 FF 
13828     03 77 06 F6 | 	mov	arg02, ##@LR__2123
1382c     18 8E 06 F1 | 	add	local02, #24
13830     47 79 02 FB | 	rdlong	arg03, local02
13834     46 75 02 F6 | 	mov	arg01, local01
13838     04 FA BF FD | 	call	#_double_to_json_0640
1383c     4F 01 00 FF 
13840     11 77 06 F6 | 	mov	arg02, ##@LR__2124
13844     46 75 02 F6 | 	mov	arg01, local01
13848     20 E5 BE FD | 	call	#_fprintf
1384c     4F 01 00 FF 
13850     13 77 06 F6 | 	mov	arg02, ##@LR__2125
13854     04 8E 86 F1 | 	sub	local02, #4
13858     47 79 02 FB | 	rdlong	arg03, local02
1385c     46 75 02 F6 | 	mov	arg01, local01
13860     DC F9 BF FD | 	call	#_double_to_json_0640
13864     4F 01 00 FF 
13868     24 77 06 F6 | 	mov	arg02, ##@LR__2126
1386c     46 75 02 F6 | 	mov	arg01, local01
13870     F8 E4 BE FD | 	call	#_fprintf
13874     4F 01 00 FF 
13878     26 77 06 F6 | 	mov	arg02, ##@LR__2127
1387c     08 8E 06 F1 | 	add	local02, #8
13880     47 79 02 FB | 	rdlong	arg03, local02
13884     46 75 02 F6 | 	mov	arg01, local01
13888     B4 F9 BF FD | 	call	#_double_to_json_0640
1388c     4F 01 00 FF 
13890     34 77 06 F6 | 	mov	arg02, ##@LR__2128
13894     46 75 02 F6 | 	mov	arg01, local01
13898     D0 E4 BE FD | 	call	#_fprintf
1389c     4F 01 00 FF 
138a0     36 77 06 F6 | 	mov	arg02, ##@LR__2129
138a4     04 8E 06 F1 | 	add	local02, #4
138a8     47 79 02 FB | 	rdlong	arg03, local02
138ac     46 75 02 F6 | 	mov	arg01, local01
138b0     8C F9 BF FD | 	call	#_double_to_json_0640
138b4     4F 01 00 FF 
138b8     41 77 06 F6 | 	mov	arg02, ##@LR__2130
138bc     46 75 02 F6 | 	mov	arg01, local01
138c0     A8 E4 BE FD | 	call	#_fprintf
138c4     4F 01 00 FF 
138c8     43 77 06 F6 | 	mov	arg02, ##@LR__2131
138cc     04 8E 06 F1 | 	add	local02, #4
138d0     47 79 02 FB | 	rdlong	arg03, local02
138d4     46 75 02 F6 | 	mov	arg01, local01
138d8     64 F9 BF FD | 	call	#_double_to_json_0640
138dc     4F 01 00 FF 
138e0     53 77 06 F6 | 	mov	arg02, ##@LR__2132
138e4     46 75 02 F6 | 	mov	arg01, local01
138e8     80 E4 BE FD | 	call	#_fprintf
138ec     4F 01 00 FF 
138f0     55 77 06 F6 | 	mov	arg02, ##@LR__2133
138f4     04 8E 06 F1 | 	add	local02, #4
138f8     47 79 02 FB | 	rdlong	arg03, local02
138fc     46 75 02 F6 | 	mov	arg01, local01
13900     3C F9 BF FD | 	call	#_double_to_json_0640
13904     4F 01 00 FF 
13908     63 77 06 F6 | 	mov	arg02, ##@LR__2134
1390c     46 75 02 F6 | 	mov	arg01, local01
13910     58 E4 BE FD | 	call	#_fprintf
13914     4F 01 00 FF 
13918     65 77 06 F6 | 	mov	arg02, ##@LR__2135
1391c     04 8E 06 F1 | 	add	local02, #4
13920     47 79 02 FB | 	rdlong	arg03, local02
13924     46 75 02 F6 | 	mov	arg01, local01
13928     14 F9 BF FD | 	call	#_double_to_json_0640
1392c     4F 01 00 FF 
13930     6A 77 06 F6 | 	mov	arg02, ##@LR__2136
13934     46 75 02 F6 | 	mov	arg01, local01
13938     30 E4 BE FD | 	call	#_fprintf
1393c     4F 01 00 FF 
13940     6C 77 06 F6 | 	mov	arg02, ##@LR__2137
13944     04 8E 06 F1 | 	add	local02, #4
13948     47 79 02 F6 | 	mov	arg03, local02
1394c     46 75 02 F6 | 	mov	arg01, local01
13950     64 F9 BF FD | 	call	#_string_to_json_0642
13954     4F 01 00 FF 
13958     82 77 06 F6 | 	mov	arg02, ##@LR__2138
1395c     46 75 02 F6 | 	mov	arg01, local01
13960     08 E4 BE FD | 	call	#_fprintf
13964     4F 01 00 FF 
13968     84 77 06 F6 | 	mov	arg02, ##@LR__2139
1396c     14 8E 06 F1 | 	add	local02, #20
13970     47 79 02 FB | 	rdlong	arg03, local02
13974     46 75 02 F6 | 	mov	arg01, local01
13978     C4 F8 BF FD | 	call	#_double_to_json_0640
1397c     4F 01 00 FF 
13980     A2 77 06 F6 | 	mov	arg02, ##@LR__2140
13984     46 75 02 F6 | 	mov	arg01, local01
13988     E0 E3 BE FD | 	call	#_fprintf
1398c     4F 01 00 FF 
13990     A4 77 06 F6 | 	mov	arg02, ##@LR__2141
13994     04 8E 06 F1 | 	add	local02, #4
13998     47 79 02 F6 | 	mov	arg03, local02
1399c     46 75 02 F6 | 	mov	arg01, local01
139a0     14 F9 BF FD | 	call	#_string_to_json_0642
139a4     4F 01 00 FF 
139a8     B0 77 06 F6 | 	mov	arg02, ##@LR__2142
139ac     46 75 02 F6 | 	mov	arg01, local01
139b0     B8 E3 BE FD | 	call	#_fprintf
139b4     4F 01 00 FF 
139b8     B2 77 06 F6 | 	mov	arg02, ##@LR__2143
139bc     14 8E 06 F1 | 	add	local02, #20
139c0     47 79 02 FB | 	rdlong	arg03, local02
139c4     46 75 02 F6 | 	mov	arg01, local01
139c8     74 F8 BF FD | 	call	#_double_to_json_0640
139cc     4F 01 00 FF 
139d0     CB 77 06 F6 | 	mov	arg02, ##@LR__2144
139d4     46 75 02 F6 | 	mov	arg01, local01
139d8     90 E3 BE FD | 	call	#_fprintf
139dc     4F 01 00 FF 
139e0     CD 77 06 F6 | 	mov	arg02, ##@LR__2145
139e4     04 8E 06 F1 | 	add	local02, #4
139e8     47 79 02 FB | 	rdlong	arg03, local02
139ec     46 75 02 F6 | 	mov	arg01, local01
139f0     88 F8 BF FD | 	call	#_int_to_json_0641
139f4     4F 01 00 FF 
139f8     E5 77 06 F6 | 	mov	arg02, ##@LR__2146
139fc     46 75 02 F6 | 	mov	arg01, local01
13a00     68 E3 BE FD | 	call	#_fprintf
13a04     A8 F0 03 F6 | 	mov	ptra, fp
13a08     B3 00 A0 FD | 	call	#popregs_
13a0c                 | _machine_configuration_to_json_0660_ret
13a0c     2D 00 64 FD | 	ret
13a10                 | 
13a10                 | _machine_performance_to_json_0661
13a10     02 4C 05 F6 | 	mov	COUNT_, #2
13a14     A9 00 A0 FD | 	call	#pushregs_
13a18     3A 8D 02 F6 | 	mov	local01, arg01
13a1c     3B 8F 02 F6 | 	mov	local02, arg02
13a20     4F 01 00 FF 
13a24     E7 77 06 F6 | 	mov	arg02, ##@LR__2147
13a28     46 75 02 F6 | 	mov	arg01, local01
13a2c     3C E3 BE FD | 	call	#_fprintf
13a30     4F 01 00 FF 
13a34     F7 77 06 F6 | 	mov	arg02, ##@LR__2148
13a38     47 79 02 FB | 	rdlong	arg03, local02
13a3c     46 75 02 F6 | 	mov	arg01, local01
13a40     FC F7 BF FD | 	call	#_double_to_json_0640
13a44     50 01 00 FF 
13a48     08 76 06 F6 | 	mov	arg02, ##@LR__2149
13a4c     46 75 02 F6 | 	mov	arg01, local01
13a50     18 E3 BE FD | 	call	#_fprintf
13a54     50 01 00 FF 
13a58     0A 76 06 F6 | 	mov	arg02, ##@LR__2150
13a5c     04 8E 06 F1 | 	add	local02, #4
13a60     47 79 02 FB | 	rdlong	arg03, local02
13a64     46 75 02 F6 | 	mov	arg01, local01
13a68     D4 F7 BF FD | 	call	#_double_to_json_0640
13a6c     50 01 00 FF 
13a70     1B 76 06 F6 | 	mov	arg02, ##@LR__2151
13a74     46 75 02 F6 | 	mov	arg01, local01
13a78     F0 E2 BE FD | 	call	#_fprintf
13a7c     50 01 00 FF 
13a80     1D 76 06 F6 | 	mov	arg02, ##@LR__2152
13a84     04 8E 06 F1 | 	add	local02, #4
13a88     47 79 02 FB | 	rdlong	arg03, local02
13a8c     46 75 02 F6 | 	mov	arg01, local01
13a90     AC F7 BF FD | 	call	#_double_to_json_0640
13a94     50 01 00 FF 
13a98     2E 76 06 F6 | 	mov	arg02, ##@LR__2153
13a9c     46 75 02 F6 | 	mov	arg01, local01
13aa0     C8 E2 BE FD | 	call	#_fprintf
13aa4     50 01 00 FF 
13aa8     30 76 06 F6 | 	mov	arg02, ##@LR__2154
13aac     04 8E 06 F1 | 	add	local02, #4
13ab0     47 79 02 FB | 	rdlong	arg03, local02
13ab4     46 75 02 F6 | 	mov	arg01, local01
13ab8     84 F7 BF FD | 	call	#_double_to_json_0640
13abc     50 01 00 FF 
13ac0     45 76 06 F6 | 	mov	arg02, ##@LR__2155
13ac4     46 75 02 F6 | 	mov	arg01, local01
13ac8     A0 E2 BE FD | 	call	#_fprintf
13acc     50 01 00 FF 
13ad0     47 76 06 F6 | 	mov	arg02, ##@LR__2156
13ad4     04 8E 06 F1 | 	add	local02, #4
13ad8     47 79 02 FB | 	rdlong	arg03, local02
13adc     46 75 02 F6 | 	mov	arg01, local01
13ae0     5C F7 BF FD | 	call	#_double_to_json_0640
13ae4     50 01 00 FF 
13ae8     5D 76 06 F6 | 	mov	arg02, ##@LR__2157
13aec     46 75 02 F6 | 	mov	arg01, local01
13af0     78 E2 BE FD | 	call	#_fprintf
13af4     50 01 00 FF 
13af8     5F 76 06 F6 | 	mov	arg02, ##@LR__2158
13afc     04 8E 06 F1 | 	add	local02, #4
13b00     47 79 02 FB | 	rdlong	arg03, local02
13b04     46 75 02 F6 | 	mov	arg01, local01
13b08     34 F7 BF FD | 	call	#_double_to_json_0640
13b0c     50 01 00 FF 
13b10     79 76 06 F6 | 	mov	arg02, ##@LR__2159
13b14     46 75 02 F6 | 	mov	arg01, local01
13b18     50 E2 BE FD | 	call	#_fprintf
13b1c     50 01 00 FF 
13b20     7B 76 06 F6 | 	mov	arg02, ##@LR__2160
13b24     04 8E 06 F1 | 	add	local02, #4
13b28     47 79 02 FB | 	rdlong	arg03, local02
13b2c     46 75 02 F6 | 	mov	arg01, local01
13b30     0C F7 BF FD | 	call	#_double_to_json_0640
13b34     50 01 00 FF 
13b38     96 76 06 F6 | 	mov	arg02, ##@LR__2161
13b3c     46 75 02 F6 | 	mov	arg01, local01
13b40     28 E2 BE FD | 	call	#_fprintf
13b44     A8 F0 03 F6 | 	mov	ptra, fp
13b48     B3 00 A0 FD | 	call	#popregs_
13b4c                 | _machine_performance_to_json_0661_ret
13b4c     2D 00 64 FD | 	ret
13b50                 | 
13b50                 | _json_print_machine_configuration_0675
13b50     01 4C 05 F6 | 	mov	COUNT_, #1
13b54     A9 00 A0 FD | 	call	#pushregs_
13b58     3A 8D 02 F6 | 	mov	local01, arg01
13b5c     00 74 06 F6 | 	mov	arg01, #0
13b60     E4 4F B1 FD | 	call	#__system___getiolock_1205
13b64     1A 75 02 F6 | 	mov	arg01, result1
13b68     B4 17 B1 FD | 	call	#__system___lockmem
13b6c     50 01 00 FF 
13b70     98 76 06 F6 | 	mov	arg02, ##@LR__2162
13b74     00 74 06 F6 | 	mov	arg01, #0
13b78     00 78 06 F6 | 	mov	arg03, #0
13b7c     34 1D B1 FD | 	call	#__system___basic_print_string
13b80     00 74 06 F6 | 	mov	arg01, #0
13b84     0A 76 06 F6 | 	mov	arg02, #10
13b88     00 78 06 F6 | 	mov	arg03, #0
13b8c     D8 1C B1 FD | 	call	#__system___basic_print_char
13b90     00 74 06 F6 | 	mov	arg01, #0
13b94     B0 4F B1 FD | 	call	#__system___getiolock_1205
13b98     1A 01 68 FC | 	wrlong	#0, result1
13b9c     00 74 06 F6 | 	mov	arg01, #0
13ba0     A4 4F B1 FD | 	call	#__system___getiolock_1205
13ba4     1A 75 02 F6 | 	mov	arg01, result1
13ba8     74 17 B1 FD | 	call	#__system___lockmem
13bac     50 01 00 FF 
13bb0     AF 76 06 F6 | 	mov	arg02, ##@LR__2163
13bb4     00 74 06 F6 | 	mov	arg01, #0
13bb8     00 78 06 F6 | 	mov	arg03, #0
13bbc     F4 1C B1 FD | 	call	#__system___basic_print_string
13bc0     00 74 06 F6 | 	mov	arg01, #0
13bc4     46 77 02 F6 | 	mov	arg02, local01
13bc8     00 78 06 F6 | 	mov	arg03, #0
13bcc     E4 1C B1 FD | 	call	#__system___basic_print_string
13bd0     00 74 06 F6 | 	mov	arg01, #0
13bd4     0A 76 06 F6 | 	mov	arg02, #10
13bd8     00 78 06 F6 | 	mov	arg03, #0
13bdc     88 1C B1 FD | 	call	#__system___basic_print_char
13be0     00 74 06 F6 | 	mov	arg01, #0
13be4     60 4F B1 FD | 	call	#__system___getiolock_1205
13be8     1A 01 68 FC | 	wrlong	#0, result1
13bec     00 74 06 F6 | 	mov	arg01, #0
13bf0     54 4F B1 FD | 	call	#__system___getiolock_1205
13bf4     1A 75 02 F6 | 	mov	arg01, result1
13bf8     24 17 B1 FD | 	call	#__system___lockmem
13bfc     50 01 00 FF 
13c00     C0 76 06 F6 | 	mov	arg02, ##@LR__2164
13c04     00 74 06 F6 | 	mov	arg01, #0
13c08     00 78 06 F6 | 	mov	arg03, #0
13c0c     A4 1C B1 FD | 	call	#__system___basic_print_string
13c10     14 8C 06 F1 | 	add	local01, #20
13c14     46 77 02 FB | 	rdlong	arg02, local01
13c18     00 74 06 F6 | 	mov	arg01, #0
13c1c     00 78 06 F6 | 	mov	arg03, #0
13c20     66 7A 06 F6 | 	mov	arg04, #102
13c24     C0 3A B1 FD | 	call	#__system___basic_print_float
13c28     00 74 06 F6 | 	mov	arg01, #0
13c2c     0A 76 06 F6 | 	mov	arg02, #10
13c30     00 78 06 F6 | 	mov	arg03, #0
13c34     30 1C B1 FD | 	call	#__system___basic_print_char
13c38     00 74 06 F6 | 	mov	arg01, #0
13c3c     08 4F B1 FD | 	call	#__system___getiolock_1205
13c40     1A 01 68 FC | 	wrlong	#0, result1
13c44     00 74 06 F6 | 	mov	arg01, #0
13c48     FC 4E B1 FD | 	call	#__system___getiolock_1205
13c4c     1A 75 02 F6 | 	mov	arg01, result1
13c50     CC 16 B1 FD | 	call	#__system___lockmem
13c54     50 01 00 FF 
13c58     D5 76 06 F6 | 	mov	arg02, ##@LR__2165
13c5c     00 74 06 F6 | 	mov	arg01, #0
13c60     00 78 06 F6 | 	mov	arg03, #0
13c64     4C 1C B1 FD | 	call	#__system___basic_print_string
13c68     04 8C 06 F1 | 	add	local01, #4
13c6c     46 77 02 FB | 	rdlong	arg02, local01
13c70     00 74 06 F6 | 	mov	arg01, #0
13c74     00 78 06 F6 | 	mov	arg03, #0
13c78     66 7A 06 F6 | 	mov	arg04, #102
13c7c     68 3A B1 FD | 	call	#__system___basic_print_float
13c80     00 74 06 F6 | 	mov	arg01, #0
13c84     0A 76 06 F6 | 	mov	arg02, #10
13c88     00 78 06 F6 | 	mov	arg03, #0
13c8c     D8 1B B1 FD | 	call	#__system___basic_print_char
13c90     00 74 06 F6 | 	mov	arg01, #0
13c94     B0 4E B1 FD | 	call	#__system___getiolock_1205
13c98     1A 01 68 FC | 	wrlong	#0, result1
13c9c     00 74 06 F6 | 	mov	arg01, #0
13ca0     A4 4E B1 FD | 	call	#__system___getiolock_1205
13ca4     1A 75 02 F6 | 	mov	arg01, result1
13ca8     74 16 B1 FD | 	call	#__system___lockmem
13cac     50 01 00 FF 
13cb0     E7 76 06 F6 | 	mov	arg02, ##@LR__2166
13cb4     00 74 06 F6 | 	mov	arg01, #0
13cb8     00 78 06 F6 | 	mov	arg03, #0
13cbc     F4 1B B1 FD | 	call	#__system___basic_print_string
13cc0     08 8C 06 F1 | 	add	local01, #8
13cc4     46 77 02 FB | 	rdlong	arg02, local01
13cc8     00 74 06 F6 | 	mov	arg01, #0
13ccc     00 78 06 F6 | 	mov	arg03, #0
13cd0     66 7A 06 F6 | 	mov	arg04, #102
13cd4     10 3A B1 FD | 	call	#__system___basic_print_float
13cd8     00 74 06 F6 | 	mov	arg01, #0
13cdc     0A 76 06 F6 | 	mov	arg02, #10
13ce0     00 78 06 F6 | 	mov	arg03, #0
13ce4     80 1B B1 FD | 	call	#__system___basic_print_char
13ce8     00 74 06 F6 | 	mov	arg01, #0
13cec     58 4E B1 FD | 	call	#__system___getiolock_1205
13cf0     1A 01 68 FC | 	wrlong	#0, result1
13cf4     00 74 06 F6 | 	mov	arg01, #0
13cf8     4C 4E B1 FD | 	call	#__system___getiolock_1205
13cfc     1A 75 02 F6 | 	mov	arg01, result1
13d00     1C 16 B1 FD | 	call	#__system___lockmem
13d04     50 01 00 FF 
13d08     F7 76 06 F6 | 	mov	arg02, ##@LR__2167
13d0c     00 74 06 F6 | 	mov	arg01, #0
13d10     00 78 06 F6 | 	mov	arg03, #0
13d14     9C 1B B1 FD | 	call	#__system___basic_print_string
13d18     04 8C 06 F1 | 	add	local01, #4
13d1c     46 77 02 FB | 	rdlong	arg02, local01
13d20     00 74 06 F6 | 	mov	arg01, #0
13d24     00 78 06 F6 | 	mov	arg03, #0
13d28     66 7A 06 F6 | 	mov	arg04, #102
13d2c     B8 39 B1 FD | 	call	#__system___basic_print_float
13d30     00 74 06 F6 | 	mov	arg01, #0
13d34     0A 76 06 F6 | 	mov	arg02, #10
13d38     00 78 06 F6 | 	mov	arg03, #0
13d3c     28 1B B1 FD | 	call	#__system___basic_print_char
13d40     00 74 06 F6 | 	mov	arg01, #0
13d44     00 4E B1 FD | 	call	#__system___getiolock_1205
13d48     1A 01 68 FC | 	wrlong	#0, result1
13d4c     00 74 06 F6 | 	mov	arg01, #0
13d50     F4 4D B1 FD | 	call	#__system___getiolock_1205
13d54     1A 75 02 F6 | 	mov	arg01, result1
13d58     C4 15 B1 FD | 	call	#__system___lockmem
13d5c     50 01 00 FF 
13d60     0C 77 06 F6 | 	mov	arg02, ##@LR__2168
13d64     00 74 06 F6 | 	mov	arg01, #0
13d68     00 78 06 F6 | 	mov	arg03, #0
13d6c     44 1B B1 FD | 	call	#__system___basic_print_string
13d70     04 8C 06 F1 | 	add	local01, #4
13d74     46 77 02 FB | 	rdlong	arg02, local01
13d78     00 74 06 F6 | 	mov	arg01, #0
13d7c     00 78 06 F6 | 	mov	arg03, #0
13d80     66 7A 06 F6 | 	mov	arg04, #102
13d84     60 39 B1 FD | 	call	#__system___basic_print_float
13d88     00 74 06 F6 | 	mov	arg01, #0
13d8c     0A 76 06 F6 | 	mov	arg02, #10
13d90     00 78 06 F6 | 	mov	arg03, #0
13d94     D0 1A B1 FD | 	call	#__system___basic_print_char
13d98     00 74 06 F6 | 	mov	arg01, #0
13d9c     A8 4D B1 FD | 	call	#__system___getiolock_1205
13da0     1A 01 68 FC | 	wrlong	#0, result1
13da4     00 74 06 F6 | 	mov	arg01, #0
13da8     9C 4D B1 FD | 	call	#__system___getiolock_1205
13dac     1A 75 02 F6 | 	mov	arg01, result1
13db0     6C 15 B1 FD | 	call	#__system___lockmem
13db4     50 01 00 FF 
13db8     1F 77 06 F6 | 	mov	arg02, ##@LR__2169
13dbc     00 74 06 F6 | 	mov	arg01, #0
13dc0     00 78 06 F6 | 	mov	arg03, #0
13dc4     EC 1A B1 FD | 	call	#__system___basic_print_string
13dc8     04 8C 06 F1 | 	add	local01, #4
13dcc     46 77 02 FB | 	rdlong	arg02, local01
13dd0     00 74 06 F6 | 	mov	arg01, #0
13dd4     00 78 06 F6 | 	mov	arg03, #0
13dd8     66 7A 06 F6 | 	mov	arg04, #102
13ddc     08 39 B1 FD | 	call	#__system___basic_print_float
13de0     00 74 06 F6 | 	mov	arg01, #0
13de4     0A 76 06 F6 | 	mov	arg02, #10
13de8     00 78 06 F6 | 	mov	arg03, #0
13dec     78 1A B1 FD | 	call	#__system___basic_print_char
13df0     00 74 06 F6 | 	mov	arg01, #0
13df4     50 4D B1 FD | 	call	#__system___getiolock_1205
13df8     1A 01 68 FC | 	wrlong	#0, result1
13dfc     00 74 06 F6 | 	mov	arg01, #0
13e00     44 4D B1 FD | 	call	#__system___getiolock_1205
13e04     1A 75 02 F6 | 	mov	arg01, result1
13e08     14 15 B1 FD | 	call	#__system___lockmem
13e0c     50 01 00 FF 
13e10     2A 77 06 F6 | 	mov	arg02, ##@LR__2170
13e14     00 74 06 F6 | 	mov	arg01, #0
13e18     00 78 06 F6 | 	mov	arg03, #0
13e1c     94 1A B1 FD | 	call	#__system___basic_print_string
13e20     04 8C 06 F1 | 	add	local01, #4
13e24     46 77 02 F6 | 	mov	arg02, local01
13e28     00 74 06 F6 | 	mov	arg01, #0
13e2c     00 78 06 F6 | 	mov	arg03, #0
13e30     80 1A B1 FD | 	call	#__system___basic_print_string
13e34     00 74 06 F6 | 	mov	arg01, #0
13e38     0A 76 06 F6 | 	mov	arg02, #10
13e3c     00 78 06 F6 | 	mov	arg03, #0
13e40     24 1A B1 FD | 	call	#__system___basic_print_char
13e44     00 74 06 F6 | 	mov	arg01, #0
13e48     FC 4C B1 FD | 	call	#__system___getiolock_1205
13e4c     1A 01 68 FC | 	wrlong	#0, result1
13e50     00 74 06 F6 | 	mov	arg01, #0
13e54     F0 4C B1 FD | 	call	#__system___getiolock_1205
13e58     1A 75 02 F6 | 	mov	arg01, result1
13e5c     C0 14 B1 FD | 	call	#__system___lockmem
13e60     50 01 00 FF 
13e64     44 77 06 F6 | 	mov	arg02, ##@LR__2171
13e68     00 74 06 F6 | 	mov	arg01, #0
13e6c     00 78 06 F6 | 	mov	arg03, #0
13e70     40 1A B1 FD | 	call	#__system___basic_print_string
13e74     14 8C 06 F1 | 	add	local01, #20
13e78     46 77 02 FB | 	rdlong	arg02, local01
13e7c     00 74 06 F6 | 	mov	arg01, #0
13e80     00 78 06 F6 | 	mov	arg03, #0
13e84     66 7A 06 F6 | 	mov	arg04, #102
13e88     5C 38 B1 FD | 	call	#__system___basic_print_float
13e8c     00 74 06 F6 | 	mov	arg01, #0
13e90     0A 76 06 F6 | 	mov	arg02, #10
13e94     00 78 06 F6 | 	mov	arg03, #0
13e98     CC 19 B1 FD | 	call	#__system___basic_print_char
13e9c     00 74 06 F6 | 	mov	arg01, #0
13ea0     A4 4C B1 FD | 	call	#__system___getiolock_1205
13ea4     1A 01 68 FC | 	wrlong	#0, result1
13ea8     00 74 06 F6 | 	mov	arg01, #0
13eac     98 4C B1 FD | 	call	#__system___getiolock_1205
13eb0     1A 75 02 F6 | 	mov	arg01, result1
13eb4     68 14 B1 FD | 	call	#__system___lockmem
13eb8     50 01 00 FF 
13ebc     65 77 06 F6 | 	mov	arg02, ##@LR__2172
13ec0     00 74 06 F6 | 	mov	arg01, #0
13ec4     00 78 06 F6 | 	mov	arg03, #0
13ec8     E8 19 B1 FD | 	call	#__system___basic_print_string
13ecc     04 8C 06 F1 | 	add	local01, #4
13ed0     46 77 02 F6 | 	mov	arg02, local01
13ed4     00 74 06 F6 | 	mov	arg01, #0
13ed8     00 78 06 F6 | 	mov	arg03, #0
13edc     D4 19 B1 FD | 	call	#__system___basic_print_string
13ee0     00 74 06 F6 | 	mov	arg01, #0
13ee4     0A 76 06 F6 | 	mov	arg02, #10
13ee8     00 78 06 F6 | 	mov	arg03, #0
13eec     78 19 B1 FD | 	call	#__system___basic_print_char
13ef0     00 74 06 F6 | 	mov	arg01, #0
13ef4     50 4C B1 FD | 	call	#__system___getiolock_1205
13ef8     1A 01 68 FC | 	wrlong	#0, result1
13efc     00 74 06 F6 | 	mov	arg01, #0
13f00     44 4C B1 FD | 	call	#__system___getiolock_1205
13f04     1A 75 02 F6 | 	mov	arg01, result1
13f08     14 14 B1 FD | 	call	#__system___lockmem
13f0c     50 01 00 FF 
13f10     76 77 06 F6 | 	mov	arg02, ##@LR__2173
13f14     00 74 06 F6 | 	mov	arg01, #0
13f18     00 78 06 F6 | 	mov	arg03, #0
13f1c     94 19 B1 FD | 	call	#__system___basic_print_string
13f20     14 8C 06 F1 | 	add	local01, #20
13f24     46 77 02 FB | 	rdlong	arg02, local01
13f28     00 74 06 F6 | 	mov	arg01, #0
13f2c     00 78 06 F6 | 	mov	arg03, #0
13f30     66 7A 06 F6 | 	mov	arg04, #102
13f34     B0 37 B1 FD | 	call	#__system___basic_print_float
13f38     00 74 06 F6 | 	mov	arg01, #0
13f3c     0A 76 06 F6 | 	mov	arg02, #10
13f40     00 78 06 F6 | 	mov	arg03, #0
13f44     20 19 B1 FD | 	call	#__system___basic_print_char
13f48     00 74 06 F6 | 	mov	arg01, #0
13f4c     F8 4B B1 FD | 	call	#__system___getiolock_1205
13f50     1A 01 68 FC | 	wrlong	#0, result1
13f54     00 74 06 F6 | 	mov	arg01, #0
13f58     EC 4B B1 FD | 	call	#__system___getiolock_1205
13f5c     1A 75 02 F6 | 	mov	arg01, result1
13f60     BC 13 B1 FD | 	call	#__system___lockmem
13f64     50 01 00 FF 
13f68     92 77 06 F6 | 	mov	arg02, ##@LR__2174
13f6c     00 74 06 F6 | 	mov	arg01, #0
13f70     00 78 06 F6 | 	mov	arg03, #0
13f74     3C 19 B1 FD | 	call	#__system___basic_print_string
13f78     04 8C 06 F1 | 	add	local01, #4
13f7c     46 77 02 FB | 	rdlong	arg02, local01
13f80     00 74 06 F6 | 	mov	arg01, #0
13f84     00 78 06 F6 | 	mov	arg03, #0
13f88     0A 7A 06 F6 | 	mov	arg04, #10
13f8c     68 19 B1 FD | 	call	#__system___basic_print_integer
13f90     00 74 06 F6 | 	mov	arg01, #0
13f94     0A 76 06 F6 | 	mov	arg02, #10
13f98     00 78 06 F6 | 	mov	arg03, #0
13f9c     C8 18 B1 FD | 	call	#__system___basic_print_char
13fa0     00 74 06 F6 | 	mov	arg01, #0
13fa4     A0 4B B1 FD | 	call	#__system___getiolock_1205
13fa8     1A 01 68 FC | 	wrlong	#0, result1
13fac     A8 F0 03 F6 | 	mov	ptra, fp
13fb0     B3 00 A0 FD | 	call	#popregs_
13fb4                 | _json_print_machine_configuration_0675_ret
13fb4     2D 00 64 FD | 	ret
13fb8                 | 
13fb8                 | _json_print_machine_performance_0676
13fb8     01 4C 05 F6 | 	mov	COUNT_, #1
13fbc     A9 00 A0 FD | 	call	#pushregs_
13fc0     3A 8D 02 F6 | 	mov	local01, arg01
13fc4     00 74 06 F6 | 	mov	arg01, #0
13fc8     7C 4B B1 FD | 	call	#__system___getiolock_1205
13fcc     1A 75 02 F6 | 	mov	arg01, result1
13fd0     4C 13 B1 FD | 	call	#__system___lockmem
13fd4     50 01 00 FF 
13fd8     AD 77 06 F6 | 	mov	arg02, ##@LR__2175
13fdc     00 74 06 F6 | 	mov	arg01, #0
13fe0     00 78 06 F6 | 	mov	arg03, #0
13fe4     CC 18 B1 FD | 	call	#__system___basic_print_string
13fe8     00 74 06 F6 | 	mov	arg01, #0
13fec     0A 76 06 F6 | 	mov	arg02, #10
13ff0     00 78 06 F6 | 	mov	arg03, #0
13ff4     70 18 B1 FD | 	call	#__system___basic_print_char
13ff8     00 74 06 F6 | 	mov	arg01, #0
13ffc     48 4B B1 FD | 	call	#__system___getiolock_1205
14000     1A 01 68 FC | 	wrlong	#0, result1
14004     00 74 06 F6 | 	mov	arg01, #0
14008     3C 4B B1 FD | 	call	#__system___getiolock_1205
1400c     1A 75 02 F6 | 	mov	arg01, result1
14010     0C 13 B1 FD | 	call	#__system___lockmem
14014     50 01 00 FF 
14018     C2 77 06 F6 | 	mov	arg02, ##@LR__2176
1401c     00 74 06 F6 | 	mov	arg01, #0
14020     00 78 06 F6 | 	mov	arg03, #0
14024     8C 18 B1 FD | 	call	#__system___basic_print_string
14028     46 77 02 FB | 	rdlong	arg02, local01
1402c     00 74 06 F6 | 	mov	arg01, #0
14030     00 78 06 F6 | 	mov	arg03, #0
14034     66 7A 06 F6 | 	mov	arg04, #102
14038     AC 36 B1 FD | 	call	#__system___basic_print_float
1403c     00 74 06 F6 | 	mov	arg01, #0
14040     0A 76 06 F6 | 	mov	arg02, #10
14044     00 78 06 F6 | 	mov	arg03, #0
14048     1C 18 B1 FD | 	call	#__system___basic_print_char
1404c     00 74 06 F6 | 	mov	arg01, #0
14050     F4 4A B1 FD | 	call	#__system___getiolock_1205
14054     1A 01 68 FC | 	wrlong	#0, result1
14058     00 74 06 F6 | 	mov	arg01, #0
1405c     E8 4A B1 FD | 	call	#__system___getiolock_1205
14060     1A 75 02 F6 | 	mov	arg01, result1
14064     B8 12 B1 FD | 	call	#__system___lockmem
14068     50 01 00 FF 
1406c     D4 77 06 F6 | 	mov	arg02, ##@LR__2177
14070     00 74 06 F6 | 	mov	arg01, #0
14074     00 78 06 F6 | 	mov	arg03, #0
14078     38 18 B1 FD | 	call	#__system___basic_print_string
1407c     04 8C 06 F1 | 	add	local01, #4
14080     46 77 02 FB | 	rdlong	arg02, local01
14084     00 74 06 F6 | 	mov	arg01, #0
14088     00 78 06 F6 | 	mov	arg03, #0
1408c     66 7A 06 F6 | 	mov	arg04, #102
14090     54 36 B1 FD | 	call	#__system___basic_print_float
14094     00 74 06 F6 | 	mov	arg01, #0
14098     0A 76 06 F6 | 	mov	arg02, #10
1409c     00 78 06 F6 | 	mov	arg03, #0
140a0     C4 17 B1 FD | 	call	#__system___basic_print_char
140a4     00 74 06 F6 | 	mov	arg01, #0
140a8     9C 4A B1 FD | 	call	#__system___getiolock_1205
140ac     1A 01 68 FC | 	wrlong	#0, result1
140b0     00 74 06 F6 | 	mov	arg01, #0
140b4     90 4A B1 FD | 	call	#__system___getiolock_1205
140b8     1A 75 02 F6 | 	mov	arg01, result1
140bc     60 12 B1 FD | 	call	#__system___lockmem
140c0     50 01 00 FF 
140c4     E6 77 06 F6 | 	mov	arg02, ##@LR__2178
140c8     00 74 06 F6 | 	mov	arg01, #0
140cc     00 78 06 F6 | 	mov	arg03, #0
140d0     E0 17 B1 FD | 	call	#__system___basic_print_string
140d4     04 8C 06 F1 | 	add	local01, #4
140d8     46 77 02 FB | 	rdlong	arg02, local01
140dc     00 74 06 F6 | 	mov	arg01, #0
140e0     00 78 06 F6 | 	mov	arg03, #0
140e4     66 7A 06 F6 | 	mov	arg04, #102
140e8     FC 35 B1 FD | 	call	#__system___basic_print_float
140ec     00 74 06 F6 | 	mov	arg01, #0
140f0     0A 76 06 F6 | 	mov	arg02, #10
140f4     00 78 06 F6 | 	mov	arg03, #0
140f8     6C 17 B1 FD | 	call	#__system___basic_print_char
140fc     00 74 06 F6 | 	mov	arg01, #0
14100     44 4A B1 FD | 	call	#__system___getiolock_1205
14104     1A 01 68 FC | 	wrlong	#0, result1
14108     00 74 06 F6 | 	mov	arg01, #0
1410c     38 4A B1 FD | 	call	#__system___getiolock_1205
14110     1A 75 02 F6 | 	mov	arg01, result1
14114     08 12 B1 FD | 	call	#__system___lockmem
14118     50 01 00 FF 
1411c     F8 77 06 F6 | 	mov	arg02, ##@LR__2179
14120     00 74 06 F6 | 	mov	arg01, #0
14124     00 78 06 F6 | 	mov	arg03, #0
14128     88 17 B1 FD | 	call	#__system___basic_print_string
1412c     04 8C 06 F1 | 	add	local01, #4
14130     46 77 02 FB | 	rdlong	arg02, local01
14134     00 74 06 F6 | 	mov	arg01, #0
14138     00 78 06 F6 | 	mov	arg03, #0
1413c     66 7A 06 F6 | 	mov	arg04, #102
14140     A4 35 B1 FD | 	call	#__system___basic_print_float
14144     00 74 06 F6 | 	mov	arg01, #0
14148     0A 76 06 F6 | 	mov	arg02, #10
1414c     00 78 06 F6 | 	mov	arg03, #0
14150     14 17 B1 FD | 	call	#__system___basic_print_char
14154     00 74 06 F6 | 	mov	arg01, #0
14158     EC 49 B1 FD | 	call	#__system___getiolock_1205
1415c     1A 01 68 FC | 	wrlong	#0, result1
14160     00 74 06 F6 | 	mov	arg01, #0
14164     E0 49 B1 FD | 	call	#__system___getiolock_1205
14168     1A 75 02 F6 | 	mov	arg01, result1
1416c     B0 11 B1 FD | 	call	#__system___lockmem
14170     51 01 00 FF 
14174     0E 76 06 F6 | 	mov	arg02, ##@LR__2180
14178     00 74 06 F6 | 	mov	arg01, #0
1417c     00 78 06 F6 | 	mov	arg03, #0
14180     30 17 B1 FD | 	call	#__system___basic_print_string
14184     04 8C 06 F1 | 	add	local01, #4
14188     46 77 02 FB | 	rdlong	arg02, local01
1418c     00 74 06 F6 | 	mov	arg01, #0
14190     00 78 06 F6 | 	mov	arg03, #0
14194     66 7A 06 F6 | 	mov	arg04, #102
14198     4C 35 B1 FD | 	call	#__system___basic_print_float
1419c     00 74 06 F6 | 	mov	arg01, #0
141a0     0A 76 06 F6 | 	mov	arg02, #10
141a4     00 78 06 F6 | 	mov	arg03, #0
141a8     BC 16 B1 FD | 	call	#__system___basic_print_char
141ac     00 74 06 F6 | 	mov	arg01, #0
141b0     94 49 B1 FD | 	call	#__system___getiolock_1205
141b4     1A 01 68 FC | 	wrlong	#0, result1
141b8     00 74 06 F6 | 	mov	arg01, #0
141bc     88 49 B1 FD | 	call	#__system___getiolock_1205
141c0     1A 75 02 F6 | 	mov	arg01, result1
141c4     58 11 B1 FD | 	call	#__system___lockmem
141c8     51 01 00 FF 
141cc     24 76 06 F6 | 	mov	arg02, ##@LR__2181
141d0     00 74 06 F6 | 	mov	arg01, #0
141d4     00 78 06 F6 | 	mov	arg03, #0
141d8     D8 16 B1 FD | 	call	#__system___basic_print_string
141dc     04 8C 06 F1 | 	add	local01, #4
141e0     46 77 02 FB | 	rdlong	arg02, local01
141e4     00 74 06 F6 | 	mov	arg01, #0
141e8     00 78 06 F6 | 	mov	arg03, #0
141ec     66 7A 06 F6 | 	mov	arg04, #102
141f0     F4 34 B1 FD | 	call	#__system___basic_print_float
141f4     00 74 06 F6 | 	mov	arg01, #0
141f8     0A 76 06 F6 | 	mov	arg02, #10
141fc     00 78 06 F6 | 	mov	arg03, #0
14200     64 16 B1 FD | 	call	#__system___basic_print_char
14204     00 74 06 F6 | 	mov	arg01, #0
14208     3C 49 B1 FD | 	call	#__system___getiolock_1205
1420c     1A 01 68 FC | 	wrlong	#0, result1
14210     00 74 06 F6 | 	mov	arg01, #0
14214     30 49 B1 FD | 	call	#__system___getiolock_1205
14218     1A 75 02 F6 | 	mov	arg01, result1
1421c     00 11 B1 FD | 	call	#__system___lockmem
14220     51 01 00 FF 
14224     3E 76 06 F6 | 	mov	arg02, ##@LR__2182
14228     00 74 06 F6 | 	mov	arg01, #0
1422c     00 78 06 F6 | 	mov	arg03, #0
14230     80 16 B1 FD | 	call	#__system___basic_print_string
14234     04 8C 06 F1 | 	add	local01, #4
14238     46 77 02 FB | 	rdlong	arg02, local01
1423c     00 74 06 F6 | 	mov	arg01, #0
14240     00 78 06 F6 | 	mov	arg03, #0
14244     66 7A 06 F6 | 	mov	arg04, #102
14248     9C 34 B1 FD | 	call	#__system___basic_print_float
1424c     00 74 06 F6 | 	mov	arg01, #0
14250     0A 76 06 F6 | 	mov	arg02, #10
14254     00 78 06 F6 | 	mov	arg03, #0
14258     0C 16 B1 FD | 	call	#__system___basic_print_char
1425c     00 74 06 F6 | 	mov	arg01, #0
14260     E4 48 B1 FD | 	call	#__system___getiolock_1205
14264     1A 01 68 FC | 	wrlong	#0, result1
14268     A8 F0 03 F6 | 	mov	ptra, fp
1426c     B3 00 A0 FD | 	call	#popregs_
14270                 | _json_print_machine_performance_0676_ret
14270     2D 00 64 FD | 	ret
14274                 | 
14274                 | _json_print_quartet
14274     02 4C 05 F6 | 	mov	COUNT_, #2
14278     A9 00 A0 FD | 	call	#pushregs_
1427c     B8 F1 07 F1 | 	add	ptra, #440
14280     A8 74 62 FC | 	wrlong	arg01, fp
14284     00 74 06 F6 | 	mov	arg01, #0
14288     BC 48 B1 FD | 	call	#__system___getiolock_1205
1428c     1A 75 02 F6 | 	mov	arg01, result1
14290     8C 10 B1 FD | 	call	#__system___lockmem
14294     51 01 00 FF 
14298     5C 76 06 F6 | 	mov	arg02, ##@LR__2183
1429c     00 74 06 F6 | 	mov	arg01, #0
142a0     00 78 06 F6 | 	mov	arg03, #0
142a4     0C 16 B1 FD | 	call	#__system___basic_print_string
142a8     A8 76 02 FB | 	rdlong	arg02, fp
142ac     00 74 06 F6 | 	mov	arg01, #0
142b0     00 78 06 F6 | 	mov	arg03, #0
142b4     FC 15 B1 FD | 	call	#__system___basic_print_string
142b8     00 74 06 F6 | 	mov	arg01, #0
142bc     0A 76 06 F6 | 	mov	arg02, #10
142c0     00 78 06 F6 | 	mov	arg03, #0
142c4     A0 15 B1 FD | 	call	#__system___basic_print_char
142c8     00 74 06 F6 | 	mov	arg01, #0
142cc     78 48 B1 FD | 	call	#__system___getiolock_1205
142d0     1A 01 68 FC | 	wrlong	#0, result1
142d4     00 74 06 F6 | 	mov	arg01, #0
142d8     6C 48 B1 FD | 	call	#__system___getiolock_1205
142dc     1A 75 02 F6 | 	mov	arg01, result1
142e0     3C 10 B1 FD | 	call	#__system___lockmem
142e4     51 01 00 FF 
142e8     6A 76 06 F6 | 	mov	arg02, ##@LR__2184
142ec     00 74 06 F6 | 	mov	arg01, #0
142f0     00 78 06 F6 | 	mov	arg03, #0
142f4     BC 15 B1 FD | 	call	#__system___basic_print_string
142f8     A8 7A 02 FB | 	rdlong	arg04, fp
142fc     34 7A 06 F1 | 	add	arg04, #52
14300     3D 77 02 FB | 	rdlong	arg02, arg04
14304     00 74 06 F6 | 	mov	arg01, #0
14308     00 78 06 F6 | 	mov	arg03, #0
1430c     0A 7A 06 F6 | 	mov	arg04, #10
14310     E4 15 B1 FD | 	call	#__system___basic_print_integer
14314     00 74 06 F6 | 	mov	arg01, #0
14318     0A 76 06 F6 | 	mov	arg02, #10
1431c     00 78 06 F6 | 	mov	arg03, #0
14320     44 15 B1 FD | 	call	#__system___basic_print_char
14324     00 74 06 F6 | 	mov	arg01, #0
14328     1C 48 B1 FD | 	call	#__system___getiolock_1205
1432c     1A 01 68 FC | 	wrlong	#0, result1
14330     00 74 06 F6 | 	mov	arg01, #0
14334     10 48 B1 FD | 	call	#__system___getiolock_1205
14338     1A 75 02 F6 | 	mov	arg01, result1
1433c     E0 0F B1 FD | 	call	#__system___lockmem
14340     51 01 00 FF 
14344     7C 76 06 F6 | 	mov	arg02, ##@LR__2185
14348     00 74 06 F6 | 	mov	arg01, #0
1434c     00 78 06 F6 | 	mov	arg03, #0
14350     60 15 B1 FD | 	call	#__system___basic_print_string
14354     A8 7A 02 FB | 	rdlong	arg04, fp
14358     60 7A 06 F1 | 	add	arg04, #96
1435c     3D 77 02 FB | 	rdlong	arg02, arg04
14360     00 74 06 F6 | 	mov	arg01, #0
14364     00 78 06 F6 | 	mov	arg03, #0
14368     66 7A 06 F6 | 	mov	arg04, #102
1436c     78 33 B1 FD | 	call	#__system___basic_print_float
14370     00 74 06 F6 | 	mov	arg01, #0
14374     0A 76 06 F6 | 	mov	arg02, #10
14378     00 78 06 F6 | 	mov	arg03, #0
1437c     E8 14 B1 FD | 	call	#__system___basic_print_char
14380     00 74 06 F6 | 	mov	arg01, #0
14384     C0 47 B1 FD | 	call	#__system___getiolock_1205
14388     1A 01 68 FC | 	wrlong	#0, result1
1438c     04 50 05 F1 | 	add	fp, #4
14390     A8 74 02 F6 | 	mov	arg01, fp
14394     04 50 85 F1 | 	sub	fp, #4
14398     A8 76 02 FB | 	rdlong	arg02, fp
1439c     34 76 06 F1 | 	add	arg02, #52
143a0     3B 77 02 FB | 	rdlong	arg02, arg02
143a4     FC B4 BF FD | 	call	#_get_function_info
143a8     00 74 06 F6 | 	mov	arg01, #0
143ac     98 47 B1 FD | 	call	#__system___getiolock_1205
143b0     1A 75 02 F6 | 	mov	arg01, result1
143b4     68 0F B1 FD | 	call	#__system___lockmem
143b8     51 01 00 FF 
143bc     8B 76 06 F6 | 	mov	arg02, ##@LR__2186
143c0     00 74 06 F6 | 	mov	arg01, #0
143c4     00 78 06 F6 | 	mov	arg03, #0
143c8     E8 14 B1 FD | 	call	#__system___basic_print_string
143cc     00 74 06 F6 | 	mov	arg01, #0
143d0     74 47 B1 FD | 	call	#__system___getiolock_1205
143d4     1A 01 68 FC | 	wrlong	#0, result1
143d8     B4 51 05 F1 | 	add	fp, #436
143dc     A8 00 68 FC | 	wrlong	#0, fp
143e0     B4 51 85 F1 | 	sub	fp, #436
143e4                 | '     for (int i = 0; i < info.args_count; i++)
143e4                 | LR__0515
143e4     B4 51 05 F1 | 	add	fp, #436
143e8     A8 74 02 FB | 	rdlong	arg01, fp
143ec     94 51 85 F1 | 	sub	fp, #404
143f0     A8 8C 02 FB | 	rdlong	local01, fp
143f4     20 50 85 F1 | 	sub	fp, #32
143f8     46 75 52 F2 | 	cmps	arg01, local01 wc
143fc     B4 00 90 3D |  if_ae	jmp	#LR__0517
14400     00 74 06 F6 | 	mov	arg01, #0
14404     40 47 B1 FD | 	call	#__system___getiolock_1205
14408     1A 75 02 F6 | 	mov	arg01, result1
1440c     10 0F B1 FD | 	call	#__system___lockmem
14410     A8 7A 02 FB | 	rdlong	arg04, fp
14414     B4 51 05 F1 | 	add	fp, #436
14418     A8 78 02 FB | 	rdlong	arg03, fp
1441c     B4 51 85 F1 | 	sub	fp, #436
14420     02 78 66 F0 | 	shl	arg03, #2
14424     38 7A 06 F1 | 	add	arg04, #56
14428     3D 79 02 F1 | 	add	arg03, arg04
1442c     3C 77 02 FB | 	rdlong	arg02, arg03
14430     00 74 06 F6 | 	mov	arg01, #0
14434     00 78 06 F6 | 	mov	arg03, #0
14438     66 7A 06 F6 | 	mov	arg04, #102
1443c     A8 32 B1 FD | 	call	#__system___basic_print_float
14440     00 74 06 F6 | 	mov	arg01, #0
14444     00 47 B1 FD | 	call	#__system___getiolock_1205
14448     1A 01 68 FC | 	wrlong	#0, result1
1444c     20 50 05 F1 | 	add	fp, #32
14450     A8 74 02 FB | 	rdlong	arg01, fp
14454     01 74 86 F1 | 	sub	arg01, #1
14458     94 51 05 F1 | 	add	fp, #404
1445c     A8 8E 02 FB | 	rdlong	local02, fp
14460     B4 51 85 F1 | 	sub	fp, #436
14464     3A 8F 52 F2 | 	cmps	local02, arg01 wc
14468     30 00 90 3D |  if_ae	jmp	#LR__0516
1446c     00 74 06 F6 | 	mov	arg01, #0
14470     D4 46 B1 FD | 	call	#__system___getiolock_1205
14474     1A 75 02 F6 | 	mov	arg01, result1
14478     A4 0E B1 FD | 	call	#__system___lockmem
1447c     51 01 00 FF 
14480     A0 76 06 F6 | 	mov	arg02, ##@LR__2187
14484     00 74 06 F6 | 	mov	arg01, #0
14488     00 78 06 F6 | 	mov	arg03, #0
1448c     24 14 B1 FD | 	call	#__system___basic_print_string
14490     00 74 06 F6 | 	mov	arg01, #0
14494     B0 46 B1 FD | 	call	#__system___getiolock_1205
14498     1A 01 68 FC | 	wrlong	#0, result1
1449c                 | LR__0516
1449c     B4 51 05 F1 | 	add	fp, #436
144a0     A8 8E 02 FB | 	rdlong	local02, fp
144a4     01 8E 06 F1 | 	add	local02, #1
144a8     A8 8E 62 FC | 	wrlong	local02, fp
144ac     B4 51 85 F1 | 	sub	fp, #436
144b0     30 FF 9F FD | 	jmp	#LR__0515
144b4                 | LR__0517
144b4     00 74 06 F6 | 	mov	arg01, #0
144b8     8C 46 B1 FD | 	call	#__system___getiolock_1205
144bc     1A 75 02 F6 | 	mov	arg01, result1
144c0     5C 0E B1 FD | 	call	#__system___lockmem
144c4     00 74 06 F6 | 	mov	arg01, #0
144c8     0A 76 06 F6 | 	mov	arg02, #10
144cc     00 78 06 F6 | 	mov	arg03, #0
144d0     94 13 B1 FD | 	call	#__system___basic_print_char
144d4     00 74 06 F6 | 	mov	arg01, #0
144d8     6C 46 B1 FD | 	call	#__system___getiolock_1205
144dc     1A 01 68 FC | 	wrlong	#0, result1
144e0     A8 F0 03 F6 | 	mov	ptra, fp
144e4     B3 00 A0 FD | 	call	#popregs_
144e8                 | _json_print_quartet_ret
144e8     2D 00 64 FD | 	ret
144ec                 | 
144ec                 | _json_print_motion_set
144ec     02 4C 05 F6 | 	mov	COUNT_, #2
144f0     A9 00 A0 FD | 	call	#pushregs_
144f4     3A 8D 02 F6 | 	mov	local01, arg01
144f8     00 74 06 F6 | 	mov	arg01, #0
144fc     48 46 B1 FD | 	call	#__system___getiolock_1205
14500     1A 75 02 F6 | 	mov	arg01, result1
14504     18 0E B1 FD | 	call	#__system___lockmem
14508     51 01 00 FF 
1450c     A2 76 06 F6 | 	mov	arg02, ##@LR__2188
14510     00 74 06 F6 | 	mov	arg01, #0
14514     00 78 06 F6 | 	mov	arg03, #0
14518     98 13 B1 FD | 	call	#__system___basic_print_string
1451c     00 74 06 F6 | 	mov	arg01, #0
14520     46 77 02 F6 | 	mov	arg02, local01
14524     00 78 06 F6 | 	mov	arg03, #0
14528     88 13 B1 FD | 	call	#__system___basic_print_string
1452c     00 74 06 F6 | 	mov	arg01, #0
14530     0A 76 06 F6 | 	mov	arg02, #10
14534     00 78 06 F6 | 	mov	arg03, #0
14538     2C 13 B1 FD | 	call	#__system___basic_print_char
1453c     00 74 06 F6 | 	mov	arg01, #0
14540     04 46 B1 FD | 	call	#__system___getiolock_1205
14544     1A 01 68 FC | 	wrlong	#0, result1
14548     00 74 06 F6 | 	mov	arg01, #0
1454c     F8 45 B1 FD | 	call	#__system___getiolock_1205
14550     1A 75 02 F6 | 	mov	arg01, result1
14554     C8 0D B1 FD | 	call	#__system___lockmem
14558     51 01 00 FF 
1455c     AC 76 06 F6 | 	mov	arg02, ##@LR__2189
14560     00 74 06 F6 | 	mov	arg01, #0
14564     00 78 06 F6 | 	mov	arg03, #0
14568     48 13 B1 FD | 	call	#__system___basic_print_string
1456c     34 8C 06 F1 | 	add	local01, #52
14570     46 77 02 FB | 	rdlong	arg02, local01
14574     00 74 06 F6 | 	mov	arg01, #0
14578     00 78 06 F6 | 	mov	arg03, #0
1457c     0A 7A 06 F6 | 	mov	arg04, #10
14580     74 13 B1 FD | 	call	#__system___basic_print_integer
14584     00 74 06 F6 | 	mov	arg01, #0
14588     0A 76 06 F6 | 	mov	arg02, #10
1458c     00 78 06 F6 | 	mov	arg03, #0
14590     D4 12 B1 FD | 	call	#__system___basic_print_char
14594     00 74 06 F6 | 	mov	arg01, #0
14598     AC 45 B1 FD | 	call	#__system___getiolock_1205
1459c     1A 01 68 FC | 	wrlong	#0, result1
145a0     00 74 06 F6 | 	mov	arg01, #0
145a4     A0 45 B1 FD | 	call	#__system___getiolock_1205
145a8     1A 75 02 F6 | 	mov	arg01, result1
145ac     70 0D B1 FD | 	call	#__system___lockmem
145b0     51 01 00 FF 
145b4     B8 76 06 F6 | 	mov	arg02, ##@LR__2190
145b8     00 74 06 F6 | 	mov	arg01, #0
145bc     00 78 06 F6 | 	mov	arg03, #0
145c0     F0 12 B1 FD | 	call	#__system___basic_print_string
145c4     04 8C 06 F1 | 	add	local01, #4
145c8     46 77 02 F6 | 	mov	arg02, local01
145cc     00 74 06 F6 | 	mov	arg01, #0
145d0     00 78 06 F6 | 	mov	arg03, #0
145d4     DC 12 B1 FD | 	call	#__system___basic_print_string
145d8     00 74 06 F6 | 	mov	arg01, #0
145dc     0A 76 06 F6 | 	mov	arg02, #10
145e0     00 78 06 F6 | 	mov	arg03, #0
145e4     80 12 B1 FD | 	call	#__system___basic_print_char
145e8     00 74 06 F6 | 	mov	arg01, #0
145ec     58 45 B1 FD | 	call	#__system___getiolock_1205
145f0     1A 01 68 FC | 	wrlong	#0, result1
145f4     00 74 06 F6 | 	mov	arg01, #0
145f8     4C 45 B1 FD | 	call	#__system___getiolock_1205
145fc     1A 75 02 F6 | 	mov	arg01, result1
14600     1C 0D B1 FD | 	call	#__system___lockmem
14604     51 01 00 FF 
14608     C2 76 06 F6 | 	mov	arg02, ##@LR__2191
1460c     00 74 06 F6 | 	mov	arg01, #0
14610     00 78 06 F6 | 	mov	arg03, #0
14614     9C 12 B1 FD | 	call	#__system___basic_print_string
14618     0C 8C 06 F1 | 	add	local01, #12
1461c     46 77 02 FB | 	rdlong	arg02, local01
14620     44 8C 86 F1 | 	sub	local01, #68
14624     00 74 06 F6 | 	mov	arg01, #0
14628     00 78 06 F6 | 	mov	arg03, #0
1462c     0A 7A 06 F6 | 	mov	arg04, #10
14630     C4 12 B1 FD | 	call	#__system___basic_print_integer
14634     00 74 06 F6 | 	mov	arg01, #0
14638     0A 76 06 F6 | 	mov	arg02, #10
1463c     00 78 06 F6 | 	mov	arg03, #0
14640     24 12 B1 FD | 	call	#__system___basic_print_char
14644     00 74 06 F6 | 	mov	arg01, #0
14648     FC 44 B1 FD | 	call	#__system___getiolock_1205
1464c     1A 01 68 FC | 	wrlong	#0, result1
14650     00 74 06 F6 | 	mov	arg01, #0
14654     F0 44 B1 FD | 	call	#__system___getiolock_1205
14658     1A 75 02 F6 | 	mov	arg01, result1
1465c     C0 0C B1 FD | 	call	#__system___lockmem
14660     51 01 00 FF 
14664     D2 76 06 F6 | 	mov	arg02, ##@LR__2192
14668     00 74 06 F6 | 	mov	arg01, #0
1466c     00 78 06 F6 | 	mov	arg03, #0
14670     40 12 B1 FD | 	call	#__system___basic_print_string
14674     00 74 06 F6 | 	mov	arg01, #0
14678     0A 76 06 F6 | 	mov	arg02, #10
1467c     00 78 06 F6 | 	mov	arg03, #0
14680     E4 11 B1 FD | 	call	#__system___basic_print_char
14684     00 74 06 F6 | 	mov	arg01, #0
14688     BC 44 B1 FD | 	call	#__system___getiolock_1205
1468c     1A 01 68 FC | 	wrlong	#0, result1
14690     00 8E 06 F6 | 	mov	local02, #0
14694                 | '     for (int i = 0; i < set->quartetCount; i++)
14694                 | LR__0518
14694     48 8C 06 F1 | 	add	local01, #72
14698     46 75 02 FB | 	rdlong	arg01, local01
1469c     48 8C 86 F1 | 	sub	local01, #72
146a0     3A 8F 52 F2 | 	cmps	local02, arg01 wc
146a4     20 00 90 3D |  if_ae	jmp	#LR__0519
146a8     64 8E 06 FD | 	qmul	local02, #100
146ac     4C 8C 06 F1 | 	add	local01, #76
146b0     18 74 62 FD | 	getqx	arg01
146b4     46 75 02 F1 | 	add	arg01, local01
146b8     B8 FB BF FD | 	call	#_json_print_quartet
146bc     01 8E 06 F1 | 	add	local02, #1
146c0     4C 8C 86 F1 | 	sub	local01, #76
146c4     CC FF 9F FD | 	jmp	#LR__0518
146c8                 | LR__0519
146c8     A8 F0 03 F6 | 	mov	ptra, fp
146cc     B3 00 A0 FD | 	call	#popregs_
146d0                 | _json_print_motion_set_ret
146d0     2D 00 64 FD | 	ret
146d4                 | 
146d4                 | _check_buttons_0722
146d4     0C 76 06 F1 | 	add	arg02, #12
146d8     3B 75 62 FC | 	wrlong	arg01, arg02
146dc     0C 76 86 F1 | 	sub	arg02, #12
146e0     3B 03 48 FC | 	wrbyte	#1, arg02
146e4                 | _check_buttons_0722_ret
146e4     2D 00 64 FD | 	ret
146e8                 | 
146e8                 | _monitor_cog_0748
146e8     0B 4C 05 F6 | 	mov	COUNT_, #11
146ec     A9 00 A0 FD | 	call	#pushregs_
146f0     18 F0 07 F1 | 	add	ptra, #24
146f4     A8 74 62 FC | 	wrlong	arg01, fp
146f8     D8 00 00 FF 
146fc     18 D7 05 F1 | 	add	ptr__dat__, ##110872
14700     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14704     D8 00 00 FF 
14708     18 D7 85 F1 | 	sub	ptr__dat__, ##110872
1470c     0F 76 06 F6 | 	mov	arg02, #15
14710     10 78 06 F6 | 	mov	arg03, #16
14714     30 40 BF FD | 	call	#_force_gauge_begin
14718     00 34 0E F2 | 	cmp	result1, #0 wz
1471c     1C 00 90 5D |  if_ne	jmp	#LR__0520
14720     A8 8C 02 FB | 	rdlong	local01, fp
14724     0C 8C 06 F1 | 	add	local01, #12
14728     46 75 02 FB | 	rdlong	arg01, local01
1472c     05 76 06 F6 | 	mov	arg02, #5
14730     01 78 06 F6 | 	mov	arg03, #1
14734     0C E1 BE FD | 	call	#_state_machine_set
14738     18 00 90 FD | 	jmp	#LR__0521
1473c                 | LR__0520
1473c     A8 8C 02 FB | 	rdlong	local01, fp
14740     0C 8C 06 F1 | 	add	local01, #12
14744     46 75 02 FB | 	rdlong	arg01, local01
14748     05 76 06 F6 | 	mov	arg02, #5
1474c     00 78 06 F6 | 	mov	arg03, #0
14750     F0 E0 BE FD | 	call	#_state_machine_set
14754                 | LR__0521
14754     DA 00 00 FF 
14758     4C D6 05 F1 | 	add	ptr__dat__, ##111692
1475c     14 74 06 F6 | 	mov	arg01, #20
14760     13 76 06 F6 | 	mov	arg02, #19
14764     01 78 66 F6 | 	neg	arg03, #1
14768     00 7A 06 F6 | 	mov	arg04, #0
1476c     00 7C 06 F6 | 	mov	arg05, #0
14770     3C FF 7F FF 
14774     60 7F 06 F6 | 	mov	arg06, ##-100000
14778     C3 00 00 FF 
1477c     A0 80 06 F6 | 	mov	arg07, ##100000
14780     C9 8E 02 F6 | 	mov	local02, objptr
14784     EB 92 01 F6 | 	mov	objptr, ptr__dat__
14788     DA 00 00 FF 
1478c     4C D6 85 F1 | 	sub	ptr__dat__, ##111692
14790     38 76 B0 FD | 	call	#_jm_quadrature_spin2_start
14794     47 93 01 F6 | 	mov	objptr, local02
14798     1A 8F 02 F6 | 	mov	local02, result1
1479c     14 E0 06 FB | 	rdlong	muldiva_, #20
147a0     10 8E 06 F1 | 	add	local02, #16
147a4     47 E3 02 FB | 	rdlong	muldivb_, local02
147a8     BB 00 A0 FD | 	call	#divide_
147ac     04 50 05 F1 | 	add	fp, #4
147b0     A8 E2 62 FC | 	wrlong	muldivb_, fp
147b4     04 50 85 F1 | 	sub	fp, #4
147b8     00 74 06 F6 | 	mov	arg01, #0
147bc     88 43 B1 FD | 	call	#__system___getiolock_1205
147c0     1A 75 02 F6 | 	mov	arg01, result1
147c4     58 0B B1 FD | 	call	#__system___lockmem
147c8     51 01 00 FF 
147cc     E0 76 06 F6 | 	mov	arg02, ##@LR__2193
147d0     00 74 06 F6 | 	mov	arg01, #0
147d4     00 78 06 F6 | 	mov	arg03, #0
147d8     D8 10 B1 FD | 	call	#__system___basic_print_string
147dc     A8 8E 02 FB | 	rdlong	local02, fp
147e0     10 8E 06 F1 | 	add	local02, #16
147e4     47 77 02 FB | 	rdlong	arg02, local02
147e8     00 74 06 F6 | 	mov	arg01, #0
147ec     00 78 06 F6 | 	mov	arg03, #0
147f0     0A 7A 06 F6 | 	mov	arg04, #10
147f4     00 11 B1 FD | 	call	#__system___basic_print_integer
147f8     51 01 00 FF 
147fc     F8 76 06 F6 | 	mov	arg02, ##@LR__2194
14800     00 74 06 F6 | 	mov	arg01, #0
14804     00 78 06 F6 | 	mov	arg03, #0
14808     A8 10 B1 FD | 	call	#__system___basic_print_string
1480c     04 50 05 F1 | 	add	fp, #4
14810     A8 76 02 FB | 	rdlong	arg02, fp
14814     04 50 85 F1 | 	sub	fp, #4
14818     0A 8E 06 F6 | 	mov	local02, #10
1481c     00 74 06 F6 | 	mov	arg01, #0
14820     00 78 06 F6 | 	mov	arg03, #0
14824     0A 7A 06 F6 | 	mov	arg04, #10
14828     CC 10 B1 FD | 	call	#__system___basic_print_integer
1482c     1A 91 02 F6 | 	mov	local03, result1
14830     00 74 06 F6 | 	mov	arg01, #0
14834     0A 76 06 F6 | 	mov	arg02, #10
14838     00 78 06 F6 | 	mov	arg03, #0
1483c     28 10 B1 FD | 	call	#__system___basic_print_char
14840     01 92 06 F6 | 	mov	local04, #1
14844     00 74 06 F6 | 	mov	arg01, #0
14848     FC 42 B1 FD | 	call	#__system___getiolock_1205
1484c     1A 01 68 FC | 	wrlong	#0, result1
14850     00 34 06 F6 | 	mov	result1, #0
14854     00 94 06 F6 | 	mov	local05, #0
14858     00 96 06 F6 | 	mov	local06, #0
1485c     08 50 05 F1 | 	add	fp, #8
14860     A8 00 68 FC | 	wrlong	#0, fp
14864     08 50 85 F1 | 	sub	fp, #8
14868     D8 00 00 FF 
1486c     14 D7 05 F1 | 	add	ptr__dat__, ##110868
14870     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
14874     D8 00 00 FF 
14878     14 D7 85 F1 | 	sub	ptr__dat__, ##110868
1487c                 | '     FILE *file =  (0) ;
1487c                 | ' 
1487c                 | '     monitorWriteData =  (0) ;
1487c                 | '     while (1)
1487c                 | LR__0522
1487c     1A 34 62 FD | 	getct	result1
14880     04 50 05 F1 | 	add	fp, #4
14884     A8 96 02 FB | 	rdlong	local06, fp
14888     4B 35 02 F1 | 	add	result1, local06
1488c     08 50 05 F1 | 	add	fp, #8
14890     A8 34 62 FC | 	wrlong	result1, fp
14894     D8 00 00 FF 
14898     18 D7 05 F1 | 	add	ptr__dat__, ##110872
1489c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
148a0     D8 00 00 FF 
148a4     18 D7 85 F1 | 	sub	ptr__dat__, ##110872
148a8     04 50 05 F1 | 	add	fp, #4
148ac     A8 76 02 F6 | 	mov	arg02, fp
148b0     10 50 85 F1 | 	sub	fp, #16
148b4     94 3D BF FD | 	call	#_force_gauge_get_raw
148b8     14 50 05 F1 | 	add	fp, #20
148bc     A8 34 62 FC | 	wrlong	result1, fp
148c0     04 50 85 F1 | 	sub	fp, #4
148c4     A8 96 0A FB | 	rdlong	local06, fp wz
148c8     10 50 85 F1 | 	sub	fp, #16
148cc     18 00 90 5D |  if_ne	jmp	#LR__0523
148d0     A8 96 02 FB | 	rdlong	local06, fp
148d4     14 50 05 F1 | 	add	fp, #20
148d8     A8 8C 02 FB | 	rdlong	local01, fp
148dc     14 50 85 F1 | 	sub	fp, #20
148e0     4B 8D 62 FC | 	wrlong	local01, local06
148e4     C8 00 90 FD | 	jmp	#LR__0526
148e8                 | LR__0523
148e8     00 74 06 F6 | 	mov	arg01, #0
148ec     58 42 B1 FD | 	call	#__system___getiolock_1205
148f0     1A 75 02 F6 | 	mov	arg01, result1
148f4     28 0A B1 FD | 	call	#__system___lockmem
148f8     51 01 00 FF 
148fc     0A 77 06 F6 | 	mov	arg02, ##@LR__2195
14900     00 74 06 F6 | 	mov	arg01, #0
14904     00 78 06 F6 | 	mov	arg03, #0
14908     A8 0F B1 FD | 	call	#__system___basic_print_string
1490c     00 74 06 F6 | 	mov	arg01, #0
14910     0A 76 06 F6 | 	mov	arg02, #10
14914     00 78 06 F6 | 	mov	arg03, #0
14918     4C 0F B1 FD | 	call	#__system___basic_print_char
1491c     00 74 06 F6 | 	mov	arg01, #0
14920     24 42 B1 FD | 	call	#__system___getiolock_1205
14924     1A 01 68 FC | 	wrlong	#0, result1
14928     D8 00 00 FF 
1492c     18 D7 05 F1 | 	add	ptr__dat__, ##110872
14930     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14934     D8 00 00 FF 
14938     18 D7 85 F1 | 	sub	ptr__dat__, ##110872
1493c     3A 99 02 F6 | 	mov	local07, arg01
14940     0C 98 06 F1 | 	add	local07, #12
14944     C9 9A 02 F6 | 	mov	local08, objptr
14948     4C 93 01 F6 | 	mov	objptr, local07
1494c     84 6F B0 FD | 	call	#_jm_fullduplexserial_spin2_stop
14950     4D 93 01 F6 | 	mov	objptr, local08
14954     D8 00 00 FF 
14958     18 D7 05 F1 | 	add	ptr__dat__, ##110872
1495c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14960     D8 00 00 FF 
14964     18 D7 85 F1 | 	sub	ptr__dat__, ##110872
14968     0F 76 06 F6 | 	mov	arg02, #15
1496c     10 78 06 F6 | 	mov	arg03, #16
14970     D4 3D BF FD | 	call	#_force_gauge_begin
14974     00 34 0E F2 | 	cmp	result1, #0 wz
14978     1C 00 90 5D |  if_ne	jmp	#LR__0524
1497c     A8 8C 02 FB | 	rdlong	local01, fp
14980     0C 8C 06 F1 | 	add	local01, #12
14984     46 75 02 FB | 	rdlong	arg01, local01
14988     05 76 06 F6 | 	mov	arg02, #5
1498c     01 78 06 F6 | 	mov	arg03, #1
14990     B0 DE BE FD | 	call	#_state_machine_set
14994     18 00 90 FD | 	jmp	#LR__0525
14998                 | LR__0524
14998     A8 8C 02 FB | 	rdlong	local01, fp
1499c     0C 8C 06 F1 | 	add	local01, #12
149a0     46 75 02 FB | 	rdlong	arg01, local01
149a4     05 76 06 F6 | 	mov	arg02, #5
149a8     00 78 06 F6 | 	mov	arg03, #0
149ac     94 DE BE FD | 	call	#_state_machine_set
149b0                 | LR__0525
149b0                 | LR__0526
149b0     A8 96 02 FB | 	rdlong	local06, fp
149b4     DA 00 00 FF 
149b8     4C D6 05 F1 | 	add	ptr__dat__, ##111692
149bc     C9 9C 02 F6 | 	mov	local09, objptr
149c0     EB 92 01 F6 | 	mov	objptr, ptr__dat__
149c4     DA 00 00 FF 
149c8     4C D6 85 F1 | 	sub	ptr__dat__, ##111692
149cc     28 75 B0 FD | 	call	#_jm_quadrature_spin2_value
149d0     4E 93 01 F6 | 	mov	objptr, local09
149d4     1A 8D 02 F6 | 	mov	local01, result1
149d8     04 96 06 F1 | 	add	local06, #4
149dc     4B 8D 62 FC | 	wrlong	local01, local06
149e0     A8 96 02 FB | 	rdlong	local06, fp
149e4     68 07 B1 FD | 	call	#__system___getms
149e8     08 96 06 F1 | 	add	local06, #8
149ec     4B 35 62 FC | 	wrlong	result1, local06
149f0     D8 00 00 FF 
149f4     14 D7 05 F1 | 	add	ptr__dat__, ##110868
149f8     EB 96 CA FA | 	rdbyte	local06, ptr__dat__ wz
149fc     D8 00 00 FF 
14a00     14 D7 85 F1 | 	sub	ptr__dat__, ##110868
14a04     E4 00 90 AD |  if_e	jmp	#LR__0528
14a08     08 50 05 F1 | 	add	fp, #8
14a0c     A8 96 0A FB | 	rdlong	local06, fp wz
14a10     08 50 85 F1 | 	sub	fp, #8
14a14     80 00 90 5D |  if_ne	jmp	#LR__0527
14a18     51 01 00 FF 
14a1c     3C 75 06 F6 | 	mov	arg01, ##@LR__2196
14a20     51 01 00 FF 
14a24     49 77 06 F6 | 	mov	arg02, ##@LR__2197
14a28     C8 D3 BE FD | 	call	#_fopen
14a2c     1A 97 02 F6 | 	mov	local06, result1
14a30     08 50 05 F1 | 	add	fp, #8
14a34     A8 96 62 FC | 	wrlong	local06, fp
14a38     08 50 85 F1 | 	sub	fp, #8
14a3c     00 74 06 F6 | 	mov	arg01, #0
14a40     04 41 B1 FD | 	call	#__system___getiolock_1205
14a44     1A 75 02 F6 | 	mov	arg01, result1
14a48     D4 08 B1 FD | 	call	#__system___lockmem
14a4c     51 01 00 FF 
14a50     4B 77 06 F6 | 	mov	arg02, ##@LR__2198
14a54     00 74 06 F6 | 	mov	arg01, #0
14a58     00 78 06 F6 | 	mov	arg03, #0
14a5c     54 0E B1 FD | 	call	#__system___basic_print_string
14a60     00 74 06 F6 | 	mov	arg01, #0
14a64     0A 76 06 F6 | 	mov	arg02, #10
14a68     00 78 06 F6 | 	mov	arg03, #0
14a6c     F8 0D B1 FD | 	call	#__system___basic_print_char
14a70     00 74 06 F6 | 	mov	arg01, #0
14a74     D0 40 B1 FD | 	call	#__system___getiolock_1205
14a78     1A 01 68 FC | 	wrlong	#0, result1
14a7c     08 50 05 F1 | 	add	fp, #8
14a80     A8 74 02 FB | 	rdlong	arg01, fp
14a84     08 50 85 F1 | 	sub	fp, #8
14a88     51 01 00 FF 
14a8c     58 77 06 F6 | 	mov	arg02, ##@LR__2199
14a90     D8 D2 BE FD | 	call	#_fprintf
14a94     C8 00 90 FD | 	jmp	#LR__0530
14a98                 | LR__0527
14a98     08 50 05 F1 | 	add	fp, #8
14a9c     A8 74 02 FB | 	rdlong	arg01, fp
14aa0     08 50 85 F1 | 	sub	fp, #8
14aa4     51 01 00 FF 
14aa8     90 77 06 F6 | 	mov	arg02, ##@LR__2200
14aac     A8 9C 02 FB | 	rdlong	local09, fp
14ab0     08 9C 06 F1 | 	add	local09, #8
14ab4     4E 9D 02 FB | 	rdlong	local09, local09
14ab8     A8 90 02 FB | 	rdlong	local03, fp
14abc     48 9F 02 FB | 	rdlong	local10, local03
14ac0     04 90 06 F1 | 	add	local03, #4
14ac4     48 93 02 FB | 	rdlong	local04, local03
14ac8     04 90 86 F1 | 	sub	local03, #4
14acc     49 A1 02 F6 | 	mov	local11, local04
14ad0     F8 79 02 F6 | 	mov	arg03, ptra
14ad4     61 9D 66 FC | 	wrlong	local09, ptra++
14ad8     61 9F 66 FC | 	wrlong	local10, ptra++
14adc     61 A1 66 FC | 	wrlong	local11, ptra++
14ae0     88 D2 BE FD | 	call	#_fprintf
14ae4     0C F0 87 F1 | 	sub	ptra, #12
14ae8     74 00 90 FD | 	jmp	#LR__0530
14aec                 | LR__0528
14aec     08 50 05 F1 | 	add	fp, #8
14af0     A8 96 0A FB | 	rdlong	local06, fp wz
14af4     08 50 85 F1 | 	sub	fp, #8
14af8     64 00 90 AD |  if_e	jmp	#LR__0529
14afc     00 74 06 F6 | 	mov	arg01, #0
14b00     44 40 B1 FD | 	call	#__system___getiolock_1205
14b04     1A 75 02 F6 | 	mov	arg01, result1
14b08     14 08 B1 FD | 	call	#__system___lockmem
14b0c     51 01 00 FF 
14b10     9A 77 06 F6 | 	mov	arg02, ##@LR__2201
14b14     00 74 06 F6 | 	mov	arg01, #0
14b18     00 78 06 F6 | 	mov	arg03, #0
14b1c     94 0D B1 FD | 	call	#__system___basic_print_string
14b20     00 74 06 F6 | 	mov	arg01, #0
14b24     0A 76 06 F6 | 	mov	arg02, #10
14b28     00 78 06 F6 | 	mov	arg03, #0
14b2c     38 0D B1 FD | 	call	#__system___basic_print_char
14b30     01 9E 06 F6 | 	mov	local10, #1
14b34     00 74 06 F6 | 	mov	arg01, #0
14b38     0C 40 B1 FD | 	call	#__system___getiolock_1205
14b3c     1A 01 68 FC | 	wrlong	#0, result1
14b40     00 A0 06 F6 | 	mov	local11, #0
14b44     08 50 05 F1 | 	add	fp, #8
14b48     A8 74 02 FB | 	rdlong	arg01, fp
14b4c     08 50 85 F1 | 	sub	fp, #8
14b50                 | ' {
14b50                 | '     return _closeraw(f);
14b50     A8 C4 BE FD | 	call	#__closeraw
14b54     08 50 05 F1 | 	add	fp, #8
14b58     A8 00 68 FC | 	wrlong	#0, fp
14b5c     08 50 85 F1 | 	sub	fp, #8
14b60                 | LR__0529
14b60                 | LR__0530
14b60     1A 96 62 FD | 	getct	local06
14b64     0C 50 05 F1 | 	add	fp, #12
14b68     A8 8C 02 FB | 	rdlong	local01, fp
14b6c     0C 50 85 F1 | 	sub	fp, #12
14b70     4B 8D 12 F2 | 	cmp	local01, local06 wc
14b74     04 FD 9F CD |  if_b	jmp	#LR__0522
14b78     0C 50 05 F1 | 	add	fp, #12
14b7c     A8 74 02 FB | 	rdlong	arg01, fp
14b80     0C 50 85 F1 | 	sub	fp, #12
14b84     00 74 66 FA | 	addct1	arg01, #0
14b88     24 22 60 FD | 	waitct1
14b8c     EC FC 9F FD | 	jmp	#LR__0522
14b90     A8 F0 03 F6 | 	mov	ptra, fp
14b94     B3 00 A0 FD | 	call	#popregs_
14b98                 | _monitor_cog_0748_ret
14b98     2D 00 64 FD | 	ret
14b9c                 | 
14b9c                 | _button_navigation_0764
14b9c     DA 00 00 FF 
14ba0     68 D6 05 F1 | 	add	ptr__dat__, ##111720
14ba4     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
14ba8     DA 00 00 FF 
14bac     68 D6 85 F1 | 	sub	ptr__dat__, ##111720
14bb0                 | _button_navigation_0764_ret
14bb0     2D 00 64 FD | 	ret
14bb4                 | 
14bb4                 | _move_servo_0812
14bb4     09 4C 05 F6 | 	mov	COUNT_, #9
14bb8     A9 00 A0 FD | 	call	#pushregs_
14bbc     3A 8D 02 F6 | 	mov	local01, arg01
14bc0     3B 8F 02 F6 | 	mov	local02, arg02
14bc4     3C 91 02 F6 | 	mov	local03, arg03
14bc8     01 92 06 F6 | 	mov	local04, #1
14bcc                 | '     switch (type)
14bcc     47 95 02 F6 | 	mov	local05, local02
14bd0     04 94 26 F3 | 	fle	local05, #4
14bd4     30 94 62 FD | 	jmprel	local05
14bd8                 | LR__0531
14bd8     34 00 90 FD | 	jmp	#LR__0533
14bdc     D0 00 90 FD | 	jmp	#LR__0534
14be0     18 01 90 FD | 	jmp	#LR__0535
14be4     04 00 90 FD | 	jmp	#LR__0532
14be8     74 01 90 FD | 	jmp	#LR__0536
14bec                 | LR__0532
14bec     FA 00 00 FF 
14bf0     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
14bf4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14bf8     FA 00 00 FF 
14bfc     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
14c00     03 76 06 F6 | 	mov	arg02, #3
14c04     00 78 06 F6 | 	mov	arg03, #0
14c08     44 D8 BE FD | 	call	#_dyn4_send_command
14c0c                 | '         dyn4_send_command(&dyn4,  0x03 , 0);
14c0c                 | '         break;
14c0c     50 01 90 FD | 	jmp	#LR__0536
14c10                 | LR__0533
14c10     00 74 06 F6 | 	mov	arg01, #0
14c14     30 3F B1 FD | 	call	#__system___getiolock_1205
14c18     1A 75 02 F6 | 	mov	arg01, result1
14c1c     00 07 B1 FD | 	call	#__system___lockmem
14c20     51 01 00 FF 
14c24     A7 77 06 F6 | 	mov	arg02, ##@LR__2202
14c28     00 74 06 F6 | 	mov	arg01, #0
14c2c     00 78 06 F6 | 	mov	arg03, #0
14c30     80 0C B1 FD | 	call	#__system___basic_print_string
14c34     00 74 06 F6 | 	mov	arg01, #0
14c38     0A 76 06 F6 | 	mov	arg02, #10
14c3c     00 78 06 F6 | 	mov	arg03, #0
14c40     24 0C B1 FD | 	call	#__system___basic_print_char
14c44     00 74 06 F6 | 	mov	arg01, #0
14c48     FC 3E B1 FD | 	call	#__system___getiolock_1205
14c4c     1A 01 68 FC | 	wrlong	#0, result1
14c50     48 75 02 F6 | 	mov	arg01, local03
14c54     14 21 B1 FD | 	call	#__system___float_fromint
14c58     1A 75 02 F6 | 	mov	arg01, result1
14c5c     00 3D 22 FF 
14c60     00 76 06 F6 | 	mov	arg02, ##1148846080
14c64     58 26 B1 FD | 	call	#__system___float_div
14c68     1A 75 02 F6 | 	mov	arg01, result1
14c6c     46 77 02 FB | 	rdlong	arg02, local01
14c70     18 76 06 F1 | 	add	arg02, #24
14c74     70 B2 BF FD | 	call	#_mm_to_steps
14c78     04 8C 06 F1 | 	add	local01, #4
14c7c     46 95 02 FB | 	rdlong	local05, local01
14c80     04 94 06 F1 | 	add	local05, #4
14c84     4A 95 02 FB | 	rdlong	local05, local05
14c88     4A 35 02 F1 | 	add	result1, local05
14c8c     1A 79 02 F6 | 	mov	arg03, result1
14c90     FA 00 00 FF 
14c94     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
14c98     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14c9c     FA 00 00 FF 
14ca0     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
14ca4     01 76 06 F6 | 	mov	arg02, #1
14ca8     A4 D7 BE FD | 	call	#_dyn4_send_command
14cac                 | '         dyn4_send_command(&dyn4,  0x01 , positionSteps);
14cac                 | '         break;
14cac     B0 00 90 FD | 	jmp	#LR__0536
14cb0                 | LR__0534
14cb0     48 75 02 F6 | 	mov	arg01, local03
14cb4     B4 20 B1 FD | 	call	#__system___float_fromint
14cb8     1A 75 02 F6 | 	mov	arg01, result1
14cbc     00 3D 22 FF 
14cc0     00 76 06 F6 | 	mov	arg02, ##1148846080
14cc4     F8 25 B1 FD | 	call	#__system___float_div
14cc8     1A 75 02 F6 | 	mov	arg01, result1
14ccc     46 77 02 FB | 	rdlong	arg02, local01
14cd0     18 76 06 F1 | 	add	arg02, #24
14cd4     10 B2 BF FD | 	call	#_mm_to_steps
14cd8     1A 79 02 F6 | 	mov	arg03, result1
14cdc     FA 00 00 FF 
14ce0     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
14ce4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14ce8     FA 00 00 FF 
14cec     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
14cf0     01 76 06 F6 | 	mov	arg02, #1
14cf4     58 D7 BE FD | 	call	#_dyn4_send_command
14cf8                 | '         dyn4_send_command(&dyn4,  0x01 , deltaSteps);
14cf8                 | '         break;
14cf8     64 00 90 FD | 	jmp	#LR__0536
14cfc                 | LR__0535
14cfc     48 75 02 F6 | 	mov	arg01, local03
14d00     68 20 B1 FD | 	call	#__system___float_fromint
14d04     1A 75 02 F6 | 	mov	arg01, result1
14d08     00 3D 22 FF 
14d0c     00 76 06 F6 | 	mov	arg02, ##1148846080
14d10     AC 25 B1 FD | 	call	#__system___float_div
14d14     1A 75 02 F6 | 	mov	arg01, result1
14d18     00 A0 1F FF 
14d1c     00 76 06 F6 | 	mov	arg02, ##1061158912
14d20     7C 23 B1 FD | 	call	#__system___float_mul
14d24     1A 75 02 F6 | 	mov	arg01, result1
14d28     00 76 06 F6 | 	mov	arg02, #0
14d2c     60 28 B1 FD | 	call	#__system___float_tointeger
14d30     1A 97 02 F6 | 	mov	local06, result1
14d34     FA 00 00 FF 
14d38     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
14d3c     EB 98 02 F6 | 	mov	local07, ptr__dat__
14d40     0A 9A 06 F6 | 	mov	local08, #10
14d44     4B 9D 02 F6 | 	mov	local09, local06
14d48     4C 75 02 F6 | 	mov	arg01, local07
14d4c     0A 76 06 F6 | 	mov	arg02, #10
14d50     4E 79 02 F6 | 	mov	arg03, local09
14d54     FA 00 00 FF 
14d58     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
14d5c     F0 D6 BE FD | 	call	#_dyn4_send_command
14d60                 | LR__0536
14d60                 | '         dyn4_send_command(&dyn4,  0x0A , rpm);
14d60                 | '     }
14d60                 | '     }
14d60                 | ' 
14d60                 | '     return  (1) ;
14d60     01 34 06 F6 | 	mov	result1, #1
14d64     A8 F0 03 F6 | 	mov	ptra, fp
14d68     B3 00 A0 FD | 	call	#popregs_
14d6c                 | _move_servo_0812_ret
14d6c     2D 00 64 FD | 	ret
14d70                 | 
14d70                 | _control_cog_0827
14d70     0C 4C 05 F6 | 	mov	COUNT_, #12
14d74     A9 00 A0 FD | 	call	#pushregs_
14d78     C8 F0 07 F1 | 	add	ptra, #200
14d7c     A8 74 62 FC | 	wrlong	arg01, fp
14d80                 | ' {
14d80                 | ' 
14d80                 | '     while (!mcp23017_begin(&mcp,  0 ,  26 ,  0 ))
14d80                 | LR__0537
14d80     FC 00 00 FF 
14d84     9C D6 05 F1 | 	add	ptr__dat__, ##129180
14d88     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14d8c     FC 00 00 FF 
14d90     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
14d94     00 76 06 F6 | 	mov	arg02, #0
14d98     1A 78 06 F6 | 	mov	arg03, #26
14d9c     00 7A 06 F6 | 	mov	arg04, #0
14da0     24 D4 BE FD | 	call	#_mcp23017_begin
14da4     00 34 0E F2 | 	cmp	result1, #0 wz
14da8     4C 00 90 5D |  if_ne	jmp	#LR__0538
14dac     00 74 06 F6 | 	mov	arg01, #0
14db0     94 3D B1 FD | 	call	#__system___getiolock_1205
14db4     1A 75 02 F6 | 	mov	arg01, result1
14db8     64 05 B1 FD | 	call	#__system___lockmem
14dbc     51 01 00 FF 
14dc0     B7 77 06 F6 | 	mov	arg02, ##@LR__2203
14dc4     00 74 06 F6 | 	mov	arg01, #0
14dc8     00 78 06 F6 | 	mov	arg03, #0
14dcc     E4 0A B1 FD | 	call	#__system___basic_print_string
14dd0     00 74 06 F6 | 	mov	arg01, #0
14dd4     0A 76 06 F6 | 	mov	arg02, #10
14dd8     00 78 06 F6 | 	mov	arg03, #0
14ddc     88 0A B1 FD | 	call	#__system___basic_print_char
14de0     00 74 06 F6 | 	mov	arg01, #0
14de4     60 3D B1 FD | 	call	#__system___getiolock_1205
14de8     1A 01 68 FC | 	wrlong	#0, result1
14dec     64 74 06 F6 | 	mov	arg01, #100
14df0     44 06 B1 FD | 	call	#__system___waitms
14df4     88 FF 9F FD | 	jmp	#LR__0537
14df8                 | LR__0538
14df8     FA 00 00 FF 
14dfc     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
14e00     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14e04     FA 00 00 FF 
14e08     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
14e0c     0E 76 06 F6 | 	mov	arg02, #14
14e10     0C 78 06 F6 | 	mov	arg03, #12
14e14     00 7A 06 F6 | 	mov	arg04, #0
14e18     78 D5 BE FD | 	call	#_dyn4_begin
14e1c     FC 00 00 FF 
14e20     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14e24     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14e28     FC 00 00 FF 
14e2c     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14e30     1D 76 06 F6 | 	mov	arg02, #29
14e34     1C 78 06 F6 | 	mov	arg03, #28
14e38     24 7A 06 F6 | 	mov	arg04, #36
14e3c     00 7C 06 F6 | 	mov	arg05, #0
14e40     A0 60 BF FD | 	call	#_navkey_begin
14e44     FC 00 00 FF 
14e48     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14e4c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14e50     FC 00 00 FF 
14e54     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14e58     00 78 06 F6 | 	mov	arg03, #0
14e5c     0A 76 06 F6 | 	mov	arg02, #10
14e60     24 4E B0 FD | 	call	#_writeNavKey32_1802
14e64     FC 00 00 FF 
14e68     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14e6c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14e70     FC 00 00 FF 
14e74     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14e78     C3 00 00 FF 
14e7c     A0 76 06 F6 | 	mov	arg02, ##100000
14e80     38 62 BF FD | 	call	#_navkey_write_max
14e84     FC 00 00 FF 
14e88     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14e8c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14e90     FC 00 00 FF 
14e94     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14e98     3C FF 7F FF 
14e9c     60 77 06 F6 | 	mov	arg02, ##-100000
14ea0     48 62 BF FD | 	call	#_navkey_write_min
14ea4     FC 00 00 FF 
14ea8     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14eac     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14eb0     FC 00 00 FF 
14eb4     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14eb8     01 78 06 F6 | 	mov	arg03, #1
14ebc     16 76 06 F6 | 	mov	arg02, #22
14ec0     C4 4D B0 FD | 	call	#_writeNavKey32_1802
14ec4     FC 00 00 FF 
14ec8     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14ecc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14ed0     FC 00 00 FF 
14ed4     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14ed8     2C 79 06 F6 | 	mov	arg03, #300
14edc     1D 76 06 F6 | 	mov	arg02, #29
14ee0     44 4D B0 FD | 	call	#_writeNavKey8_1801
14ee4     FC 00 00 FF 
14ee8     24 D6 05 F1 | 	add	ptr__dat__, ##129060
14eec     EB 74 02 F6 | 	mov	arg01, ptr__dat__
14ef0     FC 00 00 FF 
14ef4     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
14ef8     00 78 06 F6 | 	mov	arg03, #0
14efc     0A 76 06 F6 | 	mov	arg02, #10
14f00     84 4D B0 FD | 	call	#_writeNavKey32_1802
14f04     04 50 05 F1 | 	add	fp, #4
14f08     A8 74 02 F6 | 	mov	arg01, fp
14f0c     04 50 85 F1 | 	sub	fp, #4
14f10     A8 78 02 FB | 	rdlong	arg03, fp
14f14     08 78 06 F1 | 	add	arg03, #8
14f18     3C 77 02 FB | 	rdlong	arg02, arg03
14f1c     30 78 06 F6 | 	mov	arg03, #48
14f20     E4 02 B1 FD | 	call	#__system____builtin_memmove
14f24     01 00 00 FF 
14f28     E8 75 06 F6 | 	mov	arg01, ##1000
14f2c     08 05 B1 FD | 	call	#__system___waitms
14f30     00 74 06 F6 | 	mov	arg01, #0
14f34     10 3C B1 FD | 	call	#__system___getiolock_1205
14f38     1A 75 02 F6 | 	mov	arg01, result1
14f3c     E0 03 B1 FD | 	call	#__system___lockmem
14f40     51 01 00 FF 
14f44     E0 77 06 F6 | 	mov	arg02, ##@LR__2204
14f48     00 74 06 F6 | 	mov	arg01, #0
14f4c     00 78 06 F6 | 	mov	arg03, #0
14f50     60 09 B1 FD | 	call	#__system___basic_print_string
14f54     00 74 06 F6 | 	mov	arg01, #0
14f58     0A 76 06 F6 | 	mov	arg02, #10
14f5c     00 78 06 F6 | 	mov	arg03, #0
14f60     04 09 B1 FD | 	call	#__system___basic_print_char
14f64     00 74 06 F6 | 	mov	arg01, #0
14f68     DC 3B B1 FD | 	call	#__system___getiolock_1205
14f6c     1A 01 68 FC | 	wrlong	#0, result1
14f70     34 50 05 F1 | 	add	fp, #52
14f74     A8 00 68 FC | 	wrlong	#0, fp
14f78     04 50 05 F1 | 	add	fp, #4
14f7c     A8 00 68 FC | 	wrlong	#0, fp
14f80     04 50 05 F1 | 	add	fp, #4
14f84     A8 02 48 FC | 	wrbyte	#1, fp
14f88     04 50 05 F1 | 	add	fp, #4
14f8c     A8 00 68 FC | 	wrlong	#0, fp
14f90     40 50 85 F1 | 	sub	fp, #64
14f94     A8 8C 02 FB | 	rdlong	local01, fp
14f98     04 8C 06 F1 | 	add	local01, #4
14f9c     46 8D 02 FB | 	rdlong	local01, local01
14fa0     46 8D 02 FB | 	rdlong	local01, local01
14fa4     A8 34 02 FB | 	rdlong	result1, fp
14fa8     04 34 06 F1 | 	add	result1, #4
14fac     1A 35 02 FB | 	rdlong	result1, result1
14fb0     04 34 06 F1 | 	add	result1, #4
14fb4     1A 8F 02 FB | 	rdlong	local02, result1
14fb8     A8 90 02 FB | 	rdlong	local03, fp
14fbc     04 90 06 F1 | 	add	local03, #4
14fc0     48 93 02 FB | 	rdlong	local04, local03
14fc4     08 92 06 F1 | 	add	local04, #8
14fc8     49 95 02 FB | 	rdlong	local05, local04
14fcc     44 50 05 F1 | 	add	fp, #68
14fd0     A8 8C 62 FC | 	wrlong	local01, fp
14fd4     04 50 05 F1 | 	add	fp, #4
14fd8     A8 8E 62 FC | 	wrlong	local02, fp
14fdc     04 50 05 F1 | 	add	fp, #4
14fe0     A8 94 62 FC | 	wrlong	local05, fp
14fe4     4C 50 85 F1 | 	sub	fp, #76
14fe8                 | '     MonitorData lastData = *control->monitorData;
14fe8                 | '     while (1)
14fe8                 | LR__0539
14fe8     50 50 05 F1 | 	add	fp, #80
14fec     A8 74 02 F6 | 	mov	arg01, fp
14ff0     50 50 85 F1 | 	sub	fp, #80
14ff4     A8 94 02 FB | 	rdlong	local05, fp
14ff8     08 94 06 F1 | 	add	local05, #8
14ffc     4A 77 02 FB | 	rdlong	arg02, local05
15000     30 78 06 F6 | 	mov	arg03, #48
15004     00 02 B1 FD | 	call	#__system____builtin_memmove
15008     A8 8E 02 FB | 	rdlong	local02, fp
1500c     04 8E 06 F1 | 	add	local02, #4
15010     47 95 02 FB | 	rdlong	local05, local02
15014     4A 8D 02 FB | 	rdlong	local01, local05
15018     A8 94 02 FB | 	rdlong	local05, fp
1501c     04 94 06 F1 | 	add	local05, #4
15020     4A 91 02 FB | 	rdlong	local03, local05
15024     04 90 06 F1 | 	add	local03, #4
15028     48 8F 02 FB | 	rdlong	local02, local03
1502c     A8 90 02 FB | 	rdlong	local03, fp
15030     04 90 06 F1 | 	add	local03, #4
15034     48 97 02 FB | 	rdlong	local06, local03
15038     4B 93 02 F6 | 	mov	local04, local06
1503c     08 92 06 F1 | 	add	local04, #8
15040     49 99 02 FB | 	rdlong	local07, local04
15044     80 50 05 F1 | 	add	fp, #128
15048     A8 8C 62 FC | 	wrlong	local01, fp
1504c     04 50 05 F1 | 	add	fp, #4
15050     A8 8E 62 FC | 	wrlong	local02, fp
15054     04 50 05 F1 | 	add	fp, #4
15058     A8 98 62 FC | 	wrlong	local07, fp
1505c     88 50 85 F1 | 	sub	fp, #136
15060     A8 8E 02 FB | 	rdlong	local02, fp
15064     04 8E 06 F1 | 	add	local02, #4
15068     47 95 02 FB | 	rdlong	local05, local02
1506c     4A 75 02 FB | 	rdlong	arg01, local05
15070     A8 94 02 FB | 	rdlong	local05, fp
15074     4A 77 02 FB | 	rdlong	arg02, local05
15078     18 76 06 F1 | 	add	arg02, #24
1507c     74 35 BF FD | 	call	#_raw_to_force
15080     8C 50 05 F1 | 	add	fp, #140
15084     A8 34 62 FC | 	wrlong	result1, fp
15088     04 50 05 F1 | 	add	fp, #4
1508c     A8 74 02 F6 | 	mov	arg01, fp
15090     90 50 85 F1 | 	sub	fp, #144
15094     A8 94 02 FB | 	rdlong	local05, fp
15098     4A 93 02 FB | 	rdlong	local04, local05
1509c     7C 92 06 F1 | 	add	local04, #124
150a0     49 77 02 F6 | 	mov	arg02, local04
150a4     1C 78 06 F6 | 	mov	arg03, #28
150a8     5C 01 B1 FD | 	call	#__system____builtin_memmove
150ac     FC 00 00 FF 
150b0     9C D6 05 F1 | 	add	ptr__dat__, ##129180
150b4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
150b8     FC 00 00 FF 
150bc     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
150c0     00 D2 BE FD | 	call	#_mcp_update_register
150c4     FC 00 00 FF 
150c8     9C D6 05 F1 | 	add	ptr__dat__, ##129180
150cc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
150d0     FC 00 00 FF 
150d4     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
150d8     06 76 06 F6 | 	mov	arg02, #6
150dc     00 78 06 F6 | 	mov	arg03, #0
150e0     01 7A 06 F6 | 	mov	arg04, #1
150e4     1C D2 BE FD | 	call	#_mcp_set_pin
150e8     54 50 05 F1 | 	add	fp, #84
150ec     A8 8C CA FA | 	rdbyte	local01, fp wz
150f0     54 50 85 F1 | 	sub	fp, #84
150f4     28 00 90 AD |  if_e	jmp	#LR__0540
150f8     FC 00 00 FF 
150fc     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15100     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15104     FC 00 00 FF 
15108     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
1510c     04 76 06 F6 | 	mov	arg02, #4
15110     00 78 06 F6 | 	mov	arg03, #0
15114     00 7A 06 F6 | 	mov	arg04, #0
15118     E8 D1 BE FD | 	call	#_mcp_set_pin
1511c     24 00 90 FD | 	jmp	#LR__0541
15120                 | LR__0540
15120     FC 00 00 FF 
15124     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15128     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1512c     FC 00 00 FF 
15130     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15134     04 76 06 F6 | 	mov	arg02, #4
15138     00 78 06 F6 | 	mov	arg03, #0
1513c     00 7A 06 F6 | 	mov	arg04, #0
15140     C0 D1 BE FD | 	call	#_mcp_set_pin
15144                 | LR__0541
15144     FC 00 00 FF 
15148     9C D6 05 F1 | 	add	ptr__dat__, ##129180
1514c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15150     FC 00 00 FF 
15154     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15158     03 76 06 F6 | 	mov	arg02, #3
1515c     00 78 06 F6 | 	mov	arg03, #0
15160     08 D2 BE FD | 	call	#_mcp_get_pin
15164     07 34 4E F7 | 	zerox	result1, #7 wz
15168     1C 00 90 5D |  if_ne	jmp	#LR__0542
1516c     A8 8E 02 FB | 	rdlong	local02, fp
15170     08 8E 06 F1 | 	add	local02, #8
15174     47 75 02 FB | 	rdlong	arg01, local02
15178     01 76 06 F6 | 	mov	arg02, #1
1517c     01 78 06 F6 | 	mov	arg03, #1
15180     C0 D6 BE FD | 	call	#_state_machine_set
15184     18 00 90 FD | 	jmp	#LR__0543
15188                 | LR__0542
15188     A8 8E 02 FB | 	rdlong	local02, fp
1518c     08 8E 06 F1 | 	add	local02, #8
15190     47 75 02 FB | 	rdlong	arg01, local02
15194     01 76 06 F6 | 	mov	arg02, #1
15198     00 78 06 F6 | 	mov	arg03, #0
1519c     A4 D6 BE FD | 	call	#_state_machine_set
151a0                 | LR__0543
151a0     FC 00 00 FF 
151a4     9C D6 05 F1 | 	add	ptr__dat__, ##129180
151a8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
151ac     FC 00 00 FF 
151b0     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
151b4     01 76 06 F6 | 	mov	arg02, #1
151b8     00 78 06 F6 | 	mov	arg03, #0
151bc     AC D1 BE FD | 	call	#_mcp_get_pin
151c0     07 34 4E F7 | 	zerox	result1, #7 wz
151c4     1C 00 90 5D |  if_ne	jmp	#LR__0544
151c8     A8 8E 02 FB | 	rdlong	local02, fp
151cc     08 8E 06 F1 | 	add	local02, #8
151d0     47 75 02 FB | 	rdlong	arg01, local02
151d4     02 76 06 F6 | 	mov	arg02, #2
151d8     02 78 06 F6 | 	mov	arg03, #2
151dc     64 D6 BE FD | 	call	#_state_machine_set
151e0     5C 00 90 FD | 	jmp	#LR__0547
151e4                 | LR__0544
151e4     FC 00 00 FF 
151e8     9C D6 05 F1 | 	add	ptr__dat__, ##129180
151ec     EB 74 02 F6 | 	mov	arg01, ptr__dat__
151f0     FC 00 00 FF 
151f4     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
151f8     00 76 06 F6 | 	mov	arg02, #0
151fc     00 78 06 F6 | 	mov	arg03, #0
15200     68 D1 BE FD | 	call	#_mcp_get_pin
15204     07 34 4E F7 | 	zerox	result1, #7 wz
15208     1C 00 90 5D |  if_ne	jmp	#LR__0545
1520c     A8 8E 02 FB | 	rdlong	local02, fp
15210     08 8E 06 F1 | 	add	local02, #8
15214     47 75 02 FB | 	rdlong	arg01, local02
15218     02 76 06 F6 | 	mov	arg02, #2
1521c     01 78 06 F6 | 	mov	arg03, #1
15220     20 D6 BE FD | 	call	#_state_machine_set
15224     18 00 90 FD | 	jmp	#LR__0546
15228                 | LR__0545
15228     A8 8E 02 FB | 	rdlong	local02, fp
1522c     08 8E 06 F1 | 	add	local02, #8
15230     47 75 02 FB | 	rdlong	arg01, local02
15234     02 76 06 F6 | 	mov	arg02, #2
15238     00 78 06 F6 | 	mov	arg03, #0
1523c     04 D6 BE FD | 	call	#_state_machine_set
15240                 | LR__0546
15240                 | LR__0547
15240     FC 00 00 FF 
15244     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15248     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1524c     FC 00 00 FF 
15250     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15254     03 76 06 F6 | 	mov	arg02, #3
15258     01 78 06 F6 | 	mov	arg03, #1
1525c     0C D1 BE FD | 	call	#_mcp_get_pin
15260     1A 35 E2 F8 | 	getbyte	result1, result1, #0
15264     01 34 0E F2 | 	cmp	result1, #1 wz
15268     1C 00 90 5D |  if_ne	jmp	#LR__0548
1526c     A8 8E 02 FB | 	rdlong	local02, fp
15270     08 8E 06 F1 | 	add	local02, #8
15274     47 75 02 FB | 	rdlong	arg01, local02
15278     03 76 06 F6 | 	mov	arg02, #3
1527c     01 78 06 F6 | 	mov	arg03, #1
15280     C0 D5 BE FD | 	call	#_state_machine_set
15284     18 00 90 FD | 	jmp	#LR__0549
15288                 | LR__0548
15288     A8 8E 02 FB | 	rdlong	local02, fp
1528c     08 8E 06 F1 | 	add	local02, #8
15290     47 75 02 FB | 	rdlong	arg01, local02
15294     03 76 06 F6 | 	mov	arg02, #3
15298     00 78 06 F6 | 	mov	arg03, #0
1529c     A4 D5 BE FD | 	call	#_state_machine_set
152a0                 | LR__0549
152a0     FC 00 00 FF 
152a4     9C D6 05 F1 | 	add	ptr__dat__, ##129180
152a8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
152ac     FC 00 00 FF 
152b0     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
152b4     02 76 06 F6 | 	mov	arg02, #2
152b8     00 78 06 F6 | 	mov	arg03, #0
152bc     AC D0 BE FD | 	call	#_mcp_get_pin
152c0     1A 35 E2 F8 | 	getbyte	result1, result1, #0
152c4     01 34 0E F2 | 	cmp	result1, #1 wz
152c8     1C 00 90 5D |  if_ne	jmp	#LR__0550
152cc     A8 8E 02 FB | 	rdlong	local02, fp
152d0     08 8E 06 F1 | 	add	local02, #8
152d4     47 75 02 FB | 	rdlong	arg01, local02
152d8     04 76 06 F6 | 	mov	arg02, #4
152dc     01 78 06 F6 | 	mov	arg03, #1
152e0     60 D5 BE FD | 	call	#_state_machine_set
152e4     18 00 90 FD | 	jmp	#LR__0551
152e8                 | LR__0550
152e8     A8 8E 02 FB | 	rdlong	local02, fp
152ec     08 8E 06 F1 | 	add	local02, #8
152f0     47 75 02 FB | 	rdlong	arg01, local02
152f4     04 76 06 F6 | 	mov	arg02, #4
152f8     00 78 06 F6 | 	mov	arg03, #0
152fc     44 D5 BE FD | 	call	#_state_machine_set
15300                 | LR__0551
15300     FA 00 00 FF 
15304     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
15308     EB 74 02 F6 | 	mov	arg01, ptr__dat__
1530c     FA 00 00 FF 
15310     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
15314     AC 50 05 F1 | 	add	fp, #172
15318     A8 76 02 F6 | 	mov	arg02, fp
1531c     AC 50 85 F1 | 	sub	fp, #172
15320     E4 D3 BE FD | 	call	#_dyn4_get_status
15324     00 34 0E F2 | 	cmp	result1, #0 wz
15328     38 00 90 AD |  if_e	jmp	#LR__0552
1532c     40 50 05 F1 | 	add	fp, #64
15330     A8 8C 02 FB | 	rdlong	local01, fp
15334     01 8C 06 F1 | 	add	local01, #1
15338     A8 8C 62 FC | 	wrlong	local01, fp
1533c     40 50 85 F1 | 	sub	fp, #64
15340     04 8C 56 F2 | 	cmps	local01, #4 wc
15344     40 00 90 CD |  if_b	jmp	#LR__0553
15348     A8 8E 02 FB | 	rdlong	local02, fp
1534c     08 8E 06 F1 | 	add	local02, #8
15350     47 75 02 FB | 	rdlong	arg01, local02
15354     06 76 06 F6 | 	mov	arg02, #6
15358     00 78 06 F6 | 	mov	arg03, #0
1535c     E4 D4 BE FD | 	call	#_state_machine_set
15360     24 00 90 FD | 	jmp	#LR__0553
15364                 | LR__0552
15364     40 50 05 F1 | 	add	fp, #64
15368     A8 00 68 FC | 	wrlong	#0, fp
1536c     40 50 85 F1 | 	sub	fp, #64
15370     A8 8E 02 FB | 	rdlong	local02, fp
15374     08 8E 06 F1 | 	add	local02, #8
15378     47 75 02 FB | 	rdlong	arg01, local02
1537c     06 76 06 F6 | 	mov	arg02, #6
15380     01 78 06 F6 | 	mov	arg03, #1
15384     BC D4 BE FD | 	call	#_state_machine_set
15388                 | LR__0553
15388     8C 50 05 F1 | 	add	fp, #140
1538c     A8 8C 02 FB | 	rdlong	local01, fp
15390     8C 50 85 F1 | 	sub	fp, #140
15394     00 8C 56 F2 | 	cmps	local01, #0 wc
15398     6C 00 90 CD |  if_b	jmp	#LR__0554
1539c     8C 50 05 F1 | 	add	fp, #140
153a0     A8 74 02 FB | 	rdlong	arg01, fp
153a4     8C 50 85 F1 | 	sub	fp, #140
153a8     C0 19 B1 FD | 	call	#__system___float_fromint
153ac     1A 95 02 F6 | 	mov	local05, result1
153b0     A0 50 05 F1 | 	add	fp, #160
153b4     A8 74 02 FB | 	rdlong	arg01, fp
153b8     A0 50 85 F1 | 	sub	fp, #160
153bc     00 3D 22 FF 
153c0     00 76 06 F6 | 	mov	arg02, ##1148846080
153c4     D8 1C B1 FD | 	call	#__system___float_mul
153c8     1A 91 02 F6 | 	mov	local03, result1
153cc     01 92 66 F6 | 	neg	local04, #1
153d0     4A 75 02 F6 | 	mov	arg01, local05
153d4     48 77 02 F6 | 	mov	arg02, local03
153d8     01 78 66 F6 | 	neg	arg03, #1
153dc     18 21 B1 FD | 	call	#__system___float_cmp
153e0     01 34 56 F2 | 	cmps	result1, #1 wc
153e4     20 00 90 CD |  if_b	jmp	#LR__0554
153e8     A8 8E 02 FB | 	rdlong	local02, fp
153ec     08 8E 06 F1 | 	add	local02, #8
153f0     47 75 02 FB | 	rdlong	arg01, local02
153f4     02 94 06 F6 | 	mov	local05, #2
153f8     09 76 06 F6 | 	mov	arg02, #9
153fc     02 78 06 F6 | 	mov	arg03, #2
15400     40 D4 BE FD | 	call	#_state_machine_set
15404     C0 01 90 FD | 	jmp	#LR__0565
15408                 | LR__0554
15408     8C 50 05 F1 | 	add	fp, #140
1540c     A8 8C 02 FB | 	rdlong	local01, fp
15410     8C 50 85 F1 | 	sub	fp, #140
15414     00 8C 56 F2 | 	cmps	local01, #0 wc
15418     70 00 90 3D |  if_ae	jmp	#LR__0555
1541c     8C 50 05 F1 | 	add	fp, #140
15420     A8 74 02 FB | 	rdlong	arg01, fp
15424     8C 50 85 F1 | 	sub	fp, #140
15428     40 19 B1 FD | 	call	#__system___float_fromint
1542c     1A 95 02 F6 | 	mov	local05, result1
15430     A4 50 05 F1 | 	add	fp, #164
15434     A8 74 02 FB | 	rdlong	arg01, fp
15438     A4 50 85 F1 | 	sub	fp, #164
1543c     1F 74 E6 F4 | 	bitnot	arg01, #31
15440     00 3D 22 FF 
15444     00 76 06 F6 | 	mov	arg02, ##1148846080
15448     54 1C B1 FD | 	call	#__system___float_mul
1544c     1A 91 02 F6 | 	mov	local03, result1
15450     01 92 06 F6 | 	mov	local04, #1
15454     4A 75 02 F6 | 	mov	arg01, local05
15458     48 77 02 F6 | 	mov	arg02, local03
1545c     01 78 06 F6 | 	mov	arg03, #1
15460     94 20 B1 FD | 	call	#__system___float_cmp
15464     00 34 56 F2 | 	cmps	result1, #0 wc
15468     20 00 90 3D |  if_ae	jmp	#LR__0555
1546c     A8 8E 02 FB | 	rdlong	local02, fp
15470     08 8E 06 F1 | 	add	local02, #8
15474     47 75 02 FB | 	rdlong	arg01, local02
15478     03 94 06 F6 | 	mov	local05, #3
1547c     09 76 06 F6 | 	mov	arg02, #9
15480     03 78 06 F6 | 	mov	arg03, #3
15484     BC D3 BE FD | 	call	#_state_machine_set
15488     3C 01 90 FD | 	jmp	#LR__0564
1548c                 | LR__0555
1548c     FC 00 00 FF 
15490     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15494     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15498     FC 00 00 FF 
1549c     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
154a0     01 90 06 F6 | 	mov	local03, #1
154a4     04 76 06 F6 | 	mov	arg02, #4
154a8     01 78 06 F6 | 	mov	arg03, #1
154ac     BC CE BE FD | 	call	#_mcp_get_pin
154b0     1A 35 E2 F8 | 	getbyte	result1, result1, #0
154b4     01 34 0E F2 | 	cmp	result1, #1 wz
154b8     20 00 90 5D |  if_ne	jmp	#LR__0556
154bc     A8 8E 02 FB | 	rdlong	local02, fp
154c0     08 8E 06 F1 | 	add	local02, #8
154c4     47 75 02 FB | 	rdlong	arg01, local02
154c8     04 94 06 F6 | 	mov	local05, #4
154cc     09 76 06 F6 | 	mov	arg02, #9
154d0     04 78 06 F6 | 	mov	arg03, #4
154d4     6C D3 BE FD | 	call	#_state_machine_set
154d8     EC 00 90 FD | 	jmp	#LR__0563
154dc                 | LR__0556
154dc     FC 00 00 FF 
154e0     9C D6 05 F1 | 	add	ptr__dat__, ##129180
154e4     EB 74 02 F6 | 	mov	arg01, ptr__dat__
154e8     FC 00 00 FF 
154ec     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
154f0     01 90 06 F6 | 	mov	local03, #1
154f4     05 76 06 F6 | 	mov	arg02, #5
154f8     01 78 06 F6 | 	mov	arg03, #1
154fc     6C CE BE FD | 	call	#_mcp_get_pin
15500     1A 35 E2 F8 | 	getbyte	result1, result1, #0
15504     01 34 0E F2 | 	cmp	result1, #1 wz
15508     20 00 90 5D |  if_ne	jmp	#LR__0557
1550c     A8 8E 02 FB | 	rdlong	local02, fp
15510     08 8E 06 F1 | 	add	local02, #8
15514     47 75 02 FB | 	rdlong	arg01, local02
15518     05 94 06 F6 | 	mov	local05, #5
1551c     09 76 06 F6 | 	mov	arg02, #9
15520     05 78 06 F6 | 	mov	arg03, #5
15524     1C D3 BE FD | 	call	#_state_machine_set
15528     9C 00 90 FD | 	jmp	#LR__0562
1552c                 | LR__0557
1552c     FC 00 00 FF 
15530     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15534     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15538     FC 00 00 FF 
1553c     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15540     01 90 06 F6 | 	mov	local03, #1
15544     06 76 06 F6 | 	mov	arg02, #6
15548     01 78 06 F6 | 	mov	arg03, #1
1554c     1C CE BE FD | 	call	#_mcp_get_pin
15550     1A 35 E2 F8 | 	getbyte	result1, result1, #0
15554     01 34 0E F2 | 	cmp	result1, #1 wz
15558     20 00 90 5D |  if_ne	jmp	#LR__0558
1555c     A8 8E 02 FB | 	rdlong	local02, fp
15560     08 8E 06 F1 | 	add	local02, #8
15564     47 75 02 FB | 	rdlong	arg01, local02
15568     06 94 06 F6 | 	mov	local05, #6
1556c     09 76 06 F6 | 	mov	arg02, #9
15570     06 78 06 F6 | 	mov	arg03, #6
15574     CC D2 BE FD | 	call	#_state_machine_set
15578     4C 00 90 FD | 	jmp	#LR__0561
1557c                 | LR__0558
1557c     B4 50 05 F1 | 	add	fp, #180
15580     A8 8C CA FA | 	rdbyte	local01, fp wz
15584     B4 50 85 F1 | 	sub	fp, #180
15588     20 00 90 5D |  if_ne	jmp	#LR__0559
1558c     A8 8E 02 FB | 	rdlong	local02, fp
15590     08 8E 06 F1 | 	add	local02, #8
15594     47 75 02 FB | 	rdlong	arg01, local02
15598     07 94 06 F6 | 	mov	local05, #7
1559c     09 76 06 F6 | 	mov	arg02, #9
155a0     07 78 06 F6 | 	mov	arg03, #7
155a4     9C D2 BE FD | 	call	#_state_machine_set
155a8     1C 00 90 FD | 	jmp	#LR__0560
155ac                 | LR__0559
155ac     A8 8E 02 FB | 	rdlong	local02, fp
155b0     08 8E 06 F1 | 	add	local02, #8
155b4     47 75 02 FB | 	rdlong	arg01, local02
155b8     08 94 06 F6 | 	mov	local05, #8
155bc     09 76 06 F6 | 	mov	arg02, #9
155c0     08 78 06 F6 | 	mov	arg03, #8
155c4     7C D2 BE FD | 	call	#_state_machine_set
155c8                 | LR__0560
155c8                 | LR__0561
155c8                 | LR__0562
155c8                 | LR__0563
155c8                 | LR__0564
155c8                 | LR__0565
155c8     50 50 05 F1 | 	add	fp, #80
155cc     A8 8C 02 FB | 	rdlong	local01, fp
155d0     50 50 85 F1 | 	sub	fp, #80
155d4     02 8C 0E F2 | 	cmp	local01, #2 wz
155d8     10 0E 90 5D |  if_ne	jmp	#LR__0615
155dc     04 50 05 F1 | 	add	fp, #4
155e0     A8 8C 02 FB | 	rdlong	local01, fp
155e4     04 50 85 F1 | 	sub	fp, #4
155e8     02 8C 0E F2 | 	cmp	local01, #2 wz
155ec     3C 50 05 A1 |  if_e	add	fp, #60
155f0     A8 90 C2 AA |  if_e	rdbyte	local03, fp
155f4     3C 50 85 A1 |  if_e	sub	fp, #60
155f8     48 95 0A A6 |  if_e	mov	local05, local03 wz
155fc     68 50 05 F1 | 	add	fp, #104
15600     A8 8C 0A FB | 	rdlong	local01, fp wz
15604     68 50 85 F1 | 	sub	fp, #104
15608     14 00 90 5D |  if_ne	jmp	#LR__0566
1560c     A8 74 02 FB | 	rdlong	arg01, fp
15610     03 76 06 F6 | 	mov	arg02, #3
15614     00 78 06 F6 | 	mov	arg03, #0
15618     98 F5 BF FD | 	call	#_move_servo_0812
1561c     DC 0D 90 FD | 	jmp	#LR__0616
15620                 | LR__0566
15620     1C 50 05 F1 | 	add	fp, #28
15624     A8 8C 02 FB | 	rdlong	local01, fp
15628     1C 50 85 F1 | 	sub	fp, #28
1562c     01 8C 0E F2 | 	cmp	local01, #1 wz
15630     3C 50 05 A1 |  if_e	add	fp, #60
15634     A8 90 C2 AA |  if_e	rdbyte	local03, fp
15638     3C 50 85 A1 |  if_e	sub	fp, #60
1563c     48 95 0A A6 |  if_e	mov	local05, local03 wz
15640     70 50 05 F1 | 	add	fp, #112
15644     A8 8C 0A FB | 	rdlong	local01, fp wz
15648     70 50 85 F1 | 	sub	fp, #112
1564c     1C 0C 90 5D |  if_ne	jmp	#LR__0612
15650     24 50 05 F1 | 	add	fp, #36
15654     A8 8E 0A FB | 	rdlong	local02, fp wz
15658     24 50 85 F1 | 	sub	fp, #36
1565c     3C 50 05 A1 |  if_e	add	fp, #60
15660     A8 90 C2 AA |  if_e	rdbyte	local03, fp
15664     3C 50 85 A1 |  if_e	sub	fp, #60
15668     48 95 0A A6 |  if_e	mov	local05, local03 wz
1566c     FC 00 00 FF 
15670     24 D6 05 F1 | 	add	ptr__dat__, ##129060
15674     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15678     FC 00 00 FF 
1567c     24 D6 85 F1 | 	sub	ptr__dat__, ##129060
15680     D8 58 BF FD | 	call	#_navkey_update_status
15684     FC 00 00 FF 
15688     58 D6 05 F1 | 	add	ptr__dat__, ##129112
1568c     EB 8C 02 FB | 	rdlong	local01, ptr__dat__
15690     FC 00 00 FF 
15694     58 D6 85 F1 | 	sub	ptr__dat__, ##129112
15698     01 8C 56 F2 | 	cmps	local01, #1 wc
1569c     20 01 90 CD |  if_b	jmp	#LR__0576
156a0     6C 50 05 F1 | 	add	fp, #108
156a4     A8 8C 02 FB | 	rdlong	local01, fp
156a8     6C 50 85 F1 | 	sub	fp, #108
156ac     07 8C 0E F2 | 	cmp	local01, #7 wz
156b0     E0 00 90 5D |  if_ne	jmp	#LR__0574
156b4                 | '                         {
156b4                 | ' 
156b4                 | '                             switch (currentMachineState.function)
156b4     74 50 05 F1 | 	add	fp, #116
156b8     A8 9A 02 FB | 	rdlong	local08, fp
156bc     74 50 85 F1 | 	sub	fp, #116
156c0     07 9A 26 F3 | 	fle	local08, #7
156c4     30 9A 62 FD | 	jmprel	local08
156c8                 | LR__0567
156c8     1C 00 90 FD | 	jmp	#LR__0568
156cc     34 00 90 FD | 	jmp	#LR__0569
156d0     4C 00 90 FD | 	jmp	#LR__0570
156d4     64 00 90 FD | 	jmp	#LR__0571
156d8     7C 00 90 FD | 	jmp	#LR__0572
156dc     E0 00 90 FD | 	jmp	#LR__0575
156e0     DC 00 90 FD | 	jmp	#LR__0575
156e4     8C 00 90 FD | 	jmp	#LR__0573
156e8                 | LR__0568
156e8     A8 8E 02 FB | 	rdlong	local02, fp
156ec     08 8E 06 F1 | 	add	local02, #8
156f0     47 95 02 FB | 	rdlong	local05, local02
156f4     01 92 06 F6 | 	mov	local04, #1
156f8     24 94 06 F1 | 	add	local05, #36
156fc     4A 03 68 FC | 	wrlong	#1, local05
15700                 | '                                 control->stateMachine->function = FUNC_MANUAL_INCREMENTAL_JOG;
15700                 | '                                 break;
15700     BC 00 90 FD | 	jmp	#LR__0575
15704                 | LR__0569
15704     A8 8E 02 FB | 	rdlong	local02, fp
15708     08 8E 06 F1 | 	add	local02, #8
1570c     47 95 02 FB | 	rdlong	local05, local02
15710     02 92 06 F6 | 	mov	local04, #2
15714     24 94 06 F1 | 	add	local05, #36
15718     4A 05 68 FC | 	wrlong	#2, local05
1571c                 | '                                 control->stateMachine->function = FUNC_MANUAL_CONTINUOUS_JOG;
1571c                 | '                                 break;
1571c     A0 00 90 FD | 	jmp	#LR__0575
15720                 | LR__0570
15720     A8 8E 02 FB | 	rdlong	local02, fp
15724     08 8E 06 F1 | 	add	local02, #8
15728     47 95 02 FB | 	rdlong	local05, local02
1572c     03 92 06 F6 | 	mov	local04, #3
15730     24 94 06 F1 | 	add	local05, #36
15734     4A 07 68 FC | 	wrlong	#3, local05
15738                 | '                                 control->stateMachine->function = FUNC_MANUAL_POSITIONAL_MOVE;
15738                 | '                                 break;
15738     84 00 90 FD | 	jmp	#LR__0575
1573c                 | LR__0571
1573c     A8 8E 02 FB | 	rdlong	local02, fp
15740     08 8E 06 F1 | 	add	local02, #8
15744     47 95 02 FB | 	rdlong	local05, local02
15748     04 92 06 F6 | 	mov	local04, #4
1574c     24 94 06 F1 | 	add	local05, #36
15750     4A 09 68 FC | 	wrlong	#4, local05
15754                 | '                                 control->stateMachine->function = FUNC_MANUAL_HOME;
15754                 | '                                 break;
15754     68 00 90 FD | 	jmp	#LR__0575
15758                 | LR__0572
15758     A8 8E 02 FB | 	rdlong	local02, fp
1575c     08 8E 06 F1 | 	add	local02, #8
15760     47 95 02 FB | 	rdlong	local05, local02
15764     00 92 06 F6 | 	mov	local04, #0
15768     24 94 06 F1 | 	add	local05, #36
1576c     4A 01 68 FC | 	wrlong	#0, local05
15770                 | '                                 control->stateMachine->function = FUNC_MANUAL_OFF;
15770                 | '                                 break;
15770     4C 00 90 FD | 	jmp	#LR__0575
15774                 | '                                 break;
15774                 | '                                 break;
15774                 | LR__0573
15774     A8 8E 02 FB | 	rdlong	local02, fp
15778     08 8E 06 F1 | 	add	local02, #8
1577c     47 91 02 FB | 	rdlong	local03, local02
15780     48 95 02 F6 | 	mov	local05, local03
15784     00 92 06 F6 | 	mov	local04, #0
15788     24 94 06 F1 | 	add	local05, #36
1578c     4A 01 68 FC | 	wrlong	#0, local05
15790                 | '                                 control->stateMachine->function = FUNC_MANUAL_OFF;
15790                 | '                                 break;
15790     2C 00 90 FD | 	jmp	#LR__0575
15794                 | LR__0574
15794     A8 8C 02 FB | 	rdlong	local01, fp
15798     08 8C 06 F1 | 	add	local01, #8
1579c     46 8F 02 FB | 	rdlong	local02, local01
157a0     1C 8E 06 F1 | 	add	local02, #28
157a4     47 91 02 FB | 	rdlong	local03, local02
157a8     08 90 0E F2 | 	cmp	local03, #8 wz
157ac     A8 8C 02 AB |  if_e	rdlong	local01, fp
157b0     08 8C 06 A1 |  if_e	add	local01, #8
157b4     46 8F 02 AB |  if_e	rdlong	local02, local01
157b8     24 8E 06 A1 |  if_e	add	local02, #36
157bc     47 01 68 AC |  if_e	wrlong	#0, local02
157c0                 | LR__0575
157c0                 | LR__0576
157c0                 | '                         {
157c0                 | '                             control->stateMachine->function = FUNC_MANUAL_OFF;
157c0                 | '                         }
157c0                 | '                     }
157c0                 | ' 
157c0                 | ' 
157c0                 | '                     switch (currentMachineState.function)
157c0     74 50 05 F1 | 	add	fp, #116
157c4     A8 8C 02 FB | 	rdlong	local01, fp
157c8     74 50 85 F1 | 	sub	fp, #116
157cc     46 9D 02 F6 | 	mov	local09, local01
157d0     07 9C 26 F3 | 	fle	local09, #7
157d4     30 9C 62 FD | 	jmprel	local09
157d8                 | LR__0577
157d8     1C 00 90 FD | 	jmp	#LR__0578
157dc     2C 00 90 FD | 	jmp	#LR__0579
157e0     6C 02 90 FD | 	jmp	#LR__0586
157e4     38 04 90 FD | 	jmp	#LR__0592
157e8     00 06 90 FD | 	jmp	#LR__0597
157ec     94 08 90 FD | 	jmp	#LR__0605
157f0     A4 08 90 FD | 	jmp	#LR__0606
157f4     04 0C 90 FD | 	jmp	#LR__0616
157f8                 | LR__0578
157f8     A8 74 02 FB | 	rdlong	arg01, fp
157fc     03 76 06 F6 | 	mov	arg02, #3
15800     00 78 06 F6 | 	mov	arg03, #0
15804     AC F3 BF FD | 	call	#_move_servo_0812
15808                 | '                         move_servo(control, MOVE_STOP, 0);
15808                 | '                         break;
15808     F0 0B 90 FD | 	jmp	#LR__0616
1580c                 | LR__0579
1580c     28 50 05 F1 | 	add	fp, #40
15810     A8 8E 02 FB | 	rdlong	local02, fp
15814     28 50 85 F1 | 	sub	fp, #40
15818     01 8E 0E F2 | 	cmp	local02, #1 wz
1581c     3C 50 05 A1 |  if_e	add	fp, #60
15820     A8 92 C2 AA |  if_e	rdbyte	local04, fp
15824     3C 50 85 A1 |  if_e	sub	fp, #60
15828     00 92 4E A2 |  if_e	cmps	local04, #0 wz
1582c     28 00 90 AD |  if_e	jmp	#LR__0580
15830     A8 74 02 FB | 	rdlong	arg01, fp
15834     03 76 06 F6 | 	mov	arg02, #3
15838     00 78 06 F6 | 	mov	arg03, #0
1583c     74 F3 BF FD | 	call	#_move_servo_0812
15840     A8 8E 02 FB | 	rdlong	local02, fp
15844     08 8E 06 F1 | 	add	local02, #8
15848     47 95 02 FB | 	rdlong	local05, local02
1584c     28 94 06 F1 | 	add	local05, #40
15850     01 00 80 FF 
15854     4A D1 6B FC | 	wrlong	##1000, local05
15858                 | LR__0580
15858     FC 00 00 FF 
1585c     50 D6 05 F1 | 	add	ptr__dat__, ##129104
15860     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15864     FC 00 00 FF 
15868     50 D6 85 F1 | 	sub	ptr__dat__, ##129104
1586c     01 8E 56 F2 | 	cmps	local02, #1 wc
15870     5C 00 90 CD |  if_b	jmp	#LR__0582
15874     A8 8E 02 FB | 	rdlong	local02, fp
15878     08 8E 06 F1 | 	add	local02, #8
1587c     47 95 02 FB | 	rdlong	local05, local02
15880     28 94 06 F1 | 	add	local05, #40
15884     4A 93 02 FB | 	rdlong	local04, local05
15888     13 00 00 FF 
1588c     10 93 56 F2 | 	cmps	local04, ##10000 wc
15890     3C 00 90 3D |  if_ae	jmp	#LR__0581
15894     A8 92 02 FB | 	rdlong	local04, fp
15898     08 92 06 F1 | 	add	local04, #8
1589c     49 97 02 FB | 	rdlong	local06, local04
158a0     28 96 06 F1 | 	add	local06, #40
158a4     4B 9F 02 FB | 	rdlong	local10, local06
158a8     4F A1 02 F6 | 	mov	local11, local10
158ac     50 99 52 F6 | 	abs	local07, local11 wc
158b0     0A 98 16 FD | 	qdiv	local07, #10
158b4     A8 8E 02 FB | 	rdlong	local02, fp
158b8     08 8E 06 F1 | 	add	local02, #8
158bc     47 95 02 FB | 	rdlong	local05, local02
158c0     28 94 06 F1 | 	add	local05, #40
158c4     18 A2 62 FD | 	getqx	local12
158c8     51 A3 82 F6 | 	negc	local12, local12
158cc     4A A3 62 FC | 	wrlong	local12, local05
158d0                 | LR__0581
158d0                 | LR__0582
158d0     FC 00 00 FF 
158d4     48 D6 05 F1 | 	add	ptr__dat__, ##129096
158d8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
158dc     FC 00 00 FF 
158e0     48 D6 85 F1 | 	sub	ptr__dat__, ##129096
158e4     01 8E 56 F2 | 	cmps	local02, #1 wc
158e8     58 00 90 CD |  if_b	jmp	#LR__0584
158ec     A8 8E 02 FB | 	rdlong	local02, fp
158f0     08 8E 06 F1 | 	add	local02, #8
158f4     47 95 02 FB | 	rdlong	local05, local02
158f8     28 94 06 F1 | 	add	local05, #40
158fc     4A 97 02 FB | 	rdlong	local06, local05
15900     0B 96 56 F2 | 	cmps	local06, #11 wc
15904     3C 00 90 CD |  if_b	jmp	#LR__0583
15908     A8 8E 02 FB | 	rdlong	local02, fp
1590c     08 8E 06 F1 | 	add	local02, #8
15910     47 95 02 FB | 	rdlong	local05, local02
15914     A8 92 02 FB | 	rdlong	local04, fp
15918     08 92 06 F1 | 	add	local04, #8
1591c     49 97 02 FB | 	rdlong	local06, local04
15920     28 96 06 F1 | 	add	local06, #40
15924     4B 9F 02 FB | 	rdlong	local10, local06
15928     4F A1 02 F6 | 	mov	local11, local10
1592c     50 A3 02 F6 | 	mov	local12, local11
15930     02 A2 66 F0 | 	shl	local12, #2
15934     50 A3 02 F1 | 	add	local12, local11
15938     01 A2 66 F0 | 	shl	local12, #1
1593c     28 94 06 F1 | 	add	local05, #40
15940     4A A3 62 FC | 	wrlong	local12, local05
15944                 | LR__0583
15944                 | LR__0584
15944     FC 00 00 FF 
15948     38 D6 05 F1 | 	add	ptr__dat__, ##129080
1594c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15950     FC 00 00 FF 
15954     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
15958     01 8E 56 F2 | 	cmps	local02, #1 wc
1595c     64 00 90 CD |  if_b	jmp	#LR__0585
15960     00 74 06 F6 | 	mov	arg01, #0
15964     E0 31 B1 FD | 	call	#__system___getiolock_1205
15968     1A 75 02 F6 | 	mov	arg01, result1
1596c     B0 F9 B0 FD | 	call	#__system___lockmem
15970     51 01 00 FF 
15974     F4 77 06 F6 | 	mov	arg02, ##@LR__2205
15978     00 74 06 F6 | 	mov	arg01, #0
1597c     00 78 06 F6 | 	mov	arg03, #0
15980     30 FF B0 FD | 	call	#__system___basic_print_string
15984     00 74 06 F6 | 	mov	arg01, #0
15988     0A 76 06 F6 | 	mov	arg02, #10
1598c     00 78 06 F6 | 	mov	arg03, #0
15990     D4 FE B0 FD | 	call	#__system___basic_print_char
15994     00 74 06 F6 | 	mov	arg01, #0
15998     AC 31 B1 FD | 	call	#__system___getiolock_1205
1599c     1A 01 68 FC | 	wrlong	#0, result1
159a0     A8 74 02 FB | 	rdlong	arg01, fp
159a4     3A 93 02 F6 | 	mov	local04, arg01
159a8     08 92 06 F1 | 	add	local04, #8
159ac     49 97 02 FB | 	rdlong	local06, local04
159b0     28 96 06 F1 | 	add	local06, #40
159b4     4B A3 02 FB | 	rdlong	local12, local06
159b8     00 76 06 F6 | 	mov	arg02, #0
159bc     51 79 02 F6 | 	mov	arg03, local12
159c0     F0 F1 BF FD | 	call	#_move_servo_0812
159c4                 | LR__0585
159c4     FC 00 00 FF 
159c8     40 D6 05 F1 | 	add	ptr__dat__, ##129088
159cc     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
159d0     FC 00 00 FF 
159d4     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
159d8     01 8E 56 F2 | 	cmps	local02, #1 wc
159dc     1C 0A 90 CD |  if_b	jmp	#LR__0616
159e0     00 74 06 F6 | 	mov	arg01, #0
159e4     60 31 B1 FD | 	call	#__system___getiolock_1205
159e8     1A 75 02 F6 | 	mov	arg01, result1
159ec     30 F9 B0 FD | 	call	#__system___lockmem
159f0     52 01 00 FF 
159f4     00 76 06 F6 | 	mov	arg02, ##@LR__2206
159f8     00 74 06 F6 | 	mov	arg01, #0
159fc     00 78 06 F6 | 	mov	arg03, #0
15a00     B0 FE B0 FD | 	call	#__system___basic_print_string
15a04     00 74 06 F6 | 	mov	arg01, #0
15a08     0A 76 06 F6 | 	mov	arg02, #10
15a0c     00 78 06 F6 | 	mov	arg03, #0
15a10     54 FE B0 FD | 	call	#__system___basic_print_char
15a14     00 74 06 F6 | 	mov	arg01, #0
15a18     2C 31 B1 FD | 	call	#__system___getiolock_1205
15a1c     1A 01 68 FC | 	wrlong	#0, result1
15a20     A8 74 02 FB | 	rdlong	arg01, fp
15a24     3A 93 02 F6 | 	mov	local04, arg01
15a28     08 92 06 F1 | 	add	local04, #8
15a2c     49 97 02 FB | 	rdlong	local06, local04
15a30     28 96 06 F1 | 	add	local06, #40
15a34     4B 9F 02 FB | 	rdlong	local10, local06
15a38     4F A1 02 F6 | 	mov	local11, local10
15a3c     50 A3 62 F6 | 	neg	local12, local11
15a40     00 76 06 F6 | 	mov	arg02, #0
15a44     51 79 02 F6 | 	mov	arg03, local12
15a48     68 F1 BF FD | 	call	#_move_servo_0812
15a4c                 | '                             move_servo(control, MOVE_RELATIVE, -1 * control->stateMachine->functionData);
15a4c                 | '                         }
15a4c                 | '                         break;
15a4c     AC 09 90 FD | 	jmp	#LR__0616
15a50                 | LR__0586
15a50     28 50 05 F1 | 	add	fp, #40
15a54     A8 94 02 FB | 	rdlong	local05, fp
15a58     28 50 85 F1 | 	sub	fp, #40
15a5c     02 94 0E F2 | 	cmp	local05, #2 wz
15a60     3C 50 05 A1 |  if_e	add	fp, #60
15a64     A8 92 C2 AA |  if_e	rdbyte	local04, fp
15a68     3C 50 85 A1 |  if_e	sub	fp, #60
15a6c     49 91 0A A6 |  if_e	mov	local03, local04 wz
15a70     28 00 90 AD |  if_e	jmp	#LR__0587
15a74     A8 74 02 FB | 	rdlong	arg01, fp
15a78     03 76 06 F6 | 	mov	arg02, #3
15a7c     00 78 06 F6 | 	mov	arg03, #0
15a80     30 F1 BF FD | 	call	#_move_servo_0812
15a84     A8 8E 02 FB | 	rdlong	local02, fp
15a88     08 8E 06 F1 | 	add	local02, #8
15a8c     47 95 02 FB | 	rdlong	local05, local02
15a90     28 94 06 F1 | 	add	local05, #40
15a94     13 00 80 FF 
15a98     4A 21 6A FC | 	wrlong	##10000, local05
15a9c                 | LR__0587
15a9c     FC 00 00 FF 
15aa0     50 D6 05 F1 | 	add	ptr__dat__, ##129104
15aa4     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15aa8     FC 00 00 FF 
15aac     50 D6 85 F1 | 	sub	ptr__dat__, ##129104
15ab0     01 8E 56 F2 | 	cmps	local02, #1 wc
15ab4     38 00 90 CD |  if_b	jmp	#LR__0588
15ab8     A8 8E 02 FB | 	rdlong	local02, fp
15abc     08 8E 06 F1 | 	add	local02, #8
15ac0     47 95 02 FB | 	rdlong	local05, local02
15ac4     A8 96 02 FB | 	rdlong	local06, fp
15ac8     08 96 06 F1 | 	add	local06, #8
15acc     4B A3 02 FB | 	rdlong	local12, local06
15ad0     51 99 02 F6 | 	mov	local07, local12
15ad4     28 98 06 F1 | 	add	local07, #40
15ad8     4C A1 02 FB | 	rdlong	local11, local07
15adc     50 93 02 F6 | 	mov	local04, local11
15ae0     01 00 00 FF 
15ae4     E8 93 86 F1 | 	sub	local04, ##1000
15ae8     28 94 06 F1 | 	add	local05, #40
15aec     4A 93 62 FC | 	wrlong	local04, local05
15af0                 | LR__0588
15af0     FC 00 00 FF 
15af4     48 D6 05 F1 | 	add	ptr__dat__, ##129096
15af8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15afc     FC 00 00 FF 
15b00     48 D6 85 F1 | 	sub	ptr__dat__, ##129096
15b04     01 8E 56 F2 | 	cmps	local02, #1 wc
15b08     38 00 90 CD |  if_b	jmp	#LR__0589
15b0c     A8 8E 02 FB | 	rdlong	local02, fp
15b10     08 8E 06 F1 | 	add	local02, #8
15b14     47 95 02 FB | 	rdlong	local05, local02
15b18     A8 96 02 FB | 	rdlong	local06, fp
15b1c     08 96 06 F1 | 	add	local06, #8
15b20     4B A3 02 FB | 	rdlong	local12, local06
15b24     51 99 02 F6 | 	mov	local07, local12
15b28     28 98 06 F1 | 	add	local07, #40
15b2c     4C A1 02 FB | 	rdlong	local11, local07
15b30     50 93 02 F6 | 	mov	local04, local11
15b34     01 00 00 FF 
15b38     E8 93 06 F1 | 	add	local04, ##1000
15b3c     28 94 06 F1 | 	add	local05, #40
15b40     4A 93 62 FC | 	wrlong	local04, local05
15b44                 | LR__0589
15b44     FC 00 00 FF 
15b48     3C D6 05 F1 | 	add	ptr__dat__, ##129084
15b4c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15b50     FC 00 00 FF 
15b54     3C D6 85 F1 | 	sub	ptr__dat__, ##129084
15b58     01 8E 56 F2 | 	cmps	local02, #1 wc
15b5c     24 00 90 CD |  if_b	jmp	#LR__0590
15b60     A8 74 02 FB | 	rdlong	arg01, fp
15b64     3A 93 02 F6 | 	mov	local04, arg01
15b68     08 92 06 F1 | 	add	local04, #8
15b6c     49 97 02 FB | 	rdlong	local06, local04
15b70     28 96 06 F1 | 	add	local06, #40
15b74     4B A3 02 FB | 	rdlong	local12, local06
15b78     02 76 06 F6 | 	mov	arg02, #2
15b7c     51 79 02 F6 | 	mov	arg03, local12
15b80     30 F0 BF FD | 	call	#_move_servo_0812
15b84                 | LR__0590
15b84     FC 00 00 FF 
15b88     44 D6 05 F1 | 	add	ptr__dat__, ##129092
15b8c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15b90     FC 00 00 FF 
15b94     44 D6 85 F1 | 	sub	ptr__dat__, ##129092
15b98     01 8E 56 F2 | 	cmps	local02, #1 wc
15b9c     2C 00 90 CD |  if_b	jmp	#LR__0591
15ba0     A8 74 02 FB | 	rdlong	arg01, fp
15ba4     3A 93 02 F6 | 	mov	local04, arg01
15ba8     08 92 06 F1 | 	add	local04, #8
15bac     49 97 02 FB | 	rdlong	local06, local04
15bb0     28 96 06 F1 | 	add	local06, #40
15bb4     4B 9F 02 FB | 	rdlong	local10, local06
15bb8     4F A1 02 F6 | 	mov	local11, local10
15bbc     50 A3 62 F6 | 	neg	local12, local11
15bc0     02 76 06 F6 | 	mov	arg02, #2
15bc4     51 79 02 F6 | 	mov	arg03, local12
15bc8     E8 EF BF FD | 	call	#_move_servo_0812
15bcc                 | LR__0591
15bcc     FC 00 00 FF 
15bd0     38 D6 05 F1 | 	add	ptr__dat__, ##129080
15bd4     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15bd8     FC 00 00 FF 
15bdc     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
15be0     01 8E 56 F2 | 	cmps	local02, #1 wc
15be4     A8 74 02 3B |  if_ae	rdlong	arg01, fp
15be8     03 76 06 36 |  if_ae	mov	arg02, #3
15bec     00 78 06 36 |  if_ae	mov	arg03, #0
15bf0     C0 EF BF 3D |  if_ae	call	#_move_servo_0812
15bf4     FC 00 00 FF 
15bf8     40 D6 05 F1 | 	add	ptr__dat__, ##129088
15bfc     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15c00     FC 00 00 FF 
15c04     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
15c08     01 8E 56 F2 | 	cmps	local02, #1 wc
15c0c     A8 74 02 3B |  if_ae	rdlong	arg01, fp
15c10     03 76 06 36 |  if_ae	mov	arg02, #3
15c14     00 78 06 36 |  if_ae	mov	arg03, #0
15c18     98 EF BF 3D |  if_ae	call	#_move_servo_0812
15c1c                 | '                         {
15c1c                 | '                             move_servo(control, MOVE_STOP, 0);
15c1c                 | '                         }
15c1c                 | '                         break;
15c1c     DC 07 90 FD | 	jmp	#LR__0616
15c20                 | LR__0592
15c20     28 50 05 F1 | 	add	fp, #40
15c24     A8 8E 02 FB | 	rdlong	local02, fp
15c28     28 50 85 F1 | 	sub	fp, #40
15c2c     03 8E 0E F2 | 	cmp	local02, #3 wz
15c30     3C 50 05 A1 |  if_e	add	fp, #60
15c34     A8 92 C2 AA |  if_e	rdbyte	local04, fp
15c38     3C 50 85 A1 |  if_e	sub	fp, #60
15c3c     00 92 4E A2 |  if_e	cmps	local04, #0 wz
15c40     7C 00 90 AD |  if_e	jmp	#LR__0593
15c44     A8 74 02 FB | 	rdlong	arg01, fp
15c48     03 76 06 F6 | 	mov	arg02, #3
15c4c     00 78 06 F6 | 	mov	arg03, #0
15c50     60 EF BF FD | 	call	#_move_servo_0812
15c54     A8 8E 02 FB | 	rdlong	local02, fp
15c58     08 8E 06 F1 | 	add	local02, #8
15c5c     47 95 02 FB | 	rdlong	local05, local02
15c60     A8 96 02 FB | 	rdlong	local06, fp
15c64     04 96 06 F1 | 	add	local06, #4
15c68     4B 99 02 FB | 	rdlong	local07, local06
15c6c     04 98 06 F1 | 	add	local07, #4
15c70     4C 75 02 FB | 	rdlong	arg01, local07
15c74     A8 98 02 FB | 	rdlong	local07, fp
15c78     4C A3 02 FB | 	rdlong	local12, local07
15c7c     18 A2 06 F1 | 	add	local12, #24
15c80     51 A1 02 F6 | 	mov	local11, local12
15c84     50 77 02 F6 | 	mov	arg02, local11
15c88     0C A2 BF FD | 	call	#_steps_to_mm
15c8c     1A 75 02 F6 | 	mov	arg01, result1
15c90     00 3D 22 FF 
15c94     00 76 06 F6 | 	mov	arg02, ##1148846080
15c98     24 16 B1 FD | 	call	#__system___float_div
15c9c     1A 75 02 F6 | 	mov	arg01, result1
15ca0     01 76 06 F6 | 	mov	arg02, #1
15ca4     E8 18 B1 FD | 	call	#__system___float_tointeger
15ca8     01 00 00 FF 
15cac     E8 35 06 FD | 	qmul	result1, ##1000
15cb0     18 A2 86 F1 | 	sub	local12, #24
15cb4     28 94 06 F1 | 	add	local05, #40
15cb8     18 96 62 FD | 	getqx	local06
15cbc     4A 97 62 FC | 	wrlong	local06, local05
15cc0                 | LR__0593
15cc0     FC 00 00 FF 
15cc4     50 D6 05 F1 | 	add	ptr__dat__, ##129104
15cc8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15ccc     FC 00 00 FF 
15cd0     50 D6 85 F1 | 	sub	ptr__dat__, ##129104
15cd4     01 8E 56 F2 | 	cmps	local02, #1 wc
15cd8     38 00 90 CD |  if_b	jmp	#LR__0594
15cdc     A8 8E 02 FB | 	rdlong	local02, fp
15ce0     08 8E 06 F1 | 	add	local02, #8
15ce4     47 95 02 FB | 	rdlong	local05, local02
15ce8     A8 96 02 FB | 	rdlong	local06, fp
15cec     08 96 06 F1 | 	add	local06, #8
15cf0     4B A3 02 FB | 	rdlong	local12, local06
15cf4     51 99 02 F6 | 	mov	local07, local12
15cf8     28 98 06 F1 | 	add	local07, #40
15cfc     4C A1 02 FB | 	rdlong	local11, local07
15d00     50 93 02 F6 | 	mov	local04, local11
15d04     01 00 00 FF 
15d08     E8 93 86 F1 | 	sub	local04, ##1000
15d0c     28 94 06 F1 | 	add	local05, #40
15d10     4A 93 62 FC | 	wrlong	local04, local05
15d14                 | LR__0594
15d14     FC 00 00 FF 
15d18     48 D6 05 F1 | 	add	ptr__dat__, ##129096
15d1c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15d20     FC 00 00 FF 
15d24     48 D6 85 F1 | 	sub	ptr__dat__, ##129096
15d28     01 8E 56 F2 | 	cmps	local02, #1 wc
15d2c     38 00 90 CD |  if_b	jmp	#LR__0595
15d30     A8 8E 02 FB | 	rdlong	local02, fp
15d34     08 8E 06 F1 | 	add	local02, #8
15d38     47 95 02 FB | 	rdlong	local05, local02
15d3c     A8 96 02 FB | 	rdlong	local06, fp
15d40     08 96 06 F1 | 	add	local06, #8
15d44     4B A3 02 FB | 	rdlong	local12, local06
15d48     51 99 02 F6 | 	mov	local07, local12
15d4c     28 98 06 F1 | 	add	local07, #40
15d50     4C A1 02 FB | 	rdlong	local11, local07
15d54     50 93 02 F6 | 	mov	local04, local11
15d58     01 00 00 FF 
15d5c     E8 93 06 F1 | 	add	local04, ##1000
15d60     28 94 06 F1 | 	add	local05, #40
15d64     4A 93 62 FC | 	wrlong	local04, local05
15d68                 | LR__0595
15d68     FC 00 00 FF 
15d6c     38 D6 05 F1 | 	add	ptr__dat__, ##129080
15d70     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15d74     FC 00 00 FF 
15d78     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
15d7c     01 8E 56 F2 | 	cmps	local02, #1 wc
15d80     24 00 90 CD |  if_b	jmp	#LR__0596
15d84     A8 74 02 FB | 	rdlong	arg01, fp
15d88     3A 93 02 F6 | 	mov	local04, arg01
15d8c     08 92 06 F1 | 	add	local04, #8
15d90     49 97 02 FB | 	rdlong	local06, local04
15d94     28 96 06 F1 | 	add	local06, #40
15d98     4B A3 02 FB | 	rdlong	local12, local06
15d9c     01 76 06 F6 | 	mov	arg02, #1
15da0     51 79 02 F6 | 	mov	arg03, local12
15da4     0C EE BF FD | 	call	#_move_servo_0812
15da8                 | LR__0596
15da8     FC 00 00 FF 
15dac     40 D6 05 F1 | 	add	ptr__dat__, ##129088
15db0     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
15db4     FC 00 00 FF 
15db8     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
15dbc     01 8E 56 F2 | 	cmps	local02, #1 wc
15dc0     38 06 90 CD |  if_b	jmp	#LR__0616
15dc4     A8 74 02 FB | 	rdlong	arg01, fp
15dc8     3A 93 02 F6 | 	mov	local04, arg01
15dcc     08 92 06 F1 | 	add	local04, #8
15dd0     49 97 02 FB | 	rdlong	local06, local04
15dd4     28 96 06 F1 | 	add	local06, #40
15dd8     4B A3 02 FB | 	rdlong	local12, local06
15ddc     01 76 06 F6 | 	mov	arg02, #1
15de0     51 79 02 F6 | 	mov	arg03, local12
15de4     CC ED BF FD | 	call	#_move_servo_0812
15de8                 | '                         {
15de8                 | '                             move_servo(control, MOVE_ABSOLUTE, control->stateMachine->functionData);
15de8                 | '                         }
15de8                 | '                         break;
15de8     10 06 90 FD | 	jmp	#LR__0616
15dec                 | LR__0597
15dec     28 50 05 F1 | 	add	fp, #40
15df0     A8 94 02 FB | 	rdlong	local05, fp
15df4     28 50 85 F1 | 	sub	fp, #40
15df8     04 94 0E F2 | 	cmp	local05, #4 wz
15dfc     3C 50 05 A1 |  if_e	add	fp, #60
15e00     A8 92 C2 AA |  if_e	rdbyte	local04, fp
15e04     3C 50 85 A1 |  if_e	sub	fp, #60
15e08     49 91 0A A6 |  if_e	mov	local03, local04 wz
15e0c     24 00 90 AD |  if_e	jmp	#LR__0598
15e10     A8 74 02 FB | 	rdlong	arg01, fp
15e14     03 76 06 F6 | 	mov	arg02, #3
15e18     00 78 06 F6 | 	mov	arg03, #0
15e1c     94 ED BF FD | 	call	#_move_servo_0812
15e20     A8 8E 02 FB | 	rdlong	local02, fp
15e24     08 8E 06 F1 | 	add	local02, #8
15e28     47 95 02 FB | 	rdlong	local05, local02
15e2c     28 94 06 F1 | 	add	local05, #40
15e30     4A 01 68 FC | 	wrlong	#0, local05
15e34                 | LR__0598
15e34     FC 00 00 FF 
15e38     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15e3c     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15e40     FC 00 00 FF 
15e44     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15e48     05 76 06 F6 | 	mov	arg02, #5
15e4c     01 78 06 F6 | 	mov	arg03, #1
15e50     18 C5 BE FD | 	call	#_mcp_get_pin
15e54     1A 35 E2 F8 | 	getbyte	result1, result1, #0
15e58     01 34 0E F2 | 	cmp	result1, #1 wz
15e5c     60 00 90 5D |  if_ne	jmp	#LR__0599
15e60     A8 90 02 FB | 	rdlong	local03, fp
15e64     08 90 06 F1 | 	add	local03, #8
15e68     48 93 02 FB | 	rdlong	local04, local03
15e6c     28 92 06 F1 | 	add	local04, #40
15e70     49 A3 02 FB | 	rdlong	local12, local04
15e74     02 A2 0E F2 | 	cmp	local12, #2 wz
15e78     44 00 90 5D |  if_ne	jmp	#LR__0599
15e7c     A8 74 02 FB | 	rdlong	arg01, fp
15e80     03 76 06 F6 | 	mov	arg02, #3
15e84     00 78 06 F6 | 	mov	arg03, #0
15e88     28 ED BF FD | 	call	#_move_servo_0812
15e8c     64 74 06 F6 | 	mov	arg01, #100
15e90     A4 F5 B0 FD | 	call	#__system___waitms
15e94     A8 74 02 FB | 	rdlong	arg01, fp
15e98     02 76 06 F6 | 	mov	arg02, #2
15e9c     FD FF 7F FF 
15ea0     24 78 06 F6 | 	mov	arg03, ##-1500
15ea4     0C ED BF FD | 	call	#_move_servo_0812
15ea8     A8 8E 02 FB | 	rdlong	local02, fp
15eac     08 8E 06 F1 | 	add	local02, #8
15eb0     47 95 02 FB | 	rdlong	local05, local02
15eb4     28 94 06 F1 | 	add	local05, #40
15eb8     4A 07 68 FC | 	wrlong	#3, local05
15ebc     38 01 90 FD | 	jmp	#LR__0603
15ec0                 | LR__0599
15ec0     FC 00 00 FF 
15ec4     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15ec8     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15ecc     FC 00 00 FF 
15ed0     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15ed4     05 76 06 F6 | 	mov	arg02, #5
15ed8     01 78 06 F6 | 	mov	arg03, #1
15edc     8C C4 BE FD | 	call	#_mcp_get_pin
15ee0     07 34 4E F7 | 	zerox	result1, #7 wz
15ee4     60 00 90 5D |  if_ne	jmp	#LR__0600
15ee8     A8 90 02 FB | 	rdlong	local03, fp
15eec     08 90 06 F1 | 	add	local03, #8
15ef0     48 93 02 FB | 	rdlong	local04, local03
15ef4     28 92 06 F1 | 	add	local04, #40
15ef8     49 A3 02 FB | 	rdlong	local12, local04
15efc     03 A2 0E F2 | 	cmp	local12, #3 wz
15f00     44 00 90 5D |  if_ne	jmp	#LR__0600
15f04     A8 74 02 FB | 	rdlong	arg01, fp
15f08     03 76 06 F6 | 	mov	arg02, #3
15f0c     00 78 06 F6 | 	mov	arg03, #0
15f10     A0 EC BF FD | 	call	#_move_servo_0812
15f14     64 74 06 F6 | 	mov	arg01, #100
15f18     1C F5 B0 FD | 	call	#__system___waitms
15f1c     A8 74 02 FB | 	rdlong	arg01, fp
15f20     02 76 06 F6 | 	mov	arg02, #2
15f24     02 00 00 FF 
15f28     DC 79 06 F6 | 	mov	arg03, ##1500
15f2c     84 EC BF FD | 	call	#_move_servo_0812
15f30     A8 8E 02 FB | 	rdlong	local02, fp
15f34     08 8E 06 F1 | 	add	local02, #8
15f38     47 95 02 FB | 	rdlong	local05, local02
15f3c     28 94 06 F1 | 	add	local05, #40
15f40     4A 09 68 FC | 	wrlong	#4, local05
15f44     B0 00 90 FD | 	jmp	#LR__0602
15f48                 | LR__0600
15f48     FC 00 00 FF 
15f4c     9C D6 05 F1 | 	add	ptr__dat__, ##129180
15f50     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15f54     FC 00 00 FF 
15f58     9C D6 85 F1 | 	sub	ptr__dat__, ##129180
15f5c     05 76 06 F6 | 	mov	arg02, #5
15f60     01 78 06 F6 | 	mov	arg03, #1
15f64     04 C4 BE FD | 	call	#_mcp_get_pin
15f68     1A 35 E2 F8 | 	getbyte	result1, result1, #0
15f6c     01 34 0E F2 | 	cmp	result1, #1 wz
15f70     84 00 90 5D |  if_ne	jmp	#LR__0601
15f74     A8 90 02 FB | 	rdlong	local03, fp
15f78     08 90 06 F1 | 	add	local03, #8
15f7c     48 97 02 FB | 	rdlong	local06, local03
15f80     4B 93 02 F6 | 	mov	local04, local06
15f84     28 92 06 F1 | 	add	local04, #40
15f88     49 A3 02 FB | 	rdlong	local12, local04
15f8c     51 99 02 F6 | 	mov	local07, local12
15f90     04 98 0E F2 | 	cmp	local07, #4 wz
15f94     60 00 90 5D |  if_ne	jmp	#LR__0601
15f98     A8 74 02 FB | 	rdlong	arg01, fp
15f9c     03 76 06 F6 | 	mov	arg02, #3
15fa0     00 78 06 F6 | 	mov	arg03, #0
15fa4     0C EC BF FD | 	call	#_move_servo_0812
15fa8     01 00 00 FF 
15fac     E8 75 06 F6 | 	mov	arg01, ##1000
15fb0     84 F4 B0 FD | 	call	#__system___waitms
15fb4     FA 00 00 FF 
15fb8     F8 D6 05 F1 | 	add	ptr__dat__, ##128248
15fbc     EB 74 02 F6 | 	mov	arg01, ptr__dat__
15fc0     FA 00 00 FF 
15fc4     F8 D6 85 F1 | 	sub	ptr__dat__, ##128248
15fc8     00 76 06 F6 | 	mov	arg02, #0
15fcc     00 78 06 F6 | 	mov	arg03, #0
15fd0     7C C4 BE FD | 	call	#_dyn4_send_command
15fd4     A8 8E 02 FB | 	rdlong	local02, fp
15fd8     08 8E 06 F1 | 	add	local02, #8
15fdc     47 91 02 FB | 	rdlong	local03, local02
15fe0     08 8E 86 F1 | 	sub	local02, #8
15fe4     48 95 02 F6 | 	mov	local05, local03
15fe8     01 92 06 F6 | 	mov	local04, #1
15fec     28 94 06 F1 | 	add	local05, #40
15ff0     4A 03 68 FC | 	wrlong	#1, local05
15ff4     28 94 86 F1 | 	sub	local05, #40
15ff8                 | LR__0601
15ff8                 | LR__0602
15ff8                 | LR__0603
15ff8     FC 00 00 FF 
15ffc     38 D6 05 F1 | 	add	ptr__dat__, ##129080
16000     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16004     FC 00 00 FF 
16008     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
1600c     01 8E 56 F2 | 	cmps	local02, #1 wc
16010     28 00 90 CD |  if_b	jmp	#LR__0604
16014     A8 8E 02 FB | 	rdlong	local02, fp
16018     08 8E 06 F1 | 	add	local02, #8
1601c     47 95 02 FB | 	rdlong	local05, local02
16020     28 94 06 F1 | 	add	local05, #40
16024     4A 05 68 FC | 	wrlong	#2, local05
16028     A8 74 02 FB | 	rdlong	arg01, fp
1602c     02 76 06 F6 | 	mov	arg02, #2
16030     13 00 00 FF 
16034     10 79 06 F6 | 	mov	arg03, ##10000
16038     78 EB BF FD | 	call	#_move_servo_0812
1603c                 | LR__0604
1603c     FC 00 00 FF 
16040     40 D6 05 F1 | 	add	ptr__dat__, ##129088
16044     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16048     FC 00 00 FF 
1604c     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
16050     01 8E 56 F2 | 	cmps	local02, #1 wc
16054     A4 03 90 CD |  if_b	jmp	#LR__0616
16058     A8 8E 02 FB | 	rdlong	local02, fp
1605c     08 8E 06 F1 | 	add	local02, #8
16060     47 95 02 FB | 	rdlong	local05, local02
16064     28 94 06 F1 | 	add	local05, #40
16068     4A 05 68 FC | 	wrlong	#2, local05
1606c     A8 74 02 FB | 	rdlong	arg01, fp
16070     02 76 06 F6 | 	mov	arg02, #2
16074     13 00 00 FF 
16078     10 79 06 F6 | 	mov	arg03, ##10000
1607c     34 EB BF FD | 	call	#_move_servo_0812
16080                 | '                         {
16080                 | '                             control->stateMachine->functionData = HOMING_SEEKING;
16080                 | '                             move_servo(control, MOVE_SPEED, 10000);
16080                 | '                         }
16080                 | '                         break;
16080     78 03 90 FD | 	jmp	#LR__0616
16084                 | LR__0605
16084     A8 74 02 FB | 	rdlong	arg01, fp
16088     03 76 06 F6 | 	mov	arg02, #3
1608c     00 78 06 F6 | 	mov	arg03, #0
16090     20 EB BF FD | 	call	#_move_servo_0812
16094                 | '                         move_servo(control, MOVE_STOP, 0);
16094                 | '                         break;
16094     64 03 90 FD | 	jmp	#LR__0616
16098                 | LR__0606
16098     28 50 05 F1 | 	add	fp, #40
1609c     A8 8E 02 FB | 	rdlong	local02, fp
160a0     28 50 85 F1 | 	sub	fp, #40
160a4     06 8E 0E F2 | 	cmp	local02, #6 wz
160a8     3C 50 05 A1 |  if_e	add	fp, #60
160ac     A8 92 C2 AA |  if_e	rdbyte	local04, fp
160b0     3C 50 85 A1 |  if_e	sub	fp, #60
160b4     00 92 4E A2 |  if_e	cmps	local04, #0 wz
160b8     A8 8E 02 5B |  if_ne	rdlong	local02, fp
160bc     08 8E 06 51 |  if_ne	add	local02, #8
160c0     47 95 02 5B |  if_ne	rdlong	local05, local02
160c4     28 94 06 51 |  if_ne	add	local05, #40
160c8     4A 01 68 5C |  if_ne	wrlong	#0, local05
160cc     FC 00 00 FF 
160d0     50 D6 05 F1 | 	add	ptr__dat__, ##129104
160d4     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
160d8     FC 00 00 FF 
160dc     50 D6 85 F1 | 	sub	ptr__dat__, ##129104
160e0     01 8E 56 F2 | 	cmps	local02, #1 wc
160e4     2C 00 90 CD |  if_b	jmp	#LR__0607
160e8     A8 8E 02 FB | 	rdlong	local02, fp
160ec     08 8E 06 F1 | 	add	local02, #8
160f0     47 95 02 FB | 	rdlong	local05, local02
160f4     A8 96 02 FB | 	rdlong	local06, fp
160f8     08 96 06 F1 | 	add	local06, #8
160fc     4B 99 02 FB | 	rdlong	local07, local06
16100     28 98 06 F1 | 	add	local07, #40
16104     4C 93 02 FB | 	rdlong	local04, local07
16108     64 92 06 F1 | 	add	local04, #100
1610c     28 94 06 F1 | 	add	local05, #40
16110     4A 93 62 FC | 	wrlong	local04, local05
16114                 | LR__0607
16114     FC 00 00 FF 
16118     48 D6 05 F1 | 	add	ptr__dat__, ##129096
1611c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16120     FC 00 00 FF 
16124     48 D6 85 F1 | 	sub	ptr__dat__, ##129096
16128     01 8E 56 F2 | 	cmps	local02, #1 wc
1612c     48 00 90 CD |  if_b	jmp	#LR__0609
16130     A8 8E 02 FB | 	rdlong	local02, fp
16134     08 8E 06 F1 | 	add	local02, #8
16138     47 95 02 FB | 	rdlong	local05, local02
1613c     28 94 06 F1 | 	add	local05, #40
16140     4A 93 02 FB | 	rdlong	local04, local05
16144     65 92 56 F2 | 	cmps	local04, #101 wc
16148     2C 00 90 CD |  if_b	jmp	#LR__0608
1614c     A8 8E 02 FB | 	rdlong	local02, fp
16150     08 8E 06 F1 | 	add	local02, #8
16154     47 95 02 FB | 	rdlong	local05, local02
16158     A8 96 02 FB | 	rdlong	local06, fp
1615c     08 96 06 F1 | 	add	local06, #8
16160     4B 99 02 FB | 	rdlong	local07, local06
16164     28 98 06 F1 | 	add	local07, #40
16168     4C 93 02 FB | 	rdlong	local04, local07
1616c     64 92 86 F1 | 	sub	local04, #100
16170     28 94 06 F1 | 	add	local05, #40
16174     4A 93 62 FC | 	wrlong	local04, local05
16178                 | LR__0608
16178                 | LR__0609
16178     8C 50 05 F1 | 	add	fp, #140
1617c     A8 90 02 FB | 	rdlong	local03, fp
16180     01 00 00 FF 
16184     E8 91 06 FD | 	qmul	local03, ##1000
16188     8C 50 85 F1 | 	sub	fp, #140
1618c     A8 92 02 FB | 	rdlong	local04, fp
16190     08 92 06 F1 | 	add	local04, #8
16194     49 97 02 FB | 	rdlong	local06, local04
16198     28 96 06 F1 | 	add	local06, #40
1619c     4B A1 02 FB | 	rdlong	local11, local06
161a0     50 A3 02 F6 | 	mov	local12, local11
161a4     18 8E 62 FD | 	getqx	local02
161a8     51 8F 52 F2 | 	cmps	local02, local12 wc
161ac     54 00 90 3D |  if_ae	jmp	#LR__0610
161b0     FC 00 00 FF 
161b4     3C D6 05 F1 | 	add	ptr__dat__, ##129084
161b8     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
161bc     FC 00 00 FF 
161c0     3C D6 85 F1 | 	sub	ptr__dat__, ##129084
161c4     01 8E 56 F2 | 	cmps	local02, #1 wc
161c8     A8 74 02 3B |  if_ae	rdlong	arg01, fp
161cc     02 76 06 36 |  if_ae	mov	arg02, #2
161d0     64 78 06 36 |  if_ae	mov	arg03, #100
161d4     DC E9 BF 3D |  if_ae	call	#_move_servo_0812
161d8     FC 00 00 FF 
161dc     44 D6 05 F1 | 	add	ptr__dat__, ##129092
161e0     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
161e4     FC 00 00 FF 
161e8     44 D6 85 F1 | 	sub	ptr__dat__, ##129092
161ec     01 8E 56 F2 | 	cmps	local02, #1 wc
161f0     A8 74 02 3B |  if_ae	rdlong	arg01, fp
161f4     02 76 06 36 |  if_ae	mov	arg02, #2
161f8     64 78 06 36 |  if_ae	mov	arg03, #100
161fc     B4 E9 BF 3D |  if_ae	call	#_move_servo_0812
16200     10 00 90 FD | 	jmp	#LR__0611
16204                 | LR__0610
16204     A8 74 02 FB | 	rdlong	arg01, fp
16208     03 76 06 F6 | 	mov	arg02, #3
1620c     00 78 06 F6 | 	mov	arg03, #0
16210     A0 E9 BF FD | 	call	#_move_servo_0812
16214                 | LR__0611
16214     FC 00 00 FF 
16218     38 D6 05 F1 | 	add	ptr__dat__, ##129080
1621c     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16220     FC 00 00 FF 
16224     38 D6 85 F1 | 	sub	ptr__dat__, ##129080
16228     01 8E 56 F2 | 	cmps	local02, #1 wc
1622c     A8 74 02 3B |  if_ae	rdlong	arg01, fp
16230     03 76 06 36 |  if_ae	mov	arg02, #3
16234     00 78 06 36 |  if_ae	mov	arg03, #0
16238     78 E9 BF 3D |  if_ae	call	#_move_servo_0812
1623c     FC 00 00 FF 
16240     40 D6 05 F1 | 	add	ptr__dat__, ##129088
16244     EB 8E 02 FB | 	rdlong	local02, ptr__dat__
16248     FC 00 00 FF 
1624c     40 D6 85 F1 | 	sub	ptr__dat__, ##129088
16250     01 8E 56 F2 | 	cmps	local02, #1 wc
16254     A4 01 90 CD |  if_b	jmp	#LR__0616
16258     A8 74 02 FB | 	rdlong	arg01, fp
1625c     03 76 06 F6 | 	mov	arg02, #3
16260     00 78 06 F6 | 	mov	arg03, #0
16264     4C E9 BF FD | 	call	#_move_servo_0812
16268                 | '                         {
16268                 | '                             move_servo(control, MOVE_STOP, 0);
16268                 | '                         }
16268                 | '                         break;
16268     90 01 90 FD | 	jmp	#LR__0616
1626c                 | LR__0612
1626c     70 50 05 F1 | 	add	fp, #112
16270     A8 8C 02 FB | 	rdlong	local01, fp
16274     70 50 85 F1 | 	sub	fp, #112
16278     01 8C 0E F2 | 	cmp	local01, #1 wz
1627c     7C 01 90 AD |  if_e	jmp	#LR__0616
16280     70 50 05 F1 | 	add	fp, #112
16284     A8 8C 02 FB | 	rdlong	local01, fp
16288     70 50 85 F1 | 	sub	fp, #112
1628c     02 8C 0E F2 | 	cmp	local01, #2 wz
16290     68 01 90 5D |  if_ne	jmp	#LR__0616
16294     24 50 05 F1 | 	add	fp, #36
16298     A8 8C 02 FB | 	rdlong	local01, fp
1629c     24 50 85 F1 | 	sub	fp, #36
162a0     02 8C 0E F2 | 	cmp	local01, #2 wz
162a4     3C 00 90 AD |  if_e	jmp	#LR__0613
162a8     FC 00 00 FF 
162ac     AC D6 05 F1 | 	add	ptr__dat__, ##129196
162b0     EB 74 02 F6 | 	mov	arg01, ptr__dat__
162b4     FC 00 00 FF 
162b8     AC D6 85 F1 | 	sub	ptr__dat__, ##129196
162bc     8C 95 BF FD | 	call	#_run_motion_profile_init
162c0     E4 EE B0 FD | 	call	#__system___getus
162c4     34 50 05 F1 | 	add	fp, #52
162c8     A8 34 62 FC | 	wrlong	result1, fp
162cc     34 50 85 F1 | 	sub	fp, #52
162d0     D8 00 00 FF 
162d4     14 D7 05 F1 | 	add	ptr__dat__, ##110868
162d8     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
162dc     D8 00 00 FF 
162e0     14 D7 85 F1 | 	sub	ptr__dat__, ##110868
162e4                 | LR__0613
162e4     FC 00 00 FF 
162e8     B8 D6 05 F1 | 	add	ptr__dat__, ##129208
162ec     EB 8C CA FA | 	rdbyte	local01, ptr__dat__ wz
162f0     FC 00 00 FF 
162f4     B8 D6 85 F1 | 	sub	ptr__dat__, ##129208
162f8     C0 00 90 5D |  if_ne	jmp	#LR__0614
162fc     A8 EE B0 FD | 	call	#__system___getus
16300     1A 75 02 F6 | 	mov	arg01, result1
16304     34 50 05 F1 | 	add	fp, #52
16308     A8 90 02 FB | 	rdlong	local03, fp
1630c     34 50 85 F1 | 	sub	fp, #52
16310     48 75 82 F1 | 	sub	arg01, local03
16314     20 0A B1 FD | 	call	#__system___float_fromuns
16318     1A 75 02 F6 | 	mov	arg01, result1
1631c     12 BA 24 FF 
16320     00 76 06 F6 | 	mov	arg02, ##1232348160
16324     98 0F B1 FD | 	call	#__system___float_div
16328     B8 50 05 F1 | 	add	fp, #184
1632c     A8 34 62 FC | 	wrlong	result1, fp
16330     B8 50 85 F1 | 	sub	fp, #184
16334     1A 75 02 F6 | 	mov	arg01, result1
16338     FC 00 00 FF 
1633c     AC D6 05 F1 | 	add	ptr__dat__, ##129196
16340     EB 76 02 F6 | 	mov	arg02, ptr__dat__
16344     FC 00 00 FF 
16348     AC D6 85 F1 | 	sub	ptr__dat__, ##129196
1634c     A8 78 02 FB | 	rdlong	arg03, fp
16350     0C 78 06 F1 | 	add	arg03, #12
16354     84 96 BF FD | 	call	#_position_profile
16358     BC 50 05 F1 | 	add	fp, #188
1635c     A8 34 62 FC | 	wrlong	result1, fp
16360     BC 50 85 F1 | 	sub	fp, #188
16364     A8 8C 02 FB | 	rdlong	local01, fp
16368     01 8E 06 F6 | 	mov	local02, #1
1636c     1A 75 02 F6 | 	mov	arg01, result1
16370     00 3D 22 FF 
16374     00 76 06 F6 | 	mov	arg02, ##1148846080
16378     24 0D B1 FD | 	call	#__system___float_mul
1637c     1A 75 02 F6 | 	mov	arg01, result1
16380     00 76 06 F6 | 	mov	arg02, #0
16384     08 12 B1 FD | 	call	#__system___float_tointeger
16388     1A 79 02 F6 | 	mov	arg03, result1
1638c     46 75 02 F6 | 	mov	arg01, local01
16390     47 77 02 F6 | 	mov	arg02, local02
16394     1C E8 BF FD | 	call	#_move_servo_0812
16398     BC 50 05 F1 | 	add	fp, #188
1639c     A8 74 02 FB | 	rdlong	arg01, fp
163a0     BC 50 85 F1 | 	sub	fp, #188
163a4     00 76 06 F6 | 	mov	arg02, #0
163a8     E4 11 B1 FD | 	call	#__system___float_tointeger
163ac     38 50 05 F1 | 	add	fp, #56
163b0     A8 34 62 FC | 	wrlong	result1, fp
163b4     38 50 85 F1 | 	sub	fp, #56
163b8     40 00 90 FD | 	jmp	#LR__0616
163bc                 | LR__0614
163bc     D8 00 00 FF 
163c0     14 D7 05 F1 | 	add	ptr__dat__, ##110868
163c4     EB 00 48 FC | 	wrbyte	#0, ptr__dat__
163c8     D8 00 00 FF 
163cc     14 D7 85 F1 | 	sub	ptr__dat__, ##110868
163d0     A8 8E 02 FB | 	rdlong	local02, fp
163d4     08 8E 06 F1 | 	add	local02, #8
163d8     47 75 02 FB | 	rdlong	arg01, local02
163dc     0A 76 06 F6 | 	mov	arg02, #10
163e0     01 78 06 F6 | 	mov	arg03, #1
163e4     5C C4 BE FD | 	call	#_state_machine_set
163e8     10 00 90 FD | 	jmp	#LR__0616
163ec                 | LR__0615
163ec     A8 74 02 FB | 	rdlong	arg01, fp
163f0     03 76 06 F6 | 	mov	arg02, #3
163f4     00 78 06 F6 | 	mov	arg03, #0
163f8     B8 E7 BF FD | 	call	#_move_servo_0812
163fc                 | LR__0616
163fc     04 50 05 F1 | 	add	fp, #4
16400     A8 74 02 F6 | 	mov	arg01, fp
16404     4C 50 05 F1 | 	add	fp, #76
16408     A8 76 02 F6 | 	mov	arg02, fp
1640c     50 50 85 F1 | 	sub	fp, #80
16410     30 78 06 F6 | 	mov	arg03, #48
16414     F0 ED B0 FD | 	call	#__system____builtin_memmove
16418     80 50 05 F1 | 	add	fp, #128
1641c     A8 8C 02 FB | 	rdlong	local01, fp
16420     04 50 05 F1 | 	add	fp, #4
16424     A8 8E 02 FB | 	rdlong	local02, fp
16428     04 50 05 F1 | 	add	fp, #4
1642c     A8 94 02 FB | 	rdlong	local05, fp
16430     44 50 85 F1 | 	sub	fp, #68
16434     A8 8C 62 FC | 	wrlong	local01, fp
16438     04 50 05 F1 | 	add	fp, #4
1643c     A8 8E 62 FC | 	wrlong	local02, fp
16440     04 50 05 F1 | 	add	fp, #4
16444     A8 94 62 FC | 	wrlong	local05, fp
16448     10 50 85 F1 | 	sub	fp, #16
1644c     A8 00 48 FC | 	wrbyte	#0, fp
16450     3C 50 85 F1 | 	sub	fp, #60
16454     90 EB 9F FD | 	jmp	#LR__0539
16458     A8 F0 03 F6 | 	mov	ptra, fp
1645c     B3 00 A0 FD | 	call	#popregs_
16460                 | _control_cog_0827_ret
16460     2D 00 64 FD | 	ret
16464                 | 
16464                 | _button_run_0855
16464     08 76 06 F1 | 	add	arg02, #8
16468     3B 75 02 FB | 	rdlong	arg01, arg02
1646c     0A 76 06 F6 | 	mov	arg02, #10
16470     02 78 06 F6 | 	mov	arg03, #2
16474     CC C3 BE FD | 	call	#_state_machine_set
16478                 | _button_run_0855_ret
16478     2D 00 64 FD | 	ret
1647c                 | 
1647c                 | _button_nav_0857
1647c     10 76 06 F1 | 	add	arg02, #16
16480     3B 03 48 FC | 	wrbyte	#1, arg02
16484                 | _button_nav_0857_ret
16484     2D 00 64 FD | 	ret
16488                 | 
16488                 | _button_open_0860
16488     02 4C 05 F6 | 	mov	COUNT_, #2
1648c     A9 00 A0 FD | 	call	#pushregs_
16490     3B 8D 02 F6 | 	mov	local01, arg02
16494     46 75 02 FB | 	rdlong	arg01, local01
16498     52 01 00 FF 
1649c     0E 7C 06 F6 | 	mov	arg05, ##@LR__2207
164a0     64 76 06 F6 | 	mov	arg02, #100
164a4     64 78 06 F6 | 	mov	arg03, #100
164a8     00 7A 06 F6 | 	mov	arg04, #0
164ac     34 7F BF FD | 	call	#_explorer_create
164b0     1A 8F 02 F6 | 	mov	local02, result1
164b4     47 75 02 F6 | 	mov	arg01, local02
164b8     A4 7F BF FD | 	call	#_explorer_run
164bc     00 74 06 F6 | 	mov	arg01, #0
164c0     84 26 B1 FD | 	call	#__system___getiolock_1205
164c4     1A 75 02 F6 | 	mov	arg01, result1
164c8     54 EE B0 FD | 	call	#__system___lockmem
164cc     52 01 00 FF 
164d0     12 76 06 F6 | 	mov	arg02, ##@LR__2208
164d4     00 74 06 F6 | 	mov	arg01, #0
164d8     00 78 06 F6 | 	mov	arg03, #0
164dc     D4 F3 B0 FD | 	call	#__system___basic_print_string
164e0     18 00 00 FF 
164e4     C8 8F 06 F1 | 	add	local02, ##12744
164e8     47 77 02 F6 | 	mov	arg02, local02
164ec     00 74 06 F6 | 	mov	arg01, #0
164f0     00 78 06 F6 | 	mov	arg03, #0
164f4     BC F3 B0 FD | 	call	#__system___basic_print_string
164f8     00 74 06 F6 | 	mov	arg01, #0
164fc     0A 76 06 F6 | 	mov	arg02, #10
16500     00 78 06 F6 | 	mov	arg03, #0
16504     60 F3 B0 FD | 	call	#__system___basic_print_char
16508     00 74 06 F6 | 	mov	arg01, #0
1650c     38 26 B1 FD | 	call	#__system___getiolock_1205
16510     1A 01 68 FC | 	wrlong	#0, result1
16514     47 75 02 F6 | 	mov	arg01, local02
16518     18 00 00 FF 
1651c     C8 8F 86 F1 | 	sub	local02, ##12744
16520     52 01 00 FF 
16524     1D 76 06 F6 | 	mov	arg02, ##@LR__2209
16528     70 FA BE FD | 	call	#_strcmp
1652c     00 34 0E F2 | 	cmp	result1, #0 wz
16530                 | '     {
16530                 | '         return;
16530     78 00 90 AD |  if_e	jmp	#LR__0617
16534     00 74 06 F6 | 	mov	arg01, #0
16538     0C 26 B1 FD | 	call	#__system___getiolock_1205
1653c     1A 75 02 F6 | 	mov	arg01, result1
16540     DC ED B0 FD | 	call	#__system___lockmem
16544     52 01 00 FF 
16548     1F 76 06 F6 | 	mov	arg02, ##@LR__2210
1654c     00 74 06 F6 | 	mov	arg01, #0
16550     00 78 06 F6 | 	mov	arg03, #0
16554     5C F3 B0 FD | 	call	#__system___basic_print_string
16558     18 00 00 FF 
1655c     C8 8F 06 F1 | 	add	local02, ##12744
16560     47 77 02 F6 | 	mov	arg02, local02
16564     00 74 06 F6 | 	mov	arg01, #0
16568     00 78 06 F6 | 	mov	arg03, #0
1656c     44 F3 B0 FD | 	call	#__system___basic_print_string
16570     00 74 06 F6 | 	mov	arg01, #0
16574     0A 76 06 F6 | 	mov	arg02, #10
16578     00 78 06 F6 | 	mov	arg03, #0
1657c     E8 F2 B0 FD | 	call	#__system___basic_print_char
16580     00 74 06 F6 | 	mov	arg01, #0
16584     C0 25 B1 FD | 	call	#__system___getiolock_1205
16588     1A 01 68 FC | 	wrlong	#0, result1
1658c     0C 8C 06 F1 | 	add	local01, #12
16590     46 77 02 FB | 	rdlong	arg02, local01
16594     0C 76 06 F1 | 	add	arg02, #12
16598     47 75 02 F6 | 	mov	arg01, local02
1659c     E4 10 BF FD | 	call	#_json_to_motion_profile
165a0     46 75 02 FB | 	rdlong	arg01, local01
165a4     0C 74 06 F1 | 	add	arg01, #12
165a8     08 1F BF FD | 	call	#_json_print_motion_profile
165ac                 | LR__0617
165ac     A8 F0 03 F6 | 	mov	ptra, fp
165b0     B3 00 A0 FD | 	call	#popregs_
165b4                 | _button_open_0860_ret
165b4     2D 00 64 FD | 	ret
165b8                 | 
165b8                 | _update_profileName_0863
165b8     01 4C 05 F6 | 	mov	COUNT_, #1
165bc     A9 00 A0 FD | 	call	#pushregs_
165c0     44 F0 07 F1 | 	add	ptra, #68
165c4     A8 74 62 FC | 	wrlong	arg01, fp
165c8     04 50 05 F1 | 	add	fp, #4
165cc     A8 76 62 FC | 	wrlong	arg02, fp
165d0     04 50 05 F1 | 	add	fp, #4
165d4     A8 78 62 FC | 	wrlong	arg03, fp
165d8     04 50 05 F1 | 	add	fp, #4
165dc     A8 78 62 FC | 	wrlong	arg03, fp
165e0     04 50 05 F1 | 	add	fp, #4
165e4     A8 74 02 F6 | 	mov	arg01, fp
165e8     52 01 00 FF 
165ec     2A 76 06 F6 | 	mov	arg02, ##@LR__2211
165f0     10 50 85 F1 | 	sub	fp, #16
165f4     0C 78 06 F1 | 	add	arg03, #12
165f8     3C 8D 02 FB | 	rdlong	local01, arg03
165fc     0C 8C 06 F1 | 	add	local01, #12
16600     F8 79 02 F6 | 	mov	arg03, ptra
16604     61 8D 66 FC | 	wrlong	local01, ptra++
16608     18 B6 BE FD | 	call	#_sprintf
1660c     04 F0 87 F1 | 	sub	ptra, #4
16610     10 50 05 F1 | 	add	fp, #16
16614     A8 74 02 F6 | 	mov	arg01, fp
16618     04 50 85 F1 | 	sub	fp, #4
1661c     A8 76 02 FB | 	rdlong	arg02, fp
16620     0C 50 85 F1 | 	sub	fp, #12
16624     06 00 00 FF 
16628     D4 77 06 F1 | 	add	arg02, ##3540
1662c     6C F9 BE FD | 	call	#_strcmp
16630     00 34 0E F2 | 	cmp	result1, #0 wz
16634                 | '         return;
16634     58 00 90 AD |  if_e	jmp	#LR__0618
16638     0C 50 05 F1 | 	add	fp, #12
1663c     A8 74 02 FB | 	rdlong	arg01, fp
16640     06 00 00 FF 
16644     D4 75 06 F1 | 	add	arg01, ##3540
16648     04 50 05 F1 | 	add	fp, #4
1664c     A8 76 02 F6 | 	mov	arg02, fp
16650     10 50 85 F1 | 	sub	fp, #16
16654     40 EC B0 FD | 	call	#__system____builtin_strcpy
16658     04 50 05 F1 | 	add	fp, #4
1665c     A8 74 02 FB | 	rdlong	arg01, fp
16660     08 50 05 F1 | 	add	fp, #8
16664     A8 76 02 FB | 	rdlong	arg02, fp
16668     06 00 00 FF 
1666c     D4 77 06 F1 | 	add	arg02, ##3540
16670     D0 74 06 F1 | 	add	arg01, #208
16674     3A 77 62 FC | 	wrlong	arg02, arg01
16678     A8 8C 02 FB | 	rdlong	local01, fp
1667c     46 75 02 FB | 	rdlong	arg01, local01
16680     08 50 85 F1 | 	sub	fp, #8
16684     A8 76 02 FB | 	rdlong	arg02, fp
16688     04 50 85 F1 | 	sub	fp, #4
1668c     20 31 BF FD | 	call	#_module_draw
16690                 | LR__0618
16690     A8 F0 03 F6 | 	mov	ptra, fp
16694     B3 00 A0 FD | 	call	#popregs_
16698                 | _update_profileName_0863_ret
16698     2D 00 64 FD | 	ret
1669c                 | 
1669c                 | _update_profileNumber_0866
1669c     01 4C 05 F6 | 	mov	COUNT_, #1
166a0     A9 00 A0 FD | 	call	#pushregs_
166a4     44 F0 07 F1 | 	add	ptra, #68
166a8     A8 74 62 FC | 	wrlong	arg01, fp
166ac     04 50 05 F1 | 	add	fp, #4
166b0     A8 76 62 FC | 	wrlong	arg02, fp
166b4     04 50 05 F1 | 	add	fp, #4
166b8     A8 78 62 FC | 	wrlong	arg03, fp
166bc     04 50 05 F1 | 	add	fp, #4
166c0     A8 78 62 FC | 	wrlong	arg03, fp
166c4     04 50 05 F1 | 	add	fp, #4
166c8     A8 74 02 F6 | 	mov	arg01, fp
166cc     52 01 00 FF 
166d0     33 76 06 F6 | 	mov	arg02, ##@LR__2212
166d4     10 50 85 F1 | 	sub	fp, #16
166d8     0C 78 06 F1 | 	add	arg03, #12
166dc     3C 79 02 FB | 	rdlong	arg03, arg03
166e0     40 78 06 F1 | 	add	arg03, #64
166e4     3C 8D 02 FB | 	rdlong	local01, arg03
166e8     F8 79 02 F6 | 	mov	arg03, ptra
166ec     61 8D 66 FC | 	wrlong	local01, ptra++
166f0     30 B5 BE FD | 	call	#_sprintf
166f4     04 F0 87 F1 | 	sub	ptra, #4
166f8     10 50 05 F1 | 	add	fp, #16
166fc     A8 74 02 F6 | 	mov	arg01, fp
16700     04 50 85 F1 | 	sub	fp, #4
16704     A8 76 02 FB | 	rdlong	arg02, fp
16708     0C 50 85 F1 | 	sub	fp, #12
1670c     07 00 00 FF 
16710     08 76 06 F1 | 	add	arg02, ##3592
16714     84 F8 BE FD | 	call	#_strcmp
16718     00 34 0E F2 | 	cmp	result1, #0 wz
1671c                 | '         return;
1671c     58 00 90 AD |  if_e	jmp	#LR__0619
16720     0C 50 05 F1 | 	add	fp, #12
16724     A8 74 02 FB | 	rdlong	arg01, fp
16728     07 00 00 FF 
1672c     08 74 06 F1 | 	add	arg01, ##3592
16730     04 50 05 F1 | 	add	fp, #4
16734     A8 76 02 F6 | 	mov	arg02, fp
16738     10 50 85 F1 | 	sub	fp, #16
1673c     58 EB B0 FD | 	call	#__system____builtin_strcpy
16740     04 50 05 F1 | 	add	fp, #4
16744     A8 74 02 FB | 	rdlong	arg01, fp
16748     08 50 05 F1 | 	add	fp, #8
1674c     A8 76 02 FB | 	rdlong	arg02, fp
16750     07 00 00 FF 
16754     08 76 06 F1 | 	add	arg02, ##3592
16758     D0 74 06 F1 | 	add	arg01, #208
1675c     3A 77 62 FC | 	wrlong	arg02, arg01
16760     A8 8C 02 FB | 	rdlong	local01, fp
16764     46 75 02 FB | 	rdlong	arg01, local01
16768     08 50 85 F1 | 	sub	fp, #8
1676c     A8 76 02 FB | 	rdlong	arg02, fp
16770     04 50 85 F1 | 	sub	fp, #4
16774     38 30 BF FD | 	call	#_module_draw
16778                 | LR__0619
16778     A8 F0 03 F6 | 	mov	ptra, fp
1677c     B3 00 A0 FD | 	call	#popregs_
16780                 | _update_profileNumber_0866_ret
16780     2D 00 64 FD | 	ret
16784                 | 
16784                 | _isFile_0888
16784     02 4C 05 F6 | 	mov	COUNT_, #2
16788     A9 00 A0 FD | 	call	#pushregs_
1678c     3A 8D 02 F6 | 	mov	local01, arg01
16790     00 8E 06 F6 | 	mov	local02, #0
16794                 | ' {
16794                 | '     for (int i = 0; i < (int)strlen(name); i++)
16794                 | LR__0620
16794     46 75 02 F6 | 	mov	arg01, local01
16798     68 F9 BE FD | 	call	#_strlen
1679c     1A 8F 52 F2 | 	cmps	local02, result1 wc
167a0     20 00 90 3D |  if_ae	jmp	#LR__0621
167a4     47 75 02 F6 | 	mov	arg01, local02
167a8     46 75 02 F1 | 	add	arg01, local01
167ac     3A 75 C2 FA | 	rdbyte	arg01, arg01
167b0     2E 74 0E F2 | 	cmp	arg01, #46 wz
167b4                 | '         {
167b4                 | '             return  (1) ;
167b4     01 34 06 A6 |  if_e	mov	result1, #1
167b8     0C 00 90 AD |  if_e	jmp	#LR__0622
167bc     01 8E 06 F1 | 	add	local02, #1
167c0     D0 FF 9F FD | 	jmp	#LR__0620
167c4                 | LR__0621
167c4                 | '         }
167c4                 | '     }
167c4                 | '     return  (0) ;
167c4     00 34 06 F6 | 	mov	result1, #0
167c8                 | LR__0622
167c8     A8 F0 03 F6 | 	mov	ptra, fp
167cc     B3 00 A0 FD | 	call	#popregs_
167d0                 | _isFile_0888_ret
167d0     2D 00 64 FD | 	ret
167d4                 | 
167d4                 | _button_delete_0891
167d4     03 4C 05 F6 | 	mov	COUNT_, #3
167d8     A9 00 A0 FD | 	call	#pushregs_
167dc     3B 8D 02 F6 | 	mov	local01, arg02
167e0     18 00 00 FF 
167e4     C8 8D 06 F1 | 	add	local01, ##12744
167e8     46 75 02 F6 | 	mov	arg01, local01
167ec     14 F9 BE FD | 	call	#_strlen
167f0     1A 8F 02 F6 | 	mov	local02, result1
167f4     46 75 02 F6 | 	mov	arg01, local01
167f8     52 01 00 FF 
167fc     3E 76 06 F6 | 	mov	arg02, ##@LR__2213
16800     D0 F6 BE FD | 	call	#_strcat
16804     46 75 02 F6 | 	mov	arg01, local01
16808     68 8C 06 F1 | 	add	local01, #104
1680c     46 91 02 FB | 	rdlong	local03, local01
16810     48 77 02 F6 | 	mov	arg02, local03
16814     02 76 66 F0 | 	shl	arg02, #2
16818     48 77 02 F1 | 	add	arg02, local03
1681c     02 76 66 F0 | 	shl	arg02, #2
16820     19 00 00 FF 
16824     28 8C 86 F1 | 	sub	local01, ##12840
16828     46 77 02 F1 | 	add	arg02, local01
1682c     A4 F6 BE FD | 	call	#_strcat
16830     00 74 06 F6 | 	mov	arg01, #0
16834     10 23 B1 FD | 	call	#__system___getiolock_1205
16838     1A 75 02 F6 | 	mov	arg01, result1
1683c     E0 EA B0 FD | 	call	#__system___lockmem
16840     52 01 00 FF 
16844     40 76 06 F6 | 	mov	arg02, ##@LR__2214
16848     00 74 06 F6 | 	mov	arg01, #0
1684c     00 78 06 F6 | 	mov	arg03, #0
16850     60 F0 B0 FD | 	call	#__system___basic_print_string
16854     19 00 00 FF 
16858     28 8C 06 F1 | 	add	local01, ##12840
1685c     46 91 02 FB | 	rdlong	local03, local01
16860     48 77 02 F6 | 	mov	arg02, local03
16864     02 76 66 F0 | 	shl	arg02, #2
16868     48 77 02 F1 | 	add	arg02, local03
1686c     02 76 66 F0 | 	shl	arg02, #2
16870     19 00 00 FF 
16874     28 8C 86 F1 | 	sub	local01, ##12840
16878     46 77 02 F1 | 	add	arg02, local01
1687c     00 74 06 F6 | 	mov	arg01, #0
16880     00 78 06 F6 | 	mov	arg03, #0
16884     2C F0 B0 FD | 	call	#__system___basic_print_string
16888     52 01 00 FF 
1688c     4A 76 06 F6 | 	mov	arg02, ##@LR__2215
16890     00 74 06 F6 | 	mov	arg01, #0
16894     00 78 06 F6 | 	mov	arg03, #0
16898     18 F0 B0 FD | 	call	#__system___basic_print_string
1689c     18 00 00 FF 
168a0     C0 8D 06 F1 | 	add	local01, ##12736
168a4     46 77 02 F6 | 	mov	arg02, local01
168a8     00 74 06 F6 | 	mov	arg01, #0
168ac     00 78 06 F6 | 	mov	arg03, #0
168b0     00 F0 B0 FD | 	call	#__system___basic_print_string
168b4     00 74 06 F6 | 	mov	arg01, #0
168b8     0A 76 06 F6 | 	mov	arg02, #10
168bc     00 78 06 F6 | 	mov	arg03, #0
168c0     A4 EF B0 FD | 	call	#__system___basic_print_char
168c4     00 74 06 F6 | 	mov	arg01, #0
168c8     7C 22 B1 FD | 	call	#__system___getiolock_1205
168cc     1A 01 68 FC | 	wrlong	#0, result1
168d0     46 75 02 F6 | 	mov	arg01, local01
168d4                 | '     return _remove(name);
168d4     58 1F B0 FD | 	call	#__remove
168d8     46 8F 02 F1 | 	add	local02, local01
168dc     47 01 48 FC | 	wrbyte	#0, local02
168e0     A8 F0 03 F6 | 	mov	ptra, fp
168e4     B3 00 A0 FD | 	call	#popregs_
168e8                 | _button_delete_0891_ret
168e8     2D 00 64 FD | 	ret
168ec                 | 
168ec                 | _button_cancel_0893
168ec     01 4C 05 F6 | 	mov	COUNT_, #1
168f0     A9 00 A0 FD | 	call	#pushregs_
168f4     3B 8D 02 F6 | 	mov	local01, arg02
168f8     18 00 00 FF 
168fc     C8 8D 06 F1 | 	add	local01, ##12744
16900     46 75 02 F6 | 	mov	arg01, local01
16904     52 01 00 FF 
16908     51 76 06 F6 | 	mov	arg02, ##@LR__2216
1690c     38 F5 BE FD | 	call	#_strcpy
16910     18 00 00 FF 
16914     C4 8C 86 F1 | 	sub	local01, ##12484
16918     46 03 48 FC | 	wrbyte	#1, local01
1691c     A8 F0 03 F6 | 	mov	ptra, fp
16920     B3 00 A0 FD | 	call	#popregs_
16924                 | _button_cancel_0893_ret
16924     2D 00 64 FD | 	ret
16928                 | 
16928                 | _button_dotdot_0896
16928     04 4C 05 F6 | 	mov	COUNT_, #4
1692c     A9 00 A0 FD | 	call	#pushregs_
16930     3B 8D 02 F6 | 	mov	local01, arg02
16934     18 00 00 FF 
16938     C8 8D 06 F1 | 	add	local01, ##12744
1693c     46 75 02 F6 | 	mov	arg01, local01
16940     18 00 00 FF 
16944     C8 8D 86 F1 | 	sub	local01, ##12744
16948     B8 F7 BE FD | 	call	#_strlen
1694c     1A 8F 02 F6 | 	mov	local02, result1
16950     01 8E 86 F1 | 	sub	local02, #1
16954     04 97 9E FE | 	loc	pa,	#(@LR__0625-@LR__0623)
16958     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1695c                 | ' {
1695c                 | '     Explorer *explorer = (Explorer *)arg;
1695c                 | '     for (int i = strlen(explorer->pathBuffer) - 1; i >= 0; i--)
1695c                 | LR__0623
1695c     00 8E 56 F2 | 	cmps	local02, #0 wc
16960     54 00 90 CD |  if_b	jmp	#LR__0626
16964     47 91 02 F6 | 	mov	local03, local02
16968     18 00 00 FF 
1696c     C8 8D 06 F1 | 	add	local01, ##12744
16970     46 91 02 F1 | 	add	local03, local01
16974     48 93 C2 FA | 	rdbyte	local04, local03
16978     2F 92 0E F2 | 	cmp	local04, #47 wz
1697c     18 00 00 FF 
16980     C8 8D 86 F1 | 	sub	local01, ##12744
16984     28 00 90 5D |  if_ne	jmp	#LR__0624
16988     18 00 00 FF 
1698c     C8 8D 06 F1 | 	add	local01, ##12744
16990     46 8F 02 F1 | 	add	local02, local01
16994     47 01 48 FC | 	wrbyte	#0, local02
16998     68 8C 06 F1 | 	add	local01, #104
1699c     FF FF FF FF 
169a0     46 FF 6B FC | 	wrlong	##-1, local01
169a4     04 8C 86 F1 | 	sub	local01, #4
169a8     46 01 68 FC | 	wrlong	#0, local01
169ac                 | '         {
169ac                 | '             explorer->pathBuffer[i] = '\0';
169ac                 | '             explorer->selection = -1;
169ac                 | '             explorer->page = 0;
169ac                 | '             break;
169ac     08 00 90 FD | 	jmp	#LR__0626
169b0                 | LR__0624
169b0     01 8E 86 F1 | 	sub	local02, #1
169b4     A4 FF 9F FD | 	jmp	#LR__0623
169b8                 | LR__0625
169b8                 | LR__0626
169b8     A8 F0 03 F6 | 	mov	ptra, fp
169bc     B3 00 A0 FD | 	call	#popregs_
169c0                 | _button_dotdot_0896_ret
169c0     2D 00 64 FD | 	ret
169c4                 | 
169c4                 | _button_prev_0898
169c4     19 00 00 FF 
169c8     2C 76 06 F1 | 	add	arg02, ##12844
169cc     3B 3B 02 FB | 	rdlong	_var01, arg02
169d0     19 00 00 FF 
169d4     2C 76 86 F1 | 	sub	arg02, ##12844
169d8     01 3A 56 F2 | 	cmps	_var01, #1 wc
169dc     19 00 00 3F 
169e0     2C 76 06 31 |  if_ae	add	arg02, ##12844
169e4     3B 3B 02 3B |  if_ae	rdlong	_var01, arg02
169e8     01 3A 86 31 |  if_ae	sub	_var01, #1
169ec     3B 3B 62 3C |  if_ae	wrlong	_var01, arg02
169f0     19 00 00 3F 
169f4     2C 76 86 31 |  if_ae	sub	arg02, ##12844
169f8     19 00 00 FF 
169fc     30 76 06 F1 | 	add	arg02, ##12848
16a00     FF FF FF FF 
16a04     3B FF 6B FC | 	wrlong	##-1, arg02
16a08                 | _button_prev_0898_ret
16a08     2D 00 64 FD | 	ret
16a0c                 | 
16a0c                 | _button_next_0900
16a0c     19 00 00 FF 
16a10     2C 76 06 F1 | 	add	arg02, ##12844
16a14     3B 3B 02 FB | 	rdlong	_var01, arg02
16a18     01 3A 06 F1 | 	add	_var01, #1
16a1c     3B 3B 62 FC | 	wrlong	_var01, arg02
16a20     04 76 06 F1 | 	add	arg02, #4
16a24     FF FF FF FF 
16a28     3B FF 6B FC | 	wrlong	##-1, arg02
16a2c                 | _button_next_0900_ret
16a2c     2D 00 64 FD | 	ret
16a30                 | 
16a30                 | _button_done_0902
16a30     04 77 06 F1 | 	add	arg02, #260
16a34     3B 03 48 FC | 	wrbyte	#1, arg02
16a38                 | _button_done_0902_ret
16a38     2D 00 64 FD | 	ret
16a3c                 | 
16a3c                 | _button_files_0906
16a3c     05 4C 05 F6 | 	mov	COUNT_, #5
16a40     A9 00 A0 FD | 	call	#pushregs_
16a44     3A 8D 02 F6 | 	mov	local01, arg01
16a48     3B 8F 02 F6 | 	mov	local02, arg02
16a4c     46 91 02 F6 | 	mov	local03, local01
16a50     48 93 02 F6 | 	mov	local04, local03
16a54     02 92 66 F0 | 	shl	local04, #2
16a58     48 93 02 F1 | 	add	local04, local03
16a5c     02 92 66 F0 | 	shl	local04, #2
16a60     08 8E 06 F1 | 	add	local02, #8
16a64     47 93 02 F1 | 	add	local04, local02
16a68     00 94 06 F6 | 	mov	local05, #0
16a6c                 | '     for (int i = 0; i < (int)strlen(newpath); i++)
16a6c     08 8E 86 F1 | 	sub	local02, #8
16a70                 | LR__0627
16a70     49 75 02 F6 | 	mov	arg01, local04
16a74     8C F6 BE FD | 	call	#_strlen
16a78     1A 95 52 F2 | 	cmps	local05, result1 wc
16a7c     3C 00 90 3D |  if_ae	jmp	#LR__0629
16a80     4A 91 02 F6 | 	mov	local03, local05
16a84     49 91 02 F1 | 	add	local03, local04
16a88     48 91 C2 FA | 	rdbyte	local03, local03
16a8c     2E 90 0E F2 | 	cmp	local03, #46 wz
16a90     20 00 90 5D |  if_ne	jmp	#LR__0628
16a94     04 8E 06 F1 | 	add	local02, #4
16a98     47 95 0A FB | 	rdlong	local05, local02 wz
16a9c     04 8E 86 F1 | 	sub	local02, #4
16aa0     19 00 00 AF 
16aa4     30 8E 06 A1 |  if_e	add	local02, ##12848
16aa8     47 8D 62 AC |  if_e	wrlong	local01, local02
16aac                 | '             {
16aac                 | '                 explorer->selection = id;
16aac                 | '                 return;
16aac     84 00 90 AD |  if_e	jmp	#LR__0630
16ab0                 | '             {
16ab0                 | '                 return;
16ab0     80 00 90 FD | 	jmp	#LR__0630
16ab4                 | LR__0628
16ab4     01 94 06 F1 | 	add	local05, #1
16ab8     B4 FF 9F FD | 	jmp	#LR__0627
16abc                 | LR__0629
16abc     18 00 00 FF 
16ac0     C8 8F 06 F1 | 	add	local02, ##12744
16ac4     47 75 02 F6 | 	mov	arg01, local02
16ac8     52 01 00 FF 
16acc     53 76 06 F6 | 	mov	arg02, ##@LR__2217
16ad0     00 F4 BE FD | 	call	#_strcat
16ad4     47 75 02 F6 | 	mov	arg01, local02
16ad8     49 77 02 F6 | 	mov	arg02, local04
16adc     F4 F3 BE FD | 	call	#_strcat
16ae0     68 8E 06 F1 | 	add	local02, #104
16ae4     FF FF FF FF 
16ae8     47 FF 6B FC | 	wrlong	##-1, local02
16aec     04 8E 86 F1 | 	sub	local02, #4
16af0     47 01 68 FC | 	wrlong	#0, local02
16af4     00 74 06 F6 | 	mov	arg01, #0
16af8     4C 20 B1 FD | 	call	#__system___getiolock_1205
16afc     1A 75 02 F6 | 	mov	arg01, result1
16b00     1C E8 B0 FD | 	call	#__system___lockmem
16b04     64 8E 86 F1 | 	sub	local02, #100
16b08     00 74 06 F6 | 	mov	arg01, #0
16b0c     47 77 02 F6 | 	mov	arg02, local02
16b10     00 78 06 F6 | 	mov	arg03, #0
16b14     9C ED B0 FD | 	call	#__system___basic_print_string
16b18     00 74 06 F6 | 	mov	arg01, #0
16b1c     0A 76 06 F6 | 	mov	arg02, #10
16b20     00 78 06 F6 | 	mov	arg03, #0
16b24     40 ED B0 FD | 	call	#__system___basic_print_char
16b28     00 74 06 F6 | 	mov	arg01, #0
16b2c     18 20 B1 FD | 	call	#__system___getiolock_1205
16b30     1A 01 68 FC | 	wrlong	#0, result1
16b34                 | LR__0630
16b34     A8 F0 03 F6 | 	mov	ptra, fp
16b38     B3 00 A0 FD | 	call	#popregs_
16b3c                 | _button_files_0906_ret
16b3c     2D 00 64 FD | 	ret
16b40                 | 
16b40                 | _button_navigation_0981
16b40     15 01 00 FF 
16b44     64 D7 05 F1 | 	add	ptr__dat__, ##142180
16b48     EB 02 48 FC | 	wrbyte	#1, ptr__dat__
16b4c     15 01 00 FF 
16b50     64 D7 85 F1 | 	sub	ptr__dat__, ##142180
16b54                 | _button_navigation_0981_ret
16b54     2D 00 64 FD | 	ret
16b58                 | 
16b58                 | _create_filepath_0982
16b58     01 4C 05 F6 | 	mov	COUNT_, #1
16b5c     A9 00 A0 FD | 	call	#pushregs_
16b60     3A 8D 02 F6 | 	mov	local01, arg01
16b64     30 E7 B0 FD | 	call	#__system____builtin_strcpy
16b68     52 01 00 FF 
16b6c     55 76 06 F6 | 	mov	arg02, ##@LR__2218
16b70     46 75 02 F6 | 	mov	arg01, local01
16b74     5C F3 BE FD | 	call	#_strcat
16b78     46 75 02 F6 | 	mov	arg01, local01
16b7c     3C 77 02 F6 | 	mov	arg02, arg03
16b80     50 F3 BE FD | 	call	#_strcat
16b84     46 75 02 F6 | 	mov	arg01, local01
16b88     3D 77 02 F6 | 	mov	arg02, arg04
16b8c     44 F3 BE FD | 	call	#_strcat
16b90     A8 F0 03 F6 | 	mov	ptra, fp
16b94     B3 00 A0 FD | 	call	#popregs_
16b98                 | _create_filepath_0982_ret
16b98     2D 00 64 FD | 	ret
16b9c                 | 
16b9c                 | _button_open_0988
16b9c     10 4C 05 F6 | 	mov	COUNT_, #16
16ba0     A9 00 A0 FD | 	call	#pushregs_
16ba4     3B 8D 02 F6 | 	mov	local01, arg02
16ba8     46 8F 02 F6 | 	mov	local02, local01
16bac     04 8E 06 F1 | 	add	local02, #4
16bb0     47 75 02 FB | 	rdlong	arg01, local02
16bb4     04 8E 86 F1 | 	sub	local02, #4
16bb8     52 01 00 FF 
16bbc     57 7C 06 F6 | 	mov	arg05, ##@LR__2219
16bc0     64 76 06 F6 | 	mov	arg02, #100
16bc4     64 78 06 F6 | 	mov	arg03, #100
16bc8     00 7A 06 F6 | 	mov	arg04, #0
16bcc     14 78 BF FD | 	call	#_explorer_create
16bd0     1A 91 02 F6 | 	mov	local03, result1
16bd4     48 75 02 F6 | 	mov	arg01, local03
16bd8     84 78 BF FD | 	call	#_explorer_run
16bdc     1A 93 02 F6 | 	mov	local04, result1
16be0     52 01 00 FF 
16be4     5B 76 06 F6 | 	mov	arg02, ##@LR__2220
16be8     49 75 02 F6 | 	mov	arg01, local04
16bec     AC F3 BE FD | 	call	#_strcmp
16bf0     00 34 0E F2 | 	cmp	result1, #0 wz
16bf4                 | '     {
16bf4                 | '         return;
16bf4     7C 02 90 AD |  if_e	jmp	#LR__0644
16bf8     00 94 06 F6 | 	mov	local05, #0
16bfc                 | '     }
16bfc                 | ' 
16bfc                 | ' 
16bfc                 | ' 
16bfc                 | ' 
16bfc                 | ' 
16bfc                 | '     for (int i = 0; i <  4 ; i++)
16bfc                 | LR__0631
16bfc     04 94 56 F2 | 	cmps	local05, #4 wc
16c00     44 01 90 3D |  if_ae	jmp	#LR__0637
16c04     49 75 02 F6 | 	mov	arg01, local04
16c08     00 96 06 F6 | 	mov	local06, #0
16c0c     00 94 9E FE | 	loc	pa,	#(@LR__0633-@LR__0632)
16c10     8C 00 A0 FD | 	call	#FCACHE_LOAD_
16c14                 | LR__0632
16c14     3A 35 CA FA | 	rdbyte	result1, arg01 wz
16c18     01 96 06 51 |  if_ne	add	local06, #1
16c1c     01 74 06 51 |  if_ne	add	arg01, #1
16c20     F0 FF 9F 5D |  if_ne	jmp	#LR__0632
16c24                 | LR__0633
16c24     4B 99 02 F6 | 	mov	local07, local06
16c28     4A 75 02 F6 | 	mov	arg01, local05
16c2c     02 74 66 F0 | 	shl	arg01, #2
16c30     15 01 00 FF 
16c34     54 D7 05 F1 | 	add	ptr__dat__, ##142164
16c38     EB 74 02 F1 | 	add	arg01, ptr__dat__
16c3c     3A 75 02 FB | 	rdlong	arg01, arg01
16c40     15 01 00 FF 
16c44     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
16c48     00 96 06 F6 | 	mov	local06, #0
16c4c     C0 93 9E FE | 	loc	pa,	#(@LR__0635-@LR__0634)
16c50     8C 00 A0 FD | 	call	#FCACHE_LOAD_
16c54                 | LR__0634
16c54     3A 35 CA FA | 	rdbyte	result1, arg01 wz
16c58     01 96 06 51 |  if_ne	add	local06, #1
16c5c     01 74 06 51 |  if_ne	add	arg01, #1
16c60     F0 FF 9F 5D |  if_ne	jmp	#LR__0634
16c64                 | LR__0635
16c64     4B 99 82 F1 | 	sub	local07, local06
16c68     49 9B 02 F6 | 	mov	local08, local04
16c6c     4C 9B 02 F1 | 	add	local08, local07
16c70     00 74 06 F6 | 	mov	arg01, #0
16c74     D0 1E B1 FD | 	call	#__system___getiolock_1205
16c78     1A 75 02 F6 | 	mov	arg01, result1
16c7c     A0 E6 B0 FD | 	call	#__system___lockmem
16c80     00 74 06 F6 | 	mov	arg01, #0
16c84     4D 77 02 F6 | 	mov	arg02, local08
16c88     00 78 06 F6 | 	mov	arg03, #0
16c8c     24 EC B0 FD | 	call	#__system___basic_print_string
16c90     00 74 06 F6 | 	mov	arg01, #0
16c94     0A 76 06 F6 | 	mov	arg02, #10
16c98     00 78 06 F6 | 	mov	arg03, #0
16c9c     C8 EB B0 FD | 	call	#__system___basic_print_char
16ca0     00 74 06 F6 | 	mov	arg01, #0
16ca4     A0 1E B1 FD | 	call	#__system___getiolock_1205
16ca8     1A 01 68 FC | 	wrlong	#0, result1
16cac     4A 75 02 F6 | 	mov	arg01, local05
16cb0     02 74 66 F0 | 	shl	arg01, #2
16cb4     15 01 00 FF 
16cb8     54 D7 05 F1 | 	add	ptr__dat__, ##142164
16cbc     EB 74 02 F1 | 	add	arg01, ptr__dat__
16cc0     3A 77 02 FB | 	rdlong	arg02, arg01
16cc4     4D 75 02 F6 | 	mov	arg01, local08
16cc8     15 01 00 FF 
16ccc     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
16cd0     C8 F2 BE FD | 	call	#_strcmp
16cd4     00 34 0E F2 | 	cmp	result1, #0 wz
16cd8     64 00 90 5D |  if_ne	jmp	#LR__0636
16cdc     00 74 06 F6 | 	mov	arg01, #0
16ce0     64 1E B1 FD | 	call	#__system___getiolock_1205
16ce4     1A 75 02 F6 | 	mov	arg01, result1
16ce8     34 E6 B0 FD | 	call	#__system___lockmem
16cec     52 01 00 FF 
16cf0     5D 76 06 F6 | 	mov	arg02, ##@LR__2221
16cf4     00 74 06 F6 | 	mov	arg01, #0
16cf8     00 78 06 F6 | 	mov	arg03, #0
16cfc     B4 EB B0 FD | 	call	#__system___basic_print_string
16d00     00 74 06 F6 | 	mov	arg01, #0
16d04     4A 77 02 F6 | 	mov	arg02, local05
16d08     00 78 06 F6 | 	mov	arg03, #0
16d0c     0A 7A 06 F6 | 	mov	arg04, #10
16d10     E4 EB B0 FD | 	call	#__system___basic_print_integer
16d14     00 74 06 F6 | 	mov	arg01, #0
16d18     0A 76 06 F6 | 	mov	arg02, #10
16d1c     00 78 06 F6 | 	mov	arg03, #0
16d20     44 EB B0 FD | 	call	#__system___basic_print_char
16d24     00 74 06 F6 | 	mov	arg01, #0
16d28     1C 1E B1 FD | 	call	#__system___getiolock_1205
16d2c     1A 01 68 FC | 	wrlong	#0, result1
16d30     0C 8E 06 F1 | 	add	local02, #12
16d34     47 95 62 FC | 	wrlong	local05, local02
16d38     0C 8E 86 F1 | 	sub	local02, #12
16d3c                 | '             page->mode = i;
16d3c                 | '             break;
16d3c     08 00 90 FD | 	jmp	#LR__0637
16d40                 | LR__0636
16d40     01 94 06 F1 | 	add	local05, #1
16d44     B4 FE 9F FD | 	jmp	#LR__0631
16d48                 | LR__0637
16d48     00 74 06 F6 | 	mov	arg01, #0
16d4c     F8 1D B1 FD | 	call	#__system___getiolock_1205
16d50     1A 75 02 F6 | 	mov	arg01, result1
16d54     C8 E5 B0 FD | 	call	#__system___lockmem
16d58     52 01 00 FF 
16d5c     69 76 06 F6 | 	mov	arg02, ##@LR__2222
16d60     00 74 06 F6 | 	mov	arg01, #0
16d64     00 78 06 F6 | 	mov	arg03, #0
16d68     48 EB B0 FD | 	call	#__system___basic_print_string
16d6c     0C 8E 06 F1 | 	add	local02, #12
16d70     47 77 02 FB | 	rdlong	arg02, local02
16d74     0A 9C 06 F6 | 	mov	local09, #10
16d78     00 74 06 F6 | 	mov	arg01, #0
16d7c     00 78 06 F6 | 	mov	arg03, #0
16d80     0A 7A 06 F6 | 	mov	arg04, #10
16d84     70 EB B0 FD | 	call	#__system___basic_print_integer
16d88     00 74 06 F6 | 	mov	arg01, #0
16d8c     0A 76 06 F6 | 	mov	arg02, #10
16d90     00 78 06 F6 | 	mov	arg03, #0
16d94     D0 EA B0 FD | 	call	#__system___basic_print_char
16d98     01 9E 06 F6 | 	mov	local10, #1
16d9c     00 74 06 F6 | 	mov	arg01, #0
16da0     A4 1D B1 FD | 	call	#__system___getiolock_1205
16da4     1A 01 68 FC | 	wrlong	#0, result1
16da8     00 A0 06 F6 | 	mov	local11, #0
16dac                 | ' 
16dac                 | '     switch (page->mode)
16dac     47 A3 02 FB | 	rdlong	local12, local02
16db0     0C 8E 86 F1 | 	sub	local02, #12
16db4     51 A5 02 F6 | 	mov	local13, local12
16db8     04 A4 26 F3 | 	fle	local13, #4
16dbc     30 A4 62 FD | 	jmprel	local13
16dc0                 | LR__0638
16dc0     10 00 90 FD | 	jmp	#LR__0639
16dc4     60 00 90 FD | 	jmp	#LR__0640
16dc8     70 00 90 FD | 	jmp	#LR__0641
16dcc     84 00 90 FD | 	jmp	#LR__0642
16dd0     A0 00 90 FD | 	jmp	#LR__0643
16dd4                 | LR__0639
16dd4     00 74 06 F6 | 	mov	arg01, #0
16dd8     6C 1D B1 FD | 	call	#__system___getiolock_1205
16ddc     1A 75 02 F6 | 	mov	arg01, result1
16de0     3C E5 B0 FD | 	call	#__system___lockmem
16de4     52 01 00 FF 
16de8     6F 76 06 F6 | 	mov	arg02, ##@LR__2223
16dec     00 74 06 F6 | 	mov	arg01, #0
16df0     00 78 06 F6 | 	mov	arg03, #0
16df4     BC EA B0 FD | 	call	#__system___basic_print_string
16df8     00 74 06 F6 | 	mov	arg01, #0
16dfc     0A 76 06 F6 | 	mov	arg02, #10
16e00     00 78 06 F6 | 	mov	arg03, #0
16e04     60 EA B0 FD | 	call	#__system___basic_print_char
16e08     00 74 06 F6 | 	mov	arg01, #0
16e0c     38 1D B1 FD | 	call	#__system___getiolock_1205
16e10     1A 01 68 FC | 	wrlong	#0, result1
16e14     88 8E 06 F1 | 	add	local02, #136
16e18     49 75 02 F6 | 	mov	arg01, local04
16e1c     47 77 02 F6 | 	mov	arg02, local02
16e20     88 11 BF FD | 	call	#_json_to_motion_quartet
16e24                 | '         json_to_motion_quartet(filepath, &(page->quartet));
16e24                 | '         break;
16e24     4C 00 90 FD | 	jmp	#LR__0643
16e28                 | LR__0640
16e28     EC 8E 06 F1 | 	add	local02, #236
16e2c     49 75 02 F6 | 	mov	arg01, local04
16e30     47 77 02 F6 | 	mov	arg02, local02
16e34     D4 0C BF FD | 	call	#_json_to_motion_set
16e38                 | '     {
16e38                 | '         json_to_motion_set(filepath, &(page->set));
16e38                 | '         break;
16e38     38 00 90 FD | 	jmp	#LR__0643
16e3c                 | LR__0641
16e3c     02 00 00 FF 
16e40     20 8F 06 F1 | 	add	local02, ##1312
16e44     49 75 02 F6 | 	mov	arg01, local04
16e48     47 77 02 F6 | 	mov	arg02, local02
16e4c     34 08 BF FD | 	call	#_json_to_motion_profile
16e50                 | '     {
16e50                 | '         json_to_motion_profile(filepath, &(page->profile));
16e50                 | '         break;
16e50     20 00 90 FD | 	jmp	#LR__0643
16e54                 | LR__0642
16e54     49 A7 02 F6 | 	mov	local14, local04
16e58     22 00 00 FF 
16e5c     68 8E 06 F1 | 	add	local02, ##17512
16e60     47 A9 02 F6 | 	mov	local15, local02
16e64     54 AB 02 F6 | 	mov	local16, local15
16e68     53 75 02 F6 | 	mov	arg01, local14
16e6c     55 77 02 F6 | 	mov	arg02, local16
16e70     18 05 BF FD | 	call	#_json_to_test_profile
16e74                 | '     {
16e74                 | '         json_to_test_profile(filepath, &(page->test));
16e74                 | '         break;
16e74                 | LR__0643
16e74                 | LR__0644
16e74     A8 F0 03 F6 | 	mov	ptra, fp
16e78     B3 00 A0 FD | 	call	#popregs_
16e7c                 | _button_open_0988_ret
16e7c     2D 00 64 FD | 	ret
16e80                 | 
16e80                 | _button_new_0996
16e80     10 4C 05 F6 | 	mov	COUNT_, #16
16e84     A9 00 A0 FD | 	call	#pushregs_
16e88     3A 8D 02 F6 | 	mov	local01, arg01
16e8c     3B 8F 02 F6 | 	mov	local02, arg02
16e90     47 91 02 F6 | 	mov	local03, local02
16e94     3D 00 00 FF 
16e98     50 91 06 F1 | 	add	local03, ##31568
16e9c     48 75 02 F6 | 	mov	arg01, local03
16ea0     3D 00 00 FF 
16ea4     4C 91 86 F1 | 	sub	local03, ##31564
16ea8     48 77 02 FB | 	rdlong	arg02, local03
16eac     04 90 86 F1 | 	sub	local03, #4
16eb0     44 84 BF FD | 	call	#_selection_init
16eb4     00 92 06 F6 | 	mov	local04, #0
16eb8                 | ' {
16eb8                 | '     TestProfilePage *page = (TestProfilePage *)arg;
16eb8                 | ' 
16eb8                 | '     selection_init(&(page->selection), page->display);
16eb8                 | '     for (int i = 0; i <  4 ; i++)
16eb8                 | LR__0645
16eb8     04 92 56 F2 | 	cmps	local04, #4 wc
16ebc     40 00 90 3D |  if_ae	jmp	#LR__0646
16ec0     3D 00 00 FF 
16ec4     50 91 06 F1 | 	add	local03, ##31568
16ec8     48 75 02 F6 | 	mov	arg01, local03
16ecc     3D 00 00 FF 
16ed0     50 91 86 F1 | 	sub	local03, ##31568
16ed4     49 77 02 F6 | 	mov	arg02, local04
16ed8     02 76 66 F0 | 	shl	arg02, #2
16edc     15 01 00 FF 
16ee0     44 D7 05 F1 | 	add	ptr__dat__, ##142148
16ee4     EB 76 02 F1 | 	add	arg02, ptr__dat__
16ee8     3B 77 02 FB | 	rdlong	arg02, arg02
16eec     15 01 00 FF 
16ef0     44 D7 85 F1 | 	sub	ptr__dat__, ##142148
16ef4     E8 86 BF FD | 	call	#_selection_add_option
16ef8     01 92 06 F1 | 	add	local04, #1
16efc     B8 FF 9F FD | 	jmp	#LR__0645
16f00                 | LR__0646
16f00     3D 00 00 FF 
16f04     50 91 06 F1 | 	add	local03, ##31568
16f08     48 75 02 F6 | 	mov	arg01, local03
16f0c     08 88 BF FD | 	call	#_selection_run
16f10     1A 95 02 F6 | 	mov	local05, result1
16f14     3D 00 00 FF 
16f18     4C 91 86 F1 | 	sub	local03, ##31564
16f1c     48 75 02 FB | 	rdlong	arg01, local03
16f20     04 90 06 F1 | 	add	local03, #4
16f24     48 77 02 FB | 	rdlong	arg02, local03
16f28     08 90 86 F1 | 	sub	local03, #8
16f2c     F4 2D BF FD | 	call	#_keyboard_create
16f30     1A 97 0A F6 | 	mov	local06, result1 wz
16f34     44 00 90 5D |  if_ne	jmp	#LR__0647
16f38     00 74 06 F6 | 	mov	arg01, #0
16f3c     08 1C B1 FD | 	call	#__system___getiolock_1205
16f40     1A 75 02 F6 | 	mov	arg01, result1
16f44     D8 E3 B0 FD | 	call	#__system___lockmem
16f48     52 01 00 FF 
16f4c     81 76 06 F6 | 	mov	arg02, ##@LR__2224
16f50     00 74 06 F6 | 	mov	arg01, #0
16f54     00 78 06 F6 | 	mov	arg03, #0
16f58     58 E9 B0 FD | 	call	#__system___basic_print_string
16f5c     00 74 06 F6 | 	mov	arg01, #0
16f60     0A 76 06 F6 | 	mov	arg02, #10
16f64     00 78 06 F6 | 	mov	arg03, #0
16f68     FC E8 B0 FD | 	call	#__system___basic_print_char
16f6c     00 74 06 F6 | 	mov	arg01, #0
16f70     D4 1B B1 FD | 	call	#__system___getiolock_1205
16f74     1A 01 68 FC | 	wrlong	#0, result1
16f78                 | '         return;
16f78     9C 01 90 FD | 	jmp	#LR__0654
16f7c                 | LR__0647
16f7c     52 01 00 FF 
16f80     BB 76 06 F6 | 	mov	arg02, ##@LR__2225
16f84     4B 75 02 F6 | 	mov	arg01, local06
16f88     E0 2D BF FD | 	call	#_keyboard_get_input
16f8c     1A 99 02 F6 | 	mov	local07, result1
16f90     52 01 00 FF 
16f94     CD 76 06 F6 | 	mov	arg02, ##@LR__2226
16f98     4C 75 02 F6 | 	mov	arg01, local07
16f9c     FC EF BE FD | 	call	#_strcmp
16fa0     00 34 0E F2 | 	cmp	result1, #0 wz
16fa4                 | '     {
16fa4                 | '         return;
16fa4     70 01 90 AD |  if_e	jmp	#LR__0654
16fa8     04 90 06 F1 | 	add	local03, #4
16fac     48 75 02 FB | 	rdlong	arg01, local03
16fb0     04 90 86 F1 | 	sub	local03, #4
16fb4     52 01 00 FF 
16fb8     CF 7C 06 F6 | 	mov	arg05, ##@LR__2227
16fbc     64 76 06 F6 | 	mov	arg02, #100
16fc0     64 78 06 F6 | 	mov	arg03, #100
16fc4     01 7A 06 F6 | 	mov	arg04, #1
16fc8     18 74 BF FD | 	call	#_explorer_create
16fcc     1A 9B 0A F6 | 	mov	local08, result1 wz
16fd0     44 00 90 5D |  if_ne	jmp	#LR__0648
16fd4     00 74 06 F6 | 	mov	arg01, #0
16fd8     6C 1B B1 FD | 	call	#__system___getiolock_1205
16fdc     1A 75 02 F6 | 	mov	arg01, result1
16fe0     3C E3 B0 FD | 	call	#__system___lockmem
16fe4     52 01 00 FF 
16fe8     D3 76 06 F6 | 	mov	arg02, ##@LR__2228
16fec     00 74 06 F6 | 	mov	arg01, #0
16ff0     00 78 06 F6 | 	mov	arg03, #0
16ff4     BC E8 B0 FD | 	call	#__system___basic_print_string
16ff8     00 74 06 F6 | 	mov	arg01, #0
16ffc     0A 76 06 F6 | 	mov	arg02, #10
17000     00 78 06 F6 | 	mov	arg03, #0
17004     60 E8 B0 FD | 	call	#__system___basic_print_char
17008     00 74 06 F6 | 	mov	arg01, #0
1700c     38 1B B1 FD | 	call	#__system___getiolock_1205
17010     1A 01 68 FC | 	wrlong	#0, result1
17014                 | '         return;
17014     00 01 90 FD | 	jmp	#LR__0654
17018                 | LR__0648
17018     4D 75 02 F6 | 	mov	arg01, local08
1701c     40 74 BF FD | 	call	#_explorer_run
17020     1A 9D 02 F6 | 	mov	local09, result1
17024     52 01 00 FF 
17028     04 77 06 F6 | 	mov	arg02, ##@LR__2229
1702c     4E 75 02 F6 | 	mov	arg01, local09
17030     68 EF BE FD | 	call	#_strcmp
17034     00 34 0E F2 | 	cmp	result1, #0 wz
17038                 | '     {
17038                 | '         return;
17038     DC 00 90 AD |  if_e	jmp	#LR__0654
1703c     0C 90 06 F1 | 	add	local03, #12
17040     48 95 62 FC | 	wrlong	local05, local03
17044                 | '     }
17044                 | ' 
17044                 | '     page->mode = newmode;
17044                 | '     switch (page->mode)
17044     4A 9F 02 F6 | 	mov	local10, local05
17048     0C 90 86 F1 | 	sub	local03, #12
1704c     4F A1 02 F6 | 	mov	local11, local10
17050     03 A0 26 F3 | 	fle	local11, #3
17054     30 A0 62 FD | 	jmprel	local11
17058                 | LR__0649
17058     0C 00 90 FD | 	jmp	#LR__0650
1705c     3C 00 90 FD | 	jmp	#LR__0651
17060     6C 00 90 FD | 	jmp	#LR__0652
17064     B0 00 90 FD | 	jmp	#LR__0653
17068                 | LR__0650
17068     88 90 06 F1 | 	add	local03, #136
1706c     48 75 02 F6 | 	mov	arg01, local03
17070     68 F2 BE FD | 	call	#_motion_quartet_init
17074     15 01 00 FF 
17078     54 D7 05 F1 | 	add	ptr__dat__, ##142164
1707c     EB 7A 02 FB | 	rdlong	arg04, ptr__dat__
17080     15 01 00 FF 
17084     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
17088     48 75 02 F6 | 	mov	arg01, local03
1708c     4E 77 02 F6 | 	mov	arg02, local09
17090     4C 79 02 F6 | 	mov	arg03, local07
17094     C0 FA BF FD | 	call	#_create_filepath_0982
17098                 | '     {
17098                 | '         motion_quartet_init(&(page->quartet));
17098                 | '         create_filepath(page->quartet.name, newpath, filename, extension[ 0 ]);
17098                 | '         break;
17098     7C 00 90 FD | 	jmp	#LR__0653
1709c                 | LR__0651
1709c     EC 90 06 F1 | 	add	local03, #236
170a0     48 75 02 F6 | 	mov	arg01, local03
170a4     A4 F2 BE FD | 	call	#_motion_set_init
170a8     15 01 00 FF 
170ac     58 D7 05 F1 | 	add	ptr__dat__, ##142168
170b0     EB 7A 02 FB | 	rdlong	arg04, ptr__dat__
170b4     15 01 00 FF 
170b8     58 D7 85 F1 | 	sub	ptr__dat__, ##142168
170bc     48 75 02 F6 | 	mov	arg01, local03
170c0     4E 77 02 F6 | 	mov	arg02, local09
170c4     4C 79 02 F6 | 	mov	arg03, local07
170c8     8C FA BF FD | 	call	#_create_filepath_0982
170cc                 | '     {
170cc                 | '         motion_set_init(&(page->set));
170cc                 | '         create_filepath(page->set.name, newpath, filename, extension[ 1 ]);
170cc                 | '         break;
170cc     48 00 90 FD | 	jmp	#LR__0653
170d0                 | LR__0652
170d0     02 00 00 FF 
170d4     20 91 06 F1 | 	add	local03, ##1312
170d8     48 75 02 F6 | 	mov	arg01, local03
170dc     F0 F2 BE FD | 	call	#_motion_profile_init
170e0     48 A3 02 F6 | 	mov	local12, local03
170e4     4E A5 02 F6 | 	mov	local13, local09
170e8     4C A7 02 F6 | 	mov	local14, local07
170ec     15 01 00 FF 
170f0     5C D7 05 F1 | 	add	ptr__dat__, ##142172
170f4     EB A8 02 FB | 	rdlong	local15, ptr__dat__
170f8     15 01 00 FF 
170fc     5C D7 85 F1 | 	sub	ptr__dat__, ##142172
17100     54 AB 02 F6 | 	mov	local16, local15
17104     51 75 02 F6 | 	mov	arg01, local12
17108     52 77 02 F6 | 	mov	arg02, local13
1710c     53 79 02 F6 | 	mov	arg03, local14
17110     55 7B 02 F6 | 	mov	arg04, local16
17114     40 FA BF FD | 	call	#_create_filepath_0982
17118                 | '     {
17118                 | '         motion_profile_init(&(page->profile));
17118                 | '         create_filepath(page->profile.name, newpath, filename, extension[ 2 ]);
17118                 | '         break;
17118                 | LR__0653
17118                 | LR__0654
17118     A8 F0 03 F6 | 	mov	ptra, fp
1711c     B3 00 A0 FD | 	call	#popregs_
17120                 | _button_new_0996_ret
17120     2D 00 64 FD | 	ret
17124                 | 
17124                 | _button_save_1011
17124     02 4C 05 F6 | 	mov	COUNT_, #2
17128     A9 00 A0 FD | 	call	#pushregs_
1712c     3B 8D 02 F6 | 	mov	local01, arg02
17130                 | ' {
17130                 | '     TestProfilePage *page = (TestProfilePage *)arg;
17130                 | '     switch (page->mode)
17130     0C 8C 06 F1 | 	add	local01, #12
17134     46 8F 02 FB | 	rdlong	local02, local01
17138     0C 8C 86 F1 | 	sub	local01, #12
1713c     04 8E 26 F3 | 	fle	local02, #4
17140     30 8E 62 FD | 	jmprel	local02
17144                 | LR__0655
17144     10 00 90 FD | 	jmp	#LR__0656
17148     60 00 90 FD | 	jmp	#LR__0657
1714c     B0 00 90 FD | 	jmp	#LR__0658
17150     04 01 90 FD | 	jmp	#LR__0659
17154     54 01 90 FD | 	jmp	#LR__0660
17158                 | LR__0656
17158     00 74 06 F6 | 	mov	arg01, #0
1715c     E8 19 B1 FD | 	call	#__system___getiolock_1205
17160     1A 75 02 F6 | 	mov	arg01, result1
17164     B8 E1 B0 FD | 	call	#__system___lockmem
17168     52 01 00 FF 
1716c     06 77 06 F6 | 	mov	arg02, ##@LR__2230
17170     00 74 06 F6 | 	mov	arg01, #0
17174     00 78 06 F6 | 	mov	arg03, #0
17178     38 E7 B0 FD | 	call	#__system___basic_print_string
1717c     00 74 06 F6 | 	mov	arg01, #0
17180     0A 76 06 F6 | 	mov	arg02, #10
17184     00 78 06 F6 | 	mov	arg03, #0
17188     DC E6 B0 FD | 	call	#__system___basic_print_char
1718c     00 74 06 F6 | 	mov	arg01, #0
17190     B4 19 B1 FD | 	call	#__system___getiolock_1205
17194     1A 01 68 FC | 	wrlong	#0, result1
17198     88 8C 06 F1 | 	add	local01, #136
1719c     46 75 02 F6 | 	mov	arg01, local01
171a0     46 77 02 F6 | 	mov	arg02, local01
171a4     60 F9 BE FD | 	call	#_motion_quartet_to_json
171a8                 | '         motion_quartet_to_json(&(page->quartet), page->quartet.name);
171a8                 | '         break;
171a8     00 01 90 FD | 	jmp	#LR__0660
171ac                 | LR__0657
171ac     00 74 06 F6 | 	mov	arg01, #0
171b0     94 19 B1 FD | 	call	#__system___getiolock_1205
171b4     1A 75 02 F6 | 	mov	arg01, result1
171b8     64 E1 B0 FD | 	call	#__system___lockmem
171bc     52 01 00 FF 
171c0     15 77 06 F6 | 	mov	arg02, ##@LR__2231
171c4     00 74 06 F6 | 	mov	arg01, #0
171c8     00 78 06 F6 | 	mov	arg03, #0
171cc     E4 E6 B0 FD | 	call	#__system___basic_print_string
171d0     00 74 06 F6 | 	mov	arg01, #0
171d4     0A 76 06 F6 | 	mov	arg02, #10
171d8     00 78 06 F6 | 	mov	arg03, #0
171dc     88 E6 B0 FD | 	call	#__system___basic_print_char
171e0     00 74 06 F6 | 	mov	arg01, #0
171e4     60 19 B1 FD | 	call	#__system___getiolock_1205
171e8     1A 01 68 FC | 	wrlong	#0, result1
171ec     EC 8C 06 F1 | 	add	local01, #236
171f0     46 75 02 F6 | 	mov	arg01, local01
171f4     46 77 02 F6 | 	mov	arg02, local01
171f8     34 F7 BE FD | 	call	#_motion_set_to_json
171fc                 | '         motion_set_to_json(&(page->set), page->set.name);
171fc                 | '         break;
171fc     AC 00 90 FD | 	jmp	#LR__0660
17200                 | LR__0658
17200     00 74 06 F6 | 	mov	arg01, #0
17204     40 19 B1 FD | 	call	#__system___getiolock_1205
17208     1A 75 02 F6 | 	mov	arg01, result1
1720c     10 E1 B0 FD | 	call	#__system___lockmem
17210     52 01 00 FF 
17214     20 77 06 F6 | 	mov	arg02, ##@LR__2232
17218     00 74 06 F6 | 	mov	arg01, #0
1721c     00 78 06 F6 | 	mov	arg03, #0
17220     90 E6 B0 FD | 	call	#__system___basic_print_string
17224     00 74 06 F6 | 	mov	arg01, #0
17228     0A 76 06 F6 | 	mov	arg02, #10
1722c     00 78 06 F6 | 	mov	arg03, #0
17230     34 E6 B0 FD | 	call	#__system___basic_print_char
17234     00 74 06 F6 | 	mov	arg01, #0
17238     0C 19 B1 FD | 	call	#__system___getiolock_1205
1723c     1A 01 68 FC | 	wrlong	#0, result1
17240     02 00 00 FF 
17244     20 8D 06 F1 | 	add	local01, ##1312
17248     46 75 02 F6 | 	mov	arg01, local01
1724c     46 77 02 F6 | 	mov	arg02, local01
17250     F4 F4 BE FD | 	call	#_motion_profile_to_json
17254                 | '         motion_profile_to_json(&(page->profile), page->profile.name);
17254                 | '         break;
17254     54 00 90 FD | 	jmp	#LR__0660
17258                 | LR__0659
17258     00 74 06 F6 | 	mov	arg01, #0
1725c     E8 18 B1 FD | 	call	#__system___getiolock_1205
17260     1A 75 02 F6 | 	mov	arg01, result1
17264     B8 E0 B0 FD | 	call	#__system___lockmem
17268     52 01 00 FF 
1726c     2E 77 06 F6 | 	mov	arg02, ##@LR__2233
17270     00 74 06 F6 | 	mov	arg01, #0
17274     00 78 06 F6 | 	mov	arg03, #0
17278     38 E6 B0 FD | 	call	#__system___basic_print_string
1727c     00 74 06 F6 | 	mov	arg01, #0
17280     0A 76 06 F6 | 	mov	arg02, #10
17284     00 78 06 F6 | 	mov	arg03, #0
17288     DC E5 B0 FD | 	call	#__system___basic_print_char
1728c     00 74 06 F6 | 	mov	arg01, #0
17290     B4 18 B1 FD | 	call	#__system___getiolock_1205
17294     1A 01 68 FC | 	wrlong	#0, result1
17298     22 00 00 FF 
1729c     68 8C 06 F1 | 	add	local01, ##17512
172a0     46 75 02 F6 | 	mov	arg01, local01
172a4     46 77 02 FB | 	rdlong	arg02, local01
172a8     14 F3 BE FD | 	call	#_test_profile_to_json
172ac                 | '         test_profile_to_json(&(page->test), page->test.name);
172ac                 | '         break;
172ac                 | LR__0660
172ac     A8 F0 03 F6 | 	mov	ptra, fp
172b0     B3 00 A0 FD | 	call	#popregs_
172b4                 | _button_save_1011_ret
172b4     2D 00 64 FD | 	ret
172b8                 | 
172b8                 | _update_filename_1013
172b8     02 4C 05 F6 | 	mov	COUNT_, #2
172bc     A9 00 A0 FD | 	call	#pushregs_
172c0     3B 8D 02 F6 | 	mov	local01, arg02
172c4     2F 76 06 F6 | 	mov	arg02, #47
172c8     FC ED BE FD | 	call	#_strrchr
172cc     01 34 06 F1 | 	add	result1, #1
172d0     1A 8F 02 F6 | 	mov	local02, result1
172d4     47 75 02 F6 | 	mov	arg01, local02
172d8     46 77 02 F6 | 	mov	arg02, local01
172dc     B8 DF B0 FD | 	call	#__system____builtin_strcpy
172e0     47 75 02 F6 | 	mov	arg01, local02
172e4     3C 77 02 F6 | 	mov	arg02, arg03
172e8     E8 EB BE FD | 	call	#_strcat
172ec     A8 F0 03 F6 | 	mov	ptra, fp
172f0     B3 00 A0 FD | 	call	#popregs_
172f4                 | _update_filename_1013_ret
172f4     2D 00 64 FD | 	ret
172f8                 | 
172f8                 | _button_quartet_1020
172f8     0B 4C 05 F6 | 	mov	COUNT_, #11
172fc     A9 00 A0 FD | 	call	#pushregs_
17300     3A 8D 02 F6 | 	mov	local01, arg01
17304     3B 8F 02 F6 | 	mov	local02, arg02
17308     00 74 06 F6 | 	mov	arg01, #0
1730c     38 18 B1 FD | 	call	#__system___getiolock_1205
17310     1A 75 02 F6 | 	mov	arg01, result1
17314     08 E0 B0 FD | 	call	#__system___lockmem
17318     00 90 06 F6 | 	mov	local03, #0
1731c     52 01 00 FF 
17320     3A 77 06 F6 | 	mov	arg02, ##@LR__2234
17324     00 74 06 F6 | 	mov	arg01, #0
17328     00 78 06 F6 | 	mov	arg03, #0
1732c     84 E5 B0 FD | 	call	#__system___basic_print_string
17330     1A 93 02 F6 | 	mov	local04, result1
17334     0A 94 06 F6 | 	mov	local05, #10
17338     00 74 06 F6 | 	mov	arg01, #0
1733c     46 77 02 F6 | 	mov	arg02, local01
17340     00 78 06 F6 | 	mov	arg03, #0
17344     0A 7A 06 F6 | 	mov	arg04, #10
17348     AC E5 B0 FD | 	call	#__system___basic_print_integer
1734c     1A 97 02 F6 | 	mov	local06, result1
17350     00 74 06 F6 | 	mov	arg01, #0
17354     0A 76 06 F6 | 	mov	arg02, #10
17358     00 78 06 F6 | 	mov	arg03, #0
1735c     08 E5 B0 FD | 	call	#__system___basic_print_char
17360     01 98 06 F6 | 	mov	local07, #1
17364     00 74 06 F6 | 	mov	arg01, #0
17368     DC 17 B1 FD | 	call	#__system___getiolock_1205
1736c     1A 01 68 FC | 	wrlong	#0, result1
17370     00 34 06 F6 | 	mov	result1, #0
17374     00 9A 06 F6 | 	mov	local08, #0
17378     47 9D 02 F6 | 	mov	local09, local02
1737c                 | '     TestProfilePage *page = (TestProfilePage *)arg;
1737c                 | '     switch (id)
1737c     46 9F 02 F6 | 	mov	local10, local01
17380     03 9E 26 F3 | 	fle	local10, #3
17384     30 9E 62 FD | 	jmprel	local10
17388                 | LR__0661
17388     0C 00 90 FD | 	jmp	#LR__0662
1738c     74 00 90 FD | 	jmp	#LR__0663
17390     70 01 90 FD | 	jmp	#LR__0666
17394     A4 01 90 FD | 	jmp	#LR__0667
17398                 | LR__0662
17398     04 9C 06 F1 | 	add	local09, #4
1739c     4E 75 02 FB | 	rdlong	arg01, local09
173a0     04 9C 06 F1 | 	add	local09, #4
173a4     4E 77 02 FB | 	rdlong	arg02, local09
173a8     08 9C 86 F1 | 	sub	local09, #8
173ac     74 29 BF FD | 	call	#_keyboard_create
173b0     1A 75 02 F6 | 	mov	arg01, result1
173b4     52 01 00 FF 
173b8     4D 77 06 F6 | 	mov	arg02, ##@LR__2235
173bc     AC 29 BF FD | 	call	#_keyboard_get_input
173c0     1A 9B 02 F6 | 	mov	local08, result1
173c4     52 01 00 FF 
173c8     5F 77 06 F6 | 	mov	arg02, ##@LR__2236
173cc     4D 75 02 F6 | 	mov	arg01, local08
173d0     C8 EB BE FD | 	call	#_strcmp
173d4     00 34 0E F2 | 	cmp	result1, #0 wz
173d8                 | '         {
173d8                 | '             return;
173d8     60 01 90 AD |  if_e	jmp	#LR__0669
173dc     88 9C 06 F1 | 	add	local09, #136
173e0     15 01 00 FF 
173e4     54 D7 05 F1 | 	add	ptr__dat__, ##142164
173e8     EB 78 02 FB | 	rdlong	arg03, ptr__dat__
173ec     15 01 00 FF 
173f0     54 D7 85 F1 | 	sub	ptr__dat__, ##142164
173f4     4E 75 02 F6 | 	mov	arg01, local09
173f8     4D 77 02 F6 | 	mov	arg02, local08
173fc     B8 FE BF FD | 	call	#_update_filename_1013
17400                 | '         }
17400                 | ' 
17400                 | '         update_filename(page->quartet.name, filename, extension[ 0 ]);
17400                 | ' 
17400                 | '         keyboard_destroy(keyboard);
17400                 | '         break;
17400     38 01 90 FD | 	jmp	#LR__0668
17404                 | LR__0663
17404     3D 00 00 FF 
17408     50 9D 06 F1 | 	add	local09, ##31568
1740c     4E 75 02 F6 | 	mov	arg01, local09
17410     3D 00 00 FF 
17414     4C 9D 86 F1 | 	sub	local09, ##31564
17418     4E 77 02 FB | 	rdlong	arg02, local09
1741c     04 9C 86 F1 | 	sub	local09, #4
17420     D4 7E BF FD | 	call	#_selection_init
17424     00 A0 06 F6 | 	mov	local11, #0
17428                 | '     {
17428                 | '         selection_init(&(page->selection), page->display);
17428                 | '         for (int i = 0; i <  2 ; i++)
17428                 | LR__0664
17428     02 A0 56 F2 | 	cmps	local11, #2 wc
1742c     B4 00 90 3D |  if_ae	jmp	#LR__0665
17430     3C 00 00 FF 
17434     A0 9D 06 F1 | 	add	local09, ##31136
17438     4E 75 02 F6 | 	mov	arg01, local09
1743c     50 77 02 F6 | 	mov	arg02, local11
17440     60 84 BF FD | 	call	#_get_function_info
17444     00 74 06 F6 | 	mov	arg01, #0
17448     FC 16 B1 FD | 	call	#__system___getiolock_1205
1744c     1A 75 02 F6 | 	mov	arg01, result1
17450     CC DE B0 FD | 	call	#__system___lockmem
17454     52 01 00 FF 
17458     61 77 06 F6 | 	mov	arg02, ##@LR__2237
1745c     00 74 06 F6 | 	mov	arg01, #0
17460     00 78 06 F6 | 	mov	arg03, #0
17464     4C E4 B0 FD | 	call	#__system___basic_print_string
17468     00 74 06 F6 | 	mov	arg01, #0
1746c     50 77 02 F6 | 	mov	arg02, local11
17470     00 78 06 F6 | 	mov	arg03, #0
17474     0A 7A 06 F6 | 	mov	arg04, #10
17478     7C E4 B0 FD | 	call	#__system___basic_print_integer
1747c     52 01 00 FF 
17480     6B 77 06 F6 | 	mov	arg02, ##@LR__2238
17484     00 74 06 F6 | 	mov	arg01, #0
17488     00 78 06 F6 | 	mov	arg03, #0
1748c     24 E4 B0 FD | 	call	#__system___basic_print_string
17490     04 9C 06 F1 | 	add	local09, #4
17494     4E 77 02 F6 | 	mov	arg02, local09
17498     00 74 06 F6 | 	mov	arg01, #0
1749c     00 78 06 F6 | 	mov	arg03, #0
174a0     10 E4 B0 FD | 	call	#__system___basic_print_string
174a4     00 74 06 F6 | 	mov	arg01, #0
174a8     0A 76 06 F6 | 	mov	arg02, #10
174ac     00 78 06 F6 | 	mov	arg03, #0
174b0     B4 E3 B0 FD | 	call	#__system___basic_print_char
174b4     00 74 06 F6 | 	mov	arg01, #0
174b8     8C 16 B1 FD | 	call	#__system___getiolock_1205
174bc     1A 01 68 FC | 	wrlong	#0, result1
174c0     AC 9D 06 F1 | 	add	local09, #428
174c4     4E 75 02 F6 | 	mov	arg01, local09
174c8     AC 9D 86 F1 | 	sub	local09, #428
174cc     4E 77 02 F6 | 	mov	arg02, local09
174d0     3C 00 00 FF 
174d4     A4 9D 86 F1 | 	sub	local09, ##31140
174d8     04 81 BF FD | 	call	#_selection_add_option
174dc     01 A0 06 F1 | 	add	local11, #1
174e0     44 FF 9F FD | 	jmp	#LR__0664
174e4                 | LR__0665
174e4     3D 00 00 FF 
174e8     50 9D 06 F1 | 	add	local09, ##31568
174ec     4E 75 02 F6 | 	mov	arg01, local09
174f0     24 82 BF FD | 	call	#_selection_run
174f4     3D 00 00 FF 
174f8     94 9C 86 F1 | 	sub	local09, ##31380
174fc     4E 35 62 FC | 	wrlong	result1, local09
17500                 | '             selection_add_option(&(page->selection), page->info.name);
17500                 | '         }
17500                 | '         page->quartet.function = selection_run(&(page->selection));
17500                 | '         break;
17500     38 00 90 FD | 	jmp	#LR__0668
17504                 | LR__0666
17504     04 9C 06 F1 | 	add	local09, #4
17508     4E 75 02 FB | 	rdlong	arg01, local09
1750c     04 9C 06 F1 | 	add	local09, #4
17510     4E 77 02 FB | 	rdlong	arg02, local09
17514     0C 28 BF FD | 	call	#_keyboard_create
17518     1A 75 02 F6 | 	mov	arg01, result1
1751c     52 01 00 FF 
17520     72 77 06 F6 | 	mov	arg02, ##@LR__2239
17524     44 28 BF FD | 	call	#_keyboard_get_input
17528     1A 75 02 F6 | 	mov	arg01, result1
1752c     3C A3 BF FD | 	call	#_atof
17530     E0 9C 06 F1 | 	add	local09, #224
17534     4E 35 62 FC | 	wrlong	result1, local09
17538                 | '         page->quartet.dwell = atof(dwell);
17538                 | '         keyboard_destroy(keyboard);
17538                 | '         break;
17538     00 00 90 FD | 	jmp	#LR__0668
1753c                 | LR__0667
1753c                 | '         break;
1753c                 | LR__0668
1753c                 | LR__0669
1753c     A8 F0 03 F6 | 	mov	ptra, fp
17540     B3 00 A0 FD | 	call	#popregs_
17544                 | _button_quartet_1020_ret
17544     2D 00 64 FD | 	ret
17548                 | 
17548                 | _button_quartet_parameters_1025
17548     02 4C 05 F6 | 	mov	COUNT_, #2
1754c     A9 00 A0 FD | 	call	#pushregs_
17550     34 F0 07 F1 | 	add	ptra, #52
17554     A8 74 62 FC | 	wrlong	arg01, fp
17558     04 50 05 F1 | 	add	fp, #4
1755c     A8 76 62 FC | 	wrlong	arg02, fp
17560     04 50 05 F1 | 	add	fp, #4
17564     A8 76 62 FC | 	wrlong	arg02, fp
17568     3C 00 00 FF 
1756c     A0 77 06 F1 | 	add	arg02, ##31136
17570     A8 74 02 FB | 	rdlong	arg01, fp
17574     08 50 85 F1 | 	sub	fp, #8
17578     BC 74 06 F1 | 	add	arg01, #188
1757c     3A 8D 02 FB | 	rdlong	local01, arg01
17580     3B 75 02 F6 | 	mov	arg01, arg02
17584     46 77 02 F6 | 	mov	arg02, local01
17588     18 83 BF FD | 	call	#_get_function_info
1758c     08 50 05 F1 | 	add	fp, #8
17590     A8 76 02 FB | 	rdlong	arg02, fp
17594     3B 8D 02 F6 | 	mov	local01, arg02
17598     04 8C 06 F1 | 	add	local01, #4
1759c     46 75 02 FB | 	rdlong	arg01, local01
175a0     08 50 85 F1 | 	sub	fp, #8
175a4     08 76 06 F1 | 	add	arg02, #8
175a8     3B 77 02 FB | 	rdlong	arg02, arg02
175ac     74 27 BF FD | 	call	#_keyboard_create
175b0     0C 50 05 F1 | 	add	fp, #12
175b4     A8 34 62 FC | 	wrlong	result1, fp
175b8     04 50 05 F1 | 	add	fp, #4
175bc     A8 74 02 F6 | 	mov	arg01, fp
175c0     08 50 85 F1 | 	sub	fp, #8
175c4     A8 8C 02 FB | 	rdlong	local01, fp
175c8     08 50 85 F1 | 	sub	fp, #8
175cc     A8 8E 02 FB | 	rdlong	local02, fp
175d0     47 77 02 F6 | 	mov	arg02, local02
175d4     02 76 66 F0 | 	shl	arg02, #2
175d8     47 77 02 F1 | 	add	arg02, local02
175dc     02 76 66 F0 | 	shl	arg02, #2
175e0     3C 00 00 FF 
175e4     C0 8D 06 F1 | 	add	local01, ##31168
175e8     46 77 02 F1 | 	add	arg02, local01
175ec     A8 DC B0 FD | 	call	#__system____builtin_strcpy
175f0     10 50 05 F1 | 	add	fp, #16
175f4     A8 74 02 F6 | 	mov	arg01, fp
175f8     10 50 85 F1 | 	sub	fp, #16
175fc     52 01 00 FF 
17600     7A 77 06 F6 | 	mov	arg02, ##@LR__2240
17604     CC E8 BE FD | 	call	#_strcat
17608     0C 50 05 F1 | 	add	fp, #12
1760c     A8 74 02 FB | 	rdlong	arg01, fp
17610     04 50 05 F1 | 	add	fp, #4
17614     A8 76 02 F6 | 	mov	arg02, fp
17618     10 50 85 F1 | 	sub	fp, #16
1761c     4C 27 BF FD | 	call	#_keyboard_get_input
17620     30 50 05 F1 | 	add	fp, #48
17624     A8 34 62 FC | 	wrlong	result1, fp
17628     28 50 85 F1 | 	sub	fp, #40
1762c     A8 8E 02 FB | 	rdlong	local02, fp
17630     08 50 85 F1 | 	sub	fp, #8
17634     A8 8C 02 FB | 	rdlong	local01, fp
17638     02 8C 66 F0 | 	shl	local01, #2
1763c     C0 8E 06 F1 | 	add	local02, #192
17640     47 8D 02 F1 | 	add	local01, local02
17644     1A 75 02 F6 | 	mov	arg01, result1
17648     20 A2 BF FD | 	call	#_atof
1764c     46 35 62 FC | 	wrlong	result1, local01
17650     0C 50 05 F1 | 	add	fp, #12
17654     0C 50 85 F1 | 	sub	fp, #12
17658     A8 F0 03 F6 | 	mov	ptra, fp
1765c     B3 00 A0 FD | 	call	#popregs_
17660                 | _button_quartet_parameters_1025_ret
17660     2D 00 64 FD | 	ret
17664                 | 
17664                 | _button_set_1035
17664     09 4C 05 F6 | 	mov	COUNT_, #9
17668     A9 00 A0 FD | 	call	#pushregs_
1766c     3A 8D 02 F6 | 	mov	local01, arg01
17670     3B 8F 02 F6 | 	mov	local02, arg02
17674     47 91 02 F6 | 	mov	local03, local02
17678                 | ' {
17678                 | '     TestProfilePage *page = (TestProfilePage *)arg;
17678                 | '     switch (id)
17678     46 93 02 F6 | 	mov	local04, local01
1767c     04 92 26 F3 | 	fle	local04, #4
17680     30 92 62 FD | 	jmprel	local04
17684                 | LR__0670
17684     10 00 90 FD | 	jmp	#LR__0671
17688     78 00 90 FD | 	jmp	#LR__0672
1768c     AC 00 90 FD | 	jmp	#LR__0673
17690     04 01 90 FD | 	jmp	#LR__0674
17694     48 01 90 FD | 	jmp	#LR__0675
17698                 | LR__0671
17698     04 90 06 F1 | 	add	local03, #4
1769c     48 75 02 FB | 	rdlong	arg01, local03
176a0     04 90 06 F1 | 	add	local03, #4
176a4     48 77 02 FB | 	rdlong	arg02, local03
176a8     08 90 86 F1 | 	sub	local03, #8
176ac     74 26 BF FD | 	call	#_keyboard_create
176b0     1A 75 02 F6 | 	mov	arg01, result1
176b4     52 01 00 FF 
176b8     7D 77 06 F6 | 	mov	arg02, ##@LR__2241
176bc     AC 26 BF FD | 	call	#_keyboard_get_input
176c0     1A 93 02 F6 | 	mov	local04, result1
176c4     52 01 00 FF 
176c8     8F 77 06 F6 | 	mov	arg02, ##@LR__2242
176cc     49 75 02 F6 | 	mov	arg01, local04
176d0     C8 E8 BE FD | 	call	#_strcmp
176d4     00 34 0E F2 | 	cmp	result1, #0 wz
176d8                 | '         {
176d8                 | '             return;
176d8     04 01 90 AD |  if_e	jmp	#LR__0676
176dc     EC 90 06 F1 | 	add	local03, #236
176e0     15 01 00 FF 
176e4     58 D7 05 F1 | 	add	ptr__dat__, ##142168
176e8     EB 78 02 FB | 	rdlong	arg03, ptr__dat__
176ec     15 01 00 FF 
176f0     58 D7 85 F1 | 	sub	ptr__dat__, ##142168
176f4     48 75 02 F6 | 	mov	arg01, local03
176f8     49 77 02 F6 | 	mov	arg02, local04
176fc     B8 FB BF FD | 	call	#_update_filename_1013
17700                 | '         }
17700                 | ' 
17700                 | '         update_filename(page->set.name, filename, extension[ 1 ]);
17700                 | '         break;
17700     DC 00 90 FD | 	jmp	#LR__0675
17704                 | LR__0672
17704     04 90 06 F1 | 	add	local03, #4
17708     48 75 02 FB | 	rdlong	arg01, local03
1770c     04 90 06 F1 | 	add	local03, #4
17710     48 77 02 FB | 	rdlong	arg02, local03
17714     0C 26 BF FD | 	call	#_keyboard_create
17718     1A 75 02 F6 | 	mov	arg01, result1
1771c     52 01 00 FF 
17720     91 77 06 F6 | 	mov	arg02, ##@LR__2243
17724     44 26 BF FD | 	call	#_keyboard_get_input
17728     1A 75 02 F6 | 	mov	arg01, result1
1772c                 | ' {
1772c                 | '   return (int)atol(str);
1772c     D4 A9 BE FD | 	call	#_atol
17730     18 91 06 F1 | 	add	local03, #280
17734     48 35 62 FC | 	wrlong	result1, local03
17738                 | '         page->set.number = atoi(number);
17738                 | '         break;
17738     A4 00 90 FD | 	jmp	#LR__0675
1773c                 | LR__0673
1773c     04 90 06 F1 | 	add	local03, #4
17740     48 75 02 FB | 	rdlong	arg01, local03
17744     04 90 06 F1 | 	add	local03, #4
17748     48 77 02 FB | 	rdlong	arg02, local03
1774c     08 90 86 F1 | 	sub	local03, #8
17750     D0 25 BF FD | 	call	#_keyboard_create
17754     1A 75 02 F6 | 	mov	arg01, result1
17758     52 01 00 FF 
1775c     9A 77 06 F6 | 	mov	arg02, ##@LR__2244
17760     08 26 BF FD | 	call	#_keyboard_get_input
17764     1A 79 02 F6 | 	mov	arg03, result1
17768     52 01 00 FF 
1776c     AC 77 06 F6 | 	mov	arg02, ##@LR__2245
17770     3C 75 02 F6 | 	mov	arg01, arg03
17774     24 E8 BE FD | 	call	#_strcmp
17778     00 34 0E F2 | 	cmp	result1, #0 wz
1777c                 | '         {
1777c                 | '             return;
1777c     60 00 90 AD |  if_e	jmp	#LR__0676
17780     24 91 06 F1 | 	add	local03, #292
17784     48 75 02 F6 | 	mov	arg01, local03
17788     3C 77 02 F6 | 	mov	arg02, arg03
1778c     0A 78 06 F6 | 	mov	arg03, #10
17790     E8 E6 BE FD | 	call	#_strncpy
17794                 | '         }
17794                 | '         strncpy(page->set.type, type,  10 );
17794                 | '         break;
17794     48 00 90 FD | 	jmp	#LR__0675
17798                 | LR__0674
17798     04 90 06 F1 | 	add	local03, #4
1779c     48 75 02 FB | 	rdlong	arg01, local03
177a0     04 90 06 F1 | 	add	local03, #4
177a4     48 77 02 FB | 	rdlong	arg02, local03
177a8     78 25 BF FD | 	call	#_keyboard_create
177ac     1A 95 02 F6 | 	mov	local05, result1
177b0     52 01 00 FF 
177b4     AE 97 06 F6 | 	mov	local06, ##@LR__2246
177b8     4B 99 02 F6 | 	mov	local07, local06
177bc     4A 75 02 F6 | 	mov	arg01, local05
177c0     4C 77 02 F6 | 	mov	arg02, local07
177c4     A4 25 BF FD | 	call	#_keyboard_get_input
177c8     1A 9B 02 F6 | 	mov	local08, result1
177cc     4D 75 02 F6 | 	mov	arg01, local08
177d0                 | ' {
177d0                 | '   return (int)atol(str);
177d0     30 A9 BE FD | 	call	#_atol
177d4     1A 9D 02 F6 | 	mov	local09, result1
177d8     28 91 06 F1 | 	add	local03, #296
177dc     48 9D 62 FC | 	wrlong	local09, local03
177e0                 | '         page->set.executions = atoi(executions);
177e0                 | '         break;
177e0                 | LR__0675
177e0                 | LR__0676
177e0     A8 F0 03 F6 | 	mov	ptra, fp
177e4     B3 00 A0 FD | 	call	#popregs_
177e8                 | _button_set_1035_ret
177e8     2D 00 64 FD | 	ret
177ec                 | 
177ec                 | _button_set_add
177ec     02 4C 05 F6 | 	mov	COUNT_, #2
177f0     A9 00 A0 FD | 	call	#pushregs_
177f4     3B 8D 02 F6 | 	mov	local01, arg02
177f8     04 8C 06 F1 | 	add	local01, #4
177fc     46 75 02 FB | 	rdlong	arg01, local01
17800     04 8C 86 F1 | 	sub	local01, #4
17804     52 01 00 FF 
17808     BB 7D 06 F6 | 	mov	arg05, ##@LR__2247
1780c     64 76 06 F6 | 	mov	arg02, #100
17810     64 78 06 F6 | 	mov	arg03, #100
17814     00 7A 06 F6 | 	mov	arg04, #0
17818     C8 6B BF FD | 	call	#_explorer_create
1781c     1A 75 02 F6 | 	mov	arg01, result1
17820     3C 6C BF FD | 	call	#_explorer_run
17824     1A 8F 02 F6 | 	mov	local02, result1
17828     52 01 00 FF 
1782c     BF 77 06 F6 | 	mov	arg02, ##@LR__2248
17830     47 75 02 F6 | 	mov	arg01, local02
17834     64 E7 BE FD | 	call	#_strcmp
17838     00 34 0E F2 | 	cmp	result1, #0 wz
1783c                 | '     {
1783c                 | '         return;
1783c     30 00 90 AD |  if_e	jmp	#LR__0677
17840     34 8D 06 F1 | 	add	local01, #308
17844     46 35 02 FB | 	rdlong	result1, local01
17848     64 34 06 FD | 	qmul	result1, #100
1784c     04 8C 06 F1 | 	add	local01, #4
17850     47 75 02 F6 | 	mov	arg01, local02
17854     18 76 62 FD | 	getqx	arg02
17858     46 77 02 F1 | 	add	arg02, local01
1785c     4C 07 BF FD | 	call	#_json_to_motion_quartet
17860     04 8C 86 F1 | 	sub	local01, #4
17864     46 8F 02 FB | 	rdlong	local02, local01
17868     01 8E 06 F1 | 	add	local02, #1
1786c     46 8F 62 FC | 	wrlong	local02, local01
17870                 | LR__0677
17870     A8 F0 03 F6 | 	mov	ptra, fp
17874     B3 00 A0 FD | 	call	#popregs_
17878                 | _button_set_add_ret
17878     2D 00 64 FD | 	ret
1787c                 | 
1787c                 | _button_set_remove
1787c     02 4C 05 F6 | 	mov	COUNT_, #2
17880     A9 00 A0 FD | 	call	#pushregs_
17884     64 74 06 FD | 	qmul	arg01, #100
17888     3B 8D 02 F6 | 	mov	local01, arg02
1788c     3A 79 02 F6 | 	mov	arg03, arg01
17890     01 78 06 F1 | 	add	arg03, #1
17894     18 8E 62 FD | 	getqx	local02
17898     64 78 06 FD | 	qmul	arg03, #100
1789c     38 8D 06 F1 | 	add	local01, #312
178a0     46 8F 02 F1 | 	add	local02, local01
178a4     18 76 62 FD | 	getqx	arg02
178a8     46 77 02 F1 | 	add	arg02, local01
178ac     04 8C 86 F1 | 	sub	local01, #4
178b0     46 79 02 FB | 	rdlong	arg03, local01
178b4     3A 79 82 F1 | 	sub	arg03, arg01
178b8     01 78 86 F1 | 	sub	arg03, #1
178bc     64 78 06 FD | 	qmul	arg03, #100
178c0     47 75 02 F6 | 	mov	arg01, local02
178c4     18 78 62 FD | 	getqx	arg03
178c8     3C D9 B0 FD | 	call	#__system____builtin_memmove
178cc     46 8F 02 FB | 	rdlong	local02, local01
178d0     01 8E 86 F1 | 	sub	local02, #1
178d4     46 8F 62 FC | 	wrlong	local02, local01
178d8     A8 F0 03 F6 | 	mov	ptra, fp
178dc     B3 00 A0 FD | 	call	#popregs_
178e0                 | _button_set_remove_ret
178e0     2D 00 64 FD | 	ret
178e4                 | 
178e4                 | ___default_filbuf
178e4     04 4C 05 F6 | 	mov	COUNT_, #4
178e8     A9 00 A0 FD | 	call	#pushregs_
178ec     3A 8D 02 FB | 	rdlong	local01, arg01
178f0     10 74 06 F1 | 	add	arg01, #16
178f4     3A 79 02 FB | 	rdlong	arg03, arg01
178f8     10 74 86 F1 | 	sub	arg01, #16
178fc     3C 8F 02 FB | 	rdlong	local02, arg03
17900     04 78 06 F1 | 	add	arg03, #4
17904     3C 91 02 FB | 	rdlong	local03, arg03
17908     0C 8C 06 F1 | 	add	local01, #12
1790c     46 77 02 F6 | 	mov	arg02, local01
17910     0C 8C 86 F1 | 	sub	local01, #12
17914     0A 78 C6 F9 | 	decod	arg03, #10
17918     C9 92 02 F6 | 	mov	local04, objptr
1791c     47 93 01 F6 | 	mov	objptr, local02
17920     2D 90 62 FD | 	call	local03
17924     49 93 01 F6 | 	mov	objptr, local04
17928     1A 93 02 F6 | 	mov	local04, result1
1792c     00 92 56 F2 | 	cmps	local04, #0 wc
17930                 | '         return -1;
17930     01 34 66 C6 |  if_b	neg	result1, #1
17934     28 00 90 CD |  if_b	jmp	#LR__0678
17938     46 93 62 FC | 	wrlong	local04, local01
1793c     0C 8C 06 F1 | 	add	local01, #12
17940     46 91 02 F6 | 	mov	local03, local01
17944     08 8C 86 F1 | 	sub	local01, #8
17948     46 91 62 FC | 	wrlong	local03, local01
1794c     04 8C 06 F1 | 	add	local01, #4
17950     46 91 02 FB | 	rdlong	local03, local01
17954     01 90 46 F5 | 	or	local03, #1
17958     46 91 62 FC | 	wrlong	local03, local01
1795c                 | '     }
1795c                 | '     b->cnt = r;
1795c                 | '     b->ptr = &b->buf[0];
1795c                 | '     b->flags |=  (0x01) ;
1795c                 | '     return r;
1795c     49 35 02 F6 | 	mov	result1, local04
17960                 | LR__0678
17960     A8 F0 03 F6 | 	mov	ptra, fp
17964     B3 00 A0 FD | 	call	#popregs_
17968                 | ___default_filbuf_ret
17968     2D 00 64 FD | 	ret
1796c                 | 
1796c                 | ___root_opendir
1796c     15 01 00 FF 
17970     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17974     04 74 06 F1 | 	add	arg01, #4
17978     3A D7 61 FC | 	wrlong	ptr__dat__, arg01
1797c                 | ' {
1797c                 | '     dir->vfsdata = &mounttab[0];
1797c                 | '     return 0;
1797c     00 34 06 F6 | 	mov	result1, #0
17980     15 01 00 FF 
17984     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17988                 | ___root_opendir_ret
17988     2D 00 64 FD | 	ret
1798c                 | 
1798c                 | ___root_readdir
1798c     03 4C 05 F6 | 	mov	COUNT_, #3
17990     A9 00 A0 FD | 	call	#pushregs_
17994     3A 8D 02 F6 | 	mov	local01, arg01
17998     3B 8F 02 F6 | 	mov	local02, arg02
1799c     04 8C 06 F1 | 	add	local01, #4
179a0     46 91 02 FB | 	rdlong	local03, local01
179a4     04 8C 86 F1 | 	sub	local01, #4
179a8                 | LR__0679
179a8     15 01 00 FF 
179ac     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
179b0     EB 90 0A F2 | 	cmp	local03, ptr__dat__ wz
179b4                 | ' 
179b4                 | '         return -1;
179b4     15 01 00 FF 
179b8     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
179bc     01 34 66 A6 |  if_e	neg	result1, #1
179c0     48 00 90 AD |  if_e	jmp	#LR__0680
179c4     48 79 0A FB | 	rdlong	arg03, local03 wz
179c8     04 90 06 A1 |  if_e	add	local03, #4
179cc                 | '         ptr++;
179cc                 | '         goto again;
179cc     D8 FF 9F AD |  if_e	jmp	#LR__0679
179d0     48 77 02 FB | 	rdlong	arg02, local03
179d4     01 76 06 F1 | 	add	arg02, #1
179d8     47 75 02 F6 | 	mov	arg01, local02
179dc     40 78 06 F6 | 	mov	arg03, #64
179e0     98 E4 BE FD | 	call	#_strncpy
179e4     50 8E 06 F1 | 	add	local02, #80
179e8     47 03 48 FC | 	wrbyte	#1, local02
179ec     08 8E 86 F1 | 	sub	local02, #8
179f0     47 01 68 FC | 	wrlong	#0, local02
179f4     04 8E 06 F1 | 	add	local02, #4
179f8     47 01 68 FC | 	wrlong	#0, local02
179fc     04 90 06 F1 | 	add	local03, #4
17a00     04 8C 06 F1 | 	add	local01, #4
17a04     46 91 62 FC | 	wrlong	local03, local01
17a08                 | '     }
17a08                 | '     strncpy(ent->d_name, (*ptr)+1,  (64) );
17a08                 | '     ent->d_type =  (1) ;
17a08                 | '     ent->d_size = 0;
17a08                 | '     ent->d_mtime = 0;
17a08                 | '     dir->vfsdata = ++ptr;
17a08                 | '     return 0;
17a08     00 34 06 F6 | 	mov	result1, #0
17a0c                 | LR__0680
17a0c     A8 F0 03 F6 | 	mov	ptra, fp
17a10     B3 00 A0 FD | 	call	#popregs_
17a14                 | ___root_readdir_ret
17a14     2D 00 64 FD | 	ret
17a18                 | 
17a18                 | ___root_closedir
17a18                 | '     return 0;
17a18     00 34 06 F6 | 	mov	result1, #0
17a1c                 | ___root_closedir_ret
17a1c     2D 00 64 FD | 	ret
17a20                 | 
17a20                 | ___root_stat
17a20     01 4C 05 F6 | 	mov	COUNT_, #1
17a24     A9 00 A0 FD | 	call	#pushregs_
17a28     3B 8D 02 F6 | 	mov	local01, arg02
17a2c     46 75 02 F6 | 	mov	arg01, local01
17a30     00 76 06 F6 | 	mov	arg02, #0
17a34     30 78 06 F6 | 	mov	arg03, #48
17a38     99 00 A0 FD | 	call	#\builtin_bytefill_
17a3c     08 8C 06 F1 | 	add	local01, #8
17a40     08 00 80 FF 
17a44     46 FF 6B FC | 	wrlong	##4607, local01
17a48                 | '     buf->st_mode =  0010000  | 0777;
17a48                 | '     return 0;
17a48     00 34 06 F6 | 	mov	result1, #0
17a4c     A8 F0 03 F6 | 	mov	ptra, fp
17a50     B3 00 A0 FD | 	call	#popregs_
17a54                 | ___root_stat_ret
17a54     2D 00 64 FD | 	ret
17a58                 | 
17a58                 | ___getvfsforfile
17a58     13 4C 05 F6 | 	mov	COUNT_, #19
17a5c     A9 00 A0 FD | 	call	#pushregs_
17a60     3A 8D 02 F6 | 	mov	local01, arg01
17a64     3B 8F 02 F6 | 	mov	local02, arg02
17a68     3C 91 02 F6 | 	mov	local03, arg03
17a6c     B4 85 9E FE | 	loc	pa,	#(@LR__0682-@LR__0681)
17a70     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17a74                 | ' 
17a74                 | '     while (orig_name[0] == '/' && orig_name[1] == '/') {
17a74                 | LR__0681
17a74     47 35 C2 FA | 	rdbyte	result1, local02
17a78     2F 34 0E F2 | 	cmp	result1, #47 wz
17a7c     18 00 90 5D |  if_ne	jmp	#LR__0683
17a80     01 8E 06 F1 | 	add	local02, #1
17a84     47 35 C2 FA | 	rdbyte	result1, local02
17a88     01 8E 86 F1 | 	sub	local02, #1
17a8c     2F 34 0E F2 | 	cmp	result1, #47 wz
17a90     01 8E 06 A1 |  if_e	add	local02, #1
17a94     DC FF 9F AD |  if_e	jmp	#LR__0681
17a98                 | LR__0682
17a98                 | LR__0683
17a98     47 79 C2 FA | 	rdbyte	arg03, local02
17a9c     2F 78 0E F2 | 	cmp	arg03, #47 wz
17aa0     14 00 90 5D |  if_ne	jmp	#LR__0684
17aa4     46 75 02 F6 | 	mov	arg01, local01
17aa8     47 77 02 F6 | 	mov	arg02, local02
17aac     00 79 06 F6 | 	mov	arg03, #256
17ab0     C8 E3 BE FD | 	call	#_strncpy
17ab4     94 00 90 FD | 	jmp	#LR__0689
17ab8                 | LR__0684
17ab8     15 01 00 FF 
17abc     F4 D7 05 F1 | 	add	ptr__dat__, ##142324
17ac0     EB 76 02 F6 | 	mov	arg02, ptr__dat__
17ac4     15 01 00 FF 
17ac8     F4 D7 85 F1 | 	sub	ptr__dat__, ##142324
17acc     46 75 02 F6 | 	mov	arg01, local01
17ad0     00 79 06 F6 | 	mov	arg03, #256
17ad4     A4 E3 BE FD | 	call	#_strncpy
17ad8     47 93 CA FA | 	rdbyte	local04, local02 wz
17adc     6C 00 90 AD |  if_e	jmp	#LR__0688
17ae0     47 95 C2 FA | 	rdbyte	local05, local02
17ae4     2E 94 0E F2 | 	cmp	local05, #46 wz
17ae8     18 00 90 5D |  if_ne	jmp	#LR__0685
17aec     01 8E 06 F1 | 	add	local02, #1
17af0     47 97 C2 FA | 	rdbyte	local06, local02
17af4     01 8E 86 F1 | 	sub	local02, #1
17af8     4B 99 02 F6 | 	mov	local07, local06
17afc     07 98 4E F7 | 	zerox	local07, #7 wz
17b00     48 00 90 AD |  if_e	jmp	#LR__0688
17b04                 | LR__0685
17b04     46 93 C2 FA | 	rdbyte	local04, local01
17b08     2F 92 0E F2 | 	cmp	local04, #47 wz
17b0c     18 00 90 5D |  if_ne	jmp	#LR__0686
17b10     01 8C 06 F1 | 	add	local01, #1
17b14     46 99 C2 FA | 	rdbyte	local07, local01
17b18     01 8C 86 F1 | 	sub	local01, #1
17b1c     4C 95 02 F6 | 	mov	local05, local07
17b20     07 94 4E F7 | 	zerox	local05, #7 wz
17b24     14 00 90 AD |  if_e	jmp	#LR__0687
17b28                 | LR__0686
17b28     52 01 00 FF 
17b2c     C1 77 06 F6 | 	mov	arg02, ##@LR__2249
17b30     46 75 02 F6 | 	mov	arg01, local01
17b34     00 79 06 F6 | 	mov	arg03, #256
17b38     D8 E3 BE FD | 	call	#_strncat
17b3c                 | LR__0687
17b3c     46 75 02 F6 | 	mov	arg01, local01
17b40     47 77 02 F6 | 	mov	arg02, local02
17b44     00 79 06 F6 | 	mov	arg03, #256
17b48     C8 E3 BE FD | 	call	#_strncat
17b4c                 | LR__0688
17b4c                 | LR__0689
17b4c     46 93 CA FA | 	rdbyte	local04, local01 wz
17b50     20 00 90 AD |  if_e	jmp	#LR__0690
17b54     46 95 C2 FA | 	rdbyte	local05, local01
17b58     2F 94 0E F2 | 	cmp	local05, #47 wz
17b5c     2C 00 90 5D |  if_ne	jmp	#LR__0691
17b60     01 8C 06 F1 | 	add	local01, #1
17b64     46 99 C2 FA | 	rdbyte	local07, local01
17b68     01 8C 86 F1 | 	sub	local01, #1
17b6c     07 98 4E F7 | 	zerox	local07, #7 wz
17b70     18 00 90 5D |  if_ne	jmp	#LR__0691
17b74                 | LR__0690
17b74                 | '         return &__rootvfs;
17b74     16 01 00 FF 
17b78     F4 D7 05 F1 | 	add	ptr__dat__, ##142836
17b7c     EB 34 02 F6 | 	mov	result1, ptr__dat__
17b80     16 01 00 FF 
17b84     F4 D7 85 F1 | 	sub	ptr__dat__, ##142836
17b88     4C 02 90 FD | 	jmp	#LR__0706
17b8c                 | LR__0691
17b8c                 | '     }
17b8c                 | '     for (i = 0; i <  4 ; i++) {
17b8c     00 9A 06 F6 | 	mov	local08, #0
17b90                 | LR__0692
17b90     04 9A 56 F2 | 	cmps	local08, #4 wc
17b94     2C 02 90 3D |  if_ae	jmp	#LR__0705
17b98     4D 93 02 F6 | 	mov	local04, local08
17b9c     02 92 66 F0 | 	shl	local04, #2
17ba0     15 01 00 FF 
17ba4     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17ba8     EB 92 02 F1 | 	add	local04, ptr__dat__
17bac     49 99 0A FB | 	rdlong	local07, local04 wz
17bb0     15 01 00 FF 
17bb4     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17bb8     00 02 90 AD |  if_e	jmp	#LR__0704
17bbc     4D 95 02 F6 | 	mov	local05, local08
17bc0     02 94 66 F0 | 	shl	local05, #2
17bc4     15 01 00 FF 
17bc8     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17bcc     EB 94 02 F1 | 	add	local05, ptr__dat__
17bd0     4A 75 02 FB | 	rdlong	arg01, local05
17bd4     15 01 00 FF 
17bd8     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17bdc     00 9C 06 F6 | 	mov	local09, #0
17be0     2C 84 9E FE | 	loc	pa,	#(@LR__0694-@LR__0693)
17be4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17be8                 | LR__0693
17be8     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17bec     01 9C 06 51 |  if_ne	add	local09, #1
17bf0     01 74 06 51 |  if_ne	add	arg01, #1
17bf4     F0 FF 9F 5D |  if_ne	jmp	#LR__0693
17bf8                 | LR__0694
17bf8     4E 9F 02 F6 | 	mov	local10, local09
17bfc     4F 95 02 F6 | 	mov	local05, local10
17c00     46 95 02 F1 | 	add	local05, local01
17c04     4A 93 C2 FA | 	rdbyte	local04, local05
17c08     2F 92 0E F2 | 	cmp	local04, #47 wz
17c0c     4F A1 02 56 |  if_ne	mov	local11, local10
17c10     46 A3 02 56 |  if_ne	mov	local12, local01
17c14     51 A1 02 51 |  if_ne	add	local11, local12
17c18     50 97 CA 5A |  if_ne	rdbyte	local06, local11 wz
17c1c     9C 01 90 5D |  if_ne	jmp	#LR__0703
17c20     4D 99 02 F6 | 	mov	local07, local08
17c24     02 98 66 F0 | 	shl	local07, #2
17c28     15 01 00 FF 
17c2c     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17c30     EB A4 02 F6 | 	mov	local13, ptr__dat__
17c34     EB 98 02 F1 | 	add	local07, ptr__dat__
17c38     4C A7 02 FB | 	rdlong	local14, local07
17c3c     4F A9 02 F6 | 	mov	local15, local10
17c40     46 75 02 F6 | 	mov	arg01, local01
17c44     53 77 02 F6 | 	mov	arg02, local14
17c48     54 79 02 F6 | 	mov	arg03, local15
17c4c     15 01 00 FF 
17c50     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17c54     C8 E3 BE FD | 	call	#_strncmp
17c58     1A AB 0A F6 | 	mov	local16, result1 wz
17c5c     5C 01 90 5D |  if_ne	jmp	#LR__0703
17c60     4D 93 02 F6 | 	mov	local04, local08
17c64     02 92 66 F0 | 	shl	local04, #2
17c68     15 01 00 FF 
17c6c     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
17c70     EB 92 02 F1 | 	add	local04, ptr__dat__
17c74     49 AD 02 FB | 	rdlong	local17, local04
17c78                 | ' 
17c78                 | '             while (name[len+1] == '.' && (name[len+2] == '/' || name[len+2] == 0)) {
17c78     15 01 00 FF 
17c7c     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
17c80     E0 83 9E FE | 	loc	pa,	#(@LR__0697-@LR__0695)
17c84     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17c88                 | LR__0695
17c88     4F 95 02 F6 | 	mov	local05, local10
17c8c     01 94 06 F1 | 	add	local05, #1
17c90     4A 99 02 F6 | 	mov	local07, local05
17c94     46 97 02 F6 | 	mov	local06, local01
17c98     46 99 02 F1 | 	add	local07, local01
17c9c     4C 93 C2 FA | 	rdbyte	local04, local07
17ca0     2E 92 0E F2 | 	cmp	local04, #46 wz
17ca4     44 00 90 5D |  if_ne	jmp	#LR__0698
17ca8     4F A3 02 F6 | 	mov	local12, local10
17cac     02 A2 06 F1 | 	add	local12, #2
17cb0     51 AB 02 F6 | 	mov	local16, local12
17cb4     46 A7 02 F6 | 	mov	local14, local01
17cb8     46 AB 02 F1 | 	add	local16, local01
17cbc     55 A1 C2 FA | 	rdbyte	local11, local16
17cc0     2F A0 0E F2 | 	cmp	local11, #47 wz
17cc4     1C 00 90 AD |  if_e	jmp	#LR__0696
17cc8     4F A5 02 F6 | 	mov	local13, local10
17ccc     02 A4 06 F1 | 	add	local13, #2
17cd0     52 AF 02 F6 | 	mov	local18, local13
17cd4     46 B1 02 F6 | 	mov	local19, local01
17cd8     46 AF 02 F1 | 	add	local18, local01
17cdc     57 A9 CA FA | 	rdbyte	local15, local18 wz
17ce0     08 00 90 5D |  if_ne	jmp	#LR__0698
17ce4                 | LR__0696
17ce4     01 9E 06 F1 | 	add	local10, #1
17ce8     9C FF 9F FD | 	jmp	#LR__0695
17cec                 | LR__0697
17cec                 | LR__0698
17cec     00 90 0E F2 | 	cmp	local03, #0 wz
17cf0     48 75 02 56 |  if_ne	mov	arg01, local03
17cf4     46 77 02 56 |  if_ne	mov	arg02, local01
17cf8     00 79 06 56 |  if_ne	mov	arg03, #256
17cfc     7C E1 BE 5D |  if_ne	call	#_strncpy
17d00     46 77 02 F6 | 	mov	arg02, local01
17d04     4F 77 02 F1 | 	add	arg02, local10
17d08     01 76 06 F1 | 	add	arg02, #1
17d0c     46 75 02 F6 | 	mov	arg01, local01
17d10     84 D5 B0 FD | 	call	#__system____builtin_strcpy
17d14     46 75 02 F6 | 	mov	arg01, local01
17d18     00 9C 06 F6 | 	mov	local09, #0
17d1c     F0 82 9E FE | 	loc	pa,	#(@LR__0700-@LR__0699)
17d20     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17d24                 | LR__0699
17d24     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17d28     01 9C 06 51 |  if_ne	add	local09, #1
17d2c     01 74 06 51 |  if_ne	add	arg01, #1
17d30     F0 FF 9F 5D |  if_ne	jmp	#LR__0699
17d34                 | LR__0700
17d34     4E 35 02 F6 | 	mov	result1, local09
17d38     1A 9F 02 F6 | 	mov	local10, result1
17d3c                 | '                 strncpy(full_path, name,  (256) );
17d3c                 | '             }
17d3c                 | '             __builtin_strcpy(name, name+len+1) ;
17d3c                 | ' 
17d3c                 | '             len =  __builtin_strlen(name) ;
17d3c                 | '             while ( len > 0 ) {
17d3c                 | LR__0701
17d3c     01 9E 56 F2 | 	cmps	local10, #1 wc
17d40     70 00 90 CD |  if_b	jmp	#LR__0702
17d44     4F 95 02 F6 | 	mov	local05, local10
17d48     46 95 02 F1 | 	add	local05, local01
17d4c     4A 93 C2 FA | 	rdbyte	local04, local05
17d50     2F 92 0E F2 | 	cmp	local04, #47 wz
17d54     4F 93 02 A6 |  if_e	mov	local04, local10
17d58     46 93 02 A1 |  if_e	add	local04, local01
17d5c     49 01 48 AC |  if_e	wrbyte	#0, local04
17d60     01 9E 86 A1 |  if_e	sub	local10, #1
17d64     D4 FF 9F AD |  if_e	jmp	#LR__0701
17d68     4F 95 02 F6 | 	mov	local05, local10
17d6c     46 95 02 F1 | 	add	local05, local01
17d70     4A 93 C2 FA | 	rdbyte	local04, local05
17d74     2E 92 0E F2 | 	cmp	local04, #46 wz
17d78     38 00 90 5D |  if_ne	jmp	#LR__0702
17d7c     02 9E 56 F2 | 	cmps	local10, #2 wc
17d80     30 00 90 CD |  if_b	jmp	#LR__0702
17d84     4F A3 02 F6 | 	mov	local12, local10
17d88     01 A2 86 F1 | 	sub	local12, #1
17d8c     46 A3 02 F1 | 	add	local12, local01
17d90     51 97 C2 FA | 	rdbyte	local06, local12
17d94     2F 96 0E F2 | 	cmp	local06, #47 wz
17d98     18 00 90 5D |  if_ne	jmp	#LR__0702
17d9c     4F 95 02 F6 | 	mov	local05, local10
17da0     01 94 86 F1 | 	sub	local05, #1
17da4     46 95 02 F1 | 	add	local05, local01
17da8     4A 01 48 FC | 	wrbyte	#0, local05
17dac     02 9E 86 F1 | 	sub	local10, #2
17db0     88 FF 9F FD | 	jmp	#LR__0701
17db4                 | '                     break;
17db4                 | LR__0702
17db4                 | '                 }
17db4                 | '             }
17db4                 | ' #line 137 "C:/flexprop/include/libc/unix/_mount.c"
17db4                 | '             return v;
17db4     56 35 02 F6 | 	mov	result1, local17
17db8     1C 00 90 FD | 	jmp	#LR__0706
17dbc                 | LR__0703
17dbc                 | LR__0704
17dbc     01 9A 06 F1 | 	add	local08, #1
17dc0     CC FD 9F FD | 	jmp	#LR__0692
17dc4                 | LR__0705
17dc4     01 00 00 FF 
17dc8     EC A2 05 F1 | 	add	ptr___system__dat__, ##748
17dcc     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
17dd0     01 00 00 FF 
17dd4     EC A2 85 F1 | 	sub	ptr___system__dat__, ##748
17dd8                 | '         }
17dd8                 | '     }
17dd8                 | '     v = _getrootvfs();
17dd8                 | ' #line 144 "C:/flexprop/include/libc/unix/_mount.c"
17dd8                 | '     return v;
17dd8                 | LR__0706
17dd8     A8 F0 03 F6 | 	mov	ptra, fp
17ddc     B3 00 A0 FD | 	call	#popregs_
17de0                 | ___getvfsforfile_ret
17de0     2D 00 64 FD | 	ret
17de4                 | 
17de4                 | __mount
17de4     12 4C 05 F6 | 	mov	COUNT_, #18
17de8     A9 00 A0 FD | 	call	#pushregs_
17dec     3A 8D 02 F6 | 	mov	local01, arg01
17df0     3B 8F 02 F6 | 	mov	local02, arg02
17df4     01 90 66 F6 | 	neg	local03, #1
17df8     46 75 C2 FA | 	rdbyte	arg01, local01
17dfc     2F 74 0E F2 | 	cmp	arg01, #47 wz
17e00     2C 00 90 5D |  if_ne	jmp	#LR__0709
17e04     46 75 02 F6 | 	mov	arg01, local01
17e08     00 92 06 F6 | 	mov	local04, #0
17e0c     00 82 9E FE | 	loc	pa,	#(@LR__0708-@LR__0707)
17e10     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17e14                 | LR__0707
17e14     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17e18     01 92 06 51 |  if_ne	add	local04, #1
17e1c     01 74 06 51 |  if_ne	add	arg01, #1
17e20     F0 FF 9F 5D |  if_ne	jmp	#LR__0707
17e24                 | LR__0708
17e24     49 35 02 F6 | 	mov	result1, local04
17e28     10 34 56 F2 | 	cmps	result1, #16 wc
17e2c     14 00 90 CD |  if_b	jmp	#LR__0710
17e30                 | LR__0709
17e30                 | ' #line 160 "C:/flexprop/include/libc/unix/_mount.c"
17e30                 | '         return _seterror( 10 );
17e30     18 A2 05 F1 | 	add	ptr___system__dat__, #24
17e34     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
17e38     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
17e3c     01 34 66 F6 | 	neg	result1, #1
17e40     AC 02 90 FD | 	jmp	#LR__0722
17e44                 | LR__0710
17e44                 | '     }
17e44                 | '     for (i = 0; i <  4 ; i++) {
17e44     00 94 06 F6 | 	mov	local05, #0
17e48                 | LR__0711
17e48     04 94 56 F2 | 	cmps	local05, #4 wc
17e4c     DC 00 90 3D |  if_ae	jmp	#LR__0716
17e50     4A 75 02 F6 | 	mov	arg01, local05
17e54     02 74 66 F0 | 	shl	arg01, #2
17e58     15 01 00 FF 
17e5c     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17e60     EB 74 02 F1 | 	add	arg01, ptr__dat__
17e64     3A 75 0A FB | 	rdlong	arg01, arg01 wz
17e68     15 01 00 FF 
17e6c     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17e70     00 90 56 A2 |  if_e	cmps	local03, #0 wc
17e74     4A 91 02 86 |  if_c_and_z	mov	local03, local05
17e78                 | '                 firstfree = i;
17e78                 | '                 continue;
17e78     A8 00 90 8D |  if_c_and_z	jmp	#LR__0715
17e7c     4A 75 02 F6 | 	mov	arg01, local05
17e80     02 74 66 F0 | 	shl	arg01, #2
17e84     15 01 00 FF 
17e88     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17e8c     EB 74 02 F1 | 	add	arg01, ptr__dat__
17e90     3A 75 02 FB | 	rdlong	arg01, arg01
17e94     15 01 00 FF 
17e98     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17e9c     00 92 06 F6 | 	mov	local04, #0
17ea0     6C 81 9E FE | 	loc	pa,	#(@LR__0713-@LR__0712)
17ea4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
17ea8                 | LR__0712
17ea8     3A 35 CA FA | 	rdbyte	result1, arg01 wz
17eac     01 92 06 51 |  if_ne	add	local04, #1
17eb0     01 74 06 51 |  if_ne	add	arg01, #1
17eb4     F0 FF 9F 5D |  if_ne	jmp	#LR__0712
17eb8                 | LR__0713
17eb8     49 35 02 F6 | 	mov	result1, local04
17ebc     1A 97 02 F6 | 	mov	local06, result1
17ec0     4B 75 02 F6 | 	mov	arg01, local06
17ec4     46 75 02 F1 | 	add	arg01, local01
17ec8     3A 75 C2 FA | 	rdbyte	arg01, arg01
17ecc     2F 74 0E F2 | 	cmp	arg01, #47 wz
17ed0     4B 99 02 56 |  if_ne	mov	local07, local06
17ed4     46 9B 02 56 |  if_ne	mov	local08, local01
17ed8     4D 99 02 51 |  if_ne	add	local07, local08
17edc     4C 75 CA 5A |  if_ne	rdbyte	arg01, local07 wz
17ee0     40 00 90 5D |  if_ne	jmp	#LR__0714
17ee4     4A 79 02 F6 | 	mov	arg03, local05
17ee8     02 78 66 F0 | 	shl	arg03, #2
17eec     15 01 00 FF 
17ef0     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17ef4     EB 9C 02 F6 | 	mov	local09, ptr__dat__
17ef8     EB 78 02 F1 | 	add	arg03, ptr__dat__
17efc     3C 77 02 FB | 	rdlong	arg02, arg03
17f00     4B 9F 02 F6 | 	mov	local10, local06
17f04     46 75 02 F6 | 	mov	arg01, local01
17f08     4F 79 02 F6 | 	mov	arg03, local10
17f0c     15 01 00 FF 
17f10     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17f14     08 E1 BE FD | 	call	#_strncmp
17f18     00 34 4E F2 | 	cmps	result1, #0 wz
17f1c     4A 91 02 A6 |  if_e	mov	local03, local05
17f20                 | '             firstfree = i;
17f20                 | '             break;
17f20     08 00 90 AD |  if_e	jmp	#LR__0716
17f24                 | LR__0714
17f24                 | LR__0715
17f24     01 94 06 F1 | 	add	local05, #1
17f28     1C FF 9F FD | 	jmp	#LR__0711
17f2c                 | LR__0716
17f2c     FF FF 7F FF 
17f30     FF 91 0E F2 | 	cmp	local03, ##-1 wz
17f34                 | ' #line 179 "C:/flexprop/include/libc/unix/_mount.c"
17f34                 | '         return _seterror( 11 );
17f34     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
17f38     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
17f3c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
17f40     01 34 66 A6 |  if_e	neg	result1, #1
17f44     A8 01 90 AD |  if_e	jmp	#LR__0722
17f48     48 95 02 F6 | 	mov	local05, local03
17f4c     4A 9B 02 F6 | 	mov	local08, local05
17f50     02 9A 66 F0 | 	shl	local08, #2
17f54     15 01 00 FF 
17f58     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
17f5c     EB 9A 02 F1 | 	add	local08, ptr__dat__
17f60     4D A1 0A FB | 	rdlong	local11, local08 wz
17f64     15 01 00 FF 
17f68     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
17f6c     68 00 90 AD |  if_e	jmp	#LR__0717
17f70     4C A0 06 F1 | 	add	local11, #76
17f74     50 9B 0A FB | 	rdlong	local08, local11 wz
17f78     4C A0 86 F1 | 	sub	local11, #76
17f7c     58 00 90 AD |  if_e	jmp	#LR__0717
17f80     4C A0 06 F1 | 	add	local11, #76
17f84     50 A3 02 FB | 	rdlong	local12, local11
17f88     4C A0 86 F1 | 	sub	local11, #76
17f8c     51 A5 02 F6 | 	mov	local13, local12
17f90     52 A7 02 FB | 	rdlong	local14, local13
17f94     04 A4 06 F1 | 	add	local13, #4
17f98     52 99 02 FB | 	rdlong	local07, local13
17f9c     4C A9 02 F6 | 	mov	local15, local07
17fa0     4A 9B 02 F6 | 	mov	local08, local05
17fa4     02 9A 66 F0 | 	shl	local08, #2
17fa8     15 01 00 FF 
17fac     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
17fb0     EB AA 02 F6 | 	mov	local16, ptr__dat__
17fb4     EB 9A 02 F1 | 	add	local08, ptr__dat__
17fb8     4D 9B 02 FB | 	rdlong	local08, local08
17fbc     4D 75 02 F6 | 	mov	arg01, local08
17fc0     C9 AC 02 F6 | 	mov	local17, objptr
17fc4     53 93 01 F6 | 	mov	objptr, local14
17fc8     15 01 00 FF 
17fcc     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
17fd0     2D A8 62 FD | 	call	local15
17fd4     56 93 01 F6 | 	mov	objptr, local17
17fd8                 | LR__0717
17fd8     4A A5 02 F6 | 	mov	local13, local05
17fdc     02 A4 66 F0 | 	shl	local13, #2
17fe0     15 01 00 FF 
17fe4     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
17fe8     EB A4 02 F1 | 	add	local13, ptr__dat__
17fec     52 8F 62 FC | 	wrlong	local02, local13
17ff0     00 8E 0E F2 | 	cmp	local02, #0 wz
17ff4     15 01 00 FF 
17ff8     E4 D7 85 F1 | 	sub	ptr__dat__, ##142308
17ffc     20 00 90 5D |  if_ne	jmp	#LR__0718
18000     02 94 66 F0 | 	shl	local05, #2
18004     15 01 00 FF 
18008     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
1800c     EB 94 02 F1 | 	add	local05, ptr__dat__
18010     4A 01 68 FC | 	wrlong	#0, local05
18014     15 01 00 FF 
18018     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
1801c     CC 00 90 FD | 	jmp	#LR__0721
18020                 | LR__0718
18020     4A AF 02 F6 | 	mov	local18, local05
18024     04 AE 66 F0 | 	shl	local18, #4
18028     15 01 00 FF 
1802c     91 D7 05 F1 | 	add	ptr__dat__, ##142225
18030     EB AE 02 F1 | 	add	local18, ptr__dat__
18034     57 75 02 F6 | 	mov	arg01, local18
18038     46 77 02 F6 | 	mov	arg02, local01
1803c     10 78 06 F6 | 	mov	arg03, #16
18040     15 01 00 FF 
18044     91 D7 85 F1 | 	sub	ptr__dat__, ##142225
18048     30 DE BE FD | 	call	#_strncpy
1804c     48 8E 06 F1 | 	add	local02, #72
18050     47 A5 0A FB | 	rdlong	local13, local02 wz
18054     48 8E 86 F1 | 	sub	local02, #72
18058     74 00 90 AD |  if_e	jmp	#LR__0720
1805c     48 8E 06 F1 | 	add	local02, #72
18060     47 A5 02 FB | 	rdlong	local13, local02
18064     52 A7 02 FB | 	rdlong	local14, local13
18068     04 A4 06 F1 | 	add	local13, #4
1806c     52 A9 02 FB | 	rdlong	local15, local13
18070     57 75 02 F6 | 	mov	arg01, local18
18074     C9 AC 02 F6 | 	mov	local17, objptr
18078     53 93 01 F6 | 	mov	objptr, local14
1807c     2D A8 62 FD | 	call	local15
18080     56 93 01 F6 | 	mov	objptr, local17
18084     00 34 0E F2 | 	cmp	result1, #0 wz
18088     44 00 90 AD |  if_e	jmp	#LR__0719
1808c     4A A5 02 F6 | 	mov	local13, local05
18090     02 A4 66 F0 | 	shl	local13, #2
18094     15 01 00 FF 
18098     E4 D7 05 F1 | 	add	ptr__dat__, ##142308
1809c     EB A4 02 F1 | 	add	local13, ptr__dat__
180a0     52 01 68 FC | 	wrlong	#0, local13
180a4     02 94 66 F0 | 	shl	local05, #2
180a8     10 D6 85 F1 | 	sub	ptr__dat__, #16
180ac     EB 94 02 F1 | 	add	local05, ptr__dat__
180b0     4A 01 68 FC | 	wrlong	#0, local05
180b4                 | '                 vfstab[i] = 0;
180b4                 | '                 mounttab[i] = 0;
180b4                 | ' #line 209 "C:/flexprop/include/libc/unix/_mount.c"
180b4                 | '                 return _seterror( 12 );
180b4     15 01 00 FF 
180b8     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
180bc     18 A2 05 F1 | 	add	ptr___system__dat__, #24
180c0     D1 18 68 FC | 	wrlong	#12, ptr___system__dat__
180c4     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
180c8     01 34 66 F6 | 	neg	result1, #1
180cc     20 00 90 FD | 	jmp	#LR__0722
180d0                 | LR__0719
180d0                 | LR__0720
180d0     02 94 66 F0 | 	shl	local05, #2
180d4     15 01 00 FF 
180d8     D4 D7 05 F1 | 	add	ptr__dat__, ##142292
180dc     EB 94 02 F1 | 	add	local05, ptr__dat__
180e0     4A AF 62 FC | 	wrlong	local18, local05
180e4     15 01 00 FF 
180e8     D4 D7 85 F1 | 	sub	ptr__dat__, ##142292
180ec                 | LR__0721
180ec                 | '             }
180ec                 | '         }
180ec                 | '         mounttab[i] = name;
180ec                 | ' #line 216 "C:/flexprop/include/libc/unix/_mount.c"
180ec                 | '     }
180ec                 | '     return 0;
180ec     00 34 06 F6 | 	mov	result1, #0
180f0                 | LR__0722
180f0     A8 F0 03 F6 | 	mov	ptra, fp
180f4     B3 00 A0 FD | 	call	#popregs_
180f8                 | __mount_ret
180f8     2D 00 64 FD | 	ret
180fc                 | 
180fc                 | __dofmt
180fc     0A 4C 05 F6 | 	mov	COUNT_, #10
18100     A9 00 A0 FD | 	call	#pushregs_
18104     3C F0 07 F1 | 	add	ptra, #60
18108     04 50 05 F1 | 	add	fp, #4
1810c     A8 74 62 FC | 	wrlong	arg01, fp
18110     04 50 05 F1 | 	add	fp, #4
18114     A8 76 62 FC | 	wrlong	arg02, fp
18118     04 50 05 F1 | 	add	fp, #4
1811c     A8 78 62 FC | 	wrlong	arg03, fp
18120     00 8C 06 F6 | 	mov	local01, #0
18124     10 50 05 F1 | 	add	fp, #16
18128     A8 00 68 FC | 	wrlong	#0, fp
1812c     08 50 05 F1 | 	add	fp, #8
18130     A8 00 68 FC | 	wrlong	#0, fp
18134     04 50 05 F1 | 	add	fp, #4
18138     A8 00 68 FC | 	wrlong	#0, fp
1813c     08 50 05 F1 | 	add	fp, #8
18140     A8 00 68 FC | 	wrlong	#0, fp
18144     30 50 85 F1 | 	sub	fp, #48
18148                 | ' #line 150 "C:/flexprop/include/libsys/dofmt.c"
18148                 | '     for(;;) {
18148                 | LR__0723
18148     08 50 05 F1 | 	add	fp, #8
1814c     A8 8C 02 FB | 	rdlong	local01, fp
18150     46 75 02 F6 | 	mov	arg01, local01
18154     01 74 06 F1 | 	add	arg01, #1
18158     A8 74 62 FC | 	wrlong	arg01, fp
1815c     46 8D CA FA | 	rdbyte	local01, local01 wz
18160     08 50 05 F1 | 	add	fp, #8
18164     A8 8C 62 FC | 	wrlong	local01, fp
18168     10 50 85 F1 | 	sub	fp, #16
1816c     A8 06 90 AD |  if_e	jmp	#LR__0746
18170     10 50 05 F1 | 	add	fp, #16
18174     A8 8C 02 FB | 	rdlong	local01, fp
18178     10 50 85 F1 | 	sub	fp, #16
1817c     25 8C 0E F2 | 	cmp	local01, #37 wz
18180     68 00 90 AD |  if_e	jmp	#LR__0724
18184     04 50 05 F1 | 	add	fp, #4
18188     A8 8C 02 FB | 	rdlong	local01, fp
1818c     46 8F 02 FB | 	rdlong	local02, local01
18190     04 8C 06 F1 | 	add	local01, #4
18194     46 8D 02 FB | 	rdlong	local01, local01
18198     0C 50 05 F1 | 	add	fp, #12
1819c     A8 74 02 FB | 	rdlong	arg01, fp
181a0     10 50 85 F1 | 	sub	fp, #16
181a4     C9 90 02 F6 | 	mov	local03, objptr
181a8     47 93 01 F6 | 	mov	objptr, local02
181ac     2D 8C 62 FD | 	call	local01
181b0     48 93 01 F6 | 	mov	objptr, local03
181b4     14 50 05 F1 | 	add	fp, #20
181b8     A8 34 62 FC | 	wrlong	result1, fp
181bc     14 50 85 F1 | 	sub	fp, #20
181c0     00 34 56 F2 | 	cmps	result1, #0 wc
181c4     14 50 05 C1 |  if_b	add	fp, #20
181c8     A8 34 02 CB |  if_b	rdlong	result1, fp
181cc     14 50 85 C1 |  if_b	sub	fp, #20
181d0     50 06 90 CD |  if_b	jmp	#LR__0747
181d4     1C 50 05 F1 | 	add	fp, #28
181d8     A8 90 02 FB | 	rdlong	local03, fp
181dc     01 90 06 F1 | 	add	local03, #1
181e0     A8 90 62 FC | 	wrlong	local03, fp
181e4     1C 50 85 F1 | 	sub	fp, #28
181e8                 | '             bytes_written++;
181e8                 | '             continue;
181e8     5C FF 9F FD | 	jmp	#LR__0723
181ec                 | LR__0724
181ec     08 50 05 F1 | 	add	fp, #8
181f0     A8 74 02 FB | 	rdlong	arg01, fp
181f4     18 50 05 F1 | 	add	fp, #24
181f8     A8 76 02 F6 | 	mov	arg02, fp
181fc     20 50 85 F1 | 	sub	fp, #32
18200     40 31 B0 FD | 	call	#_parseflags_2111
18204     08 50 05 F1 | 	add	fp, #8
18208     A8 34 62 FC | 	wrlong	result1, fp
1820c     18 50 05 F1 | 	add	fp, #24
18210     A8 8C 02 FB | 	rdlong	local01, fp
18214     18 8C 46 F0 | 	shr	local01, #24
18218     03 8C 06 F5 | 	and	local01, #3
1821c     10 50 05 F1 | 	add	fp, #16
18220     A8 8C 62 FC | 	wrlong	local01, fp
18224     28 50 85 F1 | 	sub	fp, #40
18228     A8 74 02 F6 | 	mov	arg01, fp
1822c     04 50 05 F1 | 	add	fp, #4
18230     A8 76 02 FB | 	rdlong	arg02, fp
18234     0C 50 85 F1 | 	sub	fp, #12
18238     90 30 B0 FD | 	call	#_parseint_2104
1823c     24 50 05 F1 | 	add	fp, #36
18240     A8 34 62 FC | 	wrlong	result1, fp
18244     1C 50 85 F1 | 	sub	fp, #28
18248     A8 8E 02 FB | 	rdlong	local02, fp
1824c     47 8D CA FA | 	rdbyte	local01, local02 wz
18250     08 50 05 F1 | 	add	fp, #8
18254     A8 8C 62 FC | 	wrlong	local01, fp
18258     10 50 85 F1 | 	sub	fp, #16
1825c     B8 05 90 AD |  if_e	jmp	#LR__0746
18260     10 50 05 F1 | 	add	fp, #16
18264     A8 8C 02 FB | 	rdlong	local01, fp
18268     10 50 85 F1 | 	sub	fp, #16
1826c     2E 8C 0E F2 | 	cmp	local01, #46 wz
18270     4C 00 90 5D |  if_ne	jmp	#LR__0725
18274     08 50 05 F1 | 	add	fp, #8
18278     A8 90 02 FB | 	rdlong	local03, fp
1827c     01 90 06 F1 | 	add	local03, #1
18280     A8 90 62 FC | 	wrlong	local03, fp
18284     A8 74 02 F6 | 	mov	arg01, fp
18288     04 50 05 F1 | 	add	fp, #4
1828c     A8 76 02 FB | 	rdlong	arg02, fp
18290     0C 50 85 F1 | 	sub	fp, #12
18294     34 30 B0 FD | 	call	#_parseint_2104
18298     01 34 06 F1 | 	add	result1, #1
1829c     28 50 05 F1 | 	add	fp, #40
182a0     A8 34 62 FC | 	wrlong	result1, fp
182a4     20 50 85 F1 | 	sub	fp, #32
182a8     A8 8E 02 FB | 	rdlong	local02, fp
182ac     47 8D CA FA | 	rdbyte	local01, local02 wz
182b0     08 50 05 F1 | 	add	fp, #8
182b4     A8 8C 62 FC | 	wrlong	local01, fp
182b8     10 50 85 F1 | 	sub	fp, #16
182bc     58 05 90 AD |  if_e	jmp	#LR__0746
182c0                 | LR__0725
182c0     08 50 05 F1 | 	add	fp, #8
182c4     A8 74 02 FB | 	rdlong	arg01, fp
182c8     24 50 05 F1 | 	add	fp, #36
182cc     A8 76 02 F6 | 	mov	arg02, fp
182d0     2C 50 85 F1 | 	sub	fp, #44
182d4     1C 31 B0 FD | 	call	#_parsesize_2115
182d8     08 50 05 F1 | 	add	fp, #8
182dc     A8 34 62 FC | 	wrlong	result1, fp
182e0     1A 8D 02 F6 | 	mov	local01, result1
182e4     01 8C 06 F1 | 	add	local01, #1
182e8     A8 8C 62 FC | 	wrlong	local01, fp
182ec     1A 8D CA FA | 	rdbyte	local01, result1 wz
182f0     08 50 05 F1 | 	add	fp, #8
182f4     A8 8C 62 FC | 	wrlong	local01, fp
182f8     10 50 85 F1 | 	sub	fp, #16
182fc     18 05 90 AD |  if_e	jmp	#LR__0746
18300     10 50 05 F1 | 	add	fp, #16
18304     A8 8C 02 FB | 	rdlong	local01, fp
18308     10 50 85 F1 | 	sub	fp, #16
1830c     25 8C 0E F2 | 	cmp	local01, #37 wz
18310     2C 00 90 5D |  if_ne	jmp	#LR__0726
18314     04 50 05 F1 | 	add	fp, #4
18318     A8 74 02 FB | 	rdlong	arg01, fp
1831c     1C 50 05 F1 | 	add	fp, #28
18320     A8 76 02 FB | 	rdlong	arg02, fp
18324     20 50 85 F1 | 	sub	fp, #32
18328     25 78 06 F6 | 	mov	arg03, #37
1832c     08 D6 B0 FD | 	call	#__system___fmtchar
18330     14 50 05 F1 | 	add	fp, #20
18334     A8 34 62 FC | 	wrlong	result1, fp
18338     14 50 85 F1 | 	sub	fp, #20
1833c                 | '             q = _fmtchar(fn, flags, '%');
1833c                 | '             continue;
1833c     08 FE 9F FD | 	jmp	#LR__0723
18340                 | LR__0726
18340     14 50 05 F1 | 	add	fp, #20
18344     A8 00 68 FC | 	wrlong	#0, fp
18348     08 50 85 F1 | 	sub	fp, #8
1834c     A8 92 02 FB | 	rdlong	local04, fp
18350     49 91 02 FB | 	rdlong	local03, local04
18354     48 8D 02 FB | 	rdlong	local01, local03
18358     49 95 02 F6 | 	mov	local05, local04
1835c     49 97 02 F6 | 	mov	local06, local04
18360     4B 99 02 F6 | 	mov	local07, local06
18364     4C 91 02 FB | 	rdlong	local03, local07
18368     04 90 06 F1 | 	add	local03, #4
1836c     4A 91 62 FC | 	wrlong	local03, local05
18370     28 50 05 F1 | 	add	fp, #40
18374     A8 8C 62 FC | 	wrlong	local01, fp
18378     24 50 85 F1 | 	sub	fp, #36
1837c     A8 8C 02 FB | 	rdlong	local01, fp
18380     10 50 85 F1 | 	sub	fp, #16
18384     41 8C 56 F2 | 	cmps	local01, #65 wc
18388     48 00 90 CD |  if_b	jmp	#LR__0727
1838c     10 50 05 F1 | 	add	fp, #16
18390     A8 9A 02 FB | 	rdlong	local08, fp
18394     10 50 85 F1 | 	sub	fp, #16
18398     4D 9D 02 F6 | 	mov	local09, local08
1839c     5B 9C 56 F2 | 	cmps	local09, #91 wc
183a0     30 00 90 3D |  if_ae	jmp	#LR__0727
183a4     20 50 05 F1 | 	add	fp, #32
183a8     A8 8C 02 FB | 	rdlong	local01, fp
183ac     1D 8C 26 F4 | 	bith	local01, #29
183b0     A8 8C 62 FC | 	wrlong	local01, fp
183b4     10 50 85 F1 | 	sub	fp, #16
183b8     A8 8E 02 FB | 	rdlong	local02, fp
183bc     41 8E 86 F1 | 	sub	local02, #65
183c0     A8 8E 62 FC | 	wrlong	local02, fp
183c4     47 8D 02 F6 | 	mov	local01, local02
183c8     61 8C 06 F1 | 	add	local01, #97
183cc     A8 8C 62 FC | 	wrlong	local01, fp
183d0     10 50 85 F1 | 	sub	fp, #16
183d4                 | LR__0727
183d4     28 50 05 F1 | 	add	fp, #40
183d8     A8 8C 02 FB | 	rdlong	local01, fp
183dc     28 50 85 F1 | 	sub	fp, #40
183e0     00 8C 56 F2 | 	cmps	local01, #0 wc
183e4     28 50 05 C1 |  if_b	add	fp, #40
183e8     A8 00 68 CC |  if_b	wrlong	#0, fp
183ec     28 50 85 C1 |  if_b	sub	fp, #40
183f0     28 50 05 F1 | 	add	fp, #40
183f4     A8 8C 02 FB | 	rdlong	local01, fp
183f8     28 50 85 F1 | 	sub	fp, #40
183fc     40 8C 56 F2 | 	cmps	local01, #64 wc
18400     28 50 05 31 |  if_ae	add	fp, #40
18404     A8 7E 68 3C |  if_ae	wrlong	#63, fp
18408     28 50 85 31 |  if_ae	sub	fp, #40
1840c     24 50 05 F1 | 	add	fp, #36
18410     A8 8C 02 FB | 	rdlong	local01, fp
18414     24 50 85 F1 | 	sub	fp, #36
18418     00 8C 56 F2 | 	cmps	local01, #0 wc
1841c     34 00 90 3D |  if_ae	jmp	#LR__0728
18420     24 50 05 F1 | 	add	fp, #36
18424     A8 8C 02 FB | 	rdlong	local01, fp
18428     46 8D 62 F6 | 	neg	local01, local01
1842c     A8 8C 62 FC | 	wrlong	local01, fp
18430     04 50 85 F1 | 	sub	fp, #4
18434     A8 8C 02 FB | 	rdlong	local01, fp
18438     36 8C 06 F4 | 	bitl	local01, #54
1843c     A8 8C 62 FC | 	wrlong	local01, fp
18440     16 8C 26 F4 | 	bith	local01, #22
18444     A8 8C 62 FC | 	wrlong	local01, fp
18448     10 50 05 F1 | 	add	fp, #16
1844c     A8 02 68 FC | 	wrlong	#1, fp
18450     30 50 85 F1 | 	sub	fp, #48
18454                 | LR__0728
18454     20 50 05 F1 | 	add	fp, #32
18458     A8 8C 02 FB | 	rdlong	local01, fp
1845c     04 50 05 F1 | 	add	fp, #4
18460     A8 9C 02 FB | 	rdlong	local09, fp
18464     08 9C 66 F0 | 	shl	local09, #8
18468     4E 8D 42 F5 | 	or	local01, local09
1846c     04 50 85 F1 | 	sub	fp, #4
18470     A8 8C 62 FC | 	wrlong	local01, fp
18474     08 50 05 F1 | 	add	fp, #8
18478     A8 9C 02 FB | 	rdlong	local09, fp
1847c     10 9C 66 F0 | 	shl	local09, #16
18480     4E 8D 42 F5 | 	or	local01, local09
18484     08 50 85 F1 | 	sub	fp, #8
18488     A8 8C 62 FC | 	wrlong	local01, fp
1848c                 | '             width = -width;
1848c                 | '             flags &= ~( 0x3 << (22) );
1848c                 | '             flags |= ( 1 << (22) );
1848c                 | '             padchar =  1 ;
1848c                 | '         }
1848c                 | '         flags = flags | (width <<  (8) );
1848c                 | '         flags = flags | (prec <<  (16) );
1848c                 | '         switch (c) {
1848c     10 50 85 F1 | 	sub	fp, #16
18490     A8 9E 02 FB | 	rdlong	local10, fp
18494     10 50 85 F1 | 	sub	fp, #16
18498     63 9E 0E F2 | 	cmp	local10, #99 wz
1849c     54 00 90 AD |  if_e	jmp	#LR__0729
184a0     73 9E 0E F2 | 	cmp	local10, #115 wz
184a4     7C 00 90 AD |  if_e	jmp	#LR__0730
184a8     64 9E 0E F2 | 	cmp	local10, #100 wz
184ac     D8 00 90 AD |  if_e	jmp	#LR__0732
184b0     69 9E 0E F2 | 	cmp	local10, #105 wz
184b4     D0 00 90 AD |  if_e	jmp	#LR__0733
184b8     75 9E 0E F2 | 	cmp	local10, #117 wz
184bc     C8 00 90 AD |  if_e	jmp	#LR__0734
184c0     6F 9E 0E F2 | 	cmp	local10, #111 wz
184c4     6C 01 90 AD |  if_e	jmp	#LR__0736
184c8     78 9E 0E F2 | 	cmp	local10, #120 wz
184cc     FC 01 90 AD |  if_e	jmp	#LR__0738
184d0     61 9E 0E F2 | 	cmp	local10, #97 wz
184d4     84 02 90 AD |  if_e	jmp	#LR__0740
184d8     65 9E 0E F2 | 	cmp	local10, #101 wz
184dc     7C 02 90 AD |  if_e	jmp	#LR__0741
184e0     66 9E 0E F2 | 	cmp	local10, #102 wz
184e4     74 02 90 AD |  if_e	jmp	#LR__0742
184e8     67 9E 0E F2 | 	cmp	local10, #103 wz
184ec     6C 02 90 AD |  if_e	jmp	#LR__0743
184f0     A4 02 90 FD | 	jmp	#LR__0744
184f4                 | LR__0729
184f4     04 50 05 F1 | 	add	fp, #4
184f8     A8 74 02 FB | 	rdlong	arg01, fp
184fc     1C 50 05 F1 | 	add	fp, #28
18500     A8 76 02 FB | 	rdlong	arg02, fp
18504     14 50 05 F1 | 	add	fp, #20
18508     A8 78 02 FB | 	rdlong	arg03, fp
1850c     34 50 85 F1 | 	sub	fp, #52
18510     24 D4 B0 FD | 	call	#__system___fmtchar
18514     14 50 05 F1 | 	add	fp, #20
18518     A8 34 62 FC | 	wrlong	result1, fp
1851c     14 50 85 F1 | 	sub	fp, #20
18520                 | '             q = _fmtchar(fn, flags, val);
18520                 | '             break;
18520     B0 02 90 FD | 	jmp	#LR__0745
18524                 | LR__0730
18524     28 50 05 F1 | 	add	fp, #40
18528     A8 8C 0A FB | 	rdlong	local01, fp wz
1852c     28 50 85 F1 | 	sub	fp, #40
18530     24 00 90 AD |  if_e	jmp	#LR__0731
18534     20 50 05 F1 | 	add	fp, #32
18538     A8 8C 02 FB | 	rdlong	local01, fp
1853c     08 50 05 F1 | 	add	fp, #8
18540     A8 9C 02 FB | 	rdlong	local09, fp
18544     01 9C 86 F1 | 	sub	local09, #1
18548     4E 8D 42 F5 | 	or	local01, local09
1854c     08 50 85 F1 | 	sub	fp, #8
18550     A8 8C 62 FC | 	wrlong	local01, fp
18554     20 50 85 F1 | 	sub	fp, #32
18558                 | LR__0731
18558     04 50 05 F1 | 	add	fp, #4
1855c     A8 74 02 FB | 	rdlong	arg01, fp
18560     1C 50 05 F1 | 	add	fp, #28
18564     A8 76 02 FB | 	rdlong	arg02, fp
18568     14 50 05 F1 | 	add	fp, #20
1856c     A8 78 02 FB | 	rdlong	arg03, fp
18570     34 50 85 F1 | 	sub	fp, #52
18574     20 D4 B0 FD | 	call	#__system___fmtstr
18578     14 50 05 F1 | 	add	fp, #20
1857c     A8 34 62 FC | 	wrlong	result1, fp
18580     14 50 85 F1 | 	sub	fp, #20
18584                 | '             break;
18584     4C 02 90 FD | 	jmp	#LR__0745
18588                 | LR__0732
18588                 | LR__0733
18588                 | LR__0734
18588     10 50 05 F1 | 	add	fp, #16
1858c     A8 8C 02 FB | 	rdlong	local01, fp
18590     10 50 85 F1 | 	sub	fp, #16
18594     75 8C 0E F2 | 	cmp	local01, #117 wz
18598     20 50 05 A1 |  if_e	add	fp, #32
1859c     A8 8C 02 AB |  if_e	rdlong	local01, fp
185a0     3A 8C 26 A4 |  if_e	bith	local01, #58
185a4     A8 8C 62 AC |  if_e	wrlong	local01, fp
185a8     20 50 85 A1 |  if_e	sub	fp, #32
185ac     28 50 05 F1 | 	add	fp, #40
185b0     A8 8C 0A FB | 	rdlong	local01, fp wz
185b4     28 50 85 F1 | 	sub	fp, #40
185b8     44 00 90 5D |  if_ne	jmp	#LR__0735
185bc     30 50 05 F1 | 	add	fp, #48
185c0     A8 9C 02 FB | 	rdlong	local09, fp
185c4     30 50 85 F1 | 	sub	fp, #48
185c8     02 9C 0E F2 | 	cmp	local09, #2 wz
185cc     30 00 90 5D |  if_ne	jmp	#LR__0735
185d0     20 50 05 F1 | 	add	fp, #32
185d4     A8 8E 02 FB | 	rdlong	local02, fp
185d8     47 8D 02 F6 | 	mov	local01, local02
185dc     04 50 05 F1 | 	add	fp, #4
185e0     A8 9A 02 FB | 	rdlong	local08, fp
185e4     4D 9D 02 F6 | 	mov	local09, local08
185e8     01 9C 06 F1 | 	add	local09, #1
185ec     10 9C 66 F0 | 	shl	local09, #16
185f0     4E 8D 42 F5 | 	or	local01, local09
185f4     04 50 85 F1 | 	sub	fp, #4
185f8     A8 8C 62 FC | 	wrlong	local01, fp
185fc     20 50 85 F1 | 	sub	fp, #32
18600                 | LR__0735
18600     04 50 05 F1 | 	add	fp, #4
18604     A8 74 02 FB | 	rdlong	arg01, fp
18608     1C 50 05 F1 | 	add	fp, #28
1860c     A8 76 02 FB | 	rdlong	arg02, fp
18610     14 50 05 F1 | 	add	fp, #20
18614     A8 78 02 FB | 	rdlong	arg03, fp
18618     34 50 85 F1 | 	sub	fp, #52
1861c     0A 7A 06 F6 | 	mov	arg04, #10
18620     60 D4 B0 FD | 	call	#__system___fmtnum
18624     14 50 05 F1 | 	add	fp, #20
18628     A8 34 62 FC | 	wrlong	result1, fp
1862c     14 50 85 F1 | 	sub	fp, #20
18630                 | '                 flags |= ((width+1)<< (16) );
18630                 | '             }
18630                 | '             q = _fmtnum(fn, flags, val, 10);
18630                 | '             break;
18630     A0 01 90 FD | 	jmp	#LR__0745
18634                 | LR__0736
18634     20 50 05 F1 | 	add	fp, #32
18638     A8 8C 02 FB | 	rdlong	local01, fp
1863c     3A 8C 26 F4 | 	bith	local01, #58
18640     A8 8C 62 FC | 	wrlong	local01, fp
18644     08 50 05 F1 | 	add	fp, #8
18648     A8 8C 0A FB | 	rdlong	local01, fp wz
1864c     28 50 85 F1 | 	sub	fp, #40
18650     44 00 90 5D |  if_ne	jmp	#LR__0737
18654     30 50 05 F1 | 	add	fp, #48
18658     A8 9C 02 FB | 	rdlong	local09, fp
1865c     30 50 85 F1 | 	sub	fp, #48
18660     02 9C 0E F2 | 	cmp	local09, #2 wz
18664     30 00 90 5D |  if_ne	jmp	#LR__0737
18668     20 50 05 F1 | 	add	fp, #32
1866c     A8 8E 02 FB | 	rdlong	local02, fp
18670     47 8D 02 F6 | 	mov	local01, local02
18674     04 50 05 F1 | 	add	fp, #4
18678     A8 9A 02 FB | 	rdlong	local08, fp
1867c     4D 9D 02 F6 | 	mov	local09, local08
18680     01 9C 06 F1 | 	add	local09, #1
18684     10 9C 66 F0 | 	shl	local09, #16
18688     4E 8D 42 F5 | 	or	local01, local09
1868c     04 50 85 F1 | 	sub	fp, #4
18690     A8 8C 62 FC | 	wrlong	local01, fp
18694     20 50 85 F1 | 	sub	fp, #32
18698                 | LR__0737
18698     04 50 05 F1 | 	add	fp, #4
1869c     A8 74 02 FB | 	rdlong	arg01, fp
186a0     1C 50 05 F1 | 	add	fp, #28
186a4     A8 76 02 FB | 	rdlong	arg02, fp
186a8     14 50 05 F1 | 	add	fp, #20
186ac     A8 78 02 FB | 	rdlong	arg03, fp
186b0     34 50 85 F1 | 	sub	fp, #52
186b4     08 7A 06 F6 | 	mov	arg04, #8
186b8     C8 D3 B0 FD | 	call	#__system___fmtnum
186bc     14 50 05 F1 | 	add	fp, #20
186c0     A8 34 62 FC | 	wrlong	result1, fp
186c4     14 50 85 F1 | 	sub	fp, #20
186c8                 | '                 flags |= ((width+1)<< (16) );
186c8                 | '             }
186c8                 | '             q = _fmtnum(fn, flags, val, 8);
186c8                 | '             break;
186c8     08 01 90 FD | 	jmp	#LR__0745
186cc                 | LR__0738
186cc     28 50 05 F1 | 	add	fp, #40
186d0     A8 8C 0A FB | 	rdlong	local01, fp wz
186d4     28 50 85 F1 | 	sub	fp, #40
186d8     44 00 90 5D |  if_ne	jmp	#LR__0739
186dc     30 50 05 F1 | 	add	fp, #48
186e0     A8 9C 02 FB | 	rdlong	local09, fp
186e4     30 50 85 F1 | 	sub	fp, #48
186e8     02 9C 0E F2 | 	cmp	local09, #2 wz
186ec     30 00 90 5D |  if_ne	jmp	#LR__0739
186f0     20 50 05 F1 | 	add	fp, #32
186f4     A8 8E 02 FB | 	rdlong	local02, fp
186f8     47 8D 02 F6 | 	mov	local01, local02
186fc     04 50 05 F1 | 	add	fp, #4
18700     A8 9A 02 FB | 	rdlong	local08, fp
18704     4D 9D 02 F6 | 	mov	local09, local08
18708     01 9C 06 F1 | 	add	local09, #1
1870c     10 9C 66 F0 | 	shl	local09, #16
18710     4E 8D 42 F5 | 	or	local01, local09
18714     04 50 85 F1 | 	sub	fp, #4
18718     A8 8C 62 FC | 	wrlong	local01, fp
1871c     20 50 85 F1 | 	sub	fp, #32
18720                 | LR__0739
18720     20 50 05 F1 | 	add	fp, #32
18724     A8 76 02 FB | 	rdlong	arg02, fp
18728     3A 76 26 F4 | 	bith	arg02, #58
1872c     A8 76 62 FC | 	wrlong	arg02, fp
18730     1C 50 85 F1 | 	sub	fp, #28
18734     A8 74 02 FB | 	rdlong	arg01, fp
18738     30 50 05 F1 | 	add	fp, #48
1873c     A8 78 02 FB | 	rdlong	arg03, fp
18740     34 50 85 F1 | 	sub	fp, #52
18744     10 7A 06 F6 | 	mov	arg04, #16
18748     38 D3 B0 FD | 	call	#__system___fmtnum
1874c     14 50 05 F1 | 	add	fp, #20
18750     A8 34 62 FC | 	wrlong	result1, fp
18754     14 50 85 F1 | 	sub	fp, #20
18758                 | '                 flags |= ((width+1)<< (16) );
18758                 | '             }
18758                 | '             flags |=  3  <<  (26) ;
18758                 | '             q = _fmtnum(fn, flags, val, 16);
18758                 | '             break;
18758     78 00 90 FD | 	jmp	#LR__0745
1875c                 | LR__0740
1875c                 | LR__0741
1875c                 | LR__0742
1875c                 | LR__0743
1875c     04 50 05 F1 | 	add	fp, #4
18760     A8 74 02 FB | 	rdlong	arg01, fp
18764     1C 50 05 F1 | 	add	fp, #28
18768     A8 76 02 FB | 	rdlong	arg02, fp
1876c     14 50 05 F1 | 	add	fp, #20
18770     A8 78 02 FB | 	rdlong	arg03, fp
18774                 | '     v.i = x;
18774                 | '     return v.f;
18774     24 50 85 F1 | 	sub	fp, #36
18778     A8 94 02 FB | 	rdlong	local05, fp
1877c     10 50 85 F1 | 	sub	fp, #16
18780     4A 7B 02 F6 | 	mov	arg04, local05
18784     10 D6 B0 FD | 	call	#__system___fmtfloat
18788     14 50 05 F1 | 	add	fp, #20
1878c     A8 34 62 FC | 	wrlong	result1, fp
18790     14 50 85 F1 | 	sub	fp, #20
18794                 | '             q = _fmtfloat(fn, flags, _asfloat(val), c);
18794                 | '             break;
18794     3C 00 90 FD | 	jmp	#LR__0745
18798                 | LR__0744
18798     04 50 05 F1 | 	add	fp, #4
1879c     A8 74 02 FB | 	rdlong	arg01, fp
187a0     1C 50 05 F1 | 	add	fp, #28
187a4     A8 8E 02 FB | 	rdlong	local02, fp
187a8     20 50 85 F1 | 	sub	fp, #32
187ac     52 01 00 FF 
187b0     C3 9B 06 F6 | 	mov	local08, ##@LR__2250
187b4     4D 9D 02 F6 | 	mov	local09, local08
187b8     47 77 02 F6 | 	mov	arg02, local02
187bc     4E 79 02 F6 | 	mov	arg03, local09
187c0     D4 D1 B0 FD | 	call	#__system___fmtstr
187c4     1A 8D 02 F6 | 	mov	local01, result1
187c8     14 50 05 F1 | 	add	fp, #20
187cc     A8 8C 62 FC | 	wrlong	local01, fp
187d0     14 50 85 F1 | 	sub	fp, #20
187d4                 | '             q = _fmtstr(fn, flags, "???");
187d4                 | '             break;
187d4                 | LR__0745
187d4     14 50 05 F1 | 	add	fp, #20
187d8     A8 8C 02 FB | 	rdlong	local01, fp
187dc     14 50 85 F1 | 	sub	fp, #20
187e0     00 8C 56 F2 | 	cmps	local01, #0 wc
187e4                 | '             return q;
187e4     14 50 05 C1 |  if_b	add	fp, #20
187e8     A8 34 02 CB |  if_b	rdlong	result1, fp
187ec     14 50 85 C1 |  if_b	sub	fp, #20
187f0     30 00 90 CD |  if_b	jmp	#LR__0747
187f4     1C 50 05 F1 | 	add	fp, #28
187f8     A8 8C 02 FB | 	rdlong	local01, fp
187fc     08 50 85 F1 | 	sub	fp, #8
18800     A8 9A 02 FB | 	rdlong	local08, fp
18804     4D 8D 02 F1 | 	add	local01, local08
18808     08 50 05 F1 | 	add	fp, #8
1880c     A8 8C 62 FC | 	wrlong	local01, fp
18810     1C 50 85 F1 | 	sub	fp, #28
18814     30 F9 9F FD | 	jmp	#LR__0723
18818                 | LR__0746
18818                 | '         }
18818                 | '         bytes_written += q;
18818                 | '     }
18818                 | '     return bytes_written;
18818     1C 50 05 F1 | 	add	fp, #28
1881c     A8 34 02 FB | 	rdlong	result1, fp
18820     1C 50 85 F1 | 	sub	fp, #28
18824                 | LR__0747
18824     A8 F0 03 F6 | 	mov	ptra, fp
18828     B3 00 A0 FD | 	call	#popregs_
1882c                 | __dofmt_ret
1882c     2D 00 64 FD | 	ret
18830                 | 
18830                 | __remove
18830     06 4C 05 F6 | 	mov	COUNT_, #6
18834     A9 00 A0 FD | 	call	#pushregs_
18838     3A 77 02 F6 | 	mov	arg02, arg01
1883c                 | '     return tmpname;
1883c     16 01 00 FF 
18840     F4 D6 05 F1 | 	add	ptr__dat__, ##142580
18844     EB 8C 02 F6 | 	mov	local01, ptr__dat__
18848     46 75 02 F6 | 	mov	arg01, local01
1884c     00 78 06 F6 | 	mov	arg03, #0
18850     16 01 00 FF 
18854     F4 D6 85 F1 | 	sub	ptr__dat__, ##142580
18858     FC F1 BF FD | 	call	#___getvfsforfile
1885c     1A 8F 0A F6 | 	mov	local02, result1 wz
18860     20 8E 06 51 |  if_ne	add	local02, #32
18864     47 75 02 5B |  if_ne	rdlong	arg01, local02
18868     20 8E 86 51 |  if_ne	sub	local02, #32
1886c     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
18870                 | ' #line 20 "C:/flexprop/include/libsys/remove.c"
18870                 | '         return _seterror( 16 );
18870     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
18874     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
18878     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
1887c     01 34 66 A6 |  if_e	neg	result1, #1
18880     90 00 90 AD |  if_e	jmp	#LR__0750
18884     40 8E 06 F1 | 	add	local02, #64
18888     47 75 02 FB | 	rdlong	arg01, local02
1888c     40 8E 86 F1 | 	sub	local02, #64
18890     3A 91 02 FB | 	rdlong	local03, arg01
18894     04 74 06 F1 | 	add	arg01, #4
18898     3A 93 02 FB | 	rdlong	local04, arg01
1889c     46 75 02 F6 | 	mov	arg01, local01
188a0     C9 94 02 F6 | 	mov	local05, objptr
188a4     48 93 01 F6 | 	mov	objptr, local03
188a8     2D 92 62 FD | 	call	local04
188ac     4A 93 01 F6 | 	mov	objptr, local05
188b0     1A 97 02 F6 | 	mov	local06, result1
188b4     FF FF 7F FF 
188b8     F2 97 0E F2 | 	cmp	local06, ##-14 wz
188bc     2C 00 90 5D |  if_ne	jmp	#LR__0748
188c0     3C 8E 06 F1 | 	add	local02, #60
188c4     47 97 02 FB | 	rdlong	local06, local02
188c8     4B 91 02 FB | 	rdlong	local03, local06
188cc     04 96 06 F1 | 	add	local06, #4
188d0     4B 93 02 FB | 	rdlong	local04, local06
188d4     46 75 02 F6 | 	mov	arg01, local01
188d8     C9 94 02 F6 | 	mov	local05, objptr
188dc     48 93 01 F6 | 	mov	objptr, local03
188e0     2D 92 62 FD | 	call	local04
188e4     4A 93 01 F6 | 	mov	objptr, local05
188e8     1A 97 02 F6 | 	mov	local06, result1
188ec                 | LR__0748
188ec     00 96 0E F2 | 	cmp	local06, #0 wz
188f0     1C 00 90 AD |  if_e	jmp	#LR__0749
188f4                 | '         return _seterror(-r);
188f4     4B 75 6A F6 | 	neg	arg01, local06 wz
188f8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
188fc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
18900     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
18904     01 34 66 56 |  if_ne	neg	result1, #1
18908     00 34 06 A6 |  if_e	mov	result1, #0
1890c     04 00 90 FD | 	jmp	#LR__0750
18910                 | LR__0749
18910                 | '     }
18910                 | '     return 0;
18910     00 34 06 F6 | 	mov	result1, #0
18914                 | LR__0750
18914     A8 F0 03 F6 | 	mov	ptra, fp
18918     B3 00 A0 FD | 	call	#popregs_
1891c                 | __remove_ret
1891c     2D 00 64 FD | 	ret
18920                 | 
18920                 | _read_register_1529
18920     02 4C 05 F6 | 	mov	COUNT_, #2
18924     A9 00 A0 FD | 	call	#pushregs_
18928     3A 8D 02 F6 | 	mov	local01, arg01
1892c     C9 8E 02 F6 | 	mov	local02, objptr
18930     46 93 01 F6 | 	mov	objptr, local01
18934     48 2C B0 FD | 	call	#_jm_i2c_spin2_start
18938     46 93 01 F6 | 	mov	objptr, local01
1893c     0C 8C 06 F1 | 	add	local01, #12
18940     46 75 C2 FA | 	rdbyte	arg01, local01
18944     0C 8C 86 F1 | 	sub	local01, #12
18948     7C 2C B0 FD | 	call	#_jm_i2c_spin2_write
1894c     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
18950     46 93 01 F6 | 	mov	objptr, local01
18954     70 2C B0 FD | 	call	#_jm_i2c_spin2_write
18958     46 93 01 F6 | 	mov	objptr, local01
1895c     20 2C B0 FD | 	call	#_jm_i2c_spin2_start
18960     46 93 01 F6 | 	mov	objptr, local01
18964     0D 8C 06 F1 | 	add	local01, #13
18968     46 75 C2 FA | 	rdbyte	arg01, local01
1896c     0D 8C 86 F1 | 	sub	local01, #13
18970     54 2C B0 FD | 	call	#_jm_i2c_spin2_write
18974     01 74 06 F6 | 	mov	arg01, #1
18978     46 93 01 F6 | 	mov	objptr, local01
1897c     D0 2C B0 FD | 	call	#_jm_i2c_spin2_read
18980     1A 77 02 F6 | 	mov	arg02, result1
18984     46 93 01 F6 | 	mov	objptr, local01
18988     4C 2D B0 FD | 	call	#_jm_i2c_spin2_stop
1898c     47 93 01 F6 | 	mov	objptr, local02
18990                 | ' {
18990                 | '     uint8_t rdata = 0xFF;
18990                 | ' 
18990                 | '     mcp23017->i2cBus.start();
18990                 | '     mcp23017->i2cBus.write(mcp23017->writeAddr);
18990                 | '     mcp23017->i2cBus.write(addr);
18990                 | '     mcp23017->i2cBus.start();
18990                 | '     mcp23017->i2cBus.write(mcp23017->readAddr);
18990                 | '     rdata = mcp23017->i2cBus.read(1);
18990                 | '     mcp23017->i2cBus.stop();
18990                 | '     return rdata;
18990     3B 35 02 F6 | 	mov	result1, arg02
18994     A8 F0 03 F6 | 	mov	ptra, fp
18998     B3 00 A0 FD | 	call	#popregs_
1899c                 | _read_register_1529_ret
1899c     2D 00 64 FD | 	ret
189a0                 | 
189a0                 | _write_register_1531
189a0     03 4C 05 F6 | 	mov	COUNT_, #3
189a4     A9 00 A0 FD | 	call	#pushregs_
189a8     3A 8D 02 F6 | 	mov	local01, arg01
189ac     C9 8E 02 F6 | 	mov	local02, objptr
189b0     46 93 01 F6 | 	mov	objptr, local01
189b4     C8 2B B0 FD | 	call	#_jm_i2c_spin2_start
189b8     46 93 01 F6 | 	mov	objptr, local01
189bc     0C 8C 06 F1 | 	add	local01, #12
189c0     46 75 C2 FA | 	rdbyte	arg01, local01
189c4     0C 8C 86 F1 | 	sub	local01, #12
189c8     FC 2B B0 FD | 	call	#_jm_i2c_spin2_write
189cc     1A 91 02 F6 | 	mov	local03, result1
189d0     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
189d4     46 93 01 F6 | 	mov	objptr, local01
189d8     EC 2B B0 FD | 	call	#_jm_i2c_spin2_write
189dc     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
189e0     46 93 01 F6 | 	mov	objptr, local01
189e4     E0 2B B0 FD | 	call	#_jm_i2c_spin2_write
189e8     46 93 01 F6 | 	mov	objptr, local01
189ec     E8 2C B0 FD | 	call	#_jm_i2c_spin2_stop
189f0     47 93 01 F6 | 	mov	objptr, local02
189f4                 | ' 
189f4                 | '     mcp23017->i2cBus.start();
189f4                 | '     ack = mcp23017->i2cBus.write(mcp23017->writeAddr);
189f4                 | '     mcp23017->i2cBus.write(addr);
189f4                 | '     mcp23017->i2cBus.write(value);
189f4                 | '     mcp23017->i2cBus.stop();
189f4                 | '     return ack == 0;
189f4     00 90 0E F2 | 	cmp	local03, #0 wz
189f8     6E 34 62 FD | 	wrz	result1
189fc     A8 F0 03 F6 | 	mov	ptra, fp
18a00     B3 00 A0 FD | 	call	#popregs_
18a04                 | _write_register_1531_ret
18a04     2D 00 64 FD | 	ret
18a08                 | 
18a08                 | _isOneOfThem
18a08                 | ' {
18a08                 | '     while (*set != '\0')
18a08                 | LR__0751
18a08     3B 3B CA FA | 	rdbyte	_var01, arg02 wz
18a0c     20 00 90 AD |  if_e	jmp	#LR__0752
18a10     3A 3B E2 F8 | 	getbyte	_var01, arg01, #0
18a14     3B 3D 02 F6 | 	mov	_var02, arg02
18a18     1E 3F C2 FA | 	rdbyte	_var03, _var02
18a1c     1F 3B 0A F2 | 	cmp	_var01, _var03 wz
18a20                 | '             return  (1) ;
18a20     01 76 06 F1 | 	add	arg02, #1
18a24     01 34 06 A6 |  if_e	mov	result1, #1
18a28     08 00 90 AD |  if_e	jmp	#_isOneOfThem_ret
18a2c     D8 FF 9F FD | 	jmp	#LR__0751
18a30                 | LR__0752
18a30                 | '     }
18a30                 | '     return  (0) ;
18a30     00 34 06 F6 | 	mov	result1, #0
18a34                 | _isOneOfThem_ret
18a34     2D 00 64 FD | 	ret
18a38                 | 
18a38                 | _goWhile
18a38     02 4C 05 F6 | 	mov	COUNT_, #2
18a3c     A9 00 A0 FD | 	call	#pushregs_
18a40     3A 8D 02 F6 | 	mov	local01, arg01
18a44     3B 8F 02 F6 | 	mov	local02, arg02
18a48                 | ' {
18a48                 | '     for (; *str != '\0'; ++str)
18a48                 | LR__0753
18a48     46 77 CA FA | 	rdbyte	arg02, local01 wz
18a4c     20 00 90 AD |  if_e	jmp	#LR__0754
18a50     46 75 C2 FA | 	rdbyte	arg01, local01
18a54     47 77 02 F6 | 	mov	arg02, local02
18a58     AC FF BF FD | 	call	#_isOneOfThem
18a5c     00 34 0E F2 | 	cmp	result1, #0 wz
18a60                 | '             return str;
18a60     46 35 02 A6 |  if_e	mov	result1, local01
18a64     0C 00 90 AD |  if_e	jmp	#LR__0755
18a68     01 8C 06 F1 | 	add	local01, #1
18a6c     D8 FF 9F FD | 	jmp	#LR__0753
18a70                 | LR__0754
18a70                 | '     }
18a70                 | '     return 0;
18a70     00 34 06 F6 | 	mov	result1, #0
18a74                 | LR__0755
18a74     A8 F0 03 F6 | 	mov	ptra, fp
18a78     B3 00 A0 FD | 	call	#popregs_
18a7c                 | _goWhile_ret
18a7c     2D 00 64 FD | 	ret
18a80                 | 
18a80                 | _goNum
18a80     01 4C 05 F6 | 	mov	COUNT_, #1
18a84     A9 00 A0 FD | 	call	#pushregs_
18a88     3A 8D 02 F6 | 	mov	local01, arg01
18a8c                 | ' {
18a8c                 | '     for (; *str != '\0'; ++str)
18a8c                 | LR__0756
18a8c     46 75 CA FA | 	rdbyte	arg01, local01 wz
18a90     34 00 90 AD |  if_e	jmp	#LR__0757
18a94     46 75 C2 FA | 	rdbyte	arg01, local01
18a98                 | ' {
18a98                 | '   return  (__ctype_get(c) & 0x02 ) ;
18a98     80 74 36 F3 | 	fle	arg01, #128 wc
18a9c                 | '     return __ctype[c];
18a9c     56 01 00 FF 
18aa0     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18aa4     EB 74 02 F1 | 	add	arg01, ptr__dat__
18aa8     3A 35 C2 FA | 	rdbyte	result1, arg01
18aac     56 01 00 FF 
18ab0     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18ab4     02 34 0E F5 | 	and	result1, #2 wz
18ab8                 | '             return str;
18ab8     46 35 02 A6 |  if_e	mov	result1, local01
18abc     0C 00 90 AD |  if_e	jmp	#LR__0758
18ac0     01 8C 06 F1 | 	add	local01, #1
18ac4     C4 FF 9F FD | 	jmp	#LR__0756
18ac8                 | LR__0757
18ac8                 | '     }
18ac8                 | '     return 0;
18ac8     00 34 06 F6 | 	mov	result1, #0
18acc                 | LR__0758
18acc     A8 F0 03 F6 | 	mov	ptra, fp
18ad0     B3 00 A0 FD | 	call	#popregs_
18ad4                 | _goNum_ret
18ad4     2D 00 64 FD | 	ret
18ad8                 | 
18ad8                 | _setToNull
18ad8     01 4C 05 F6 | 	mov	COUNT_, #1
18adc     A9 00 A0 FD | 	call	#pushregs_
18ae0     3A 8D 02 F6 | 	mov	local01, arg01
18ae4     46 75 C2 FA | 	rdbyte	arg01, local01
18ae8     52 01 00 FF 
18aec     CD 77 06 F6 | 	mov	arg02, ##@LR__2252
18af0     14 FF BF FD | 	call	#_isOneOfThem
18af4     00 34 0E F2 | 	cmp	result1, #0 wz
18af8     46 35 02 A6 |  if_e	mov	result1, local01
18afc     01 8C 06 A1 |  if_e	add	local01, #1
18b00     1A 01 48 AC |  if_e	wrbyte	#0, result1
18b04                 | '         *ch++ = '\0';
18b04                 | '     return ch;
18b04     46 35 02 F6 | 	mov	result1, local01
18b08     A8 F0 03 F6 | 	mov	ptra, fp
18b0c     B3 00 A0 FD | 	call	#popregs_
18b10                 | _setToNull_ret
18b10     2D 00 64 FD | 	ret
18b14                 | 
18b14                 | _isEndOfPrimitive
18b14     07 4C 05 F6 | 	mov	COUNT_, #7
18b18     A9 00 A0 FD | 	call	#pushregs_
18b1c     3A 8D 02 F6 | 	mov	local01, arg01
18b20                 | ' {
18b20                 | '     return ch == ',' || isOneOfThem(ch, " \n\r\t\f") || isOneOfThem(ch, "}]");
18b20     00 8E 06 F6 | 	mov	local02, #0
18b24     46 91 E2 F8 | 	getbyte	local03, local01, #0
18b28     2C 90 0E F2 | 	cmp	local03, #44 wz
18b2c     38 00 90 AD |  if_e	jmp	#LR__0759
18b30     52 01 00 FF 
18b34     D0 77 06 F6 | 	mov	arg02, ##@LR__2253
18b38     46 75 02 F6 | 	mov	arg01, local01
18b3c     C8 FE BF FD | 	call	#_isOneOfThem
18b40     1A 93 0A F6 | 	mov	local04, result1 wz
18b44     20 00 90 5D |  if_ne	jmp	#LR__0759
18b48     52 01 00 FF 
18b4c     D6 95 06 F6 | 	mov	local05, ##@LR__2254
18b50     4A 97 02 F6 | 	mov	local06, local05
18b54     46 75 02 F6 | 	mov	arg01, local01
18b58     4B 77 02 F6 | 	mov	arg02, local06
18b5c     A8 FE BF FD | 	call	#_isOneOfThem
18b60     1A 99 0A F6 | 	mov	local07, result1 wz
18b64     04 00 90 AD |  if_e	jmp	#LR__0760
18b68                 | LR__0759
18b68     01 8E 66 F5 | 	xor	local02, #1
18b6c                 | LR__0760
18b6c     47 35 02 F6 | 	mov	result1, local02
18b70     A8 F0 03 F6 | 	mov	ptra, fp
18b74     B3 00 A0 FD | 	call	#popregs_
18b78                 | _isEndOfPrimitive_ret
18b78     2D 00 64 FD | 	ret
18b7c                 | 
18b7c                 | _getEscape
18b7c                 | '     for (i = 0; i < sizeof pair / sizeof *pair; ++i)
18b7c     00 3A 06 F6 | 	mov	_var01, #0
18b80                 | LR__0761
18b80     08 3A 16 F2 | 	cmp	_var01, #8 wc
18b84     5C 00 90 3D |  if_ae	jmp	#LR__0763
18b88     1D 35 02 F6 | 	mov	result1, _var01
18b8c     02 34 66 F0 | 	shl	result1, #2
18b90     17 01 00 FF 
18b94     64 D6 05 F1 | 	add	ptr__dat__, ##142948
18b98     EB 34 02 F1 | 	add	result1, ptr__dat__
18b9c     1A 35 C2 FA | 	rdbyte	result1, result1
18ba0     3A 3D E2 F8 | 	getbyte	_var02, arg01, #0
18ba4     1E 35 0A F2 | 	cmp	result1, _var02 wz
18ba8     17 01 00 FF 
18bac     64 D6 85 F1 | 	sub	ptr__dat__, ##142948
18bb0     28 00 90 5D |  if_ne	jmp	#LR__0762
18bb4                 | '             return pair[i].code;
18bb4     1D 35 02 F6 | 	mov	result1, _var01
18bb8     02 34 66 F0 | 	shl	result1, #2
18bbc     17 01 00 FF 
18bc0     64 D6 05 F1 | 	add	ptr__dat__, ##142948
18bc4     EB 34 02 F1 | 	add	result1, ptr__dat__
18bc8     01 34 06 F1 | 	add	result1, #1
18bcc     1A 35 C2 FA | 	rdbyte	result1, result1
18bd0     17 01 00 FF 
18bd4     64 D6 85 F1 | 	sub	ptr__dat__, ##142948
18bd8     0C 00 90 FD | 	jmp	#_getEscape_ret
18bdc                 | LR__0762
18bdc     01 3A 06 F1 | 	add	_var01, #1
18be0     9C FF 9F FD | 	jmp	#LR__0761
18be4                 | LR__0763
18be4                 | '     return '\0';
18be4     00 34 06 F6 | 	mov	result1, #0
18be8                 | _getEscape_ret
18be8     2D 00 64 FD | 	ret
18bec                 | 
18bec                 | _getCharFromUnicode
18bec     02 4C 05 F6 | 	mov	COUNT_, #2
18bf0     A9 00 A0 FD | 	call	#pushregs_
18bf4     3A 8D 02 F6 | 	mov	local01, arg01
18bf8                 | '     for (i = 0; i < 4; ++i)
18bf8     00 8E 06 F6 | 	mov	local02, #0
18bfc                 | LR__0764
18bfc     04 8E 16 F2 | 	cmp	local02, #4 wc
18c00     3C 00 90 3D |  if_ae	jmp	#LR__0765
18c04     47 75 02 F6 | 	mov	arg01, local02
18c08     46 75 02 F1 | 	add	arg01, local01
18c0c     3A 75 C2 FA | 	rdbyte	arg01, arg01
18c10                 | ' {
18c10                 | '   return  (__ctype_get(c) & 0x40 ) ;
18c10     80 74 36 F3 | 	fle	arg01, #128 wc
18c14                 | '     return __ctype[c];
18c14     56 01 00 FF 
18c18     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18c1c     EB 74 02 F1 | 	add	arg01, ptr__dat__
18c20     3A 35 C2 FA | 	rdbyte	result1, arg01
18c24     56 01 00 FF 
18c28     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18c2c     40 34 0E F5 | 	and	result1, #64 wz
18c30                 | '             return '\0';
18c30     00 34 06 A6 |  if_e	mov	result1, #0
18c34     0C 00 90 AD |  if_e	jmp	#LR__0766
18c38     01 8E 06 F1 | 	add	local02, #1
18c3c     BC FF 9F FD | 	jmp	#LR__0764
18c40                 | LR__0765
18c40                 | '     return '?';
18c40     3F 34 06 F6 | 	mov	result1, #63
18c44                 | LR__0766
18c44     A8 F0 03 F6 | 	mov	ptra, fp
18c48     B3 00 A0 FD | 	call	#popregs_
18c4c                 | _getCharFromUnicode_ret
18c4c     2D 00 64 FD | 	ret
18c50                 | 
18c50                 | _parseString
18c50     06 4C 05 F6 | 	mov	COUNT_, #6
18c54     A9 00 A0 FD | 	call	#pushregs_
18c58     3A 8D 02 F6 | 	mov	local01, arg01
18c5c     46 8F 02 F6 | 	mov	local02, local01
18c60                 | '     for (; *head; ++head, ++tail)
18c60                 | LR__0767
18c60     47 91 CA FA | 	rdbyte	local03, local02 wz
18c64     98 00 90 AD |  if_e	jmp	#LR__0771
18c68     47 93 C2 FA | 	rdbyte	local04, local02
18c6c     22 92 0E F2 | 	cmp	local04, #34 wz
18c70     46 01 48 AC |  if_e	wrbyte	#0, local01
18c74                 | '         {
18c74                 | '             *tail = '\0';
18c74                 | '             return (char *)++head;
18c74     01 8E 06 A1 |  if_e	add	local02, #1
18c78     47 35 02 A6 |  if_e	mov	result1, local02
18c7c     84 00 90 AD |  if_e	jmp	#LR__0772
18c80     47 93 C2 FA | 	rdbyte	local04, local02
18c84     5C 92 0E F2 | 	cmp	local04, #92 wz
18c88     60 00 90 5D |  if_ne	jmp	#LR__0769
18c8c     01 8E 06 F1 | 	add	local02, #1
18c90     47 93 C2 FA | 	rdbyte	local04, local02
18c94     75 92 0E F2 | 	cmp	local04, #117 wz
18c98     2C 00 90 5D |  if_ne	jmp	#LR__0768
18c9c     01 8E 06 F1 | 	add	local02, #1
18ca0     47 75 02 F6 | 	mov	arg01, local02
18ca4     44 FF BF FD | 	call	#_getCharFromUnicode
18ca8     1A 95 02 F6 | 	mov	local05, result1
18cac     4A 93 02 F6 | 	mov	local04, local05
18cb0     07 92 4E F7 | 	zerox	local04, #7 wz
18cb4                 | '                     return 0;
18cb4     00 34 06 A6 |  if_e	mov	result1, #0
18cb8     48 00 90 AD |  if_e	jmp	#LR__0772
18cbc     46 95 42 FC | 	wrbyte	local05, local01
18cc0     03 8E 06 F1 | 	add	local02, #3
18cc4     2C 00 90 FD | 	jmp	#LR__0770
18cc8                 | LR__0768
18cc8     47 75 C2 FA | 	rdbyte	arg01, local02
18ccc     AC FE BF FD | 	call	#_getEscape
18cd0     1A 97 02 F6 | 	mov	local06, result1
18cd4     4B 93 02 F6 | 	mov	local04, local06
18cd8     07 92 4E F7 | 	zerox	local04, #7 wz
18cdc                 | '                     return 0;
18cdc     00 34 06 A6 |  if_e	mov	result1, #0
18ce0     20 00 90 AD |  if_e	jmp	#LR__0772
18ce4     46 97 42 FC | 	wrbyte	local06, local01
18ce8     08 00 90 FD | 	jmp	#LR__0770
18cec                 | LR__0769
18cec     47 93 C2 FA | 	rdbyte	local04, local02
18cf0     46 93 42 FC | 	wrbyte	local04, local01
18cf4                 | LR__0770
18cf4     01 8E 06 F1 | 	add	local02, #1
18cf8     01 8C 06 F1 | 	add	local01, #1
18cfc     60 FF 9F FD | 	jmp	#LR__0767
18d00                 | LR__0771
18d00                 | '             *tail = *head;
18d00                 | '     }
18d00                 | '     return 0;
18d00     00 34 06 F6 | 	mov	result1, #0
18d04                 | LR__0772
18d04     A8 F0 03 F6 | 	mov	ptra, fp
18d08     B3 00 A0 FD | 	call	#popregs_
18d0c                 | _parseString_ret
18d0c     2D 00 64 FD | 	ret
18d10                 | 
18d10                 | _propertyName
18d10     03 4C 05 F6 | 	mov	COUNT_, #3
18d14     A9 00 A0 FD | 	call	#pushregs_
18d18     3B 8D 02 F6 | 	mov	local01, arg02
18d1c     01 74 06 F1 | 	add	arg01, #1
18d20     04 8C 06 F1 | 	add	local01, #4
18d24     46 75 62 FC | 	wrlong	arg01, local01
18d28     24 FF BF FD | 	call	#_parseString
18d2c     1A 8D 0A F6 | 	mov	local01, result1 wz
18d30                 | '         return 0;
18d30     00 34 06 A6 |  if_e	mov	result1, #0
18d34     3C 00 90 AD |  if_e	jmp	#LR__0773
18d38     46 75 02 F6 | 	mov	arg01, local01
18d3c                 | ' {
18d3c                 | '     return goWhile(str, " \n\r\t\f");
18d3c     52 01 00 FF 
18d40     C7 77 06 F6 | 	mov	arg02, ##@LR__2251
18d44     F0 FC BF FD | 	call	#_goWhile
18d48     1A 8F 0A F6 | 	mov	local02, result1 wz
18d4c                 | '         return 0;
18d4c     00 34 06 A6 |  if_e	mov	result1, #0
18d50     20 00 90 AD |  if_e	jmp	#LR__0773
18d54     47 91 C2 FA | 	rdbyte	local03, local02
18d58     3A 90 0E F2 | 	cmp	local03, #58 wz
18d5c                 | '         return 0;
18d5c     01 8E 06 F1 | 	add	local02, #1
18d60     00 34 06 56 |  if_ne	mov	result1, #0
18d64                 | '     return goBlank(ptr);
18d64     47 75 02 A6 |  if_e	mov	arg01, local02
18d68                 | ' {
18d68                 | '     return goWhile(str, " \n\r\t\f");
18d68     52 01 00 AF 
18d6c     C7 77 06 A6 |  if_e	mov	arg02, ##@LR__2251
18d70     C4 FC BF AD |  if_e	call	#_goWhile
18d74                 | LR__0773
18d74     A8 F0 03 F6 | 	mov	ptra, fp
18d78     B3 00 A0 FD | 	call	#popregs_
18d7c                 | _propertyName_ret
18d7c     2D 00 64 FD | 	ret
18d80                 | 
18d80                 | _textValue
18d80     02 4C 05 F6 | 	mov	COUNT_, #2
18d84     A9 00 A0 FD | 	call	#pushregs_
18d88     3B 8D 02 F6 | 	mov	local01, arg02
18d8c     08 8C 06 F1 | 	add	local01, #8
18d90     46 8F 02 FB | 	rdlong	local02, local01
18d94     01 8E 06 F1 | 	add	local02, #1
18d98     46 8F 62 FC | 	wrlong	local02, local01
18d9c     08 8C 86 F1 | 	sub	local01, #8
18da0     01 74 06 F1 | 	add	arg01, #1
18da4     A8 FE BF FD | 	call	#_parseString
18da8     1A 8F 0A F6 | 	mov	local02, result1 wz
18dac                 | '         return 0;
18dac     00 34 06 A6 |  if_e	mov	result1, #0
18db0     10 8C 06 51 |  if_ne	add	local01, #16
18db4     46 05 68 5C |  if_ne	wrlong	#2, local01
18db8                 | '     property->type = JSON_TEXT;
18db8                 | '     return ptr;
18db8     47 35 02 56 |  if_ne	mov	result1, local02
18dbc     A8 F0 03 F6 | 	mov	ptra, fp
18dc0     B3 00 A0 FD | 	call	#popregs_
18dc4                 | _textValue_ret
18dc4     2D 00 64 FD | 	ret
18dc8                 | 
18dc8                 | _checkStr
18dc8                 | ' {
18dc8                 | '     while (*str)
18dc8                 | LR__0774
18dc8     3B 3B CA FA | 	rdbyte	_var01, arg02 wz
18dcc     28 00 90 AD |  if_e	jmp	#LR__0775
18dd0     3A 3D 02 F6 | 	mov	_var02, arg01
18dd4     1E 3B C2 FA | 	rdbyte	_var01, _var02
18dd8     3B 3F 02 F6 | 	mov	_var03, arg02
18ddc     1F 41 C2 FA | 	rdbyte	_var04, _var03
18de0     20 3B 0A F2 | 	cmp	_var01, _var04 wz
18de4                 | '             return 0;
18de4     01 74 06 F1 | 	add	arg01, #1
18de8     01 76 06 F1 | 	add	arg02, #1
18dec     00 34 06 56 |  if_ne	mov	result1, #0
18df0     08 00 90 5D |  if_ne	jmp	#_checkStr_ret
18df4     D0 FF 9F FD | 	jmp	#LR__0774
18df8                 | LR__0775
18df8                 | '     return ptr;
18df8     3A 35 02 F6 | 	mov	result1, arg01
18dfc                 | _checkStr_ret
18dfc     2D 00 64 FD | 	ret
18e00                 | 
18e00                 | _primitiveValue
18e00     03 4C 05 F6 | 	mov	COUNT_, #3
18e04     A9 00 A0 FD | 	call	#pushregs_
18e08     3B 8D 02 F6 | 	mov	local01, arg02
18e0c     3D 8F 02 F6 | 	mov	local02, arg04
18e10     3C 77 02 F6 | 	mov	arg02, arg03
18e14     B0 FF BF FD | 	call	#_checkStr
18e18     1A 91 0A F6 | 	mov	local03, result1 wz
18e1c     10 00 90 AD |  if_e	jmp	#LR__0776
18e20     48 75 C2 FA | 	rdbyte	arg01, local03
18e24     EC FC BF FD | 	call	#_isEndOfPrimitive
18e28     00 34 4E F2 | 	cmps	result1, #0 wz
18e2c     08 00 90 5D |  if_ne	jmp	#LR__0777
18e30                 | LR__0776
18e30                 | '         return 0;
18e30     00 34 06 F6 | 	mov	result1, #0
18e34     10 00 90 FD | 	jmp	#LR__0778
18e38                 | LR__0777
18e38     48 75 02 F6 | 	mov	arg01, local03
18e3c     98 FC BF FD | 	call	#_setToNull
18e40     10 8C 06 F1 | 	add	local01, #16
18e44     46 8F 62 FC | 	wrlong	local02, local01
18e48                 | '     ptr = setToNull(ptr);
18e48                 | '     property->type = type;
18e48                 | '     return ptr;
18e48                 | LR__0778
18e48     A8 F0 03 F6 | 	mov	ptra, fp
18e4c     B3 00 A0 FD | 	call	#popregs_
18e50                 | _primitiveValue_ret
18e50     2D 00 64 FD | 	ret
18e54                 | 
18e54                 | _expValue
18e54     01 4C 05 F6 | 	mov	COUNT_, #1
18e58     A9 00 A0 FD | 	call	#pushregs_
18e5c     3A 8D 02 F6 | 	mov	local01, arg01
18e60     46 75 C2 FA | 	rdbyte	arg01, local01
18e64     2D 74 0E F2 | 	cmp	arg01, #45 wz
18e68     46 75 C2 5A |  if_ne	rdbyte	arg01, local01
18e6c     2B 74 0E 52 |  if_ne	cmp	arg01, #43 wz
18e70     01 8C 06 A1 |  if_e	add	local01, #1
18e74     46 75 C2 FA | 	rdbyte	arg01, local01
18e78                 | ' {
18e78                 | '   return  (__ctype_get(c) & 0x02 ) ;
18e78     80 74 36 F3 | 	fle	arg01, #128 wc
18e7c                 | '     return __ctype[c];
18e7c     56 01 00 FF 
18e80     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18e84     EB 74 02 F1 | 	add	arg01, ptr__dat__
18e88     3A 35 C2 FA | 	rdbyte	result1, arg01
18e8c     56 01 00 FF 
18e90     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18e94     02 34 0E F5 | 	and	result1, #2 wz
18e98                 | '         return 0;
18e98     00 34 06 A6 |  if_e	mov	result1, #0
18e9c     01 8C 06 51 |  if_ne	add	local01, #1
18ea0     46 75 02 56 |  if_ne	mov	arg01, local01
18ea4     D8 FB BF 5D |  if_ne	call	#_goNum
18ea8                 | '     ptr = goNum(++ptr);
18ea8                 | '     return ptr;
18ea8     A8 F0 03 F6 | 	mov	ptra, fp
18eac     B3 00 A0 FD | 	call	#popregs_
18eb0                 | _expValue_ret
18eb0     2D 00 64 FD | 	ret
18eb4                 | 
18eb4                 | _fraqValue
18eb4     01 4C 05 F6 | 	mov	COUNT_, #1
18eb8     A9 00 A0 FD | 	call	#pushregs_
18ebc     3A 8D 02 F6 | 	mov	local01, arg01
18ec0     46 75 C2 FA | 	rdbyte	arg01, local01
18ec4                 | ' {
18ec4                 | '   return  (__ctype_get(c) & 0x02 ) ;
18ec4     80 74 36 F3 | 	fle	arg01, #128 wc
18ec8                 | '     return __ctype[c];
18ec8     56 01 00 FF 
18ecc     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18ed0     EB 74 02 F1 | 	add	arg01, ptr__dat__
18ed4     3A 35 C2 FA | 	rdbyte	result1, arg01
18ed8     56 01 00 FF 
18edc     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18ee0     02 34 0E F5 | 	and	result1, #2 wz
18ee4                 | '         return 0;
18ee4     00 34 06 A6 |  if_e	mov	result1, #0
18ee8     18 00 90 AD |  if_e	jmp	#LR__0779
18eec     01 8C 06 F1 | 	add	local01, #1
18ef0     46 75 02 F6 | 	mov	arg01, local01
18ef4     88 FB BF FD | 	call	#_goNum
18ef8     1A 8D 0A F6 | 	mov	local01, result1 wz
18efc                 | '         return 0;
18efc     00 34 06 A6 |  if_e	mov	result1, #0
18f00                 | '     return ptr;
18f00     46 35 02 56 |  if_ne	mov	result1, local01
18f04                 | LR__0779
18f04     A8 F0 03 F6 | 	mov	ptra, fp
18f08     B3 00 A0 FD | 	call	#popregs_
18f0c                 | _fraqValue_ret
18f0c     2D 00 64 FD | 	ret
18f10                 | 
18f10                 | _numValue
18f10     06 4C 05 F6 | 	mov	COUNT_, #6
18f14     A9 00 A0 FD | 	call	#pushregs_
18f18     3A 8D 02 F6 | 	mov	local01, arg01
18f1c     3B 8F 02 F6 | 	mov	local02, arg02
18f20     46 75 C2 FA | 	rdbyte	arg01, local01
18f24     2D 74 0E F2 | 	cmp	arg01, #45 wz
18f28     01 8C 06 A1 |  if_e	add	local01, #1
18f2c     46 91 C2 FA | 	rdbyte	local03, local01
18f30     48 75 02 F6 | 	mov	arg01, local03
18f34                 | ' {
18f34                 | '   return  (__ctype_get(c) & 0x02 ) ;
18f34     80 74 36 F3 | 	fle	arg01, #128 wc
18f38                 | '     return __ctype[c];
18f38     56 01 00 FF 
18f3c     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18f40     EB 74 02 F1 | 	add	arg01, ptr__dat__
18f44     3A 35 C2 FA | 	rdbyte	result1, arg01
18f48     56 01 00 FF 
18f4c     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18f50     02 34 0E F5 | 	and	result1, #2 wz
18f54                 | '         return 0;
18f54     00 34 06 A6 |  if_e	mov	result1, #0
18f58     8C 01 90 AD |  if_e	jmp	#LR__0786
18f5c     46 75 C2 FA | 	rdbyte	arg01, local01
18f60     30 74 0E F2 | 	cmp	arg01, #48 wz
18f64     18 00 90 AD |  if_e	jmp	#LR__0780
18f68     46 75 02 F6 | 	mov	arg01, local01
18f6c     10 FB BF FD | 	call	#_goNum
18f70     1A 8D 0A F6 | 	mov	local01, result1 wz
18f74                 | '             return 0;
18f74     00 34 06 A6 |  if_e	mov	result1, #0
18f78     6C 01 90 AD |  if_e	jmp	#LR__0786
18f7c     30 00 90 FD | 	jmp	#LR__0781
18f80                 | LR__0780
18f80     01 8C 06 F1 | 	add	local01, #1
18f84     46 75 C2 FA | 	rdbyte	arg01, local01
18f88                 | ' {
18f88                 | '   return  (__ctype_get(c) & 0x02 ) ;
18f88     80 74 36 F3 | 	fle	arg01, #128 wc
18f8c                 | '     return __ctype[c];
18f8c     56 01 00 FF 
18f90     B0 D6 05 F1 | 	add	ptr__dat__, ##175280
18f94     EB 74 02 F1 | 	add	arg01, ptr__dat__
18f98     3A 35 C2 FA | 	rdbyte	result1, arg01
18f9c     56 01 00 FF 
18fa0     B0 D6 85 F1 | 	sub	ptr__dat__, ##175280
18fa4     02 34 0E F5 | 	and	result1, #2 wz
18fa8                 | '         return 0;
18fa8     00 34 06 56 |  if_ne	mov	result1, #0
18fac     38 01 90 5D |  if_ne	jmp	#LR__0786
18fb0                 | LR__0781
18fb0     10 8E 06 F1 | 	add	local02, #16
18fb4     47 09 68 FC | 	wrlong	#4, local02
18fb8     10 8E 86 F1 | 	sub	local02, #16
18fbc     46 75 C2 FA | 	rdbyte	arg01, local01
18fc0     2E 74 0E F2 | 	cmp	arg01, #46 wz
18fc4     24 00 90 5D |  if_ne	jmp	#LR__0782
18fc8     01 8C 06 F1 | 	add	local01, #1
18fcc     46 75 02 F6 | 	mov	arg01, local01
18fd0     E0 FE BF FD | 	call	#_fraqValue
18fd4     1A 8D 0A F6 | 	mov	local01, result1 wz
18fd8                 | '             return 0;
18fd8     00 34 06 A6 |  if_e	mov	result1, #0
18fdc     08 01 90 AD |  if_e	jmp	#LR__0786
18fe0     10 8E 06 F1 | 	add	local02, #16
18fe4     47 0B 68 FC | 	wrlong	#5, local02
18fe8     10 8E 86 F1 | 	sub	local02, #16
18fec                 | LR__0782
18fec     46 75 C2 FA | 	rdbyte	arg01, local01
18ff0     65 74 0E F2 | 	cmp	arg01, #101 wz
18ff4     46 91 C2 5A |  if_ne	rdbyte	local03, local01
18ff8     45 90 0E 52 |  if_ne	cmp	local03, #69 wz
18ffc     24 00 90 5D |  if_ne	jmp	#LR__0783
19000     01 8C 06 F1 | 	add	local01, #1
19004     46 75 02 F6 | 	mov	arg01, local01
19008     48 FE BF FD | 	call	#_expValue
1900c     1A 8D 0A F6 | 	mov	local01, result1 wz
19010                 | '             return 0;
19010     00 34 06 A6 |  if_e	mov	result1, #0
19014     D0 00 90 AD |  if_e	jmp	#LR__0786
19018     10 8E 06 F1 | 	add	local02, #16
1901c     47 0B 68 FC | 	wrlong	#5, local02
19020     10 8E 86 F1 | 	sub	local02, #16
19024                 | LR__0783
19024     46 75 C2 FA | 	rdbyte	arg01, local01
19028     E8 FA BF FD | 	call	#_isEndOfPrimitive
1902c     00 34 0E F2 | 	cmp	result1, #0 wz
19030                 | '         return 0;
19030     00 34 06 A6 |  if_e	mov	result1, #0
19034     B0 00 90 AD |  if_e	jmp	#LR__0786
19038     10 8E 06 F1 | 	add	local02, #16
1903c     47 91 02 FB | 	rdlong	local03, local02
19040     10 8E 86 F1 | 	sub	local02, #16
19044     04 90 0E F2 | 	cmp	local03, #4 wz
19048     94 00 90 5D |  if_ne	jmp	#LR__0785
1904c     08 8E 06 F1 | 	add	local02, #8
19050     47 75 02 FB | 	rdlong	arg01, local02
19054     00 92 06 F6 | 	mov	local04, #0
19058     3A 95 C2 FA | 	rdbyte	local05, arg01
1905c     2D 94 0E F2 | 	cmp	local05, #45 wz
19060     01 92 06 A6 |  if_e	mov	local04, #1
19064     49 97 0A F6 | 	mov	local06, local04 wz
19068     15 94 06 56 |  if_ne	mov	local05, #21
1906c     14 94 06 A6 |  if_e	mov	local05, #20
19070     01 94 86 F1 | 	sub	local05, #1
19074     46 91 02 F6 | 	mov	local03, local01
19078     3A 91 82 F1 | 	sub	local03, arg01
1907c     4A 91 1A F2 | 	cmp	local03, local05 wcz
19080                 | '             return 0;
19080     00 34 06 16 |  if_a	mov	result1, #0
19084     60 00 90 1D |  if_a	jmp	#LR__0786
19088     4A 91 0A F2 | 	cmp	local03, local05 wz
1908c     50 00 90 5D |  if_ne	jmp	#LR__0784
19090     46 95 C2 FA | 	rdbyte	local05, local01
19094     46 01 48 FC | 	wrbyte	#0, local01
19098     00 96 0E F2 | 	cmp	local06, #0 wz
1909c     17 01 00 5F 
190a0     84 D6 05 51 |  if_ne	add	ptr__dat__, ##142980
190a4     EB 92 02 56 |  if_ne	mov	local04, ptr__dat__
190a8     17 01 00 5F 
190ac     84 D6 85 51 |  if_ne	sub	ptr__dat__, ##142980
190b0     17 01 00 AF 
190b4     99 D6 05 A1 |  if_e	add	ptr__dat__, ##143001
190b8     EB 92 02 A6 |  if_e	mov	local04, ptr__dat__
190bc     17 01 00 AF 
190c0     99 D6 85 A1 |  if_e	sub	ptr__dat__, ##143001
190c4     3A 77 02 F6 | 	mov	arg02, arg01
190c8     49 75 02 F6 | 	mov	arg01, local04
190cc     CC CE BE FD | 	call	#_strcmp
190d0     00 34 56 F2 | 	cmps	result1, #0 wc
190d4                 | '                 return 0;
190d4     00 34 06 C6 |  if_b	mov	result1, #0
190d8     0C 00 90 CD |  if_b	jmp	#LR__0786
190dc     46 95 42 FC | 	wrbyte	local05, local01
190e0                 | LR__0784
190e0                 | LR__0785
190e0     46 75 02 F6 | 	mov	arg01, local01
190e4     F0 F9 BF FD | 	call	#_setToNull
190e8                 | '             *ptr = tmp;
190e8                 | '         }
190e8                 | '     }
190e8                 | '     ptr = setToNull(ptr);
190e8                 | '     return ptr;
190e8                 | LR__0786
190e8     A8 F0 03 F6 | 	mov	ptra, fp
190ec     B3 00 A0 FD | 	call	#popregs_
190f0                 | _numValue_ret
190f0     2D 00 64 FD | 	ret
190f4                 | 
190f4                 | _add
190f4     3B 01 68 FC | 	wrlong	#0, arg02
190f8     08 74 06 F1 | 	add	arg01, #8
190fc     3A 3B 0A FB | 	rdlong	_var01, arg01 wz
19100     08 74 86 F1 | 	sub	arg01, #8
19104     08 74 06 A1 |  if_e	add	arg01, #8
19108     3A 77 62 AC |  if_e	wrlong	arg02, arg01
1910c     04 74 06 A1 |  if_e	add	arg01, #4
19110     3A 77 62 AC |  if_e	wrlong	arg02, arg01
19114     0C 74 06 51 |  if_ne	add	arg01, #12
19118     3A 3B 02 5B |  if_ne	rdlong	_var01, arg01
1911c     1D 77 62 5C |  if_ne	wrlong	arg02, _var01
19120     3A 77 62 5C |  if_ne	wrlong	arg02, arg01
19124                 | _add_ret
19124     2D 00 64 FD | 	ret
19128                 | 
19128                 | _objValue
19128     0E 4C 05 F6 | 	mov	COUNT_, #14
1912c     A9 00 A0 FD | 	call	#pushregs_
19130     3A 8D 02 F6 | 	mov	local01, arg01
19134     3B 8F 02 F6 | 	mov	local02, arg02
19138     3C 91 02 F6 | 	mov	local03, arg03
1913c     46 93 C2 FA | 	rdbyte	local04, local01
19140     7B 92 0E F2 | 	cmp	local04, #123 wz
19144     00 94 06 A6 |  if_e	mov	local05, #0
19148     01 94 06 56 |  if_ne	mov	local05, #1
1914c     10 8E 06 F1 | 	add	local02, #16
19150     47 95 62 FC | 	wrlong	local05, local02
19154     00 94 06 F6 | 	mov	local05, #0
19158     08 8E 86 F1 | 	sub	local02, #8
1915c     47 01 68 FC | 	wrlong	#0, local02
19160     08 8E 86 F1 | 	sub	local02, #8
19164     47 01 68 FC | 	wrlong	#0, local02
19168     01 8C 06 F1 | 	add	local01, #1
1916c                 | ' {
1916c                 | ' 
1916c                 | ' 
1916c                 | '     obj->type = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
1916c                 | '     obj->u.c.child = 0;
1916c                 | '     obj->sibling = 0;
1916c                 | '     ptr++;
1916c                 | '     for (;;)
1916c                 | LR__0787
1916c     46 75 02 F6 | 	mov	arg01, local01
19170                 | ' {
19170                 | '     return goWhile(str, " \n\r\t\f");
19170     52 01 00 FF 
19174     C7 77 06 F6 | 	mov	arg02, ##@LR__2251
19178     BC F8 BF FD | 	call	#_goWhile
1917c     1A 8D 0A F6 | 	mov	local01, result1 wz
19180     14 00 90 5D |  if_ne	jmp	#LR__0788
19184     52 01 00 FF 
19188     E9 75 06 F6 | 	mov	arg01, ##@LR__2258
1918c     58 8B BE FD | 	call	#_printf
19190                 | '         {
19190                 | '             printf("Error: Unexpected goblank error.\n");
19190                 | '             return 0;
19190     00 34 06 F6 | 	mov	result1, #0
19194     6C 02 90 FD | 	jmp	#LR__0802
19198                 | LR__0788
19198     46 95 C2 FA | 	rdbyte	local05, local01
1919c     2C 94 0E F2 | 	cmp	local05, #44 wz
191a0     01 8C 06 A1 |  if_e	add	local01, #1
191a4                 | '         {
191a4                 | '             ++ptr;
191a4                 | '             continue;
191a4     C4 FF 9F AD |  if_e	jmp	#LR__0787
191a8     10 8E 06 F1 | 	add	local02, #16
191ac     47 93 0A FB | 	rdlong	local04, local02 wz
191b0     10 8E 86 F1 | 	sub	local02, #16
191b4     7D 94 06 A6 |  if_e	mov	local05, #125
191b8     5D 94 06 56 |  if_ne	mov	local05, #93
191bc     4A 97 02 F6 | 	mov	local06, local05
191c0     46 95 C2 FA | 	rdbyte	local05, local01
191c4     4B 93 E2 F8 | 	getbyte	local04, local06, #0
191c8     49 95 0A F2 | 	cmp	local05, local04 wz
191cc     24 00 90 5D |  if_ne	jmp	#LR__0789
191d0     46 01 48 FC | 	wrbyte	#0, local01
191d4     47 99 0A FB | 	rdlong	local07, local02 wz
191d8                 | '                 return ++ptr;
191d8     01 8C 06 A1 |  if_e	add	local01, #1
191dc     46 35 02 A6 |  if_e	mov	result1, local01
191e0     20 02 90 AD |  if_e	jmp	#LR__0802
191e4     47 01 68 FC | 	wrlong	#0, local02
191e8     4C 8F 02 F6 | 	mov	local02, local07
191ec     01 8C 06 F1 | 	add	local01, #1
191f0                 | '             obj->sibling = 0;
191f0                 | '             obj = parentObj;
191f0                 | '             ++ptr;
191f0                 | '             continue;
191f0     78 FF 9F FD | 	jmp	#LR__0787
191f4                 | LR__0789
191f4     04 90 06 F1 | 	add	local03, #4
191f8     48 9B 02 FB | 	rdlong	local08, local03
191fc     04 90 86 F1 | 	sub	local03, #4
19200     4D 95 02 F6 | 	mov	local05, local08
19204     4A 93 02 FB | 	rdlong	local04, local05
19208     04 94 06 F1 | 	add	local05, #4
1920c     4A 9D 02 FB | 	rdlong	local09, local05
19210     4E 9F 02 F6 | 	mov	local10, local09
19214     48 A1 02 F6 | 	mov	local11, local03
19218     50 75 02 F6 | 	mov	arg01, local11
1921c     C9 A2 02 F6 | 	mov	local12, objptr
19220     49 93 01 F6 | 	mov	objptr, local04
19224     2D 9E 62 FD | 	call	local10
19228     51 93 01 F6 | 	mov	objptr, local12
1922c     1A A5 0A F6 | 	mov	local13, result1 wz
19230     14 00 90 5D |  if_ne	jmp	#LR__0790
19234     53 01 00 FF 
19238     0B 74 06 F6 | 	mov	arg01, ##@LR__2259
1923c     A8 8A BE FD | 	call	#_printf
19240                 | '         {
19240                 | '             printf("Error: Unexpected allocation error.\n");
19240                 | '             return 0;
19240     00 34 06 F6 | 	mov	result1, #0
19244     BC 01 90 FD | 	jmp	#LR__0802
19248                 | LR__0790
19248     10 8E 06 F1 | 	add	local02, #16
1924c     47 95 02 FB | 	rdlong	local05, local02
19250     10 8E 86 F1 | 	sub	local02, #16
19254     01 94 0E F2 | 	cmp	local05, #1 wz
19258     48 00 90 AD |  if_e	jmp	#LR__0792
1925c     46 95 C2 FA | 	rdbyte	local05, local01
19260     22 94 0E F2 | 	cmp	local05, #34 wz
19264     14 00 90 AD |  if_e	jmp	#LR__0791
19268     53 01 00 FF 
1926c     30 74 06 F6 | 	mov	arg01, ##@LR__2260
19270     74 8A BE FD | 	call	#_printf
19274                 | '             {
19274                 | '                 printf("Error: Unexpected quote missing.\n");
19274                 | '                 return 0;
19274     00 34 06 F6 | 	mov	result1, #0
19278     88 01 90 FD | 	jmp	#LR__0802
1927c                 | LR__0791
1927c     46 75 02 F6 | 	mov	arg01, local01
19280     52 77 02 F6 | 	mov	arg02, local13
19284     88 FA BF FD | 	call	#_propertyName
19288     1A 8D 0A F6 | 	mov	local01, result1 wz
1928c     20 00 90 5D |  if_ne	jmp	#LR__0793
19290     53 01 00 FF 
19294     52 74 06 F6 | 	mov	arg01, ##@LR__2261
19298     4C 8A BE FD | 	call	#_printf
1929c                 | '             {
1929c                 | '                 printf("Error: property name does not exist.\n");
1929c                 | '                 return 0;
1929c     00 34 06 F6 | 	mov	result1, #0
192a0     60 01 90 FD | 	jmp	#LR__0802
192a4                 | LR__0792
192a4     04 A4 06 F1 | 	add	local13, #4
192a8     52 01 68 FC | 	wrlong	#0, local13
192ac     04 A4 86 F1 | 	sub	local13, #4
192b0                 | LR__0793
192b0     47 75 02 F6 | 	mov	arg01, local02
192b4     52 77 02 F6 | 	mov	arg02, local13
192b8     38 FE BF FD | 	call	#_add
192bc     08 A4 06 F1 | 	add	local13, #8
192c0     52 8D 62 FC | 	wrlong	local01, local13
192c4     08 A4 86 F1 | 	sub	local13, #8
192c8                 | '             property->name = 0;
192c8                 | '         add(obj, property);
192c8                 | '         property->u.value = ptr;
192c8                 | '         switch (*ptr)
192c8     46 A7 C2 FA | 	rdbyte	local14, local01
192cc     53 95 E2 F8 | 	getbyte	local05, local14, #0
192d0     7B 94 0E F2 | 	cmp	local05, #123 wz
192d4     40 00 90 AD |  if_e	jmp	#LR__0794
192d8     53 95 E2 F8 | 	getbyte	local05, local14, #0
192dc     5B 94 0E F2 | 	cmp	local05, #91 wz
192e0     58 00 90 AD |  if_e	jmp	#LR__0795
192e4     53 95 E2 F8 | 	getbyte	local05, local14, #0
192e8     22 94 0E F2 | 	cmp	local05, #34 wz
192ec     70 00 90 AD |  if_e	jmp	#LR__0796
192f0     53 95 E2 F8 | 	getbyte	local05, local14, #0
192f4     74 94 0E F2 | 	cmp	local05, #116 wz
192f8     78 00 90 AD |  if_e	jmp	#LR__0797
192fc     53 95 E2 F8 | 	getbyte	local05, local14, #0
19300     66 94 0E F2 | 	cmp	local05, #102 wz
19304     8C 00 90 AD |  if_e	jmp	#LR__0798
19308     53 95 E2 F8 | 	getbyte	local05, local14, #0
1930c     6E 94 0E F2 | 	cmp	local05, #110 wz
19310     A0 00 90 AD |  if_e	jmp	#LR__0799
19314     BC 00 90 FD | 	jmp	#LR__0800
19318                 | LR__0794
19318     10 A4 06 F1 | 	add	local13, #16
1931c     52 01 68 FC | 	wrlong	#0, local13
19320     08 A4 86 F1 | 	sub	local13, #8
19324     52 01 68 FC | 	wrlong	#0, local13
19328     08 A4 86 F1 | 	sub	local13, #8
1932c     52 8F 62 FC | 	wrlong	local02, local13
19330     52 8F 02 F6 | 	mov	local02, local13
19334     01 8C 06 F1 | 	add	local01, #1
19338                 | '             property->type = JSON_OBJ;
19338                 | '             property->u.c.child = 0;
19338                 | '             property->sibling = obj;
19338                 | '             obj = property;
19338                 | '             ++ptr;
19338                 | '             break;
19338     B0 00 90 FD | 	jmp	#LR__0801
1933c                 | LR__0795
1933c     10 A4 06 F1 | 	add	local13, #16
19340     52 03 68 FC | 	wrlong	#1, local13
19344     08 A4 86 F1 | 	sub	local13, #8
19348     52 01 68 FC | 	wrlong	#0, local13
1934c     08 A4 86 F1 | 	sub	local13, #8
19350     52 8F 62 FC | 	wrlong	local02, local13
19354     52 8F 02 F6 | 	mov	local02, local13
19358     01 8C 06 F1 | 	add	local01, #1
1935c                 | '             property->type = JSON_ARRAY;
1935c                 | '             property->u.c.child = 0;
1935c                 | '             property->sibling = obj;
1935c                 | '             obj = property;
1935c                 | '             ++ptr;
1935c                 | '             break;
1935c     8C 00 90 FD | 	jmp	#LR__0801
19360                 | LR__0796
19360     46 75 02 F6 | 	mov	arg01, local01
19364     52 77 02 F6 | 	mov	arg02, local13
19368     14 FA BF FD | 	call	#_textValue
1936c     1A 8D 02 F6 | 	mov	local01, result1
19370                 | '             ptr = textValue(ptr, property);
19370                 | '             break;
19370     78 00 90 FD | 	jmp	#LR__0801
19374                 | LR__0797
19374     46 75 02 F6 | 	mov	arg01, local01
19378     52 77 02 F6 | 	mov	arg02, local13
1937c                 | ' {
1937c                 | '     return primitiveValue(ptr, property, "true", JSON_BOOLEAN);
1937c     52 01 00 FF 
19380     D9 79 06 F6 | 	mov	arg03, ##@LR__2255
19384     03 7A 06 F6 | 	mov	arg04, #3
19388     74 FA BF FD | 	call	#_primitiveValue
1938c     1A 8D 02 F6 | 	mov	local01, result1
19390                 | '             ptr = trueValue(ptr, property);
19390                 | '             break;
19390     58 00 90 FD | 	jmp	#LR__0801
19394                 | LR__0798
19394     46 75 02 F6 | 	mov	arg01, local01
19398     52 77 02 F6 | 	mov	arg02, local13
1939c                 | ' {
1939c                 | '     return primitiveValue(ptr, property, "false", JSON_BOOLEAN);
1939c     52 01 00 FF 
193a0     DE 79 06 F6 | 	mov	arg03, ##@LR__2256
193a4     03 7A 06 F6 | 	mov	arg04, #3
193a8     54 FA BF FD | 	call	#_primitiveValue
193ac     1A 8D 02 F6 | 	mov	local01, result1
193b0                 | '             ptr = falseValue(ptr, property);
193b0                 | '             break;
193b0     38 00 90 FD | 	jmp	#LR__0801
193b4                 | LR__0799
193b4     46 75 02 F6 | 	mov	arg01, local01
193b8     52 77 02 F6 | 	mov	arg02, local13
193bc                 | ' {
193bc                 | '     return primitiveValue(ptr, property, "null", JSON_NULL);
193bc     52 01 00 FF 
193c0     E4 79 06 F6 | 	mov	arg03, ##@LR__2257
193c4     06 7A 06 F6 | 	mov	arg04, #6
193c8     34 FA BF FD | 	call	#_primitiveValue
193cc     1A 8D 02 F6 | 	mov	local01, result1
193d0                 | '             ptr = nullValue(ptr, property);
193d0                 | '             break;
193d0     18 00 90 FD | 	jmp	#LR__0801
193d4                 | LR__0800
193d4     52 93 02 F6 | 	mov	local04, local13
193d8     46 75 02 F6 | 	mov	arg01, local01
193dc     49 77 02 F6 | 	mov	arg02, local04
193e0     2C FB BF FD | 	call	#_numValue
193e4     1A 95 02 F6 | 	mov	local05, result1
193e8     4A 8D 02 F6 | 	mov	local01, local05
193ec                 | '             ptr = numValue(ptr, property);
193ec                 | '             break;
193ec                 | LR__0801
193ec     00 8C 0E F2 | 	cmp	local01, #0 wz
193f0     78 FD 9F 5D |  if_ne	jmp	#LR__0787
193f4     53 01 00 FF 
193f8     78 74 06 F6 | 	mov	arg01, ##@LR__2262
193fc     E8 88 BE FD | 	call	#_printf
19400                 | '         {
19400                 | '             printf("Error: unable to parse value.\n");
19400                 | '             return 0;
19400     00 34 06 F6 | 	mov	result1, #0
19404                 | LR__0802
19404     A8 F0 03 F6 | 	mov	ptra, fp
19408     B3 00 A0 FD | 	call	#popregs_
1940c                 | _objValue_ret
1940c     2D 00 64 FD | 	ret
19410                 | 
19410                 | _poolInit
19410     04 74 86 F1 | 	sub	arg01, #4
19414     3A 03 68 FC | 	wrlong	#1, arg01
19418     08 74 86 F1 | 	sub	arg01, #8
1941c                 | '     spool->nextFree = 1;
1941c                 | '     return spool->mem;
1941c     3A 35 02 FB | 	rdlong	result1, arg01
19420                 | _poolInit_ret
19420     2D 00 64 FD | 	ret
19424                 | 
19424                 | _poolAlloc
19424     04 74 86 F1 | 	sub	arg01, #4
19428     3A 3B 02 FB | 	rdlong	_var01, arg01
1942c     04 74 86 F1 | 	sub	arg01, #4
19430     3A 3D 02 FB | 	rdlong	_var02, arg01
19434     04 74 86 F1 | 	sub	arg01, #4
19438     1E 3B 12 F2 | 	cmp	_var01, _var02 wc
1943c                 | '         return 0;
1943c     00 34 06 36 |  if_ae	mov	result1, #0
19440     30 00 90 3D |  if_ae	jmp	#_poolAlloc_ret
19444                 | '     return spool->mem + spool->nextFree++;
19444     08 74 06 F1 | 	add	arg01, #8
19448     3A 3D 02 FB | 	rdlong	_var02, arg01
1944c     1E 3B 02 F6 | 	mov	_var01, _var02
19450     01 3A 06 F1 | 	add	_var01, #1
19454     3A 3B 62 FC | 	wrlong	_var01, arg01
19458     08 74 86 F1 | 	sub	arg01, #8
1945c     1E 3B 02 F6 | 	mov	_var01, _var02
19460     02 3A 66 F0 | 	shl	_var01, #2
19464     1E 3B 02 F1 | 	add	_var01, _var02
19468     02 3A 66 F0 | 	shl	_var01, #2
1946c     3A 35 02 FB | 	rdlong	result1, arg01
19470     1D 35 02 F1 | 	add	result1, _var01
19474                 | _poolAlloc_ret
19474     2D 00 64 FD | 	ret
19478                 | 
19478                 | _write_register_1604
19478     02 4C 05 F6 | 	mov	COUNT_, #2
1947c     A9 00 A0 FD | 	call	#pushregs_
19480     3A 8D 02 F6 | 	mov	local01, arg01
19484     0C 8C 06 F1 | 	add	local01, #12
19488     55 74 06 F6 | 	mov	arg01, #85
1948c     C9 8E 02 F6 | 	mov	local02, objptr
19490     46 93 01 F6 | 	mov	objptr, local01
19494     6C 25 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
19498     46 93 01 F6 | 	mov	objptr, local01
1949c     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
194a0     01 76 66 F0 | 	shl	arg02, #1
194a4     40 74 06 F6 | 	mov	arg01, #64
194a8     3B 75 02 F1 | 	add	arg01, arg02
194ac     54 25 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
194b0     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
194b4     46 93 01 F6 | 	mov	objptr, local01
194b8     48 25 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
194bc     47 93 01 F6 | 	mov	objptr, local02
194c0     A8 F0 03 F6 | 	mov	ptra, fp
194c4     B3 00 A0 FD | 	call	#popregs_
194c8                 | _write_register_1604_ret
194c8     2D 00 64 FD | 	ret
194cc                 | 
194cc                 | _read_register_1606
194cc     03 4C 05 F6 | 	mov	COUNT_, #3
194d0     A9 00 A0 FD | 	call	#pushregs_
194d4     3A 8D 02 F6 | 	mov	local01, arg01
194d8     0C 8C 06 F1 | 	add	local01, #12
194dc     55 74 06 F6 | 	mov	arg01, #85
194e0     C9 8E 02 F6 | 	mov	local02, objptr
194e4     46 93 01 F6 | 	mov	objptr, local01
194e8     18 25 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
194ec     46 93 01 F6 | 	mov	objptr, local01
194f0     3B 91 E2 F8 | 	getbyte	local03, arg02, #0
194f4     01 90 66 F0 | 	shl	local03, #1
194f8     20 74 06 F6 | 	mov	arg01, #32
194fc     48 75 02 F1 | 	add	arg01, local03
19500     00 25 B0 FD | 	call	#_jm_fullduplexserial_spin2_tx
19504     64 74 06 F6 | 	mov	arg01, #100
19508     46 93 01 F6 | 	mov	objptr, local01
1950c     70 24 B0 FD | 	call	#_jm_fullduplexserial_spin2_rxtime
19510     47 93 01 F6 | 	mov	objptr, local02
19514                 | ' {
19514                 | '     uint8_t temp;
19514                 | ' 
19514                 | ' 
19514                 | ' 
19514                 | ' 
19514                 | '     forceGauge->serial.tx(0x55);
19514                 | '     forceGauge->serial.tx(0x20 + (reg << 1));
19514                 | '     temp = forceGauge->serial.rxtime(100);
19514                 | '     return temp;
19514     A8 F0 03 F6 | 	mov	ptra, fp
19518     B3 00 A0 FD | 	call	#popregs_
1951c                 | _read_register_1606_ret
1951c     2D 00 64 FD | 	ret
19520                 | 
19520                 | _module_animation_touch_1620
19520     07 4C 05 F6 | 	mov	COUNT_, #7
19524     A9 00 A0 FD | 	call	#pushregs_
19528     3A 8D 02 F6 | 	mov	local01, arg01
1952c     3B 8F 02 F6 | 	mov	local02, arg02
19530     E8 8E 06 F1 | 	add	local02, #232
19534     47 91 02 FB | 	rdlong	local03, local02
19538     40 8E 06 F1 | 	add	local02, #64
1953c     47 81 02 FB | 	rdlong	arg07, local02
19540     40 91 82 F1 | 	sub	local03, arg07
19544     02 90 86 F1 | 	sub	local03, #2
19548     3C 8E 86 F1 | 	sub	local02, #60
1954c     47 93 02 FB | 	rdlong	local04, local02
19550     40 93 82 F1 | 	sub	local04, arg07
19554     02 92 86 F1 | 	sub	local04, #2
19558     40 7F 02 F6 | 	mov	arg06, arg07
1955c     01 7E 66 F0 | 	shl	arg06, #1
19560     04 8E 06 F1 | 	add	local02, #4
19564     47 95 02 FB | 	rdlong	local05, local02
19568     3F 95 02 F1 | 	add	local05, arg06
1956c     04 94 06 F1 | 	add	local05, #4
19570     01 80 66 F0 | 	shl	arg07, #1
19574     04 8E 06 F1 | 	add	local02, #4
19578     47 97 02 FB | 	rdlong	local06, local02
1957c     F4 8E 86 F1 | 	sub	local02, #244
19580     40 97 02 F1 | 	add	local06, arg07
19584     04 96 06 F1 | 	add	local06, #4
19588     46 75 02 F6 | 	mov	arg01, local01
1958c     48 7B 02 F6 | 	mov	arg04, local03
19590     49 7D 02 F6 | 	mov	arg05, local04
19594     48 83 02 F6 | 	mov	arg08, local03
19598     49 85 02 F6 | 	mov	arg09, local04
1959c     4A 87 02 F6 | 	mov	arg10, local05
195a0     4B 89 02 F6 | 	mov	arg11, local06
195a4     05 88 06 F1 | 	add	arg11, #5
195a8     00 76 06 F6 | 	mov	arg02, #0
195ac     0A 78 C6 F9 | 	decod	arg03, #10
195b0     20 1C 00 FF 
195b4     00 7E 06 F6 | 	mov	arg06, ##3686400
195b8     0A 80 C6 F9 | 	decod	arg07, #10
195bc     F8 AE BE FD | 	call	#_display_bte_memory_copy
195c0                 | '     for (i = 1; i < moveY; i++)
195c0     01 98 06 F6 | 	mov	local07, #1
195c4                 | LR__0803
195c4     05 98 56 F2 | 	cmps	local07, #5 wc
195c8     84 00 90 3D |  if_ae	jmp	#LR__0804
195cc     49 85 02 F6 | 	mov	arg09, local04
195d0     4C 85 02 F1 | 	add	arg09, local07
195d4     4A 87 02 F6 | 	mov	arg10, local05
195d8     4B 89 02 F6 | 	mov	arg11, local06
195dc     46 75 02 F6 | 	mov	arg01, local01
195e0     20 1C 00 FF 
195e4     00 76 06 F6 | 	mov	arg02, ##3686400
195e8     0A 78 C6 F9 | 	decod	arg03, #10
195ec     48 7B 02 F6 | 	mov	arg04, local03
195f0     49 7D 02 F6 | 	mov	arg05, local04
195f4     00 7E 06 F6 | 	mov	arg06, #0
195f8     0A 80 C6 F9 | 	decod	arg07, #10
195fc     48 83 02 F6 | 	mov	arg08, local03
19600     B4 AE BE FD | 	call	#_display_bte_memory_copy
19604     49 79 02 F6 | 	mov	arg03, local04
19608     4C 79 02 F1 | 	add	arg03, local07
1960c     48 7B 02 F6 | 	mov	arg04, local03
19610     4A 7B 02 F1 | 	add	arg04, local05
19614     49 7D 02 F6 | 	mov	arg05, local04
19618     4C 7D 02 F1 | 	add	arg05, local07
1961c     47 7F 02 FB | 	rdlong	arg06, local02
19620     10 7F 06 F1 | 	add	arg06, #272
19624     3F 7F 02 FB | 	rdlong	arg06, arg06
19628     46 75 02 F6 | 	mov	arg01, local01
1962c     48 77 02 F6 | 	mov	arg02, local03
19630     5C A9 BE FD | 	call	#_display_draw_line
19634     32 E0 06 F6 | 	mov	muldiva_, #50
19638     05 E2 06 F6 | 	mov	muldivb_, #5
1963c     BB 00 A0 FD | 	call	#divide_
19640     71 75 02 F6 | 	mov	arg01, muldivb_
19644     F0 BD B0 FD | 	call	#__system___waitms
19648     01 98 06 F1 | 	add	local07, #1
1964c     74 FF 9F FD | 	jmp	#LR__0803
19650                 | LR__0804
19650                 | '     {
19650                 | '         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y + i, w, h);
19650                 | '         display_draw_line(display, x, y + i, x + w, y + i, module->parent->foregroundColor);
19650                 | '         _waitms(speedms / moveY);
19650                 | '     }
19650                 | ' 
19650                 | ' 
19650                 | '     for (; i > 0; i--)
19650                 | LR__0805
19650     01 98 56 F2 | 	cmps	local07, #1 wc
19654     84 00 90 CD |  if_b	jmp	#LR__0806
19658     49 85 02 F6 | 	mov	arg09, local04
1965c     4C 85 02 F1 | 	add	arg09, local07
19660     4A 87 02 F6 | 	mov	arg10, local05
19664     4B 89 02 F6 | 	mov	arg11, local06
19668     46 75 02 F6 | 	mov	arg01, local01
1966c     20 1C 00 FF 
19670     00 76 06 F6 | 	mov	arg02, ##3686400
19674     0A 78 C6 F9 | 	decod	arg03, #10
19678     48 7B 02 F6 | 	mov	arg04, local03
1967c     49 7D 02 F6 | 	mov	arg05, local04
19680     00 7E 06 F6 | 	mov	arg06, #0
19684     0A 80 C6 F9 | 	decod	arg07, #10
19688     48 83 02 F6 | 	mov	arg08, local03
1968c     28 AE BE FD | 	call	#_display_bte_memory_copy
19690     49 79 02 F6 | 	mov	arg03, local04
19694     4C 79 02 F1 | 	add	arg03, local07
19698     48 7B 02 F6 | 	mov	arg04, local03
1969c     4A 7B 02 F1 | 	add	arg04, local05
196a0     49 7D 02 F6 | 	mov	arg05, local04
196a4     4C 7D 02 F1 | 	add	arg05, local07
196a8     47 7F 02 FB | 	rdlong	arg06, local02
196ac     10 7F 06 F1 | 	add	arg06, #272
196b0     3F 7F 02 FB | 	rdlong	arg06, arg06
196b4     46 75 02 F6 | 	mov	arg01, local01
196b8     48 77 02 F6 | 	mov	arg02, local03
196bc     D0 A8 BE FD | 	call	#_display_draw_line
196c0     32 E0 06 F6 | 	mov	muldiva_, #50
196c4     05 E2 06 F6 | 	mov	muldivb_, #5
196c8     BB 00 A0 FD | 	call	#divide_
196cc     71 75 02 F6 | 	mov	arg01, muldivb_
196d0     64 BD B0 FD | 	call	#__system___waitms
196d4     01 98 86 F1 | 	sub	local07, #1
196d8     74 FF 9F FD | 	jmp	#LR__0805
196dc                 | LR__0806
196dc     05 96 06 F1 | 	add	local06, #5
196e0     46 75 02 F6 | 	mov	arg01, local01
196e4     20 1C 00 FF 
196e8     00 76 06 F6 | 	mov	arg02, ##3686400
196ec     0A 78 C6 F9 | 	decod	arg03, #10
196f0     48 7B 02 F6 | 	mov	arg04, local03
196f4     49 7D 02 F6 | 	mov	arg05, local04
196f8     00 7E 06 F6 | 	mov	arg06, #0
196fc     0A 80 C6 F9 | 	decod	arg07, #10
19700     48 83 02 F6 | 	mov	arg08, local03
19704     49 85 02 F6 | 	mov	arg09, local04
19708     4A 87 02 F6 | 	mov	arg10, local05
1970c     4B 89 02 F6 | 	mov	arg11, local06
19710     A4 AD BE FD | 	call	#_display_bte_memory_copy
19714     A8 F0 03 F6 | 	mov	ptra, fp
19718     B3 00 A0 FD | 	call	#popregs_
1971c                 | _module_animation_touch_1620_ret
1971c     2D 00 64 FD | 	ret
19720                 | 
19720                 | _get_radius_1634
19720     01 4C 05 F6 | 	mov	COUNT_, #1
19724     A9 00 A0 FD | 	call	#pushregs_
19728     3A 8D 02 F6 | 	mov	local01, arg01
1972c     08 8D 06 F1 | 	add	local01, #264
19730     46 75 02 FB | 	rdlong	arg01, local01
19734     08 8D 86 F1 | 	sub	local01, #264
19738     FF FF 7F FF 
1973c     FF 75 0E F2 | 	cmp	arg01, ##-1 wz
19740     2C 00 90 5D |  if_ne	jmp	#LR__0807
19744                 | '         return  __builtin_round(module->w * 0.07) ;
19744     F0 8C 06 F1 | 	add	local01, #240
19748     46 75 02 FB | 	rdlong	arg01, local01
1974c     1C D6 B0 FD | 	call	#__system___float_fromint
19750     1A 75 02 F6 | 	mov	arg01, result1
19754     AE C7 1E FF 
19758     29 76 06 F6 | 	mov	arg02, ##1032805417
1975c     40 D9 B0 FD | 	call	#__system___float_mul
19760     1A 75 02 F6 | 	mov	arg01, result1
19764     01 76 06 F6 | 	mov	arg02, #1
19768     24 DE B0 FD | 	call	#__system___float_tointeger
1976c     08 00 90 FD | 	jmp	#LR__0808
19770                 | LR__0807
19770                 | '         return module->r;
19770     08 8D 06 F1 | 	add	local01, #264
19774     46 35 02 FB | 	rdlong	result1, local01
19778                 | LR__0808
19778     A8 F0 03 F6 | 	mov	ptra, fp
1977c     B3 00 A0 FD | 	call	#popregs_
19780                 | _get_radius_1634_ret
19780     2D 00 64 FD | 	ret
19784                 | 
19784                 | _draw_border_rectangle_rounded_1636
19784     04 4C 05 F6 | 	mov	COUNT_, #4
19788     A9 00 A0 FD | 	call	#pushregs_
1978c     3A 8D 02 F6 | 	mov	local01, arg01
19790     3B 8F 02 F6 | 	mov	local02, arg02
19794     3C 91 02 F6 | 	mov	local03, arg03
19798     3D 93 02 F6 | 	mov	local04, arg04
1979c     28 8F 06 F1 | 	add	local02, #296
197a0     47 81 0A FB | 	rdlong	arg07, local02 wz
197a4     28 8F 86 F1 | 	sub	local02, #296
197a8                 | '         return  (0) ;
197a8     00 34 06 A6 |  if_e	mov	result1, #0
197ac     B0 00 90 AD |  if_e	jmp	#LR__0809
197b0     28 8F 06 F1 | 	add	local02, #296
197b4     47 81 02 FB | 	rdlong	arg07, local02
197b8     40 8E 86 F1 | 	sub	local02, #64
197bc     47 77 02 FB | 	rdlong	arg02, local02
197c0     40 77 82 F1 | 	sub	arg02, arg07
197c4     04 8E 06 F1 | 	add	local02, #4
197c8     47 79 02 FB | 	rdlong	arg03, local02
197cc     40 79 82 F1 | 	sub	arg03, arg07
197d0     04 8E 86 F1 | 	sub	local02, #4
197d4     47 7B 02 FB | 	rdlong	arg04, local02
197d8     08 8E 06 F1 | 	add	local02, #8
197dc     47 7F 02 FB | 	rdlong	arg06, local02
197e0     3F 7B 02 F1 | 	add	arg04, arg06
197e4     40 7B 02 F1 | 	add	arg04, arg07
197e8     04 8E 86 F1 | 	sub	local02, #4
197ec     47 7D 02 FB | 	rdlong	arg05, local02
197f0     08 8E 06 F1 | 	add	local02, #8
197f4     47 7F 02 FB | 	rdlong	arg06, local02
197f8     3F 7D 02 F1 | 	add	arg05, arg06
197fc     40 7D 02 F1 | 	add	arg05, arg07
19800     20 8E 06 F1 | 	add	local02, #32
19804     47 83 02 FB | 	rdlong	arg08, local02
19808     46 75 02 F6 | 	mov	arg01, local01
1980c     49 7F 02 F6 | 	mov	arg06, local04
19810     49 81 02 F6 | 	mov	arg07, local04
19814     50 AA BE FD | 	call	#_display_draw_circle_square_fill
19818     46 75 02 F6 | 	mov	arg01, local01
1981c     2C 8E 86 F1 | 	sub	local02, #44
19820     47 77 02 FB | 	rdlong	arg02, local02
19824     04 8E 06 F1 | 	add	local02, #4
19828     47 79 02 FB | 	rdlong	arg03, local02
1982c     3B 7B 02 F6 | 	mov	arg04, arg02
19830     04 8E 06 F1 | 	add	local02, #4
19834     47 8D 02 FB | 	rdlong	local01, local02
19838     46 7B 02 F1 | 	add	arg04, local01
1983c     3C 7D 02 F6 | 	mov	arg05, arg03
19840     04 8E 06 F1 | 	add	local02, #4
19844     47 8F 02 FB | 	rdlong	local02, local02
19848     47 7D 02 F1 | 	add	arg05, local02
1984c     49 7F 02 F6 | 	mov	arg06, local04
19850     49 81 02 F6 | 	mov	arg07, local04
19854     48 83 02 F6 | 	mov	arg08, local03
19858     0C AA BE FD | 	call	#_display_draw_circle_square_fill
1985c                 | '     display_draw_circle_square_fill(display, module->x - width, module->y - width, module->x + module->w + width, module->y + module->h + width, radius, radius, module->borderColor);
1985c                 | '     display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, innerColor);
1985c                 | '     return  (1) ;
1985c     01 34 06 F6 | 	mov	result1, #1
19860                 | LR__0809
19860     A8 F0 03 F6 | 	mov	ptra, fp
19864     B3 00 A0 FD | 	call	#popregs_
19868                 | _draw_border_rectangle_rounded_1636_ret
19868     2D 00 64 FD | 	ret
1986c                 | 
1986c                 | _key_pressed_1685
1986c     03 4C 05 F6 | 	mov	COUNT_, #3
19870     A9 00 A0 FD | 	call	#pushregs_
19874     3A 8D 02 F6 | 	mov	local01, arg01
19878     3B 8F 02 F6 | 	mov	local02, arg02
1987c     00 74 06 F6 | 	mov	arg01, #0
19880     C4 F2 B0 FD | 	call	#__system___getiolock_1205
19884     1A 75 02 F6 | 	mov	arg01, result1
19888     94 BA B0 FD | 	call	#__system___lockmem
1988c     08 8E 06 F1 | 	add	local02, #8
19890     47 77 02 F6 | 	mov	arg02, local02
19894     08 8E 86 F1 | 	sub	local02, #8
19898     00 74 06 F6 | 	mov	arg01, #0
1989c     00 78 06 F6 | 	mov	arg03, #0
198a0     10 C0 B0 FD | 	call	#__system___basic_print_string
198a4     00 74 06 F6 | 	mov	arg01, #0
198a8     0A 76 06 F6 | 	mov	arg02, #10
198ac     00 78 06 F6 | 	mov	arg03, #0
198b0     B4 BF B0 FD | 	call	#__system___basic_print_char
198b4     00 74 06 F6 | 	mov	arg01, #0
198b8     8C F2 B0 FD | 	call	#__system___getiolock_1205
198bc     1A 01 68 FC | 	wrlong	#0, result1
198c0                 | '     switch (id)
198c0     46 91 02 F6 | 	mov	local03, local01
198c4     1F 90 0E F2 | 	cmp	local03, #31 wz
198c8     2C 00 90 AD |  if_e	jmp	#LR__0810
198cc     2A 90 0E F2 | 	cmp	local03, #42 wz
198d0     58 00 90 AD |  if_e	jmp	#LR__0811
198d4     2C 90 0E F2 | 	cmp	local03, #44 wz
198d8     70 00 90 AD |  if_e	jmp	#LR__0812
198dc     2B 90 0E F2 | 	cmp	local03, #43 wz
198e0     B8 00 90 AD |  if_e	jmp	#LR__0815
198e4     2D 90 0E F2 | 	cmp	local03, #45 wz
198e8     B0 00 90 AD |  if_e	jmp	#LR__0815
198ec     2E 90 0E F2 | 	cmp	local03, #46 wz
198f0     70 00 90 AD |  if_e	jmp	#LR__0813
198f4     78 00 90 FD | 	jmp	#LR__0814
198f8                 | LR__0810
198f8     08 8E 06 F1 | 	add	local02, #8
198fc     47 75 02 F6 | 	mov	arg01, local02
19900     08 8E 86 F1 | 	sub	local02, #8
19904     FC C7 BE FD | 	call	#_strlen
19908     01 34 16 F2 | 	cmp	result1, #1 wc
1990c                 | '             break;
1990c     8C 00 90 CD |  if_b	jmp	#LR__0815
19910     08 8E 06 F1 | 	add	local02, #8
19914     47 75 02 F6 | 	mov	arg01, local02
19918     E8 C7 BE FD | 	call	#_strlen
1991c     01 34 86 F1 | 	sub	result1, #1
19920     47 35 02 F1 | 	add	result1, local02
19924     1A 01 48 FC | 	wrbyte	#0, result1
19928                 | '         keyboard->keyboard_buffer[strlen(keyboard->keyboard_buffer) - 1] = '\0';
19928                 | '         break;
19928     70 00 90 FD | 	jmp	#LR__0815
1992c                 | LR__0811
1992c     08 8E 06 F1 | 	add	local02, #8
19930     47 75 02 F6 | 	mov	arg01, local02
19934     53 01 00 FF 
19938     97 76 06 F6 | 	mov	arg02, ##@LR__2263
1993c     08 C5 BE FD | 	call	#_strcpy
19940     52 8E 06 F1 | 	add	local02, #82
19944     47 03 48 FC | 	wrbyte	#1, local02
19948                 | '     {
19948                 | '         strcpy(keyboard->keyboard_buffer, "");
19948                 | '         keyboard->keyboard_complete =  (1) ;
19948                 | '         break;
19948     50 00 90 FD | 	jmp	#LR__0815
1994c                 | LR__0812
1994c     08 8E 06 F1 | 	add	local02, #8
19950     53 01 00 FF 
19954     99 76 06 F6 | 	mov	arg02, ##@LR__2264
19958     47 75 02 F6 | 	mov	arg01, local02
1995c     74 C5 BE FD | 	call	#_strcat
19960                 | '         break;
19960     38 00 90 FD | 	jmp	#LR__0815
19964                 | '         break;
19964                 | LR__0813
19964     5A 8E 06 F1 | 	add	local02, #90
19968     47 03 48 FC | 	wrbyte	#1, local02
1996c                 | '         keyboard->keyboard_complete =  (1) ;
1996c                 | '         break;
1996c     2C 00 90 FD | 	jmp	#LR__0815
19970                 | LR__0814
19970     08 8E 06 F1 | 	add	local02, #8
19974     47 75 02 F6 | 	mov	arg01, local02
19978     46 77 02 F6 | 	mov	arg02, local01
1997c     02 76 66 F0 | 	shl	arg02, #2
19980     55 01 00 FF 
19984     CC D6 05 F1 | 	add	ptr__dat__, ##174796
19988     EB 76 02 F1 | 	add	arg02, ptr__dat__
1998c     3B 77 02 FB | 	rdlong	arg02, arg02
19990     55 01 00 FF 
19994     CC D6 85 F1 | 	sub	ptr__dat__, ##174796
19998     38 C5 BE FD | 	call	#_strcat
1999c                 | '         strcat(keyboard->keyboard_buffer, key_name[id]);
1999c                 | '         break;
1999c                 | LR__0815
1999c     A8 F0 03 F6 | 	mov	ptra, fp
199a0     B3 00 A0 FD | 	call	#popregs_
199a4                 | _key_pressed_1685_ret
199a4     2D 00 64 FD | 	ret
199a8                 | 
199a8                 | _createKey_1688
199a8     06 4C 05 F6 | 	mov	COUNT_, #6
199ac     A9 00 A0 FD | 	call	#pushregs_
199b0     3A 8D 02 F6 | 	mov	local01, arg01
199b4     3B 8F 02 F6 | 	mov	local02, arg02
199b8     3C 91 02 F6 | 	mov	local03, arg03
199bc     3D 93 02 F6 | 	mov	local04, arg04
199c0     3E 95 02 F6 | 	mov	local05, arg05
199c4     47 97 02 F6 | 	mov	local06, local02
199c8     02 96 66 F0 | 	shl	local06, #2
199cc     47 97 02 F1 | 	add	local06, local02
199d0     06 96 66 F0 | 	shl	local06, #6
199d4     03 00 00 FF 
199d8     9C 8C 06 F1 | 	add	local01, ##1692
199dc     46 97 02 F1 | 	add	local06, local01
199e0     02 00 00 FF 
199e4     00 8D 86 F1 | 	sub	local01, ##1280
199e8     46 77 02 F6 | 	mov	arg02, local01
199ec     9C 8D 86 F1 | 	sub	local01, #412
199f0     4B 75 02 F6 | 	mov	arg01, local06
199f4     E0 EF BE FD | 	call	#_module_init
199f8     00 2C 21 FF 
199fc     00 74 06 F6 | 	mov	arg01, ##1113063424
19a00     4A 77 02 F6 | 	mov	arg02, local05
19a04     98 D6 B0 FD | 	call	#__system___float_mul
19a08     1A 75 02 F6 | 	mov	arg01, result1
19a0c     00 76 06 F6 | 	mov	arg02, #0
19a10     7C DB B0 FD | 	call	#__system___float_tointeger
19a14     4B 75 02 F6 | 	mov	arg01, local06
19a18     CC 74 06 F1 | 	add	arg01, #204
19a1c     3A 0B 68 FC | 	wrlong	#5, arg01
19a20     24 74 06 F1 | 	add	arg01, #36
19a24     3A 35 62 FC | 	wrlong	result1, arg01
19a28     04 74 06 F1 | 	add	arg01, #4
19a2c     3A 6D 68 FC | 	wrlong	#54, arg01
19a30     4B 75 02 F6 | 	mov	arg01, local06
19a34     10 75 06 F1 | 	add	arg01, #272
19a38     3A 3F 68 FC | 	wrlong	#31, arg01
19a3c     04 74 86 F1 | 	sub	arg01, #4
19a40     3A 3F 68 FC | 	wrlong	#31, arg01
19a44     4B 75 02 F6 | 	mov	arg01, local06
19a48     0E 78 06 F6 | 	mov	arg03, #14
19a4c     00 75 06 F1 | 	add	arg01, #256
19a50     3A 1D 68 FC | 	wrlong	#14, arg01
19a54     04 74 06 F1 | 	add	arg01, #4
19a58     3A 1D 68 FC | 	wrlong	#14, arg01
19a5c     C9 74 02 F6 | 	mov	arg01, objptr
19a60     03 77 02 F6 | 	mov	arg02, ptr__key_pressed_1685_
19a64     80 B8 B0 FD | 	call	#__system___make_methodptr
19a68     1A 77 02 F6 | 	mov	arg02, result1
19a6c     47 79 02 F6 | 	mov	arg03, local02
19a70     4B 75 02 F6 | 	mov	arg01, local06
19a74     34 75 06 F1 | 	add	arg01, #308
19a78     3A 77 62 FC | 	wrlong	arg02, arg01
19a7c     10 74 86 F1 | 	sub	arg01, #16
19a80     3A 79 62 FC | 	wrlong	arg03, arg01
19a84     00 90 0E F2 | 	cmp	local03, #0 wz
19a88     0C 00 90 5D |  if_ne	jmp	#LR__0816
19a8c     4B 75 02 F6 | 	mov	arg01, local06
19a90     B8 F8 BE FD | 	call	#_module_align_inner_left
19a94     0C 00 90 FD | 	jmp	#LR__0817
19a98                 | LR__0816
19a98     4B 75 02 F6 | 	mov	arg01, local06
19a9c     48 77 02 F6 | 	mov	arg02, local03
19aa0     04 FB BE FD | 	call	#_module_align_right
19aa4                 | LR__0817
19aa4     00 92 0E F2 | 	cmp	local04, #0 wz
19aa8     0C 00 90 5D |  if_ne	jmp	#LR__0818
19aac     4B 75 02 F6 | 	mov	arg01, local06
19ab0     70 F8 BE FD | 	call	#_module_align_inner_top
19ab4     0C 00 90 FD | 	jmp	#LR__0819
19ab8                 | LR__0818
19ab8     4B 75 02 F6 | 	mov	arg01, local06
19abc     49 77 02 F6 | 	mov	arg02, local04
19ac0     B8 FA BE FD | 	call	#_module_align_below
19ac4                 | LR__0819
19ac4     47 95 02 F6 | 	mov	local05, local02
19ac8     02 94 66 F0 | 	shl	local05, #2
19acc     47 95 02 F1 | 	add	local05, local02
19ad0     06 94 66 F0 | 	shl	local05, #6
19ad4     20 00 00 FF 
19ad8     5C 8D 06 F1 | 	add	local01, ##16732
19adc     46 95 02 F1 | 	add	local05, local01
19ae0     4A 75 02 F6 | 	mov	arg01, local05
19ae4     4B 77 02 F6 | 	mov	arg02, local06
19ae8     EC EE BE FD | 	call	#_module_init
19aec     02 8E 66 F0 | 	shl	local02, #2
19af0     55 01 00 FF 
19af4     CC D6 05 F1 | 	add	ptr__dat__, ##174796
19af8     EB 8E 02 F1 | 	add	local02, ptr__dat__
19afc     47 77 02 FB | 	rdlong	arg02, local02
19b00     4A 75 02 F6 | 	mov	arg01, local05
19b04     55 01 00 FF 
19b08     CC D6 85 F1 | 	sub	ptr__dat__, ##174796
19b0c     64 F4 BE FD | 	call	#_module_set_text
19b10     4A 75 02 F6 | 	mov	arg01, local05
19b14     02 76 06 F6 | 	mov	arg02, #2
19b18     98 F5 BE FD | 	call	#_module_text_font
19b1c     4A 75 02 F6 | 	mov	arg01, local05
19b20     AC F4 BE FD | 	call	#_module_text_fit
19b24     4A 93 02 FB | 	rdlong	local04, local05
19b28     10 93 06 F1 | 	add	local04, #272
19b2c     49 79 02 FB | 	rdlong	arg03, local04
19b30     4A 75 02 F6 | 	mov	arg01, local05
19b34     10 75 06 F1 | 	add	arg01, #272
19b38     7F 00 80 FF 
19b3c     3A FF 6B FC | 	wrlong	##65535, arg01
19b40     04 74 86 F1 | 	sub	arg01, #4
19b44     3A 79 62 FC | 	wrlong	arg03, arg01
19b48     4A 75 02 F6 | 	mov	arg01, local05
19b4c     01 76 06 F6 | 	mov	arg02, #1
19b50     02 78 06 F6 | 	mov	arg03, #2
19b54     F8 F8 BE FD | 	call	#_module_align_center_sector
19b58     4A 75 02 F6 | 	mov	arg01, local05
19b5c     A4 F8 BE FD | 	call	#_module_align_middle
19b60                 | '     {
19b60                 | '         module_align_below(key, above);
19b60                 | '     }
19b60                 | ' 
19b60                 | '     Module *text = &(keyboard->keyText[name]);
19b60                 | '     module_init(text, key);
19b60                 | '     module_set_text(text, key_name[name]);
19b60                 | '     module_text_font(text,  2 );
19b60                 | '     module_text_fit(text);
19b60                 | '     module_set_color(text,  0xffff , text->parent->foregroundColor);
19b60                 | '     module_align_center(text);
19b60                 | '     module_align_middle(text);
19b60                 | '     return key;
19b60     4B 35 02 F6 | 	mov	result1, local06
19b64     A8 F0 03 F6 | 	mov	ptra, fp
19b68     B3 00 A0 FD | 	call	#popregs_
19b6c                 | _createKey_1688_ret
19b6c     2D 00 64 FD | 	ret
19b70                 | 
19b70                 | _readNavKeyInt_1798
19b70     02 4C 05 F6 | 	mov	COUNT_, #2
19b74     A9 00 A0 FD | 	call	#pushregs_
19b78     3A 8D 02 F6 | 	mov	local01, arg01
19b7c     74 8C 06 F1 | 	add	local01, #116
19b80     46 01 68 FC | 	wrlong	#0, local01
19b84     74 8C 86 F1 | 	sub	local01, #116
19b88     C9 8E 02 F6 | 	mov	local02, objptr
19b8c     46 93 01 F6 | 	mov	objptr, local01
19b90     EC 19 B0 FD | 	call	#_jm_i2c_spin2_start
19b94     46 93 01 F6 | 	mov	objptr, local01
19b98     6C 8C 06 F1 | 	add	local01, #108
19b9c     46 75 C2 FA | 	rdbyte	arg01, local01
19ba0     6C 8C 86 F1 | 	sub	local01, #108
19ba4     FE 74 06 F5 | 	and	arg01, #254
19ba8     1C 1A B0 FD | 	call	#_jm_i2c_spin2_write
19bac     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19bb0     46 93 01 F6 | 	mov	objptr, local01
19bb4     10 1A B0 FD | 	call	#_jm_i2c_spin2_write
19bb8     46 93 01 F6 | 	mov	objptr, local01
19bbc     C0 19 B0 FD | 	call	#_jm_i2c_spin2_start
19bc0     46 93 01 F6 | 	mov	objptr, local01
19bc4     6C 8C 06 F1 | 	add	local01, #108
19bc8     46 75 C2 FA | 	rdbyte	arg01, local01
19bcc     6C 8C 86 F1 | 	sub	local01, #108
19bd0     01 74 46 F5 | 	or	arg01, #1
19bd4     F0 19 B0 FD | 	call	#_jm_i2c_spin2_write
19bd8     00 74 06 F6 | 	mov	arg01, #0
19bdc     46 93 01 F6 | 	mov	objptr, local01
19be0     6C 1A B0 FD | 	call	#_jm_i2c_spin2_read
19be4     75 8C 06 F1 | 	add	local01, #117
19be8     46 35 42 FC | 	wrbyte	result1, local01
19bec     75 8C 86 F1 | 	sub	local01, #117
19bf0     01 74 06 F6 | 	mov	arg01, #1
19bf4     46 93 01 F6 | 	mov	objptr, local01
19bf8     54 1A B0 FD | 	call	#_jm_i2c_spin2_read
19bfc     74 8C 06 F1 | 	add	local01, #116
19c00     46 35 42 FC | 	wrbyte	result1, local01
19c04     74 8C 86 F1 | 	sub	local01, #116
19c08     46 93 01 F6 | 	mov	objptr, local01
19c0c     C8 1A B0 FD | 	call	#_jm_i2c_spin2_stop
19c10     47 93 01 F6 | 	mov	objptr, local02
19c14                 | ' {
19c14                 | ' #line 156 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/NavKey/i2cNavKey.c"
19c14                 | '   navkey->_tem_data.val = 0;
19c14                 | '   navkey->i2cBus.start();
19c14                 | '   navkey->i2cBus.write(navkey->_add & 0b11111110);
19c14                 | '   navkey->i2cBus.write(reg);
19c14                 | '   navkey->i2cBus.start();
19c14                 | '   navkey->i2cBus.write(navkey->_add | 0b00000001);
19c14                 | '   navkey->_tem_data.bval[1] = navkey->i2cBus.read(0);
19c14                 | '   navkey->_tem_data.bval[0] = navkey->i2cBus.read(1);
19c14                 | '   navkey->i2cBus.stop();
19c14                 | ' 
19c14                 | '   return ((int16_t)(navkey->_tem_data.val));
19c14     74 8C 06 F1 | 	add	local01, #116
19c18     46 35 02 FB | 	rdlong	result1, local01
19c1c     A8 F0 03 F6 | 	mov	ptra, fp
19c20     B3 00 A0 FD | 	call	#popregs_
19c24                 | _readNavKeyInt_1798_ret
19c24     2D 00 64 FD | 	ret
19c28                 | 
19c28                 | _writeNavKey8_1801
19c28     02 4C 05 F6 | 	mov	COUNT_, #2
19c2c     A9 00 A0 FD | 	call	#pushregs_
19c30     3A 8D 02 F6 | 	mov	local01, arg01
19c34     C9 8E 02 F6 | 	mov	local02, objptr
19c38     46 93 01 F6 | 	mov	objptr, local01
19c3c     40 19 B0 FD | 	call	#_jm_i2c_spin2_start
19c40     46 93 01 F6 | 	mov	objptr, local01
19c44     6C 8C 06 F1 | 	add	local01, #108
19c48     46 75 C2 FA | 	rdbyte	arg01, local01
19c4c     6C 8C 86 F1 | 	sub	local01, #108
19c50     FE 74 06 F5 | 	and	arg01, #254
19c54     70 19 B0 FD | 	call	#_jm_i2c_spin2_write
19c58     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19c5c     46 93 01 F6 | 	mov	objptr, local01
19c60     64 19 B0 FD | 	call	#_jm_i2c_spin2_write
19c64     3C 75 E2 F8 | 	getbyte	arg01, arg03, #0
19c68     46 93 01 F6 | 	mov	objptr, local01
19c6c     58 19 B0 FD | 	call	#_jm_i2c_spin2_write
19c70     46 93 01 F6 | 	mov	objptr, local01
19c74     60 1A B0 FD | 	call	#_jm_i2c_spin2_stop
19c78     47 93 01 F6 | 	mov	objptr, local02
19c7c     A8 F0 03 F6 | 	mov	ptra, fp
19c80     B3 00 A0 FD | 	call	#popregs_
19c84                 | _writeNavKey8_1801_ret
19c84     2D 00 64 FD | 	ret
19c88                 | 
19c88                 | _writeNavKey32_1802
19c88     01 4C 05 F6 | 	mov	COUNT_, #1
19c8c     A9 00 A0 FD | 	call	#pushregs_
19c90     3A 8D 02 F6 | 	mov	local01, arg01
19c94     74 8C 06 F1 | 	add	local01, #116
19c98     46 79 62 FC | 	wrlong	arg03, local01
19c9c     74 8C 86 F1 | 	sub	local01, #116
19ca0     C9 78 02 F6 | 	mov	arg03, objptr
19ca4     46 93 01 F6 | 	mov	objptr, local01
19ca8     D4 18 B0 FD | 	call	#_jm_i2c_spin2_start
19cac     46 93 01 F6 | 	mov	objptr, local01
19cb0     6C 8C 06 F1 | 	add	local01, #108
19cb4     46 75 C2 FA | 	rdbyte	arg01, local01
19cb8     6C 8C 86 F1 | 	sub	local01, #108
19cbc     FE 74 06 F5 | 	and	arg01, #254
19cc0     04 19 B0 FD | 	call	#_jm_i2c_spin2_write
19cc4     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19cc8     46 93 01 F6 | 	mov	objptr, local01
19ccc     F8 18 B0 FD | 	call	#_jm_i2c_spin2_write
19cd0     46 93 01 F6 | 	mov	objptr, local01
19cd4     77 8C 06 F1 | 	add	local01, #119
19cd8     46 75 C2 FA | 	rdbyte	arg01, local01
19cdc     77 8C 86 F1 | 	sub	local01, #119
19ce0     E4 18 B0 FD | 	call	#_jm_i2c_spin2_write
19ce4     46 93 01 F6 | 	mov	objptr, local01
19ce8     76 8C 06 F1 | 	add	local01, #118
19cec     46 75 C2 FA | 	rdbyte	arg01, local01
19cf0     76 8C 86 F1 | 	sub	local01, #118
19cf4     D0 18 B0 FD | 	call	#_jm_i2c_spin2_write
19cf8     46 93 01 F6 | 	mov	objptr, local01
19cfc     75 8C 06 F1 | 	add	local01, #117
19d00     46 75 C2 FA | 	rdbyte	arg01, local01
19d04     75 8C 86 F1 | 	sub	local01, #117
19d08     BC 18 B0 FD | 	call	#_jm_i2c_spin2_write
19d0c     46 93 01 F6 | 	mov	objptr, local01
19d10     74 8C 06 F1 | 	add	local01, #116
19d14     46 75 C2 FA | 	rdbyte	arg01, local01
19d18     74 8C 86 F1 | 	sub	local01, #116
19d1c     A8 18 B0 FD | 	call	#_jm_i2c_spin2_write
19d20     46 93 01 F6 | 	mov	objptr, local01
19d24     B0 19 B0 FD | 	call	#_jm_i2c_spin2_stop
19d28     3C 93 01 F6 | 	mov	objptr, arg03
19d2c     A8 F0 03 F6 | 	mov	ptra, fp
19d30     B3 00 A0 FD | 	call	#popregs_
19d34                 | _writeNavKey32_1802_ret
19d34     2D 00 64 FD | 	ret
19d38                 | 
19d38                 | _writeNavKeyFloat_1804
19d38     01 4C 05 F6 | 	mov	COUNT_, #1
19d3c     A9 00 A0 FD | 	call	#pushregs_
19d40     3A 8D 02 F6 | 	mov	local01, arg01
19d44     74 8C 06 F1 | 	add	local01, #116
19d48     46 79 62 FC | 	wrlong	arg03, local01
19d4c     74 8C 86 F1 | 	sub	local01, #116
19d50     C9 78 02 F6 | 	mov	arg03, objptr
19d54     46 93 01 F6 | 	mov	objptr, local01
19d58     24 18 B0 FD | 	call	#_jm_i2c_spin2_start
19d5c     46 93 01 F6 | 	mov	objptr, local01
19d60     6C 8C 06 F1 | 	add	local01, #108
19d64     46 75 C2 FA | 	rdbyte	arg01, local01
19d68     6C 8C 86 F1 | 	sub	local01, #108
19d6c     FE 74 06 F5 | 	and	arg01, #254
19d70     54 18 B0 FD | 	call	#_jm_i2c_spin2_write
19d74     3B 75 E2 F8 | 	getbyte	arg01, arg02, #0
19d78     46 93 01 F6 | 	mov	objptr, local01
19d7c     48 18 B0 FD | 	call	#_jm_i2c_spin2_write
19d80     46 93 01 F6 | 	mov	objptr, local01
19d84     77 8C 06 F1 | 	add	local01, #119
19d88     46 75 C2 FA | 	rdbyte	arg01, local01
19d8c     77 8C 86 F1 | 	sub	local01, #119
19d90     34 18 B0 FD | 	call	#_jm_i2c_spin2_write
19d94     46 93 01 F6 | 	mov	objptr, local01
19d98     76 8C 06 F1 | 	add	local01, #118
19d9c     46 75 C2 FA | 	rdbyte	arg01, local01
19da0     76 8C 86 F1 | 	sub	local01, #118
19da4     20 18 B0 FD | 	call	#_jm_i2c_spin2_write
19da8     46 93 01 F6 | 	mov	objptr, local01
19dac     75 8C 06 F1 | 	add	local01, #117
19db0     46 75 C2 FA | 	rdbyte	arg01, local01
19db4     75 8C 86 F1 | 	sub	local01, #117
19db8     0C 18 B0 FD | 	call	#_jm_i2c_spin2_write
19dbc     46 93 01 F6 | 	mov	objptr, local01
19dc0     74 8C 06 F1 | 	add	local01, #116
19dc4     46 75 C2 FA | 	rdbyte	arg01, local01
19dc8     74 8C 86 F1 | 	sub	local01, #116
19dcc     F8 17 B0 FD | 	call	#_jm_i2c_spin2_write
19dd0     46 93 01 F6 | 	mov	objptr, local01
19dd4     00 19 B0 FD | 	call	#_jm_i2c_spin2_stop
19dd8     3C 93 01 F6 | 	mov	objptr, arg03
19ddc     A8 F0 03 F6 | 	mov	ptra, fp
19de0     B3 00 A0 FD | 	call	#popregs_
19de4                 | _writeNavKeyFloat_1804_ret
19de4     2D 00 64 FD | 	ret
19de8                 | 
19de8                 | _button_callback_1829
19de8     09 4C 05 F6 | 	mov	COUNT_, #9
19dec     A9 00 A0 FD | 	call	#pushregs_
19df0     3A 8D 02 F6 | 	mov	local01, arg01
19df4     3B 8F 02 F6 | 	mov	local02, arg02
19df8     47 91 02 F6 | 	mov	local03, local02
19dfc                 | ' {
19dfc                 | '     MotionStateWindow *window = (MotionStateWindow *)arg;
19dfc                 | '     switch (id)
19dfc     46 93 02 F6 | 	mov	local04, local01
19e00     03 92 26 F3 | 	fle	local04, #3
19e04     30 92 62 FD | 	jmprel	local04
19e08                 | LR__0820
19e08     0C 00 90 FD | 	jmp	#LR__0821
19e0c     AC 00 90 FD | 	jmp	#LR__0824
19e10     A8 00 90 FD | 	jmp	#LR__0825
19e14     F0 00 90 FD | 	jmp	#LR__0829
19e18                 | LR__0821
19e18                 | '         switch (window->state->motionParameters.status)
19e18     48 95 02 FB | 	rdlong	local05, local03
19e1c     18 94 06 F1 | 	add	local05, #24
19e20     4A 97 0A FB | 	rdlong	local06, local05 wz
19e24     0C 00 90 AD |  if_e	jmp	#LR__0822
19e28     01 96 0E F2 | 	cmp	local06, #1 wz
19e2c     48 00 90 AD |  if_e	jmp	#LR__0823
19e30     D4 00 90 FD | 	jmp	#LR__0829
19e34                 | LR__0822
19e34     00 74 06 F6 | 	mov	arg01, #0
19e38     0C ED B0 FD | 	call	#__system___getiolock_1205
19e3c     1A 75 02 F6 | 	mov	arg01, result1
19e40     DC B4 B0 FD | 	call	#__system___lockmem
19e44     53 01 00 FF 
19e48     9B 76 06 F6 | 	mov	arg02, ##@LR__2265
19e4c     00 74 06 F6 | 	mov	arg01, #0
19e50     00 78 06 F6 | 	mov	arg03, #0
19e54     5C BA B0 FD | 	call	#__system___basic_print_string
19e58     00 74 06 F6 | 	mov	arg01, #0
19e5c     E8 EC B0 FD | 	call	#__system___getiolock_1205
19e60     1A 01 68 FC | 	wrlong	#0, result1
19e64     48 75 02 FB | 	rdlong	arg01, local03
19e68     08 76 06 F6 | 	mov	arg02, #8
19e6c     01 78 06 F6 | 	mov	arg03, #1
19e70     D0 89 BE FD | 	call	#_state_machine_set
19e74                 | '             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_ENABLED);
19e74                 | '             break;
19e74     90 00 90 FD | 	jmp	#LR__0829
19e78                 | LR__0823
19e78     00 74 06 F6 | 	mov	arg01, #0
19e7c     C8 EC B0 FD | 	call	#__system___getiolock_1205
19e80     1A 75 02 F6 | 	mov	arg01, result1
19e84     98 B4 B0 FD | 	call	#__system___lockmem
19e88     53 01 00 FF 
19e8c     AC 76 06 F6 | 	mov	arg02, ##@LR__2266
19e90     00 74 06 F6 | 	mov	arg01, #0
19e94     00 78 06 F6 | 	mov	arg03, #0
19e98     18 BA B0 FD | 	call	#__system___basic_print_string
19e9c     00 74 06 F6 | 	mov	arg01, #0
19ea0     A4 EC B0 FD | 	call	#__system___getiolock_1205
19ea4     1A 01 68 FC | 	wrlong	#0, result1
19ea8     48 75 02 FB | 	rdlong	arg01, local03
19eac     08 76 06 F6 | 	mov	arg02, #8
19eb0     00 78 06 F6 | 	mov	arg03, #0
19eb4     8C 89 BE FD | 	call	#_state_machine_set
19eb8                 | '             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_DISABLED);
19eb8                 | '             break;
19eb8                 | '         }
19eb8                 | '         break;
19eb8     4C 00 90 FD | 	jmp	#LR__0829
19ebc                 | LR__0824
19ebc                 | LR__0825
19ebc                 | '     {
19ebc                 | '         switch (window->state->motionParameters.mode)
19ebc     48 95 02 FB | 	rdlong	local05, local03
19ec0     20 94 06 F1 | 	add	local05, #32
19ec4     4A 99 0A FB | 	rdlong	local07, local05 wz
19ec8     0C 00 90 AD |  if_e	jmp	#LR__0826
19ecc     01 98 0E F2 | 	cmp	local07, #1 wz
19ed0     18 00 90 AD |  if_e	jmp	#LR__0827
19ed4     30 00 90 FD | 	jmp	#LR__0828
19ed8                 | LR__0826
19ed8     48 75 02 FB | 	rdlong	arg01, local03
19edc     0A 76 06 F6 | 	mov	arg02, #10
19ee0     01 78 06 F6 | 	mov	arg03, #1
19ee4     5C 89 BE FD | 	call	#_state_machine_set
19ee8                 | '             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_TEST);
19ee8                 | '             break;
19ee8     1C 00 90 FD | 	jmp	#LR__0828
19eec                 | LR__0827
19eec     48 95 02 FB | 	rdlong	local05, local03
19ef0     0A 9A 06 F6 | 	mov	local08, #10
19ef4     00 9C 06 F6 | 	mov	local09, #0
19ef8     4A 75 02 F6 | 	mov	arg01, local05
19efc     0A 76 06 F6 | 	mov	arg02, #10
19f00     00 78 06 F6 | 	mov	arg03, #0
19f04     3C 89 BE FD | 	call	#_state_machine_set
19f08                 | '             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_MANUAL);
19f08                 | '             break;
19f08                 | LR__0828
19f08                 | LR__0829
19f08     A8 F0 03 F6 | 	mov	ptra, fp
19f0c     B3 00 A0 FD | 	call	#popregs_
19f10                 | _button_callback_1829_ret
19f10     2D 00 64 FD | 	ret
19f14                 | 
19f14                 | _update_status_1835
19f14     10 4C 05 F6 | 	mov	COUNT_, #16
19f18     A9 00 A0 FD | 	call	#pushregs_
19f1c     3A 8D 02 F6 | 	mov	local01, arg01
19f20     3B 8F 02 F6 | 	mov	local02, arg02
19f24     3C 91 02 F6 | 	mov	local03, arg03
19f28     48 93 02 F6 | 	mov	local04, local03
19f2c     00 94 06 F6 | 	mov	local05, #0
19f30     00 96 06 F6 | 	mov	local06, #0
19f34     00 98 06 F6 | 	mov	local07, #0
19f38     00 9A 06 F6 | 	mov	local08, #0
19f3c                 | '     switch (window->state->motionParameters.status)
19f3c     49 9D 02 FB | 	rdlong	local09, local04
19f40     18 9C 06 F1 | 	add	local09, #24
19f44     4E 9F 02 FB | 	rdlong	local10, local09
19f48     4F A1 02 F6 | 	mov	local11, local10
19f4c     05 A0 26 F3 | 	fle	local11, #5
19f50     30 A0 62 FD | 	jmprel	local11
19f54                 | LR__0830
19f54     14 00 90 FD | 	jmp	#LR__0831
19f58     5C 00 90 FD | 	jmp	#LR__0832
19f5c     80 00 90 FD | 	jmp	#LR__0833
19f60     A4 00 90 FD | 	jmp	#LR__0834
19f64     C8 00 90 FD | 	jmp	#LR__0835
19f68     EC 00 90 FD | 	jmp	#LR__0836
19f6c                 | LR__0831
19f6c     55 01 00 FF 
19f70     FC D7 05 F1 | 	add	ptr__dat__, ##175100
19f74     49 9D 02 FB | 	rdlong	local09, local04
19f78     EB 9A 02 F6 | 	mov	local08, ptr__dat__
19f7c     4E A3 02 FB | 	rdlong	local12, local09
19f80     02 A2 0E F2 | 	cmp	local12, #2 wz
19f84     55 01 00 FF 
19f88     FC D7 85 F1 | 	sub	ptr__dat__, ##175100
19f8c     03 00 00 AF 
19f90     E0 95 06 A6 |  if_e	mov	local05, ##2016
19f94     00 96 06 A6 |  if_e	mov	local06, #0
19f98     0F 98 CE A9 |  if_e	bmask	local07, #15
19f9c     B8 00 90 AD |  if_e	jmp	#LR__0837
19fa0     50 00 00 FF 
19fa4     45 95 06 F6 | 	mov	local05, ##41285
19fa8     00 96 06 F6 | 	mov	local06, #0
19fac     7F 00 00 FF 
19fb0     E0 99 06 F6 | 	mov	local07, ##65504
19fb4                 | '         {
19fb4                 | '             statusOutlineColor =  0xA145 ;
19fb4                 | '             statusInnerColor =  0x0000 ;
19fb4                 | '             statusTextColor =  0xffe0 ;
19fb4                 | '         }
19fb4                 | '         break;
19fb4     A0 00 90 FD | 	jmp	#LR__0837
19fb8                 | LR__0832
19fb8     56 01 00 FF 
19fbc     04 D6 05 F1 | 	add	ptr__dat__, ##175108
19fc0     EB 9A 02 F6 | 	mov	local08, ptr__dat__
19fc4     03 00 00 FF 
19fc8     E0 95 06 F6 | 	mov	local05, ##2016
19fcc     0F 96 CE F9 | 	bmask	local06, #15
19fd0     00 98 06 F6 | 	mov	local07, #0
19fd4                 | '     {
19fd4                 | '         newString = enabledStr;
19fd4                 | '         statusOutlineColor =  0x07e0 ;
19fd4                 | '         statusInnerColor =  0xffff ;
19fd4                 | '         statusTextColor =  0x0000 ;
19fd4                 | '         break;
19fd4     56 01 00 FF 
19fd8     04 D6 85 F1 | 	sub	ptr__dat__, ##175108
19fdc     78 00 90 FD | 	jmp	#LR__0837
19fe0                 | LR__0833
19fe0     56 01 00 FF 
19fe4     0C D6 05 F1 | 	add	ptr__dat__, ##175116
19fe8     EB 9A 02 F6 | 	mov	local08, ptr__dat__
19fec     1F 94 06 F6 | 	mov	local05, #31
19ff0     7F 00 00 FF 
19ff4     E0 97 06 F6 | 	mov	local06, ##65504
19ff8     00 98 06 F6 | 	mov	local07, #0
19ffc                 | '     {
19ffc                 | ' 
19ffc                 | '         newString = smplimStr;
19ffc                 | '         statusOutlineColor =  0x001f ;
19ffc                 | '         statusInnerColor =  0xffe0 ;
19ffc                 | '         statusTextColor =  0x0000 ;
19ffc                 | '         break;
19ffc     56 01 00 FF 
1a000     0C D6 85 F1 | 	sub	ptr__dat__, ##175116
1a004     50 00 90 FD | 	jmp	#LR__0837
1a008                 | LR__0834
1a008     56 01 00 FF 
1a00c     14 D6 05 F1 | 	add	ptr__dat__, ##175124
1a010     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a014     1F 94 06 F6 | 	mov	local05, #31
1a018     7F 00 00 FF 
1a01c     E0 97 06 F6 | 	mov	local06, ##65504
1a020     00 98 06 F6 | 	mov	local07, #0
1a024                 | '     {
1a024                 | '         newString = mchlimStr;
1a024                 | '         statusOutlineColor =  0x001f ;
1a024                 | '         statusInnerColor =  0xffe0 ;
1a024                 | '         statusTextColor =  0x0000 ;
1a024                 | '         break;
1a024     56 01 00 FF 
1a028     14 D6 85 F1 | 	sub	ptr__dat__, ##175124
1a02c     28 00 90 FD | 	jmp	#LR__0837
1a030                 | LR__0835
1a030     56 01 00 FF 
1a034     1C D6 05 F1 | 	add	ptr__dat__, ##175132
1a038     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a03c     1F 94 06 F6 | 	mov	local05, #31
1a040     7C 00 00 FF 
1a044     00 96 06 F6 | 	mov	local06, ##63488
1a048     0F 98 CE F9 | 	bmask	local07, #15
1a04c                 | '     {
1a04c                 | '         newString = faultedStr;
1a04c                 | '         statusOutlineColor =  0x001f ;
1a04c                 | '         statusInnerColor =  0xf800 ;
1a04c                 | '         statusTextColor =  0xffff ;
1a04c                 | '         break;
1a04c     56 01 00 FF 
1a050     1C D6 85 F1 | 	sub	ptr__dat__, ##175132
1a054     00 00 90 FD | 	jmp	#LR__0837
1a058                 | LR__0836
1a058                 | '         break;
1a058                 | LR__0837
1a058     10 8F 06 F1 | 	add	local02, #272
1a05c     47 9D 02 FB | 	rdlong	local09, local02
1a060     10 8F 86 F1 | 	sub	local02, #272
1a064     4A 9D 0A F2 | 	cmp	local09, local05 wz
1a068     38 00 90 5D |  if_ne	jmp	#LR__0838
1a06c     04 8E 06 F1 | 	add	local02, #4
1a070     47 A5 02 FB | 	rdlong	local13, local02
1a074     04 8E 86 F1 | 	sub	local02, #4
1a078     0C A5 06 F1 | 	add	local13, #268
1a07c     52 A7 02 FB | 	rdlong	local14, local13
1a080     4B A7 0A F2 | 	cmp	local14, local06 wz
1a084     1C 00 90 5D |  if_ne	jmp	#LR__0838
1a088     04 8E 06 F1 | 	add	local02, #4
1a08c     47 A9 02 FB | 	rdlong	local15, local02
1a090     04 8E 86 F1 | 	sub	local02, #4
1a094     10 A9 06 F1 | 	add	local15, #272
1a098     54 AB 02 FB | 	rdlong	local16, local15
1a09c     4C AB 0A F2 | 	cmp	local16, local07 wz
1a0a0                 | '         module->child[0]->backgroundColor == statusInnerColor &&
1a0a0                 | '         module->child[0]->foregroundColor == statusTextColor)
1a0a0                 | '     {
1a0a0                 | '         return;
1a0a0     58 00 90 AD |  if_e	jmp	#LR__0839
1a0a4                 | LR__0838
1a0a4     14 8F 06 F1 | 	add	local02, #276
1a0a8     47 95 62 FC | 	wrlong	local05, local02
1a0ac     14 8F 86 F1 | 	sub	local02, #276
1a0b0     47 75 02 F6 | 	mov	arg01, local02
1a0b4     10 75 06 F1 | 	add	arg01, #272
1a0b8     3A 97 62 FC | 	wrlong	local06, arg01
1a0bc     04 74 86 F1 | 	sub	arg01, #4
1a0c0     3A 97 62 FC | 	wrlong	local06, arg01
1a0c4     04 8E 06 F1 | 	add	local02, #4
1a0c8     47 75 02 FB | 	rdlong	arg01, local02
1a0cc     4B 79 02 F6 | 	mov	arg03, local06
1a0d0     10 75 06 F1 | 	add	arg01, #272
1a0d4     3A 99 62 FC | 	wrlong	local07, arg01
1a0d8     04 74 86 F1 | 	sub	arg01, #4
1a0dc     3A 79 62 FC | 	wrlong	arg03, arg01
1a0e0     47 75 02 FB | 	rdlong	arg01, local02
1a0e4     04 8E 86 F1 | 	sub	local02, #4
1a0e8     D0 74 06 F1 | 	add	arg01, #208
1a0ec     3A 9B 62 FC | 	wrlong	local08, arg01
1a0f0     46 75 02 F6 | 	mov	arg01, local01
1a0f4     47 77 02 F6 | 	mov	arg02, local02
1a0f8     B4 F6 BE FD | 	call	#_module_draw
1a0fc                 | LR__0839
1a0fc     A8 F0 03 F6 | 	mov	ptra, fp
1a100     B3 00 A0 FD | 	call	#popregs_
1a104                 | _update_status_1835_ret
1a104     2D 00 64 FD | 	ret
1a108                 | 
1a108                 | _update_condition_1841
1a108     0F 4C 05 F6 | 	mov	COUNT_, #15
1a10c     A9 00 A0 FD | 	call	#pushregs_
1a110     3A 8D 02 F6 | 	mov	local01, arg01
1a114     3B 8F 02 F6 | 	mov	local02, arg02
1a118     3C 91 02 F6 | 	mov	local03, arg03
1a11c     48 93 02 F6 | 	mov	local04, local03
1a120     00 94 06 F6 | 	mov	local05, #0
1a124     00 96 06 F6 | 	mov	local06, #0
1a128     00 98 06 F6 | 	mov	local07, #0
1a12c     00 9A 06 F6 | 	mov	local08, #0
1a130                 | ' 
1a130                 | '     switch (window->state->motionParameters.condition)
1a130     49 9D 02 FB | 	rdlong	local09, local04
1a134     1C 9C 06 F1 | 	add	local09, #28
1a138     4E 9F 02 FB | 	rdlong	local10, local09
1a13c     4F A1 02 F6 | 	mov	local11, local10
1a140     09 A0 26 F3 | 	fle	local11, #9
1a144     30 A0 62 FD | 	jmprel	local11
1a148                 | LR__0840
1a148     24 00 90 FD | 	jmp	#LR__0841
1a14c     4C 00 90 FD | 	jmp	#LR__0842
1a150     74 00 90 FD | 	jmp	#LR__0843
1a154     9C 00 90 FD | 	jmp	#LR__0844
1a158     C4 00 90 FD | 	jmp	#LR__0845
1a15c     EC 00 90 FD | 	jmp	#LR__0846
1a160     14 01 90 FD | 	jmp	#LR__0847
1a164     3C 01 90 FD | 	jmp	#LR__0848
1a168     64 01 90 FD | 	jmp	#LR__0849
1a16c     8C 01 90 FD | 	jmp	#LR__0850
1a170                 | LR__0841
1a170     56 01 00 FF 
1a174     24 D6 05 F1 | 	add	ptr__dat__, ##175140
1a178     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a17c     7C 00 00 FF 
1a180     1F 94 06 F6 | 	mov	local05, ##63519
1a184     7C 00 00 FF 
1a188     1F 96 06 F6 | 	mov	local06, ##63519
1a18c     00 98 06 F6 | 	mov	local07, #0
1a190                 | '     {
1a190                 | '         newString = lengthStr;
1a190                 | '         conditionOutlineColor =  0xf81f ;
1a190                 | '         conditionInnerColor =  0xf81f ;
1a190                 | '         conditionTextColor =  0x0000 ;
1a190                 | '         break;
1a190     56 01 00 FF 
1a194     24 D6 85 F1 | 	sub	ptr__dat__, ##175140
1a198     60 01 90 FD | 	jmp	#LR__0851
1a19c                 | LR__0842
1a19c     56 01 00 FF 
1a1a0     2B D6 05 F1 | 	add	ptr__dat__, ##175147
1a1a4     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a1a8     7C 00 00 FF 
1a1ac     1F 94 06 F6 | 	mov	local05, ##63519
1a1b0     7C 00 00 FF 
1a1b4     1F 96 06 F6 | 	mov	local06, ##63519
1a1b8     00 98 06 F6 | 	mov	local07, #0
1a1bc                 | '     {
1a1bc                 | '         newString = forceStr;
1a1bc                 | '         conditionOutlineColor =  0xf81f ;
1a1bc                 | '         conditionInnerColor =  0xf81f ;
1a1bc                 | '         conditionTextColor =  0x0000 ;
1a1bc                 | '         break;
1a1bc     56 01 00 FF 
1a1c0     2B D6 85 F1 | 	sub	ptr__dat__, ##175147
1a1c4     34 01 90 FD | 	jmp	#LR__0851
1a1c8                 | LR__0843
1a1c8     56 01 00 FF 
1a1cc     31 D6 05 F1 | 	add	ptr__dat__, ##175153
1a1d0     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a1d4     7F 00 00 FF 
1a1d8     E0 95 06 F6 | 	mov	local05, ##65504
1a1dc     7F 00 00 FF 
1a1e0     E0 97 06 F6 | 	mov	local06, ##65504
1a1e4     00 98 06 F6 | 	mov	local07, #0
1a1e8                 | '     {
1a1e8                 | '         newString = tensionStr;
1a1e8                 | '         conditionOutlineColor =  0xffe0 ;
1a1e8                 | '         conditionInnerColor =  0xffe0 ;
1a1e8                 | '         conditionTextColor =  0x0000 ;
1a1e8                 | '         break;
1a1e8     56 01 00 FF 
1a1ec     31 D6 85 F1 | 	sub	ptr__dat__, ##175153
1a1f0     08 01 90 FD | 	jmp	#LR__0851
1a1f4                 | LR__0844
1a1f4     56 01 00 FF 
1a1f8     39 D6 05 F1 | 	add	ptr__dat__, ##175161
1a1fc     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a200     7F 00 00 FF 
1a204     E0 95 06 F6 | 	mov	local05, ##65504
1a208     7F 00 00 FF 
1a20c     E0 97 06 F6 | 	mov	local06, ##65504
1a210     00 98 06 F6 | 	mov	local07, #0
1a214                 | '     {
1a214                 | '         newString = compresStr;
1a214                 | '         conditionOutlineColor =  0xffe0 ;
1a214                 | '         conditionInnerColor =  0xffe0 ;
1a214                 | '         conditionTextColor =  0x0000 ;
1a214                 | '         break;
1a214     56 01 00 FF 
1a218     39 D6 85 F1 | 	sub	ptr__dat__, ##175161
1a21c     DC 00 90 FD | 	jmp	#LR__0851
1a220                 | LR__0845
1a220     56 01 00 FF 
1a224     41 D6 05 F1 | 	add	ptr__dat__, ##175169
1a228     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a22c     7F 00 00 FF 
1a230     E0 95 06 F6 | 	mov	local05, ##65504
1a234     7F 00 00 FF 
1a238     E0 97 06 F6 | 	mov	local06, ##65504
1a23c     00 98 06 F6 | 	mov	local07, #0
1a240                 | '     {
1a240                 | '         newString = upperStr;
1a240                 | '         conditionOutlineColor =  0xffe0 ;
1a240                 | '         conditionInnerColor =  0xffe0 ;
1a240                 | '         conditionTextColor =  0x0000 ;
1a240                 | '         break;
1a240     56 01 00 FF 
1a244     41 D6 85 F1 | 	sub	ptr__dat__, ##175169
1a248     B0 00 90 FD | 	jmp	#LR__0851
1a24c                 | LR__0846
1a24c     56 01 00 FF 
1a250     47 D6 05 F1 | 	add	ptr__dat__, ##175175
1a254     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a258     7F 00 00 FF 
1a25c     E0 95 06 F6 | 	mov	local05, ##65504
1a260     7F 00 00 FF 
1a264     E0 97 06 F6 | 	mov	local06, ##65504
1a268     00 98 06 F6 | 	mov	local07, #0
1a26c                 | '     {
1a26c                 | '         newString = lowerStr;
1a26c                 | '         conditionOutlineColor =  0xffe0 ;
1a26c                 | '         conditionInnerColor =  0xffe0 ;
1a26c                 | '         conditionTextColor =  0x0000 ;
1a26c                 | '         break;
1a26c     56 01 00 FF 
1a270     47 D6 85 F1 | 	sub	ptr__dat__, ##175175
1a274     84 00 90 FD | 	jmp	#LR__0851
1a278                 | LR__0847
1a278     56 01 00 FF 
1a27c     4D D6 05 F1 | 	add	ptr__dat__, ##175181
1a280     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a284     7F 00 00 FF 
1a288     E0 95 06 F6 | 	mov	local05, ##65504
1a28c     7F 00 00 FF 
1a290     E0 97 06 F6 | 	mov	local06, ##65504
1a294     00 98 06 F6 | 	mov	local07, #0
1a298                 | '     {
1a298                 | '         newString = doorStr;
1a298                 | '         conditionOutlineColor =  0xffe0 ;
1a298                 | '         conditionInnerColor =  0xffe0 ;
1a298                 | '         conditionTextColor =  0x0000 ;
1a298                 | '         break;
1a298     56 01 00 FF 
1a29c     4D D6 85 F1 | 	sub	ptr__dat__, ##175181
1a2a0     58 00 90 FD | 	jmp	#LR__0851
1a2a4                 | LR__0848
1a2a4     56 01 00 FF 
1a2a8     52 D6 05 F1 | 	add	ptr__dat__, ##175186
1a2ac     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a2b0     7C 00 00 FF 
1a2b4     00 94 06 F6 | 	mov	local05, ##63488
1a2b8     7C 00 00 FF 
1a2bc     00 96 06 F6 | 	mov	local06, ##63488
1a2c0     0F 98 CE F9 | 	bmask	local07, #15
1a2c4                 | '     {
1a2c4                 | '         newString = stoppedStr;
1a2c4                 | '         conditionOutlineColor =  0xf800 ;
1a2c4                 | '         conditionInnerColor =  0xf800 ;
1a2c4                 | '         conditionTextColor =  0xffff ;
1a2c4                 | '         break;
1a2c4     56 01 00 FF 
1a2c8     52 D6 85 F1 | 	sub	ptr__dat__, ##175186
1a2cc     2C 00 90 FD | 	jmp	#LR__0851
1a2d0                 | LR__0849
1a2d0     56 01 00 FF 
1a2d4     5A D6 05 F1 | 	add	ptr__dat__, ##175194
1a2d8     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a2dc     7E 00 00 FF 
1a2e0     1F 94 06 F6 | 	mov	local05, ##64543
1a2e4     7E 00 00 FF 
1a2e8     1F 96 06 F6 | 	mov	local06, ##64543
1a2ec     00 98 06 F6 | 	mov	local07, #0
1a2f0                 | '     {
1a2f0                 | '         newString = movingStr;
1a2f0                 | '         conditionOutlineColor =  0xfc1f ;
1a2f0                 | '         conditionInnerColor =  0xfc1f ;
1a2f0                 | '         conditionTextColor =  0x0000 ;
1a2f0                 | '         break;
1a2f0     56 01 00 FF 
1a2f4     5A D6 85 F1 | 	sub	ptr__dat__, ##175194
1a2f8     00 00 90 FD | 	jmp	#LR__0851
1a2fc                 | LR__0850
1a2fc                 | '         break;
1a2fc                 | LR__0851
1a2fc     10 8F 06 F1 | 	add	local02, #272
1a300     47 9D 02 FB | 	rdlong	local09, local02
1a304     10 8F 86 F1 | 	sub	local02, #272
1a308     4A 9D 0A F2 | 	cmp	local09, local05 wz
1a30c     38 00 90 5D |  if_ne	jmp	#LR__0852
1a310     04 8E 06 F1 | 	add	local02, #4
1a314     47 A3 02 FB | 	rdlong	local12, local02
1a318     04 8E 86 F1 | 	sub	local02, #4
1a31c     0C A3 06 F1 | 	add	local12, #268
1a320     51 A5 02 FB | 	rdlong	local13, local12
1a324     4B A5 0A F2 | 	cmp	local13, local06 wz
1a328     1C 00 90 5D |  if_ne	jmp	#LR__0852
1a32c     04 8E 06 F1 | 	add	local02, #4
1a330     47 A7 02 FB | 	rdlong	local14, local02
1a334     04 8E 86 F1 | 	sub	local02, #4
1a338     10 A7 06 F1 | 	add	local14, #272
1a33c     53 A9 02 FB | 	rdlong	local15, local14
1a340     4C A9 0A F2 | 	cmp	local15, local07 wz
1a344                 | '         module->child[0]->backgroundColor == conditionInnerColor &&
1a344                 | '         module->child[0]->foregroundColor == conditionTextColor)
1a344                 | '     {
1a344                 | '         return;
1a344     4C 00 90 AD |  if_e	jmp	#LR__0853
1a348                 | LR__0852
1a348     47 75 02 F6 | 	mov	arg01, local02
1a34c     10 75 06 F1 | 	add	arg01, #272
1a350     3A 95 62 FC | 	wrlong	local05, arg01
1a354     04 74 86 F1 | 	sub	arg01, #4
1a358     3A 95 62 FC | 	wrlong	local05, arg01
1a35c     04 8E 06 F1 | 	add	local02, #4
1a360     47 75 02 FB | 	rdlong	arg01, local02
1a364     4B 79 02 F6 | 	mov	arg03, local06
1a368     10 75 06 F1 | 	add	arg01, #272
1a36c     3A 99 62 FC | 	wrlong	local07, arg01
1a370     04 74 86 F1 | 	sub	arg01, #4
1a374     3A 79 62 FC | 	wrlong	arg03, arg01
1a378     47 75 02 FB | 	rdlong	arg01, local02
1a37c     04 8E 86 F1 | 	sub	local02, #4
1a380     D0 74 06 F1 | 	add	arg01, #208
1a384     3A 9B 62 FC | 	wrlong	local08, arg01
1a388     46 75 02 F6 | 	mov	arg01, local01
1a38c     47 77 02 F6 | 	mov	arg02, local02
1a390     1C F4 BE FD | 	call	#_module_draw
1a394                 | LR__0853
1a394     A8 F0 03 F6 | 	mov	ptra, fp
1a398     B3 00 A0 FD | 	call	#popregs_
1a39c                 | _update_condition_1841_ret
1a39c     2D 00 64 FD | 	ret
1a3a0                 | 
1a3a0                 | _update_mode_1847
1a3a0     0F 4C 05 F6 | 	mov	COUNT_, #15
1a3a4     A9 00 A0 FD | 	call	#pushregs_
1a3a8     3A 8D 02 F6 | 	mov	local01, arg01
1a3ac     3B 8F 02 F6 | 	mov	local02, arg02
1a3b0     3C 91 02 F6 | 	mov	local03, arg03
1a3b4     48 93 02 F6 | 	mov	local04, local03
1a3b8     00 94 06 F6 | 	mov	local05, #0
1a3bc     00 96 06 F6 | 	mov	local06, #0
1a3c0     00 98 06 F6 | 	mov	local07, #0
1a3c4     00 9A 06 F6 | 	mov	local08, #0
1a3c8                 | ' 
1a3c8                 | '     switch (window->state->motionParameters.mode)
1a3c8     49 9D 02 FB | 	rdlong	local09, local04
1a3cc     20 9C 06 F1 | 	add	local09, #32
1a3d0     4E 9F 02 FB | 	rdlong	local10, local09
1a3d4     4F A1 02 F6 | 	mov	local11, local10
1a3d8     03 A0 26 F3 | 	fle	local11, #3
1a3dc     30 A0 62 FD | 	jmprel	local11
1a3e0                 | LR__0854
1a3e0     0C 00 90 FD | 	jmp	#LR__0855
1a3e4     34 00 90 FD | 	jmp	#LR__0856
1a3e8     5C 00 90 FD | 	jmp	#LR__0857
1a3ec     84 00 90 FD | 	jmp	#LR__0858
1a3f0                 | LR__0855
1a3f0     56 01 00 FF 
1a3f4     61 D6 05 F1 | 	add	ptr__dat__, ##175201
1a3f8     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a3fc     7C 00 00 FF 
1a400     1F 94 06 F6 | 	mov	local05, ##63519
1a404     7C 00 00 FF 
1a408     1F 96 06 F6 | 	mov	local06, ##63519
1a40c     00 98 06 F6 | 	mov	local07, #0
1a410                 | '     {
1a410                 | '         newString = manualStr;
1a410                 | '         conditionOutlineColor =  0xf81f ;
1a410                 | '         conditionInnerColor =  0xf81f ;
1a410                 | '         conditionTextColor =  0x0000 ;
1a410                 | '         break;
1a410     56 01 00 FF 
1a414     61 D6 85 F1 | 	sub	ptr__dat__, ##175201
1a418     58 00 90 FD | 	jmp	#LR__0859
1a41c                 | LR__0856
1a41c     56 01 00 FF 
1a420     68 D6 05 F1 | 	add	ptr__dat__, ##175208
1a424     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a428     7C 00 00 FF 
1a42c     1F 94 06 F6 | 	mov	local05, ##63519
1a430     7C 00 00 FF 
1a434     1F 96 06 F6 | 	mov	local06, ##63519
1a438     00 98 06 F6 | 	mov	local07, #0
1a43c                 | '     {
1a43c                 | '         newString = testStr;
1a43c                 | '         conditionOutlineColor =  0xf81f ;
1a43c                 | '         conditionInnerColor =  0xf81f ;
1a43c                 | '         conditionTextColor =  0x0000 ;
1a43c                 | '         break;
1a43c     56 01 00 FF 
1a440     68 D6 85 F1 | 	sub	ptr__dat__, ##175208
1a444     2C 00 90 FD | 	jmp	#LR__0859
1a448                 | LR__0857
1a448     56 01 00 FF 
1a44c     6D D6 05 F1 | 	add	ptr__dat__, ##175213
1a450     EB 9A 02 F6 | 	mov	local08, ptr__dat__
1a454     7C 00 00 FF 
1a458     1F 94 06 F6 | 	mov	local05, ##63519
1a45c     7C 00 00 FF 
1a460     1F 96 06 F6 | 	mov	local06, ##63519
1a464     00 98 06 F6 | 	mov	local07, #0
1a468                 | '     {
1a468                 | '         newString = runStr;
1a468                 | '         conditionOutlineColor =  0xf81f ;
1a468                 | '         conditionInnerColor =  0xf81f ;
1a468                 | '         conditionTextColor =  0x0000 ;
1a468                 | '         break;
1a468     56 01 00 FF 
1a46c     6D D6 85 F1 | 	sub	ptr__dat__, ##175213
1a470     00 00 90 FD | 	jmp	#LR__0859
1a474                 | LR__0858
1a474                 | '         break;
1a474                 | LR__0859
1a474     10 8F 06 F1 | 	add	local02, #272
1a478     47 9D 02 FB | 	rdlong	local09, local02
1a47c     10 8F 86 F1 | 	sub	local02, #272
1a480     4A 9D 0A F2 | 	cmp	local09, local05 wz
1a484     5C 00 90 5D |  if_ne	jmp	#LR__0860
1a488     04 8E 06 F1 | 	add	local02, #4
1a48c     47 A3 02 FB | 	rdlong	local12, local02
1a490     04 8E 86 F1 | 	sub	local02, #4
1a494     0C A3 06 F1 | 	add	local12, #268
1a498     51 A5 02 FB | 	rdlong	local13, local12
1a49c     4B A5 0A F2 | 	cmp	local13, local06 wz
1a4a0     40 00 90 5D |  if_ne	jmp	#LR__0860
1a4a4     04 8E 06 F1 | 	add	local02, #4
1a4a8     47 A7 02 FB | 	rdlong	local14, local02
1a4ac     04 8E 86 F1 | 	sub	local02, #4
1a4b0     10 A7 06 F1 | 	add	local14, #272
1a4b4     53 A9 02 FB | 	rdlong	local15, local14
1a4b8     4C A9 0A F2 | 	cmp	local15, local07 wz
1a4bc     24 00 90 5D |  if_ne	jmp	#LR__0860
1a4c0     04 8E 06 F1 | 	add	local02, #4
1a4c4     47 75 02 FB | 	rdlong	arg01, local02
1a4c8     04 8E 86 F1 | 	sub	local02, #4
1a4cc     E0 EA BE FD | 	call	#_module_text_get
1a4d0     1A 77 02 F6 | 	mov	arg02, result1
1a4d4     4D 75 02 F6 | 	mov	arg01, local08
1a4d8     C0 BA BE FD | 	call	#_strcmp
1a4dc     00 34 0E F2 | 	cmp	result1, #0 wz
1a4e0                 | '         module->child[0]->backgroundColor == conditionInnerColor &&
1a4e0                 | '         module->child[0]->foregroundColor == conditionTextColor &&
1a4e0                 | '         strcmp(newString, module_text_get(module->child[0])) == 0)
1a4e0                 | '     {
1a4e0                 | '         return;
1a4e0     4C 00 90 AD |  if_e	jmp	#LR__0861
1a4e4                 | LR__0860
1a4e4     47 75 02 F6 | 	mov	arg01, local02
1a4e8     10 75 06 F1 | 	add	arg01, #272
1a4ec     3A 95 62 FC | 	wrlong	local05, arg01
1a4f0     04 74 86 F1 | 	sub	arg01, #4
1a4f4     3A 95 62 FC | 	wrlong	local05, arg01
1a4f8     04 8E 06 F1 | 	add	local02, #4
1a4fc     47 75 02 FB | 	rdlong	arg01, local02
1a500     4B 79 02 F6 | 	mov	arg03, local06
1a504     10 75 06 F1 | 	add	arg01, #272
1a508     3A 99 62 FC | 	wrlong	local07, arg01
1a50c     04 74 86 F1 | 	sub	arg01, #4
1a510     3A 79 62 FC | 	wrlong	arg03, arg01
1a514     47 75 02 FB | 	rdlong	arg01, local02
1a518     04 8E 86 F1 | 	sub	local02, #4
1a51c     D0 74 06 F1 | 	add	arg01, #208
1a520     3A 9B 62 FC | 	wrlong	local08, arg01
1a524     46 75 02 F6 | 	mov	arg01, local01
1a528     47 77 02 F6 | 	mov	arg02, local02
1a52c     80 F2 BE FD | 	call	#_module_draw
1a530                 | LR__0861
1a530     A8 F0 03 F6 | 	mov	ptra, fp
1a534     B3 00 A0 FD | 	call	#popregs_
1a538                 | _update_mode_1847_ret
1a538     2D 00 64 FD | 	ret
1a53c                 | 
1a53c                 | _button_set_function_1901
1a53c     3B 77 02 FB | 	rdlong	arg02, arg02
1a540     3A 79 02 F6 | 	mov	arg03, arg01
1a544     3B 75 02 F6 | 	mov	arg01, arg02
1a548     0B 76 06 F6 | 	mov	arg02, #11
1a54c     F4 82 BE FD | 	call	#_state_machine_set
1a550                 | _button_set_function_1901_ret
1a550     2D 00 64 FD | 	ret
1a554                 | 
1a554                 | _update_header_1905
1a554     09 4C 05 F6 | 	mov	COUNT_, #9
1a558     A9 00 A0 FD | 	call	#pushregs_
1a55c     38 F0 07 F1 | 	add	ptra, #56
1a560     A8 74 62 FC | 	wrlong	arg01, fp
1a564     04 50 05 F1 | 	add	fp, #4
1a568     A8 76 62 FC | 	wrlong	arg02, fp
1a56c     04 50 05 F1 | 	add	fp, #4
1a570     A8 78 62 FC | 	wrlong	arg03, fp
1a574     04 50 05 F1 | 	add	fp, #4
1a578     A8 78 62 FC | 	wrlong	arg03, fp
1a57c     04 50 05 F1 | 	add	fp, #4
1a580     A8 74 02 F6 | 	mov	arg01, fp
1a584     3C 77 02 F6 | 	mov	arg02, arg03
1a588     10 50 85 F1 | 	sub	fp, #16
1a58c     04 76 06 F1 | 	add	arg02, #4
1a590     04 AD B0 FD | 	call	#__system____builtin_strcpy
1a594                 | '     __builtin_strcpy(lastHeader, window->functionHeaderBuffer) ;
1a594                 | ' 
1a594                 | '     switch (window->state->function)
1a594     0C 50 05 F1 | 	add	fp, #12
1a598     A8 8C 02 FB | 	rdlong	local01, fp
1a59c     0C 50 85 F1 | 	sub	fp, #12
1a5a0     46 8F 02 F6 | 	mov	local02, local01
1a5a4     47 91 02 FB | 	rdlong	local03, local02
1a5a8     24 90 06 F1 | 	add	local03, #36
1a5ac     48 93 02 FB | 	rdlong	local04, local03
1a5b0     24 90 86 F1 | 	sub	local03, #36
1a5b4     49 95 02 F6 | 	mov	local05, local04
1a5b8     07 94 26 F3 | 	fle	local05, #7
1a5bc     30 94 62 FD | 	jmprel	local05
1a5c0                 | LR__0862
1a5c0     1C 00 90 FD | 	jmp	#LR__0863
1a5c4     38 00 90 FD | 	jmp	#LR__0864
1a5c8     90 00 90 FD | 	jmp	#LR__0865
1a5cc     D8 00 90 FD | 	jmp	#LR__0866
1a5d0     20 01 90 FD | 	jmp	#LR__0867
1a5d4     58 02 90 FD | 	jmp	#LR__0872
1a5d8     A0 02 90 FD | 	jmp	#LR__0873
1a5dc     D8 02 90 FD | 	jmp	#LR__0874
1a5e0                 | LR__0863
1a5e0     0C 50 05 F1 | 	add	fp, #12
1a5e4     A8 74 02 FB | 	rdlong	arg01, fp
1a5e8     0C 50 85 F1 | 	sub	fp, #12
1a5ec     04 74 06 F1 | 	add	arg01, #4
1a5f0     53 01 00 FF 
1a5f4     BC 76 06 F6 | 	mov	arg02, ##@LR__2267
1a5f8     28 76 BE FD | 	call	#_sprintf
1a5fc                 | '         sprintf(window->functionHeaderBuffer, "OFF");
1a5fc                 | '         break;
1a5fc     E4 02 90 FD | 	jmp	#LR__0875
1a600                 | LR__0864
1a600     0C 50 05 F1 | 	add	fp, #12
1a604     A8 94 02 FB | 	rdlong	local05, fp
1a608     04 94 06 F1 | 	add	local05, #4
1a60c     53 01 00 FF 
1a610     C0 92 06 F6 | 	mov	local04, ##@LR__2268
1a614     A8 90 02 FB | 	rdlong	local03, fp
1a618     0C 50 85 F1 | 	sub	fp, #12
1a61c     48 91 02 FB | 	rdlong	local03, local03
1a620     28 90 06 F1 | 	add	local03, #40
1a624     48 75 02 FB | 	rdlong	arg01, local03
1a628     40 C7 B0 FD | 	call	#__system___float_fromint
1a62c     1A 75 02 F6 | 	mov	arg01, result1
1a630     00 3D 22 FF 
1a634     00 76 06 F6 | 	mov	arg02, ##1148846080
1a638     84 CC B0 FD | 	call	#__system___float_div
1a63c     1A 91 02 F6 | 	mov	local03, result1
1a640     4A 75 02 F6 | 	mov	arg01, local05
1a644     49 77 02 F6 | 	mov	arg02, local04
1a648     F8 79 02 F6 | 	mov	arg03, ptra
1a64c     61 91 66 FC | 	wrlong	local03, ptra++
1a650     D0 75 BE FD | 	call	#_sprintf
1a654     04 F0 87 F1 | 	sub	ptra, #4
1a658                 | '         break;
1a658     88 02 90 FD | 	jmp	#LR__0875
1a65c                 | LR__0865
1a65c     0C 50 05 F1 | 	add	fp, #12
1a660     A8 74 02 FB | 	rdlong	arg01, fp
1a664     3A 95 02 FB | 	rdlong	local05, arg01
1a668     28 94 06 F1 | 	add	local05, #40
1a66c     4A 95 02 FB | 	rdlong	local05, local05
1a670     4A 95 52 F6 | 	abs	local05, local05 wc
1a674     01 00 00 FF 
1a678     E8 95 16 FD | 	qdiv	local05, ##1000
1a67c     04 74 06 F1 | 	add	arg01, #4
1a680     53 01 00 FF 
1a684     D2 76 06 F6 | 	mov	arg02, ##@LR__2269
1a688     0C 50 85 F1 | 	sub	fp, #12
1a68c     18 94 62 FD | 	getqx	local05
1a690     4A 95 82 F6 | 	negc	local05, local05
1a694     F8 79 02 F6 | 	mov	arg03, ptra
1a698     61 95 66 FC | 	wrlong	local05, ptra++
1a69c     84 75 BE FD | 	call	#_sprintf
1a6a0     04 F0 87 F1 | 	sub	ptra, #4
1a6a4                 | '         sprintf(window->functionHeaderBuffer, "CONT JOG: %dmm", window->state->functionData / 1000);
1a6a4                 | '         break;
1a6a4     3C 02 90 FD | 	jmp	#LR__0875
1a6a8                 | LR__0866
1a6a8     0C 50 05 F1 | 	add	fp, #12
1a6ac     A8 74 02 FB | 	rdlong	arg01, fp
1a6b0     3A 95 02 FB | 	rdlong	local05, arg01
1a6b4     28 94 06 F1 | 	add	local05, #40
1a6b8     4A 95 02 FB | 	rdlong	local05, local05
1a6bc     4A 95 52 F6 | 	abs	local05, local05 wc
1a6c0     01 00 00 FF 
1a6c4     E8 95 16 FD | 	qdiv	local05, ##1000
1a6c8     04 74 06 F1 | 	add	arg01, #4
1a6cc     53 01 00 FF 
1a6d0     E1 76 06 F6 | 	mov	arg02, ##@LR__2270
1a6d4     0C 50 85 F1 | 	sub	fp, #12
1a6d8     18 94 62 FD | 	getqx	local05
1a6dc     4A 95 82 F6 | 	negc	local05, local05
1a6e0     F8 79 02 F6 | 	mov	arg03, ptra
1a6e4     61 95 66 FC | 	wrlong	local05, ptra++
1a6e8     38 75 BE FD | 	call	#_sprintf
1a6ec     04 F0 87 F1 | 	sub	ptra, #4
1a6f0                 | '         sprintf(window->functionHeaderBuffer, "POSN MOVE: %dmm", window->state->functionData / 1000);
1a6f0                 | '         break;
1a6f0     F0 01 90 FD | 	jmp	#LR__0875
1a6f4                 | LR__0867
1a6f4     0C 50 05 F1 | 	add	fp, #12
1a6f8     A8 76 02 FB | 	rdlong	arg02, fp
1a6fc     0C 50 85 F1 | 	sub	fp, #12
1a700     3B 77 02 FB | 	rdlong	arg02, arg02
1a704     28 76 06 F1 | 	add	arg02, #40
1a708     3B 77 0A FB | 	rdlong	arg02, arg02 wz
1a70c     20 00 90 5D |  if_ne	jmp	#LR__0868
1a710     0C 50 05 F1 | 	add	fp, #12
1a714     A8 74 02 FB | 	rdlong	arg01, fp
1a718     0C 50 85 F1 | 	sub	fp, #12
1a71c     04 74 06 F1 | 	add	arg01, #4
1a720     53 01 00 FF 
1a724     F1 76 06 F6 | 	mov	arg02, ##@LR__2271
1a728     F8 74 BE FD | 	call	#_sprintf
1a72c     B4 01 90 FD | 	jmp	#LR__0875
1a730                 | LR__0868
1a730     0C 50 05 F1 | 	add	fp, #12
1a734     A8 76 02 FB | 	rdlong	arg02, fp
1a738     0C 50 85 F1 | 	sub	fp, #12
1a73c     3B 77 02 FB | 	rdlong	arg02, arg02
1a740     28 76 06 F1 | 	add	arg02, #40
1a744     3B 95 02 FB | 	rdlong	local05, arg02
1a748     02 94 0E F2 | 	cmp	local05, #2 wz
1a74c     20 00 90 5D |  if_ne	jmp	#LR__0869
1a750     0C 50 05 F1 | 	add	fp, #12
1a754     A8 74 02 FB | 	rdlong	arg01, fp
1a758     0C 50 85 F1 | 	sub	fp, #12
1a75c     04 74 06 F1 | 	add	arg01, #4
1a760     53 01 00 FF 
1a764     F6 76 06 F6 | 	mov	arg02, ##@LR__2272
1a768     B8 74 BE FD | 	call	#_sprintf
1a76c     74 01 90 FD | 	jmp	#LR__0875
1a770                 | LR__0869
1a770     0C 50 05 F1 | 	add	fp, #12
1a774     A8 76 02 FB | 	rdlong	arg02, fp
1a778     0C 50 85 F1 | 	sub	fp, #12
1a77c     3B 77 02 FB | 	rdlong	arg02, arg02
1a780     28 76 06 F1 | 	add	arg02, #40
1a784     3B 95 02 FB | 	rdlong	local05, arg02
1a788     04 94 0E F2 | 	cmp	local05, #4 wz
1a78c     20 00 90 5D |  if_ne	jmp	#LR__0870
1a790     0C 50 05 F1 | 	add	fp, #12
1a794     A8 74 02 FB | 	rdlong	arg01, fp
1a798     0C 50 85 F1 | 	sub	fp, #12
1a79c     04 74 06 F1 | 	add	arg01, #4
1a7a0     53 01 00 FF 
1a7a4     FD 76 06 F6 | 	mov	arg02, ##@LR__2273
1a7a8     78 74 BE FD | 	call	#_sprintf
1a7ac     34 01 90 FD | 	jmp	#LR__0875
1a7b0                 | LR__0870
1a7b0     0C 50 05 F1 | 	add	fp, #12
1a7b4     A8 76 02 FB | 	rdlong	arg02, fp
1a7b8     0C 50 85 F1 | 	sub	fp, #12
1a7bc     3B 77 02 FB | 	rdlong	arg02, arg02
1a7c0     28 76 06 F1 | 	add	arg02, #40
1a7c4     3B 95 02 FB | 	rdlong	local05, arg02
1a7c8     03 94 0E F2 | 	cmp	local05, #3 wz
1a7cc     20 00 90 5D |  if_ne	jmp	#LR__0871
1a7d0     0C 50 05 F1 | 	add	fp, #12
1a7d4     A8 74 02 FB | 	rdlong	arg01, fp
1a7d8     0C 50 85 F1 | 	sub	fp, #12
1a7dc     04 74 06 F1 | 	add	arg01, #4
1a7e0     53 01 00 FF 
1a7e4     11 77 06 F6 | 	mov	arg02, ##@LR__2274
1a7e8     38 74 BE FD | 	call	#_sprintf
1a7ec     F4 00 90 FD | 	jmp	#LR__0875
1a7f0                 | LR__0871
1a7f0     0C 50 05 F1 | 	add	fp, #12
1a7f4     A8 94 02 FB | 	rdlong	local05, fp
1a7f8     0C 50 85 F1 | 	sub	fp, #12
1a7fc     4A 95 02 FB | 	rdlong	local05, local05
1a800     28 94 06 F1 | 	add	local05, #40
1a804     4A 95 02 FB | 	rdlong	local05, local05
1a808     01 94 0E F2 | 	cmp	local05, #1 wz
1a80c     D4 00 90 5D |  if_ne	jmp	#LR__0875
1a810     0C 50 05 F1 | 	add	fp, #12
1a814     A8 74 02 FB | 	rdlong	arg01, fp
1a818     0C 50 85 F1 | 	sub	fp, #12
1a81c     04 74 06 F1 | 	add	arg01, #4
1a820     53 01 00 FF 
1a824     24 77 06 F6 | 	mov	arg02, ##@LR__2275
1a828     F8 73 BE FD | 	call	#_sprintf
1a82c                 | '             sprintf(window->functionHeaderBuffer, "HOMING COMPLETE");
1a82c                 | '         break;
1a82c     B4 00 90 FD | 	jmp	#LR__0875
1a830                 | LR__0872
1a830     0C 50 05 F1 | 	add	fp, #12
1a834     A8 74 02 FB | 	rdlong	arg01, fp
1a838     3A 95 02 FB | 	rdlong	local05, arg01
1a83c     28 94 06 F1 | 	add	local05, #40
1a840     4A 95 02 FB | 	rdlong	local05, local05
1a844     4A 95 52 F6 | 	abs	local05, local05 wc
1a848     01 00 00 FF 
1a84c     E8 95 16 FD | 	qdiv	local05, ##1000
1a850     04 74 06 F1 | 	add	arg01, #4
1a854     53 01 00 FF 
1a858     34 77 06 F6 | 	mov	arg02, ##@LR__2276
1a85c     0C 50 85 F1 | 	sub	fp, #12
1a860     18 94 62 FD | 	getqx	local05
1a864     4A 95 82 F6 | 	negc	local05, local05
1a868     F8 79 02 F6 | 	mov	arg03, ptra
1a86c     61 95 66 FC | 	wrlong	local05, ptra++
1a870     B0 73 BE FD | 	call	#_sprintf
1a874     04 F0 87 F1 | 	sub	ptra, #4
1a878                 | '         sprintf(window->functionHeaderBuffer, "GAUGE LENGTH: %dmm", window->state->functionData / 1000);
1a878                 | '         break;
1a878     68 00 90 FD | 	jmp	#LR__0875
1a87c                 | LR__0873
1a87c     0C 50 05 F1 | 	add	fp, #12
1a880     A8 74 02 FB | 	rdlong	arg01, fp
1a884     04 74 06 F1 | 	add	arg01, #4
1a888     53 01 00 FF 
1a88c     47 77 06 F6 | 	mov	arg02, ##@LR__2277
1a890     A8 94 02 FB | 	rdlong	local05, fp
1a894     0C 50 85 F1 | 	sub	fp, #12
1a898     4A 79 02 FB | 	rdlong	arg03, local05
1a89c     28 78 06 F1 | 	add	arg03, #40
1a8a0     3C 95 02 FB | 	rdlong	local05, arg03
1a8a4     F8 79 02 F6 | 	mov	arg03, ptra
1a8a8     61 95 66 FC | 	wrlong	local05, ptra++
1a8ac     74 73 BE FD | 	call	#_sprintf
1a8b0     04 F0 87 F1 | 	sub	ptra, #4
1a8b4                 | '         sprintf(window->functionHeaderBuffer, "GAUGE FORCE: %dmN", window->state->functionData);
1a8b4                 | '         break;
1a8b4     2C 00 90 FD | 	jmp	#LR__0875
1a8b8                 | LR__0874
1a8b8     0C 50 05 F1 | 	add	fp, #12
1a8bc     A8 96 02 FB | 	rdlong	local06, fp
1a8c0     0C 50 85 F1 | 	sub	fp, #12
1a8c4     04 96 06 F1 | 	add	local06, #4
1a8c8     4B 99 02 F6 | 	mov	local07, local06
1a8cc     53 01 00 FF 
1a8d0     59 9B 06 F6 | 	mov	local08, ##@LR__2278
1a8d4     4D 9D 02 F6 | 	mov	local09, local08
1a8d8     4C 75 02 F6 | 	mov	arg01, local07
1a8dc     4E 77 02 F6 | 	mov	arg02, local09
1a8e0     40 73 BE FD | 	call	#_sprintf
1a8e4                 | '         sprintf(window->functionHeaderBuffer, "OFF");
1a8e4                 | '         break;
1a8e4                 | LR__0875
1a8e4     30 50 05 F1 | 	add	fp, #48
1a8e8     A8 00 48 FC | 	wrbyte	#0, fp
1a8ec     24 50 85 F1 | 	sub	fp, #36
1a8f0     A8 74 02 FB | 	rdlong	arg01, fp
1a8f4     04 74 06 F1 | 	add	arg01, #4
1a8f8     04 50 05 F1 | 	add	fp, #4
1a8fc     A8 76 02 F6 | 	mov	arg02, fp
1a900     10 50 85 F1 | 	sub	fp, #16
1a904     94 B6 BE FD | 	call	#_strcmp
1a908     00 34 0E F2 | 	cmp	result1, #0 wz
1a90c     A8 74 02 5B |  if_ne	rdlong	arg01, fp
1a910     04 50 05 51 |  if_ne	add	fp, #4
1a914     A8 76 02 5B |  if_ne	rdlong	arg02, fp
1a918     04 50 85 51 |  if_ne	sub	fp, #4
1a91c     90 EE BE 5D |  if_ne	call	#_module_draw
1a920     A8 F0 03 F6 | 	mov	ptra, fp
1a924     B3 00 A0 FD | 	call	#popregs_
1a928                 | _update_header_1905_ret
1a928     2D 00 64 FD | 	ret
1a92c                 | 
1a92c                 | _update_off_1910
1a92c     0D 4C 05 F6 | 	mov	COUNT_, #13
1a930     A9 00 A0 FD | 	call	#pushregs_
1a934     3A 8D 02 F6 | 	mov	local01, arg01
1a938     3B 8F 02 F6 | 	mov	local02, arg02
1a93c     3C 91 02 F6 | 	mov	local03, arg03
1a940     48 93 02 FB | 	rdlong	local04, local03
1a944     49 95 02 FB | 	rdlong	local05, local04
1a948     02 94 0E F2 | 	cmp	local05, #2 wz
1a94c     40 00 90 5D |  if_ne	jmp	#LR__0876
1a950     48 97 02 FB | 	rdlong	local06, local03
1a954     18 96 06 F1 | 	add	local06, #24
1a958     4B 99 0A FB | 	rdlong	local07, local06 wz
1a95c     30 00 90 AD |  if_e	jmp	#LR__0876
1a960     48 93 02 FB | 	rdlong	local04, local03
1a964     24 92 06 F1 | 	add	local04, #36
1a968     49 95 0A FB | 	rdlong	local05, local04 wz
1a96c     1F 9A 06 A6 |  if_e	mov	local08, #31
1a970     00 9C 06 A6 |  if_e	mov	local09, #0
1a974     0F 9E CE A9 |  if_e	bmask	local10, #15
1a978     24 00 90 AD |  if_e	jmp	#LR__0877
1a97c     03 00 00 FF 
1a980     E0 9B 06 F6 | 	mov	local08, ##2016
1a984     00 9C 06 F6 | 	mov	local09, #0
1a988     0F 9E CE F9 | 	bmask	local10, #15
1a98c     10 00 90 FD | 	jmp	#LR__0877
1a990                 | LR__0876
1a990     7D 00 00 FF 
1a994     C0 9B 06 F6 | 	mov	local08, ##64448
1a998     00 9C 06 F6 | 	mov	local09, #0
1a99c     0F 9E CE F9 | 	bmask	local10, #15
1a9a0                 | LR__0877
1a9a0     10 8F 06 F1 | 	add	local02, #272
1a9a4     47 93 02 FB | 	rdlong	local04, local02
1a9a8     10 8F 86 F1 | 	sub	local02, #272
1a9ac     4D 93 0A F2 | 	cmp	local04, local08 wz
1a9b0     38 00 90 5D |  if_ne	jmp	#LR__0878
1a9b4     04 8E 06 F1 | 	add	local02, #4
1a9b8     47 97 02 FB | 	rdlong	local06, local02
1a9bc     04 8E 86 F1 | 	sub	local02, #4
1a9c0     0C 97 06 F1 | 	add	local06, #268
1a9c4     4B A1 02 FB | 	rdlong	local11, local06
1a9c8     4E A1 0A F2 | 	cmp	local11, local09 wz
1a9cc     1C 00 90 5D |  if_ne	jmp	#LR__0878
1a9d0     04 8E 06 F1 | 	add	local02, #4
1a9d4     47 A3 02 FB | 	rdlong	local12, local02
1a9d8     04 8E 86 F1 | 	sub	local02, #4
1a9dc     10 A3 06 F1 | 	add	local12, #272
1a9e0     51 A5 02 FB | 	rdlong	local13, local12
1a9e4     4F A5 0A F2 | 	cmp	local13, local10 wz
1a9e8                 | '         module->child[0]->backgroundColor == innerColor &&
1a9e8                 | '         module->child[0]->foregroundColor == textColor)
1a9e8                 | '     {
1a9e8                 | '         return;
1a9e8     30 00 90 AD |  if_e	jmp	#LR__0879
1a9ec                 | LR__0878
1a9ec     47 75 02 F6 | 	mov	arg01, local02
1a9f0     4E 79 02 F6 | 	mov	arg03, local09
1a9f4     10 75 06 F1 | 	add	arg01, #272
1a9f8     3A 9F 62 FC | 	wrlong	local10, arg01
1a9fc     04 74 86 F1 | 	sub	arg01, #4
1aa00     3A 79 62 FC | 	wrlong	arg03, arg01
1aa04     14 8F 06 F1 | 	add	local02, #276
1aa08     47 9B 62 FC | 	wrlong	local08, local02
1aa0c     14 8F 86 F1 | 	sub	local02, #276
1aa10     46 75 02 F6 | 	mov	arg01, local01
1aa14     47 77 02 F6 | 	mov	arg02, local02
1aa18     94 ED BE FD | 	call	#_module_draw
1aa1c                 | LR__0879
1aa1c     A8 F0 03 F6 | 	mov	ptra, fp
1aa20     B3 00 A0 FD | 	call	#popregs_
1aa24                 | _update_off_1910_ret
1aa24     2D 00 64 FD | 	ret
1aa28                 | 
1aa28                 | _update_incremental_1915
1aa28     0E 4C 05 F6 | 	mov	COUNT_, #14
1aa2c     A9 00 A0 FD | 	call	#pushregs_
1aa30     3A 8D 02 F6 | 	mov	local01, arg01
1aa34     3B 8F 02 F6 | 	mov	local02, arg02
1aa38     3C 91 02 F6 | 	mov	local03, arg03
1aa3c     48 93 02 FB | 	rdlong	local04, local03
1aa40     49 95 02 FB | 	rdlong	local05, local04
1aa44     02 94 0E F2 | 	cmp	local05, #2 wz
1aa48     58 00 90 5D |  if_ne	jmp	#LR__0880
1aa4c     48 97 02 FB | 	rdlong	local06, local03
1aa50     1C 96 06 F1 | 	add	local06, #28
1aa54     4B 99 02 FB | 	rdlong	local07, local06
1aa58     08 98 0E F2 | 	cmp	local07, #8 wz
1aa5c     44 00 90 AD |  if_e	jmp	#LR__0880
1aa60     48 9B 02 FB | 	rdlong	local08, local03
1aa64     18 9A 06 F1 | 	add	local08, #24
1aa68     4D 9D 0A FB | 	rdlong	local09, local08 wz
1aa6c     34 00 90 AD |  if_e	jmp	#LR__0880
1aa70     48 93 02 FB | 	rdlong	local04, local03
1aa74     24 92 06 F1 | 	add	local04, #36
1aa78     49 95 02 FB | 	rdlong	local05, local04
1aa7c     01 94 0E F2 | 	cmp	local05, #1 wz
1aa80     1F 9E 06 A6 |  if_e	mov	local10, #31
1aa84     00 A0 06 A6 |  if_e	mov	local11, #0
1aa88     0F A2 CE A9 |  if_e	bmask	local12, #15
1aa8c     24 00 90 AD |  if_e	jmp	#LR__0881
1aa90     03 00 00 FF 
1aa94     E0 9F 06 F6 | 	mov	local10, ##2016
1aa98     00 A0 06 F6 | 	mov	local11, #0
1aa9c     0F A2 CE F9 | 	bmask	local12, #15
1aaa0     10 00 90 FD | 	jmp	#LR__0881
1aaa4                 | LR__0880
1aaa4     7D 00 00 FF 
1aaa8     C0 9F 06 F6 | 	mov	local10, ##64448
1aaac     00 A0 06 F6 | 	mov	local11, #0
1aab0     0F A2 CE F9 | 	bmask	local12, #15
1aab4                 | LR__0881
1aab4     10 8F 06 F1 | 	add	local02, #272
1aab8     47 93 02 FB | 	rdlong	local04, local02
1aabc     10 8F 86 F1 | 	sub	local02, #272
1aac0     4F 93 0A F2 | 	cmp	local04, local10 wz
1aac4     38 00 90 5D |  if_ne	jmp	#LR__0882
1aac8     04 8E 06 F1 | 	add	local02, #4
1aacc     47 97 02 FB | 	rdlong	local06, local02
1aad0     04 8E 86 F1 | 	sub	local02, #4
1aad4     0C 97 06 F1 | 	add	local06, #268
1aad8     4B A5 02 FB | 	rdlong	local13, local06
1aadc     50 A5 0A F2 | 	cmp	local13, local11 wz
1aae0     1C 00 90 5D |  if_ne	jmp	#LR__0882
1aae4     04 8E 06 F1 | 	add	local02, #4
1aae8     47 9D 02 FB | 	rdlong	local09, local02
1aaec     04 8E 86 F1 | 	sub	local02, #4
1aaf0     10 9D 06 F1 | 	add	local09, #272
1aaf4     4E A7 02 FB | 	rdlong	local14, local09
1aaf8     51 A7 0A F2 | 	cmp	local14, local12 wz
1aafc                 | '         module->child[0]->backgroundColor == innerColor &&
1aafc                 | '         module->child[0]->foregroundColor == textColor)
1aafc                 | '     {
1aafc                 | '         return;
1aafc     30 00 90 AD |  if_e	jmp	#LR__0883
1ab00                 | LR__0882
1ab00     47 75 02 F6 | 	mov	arg01, local02
1ab04     50 79 02 F6 | 	mov	arg03, local11
1ab08     10 75 06 F1 | 	add	arg01, #272
1ab0c     3A A3 62 FC | 	wrlong	local12, arg01
1ab10     04 74 86 F1 | 	sub	arg01, #4
1ab14     3A 79 62 FC | 	wrlong	arg03, arg01
1ab18     14 8F 06 F1 | 	add	local02, #276
1ab1c     47 9F 62 FC | 	wrlong	local10, local02
1ab20     14 8F 86 F1 | 	sub	local02, #276
1ab24     46 75 02 F6 | 	mov	arg01, local01
1ab28     47 77 02 F6 | 	mov	arg02, local02
1ab2c     80 EC BE FD | 	call	#_module_draw
1ab30                 | LR__0883
1ab30     A8 F0 03 F6 | 	mov	ptra, fp
1ab34     B3 00 A0 FD | 	call	#popregs_
1ab38                 | _update_incremental_1915_ret
1ab38     2D 00 64 FD | 	ret
1ab3c                 | 
1ab3c                 | _update_continuous_1920
1ab3c     0E 4C 05 F6 | 	mov	COUNT_, #14
1ab40     A9 00 A0 FD | 	call	#pushregs_
1ab44     3A 8D 02 F6 | 	mov	local01, arg01
1ab48     3B 8F 02 F6 | 	mov	local02, arg02
1ab4c     3C 91 02 F6 | 	mov	local03, arg03
1ab50     48 93 02 FB | 	rdlong	local04, local03
1ab54     49 95 02 FB | 	rdlong	local05, local04
1ab58     02 94 0E F2 | 	cmp	local05, #2 wz
1ab5c     58 00 90 5D |  if_ne	jmp	#LR__0884
1ab60     48 97 02 FB | 	rdlong	local06, local03
1ab64     1C 96 06 F1 | 	add	local06, #28
1ab68     4B 99 02 FB | 	rdlong	local07, local06
1ab6c     08 98 0E F2 | 	cmp	local07, #8 wz
1ab70     44 00 90 AD |  if_e	jmp	#LR__0884
1ab74     48 9B 02 FB | 	rdlong	local08, local03
1ab78     18 9A 06 F1 | 	add	local08, #24
1ab7c     4D 9D 0A FB | 	rdlong	local09, local08 wz
1ab80     34 00 90 AD |  if_e	jmp	#LR__0884
1ab84     48 93 02 FB | 	rdlong	local04, local03
1ab88     24 92 06 F1 | 	add	local04, #36
1ab8c     49 95 02 FB | 	rdlong	local05, local04
1ab90     02 94 0E F2 | 	cmp	local05, #2 wz
1ab94     1F 9E 06 A6 |  if_e	mov	local10, #31
1ab98     00 A0 06 A6 |  if_e	mov	local11, #0
1ab9c     0F A2 CE A9 |  if_e	bmask	local12, #15
1aba0     24 00 90 AD |  if_e	jmp	#LR__0885
1aba4     03 00 00 FF 
1aba8     E0 9F 06 F6 | 	mov	local10, ##2016
1abac     00 A0 06 F6 | 	mov	local11, #0
1abb0     0F A2 CE F9 | 	bmask	local12, #15
1abb4     10 00 90 FD | 	jmp	#LR__0885
1abb8                 | LR__0884
1abb8     7D 00 00 FF 
1abbc     C0 9F 06 F6 | 	mov	local10, ##64448
1abc0     00 A0 06 F6 | 	mov	local11, #0
1abc4     0F A2 CE F9 | 	bmask	local12, #15
1abc8                 | LR__0885
1abc8     10 8F 06 F1 | 	add	local02, #272
1abcc     47 93 02 FB | 	rdlong	local04, local02
1abd0     10 8F 86 F1 | 	sub	local02, #272
1abd4     4F 93 0A F2 | 	cmp	local04, local10 wz
1abd8     38 00 90 5D |  if_ne	jmp	#LR__0886
1abdc     04 8E 06 F1 | 	add	local02, #4
1abe0     47 97 02 FB | 	rdlong	local06, local02
1abe4     04 8E 86 F1 | 	sub	local02, #4
1abe8     0C 97 06 F1 | 	add	local06, #268
1abec     4B A5 02 FB | 	rdlong	local13, local06
1abf0     50 A5 0A F2 | 	cmp	local13, local11 wz
1abf4     1C 00 90 5D |  if_ne	jmp	#LR__0886
1abf8     04 8E 06 F1 | 	add	local02, #4
1abfc     47 9D 02 FB | 	rdlong	local09, local02
1ac00     04 8E 86 F1 | 	sub	local02, #4
1ac04     10 9D 06 F1 | 	add	local09, #272
1ac08     4E A7 02 FB | 	rdlong	local14, local09
1ac0c     51 A7 0A F2 | 	cmp	local14, local12 wz
1ac10                 | '         module->child[0]->backgroundColor == innerColor &&
1ac10                 | '         module->child[0]->foregroundColor == textColor)
1ac10                 | '     {
1ac10                 | '         return;
1ac10     30 00 90 AD |  if_e	jmp	#LR__0887
1ac14                 | LR__0886
1ac14     47 75 02 F6 | 	mov	arg01, local02
1ac18     50 79 02 F6 | 	mov	arg03, local11
1ac1c     10 75 06 F1 | 	add	arg01, #272
1ac20     3A A3 62 FC | 	wrlong	local12, arg01
1ac24     04 74 86 F1 | 	sub	arg01, #4
1ac28     3A 79 62 FC | 	wrlong	arg03, arg01
1ac2c     14 8F 06 F1 | 	add	local02, #276
1ac30     47 9F 62 FC | 	wrlong	local10, local02
1ac34     14 8F 86 F1 | 	sub	local02, #276
1ac38     46 75 02 F6 | 	mov	arg01, local01
1ac3c     47 77 02 F6 | 	mov	arg02, local02
1ac40     6C EB BE FD | 	call	#_module_draw
1ac44                 | LR__0887
1ac44     A8 F0 03 F6 | 	mov	ptra, fp
1ac48     B3 00 A0 FD | 	call	#popregs_
1ac4c                 | _update_continuous_1920_ret
1ac4c     2D 00 64 FD | 	ret
1ac50                 | 
1ac50                 | _update_positional_1925
1ac50     0E 4C 05 F6 | 	mov	COUNT_, #14
1ac54     A9 00 A0 FD | 	call	#pushregs_
1ac58     3A 8D 02 F6 | 	mov	local01, arg01
1ac5c     3B 8F 02 F6 | 	mov	local02, arg02
1ac60     3C 91 02 F6 | 	mov	local03, arg03
1ac64     48 93 02 FB | 	rdlong	local04, local03
1ac68     49 95 02 FB | 	rdlong	local05, local04
1ac6c     02 94 0E F2 | 	cmp	local05, #2 wz
1ac70     5C 00 90 5D |  if_ne	jmp	#LR__0888
1ac74     48 97 02 FB | 	rdlong	local06, local03
1ac78     1C 96 06 F1 | 	add	local06, #28
1ac7c     4B 99 02 FB | 	rdlong	local07, local06
1ac80     07 98 0E F2 | 	cmp	local07, #7 wz
1ac84     48 00 90 5D |  if_ne	jmp	#LR__0888
1ac88     48 9B 02 FB | 	rdlong	local08, local03
1ac8c     18 9A 06 F1 | 	add	local08, #24
1ac90     4D 9D 02 FB | 	rdlong	local09, local08
1ac94     01 9C 0E F2 | 	cmp	local09, #1 wz
1ac98     34 00 90 5D |  if_ne	jmp	#LR__0888
1ac9c     48 93 02 FB | 	rdlong	local04, local03
1aca0     24 92 06 F1 | 	add	local04, #36
1aca4     49 95 02 FB | 	rdlong	local05, local04
1aca8     03 94 0E F2 | 	cmp	local05, #3 wz
1acac     1F 9E 06 A6 |  if_e	mov	local10, #31
1acb0     00 A0 06 A6 |  if_e	mov	local11, #0
1acb4     0F A2 CE A9 |  if_e	bmask	local12, #15
1acb8     24 00 90 AD |  if_e	jmp	#LR__0889
1acbc     03 00 00 FF 
1acc0     E0 9F 06 F6 | 	mov	local10, ##2016
1acc4     00 A0 06 F6 | 	mov	local11, #0
1acc8     0F A2 CE F9 | 	bmask	local12, #15
1accc     10 00 90 FD | 	jmp	#LR__0889
1acd0                 | LR__0888
1acd0     7D 00 00 FF 
1acd4     C0 9F 06 F6 | 	mov	local10, ##64448
1acd8     00 A0 06 F6 | 	mov	local11, #0
1acdc     0F A2 CE F9 | 	bmask	local12, #15
1ace0                 | LR__0889
1ace0     10 8F 06 F1 | 	add	local02, #272
1ace4     47 93 02 FB | 	rdlong	local04, local02
1ace8     10 8F 86 F1 | 	sub	local02, #272
1acec     4F 93 0A F2 | 	cmp	local04, local10 wz
1acf0     38 00 90 5D |  if_ne	jmp	#LR__0890
1acf4     04 8E 06 F1 | 	add	local02, #4
1acf8     47 97 02 FB | 	rdlong	local06, local02
1acfc     04 8E 86 F1 | 	sub	local02, #4
1ad00     0C 97 06 F1 | 	add	local06, #268
1ad04     4B A5 02 FB | 	rdlong	local13, local06
1ad08     50 A5 0A F2 | 	cmp	local13, local11 wz
1ad0c     1C 00 90 5D |  if_ne	jmp	#LR__0890
1ad10     04 8E 06 F1 | 	add	local02, #4
1ad14     47 9D 02 FB | 	rdlong	local09, local02
1ad18     04 8E 86 F1 | 	sub	local02, #4
1ad1c     10 9D 06 F1 | 	add	local09, #272
1ad20     4E A7 02 FB | 	rdlong	local14, local09
1ad24     51 A7 0A F2 | 	cmp	local14, local12 wz
1ad28                 | '         module->child[0]->backgroundColor == innerColor &&
1ad28                 | '         module->child[0]->foregroundColor == textColor)
1ad28                 | '     {
1ad28                 | '         return;
1ad28     30 00 90 AD |  if_e	jmp	#LR__0891
1ad2c                 | LR__0890
1ad2c     47 75 02 F6 | 	mov	arg01, local02
1ad30     50 79 02 F6 | 	mov	arg03, local11
1ad34     10 75 06 F1 | 	add	arg01, #272
1ad38     3A A3 62 FC | 	wrlong	local12, arg01
1ad3c     04 74 86 F1 | 	sub	arg01, #4
1ad40     3A 79 62 FC | 	wrlong	arg03, arg01
1ad44     14 8F 06 F1 | 	add	local02, #276
1ad48     47 9F 62 FC | 	wrlong	local10, local02
1ad4c     14 8F 86 F1 | 	sub	local02, #276
1ad50     46 75 02 F6 | 	mov	arg01, local01
1ad54     47 77 02 F6 | 	mov	arg02, local02
1ad58     54 EA BE FD | 	call	#_module_draw
1ad5c                 | LR__0891
1ad5c     A8 F0 03 F6 | 	mov	ptra, fp
1ad60     B3 00 A0 FD | 	call	#popregs_
1ad64                 | _update_positional_1925_ret
1ad64     2D 00 64 FD | 	ret
1ad68                 | 
1ad68                 | _update_home_1930
1ad68     0E 4C 05 F6 | 	mov	COUNT_, #14
1ad6c     A9 00 A0 FD | 	call	#pushregs_
1ad70     3A 8D 02 F6 | 	mov	local01, arg01
1ad74     3B 8F 02 F6 | 	mov	local02, arg02
1ad78     3C 91 02 F6 | 	mov	local03, arg03
1ad7c     48 93 02 FB | 	rdlong	local04, local03
1ad80     49 95 02 FB | 	rdlong	local05, local04
1ad84     02 94 0E F2 | 	cmp	local05, #2 wz
1ad88     5C 00 90 5D |  if_ne	jmp	#LR__0892
1ad8c     48 97 02 FB | 	rdlong	local06, local03
1ad90     1C 96 06 F1 | 	add	local06, #28
1ad94     4B 99 02 FB | 	rdlong	local07, local06
1ad98     07 98 0E F2 | 	cmp	local07, #7 wz
1ad9c     48 00 90 5D |  if_ne	jmp	#LR__0892
1ada0     48 9B 02 FB | 	rdlong	local08, local03
1ada4     18 9A 06 F1 | 	add	local08, #24
1ada8     4D 9D 02 FB | 	rdlong	local09, local08
1adac     01 9C 0E F2 | 	cmp	local09, #1 wz
1adb0     34 00 90 5D |  if_ne	jmp	#LR__0892
1adb4     48 93 02 FB | 	rdlong	local04, local03
1adb8     24 92 06 F1 | 	add	local04, #36
1adbc     49 95 02 FB | 	rdlong	local05, local04
1adc0     04 94 0E F2 | 	cmp	local05, #4 wz
1adc4     1F 9E 06 A6 |  if_e	mov	local10, #31
1adc8     00 A0 06 A6 |  if_e	mov	local11, #0
1adcc     0F A2 CE A9 |  if_e	bmask	local12, #15
1add0     24 00 90 AD |  if_e	jmp	#LR__0893
1add4     03 00 00 FF 
1add8     E0 9F 06 F6 | 	mov	local10, ##2016
1addc     00 A0 06 F6 | 	mov	local11, #0
1ade0     0F A2 CE F9 | 	bmask	local12, #15
1ade4     10 00 90 FD | 	jmp	#LR__0893
1ade8                 | LR__0892
1ade8     7D 00 00 FF 
1adec     C0 9F 06 F6 | 	mov	local10, ##64448
1adf0     00 A0 06 F6 | 	mov	local11, #0
1adf4     0F A2 CE F9 | 	bmask	local12, #15
1adf8                 | LR__0893
1adf8     10 8F 06 F1 | 	add	local02, #272
1adfc     47 93 02 FB | 	rdlong	local04, local02
1ae00     10 8F 86 F1 | 	sub	local02, #272
1ae04     4F 93 0A F2 | 	cmp	local04, local10 wz
1ae08     38 00 90 5D |  if_ne	jmp	#LR__0894
1ae0c     04 8E 06 F1 | 	add	local02, #4
1ae10     47 97 02 FB | 	rdlong	local06, local02
1ae14     04 8E 86 F1 | 	sub	local02, #4
1ae18     0C 97 06 F1 | 	add	local06, #268
1ae1c     4B A5 02 FB | 	rdlong	local13, local06
1ae20     50 A5 0A F2 | 	cmp	local13, local11 wz
1ae24     1C 00 90 5D |  if_ne	jmp	#LR__0894
1ae28     04 8E 06 F1 | 	add	local02, #4
1ae2c     47 9D 02 FB | 	rdlong	local09, local02
1ae30     04 8E 86 F1 | 	sub	local02, #4
1ae34     10 9D 06 F1 | 	add	local09, #272
1ae38     4E A7 02 FB | 	rdlong	local14, local09
1ae3c     51 A7 0A F2 | 	cmp	local14, local12 wz
1ae40                 | '         module->child[0]->backgroundColor == innerColor &&
1ae40                 | '         module->child[0]->foregroundColor == textColor)
1ae40                 | '     {
1ae40                 | '         return;
1ae40     30 00 90 AD |  if_e	jmp	#LR__0895
1ae44                 | LR__0894
1ae44     47 75 02 F6 | 	mov	arg01, local02
1ae48     50 79 02 F6 | 	mov	arg03, local11
1ae4c     10 75 06 F1 | 	add	arg01, #272
1ae50     3A A3 62 FC | 	wrlong	local12, arg01
1ae54     04 74 86 F1 | 	sub	arg01, #4
1ae58     3A 79 62 FC | 	wrlong	arg03, arg01
1ae5c     14 8F 06 F1 | 	add	local02, #276
1ae60     47 9F 62 FC | 	wrlong	local10, local02
1ae64     14 8F 86 F1 | 	sub	local02, #276
1ae68     46 75 02 F6 | 	mov	arg01, local01
1ae6c     47 77 02 F6 | 	mov	arg02, local02
1ae70     3C E9 BE FD | 	call	#_module_draw
1ae74                 | LR__0895
1ae74     A8 F0 03 F6 | 	mov	ptra, fp
1ae78     B3 00 A0 FD | 	call	#popregs_
1ae7c                 | _update_home_1930_ret
1ae7c     2D 00 64 FD | 	ret
1ae80                 | 
1ae80                 | _update_length_1935
1ae80     0E 4C 05 F6 | 	mov	COUNT_, #14
1ae84     A9 00 A0 FD | 	call	#pushregs_
1ae88     3A 8D 02 F6 | 	mov	local01, arg01
1ae8c     3B 8F 02 F6 | 	mov	local02, arg02
1ae90     3C 91 02 F6 | 	mov	local03, arg03
1ae94     48 93 02 FB | 	rdlong	local04, local03
1ae98     49 95 02 FB | 	rdlong	local05, local04
1ae9c     02 94 0E F2 | 	cmp	local05, #2 wz
1aea0     5C 00 90 5D |  if_ne	jmp	#LR__0896
1aea4     48 97 02 FB | 	rdlong	local06, local03
1aea8     1C 96 06 F1 | 	add	local06, #28
1aeac     4B 99 02 FB | 	rdlong	local07, local06
1aeb0     07 98 0E F2 | 	cmp	local07, #7 wz
1aeb4     48 00 90 5D |  if_ne	jmp	#LR__0896
1aeb8     48 9B 02 FB | 	rdlong	local08, local03
1aebc     18 9A 06 F1 | 	add	local08, #24
1aec0     4D 9D 02 FB | 	rdlong	local09, local08
1aec4     01 9C 0E F2 | 	cmp	local09, #1 wz
1aec8     34 00 90 5D |  if_ne	jmp	#LR__0896
1aecc     48 93 02 FB | 	rdlong	local04, local03
1aed0     24 92 06 F1 | 	add	local04, #36
1aed4     49 95 02 FB | 	rdlong	local05, local04
1aed8     05 94 0E F2 | 	cmp	local05, #5 wz
1aedc     1F 9E 06 A6 |  if_e	mov	local10, #31
1aee0     00 A0 06 A6 |  if_e	mov	local11, #0
1aee4     0F A2 CE A9 |  if_e	bmask	local12, #15
1aee8     24 00 90 AD |  if_e	jmp	#LR__0897
1aeec     03 00 00 FF 
1aef0     E0 9F 06 F6 | 	mov	local10, ##2016
1aef4     00 A0 06 F6 | 	mov	local11, #0
1aef8     0F A2 CE F9 | 	bmask	local12, #15
1aefc     10 00 90 FD | 	jmp	#LR__0897
1af00                 | LR__0896
1af00     7D 00 00 FF 
1af04     C0 9F 06 F6 | 	mov	local10, ##64448
1af08     00 A0 06 F6 | 	mov	local11, #0
1af0c     0F A2 CE F9 | 	bmask	local12, #15
1af10                 | LR__0897
1af10     10 8F 06 F1 | 	add	local02, #272
1af14     47 93 02 FB | 	rdlong	local04, local02
1af18     10 8F 86 F1 | 	sub	local02, #272
1af1c     4F 93 0A F2 | 	cmp	local04, local10 wz
1af20     38 00 90 5D |  if_ne	jmp	#LR__0898
1af24     04 8E 06 F1 | 	add	local02, #4
1af28     47 97 02 FB | 	rdlong	local06, local02
1af2c     04 8E 86 F1 | 	sub	local02, #4
1af30     0C 97 06 F1 | 	add	local06, #268
1af34     4B A5 02 FB | 	rdlong	local13, local06
1af38     50 A5 0A F2 | 	cmp	local13, local11 wz
1af3c     1C 00 90 5D |  if_ne	jmp	#LR__0898
1af40     04 8E 06 F1 | 	add	local02, #4
1af44     47 9D 02 FB | 	rdlong	local09, local02
1af48     04 8E 86 F1 | 	sub	local02, #4
1af4c     10 9D 06 F1 | 	add	local09, #272
1af50     4E A7 02 FB | 	rdlong	local14, local09
1af54     51 A7 0A F2 | 	cmp	local14, local12 wz
1af58                 | '         module->child[0]->backgroundColor == innerColor &&
1af58                 | '         module->child[0]->foregroundColor == textColor)
1af58                 | '     {
1af58                 | '         return;
1af58     30 00 90 AD |  if_e	jmp	#LR__0899
1af5c                 | LR__0898
1af5c     47 75 02 F6 | 	mov	arg01, local02
1af60     50 79 02 F6 | 	mov	arg03, local11
1af64     10 75 06 F1 | 	add	arg01, #272
1af68     3A A3 62 FC | 	wrlong	local12, arg01
1af6c     04 74 86 F1 | 	sub	arg01, #4
1af70     3A 79 62 FC | 	wrlong	arg03, arg01
1af74     14 8F 06 F1 | 	add	local02, #276
1af78     47 9F 62 FC | 	wrlong	local10, local02
1af7c     14 8F 86 F1 | 	sub	local02, #276
1af80     46 75 02 F6 | 	mov	arg01, local01
1af84     47 77 02 F6 | 	mov	arg02, local02
1af88     24 E8 BE FD | 	call	#_module_draw
1af8c                 | LR__0899
1af8c     A8 F0 03 F6 | 	mov	ptra, fp
1af90     B3 00 A0 FD | 	call	#popregs_
1af94                 | _update_length_1935_ret
1af94     2D 00 64 FD | 	ret
1af98                 | 
1af98                 | _update_force_1940
1af98     0E 4C 05 F6 | 	mov	COUNT_, #14
1af9c     A9 00 A0 FD | 	call	#pushregs_
1afa0     3A 8D 02 F6 | 	mov	local01, arg01
1afa4     3B 8F 02 F6 | 	mov	local02, arg02
1afa8     3C 91 02 F6 | 	mov	local03, arg03
1afac     48 93 02 FB | 	rdlong	local04, local03
1afb0     49 95 02 FB | 	rdlong	local05, local04
1afb4     02 94 0E F2 | 	cmp	local05, #2 wz
1afb8     5C 00 90 5D |  if_ne	jmp	#LR__0900
1afbc     48 97 02 FB | 	rdlong	local06, local03
1afc0     1C 96 06 F1 | 	add	local06, #28
1afc4     4B 99 02 FB | 	rdlong	local07, local06
1afc8     07 98 0E F2 | 	cmp	local07, #7 wz
1afcc     48 00 90 5D |  if_ne	jmp	#LR__0900
1afd0     48 9B 02 FB | 	rdlong	local08, local03
1afd4     18 9A 06 F1 | 	add	local08, #24
1afd8     4D 9D 02 FB | 	rdlong	local09, local08
1afdc     01 9C 0E F2 | 	cmp	local09, #1 wz
1afe0     34 00 90 5D |  if_ne	jmp	#LR__0900
1afe4     48 93 02 FB | 	rdlong	local04, local03
1afe8     24 92 06 F1 | 	add	local04, #36
1afec     49 95 02 FB | 	rdlong	local05, local04
1aff0     06 94 0E F2 | 	cmp	local05, #6 wz
1aff4     1F 9E 06 A6 |  if_e	mov	local10, #31
1aff8     00 A0 06 A6 |  if_e	mov	local11, #0
1affc     0F A2 CE A9 |  if_e	bmask	local12, #15
1b000     24 00 90 AD |  if_e	jmp	#LR__0901
1b004     03 00 00 FF 
1b008     E0 9F 06 F6 | 	mov	local10, ##2016
1b00c     00 A0 06 F6 | 	mov	local11, #0
1b010     0F A2 CE F9 | 	bmask	local12, #15
1b014     10 00 90 FD | 	jmp	#LR__0901
1b018                 | LR__0900
1b018     7D 00 00 FF 
1b01c     C0 9F 06 F6 | 	mov	local10, ##64448
1b020     00 A0 06 F6 | 	mov	local11, #0
1b024     0F A2 CE F9 | 	bmask	local12, #15
1b028                 | LR__0901
1b028     10 8F 06 F1 | 	add	local02, #272
1b02c     47 93 02 FB | 	rdlong	local04, local02
1b030     10 8F 86 F1 | 	sub	local02, #272
1b034     4F 93 0A F2 | 	cmp	local04, local10 wz
1b038     38 00 90 5D |  if_ne	jmp	#LR__0902
1b03c     04 8E 06 F1 | 	add	local02, #4
1b040     47 97 02 FB | 	rdlong	local06, local02
1b044     04 8E 86 F1 | 	sub	local02, #4
1b048     0C 97 06 F1 | 	add	local06, #268
1b04c     4B A5 02 FB | 	rdlong	local13, local06
1b050     50 A5 0A F2 | 	cmp	local13, local11 wz
1b054     1C 00 90 5D |  if_ne	jmp	#LR__0902
1b058     04 8E 06 F1 | 	add	local02, #4
1b05c     47 9D 02 FB | 	rdlong	local09, local02
1b060     04 8E 86 F1 | 	sub	local02, #4
1b064     10 9D 06 F1 | 	add	local09, #272
1b068     4E A7 02 FB | 	rdlong	local14, local09
1b06c     51 A7 0A F2 | 	cmp	local14, local12 wz
1b070                 | '         module->child[0]->backgroundColor == innerColor &&
1b070                 | '         module->child[0]->foregroundColor == textColor)
1b070                 | '     {
1b070                 | '         return;
1b070     30 00 90 AD |  if_e	jmp	#LR__0903
1b074                 | LR__0902
1b074     47 75 02 F6 | 	mov	arg01, local02
1b078     50 79 02 F6 | 	mov	arg03, local11
1b07c     10 75 06 F1 | 	add	arg01, #272
1b080     3A A3 62 FC | 	wrlong	local12, arg01
1b084     04 74 86 F1 | 	sub	arg01, #4
1b088     3A 79 62 FC | 	wrlong	arg03, arg01
1b08c     14 8F 06 F1 | 	add	local02, #276
1b090     47 9F 62 FC | 	wrlong	local10, local02
1b094     14 8F 86 F1 | 	sub	local02, #276
1b098     46 75 02 F6 | 	mov	arg01, local01
1b09c     47 77 02 F6 | 	mov	arg02, local02
1b0a0     0C E7 BE FD | 	call	#_module_draw
1b0a4                 | LR__0903
1b0a4     A8 F0 03 F6 | 	mov	ptra, fp
1b0a8     B3 00 A0 FD | 	call	#popregs_
1b0ac                 | _update_force_1940_ret
1b0ac     2D 00 64 FD | 	ret
1b0b0                 | 
1b0b0                 | _module_graph_draw_1966
1b0b0     07 4C 05 F6 | 	mov	COUNT_, #7
1b0b4     A9 00 A0 FD | 	call	#pushregs_
1b0b8     3A 8D 02 F6 | 	mov	local01, arg01
1b0bc     3B 8F 02 F6 | 	mov	local02, arg02
1b0c0     D0 8E 06 F1 | 	add	local02, #208
1b0c4     47 91 02 FB | 	rdlong	local03, local02
1b0c8     D0 8E 86 F1 | 	sub	local02, #208
1b0cc     08 90 06 F1 | 	add	local03, #8
1b0d0     48 75 02 FB | 	rdlong	arg01, local03
1b0d4     04 90 06 F1 | 	add	local03, #4
1b0d8     48 77 02 FB | 	rdlong	arg02, local03
1b0dc     1F 76 E6 F4 | 	bitnot	arg02, #31
1b0e0     B8 BC B0 FD | 	call	#__system___float_add
1b0e4     1A 93 02 F6 | 	mov	local04, result1
1b0e8     02 00 00 FF 
1b0ec     08 91 06 F1 | 	add	local03, ##1288
1b0f0     48 7B 02 FB | 	rdlong	arg04, local03
1b0f4     04 7A 06 F1 | 	add	arg04, #4
1b0f8     04 90 06 F1 | 	add	local03, #4
1b0fc     48 7D 02 FB | 	rdlong	arg05, local03
1b100     04 90 86 F1 | 	sub	local03, #4
1b104     48 83 02 FB | 	rdlong	arg08, local03
1b108     02 82 06 F1 | 	add	arg08, #2
1b10c     3E 85 02 F6 | 	mov	arg09, arg05
1b110     08 90 06 F1 | 	add	local03, #8
1b114     48 87 02 FB | 	rdlong	arg10, local03
1b118     02 86 86 F1 | 	sub	arg10, #2
1b11c     04 90 06 F1 | 	add	local03, #4
1b120     48 89 02 FB | 	rdlong	arg11, local03
1b124     46 75 02 F6 | 	mov	arg01, local01
1b128     00 76 06 F6 | 	mov	arg02, #0
1b12c     0A 78 C6 F9 | 	decod	arg03, #10
1b130     00 7E 06 F6 | 	mov	arg06, #0
1b134     0A 80 C6 F9 | 	decod	arg07, #10
1b138     7C 93 BE FD | 	call	#_display_bte_memory_copy
1b13c     0C 90 86 F1 | 	sub	local03, #12
1b140     48 77 02 FB | 	rdlong	arg02, local03
1b144     08 90 06 F1 | 	add	local03, #8
1b148     48 7F 02 FB | 	rdlong	arg06, local03
1b14c     3F 77 02 F1 | 	add	arg02, arg06
1b150     04 90 86 F1 | 	sub	local03, #4
1b154     48 79 02 FB | 	rdlong	arg03, local03
1b158     04 90 86 F1 | 	sub	local03, #4
1b15c     48 7B 02 FB | 	rdlong	arg04, local03
1b160     3F 7B 02 F1 | 	add	arg04, arg06
1b164     02 7A 06 F1 | 	add	arg04, #2
1b168     3C 7D 02 F6 | 	mov	arg05, arg03
1b16c     0C 90 06 F1 | 	add	local03, #12
1b170     48 7F 02 FB | 	rdlong	arg06, local03
1b174     3F 7D 02 F1 | 	add	arg05, arg06
1b178     47 8F 02 FB | 	rdlong	local02, local02
1b17c     10 8F 06 F1 | 	add	local02, #272
1b180     47 7F 02 FB | 	rdlong	arg06, local02
1b184     46 75 02 F6 | 	mov	arg01, local01
1b188     70 8F BE FD | 	call	#_display_draw_square_fill
1b18c     48 8F 02 FB | 	rdlong	local02, local03
1b190     47 75 52 F6 | 	abs	arg01, local02 wc
1b194     01 74 46 F0 | 	shr	arg01, #1
1b198     3A 75 82 F6 | 	negc	arg01, arg01
1b19c     08 90 86 F1 | 	sub	local03, #8
1b1a0     48 95 02 FB | 	rdlong	local05, local03
1b1a4     02 00 00 FF 
1b1a8     18 91 86 F1 | 	sub	local03, ##1304
1b1ac     3A 95 02 F1 | 	add	local05, arg01
1b1b0     48 97 02 FB | 	rdlong	local06, local03
1b1b4     47 8F 52 F6 | 	abs	local02, local02 wc
1b1b8     01 8E 46 F0 | 	shr	local02, #1
1b1bc     47 75 82 F6 | 	negc	arg01, local02
1b1c0     A8 BB B0 FD | 	call	#__system___float_fromint
1b1c4     1A 8F 02 F6 | 	mov	local02, result1
1b1c8     49 75 02 F6 | 	mov	arg01, local04
1b1cc     1E 76 C6 F9 | 	decod	arg02, #30
1b1d0     EC C0 B0 FD | 	call	#__system___float_div
1b1d4     1A 77 02 F6 | 	mov	arg02, result1
1b1d8     47 75 02 F6 | 	mov	arg01, local02
1b1dc     E0 C0 B0 FD | 	call	#__system___float_div
1b1e0     1A 77 02 F6 | 	mov	arg02, result1
1b1e4     4B 75 02 F6 | 	mov	arg01, local06
1b1e8     B4 BE B0 FD | 	call	#__system___float_mul
1b1ec     1A 75 02 F6 | 	mov	arg01, result1
1b1f0     00 76 06 F6 | 	mov	arg02, #0
1b1f4     98 C3 B0 FD | 	call	#__system___float_tointeger
1b1f8     1A 95 82 F1 | 	sub	local05, result1
1b1fc     02 00 00 FF 
1b200     20 91 06 F1 | 	add	local03, ##1312
1b204     48 8F 02 FB | 	rdlong	local02, local03
1b208     47 97 52 F6 | 	abs	local06, local02 wc
1b20c     01 96 46 F0 | 	shr	local06, #1
1b210     4B 97 82 F6 | 	negc	local06, local06
1b214     08 90 86 F1 | 	sub	local03, #8
1b218     48 99 02 FB | 	rdlong	local07, local03
1b21c     4B 99 02 F1 | 	add	local07, local06
1b220     02 00 00 FF 
1b224     14 91 86 F1 | 	sub	local03, ##1300
1b228     48 97 02 FB | 	rdlong	local06, local03
1b22c     47 8F 52 F6 | 	abs	local02, local02 wc
1b230     01 8E 46 F0 | 	shr	local02, #1
1b234     47 75 82 F6 | 	negc	arg01, local02
1b238     30 BB B0 FD | 	call	#__system___float_fromint
1b23c     1A 8F 02 F6 | 	mov	local02, result1
1b240     49 75 02 F6 | 	mov	arg01, local04
1b244     1E 76 C6 F9 | 	decod	arg02, #30
1b248     74 C0 B0 FD | 	call	#__system___float_div
1b24c     1A 77 02 F6 | 	mov	arg02, result1
1b250     47 75 02 F6 | 	mov	arg01, local02
1b254     68 C0 B0 FD | 	call	#__system___float_div
1b258     1A 77 02 F6 | 	mov	arg02, result1
1b25c     4B 75 02 F6 | 	mov	arg01, local06
1b260     3C BE B0 FD | 	call	#__system___float_mul
1b264     1A 75 02 F6 | 	mov	arg01, result1
1b268     00 76 06 F6 | 	mov	arg02, #0
1b26c     20 C3 B0 FD | 	call	#__system___float_tointeger
1b270     1A 99 82 F1 | 	sub	local07, result1
1b274     02 00 00 FF 
1b278     10 91 06 F1 | 	add	local03, ##1296
1b27c     48 7B 02 FB | 	rdlong	arg04, local03
1b280     3D 77 02 F6 | 	mov	arg02, arg04
1b284     08 90 06 F1 | 	add	local03, #8
1b288     48 97 02 FB | 	rdlong	local06, local03
1b28c     4B 77 02 F1 | 	add	arg02, local06
1b290     4B 7B 02 F1 | 	add	arg04, local06
1b294     02 7A 06 F1 | 	add	arg04, #2
1b298     46 75 02 F6 | 	mov	arg01, local01
1b29c     4C 79 02 F6 | 	mov	arg03, local07
1b2a0     4A 7D 02 F6 | 	mov	arg05, local05
1b2a4     7C 00 00 FF 
1b2a8     00 7E 06 F6 | 	mov	arg06, ##63488
1b2ac     E0 8C BE FD | 	call	#_display_draw_line
1b2b0     A8 F0 03 F6 | 	mov	ptra, fp
1b2b4     B3 00 A0 FD | 	call	#popregs_
1b2b8                 | _module_graph_draw_1966_ret
1b2b8     2D 00 64 FD | 	ret
1b2bc                 | 
1b2bc                 | _check_buttons_1974
1b2bc     08 00 00 FF 
1b2c0     10 77 06 F1 | 	add	arg02, ##4368
1b2c4     3B 75 62 FC | 	wrlong	arg01, arg02
1b2c8                 | _check_buttons_1974_ret
1b2c8     2D 00 64 FD | 	ret
1b2cc                 | 
1b2cc                 | _parseint_2104
1b2cc     3A 3B 02 F6 | 	mov	_var01, arg01
1b2d0     3B 3D 02 F6 | 	mov	_var02, arg02
1b2d4     1D 3F 02 FB | 	rdlong	_var03, _var01
1b2d8     00 40 06 F6 | 	mov	_var04, #0
1b2dc     1F 43 C2 FA | 	rdbyte	_var05, _var03
1b2e0     2A 42 0E F2 | 	cmp	_var05, #42 wz
1b2e4     18 00 90 5D |  if_ne	jmp	#LR__0904
1b2e8     1E 43 02 FB | 	rdlong	_var05, _var02
1b2ec     21 41 02 FB | 	rdlong	_var04, _var05
1b2f0     04 42 06 F1 | 	add	_var05, #4
1b2f4     1E 43 62 FC | 	wrlong	_var05, _var02
1b2f8     01 3E 06 F1 | 	add	_var03, #1
1b2fc     38 00 90 FD | 	jmp	#LR__0907
1b300                 | LR__0904
1b300                 | '         while ( (c>='0') && (c<='9') ) {
1b300                 | LR__0905
1b300     30 42 56 F2 | 	cmps	_var05, #48 wc
1b304     30 00 90 CD |  if_b	jmp	#LR__0906
1b308     3A 42 56 F2 | 	cmps	_var05, #58 wc
1b30c     28 00 90 3D |  if_ae	jmp	#LR__0906
1b310     20 45 02 F6 | 	mov	_var06, _var04
1b314     02 44 66 F0 | 	shl	_var06, #2
1b318     20 45 02 F1 | 	add	_var06, _var04
1b31c     01 44 66 F0 | 	shl	_var06, #1
1b320     30 42 86 F1 | 	sub	_var05, #48
1b324     21 45 02 F1 | 	add	_var06, _var05
1b328     22 41 02 F6 | 	mov	_var04, _var06
1b32c     01 3E 06 F1 | 	add	_var03, #1
1b330     1F 43 C2 FA | 	rdbyte	_var05, _var03
1b334     C8 FF 9F FD | 	jmp	#LR__0905
1b338                 | LR__0906
1b338                 | LR__0907
1b338     1D 3F 62 FC | 	wrlong	_var03, _var01
1b33c                 | '             r = 10*r + (c-'0');
1b33c                 | '             c = *++fmt;
1b33c                 | '         }
1b33c                 | '     }
1b33c                 | '     *fmt_p = fmt;
1b33c                 | '     return r;
1b33c     20 35 02 F6 | 	mov	result1, _var04
1b340                 | _parseint_2104_ret
1b340     2D 00 64 FD | 	ret
1b344                 | 
1b344                 | _parseflags_2111
1b344     3A 3B 02 F6 | 	mov	_var01, arg01
1b348     3B 3D 02 F6 | 	mov	_var02, arg02
1b34c     00 3E 06 F6 | 	mov	_var03, #0
1b350     01 40 06 F6 | 	mov	_var04, #1
1b354     00 42 06 F6 | 	mov	_var05, #0
1b358     02 44 06 F6 | 	mov	_var06, #2
1b35c     00 46 06 F6 | 	mov	_var07, #0
1b360                 | ' 
1b360                 | '     while (!done) {
1b360                 | LR__0908
1b360     00 46 0E F2 | 	cmp	_var07, #0 wz
1b364     64 00 90 5D |  if_ne	jmp	#LR__0915
1b368     1D 49 C2 FA | 	rdbyte	_var08, _var01
1b36c                 | '         c = *fmt++;
1b36c                 | '         switch (c) {
1b36c     2D 48 0E F2 | 	cmp	_var08, #45 wz
1b370     01 3A 06 F1 | 	add	_var01, #1
1b374     24 00 90 AD |  if_e	jmp	#LR__0909
1b378     23 48 0E F2 | 	cmp	_var08, #35 wz
1b37c     24 00 90 AD |  if_e	jmp	#LR__0910
1b380     2B 48 0E F2 | 	cmp	_var08, #43 wz
1b384     24 00 90 AD |  if_e	jmp	#LR__0911
1b388     30 48 0E F2 | 	cmp	_var08, #48 wz
1b38c     24 00 90 AD |  if_e	jmp	#LR__0912
1b390     20 48 0E F2 | 	cmp	_var08, #32 wz
1b394     24 00 90 AD |  if_e	jmp	#LR__0913
1b398     28 00 90 FD | 	jmp	#LR__0914
1b39c                 | LR__0909
1b39c     01 44 06 F6 | 	mov	_var06, #1
1b3a0                 | '             justify =  1 ;
1b3a0                 | '             break;
1b3a0     BC FF 9F FD | 	jmp	#LR__0908
1b3a4                 | LR__0910
1b3a4     1C 3E 46 F5 | 	or	_var03, #28
1b3a8                 | '             flags |=  (28) ;
1b3a8                 | '             break;
1b3a8     B4 FF 9F FD | 	jmp	#LR__0908
1b3ac                 | LR__0911
1b3ac     01 42 06 F6 | 	mov	_var05, #1
1b3b0                 | '             signchar =  1 ;
1b3b0                 | '             break;
1b3b0     AC FF 9F FD | 	jmp	#LR__0908
1b3b4                 | LR__0912
1b3b4     02 40 06 F6 | 	mov	_var04, #2
1b3b8                 | '             padchar =  2 ;
1b3b8                 | '             break;
1b3b8     A4 FF 9F FD | 	jmp	#LR__0908
1b3bc                 | LR__0913
1b3bc     01 40 06 F6 | 	mov	_var04, #1
1b3c0                 | '             padchar =  1 ;
1b3c0                 | '             break;
1b3c0     9C FF 9F FD | 	jmp	#LR__0908
1b3c4                 | LR__0914
1b3c4     01 46 06 F6 | 	mov	_var07, #1
1b3c8                 | '             done = 1;
1b3c8                 | '             break;
1b3c8     94 FF 9F FD | 	jmp	#LR__0908
1b3cc                 | LR__0915
1b3cc     18 40 66 F0 | 	shl	_var04, #24
1b3d0     20 3F 42 F5 | 	or	_var03, _var04
1b3d4     1A 42 66 F0 | 	shl	_var05, #26
1b3d8     21 3F 42 F5 | 	or	_var03, _var05
1b3dc     16 44 66 F0 | 	shl	_var06, #22
1b3e0     22 3F 42 F5 | 	or	_var03, _var06
1b3e4     1E 3F 62 FC | 	wrlong	_var03, _var02
1b3e8                 | '         }
1b3e8                 | '     }
1b3e8                 | '     flags |= (padchar <<  (24) );
1b3e8                 | '     flags |= (signchar <<  (26) );
1b3e8                 | '     flags |= (justify <<  (22) );
1b3e8                 | '     *flag_p = flags;
1b3e8                 | '     return fmt-1;
1b3e8     01 3A 86 F1 | 	sub	_var01, #1
1b3ec     1D 35 02 F6 | 	mov	result1, _var01
1b3f0                 | _parseflags_2111_ret
1b3f0     2D 00 64 FD | 	ret
1b3f4                 | 
1b3f4                 | _parsesize_2115
1b3f4     3B 3B 02 F6 | 	mov	_var01, arg02
1b3f8     04 3C 06 F6 | 	mov	_var02, #4
1b3fc     00 3E 06 F6 | 	mov	_var03, #0
1b400     3A 41 02 F6 | 	mov	_var04, arg01
1b404     3A 43 02 F6 | 	mov	_var05, arg01
1b408     01 42 06 F1 | 	add	_var05, #1
1b40c     21 45 02 F6 | 	mov	_var06, _var05
1b410     20 47 C2 FA | 	rdbyte	_var07, _var04
1b414                 | '     c = *fmt++;
1b414                 | ' 
1b414                 | '     switch (c) {
1b414     23 49 02 F6 | 	mov	_var08, _var07
1b418     6C 48 0E F2 | 	cmp	_var08, #108 wz
1b41c     2C 00 90 AD |  if_e	jmp	#LR__0916
1b420     68 48 0E F2 | 	cmp	_var08, #104 wz
1b424     3C 00 90 AD |  if_e	jmp	#LR__0917
1b428     6A 48 0E F2 | 	cmp	_var08, #106 wz
1b42c     4C 00 90 AD |  if_e	jmp	#LR__0918
1b430     7A 48 0E F2 | 	cmp	_var08, #122 wz
1b434     4C 00 90 AD |  if_e	jmp	#LR__0919
1b438     74 48 0E F2 | 	cmp	_var08, #116 wz
1b43c     44 00 90 AD |  if_e	jmp	#LR__0920
1b440     4C 48 0E F2 | 	cmp	_var08, #76 wz
1b444     44 00 90 AD |  if_e	jmp	#LR__0921
1b448     48 00 90 FD | 	jmp	#LR__0922
1b44c                 | LR__0916
1b44c     04 3C 06 F6 | 	mov	_var02, #4
1b450     22 49 C2 FA | 	rdbyte	_var08, _var06
1b454     6C 48 0E F2 | 	cmp	_var08, #108 wz
1b458     08 3C 06 A6 |  if_e	mov	_var02, #8
1b45c     01 44 06 A1 |  if_e	add	_var06, #1
1b460                 | '             fmt++;
1b460                 | '         }
1b460                 | '         break;
1b460     3C 00 90 FD | 	jmp	#LR__0923
1b464                 | LR__0917
1b464     02 3C 06 F6 | 	mov	_var02, #2
1b468     22 49 C2 FA | 	rdbyte	_var08, _var06
1b46c     68 48 0E F2 | 	cmp	_var08, #104 wz
1b470     01 3C 06 A6 |  if_e	mov	_var02, #1
1b474     01 44 06 A1 |  if_e	add	_var06, #1
1b478                 | '             fmt++;
1b478                 | '         }
1b478                 | '         break;
1b478     24 00 90 FD | 	jmp	#LR__0923
1b47c                 | LR__0918
1b47c     08 3C 06 F6 | 	mov	_var02, #8
1b480                 | '         break;
1b480     1C 00 90 FD | 	jmp	#LR__0923
1b484                 | LR__0919
1b484                 | LR__0920
1b484     04 3C 06 F6 | 	mov	_var02, #4
1b488                 | '         break;
1b488     14 00 90 FD | 	jmp	#LR__0923
1b48c                 | LR__0921
1b48c     08 3C 06 F6 | 	mov	_var02, #8
1b490                 | '         longflag = 1;
1b490                 | '         break;
1b490     0C 00 90 FD | 	jmp	#LR__0923
1b494                 | LR__0922
1b494     22 4B 02 F6 | 	mov	_var09, _var06
1b498     01 4A 86 F1 | 	sub	_var09, #1
1b49c     25 45 02 F6 | 	mov	_var06, _var09
1b4a0                 | ' 
1b4a0                 | '         --fmt;
1b4a0                 | '         break;
1b4a0                 | LR__0923
1b4a0     1D 3D 62 FC | 	wrlong	_var02, _var01
1b4a4                 | '     }
1b4a4                 | '     *size_p = size;
1b4a4                 | '     return fmt;
1b4a4     22 35 02 F6 | 	mov	result1, _var06
1b4a8                 | _parsesize_2115_ret
1b4a8     2D 00 64 FD | 	ret
1b4ac                 | 
1b4ac                 | ' 
1b4ac                 | ' '' This is not a top-level object
1b4ac                 | ' 
1b4ac                 | ' 
1b4ac                 | ' pub setup(scl, sda, khz, pullup) | tix
1b4ac                 | _jm_i2c_spin2_setup
1b4ac     3C 3B 02 F6 | 	mov	_var01, arg03
1b4b0     01 00 00 FF 
1b4b4     E8 3B 06 FD | 	qmul	_var01, ##1000
1b4b8     3A 3D 02 F6 | 	mov	_var02, arg01
1b4bc     3B 3F 02 F6 | 	mov	_var03, arg02
1b4c0     3D 41 02 F6 | 	mov	_var04, arg04
1b4c4                 | ' 
1b4c4                 | ' '' Define I2C SCL (clock) and SDA (data) pins
1b4c4                 | ' '' -- khz is bus frequency: 100 (standard), 400 (full), 1000 (fast)
1b4c4                 | ' ''    * circuit/connections will affect maximum bus speed
1b4c4                 | ' '' -- pullup controls high level drive configuration of SCL and SDA
1b4c4                 | ' 
1b4c4                 | '   longmove(@sclpin, @scl, 2)                                    ' copy pins
1b4c4     C9 3C 62 FC | 	wrlong	_var02, objptr
1b4c8     04 92 05 F1 | 	add	objptr, #4
1b4cc     C9 3E 62 FC | 	wrlong	_var03, objptr
1b4d0     04 92 85 F1 | 	sub	objptr, #4
1b4d4                 | '   clktix := tix := (clkfreq / (khz * 1_000)) >> 2               ' calculate ticks in 1/4 period
1b4d4     14 E0 06 FB | 	rdlong	muldiva_, #20
1b4d8     18 42 62 FD | 	getqx	_var05
1b4dc     21 E3 02 F6 | 	mov	muldivb_, _var05
1b4e0     BB 00 A0 FD | 	call	#divide_
1b4e4     71 45 02 F6 | 	mov	_var06, muldivb_
1b4e8     02 44 46 F0 | 	shr	_var06, #2
1b4ec     22 47 02 F6 | 	mov	_var07, _var06
1b4f0     08 92 05 F1 | 	add	objptr, #8
1b4f4     C9 44 62 FC | 	wrlong	_var06, objptr
1b4f8     08 92 85 F1 | 	sub	objptr, #8
1b4fc                 | ' 
1b4fc                 | '   case pullup
1b4fc     03 40 26 F3 | 	fle	_var04, #3
1b500     20 49 02 F6 | 	mov	_var08, _var04
1b504     30 48 62 FD | 	jmprel	_var08
1b508                 | LR__0924
1b508     0C 00 90 FD | 	jmp	#LR__0925
1b50c     14 00 90 FD | 	jmp	#LR__0926
1b510     18 00 90 FD | 	jmp	#LR__0927
1b514     1C 00 90 FD | 	jmp	#LR__0928
1b518                 | LR__0925
1b518                 | '     PU_NONE : pullup := P_HIGH_FLOAT                            ' use external pull-up
1b518     1C 00 00 FF 
1b51c     00 4A 06 F6 | 	mov	_var09, ##14336
1b520     14 00 90 FD | 	jmp	#LR__0929
1b524                 | LR__0926
1b524                 | '     PU_1K5  : pullup := P_HIGH_1K5                              ' 1.5k
1b524     0B 4A C6 F9 | 	decod	_var09, #11
1b528     0C 00 90 FD | 	jmp	#LR__0929
1b52c                 | LR__0927
1b52c                 | '     PU_3K3  : pullup := P_HIGH_1MA                              ' acts like ~3.3k
1b52c     0D 4A C6 F9 | 	decod	_var09, #13
1b530     04 00 90 FD | 	jmp	#LR__0929
1b534                 | LR__0928
1b534                 | '     other   : pullup := P_HIGH_15K                              ' 15K
1b534     0C 4A C6 F9 | 	decod	_var09, #12
1b538                 | LR__0929
1b538                 | ' 
1b538                 | '   org
1b538     00 4B 9E FE | 	loc	pa,	#(@LR__0932-@LR__0930)
1b53c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1b540                 | LR__0930
1b540 000             | 	org	0
1b540 000 1E 4B 02 FC | 	wrpin	_var09, _var02
1b544 001 1F 4B 02 FC | 	wrpin	_var09, _var03
1b548 002 59 3C 62 FD | 	drvh	_var02
1b54c 003 59 3E 62 FD | 	drvh	_var03
1b550 004 1F 46 62 FD | 	waitx	_var07
1b554 005 1F 46 62 FD | 	waitx	_var07
1b558 006 09 10 DC FC | 	rep	#8, #9
1b55c 007 40 3E 72 FD | 	testp	_var03 wc
1b560 008 18 00 90 CD |  if_b	jmp	#LR__0931
1b564 009 58 3C 62 FD | 	drvl	_var02
1b568 00a 1F 46 62 FD | 	waitx	_var07
1b56c 00b 1F 46 62 FD | 	waitx	_var07
1b570 00c 59 3C 62 FD | 	drvh	_var02
1b574 00d 1F 46 62 FD | 	waitx	_var07
1b578 00e 1F 46 62 FD | 	waitx	_var07
1b57c 00f             | LR__0931
1b57c 00f             | LR__0932
1b57c                 | 	orgh
1b57c                 | _jm_i2c_spin2_setup_ret
1b57c     2D 00 64 FD | 	ret
1b580                 | 
1b580                 | '   until (ackbit == ACK)
1b580                 | ' 
1b580                 | ' 
1b580                 | ' pub start() | scl, sda, tix
1b580                 | _jm_i2c_spin2_start
1b580                 | ' 
1b580                 | ' '' Create I2C start sequence
1b580                 | ' '' -- will wait if I2C bus SCL pin is held low
1b580                 | ' 
1b580                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1b580     C9 3A 02 FB | 	rdlong	_var01, objptr
1b584     04 92 05 F1 | 	add	objptr, #4
1b588     C9 3C 02 FB | 	rdlong	_var02, objptr
1b58c     04 92 05 F1 | 	add	objptr, #4
1b590     C9 3E 02 FB | 	rdlong	_var03, objptr
1b594     08 92 85 F1 | 	sub	objptr, #8
1b598                 | ' 
1b598                 | '   org
1b598     88 4A 9E FE | 	loc	pa,	#(@LR__0935-@LR__0933)
1b59c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1b5a0                 | LR__0933
1b5a0 000             | 	org	0
1b5a0 000 59 3C 62 FD | 	drvh	_var02
1b5a4 001 59 3A 62 FD | 	drvh	_var01
1b5a8 002 1F 3E 62 FD | 	waitx	_var03
1b5ac 003             | LR__0934
1b5ac 003 40 3A 72 FD | 	testp	_var01 wc
1b5b0 004 F8 FF 9F 3D |  if_ae	jmp	#LR__0934
1b5b4 005 58 3C 62 FD | 	drvl	_var02
1b5b8 006 1F 3E 62 FD | 	waitx	_var03
1b5bc 007 58 3A 62 FD | 	drvl	_var01
1b5c0 008 1F 3E 62 FD | 	waitx	_var03
1b5c4 009             | LR__0935
1b5c4                 | 	orgh
1b5c4                 | _jm_i2c_spin2_start_ret
1b5c4     2D 00 64 FD | 	ret
1b5c8                 | 
1b5c8                 | ' 
1b5c8                 | ' 
1b5c8                 | ' pub write(i2cbyte) : ackbit | scl, sda, tix
1b5c8                 | _jm_i2c_spin2_write
1b5c8     3A 3B 02 F6 | 	mov	_var01, arg01
1b5cc     00 3C 06 F6 | 	mov	_var02, #0
1b5d0                 | ' 
1b5d0                 | ' '' Write byte to I2C bus
1b5d0                 | ' '' -- leaves SCL low
1b5d0                 | ' 
1b5d0                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1b5d0     C9 3E 02 FB | 	rdlong	_var03, objptr
1b5d4     04 92 05 F1 | 	add	objptr, #4
1b5d8     C9 40 02 FB | 	rdlong	_var04, objptr
1b5dc     20 43 02 F6 | 	mov	_var05, _var04
1b5e0     04 92 05 F1 | 	add	objptr, #4
1b5e4     C9 44 02 FB | 	rdlong	_var06, objptr
1b5e8     08 92 85 F1 | 	sub	objptr, #8
1b5ec     22 47 02 F6 | 	mov	_var07, _var06
1b5f0                 | '                                                                  
1b5f0                 | '   org                                                            
1b5f0     5C 4A 9E FE | 	loc	pa,	#(@LR__0939-@LR__0936)
1b5f4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1b5f8                 | LR__0936
1b5f8 000             | 	org	0
1b5f8 000 18 3A 66 F0 | 	shl	_var01, #24
1b5fc 001             | LR__0937
1b5fc 001 08 10 DC FC | 	rep	#8, #8
1b600 002 01 3A 76 F0 | 	shl	_var01, #1 wc
1b604 003 5A 42 62 FD | 	drvc	_var05
1b608 004 1F 46 62 FD | 	waitx	_var07
1b60c 005 59 3E 62 FD | 	drvh	_var03
1b610 006 1F 46 62 FD | 	waitx	_var07
1b614 007 1F 46 62 FD | 	waitx	_var07
1b618 008 58 3E 62 FD | 	drvl	_var03
1b61c 009 1F 46 62 FD | 	waitx	_var07
1b620 00a             | LR__0938
1b620 00a 59 42 62 FD | 	drvh	_var05
1b624 00b 1F 46 62 FD | 	waitx	_var07
1b628 00c 59 3E 62 FD | 	drvh	_var03
1b62c 00d 1F 46 62 FD | 	waitx	_var07
1b630 00e 40 42 72 FD | 	testp	_var05 wc
1b634 00f 01 3C 86 F5 | 	muxc	_var02, #1
1b638 010 1F 46 62 FD | 	waitx	_var07
1b63c 011 58 3E 62 FD | 	drvl	_var03
1b640 012 1F 46 62 FD | 	waitx	_var07
1b644 013 1F 46 62 FD | 	waitx	_var07
1b648 014             | LR__0939
1b648                 | 	orgh
1b648     1E 35 02 F6 | 	mov	result1, _var02
1b64c                 | _jm_i2c_spin2_write_ret
1b64c     2D 00 64 FD | 	ret
1b650                 | 
1b650                 | ' 
1b650                 | ' 
1b650                 | ' pub read(ackbit) : i2cbyte | scl, sda, tix
1b650                 | _jm_i2c_spin2_read
1b650     3A 3B 02 F6 | 	mov	_var01, arg01
1b654     00 3C 06 F6 | 	mov	_var02, #0
1b658                 | ' 
1b658                 | ' '' Read byte from I2C bus
1b658                 | ' '' -- ackbit is state of ack bit
1b658                 | ' ''    * usually NAK for last byte read
1b658                 | ' 
1b658                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1b658     C9 3E 02 FB | 	rdlong	_var03, objptr
1b65c     04 92 05 F1 | 	add	objptr, #4
1b660     C9 40 02 FB | 	rdlong	_var04, objptr
1b664     20 43 02 F6 | 	mov	_var05, _var04
1b668     04 92 05 F1 | 	add	objptr, #4
1b66c     C9 44 02 FB | 	rdlong	_var06, objptr
1b670     08 92 85 F1 | 	sub	objptr, #8
1b674     22 47 02 F6 | 	mov	_var07, _var06
1b678                 | ' 
1b678                 | '   org                                                    
1b678     D4 49 9E FE | 	loc	pa,	#(@LR__0943-@LR__0940)
1b67c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1b680                 | LR__0940
1b680 000             | 	org	0
1b680 000 59 42 62 FD | 	drvh	_var05
1b684 001             | LR__0941
1b684 001 08 12 DC FC | 	rep	#9, #8
1b688 002 1F 46 62 FD | 	waitx	_var07
1b68c 003 59 3E 62 FD | 	drvh	_var03
1b690 004 1F 46 62 FD | 	waitx	_var07
1b694 005 40 42 72 FD | 	testp	_var05 wc
1b698 006 01 3C 66 F0 | 	shl	_var02, #1
1b69c 007 01 3C 86 F5 | 	muxc	_var02, #1
1b6a0 008 1F 46 62 FD | 	waitx	_var07
1b6a4 009 58 3E 62 FD | 	drvl	_var03
1b6a8 00a 1F 46 62 FD | 	waitx	_var07
1b6ac 00b             | LR__0942
1b6ac 00b 00 3A 16 F4 | 	testb	_var01, #0 wc
1b6b0 00c 5A 42 62 FD | 	drvc	_var05
1b6b4 00d 1F 46 62 FD | 	waitx	_var07
1b6b8 00e 59 3E 62 FD | 	drvh	_var03
1b6bc 00f 1F 46 62 FD | 	waitx	_var07
1b6c0 010 1F 46 62 FD | 	waitx	_var07
1b6c4 011 58 3E 62 FD | 	drvl	_var03
1b6c8 012 1F 46 62 FD | 	waitx	_var07
1b6cc 013 1F 46 62 FD | 	waitx	_var07
1b6d0 014             | LR__0943
1b6d0                 | 	orgh
1b6d0     1E 35 02 F6 | 	mov	result1, _var02
1b6d4                 | _jm_i2c_spin2_read_ret
1b6d4     2D 00 64 FD | 	ret
1b6d8                 | 
1b6d8                 | ' 
1b6d8                 | ' 
1b6d8                 | ' pub stop() | scl, sda, tix
1b6d8                 | _jm_i2c_spin2_stop
1b6d8                 | ' 
1b6d8                 | ' '' Create I2C stop sequence
1b6d8                 | ' '' -- allows for clock stretch
1b6d8                 | ' 
1b6d8                 | '   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
1b6d8     C9 3A 02 FB | 	rdlong	_var01, objptr
1b6dc     04 92 05 F1 | 	add	objptr, #4
1b6e0     C9 3C 02 FB | 	rdlong	_var02, objptr
1b6e4     04 92 05 F1 | 	add	objptr, #4
1b6e8     C9 3E 02 FB | 	rdlong	_var03, objptr
1b6ec     08 92 85 F1 | 	sub	objptr, #8
1b6f0                 | ' 
1b6f0                 | '   org
1b6f0     28 49 9E FE | 	loc	pa,	#(@LR__0946-@LR__0944)
1b6f4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1b6f8                 | LR__0944
1b6f8 000             | 	org	0
1b6f8 000 58 3C 62 FD | 	drvl	_var02
1b6fc 001 59 3A 62 FD | 	drvh	_var01
1b700 002 1F 3E 62 FD | 	waitx	_var03
1b704 003             | LR__0945
1b704 003 40 3A 72 FD | 	testp	_var01 wc
1b708 004 F8 FF 9F 3D |  if_ae	jmp	#LR__0945
1b70c 005 1F 3E 62 FD | 	waitx	_var03
1b710 006 59 3C 62 FD | 	drvh	_var02
1b714 007             | LR__0946
1b714                 | 	orgh
1b714                 | _jm_i2c_spin2_stop_ret
1b714     2D 00 64 FD | 	ret
1b718                 | 
1b718                 | ' 
1b718                 | ' 
1b718                 | ' pub start(rxpin, txpin, mode, baud) : result | baudcfg, spmode
1b718                 | _jm_fullduplexserial_spin2_start
1b718     0B 4C 05 F6 | 	mov	COUNT_, #11
1b71c     A9 00 A0 FD | 	call	#pushregs_
1b720     3A 8D 02 F6 | 	mov	local01, arg01
1b724     3B 8F 02 F6 | 	mov	local02, arg02
1b728     3C 91 02 F6 | 	mov	local03, arg03
1b72c     3D 93 02 F6 | 	mov	local04, arg04
1b730                 | ' 
1b730                 | ' '' Start simple serial coms on rxpin and txpin at baud
1b730                 | ' '' -- rxpin... receive pin (-1 if not used)
1b730                 | ' '' -- txpin... transmit pin (-1 if not used)
1b730                 | ' '' -- mode.... %0xx1 = invert rx
1b730                 | ' ''             %0x1x = invert tx
1b730                 | ' ''             %01xx = open-drain/open-source tx
1b730                 | ' 
1b730                 | '   stop()
1b730     A0 01 B0 FD | 	call	#_jm_fullduplexserial_spin2_stop
1b734                 | ' 
1b734                 | '   if (rxpin == txpin)                                           ' pin must be unique
1b734     47 8D 0A F2 | 	cmp	local01, local02 wz
1b738                 | '     return false
1b738     00 34 06 A6 |  if_e	mov	result1, #0
1b73c     88 01 90 AD |  if_e	jmp	#LR__0954
1b740                 | ' 
1b740                 | '   longmove(@rxp, @rxpin, 2)                                     ' save pins
1b740     04 92 05 F1 | 	add	objptr, #4
1b744     C9 8C 62 FC | 	wrlong	local01, objptr
1b748     04 92 05 F1 | 	add	objptr, #4
1b74c     C9 8E 62 FC | 	wrlong	local02, objptr
1b750                 | '   rxhub := @rxbuf                                               ' point to buffers
1b750     20 92 05 F1 | 	add	objptr, #32
1b754     C9 E2 02 F6 | 	mov	muldivb_, objptr
1b758     1C 92 85 F1 | 	sub	objptr, #28
1b75c     C9 E2 62 FC | 	wrlong	muldivb_, objptr
1b760                 | '   txhub := @txbuf
1b760     1C 93 05 F1 | 	add	objptr, #284
1b764     C9 E2 02 F6 | 	mov	muldivb_, objptr
1b768     18 93 85 F1 | 	sub	objptr, #280
1b76c     C9 E2 62 FC | 	wrlong	muldivb_, objptr
1b770     10 92 85 F1 | 	sub	objptr, #16
1b774                 | ' 
1b774                 | '   txdelay := clkfreq / baud * 11                                ' tix to transmit one byte
1b774     14 E0 06 FB | 	rdlong	muldiva_, #20
1b778     49 E3 02 F6 | 	mov	muldivb_, local04
1b77c     BB 00 A0 FD | 	call	#divide_
1b780     0B E2 06 FD | 	qmul	muldivb_, #11
1b784     24 92 05 F1 | 	add	objptr, #36
1b788                 | ' 
1b788                 | '   baudcfg := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
1b788     10 94 C6 F9 | 	decod	local05, #16
1b78c     49 97 02 F6 | 	mov	local06, local04
1b790     10 76 C6 F9 | 	decod	arg02, #16
1b794     4B 79 02 F6 | 	mov	arg03, local06
1b798     18 34 62 FD | 	getqx	result1
1b79c     C9 34 62 FC | 	wrlong	result1, objptr
1b7a0     14 74 06 FB | 	rdlong	arg01, #20
1b7a4     80 00 00 FF 
1b7a8     00 74 06 FD | 	qmul	arg01, ##65536
1b7ac     19 34 62 FD | 	getqy	result1
1b7b0     18 74 62 FD | 	getqx	arg01
1b7b4     28 34 62 FD | 	setq	result1
1b7b8     3C 75 12 FD | 	qdiv	arg01, arg03
1b7bc                 | '   baudcfg |= (8-1)                                              ' set bits (8)
1b7bc                 | ' 
1b7bc                 | '   if (rxp >= 0)                                                 ' configure rx pin if used
1b7bc     20 92 85 F1 | 	sub	objptr, #32
1b7c0     C9 34 02 FB | 	rdlong	result1, objptr
1b7c4     04 92 85 F1 | 	sub	objptr, #4
1b7c8     00 34 56 F2 | 	cmps	result1, #0 wc
1b7cc     18 34 62 FD | 	getqx	result1
1b7d0     1A 99 02 F6 | 	mov	local07, result1
1b7d4     20 99 06 F4 | 	bitl	local07, #288
1b7d8     07 98 46 F5 | 	or	local07, #7
1b7dc     40 00 90 CD |  if_b	jmp	#LR__0947
1b7e0                 | '     spmode := P_ASYNC_RX
1b7e0     3E 76 06 F6 | 	mov	arg02, #62
1b7e4                 | '     if (mode.[0])
1b7e4     01 90 CE F7 | 	test	local03, #1 wz
1b7e8                 | '       spmode |= P_INVERT_IN
1b7e8     40 00 00 5F 
1b7ec     3E 76 06 56 |  if_ne	mov	arg02, ##32830
1b7f0                 | '     pinstart(rxp, spmode, baudcfg, 0)
1b7f0     04 92 05 F1 | 	add	objptr, #4
1b7f4     C9 74 02 FB | 	rdlong	arg01, objptr
1b7f8     04 92 85 F1 | 	sub	objptr, #4
1b7fc     4C 95 02 F6 | 	mov	local05, local07
1b800     00 96 06 F6 | 	mov	local06, #0
1b804     4A 79 02 F6 | 	mov	arg03, local05
1b808     00 7A 06 F6 | 	mov	arg04, #0
1b80c     40 74 62 FD | 	dirl	arg01
1b810     3A 77 02 FC | 	wrpin	arg02, arg01
1b814     3A 79 12 FC | 	wxpin	arg03, arg01
1b818     3A 01 28 FC | 	wypin	#0, arg01
1b81c     41 74 62 FD | 	dirh	arg01
1b820                 | LR__0947
1b820                 | ' 
1b820                 | '   if (txp >= 0)                                                 ' configure tx pin if used
1b820     08 92 05 F1 | 	add	objptr, #8
1b824     C9 9A 02 FB | 	rdlong	local08, objptr
1b828     08 92 85 F1 | 	sub	objptr, #8
1b82c     00 9A 56 F2 | 	cmps	local08, #0 wc
1b830     70 00 90 CD |  if_b	jmp	#LR__0953
1b834                 | '     spmode := P_ASYNC_TX | P_OE
1b834     7C 9C 06 F6 | 	mov	local09, #124
1b838                 | '     case mode.[2..1]
1b838     48 9B 02 F6 | 	mov	local08, local03
1b83c     01 9A 46 F0 | 	shr	local08, #1
1b840     03 9A 06 F5 | 	and	local08, #3
1b844     01 9A 86 F1 | 	sub	local08, #1
1b848     03 9A 26 F3 | 	fle	local08, #3
1b84c     4D 9F 02 F6 | 	mov	local10, local08
1b850     30 9E 62 FD | 	jmprel	local10
1b854                 | LR__0948
1b854     0C 00 90 FD | 	jmp	#LR__0949
1b858     10 00 90 FD | 	jmp	#LR__0950
1b85c     14 00 90 FD | 	jmp	#LR__0951
1b860     20 00 90 FD | 	jmp	#LR__0952
1b864                 | LR__0949
1b864                 | '       %01 : spmode |= P_INVERT_OUTPUT
1b864     0E 9C 26 F4 | 	bith	local09, #14
1b868     18 00 90 FD | 	jmp	#LR__0952
1b86c                 | LR__0950
1b86c                 | '       %10 : spmode |= P_HIGH_FLOAT                              ' requires external pull-up
1b86c     4B 9C 26 F4 | 	bith	local09, #75
1b870     10 00 90 FD | 	jmp	#LR__0952
1b874                 | LR__0951
1b874                 | '       %11 : spmode |= P_INVERT_OUTPUT | P_LOW_FLOAT             ' requires external pull-down
1b874     4E A1 02 F6 | 	mov	local11, local09
1b878     23 00 00 FF 
1b87c     00 A1 46 F5 | 	or	local11, ##18176
1b880     50 9D 02 F6 | 	mov	local09, local11
1b884                 | LR__0952
1b884                 | '     pinstart(txp, spmode, baudcfg, 0)
1b884     08 92 05 F1 | 	add	objptr, #8
1b888     C9 74 02 FB | 	rdlong	arg01, objptr
1b88c     08 92 85 F1 | 	sub	objptr, #8
1b890     40 74 62 FD | 	dirl	arg01
1b894     3A 9D 02 FC | 	wrpin	local09, arg01
1b898     3A 99 12 FC | 	wxpin	local07, arg01
1b89c     3A 01 28 FC | 	wypin	#0, arg01
1b8a0     41 74 62 FD | 	dirh	arg01
1b8a4                 | LR__0953
1b8a4                 | ' 
1b8a4                 | '   cog := coginit(COGEXEC_NEW, @uart_mgr, @rxp) + 1              ' start uart manager cog
1b8a4     04 92 05 F1 | 	add	objptr, #4
1b8a8     C9 78 02 F6 | 	mov	arg03, objptr
1b8ac     04 92 85 F1 | 	sub	objptr, #4
1b8b0     10 34 06 F6 | 	mov	result1, #16
1b8b4     28 78 62 FD | 	setq	arg03
1b8b8     02 35 F2 FC | 	coginit	result1, ptr__jm_fullduplexserial_spin2_dat__ wc
1b8bc     01 34 66 C6 |  if_b	neg	result1, #1
1b8c0     01 34 06 F1 | 	add	result1, #1
1b8c4     C9 34 62 FC | 	wrlong	result1, objptr
1b8c8                 | ' 
1b8c8                 | '   return cog
1b8c8                 | LR__0954
1b8c8     A8 F0 03 F6 | 	mov	ptra, fp
1b8cc     B3 00 A0 FD | 	call	#popregs_
1b8d0                 | _jm_fullduplexserial_spin2_start_ret
1b8d0     2D 00 64 FD | 	ret
1b8d4                 | 
1b8d4                 | ' 
1b8d4                 | ' 
1b8d4                 | ' pub stop()
1b8d4                 | _jm_fullduplexserial_spin2_stop
1b8d4                 | ' 
1b8d4                 | ' '' Stop serial driver
1b8d4                 | ' '' -- frees a cog if driver was running
1b8d4                 | ' 
1b8d4                 | '   if (cog)                                                      ' cog active?
1b8d4     C9 74 0A FB | 	rdlong	arg01, objptr wz
1b8d8                 | '     cogstop(cog-1)                                              '  yes, shut it down
1b8d8     C9 74 02 5B |  if_ne	rdlong	arg01, objptr
1b8dc     01 74 86 51 |  if_ne	sub	arg01, #1
1b8e0     03 74 62 5D |  if_ne	cogstop	arg01
1b8e4                 | '     cog := 0                                                    '  and mark stopped
1b8e4     C9 00 68 5C |  if_ne	wrlong	#0, objptr
1b8e8                 | ' 
1b8e8                 | '   longfill(@rxp,  -1, 2)                                        ' reset object globals
1b8e8     04 92 05 F1 | 	add	objptr, #4
1b8ec     C9 74 02 F6 | 	mov	arg01, objptr
1b8f0     04 92 85 F1 | 	sub	objptr, #4
1b8f4     01 76 66 F6 | 	neg	arg02, #1
1b8f8     02 78 06 F6 | 	mov	arg03, #2
1b8fc     A1 00 A0 FD | 	call	#\builtin_longfill_
1b900                 | '   longfill(@rxhub, 0, 7)
1b900     0C 92 05 F1 | 	add	objptr, #12
1b904     C9 74 02 F6 | 	mov	arg01, objptr
1b908     0C 92 85 F1 | 	sub	objptr, #12
1b90c     00 76 06 F6 | 	mov	arg02, #0
1b910     07 78 06 F6 | 	mov	arg03, #7
1b914     A1 00 A0 FD | 	call	#\builtin_longfill_
1b918                 | _jm_fullduplexserial_spin2_stop_ret
1b918     2D 00 64 FD | 	ret
1b91c                 | 
1b91c                 | ' 
1b91c                 | ' 
1b91c                 | ' pub rxcheck() : b
1b91c                 | _jm_fullduplexserial_spin2_rxcheck
1b91c                 | ' 
1b91c                 | ' '' Pulls byte from receive buffer if available
1b91c                 | ' '' -- returns -1 if buffer is empty
1b91c                 | ' 
1b91c                 | '   if (rxtail <> rxhead)                                         ' something in buffer?
1b91c     18 92 05 F1 | 	add	objptr, #24
1b920     C9 34 02 FB | 	rdlong	result1, objptr
1b924     04 92 85 F1 | 	sub	objptr, #4
1b928     C9 3A 02 FB | 	rdlong	_var01, objptr
1b92c     14 92 85 F1 | 	sub	objptr, #20
1b930     1D 35 0A F2 | 	cmp	result1, _var01 wz
1b934     3C 00 90 AD |  if_e	jmp	#LR__0955
1b938                 | '     b := rxbuf[rxtail]                                          ' get it
1b938     18 92 05 F1 | 	add	objptr, #24
1b93c     C9 3A 02 FB | 	rdlong	_var01, objptr
1b940     1D 35 02 F6 | 	mov	result1, _var01
1b944     10 92 05 F1 | 	add	objptr, #16
1b948     C9 34 02 F1 | 	add	result1, objptr
1b94c     1A 3D C2 FA | 	rdbyte	_var02, result1
1b950                 | '     if (++rxtail == BUF_SIZE)                                   ' update tail pointer
1b950     01 3A 06 F1 | 	add	_var01, #1
1b954     10 92 85 F1 | 	sub	objptr, #16
1b958     C9 3A 62 FC | 	wrlong	_var01, objptr
1b95c     18 92 85 F1 | 	sub	objptr, #24
1b960     00 3B 0E F2 | 	cmp	_var01, #256 wz
1b964                 | '       rxtail := 0
1b964     18 92 05 A1 |  if_e	add	objptr, #24
1b968     C9 00 68 AC |  if_e	wrlong	#0, objptr
1b96c     18 92 85 A1 |  if_e	sub	objptr, #24
1b970                 | '   else
1b970     04 00 90 FD | 	jmp	#LR__0956
1b974                 | LR__0955
1b974                 | '     b := EOF                                                    ' mark no byte available
1b974     01 3C 66 F6 | 	neg	_var02, #1
1b978                 | LR__0956
1b978     1E 35 02 F6 | 	mov	result1, _var02
1b97c                 | _jm_fullduplexserial_spin2_rxcheck_ret
1b97c     2D 00 64 FD | 	ret
1b980                 | 
1b980                 | ' 
1b980                 | ' 
1b980                 | ' pub rxtime(ms) : b | mstix, t
1b980                 | _jm_fullduplexserial_spin2_rxtime
1b980     06 4C 05 F6 | 	mov	COUNT_, #6
1b984     A9 00 A0 FD | 	call	#pushregs_
1b988     14 34 06 FB | 	rdlong	result1, #20
1b98c     1A 35 52 F6 | 	abs	result1, result1 wc
1b990     01 00 00 FF 
1b994     E8 35 16 FD | 	qdiv	result1, ##1000
1b998                 | ' 
1b998                 | ' '' Wait ms milliseconds for a byte to be received
1b998                 | ' '' -- returns -1 if no byte received, $00..$FF if byte
1b998                 | ' 
1b998                 | '   mstix := clkfreq / 1000
1b998                 | ' 
1b998                 | '   t := getct()
1b998     1A 8C 62 FD | 	getct	local01
1b99c                 | '   repeat until ((b := rxcheck()) >= 0) || (((getct()-t) / mstix) >= ms)
1b99c     18 34 62 FD | 	getqx	result1
1b9a0     1A 8F 82 F6 | 	negc	local02, result1
1b9a4                 | LR__0957
1b9a4     00 90 06 F6 | 	mov	local03, #0
1b9a8     00 92 06 F6 | 	mov	local04, #0
1b9ac     6C FF BF FD | 	call	#_jm_fullduplexserial_spin2_rxcheck
1b9b0     1A 95 02 F6 | 	mov	local05, result1
1b9b4     00 94 56 F2 | 	cmps	local05, #0 wc
1b9b8     00 92 26 36 |  if_ae	not	local04, #0
1b9bc     00 92 0E F2 | 	cmp	local04, #0 wz
1b9c0     00 90 26 56 |  if_ne	not	local03, #0
1b9c4     00 92 06 F6 | 	mov	local04, #0
1b9c8     00 96 06 F6 | 	mov	local06, #0
1b9cc     1A E0 62 FD | 	getct	muldiva_
1b9d0     46 E1 82 F1 | 	sub	muldiva_, local01
1b9d4     47 E3 02 F6 | 	mov	muldivb_, local02
1b9d8     BB 00 A0 FD | 	call	#divide_
1b9dc     3A E3 52 F2 | 	cmps	muldivb_, arg01 wc
1b9e0     00 96 26 36 |  if_ae	not	local06, #0
1b9e4     00 96 0E F2 | 	cmp	local06, #0 wz
1b9e8     00 92 26 56 |  if_ne	not	local04, #0
1b9ec     49 91 4A F5 | 	or	local03, local04 wz
1b9f0     B0 FF 9F AD |  if_e	jmp	#LR__0957
1b9f4     4A 35 02 F6 | 	mov	result1, local05
1b9f8     A8 F0 03 F6 | 	mov	ptra, fp
1b9fc     B3 00 A0 FD | 	call	#popregs_
1ba00                 | _jm_fullduplexserial_spin2_rxtime_ret
1ba00     2D 00 64 FD | 	ret
1ba04                 | 
1ba04                 | ' 
1ba04                 | ' 
1ba04                 | ' pub tx(b) | n
1ba04                 | _jm_fullduplexserial_spin2_tx
1ba04     20 46 9E FE | 	loc	pa,	#(@LR__0959-@LR__0958)
1ba08     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1ba0c                 | ' 
1ba0c                 | ' '' Move byte into transmit buffer if room is available
1ba0c                 | ' '' -- will wait if buffer is full
1ba0c                 | ' 
1ba0c                 | '   repeat
1ba0c                 | LR__0958
1ba0c                 | '     n := txhead - txtail                                        ' bytes in buffer
1ba0c     1C 92 05 F1 | 	add	objptr, #28
1ba10     C9 3A 02 FB | 	rdlong	_var01, objptr
1ba14     04 92 05 F1 | 	add	objptr, #4
1ba18     C9 3C 02 FB | 	rdlong	_var02, objptr
1ba1c     20 92 85 F1 | 	sub	objptr, #32
1ba20     1E 3B 82 F1 | 	sub	_var01, _var02
1ba24                 | '     if (n < 0)                                                  ' fix for index wrap-around
1ba24     00 3A 56 F2 | 	cmps	_var01, #0 wc
1ba28                 | '       n += BUF_SIZE
1ba28     00 3B 06 C1 |  if_b	add	_var01, #256
1ba2c                 | '     if (n < BUF_SIZE-1)
1ba2c     FF 3A 56 F2 | 	cmps	_var01, #255 wc
1ba30                 | '       quit
1ba30     D8 FF 9F 3D |  if_ae	jmp	#LR__0958
1ba34                 | LR__0959
1ba34                 | ' 
1ba34                 | '   txbuf[txhead] := b                                            ' move to buffer
1ba34     1C 92 05 F1 | 	add	objptr, #28
1ba38     C9 3C 02 FB | 	rdlong	_var02, objptr
1ba3c     0C 93 05 F1 | 	add	objptr, #268
1ba40     C9 3C 02 F1 | 	add	_var02, objptr
1ba44     1E 75 42 FC | 	wrbyte	arg01, _var02
1ba48                 | '   if (++txhead == BUF_SIZE)                                     ' update head pointer
1ba48     0C 93 85 F1 | 	sub	objptr, #268
1ba4c     C9 3C 02 FB | 	rdlong	_var02, objptr
1ba50     01 3C 06 F1 | 	add	_var02, #1
1ba54     C9 3C 62 FC | 	wrlong	_var02, objptr
1ba58     1C 92 85 F1 | 	sub	objptr, #28
1ba5c     00 3D 0E F2 | 	cmp	_var02, #256 wz
1ba60                 | '     txhead := 0
1ba60     1C 92 05 A1 |  if_e	add	objptr, #28
1ba64     C9 00 68 AC |  if_e	wrlong	#0, objptr
1ba68     1C 92 85 A1 |  if_e	sub	objptr, #28
1ba6c                 | _jm_fullduplexserial_spin2_tx_ret
1ba6c     2D 00 64 FD | 	ret
1ba70                 | 
1ba70                 | ' 
1ba70                 | ' '' This is not a top object                                                        
1ba70                 | '                                                                  
1ba70                 | '           
1ba70                 | ' pub start(sdipin, sdopin, sckpin, khz) : result | m, x
1ba70                 | _jm_spi_spin2_start
1ba70     05 4C 05 F6 | 	mov	COUNT_, #5
1ba74     A9 00 A0 FD | 	call	#pushregs_
1ba78     3A 8D 02 F6 | 	mov	local01, arg01
1ba7c     3B 8F 02 F6 | 	mov	local02, arg02
1ba80     3C 91 02 F6 | 	mov	local03, arg03
1ba84     3D 93 02 F6 | 	mov	local04, arg04
1ba88                 | ' 
1ba88                 | ' '' Configure P2 smart pins for SPI coms
1ba88                 | ' '' -- sdipin is input from external device (-1 if not used)
1ba88                 | ' '' -- sdopin is output to external device  (-1 if not used)
1ba88                 | ' '' -- sckpin is clock output
1ba88                 | ' '' -- khz is clock frequence in kilohertz  (1000 = 1MHz)                                                        
1ba88                 | '                                                                  
1ba88                 | '   stop()
1ba88     58 01 B0 FD | 	call	#_jm_spi_spin2_stop
1ba8c                 | ' 
1ba8c                 | '   if ((sdipin == sdopin) || (sckpin < 0))                       ' validate pins
1ba8c     47 8D 0A F2 | 	cmp	local01, local02 wz
1ba90     00 90 56 52 |  if_ne	cmps	local03, #0 wc
1ba94                 | '     return false
1ba94     00 34 06 E6 |  if_be	mov	result1, #0
1ba98     3C 01 90 ED |  if_be	jmp	#LR__0962
1ba9c                 | ' 
1ba9c                 | '   longmove(@sdi, @sdipin, 3)                                    ' save pins
1ba9c     04 92 05 F1 | 	add	objptr, #4
1baa0     C9 8C 62 FC | 	wrlong	local01, objptr
1baa4     04 92 05 F1 | 	add	objptr, #4
1baa8     C9 8E 62 FC | 	wrlong	local02, objptr
1baac     04 92 05 F1 | 	add	objptr, #4
1bab0     C9 90 62 FC | 	wrlong	local03, objptr
1bab4                 | ' 
1bab4                 | '   if (sdi >= 0)
1bab4     08 92 85 F1 | 	sub	objptr, #8
1bab8     C9 7A 02 FB | 	rdlong	arg04, objptr
1babc     04 92 85 F1 | 	sub	objptr, #4
1bac0     00 7A 56 F2 | 	cmps	arg04, #0 wc
1bac4     44 00 90 CD |  if_b	jmp	#LR__0960
1bac8                 | '     m := P_SYNC_RX                                              ' spi rx mode                         
1bac8                 | '     m |= ((sck-sdi) & %111) << 24                               ' add SCK offset (B pin)              
1bac8     3A 76 06 F6 | 	mov	arg02, #58
1bacc     0C 92 05 F1 | 	add	objptr, #12
1bad0     C9 90 02 FB | 	rdlong	local03, objptr
1bad4     08 92 85 F1 | 	sub	objptr, #8
1bad8     C9 74 02 FB | 	rdlong	arg01, objptr
1badc     3A 91 82 F1 | 	sub	local03, arg01
1bae0     07 90 06 F5 | 	and	local03, #7
1bae4     18 90 66 F0 | 	shl	local03, #24
1bae8     48 77 42 F5 | 	or	arg02, local03
1baec                 | '     x := %0_00000 | (8-1)                                       ' sample ahead of b pin rise, 8 bits  
1baec     07 94 06 F6 | 	mov	local05, #7
1baf0                 | '     pinstart(sdi, m, x, 0)                                      ' configure smart pin                                                                   
1baf0     40 74 62 FD | 	dirl	arg01
1baf4     3A 77 02 FC | 	wrpin	arg02, arg01
1baf8     3A 0F 18 FC | 	wxpin	#7, arg01
1bafc     3A 01 28 FC | 	wypin	#0, arg01
1bb00     41 74 62 FD | 	dirh	arg01
1bb04                 | '     pinf(sdi)                                                   ' disable until used
1bb04     04 92 85 F1 | 	sub	objptr, #4
1bb08     50 74 62 FD | 	fltl	arg01
1bb0c                 | LR__0960
1bb0c                 | ' 
1bb0c                 | '   if (sdo >= 0)
1bb0c     08 92 05 F1 | 	add	objptr, #8
1bb10     C9 7A 02 FB | 	rdlong	arg04, objptr
1bb14     08 92 85 F1 | 	sub	objptr, #8
1bb18     00 7A 56 F2 | 	cmps	arg04, #0 wc
1bb1c     44 00 90 CD |  if_b	jmp	#LR__0961
1bb20                 | '     m := P_OE | P_SYNC_TX                                       ' spi tx mode
1bb20                 | '     m |= ((sck-sdo) & %111) << 24                               ' add SCK offset (B pin)
1bb20     78 76 06 F6 | 	mov	arg02, #120
1bb24     0C 92 05 F1 | 	add	objptr, #12
1bb28     C9 94 02 FB | 	rdlong	local05, objptr
1bb2c     04 92 85 F1 | 	sub	objptr, #4
1bb30     C9 74 02 FB | 	rdlong	arg01, objptr
1bb34     3A 95 82 F1 | 	sub	local05, arg01
1bb38     07 94 06 F5 | 	and	local05, #7
1bb3c     18 94 66 F0 | 	shl	local05, #24
1bb40     4A 77 42 F5 | 	or	arg02, local05
1bb44                 | '     x := %1_00000 | (8-1)                                       ' start/stop mode, 8 bits
1bb44     27 94 06 F6 | 	mov	local05, #39
1bb48                 | '     pinstart(sdo, m, x, 0)                                      ' configure smart pin  
1bb48     40 74 62 FD | 	dirl	arg01
1bb4c     3A 77 02 FC | 	wrpin	arg02, arg01
1bb50     3A 4F 18 FC | 	wxpin	#39, arg01
1bb54     3A 01 28 FC | 	wypin	#0, arg01
1bb58     41 74 62 FD | 	dirh	arg01
1bb5c                 | '     pinf(sdo)                                                   ' disable until used 
1bb5c     08 92 85 F1 | 	sub	objptr, #8
1bb60     50 74 62 FD | 	fltl	arg01
1bb64                 | LR__0961
1bb64     01 00 00 FF 
1bb68     E8 93 06 FD | 	qmul	local04, ##1000
1bb6c                 | ' 
1bb6c                 | '   m := P_OE | P_PULSE                                           ' pulses for spi clock   
1bb6c                 | '   x.word[0] := 2 #> (clkfreq / (khz*1000)) <# $FFFF             ' ticks in period        
1bb6c     14 E0 06 FB | 	rdlong	muldiva_, #20
1bb70     18 E2 62 FD | 	getqx	muldivb_
1bb74     BB 00 A0 FD | 	call	#divide_
1bb78     02 92 06 F6 | 	mov	local04, #2
1bb7c     71 93 42 F3 | 	fges	local04, muldivb_
1bb80     7F 00 00 FF 
1bb84     FF 93 66 F3 | 	fles	local04, ##65535
1bb88     49 93 32 F9 | 	getword	local04, local04, #0
1bb8c     E0 95 06 F4 | 	bitl	local05, #480
1bb90     49 95 42 F5 | 	or	local05, local04
1bb94                 | '   x.word[1] := x.word[0] >> 1                                   ' ticks in low cycle (50%)      
1bb94     4A 93 32 F9 | 	getword	local04, local05, #0
1bb98     01 92 46 F0 | 	shr	local04, #1
1bb9c     49 93 32 F9 | 	getword	local04, local04, #0
1bba0     10 92 66 F0 | 	shl	local04, #16
1bba4     4A 79 32 F9 | 	getword	arg03, local05, #0
1bba8     49 79 42 F5 | 	or	arg03, local04
1bbac                 | '   pinstart(sck, m, x, 0)                                        ' configure smart pin                                                         
1bbac     0C 92 05 F1 | 	add	objptr, #12
1bbb0     C9 74 02 FB | 	rdlong	arg01, objptr
1bbb4     0C 92 85 F1 | 	sub	objptr, #12
1bbb8     40 74 62 FD | 	dirl	arg01
1bbbc     3A 91 08 FC | 	wrpin	#72, arg01
1bbc0     3A 79 12 FC | 	wxpin	arg03, arg01
1bbc4     3A 01 28 FC | 	wypin	#0, arg01
1bbc8     41 74 62 FD | 	dirh	arg01
1bbcc                 | ' 
1bbcc                 | '   setup := true
1bbcc     01 34 66 F6 | 	neg	result1, #1
1bbd0     FF FF FF FF 
1bbd4     C9 FE 6B FC | 	wrlong	##-1, objptr
1bbd8                 | ' 
1bbd8                 | '   return setup
1bbd8                 | LR__0962
1bbd8     A8 F0 03 F6 | 	mov	ptra, fp
1bbdc     B3 00 A0 FD | 	call	#popregs_
1bbe0                 | _jm_spi_spin2_start_ret
1bbe0     2D 00 64 FD | 	ret
1bbe4                 | 
1bbe4                 | '                       
1bbe4                 | ' 
1bbe4                 | ' pub stop()
1bbe4                 | _jm_spi_spin2_stop
1bbe4                 | ' 
1bbe4                 | ' '' Clears SPI smart pins if configured
1bbe4                 | ' 
1bbe4                 | '   if (setup)                                                    ' configured?
1bbe4     C9 78 0A FB | 	rdlong	arg03, objptr wz
1bbe8     60 00 90 AD |  if_e	jmp	#LR__0963
1bbec                 | '     if (sdi >= 0)                                               ' clear smart pins
1bbec     04 92 05 F1 | 	add	objptr, #4
1bbf0     C9 78 02 FB | 	rdlong	arg03, objptr
1bbf4     04 92 85 F1 | 	sub	objptr, #4
1bbf8     00 78 56 F2 | 	cmps	arg03, #0 wc
1bbfc                 | '       pinclear(sdi)
1bbfc     04 92 05 31 |  if_ae	add	objptr, #4
1bc00     C9 74 02 3B |  if_ae	rdlong	arg01, objptr
1bc04     04 92 85 31 |  if_ae	sub	objptr, #4
1bc08     50 74 62 3D |  if_ae	fltl	arg01
1bc0c     3A 01 08 3C |  if_ae	wrpin	#0, arg01
1bc10                 | '     if (sdo >= 0)
1bc10     08 92 05 F1 | 	add	objptr, #8
1bc14     C9 78 02 FB | 	rdlong	arg03, objptr
1bc18     08 92 85 F1 | 	sub	objptr, #8
1bc1c     00 78 56 F2 | 	cmps	arg03, #0 wc
1bc20                 | '       pinclear(sdo)
1bc20     08 92 05 31 |  if_ae	add	objptr, #8
1bc24     C9 74 02 3B |  if_ae	rdlong	arg01, objptr
1bc28     08 92 85 31 |  if_ae	sub	objptr, #8
1bc2c     50 74 62 3D |  if_ae	fltl	arg01
1bc30     3A 01 08 3C |  if_ae	wrpin	#0, arg01
1bc34                 | '     pinclear(sck)      
1bc34     0C 92 05 F1 | 	add	objptr, #12
1bc38     C9 74 02 FB | 	rdlong	arg01, objptr
1bc3c     0C 92 85 F1 | 	sub	objptr, #12
1bc40     50 74 62 FD | 	fltl	arg01
1bc44     3A 01 08 FC | 	wrpin	#0, arg01
1bc48                 | '     setup := false
1bc48     C9 00 68 FC | 	wrlong	#0, objptr
1bc4c                 | LR__0963
1bc4c                 | '     
1bc4c                 | '   longfill(@sdi, -1, 3)                                         ' mark pins as unused
1bc4c     04 92 05 F1 | 	add	objptr, #4
1bc50     C9 74 02 F6 | 	mov	arg01, objptr
1bc54     04 92 85 F1 | 	sub	objptr, #4
1bc58     01 76 66 F6 | 	neg	arg02, #1
1bc5c     03 78 06 F6 | 	mov	arg03, #3
1bc60     A1 00 A0 FD | 	call	#\builtin_longfill_
1bc64                 | _jm_spi_spin2_stop_ret
1bc64     2D 00 64 FD | 	ret
1bc68                 | 
1bc68                 | ' 
1bc68                 | ' 
1bc68                 | ' pub shiftin(mode, bits) : value
1bc68                 | _jm_spi_spin2_shiftin
1bc68     03 4C 05 F6 | 	mov	COUNT_, #3
1bc6c     A9 00 A0 FD | 	call	#pushregs_
1bc70     3A 8D 02 F6 | 	mov	local01, arg01
1bc74     3B 8F 02 F6 | 	mov	local02, arg02
1bc78                 | ' 
1bc78                 | ' '' Shift data in from a synchronous serial device
1bc78                 | ' '' -- mode is bit order: LSBFIRST or MSBFIRST
1bc78                 | ' '' -- bits in the number of bits to shift
1bc78                 | ' 
1bc78                 | '   if (sdi < 0)                                                  ' abort if di not defined
1bc78     04 92 05 F1 | 	add	objptr, #4
1bc7c     C9 76 02 FB | 	rdlong	arg02, objptr
1bc80     04 92 85 F1 | 	sub	objptr, #4
1bc84     00 76 56 F2 | 	cmps	arg02, #0 wc
1bc88                 | '     return 0
1bc88     00 34 06 C6 |  if_b	mov	result1, #0
1bc8c     84 00 90 CD |  if_b	jmp	#LR__0966
1bc90                 | ' 
1bc90                 | '   pinf(sdi)                                                     ' reset di
1bc90     04 92 05 F1 | 	add	objptr, #4
1bc94     C9 74 02 FB | 	rdlong	arg01, objptr
1bc98     50 74 62 FD | 	fltl	arg01
1bc9c                 | '   wxpin(sdi, %0_00000 | (bits-1))                               ' configure di sampling/bits
1bc9c     47 77 02 F6 | 	mov	arg02, local02
1bca0     01 76 86 F1 | 	sub	arg02, #1
1bca4     3A 77 12 FC | 	wxpin	arg02, arg01
1bca8                 | '   pinl(sdi)                                                     ' enable di
1bca8     58 74 62 FD | 	drvl	arg01
1bcac                 | '   wypin(sck, bits)                                              ' start clocking data
1bcac     08 92 05 F1 | 	add	objptr, #8
1bcb0     C9 74 02 FB | 	rdlong	arg01, objptr
1bcb4     3A 8F 22 FC | 	wypin	local02, arg01
1bcb8     64 43 9E FE | 	loc	pa,	#(@LR__0965-@LR__0964)
1bcbc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bcc0                 | '   repeat until pinr(sck)                                        ' wait until clocks finished
1bcc0                 | LR__0964
1bcc0     C9 74 02 FB | 	rdlong	arg01, objptr
1bcc4     20 74 CE F7 | 	test	arg01, #32 wz
1bcc8     FF 35 02 56 |  if_ne	mov	result1, inb
1bccc     FE 35 02 A6 |  if_e	mov	result1, ina
1bcd0     3A 35 42 F0 | 	shr	result1, arg01
1bcd4     06 74 46 F0 | 	shr	arg01, #6
1bcd8     3A 35 4A F7 | 	zerox	result1, arg01 wz
1bcdc     E0 FF 9F AD |  if_e	jmp	#LR__0964
1bce0                 | LR__0965
1bce0                 | ' 
1bce0                 | '   value := rdpin(sdi)                                           ' get value
1bce0     08 92 85 F1 | 	sub	objptr, #8
1bce4     C9 74 02 FB | 	rdlong	arg01, objptr
1bce8     04 92 85 F1 | 	sub	objptr, #4
1bcec     00 34 06 F6 | 	mov	result1, #0
1bcf0     3A 35 8A FA | 	rdpin	result1, arg01
1bcf4                 | ' 
1bcf4                 | '   if (mode == LSBFIRST)
1bcf4     00 8C 0E F2 | 	cmp	local01, #0 wz
1bcf8                 | '     value >>= (32-bits)                                         ' align lsb
1bcf8     20 90 06 A6 |  if_e	mov	local03, #32
1bcfc     47 91 82 A1 |  if_e	sub	local03, local02
1bd00     48 35 42 A0 |  if_e	shr	result1, local03
1bd04                 | '   else
1bd04                 | '     value rev= 31                                               ' flip to align lsb
1bd04     69 34 62 5D |  if_ne	rev	result1
1bd08                 | '     if (bits < 32)                                              ' clear unused bits
1bd08     20 8E 56 52 |  if_ne	cmps	local02, #32 wc
1bd0c                 | '       value zerox= (bits-1)
1bd0c     01 8E 86 41 |  if_c_and_nz	sub	local02, #1
1bd10     47 35 42 47 |  if_c_and_nz	zerox	result1, local02
1bd14                 | LR__0966
1bd14     A8 F0 03 F6 | 	mov	ptra, fp
1bd18     B3 00 A0 FD | 	call	#popregs_
1bd1c                 | _jm_spi_spin2_shiftin_ret
1bd1c     2D 00 64 FD | 	ret
1bd20                 | 
1bd20                 | ' 
1bd20                 | ' 
1bd20                 | ' pub shiftout(mode, value, bits)
1bd20                 | _jm_spi_spin2_shiftout
1bd20     02 4C 05 F6 | 	mov	COUNT_, #2
1bd24     A9 00 A0 FD | 	call	#pushregs_
1bd28     3B 8D 02 F6 | 	mov	local01, arg02
1bd2c                 | ' 
1bd2c                 | ' '' Shift data out to a synchronous serial device 
1bd2c                 | ' '' -- mode is bit order: LSBFIRST or MSBFIRST 
1bd2c                 | ' '' -- value is shifted out
1bd2c                 | ' '' -- bits in the number of bits to shift
1bd2c                 | ' 
1bd2c                 | '   if (sdo < 0)                                                  ' abort if do not defined
1bd2c     08 92 05 F1 | 	add	objptr, #8
1bd30     C9 76 02 FB | 	rdlong	arg02, objptr
1bd34     08 92 85 F1 | 	sub	objptr, #8
1bd38     00 76 56 F2 | 	cmps	arg02, #0 wc
1bd3c                 | '     return
1bd3c     80 00 90 CD |  if_b	jmp	#LR__0969
1bd40                 | ' 
1bd40                 | '   if (mode == MSBFIRST)                                         ' flip to output from LSB end
1bd40     01 74 0E F2 | 	cmp	arg01, #1 wz
1bd44                 | '     if (bits < 32)                                              ' adjust alignment if needed
1bd44     20 78 56 A2 |  if_e	cmps	arg03, #32 wc
1bd48                 | '       value <<= (32-bits)      
1bd48     20 74 06 86 |  if_c_and_z	mov	arg01, #32
1bd4c     3C 75 82 81 |  if_c_and_z	sub	arg01, arg03
1bd50     3A 8D 62 80 |  if_c_and_z	shl	local01, arg01
1bd54                 | '     value rev= 31
1bd54     69 8C 62 AD |  if_e	rev	local01
1bd58                 | ' 
1bd58                 | '   wxpin(sdo, %1_00000 | (bits-1))                               ' configure do bits
1bd58     08 92 05 F1 | 	add	objptr, #8
1bd5c     C9 74 02 FB | 	rdlong	arg01, objptr
1bd60     3C 8F 02 F6 | 	mov	local02, arg03
1bd64     01 8E 86 F1 | 	sub	local02, #1
1bd68     20 76 06 F6 | 	mov	arg02, #32
1bd6c     47 77 42 F5 | 	or	arg02, local02
1bd70     3A 77 12 FC | 	wxpin	arg02, arg01
1bd74                 | '   wypin(sdo, value)                                             ' load value
1bd74     3A 8D 22 FC | 	wypin	local01, arg01
1bd78                 | '   pinl(sdo)                                                     ' enable do
1bd78     58 74 62 FD | 	drvl	arg01
1bd7c                 | '   wypin(sck, bits)                                              ' start clocking data
1bd7c     04 92 05 F1 | 	add	objptr, #4
1bd80     C9 74 02 FB | 	rdlong	arg01, objptr
1bd84     3A 79 22 FC | 	wypin	arg03, arg01
1bd88     94 42 9E FE | 	loc	pa,	#(@LR__0968-@LR__0967)
1bd8c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bd90                 | '   repeat until pinr(sck)                                        ' wait for clocking to finish
1bd90                 | LR__0967
1bd90     C9 74 02 FB | 	rdlong	arg01, objptr
1bd94     20 74 CE F7 | 	test	arg01, #32 wz
1bd98     FF 35 02 56 |  if_ne	mov	result1, inb
1bd9c     FE 35 02 A6 |  if_e	mov	result1, ina
1bda0     3A 35 42 F0 | 	shr	result1, arg01
1bda4     06 74 46 F0 | 	shr	arg01, #6
1bda8     3A 35 4A F7 | 	zerox	result1, arg01 wz
1bdac     E0 FF 9F AD |  if_e	jmp	#LR__0967
1bdb0                 | LR__0968
1bdb0                 | '   pinf(sdo)                                                     ' disable do 
1bdb0     04 92 85 F1 | 	sub	objptr, #4
1bdb4     C9 74 02 FB | 	rdlong	arg01, objptr
1bdb8     08 92 85 F1 | 	sub	objptr, #8
1bdbc     50 74 62 FD | 	fltl	arg01
1bdc0                 | LR__0969
1bdc0     A8 F0 03 F6 | 	mov	ptra, fp
1bdc4     B3 00 A0 FD | 	call	#popregs_
1bdc8                 | _jm_spi_spin2_shiftout_ret
1bdc8     2D 00 64 FD | 	ret
1bdcc                 | 
1bdcc                 | ' 
1bdcc                 | ' '' This is not a top-level object
1bdcc                 | ' 
1bdcc                 | ' 
1bdcc                 | ' pub start(a, b, btn, d4x, preset, lo, hi) : result | dif
1bdcc                 | _jm_quadrature_spin2_start
1bdcc     09 4C 05 F6 | 	mov	COUNT_, #9
1bdd0     A9 00 A0 FD | 	call	#pushregs_
1bdd4     3A 8D 02 F6 | 	mov	local01, arg01
1bdd8     3B 8F 02 F6 | 	mov	local02, arg02
1bddc     3C 91 02 F6 | 	mov	local03, arg03
1bde0     3D 93 02 F6 | 	mov	local04, arg04
1bde4     3E 95 02 F6 | 	mov	local05, arg05
1bde8     3F 97 02 F6 | 	mov	local06, arg06
1bdec     40 99 02 F6 | 	mov	local07, arg07
1bdf0                 | ' 
1bdf0                 | ' '' Start the encoder object
1bdf0                 | ' '' -- continuous count mode
1bdf0                 | ' '' -- a & b are encoder inputs (active-low)
1bdf0                 | ' '' -- btn is the button input (active-low, -1 if not used)
1bdf0                 | ' '' -- set d4x to true if each "click" is 4 counts
1bdf0                 | ' '' -- preset is initial value for encoder
1bdf0                 | ' '' -- lo & hi are limit values for encoder
1bdf0                 | ' 
1bdf0                 | '   stop()
1bdf0     B4 00 B0 FD | 	call	#_jm_quadrature_spin2_stop
1bdf4                 | ' 
1bdf4                 | '   dif := b - a
1bdf4     46 8F 8A F1 | 	sub	local02, local01 wz
1bdf8                 | '   if ((dif == 0) or (abs(dif) > 3))                             ' check pins   
1bdf8     47 35 42 56 |  if_ne	abs	result1, local02
1bdfc     04 34 56 52 |  if_ne	cmps	result1, #4 wc
1be00                 | '     result := false
1be00     00 9A 06 B6 |  if_nc_or_z	mov	local08, #0
1be04                 | '   else
1be04     90 00 90 BD |  if_nc_or_z	jmp	#LR__0970
1be08                 | '     apin := a                                                   ' save pins & limits
1be08     C9 8C 62 FC | 	wrlong	local01, objptr
1be0c                 | '     longmove(@btnpin, @btn, 5)
1be0c     04 92 05 F1 | 	add	objptr, #4
1be10     C9 90 62 FC | 	wrlong	local03, objptr
1be14     04 92 05 F1 | 	add	objptr, #4
1be18     C9 92 62 FC | 	wrlong	local04, objptr
1be1c     04 92 05 F1 | 	add	objptr, #4
1be20     C9 94 62 FC | 	wrlong	local05, objptr
1be24     04 92 05 F1 | 	add	objptr, #4
1be28     C9 96 62 FC | 	wrlong	local06, objptr
1be2c     04 92 05 F1 | 	add	objptr, #4
1be30     C9 98 62 FC | 	wrlong	local07, objptr
1be34                 | '     mod4x := (d4x) ? 2 : 0                                      ' fix detent modifier
1be34     00 92 0E F2 | 	cmp	local04, #0 wz
1be38     02 9C 06 56 |  if_ne	mov	local09, #2
1be3c     00 9C 06 A6 |  if_e	mov	local09, #0
1be40     0C 92 85 F1 | 	sub	objptr, #12
1be44     C9 9C 62 FC | 	wrlong	local09, objptr
1be48     08 92 85 F1 | 	sub	objptr, #8
1be4c                 | '     pinstart(apin, P_QUADRATURE | dif.[2..0] << 24, 0, 0)       ' start a/b quadrature mode
1be4c     C9 74 02 FB | 	rdlong	arg01, objptr
1be50     16 76 06 F6 | 	mov	arg02, #22
1be54     07 8E 06 F5 | 	and	local02, #7
1be58     18 8E 66 F0 | 	shl	local02, #24
1be5c     47 77 42 F5 | 	or	arg02, local02
1be60     00 78 06 F6 | 	mov	arg03, #0
1be64     00 7A 06 F6 | 	mov	arg04, #0
1be68     40 74 62 FD | 	dirl	arg01
1be6c     3A 77 02 FC | 	wrpin	arg02, arg01
1be70     3A 01 18 FC | 	wxpin	#0, arg01
1be74     3A 01 28 FC | 	wypin	#0, arg01
1be78     41 74 62 FD | 	dirh	arg01
1be7c                 | '     set(preset)                                                 ' preset encoder value
1be7c     4A 75 02 F6 | 	mov	arg01, local05
1be80     54 00 B0 FD | 	call	#_jm_quadrature_spin2_set
1be84                 | '     result := setup := true
1be84     18 92 05 F1 | 	add	objptr, #24
1be88     FF FF FF FF 
1be8c     C9 FE 6B FC | 	wrlong	##-1, objptr
1be90     18 92 85 F1 | 	sub	objptr, #24
1be94     01 9A 66 F6 | 	neg	local08, #1
1be98                 | LR__0970
1be98     4D 35 02 F6 | 	mov	result1, local08
1be9c     A8 F0 03 F6 | 	mov	ptra, fp
1bea0     B3 00 A0 FD | 	call	#popregs_
1bea4                 | _jm_quadrature_spin2_start_ret
1bea4     2D 00 64 FD | 	ret
1bea8                 | 
1bea8                 | ' 
1bea8                 | ' 
1bea8                 | ' pub stop()
1bea8                 | _jm_quadrature_spin2_stop
1bea8                 | ' 
1bea8                 | ' '' Disable encoder smart pin if previously configured
1bea8                 | ' 
1bea8                 | '   if (setup)
1bea8     18 92 05 F1 | 	add	objptr, #24
1beac     C9 78 0A FB | 	rdlong	arg03, objptr wz
1beb0     18 92 85 F1 | 	sub	objptr, #24
1beb4     1C 00 90 AD |  if_e	jmp	#LR__0971
1beb8                 | '     pinclear(apin)                                              ' disable smart pin
1beb8     C9 74 02 FB | 	rdlong	arg01, objptr
1bebc     50 74 62 FD | 	fltl	arg01
1bec0     3A 01 08 FC | 	wrpin	#0, arg01
1bec4                 | '     longfill(@apin, 0, 7)                                       ' mark disabled
1bec4     C9 74 02 F6 | 	mov	arg01, objptr
1bec8     00 76 06 F6 | 	mov	arg02, #0
1becc     07 78 06 F6 | 	mov	arg03, #7
1bed0     A1 00 A0 FD | 	call	#\builtin_longfill_
1bed4                 | LR__0971
1bed4                 | _jm_quadrature_spin2_stop_ret
1bed4     2D 00 64 FD | 	ret
1bed8                 | 
1bed8                 | ' 
1bed8                 | ' 
1bed8                 | ' pub set(preset) : result
1bed8                 | _jm_quadrature_spin2_set
1bed8     3A 35 02 F6 | 	mov	result1, arg01
1bedc                 | ' 
1bedc                 | ' '' Set encoder to preset value
1bedc                 | ' 
1bedc                 | '   pinfloat(apin)                                                ' reset & clear  
1bedc     C9 74 02 FB | 	rdlong	arg01, objptr
1bee0     50 74 62 FD | 	fltl	arg01
1bee4                 | '   pinlow(apin)                                                  ' re-enable
1bee4     58 74 62 FD | 	drvl	arg01
1bee8                 | '   offset := preset                                              ' set encoder value
1bee8     0C 92 05 F1 | 	add	objptr, #12
1beec     C9 34 62 FC | 	wrlong	result1, objptr
1bef0     0C 92 85 F1 | 	sub	objptr, #12
1bef4                 | '   result := preset
1bef4                 | _jm_quadrature_spin2_set_ret
1bef4     2D 00 64 FD | 	ret
1bef8                 | 
1bef8                 | ' 
1bef8                 | ' 
1bef8                 | ' pub value() : result
1bef8                 | _jm_quadrature_spin2_value
1bef8     01 4C 05 F6 | 	mov	COUNT_, #1
1befc     A9 00 A0 FD | 	call	#pushregs_
1bf00                 | ' 
1bf00                 | ' '' Return encoder value
1bf00                 | ' '' -- returns encoder value turncated to lolimit..hilimit
1bf00                 | ' 
1bf00                 | '   result := raw() + offset                                      ' read and update value
1bf00                 | ' 
1bf00                 | ' '' Returns encoder value w/o offset
1bf00                 | ' '' -- for development & debugging
1bf00                 | ' 
1bf00                 | '   result := rdpin(apin) sar mod4x
1bf00     C9 74 02 FB | 	rdlong	arg01, objptr
1bf04     00 8C 06 F6 | 	mov	local01, #0
1bf08     3A 8D 8A FA | 	rdpin	local01, arg01
1bf0c     08 92 05 F1 | 	add	objptr, #8
1bf10     C9 74 02 FB | 	rdlong	arg01, objptr
1bf14     3A 8D C2 F0 | 	sar	local01, arg01
1bf18     04 92 05 F1 | 	add	objptr, #4
1bf1c     C9 74 02 FB | 	rdlong	arg01, objptr
1bf20     3A 8D 02 F1 | 	add	local01, arg01
1bf24                 | ' 
1bf24                 | '   if (result < lolimit)                                         ' limit range
1bf24     04 92 05 F1 | 	add	objptr, #4
1bf28     C9 74 02 FB | 	rdlong	arg01, objptr
1bf2c     10 92 85 F1 | 	sub	objptr, #16
1bf30     3A 8D 52 F2 | 	cmps	local01, arg01 wc
1bf34     18 00 90 3D |  if_ae	jmp	#LR__0972
1bf38                 | '     result := set(lolimit)
1bf38     10 92 05 F1 | 	add	objptr, #16
1bf3c     C9 74 02 FB | 	rdlong	arg01, objptr
1bf40     10 92 85 F1 | 	sub	objptr, #16
1bf44     90 FF BF FD | 	call	#_jm_quadrature_spin2_set
1bf48     1A 8D 02 F6 | 	mov	local01, result1
1bf4c     28 00 90 FD | 	jmp	#LR__0974
1bf50                 | LR__0972
1bf50                 | '   elseif (result > hilimit)
1bf50     14 92 05 F1 | 	add	objptr, #20
1bf54     C9 74 02 FB | 	rdlong	arg01, objptr
1bf58     14 92 85 F1 | 	sub	objptr, #20
1bf5c     3A 8D 5A F2 | 	cmps	local01, arg01 wcz
1bf60     14 00 90 ED |  if_be	jmp	#LR__0973
1bf64                 | '     result := set(hilimit)
1bf64     14 92 05 F1 | 	add	objptr, #20
1bf68     C9 74 02 FB | 	rdlong	arg01, objptr
1bf6c     14 92 85 F1 | 	sub	objptr, #20
1bf70     64 FF BF FD | 	call	#_jm_quadrature_spin2_set
1bf74     1A 8D 02 F6 | 	mov	local01, result1
1bf78                 | LR__0973
1bf78                 | LR__0974
1bf78     46 35 02 F6 | 	mov	result1, local01
1bf7c     A8 F0 03 F6 | 	mov	ptra, fp
1bf80     B3 00 A0 FD | 	call	#popregs_
1bf84                 | _jm_quadrature_spin2_value_ret
1bf84     2D 00 64 FD | 	ret
1bf88                 | 
1bf88                 | _fatfs_cc_memcmp
1bf88                 | ' 	for (n = size; n > 0; n--)
1bf88                 | LR__0975
1bf88     01 78 16 F2 | 	cmp	arg03, #1 wc
1bf8c     2C 00 90 CD |  if_b	jmp	#LR__0976
1bf90     3A 3B C2 FA | 	rdbyte	_var01, arg01
1bf94     3B 3D C2 FA | 	rdbyte	_var02, arg02
1bf98     1E 3B 0A F2 | 	cmp	_var01, _var02 wz
1bf9c     01 74 06 A1 |  if_e	add	arg01, #1
1bfa0     01 76 06 A1 |  if_e	add	arg02, #1
1bfa4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1bfa4     3A 35 C2 5A |  if_ne	rdbyte	result1, arg01
1bfa8     3B 3D C2 5A |  if_ne	rdbyte	_var02, arg02
1bfac     1E 35 82 51 |  if_ne	sub	result1, _var02
1bfb0     0C 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1bfb4     01 78 86 F1 | 	sub	arg03, #1
1bfb8     CC FF 9F FD | 	jmp	#LR__0975
1bfbc                 | LR__0976
1bfbc                 | ' 
1bfbc                 | ' 	return(0);
1bfbc     00 34 06 F6 | 	mov	result1, #0
1bfc0                 | _fatfs_cc_memcmp_ret
1bfc0     2D 00 64 FD | 	ret
1bfc4                 | 
1bfc4                 | _fatfs_cc_strncmp
1bfc4     3A 3B 0A F6 | 	mov	_var01, arg01 wz
1bfc8     14 00 90 5D |  if_ne	jmp	#LR__0977
1bfcc                 | ' 		return scan2 ? -1 : 0;
1bfcc     00 76 0E F2 | 	cmp	arg02, #0 wz
1bfd0     01 3C 66 56 |  if_ne	neg	_var02, #1
1bfd4     00 3C 06 A6 |  if_e	mov	_var02, #0
1bfd8     1E 35 02 F6 | 	mov	result1, _var02
1bfdc     88 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1bfe0                 | LR__0977
1bfe0     00 76 0E F2 | 	cmp	arg02, #0 wz
1bfe4     01 34 06 A6 |  if_e	mov	result1, #1
1bfe8     7C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bfec     3C 3F 02 F6 | 	mov	_var03, arg03
1bff0     48 40 9E FE | 	loc	pa,	#(@LR__0979-@LR__0978)
1bff4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1bff8                 | ' 	count = n;
1bff8                 | ' 	do {
1bff8                 | LR__0978
1bff8     1D 41 C2 FA | 	rdbyte	_var04, _var01
1bffc     3B 43 02 F6 | 	mov	_var05, arg02
1c000     3B 45 02 F6 | 	mov	_var06, arg02
1c004     01 44 06 F1 | 	add	_var06, #1
1c008     22 77 02 F6 | 	mov	arg02, _var06
1c00c     21 47 C2 FA | 	rdbyte	_var07, _var05
1c010     1F 3D 02 F6 | 	mov	_var02, _var03
1c014     01 3C 86 F1 | 	sub	_var02, #1
1c018     1E 3F 02 F6 | 	mov	_var03, _var02
1c01c     00 3E 56 F2 | 	cmps	_var03, #0 wc
1c020     01 3A 06 F1 | 	add	_var01, #1
1c024     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
1c028     08 00 90 2D |  if_nc_and_z	jmp	#LR__0980
1c02c     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
1c030     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__0978
1c034                 | LR__0979
1c034                 | LR__0980
1c034     00 3E 56 F2 | 	cmps	_var03, #0 wc
1c038                 | ' 		return(0);
1c038     00 34 06 C6 |  if_b	mov	result1, #0
1c03c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1c040     23 41 0A F2 | 	cmp	_var04, _var07 wz
1c044                 | ' 		return(0);
1c044     00 34 06 A6 |  if_e	mov	result1, #0
1c048     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c04c     00 40 0E F2 | 	cmp	_var04, #0 wz
1c050                 | ' 		return(-1);
1c050     01 34 66 A6 |  if_e	neg	result1, #1
1c054     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c058     00 46 0E F2 | 	cmp	_var07, #0 wz
1c05c                 | ' 		return(1);
1c05c     01 34 06 A6 |  if_e	mov	result1, #1
1c060                 | ' 		return(c1 - c2);
1c060     20 35 02 56 |  if_ne	mov	result1, _var04
1c064     23 35 82 51 |  if_ne	sub	result1, _var07
1c068                 | _fatfs_cc_strncmp_ret
1c068     2D 00 64 FD | 	ret
1c06c                 | 
1c06c                 | _fatfs_cc_strchr
1c06c                 | ' #line 16 "C:/flexprop/include/libc/string/strchr.c"
1c06c                 | ' 	while ((c = *s++) != (char) charwanted)
1c06c                 | LR__0981
1c06c     3A 3B 02 F6 | 	mov	_var01, arg01
1c070     1D 3D C2 FA | 	rdbyte	_var02, _var01
1c074     1E 3F E2 F8 | 	getbyte	_var03, _var02, #0
1c078     3B 41 E2 F8 | 	getbyte	_var04, arg02, #0
1c07c     20 3F 0A F2 | 	cmp	_var03, _var04 wz
1c080     01 74 06 F1 | 	add	arg01, #1
1c084     14 00 90 AD |  if_e	jmp	#LR__0982
1c088     1E 3F 02 F6 | 	mov	_var03, _var02
1c08c     07 3E 4E F7 | 	zerox	_var03, #7 wz
1c090     00 34 06 A6 |  if_e	mov	result1, #0
1c094     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1c098     D0 FF 9F FD | 	jmp	#LR__0981
1c09c                 | LR__0982
1c09c                 | ' 	return((char *)--s);
1c09c     01 74 86 F1 | 	sub	arg01, #1
1c0a0     3A 35 02 F6 | 	mov	result1, arg01
1c0a4                 | _fatfs_cc_strchr_ret
1c0a4     2D 00 64 FD | 	ret
1c0a8                 | 
1c0a8                 | _fatfs_cc_disk_initialize
1c0a8     07 4C 05 F6 | 	mov	COUNT_, #7
1c0ac     A9 00 A0 FD | 	call	#pushregs_
1c0b0     40 F0 07 F1 | 	add	ptra, #64
1c0b4     04 50 05 F1 | 	add	fp, #4
1c0b8     A8 74 42 FC | 	wrbyte	arg01, fp
1c0bc     0C 92 05 F1 | 	add	objptr, #12
1c0c0     C9 74 02 FB | 	rdlong	arg01, objptr
1c0c4     2C 50 05 F1 | 	add	fp, #44
1c0c8     A8 74 62 FC | 	wrlong	arg01, fp
1c0cc     04 92 85 F1 | 	sub	objptr, #4
1c0d0     C9 74 02 FB | 	rdlong	arg01, objptr
1c0d4     04 50 05 F1 | 	add	fp, #4
1c0d8     A8 74 62 FC | 	wrlong	arg01, fp
1c0dc     08 92 05 F1 | 	add	objptr, #8
1c0e0     C9 74 02 FB | 	rdlong	arg01, objptr
1c0e4     04 50 05 F1 | 	add	fp, #4
1c0e8     A8 74 62 FC | 	wrlong	arg01, fp
1c0ec     04 92 05 F1 | 	add	objptr, #4
1c0f0     C9 74 02 FB | 	rdlong	arg01, objptr
1c0f4     04 50 05 F1 | 	add	fp, #4
1c0f8     A8 74 62 FC | 	wrlong	arg01, fp
1c0fc     04 92 05 F1 | 	add	objptr, #4
1c100     C9 02 48 FC | 	wrbyte	#1, objptr
1c104     18 92 85 F1 | 	sub	objptr, #24
1c108     38 50 85 F1 | 	sub	fp, #56
1c10c     A8 74 CA FA | 	rdbyte	arg01, fp wz
1c110     04 50 85 F1 | 	sub	fp, #4
1c114                 | ' #line 531 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1c114                 | '             return RES_NOTRDY;
1c114     03 34 06 56 |  if_ne	mov	result1, #3
1c118     20 06 90 5D |  if_ne	jmp	#LR__1001
1c11c     13 00 00 FF 
1c120     10 75 06 F6 | 	mov	arg01, ##10000
1c124     88 93 B0 FD | 	call	#__system___waitus
1c128     30 50 05 F1 | 	add	fp, #48
1c12c     A8 74 02 FB | 	rdlong	arg01, fp
1c130     3A 01 08 FC | 	wrpin	#0, arg01
1c134     04 50 05 F1 | 	add	fp, #4
1c138     A8 74 02 FB | 	rdlong	arg01, fp
1c13c     3A 01 08 FC | 	wrpin	#0, arg01
1c140     04 50 05 F1 | 	add	fp, #4
1c144     A8 74 02 FB | 	rdlong	arg01, fp
1c148     3A 01 08 FC | 	wrpin	#0, arg01
1c14c     04 50 05 F1 | 	add	fp, #4
1c150     A8 74 02 FB | 	rdlong	arg01, fp
1c154     09 00 80 FF 
1c158     3A 01 08 FC | 	wrpin	##4608, arg01
1c15c     0C 50 85 F1 | 	sub	fp, #12
1c160     A8 74 02 FB | 	rdlong	arg01, fp
1c164     59 74 62 FD | 	drvh	arg01
1c168     04 50 05 F1 | 	add	fp, #4
1c16c     A8 74 02 FB | 	rdlong	arg01, fp
1c170     59 74 62 FD | 	drvh	arg01
1c174     04 50 05 F1 | 	add	fp, #4
1c178     A8 74 02 FB | 	rdlong	arg01, fp
1c17c     59 74 62 FD | 	drvh	arg01
1c180     04 50 05 F1 | 	add	fp, #4
1c184     A8 74 02 FB | 	rdlong	arg01, fp
1c188     59 74 62 FD | 	drvh	arg01
1c18c     20 50 85 F1 | 	sub	fp, #32
1c190     00 04 80 FF 
1c194     A8 20 68 FC | 	wrlong	##524304, fp
1c198     04 50 05 F1 | 	add	fp, #4
1c19c     20 03 80 FF 
1c1a0     A8 90 68 FC | 	wrlong	##409672, fp
1c1a4     14 50 05 F1 | 	add	fp, #20
1c1a8     A8 7A 02 FB | 	rdlong	arg04, fp
1c1ac     20 03 00 FF 
1c1b0     48 76 06 F6 | 	mov	arg02, ##409672
1c1b4     10 76 26 F4 | 	bith	arg02, #16
1c1b8     18 50 85 F1 | 	sub	fp, #24
1c1bc     A8 78 02 FB | 	rdlong	arg03, fp
1c1c0     40 7A 62 FD | 	dirl	arg04
1c1c4     3D 77 02 FC | 	wrpin	arg02, arg04
1c1c8     3D 79 12 FC | 	wxpin	arg03, arg04
1c1cc     3D 01 28 FC | 	wypin	#0, arg04
1c1d0     41 7A 62 FD | 	dirh	arg04
1c1d4     1C 50 05 F1 | 	add	fp, #28
1c1d8     A8 8C 02 FB | 	rdlong	local01, fp
1c1dc     46 7B 82 F1 | 	sub	arg04, local01
1c1e0     07 7A 06 F5 | 	and	arg04, #7
1c1e4     18 7A 66 F0 | 	shl	arg04, #24
1c1e8     78 76 06 F6 | 	mov	arg02, #120
1c1ec     3D 77 42 F5 | 	or	arg02, arg04
1c1f0     14 50 85 F1 | 	sub	fp, #20
1c1f4     A8 76 62 FC | 	wrlong	arg02, fp
1c1f8     14 50 05 F1 | 	add	fp, #20
1c1fc     A8 74 02 FB | 	rdlong	arg01, fp
1c200     10 76 26 F4 | 	bith	arg02, #16
1c204     40 74 62 FD | 	dirl	arg01
1c208     3A 77 02 FC | 	wrpin	arg02, arg01
1c20c     3A 3F 18 FC | 	wxpin	#31, arg01
1c210     FF FF FF FF 
1c214     3A FF 2B FC | 	wypin	##-1, arg01
1c218     41 74 62 FD | 	dirh	arg01
1c21c     04 50 85 F1 | 	sub	fp, #4
1c220     A8 76 02 FB | 	rdlong	arg02, fp
1c224     08 50 05 F1 | 	add	fp, #8
1c228     A8 7A 02 FB | 	rdlong	arg04, fp
1c22c     3D 77 82 F1 | 	sub	arg02, arg04
1c230     07 76 06 F5 | 	and	arg02, #7
1c234     18 76 66 F0 | 	shl	arg02, #24
1c238     14 50 85 F1 | 	sub	fp, #20
1c23c     A8 76 62 FC | 	wrlong	arg02, fp
1c240     29 00 00 FF 
1c244     7A 76 46 F5 | 	or	arg02, ##21114
1c248     A8 76 62 FC | 	wrlong	arg02, fp
1c24c     14 50 05 F1 | 	add	fp, #20
1c250     A8 74 02 FB | 	rdlong	arg01, fp
1c254     00 8E 06 F6 | 	mov	local02, #0
1c258     27 78 06 F6 | 	mov	arg03, #39
1c25c     00 7A 06 F6 | 	mov	arg04, #0
1c260     40 74 62 FD | 	dirl	arg01
1c264     3A 77 02 FC | 	wrpin	arg02, arg01
1c268     3A 4F 18 FC | 	wxpin	#39, arg01
1c26c     3A 01 28 FC | 	wypin	#0, arg01
1c270     41 74 62 FD | 	dirh	arg01
1c274     28 50 85 F1 | 	sub	fp, #40
1c278     A8 74 02 F6 | 	mov	arg01, fp
1c27c     14 50 85 F1 | 	sub	fp, #20
1c280     0A 76 06 F6 | 	mov	arg02, #10
1c284     EC 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0405
1c288     00 74 06 F6 | 	mov	arg01, #0
1c28c     00 76 06 F6 | 	mov	arg02, #0
1c290     A0 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c294     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_0415
1c298     64 74 06 F6 | 	mov	arg01, #100
1c29c     10 92 B0 FD | 	call	#__system___waitus
1c2a0     14 50 05 F1 | 	add	fp, #20
1c2a4     A8 74 02 F6 | 	mov	arg01, fp
1c2a8     14 50 85 F1 | 	sub	fp, #20
1c2ac     0A 76 06 F6 | 	mov	arg02, #10
1c2b0     C0 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0405
1c2b4     0C 50 05 F1 | 	add	fp, #12
1c2b8     A8 00 48 FC | 	wrbyte	#0, fp
1c2bc     0C 50 85 F1 | 	sub	fp, #12
1c2c0     00 74 06 F6 | 	mov	arg01, #0
1c2c4     00 76 06 F6 | 	mov	arg02, #0
1c2c8     68 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c2cc     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1c2d0     01 34 0E F2 | 	cmp	result1, #1 wz
1c2d4     F4 03 90 5D |  if_ne	jmp	#LR__1000
1c2d8     08 74 06 F6 | 	mov	arg01, #8
1c2dc     AA 77 06 F6 | 	mov	arg02, #426
1c2e0     50 7E B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c2e4     1A 35 E2 F8 | 	getbyte	result1, result1, #0
1c2e8     01 34 0E F2 | 	cmp	result1, #1 wz
1c2ec     B0 01 90 5D |  if_ne	jmp	#LR__0986
1c2f0     14 50 05 F1 | 	add	fp, #20
1c2f4     A8 74 02 F6 | 	mov	arg01, fp
1c2f8     14 50 85 F1 | 	sub	fp, #20
1c2fc     04 76 06 F6 | 	mov	arg02, #4
1c300     70 7A B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0405
1c304     16 50 05 F1 | 	add	fp, #22
1c308     A8 90 C2 FA | 	rdbyte	local03, fp
1c30c     16 50 85 F1 | 	sub	fp, #22
1c310     01 90 0E F2 | 	cmp	local03, #1 wz
1c314     B4 03 90 5D |  if_ne	jmp	#LR__0999
1c318     17 50 05 F1 | 	add	fp, #23
1c31c     A8 92 C2 FA | 	rdbyte	local04, fp
1c320     17 50 85 F1 | 	sub	fp, #23
1c324     AA 92 0E F2 | 	cmp	local04, #170 wz
1c328     A0 03 90 5D |  if_ne	jmp	#LR__0999
1c32c                 | ' 				for (tmr = 1000; tmr; tmr--) {
1c32c     18 50 05 F1 | 	add	fp, #24
1c330     01 00 80 FF 
1c334     A8 D0 6B FC | 	wrlong	##1000, fp
1c338     18 50 85 F1 | 	sub	fp, #24
1c33c                 | LR__0983
1c33c     18 50 05 F1 | 	add	fp, #24
1c340     A8 92 0A FB | 	rdlong	local04, fp wz
1c344     18 50 85 F1 | 	sub	fp, #24
1c348     44 00 90 AD |  if_e	jmp	#LR__0984
1c34c     1E 94 C6 F9 | 	decod	local05, #30
1c350     A9 74 06 F6 | 	mov	arg01, #169
1c354     1E 76 C6 F9 | 	decod	arg02, #30
1c358     D8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c35c     1A 8F 02 F6 | 	mov	local02, result1
1c360     07 8E 4E F7 | 	zerox	local02, #7 wz
1c364     28 00 90 AD |  if_e	jmp	#LR__0984
1c368     01 00 00 FF 
1c36c     E8 75 06 F6 | 	mov	arg01, ##1000
1c370     3C 91 B0 FD | 	call	#__system___waitus
1c374     18 50 05 F1 | 	add	fp, #24
1c378     A8 96 02 FB | 	rdlong	local06, fp
1c37c     4B 95 02 F6 | 	mov	local05, local06
1c380     01 94 86 F1 | 	sub	local05, #1
1c384     A8 94 62 FC | 	wrlong	local05, fp
1c388     18 50 85 F1 | 	sub	fp, #24
1c38c     AC FF 9F FD | 	jmp	#LR__0983
1c390                 | LR__0984
1c390     18 50 05 F1 | 	add	fp, #24
1c394     A8 90 0A FB | 	rdlong	local03, fp wz
1c398     18 50 85 F1 | 	sub	fp, #24
1c39c     58 00 90 AD |  if_e	jmp	#LR__0985
1c3a0     00 8C 06 F6 | 	mov	local01, #0
1c3a4     3A 74 06 F6 | 	mov	arg01, #58
1c3a8     00 76 06 F6 | 	mov	arg02, #0
1c3ac     84 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c3b0     1A 8F 02 F6 | 	mov	local02, result1
1c3b4     47 93 02 F6 | 	mov	local04, local02
1c3b8     07 92 4E F7 | 	zerox	local04, #7 wz
1c3bc     38 00 90 5D |  if_ne	jmp	#LR__0985
1c3c0     14 50 05 F1 | 	add	fp, #20
1c3c4     A8 74 02 F6 | 	mov	arg01, fp
1c3c8     14 50 85 F1 | 	sub	fp, #20
1c3cc     04 76 06 F6 | 	mov	arg02, #4
1c3d0     A0 79 B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0405
1c3d4     14 50 05 F1 | 	add	fp, #20
1c3d8     A8 92 C2 FA | 	rdbyte	local04, fp
1c3dc     49 99 E2 F8 | 	getbyte	local07, local04, #0
1c3e0     40 98 0E F5 | 	and	local07, #64 wz
1c3e4     0C 90 06 56 |  if_ne	mov	local03, #12
1c3e8     04 90 06 A6 |  if_e	mov	local03, #4
1c3ec     08 50 85 F1 | 	sub	fp, #8
1c3f0     A8 90 42 FC | 	wrbyte	local03, fp
1c3f4     0C 50 85 F1 | 	sub	fp, #12
1c3f8                 | LR__0985
1c3f8     14 90 06 FB | 	rdlong	local03, #20
1c3fc     18 50 05 F1 | 	add	fp, #24
1c400     A8 90 62 FC | 	wrlong	local03, fp
1c404     0C 50 05 F1 | 	add	fp, #12
1c408     A8 90 02 FB | 	rdlong	local03, fp
1c40c     1B 90 26 F4 | 	bith	local03, #27
1c410     A8 90 62 FC | 	wrlong	local03, fp
1c414     0C 50 85 F1 | 	sub	fp, #12
1c418     A8 98 02 FB | 	rdlong	local07, fp
1c41c     18 50 85 F1 | 	sub	fp, #24
1c420     68 78 04 FF 
1c424     81 99 16 F2 | 	cmp	local07, ##150000001 wc
1c428     1C 50 05 C1 |  if_b	add	fp, #28
1c42c     00 01 80 CF 
1c430     A8 08 68 CC |  if_b	wrlong	##131076, fp
1c434     1C 50 85 C1 |  if_b	sub	fp, #28
1c438     90 02 90 CD |  if_b	jmp	#LR__0999
1c43c     18 50 05 F1 | 	add	fp, #24
1c440     A8 98 02 FB | 	rdlong	local07, fp
1c444     18 50 85 F1 | 	sub	fp, #24
1c448     E1 F5 05 FF 
1c44c     01 98 16 F2 | 	cmp	local07, ##200000001 wc
1c450     1C 50 05 C1 |  if_b	add	fp, #28
1c454     00 01 80 CF 
1c458     A8 0A 68 CC |  if_b	wrlong	##131077, fp
1c45c     1C 50 85 C1 |  if_b	sub	fp, #28
1c460     68 02 90 CD |  if_b	jmp	#LR__0999
1c464     18 50 05 F1 | 	add	fp, #24
1c468     A8 98 02 FB | 	rdlong	local07, fp
1c46c     18 50 85 F1 | 	sub	fp, #24
1c470     3B 58 08 FF 
1c474     01 98 16 F2 | 	cmp	local07, ##280000001 wc
1c478     1C 50 05 C1 |  if_b	add	fp, #28
1c47c     00 01 80 CF 
1c480     A8 0C 68 CC |  if_b	wrlong	##131078, fp
1c484     1C 50 85 C1 |  if_b	sub	fp, #28
1c488     40 02 90 CD |  if_b	jmp	#LR__0999
1c48c     1C 50 05 F1 | 	add	fp, #28
1c490     80 01 80 FF 
1c494     A8 10 68 FC | 	wrlong	##196616, fp
1c498     1C 50 85 F1 | 	sub	fp, #28
1c49c     2C 02 90 FD | 	jmp	#LR__0999
1c4a0                 | LR__0986
1c4a0     A9 74 06 F6 | 	mov	arg01, #169
1c4a4     00 76 06 F6 | 	mov	arg02, #0
1c4a8     88 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c4ac     1A 91 E2 F8 | 	getbyte	local03, result1, #0
1c4b0     02 90 16 F2 | 	cmp	local03, #2 wc
1c4b4     18 00 90 3D |  if_ae	jmp	#LR__0987
1c4b8     0C 50 05 F1 | 	add	fp, #12
1c4bc     A8 04 48 FC | 	wrbyte	#2, fp
1c4c0     04 50 05 F1 | 	add	fp, #4
1c4c4     A8 52 49 FC | 	wrbyte	#169, fp
1c4c8     10 50 85 F1 | 	sub	fp, #16
1c4cc     14 00 90 FD | 	jmp	#LR__0988
1c4d0                 | LR__0987
1c4d0     0C 50 05 F1 | 	add	fp, #12
1c4d4     A8 02 48 FC | 	wrbyte	#1, fp
1c4d8     04 50 05 F1 | 	add	fp, #4
1c4dc     A8 02 48 FC | 	wrbyte	#1, fp
1c4e0     10 50 85 F1 | 	sub	fp, #16
1c4e4                 | LR__0988
1c4e4                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c4e4                 | ' 			}
1c4e4                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c4e4     18 50 05 F1 | 	add	fp, #24
1c4e8     01 00 80 FF 
1c4ec     A8 D0 6B FC | 	wrlong	##1000, fp
1c4f0     18 50 85 F1 | 	sub	fp, #24
1c4f4                 | LR__0989
1c4f4     18 50 05 F1 | 	add	fp, #24
1c4f8     A8 92 0A FB | 	rdlong	local04, fp wz
1c4fc     18 50 85 F1 | 	sub	fp, #24
1c500     58 00 90 AD |  if_e	jmp	#LR__0990
1c504     10 50 05 F1 | 	add	fp, #16
1c508     A8 74 C2 FA | 	rdbyte	arg01, fp
1c50c     10 50 85 F1 | 	sub	fp, #16
1c510     00 94 06 F6 | 	mov	local05, #0
1c514     00 76 06 F6 | 	mov	arg02, #0
1c518     18 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c51c     1A 8D 02 F6 | 	mov	local01, result1
1c520     46 8F 02 F6 | 	mov	local02, local01
1c524     07 8E 4E F7 | 	zerox	local02, #7 wz
1c528     30 00 90 AD |  if_e	jmp	#LR__0990
1c52c     01 00 00 FF 
1c530     E8 75 06 F6 | 	mov	arg01, ##1000
1c534     78 8F B0 FD | 	call	#__system___waitus
1c538     18 50 05 F1 | 	add	fp, #24
1c53c     A8 8C 02 FB | 	rdlong	local01, fp
1c540     46 8F 02 F6 | 	mov	local02, local01
1c544     46 97 02 F6 | 	mov	local06, local01
1c548     4B 95 02 F6 | 	mov	local05, local06
1c54c     01 94 86 F1 | 	sub	local05, #1
1c550     A8 94 62 FC | 	wrlong	local05, fp
1c554     18 50 85 F1 | 	sub	fp, #24
1c558     98 FF 9F FD | 	jmp	#LR__0989
1c55c                 | LR__0990
1c55c     18 50 05 F1 | 	add	fp, #24
1c560     A8 98 0A FB | 	rdlong	local07, fp wz
1c564     18 50 85 F1 | 	sub	fp, #24
1c568     20 00 90 AD |  if_e	jmp	#LR__0991
1c56c     09 8C C6 F9 | 	decod	local01, #9
1c570     10 74 06 F6 | 	mov	arg01, #16
1c574     09 76 C6 F9 | 	decod	arg02, #9
1c578     B8 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c57c     1A 8F 02 F6 | 	mov	local02, result1
1c580     47 93 02 F6 | 	mov	local04, local02
1c584     07 92 4E F7 | 	zerox	local04, #7 wz
1c588     0C 00 90 AD |  if_e	jmp	#LR__0992
1c58c                 | LR__0991
1c58c     0C 50 05 F1 | 	add	fp, #12
1c590     A8 00 48 FC | 	wrbyte	#0, fp
1c594     0C 50 85 F1 | 	sub	fp, #12
1c598                 | LR__0992
1c598     14 90 06 FB | 	rdlong	local03, #20
1c59c     18 50 05 F1 | 	add	fp, #24
1c5a0     A8 90 62 FC | 	wrlong	local03, fp
1c5a4     18 50 85 F1 | 	sub	fp, #24
1c5a8     F0 FA 02 FF 
1c5ac     01 91 16 F2 | 	cmp	local03, ##100000001 wc
1c5b0     18 00 90 3D |  if_ae	jmp	#LR__0993
1c5b4     24 50 05 F1 | 	add	fp, #36
1c5b8     A8 90 02 FB | 	rdlong	local03, fp
1c5bc     1B 90 26 F4 | 	bith	local03, #27
1c5c0     A8 90 62 FC | 	wrlong	local03, fp
1c5c4     24 50 85 F1 | 	sub	fp, #36
1c5c8     2C 00 90 FD | 	jmp	#LR__0994
1c5cc                 | LR__0993
1c5cc     18 50 05 F1 | 	add	fp, #24
1c5d0     A8 90 02 FB | 	rdlong	local03, fp
1c5d4     18 50 85 F1 | 	sub	fp, #24
1c5d8     E1 F5 05 FF 
1c5dc     01 90 16 F2 | 	cmp	local03, ##200000001 wc
1c5e0     24 50 05 C1 |  if_b	add	fp, #36
1c5e4     A8 90 02 CB |  if_b	rdlong	local03, fp
1c5e8     80 00 04 CF 
1c5ec     00 90 46 C5 |  if_b	or	local03, ##134283264
1c5f0     A8 90 62 CC |  if_b	wrlong	local03, fp
1c5f4     24 50 85 C1 |  if_b	sub	fp, #36
1c5f8                 | LR__0994
1c5f8     18 50 05 F1 | 	add	fp, #24
1c5fc     A8 90 02 FB | 	rdlong	local03, fp
1c600     18 50 85 F1 | 	sub	fp, #24
1c604     F0 FA 02 FF 
1c608     01 91 16 F2 | 	cmp	local03, ##100000001 wc
1c60c     1C 50 05 C1 |  if_b	add	fp, #28
1c610     00 01 80 CF 
1c614     A8 08 68 CC |  if_b	wrlong	##131076, fp
1c618     1C 50 85 C1 |  if_b	sub	fp, #28
1c61c     AC 00 90 CD |  if_b	jmp	#LR__0998
1c620     18 50 05 F1 | 	add	fp, #24
1c624     A8 90 02 FB | 	rdlong	local03, fp
1c628     18 50 85 F1 | 	sub	fp, #24
1c62c     68 78 04 FF 
1c630     81 91 16 F2 | 	cmp	local03, ##150000001 wc
1c634     1C 50 05 C1 |  if_b	add	fp, #28
1c638     80 01 80 CF 
1c63c     A8 0C 68 CC |  if_b	wrlong	##196614, fp
1c640     1C 50 85 C1 |  if_b	sub	fp, #28
1c644     84 00 90 CD |  if_b	jmp	#LR__0997
1c648     18 50 05 F1 | 	add	fp, #24
1c64c     A8 90 02 FB | 	rdlong	local03, fp
1c650     18 50 85 F1 | 	sub	fp, #24
1c654     E1 F5 05 FF 
1c658     01 90 16 F2 | 	cmp	local03, ##200000001 wc
1c65c     1C 50 05 C1 |  if_b	add	fp, #28
1c660     00 02 80 CF 
1c664     A8 10 68 CC |  if_b	wrlong	##262152, fp
1c668     1C 50 85 C1 |  if_b	sub	fp, #28
1c66c     5C 00 90 CD |  if_b	jmp	#LR__0996
1c670     18 50 05 F1 | 	add	fp, #24
1c674     A8 90 02 FB | 	rdlong	local03, fp
1c678     18 50 85 F1 | 	sub	fp, #24
1c67c     59 73 07 FF 
1c680     81 90 16 F2 | 	cmp	local03, ##250000001 wc
1c684     1C 50 05 C1 |  if_b	add	fp, #28
1c688     80 02 80 CF 
1c68c     A8 14 68 CC |  if_b	wrlong	##327690, fp
1c690     1C 50 85 C1 |  if_b	sub	fp, #28
1c694     34 00 90 CD |  if_b	jmp	#LR__0995
1c698     18 50 05 F1 | 	add	fp, #24
1c69c     A8 90 02 FB | 	rdlong	local03, fp
1c6a0     18 50 85 F1 | 	sub	fp, #24
1c6a4     D1 F0 08 FF 
1c6a8     01 91 16 F2 | 	cmp	local03, ##300000001 wc
1c6ac     1C 50 05 C1 |  if_b	add	fp, #28
1c6b0     00 03 80 CF 
1c6b4     A8 18 68 CC |  if_b	wrlong	##393228, fp
1c6b8     1C 50 85 C1 |  if_b	sub	fp, #28
1c6bc     1C 50 05 31 |  if_ae	add	fp, #28
1c6c0     80 03 80 3F 
1c6c4     A8 1C 68 3C |  if_ae	wrlong	##458766, fp
1c6c8     1C 50 85 31 |  if_ae	sub	fp, #28
1c6cc                 | LR__0995
1c6cc                 | LR__0996
1c6cc                 | LR__0997
1c6cc                 | LR__0998
1c6cc                 | LR__0999
1c6cc                 | LR__1000
1c6cc     0C 50 05 F1 | 	add	fp, #12
1c6d0     A8 90 C2 FA | 	rdbyte	local03, fp
1c6d4     19 92 05 F1 | 	add	objptr, #25
1c6d8     C9 90 42 FC | 	wrbyte	local03, objptr
1c6dc     A8 98 CA FA | 	rdbyte	local07, fp wz
1c6e0     00 90 06 56 |  if_ne	mov	local03, #0
1c6e4     01 90 06 A6 |  if_e	mov	local03, #1
1c6e8     20 50 05 F1 | 	add	fp, #32
1c6ec     A8 90 42 FC | 	wrbyte	local03, fp
1c6f0     A8 90 C2 FA | 	rdbyte	local03, fp
1c6f4     2C 50 85 F1 | 	sub	fp, #44
1c6f8     01 92 85 F1 | 	sub	objptr, #1
1c6fc     C9 90 42 FC | 	wrbyte	local03, objptr
1c700     18 92 85 F1 | 	sub	objptr, #24
1c704     7C 77 B0 FD | 	call	#_fatfs_cc_deselect_0415
1c708     34 50 05 F1 | 	add	fp, #52
1c70c     A8 74 02 FB | 	rdlong	arg01, fp
1c710     18 50 85 F1 | 	sub	fp, #24
1c714     A8 76 02 FB | 	rdlong	arg02, fp
1c718     3A 77 12 FC | 	wxpin	arg02, arg01
1c71c     1C 50 05 F1 | 	add	fp, #28
1c720     A8 74 02 FB | 	rdlong	arg01, fp
1c724     14 50 85 F1 | 	sub	fp, #20
1c728     A8 76 02 FB | 	rdlong	arg02, fp
1c72c     3A 77 02 FC | 	wrpin	arg02, arg01
1c730                 | ' 
1c730                 | ' 		}
1c730                 | ' 	}
1c730                 | ' #line 631 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1c730                 | ' 	CardType = ty;
1c730                 | ' 	s = ty ? 0 :  0x01 ;
1c730                 | ' 	Stat = s;
1c730                 | ' 
1c730                 | ' 	deselect();
1c730                 | ' 
1c730                 | ' 
1c730                 | ' 	_wxpin( PIN_CLK, ck_div );
1c730                 | ' 	_wrpin( PIN_DI, spm_tx );
1c730                 | ' #line 644 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
1c730                 | ' 	return s;
1c730     08 50 05 F1 | 	add	fp, #8
1c734     A8 34 C2 FA | 	rdbyte	result1, fp
1c738     2C 50 85 F1 | 	sub	fp, #44
1c73c                 | LR__1001
1c73c     A8 F0 03 F6 | 	mov	ptra, fp
1c740     B3 00 A0 FD | 	call	#popregs_
1c744                 | _fatfs_cc_disk_initialize_ret
1c744     2D 00 64 FD | 	ret
1c748                 | 
1c748                 | _fatfs_cc_disk_read
1c748     05 4C 05 F6 | 	mov	COUNT_, #5
1c74c     A9 00 A0 FD | 	call	#pushregs_
1c750     3B 8D 02 F6 | 	mov	local01, arg02
1c754     3C 8F 02 F6 | 	mov	local02, arg03
1c758     3D 91 02 F6 | 	mov	local03, arg04
1c75c     00 74 0E F2 | 	cmp	arg01, #0 wz
1c760     01 34 06 56 |  if_ne	mov	result1, #1
1c764                 | ' 
1c764                 | ' 	return Stat;
1c764     18 92 05 A1 |  if_e	add	objptr, #24
1c768     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1c76c     18 92 85 A1 |  if_e	sub	objptr, #24
1c770     01 34 0E F5 | 	and	result1, #1 wz
1c774     03 34 06 56 |  if_ne	mov	result1, #3
1c778     7C 00 90 5D |  if_ne	jmp	#LR__1004
1c77c     19 92 05 F1 | 	add	objptr, #25
1c780     C9 92 C2 FA | 	rdbyte	local04, objptr
1c784     19 92 85 F1 | 	sub	objptr, #25
1c788     08 92 0E F5 | 	and	local04, #8 wz
1c78c     09 8E 66 A0 |  if_e	shl	local02, #9
1c790     02 90 16 F2 | 	cmp	local03, #2 wc
1c794     12 92 06 36 |  if_ae	mov	local04, #18
1c798     11 92 06 C6 |  if_b	mov	local04, #17
1c79c     47 77 02 F6 | 	mov	arg02, local02
1c7a0     49 75 02 F6 | 	mov	arg01, local04
1c7a4     8C 79 B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c7a8     1A 95 02 F6 | 	mov	local05, result1
1c7ac     07 94 4E F7 | 	zerox	local05, #7 wz
1c7b0     30 00 90 5D |  if_ne	jmp	#LR__1003
1c7b4                 | ' 		do {
1c7b4                 | LR__1002
1c7b4     46 75 02 F6 | 	mov	arg01, local01
1c7b8     09 76 C6 F9 | 	decod	arg02, #9
1c7bc     C8 77 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0423
1c7c0     00 34 0E F2 | 	cmp	result1, #0 wz
1c7c4     01 00 00 5F 
1c7c8     00 8C 06 51 |  if_ne	add	local01, ##512
1c7cc     F9 91 6E 5B |  if_ne	djnz	local03, #LR__1002
1c7d0     49 93 E2 F8 | 	getbyte	local04, local04, #0
1c7d4     12 92 0E F2 | 	cmp	local04, #18 wz
1c7d8     0C 74 06 A6 |  if_e	mov	arg01, #12
1c7dc     00 76 06 A6 |  if_e	mov	arg02, #0
1c7e0     50 79 B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0429
1c7e4                 | LR__1003
1c7e4     9C 76 B0 FD | 	call	#_fatfs_cc_deselect_0415
1c7e8                 | ' 	}
1c7e8                 | ' 	deselect();
1c7e8                 | ' 
1c7e8                 | ' 	return count ? RES_ERROR : RES_OK;
1c7e8     00 90 0E F2 | 	cmp	local03, #0 wz
1c7ec     01 94 06 56 |  if_ne	mov	local05, #1
1c7f0     00 94 06 A6 |  if_e	mov	local05, #0
1c7f4     4A 35 02 F6 | 	mov	result1, local05
1c7f8                 | LR__1004
1c7f8     A8 F0 03 F6 | 	mov	ptra, fp
1c7fc     B3 00 A0 FD | 	call	#popregs_
1c800                 | _fatfs_cc_disk_read_ret
1c800     2D 00 64 FD | 	ret
1c804                 | 
1c804                 | _fatfs_cc_disk_write
1c804     06 4C 05 F6 | 	mov	COUNT_, #6
1c808     A9 00 A0 FD | 	call	#pushregs_
1c80c     3A 8D 02 F6 | 	mov	local01, arg01
1c810     3B 8F 02 F6 | 	mov	local02, arg02
1c814     3C 91 02 F6 | 	mov	local03, arg03
1c818     3D 93 02 F6 | 	mov	local04, arg04
1c81c     48 95 02 F6 | 	mov	local05, local03
1c820     46 75 0A F6 | 	mov	arg01, local01 wz
1c824     01 34 06 56 |  if_ne	mov	result1, #1
1c828                 | ' 
1c828                 | ' 	return Stat;
1c828     18 92 05 A1 |  if_e	add	objptr, #24
1c82c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1c830     18 92 85 A1 |  if_e	sub	objptr, #24
1c834     01 34 0E F5 | 	and	result1, #1 wz
1c838     03 34 06 56 |  if_ne	mov	result1, #3
1c83c     C4 00 90 5D |  if_ne	jmp	#LR__1009
1c840     19 92 05 F1 | 	add	objptr, #25
1c844     C9 96 C2 FA | 	rdbyte	local06, objptr
1c848     19 92 85 F1 | 	sub	objptr, #25
1c84c     08 96 CE F7 | 	test	local06, #8 wz
1c850     09 94 66 A0 |  if_e	shl	local05, #9
1c854     01 92 0E F2 | 	cmp	local04, #1 wz
1c858     30 00 90 5D |  if_ne	jmp	#LR__1005
1c85c     18 74 06 F6 | 	mov	arg01, #24
1c860     4A 77 02 F6 | 	mov	arg02, local05
1c864     CC 78 B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c868     1A 97 02 F6 | 	mov	local06, result1
1c86c     07 96 4E F7 | 	zerox	local06, #7 wz
1c870     7C 00 90 5D |  if_ne	jmp	#LR__1008
1c874     47 75 02 F6 | 	mov	arg01, local02
1c878     FE 76 06 F6 | 	mov	arg02, #254
1c87c     E8 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0425
1c880     00 34 4E F2 | 	cmps	result1, #0 wz
1c884     00 92 06 56 |  if_ne	mov	local04, #0
1c888     64 00 90 FD | 	jmp	#LR__1008
1c88c                 | LR__1005
1c88c     19 92 05 F1 | 	add	objptr, #25
1c890     C9 96 C2 FA | 	rdbyte	local06, objptr
1c894     19 92 85 F1 | 	sub	objptr, #25
1c898     06 96 CE F7 | 	test	local06, #6 wz
1c89c     97 74 06 56 |  if_ne	mov	arg01, #151
1c8a0     49 77 02 56 |  if_ne	mov	arg02, local04
1c8a4     8C 78 B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0429
1c8a8     4A 77 02 F6 | 	mov	arg02, local05
1c8ac     19 74 06 F6 | 	mov	arg01, #25
1c8b0     80 78 B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c8b4     1A 97 02 F6 | 	mov	local06, result1
1c8b8     07 96 4E F7 | 	zerox	local06, #7 wz
1c8bc     30 00 90 5D |  if_ne	jmp	#LR__1007
1c8c0                 | ' 			do {
1c8c0                 | LR__1006
1c8c0     47 75 02 F6 | 	mov	arg01, local02
1c8c4     FC 76 06 F6 | 	mov	arg02, #252
1c8c8     9C 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0425
1c8cc     00 34 0E F2 | 	cmp	result1, #0 wz
1c8d0     01 00 00 5F 
1c8d4     00 8E 06 51 |  if_ne	add	local02, ##512
1c8d8     F9 93 6E 5B |  if_ne	djnz	local04, #LR__1006
1c8dc     00 74 06 F6 | 	mov	arg01, #0
1c8e0     FD 76 06 F6 | 	mov	arg02, #253
1c8e4     80 77 B0 FD | 	call	#_fatfs_cc_xmit_datablock_0425
1c8e8     00 34 0E F2 | 	cmp	result1, #0 wz
1c8ec     01 92 06 A6 |  if_e	mov	local04, #1
1c8f0                 | LR__1007
1c8f0                 | LR__1008
1c8f0     90 75 B0 FD | 	call	#_fatfs_cc_deselect_0415
1c8f4                 | ' 				count = 1;
1c8f4                 | ' 		}
1c8f4                 | ' 	}
1c8f4                 | ' 	deselect();
1c8f4                 | ' 
1c8f4                 | ' 	return count ? RES_ERROR : RES_OK;
1c8f4     00 92 0E F2 | 	cmp	local04, #0 wz
1c8f8     01 96 06 56 |  if_ne	mov	local06, #1
1c8fc     00 96 06 A6 |  if_e	mov	local06, #0
1c900     4B 35 02 F6 | 	mov	result1, local06
1c904                 | LR__1009
1c904     A8 F0 03 F6 | 	mov	ptra, fp
1c908     B3 00 A0 FD | 	call	#popregs_
1c90c                 | _fatfs_cc_disk_write_ret
1c90c     2D 00 64 FD | 	ret
1c910                 | 
1c910                 | _fatfs_cc_disk_ioctl
1c910     04 4C 05 F6 | 	mov	COUNT_, #4
1c914     A9 00 A0 FD | 	call	#pushregs_
1c918     30 F0 07 F1 | 	add	ptra, #48
1c91c     04 50 05 F1 | 	add	fp, #4
1c920     A8 74 42 FC | 	wrbyte	arg01, fp
1c924     04 50 05 F1 | 	add	fp, #4
1c928     A8 76 42 FC | 	wrbyte	arg02, fp
1c92c     04 50 05 F1 | 	add	fp, #4
1c930     A8 78 62 FC | 	wrlong	arg03, fp
1c934     08 50 85 F1 | 	sub	fp, #8
1c938     A8 8C C2 FA | 	rdbyte	local01, fp
1c93c     04 50 85 F1 | 	sub	fp, #4
1c940     46 75 0A F6 | 	mov	arg01, local01 wz
1c944     01 34 06 56 |  if_ne	mov	result1, #1
1c948                 | ' 
1c948                 | ' 	return Stat;
1c948     18 92 05 A1 |  if_e	add	objptr, #24
1c94c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1c950     18 92 85 A1 |  if_e	sub	objptr, #24
1c954     1A 8F E2 F8 | 	getbyte	local02, result1, #0
1c958     01 8E CE F7 | 	test	local02, #1 wz
1c95c     03 34 06 56 |  if_ne	mov	result1, #3
1c960     DC 01 90 5D |  if_ne	jmp	#LR__1018
1c964     10 50 05 F1 | 	add	fp, #16
1c968     A8 02 68 FC | 	wrlong	#1, fp
1c96c                 | ' 
1c96c                 | ' 	res = RES_ERROR;
1c96c                 | ' 	switch (ctrl) {
1c96c     08 50 85 F1 | 	sub	fp, #8
1c970     A8 8E C2 FA | 	rdbyte	local02, fp
1c974     08 50 85 F1 | 	sub	fp, #8
1c978     47 91 E2 F8 | 	getbyte	local03, local02, #0
1c97c     04 90 26 F3 | 	fle	local03, #4
1c980     30 90 62 FD | 	jmprel	local03
1c984                 | LR__1010
1c984     10 00 90 FD | 	jmp	#LR__1011
1c988     24 00 90 FD | 	jmp	#LR__1012
1c98c     90 01 90 FD | 	jmp	#LR__1016
1c990     70 01 90 FD | 	jmp	#LR__1015
1c994     88 01 90 FD | 	jmp	#LR__1016
1c998                 | LR__1011
1c998     64 75 B0 FD | 	call	#_fatfs_cc_select_0419
1c99c     00 34 0E F2 | 	cmp	result1, #0 wz
1c9a0     10 50 05 51 |  if_ne	add	fp, #16
1c9a4     A8 00 68 5C |  if_ne	wrlong	#0, fp
1c9a8     10 50 85 51 |  if_ne	sub	fp, #16
1c9ac                 | ' 			break;
1c9ac     80 01 90 FD | 	jmp	#LR__1017
1c9b0                 | LR__1012
1c9b0     09 74 06 F6 | 	mov	arg01, #9
1c9b4     00 76 06 F6 | 	mov	arg02, #0
1c9b8     78 77 B0 FD | 	call	#_fatfs_cc_send_cmd_0429
1c9bc     1A 91 02 F6 | 	mov	local03, result1
1c9c0     07 90 4E F7 | 	zerox	local03, #7 wz
1c9c4     68 01 90 5D |  if_ne	jmp	#LR__1017
1c9c8     18 50 05 F1 | 	add	fp, #24
1c9cc     A8 74 02 F6 | 	mov	arg01, fp
1c9d0     18 50 85 F1 | 	sub	fp, #24
1c9d4     10 76 06 F6 | 	mov	arg02, #16
1c9d8     AC 75 B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0423
1c9dc     00 34 0E F2 | 	cmp	result1, #0 wz
1c9e0     4C 01 90 AD |  if_e	jmp	#LR__1017
1c9e4     18 50 05 F1 | 	add	fp, #24
1c9e8     A8 8C C2 FA | 	rdbyte	local01, fp
1c9ec     18 50 85 F1 | 	sub	fp, #24
1c9f0     06 8C 46 F0 | 	shr	local01, #6
1c9f4     01 8C 0E F2 | 	cmp	local01, #1 wz
1c9f8     54 00 90 5D |  if_ne	jmp	#LR__1013
1c9fc     21 50 05 F1 | 	add	fp, #33
1ca00     A8 90 C2 FA | 	rdbyte	local03, fp
1ca04     01 50 85 F1 | 	sub	fp, #1
1ca08     A8 8E C2 FA | 	rdbyte	local02, fp
1ca0c     47 8F 32 F9 | 	getword	local02, local02, #0
1ca10     08 8E 66 F0 | 	shl	local02, #8
1ca14     47 91 02 F1 | 	add	local03, local02
1ca18     01 50 85 F1 | 	sub	fp, #1
1ca1c     A8 8E C2 FA | 	rdbyte	local02, fp
1ca20     3F 8E 06 F5 | 	and	local02, #63
1ca24     10 8E 66 F0 | 	shl	local02, #16
1ca28     47 91 02 F1 | 	add	local03, local02
1ca2c     01 90 06 F1 | 	add	local03, #1
1ca30     09 50 05 F1 | 	add	fp, #9
1ca34     A8 90 62 FC | 	wrlong	local03, fp
1ca38     1C 50 85 F1 | 	sub	fp, #28
1ca3c     A8 8C 02 FB | 	rdlong	local01, fp
1ca40     0C 50 85 F1 | 	sub	fp, #12
1ca44     0A 90 66 F0 | 	shl	local03, #10
1ca48     46 91 62 FC | 	wrlong	local03, local01
1ca4c     A4 00 90 FD | 	jmp	#LR__1014
1ca50                 | LR__1013
1ca50     1D 50 05 F1 | 	add	fp, #29
1ca54     A8 90 C2 FA | 	rdbyte	local03, fp
1ca58     48 91 42 F8 | 	getnib	local03, local03, #0
1ca5c     05 50 05 F1 | 	add	fp, #5
1ca60     A8 8E C2 FA | 	rdbyte	local02, fp
1ca64     80 8E 06 F5 | 	and	local02, #128
1ca68     07 8E C6 F0 | 	sar	local02, #7
1ca6c     47 91 02 F1 | 	add	local03, local02
1ca70     01 50 85 F1 | 	sub	fp, #1
1ca74     A8 8E C2 FA | 	rdbyte	local02, fp
1ca78     03 8E 06 F5 | 	and	local02, #3
1ca7c     01 8E 66 F0 | 	shl	local02, #1
1ca80     47 91 02 F1 | 	add	local03, local02
1ca84     02 90 06 F1 | 	add	local03, #2
1ca88     0D 50 85 F1 | 	sub	fp, #13
1ca8c     A8 90 42 FC | 	wrbyte	local03, fp
1ca90     0C 50 05 F1 | 	add	fp, #12
1ca94     A8 90 C2 FA | 	rdbyte	local03, fp
1ca98     06 90 46 F0 | 	shr	local03, #6
1ca9c     01 50 85 F1 | 	sub	fp, #1
1caa0     A8 8E C2 FA | 	rdbyte	local02, fp
1caa4     47 8F 32 F9 | 	getword	local02, local02, #0
1caa8     02 8E 66 F0 | 	shl	local02, #2
1caac     47 91 02 F1 | 	add	local03, local02
1cab0     01 50 85 F1 | 	sub	fp, #1
1cab4     A8 8E C2 FA | 	rdbyte	local02, fp
1cab8     03 8E 06 F5 | 	and	local02, #3
1cabc     47 8F 32 F9 | 	getword	local02, local02, #0
1cac0     0A 8E 66 F0 | 	shl	local02, #10
1cac4     47 91 02 F1 | 	add	local03, local02
1cac8     01 90 06 F1 | 	add	local03, #1
1cacc     0A 50 05 F1 | 	add	fp, #10
1cad0     A8 90 62 FC | 	wrlong	local03, fp
1cad4     1C 50 85 F1 | 	sub	fp, #28
1cad8     A8 8C 02 FB | 	rdlong	local01, fp
1cadc     08 50 05 F1 | 	add	fp, #8
1cae0     A8 8E C2 FA | 	rdbyte	local02, fp
1cae4     14 50 85 F1 | 	sub	fp, #20
1cae8     09 8E 86 F1 | 	sub	local02, #9
1caec     47 91 62 F0 | 	shl	local03, local02
1caf0     46 91 62 FC | 	wrlong	local03, local01
1caf4                 | LR__1014
1caf4     10 50 05 F1 | 	add	fp, #16
1caf8     A8 00 68 FC | 	wrlong	#0, fp
1cafc     10 50 85 F1 | 	sub	fp, #16
1cb00                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1cb00                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1cb00                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1cb00                 | ' 				}
1cb00                 | ' 				res = RES_OK;
1cb00                 | ' 			}
1cb00                 | ' 			break;
1cb00     2C 00 90 FD | 	jmp	#LR__1017
1cb04                 | LR__1015
1cb04     0C 50 05 F1 | 	add	fp, #12
1cb08     A8 90 02 FB | 	rdlong	local03, fp
1cb0c     48 01 69 FC | 	wrlong	#128, local03
1cb10     04 50 05 F1 | 	add	fp, #4
1cb14     A8 00 68 FC | 	wrlong	#0, fp
1cb18     10 50 85 F1 | 	sub	fp, #16
1cb1c                 | ' 			*(DWORD*)buff = 128;
1cb1c                 | ' 			res = RES_OK;
1cb1c                 | ' 			break;
1cb1c     10 00 90 FD | 	jmp	#LR__1017
1cb20                 | LR__1016
1cb20     04 92 06 F6 | 	mov	local04, #4
1cb24     10 50 05 F1 | 	add	fp, #16
1cb28     A8 08 68 FC | 	wrlong	#4, fp
1cb2c     10 50 85 F1 | 	sub	fp, #16
1cb30                 | LR__1017
1cb30     50 73 B0 FD | 	call	#_fatfs_cc_deselect_0415
1cb34                 | ' 			res = RES_PARERR;
1cb34                 | ' 	}
1cb34                 | ' 
1cb34                 | ' 	deselect();
1cb34                 | ' 
1cb34                 | ' 	return res;
1cb34     10 50 05 F1 | 	add	fp, #16
1cb38     A8 34 02 FB | 	rdlong	result1, fp
1cb3c     10 50 85 F1 | 	sub	fp, #16
1cb40                 | LR__1018
1cb40     A8 F0 03 F6 | 	mov	ptra, fp
1cb44     B3 00 A0 FD | 	call	#popregs_
1cb48                 | _fatfs_cc_disk_ioctl_ret
1cb48     2D 00 64 FD | 	ret
1cb4c                 | 
1cb4c                 | _fatfs_cc_disk_setpins
1cb4c     00 74 0E F2 | 	cmp	arg01, #0 wz
1cb50     01 34 66 56 |  if_ne	neg	result1, #1
1cb54     28 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1cb58     08 92 05 F1 | 	add	objptr, #8
1cb5c     C9 76 62 FC | 	wrlong	arg02, objptr
1cb60     04 92 05 F1 | 	add	objptr, #4
1cb64     C9 78 62 FC | 	wrlong	arg03, objptr
1cb68     04 92 05 F1 | 	add	objptr, #4
1cb6c     C9 7A 62 FC | 	wrlong	arg04, objptr
1cb70     04 92 05 F1 | 	add	objptr, #4
1cb74     C9 7C 62 FC | 	wrlong	arg05, objptr
1cb78     14 92 85 F1 | 	sub	objptr, #20
1cb7c     00 34 06 F6 | 	mov	result1, #0
1cb80                 | _fatfs_cc_disk_setpins_ret
1cb80     2D 00 64 FD | 	ret
1cb84                 | 
1cb84                 | _fatfs_cc_sync_window
1cb84     03 4C 05 F6 | 	mov	COUNT_, #3
1cb88     A9 00 A0 FD | 	call	#pushregs_
1cb8c     3A 8D 02 F6 | 	mov	local01, arg01
1cb90     00 8E 06 F6 | 	mov	local02, #0
1cb94     03 8C 06 F1 | 	add	local01, #3
1cb98     46 91 CA FA | 	rdbyte	local03, local01 wz
1cb9c     03 8C 86 F1 | 	sub	local01, #3
1cba0     A4 00 90 AD |  if_e	jmp	#LR__1021
1cba4     01 8C 06 F1 | 	add	local01, #1
1cba8     46 75 C2 FA | 	rdbyte	arg01, local01
1cbac     2F 8C 06 F1 | 	add	local01, #47
1cbb0     46 77 02 F6 | 	mov	arg02, local01
1cbb4     04 8C 86 F1 | 	sub	local01, #4
1cbb8     46 79 02 FB | 	rdlong	arg03, local01
1cbbc     2C 8C 86 F1 | 	sub	local01, #44
1cbc0     01 7A 06 F6 | 	mov	arg04, #1
1cbc4     3C FC BF FD | 	call	#_fatfs_cc_disk_write
1cbc8     00 34 0E F2 | 	cmp	result1, #0 wz
1cbcc     74 00 90 5D |  if_ne	jmp	#LR__1019
1cbd0     03 8C 06 F1 | 	add	local01, #3
1cbd4     46 01 48 FC | 	wrbyte	#0, local01
1cbd8     29 8C 06 F1 | 	add	local01, #41
1cbdc     46 91 02 FB | 	rdlong	local03, local01
1cbe0     0C 8C 86 F1 | 	sub	local01, #12
1cbe4     46 35 02 FB | 	rdlong	result1, local01
1cbe8     1A 91 82 F1 | 	sub	local03, result1
1cbec     08 8C 86 F1 | 	sub	local01, #8
1cbf0     46 7B 02 FB | 	rdlong	arg04, local01
1cbf4     18 8C 86 F1 | 	sub	local01, #24
1cbf8     3D 91 12 F2 | 	cmp	local03, arg04 wc
1cbfc     48 00 90 3D |  if_ae	jmp	#LR__1020
1cc00     02 8C 06 F1 | 	add	local01, #2
1cc04     46 91 C2 FA | 	rdbyte	local03, local01
1cc08     02 8C 86 F1 | 	sub	local01, #2
1cc0c     02 90 0E F2 | 	cmp	local03, #2 wz
1cc10     34 00 90 5D |  if_ne	jmp	#LR__1020
1cc14     01 8C 06 F1 | 	add	local01, #1
1cc18     46 75 C2 FA | 	rdbyte	arg01, local01
1cc1c     2F 8C 06 F1 | 	add	local01, #47
1cc20     46 77 02 F6 | 	mov	arg02, local01
1cc24     04 8C 86 F1 | 	sub	local01, #4
1cc28     46 79 02 FB | 	rdlong	arg03, local01
1cc2c     14 8C 86 F1 | 	sub	local01, #20
1cc30     46 91 02 FB | 	rdlong	local03, local01
1cc34     48 79 02 F1 | 	add	arg03, local03
1cc38     01 7A 06 F6 | 	mov	arg04, #1
1cc3c     C4 FB BF FD | 	call	#_fatfs_cc_disk_write
1cc40     04 00 90 FD | 	jmp	#LR__1020
1cc44                 | LR__1019
1cc44     01 8E 06 F6 | 	mov	local02, #1
1cc48                 | LR__1020
1cc48                 | LR__1021
1cc48                 | ' 			res = FR_DISK_ERR;
1cc48                 | ' 		}
1cc48                 | ' 	}
1cc48                 | ' 	return res;
1cc48     47 35 02 F6 | 	mov	result1, local02
1cc4c     A8 F0 03 F6 | 	mov	ptra, fp
1cc50     B3 00 A0 FD | 	call	#popregs_
1cc54                 | _fatfs_cc_sync_window_ret
1cc54     2D 00 64 FD | 	ret
1cc58                 | 
1cc58                 | _fatfs_cc_move_window
1cc58     03 4C 05 F6 | 	mov	COUNT_, #3
1cc5c     A9 00 A0 FD | 	call	#pushregs_
1cc60     3A 8D 02 F6 | 	mov	local01, arg01
1cc64     3B 8F 02 F6 | 	mov	local02, arg02
1cc68     00 90 06 F6 | 	mov	local03, #0
1cc6c     2C 8C 06 F1 | 	add	local01, #44
1cc70     46 75 02 FB | 	rdlong	arg01, local01
1cc74     2C 8C 86 F1 | 	sub	local01, #44
1cc78     3A 8F 0A F2 | 	cmp	local02, arg01 wz
1cc7c     40 00 90 AD |  if_e	jmp	#LR__1023
1cc80     46 75 02 F6 | 	mov	arg01, local01
1cc84     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1cc88     1A 91 0A F6 | 	mov	local03, result1 wz
1cc8c     30 00 90 5D |  if_ne	jmp	#LR__1022
1cc90     01 8C 06 F1 | 	add	local01, #1
1cc94     46 75 C2 FA | 	rdbyte	arg01, local01
1cc98     2F 8C 06 F1 | 	add	local01, #47
1cc9c     46 77 02 F6 | 	mov	arg02, local01
1cca0     47 79 02 F6 | 	mov	arg03, local02
1cca4     01 7A 06 F6 | 	mov	arg04, #1
1cca8     9C FA BF FD | 	call	#_fatfs_cc_disk_read
1ccac     00 34 0E F2 | 	cmp	result1, #0 wz
1ccb0     01 8E 66 56 |  if_ne	neg	local02, #1
1ccb4     01 90 06 56 |  if_ne	mov	local03, #1
1ccb8     04 8C 86 F1 | 	sub	local01, #4
1ccbc     46 8F 62 FC | 	wrlong	local02, local01
1ccc0                 | LR__1022
1ccc0                 | LR__1023
1ccc0                 | ' 				sect = (LBA_t)0 - 1;
1ccc0                 | ' 				res = FR_DISK_ERR;
1ccc0                 | ' 			}
1ccc0                 | ' 			fs->winsect = sect;
1ccc0                 | ' 		}
1ccc0                 | ' 	}
1ccc0                 | ' 	return res;
1ccc0     48 35 02 F6 | 	mov	result1, local03
1ccc4     A8 F0 03 F6 | 	mov	ptra, fp
1ccc8     B3 00 A0 FD | 	call	#popregs_
1cccc                 | _fatfs_cc_move_window_ret
1cccc     2D 00 64 FD | 	ret
1ccd0                 | 
1ccd0                 | _fatfs_cc_sync_fs
1ccd0     07 4C 05 F6 | 	mov	COUNT_, #7
1ccd4     A9 00 A0 FD | 	call	#pushregs_
1ccd8     3A 8D 02 F6 | 	mov	local01, arg01
1ccdc     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1cce0     1A 8F 0A F6 | 	mov	local02, result1 wz
1cce4     F0 00 90 5D |  if_ne	jmp	#LR__1025
1cce8     46 79 C2 FA | 	rdbyte	arg03, local01
1ccec     03 78 0E F2 | 	cmp	arg03, #3 wz
1ccf0     C8 00 90 5D |  if_ne	jmp	#LR__1024
1ccf4     04 8C 06 F1 | 	add	local01, #4
1ccf8     46 79 C2 FA | 	rdbyte	arg03, local01
1ccfc     04 8C 86 F1 | 	sub	local01, #4
1cd00     01 78 0E F2 | 	cmp	arg03, #1 wz
1cd04     B4 00 90 5D |  if_ne	jmp	#LR__1024
1cd08     30 8C 06 F1 | 	add	local01, #48
1cd0c     46 75 02 F6 | 	mov	arg01, local01
1cd10     00 76 06 F6 | 	mov	arg02, #0
1cd14     09 78 C6 F9 | 	decod	arg03, #9
1cd18     3A 91 02 F6 | 	mov	local03, arg01
1cd1c     99 00 A0 FD | 	call	#\builtin_bytefill_
1cd20     46 75 02 F6 | 	mov	arg01, local01
1cd24     FE 75 06 F1 | 	add	arg01, #510
1cd28     55 00 80 FF 
1cd2c     3A AB 58 FC | 	wrword	##43605, arg01
1cd30     A9 B0 A0 FF 
1cd34     46 A5 68 FC | 	wrlong	##1096897106, local01
1cd38     46 75 02 F6 | 	mov	arg01, local01
1cd3c     E4 75 06 F1 | 	add	arg01, #484
1cd40     B9 A0 B0 FF 
1cd44     3A E5 68 FC | 	wrlong	##1631679090, arg01
1cd48     46 75 02 F6 | 	mov	arg01, local01
1cd4c     E8 75 06 F1 | 	add	arg01, #488
1cd50     20 8C 86 F1 | 	sub	local01, #32
1cd54     46 77 02 FB | 	rdlong	arg02, local01
1cd58     3A 77 62 FC | 	wrlong	arg02, arg01
1cd5c     20 8C 06 F1 | 	add	local01, #32
1cd60     46 75 02 F6 | 	mov	arg01, local01
1cd64     EC 75 06 F1 | 	add	arg01, #492
1cd68     24 8C 86 F1 | 	sub	local01, #36
1cd6c     46 77 02 FB | 	rdlong	arg02, local01
1cd70     3A 77 62 FC | 	wrlong	arg02, arg01
1cd74     10 8C 06 F1 | 	add	local01, #16
1cd78     46 93 02 FB | 	rdlong	local04, local01
1cd7c     01 92 06 F1 | 	add	local04, #1
1cd80     10 8C 06 F1 | 	add	local01, #16
1cd84     46 93 62 FC | 	wrlong	local04, local01
1cd88     2B 8C 86 F1 | 	sub	local01, #43
1cd8c     46 75 C2 FA | 	rdbyte	arg01, local01
1cd90     2F 8C 06 F1 | 	add	local01, #47
1cd94     46 95 02 F6 | 	mov	local05, local01
1cd98     01 96 06 F6 | 	mov	local06, #1
1cd9c     4A 77 02 F6 | 	mov	arg02, local05
1cda0     49 79 02 F6 | 	mov	arg03, local04
1cda4     01 7A 06 F6 | 	mov	arg04, #1
1cda8     58 FA BF FD | 	call	#_fatfs_cc_disk_write
1cdac     00 98 06 F6 | 	mov	local07, #0
1cdb0     2C 8C 86 F1 | 	sub	local01, #44
1cdb4     46 01 48 FC | 	wrbyte	#0, local01
1cdb8     04 8C 86 F1 | 	sub	local01, #4
1cdbc                 | LR__1024
1cdbc     01 8C 06 F1 | 	add	local01, #1
1cdc0     46 75 C2 FA | 	rdbyte	arg01, local01
1cdc4     00 76 06 F6 | 	mov	arg02, #0
1cdc8     00 78 06 F6 | 	mov	arg03, #0
1cdcc     40 FB BF FD | 	call	#_fatfs_cc_disk_ioctl
1cdd0     00 34 0E F2 | 	cmp	result1, #0 wz
1cdd4     01 8E 06 56 |  if_ne	mov	local02, #1
1cdd8                 | LR__1025
1cdd8                 | ' 	}
1cdd8                 | ' 
1cdd8                 | ' 	return res;
1cdd8     47 35 02 F6 | 	mov	result1, local02
1cddc     A8 F0 03 F6 | 	mov	ptra, fp
1cde0     B3 00 A0 FD | 	call	#popregs_
1cde4                 | _fatfs_cc_sync_fs_ret
1cde4     2D 00 64 FD | 	ret
1cde8                 | 
1cde8                 | _fatfs_cc_clst2sect
1cde8     02 76 86 F1 | 	sub	arg02, #2
1cdec     14 74 06 F1 | 	add	arg01, #20
1cdf0     3A 3B 02 FB | 	rdlong	_var01, arg01
1cdf4     14 74 86 F1 | 	sub	arg01, #20
1cdf8     02 3A 86 F1 | 	sub	_var01, #2
1cdfc     1D 77 12 F2 | 	cmp	arg02, _var01 wc
1ce00     00 34 06 36 |  if_ae	mov	result1, #0
1ce04     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1ce08     0A 74 06 F1 | 	add	arg01, #10
1ce0c     3A 3B E2 FA | 	rdword	_var01, arg01
1ce10     3B 3B 02 FD | 	qmul	_var01, arg02
1ce14                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1ce14     1E 74 06 F1 | 	add	arg01, #30
1ce18     3A 35 02 FB | 	rdlong	result1, arg01
1ce1c     18 3A 62 FD | 	getqx	_var01
1ce20     1D 35 02 F1 | 	add	result1, _var01
1ce24                 | _fatfs_cc_clst2sect_ret
1ce24     2D 00 64 FD | 	ret
1ce28                 | 
1ce28                 | _fatfs_cc_get_fat
1ce28     09 4C 05 F6 | 	mov	COUNT_, #9
1ce2c     A9 00 A0 FD | 	call	#pushregs_
1ce30     3A 8D 02 F6 | 	mov	local01, arg01
1ce34     3B 8F 02 F6 | 	mov	local02, arg02
1ce38     46 91 02 FB | 	rdlong	local03, local01
1ce3c     02 8E 16 F2 | 	cmp	local02, #2 wc
1ce40     18 00 90 CD |  if_b	jmp	#LR__1026
1ce44     14 90 06 F1 | 	add	local03, #20
1ce48     48 93 02 FB | 	rdlong	local04, local03
1ce4c     14 90 86 F1 | 	sub	local03, #20
1ce50     49 95 02 F6 | 	mov	local05, local04
1ce54     4A 8F 12 F2 | 	cmp	local02, local05 wc
1ce58     08 00 90 CD |  if_b	jmp	#LR__1027
1ce5c                 | LR__1026
1ce5c     01 96 06 F6 | 	mov	local06, #1
1ce60     64 01 90 FD | 	jmp	#LR__1034
1ce64                 | LR__1027
1ce64     01 96 66 F6 | 	neg	local06, #1
1ce68                 | ' 		val = 0xFFFFFFFF;
1ce68                 | ' 
1ce68                 | ' 		switch (fs->fs_type) {
1ce68     48 99 C2 FA | 	rdbyte	local07, local03
1ce6c     01 98 86 F1 | 	sub	local07, #1
1ce70     03 98 26 F3 | 	fle	local07, #3
1ce74     30 98 62 FD | 	jmprel	local07
1ce78                 | LR__1028
1ce78     0C 00 90 FD | 	jmp	#LR__1029
1ce7c     B8 00 90 FD | 	jmp	#LR__1030
1ce80     F8 00 90 FD | 	jmp	#LR__1031
1ce84     3C 01 90 FD | 	jmp	#LR__1032
1ce88                 | LR__1029
1ce88     47 99 02 F6 | 	mov	local07, local02
1ce8c     47 93 02 F6 | 	mov	local04, local02
1ce90     01 92 46 F0 | 	shr	local04, #1
1ce94     49 99 02 F1 | 	add	local07, local04
1ce98     48 75 02 F6 | 	mov	arg01, local03
1ce9c     4C 93 02 F6 | 	mov	local04, local07
1cea0     09 92 46 F0 | 	shr	local04, #9
1cea4     20 90 06 F1 | 	add	local03, #32
1cea8     48 77 02 FB | 	rdlong	arg02, local03
1ceac     20 90 86 F1 | 	sub	local03, #32
1ceb0     49 77 02 F1 | 	add	arg02, local04
1ceb4     A0 FD BF FD | 	call	#_fatfs_cc_move_window
1ceb8     00 34 0E F2 | 	cmp	result1, #0 wz
1cebc     08 01 90 5D |  if_ne	jmp	#LR__1033
1cec0     4C 93 02 F6 | 	mov	local04, local07
1cec4     FF 93 06 F5 | 	and	local04, #511
1cec8     30 90 06 F1 | 	add	local03, #48
1cecc     48 93 02 F1 | 	add	local04, local03
1ced0     49 9B C2 FA | 	rdbyte	local08, local04
1ced4     30 90 86 F1 | 	sub	local03, #48
1ced8     48 75 02 F6 | 	mov	arg01, local03
1cedc     01 98 06 F1 | 	add	local07, #1
1cee0     4C 93 02 F6 | 	mov	local04, local07
1cee4     09 92 46 F0 | 	shr	local04, #9
1cee8     20 90 06 F1 | 	add	local03, #32
1ceec     48 77 02 FB | 	rdlong	arg02, local03
1cef0     20 90 86 F1 | 	sub	local03, #32
1cef4     49 77 02 F1 | 	add	arg02, local04
1cef8     5C FD BF FD | 	call	#_fatfs_cc_move_window
1cefc     00 34 0E F2 | 	cmp	result1, #0 wz
1cf00     C4 00 90 5D |  if_ne	jmp	#LR__1033
1cf04     FF 99 06 F5 | 	and	local07, #511
1cf08     30 90 06 F1 | 	add	local03, #48
1cf0c     48 99 02 F1 | 	add	local07, local03
1cf10     4C 93 C2 FA | 	rdbyte	local04, local07
1cf14     08 92 66 F0 | 	shl	local04, #8
1cf18     49 9B 42 F5 | 	or	local08, local04
1cf1c     01 8E CE F7 | 	test	local02, #1 wz
1cf20     04 9A 46 50 |  if_ne	shr	local08, #4
1cf24     4D 95 02 56 |  if_ne	mov	local05, local08
1cf28     0B 9A 46 A7 |  if_e	zerox	local08, #11
1cf2c     4D 95 02 A6 |  if_e	mov	local05, local08
1cf30     4A 97 02 F6 | 	mov	local06, local05
1cf34                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1cf34                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1cf34                 | ' 			break;
1cf34     90 00 90 FD | 	jmp	#LR__1033
1cf38                 | LR__1030
1cf38     48 75 02 F6 | 	mov	arg01, local03
1cf3c     47 9B 02 F6 | 	mov	local08, local02
1cf40     08 9A 46 F0 | 	shr	local08, #8
1cf44     20 90 06 F1 | 	add	local03, #32
1cf48     48 77 02 FB | 	rdlong	arg02, local03
1cf4c     20 90 86 F1 | 	sub	local03, #32
1cf50     4D 77 02 F1 | 	add	arg02, local08
1cf54     00 FD BF FD | 	call	#_fatfs_cc_move_window
1cf58     00 34 0E F2 | 	cmp	result1, #0 wz
1cf5c     68 00 90 5D |  if_ne	jmp	#LR__1033
1cf60     30 90 06 F1 | 	add	local03, #48
1cf64     01 8E 66 F0 | 	shl	local02, #1
1cf68     FF 8F 06 F5 | 	and	local02, #511
1cf6c     47 91 02 F1 | 	add	local03, local02
1cf70                 | ' {
1cf70                 | ' 
1cf70                 | ' 	return *((WORD*)ptr);
1cf70     48 35 E2 FA | 	rdword	result1, local03
1cf74     1A 97 32 F9 | 	getword	local06, result1, #0
1cf78                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1cf78                 | ' 			break;
1cf78     4C 00 90 FD | 	jmp	#LR__1033
1cf7c                 | LR__1031
1cf7c     48 75 02 F6 | 	mov	arg01, local03
1cf80     47 9D 02 F6 | 	mov	local09, local02
1cf84     07 9C 46 F0 | 	shr	local09, #7
1cf88     20 90 06 F1 | 	add	local03, #32
1cf8c     48 77 02 FB | 	rdlong	arg02, local03
1cf90     20 90 86 F1 | 	sub	local03, #32
1cf94     4E 77 02 F1 | 	add	arg02, local09
1cf98     BC FC BF FD | 	call	#_fatfs_cc_move_window
1cf9c     00 34 0E F2 | 	cmp	result1, #0 wz
1cfa0     24 00 90 5D |  if_ne	jmp	#LR__1033
1cfa4     30 90 06 F1 | 	add	local03, #48
1cfa8     48 75 02 F6 | 	mov	arg01, local03
1cfac     02 8E 66 F0 | 	shl	local02, #2
1cfb0     FF 8F 06 F5 | 	and	local02, #511
1cfb4     47 75 02 F1 | 	add	arg01, local02
1cfb8                 | ' {
1cfb8                 | ' 
1cfb8                 | ' 	return *((DWORD*)ptr);
1cfb8     3A 97 02 FB | 	rdlong	local06, arg01
1cfbc     7C 96 06 F4 | 	bitl	local06, #124
1cfc0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1cfc0                 | ' 			break;
1cfc0     04 00 90 FD | 	jmp	#LR__1033
1cfc4                 | LR__1032
1cfc4     01 96 06 F6 | 	mov	local06, #1
1cfc8                 | LR__1033
1cfc8                 | LR__1034
1cfc8                 | ' 			val = 1;
1cfc8                 | ' 		}
1cfc8                 | ' 	}
1cfc8                 | ' 
1cfc8                 | ' 	return val;
1cfc8     4B 35 02 F6 | 	mov	result1, local06
1cfcc     A8 F0 03 F6 | 	mov	ptra, fp
1cfd0     B3 00 A0 FD | 	call	#popregs_
1cfd4                 | _fatfs_cc_get_fat_ret
1cfd4     2D 00 64 FD | 	ret
1cfd8                 | 
1cfd8                 | _fatfs_cc_put_fat
1cfd8     0F 4C 05 F6 | 	mov	COUNT_, #15
1cfdc     A9 00 A0 FD | 	call	#pushregs_
1cfe0     3A 8D 02 F6 | 	mov	local01, arg01
1cfe4     3B 8F 02 F6 | 	mov	local02, arg02
1cfe8     3C 91 02 F6 | 	mov	local03, arg03
1cfec     02 92 06 F6 | 	mov	local04, #2
1cff0     02 8E 16 F2 | 	cmp	local02, #2 wc
1cff4     8C 02 90 CD |  if_b	jmp	#LR__1043
1cff8     14 8C 06 F1 | 	add	local01, #20
1cffc     46 95 02 FB | 	rdlong	local05, local01
1d000     14 8C 86 F1 | 	sub	local01, #20
1d004     4A 97 02 F6 | 	mov	local06, local05
1d008     4B 8F 12 F2 | 	cmp	local02, local06 wc
1d00c     74 02 90 3D |  if_ae	jmp	#LR__1043
1d010                 | ' 		switch (fs->fs_type) {
1d010     46 99 C2 FA | 	rdbyte	local07, local01
1d014     01 98 86 F1 | 	sub	local07, #1
1d018     03 98 26 F3 | 	fle	local07, #3
1d01c     30 98 62 FD | 	jmprel	local07
1d020                 | LR__1035
1d020     0C 00 90 FD | 	jmp	#LR__1036
1d024     3C 01 90 FD | 	jmp	#LR__1040
1d028     B4 01 90 FD | 	jmp	#LR__1041
1d02c     54 02 90 FD | 	jmp	#LR__1042
1d030                 | LR__1036
1d030     47 9B 02 F6 | 	mov	local08, local02
1d034     47 95 02 F6 | 	mov	local05, local02
1d038     01 94 46 F0 | 	shr	local05, #1
1d03c     4A 9B 02 F1 | 	add	local08, local05
1d040     46 75 02 F6 | 	mov	arg01, local01
1d044     4D 9D 02 F6 | 	mov	local09, local08
1d048     09 9C 46 F0 | 	shr	local09, #9
1d04c     20 8C 06 F1 | 	add	local01, #32
1d050     46 9F 02 FB | 	rdlong	local10, local01
1d054     20 8C 86 F1 | 	sub	local01, #32
1d058     4F A1 02 F6 | 	mov	local11, local10
1d05c     4E A1 02 F1 | 	add	local11, local09
1d060     50 95 02 F6 | 	mov	local05, local11
1d064     4A 77 02 F6 | 	mov	arg02, local05
1d068     EC FB BF FD | 	call	#_fatfs_cc_move_window
1d06c     1A 97 02 F6 | 	mov	local06, result1
1d070     4B 93 0A F6 | 	mov	local04, local06 wz
1d074     0C 02 90 5D |  if_ne	jmp	#LR__1042
1d078     30 8C 06 F1 | 	add	local01, #48
1d07c     46 A3 02 F6 | 	mov	local12, local01
1d080     4D A5 02 F6 | 	mov	local13, local08
1d084     FF A5 06 F5 | 	and	local13, #511
1d088     52 A3 02 F1 | 	add	local12, local13
1d08c     01 8E CE F7 | 	test	local02, #1 wz
1d090     30 8C 86 F1 | 	sub	local01, #48
1d094     01 9A 06 F1 | 	add	local08, #1
1d098     18 00 90 AD |  if_e	jmp	#LR__1037
1d09c     51 97 C2 FA | 	rdbyte	local06, local12
1d0a0     4B 97 42 F8 | 	getnib	local06, local06, #0
1d0a4     48 9D E2 F8 | 	getbyte	local09, local03, #0
1d0a8     04 9C 66 F0 | 	shl	local09, #4
1d0ac     4E 97 42 F5 | 	or	local06, local09
1d0b0     04 00 90 FD | 	jmp	#LR__1038
1d0b4                 | LR__1037
1d0b4     48 97 02 F6 | 	mov	local06, local03
1d0b8                 | LR__1038
1d0b8     51 97 42 FC | 	wrbyte	local06, local12
1d0bc     03 8C 06 F1 | 	add	local01, #3
1d0c0     46 03 48 FC | 	wrbyte	#1, local01
1d0c4     03 8C 86 F1 | 	sub	local01, #3
1d0c8     46 75 02 F6 | 	mov	arg01, local01
1d0cc     4D 9D 02 F6 | 	mov	local09, local08
1d0d0     09 9C 46 F0 | 	shr	local09, #9
1d0d4     20 8C 06 F1 | 	add	local01, #32
1d0d8     46 9F 02 FB | 	rdlong	local10, local01
1d0dc     20 8C 86 F1 | 	sub	local01, #32
1d0e0     4F A1 02 F6 | 	mov	local11, local10
1d0e4     4E A1 02 F1 | 	add	local11, local09
1d0e8     50 95 02 F6 | 	mov	local05, local11
1d0ec     4A 77 02 F6 | 	mov	arg02, local05
1d0f0     64 FB BF FD | 	call	#_fatfs_cc_move_window
1d0f4     1A 97 02 F6 | 	mov	local06, result1
1d0f8     4B 93 0A F6 | 	mov	local04, local06 wz
1d0fc     84 01 90 5D |  if_ne	jmp	#LR__1042
1d100     30 8C 06 F1 | 	add	local01, #48
1d104     46 A3 02 F6 | 	mov	local12, local01
1d108     4D A1 02 F6 | 	mov	local11, local08
1d10c     FF A1 06 F5 | 	and	local11, #511
1d110     50 9D 02 F6 | 	mov	local09, local11
1d114     50 A3 02 F1 | 	add	local12, local11
1d118     47 95 02 F6 | 	mov	local05, local02
1d11c     01 94 0E F5 | 	and	local05, #1 wz
1d120     30 8C 86 F1 | 	sub	local01, #48
1d124     48 A1 02 56 |  if_ne	mov	local11, local03
1d128     04 A0 46 50 |  if_ne	shr	local11, #4
1d12c     50 97 02 56 |  if_ne	mov	local06, local11
1d130     18 00 90 5D |  if_ne	jmp	#LR__1039
1d134     51 9D C2 FA | 	rdbyte	local09, local12
1d138     F0 9C 06 F5 | 	and	local09, #240
1d13c     48 9F EA F8 | 	getbyte	local10, local03, #1
1d140     4F 9F 42 F8 | 	getnib	local10, local10, #0
1d144     4F 9D 42 F5 | 	or	local09, local10
1d148     4E 97 02 F6 | 	mov	local06, local09
1d14c                 | LR__1039
1d14c     51 97 42 FC | 	wrbyte	local06, local12
1d150     01 96 06 F6 | 	mov	local06, #1
1d154     03 8C 06 F1 | 	add	local01, #3
1d158     46 03 48 FC | 	wrbyte	#1, local01
1d15c     03 8C 86 F1 | 	sub	local01, #3
1d160                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1d160                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1d160                 | ' 			fs->wflag = 1;
1d160                 | ' 			break;
1d160     20 01 90 FD | 	jmp	#LR__1042
1d164                 | LR__1040
1d164     46 75 02 F6 | 	mov	arg01, local01
1d168     47 9D 02 F6 | 	mov	local09, local02
1d16c     08 9C 46 F0 | 	shr	local09, #8
1d170     20 8C 06 F1 | 	add	local01, #32
1d174     46 9F 02 FB | 	rdlong	local10, local01
1d178     20 8C 86 F1 | 	sub	local01, #32
1d17c     4F A1 02 F6 | 	mov	local11, local10
1d180     4E A1 02 F1 | 	add	local11, local09
1d184     50 95 02 F6 | 	mov	local05, local11
1d188     4A 77 02 F6 | 	mov	arg02, local05
1d18c     C8 FA BF FD | 	call	#_fatfs_cc_move_window
1d190     1A 97 02 F6 | 	mov	local06, result1
1d194     4B 93 0A F6 | 	mov	local04, local06 wz
1d198     E8 00 90 5D |  if_ne	jmp	#LR__1042
1d19c     30 8C 06 F1 | 	add	local01, #48
1d1a0     46 A1 02 F6 | 	mov	local11, local01
1d1a4     47 9D 02 F6 | 	mov	local09, local02
1d1a8     01 9C 66 F0 | 	shl	local09, #1
1d1ac     4E 9F 02 F6 | 	mov	local10, local09
1d1b0     FF 9F 06 F5 | 	and	local10, #511
1d1b4     4F A5 02 F6 | 	mov	local13, local10
1d1b8     50 75 02 F6 | 	mov	arg01, local11
1d1bc     52 75 02 F1 | 	add	arg01, local13
1d1c0     48 95 02 F6 | 	mov	local05, local03
1d1c4     4A 77 02 F6 | 	mov	arg02, local05
1d1c8     3A 77 52 FC | 	wrword	arg02, arg01
1d1cc     01 96 06 F6 | 	mov	local06, #1
1d1d0     2D 8C 86 F1 | 	sub	local01, #45
1d1d4     46 03 48 FC | 	wrbyte	#1, local01
1d1d8     03 8C 86 F1 | 	sub	local01, #3
1d1dc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1d1dc                 | ' 			fs->wflag = 1;
1d1dc                 | ' 			break;
1d1dc     A4 00 90 FD | 	jmp	#LR__1042
1d1e0                 | LR__1041
1d1e0     46 75 02 F6 | 	mov	arg01, local01
1d1e4     47 9D 02 F6 | 	mov	local09, local02
1d1e8     07 9C 46 F0 | 	shr	local09, #7
1d1ec     20 8C 06 F1 | 	add	local01, #32
1d1f0     46 9F 02 FB | 	rdlong	local10, local01
1d1f4     20 8C 86 F1 | 	sub	local01, #32
1d1f8     4F A1 02 F6 | 	mov	local11, local10
1d1fc     4E A1 02 F1 | 	add	local11, local09
1d200     50 95 02 F6 | 	mov	local05, local11
1d204     4A 77 02 F6 | 	mov	arg02, local05
1d208     4C FA BF FD | 	call	#_fatfs_cc_move_window
1d20c     1A 97 02 F6 | 	mov	local06, result1
1d210     4B 93 0A F6 | 	mov	local04, local06 wz
1d214     6C 00 90 5D |  if_ne	jmp	#LR__1042
1d218     7C 90 06 F4 | 	bitl	local03, #124
1d21c     30 8C 06 F1 | 	add	local01, #48
1d220     46 75 02 F6 | 	mov	arg01, local01
1d224     47 A7 02 F6 | 	mov	local14, local02
1d228     02 A6 66 F0 | 	shl	local14, #2
1d22c     FF A7 06 F5 | 	and	local14, #511
1d230     53 A9 02 F6 | 	mov	local15, local14
1d234     53 75 02 F1 | 	add	arg01, local14
1d238                 | ' {
1d238                 | ' 
1d238                 | ' 	return *((DWORD*)ptr);
1d238     3A 35 02 FB | 	rdlong	result1, arg01
1d23c     00 00 78 FF 
1d240     00 34 06 F5 | 	and	result1, ##-268435456
1d244     1A 91 42 F5 | 	or	local03, result1
1d248     46 A1 02 F6 | 	mov	local11, local01
1d24c     47 9D 02 F6 | 	mov	local09, local02
1d250     02 9C 66 F0 | 	shl	local09, #2
1d254     4E 9F 02 F6 | 	mov	local10, local09
1d258     FF 9F 06 F5 | 	and	local10, #511
1d25c     4F A5 02 F6 | 	mov	local13, local10
1d260     50 75 02 F6 | 	mov	arg01, local11
1d264     52 75 02 F1 | 	add	arg01, local13
1d268     48 95 02 F6 | 	mov	local05, local03
1d26c     4A 77 02 F6 | 	mov	arg02, local05
1d270     3A 77 62 FC | 	wrlong	arg02, arg01
1d274     01 96 06 F6 | 	mov	local06, #1
1d278     2D 8C 86 F1 | 	sub	local01, #45
1d27c     46 03 48 FC | 	wrbyte	#1, local01
1d280     03 8C 86 F1 | 	sub	local01, #3
1d284                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1d284                 | ' 			}
1d284                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1d284                 | ' 			fs->wflag = 1;
1d284                 | ' 			break;
1d284                 | LR__1042
1d284                 | LR__1043
1d284                 | ' 		}
1d284                 | ' 	}
1d284                 | ' 	return res;
1d284     49 35 02 F6 | 	mov	result1, local04
1d288     A8 F0 03 F6 | 	mov	ptra, fp
1d28c     B3 00 A0 FD | 	call	#popregs_
1d290                 | _fatfs_cc_put_fat_ret
1d290     2D 00 64 FD | 	ret
1d294                 | 
1d294                 | _fatfs_cc_remove_chain
1d294     06 4C 05 F6 | 	mov	COUNT_, #6
1d298     A9 00 A0 FD | 	call	#pushregs_
1d29c     3A 8D 02 F6 | 	mov	local01, arg01
1d2a0     3B 8F 02 F6 | 	mov	local02, arg02
1d2a4     3C 91 02 F6 | 	mov	local03, arg03
1d2a8     46 93 02 FB | 	rdlong	local04, local01
1d2ac     02 8E 16 F2 | 	cmp	local02, #2 wc
1d2b0     14 00 90 CD |  if_b	jmp	#LR__1044
1d2b4     14 92 06 F1 | 	add	local04, #20
1d2b8     49 35 02 FB | 	rdlong	result1, local04
1d2bc     14 92 86 F1 | 	sub	local04, #20
1d2c0     1A 8F 12 F2 | 	cmp	local02, result1 wc
1d2c4     08 00 90 CD |  if_b	jmp	#LR__1045
1d2c8                 | LR__1044
1d2c8     02 34 06 F6 | 	mov	result1, #2
1d2cc     D0 00 90 FD | 	jmp	#LR__1050
1d2d0                 | LR__1045
1d2d0     00 90 0E F2 | 	cmp	local03, #0 wz
1d2d4     1C 00 90 AD |  if_e	jmp	#LR__1046
1d2d8     49 75 02 F6 | 	mov	arg01, local04
1d2dc     48 77 02 F6 | 	mov	arg02, local03
1d2e0     01 78 66 F6 | 	neg	arg03, #1
1d2e4     F0 FC BF FD | 	call	#_fatfs_cc_put_fat
1d2e8     1A 95 0A F6 | 	mov	local05, result1 wz
1d2ec     4A 35 02 56 |  if_ne	mov	result1, local05
1d2f0     AC 00 90 5D |  if_ne	jmp	#LR__1050
1d2f4                 | LR__1046
1d2f4                 | ' 	}
1d2f4                 | ' 
1d2f4                 | ' 
1d2f4                 | ' 	do {
1d2f4                 | LR__1047
1d2f4     47 77 02 F6 | 	mov	arg02, local02
1d2f8     46 75 02 F6 | 	mov	arg01, local01
1d2fc     28 FB BF FD | 	call	#_fatfs_cc_get_fat
1d300     1A 97 0A F6 | 	mov	local06, result1 wz
1d304     94 00 90 AD |  if_e	jmp	#LR__1049
1d308     01 96 0E F2 | 	cmp	local06, #1 wz
1d30c     02 34 06 A6 |  if_e	mov	result1, #2
1d310     8C 00 90 AD |  if_e	jmp	#LR__1050
1d314     FF FF 7F FF 
1d318     FF 97 0E F2 | 	cmp	local06, ##-1 wz
1d31c     01 34 06 A6 |  if_e	mov	result1, #1
1d320     7C 00 90 AD |  if_e	jmp	#LR__1050
1d324     47 77 02 F6 | 	mov	arg02, local02
1d328     49 75 02 F6 | 	mov	arg01, local04
1d32c     00 78 06 F6 | 	mov	arg03, #0
1d330     A4 FC BF FD | 	call	#_fatfs_cc_put_fat
1d334     1A 95 0A F6 | 	mov	local05, result1 wz
1d338     4A 35 02 56 |  if_ne	mov	result1, local05
1d33c     60 00 90 5D |  if_ne	jmp	#LR__1050
1d340     14 92 06 F1 | 	add	local04, #20
1d344     49 95 02 FB | 	rdlong	local05, local04
1d348     02 94 86 F1 | 	sub	local05, #2
1d34c     04 92 86 F1 | 	sub	local04, #4
1d350     49 91 02 FB | 	rdlong	local03, local04
1d354     10 92 86 F1 | 	sub	local04, #16
1d358     4A 91 12 F2 | 	cmp	local03, local05 wc
1d35c     24 00 90 3D |  if_ae	jmp	#LR__1048
1d360     10 92 06 F1 | 	add	local04, #16
1d364     49 95 02 FB | 	rdlong	local05, local04
1d368     01 94 06 F1 | 	add	local05, #1
1d36c     49 95 62 FC | 	wrlong	local05, local04
1d370     0C 92 86 F1 | 	sub	local04, #12
1d374     49 95 C2 FA | 	rdbyte	local05, local04
1d378     01 94 46 F5 | 	or	local05, #1
1d37c     49 95 42 FC | 	wrbyte	local05, local04
1d380     04 92 86 F1 | 	sub	local04, #4
1d384                 | LR__1048
1d384     4B 8F 02 F6 | 	mov	local02, local06
1d388     14 92 06 F1 | 	add	local04, #20
1d38c     49 95 02 FB | 	rdlong	local05, local04
1d390     14 92 86 F1 | 	sub	local04, #20
1d394     4A 8F 12 F2 | 	cmp	local02, local05 wc
1d398     58 FF 9F CD |  if_b	jmp	#LR__1047
1d39c                 | LR__1049
1d39c                 | ' #line 1500 "ff.c"
1d39c                 | ' 	return FR_OK;
1d39c     00 34 06 F6 | 	mov	result1, #0
1d3a0                 | LR__1050
1d3a0     A8 F0 03 F6 | 	mov	ptra, fp
1d3a4     B3 00 A0 FD | 	call	#popregs_
1d3a8                 | _fatfs_cc_remove_chain_ret
1d3a8     2D 00 64 FD | 	ret
1d3ac                 | 
1d3ac                 | _fatfs_cc_create_chain
1d3ac     0A 4C 05 F6 | 	mov	COUNT_, #10
1d3b0     A9 00 A0 FD | 	call	#pushregs_
1d3b4     3A 8D 02 F6 | 	mov	local01, arg01
1d3b8     3B 8F 0A F6 | 	mov	local02, arg02 wz
1d3bc     46 91 02 FB | 	rdlong	local03, local01
1d3c0     28 00 90 5D |  if_ne	jmp	#LR__1051
1d3c4     0C 90 06 F1 | 	add	local03, #12
1d3c8     48 93 0A FB | 	rdlong	local04, local03 wz
1d3cc     0C 90 86 F1 | 	sub	local03, #12
1d3d0     14 90 06 51 |  if_ne	add	local03, #20
1d3d4     48 95 02 5B |  if_ne	rdlong	local05, local03
1d3d8     14 90 86 51 |  if_ne	sub	local03, #20
1d3dc     4A 93 12 52 |  if_ne	cmp	local04, local05 wc
1d3e0     50 00 90 4D |  if_c_and_nz	jmp	#LR__1052
1d3e4     01 92 06 F6 | 	mov	local04, #1
1d3e8     48 00 90 FD | 	jmp	#LR__1052
1d3ec                 | LR__1051
1d3ec     47 77 02 F6 | 	mov	arg02, local02
1d3f0     46 75 02 F6 | 	mov	arg01, local01
1d3f4     30 FA BF FD | 	call	#_fatfs_cc_get_fat
1d3f8     1A 97 02 F6 | 	mov	local06, result1
1d3fc     02 96 16 F2 | 	cmp	local06, #2 wc
1d400     01 34 06 C6 |  if_b	mov	result1, #1
1d404     C8 01 90 CD |  if_b	jmp	#LR__1062
1d408     FF FF 7F FF 
1d40c     FF 97 0E F2 | 	cmp	local06, ##-1 wz
1d410     4B 35 02 A6 |  if_e	mov	result1, local06
1d414     B8 01 90 AD |  if_e	jmp	#LR__1062
1d418     14 90 06 F1 | 	add	local03, #20
1d41c     48 95 02 FB | 	rdlong	local05, local03
1d420     14 90 86 F1 | 	sub	local03, #20
1d424     4A 97 12 F2 | 	cmp	local06, local05 wc
1d428     4B 35 02 C6 |  if_b	mov	result1, local06
1d42c     A0 01 90 CD |  if_b	jmp	#LR__1062
1d430     47 93 02 F6 | 	mov	local04, local02
1d434                 | LR__1052
1d434     10 90 06 F1 | 	add	local03, #16
1d438     48 95 0A FB | 	rdlong	local05, local03 wz
1d43c     10 90 86 F1 | 	sub	local03, #16
1d440     00 34 06 A6 |  if_e	mov	result1, #0
1d444     88 01 90 AD |  if_e	jmp	#LR__1062
1d448     00 98 06 F6 | 	mov	local07, #0
1d44c     47 93 0A F2 | 	cmp	local04, local02 wz
1d450     74 00 90 5D |  if_ne	jmp	#LR__1055
1d454     49 99 02 F6 | 	mov	local07, local04
1d458     01 98 06 F1 | 	add	local07, #1
1d45c     14 90 06 F1 | 	add	local03, #20
1d460     48 95 02 FB | 	rdlong	local05, local03
1d464     14 90 86 F1 | 	sub	local03, #20
1d468     4A 99 12 F2 | 	cmp	local07, local05 wc
1d46c     02 98 06 36 |  if_ae	mov	local07, #2
1d470     4C 77 02 F6 | 	mov	arg02, local07
1d474     46 75 02 F6 | 	mov	arg01, local01
1d478     AC F9 BF FD | 	call	#_fatfs_cc_get_fat
1d47c     1A 97 02 F6 | 	mov	local06, result1
1d480     01 96 0E F2 | 	cmp	local06, #1 wz
1d484     FF FF 7F 5F 
1d488     FF 97 0E 52 |  if_ne	cmp	local06, ##-1 wz
1d48c     4B 35 02 A6 |  if_e	mov	result1, local06
1d490     3C 01 90 AD |  if_e	jmp	#LR__1062
1d494     00 96 0E F2 | 	cmp	local06, #0 wz
1d498     2C 00 90 AD |  if_e	jmp	#LR__1054
1d49c     0C 90 06 F1 | 	add	local03, #12
1d4a0     48 97 02 FB | 	rdlong	local06, local03
1d4a4     0C 90 86 F1 | 	sub	local03, #12
1d4a8     02 96 16 F2 | 	cmp	local06, #2 wc
1d4ac     14 00 90 CD |  if_b	jmp	#LR__1053
1d4b0     14 90 06 F1 | 	add	local03, #20
1d4b4     48 95 02 FB | 	rdlong	local05, local03
1d4b8     14 90 86 F1 | 	sub	local03, #20
1d4bc     4A 97 12 F2 | 	cmp	local06, local05 wc
1d4c0     4B 93 02 C6 |  if_b	mov	local04, local06
1d4c4                 | LR__1053
1d4c4     00 98 06 F6 | 	mov	local07, #0
1d4c8                 | LR__1054
1d4c8                 | LR__1055
1d4c8     00 98 0E F2 | 	cmp	local07, #0 wz
1d4cc     60 00 90 5D |  if_ne	jmp	#LR__1058
1d4d0     49 99 02 F6 | 	mov	local07, local04
1d4d4                 | ' 			ncl = scl;
1d4d4                 | ' 			for (;;) {
1d4d4                 | LR__1056
1d4d4     01 98 06 F1 | 	add	local07, #1
1d4d8     14 90 06 F1 | 	add	local03, #20
1d4dc     48 95 02 FB | 	rdlong	local05, local03
1d4e0     14 90 86 F1 | 	sub	local03, #20
1d4e4     4A 99 12 F2 | 	cmp	local07, local05 wc
1d4e8     02 98 06 36 |  if_ae	mov	local07, #2
1d4ec     49 99 1A 32 |  if_ae	cmp	local07, local04 wcz
1d4f0     00 34 06 16 |  if_a	mov	result1, #0
1d4f4     D8 00 90 1D |  if_a	jmp	#LR__1062
1d4f8     4C 77 02 F6 | 	mov	arg02, local07
1d4fc     46 75 02 F6 | 	mov	arg01, local01
1d500     24 F9 BF FD | 	call	#_fatfs_cc_get_fat
1d504     1A 97 0A F6 | 	mov	local06, result1 wz
1d508     24 00 90 AD |  if_e	jmp	#LR__1057
1d50c     01 96 0E F2 | 	cmp	local06, #1 wz
1d510     FF FF 7F 5F 
1d514     FF 97 0E 52 |  if_ne	cmp	local06, ##-1 wz
1d518     4B 35 02 A6 |  if_e	mov	result1, local06
1d51c     B0 00 90 AD |  if_e	jmp	#LR__1062
1d520     49 99 0A F2 | 	cmp	local07, local04 wz
1d524     00 34 06 A6 |  if_e	mov	result1, #0
1d528     A4 00 90 AD |  if_e	jmp	#LR__1062
1d52c     A4 FF 9F FD | 	jmp	#LR__1056
1d530                 | LR__1057
1d530                 | LR__1058
1d530     48 75 02 F6 | 	mov	arg01, local03
1d534     4C 77 02 F6 | 	mov	arg02, local07
1d538     01 78 66 F6 | 	neg	arg03, #1
1d53c     98 FA BF FD | 	call	#_fatfs_cc_put_fat
1d540     1A 9B 0A F6 | 	mov	local08, result1 wz
1d544     28 00 90 5D |  if_ne	jmp	#LR__1059
1d548     00 8E 0E F2 | 	cmp	local02, #0 wz
1d54c     20 00 90 AD |  if_e	jmp	#LR__1059
1d550     47 9D 02 F6 | 	mov	local09, local02
1d554     4C 9F 02 F6 | 	mov	local10, local07
1d558     48 75 02 F6 | 	mov	arg01, local03
1d55c     4E 77 02 F6 | 	mov	arg02, local09
1d560     4F 79 02 F6 | 	mov	arg03, local10
1d564     70 FA BF FD | 	call	#_fatfs_cc_put_fat
1d568     1A 95 02 F6 | 	mov	local05, result1
1d56c     4A 9B 02 F6 | 	mov	local08, local05
1d570                 | LR__1059
1d570     00 9A 0E F2 | 	cmp	local08, #0 wz
1d574     4C 00 90 5D |  if_ne	jmp	#LR__1060
1d578     0C 90 06 F1 | 	add	local03, #12
1d57c     48 99 62 FC | 	wrlong	local07, local03
1d580     08 90 06 F1 | 	add	local03, #8
1d584     48 95 02 FB | 	rdlong	local05, local03
1d588     02 94 86 F1 | 	sub	local05, #2
1d58c     04 90 86 F1 | 	sub	local03, #4
1d590     48 9F 02 FB | 	rdlong	local10, local03
1d594     10 90 86 F1 | 	sub	local03, #16
1d598     4A 9F 1A F2 | 	cmp	local10, local05 wcz
1d59c     10 90 06 E1 |  if_be	add	local03, #16
1d5a0     48 9F 02 EB |  if_be	rdlong	local10, local03
1d5a4     01 9E 86 E1 |  if_be	sub	local10, #1
1d5a8     48 9F 62 EC |  if_be	wrlong	local10, local03
1d5ac     10 90 86 E1 |  if_be	sub	local03, #16
1d5b0     04 90 06 F1 | 	add	local03, #4
1d5b4     48 95 C2 FA | 	rdbyte	local05, local03
1d5b8     01 94 46 F5 | 	or	local05, #1
1d5bc     48 95 42 FC | 	wrbyte	local05, local03
1d5c0     08 00 90 FD | 	jmp	#LR__1061
1d5c4                 | LR__1060
1d5c4     01 9A 0E F2 | 	cmp	local08, #1 wz
1d5c8     01 98 C6 F6 | 	negz	local07, #1
1d5cc                 | LR__1061
1d5cc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1d5cc                 | ' 	}
1d5cc                 | ' 
1d5cc                 | ' 	return ncl;
1d5cc     4C 35 02 F6 | 	mov	result1, local07
1d5d0                 | LR__1062
1d5d0     A8 F0 03 F6 | 	mov	ptra, fp
1d5d4     B3 00 A0 FD | 	call	#popregs_
1d5d8                 | _fatfs_cc_create_chain_ret
1d5d8     2D 00 64 FD | 	ret
1d5dc                 | 
1d5dc                 | _fatfs_cc_dir_clear
1d5dc     06 4C 05 F6 | 	mov	COUNT_, #6
1d5e0     A9 00 A0 FD | 	call	#pushregs_
1d5e4     3A 8D 02 F6 | 	mov	local01, arg01
1d5e8     3B 8F 02 F6 | 	mov	local02, arg02
1d5ec     46 75 02 F6 | 	mov	arg01, local01
1d5f0     90 F5 BF FD | 	call	#_fatfs_cc_sync_window
1d5f4     00 34 0E F2 | 	cmp	result1, #0 wz
1d5f8     01 34 06 56 |  if_ne	mov	result1, #1
1d5fc     90 00 90 5D |  if_ne	jmp	#LR__1065
1d600     46 75 02 F6 | 	mov	arg01, local01
1d604     47 77 02 F6 | 	mov	arg02, local02
1d608     DC F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d60c     1A 91 02 F6 | 	mov	local03, result1
1d610     2C 8C 06 F1 | 	add	local01, #44
1d614     46 91 62 FC | 	wrlong	local03, local01
1d618     04 8C 06 F1 | 	add	local01, #4
1d61c     46 75 02 F6 | 	mov	arg01, local01
1d620     00 76 06 F6 | 	mov	arg02, #0
1d624     09 78 C6 F9 | 	decod	arg03, #9
1d628     99 00 A0 FD | 	call	#\builtin_bytefill_
1d62c     46 93 02 F6 | 	mov	local04, local01
1d630                 | ' #line 1667 "ff.c"
1d630                 | ' 	{
1d630                 | ' 		ibuf = fs->win; szb = 1;
1d630                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d630     00 94 06 F6 | 	mov	local05, #0
1d634     30 8C 86 F1 | 	sub	local01, #48
1d638                 | LR__1063
1d638     0A 8C 06 F1 | 	add	local01, #10
1d63c     46 97 E2 FA | 	rdword	local06, local01
1d640     0A 8C 86 F1 | 	sub	local01, #10
1d644     4B 95 12 F2 | 	cmp	local05, local06 wc
1d648     2C 00 90 3D |  if_ae	jmp	#LR__1064
1d64c     01 8C 06 F1 | 	add	local01, #1
1d650     46 75 C2 FA | 	rdbyte	arg01, local01
1d654     01 8C 86 F1 | 	sub	local01, #1
1d658     49 77 02 F6 | 	mov	arg02, local04
1d65c     48 79 02 F6 | 	mov	arg03, local03
1d660     4A 79 02 F1 | 	add	arg03, local05
1d664     01 7A 06 F6 | 	mov	arg04, #1
1d668     98 F1 BF FD | 	call	#_fatfs_cc_disk_write
1d66c     00 34 0E F2 | 	cmp	result1, #0 wz
1d670     01 94 06 A1 |  if_e	add	local05, #1
1d674     C0 FF 9F AD |  if_e	jmp	#LR__1063
1d678                 | LR__1064
1d678                 | ' 	}
1d678                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d678     0A 8C 06 F1 | 	add	local01, #10
1d67c     46 93 E2 FA | 	rdword	local04, local01
1d680     49 95 0A F2 | 	cmp	local05, local04 wz
1d684     00 96 06 A6 |  if_e	mov	local06, #0
1d688     01 96 06 56 |  if_ne	mov	local06, #1
1d68c     4B 35 02 F6 | 	mov	result1, local06
1d690                 | LR__1065
1d690     A8 F0 03 F6 | 	mov	ptra, fp
1d694     B3 00 A0 FD | 	call	#popregs_
1d698                 | _fatfs_cc_dir_clear_ret
1d698     2D 00 64 FD | 	ret
1d69c                 | 
1d69c                 | _fatfs_cc_dir_sdi
1d69c     06 4C 05 F6 | 	mov	COUNT_, #6
1d6a0     A9 00 A0 FD | 	call	#pushregs_
1d6a4     3A 8D 02 F6 | 	mov	local01, arg01
1d6a8     3B 8F 02 F6 | 	mov	local02, arg02
1d6ac     46 91 02 FB | 	rdlong	local03, local01
1d6b0     00 10 00 FF 
1d6b4     00 8E 16 F2 | 	cmp	local02, ##2097152 wc
1d6b8     47 93 02 C6 |  if_b	mov	local04, local02
1d6bc     1F 92 CE C7 |  if_b	test	local04, #31 wz
1d6c0                 | ' 		return FR_INT_ERR;
1d6c0     02 34 06 76 |  if_nc_or_nz	mov	result1, #2
1d6c4     40 01 90 7D |  if_nc_or_nz	jmp	#LR__1073
1d6c8     10 8C 06 F1 | 	add	local01, #16
1d6cc     46 8F 62 FC | 	wrlong	local02, local01
1d6d0     08 8C 86 F1 | 	sub	local01, #8
1d6d4     46 95 0A FB | 	rdlong	local05, local01 wz
1d6d8     08 8C 86 F1 | 	sub	local01, #8
1d6dc     18 00 90 5D |  if_ne	jmp	#LR__1066
1d6e0     48 93 C2 FA | 	rdbyte	local04, local03
1d6e4     03 92 16 F2 | 	cmp	local04, #3 wc
1d6e8     24 90 06 31 |  if_ae	add	local03, #36
1d6ec     48 93 02 3B |  if_ae	rdlong	local04, local03
1d6f0     24 90 86 31 |  if_ae	sub	local03, #36
1d6f4     49 95 02 36 |  if_ae	mov	local05, local04
1d6f8                 | LR__1066
1d6f8     00 94 0E F2 | 	cmp	local05, #0 wz
1d6fc     3C 00 90 5D |  if_ne	jmp	#LR__1067
1d700     47 93 02 F6 | 	mov	local04, local02
1d704     05 92 46 F0 | 	shr	local04, #5
1d708     08 90 06 F1 | 	add	local03, #8
1d70c     48 77 E2 FA | 	rdword	arg02, local03
1d710     08 90 86 F1 | 	sub	local03, #8
1d714     3B 93 12 F2 | 	cmp	local04, arg02 wc
1d718     02 34 06 36 |  if_ae	mov	result1, #2
1d71c     E8 00 90 3D |  if_ae	jmp	#LR__1073
1d720     24 90 06 F1 | 	add	local03, #36
1d724     48 93 02 FB | 	rdlong	local04, local03
1d728     24 90 86 F1 | 	sub	local03, #36
1d72c     18 8C 06 F1 | 	add	local01, #24
1d730     46 93 62 FC | 	wrlong	local04, local01
1d734     18 8C 86 F1 | 	sub	local01, #24
1d738     7C 00 90 FD | 	jmp	#LR__1072
1d73c                 | LR__1067
1d73c     0A 90 06 F1 | 	add	local03, #10
1d740     48 97 E2 FA | 	rdword	local06, local03
1d744     0A 90 86 F1 | 	sub	local03, #10
1d748     09 96 66 F0 | 	shl	local06, #9
1d74c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d74c                 | ' 		while (ofs >= csz) {
1d74c                 | LR__1068
1d74c     4B 8F 12 F2 | 	cmp	local02, local06 wc
1d750     4C 00 90 CD |  if_b	jmp	#LR__1071
1d754     46 75 02 F6 | 	mov	arg01, local01
1d758     4A 77 02 F6 | 	mov	arg02, local05
1d75c     C8 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d760     1A 95 02 F6 | 	mov	local05, result1
1d764     FF FF 7F FF 
1d768     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1d76c     01 34 06 A6 |  if_e	mov	result1, #1
1d770     94 00 90 AD |  if_e	jmp	#LR__1073
1d774     02 94 16 F2 | 	cmp	local05, #2 wc
1d778     14 00 90 CD |  if_b	jmp	#LR__1069
1d77c     14 90 06 F1 | 	add	local03, #20
1d780     48 93 02 FB | 	rdlong	local04, local03
1d784     14 90 86 F1 | 	sub	local03, #20
1d788     49 95 12 F2 | 	cmp	local05, local04 wc
1d78c     08 00 90 CD |  if_b	jmp	#LR__1070
1d790                 | LR__1069
1d790     02 34 06 F6 | 	mov	result1, #2
1d794     70 00 90 FD | 	jmp	#LR__1073
1d798                 | LR__1070
1d798     4B 8F 82 F1 | 	sub	local02, local06
1d79c     AC FF 9F FD | 	jmp	#LR__1068
1d7a0                 | LR__1071
1d7a0     48 75 02 F6 | 	mov	arg01, local03
1d7a4     4A 77 02 F6 | 	mov	arg02, local05
1d7a8     3C F6 BF FD | 	call	#_fatfs_cc_clst2sect
1d7ac     18 8C 06 F1 | 	add	local01, #24
1d7b0     46 35 62 FC | 	wrlong	result1, local01
1d7b4     18 8C 86 F1 | 	sub	local01, #24
1d7b8                 | LR__1072
1d7b8     14 8C 06 F1 | 	add	local01, #20
1d7bc     46 95 62 FC | 	wrlong	local05, local01
1d7c0     04 8C 06 F1 | 	add	local01, #4
1d7c4     46 93 0A FB | 	rdlong	local04, local01 wz
1d7c8     18 8C 86 F1 | 	sub	local01, #24
1d7cc     02 34 06 A6 |  if_e	mov	result1, #2
1d7d0     34 00 90 AD |  if_e	jmp	#LR__1073
1d7d4     47 35 02 F6 | 	mov	result1, local02
1d7d8     09 34 46 F0 | 	shr	result1, #9
1d7dc     18 8C 06 F1 | 	add	local01, #24
1d7e0     46 93 02 FB | 	rdlong	local04, local01
1d7e4     1A 93 02 F1 | 	add	local04, result1
1d7e8     46 93 62 FC | 	wrlong	local04, local01
1d7ec     30 90 06 F1 | 	add	local03, #48
1d7f0     48 93 02 F6 | 	mov	local04, local03
1d7f4     FF 8F 06 F5 | 	and	local02, #511
1d7f8     47 93 02 F1 | 	add	local04, local02
1d7fc     04 8C 06 F1 | 	add	local01, #4
1d800     46 93 62 FC | 	wrlong	local04, local01
1d804                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d804                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d804                 | ' 
1d804                 | ' 	return FR_OK;
1d804     00 34 06 F6 | 	mov	result1, #0
1d808                 | LR__1073
1d808     A8 F0 03 F6 | 	mov	ptra, fp
1d80c     B3 00 A0 FD | 	call	#popregs_
1d810                 | _fatfs_cc_dir_sdi_ret
1d810     2D 00 64 FD | 	ret
1d814                 | 
1d814                 | _fatfs_cc_dir_next
1d814     05 4C 05 F6 | 	mov	COUNT_, #5
1d818     A9 00 A0 FD | 	call	#pushregs_
1d81c     3A 8D 02 F6 | 	mov	local01, arg01
1d820     3B 8F 02 F6 | 	mov	local02, arg02
1d824     46 91 02 FB | 	rdlong	local03, local01
1d828     10 8C 06 F1 | 	add	local01, #16
1d82c     46 93 02 FB | 	rdlong	local04, local01
1d830     10 8C 86 F1 | 	sub	local01, #16
1d834     20 92 06 F1 | 	add	local04, #32
1d838     00 10 00 FF 
1d83c     00 92 16 F2 | 	cmp	local04, ##2097152 wc
1d840     18 8C 06 31 |  if_ae	add	local01, #24
1d844     46 01 68 3C |  if_ae	wrlong	#0, local01
1d848     18 8C 86 31 |  if_ae	sub	local01, #24
1d84c     18 8C 06 F1 | 	add	local01, #24
1d850     46 77 0A FB | 	rdlong	arg02, local01 wz
1d854     18 8C 86 F1 | 	sub	local01, #24
1d858     04 34 06 A6 |  if_e	mov	result1, #4
1d85c     64 01 90 AD |  if_e	jmp	#LR__1079
1d860     FF 93 CE F7 | 	test	local04, #511 wz
1d864     3C 01 90 5D |  if_ne	jmp	#LR__1078
1d868     18 8C 06 F1 | 	add	local01, #24
1d86c     46 77 02 FB | 	rdlong	arg02, local01
1d870     01 76 06 F1 | 	add	arg02, #1
1d874     46 77 62 FC | 	wrlong	arg02, local01
1d878     04 8C 86 F1 | 	sub	local01, #4
1d87c     46 77 0A FB | 	rdlong	arg02, local01 wz
1d880     14 8C 86 F1 | 	sub	local01, #20
1d884     2C 00 90 5D |  if_ne	jmp	#LR__1074
1d888     49 77 02 F6 | 	mov	arg02, local04
1d88c     05 76 46 F0 | 	shr	arg02, #5
1d890     08 90 06 F1 | 	add	local03, #8
1d894     48 8F E2 FA | 	rdword	local02, local03
1d898     08 90 86 F1 | 	sub	local03, #8
1d89c     47 77 12 F2 | 	cmp	arg02, local02 wc
1d8a0     18 8C 06 31 |  if_ae	add	local01, #24
1d8a4     46 01 68 3C |  if_ae	wrlong	#0, local01
1d8a8                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d8a8     04 34 06 36 |  if_ae	mov	result1, #4
1d8ac     14 01 90 3D |  if_ae	jmp	#LR__1079
1d8b0     F0 00 90 FD | 	jmp	#LR__1077
1d8b4                 | LR__1074
1d8b4     49 75 02 F6 | 	mov	arg01, local04
1d8b8     09 74 46 F0 | 	shr	arg01, #9
1d8bc     0A 90 06 F1 | 	add	local03, #10
1d8c0     48 77 E2 FA | 	rdword	arg02, local03
1d8c4     0A 90 86 F1 | 	sub	local03, #10
1d8c8     01 76 86 F1 | 	sub	arg02, #1
1d8cc     3B 75 CA F7 | 	test	arg01, arg02 wz
1d8d0     D0 00 90 5D |  if_ne	jmp	#LR__1076
1d8d4     46 75 02 F6 | 	mov	arg01, local01
1d8d8     14 8C 06 F1 | 	add	local01, #20
1d8dc     46 77 02 FB | 	rdlong	arg02, local01
1d8e0     14 8C 86 F1 | 	sub	local01, #20
1d8e4     40 F5 BF FD | 	call	#_fatfs_cc_get_fat
1d8e8     1A 95 02 F6 | 	mov	local05, result1
1d8ec     02 94 16 F2 | 	cmp	local05, #2 wc
1d8f0     02 34 06 C6 |  if_b	mov	result1, #2
1d8f4     CC 00 90 CD |  if_b	jmp	#LR__1079
1d8f8     FF FF 7F FF 
1d8fc     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1d900     01 34 06 A6 |  if_e	mov	result1, #1
1d904     BC 00 90 AD |  if_e	jmp	#LR__1079
1d908     14 90 06 F1 | 	add	local03, #20
1d90c     48 77 02 FB | 	rdlong	arg02, local03
1d910     14 90 86 F1 | 	sub	local03, #20
1d914     3B 95 12 F2 | 	cmp	local05, arg02 wc
1d918     68 00 90 CD |  if_b	jmp	#LR__1075
1d91c     00 8E 0E F2 | 	cmp	local02, #0 wz
1d920     18 8C 06 A1 |  if_e	add	local01, #24
1d924     46 01 68 AC |  if_e	wrlong	#0, local01
1d928                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d928     04 34 06 A6 |  if_e	mov	result1, #4
1d92c     94 00 90 AD |  if_e	jmp	#LR__1079
1d930     46 75 02 F6 | 	mov	arg01, local01
1d934     14 8C 06 F1 | 	add	local01, #20
1d938     46 77 02 FB | 	rdlong	arg02, local01
1d93c     14 8C 86 F1 | 	sub	local01, #20
1d940     68 FA BF FD | 	call	#_fatfs_cc_create_chain
1d944     1A 95 0A F6 | 	mov	local05, result1 wz
1d948     07 34 06 A6 |  if_e	mov	result1, #7
1d94c     74 00 90 AD |  if_e	jmp	#LR__1079
1d950     01 94 0E F2 | 	cmp	local05, #1 wz
1d954     02 34 06 A6 |  if_e	mov	result1, #2
1d958     68 00 90 AD |  if_e	jmp	#LR__1079
1d95c     FF FF 7F FF 
1d960     FF 95 0E F2 | 	cmp	local05, ##-1 wz
1d964     01 34 06 A6 |  if_e	mov	result1, #1
1d968     58 00 90 AD |  if_e	jmp	#LR__1079
1d96c     4A 77 02 F6 | 	mov	arg02, local05
1d970     48 75 02 F6 | 	mov	arg01, local03
1d974     64 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d978     00 34 0E F2 | 	cmp	result1, #0 wz
1d97c     01 34 06 56 |  if_ne	mov	result1, #1
1d980     40 00 90 5D |  if_ne	jmp	#LR__1079
1d984                 | LR__1075
1d984     14 8C 06 F1 | 	add	local01, #20
1d988     46 95 62 FC | 	wrlong	local05, local01
1d98c     48 75 02 F6 | 	mov	arg01, local03
1d990     4A 77 02 F6 | 	mov	arg02, local05
1d994     50 F4 BF FD | 	call	#_fatfs_cc_clst2sect
1d998     04 8C 06 F1 | 	add	local01, #4
1d99c     46 35 62 FC | 	wrlong	result1, local01
1d9a0     18 8C 86 F1 | 	sub	local01, #24
1d9a4                 | LR__1076
1d9a4                 | LR__1077
1d9a4                 | LR__1078
1d9a4     10 8C 06 F1 | 	add	local01, #16
1d9a8     46 93 62 FC | 	wrlong	local04, local01
1d9ac     30 90 06 F1 | 	add	local03, #48
1d9b0     FF 93 06 F5 | 	and	local04, #511
1d9b4     49 91 02 F1 | 	add	local03, local04
1d9b8     0C 8C 06 F1 | 	add	local01, #12
1d9bc     46 91 62 FC | 	wrlong	local03, local01
1d9c0                 | ' #line 1771 "ff.c"
1d9c0                 | ' 				}
1d9c0                 | ' 				dp->clust = clst;
1d9c0                 | ' 				dp->sect = clst2sect(fs, clst);
1d9c0                 | ' 			}
1d9c0                 | ' 		}
1d9c0                 | ' 	}
1d9c0                 | ' 	dp->dptr = ofs;
1d9c0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d9c0                 | ' 
1d9c0                 | ' 	return FR_OK;
1d9c0     00 34 06 F6 | 	mov	result1, #0
1d9c4                 | LR__1079
1d9c4     A8 F0 03 F6 | 	mov	ptra, fp
1d9c8     B3 00 A0 FD | 	call	#popregs_
1d9cc                 | _fatfs_cc_dir_next_ret
1d9cc     2D 00 64 FD | 	ret
1d9d0                 | 
1d9d0                 | _fatfs_cc_dir_alloc
1d9d0     0B 4C 05 F6 | 	mov	COUNT_, #11
1d9d4     A9 00 A0 FD | 	call	#pushregs_
1d9d8     3A 8D 02 F6 | 	mov	local01, arg01
1d9dc     3B 8F 02 F6 | 	mov	local02, arg02
1d9e0     46 91 02 FB | 	rdlong	local03, local01
1d9e4     46 75 02 F6 | 	mov	arg01, local01
1d9e8     00 76 06 F6 | 	mov	arg02, #0
1d9ec     AC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d9f0     1A 93 0A F6 | 	mov	local04, result1 wz
1d9f4     80 00 90 5D |  if_ne	jmp	#LR__1085
1d9f8     00 94 06 F6 | 	mov	local05, #0
1d9fc                 | ' 		n = 0;
1d9fc                 | ' 		do {
1d9fc                 | LR__1080
1d9fc     18 8C 06 F1 | 	add	local01, #24
1da00     46 77 02 FB | 	rdlong	arg02, local01
1da04     18 8C 86 F1 | 	sub	local01, #24
1da08     48 75 02 F6 | 	mov	arg01, local03
1da0c     48 F2 BF FD | 	call	#_fatfs_cc_move_window
1da10     1A 93 0A F6 | 	mov	local04, result1 wz
1da14     60 00 90 5D |  if_ne	jmp	#LR__1084
1da18     1C 8C 06 F1 | 	add	local01, #28
1da1c     46 97 02 FB | 	rdlong	local06, local01
1da20     1C 8C 86 F1 | 	sub	local01, #28
1da24     4B 99 C2 FA | 	rdbyte	local07, local06
1da28     E5 98 0E F2 | 	cmp	local07, #229 wz
1da2c     18 00 90 AD |  if_e	jmp	#LR__1081
1da30     1C 8C 06 F1 | 	add	local01, #28
1da34     46 9B 02 FB | 	rdlong	local08, local01
1da38     1C 8C 86 F1 | 	sub	local01, #28
1da3c     4D 9D 02 F6 | 	mov	local09, local08
1da40     4E 9F CA FA | 	rdbyte	local10, local09 wz
1da44     10 00 90 5D |  if_ne	jmp	#LR__1082
1da48                 | LR__1081
1da48     01 94 06 F1 | 	add	local05, #1
1da4c     47 95 0A F2 | 	cmp	local05, local02 wz
1da50     24 00 90 AD |  if_e	jmp	#LR__1084
1da54     04 00 90 FD | 	jmp	#LR__1083
1da58                 | LR__1082
1da58     00 94 06 F6 | 	mov	local05, #0
1da5c                 | LR__1083
1da5c     01 A0 06 F6 | 	mov	local11, #1
1da60     46 75 02 F6 | 	mov	arg01, local01
1da64     01 76 06 F6 | 	mov	arg02, #1
1da68     A8 FD BF FD | 	call	#_fatfs_cc_dir_next
1da6c     1A 99 02 F6 | 	mov	local07, result1
1da70     4C 93 0A F6 | 	mov	local04, local07 wz
1da74     84 FF 9F AD |  if_e	jmp	#LR__1080
1da78                 | LR__1084
1da78                 | LR__1085
1da78     04 92 0E F2 | 	cmp	local04, #4 wz
1da7c     07 92 06 A6 |  if_e	mov	local04, #7
1da80                 | ' 	return res;
1da80     49 35 02 F6 | 	mov	result1, local04
1da84     A8 F0 03 F6 | 	mov	ptra, fp
1da88     B3 00 A0 FD | 	call	#popregs_
1da8c                 | _fatfs_cc_dir_alloc_ret
1da8c     2D 00 64 FD | 	ret
1da90                 | 
1da90                 | _fatfs_cc_ld_clust
1da90     01 4C 05 F6 | 	mov	COUNT_, #1
1da94     A9 00 A0 FD | 	call	#pushregs_
1da98     3A 8D 02 F6 | 	mov	local01, arg01
1da9c     3B 75 02 F6 | 	mov	arg01, arg02
1daa0     1A 74 06 F1 | 	add	arg01, #26
1daa4                 | ' {
1daa4                 | ' 
1daa4                 | ' 	return *((WORD*)ptr);
1daa4     3A 35 E2 FA | 	rdword	result1, arg01
1daa8     1A 75 32 F9 | 	getword	arg01, result1, #0
1daac     46 8D C2 FA | 	rdbyte	local01, local01
1dab0     03 8C 0E F2 | 	cmp	local01, #3 wz
1dab4     14 76 06 A1 |  if_e	add	arg02, #20
1dab8                 | ' {
1dab8                 | ' 
1dab8                 | ' 	return *((WORD*)ptr);
1dab8     3B 35 E2 AA |  if_e	rdword	result1, arg02
1dabc     10 34 66 A0 |  if_e	shl	result1, #16
1dac0     1A 75 42 A5 |  if_e	or	arg01, result1
1dac4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1dac4                 | ' 	}
1dac4                 | ' 
1dac4                 | ' 	return cl;
1dac4     3A 35 02 F6 | 	mov	result1, arg01
1dac8     A8 F0 03 F6 | 	mov	ptra, fp
1dacc     B3 00 A0 FD | 	call	#popregs_
1dad0                 | _fatfs_cc_ld_clust_ret
1dad0     2D 00 64 FD | 	ret
1dad4                 | 
1dad4                 | _fatfs_cc_st_clust
1dad4     01 4C 05 F6 | 	mov	COUNT_, #1
1dad8     A9 00 A0 FD | 	call	#pushregs_
1dadc     3A 8D 02 F6 | 	mov	local01, arg01
1dae0     3B 75 02 F6 | 	mov	arg01, arg02
1dae4     1A 74 06 F1 | 	add	arg01, #26
1dae8     3A 79 52 FC | 	wrword	arg03, arg01
1daec     46 8D C2 FA | 	rdbyte	local01, local01
1daf0     03 8C 0E F2 | 	cmp	local01, #3 wz
1daf4     14 76 06 A1 |  if_e	add	arg02, #20
1daf8     10 78 46 A0 |  if_e	shr	arg03, #16
1dafc     3B 79 52 AC |  if_e	wrword	arg03, arg02
1db00     A8 F0 03 F6 | 	mov	ptra, fp
1db04     B3 00 A0 FD | 	call	#popregs_
1db08                 | _fatfs_cc_st_clust_ret
1db08     2D 00 64 FD | 	ret
1db0c                 | 
1db0c                 | _fatfs_cc_dir_read
1db0c     0B 4C 05 F6 | 	mov	COUNT_, #11
1db10     A9 00 A0 FD | 	call	#pushregs_
1db14     3A 8D 02 F6 | 	mov	local01, arg01
1db18     3B 8F 02 F6 | 	mov	local02, arg02
1db1c     04 90 06 F6 | 	mov	local03, #4
1db20     46 93 02 FB | 	rdlong	local04, local01
1db24                 | ' )
1db24                 | ' {
1db24                 | ' 	FRESULT res = FR_NO_FILE;
1db24                 | ' 	FATFS *fs = dp->obj.fs;
1db24                 | ' 	BYTE attr, b;
1db24                 | ' #line 2303 "ff.c"
1db24                 | ' 	while (dp->sect) {
1db24                 | LR__1086
1db24     18 8C 06 F1 | 	add	local01, #24
1db28     46 35 0A FB | 	rdlong	result1, local01 wz
1db2c     18 8C 86 F1 | 	sub	local01, #24
1db30     B0 00 90 AD |  if_e	jmp	#LR__1088
1db34     18 8C 06 F1 | 	add	local01, #24
1db38     46 77 02 FB | 	rdlong	arg02, local01
1db3c     18 8C 86 F1 | 	sub	local01, #24
1db40     49 75 02 F6 | 	mov	arg01, local04
1db44     10 F1 BF FD | 	call	#_fatfs_cc_move_window
1db48     1A 91 0A F6 | 	mov	local03, result1 wz
1db4c     94 00 90 5D |  if_ne	jmp	#LR__1088
1db50     1C 8C 06 F1 | 	add	local01, #28
1db54     46 95 02 FB | 	rdlong	local05, local01
1db58     1C 8C 86 F1 | 	sub	local01, #28
1db5c     4A 97 C2 FA | 	rdbyte	local06, local05
1db60     4B 95 02 F6 | 	mov	local05, local06
1db64     07 94 4E F7 | 	zerox	local05, #7 wz
1db68     04 90 06 A6 |  if_e	mov	local03, #4
1db6c                 | ' 			res = FR_NO_FILE; break;
1db6c     74 00 90 AD |  if_e	jmp	#LR__1088
1db70     1C 8C 06 F1 | 	add	local01, #28
1db74     46 99 02 FB | 	rdlong	local07, local01
1db78     0B 98 06 F1 | 	add	local07, #11
1db7c     4C 9B C2 FA | 	rdbyte	local08, local07
1db80     3F 9A 06 F5 | 	and	local08, #63
1db84     16 8C 86 F1 | 	sub	local01, #22
1db88     46 9B 42 FC | 	wrbyte	local08, local01
1db8c     06 8C 86 F1 | 	sub	local01, #6
1db90     4B 95 E2 F8 | 	getbyte	local05, local06, #0
1db94     E5 94 0E F2 | 	cmp	local05, #229 wz
1db98     34 00 90 AD |  if_e	jmp	#LR__1087
1db9c     4B 99 E2 F8 | 	getbyte	local07, local06, #0
1dba0     2E 98 0E F2 | 	cmp	local07, #46 wz
1dba4     28 00 90 AD |  if_e	jmp	#LR__1087
1dba8     4D 9D E2 F8 | 	getbyte	local09, local08, #0
1dbac     0F 9C 0E F2 | 	cmp	local09, #15 wz
1dbb0     1C 00 90 AD |  if_e	jmp	#LR__1087
1dbb4     00 9E 06 F6 | 	mov	local10, #0
1dbb8     4D A1 E2 F8 | 	getbyte	local11, local08, #0
1dbbc     20 A0 26 F5 | 	andn	local11, #32
1dbc0     08 A0 0E F2 | 	cmp	local11, #8 wz
1dbc4     01 9E 06 A6 |  if_e	mov	local10, #1
1dbc8     47 9F 0A F2 | 	cmp	local10, local02 wz
1dbcc                 | ' 				break;
1dbcc     14 00 90 AD |  if_e	jmp	#LR__1088
1dbd0                 | LR__1087
1dbd0     46 75 02 F6 | 	mov	arg01, local01
1dbd4     00 76 06 F6 | 	mov	arg02, #0
1dbd8     38 FC BF FD | 	call	#_fatfs_cc_dir_next
1dbdc     1A 91 0A F6 | 	mov	local03, result1 wz
1dbe0     40 FF 9F AD |  if_e	jmp	#LR__1086
1dbe4                 | LR__1088
1dbe4     00 90 0E F2 | 	cmp	local03, #0 wz
1dbe8     18 8C 06 51 |  if_ne	add	local01, #24
1dbec     46 01 68 5C |  if_ne	wrlong	#0, local01
1dbf0                 | ' 	return res;
1dbf0     48 35 02 F6 | 	mov	result1, local03
1dbf4     A8 F0 03 F6 | 	mov	ptra, fp
1dbf8     B3 00 A0 FD | 	call	#popregs_
1dbfc                 | _fatfs_cc_dir_read_ret
1dbfc     2D 00 64 FD | 	ret
1dc00                 | 
1dc00                 | _fatfs_cc_dir_find
1dc00     0B 4C 05 F6 | 	mov	COUNT_, #11
1dc04     A9 00 A0 FD | 	call	#pushregs_
1dc08     3A 8D 02 F6 | 	mov	local01, arg01
1dc0c     46 8F 02 FB | 	rdlong	local02, local01
1dc10     46 75 02 F6 | 	mov	arg01, local01
1dc14     00 76 06 F6 | 	mov	arg02, #0
1dc18     80 FA BF FD | 	call	#_fatfs_cc_dir_sdi
1dc1c     00 34 0E F2 | 	cmp	result1, #0 wz
1dc20     C8 00 90 5D |  if_ne	jmp	#LR__1092
1dc24                 | ' #line 2406 "ff.c"
1dc24                 | ' 	do {
1dc24                 | LR__1089
1dc24     18 8C 06 F1 | 	add	local01, #24
1dc28     46 77 02 FB | 	rdlong	arg02, local01
1dc2c     18 8C 86 F1 | 	sub	local01, #24
1dc30     47 75 02 F6 | 	mov	arg01, local02
1dc34     20 F0 BF FD | 	call	#_fatfs_cc_move_window
1dc38     1A 91 0A F6 | 	mov	local03, result1 wz
1dc3c     A8 00 90 5D |  if_ne	jmp	#LR__1091
1dc40     1C 8C 06 F1 | 	add	local01, #28
1dc44     46 35 02 FB | 	rdlong	result1, local01
1dc48     1C 8C 86 F1 | 	sub	local01, #28
1dc4c     1A 93 C2 FA | 	rdbyte	local04, result1
1dc50     49 35 02 F6 | 	mov	result1, local04
1dc54     07 34 4E F7 | 	zerox	result1, #7 wz
1dc58     04 90 06 A6 |  if_e	mov	local03, #4
1dc5c     88 00 90 AD |  if_e	jmp	#LR__1091
1dc60     1C 8C 06 F1 | 	add	local01, #28
1dc64     46 35 02 FB | 	rdlong	result1, local01
1dc68     0B 34 06 F1 | 	add	result1, #11
1dc6c     1A 35 C2 FA | 	rdbyte	result1, result1
1dc70     3F 34 06 F5 | 	and	result1, #63
1dc74     16 8C 86 F1 | 	sub	local01, #22
1dc78     46 35 42 FC | 	wrbyte	result1, local01
1dc7c     16 8C 06 F1 | 	add	local01, #22
1dc80     46 95 02 FB | 	rdlong	local05, local01
1dc84     1C 8C 86 F1 | 	sub	local01, #28
1dc88     4A 77 02 F6 | 	mov	arg02, local05
1dc8c     0B 76 06 F1 | 	add	arg02, #11
1dc90     3B 97 C2 FA | 	rdbyte	local06, arg02
1dc94     4B 35 E2 F8 | 	getbyte	result1, local06, #0
1dc98     08 34 CE F7 | 	test	result1, #8 wz
1dc9c     2C 00 90 5D |  if_ne	jmp	#LR__1090
1dca0     1C 8C 06 F1 | 	add	local01, #28
1dca4     46 75 02 FB | 	rdlong	arg01, local01
1dca8     04 8C 06 F1 | 	add	local01, #4
1dcac     46 99 02 F6 | 	mov	local07, local01
1dcb0     0B 9A 06 F6 | 	mov	local08, #11
1dcb4     4C 77 02 F6 | 	mov	arg02, local07
1dcb8     0B 78 06 F6 | 	mov	arg03, #11
1dcbc     C8 E2 BF FD | 	call	#_fatfs_cc_memcmp
1dcc0     1A 9D 0A F6 | 	mov	local09, result1 wz
1dcc4     20 8C 86 F1 | 	sub	local01, #32
1dcc8     1C 00 90 AD |  if_e	jmp	#LR__1091
1dccc                 | LR__1090
1dccc     00 9E 06 F6 | 	mov	local10, #0
1dcd0     46 75 02 F6 | 	mov	arg01, local01
1dcd4     00 76 06 F6 | 	mov	arg02, #0
1dcd8     38 FB BF FD | 	call	#_fatfs_cc_dir_next
1dcdc     1A A1 02 F6 | 	mov	local11, result1
1dce0     50 91 0A F6 | 	mov	local03, local11 wz
1dce4     3C FF 9F AD |  if_e	jmp	#LR__1089
1dce8                 | LR__1091
1dce8                 | ' 
1dce8                 | ' 	return res;
1dce8     48 35 02 F6 | 	mov	result1, local03
1dcec                 | LR__1092
1dcec     A8 F0 03 F6 | 	mov	ptra, fp
1dcf0     B3 00 A0 FD | 	call	#popregs_
1dcf4                 | _fatfs_cc_dir_find_ret
1dcf4     2D 00 64 FD | 	ret
1dcf8                 | 
1dcf8                 | _fatfs_cc_dir_register
1dcf8     03 4C 05 F6 | 	mov	COUNT_, #3
1dcfc     A9 00 A0 FD | 	call	#pushregs_
1dd00     3A 8D 02 F6 | 	mov	local01, arg01
1dd04     46 8F 02 FB | 	rdlong	local02, local01
1dd08     46 75 02 F6 | 	mov	arg01, local01
1dd0c     01 76 06 F6 | 	mov	arg02, #1
1dd10     BC FC BF FD | 	call	#_fatfs_cc_dir_alloc
1dd14     1A 91 0A F6 | 	mov	local03, result1 wz
1dd18     4C 00 90 5D |  if_ne	jmp	#LR__1094
1dd1c     18 8C 06 F1 | 	add	local01, #24
1dd20     46 77 02 FB | 	rdlong	arg02, local01
1dd24     18 8C 86 F1 | 	sub	local01, #24
1dd28     47 75 02 F6 | 	mov	arg01, local02
1dd2c     28 EF BF FD | 	call	#_fatfs_cc_move_window
1dd30     1A 91 0A F6 | 	mov	local03, result1 wz
1dd34     30 00 90 5D |  if_ne	jmp	#LR__1093
1dd38     1C 8C 06 F1 | 	add	local01, #28
1dd3c     46 75 02 FB | 	rdlong	arg01, local01
1dd40     00 76 06 F6 | 	mov	arg02, #0
1dd44     20 78 06 F6 | 	mov	arg03, #32
1dd48     99 00 A0 FD | 	call	#\builtin_bytefill_
1dd4c     46 75 02 FB | 	rdlong	arg01, local01
1dd50     04 8C 06 F1 | 	add	local01, #4
1dd54     46 77 02 F6 | 	mov	arg02, local01
1dd58     0B 78 06 F6 | 	mov	arg03, #11
1dd5c     A8 74 B0 FD | 	call	#__system____builtin_memmove
1dd60     03 8E 06 F1 | 	add	local02, #3
1dd64     47 03 48 FC | 	wrbyte	#1, local02
1dd68                 | LR__1093
1dd68                 | LR__1094
1dd68                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1dd68                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1dd68                 | ' #line 2540 "ff.c"
1dd68                 | ' 			fs->wflag = 1;
1dd68                 | ' 		}
1dd68                 | ' 	}
1dd68                 | ' 
1dd68                 | ' 	return res;
1dd68     48 35 02 F6 | 	mov	result1, local03
1dd6c     A8 F0 03 F6 | 	mov	ptra, fp
1dd70     B3 00 A0 FD | 	call	#popregs_
1dd74                 | _fatfs_cc_dir_register_ret
1dd74     2D 00 64 FD | 	ret
1dd78                 | 
1dd78                 | _fatfs_cc_dir_remove
1dd78     02 4C 05 F6 | 	mov	COUNT_, #2
1dd7c     A9 00 A0 FD | 	call	#pushregs_
1dd80     3A 8D 02 F6 | 	mov	local01, arg01
1dd84     46 8F 02 FB | 	rdlong	local02, local01
1dd88     18 8C 06 F1 | 	add	local01, #24
1dd8c     46 77 02 FB | 	rdlong	arg02, local01
1dd90     18 8C 86 F1 | 	sub	local01, #24
1dd94     47 75 02 F6 | 	mov	arg01, local02
1dd98     BC EE BF FD | 	call	#_fatfs_cc_move_window
1dd9c     00 34 4E F2 | 	cmps	result1, #0 wz
1dda0     1C 8C 06 A1 |  if_e	add	local01, #28
1dda4     46 8D 02 AB |  if_e	rdlong	local01, local01
1dda8     46 CB 49 AC |  if_e	wrbyte	#229, local01
1ddac     03 8E 06 A1 |  if_e	add	local02, #3
1ddb0     47 03 48 AC |  if_e	wrbyte	#1, local02
1ddb4                 | ' 		dp->dir[ 0 ] =  0xE5 ;
1ddb4                 | ' 		fs->wflag = 1;
1ddb4                 | ' 	}
1ddb4                 | ' 
1ddb4                 | ' 
1ddb4                 | ' 	return res;
1ddb4     A8 F0 03 F6 | 	mov	ptra, fp
1ddb8     B3 00 A0 FD | 	call	#popregs_
1ddbc                 | _fatfs_cc_dir_remove_ret
1ddbc     2D 00 64 FD | 	ret
1ddc0                 | 
1ddc0                 | _fatfs_cc_get_fileinfo
1ddc0     07 4C 05 F6 | 	mov	COUNT_, #7
1ddc4     A9 00 A0 FD | 	call	#pushregs_
1ddc8     3A 8D 02 F6 | 	mov	local01, arg01
1ddcc     3B 8F 02 F6 | 	mov	local02, arg02
1ddd0     0C 8E 06 F1 | 	add	local02, #12
1ddd4     47 01 48 FC | 	wrbyte	#0, local02
1ddd8     0C 8E 86 F1 | 	sub	local02, #12
1dddc     18 8C 06 F1 | 	add	local01, #24
1dde0     46 91 02 FB | 	rdlong	local03, local01
1dde4     18 8C 86 F1 | 	sub	local01, #24
1dde8     48 93 0A F6 | 	mov	local04, local03 wz
1ddec     E4 00 90 AD |  if_e	jmp	#LR__1098
1ddf0     00 94 06 F6 | 	mov	local05, #0
1ddf4     00 96 06 F6 | 	mov	local06, #0
1ddf8                 | ' #line 2708 "ff.c"
1ddf8                 | ' 	si = di = 0;
1ddf8                 | ' 	while (si < 11) {
1ddf8                 | LR__1095
1ddf8     0B 96 16 F2 | 	cmp	local06, #11 wc
1ddfc     70 00 90 3D |  if_ae	jmp	#LR__1097
1de00     1C 8C 06 F1 | 	add	local01, #28
1de04     46 93 02 FB | 	rdlong	local04, local01
1de08     1C 8C 86 F1 | 	sub	local01, #28
1de0c     4B 91 02 F6 | 	mov	local03, local06
1de10     49 91 02 F1 | 	add	local03, local04
1de14     48 99 C2 FA | 	rdbyte	local07, local03
1de18     4C 93 E2 F8 | 	getbyte	local04, local07, #0
1de1c     20 92 0E F2 | 	cmp	local04, #32 wz
1de20     01 96 06 F1 | 	add	local06, #1
1de24     D0 FF 9F AD |  if_e	jmp	#LR__1095
1de28     4C 93 E2 F8 | 	getbyte	local04, local07, #0
1de2c     05 92 0E F2 | 	cmp	local04, #5 wz
1de30     E5 98 06 A6 |  if_e	mov	local07, #229
1de34     09 96 0E F2 | 	cmp	local06, #9 wz
1de38     18 00 90 5D |  if_ne	jmp	#LR__1096
1de3c     4A 93 02 F6 | 	mov	local04, local05
1de40     0C 8E 06 F1 | 	add	local02, #12
1de44     47 93 02 F1 | 	add	local04, local02
1de48     49 5D 48 FC | 	wrbyte	#46, local04
1de4c     01 94 06 F1 | 	add	local05, #1
1de50     0C 8E 86 F1 | 	sub	local02, #12
1de54                 | LR__1096
1de54     4A 93 02 F6 | 	mov	local04, local05
1de58     0C 8E 06 F1 | 	add	local02, #12
1de5c     47 93 02 F1 | 	add	local04, local02
1de60     49 99 42 FC | 	wrbyte	local07, local04
1de64     01 94 06 F1 | 	add	local05, #1
1de68     0C 8E 86 F1 | 	sub	local02, #12
1de6c     88 FF 9F FD | 	jmp	#LR__1095
1de70                 | LR__1097
1de70     0C 8E 06 F1 | 	add	local02, #12
1de74     47 95 02 F1 | 	add	local05, local02
1de78     4A 01 48 FC | 	wrbyte	#0, local05
1de7c     1C 8C 06 F1 | 	add	local01, #28
1de80     46 91 02 FB | 	rdlong	local03, local01
1de84     0B 90 06 F1 | 	add	local03, #11
1de88     48 93 C2 FA | 	rdbyte	local04, local03
1de8c     3F 92 06 F5 | 	and	local04, #63
1de90     04 8E 86 F1 | 	sub	local02, #4
1de94     47 93 42 FC | 	wrbyte	local04, local02
1de98     08 8E 86 F1 | 	sub	local02, #8
1de9c     46 75 02 FB | 	rdlong	arg01, local01
1dea0     1C 74 06 F1 | 	add	arg01, #28
1dea4                 | ' {
1dea4                 | ' 
1dea4                 | ' 	return *((DWORD*)ptr);
1dea4     3A 35 02 FB | 	rdlong	result1, arg01
1dea8     47 35 62 FC | 	wrlong	result1, local02
1deac     46 75 02 FB | 	rdlong	arg01, local01
1deb0     16 74 06 F1 | 	add	arg01, #22
1deb4                 | ' {
1deb4                 | ' 
1deb4                 | ' 	return *((WORD*)ptr);
1deb4     3A 35 E2 FA | 	rdword	result1, arg01
1deb8     06 8E 06 F1 | 	add	local02, #6
1debc     47 35 52 FC | 	wrword	result1, local02
1dec0     46 75 02 FB | 	rdlong	arg01, local01
1dec4     18 74 06 F1 | 	add	arg01, #24
1dec8                 | ' {
1dec8                 | ' 
1dec8                 | ' 	return *((WORD*)ptr);
1dec8     3A 35 E2 FA | 	rdword	result1, arg01
1decc     02 8E 86 F1 | 	sub	local02, #2
1ded0     47 35 52 FC | 	wrword	result1, local02
1ded4                 | LR__1098
1ded4     A8 F0 03 F6 | 	mov	ptra, fp
1ded8     B3 00 A0 FD | 	call	#popregs_
1dedc                 | _fatfs_cc_get_fileinfo_ret
1dedc     2D 00 64 FD | 	ret
1dee0                 | 
1dee0                 | _fatfs_cc_create_name
1dee0     0F 4C 05 F6 | 	mov	COUNT_, #15
1dee4     A9 00 A0 FD | 	call	#pushregs_
1dee8     3A 8D 02 F6 | 	mov	local01, arg01
1deec     3B 8F 02 F6 | 	mov	local02, arg02
1def0     47 91 02 FB | 	rdlong	local03, local02
1def4     20 8C 06 F1 | 	add	local01, #32
1def8     46 93 02 F6 | 	mov	local04, local01
1defc     49 75 02 F6 | 	mov	arg01, local04
1df00     20 76 06 F6 | 	mov	arg02, #32
1df04     0B 78 06 F6 | 	mov	arg03, #11
1df08     3A 95 02 F6 | 	mov	local05, arg01
1df0c     99 00 A0 FD | 	call	#\builtin_bytefill_
1df10     4A 35 02 F6 | 	mov	result1, local05
1df14     00 96 06 F6 | 	mov	local06, #0
1df18     00 98 06 F6 | 	mov	local07, #0
1df1c     08 9A 06 F6 | 	mov	local08, #8
1df20                 | ' 
1df20                 | ' 
1df20                 | ' 	p = *path; sfn = dp->fn;
1df20                 | ' 	__builtin_memset(sfn, ' ', 11) ;
1df20                 | ' 	si = i = 0; ni = 8;
1df20                 | ' #line 2970 "ff.c"
1df20                 | ' 	for (;;) {
1df20     20 8C 86 F1 | 	sub	local01, #32
1df24                 | LR__1099
1df24     4C 8D 02 F6 | 	mov	local01, local07
1df28     48 8D 02 F1 | 	add	local01, local03
1df2c     46 9D C2 FA | 	rdbyte	local09, local01
1df30     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1df34     21 8C 16 F2 | 	cmp	local01, #33 wc
1df38     01 98 06 F1 | 	add	local07, #1
1df3c     60 01 90 CD |  if_b	jmp	#LR__1107
1df40     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1df44     2F 8C 0E F2 | 	cmp	local01, #47 wz
1df48     4E 9F 02 56 |  if_ne	mov	local10, local09
1df4c     4F 9F E2 58 |  if_ne	getbyte	local10, local10, #0
1df50     5C 9E 0E 52 |  if_ne	cmp	local10, #92 wz
1df54     2C 00 90 5D |  if_ne	jmp	#LR__1101
1df58                 | ' 			while ( ((p[si]) == '/' || (p[si]) == '\\') ) si++;
1df58                 | LR__1100
1df58     4C 9F 02 F6 | 	mov	local10, local07
1df5c     48 9F 02 F1 | 	add	local10, local03
1df60     4F 9F C2 FA | 	rdbyte	local10, local10
1df64     2F 9E 0E F2 | 	cmp	local10, #47 wz
1df68     4C A1 02 56 |  if_ne	mov	local11, local07
1df6c     48 A1 02 51 |  if_ne	add	local11, local03
1df70     50 A3 C2 5A |  if_ne	rdbyte	local12, local11
1df74     5C A2 0E 52 |  if_ne	cmp	local12, #92 wz
1df78     24 01 90 5D |  if_ne	jmp	#LR__1107
1df7c     01 98 06 F1 | 	add	local07, #1
1df80     D4 FF 9F FD | 	jmp	#LR__1100
1df84                 | ' 			break;
1df84                 | LR__1101
1df84     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1df88     2E 8C 0E F2 | 	cmp	local01, #46 wz
1df8c     4D 97 12 52 |  if_ne	cmp	local06, local08 wc
1df90     28 00 90 4D |  if_c_and_nz	jmp	#LR__1104
1df94     0B 9A 0E F2 | 	cmp	local08, #11 wz
1df98     0C 00 90 AD |  if_e	jmp	#LR__1102
1df9c     4E 9D E2 F8 | 	getbyte	local09, local09, #0
1dfa0     2E 9C 0E F2 | 	cmp	local09, #46 wz
1dfa4     08 00 90 AD |  if_e	jmp	#LR__1103
1dfa8                 | LR__1102
1dfa8     06 34 06 F6 | 	mov	result1, #6
1dfac     3C 01 90 FD | 	jmp	#LR__1108
1dfb0                 | LR__1103
1dfb0     08 96 06 F6 | 	mov	local06, #8
1dfb4     0B 9A 06 F6 | 	mov	local08, #11
1dfb8                 | ' 			i = 8; ni = 11;
1dfb8                 | ' 			continue;
1dfb8     68 FF 9F FD | 	jmp	#LR__1099
1dfbc                 | LR__1104
1dfbc     4E 8D E2 F8 | 	getbyte	local01, local09, #0
1dfc0     80 8C 16 F2 | 	cmp	local01, #128 wc
1dfc4     4E 9D E2 38 |  if_ae	getbyte	local09, local09, #0
1dfc8     7F 9C 06 35 |  if_ae	and	local09, #127
1dfcc     F0 9C 02 31 |  if_ae	add	local09, ptr__fatfs_cc_dat__
1dfd0     4E 9D C2 3A |  if_ae	rdbyte	local09, local09
1dfd4     4E 75 02 F6 | 	mov	arg01, local09
1dfd8     07 74 4E F7 | 	zerox	arg01, #7 wz
1dfdc     00 34 06 56 |  if_ne	mov	result1, #0
1dfe0                 | ' 
1dfe0                 | ' 	return 0;
1dfe0     00 34 06 A6 |  if_e	mov	result1, #0
1dfe4     00 34 0E F2 | 	cmp	result1, #0 wz
1dfe8     60 00 90 AD |  if_e	jmp	#LR__1105
1dfec     4C 8D 02 F6 | 	mov	local01, local07
1dff0     48 A3 02 F6 | 	mov	local12, local03
1dff4     48 8D 02 F1 | 	add	local01, local03
1dff8     46 A5 C2 FA | 	rdbyte	local13, local01
1dffc     52 75 02 F6 | 	mov	arg01, local13
1e000     07 74 4E F7 | 	zerox	arg01, #7 wz
1e004     00 34 06 56 |  if_ne	mov	result1, #0
1e008                 | ' 
1e008                 | ' 	return 0;
1e008     00 34 06 A6 |  if_e	mov	result1, #0
1e00c     00 34 4E F2 | 	cmps	result1, #0 wz
1e010     01 98 06 F1 | 	add	local07, #1
1e014     4D 9F 02 56 |  if_ne	mov	local10, local08
1e018     01 9E 86 51 |  if_ne	sub	local10, #1
1e01c     4F 97 12 52 |  if_ne	cmp	local06, local10 wc
1e020     06 34 06 B6 |  if_nc_or_z	mov	result1, #6
1e024     C4 00 90 BD |  if_nc_or_z	jmp	#LR__1108
1e028     4B 8D 02 F6 | 	mov	local01, local06
1e02c     49 8D 02 F1 | 	add	local01, local04
1e030     46 9D 42 FC | 	wrbyte	local09, local01
1e034     01 96 06 F1 | 	add	local06, #1
1e038     4B 9D 02 F6 | 	mov	local09, local06
1e03c     49 9D 02 F1 | 	add	local09, local04
1e040     4E A5 42 FC | 	wrbyte	local13, local09
1e044     01 96 06 F1 | 	add	local06, #1
1e048     D8 FE 9F FD | 	jmp	#LR__1099
1e04c                 | LR__1105
1e04c     53 01 00 FF 
1e050     5D 75 06 F6 | 	mov	arg01, ##@LR__2279
1e054     4E 77 E2 F8 | 	getbyte	arg02, local09, #0
1e058     10 E0 BF FD | 	call	#_fatfs_cc_strchr
1e05c     00 34 0E F2 | 	cmp	result1, #0 wz
1e060     06 34 06 56 |  if_ne	mov	result1, #6
1e064     84 00 90 5D |  if_ne	jmp	#LR__1108
1e068     4E A7 E2 F8 | 	getbyte	local14, local09, #0
1e06c     61 A6 16 F2 | 	cmp	local14, #97 wc
1e070     18 00 90 CD |  if_b	jmp	#LR__1106
1e074     4E 9F E2 F8 | 	getbyte	local10, local09, #0
1e078     7B 9E 16 F2 | 	cmp	local10, #123 wc
1e07c     4E A7 02 C6 |  if_b	mov	local14, local09
1e080     53 A7 E2 C8 |  if_b	getbyte	local14, local14, #0
1e084     20 A6 86 C1 |  if_b	sub	local14, #32
1e088     53 9D 02 C6 |  if_b	mov	local09, local14
1e08c                 | LR__1106
1e08c     4B A9 02 F6 | 	mov	local15, local06
1e090     49 A9 02 F1 | 	add	local15, local04
1e094     54 9D 42 FC | 	wrbyte	local09, local15
1e098     01 96 06 F1 | 	add	local06, #1
1e09c     84 FE 9F FD | 	jmp	#LR__1099
1e0a0                 | LR__1107
1e0a0     4C A9 02 F6 | 	mov	local15, local07
1e0a4     48 A9 02 F1 | 	add	local15, local03
1e0a8     47 A9 62 FC | 	wrlong	local15, local02
1e0ac     00 96 0E F2 | 	cmp	local06, #0 wz
1e0b0     06 34 06 A6 |  if_e	mov	result1, #6
1e0b4     34 00 90 AD |  if_e	jmp	#LR__1108
1e0b8     49 A7 C2 FA | 	rdbyte	local14, local04
1e0bc     E5 A6 0E F2 | 	cmp	local14, #229 wz
1e0c0     49 0B 48 AC |  if_e	wrbyte	#5, local04
1e0c4     4E 9F E2 F8 | 	getbyte	local10, local09, #0
1e0c8     21 9E 16 F2 | 	cmp	local10, #33 wc
1e0cc     48 99 02 31 |  if_ae	add	local07, local03
1e0d0     4C A9 C2 3A |  if_ae	rdbyte	local15, local07
1e0d4     21 A8 16 32 |  if_ae	cmp	local15, #33 wc
1e0d8     04 A6 06 C6 |  if_b	mov	local14, #4
1e0dc     00 A6 06 36 |  if_ae	mov	local14, #0
1e0e0     0B 92 06 F1 | 	add	local04, #11
1e0e4     49 A7 42 FC | 	wrbyte	local14, local04
1e0e8                 | ' 	sfn[ 11 ] = (c <= ' ' || p[si] <= ' ') ?  0x04  : 0;
1e0e8                 | ' 
1e0e8                 | ' 	return FR_OK;
1e0e8     00 34 06 F6 | 	mov	result1, #0
1e0ec                 | LR__1108
1e0ec     A8 F0 03 F6 | 	mov	ptra, fp
1e0f0     B3 00 A0 FD | 	call	#popregs_
1e0f4                 | _fatfs_cc_create_name_ret
1e0f4     2D 00 64 FD | 	ret
1e0f8                 | 
1e0f8                 | _fatfs_cc_follow_path
1e0f8     04 4C 05 F6 | 	mov	COUNT_, #4
1e0fc     A9 00 A0 FD | 	call	#pushregs_
1e100     18 F0 07 F1 | 	add	ptra, #24
1e104     04 50 05 F1 | 	add	fp, #4
1e108     A8 74 62 FC | 	wrlong	arg01, fp
1e10c     04 50 05 F1 | 	add	fp, #4
1e110     A8 76 62 FC | 	wrlong	arg02, fp
1e114     04 50 85 F1 | 	sub	fp, #4
1e118     A8 34 02 FB | 	rdlong	result1, fp
1e11c     1A 8D 02 FB | 	rdlong	local01, result1
1e120     10 50 05 F1 | 	add	fp, #16
1e124     A8 8C 62 FC | 	wrlong	local01, fp
1e128     14 50 85 F1 | 	sub	fp, #20
1e12c     18 1F 9E FE | 	loc	pa,	#(@LR__1111-@LR__1109)
1e130     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1e134                 | ' )
1e134                 | ' {
1e134                 | ' 	FRESULT res;
1e134                 | ' 	BYTE ns;
1e134                 | ' 	FATFS *fs = dp->obj.fs;
1e134                 | ' #line 3034 "ff.c"
1e134                 | ' 	{
1e134                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1e134                 | LR__1109
1e134     08 50 05 F1 | 	add	fp, #8
1e138     A8 8C 02 FB | 	rdlong	local01, fp
1e13c     08 50 85 F1 | 	sub	fp, #8
1e140     46 8D C2 FA | 	rdbyte	local01, local01
1e144     2F 8C 0E F2 | 	cmp	local01, #47 wz
1e148     18 00 90 AD |  if_e	jmp	#LR__1110
1e14c     08 50 05 F1 | 	add	fp, #8
1e150     A8 8C 02 FB | 	rdlong	local01, fp
1e154     08 50 85 F1 | 	sub	fp, #8
1e158     46 8D C2 FA | 	rdbyte	local01, local01
1e15c     5C 8C 0E F2 | 	cmp	local01, #92 wz
1e160     18 00 90 5D |  if_ne	jmp	#LR__1112
1e164                 | LR__1110
1e164     08 50 05 F1 | 	add	fp, #8
1e168     A8 8C 02 FB | 	rdlong	local01, fp
1e16c     01 8C 06 F1 | 	add	local01, #1
1e170     A8 8C 62 FC | 	wrlong	local01, fp
1e174     08 50 85 F1 | 	sub	fp, #8
1e178     B8 FF 9F FD | 	jmp	#LR__1109
1e17c                 | LR__1111
1e17c                 | LR__1112
1e17c     04 50 05 F1 | 	add	fp, #4
1e180     A8 8C 02 FB | 	rdlong	local01, fp
1e184     08 8C 06 F1 | 	add	local01, #8
1e188     46 01 68 FC | 	wrlong	#0, local01
1e18c     04 50 05 F1 | 	add	fp, #4
1e190     A8 8C 02 FB | 	rdlong	local01, fp
1e194     08 50 85 F1 | 	sub	fp, #8
1e198     46 8D C2 FA | 	rdbyte	local01, local01
1e19c     20 8C 16 F2 | 	cmp	local01, #32 wc
1e1a0     30 00 90 3D |  if_ae	jmp	#LR__1113
1e1a4     04 50 05 F1 | 	add	fp, #4
1e1a8     A8 8C 02 FB | 	rdlong	local01, fp
1e1ac     2B 8C 06 F1 | 	add	local01, #43
1e1b0     46 01 49 FC | 	wrbyte	#128, local01
1e1b4     A8 74 02 FB | 	rdlong	arg01, fp
1e1b8     04 50 85 F1 | 	sub	fp, #4
1e1bc     00 76 06 F6 | 	mov	arg02, #0
1e1c0     D8 F4 BF FD | 	call	#_fatfs_cc_dir_sdi
1e1c4     0C 50 05 F1 | 	add	fp, #12
1e1c8     A8 34 62 FC | 	wrlong	result1, fp
1e1cc     0C 50 85 F1 | 	sub	fp, #12
1e1d0     1C 01 90 FD | 	jmp	#LR__1117
1e1d4                 | LR__1113
1e1d4                 | ' 		for (;;) {
1e1d4                 | LR__1114
1e1d4     04 50 05 F1 | 	add	fp, #4
1e1d8     A8 74 02 FB | 	rdlong	arg01, fp
1e1dc     04 50 05 F1 | 	add	fp, #4
1e1e0     A8 76 02 F6 | 	mov	arg02, fp
1e1e4     08 50 85 F1 | 	sub	fp, #8
1e1e8     F4 FC BF FD | 	call	#_fatfs_cc_create_name
1e1ec     0C 50 05 F1 | 	add	fp, #12
1e1f0     A8 34 62 FC | 	wrlong	result1, fp
1e1f4     00 34 4E F2 | 	cmps	result1, #0 wz
1e1f8     0C 50 85 F1 | 	sub	fp, #12
1e1fc     F0 00 90 5D |  if_ne	jmp	#LR__1116
1e200     04 50 05 F1 | 	add	fp, #4
1e204     A8 74 02 FB | 	rdlong	arg01, fp
1e208     04 50 85 F1 | 	sub	fp, #4
1e20c     F0 F9 BF FD | 	call	#_fatfs_cc_dir_find
1e210     0C 50 05 F1 | 	add	fp, #12
1e214     A8 34 62 FC | 	wrlong	result1, fp
1e218     08 50 85 F1 | 	sub	fp, #8
1e21c     A8 8C 02 FB | 	rdlong	local01, fp
1e220     2B 8C 06 F1 | 	add	local01, #43
1e224     46 8D C2 FA | 	rdbyte	local01, local01
1e228     0C 50 05 F1 | 	add	fp, #12
1e22c     A8 8C 42 FC | 	wrbyte	local01, fp
1e230     04 50 85 F1 | 	sub	fp, #4
1e234     A8 8C 0A FB | 	rdlong	local01, fp wz
1e238     0C 50 85 F1 | 	sub	fp, #12
1e23c     34 00 90 AD |  if_e	jmp	#LR__1115
1e240     0C 50 05 F1 | 	add	fp, #12
1e244     A8 8C 02 FB | 	rdlong	local01, fp
1e248     0C 50 85 F1 | 	sub	fp, #12
1e24c     04 8C 0E F2 | 	cmp	local01, #4 wz
1e250     9C 00 90 5D |  if_ne	jmp	#LR__1116
1e254     10 50 05 F1 | 	add	fp, #16
1e258     A8 8C C2 FA | 	rdbyte	local01, fp
1e25c     10 50 85 F1 | 	sub	fp, #16
1e260     04 8C CE F7 | 	test	local01, #4 wz
1e264     0C 50 05 A1 |  if_e	add	fp, #12
1e268     A8 0A 68 AC |  if_e	wrlong	#5, fp
1e26c     0C 50 85 A1 |  if_e	sub	fp, #12
1e270                 | ' 					}
1e270                 | ' 				}
1e270                 | ' 				break;
1e270     7C 00 90 FD | 	jmp	#LR__1116
1e274                 | LR__1115
1e274     10 50 05 F1 | 	add	fp, #16
1e278     A8 8C C2 FA | 	rdbyte	local01, fp
1e27c     10 50 85 F1 | 	sub	fp, #16
1e280     04 8C CE F7 | 	test	local01, #4 wz
1e284     68 00 90 5D |  if_ne	jmp	#LR__1116
1e288     04 50 05 F1 | 	add	fp, #4
1e28c     A8 76 02 FB | 	rdlong	arg02, fp
1e290     04 50 85 F1 | 	sub	fp, #4
1e294     06 76 06 F1 | 	add	arg02, #6
1e298     3B 77 C2 FA | 	rdbyte	arg02, arg02
1e29c     10 76 CE F7 | 	test	arg02, #16 wz
1e2a0     0C 50 05 A1 |  if_e	add	fp, #12
1e2a4     A8 0A 68 AC |  if_e	wrlong	#5, fp
1e2a8     0C 50 85 A1 |  if_e	sub	fp, #12
1e2ac                 | ' 				res = FR_NO_PATH; break;
1e2ac     40 00 90 AD |  if_e	jmp	#LR__1116
1e2b0     04 50 05 F1 | 	add	fp, #4
1e2b4     A8 8E 02 FB | 	rdlong	local02, fp
1e2b8     47 91 02 F6 | 	mov	local03, local02
1e2bc     10 50 05 F1 | 	add	fp, #16
1e2c0     A8 76 02 FB | 	rdlong	arg02, fp
1e2c4     3B 75 02 F6 | 	mov	arg01, arg02
1e2c8     30 76 06 F1 | 	add	arg02, #48
1e2cc     14 50 85 F1 | 	sub	fp, #20
1e2d0     10 8E 06 F1 | 	add	local02, #16
1e2d4     47 93 02 FB | 	rdlong	local04, local02
1e2d8     FF 93 06 F5 | 	and	local04, #511
1e2dc     49 77 02 F1 | 	add	arg02, local04
1e2e0     AC F7 BF FD | 	call	#_fatfs_cc_ld_clust
1e2e4     08 90 06 F1 | 	add	local03, #8
1e2e8     48 35 62 FC | 	wrlong	result1, local03
1e2ec     E4 FE 9F FD | 	jmp	#LR__1114
1e2f0                 | LR__1116
1e2f0                 | LR__1117
1e2f0                 | ' 			}
1e2f0                 | ' #line 3090 "ff.c"
1e2f0                 | ' 			{
1e2f0                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1e2f0                 | ' 			}
1e2f0                 | ' 		}
1e2f0                 | ' 	}
1e2f0                 | ' 
1e2f0                 | ' 	return res;
1e2f0     0C 50 05 F1 | 	add	fp, #12
1e2f4     A8 34 02 FB | 	rdlong	result1, fp
1e2f8     0C 50 85 F1 | 	sub	fp, #12
1e2fc     A8 F0 03 F6 | 	mov	ptra, fp
1e300     B3 00 A0 FD | 	call	#popregs_
1e304                 | _fatfs_cc_follow_path_ret
1e304     2D 00 64 FD | 	ret
1e308                 | 
1e308                 | _fatfs_cc_get_ldnumber
1e308     3A 3B 02 F6 | 	mov	_var01, arg01
1e30c     01 3C 66 F6 | 	neg	_var02, #1
1e310     1D 3F 0A FB | 	rdlong	_var03, _var01 wz
1e314     1F 41 02 F6 | 	mov	_var04, _var03
1e318     01 34 66 A6 |  if_e	neg	result1, #1
1e31c     80 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1e320     FC 1C 9E FE | 	loc	pa,	#(@LR__1119-@LR__1118)
1e324     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1e328                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 0 ? ' ' : '!'))  && tc != ':');
1e328                 | LR__1118
1e328     20 43 C2 FA | 	rdbyte	_var05, _var04
1e32c     21 45 E2 F8 | 	getbyte	_var06, _var05, #0
1e330     21 44 16 F2 | 	cmp	_var06, #33 wc
1e334     01 40 06 F1 | 	add	_var04, #1
1e338     21 47 02 36 |  if_ae	mov	_var07, _var05
1e33c     23 47 E2 38 |  if_ae	getbyte	_var07, _var07, #0
1e340     3A 46 0E 32 |  if_ae	cmp	_var07, #58 wz
1e344     E0 FF 9F 1D |  if_a	jmp	#LR__1118
1e348                 | LR__1119
1e348     21 45 E2 F8 | 	getbyte	_var06, _var05, #0
1e34c     3A 44 0E F2 | 	cmp	_var06, #58 wz
1e350     48 00 90 5D |  if_ne	jmp	#LR__1121
1e354     01 48 06 F6 | 	mov	_var08, #1
1e358     1F 45 C2 FA | 	rdbyte	_var06, _var03
1e35c     30 44 16 F2 | 	cmp	_var06, #48 wc
1e360     24 00 90 CD |  if_b	jmp	#LR__1120
1e364     1F 47 C2 FA | 	rdbyte	_var07, _var03
1e368     3A 46 16 F2 | 	cmp	_var07, #58 wc
1e36c     18 00 90 3D |  if_ae	jmp	#LR__1120
1e370     1F 4B 02 F6 | 	mov	_var09, _var03
1e374     02 4A 06 F1 | 	add	_var09, #2
1e378     20 4B 0A F2 | 	cmp	_var09, _var04 wz
1e37c     1F 45 C2 AA |  if_e	rdbyte	_var06, _var03
1e380     30 44 86 A1 |  if_e	sub	_var06, #48
1e384     22 49 02 A6 |  if_e	mov	_var08, _var06
1e388                 | LR__1120
1e388     01 48 56 F2 | 	cmps	_var08, #1 wc
1e38c     24 3D 02 C6 |  if_b	mov	_var02, _var08
1e390     1D 41 62 CC |  if_b	wrlong	_var04, _var01
1e394                 | ' 			vol = i;
1e394                 | ' 			*path = tt;
1e394                 | ' 		}
1e394                 | ' 		return vol;
1e394     1E 35 02 F6 | 	mov	result1, _var02
1e398     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1e39c                 | LR__1121
1e39c                 | ' 	}
1e39c                 | ' #line 3170 "ff.c"
1e39c                 | ' 	vol = 0;
1e39c                 | ' 
1e39c                 | ' 	return vol;
1e39c     00 34 06 F6 | 	mov	result1, #0
1e3a0                 | _fatfs_cc_get_ldnumber_ret
1e3a0     2D 00 64 FD | 	ret
1e3a4                 | 
1e3a4                 | _fatfs_cc_check_fs
1e3a4     17 4C 05 F6 | 	mov	COUNT_, #23
1e3a8     A9 00 A0 FD | 	call	#pushregs_
1e3ac     3A 8D 02 F6 | 	mov	local01, arg01
1e3b0     3B 8F 02 F6 | 	mov	local02, arg02
1e3b4     03 8C 06 F1 | 	add	local01, #3
1e3b8     46 01 48 FC | 	wrbyte	#0, local01
1e3bc     29 8C 06 F1 | 	add	local01, #41
1e3c0     FF FF FF FF 
1e3c4     46 FF 6B FC | 	wrlong	##-1, local01
1e3c8     2C 8C 86 F1 | 	sub	local01, #44
1e3cc     47 77 02 F6 | 	mov	arg02, local02
1e3d0     46 75 02 F6 | 	mov	arg01, local01
1e3d4     80 E8 BF FD | 	call	#_fatfs_cc_move_window
1e3d8     00 34 0E F2 | 	cmp	result1, #0 wz
1e3dc     04 34 06 56 |  if_ne	mov	result1, #4
1e3e0     B8 01 90 5D |  if_ne	jmp	#LR__1127
1e3e4     30 8C 06 F1 | 	add	local01, #48
1e3e8     46 75 02 F6 | 	mov	arg01, local01
1e3ec     FE 75 06 F1 | 	add	arg01, #510
1e3f0                 | ' {
1e3f0                 | ' 
1e3f0                 | ' 	return *((WORD*)ptr);
1e3f0     3A 91 E2 FA | 	rdword	local03, arg01
1e3f4     46 93 C2 FA | 	rdbyte	local04, local01
1e3f8     30 8C 86 F1 | 	sub	local01, #48
1e3fc     49 95 E2 F8 | 	getbyte	local05, local04, #0
1e400     EB 94 0E F2 | 	cmp	local05, #235 wz
1e404     18 00 90 AD |  if_e	jmp	#LR__1122
1e408     49 35 E2 F8 | 	getbyte	result1, local04, #0
1e40c     E9 34 0E F2 | 	cmp	result1, #233 wz
1e410     49 97 02 56 |  if_ne	mov	local06, local04
1e414     4B 97 E2 58 |  if_ne	getbyte	local06, local06, #0
1e418     E8 96 0E 52 |  if_ne	cmp	local06, #232 wz
1e41c     64 01 90 5D |  if_ne	jmp	#LR__1126
1e420                 | LR__1122
1e420     48 95 32 F9 | 	getword	local05, local03, #0
1e424     55 00 00 FF 
1e428     55 94 0E F2 | 	cmp	local05, ##43605 wz
1e42c     2C 00 90 5D |  if_ne	jmp	#LR__1123
1e430     30 8C 06 F1 | 	add	local01, #48
1e434     46 75 02 F6 | 	mov	arg01, local01
1e438     30 8C 86 F1 | 	sub	local01, #48
1e43c     52 74 06 F1 | 	add	arg01, #82
1e440     53 01 00 FF 
1e444     6C 77 06 F6 | 	mov	arg02, ##@LR__2280
1e448     08 78 06 F6 | 	mov	arg03, #8
1e44c     38 DB BF FD | 	call	#_fatfs_cc_memcmp
1e450     00 34 0E F2 | 	cmp	result1, #0 wz
1e454                 | ' 			return 0;
1e454     00 34 06 A6 |  if_e	mov	result1, #0
1e458     40 01 90 AD |  if_e	jmp	#LR__1127
1e45c                 | LR__1123
1e45c     30 8C 06 F1 | 	add	local01, #48
1e460     46 75 02 F6 | 	mov	arg01, local01
1e464     0B 74 06 F1 | 	add	arg01, #11
1e468                 | ' {
1e468                 | ' 
1e468                 | ' 	return *((WORD*)ptr);
1e468     3A 99 E2 FA | 	rdword	local07, arg01
1e46c     0D 8C 06 F1 | 	add	local01, #13
1e470     46 93 C2 FA | 	rdbyte	local04, local01
1e474     3D 8C 86 F1 | 	sub	local01, #61
1e478     4C 95 32 F9 | 	getword	local05, local07, #0
1e47c     4C 9B 32 F9 | 	getword	local08, local07, #0
1e480     01 9A 86 F1 | 	sub	local08, #1
1e484     4D 95 0A F5 | 	and	local05, local08 wz
1e488     F8 00 90 5D |  if_ne	jmp	#LR__1125
1e48c     4C 97 32 F9 | 	getword	local06, local07, #0
1e490     01 00 00 FF 
1e494     00 96 16 F2 | 	cmp	local06, ##512 wc
1e498     E8 00 90 CD |  if_b	jmp	#LR__1125
1e49c     4C 9D 32 F9 | 	getword	local09, local07, #0
1e4a0     01 00 00 FF 
1e4a4     01 9C 16 F2 | 	cmp	local09, ##513 wc
1e4a8     D8 00 90 3D |  if_ae	jmp	#LR__1125
1e4ac     49 9F 02 F6 | 	mov	local10, local04
1e4b0     07 9E 4E F7 | 	zerox	local10, #7 wz
1e4b4     CC 00 90 AD |  if_e	jmp	#LR__1125
1e4b8     49 A1 E2 F8 | 	getbyte	local11, local04, #0
1e4bc     49 A3 E2 F8 | 	getbyte	local12, local04, #0
1e4c0     01 A2 86 F1 | 	sub	local12, #1
1e4c4     51 A1 0A F5 | 	and	local11, local12 wz
1e4c8     B8 00 90 5D |  if_ne	jmp	#LR__1125
1e4cc     30 8C 06 F1 | 	add	local01, #48
1e4d0     46 75 02 F6 | 	mov	arg01, local01
1e4d4     30 8C 86 F1 | 	sub	local01, #48
1e4d8     0E 74 06 F1 | 	add	arg01, #14
1e4dc                 | ' {
1e4dc                 | ' 
1e4dc                 | ' 	return *((WORD*)ptr);
1e4dc     3A A5 E2 FA | 	rdword	local13, arg01
1e4e0     52 A7 02 F6 | 	mov	local14, local13
1e4e4     0F A6 4E F7 | 	zerox	local14, #15 wz
1e4e8     98 00 90 AD |  if_e	jmp	#LR__1125
1e4ec     40 8C 06 F1 | 	add	local01, #64
1e4f0     46 A9 C2 FA | 	rdbyte	local15, local01
1e4f4     40 8C 86 F1 | 	sub	local01, #64
1e4f8     54 AB E2 F8 | 	getbyte	local16, local15, #0
1e4fc     01 AA 86 F1 | 	sub	local16, #1
1e500     02 AA 16 F2 | 	cmp	local16, #2 wc
1e504     7C 00 90 3D |  if_ae	jmp	#LR__1125
1e508     30 8C 06 F1 | 	add	local01, #48
1e50c     46 75 02 F6 | 	mov	arg01, local01
1e510     30 8C 86 F1 | 	sub	local01, #48
1e514     11 74 06 F1 | 	add	arg01, #17
1e518                 | ' {
1e518                 | ' 
1e518                 | ' 	return *((WORD*)ptr);
1e518     3A AD E2 FA | 	rdword	local17, arg01
1e51c     56 AF 02 F6 | 	mov	local18, local17
1e520     0F AE 4E F7 | 	zerox	local18, #15 wz
1e524     5C 00 90 AD |  if_e	jmp	#LR__1125
1e528     30 8C 06 F1 | 	add	local01, #48
1e52c     46 75 02 F6 | 	mov	arg01, local01
1e530     30 8C 86 F1 | 	sub	local01, #48
1e534     13 74 06 F1 | 	add	arg01, #19
1e538                 | ' {
1e538                 | ' 
1e538                 | ' 	return *((WORD*)ptr);
1e538     3A B1 E2 FA | 	rdword	local19, arg01
1e53c     58 B3 32 F9 | 	getword	local20, local19, #0
1e540     80 B2 16 F2 | 	cmp	local20, #128 wc
1e544     24 00 90 3D |  if_ae	jmp	#LR__1124
1e548     30 8C 06 F1 | 	add	local01, #48
1e54c     46 B5 02 F6 | 	mov	local21, local01
1e550     5A B7 02 F6 | 	mov	local22, local21
1e554     20 B6 06 F1 | 	add	local22, #32
1e558                 | ' {
1e558                 | ' 
1e558                 | ' 	return *((DWORD*)ptr);
1e558     5B B9 02 FB | 	rdlong	local23, local22
1e55c     80 00 00 FF 
1e560     00 B8 16 F2 | 	cmp	local23, ##65536 wc
1e564     30 8C 86 F1 | 	sub	local01, #48
1e568     18 00 90 CD |  if_b	jmp	#LR__1125
1e56c                 | LR__1124
1e56c     30 8C 06 F1 | 	add	local01, #48
1e570     46 75 02 F6 | 	mov	arg01, local01
1e574     16 74 06 F1 | 	add	arg01, #22
1e578                 | ' {
1e578                 | ' 
1e578                 | ' 	return *((WORD*)ptr);
1e578     3A 35 EA FA | 	rdword	result1, arg01 wz
1e57c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1e57c                 | ' 			&& ld_word(fs->win +  14 ) != 0
1e57c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1e57c                 | ' 			&& ld_word(fs->win +  17 ) != 0
1e57c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1e57c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1e57c                 | ' 				return 0;
1e57c     00 34 06 56 |  if_ne	mov	result1, #0
1e580     18 00 90 5D |  if_ne	jmp	#LR__1127
1e584                 | LR__1125
1e584                 | LR__1126
1e584                 | ' 		}
1e584                 | ' 	}
1e584                 | ' 	return sign == 0xAA55 ? 2 : 3;
1e584     48 9B 32 F9 | 	getword	local08, local03, #0
1e588     55 00 00 FF 
1e58c     55 9A 0E F2 | 	cmp	local08, ##43605 wz
1e590     02 94 06 A6 |  if_e	mov	local05, #2
1e594     03 94 06 56 |  if_ne	mov	local05, #3
1e598     4A 35 02 F6 | 	mov	result1, local05
1e59c                 | LR__1127
1e59c     A8 F0 03 F6 | 	mov	ptra, fp
1e5a0     B3 00 A0 FD | 	call	#popregs_
1e5a4                 | _fatfs_cc_check_fs_ret
1e5a4     2D 00 64 FD | 	ret
1e5a8                 | 
1e5a8                 | _fatfs_cc_find_volume
1e5a8     0C 4C 05 F6 | 	mov	COUNT_, #12
1e5ac     A9 00 A0 FD | 	call	#pushregs_
1e5b0     24 F0 07 F1 | 	add	ptra, #36
1e5b4     3A 8D 02 F6 | 	mov	local01, arg01
1e5b8     3B 8F 02 F6 | 	mov	local02, arg02
1e5bc     46 75 02 F6 | 	mov	arg01, local01
1e5c0     00 76 06 F6 | 	mov	arg02, #0
1e5c4     DC FD BF FD | 	call	#_fatfs_cc_check_fs
1e5c8     1A 91 02 F6 | 	mov	local03, result1
1e5cc     48 93 02 F6 | 	mov	local04, local03
1e5d0     02 92 0E F2 | 	cmp	local04, #2 wz
1e5d4     10 00 90 AD |  if_e	jmp	#LR__1128
1e5d8     03 92 16 F2 | 	cmp	local04, #3 wc
1e5dc     00 8E 0E C2 |  if_b	cmp	local02, #0 wz
1e5e0     49 35 02 B6 |  if_nc_or_z	mov	result1, local04
1e5e4     F8 00 90 BD |  if_nc_or_z	jmp	#LR__1136
1e5e8                 | LR__1128
1e5e8                 | ' 	for (i = 0; i < 4; i++) {
1e5e8     00 94 06 F6 | 	mov	local05, #0
1e5ec     64 1A 9E FE | 	loc	pa,	#(@LR__1130-@LR__1129)
1e5f0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
1e5f4                 | LR__1129
1e5f4     04 94 16 F2 | 	cmp	local05, #4 wc
1e5f8     4C 00 90 3D |  if_ae	jmp	#LR__1131
1e5fc     4A 91 02 F6 | 	mov	local03, local05
1e600     02 90 66 F0 | 	shl	local03, #2
1e604     14 50 05 F1 | 	add	fp, #20
1e608     A8 90 02 F1 | 	add	local03, fp
1e60c     30 8C 06 F1 | 	add	local01, #48
1e610     46 97 02 F6 | 	mov	local06, local01
1e614     4B 75 02 F6 | 	mov	arg01, local06
1e618     BE 75 06 F1 | 	add	arg01, #446
1e61c     4A 99 02 F6 | 	mov	local07, local05
1e620     04 98 66 F0 | 	shl	local07, #4
1e624     4C 9B 02 F6 | 	mov	local08, local07
1e628     4C 75 02 F1 | 	add	arg01, local07
1e62c     08 74 06 F1 | 	add	arg01, #8
1e630                 | ' {
1e630                 | ' 
1e630                 | ' 	return *((DWORD*)ptr);
1e630     3A 35 02 FB | 	rdlong	result1, arg01
1e634     14 50 85 F1 | 	sub	fp, #20
1e638     48 35 62 FC | 	wrlong	result1, local03
1e63c     01 94 06 F1 | 	add	local05, #1
1e640     30 8C 86 F1 | 	sub	local01, #48
1e644     AC FF 9F FD | 	jmp	#LR__1129
1e648                 | LR__1130
1e648                 | LR__1131
1e648     00 8E 0E F2 | 	cmp	local02, #0 wz
1e64c     47 91 02 56 |  if_ne	mov	local03, local02
1e650     01 90 86 51 |  if_ne	sub	local03, #1
1e654     00 90 06 A6 |  if_e	mov	local03, #0
1e658     48 95 02 F6 | 	mov	local05, local03
1e65c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1e65c                 | ' 	}
1e65c                 | ' 	i = part ? part - 1 : 0;
1e65c                 | ' 	do {
1e65c                 | LR__1132
1e65c     4A 9D 02 F6 | 	mov	local09, local05
1e660     02 9C 66 F0 | 	shl	local09, #2
1e664     14 50 05 F1 | 	add	fp, #20
1e668     A8 9E 02 F6 | 	mov	local10, fp
1e66c     A8 9C 02 F1 | 	add	local09, fp
1e670     4E A1 0A FB | 	rdlong	local11, local09 wz
1e674     14 50 85 F1 | 	sub	fp, #20
1e678     34 00 90 AD |  if_e	jmp	#LR__1133
1e67c     4A 9B 02 F6 | 	mov	local08, local05
1e680     02 9A 66 F0 | 	shl	local08, #2
1e684     14 50 05 F1 | 	add	fp, #20
1e688     A8 A2 02 F6 | 	mov	local12, fp
1e68c     A8 9A 02 F1 | 	add	local08, fp
1e690     4D 99 02 FB | 	rdlong	local07, local08
1e694     46 75 02 F6 | 	mov	arg01, local01
1e698     4C 77 02 F6 | 	mov	arg02, local07
1e69c     14 50 85 F1 | 	sub	fp, #20
1e6a0     00 FD BF FD | 	call	#_fatfs_cc_check_fs
1e6a4     1A 97 02 F6 | 	mov	local06, result1
1e6a8     4B 91 02 F6 | 	mov	local03, local06
1e6ac     04 00 90 FD | 	jmp	#LR__1134
1e6b0                 | LR__1133
1e6b0     03 90 06 F6 | 	mov	local03, #3
1e6b4                 | LR__1134
1e6b4     48 93 02 F6 | 	mov	local04, local03
1e6b8     00 8E 0E F2 | 	cmp	local02, #0 wz
1e6bc     1C 00 90 5D |  if_ne	jmp	#LR__1135
1e6c0     02 92 16 F2 | 	cmp	local04, #2 wc
1e6c4     14 00 90 CD |  if_b	jmp	#LR__1135
1e6c8     4A 91 02 F6 | 	mov	local03, local05
1e6cc     01 90 06 F1 | 	add	local03, #1
1e6d0     48 95 02 F6 | 	mov	local05, local03
1e6d4     04 94 16 F2 | 	cmp	local05, #4 wc
1e6d8     80 FF 9F CD |  if_b	jmp	#LR__1132
1e6dc                 | LR__1135
1e6dc                 | ' 	return fmt;
1e6dc     49 35 02 F6 | 	mov	result1, local04
1e6e0                 | LR__1136
1e6e0     A8 F0 03 F6 | 	mov	ptra, fp
1e6e4     B3 00 A0 FD | 	call	#popregs_
1e6e8                 | _fatfs_cc_find_volume_ret
1e6e8     2D 00 64 FD | 	ret
1e6ec                 | 
1e6ec                 | _fatfs_cc_mount_volume
1e6ec     18 4C 05 F6 | 	mov	COUNT_, #24
1e6f0     A9 00 A0 FD | 	call	#pushregs_
1e6f4     3A 8D 02 F6 | 	mov	local01, arg01
1e6f8     3B 8F 02 F6 | 	mov	local02, arg02
1e6fc     3C 91 02 F6 | 	mov	local03, arg03
1e700     47 01 68 FC | 	wrlong	#0, local02
1e704     46 75 02 F6 | 	mov	arg01, local01
1e708     FC FB BF FD | 	call	#_fatfs_cc_get_ldnumber
1e70c     1A 93 02 F6 | 	mov	local04, result1
1e710     00 92 56 F2 | 	cmps	local04, #0 wc
1e714     0B 34 06 C6 |  if_b	mov	result1, #11
1e718     90 05 90 CD |  if_b	jmp	#LR__1148
1e71c     49 75 02 F6 | 	mov	arg01, local04
1e720     02 74 66 F0 | 	shl	arg01, #2
1e724     C9 74 02 F1 | 	add	arg01, objptr
1e728     3A 95 0A FB | 	rdlong	local05, arg01 wz
1e72c     0C 34 06 A6 |  if_e	mov	result1, #12
1e730     78 05 90 AD |  if_e	jmp	#LR__1148
1e734     47 95 62 FC | 	wrlong	local05, local02
1e738     48 91 E2 F8 | 	getbyte	local03, local03, #0
1e73c     FE 90 06 F5 | 	and	local03, #254
1e740     4A 75 CA FA | 	rdbyte	arg01, local05 wz
1e744     44 00 90 AD |  if_e	jmp	#LR__1138
1e748     01 94 06 F1 | 	add	local05, #1
1e74c     4A 75 CA FA | 	rdbyte	arg01, local05 wz
1e750     01 94 86 F1 | 	sub	local05, #1
1e754     01 34 06 56 |  if_ne	mov	result1, #1
1e758                 | ' 
1e758                 | ' 	return Stat;
1e758     18 92 05 A1 |  if_e	add	objptr, #24
1e75c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1e760     18 92 85 A1 |  if_e	sub	objptr, #24
1e764     1A 75 E2 F8 | 	getbyte	arg01, result1, #0
1e768     01 74 CE F7 | 	test	arg01, #1 wz
1e76c     1C 00 90 5D |  if_ne	jmp	#LR__1137
1e770     00 90 0E F2 | 	cmp	local03, #0 wz
1e774     1A 35 E2 58 |  if_ne	getbyte	result1, result1, #0
1e778     04 34 0E 55 |  if_ne	and	result1, #4 wz
1e77c                 | ' 				return FR_WRITE_PROTECTED;
1e77c     0A 34 06 56 |  if_ne	mov	result1, #10
1e780     28 05 90 5D |  if_ne	jmp	#LR__1148
1e784                 | ' 			}
1e784                 | ' 			return FR_OK;
1e784     00 34 06 F6 | 	mov	result1, #0
1e788     20 05 90 FD | 	jmp	#LR__1148
1e78c                 | LR__1137
1e78c                 | LR__1138
1e78c     4A 01 48 FC | 	wrbyte	#0, local05
1e790     01 94 06 F1 | 	add	local05, #1
1e794     4A 93 42 FC | 	wrbyte	local04, local05
1e798     4A 75 C2 FA | 	rdbyte	arg01, local05
1e79c     01 94 86 F1 | 	sub	local05, #1
1e7a0     04 D9 BF FD | 	call	#_fatfs_cc_disk_initialize
1e7a4     1A 97 02 F6 | 	mov	local06, result1
1e7a8     4B 99 E2 F8 | 	getbyte	local07, local06, #0
1e7ac     01 98 CE F7 | 	test	local07, #1 wz
1e7b0                 | ' 		return FR_NOT_READY;
1e7b0     03 34 06 56 |  if_ne	mov	result1, #3
1e7b4     F4 04 90 5D |  if_ne	jmp	#LR__1148
1e7b8     00 90 0E F2 | 	cmp	local03, #0 wz
1e7bc     4B 99 E2 58 |  if_ne	getbyte	local07, local06, #0
1e7c0     04 98 CE 57 |  if_ne	test	local07, #4 wz
1e7c4                 | ' 		return FR_WRITE_PROTECTED;
1e7c4     0A 34 06 56 |  if_ne	mov	result1, #10
1e7c8     E0 04 90 5D |  if_ne	jmp	#LR__1148
1e7cc     4A 75 02 F6 | 	mov	arg01, local05
1e7d0     00 76 06 F6 | 	mov	arg02, #0
1e7d4     D0 FD BF FD | 	call	#_fatfs_cc_find_volume
1e7d8     1A 75 02 F6 | 	mov	arg01, result1
1e7dc     04 74 0E F2 | 	cmp	arg01, #4 wz
1e7e0     01 34 06 A6 |  if_e	mov	result1, #1
1e7e4     C4 04 90 AD |  if_e	jmp	#LR__1148
1e7e8     02 74 16 F2 | 	cmp	arg01, #2 wc
1e7ec     0D 34 06 36 |  if_ae	mov	result1, #13
1e7f0     B8 04 90 3D |  if_ae	jmp	#LR__1148
1e7f4     2C 94 06 F1 | 	add	local05, #44
1e7f8     4A 9B 02 FB | 	rdlong	local08, local05
1e7fc     04 94 06 F1 | 	add	local05, #4
1e800     4A 75 02 F6 | 	mov	arg01, local05
1e804     30 94 86 F1 | 	sub	local05, #48
1e808     0B 74 06 F1 | 	add	arg01, #11
1e80c                 | ' {
1e80c                 | ' 
1e80c                 | ' 	return *((WORD*)ptr);
1e80c     3A 35 E2 FA | 	rdword	result1, arg01
1e810     01 00 00 FF 
1e814     00 34 0E F2 | 	cmp	result1, ##512 wz
1e818     0D 34 06 56 |  if_ne	mov	result1, #13
1e81c     8C 04 90 5D |  if_ne	jmp	#LR__1148
1e820     30 94 06 F1 | 	add	local05, #48
1e824     4A 75 02 F6 | 	mov	arg01, local05
1e828     30 94 86 F1 | 	sub	local05, #48
1e82c     16 74 06 F1 | 	add	arg01, #22
1e830                 | ' {
1e830                 | ' 
1e830                 | ' 	return *((WORD*)ptr);
1e830     3A 35 E2 FA | 	rdword	result1, arg01
1e834     1A 9D 02 F6 | 	mov	local09, result1
1e838     0F 9C 4E F7 | 	zerox	local09, #15 wz
1e83c     18 00 90 5D |  if_ne	jmp	#LR__1139
1e840     30 94 06 F1 | 	add	local05, #48
1e844     4A 75 02 F6 | 	mov	arg01, local05
1e848     30 94 86 F1 | 	sub	local05, #48
1e84c     24 74 06 F1 | 	add	arg01, #36
1e850                 | ' {
1e850                 | ' 
1e850                 | ' 	return *((DWORD*)ptr);
1e850     3A 35 02 FB | 	rdlong	result1, arg01
1e854     1A 9D 02 F6 | 	mov	local09, result1
1e858                 | LR__1139
1e858     18 94 06 F1 | 	add	local05, #24
1e85c     4A 9D 62 FC | 	wrlong	local09, local05
1e860     28 94 06 F1 | 	add	local05, #40
1e864     4A 99 C2 FA | 	rdbyte	local07, local05
1e868     3E 94 86 F1 | 	sub	local05, #62
1e86c     4A 99 42 FC | 	wrbyte	local07, local05
1e870     4A 99 C2 FA | 	rdbyte	local07, local05
1e874     02 94 86 F1 | 	sub	local05, #2
1e878     01 98 0E F2 | 	cmp	local07, #1 wz
1e87c     18 00 90 AD |  if_e	jmp	#LR__1140
1e880     02 94 06 F1 | 	add	local05, #2
1e884     4A 99 C2 FA | 	rdbyte	local07, local05
1e888     02 94 86 F1 | 	sub	local05, #2
1e88c     02 98 0E F2 | 	cmp	local07, #2 wz
1e890     0D 34 06 56 |  if_ne	mov	result1, #13
1e894     14 04 90 5D |  if_ne	jmp	#LR__1148
1e898                 | LR__1140
1e898     02 94 06 F1 | 	add	local05, #2
1e89c     4A 99 C2 FA | 	rdbyte	local07, local05
1e8a0     4C 9D 02 FD | 	qmul	local09, local07
1e8a4     3B 94 06 F1 | 	add	local05, #59
1e8a8     4A 99 C2 FA | 	rdbyte	local07, local05
1e8ac     33 94 86 F1 | 	sub	local05, #51
1e8b0     4A 99 52 FC | 	wrword	local07, local05
1e8b4     4A 99 E2 FA | 	rdword	local07, local05
1e8b8     0A 94 86 F1 | 	sub	local05, #10
1e8bc     0F 98 4E F7 | 	zerox	local07, #15 wz
1e8c0     18 9C 62 FD | 	getqx	local09
1e8c4     20 00 90 AD |  if_e	jmp	#LR__1141
1e8c8     0A 94 06 F1 | 	add	local05, #10
1e8cc     4A 9F E2 FA | 	rdword	local10, local05
1e8d0     4F 99 32 F9 | 	getword	local07, local10, #0
1e8d4     0A 94 86 F1 | 	sub	local05, #10
1e8d8     4F 35 32 F9 | 	getword	result1, local10, #0
1e8dc     01 34 86 F1 | 	sub	result1, #1
1e8e0     1A 99 CA F7 | 	test	local07, result1 wz
1e8e4     08 00 90 AD |  if_e	jmp	#LR__1142
1e8e8                 | LR__1141
1e8e8     0D 34 06 F6 | 	mov	result1, #13
1e8ec     BC 03 90 FD | 	jmp	#LR__1148
1e8f0                 | LR__1142
1e8f0     30 94 06 F1 | 	add	local05, #48
1e8f4     4A 75 02 F6 | 	mov	arg01, local05
1e8f8     11 74 06 F1 | 	add	arg01, #17
1e8fc                 | ' {
1e8fc                 | ' 
1e8fc                 | ' 	return *((WORD*)ptr);
1e8fc     3A 35 E2 FA | 	rdword	result1, arg01
1e900     28 94 86 F1 | 	sub	local05, #40
1e904     4A 35 52 FC | 	wrword	result1, local05
1e908     4A 99 E2 FA | 	rdword	local07, local05
1e90c     08 94 86 F1 | 	sub	local05, #8
1e910     4C 75 52 F6 | 	abs	arg01, local07 wc
1e914     3A 75 42 F8 | 	getnib	arg01, arg01, #0
1e918     3A 75 8A F6 | 	negc	arg01, arg01 wz
1e91c     0D 34 06 56 |  if_ne	mov	result1, #13
1e920     88 03 90 5D |  if_ne	jmp	#LR__1148
1e924     30 94 06 F1 | 	add	local05, #48
1e928     4A 75 02 F6 | 	mov	arg01, local05
1e92c     30 94 86 F1 | 	sub	local05, #48
1e930     13 74 06 F1 | 	add	arg01, #19
1e934                 | ' {
1e934                 | ' 
1e934                 | ' 	return *((WORD*)ptr);
1e934     3A 35 E2 FA | 	rdword	result1, arg01
1e938     1A A1 0A F6 | 	mov	local11, result1 wz
1e93c     30 94 06 A1 |  if_e	add	local05, #48
1e940     4A 75 02 A6 |  if_e	mov	arg01, local05
1e944     30 94 86 A1 |  if_e	sub	local05, #48
1e948     20 74 06 A1 |  if_e	add	arg01, #32
1e94c                 | ' {
1e94c                 | ' 
1e94c                 | ' 	return *((DWORD*)ptr);
1e94c     3A A1 02 AB |  if_e	rdlong	local11, arg01
1e950     30 94 06 F1 | 	add	local05, #48
1e954     4A 75 02 F6 | 	mov	arg01, local05
1e958     30 94 86 F1 | 	sub	local05, #48
1e95c     0E 74 06 F1 | 	add	arg01, #14
1e960                 | ' {
1e960                 | ' 
1e960                 | ' 	return *((WORD*)ptr);
1e960     3A 35 E2 FA | 	rdword	result1, arg01
1e964     1A A3 02 F6 | 	mov	local12, result1
1e968     51 99 02 F6 | 	mov	local07, local12
1e96c     0F 98 4E F7 | 	zerox	local07, #15 wz
1e970     0D 34 06 A6 |  if_e	mov	result1, #13
1e974     34 03 90 AD |  if_e	jmp	#LR__1148
1e978     51 A5 32 F9 | 	getword	local13, local12, #0
1e97c     4E A5 02 F1 | 	add	local13, local09
1e980     08 94 06 F1 | 	add	local05, #8
1e984     4A 99 E2 FA | 	rdword	local07, local05
1e988     08 94 86 F1 | 	sub	local05, #8
1e98c     4C 99 52 F6 | 	abs	local07, local07 wc
1e990     04 98 46 F0 | 	shr	local07, #4
1e994     4C 99 82 F6 | 	negc	local07, local07
1e998     4C A5 02 F1 | 	add	local13, local07
1e99c     52 A1 12 F2 | 	cmp	local11, local13 wc
1e9a0     0D 34 06 C6 |  if_b	mov	result1, #13
1e9a4     04 03 90 CD |  if_b	jmp	#LR__1148
1e9a8     50 99 02 F6 | 	mov	local07, local11
1e9ac     52 99 82 F1 | 	sub	local07, local13
1e9b0     0A 94 06 F1 | 	add	local05, #10
1e9b4     4A 75 E2 FA | 	rdword	arg01, local05
1e9b8     3A 99 12 FD | 	qdiv	local07, arg01
1e9bc     0A 94 86 F1 | 	sub	local05, #10
1e9c0     18 A6 62 FD | 	getqx	local14
1e9c4     00 A6 0E F2 | 	cmp	local14, #0 wz
1e9c8     0D 34 06 A6 |  if_e	mov	result1, #13
1e9cc     DC 02 90 AD |  if_e	jmp	#LR__1148
1e9d0     00 A8 06 F6 | 	mov	local15, #0
1e9d4     FF FF 07 FF 
1e9d8     F6 A7 16 F2 | 	cmp	local14, ##268435446 wc
1e9dc     03 A8 06 C6 |  if_b	mov	local15, #3
1e9e0     7F 00 00 FF 
1e9e4     F6 A7 16 F2 | 	cmp	local14, ##65526 wc
1e9e8     02 A8 06 C6 |  if_b	mov	local15, #2
1e9ec     07 00 00 FF 
1e9f0     F6 A7 16 F2 | 	cmp	local14, ##4086 wc
1e9f4     01 A8 06 C6 |  if_b	mov	local15, #1
1e9f8     00 A8 0E F2 | 	cmp	local15, #0 wz
1e9fc     0D 34 06 A6 |  if_e	mov	result1, #13
1ea00     A8 02 90 AD |  if_e	jmp	#LR__1148
1ea04     53 99 02 F6 | 	mov	local07, local14
1ea08     02 98 06 F1 | 	add	local07, #2
1ea0c     14 94 06 F1 | 	add	local05, #20
1ea10     4A 99 62 FC | 	wrlong	local07, local05
1ea14     08 94 06 F1 | 	add	local05, #8
1ea18     4A 9B 62 FC | 	wrlong	local08, local05
1ea1c     4D 99 02 F6 | 	mov	local07, local08
1ea20     51 77 32 F9 | 	getword	arg02, local12, #0
1ea24     3B 99 02 F1 | 	add	local07, arg02
1ea28     04 94 06 F1 | 	add	local05, #4
1ea2c     4A 99 62 FC | 	wrlong	local07, local05
1ea30     4D 99 02 F6 | 	mov	local07, local08
1ea34     52 99 02 F1 | 	add	local07, local13
1ea38     08 94 06 F1 | 	add	local05, #8
1ea3c     4A 99 62 FC | 	wrlong	local07, local05
1ea40     28 94 86 F1 | 	sub	local05, #40
1ea44     03 A8 0E F2 | 	cmp	local15, #3 wz
1ea48     60 00 90 5D |  if_ne	jmp	#LR__1143
1ea4c     30 94 06 F1 | 	add	local05, #48
1ea50     4A 75 02 F6 | 	mov	arg01, local05
1ea54     30 94 86 F1 | 	sub	local05, #48
1ea58     2A 74 06 F1 | 	add	arg01, #42
1ea5c                 | ' {
1ea5c                 | ' 
1ea5c                 | ' 	return *((WORD*)ptr);
1ea5c     3A 35 EA FA | 	rdword	result1, arg01 wz
1ea60     0D 34 06 56 |  if_ne	mov	result1, #13
1ea64     44 02 90 5D |  if_ne	jmp	#LR__1148
1ea68     08 94 06 F1 | 	add	local05, #8
1ea6c     4A 99 E2 FA | 	rdword	local07, local05
1ea70     08 94 86 F1 | 	sub	local05, #8
1ea74     0F 98 4E F7 | 	zerox	local07, #15 wz
1ea78     0D 34 06 56 |  if_ne	mov	result1, #13
1ea7c     2C 02 90 5D |  if_ne	jmp	#LR__1148
1ea80     30 94 06 F1 | 	add	local05, #48
1ea84     4A 75 02 F6 | 	mov	arg01, local05
1ea88     2C 74 06 F1 | 	add	arg01, #44
1ea8c                 | ' {
1ea8c                 | ' 
1ea8c                 | ' 	return *((DWORD*)ptr);
1ea8c     3A 35 02 FB | 	rdlong	result1, arg01
1ea90     0C 94 86 F1 | 	sub	local05, #12
1ea94     4A 35 62 FC | 	wrlong	result1, local05
1ea98     10 94 86 F1 | 	sub	local05, #16
1ea9c     4A AB 02 FB | 	rdlong	local16, local05
1eaa0     14 94 86 F1 | 	sub	local05, #20
1eaa4     02 AA 66 F0 | 	shl	local16, #2
1eaa8     80 00 90 FD | 	jmp	#LR__1145
1eaac                 | LR__1143
1eaac     08 94 06 F1 | 	add	local05, #8
1eab0     4A 99 E2 FA | 	rdword	local07, local05
1eab4     08 94 86 F1 | 	sub	local05, #8
1eab8     0F 98 4E F7 | 	zerox	local07, #15 wz
1eabc     0D 34 06 A6 |  if_e	mov	result1, #13
1eac0     E8 01 90 AD |  if_e	jmp	#LR__1148
1eac4     20 94 06 F1 | 	add	local05, #32
1eac8     4A 99 02 FB | 	rdlong	local07, local05
1eacc     4E 99 02 F1 | 	add	local07, local09
1ead0     04 94 06 F1 | 	add	local05, #4
1ead4     4A 99 62 FC | 	wrlong	local07, local05
1ead8     24 94 86 F1 | 	sub	local05, #36
1eadc     02 A8 0E F2 | 	cmp	local15, #2 wz
1eae0     14 94 06 A1 |  if_e	add	local05, #20
1eae4     4A 99 02 AB |  if_e	rdlong	local07, local05
1eae8     14 94 86 A1 |  if_e	sub	local05, #20
1eaec     01 98 66 A0 |  if_e	shl	local07, #1
1eaf0     34 00 90 AD |  if_e	jmp	#LR__1144
1eaf4     14 94 06 F1 | 	add	local05, #20
1eaf8     4A AD 02 FB | 	rdlong	local17, local05
1eafc     56 AF 02 F6 | 	mov	local18, local17
1eb00     57 9F 02 F6 | 	mov	local10, local18
1eb04     01 9E 66 F0 | 	shl	local10, #1
1eb08     57 9F 02 F1 | 	add	local10, local18
1eb0c     4F 99 02 F6 | 	mov	local07, local10
1eb10     01 98 46 F0 | 	shr	local07, #1
1eb14     56 B1 02 F6 | 	mov	local19, local17
1eb18     14 94 86 F1 | 	sub	local05, #20
1eb1c     58 B3 02 F6 | 	mov	local20, local19
1eb20     01 B2 06 F5 | 	and	local20, #1
1eb24     59 99 02 F1 | 	add	local07, local20
1eb28                 | LR__1144
1eb28     4C AB 02 F6 | 	mov	local16, local07
1eb2c                 | LR__1145
1eb2c     55 99 02 F6 | 	mov	local07, local16
1eb30     FF 99 06 F1 | 	add	local07, #511
1eb34     09 98 46 F0 | 	shr	local07, #9
1eb38     18 94 06 F1 | 	add	local05, #24
1eb3c     4A 77 02 FB | 	rdlong	arg02, local05
1eb40     18 94 86 F1 | 	sub	local05, #24
1eb44     4C 77 12 F2 | 	cmp	arg02, local07 wc
1eb48     0D 34 06 C6 |  if_b	mov	result1, #13
1eb4c     5C 01 90 CD |  if_b	jmp	#LR__1148
1eb50     10 94 06 F1 | 	add	local05, #16
1eb54     FF FF FF FF 
1eb58     4A FF 6B FC | 	wrlong	##-1, local05
1eb5c     04 94 86 F1 | 	sub	local05, #4
1eb60     FF FF FF FF 
1eb64     4A FF 6B FC | 	wrlong	##-1, local05
1eb68     08 94 86 F1 | 	sub	local05, #8
1eb6c     4A 01 49 FC | 	wrbyte	#128, local05
1eb70     04 94 86 F1 | 	sub	local05, #4
1eb74     03 A8 0E F2 | 	cmp	local15, #3 wz
1eb78     08 01 90 5D |  if_ne	jmp	#LR__1147
1eb7c     30 94 06 F1 | 	add	local05, #48
1eb80     4A 75 02 F6 | 	mov	arg01, local05
1eb84     30 94 86 F1 | 	sub	local05, #48
1eb88     30 74 06 F1 | 	add	arg01, #48
1eb8c                 | ' {
1eb8c                 | ' 
1eb8c                 | ' 	return *((WORD*)ptr);
1eb8c     3A 35 E2 FA | 	rdword	result1, arg01
1eb90     1A 99 32 F9 | 	getword	local07, result1, #0
1eb94     01 98 0E F2 | 	cmp	local07, #1 wz
1eb98     E8 00 90 5D |  if_ne	jmp	#LR__1147
1eb9c     4D B5 02 F6 | 	mov	local21, local08
1eba0     01 B4 06 F1 | 	add	local21, #1
1eba4     4A 75 02 F6 | 	mov	arg01, local05
1eba8     5A 77 02 F6 | 	mov	arg02, local21
1ebac     A8 E0 BF FD | 	call	#_fatfs_cc_move_window
1ebb0     00 34 0E F2 | 	cmp	result1, #0 wz
1ebb4     CC 00 90 5D |  if_ne	jmp	#LR__1147
1ebb8     04 94 06 F1 | 	add	local05, #4
1ebbc     4A 01 48 FC | 	wrbyte	#0, local05
1ebc0     2C 94 06 F1 | 	add	local05, #44
1ebc4     4A B7 02 F6 | 	mov	local22, local05
1ebc8     5B B9 02 F6 | 	mov	local23, local22
1ebcc     FE B9 06 F1 | 	add	local23, #510
1ebd0     5C 75 02 F6 | 	mov	arg01, local23
1ebd4                 | ' {
1ebd4                 | ' 
1ebd4                 | ' 	return *((WORD*)ptr);
1ebd4     3A 35 E2 FA | 	rdword	result1, arg01
1ebd8     1A BB 02 F6 | 	mov	local24, result1
1ebdc     5D 99 32 F9 | 	getword	local07, local24, #0
1ebe0     55 00 00 FF 
1ebe4     55 98 0E F2 | 	cmp	local07, ##43605 wz
1ebe8     30 94 86 F1 | 	sub	local05, #48
1ebec     94 00 90 5D |  if_ne	jmp	#LR__1146
1ebf0     30 94 06 F1 | 	add	local05, #48
1ebf4     4A B5 02 F6 | 	mov	local21, local05
1ebf8     5A B7 02 F6 | 	mov	local22, local21
1ebfc     5B 75 02 F6 | 	mov	arg01, local22
1ec00                 | ' {
1ec00                 | ' 
1ec00                 | ' 	return *((DWORD*)ptr);
1ec00     3A 35 02 FB | 	rdlong	result1, arg01
1ec04     1A B9 02 F6 | 	mov	local23, result1
1ec08     A9 B0 20 FF 
1ec0c     52 B8 0E F2 | 	cmp	local23, ##1096897106 wz
1ec10     30 94 86 F1 | 	sub	local05, #48
1ec14     6C 00 90 5D |  if_ne	jmp	#LR__1146
1ec18     30 94 06 F1 | 	add	local05, #48
1ec1c     4A 9F 02 F6 | 	mov	local10, local05
1ec20     4F B5 02 F6 | 	mov	local21, local10
1ec24     E4 B5 06 F1 | 	add	local21, #484
1ec28     5A 75 02 F6 | 	mov	arg01, local21
1ec2c                 | ' {
1ec2c                 | ' 
1ec2c                 | ' 	return *((DWORD*)ptr);
1ec2c     3A 35 02 FB | 	rdlong	result1, arg01
1ec30     1A B7 02 F6 | 	mov	local22, result1
1ec34     B9 A0 30 FF 
1ec38     72 B6 0E F2 | 	cmp	local22, ##1631679090 wz
1ec3c     30 94 86 F1 | 	sub	local05, #48
1ec40     40 00 90 5D |  if_ne	jmp	#LR__1146
1ec44     30 94 06 F1 | 	add	local05, #48
1ec48     4A 75 02 F6 | 	mov	arg01, local05
1ec4c     E8 75 06 F1 | 	add	arg01, #488
1ec50                 | ' {
1ec50                 | ' 
1ec50                 | ' 	return *((DWORD*)ptr);
1ec50     3A 35 02 FB | 	rdlong	result1, arg01
1ec54     20 94 86 F1 | 	sub	local05, #32
1ec58     4A 35 62 FC | 	wrlong	result1, local05
1ec5c     20 94 06 F1 | 	add	local05, #32
1ec60     4A B9 02 F6 | 	mov	local23, local05
1ec64     5C BB 02 F6 | 	mov	local24, local23
1ec68     EC BB 06 F1 | 	add	local24, #492
1ec6c     5D 75 02 F6 | 	mov	arg01, local24
1ec70                 | ' {
1ec70                 | ' 
1ec70                 | ' 	return *((DWORD*)ptr);
1ec70     3A 35 02 FB | 	rdlong	result1, arg01
1ec74     1A 99 02 F6 | 	mov	local07, result1
1ec78     24 94 86 F1 | 	sub	local05, #36
1ec7c     4A 99 62 FC | 	wrlong	local07, local05
1ec80     0C 94 86 F1 | 	sub	local05, #12
1ec84                 | LR__1146
1ec84                 | LR__1147
1ec84     4A A9 42 FC | 	wrbyte	local15, local05
1ec88     04 92 05 F1 | 	add	objptr, #4
1ec8c     C9 98 E2 FA | 	rdword	local07, objptr
1ec90     01 98 06 F1 | 	add	local07, #1
1ec94     C9 98 52 FC | 	wrword	local07, objptr
1ec98     C9 B8 E2 FA | 	rdword	local23, objptr
1ec9c     04 92 85 F1 | 	sub	objptr, #4
1eca0     06 94 06 F1 | 	add	local05, #6
1eca4     4A B9 52 FC | 	wrword	local23, local05
1eca8                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1eca8                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1eca8                 | ' 			{
1eca8                 | ' 
1eca8                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1eca8                 | ' 
1eca8                 | ' 
1eca8                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1eca8                 | ' 
1eca8                 | ' 			}
1eca8                 | ' 		}
1eca8                 | ' 
1eca8                 | ' 
1eca8                 | ' 	}
1eca8                 | ' 
1eca8                 | ' 	fs->fs_type = (BYTE)fmt;
1eca8                 | ' 	fs->id = ++Fsid;
1eca8                 | ' #line 3567 "ff.c"
1eca8                 | ' 	return FR_OK;
1eca8     00 34 06 F6 | 	mov	result1, #0
1ecac                 | LR__1148
1ecac     A8 F0 03 F6 | 	mov	ptra, fp
1ecb0     B3 00 A0 FD | 	call	#popregs_
1ecb4                 | _fatfs_cc_mount_volume_ret
1ecb4     2D 00 64 FD | 	ret
1ecb8                 | 
1ecb8                 | _fatfs_cc_validate
1ecb8     0B 4C 05 F6 | 	mov	COUNT_, #11
1ecbc     A9 00 A0 FD | 	call	#pushregs_
1ecc0     3A 8D 0A F6 | 	mov	local01, arg01 wz
1ecc4     3B 8F 02 F6 | 	mov	local02, arg02
1ecc8     09 90 06 F6 | 	mov	local03, #9
1eccc     74 00 90 AD |  if_e	jmp	#LR__1149
1ecd0     46 93 0A FB | 	rdlong	local04, local01 wz
1ecd4     6C 00 90 AD |  if_e	jmp	#LR__1149
1ecd8     46 35 02 FB | 	rdlong	result1, local01
1ecdc     1A 35 CA FA | 	rdbyte	result1, result1 wz
1ece0     60 00 90 AD |  if_e	jmp	#LR__1149
1ece4     04 8C 06 F1 | 	add	local01, #4
1ece8     46 95 E2 FA | 	rdword	local05, local01
1ecec     04 8C 86 F1 | 	sub	local01, #4
1ecf0     4A 35 32 F9 | 	getword	result1, local05, #0
1ecf4     46 97 02 FB | 	rdlong	local06, local01
1ecf8     06 96 06 F1 | 	add	local06, #6
1ecfc     4B 99 E2 FA | 	rdword	local07, local06
1ed00     06 96 86 F1 | 	sub	local06, #6
1ed04     4C 9B 32 F9 | 	getword	local08, local07, #0
1ed08     4D 35 0A F2 | 	cmp	result1, local08 wz
1ed0c     34 00 90 5D |  if_ne	jmp	#LR__1149
1ed10     46 9D 02 FB | 	rdlong	local09, local01
1ed14     01 9C 06 F1 | 	add	local09, #1
1ed18     4E 9F C2 FA | 	rdbyte	local10, local09
1ed1c     01 9C 86 F1 | 	sub	local09, #1
1ed20     4F 75 0A F6 | 	mov	arg01, local10 wz
1ed24     01 34 06 56 |  if_ne	mov	result1, #1
1ed28                 | ' 
1ed28                 | ' 	return Stat;
1ed28     18 92 05 A1 |  if_e	add	objptr, #24
1ed2c     C9 34 C2 AA |  if_e	rdbyte	result1, objptr
1ed30     18 92 85 A1 |  if_e	sub	objptr, #24
1ed34     1A A1 02 F6 | 	mov	local11, result1
1ed38     50 93 E2 F8 | 	getbyte	local04, local11, #0
1ed3c     01 92 0E F5 | 	and	local04, #1 wz
1ed40     00 90 06 A6 |  if_e	mov	local03, #0
1ed44                 | LR__1149
1ed44     00 90 0E F2 | 	cmp	local03, #0 wz
1ed48     46 93 02 AB |  if_e	rdlong	local04, local01
1ed4c     00 92 06 56 |  if_ne	mov	local04, #0
1ed50     47 93 62 FC | 	wrlong	local04, local02
1ed54                 | ' 			res = FR_OK;
1ed54                 | ' 		}
1ed54                 | ' 
1ed54                 | ' 	}
1ed54                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1ed54                 | ' 	return res;
1ed54     48 35 02 F6 | 	mov	result1, local03
1ed58     A8 F0 03 F6 | 	mov	ptra, fp
1ed5c     B3 00 A0 FD | 	call	#popregs_
1ed60                 | _fatfs_cc_validate_ret
1ed60     2D 00 64 FD | 	ret
1ed64                 | 
1ed64                 | _fatfs_cc_f_mount
1ed64     01 4C 05 F6 | 	mov	COUNT_, #1
1ed68     A9 00 A0 FD | 	call	#pushregs_
1ed6c     20 F0 07 F1 | 	add	ptra, #32
1ed70     04 50 05 F1 | 	add	fp, #4
1ed74     A8 74 62 FC | 	wrlong	arg01, fp
1ed78     04 50 05 F1 | 	add	fp, #4
1ed7c     A8 76 62 FC | 	wrlong	arg02, fp
1ed80     04 50 05 F1 | 	add	fp, #4
1ed84     A8 78 42 FC | 	wrbyte	arg03, fp
1ed88     04 50 85 F1 | 	sub	fp, #4
1ed8c     A8 78 02 FB | 	rdlong	arg03, fp
1ed90     14 50 05 F1 | 	add	fp, #20
1ed94     A8 78 62 FC | 	wrlong	arg03, fp
1ed98     A8 74 02 F6 | 	mov	arg01, fp
1ed9c     1C 50 85 F1 | 	sub	fp, #28
1eda0     64 F5 BF FD | 	call	#_fatfs_cc_get_ldnumber
1eda4     14 50 05 F1 | 	add	fp, #20
1eda8     A8 34 62 FC | 	wrlong	result1, fp
1edac     14 50 85 F1 | 	sub	fp, #20
1edb0     00 34 56 F2 | 	cmps	result1, #0 wc
1edb4     0B 34 06 C6 |  if_b	mov	result1, #11
1edb8     A8 00 90 CD |  if_b	jmp	#LR__1150
1edbc     14 50 05 F1 | 	add	fp, #20
1edc0     A8 8C 02 FB | 	rdlong	local01, fp
1edc4     02 8C 66 F0 | 	shl	local01, #2
1edc8     C9 8C 02 F1 | 	add	local01, objptr
1edcc     46 8D 0A FB | 	rdlong	local01, local01 wz
1edd0     04 50 85 F1 | 	sub	fp, #4
1edd4     A8 8C 62 FC | 	wrlong	local01, fp
1edd8     10 50 85 F1 | 	sub	fp, #16
1eddc     10 50 05 51 |  if_ne	add	fp, #16
1ede0     A8 8C 02 5B |  if_ne	rdlong	local01, fp
1ede4     10 50 85 51 |  if_ne	sub	fp, #16
1ede8     46 01 48 5C |  if_ne	wrbyte	#0, local01
1edec     04 50 05 F1 | 	add	fp, #4
1edf0     A8 8C 0A FB | 	rdlong	local01, fp wz
1edf4     04 50 85 F1 | 	sub	fp, #4
1edf8     04 50 05 51 |  if_ne	add	fp, #4
1edfc     A8 8C 02 5B |  if_ne	rdlong	local01, fp
1ee00     04 50 85 51 |  if_ne	sub	fp, #4
1ee04     46 01 48 5C |  if_ne	wrbyte	#0, local01
1ee08     14 50 05 F1 | 	add	fp, #20
1ee0c     A8 8C 02 FB | 	rdlong	local01, fp
1ee10     02 8C 66 F0 | 	shl	local01, #2
1ee14     C9 8C 02 F1 | 	add	local01, objptr
1ee18     10 50 85 F1 | 	sub	fp, #16
1ee1c     A8 78 02 FB | 	rdlong	arg03, fp
1ee20     46 79 62 FC | 	wrlong	arg03, local01
1ee24     08 50 05 F1 | 	add	fp, #8
1ee28     A8 8C C2 FA | 	rdbyte	local01, fp
1ee2c     0C 50 85 F1 | 	sub	fp, #12
1ee30     07 8C 4E F7 | 	zerox	local01, #7 wz
1ee34     00 34 06 A6 |  if_e	mov	result1, #0
1ee38     28 00 90 AD |  if_e	jmp	#LR__1150
1ee3c     08 50 05 F1 | 	add	fp, #8
1ee40     A8 74 02 F6 | 	mov	arg01, fp
1ee44     04 50 85 F1 | 	sub	fp, #4
1ee48     A8 76 02 F6 | 	mov	arg02, fp
1ee4c     04 50 85 F1 | 	sub	fp, #4
1ee50     00 78 06 F6 | 	mov	arg03, #0
1ee54     94 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1ee58     18 50 05 F1 | 	add	fp, #24
1ee5c     A8 34 62 FC | 	wrlong	result1, fp
1ee60                 | ' 
1ee60                 | ' 	res = mount_volume(&path, &fs, 0);
1ee60                 | ' 	return res ;
1ee60     18 50 85 F1 | 	sub	fp, #24
1ee64                 | LR__1150
1ee64     A8 F0 03 F6 | 	mov	ptra, fp
1ee68     B3 00 A0 FD | 	call	#popregs_
1ee6c                 | _fatfs_cc_f_mount_ret
1ee6c     2D 00 64 FD | 	ret
1ee70                 | 
1ee70                 | _fatfs_cc_f_open
1ee70     0E 4C 05 F6 | 	mov	COUNT_, #14
1ee74     A9 00 A0 FD | 	call	#pushregs_
1ee78     5C F0 07 F1 | 	add	ptra, #92
1ee7c     04 50 05 F1 | 	add	fp, #4
1ee80     A8 74 62 FC | 	wrlong	arg01, fp
1ee84     04 50 05 F1 | 	add	fp, #4
1ee88     A8 76 62 FC | 	wrlong	arg02, fp
1ee8c     04 50 05 F1 | 	add	fp, #4
1ee90     A8 78 42 FC | 	wrbyte	arg03, fp
1ee94     08 50 85 F1 | 	sub	fp, #8
1ee98     A8 78 0A FB | 	rdlong	arg03, fp wz
1ee9c     04 50 85 F1 | 	sub	fp, #4
1eea0     09 34 06 A6 |  if_e	mov	result1, #9
1eea4     F8 06 90 AD |  if_e	jmp	#LR__1169
1eea8     0C 50 05 F1 | 	add	fp, #12
1eeac     A8 78 C2 FA | 	rdbyte	arg03, fp
1eeb0     3F 78 06 F5 | 	and	arg03, #63
1eeb4     A8 78 42 FC | 	wrbyte	arg03, fp
1eeb8     04 50 85 F1 | 	sub	fp, #4
1eebc     A8 74 02 F6 | 	mov	arg01, fp
1eec0     38 50 05 F1 | 	add	fp, #56
1eec4     A8 76 02 F6 | 	mov	arg02, fp
1eec8     34 50 85 F1 | 	sub	fp, #52
1eecc     A8 8C C2 FA | 	rdbyte	local01, fp
1eed0     0C 50 85 F1 | 	sub	fp, #12
1eed4     46 79 02 F6 | 	mov	arg03, local01
1eed8     10 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1eedc     10 50 05 F1 | 	add	fp, #16
1eee0     A8 34 62 FC | 	wrlong	result1, fp
1eee4     10 50 85 F1 | 	sub	fp, #16
1eee8     00 34 0E F2 | 	cmp	result1, #0 wz
1eeec     88 06 90 5D |  if_ne	jmp	#LR__1168
1eef0     40 50 05 F1 | 	add	fp, #64
1eef4     A8 76 02 FB | 	rdlong	arg02, fp
1eef8     2C 50 85 F1 | 	sub	fp, #44
1eefc     A8 76 62 FC | 	wrlong	arg02, fp
1ef00     A8 74 02 F6 | 	mov	arg01, fp
1ef04     0C 50 85 F1 | 	sub	fp, #12
1ef08     A8 8E 02 FB | 	rdlong	local02, fp
1ef0c     08 50 85 F1 | 	sub	fp, #8
1ef10     47 77 02 F6 | 	mov	arg02, local02
1ef14     E0 F1 BF FD | 	call	#_fatfs_cc_follow_path
1ef18     10 50 05 F1 | 	add	fp, #16
1ef1c     A8 34 62 FC | 	wrlong	result1, fp
1ef20     10 50 85 F1 | 	sub	fp, #16
1ef24     00 34 0E F2 | 	cmp	result1, #0 wz
1ef28     1C 00 90 5D |  if_ne	jmp	#LR__1151
1ef2c     3F 50 05 F1 | 	add	fp, #63
1ef30     A8 90 C2 FA | 	rdbyte	local03, fp
1ef34     3F 50 85 F1 | 	sub	fp, #63
1ef38     80 90 CE F7 | 	test	local03, #128 wz
1ef3c     10 50 05 51 |  if_ne	add	fp, #16
1ef40     A8 0C 68 5C |  if_ne	wrlong	#6, fp
1ef44     10 50 85 51 |  if_ne	sub	fp, #16
1ef48                 | LR__1151
1ef48     0C 50 05 F1 | 	add	fp, #12
1ef4c     A8 90 C2 FA | 	rdbyte	local03, fp
1ef50     0C 50 85 F1 | 	sub	fp, #12
1ef54     1C 90 CE F7 | 	test	local03, #28 wz
1ef58     F0 01 90 AD |  if_e	jmp	#LR__1156
1ef5c     10 50 05 F1 | 	add	fp, #16
1ef60     A8 90 0A FB | 	rdlong	local03, fp wz
1ef64     10 50 85 F1 | 	sub	fp, #16
1ef68     48 00 90 AD |  if_e	jmp	#LR__1153
1ef6c     10 50 05 F1 | 	add	fp, #16
1ef70     A8 90 02 FB | 	rdlong	local03, fp
1ef74     10 50 85 F1 | 	sub	fp, #16
1ef78     04 90 0E F2 | 	cmp	local03, #4 wz
1ef7c     1C 00 90 5D |  if_ne	jmp	#LR__1152
1ef80     14 50 05 F1 | 	add	fp, #20
1ef84     A8 74 02 F6 | 	mov	arg01, fp
1ef88     14 50 85 F1 | 	sub	fp, #20
1ef8c     68 ED BF FD | 	call	#_fatfs_cc_dir_register
1ef90     10 50 05 F1 | 	add	fp, #16
1ef94     A8 34 62 FC | 	wrlong	result1, fp
1ef98     10 50 85 F1 | 	sub	fp, #16
1ef9c                 | LR__1152
1ef9c     0C 50 05 F1 | 	add	fp, #12
1efa0     A8 90 C2 FA | 	rdbyte	local03, fp
1efa4     08 90 46 F5 | 	or	local03, #8
1efa8     A8 90 42 FC | 	wrbyte	local03, fp
1efac     0C 50 85 F1 | 	sub	fp, #12
1efb0     3C 00 90 FD | 	jmp	#LR__1155
1efb4                 | LR__1153
1efb4     1A 50 05 F1 | 	add	fp, #26
1efb8     A8 90 C2 FA | 	rdbyte	local03, fp
1efbc     1A 50 85 F1 | 	sub	fp, #26
1efc0     11 90 CE F7 | 	test	local03, #17 wz
1efc4     10 50 05 51 |  if_ne	add	fp, #16
1efc8     A8 0E 68 5C |  if_ne	wrlong	#7, fp
1efcc     10 50 85 51 |  if_ne	sub	fp, #16
1efd0     1C 00 90 5D |  if_ne	jmp	#LR__1154
1efd4     0C 50 05 F1 | 	add	fp, #12
1efd8     A8 90 C2 FA | 	rdbyte	local03, fp
1efdc     0C 50 85 F1 | 	sub	fp, #12
1efe0     04 90 CE F7 | 	test	local03, #4 wz
1efe4     10 50 05 51 |  if_ne	add	fp, #16
1efe8     A8 10 68 5C |  if_ne	wrlong	#8, fp
1efec     10 50 85 51 |  if_ne	sub	fp, #16
1eff0                 | LR__1154
1eff0                 | LR__1155
1eff0     10 50 05 F1 | 	add	fp, #16
1eff4     A8 90 0A FB | 	rdlong	local03, fp wz
1eff8     10 50 85 F1 | 	sub	fp, #16
1effc     B8 01 90 5D |  if_ne	jmp	#LR__1160
1f000     0C 50 05 F1 | 	add	fp, #12
1f004     A8 8E C2 FA | 	rdbyte	local02, fp
1f008     0C 50 85 F1 | 	sub	fp, #12
1f00c     08 8E CE F7 | 	test	local02, #8 wz
1f010     A4 01 90 AD |  if_e	jmp	#LR__1160
1f014     50 40 B0 FD | 	call	#_fatfs_cc__get_fattime
1f018     50 50 05 F1 | 	add	fp, #80
1f01c     A8 34 62 FC | 	wrlong	result1, fp
1f020     20 50 85 F1 | 	sub	fp, #32
1f024     A8 74 02 FB | 	rdlong	arg01, fp
1f028     0E 74 06 F1 | 	add	arg01, #14
1f02c     3A 35 62 FC | 	wrlong	result1, arg01
1f030     A8 74 02 FB | 	rdlong	arg01, fp
1f034     16 74 06 F1 | 	add	arg01, #22
1f038     20 50 05 F1 | 	add	fp, #32
1f03c     A8 76 02 FB | 	rdlong	arg02, fp
1f040     3A 77 62 FC | 	wrlong	arg02, arg01
1f044     10 50 85 F1 | 	sub	fp, #16
1f048     A8 74 02 FB | 	rdlong	arg01, fp
1f04c     10 50 85 F1 | 	sub	fp, #16
1f050     A8 76 02 FB | 	rdlong	arg02, fp
1f054     30 50 85 F1 | 	sub	fp, #48
1f058     34 EA BF FD | 	call	#_fatfs_cc_ld_clust
1f05c     44 50 05 F1 | 	add	fp, #68
1f060     A8 34 62 FC | 	wrlong	result1, fp
1f064     14 50 85 F1 | 	sub	fp, #20
1f068     A8 90 02 FB | 	rdlong	local03, fp
1f06c     0B 90 06 F1 | 	add	local03, #11
1f070     48 41 48 FC | 	wrbyte	#32, local03
1f074     10 50 05 F1 | 	add	fp, #16
1f078     A8 74 02 FB | 	rdlong	arg01, fp
1f07c     10 50 85 F1 | 	sub	fp, #16
1f080     A8 76 02 FB | 	rdlong	arg02, fp
1f084     30 50 85 F1 | 	sub	fp, #48
1f088     00 78 06 F6 | 	mov	arg03, #0
1f08c     44 EA BF FD | 	call	#_fatfs_cc_st_clust
1f090     30 50 05 F1 | 	add	fp, #48
1f094     A8 74 02 FB | 	rdlong	arg01, fp
1f098     1C 74 06 F1 | 	add	arg01, #28
1f09c     3A 01 68 FC | 	wrlong	#0, arg01
1f0a0     10 50 05 F1 | 	add	fp, #16
1f0a4     A8 90 02 FB | 	rdlong	local03, fp
1f0a8     03 90 06 F1 | 	add	local03, #3
1f0ac     48 03 48 FC | 	wrbyte	#1, local03
1f0b0     04 50 05 F1 | 	add	fp, #4
1f0b4     A8 90 0A FB | 	rdlong	local03, fp wz
1f0b8     44 50 85 F1 | 	sub	fp, #68
1f0bc     F8 00 90 AD |  if_e	jmp	#LR__1160
1f0c0     40 50 05 F1 | 	add	fp, #64
1f0c4     A8 90 02 FB | 	rdlong	local03, fp
1f0c8     2C 90 06 F1 | 	add	local03, #44
1f0cc     48 8F 02 FB | 	rdlong	local02, local03
1f0d0     14 50 05 F1 | 	add	fp, #20
1f0d4     A8 8E 62 FC | 	wrlong	local02, fp
1f0d8     40 50 85 F1 | 	sub	fp, #64
1f0dc     A8 74 02 F6 | 	mov	arg01, fp
1f0e0     30 50 05 F1 | 	add	fp, #48
1f0e4     A8 76 02 FB | 	rdlong	arg02, fp
1f0e8     44 50 85 F1 | 	sub	fp, #68
1f0ec     00 78 06 F6 | 	mov	arg03, #0
1f0f0     A0 E1 BF FD | 	call	#_fatfs_cc_remove_chain
1f0f4     10 50 05 F1 | 	add	fp, #16
1f0f8     A8 34 62 FC | 	wrlong	result1, fp
1f0fc     00 34 4E F2 | 	cmps	result1, #0 wz
1f100     10 50 85 F1 | 	sub	fp, #16
1f104     B0 00 90 5D |  if_ne	jmp	#LR__1160
1f108     40 50 05 F1 | 	add	fp, #64
1f10c     A8 74 02 FB | 	rdlong	arg01, fp
1f110     14 50 05 F1 | 	add	fp, #20
1f114     A8 76 02 FB | 	rdlong	arg02, fp
1f118     54 50 85 F1 | 	sub	fp, #84
1f11c     38 DB BF FD | 	call	#_fatfs_cc_move_window
1f120     10 50 05 F1 | 	add	fp, #16
1f124     A8 34 62 FC | 	wrlong	result1, fp
1f128     30 50 05 F1 | 	add	fp, #48
1f12c     A8 90 02 FB | 	rdlong	local03, fp
1f130     04 50 05 F1 | 	add	fp, #4
1f134     A8 8E 02 FB | 	rdlong	local02, fp
1f138     44 50 85 F1 | 	sub	fp, #68
1f13c     01 8E 86 F1 | 	sub	local02, #1
1f140     0C 90 06 F1 | 	add	local03, #12
1f144     48 8F 62 FC | 	wrlong	local02, local03
1f148     6C 00 90 FD | 	jmp	#LR__1160
1f14c                 | LR__1156
1f14c     10 50 05 F1 | 	add	fp, #16
1f150     A8 90 0A FB | 	rdlong	local03, fp wz
1f154     10 50 85 F1 | 	sub	fp, #16
1f158     5C 00 90 5D |  if_ne	jmp	#LR__1159
1f15c     1A 50 05 F1 | 	add	fp, #26
1f160     A8 90 C2 FA | 	rdbyte	local03, fp
1f164     1A 50 85 F1 | 	sub	fp, #26
1f168     10 90 CE F7 | 	test	local03, #16 wz
1f16c     10 50 05 51 |  if_ne	add	fp, #16
1f170     A8 08 68 5C |  if_ne	wrlong	#4, fp
1f174     10 50 85 51 |  if_ne	sub	fp, #16
1f178     3C 00 90 5D |  if_ne	jmp	#LR__1158
1f17c     0C 50 05 F1 | 	add	fp, #12
1f180     A8 92 C2 FA | 	rdbyte	local04, fp
1f184     0C 50 85 F1 | 	sub	fp, #12
1f188     49 91 E2 F8 | 	getbyte	local03, local04, #0
1f18c     02 90 0E F5 | 	and	local03, #2 wz
1f190     24 00 90 AD |  if_e	jmp	#LR__1157
1f194     1A 50 05 F1 | 	add	fp, #26
1f198     A8 8C C2 FA | 	rdbyte	local01, fp
1f19c     1A 50 85 F1 | 	sub	fp, #26
1f1a0     46 8F E2 F8 | 	getbyte	local02, local01, #0
1f1a4     01 8E 0E F5 | 	and	local02, #1 wz
1f1a8     07 90 06 56 |  if_ne	mov	local03, #7
1f1ac     10 50 05 51 |  if_ne	add	fp, #16
1f1b0     A8 0E 68 5C |  if_ne	wrlong	#7, fp
1f1b4     10 50 85 51 |  if_ne	sub	fp, #16
1f1b8                 | LR__1157
1f1b8                 | LR__1158
1f1b8                 | LR__1159
1f1b8                 | LR__1160
1f1b8     10 50 05 F1 | 	add	fp, #16
1f1bc     A8 90 0A FB | 	rdlong	local03, fp wz
1f1c0     10 50 85 F1 | 	sub	fp, #16
1f1c4     60 00 90 5D |  if_ne	jmp	#LR__1161
1f1c8     0C 50 05 F1 | 	add	fp, #12
1f1cc     A8 90 C2 FA | 	rdbyte	local03, fp
1f1d0     0C 50 85 F1 | 	sub	fp, #12
1f1d4     08 90 CE F7 | 	test	local03, #8 wz
1f1d8     0C 50 05 51 |  if_ne	add	fp, #12
1f1dc     A8 90 C2 5A |  if_ne	rdbyte	local03, fp
1f1e0     40 90 46 55 |  if_ne	or	local03, #64
1f1e4     A8 90 42 5C |  if_ne	wrbyte	local03, fp
1f1e8     0C 50 85 51 |  if_ne	sub	fp, #12
1f1ec     04 50 05 F1 | 	add	fp, #4
1f1f0     A8 90 02 FB | 	rdlong	local03, fp
1f1f4     3C 50 05 F1 | 	add	fp, #60
1f1f8     A8 8E 02 FB | 	rdlong	local02, fp
1f1fc     2C 8E 06 F1 | 	add	local02, #44
1f200     47 93 02 FB | 	rdlong	local04, local02
1f204     20 90 06 F1 | 	add	local03, #32
1f208     48 93 62 FC | 	wrlong	local04, local03
1f20c     3C 50 85 F1 | 	sub	fp, #60
1f210     A8 90 02 FB | 	rdlong	local03, fp
1f214     2C 50 05 F1 | 	add	fp, #44
1f218     A8 8E 02 FB | 	rdlong	local02, fp
1f21c     30 50 85 F1 | 	sub	fp, #48
1f220     24 90 06 F1 | 	add	local03, #36
1f224     48 8F 62 FC | 	wrlong	local02, local03
1f228                 | LR__1161
1f228     10 50 05 F1 | 	add	fp, #16
1f22c     A8 90 0A FB | 	rdlong	local03, fp wz
1f230     10 50 85 F1 | 	sub	fp, #16
1f234     40 03 90 5D |  if_ne	jmp	#LR__1167
1f238     04 50 05 F1 | 	add	fp, #4
1f23c     A8 90 02 FB | 	rdlong	local03, fp
1f240     3C 50 05 F1 | 	add	fp, #60
1f244     A8 74 02 FB | 	rdlong	arg01, fp
1f248     10 50 85 F1 | 	sub	fp, #16
1f24c     A8 76 02 FB | 	rdlong	arg02, fp
1f250     30 50 85 F1 | 	sub	fp, #48
1f254     38 E8 BF FD | 	call	#_fatfs_cc_ld_clust
1f258     08 90 06 F1 | 	add	local03, #8
1f25c     48 35 62 FC | 	wrlong	result1, local03
1f260     04 50 05 F1 | 	add	fp, #4
1f264     A8 90 02 FB | 	rdlong	local03, fp
1f268     2C 50 05 F1 | 	add	fp, #44
1f26c     A8 74 02 FB | 	rdlong	arg01, fp
1f270     1C 74 06 F1 | 	add	arg01, #28
1f274                 | ' {
1f274                 | ' 
1f274                 | ' 	return *((DWORD*)ptr);
1f274     3A 35 02 FB | 	rdlong	result1, arg01
1f278     0C 90 06 F1 | 	add	local03, #12
1f27c     48 35 62 FC | 	wrlong	result1, local03
1f280     2C 50 85 F1 | 	sub	fp, #44
1f284     A8 90 02 FB | 	rdlong	local03, fp
1f288     3C 50 05 F1 | 	add	fp, #60
1f28c     A8 8E 02 FB | 	rdlong	local02, fp
1f290     48 8F 62 FC | 	wrlong	local02, local03
1f294     3C 50 85 F1 | 	sub	fp, #60
1f298     A8 90 02 FB | 	rdlong	local03, fp
1f29c     3C 50 05 F1 | 	add	fp, #60
1f2a0     A8 8E 02 FB | 	rdlong	local02, fp
1f2a4     06 8E 06 F1 | 	add	local02, #6
1f2a8     47 93 E2 FA | 	rdword	local04, local02
1f2ac     04 90 06 F1 | 	add	local03, #4
1f2b0     48 93 52 FC | 	wrword	local04, local03
1f2b4     3C 50 85 F1 | 	sub	fp, #60
1f2b8     A8 90 02 FB | 	rdlong	local03, fp
1f2bc     08 50 05 F1 | 	add	fp, #8
1f2c0     A8 8E C2 FA | 	rdbyte	local02, fp
1f2c4     10 90 06 F1 | 	add	local03, #16
1f2c8     48 8F 42 FC | 	wrbyte	local02, local03
1f2cc     08 50 85 F1 | 	sub	fp, #8
1f2d0     A8 90 02 FB | 	rdlong	local03, fp
1f2d4     11 90 06 F1 | 	add	local03, #17
1f2d8     48 01 48 FC | 	wrbyte	#0, local03
1f2dc     A8 90 02 FB | 	rdlong	local03, fp
1f2e0     1C 90 06 F1 | 	add	local03, #28
1f2e4     48 01 68 FC | 	wrlong	#0, local03
1f2e8     A8 90 02 FB | 	rdlong	local03, fp
1f2ec     14 90 06 F1 | 	add	local03, #20
1f2f0     48 01 68 FC | 	wrlong	#0, local03
1f2f4     A8 74 02 FB | 	rdlong	arg01, fp
1f2f8     04 50 85 F1 | 	sub	fp, #4
1f2fc     28 74 06 F1 | 	add	arg01, #40
1f300     00 76 06 F6 | 	mov	arg02, #0
1f304     09 78 C6 F9 | 	decod	arg03, #9
1f308     3A 95 02 F6 | 	mov	local05, arg01
1f30c     99 00 A0 FD | 	call	#\builtin_bytefill_
1f310     4A 35 02 F6 | 	mov	result1, local05
1f314     0C 50 05 F1 | 	add	fp, #12
1f318     A8 90 C2 FA | 	rdbyte	local03, fp
1f31c     0C 50 85 F1 | 	sub	fp, #12
1f320     20 90 CE F7 | 	test	local03, #32 wz
1f324     50 02 90 AD |  if_e	jmp	#LR__1166
1f328     04 50 05 F1 | 	add	fp, #4
1f32c     A8 8E 02 FB | 	rdlong	local02, fp
1f330     04 50 85 F1 | 	sub	fp, #4
1f334     0C 8E 06 F1 | 	add	local02, #12
1f338     47 97 02 FB | 	rdlong	local06, local02
1f33c     01 96 16 F2 | 	cmp	local06, #1 wc
1f340     34 02 90 CD |  if_b	jmp	#LR__1166
1f344     04 50 05 F1 | 	add	fp, #4
1f348     A8 8E 02 FB | 	rdlong	local02, fp
1f34c     47 91 02 F6 | 	mov	local03, local02
1f350     0C 8E 06 F1 | 	add	local02, #12
1f354     47 93 02 FB | 	rdlong	local04, local02
1f358     14 90 06 F1 | 	add	local03, #20
1f35c     48 93 62 FC | 	wrlong	local04, local03
1f360     3C 50 05 F1 | 	add	fp, #60
1f364     A8 92 02 FB | 	rdlong	local04, fp
1f368     0A 92 06 F1 | 	add	local04, #10
1f36c     49 91 E2 FA | 	rdword	local03, local04
1f370     09 90 66 F0 | 	shl	local03, #9
1f374     08 50 05 F1 | 	add	fp, #8
1f378     A8 90 62 FC | 	wrlong	local03, fp
1f37c     44 50 85 F1 | 	sub	fp, #68
1f380     A8 90 02 FB | 	rdlong	local03, fp
1f384     08 90 06 F1 | 	add	local03, #8
1f388     48 8F 02 FB | 	rdlong	local02, local03
1f38c     48 50 05 F1 | 	add	fp, #72
1f390     A8 8E 62 FC | 	wrlong	local02, fp
1f394                 | ' 				fp->fptr = fp->obj.objsize;
1f394                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1f394                 | ' 				clst = fp->obj.sclust;
1f394                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1f394     48 50 85 F1 | 	sub	fp, #72
1f398     A8 90 02 FB | 	rdlong	local03, fp
1f39c     0C 90 06 F1 | 	add	local03, #12
1f3a0     48 8F 02 FB | 	rdlong	local02, local03
1f3a4     54 50 05 F1 | 	add	fp, #84
1f3a8     A8 8E 62 FC | 	wrlong	local02, fp
1f3ac     58 50 85 F1 | 	sub	fp, #88
1f3b0                 | LR__1162
1f3b0     10 50 05 F1 | 	add	fp, #16
1f3b4     A8 98 02 FB | 	rdlong	local07, fp
1f3b8     10 50 85 F1 | 	sub	fp, #16
1f3bc     4C 8D 0A F6 | 	mov	local01, local07 wz
1f3c0     A4 00 90 5D |  if_ne	jmp	#LR__1163
1f3c4     58 50 05 F1 | 	add	fp, #88
1f3c8     A8 9A 02 FB | 	rdlong	local08, fp
1f3cc     4D 97 02 F6 | 	mov	local06, local08
1f3d0     10 50 85 F1 | 	sub	fp, #16
1f3d4     A8 9C 02 FB | 	rdlong	local09, fp
1f3d8     48 50 85 F1 | 	sub	fp, #72
1f3dc     4E 9F 02 F6 | 	mov	local10, local09
1f3e0     4F 97 1A F2 | 	cmp	local06, local10 wcz
1f3e4     80 00 90 ED |  if_be	jmp	#LR__1163
1f3e8     04 50 05 F1 | 	add	fp, #4
1f3ec     A8 74 02 FB | 	rdlong	arg01, fp
1f3f0     48 50 05 F1 | 	add	fp, #72
1f3f4     A8 76 02 FB | 	rdlong	arg02, fp
1f3f8     4C 50 85 F1 | 	sub	fp, #76
1f3fc     28 DA BF FD | 	call	#_fatfs_cc_get_fat
1f400     4C 50 05 F1 | 	add	fp, #76
1f404     A8 34 62 FC | 	wrlong	result1, fp
1f408     4C 50 85 F1 | 	sub	fp, #76
1f40c     02 34 16 F2 | 	cmp	result1, #2 wc
1f410     10 50 05 C1 |  if_b	add	fp, #16
1f414     A8 04 68 CC |  if_b	wrlong	#2, fp
1f418     10 50 85 C1 |  if_b	sub	fp, #16
1f41c     4C 50 05 F1 | 	add	fp, #76
1f420     A8 98 02 FB | 	rdlong	local07, fp
1f424     4C 50 85 F1 | 	sub	fp, #76
1f428     FF FF 7F FF 
1f42c     FF 99 0E F2 | 	cmp	local07, ##-1 wz
1f430     10 50 05 A1 |  if_e	add	fp, #16
1f434     A8 02 68 AC |  if_e	wrlong	#1, fp
1f438     10 50 85 A1 |  if_e	sub	fp, #16
1f43c     58 50 05 F1 | 	add	fp, #88
1f440     A8 A0 02 FB | 	rdlong	local11, fp
1f444     50 A3 02 F6 | 	mov	local12, local11
1f448     10 50 85 F1 | 	sub	fp, #16
1f44c     A8 A4 02 FB | 	rdlong	local13, fp
1f450     52 A7 02 F6 | 	mov	local14, local13
1f454     53 A3 82 F1 | 	sub	local12, local14
1f458     10 50 05 F1 | 	add	fp, #16
1f45c     A8 A2 62 FC | 	wrlong	local12, fp
1f460     58 50 85 F1 | 	sub	fp, #88
1f464     48 FF 9F FD | 	jmp	#LR__1162
1f468                 | LR__1163
1f468     04 50 05 F1 | 	add	fp, #4
1f46c     A8 90 02 FB | 	rdlong	local03, fp
1f470     48 50 05 F1 | 	add	fp, #72
1f474     A8 8E 02 FB | 	rdlong	local02, fp
1f478     18 90 06 F1 | 	add	local03, #24
1f47c     48 8F 62 FC | 	wrlong	local02, local03
1f480     3C 50 85 F1 | 	sub	fp, #60
1f484     A8 92 02 FB | 	rdlong	local04, fp
1f488     10 50 85 F1 | 	sub	fp, #16
1f48c     49 91 0A F6 | 	mov	local03, local04 wz
1f490     E4 00 90 5D |  if_ne	jmp	#LR__1165
1f494     58 50 05 F1 | 	add	fp, #88
1f498     A8 98 02 FB | 	rdlong	local07, fp
1f49c     58 50 85 F1 | 	sub	fp, #88
1f4a0     4C 8D 02 F6 | 	mov	local01, local07
1f4a4     46 8F 02 F6 | 	mov	local02, local01
1f4a8     FF 8F 0E F5 | 	and	local02, #511 wz
1f4ac     C8 00 90 AD |  if_e	jmp	#LR__1165
1f4b0     40 50 05 F1 | 	add	fp, #64
1f4b4     A8 74 02 FB | 	rdlong	arg01, fp
1f4b8     0C 50 05 F1 | 	add	fp, #12
1f4bc     A8 8E 02 FB | 	rdlong	local02, fp
1f4c0     4C 50 85 F1 | 	sub	fp, #76
1f4c4     47 77 02 F6 | 	mov	arg02, local02
1f4c8     1C D9 BF FD | 	call	#_fatfs_cc_clst2sect
1f4cc     54 50 05 F1 | 	add	fp, #84
1f4d0     A8 34 62 FC | 	wrlong	result1, fp
1f4d4     1A 93 0A F6 | 	mov	local04, result1 wz
1f4d8     54 50 85 F1 | 	sub	fp, #84
1f4dc     02 90 06 A6 |  if_e	mov	local03, #2
1f4e0     10 50 05 A1 |  if_e	add	fp, #16
1f4e4     A8 04 68 AC |  if_e	wrlong	#2, fp
1f4e8     10 50 85 A1 |  if_e	sub	fp, #16
1f4ec     88 00 90 AD |  if_e	jmp	#LR__1164
1f4f0     04 50 05 F1 | 	add	fp, #4
1f4f4     A8 90 02 FB | 	rdlong	local03, fp
1f4f8     50 50 05 F1 | 	add	fp, #80
1f4fc     A8 8E 02 FB | 	rdlong	local02, fp
1f500     04 50 05 F1 | 	add	fp, #4
1f504     A8 9A 02 FB | 	rdlong	local08, fp
1f508     4D 99 02 F6 | 	mov	local07, local08
1f50c     09 98 46 F0 | 	shr	local07, #9
1f510     4C 8F 02 F1 | 	add	local02, local07
1f514     1C 90 06 F1 | 	add	local03, #28
1f518     48 8F 62 FC | 	wrlong	local02, local03
1f51c     18 50 85 F1 | 	sub	fp, #24
1f520     A8 92 02 FB | 	rdlong	local04, fp
1f524     01 92 06 F1 | 	add	local04, #1
1f528     49 75 C2 FA | 	rdbyte	arg01, local04
1f52c     3C 50 85 F1 | 	sub	fp, #60
1f530     A8 98 02 FB | 	rdlong	local07, fp
1f534     4C 93 02 F6 | 	mov	local04, local07
1f538     28 92 06 F1 | 	add	local04, #40
1f53c     04 50 85 F1 | 	sub	fp, #4
1f540     4C 8D 02 F6 | 	mov	local01, local07
1f544     1C 8C 06 F1 | 	add	local01, #28
1f548     46 97 02 FB | 	rdlong	local06, local01
1f54c     4B 8F 02 F6 | 	mov	local02, local06
1f550     01 8C 06 F6 | 	mov	local01, #1
1f554     49 77 02 F6 | 	mov	arg02, local04
1f558     47 79 02 F6 | 	mov	arg03, local02
1f55c     01 7A 06 F6 | 	mov	arg04, #1
1f560     E4 D1 BF FD | 	call	#_fatfs_cc_disk_read
1f564     1A 91 0A F6 | 	mov	local03, result1 wz
1f568     01 90 06 56 |  if_ne	mov	local03, #1
1f56c     10 50 05 51 |  if_ne	add	fp, #16
1f570     A8 02 68 5C |  if_ne	wrlong	#1, fp
1f574     10 50 85 51 |  if_ne	sub	fp, #16
1f578                 | LR__1164
1f578                 | LR__1165
1f578                 | LR__1166
1f578                 | LR__1167
1f578                 | LR__1168
1f578     10 50 05 F1 | 	add	fp, #16
1f57c     A8 90 0A FB | 	rdlong	local03, fp wz
1f580     10 50 85 F1 | 	sub	fp, #16
1f584     04 50 05 51 |  if_ne	add	fp, #4
1f588     A8 90 02 5B |  if_ne	rdlong	local03, fp
1f58c     04 50 85 51 |  if_ne	sub	fp, #4
1f590     48 01 68 5C |  if_ne	wrlong	#0, local03
1f594                 | ' 
1f594                 | ' 	return res ;
1f594     10 50 05 F1 | 	add	fp, #16
1f598     A8 34 02 FB | 	rdlong	result1, fp
1f59c     10 50 85 F1 | 	sub	fp, #16
1f5a0                 | LR__1169
1f5a0     A8 F0 03 F6 | 	mov	ptra, fp
1f5a4     B3 00 A0 FD | 	call	#popregs_
1f5a8                 | _fatfs_cc_f_open_ret
1f5a8     2D 00 64 FD | 	ret
1f5ac                 | 
1f5ac                 | _fatfs_cc_f_read
1f5ac     19 4C 05 F6 | 	mov	COUNT_, #25
1f5b0     A9 00 A0 FD | 	call	#pushregs_
1f5b4     38 F0 07 F1 | 	add	ptra, #56
1f5b8     04 50 05 F1 | 	add	fp, #4
1f5bc     A8 74 62 FC | 	wrlong	arg01, fp
1f5c0     04 50 05 F1 | 	add	fp, #4
1f5c4     A8 76 62 FC | 	wrlong	arg02, fp
1f5c8     04 50 05 F1 | 	add	fp, #4
1f5cc     A8 78 62 FC | 	wrlong	arg03, fp
1f5d0     04 50 05 F1 | 	add	fp, #4
1f5d4     A8 7A 62 FC | 	wrlong	arg04, fp
1f5d8     08 50 85 F1 | 	sub	fp, #8
1f5dc     A8 34 02 FB | 	rdlong	result1, fp
1f5e0     2C 50 05 F1 | 	add	fp, #44
1f5e4     A8 34 62 FC | 	wrlong	result1, fp
1f5e8     24 50 85 F1 | 	sub	fp, #36
1f5ec     A8 34 02 FB | 	rdlong	result1, fp
1f5f0     1A 01 68 FC | 	wrlong	#0, result1
1f5f4     0C 50 85 F1 | 	sub	fp, #12
1f5f8     A8 74 02 FB | 	rdlong	arg01, fp
1f5fc     14 50 05 F1 | 	add	fp, #20
1f600     A8 76 02 F6 | 	mov	arg02, fp
1f604     18 50 85 F1 | 	sub	fp, #24
1f608     AC F6 BF FD | 	call	#_fatfs_cc_validate
1f60c     14 50 05 F1 | 	add	fp, #20
1f610     A8 34 62 FC | 	wrlong	result1, fp
1f614     00 34 4E F2 | 	cmps	result1, #0 wz
1f618     14 50 85 F1 | 	sub	fp, #20
1f61c     28 00 90 5D |  if_ne	jmp	#LR__1170
1f620     04 50 05 F1 | 	add	fp, #4
1f624     A8 76 02 FB | 	rdlong	arg02, fp
1f628     11 76 06 F1 | 	add	arg02, #17
1f62c     3B 8D C2 FA | 	rdbyte	local01, arg02
1f630     46 77 E2 F8 | 	getbyte	arg02, local01, #0
1f634     10 50 05 F1 | 	add	fp, #16
1f638     A8 76 62 FC | 	wrlong	arg02, fp
1f63c     14 50 85 F1 | 	sub	fp, #20
1f640     00 76 4E F2 | 	cmps	arg02, #0 wz
1f644     10 00 90 AD |  if_e	jmp	#LR__1171
1f648                 | LR__1170
1f648     14 50 05 F1 | 	add	fp, #20
1f64c     A8 34 02 FB | 	rdlong	result1, fp
1f650     14 50 85 F1 | 	sub	fp, #20
1f654     20 06 90 FD | 	jmp	#LR__1190
1f658                 | LR__1171
1f658     04 50 05 F1 | 	add	fp, #4
1f65c     A8 76 02 FB | 	rdlong	arg02, fp
1f660     04 50 85 F1 | 	sub	fp, #4
1f664     10 76 06 F1 | 	add	arg02, #16
1f668     3B 77 C2 FA | 	rdbyte	arg02, arg02
1f66c     01 76 CE F7 | 	test	arg02, #1 wz
1f670     07 34 06 A6 |  if_e	mov	result1, #7
1f674     00 06 90 AD |  if_e	jmp	#LR__1190
1f678     04 50 05 F1 | 	add	fp, #4
1f67c     A8 8E 02 FB | 	rdlong	local02, fp
1f680     47 91 02 F6 | 	mov	local03, local02
1f684     0C 90 06 F1 | 	add	local03, #12
1f688     48 93 02 FB | 	rdlong	local04, local03
1f68c     14 8E 06 F1 | 	add	local02, #20
1f690     47 8F 02 FB | 	rdlong	local02, local02
1f694     47 93 82 F1 | 	sub	local04, local02
1f698     20 50 05 F1 | 	add	fp, #32
1f69c     A8 92 62 FC | 	wrlong	local04, fp
1f6a0     18 50 85 F1 | 	sub	fp, #24
1f6a4     A8 94 02 FB | 	rdlong	local05, fp
1f6a8     0C 50 85 F1 | 	sub	fp, #12
1f6ac     49 95 1A F2 | 	cmp	local05, local04 wcz
1f6b0     24 50 05 11 |  if_a	add	fp, #36
1f6b4     A8 94 02 1B |  if_a	rdlong	local05, fp
1f6b8     18 50 85 11 |  if_a	sub	fp, #24
1f6bc     A8 94 62 1C |  if_a	wrlong	local05, fp
1f6c0     0C 50 85 11 |  if_a	sub	fp, #12
1f6c4                 | ' 
1f6c4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1f6c4                 | LR__1172
1f6c4     0C 50 05 F1 | 	add	fp, #12
1f6c8     A8 90 02 FB | 	rdlong	local03, fp
1f6cc     0C 50 85 F1 | 	sub	fp, #12
1f6d0     48 95 02 F6 | 	mov	local05, local03
1f6d4     01 94 16 F2 | 	cmp	local05, #1 wc
1f6d8     98 05 90 CD |  if_b	jmp	#LR__1189
1f6dc     04 50 05 F1 | 	add	fp, #4
1f6e0     A8 92 02 FB | 	rdlong	local04, fp
1f6e4     04 50 85 F1 | 	sub	fp, #4
1f6e8     14 92 06 F1 | 	add	local04, #20
1f6ec     49 93 02 FB | 	rdlong	local04, local04
1f6f0     FF 93 CE F7 | 	test	local04, #511 wz
1f6f4     54 04 90 5D |  if_ne	jmp	#LR__1187
1f6f8     04 50 05 F1 | 	add	fp, #4
1f6fc     A8 8E 02 FB | 	rdlong	local02, fp
1f700     14 8E 06 F1 | 	add	local02, #20
1f704     47 93 02 FB | 	rdlong	local04, local02
1f708     09 92 46 F0 | 	shr	local04, #9
1f70c     14 50 05 F1 | 	add	fp, #20
1f710     A8 96 02 FB | 	rdlong	local06, fp
1f714     4B 99 02 F6 | 	mov	local07, local06
1f718     0A 98 06 F1 | 	add	local07, #10
1f71c     4C 9B E2 FA | 	rdword	local08, local07
1f720     0A 98 86 F1 | 	sub	local07, #10
1f724     4D 9D 32 F9 | 	getword	local09, local08, #0
1f728     01 9C 86 F1 | 	sub	local09, #1
1f72c     4E 93 0A F5 | 	and	local04, local09 wz
1f730     18 50 05 F1 | 	add	fp, #24
1f734     A8 92 62 FC | 	wrlong	local04, fp
1f738     30 50 85 F1 | 	sub	fp, #48
1f73c     E0 00 90 5D |  if_ne	jmp	#LR__1177
1f740     04 50 05 F1 | 	add	fp, #4
1f744     A8 92 02 FB | 	rdlong	local04, fp
1f748     04 50 85 F1 | 	sub	fp, #4
1f74c     14 92 06 F1 | 	add	local04, #20
1f750     49 93 0A FB | 	rdlong	local04, local04 wz
1f754     20 00 90 5D |  if_ne	jmp	#LR__1173
1f758     04 50 05 F1 | 	add	fp, #4
1f75c     A8 92 02 FB | 	rdlong	local04, fp
1f760     08 92 06 F1 | 	add	local04, #8
1f764     49 93 02 FB | 	rdlong	local04, local04
1f768     18 50 05 F1 | 	add	fp, #24
1f76c     A8 92 62 FC | 	wrlong	local04, fp
1f770     1C 50 85 F1 | 	sub	fp, #28
1f774     28 00 90 FD | 	jmp	#LR__1174
1f778                 | LR__1173
1f778     04 50 05 F1 | 	add	fp, #4
1f77c     A8 9C 02 FB | 	rdlong	local09, fp
1f780     4E 75 02 F6 | 	mov	arg01, local09
1f784     04 50 85 F1 | 	sub	fp, #4
1f788     18 9C 06 F1 | 	add	local09, #24
1f78c     4E 77 02 FB | 	rdlong	arg02, local09
1f790     94 D6 BF FD | 	call	#_fatfs_cc_get_fat
1f794     1C 50 05 F1 | 	add	fp, #28
1f798     A8 34 62 FC | 	wrlong	result1, fp
1f79c     1C 50 85 F1 | 	sub	fp, #28
1f7a0                 | LR__1174
1f7a0     1C 50 05 F1 | 	add	fp, #28
1f7a4     A8 92 02 FB | 	rdlong	local04, fp
1f7a8     1C 50 85 F1 | 	sub	fp, #28
1f7ac     02 92 16 F2 | 	cmp	local04, #2 wc
1f7b0     1C 00 90 3D |  if_ae	jmp	#LR__1175
1f7b4     04 50 05 F1 | 	add	fp, #4
1f7b8     A8 92 02 FB | 	rdlong	local04, fp
1f7bc     04 50 85 F1 | 	sub	fp, #4
1f7c0     11 92 06 F1 | 	add	local04, #17
1f7c4     49 05 48 FC | 	wrbyte	#2, local04
1f7c8     02 34 06 F6 | 	mov	result1, #2
1f7cc     A8 04 90 FD | 	jmp	#LR__1190
1f7d0                 | LR__1175
1f7d0     1C 50 05 F1 | 	add	fp, #28
1f7d4     A8 92 02 FB | 	rdlong	local04, fp
1f7d8     1C 50 85 F1 | 	sub	fp, #28
1f7dc     FF FF 7F FF 
1f7e0     FF 93 0E F2 | 	cmp	local04, ##-1 wz
1f7e4     1C 00 90 5D |  if_ne	jmp	#LR__1176
1f7e8     04 50 05 F1 | 	add	fp, #4
1f7ec     A8 92 02 FB | 	rdlong	local04, fp
1f7f0     04 50 85 F1 | 	sub	fp, #4
1f7f4     11 92 06 F1 | 	add	local04, #17
1f7f8     49 03 48 FC | 	wrbyte	#1, local04
1f7fc     01 34 06 F6 | 	mov	result1, #1
1f800     74 04 90 FD | 	jmp	#LR__1190
1f804                 | LR__1176
1f804     04 50 05 F1 | 	add	fp, #4
1f808     A8 92 02 FB | 	rdlong	local04, fp
1f80c     18 50 05 F1 | 	add	fp, #24
1f810     A8 9C 02 FB | 	rdlong	local09, fp
1f814     1C 50 85 F1 | 	sub	fp, #28
1f818     18 92 06 F1 | 	add	local04, #24
1f81c     49 9D 62 FC | 	wrlong	local09, local04
1f820                 | LR__1177
1f820     18 50 05 F1 | 	add	fp, #24
1f824     A8 74 02 FB | 	rdlong	arg01, fp
1f828     14 50 85 F1 | 	sub	fp, #20
1f82c     A8 92 02 FB | 	rdlong	local04, fp
1f830     04 50 85 F1 | 	sub	fp, #4
1f834     18 92 06 F1 | 	add	local04, #24
1f838     49 77 02 FB | 	rdlong	arg02, local04
1f83c     A8 D5 BF FD | 	call	#_fatfs_cc_clst2sect
1f840     20 50 05 F1 | 	add	fp, #32
1f844     A8 34 62 FC | 	wrlong	result1, fp
1f848     20 50 85 F1 | 	sub	fp, #32
1f84c     00 34 0E F2 | 	cmp	result1, #0 wz
1f850     1C 00 90 5D |  if_ne	jmp	#LR__1178
1f854     04 50 05 F1 | 	add	fp, #4
1f858     A8 92 02 FB | 	rdlong	local04, fp
1f85c     04 50 85 F1 | 	sub	fp, #4
1f860     11 92 06 F1 | 	add	local04, #17
1f864     49 05 48 FC | 	wrbyte	#2, local04
1f868     02 34 06 F6 | 	mov	result1, #2
1f86c     08 04 90 FD | 	jmp	#LR__1190
1f870                 | LR__1178
1f870     20 50 05 F1 | 	add	fp, #32
1f874     A8 92 02 FB | 	rdlong	local04, fp
1f878     10 50 05 F1 | 	add	fp, #16
1f87c     A8 9C 02 FB | 	rdlong	local09, fp
1f880     4E 93 02 F1 | 	add	local04, local09
1f884     10 50 85 F1 | 	sub	fp, #16
1f888     A8 92 62 FC | 	wrlong	local04, fp
1f88c     14 50 85 F1 | 	sub	fp, #20
1f890     A8 92 02 FB | 	rdlong	local04, fp
1f894     09 92 46 F0 | 	shr	local04, #9
1f898     20 50 05 F1 | 	add	fp, #32
1f89c     A8 92 62 FC | 	wrlong	local04, fp
1f8a0     2C 50 85 F1 | 	sub	fp, #44
1f8a4     01 92 16 F2 | 	cmp	local04, #1 wc
1f8a8     74 01 90 CD |  if_b	jmp	#LR__1182
1f8ac     30 50 05 F1 | 	add	fp, #48
1f8b0     A8 92 02 FB | 	rdlong	local04, fp
1f8b4     04 50 85 F1 | 	sub	fp, #4
1f8b8     A8 9E 02 FB | 	rdlong	local10, fp
1f8bc     4F 93 02 F1 | 	add	local04, local10
1f8c0     14 50 85 F1 | 	sub	fp, #20
1f8c4     A8 9C 02 FB | 	rdlong	local09, fp
1f8c8     18 50 85 F1 | 	sub	fp, #24
1f8cc     0A 9C 06 F1 | 	add	local09, #10
1f8d0     4E A1 E2 FA | 	rdword	local11, local09
1f8d4     50 93 1A F2 | 	cmp	local04, local11 wcz
1f8d8     28 00 90 ED |  if_be	jmp	#LR__1179
1f8dc     18 50 05 F1 | 	add	fp, #24
1f8e0     A8 8E 02 FB | 	rdlong	local02, fp
1f8e4     0A 8E 06 F1 | 	add	local02, #10
1f8e8     47 93 E2 FA | 	rdword	local04, local02
1f8ec     18 50 05 F1 | 	add	fp, #24
1f8f0     A8 A0 02 FB | 	rdlong	local11, fp
1f8f4     50 93 82 F1 | 	sub	local04, local11
1f8f8     04 50 85 F1 | 	sub	fp, #4
1f8fc     A8 92 62 FC | 	wrlong	local04, fp
1f900     2C 50 85 F1 | 	sub	fp, #44
1f904                 | LR__1179
1f904     18 50 05 F1 | 	add	fp, #24
1f908     A8 8E 02 FB | 	rdlong	local02, fp
1f90c     01 8E 06 F1 | 	add	local02, #1
1f910     47 75 C2 FA | 	rdbyte	arg01, local02
1f914     1C 50 05 F1 | 	add	fp, #28
1f918     A8 76 02 FB | 	rdlong	arg02, fp
1f91c     14 50 85 F1 | 	sub	fp, #20
1f920     A8 78 02 FB | 	rdlong	arg03, fp
1f924     0C 50 05 F1 | 	add	fp, #12
1f928     A8 7A 02 FB | 	rdlong	arg04, fp
1f92c     2C 50 85 F1 | 	sub	fp, #44
1f930     14 CE BF FD | 	call	#_fatfs_cc_disk_read
1f934     00 34 0E F2 | 	cmp	result1, #0 wz
1f938     1C 00 90 AD |  if_e	jmp	#LR__1180
1f93c     04 50 05 F1 | 	add	fp, #4
1f940     A8 92 02 FB | 	rdlong	local04, fp
1f944     04 50 85 F1 | 	sub	fp, #4
1f948     11 92 06 F1 | 	add	local04, #17
1f94c     49 03 48 FC | 	wrbyte	#1, local04
1f950     01 34 06 F6 | 	mov	result1, #1
1f954     20 03 90 FD | 	jmp	#LR__1190
1f958                 | LR__1180
1f958     04 50 05 F1 | 	add	fp, #4
1f95c     A8 8E 02 FB | 	rdlong	local02, fp
1f960     04 50 85 F1 | 	sub	fp, #4
1f964     10 8E 06 F1 | 	add	local02, #16
1f968     47 93 C2 FA | 	rdbyte	local04, local02
1f96c     80 92 0E F5 | 	and	local04, #128 wz
1f970     90 00 90 AD |  if_e	jmp	#LR__1181
1f974     04 50 05 F1 | 	add	fp, #4
1f978     A8 9C 02 FB | 	rdlong	local09, fp
1f97c     1C 9C 06 F1 | 	add	local09, #28
1f980     4E A1 02 FB | 	rdlong	local11, local09
1f984     1C 50 05 F1 | 	add	fp, #28
1f988     A8 9A 02 FB | 	rdlong	local08, fp
1f98c     4D A1 82 F1 | 	sub	local11, local08
1f990     0C 50 05 F1 | 	add	fp, #12
1f994     A8 A2 02 FB | 	rdlong	local12, fp
1f998     2C 50 85 F1 | 	sub	fp, #44
1f99c     51 A1 12 F2 | 	cmp	local11, local12 wc
1f9a0     60 00 90 3D |  if_ae	jmp	#LR__1181
1f9a4     34 50 05 F1 | 	add	fp, #52
1f9a8     A8 74 02 FB | 	rdlong	arg01, fp
1f9ac     30 50 85 F1 | 	sub	fp, #48
1f9b0     A8 9C 02 FB | 	rdlong	local09, fp
1f9b4     4E A1 02 F6 | 	mov	local11, local09
1f9b8     1C A0 06 F1 | 	add	local11, #28
1f9bc     50 99 02 FB | 	rdlong	local07, local11
1f9c0     4C A5 02 F6 | 	mov	local13, local07
1f9c4     1C 50 05 F1 | 	add	fp, #28
1f9c8     A8 9A 02 FB | 	rdlong	local08, fp
1f9cc     4D 97 02 F6 | 	mov	local06, local08
1f9d0     4B A5 82 F1 | 	sub	local13, local06
1f9d4     09 A4 66 F0 | 	shl	local13, #9
1f9d8     52 A7 02 F6 | 	mov	local14, local13
1f9dc     52 75 02 F1 | 	add	arg01, local13
1f9e0     4E 8D 02 F6 | 	mov	local01, local09
1f9e4     20 50 85 F1 | 	sub	fp, #32
1f9e8     46 A1 02 F6 | 	mov	local11, local01
1f9ec     28 A0 06 F1 | 	add	local11, #40
1f9f0     50 8F 02 F6 | 	mov	local02, local11
1f9f4     09 9E C6 F9 | 	decod	local10, #9
1f9f8     47 77 02 F6 | 	mov	arg02, local02
1f9fc     09 78 C6 F9 | 	decod	arg03, #9
1fa00     04 58 B0 FD | 	call	#__system____builtin_memmove
1fa04                 | LR__1181
1fa04     2C 50 05 F1 | 	add	fp, #44
1fa08     A8 92 02 FB | 	rdlong	local04, fp
1fa0c     09 92 66 F0 | 	shl	local04, #9
1fa10     04 50 85 F1 | 	sub	fp, #4
1fa14     A8 92 62 FC | 	wrlong	local04, fp
1fa18     28 50 85 F1 | 	sub	fp, #40
1fa1c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
1fa1c                 | ' 				}
1fa1c                 | ' 
1fa1c                 | ' 
1fa1c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
1fa1c                 | ' 				continue;
1fa1c     AC 01 90 FD | 	jmp	#LR__1188
1fa20                 | LR__1182
1fa20     04 50 05 F1 | 	add	fp, #4
1fa24     A8 92 02 FB | 	rdlong	local04, fp
1fa28     1C 92 06 F1 | 	add	local04, #28
1fa2c     49 9F 02 FB | 	rdlong	local10, local04
1fa30     1C 50 05 F1 | 	add	fp, #28
1fa34     A8 A0 02 FB | 	rdlong	local11, fp
1fa38     20 50 85 F1 | 	sub	fp, #32
1fa3c     50 9F 0A F2 | 	cmp	local10, local11 wz
1fa40     EC 00 90 AD |  if_e	jmp	#LR__1186
1fa44     04 50 05 F1 | 	add	fp, #4
1fa48     A8 8E 02 FB | 	rdlong	local02, fp
1fa4c     04 50 85 F1 | 	sub	fp, #4
1fa50     10 8E 06 F1 | 	add	local02, #16
1fa54     47 93 C2 FA | 	rdbyte	local04, local02
1fa58     80 92 CE F7 | 	test	local04, #128 wz
1fa5c     7C 00 90 AD |  if_e	jmp	#LR__1184
1fa60     18 50 05 F1 | 	add	fp, #24
1fa64     A8 8E 02 FB | 	rdlong	local02, fp
1fa68     01 8E 06 F1 | 	add	local02, #1
1fa6c     47 75 C2 FA | 	rdbyte	arg01, local02
1fa70     14 50 85 F1 | 	sub	fp, #20
1fa74     A8 8C 02 FB | 	rdlong	local01, fp
1fa78     46 77 02 F6 | 	mov	arg02, local01
1fa7c     28 76 06 F1 | 	add	arg02, #40
1fa80     04 50 85 F1 | 	sub	fp, #4
1fa84     1C 8C 06 F1 | 	add	local01, #28
1fa88     46 79 02 FB | 	rdlong	arg03, local01
1fa8c     01 7A 06 F6 | 	mov	arg04, #1
1fa90     70 CD BF FD | 	call	#_fatfs_cc_disk_write
1fa94     00 34 0E F2 | 	cmp	result1, #0 wz
1fa98     1C 00 90 AD |  if_e	jmp	#LR__1183
1fa9c     04 50 05 F1 | 	add	fp, #4
1faa0     A8 92 02 FB | 	rdlong	local04, fp
1faa4     04 50 85 F1 | 	sub	fp, #4
1faa8     11 92 06 F1 | 	add	local04, #17
1faac     49 03 48 FC | 	wrbyte	#1, local04
1fab0     01 34 06 F6 | 	mov	result1, #1
1fab4     C0 01 90 FD | 	jmp	#LR__1190
1fab8                 | LR__1183
1fab8     04 50 05 F1 | 	add	fp, #4
1fabc     A8 8C 02 FB | 	rdlong	local01, fp
1fac0     46 93 02 F6 | 	mov	local04, local01
1fac4     04 50 85 F1 | 	sub	fp, #4
1fac8     10 8C 06 F1 | 	add	local01, #16
1facc     46 9F C2 FA | 	rdbyte	local10, local01
1fad0     7F 9E 06 F5 | 	and	local10, #127
1fad4     10 92 06 F1 | 	add	local04, #16
1fad8     49 9F 42 FC | 	wrbyte	local10, local04
1fadc                 | LR__1184
1fadc     18 50 05 F1 | 	add	fp, #24
1fae0     A8 8E 02 FB | 	rdlong	local02, fp
1fae4     01 8E 06 F1 | 	add	local02, #1
1fae8     47 75 C2 FA | 	rdbyte	arg01, local02
1faec     14 50 85 F1 | 	sub	fp, #20
1faf0     A8 76 02 FB | 	rdlong	arg02, fp
1faf4     28 76 06 F1 | 	add	arg02, #40
1faf8     1C 50 05 F1 | 	add	fp, #28
1fafc     A8 78 02 FB | 	rdlong	arg03, fp
1fb00     20 50 85 F1 | 	sub	fp, #32
1fb04     01 7A 06 F6 | 	mov	arg04, #1
1fb08     3C CC BF FD | 	call	#_fatfs_cc_disk_read
1fb0c     00 34 0E F2 | 	cmp	result1, #0 wz
1fb10     1C 00 90 AD |  if_e	jmp	#LR__1185
1fb14     04 50 05 F1 | 	add	fp, #4
1fb18     A8 92 02 FB | 	rdlong	local04, fp
1fb1c     04 50 85 F1 | 	sub	fp, #4
1fb20     11 92 06 F1 | 	add	local04, #17
1fb24     49 03 48 FC | 	wrbyte	#1, local04
1fb28     01 34 06 F6 | 	mov	result1, #1
1fb2c     48 01 90 FD | 	jmp	#LR__1190
1fb30                 | LR__1185
1fb30                 | LR__1186
1fb30     04 50 05 F1 | 	add	fp, #4
1fb34     A8 92 02 FB | 	rdlong	local04, fp
1fb38     1C 50 05 F1 | 	add	fp, #28
1fb3c     A8 9E 02 FB | 	rdlong	local10, fp
1fb40     20 50 85 F1 | 	sub	fp, #32
1fb44     1C 92 06 F1 | 	add	local04, #28
1fb48     49 9F 62 FC | 	wrlong	local10, local04
1fb4c                 | LR__1187
1fb4c     04 50 05 F1 | 	add	fp, #4
1fb50     A8 8E 02 FB | 	rdlong	local02, fp
1fb54     14 8E 06 F1 | 	add	local02, #20
1fb58     47 8D 02 FB | 	rdlong	local01, local02
1fb5c     FF 8D 06 F5 | 	and	local01, #511
1fb60     09 92 C6 F9 | 	decod	local04, #9
1fb64     46 93 82 F1 | 	sub	local04, local01
1fb68     24 50 05 F1 | 	add	fp, #36
1fb6c     A8 92 62 FC | 	wrlong	local04, fp
1fb70     1C 50 85 F1 | 	sub	fp, #28
1fb74     A8 9E 02 FB | 	rdlong	local10, fp
1fb78     0C 50 85 F1 | 	sub	fp, #12
1fb7c     4F 93 1A F2 | 	cmp	local04, local10 wcz
1fb80     0C 50 05 11 |  if_a	add	fp, #12
1fb84     A8 92 02 1B |  if_a	rdlong	local04, fp
1fb88     1C 50 05 11 |  if_a	add	fp, #28
1fb8c     A8 92 62 1C |  if_a	wrlong	local04, fp
1fb90     28 50 85 11 |  if_a	sub	fp, #40
1fb94     34 50 05 F1 | 	add	fp, #52
1fb98     A8 74 02 FB | 	rdlong	arg01, fp
1fb9c     30 50 85 F1 | 	sub	fp, #48
1fba0     A8 98 02 FB | 	rdlong	local07, fp
1fba4     4C 77 02 F6 | 	mov	arg02, local07
1fba8     28 76 06 F1 | 	add	arg02, #40
1fbac     14 98 06 F1 | 	add	local07, #20
1fbb0     4C A3 02 FB | 	rdlong	local12, local07
1fbb4     FF A3 06 F5 | 	and	local12, #511
1fbb8     51 77 02 F1 | 	add	arg02, local12
1fbbc     24 50 05 F1 | 	add	fp, #36
1fbc0     A8 78 02 FB | 	rdlong	arg03, fp
1fbc4     28 50 85 F1 | 	sub	fp, #40
1fbc8     3C 56 B0 FD | 	call	#__system____builtin_memmove
1fbcc                 | LR__1188
1fbcc     0C 50 05 F1 | 	add	fp, #12
1fbd0     A8 92 02 FB | 	rdlong	local04, fp
1fbd4     1C 50 05 F1 | 	add	fp, #28
1fbd8     A8 8C 02 FB | 	rdlong	local01, fp
1fbdc     46 93 82 F1 | 	sub	local04, local01
1fbe0     1C 50 85 F1 | 	sub	fp, #28
1fbe4     A8 92 62 FC | 	wrlong	local04, fp
1fbe8     04 50 05 F1 | 	add	fp, #4
1fbec     A8 9C 02 FB | 	rdlong	local09, fp
1fbf0     4E 99 02 FB | 	rdlong	local07, local09
1fbf4     18 50 05 F1 | 	add	fp, #24
1fbf8     A8 A6 02 FB | 	rdlong	local14, fp
1fbfc     53 A5 02 F6 | 	mov	local13, local14
1fc00     53 99 02 F1 | 	add	local07, local14
1fc04     4E 99 62 FC | 	wrlong	local07, local09
1fc08     0C 50 05 F1 | 	add	fp, #12
1fc0c     A8 A8 02 FB | 	rdlong	local15, fp
1fc10     54 A3 02 F6 | 	mov	local12, local15
1fc14     0C 50 85 F1 | 	sub	fp, #12
1fc18     A8 AA 02 FB | 	rdlong	local16, fp
1fc1c     55 AD 02 F6 | 	mov	local17, local16
1fc20     55 A3 02 F1 | 	add	local12, local16
1fc24     0C 50 05 F1 | 	add	fp, #12
1fc28     A8 A2 62 FC | 	wrlong	local12, fp
1fc2c     30 50 85 F1 | 	sub	fp, #48
1fc30     A8 AE 02 FB | 	rdlong	local18, fp
1fc34     57 B1 02 F6 | 	mov	local19, local18
1fc38     57 B3 02 F6 | 	mov	local20, local18
1fc3c     59 B5 02 F6 | 	mov	local21, local20
1fc40     14 B4 06 F1 | 	add	local21, #20
1fc44     5A B7 02 FB | 	rdlong	local22, local21
1fc48     14 B4 86 F1 | 	sub	local21, #20
1fc4c     5B B9 02 F6 | 	mov	local23, local22
1fc50     24 50 05 F1 | 	add	fp, #36
1fc54     A8 BA 02 FB | 	rdlong	local24, fp
1fc58     28 50 85 F1 | 	sub	fp, #40
1fc5c     5D BD 02 F6 | 	mov	local25, local24
1fc60     5D B9 02 F1 | 	add	local23, local24
1fc64     14 B0 06 F1 | 	add	local19, #20
1fc68     58 B9 62 FC | 	wrlong	local23, local19
1fc6c     14 B0 86 F1 | 	sub	local19, #20
1fc70     50 FA 9F FD | 	jmp	#LR__1172
1fc74                 | LR__1189
1fc74                 | ' 
1fc74                 | ' 
1fc74                 | ' 
1fc74                 | ' 
1fc74                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
1fc74                 | ' 
1fc74                 | ' 	}
1fc74                 | ' 
1fc74                 | ' 	return FR_OK ;
1fc74     00 34 06 F6 | 	mov	result1, #0
1fc78                 | LR__1190
1fc78     A8 F0 03 F6 | 	mov	ptra, fp
1fc7c     B3 00 A0 FD | 	call	#popregs_
1fc80                 | _fatfs_cc_f_read_ret
1fc80     2D 00 64 FD | 	ret
1fc84                 | 
1fc84                 | _fatfs_cc_f_write
1fc84     2A 4C 05 F6 | 	mov	COUNT_, #42
1fc88     A9 00 A0 FD | 	call	#pushregs_
1fc8c     34 F0 07 F1 | 	add	ptra, #52
1fc90     04 50 05 F1 | 	add	fp, #4
1fc94     A8 74 62 FC | 	wrlong	arg01, fp
1fc98     04 50 05 F1 | 	add	fp, #4
1fc9c     A8 76 62 FC | 	wrlong	arg02, fp
1fca0     04 50 05 F1 | 	add	fp, #4
1fca4     A8 78 62 FC | 	wrlong	arg03, fp
1fca8     04 50 05 F1 | 	add	fp, #4
1fcac     A8 7A 62 FC | 	wrlong	arg04, fp
1fcb0     08 50 85 F1 | 	sub	fp, #8
1fcb4     A8 34 02 FB | 	rdlong	result1, fp
1fcb8     28 50 05 F1 | 	add	fp, #40
1fcbc     A8 34 62 FC | 	wrlong	result1, fp
1fcc0     20 50 85 F1 | 	sub	fp, #32
1fcc4     A8 34 02 FB | 	rdlong	result1, fp
1fcc8     1A 01 68 FC | 	wrlong	#0, result1
1fccc     0C 50 85 F1 | 	sub	fp, #12
1fcd0     A8 74 02 FB | 	rdlong	arg01, fp
1fcd4     14 50 05 F1 | 	add	fp, #20
1fcd8     A8 76 02 F6 | 	mov	arg02, fp
1fcdc     18 50 85 F1 | 	sub	fp, #24
1fce0     D4 EF BF FD | 	call	#_fatfs_cc_validate
1fce4     14 50 05 F1 | 	add	fp, #20
1fce8     A8 34 62 FC | 	wrlong	result1, fp
1fcec     00 34 4E F2 | 	cmps	result1, #0 wz
1fcf0     14 50 85 F1 | 	sub	fp, #20
1fcf4     28 00 90 5D |  if_ne	jmp	#LR__1191
1fcf8     04 50 05 F1 | 	add	fp, #4
1fcfc     A8 76 02 FB | 	rdlong	arg02, fp
1fd00     11 76 06 F1 | 	add	arg02, #17
1fd04     3B 77 C2 FA | 	rdbyte	arg02, arg02
1fd08     3B 77 E2 F8 | 	getbyte	arg02, arg02, #0
1fd0c     10 50 05 F1 | 	add	fp, #16
1fd10     A8 76 62 FC | 	wrlong	arg02, fp
1fd14     14 50 85 F1 | 	sub	fp, #20
1fd18     00 76 4E F2 | 	cmps	arg02, #0 wz
1fd1c     10 00 90 AD |  if_e	jmp	#LR__1192
1fd20                 | LR__1191
1fd20     14 50 05 F1 | 	add	fp, #20
1fd24     A8 34 02 FB | 	rdlong	result1, fp
1fd28     14 50 85 F1 | 	sub	fp, #20
1fd2c     90 07 90 FD | 	jmp	#LR__1214
1fd30                 | LR__1192
1fd30     04 50 05 F1 | 	add	fp, #4
1fd34     A8 76 02 FB | 	rdlong	arg02, fp
1fd38     04 50 85 F1 | 	sub	fp, #4
1fd3c     10 76 06 F1 | 	add	arg02, #16
1fd40     3B 77 C2 FA | 	rdbyte	arg02, arg02
1fd44     02 76 CE F7 | 	test	arg02, #2 wz
1fd48     07 34 06 A6 |  if_e	mov	result1, #7
1fd4c     70 07 90 AD |  if_e	jmp	#LR__1214
1fd50     04 50 05 F1 | 	add	fp, #4
1fd54     A8 8C 02 FB | 	rdlong	local01, fp
1fd58     46 77 02 F6 | 	mov	arg02, local01
1fd5c     14 76 06 F1 | 	add	arg02, #20
1fd60     3B 77 02 FB | 	rdlong	arg02, arg02
1fd64     08 50 05 F1 | 	add	fp, #8
1fd68     A8 34 02 FB | 	rdlong	result1, fp
1fd6c     1A 77 02 F1 | 	add	arg02, result1
1fd70     46 35 02 F6 | 	mov	result1, local01
1fd74     0C 50 85 F1 | 	sub	fp, #12
1fd78     14 34 06 F1 | 	add	result1, #20
1fd7c     1A 8F 02 FB | 	rdlong	local02, result1
1fd80     47 91 02 F6 | 	mov	local03, local02
1fd84     48 77 12 F2 | 	cmp	arg02, local03 wc
1fd88     24 00 90 3D |  if_ae	jmp	#LR__1193
1fd8c     04 50 05 F1 | 	add	fp, #4
1fd90     A8 76 02 FB | 	rdlong	arg02, fp
1fd94     01 34 66 F6 | 	neg	result1, #1
1fd98     14 76 06 F1 | 	add	arg02, #20
1fd9c     3B 77 02 FB | 	rdlong	arg02, arg02
1fda0     3B 35 82 F1 | 	sub	result1, arg02
1fda4     08 50 05 F1 | 	add	fp, #8
1fda8     A8 34 62 FC | 	wrlong	result1, fp
1fdac     0C 50 85 F1 | 	sub	fp, #12
1fdb0                 | LR__1193
1fdb0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1fdb0                 | ' 	}
1fdb0                 | ' 
1fdb0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1fdb0                 | LR__1194
1fdb0     0C 50 05 F1 | 	add	fp, #12
1fdb4     A8 92 02 FB | 	rdlong	local04, fp
1fdb8     0C 50 85 F1 | 	sub	fp, #12
1fdbc     49 95 02 F6 | 	mov	local05, local04
1fdc0     01 94 16 F2 | 	cmp	local05, #1 wc
1fdc4     D0 06 90 CD |  if_b	jmp	#LR__1213
1fdc8     04 50 05 F1 | 	add	fp, #4
1fdcc     A8 34 02 FB | 	rdlong	result1, fp
1fdd0     04 50 85 F1 | 	sub	fp, #4
1fdd4     14 34 06 F1 | 	add	result1, #20
1fdd8     1A 35 02 FB | 	rdlong	result1, result1
1fddc     FF 35 CE F7 | 	test	result1, #511 wz
1fde0     D0 04 90 5D |  if_ne	jmp	#LR__1209
1fde4     04 50 05 F1 | 	add	fp, #4
1fde8     A8 96 02 FB | 	rdlong	local06, fp
1fdec     14 96 06 F1 | 	add	local06, #20
1fdf0     4B 99 02 FB | 	rdlong	local07, local06
1fdf4     4C 35 02 F6 | 	mov	result1, local07
1fdf8     09 34 46 F0 | 	shr	result1, #9
1fdfc     14 50 05 F1 | 	add	fp, #20
1fe00     A8 9A 02 FB | 	rdlong	local08, fp
1fe04     4D 9D 02 F6 | 	mov	local09, local08
1fe08     0A 9C 06 F1 | 	add	local09, #10
1fe0c     4E 9F E2 FA | 	rdword	local10, local09
1fe10     0A 9C 86 F1 | 	sub	local09, #10
1fe14     4F A1 32 F9 | 	getword	local11, local10, #0
1fe18     01 A0 86 F1 | 	sub	local11, #1
1fe1c     50 35 0A F5 | 	and	result1, local11 wz
1fe20     14 50 05 F1 | 	add	fp, #20
1fe24     A8 34 62 FC | 	wrlong	result1, fp
1fe28     2C 50 85 F1 | 	sub	fp, #44
1fe2c     44 01 90 5D |  if_ne	jmp	#LR__1200
1fe30     04 50 05 F1 | 	add	fp, #4
1fe34     A8 A2 02 FB | 	rdlong	local12, fp
1fe38     04 50 85 F1 | 	sub	fp, #4
1fe3c     14 A2 06 F1 | 	add	local12, #20
1fe40     51 77 0A FB | 	rdlong	arg02, local12 wz
1fe44     44 00 90 5D |  if_ne	jmp	#LR__1195
1fe48     04 50 05 F1 | 	add	fp, #4
1fe4c     A8 A2 02 FB | 	rdlong	local12, fp
1fe50     08 A2 06 F1 | 	add	local12, #8
1fe54     51 A3 0A FB | 	rdlong	local12, local12 wz
1fe58     18 50 05 F1 | 	add	fp, #24
1fe5c     A8 A2 62 FC | 	wrlong	local12, fp
1fe60     1C 50 85 F1 | 	sub	fp, #28
1fe64     4C 00 90 5D |  if_ne	jmp	#LR__1196
1fe68     04 50 05 F1 | 	add	fp, #4
1fe6c     A8 74 02 FB | 	rdlong	arg01, fp
1fe70     04 50 85 F1 | 	sub	fp, #4
1fe74     00 76 06 F6 | 	mov	arg02, #0
1fe78     30 D5 BF FD | 	call	#_fatfs_cc_create_chain
1fe7c     1C 50 05 F1 | 	add	fp, #28
1fe80     A8 34 62 FC | 	wrlong	result1, fp
1fe84     1C 50 85 F1 | 	sub	fp, #28
1fe88     28 00 90 FD | 	jmp	#LR__1196
1fe8c                 | LR__1195
1fe8c     04 50 05 F1 | 	add	fp, #4
1fe90     A8 A4 02 FB | 	rdlong	local13, fp
1fe94     52 75 02 F6 | 	mov	arg01, local13
1fe98     04 50 85 F1 | 	sub	fp, #4
1fe9c     18 A4 06 F1 | 	add	local13, #24
1fea0     52 77 02 FB | 	rdlong	arg02, local13
1fea4     04 D5 BF FD | 	call	#_fatfs_cc_create_chain
1fea8     1C 50 05 F1 | 	add	fp, #28
1feac     A8 34 62 FC | 	wrlong	result1, fp
1feb0     1C 50 85 F1 | 	sub	fp, #28
1feb4                 | LR__1196
1feb4     1C 50 05 F1 | 	add	fp, #28
1feb8     A8 A2 0A FB | 	rdlong	local12, fp wz
1febc     1C 50 85 F1 | 	sub	fp, #28
1fec0     D4 05 90 AD |  if_e	jmp	#LR__1213
1fec4     1C 50 05 F1 | 	add	fp, #28
1fec8     A8 A2 02 FB | 	rdlong	local12, fp
1fecc     1C 50 85 F1 | 	sub	fp, #28
1fed0     01 A2 0E F2 | 	cmp	local12, #1 wz
1fed4     1C 00 90 5D |  if_ne	jmp	#LR__1197
1fed8     04 50 05 F1 | 	add	fp, #4
1fedc     A8 A2 02 FB | 	rdlong	local12, fp
1fee0     04 50 85 F1 | 	sub	fp, #4
1fee4     11 A2 06 F1 | 	add	local12, #17
1fee8     51 05 48 FC | 	wrbyte	#2, local12
1feec     02 34 06 F6 | 	mov	result1, #2
1fef0     CC 05 90 FD | 	jmp	#LR__1214
1fef4                 | LR__1197
1fef4     1C 50 05 F1 | 	add	fp, #28
1fef8     A8 A2 02 FB | 	rdlong	local12, fp
1fefc     1C 50 85 F1 | 	sub	fp, #28
1ff00     FF FF 7F FF 
1ff04     FF A3 0E F2 | 	cmp	local12, ##-1 wz
1ff08     1C 00 90 5D |  if_ne	jmp	#LR__1198
1ff0c     04 50 05 F1 | 	add	fp, #4
1ff10     A8 A2 02 FB | 	rdlong	local12, fp
1ff14     04 50 85 F1 | 	sub	fp, #4
1ff18     11 A2 06 F1 | 	add	local12, #17
1ff1c     51 03 48 FC | 	wrbyte	#1, local12
1ff20     01 34 06 F6 | 	mov	result1, #1
1ff24     98 05 90 FD | 	jmp	#LR__1214
1ff28                 | LR__1198
1ff28     04 50 05 F1 | 	add	fp, #4
1ff2c     A8 A2 02 FB | 	rdlong	local12, fp
1ff30     18 50 05 F1 | 	add	fp, #24
1ff34     A8 A4 02 FB | 	rdlong	local13, fp
1ff38     18 A2 06 F1 | 	add	local12, #24
1ff3c     51 A5 62 FC | 	wrlong	local13, local12
1ff40     18 50 85 F1 | 	sub	fp, #24
1ff44     A8 A2 02 FB | 	rdlong	local12, fp
1ff48     04 50 85 F1 | 	sub	fp, #4
1ff4c     08 A2 06 F1 | 	add	local12, #8
1ff50     51 A5 0A FB | 	rdlong	local13, local12 wz
1ff54     1C 00 90 5D |  if_ne	jmp	#LR__1199
1ff58     04 50 05 F1 | 	add	fp, #4
1ff5c     A8 A2 02 FB | 	rdlong	local12, fp
1ff60     18 50 05 F1 | 	add	fp, #24
1ff64     A8 A4 02 FB | 	rdlong	local13, fp
1ff68     1C 50 85 F1 | 	sub	fp, #28
1ff6c     08 A2 06 F1 | 	add	local12, #8
1ff70     51 A5 62 FC | 	wrlong	local13, local12
1ff74                 | LR__1199
1ff74                 | LR__1200
1ff74     04 50 05 F1 | 	add	fp, #4
1ff78     A8 96 02 FB | 	rdlong	local06, fp
1ff7c     04 50 85 F1 | 	sub	fp, #4
1ff80     10 96 06 F1 | 	add	local06, #16
1ff84     4B A3 C2 FA | 	rdbyte	local12, local06
1ff88     80 A2 CE F7 | 	test	local12, #128 wz
1ff8c     7C 00 90 AD |  if_e	jmp	#LR__1202
1ff90     18 50 05 F1 | 	add	fp, #24
1ff94     A8 96 02 FB | 	rdlong	local06, fp
1ff98     01 96 06 F1 | 	add	local06, #1
1ff9c     4B 75 C2 FA | 	rdbyte	arg01, local06
1ffa0     14 50 85 F1 | 	sub	fp, #20
1ffa4     A8 8C 02 FB | 	rdlong	local01, fp
1ffa8     46 77 02 F6 | 	mov	arg02, local01
1ffac     28 76 06 F1 | 	add	arg02, #40
1ffb0     04 50 85 F1 | 	sub	fp, #4
1ffb4     1C 8C 06 F1 | 	add	local01, #28
1ffb8     46 79 02 FB | 	rdlong	arg03, local01
1ffbc     01 7A 06 F6 | 	mov	arg04, #1
1ffc0     40 C8 BF FD | 	call	#_fatfs_cc_disk_write
1ffc4     00 34 0E F2 | 	cmp	result1, #0 wz
1ffc8     1C 00 90 AD |  if_e	jmp	#LR__1201
1ffcc     04 50 05 F1 | 	add	fp, #4
1ffd0     A8 A2 02 FB | 	rdlong	local12, fp
1ffd4     04 50 85 F1 | 	sub	fp, #4
1ffd8     11 A2 06 F1 | 	add	local12, #17
1ffdc     51 03 48 FC | 	wrbyte	#1, local12
1ffe0     01 34 06 F6 | 	mov	result1, #1
1ffe4     D8 04 90 FD | 	jmp	#LR__1214
1ffe8                 | LR__1201
1ffe8     04 50 05 F1 | 	add	fp, #4
1ffec     A8 8C 02 FB | 	rdlong	local01, fp
1fff0     46 A3 02 F6 | 	mov	local12, local01
1fff4     04 50 85 F1 | 	sub	fp, #4
1fff8     10 8C 06 F1 | 	add	local01, #16
1fffc     46 A5 C2 FA | 	rdbyte	local13, local01
20000     7F A4 06 F5 | 	and	local13, #127
20004     10 A2 06 F1 | 	add	local12, #16
20008     51 A5 42 FC | 	wrbyte	local13, local12
2000c                 | LR__1202
2000c     18 50 05 F1 | 	add	fp, #24
20010     A8 74 02 FB | 	rdlong	arg01, fp
20014     14 50 85 F1 | 	sub	fp, #20
20018     A8 A4 02 FB | 	rdlong	local13, fp
2001c     04 50 85 F1 | 	sub	fp, #4
20020     18 A4 06 F1 | 	add	local13, #24
20024     52 77 02 FB | 	rdlong	arg02, local13
20028     BC CD BF FD | 	call	#_fatfs_cc_clst2sect
2002c     20 50 05 F1 | 	add	fp, #32
20030     A8 34 62 FC | 	wrlong	result1, fp
20034     20 50 85 F1 | 	sub	fp, #32
20038     00 34 0E F2 | 	cmp	result1, #0 wz
2003c     1C 00 90 5D |  if_ne	jmp	#LR__1203
20040     04 50 05 F1 | 	add	fp, #4
20044     A8 A2 02 FB | 	rdlong	local12, fp
20048     04 50 85 F1 | 	sub	fp, #4
2004c     11 A2 06 F1 | 	add	local12, #17
20050     51 05 48 FC | 	wrbyte	#2, local12
20054     02 34 06 F6 | 	mov	result1, #2
20058     64 04 90 FD | 	jmp	#LR__1214
2005c                 | LR__1203
2005c     20 50 05 F1 | 	add	fp, #32
20060     A8 A2 02 FB | 	rdlong	local12, fp
20064     0C 50 05 F1 | 	add	fp, #12
20068     A8 A4 02 FB | 	rdlong	local13, fp
2006c     52 A3 02 F1 | 	add	local12, local13
20070     0C 50 85 F1 | 	sub	fp, #12
20074     A8 A2 62 FC | 	wrlong	local12, fp
20078     14 50 85 F1 | 	sub	fp, #20
2007c     A8 A2 02 FB | 	rdlong	local12, fp
20080     09 A2 46 F0 | 	shr	local12, #9
20084     1C 50 05 F1 | 	add	fp, #28
20088     A8 A2 62 FC | 	wrlong	local12, fp
2008c     28 50 85 F1 | 	sub	fp, #40
20090     01 A2 16 F2 | 	cmp	local12, #1 wc
20094     60 01 90 CD |  if_b	jmp	#LR__1207
20098     2C 50 05 F1 | 	add	fp, #44
2009c     A8 A2 02 FB | 	rdlong	local12, fp
200a0     04 50 85 F1 | 	sub	fp, #4
200a4     A8 A4 02 FB | 	rdlong	local13, fp
200a8     52 A3 02 F1 | 	add	local12, local13
200ac     10 50 85 F1 | 	sub	fp, #16
200b0     A8 A0 02 FB | 	rdlong	local11, fp
200b4     18 50 85 F1 | 	sub	fp, #24
200b8     0A A0 06 F1 | 	add	local11, #10
200bc     50 99 E2 FA | 	rdword	local07, local11
200c0     4C A3 1A F2 | 	cmp	local12, local07 wcz
200c4     28 00 90 ED |  if_be	jmp	#LR__1204
200c8     18 50 05 F1 | 	add	fp, #24
200cc     A8 96 02 FB | 	rdlong	local06, fp
200d0     0A 96 06 F1 | 	add	local06, #10
200d4     4B A3 E2 FA | 	rdword	local12, local06
200d8     14 50 05 F1 | 	add	fp, #20
200dc     A8 98 02 FB | 	rdlong	local07, fp
200e0     4C A3 82 F1 | 	sub	local12, local07
200e4     04 50 85 F1 | 	sub	fp, #4
200e8     A8 A2 62 FC | 	wrlong	local12, fp
200ec     28 50 85 F1 | 	sub	fp, #40
200f0                 | LR__1204
200f0     18 50 05 F1 | 	add	fp, #24
200f4     A8 96 02 FB | 	rdlong	local06, fp
200f8     01 96 06 F1 | 	add	local06, #1
200fc     4B 75 C2 FA | 	rdbyte	arg01, local06
20100     18 50 05 F1 | 	add	fp, #24
20104     A8 76 02 FB | 	rdlong	arg02, fp
20108     10 50 85 F1 | 	sub	fp, #16
2010c     A8 78 02 FB | 	rdlong	arg03, fp
20110     08 50 05 F1 | 	add	fp, #8
20114     A8 7A 02 FB | 	rdlong	arg04, fp
20118     28 50 85 F1 | 	sub	fp, #40
2011c     E4 C6 BF FD | 	call	#_fatfs_cc_disk_write
20120     00 34 0E F2 | 	cmp	result1, #0 wz
20124     1C 00 90 AD |  if_e	jmp	#LR__1205
20128     04 50 05 F1 | 	add	fp, #4
2012c     A8 A2 02 FB | 	rdlong	local12, fp
20130     04 50 85 F1 | 	sub	fp, #4
20134     11 A2 06 F1 | 	add	local12, #17
20138     51 03 48 FC | 	wrbyte	#1, local12
2013c     01 34 06 F6 | 	mov	result1, #1
20140     7C 03 90 FD | 	jmp	#LR__1214
20144                 | LR__1205
20144     04 50 05 F1 | 	add	fp, #4
20148     A8 96 02 FB | 	rdlong	local06, fp
2014c     1C 96 06 F1 | 	add	local06, #28
20150     4B A3 02 FB | 	rdlong	local12, local06
20154     1C 50 05 F1 | 	add	fp, #28
20158     A8 98 02 FB | 	rdlong	local07, fp
2015c     4C A3 82 F1 | 	sub	local12, local07
20160     08 50 05 F1 | 	add	fp, #8
20164     A8 9C 02 FB | 	rdlong	local09, fp
20168     28 50 85 F1 | 	sub	fp, #40
2016c     4E A3 12 F2 | 	cmp	local12, local09 wc
20170     68 00 90 3D |  if_ae	jmp	#LR__1206
20174     04 50 05 F1 | 	add	fp, #4
20178     A8 74 02 FB | 	rdlong	arg01, fp
2017c     28 74 06 F1 | 	add	arg01, #40
20180     2C 50 05 F1 | 	add	fp, #44
20184     A8 76 02 FB | 	rdlong	arg02, fp
20188     2C 50 85 F1 | 	sub	fp, #44
2018c     A8 A0 02 FB | 	rdlong	local11, fp
20190     1C A0 06 F1 | 	add	local11, #28
20194     50 A5 02 FB | 	rdlong	local13, local11
20198     1C 50 05 F1 | 	add	fp, #28
2019c     A8 9E 02 FB | 	rdlong	local10, fp
201a0     20 50 85 F1 | 	sub	fp, #32
201a4     4F A5 82 F1 | 	sub	local13, local10
201a8     09 A4 66 F0 | 	shl	local13, #9
201ac     52 77 02 F1 | 	add	arg02, local13
201b0     09 78 C6 F9 | 	decod	arg03, #9
201b4     50 50 B0 FD | 	call	#__system____builtin_memmove
201b8     04 50 05 F1 | 	add	fp, #4
201bc     A8 8C 02 FB | 	rdlong	local01, fp
201c0     46 A3 02 F6 | 	mov	local12, local01
201c4     04 50 85 F1 | 	sub	fp, #4
201c8     10 8C 06 F1 | 	add	local01, #16
201cc     46 A5 C2 FA | 	rdbyte	local13, local01
201d0     7F A4 06 F5 | 	and	local13, #127
201d4     10 A2 06 F1 | 	add	local12, #16
201d8     51 A5 42 FC | 	wrbyte	local13, local12
201dc                 | LR__1206
201dc     28 50 05 F1 | 	add	fp, #40
201e0     A8 A2 02 FB | 	rdlong	local12, fp
201e4     09 A2 66 F0 | 	shl	local12, #9
201e8     04 50 85 F1 | 	sub	fp, #4
201ec     A8 A2 62 FC | 	wrlong	local12, fp
201f0     24 50 85 F1 | 	sub	fp, #36
201f4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
201f4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
201f4                 | ' 				}
201f4                 | ' 
201f4                 | ' 
201f4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
201f4                 | ' 				continue;
201f4     60 01 90 FD | 	jmp	#LR__1210
201f8                 | LR__1207
201f8     04 50 05 F1 | 	add	fp, #4
201fc     A8 A2 02 FB | 	rdlong	local12, fp
20200     1C A2 06 F1 | 	add	local12, #28
20204     51 A5 02 FB | 	rdlong	local13, local12
20208     1C 50 05 F1 | 	add	fp, #28
2020c     A8 98 02 FB | 	rdlong	local07, fp
20210     20 50 85 F1 | 	sub	fp, #32
20214     4C A5 0A F2 | 	cmp	local13, local07 wz
20218     7C 00 90 AD |  if_e	jmp	#LR__1208
2021c     04 50 05 F1 | 	add	fp, #4
20220     A8 9E 02 FB | 	rdlong	local10, fp
20224     4F 9D 02 F6 | 	mov	local09, local10
20228     04 50 85 F1 | 	sub	fp, #4
2022c     14 9C 06 F1 | 	add	local09, #20
20230     4E 8F 02 FB | 	rdlong	local02, local09
20234     0C 9E 06 F1 | 	add	local10, #12
20238     4F A5 02 FB | 	rdlong	local13, local10
2023c     52 8F 12 F2 | 	cmp	local02, local13 wc
20240     54 00 90 3D |  if_ae	jmp	#LR__1208
20244     18 50 05 F1 | 	add	fp, #24
20248     A8 A2 02 FB | 	rdlong	local12, fp
2024c     01 A2 06 F1 | 	add	local12, #1
20250     51 75 C2 FA | 	rdbyte	arg01, local12
20254     14 50 85 F1 | 	sub	fp, #20
20258     A8 76 02 FB | 	rdlong	arg02, fp
2025c     28 76 06 F1 | 	add	arg02, #40
20260     1C 50 05 F1 | 	add	fp, #28
20264     A8 78 02 FB | 	rdlong	arg03, fp
20268     20 50 85 F1 | 	sub	fp, #32
2026c     01 7A 06 F6 | 	mov	arg04, #1
20270     D4 C4 BF FD | 	call	#_fatfs_cc_disk_read
20274     00 34 0E F2 | 	cmp	result1, #0 wz
20278     1C 00 90 AD |  if_e	jmp	#LR__1208
2027c     04 50 05 F1 | 	add	fp, #4
20280     A8 A2 02 FB | 	rdlong	local12, fp
20284     04 50 85 F1 | 	sub	fp, #4
20288     11 A2 06 F1 | 	add	local12, #17
2028c     51 03 48 FC | 	wrbyte	#1, local12
20290                 | ' 				fp->fptr < fp->obj.objsize &&
20290                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
20290                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
20290     01 34 06 F6 | 	mov	result1, #1
20294     28 02 90 FD | 	jmp	#LR__1214
20298                 | LR__1208
20298     04 50 05 F1 | 	add	fp, #4
2029c     A8 A2 02 FB | 	rdlong	local12, fp
202a0     1C 50 05 F1 | 	add	fp, #28
202a4     A8 A4 02 FB | 	rdlong	local13, fp
202a8     20 50 85 F1 | 	sub	fp, #32
202ac     1C A2 06 F1 | 	add	local12, #28
202b0     51 A5 62 FC | 	wrlong	local13, local12
202b4                 | LR__1209
202b4     04 50 05 F1 | 	add	fp, #4
202b8     A8 96 02 FB | 	rdlong	local06, fp
202bc     14 96 06 F1 | 	add	local06, #20
202c0     4B 8D 02 FB | 	rdlong	local01, local06
202c4     FF 8D 06 F5 | 	and	local01, #511
202c8     09 A2 C6 F9 | 	decod	local12, #9
202cc     46 A3 82 F1 | 	sub	local12, local01
202d0     20 50 05 F1 | 	add	fp, #32
202d4     A8 A2 62 FC | 	wrlong	local12, fp
202d8     18 50 85 F1 | 	sub	fp, #24
202dc     A8 A4 02 FB | 	rdlong	local13, fp
202e0     0C 50 85 F1 | 	sub	fp, #12
202e4     52 A3 1A F2 | 	cmp	local12, local13 wcz
202e8     0C 50 05 11 |  if_a	add	fp, #12
202ec     A8 A2 02 1B |  if_a	rdlong	local12, fp
202f0     18 50 05 11 |  if_a	add	fp, #24
202f4     A8 A2 62 1C |  if_a	wrlong	local12, fp
202f8     24 50 85 11 |  if_a	sub	fp, #36
202fc     04 50 05 F1 | 	add	fp, #4
20300     A8 A0 02 FB | 	rdlong	local11, fp
20304     50 75 02 F6 | 	mov	arg01, local11
20308     28 74 06 F1 | 	add	arg01, #40
2030c     14 A0 06 F1 | 	add	local11, #20
20310     50 8F 02 FB | 	rdlong	local02, local11
20314     FF 8F 06 F5 | 	and	local02, #511
20318     47 75 02 F1 | 	add	arg01, local02
2031c     2C 50 05 F1 | 	add	fp, #44
20320     A8 76 02 FB | 	rdlong	arg02, fp
20324     0C 50 85 F1 | 	sub	fp, #12
20328     A8 78 02 FB | 	rdlong	arg03, fp
2032c     24 50 85 F1 | 	sub	fp, #36
20330     D4 4E B0 FD | 	call	#__system____builtin_memmove
20334     04 50 05 F1 | 	add	fp, #4
20338     A8 8C 02 FB | 	rdlong	local01, fp
2033c     46 A3 02 F6 | 	mov	local12, local01
20340     04 50 85 F1 | 	sub	fp, #4
20344     10 8C 06 F1 | 	add	local01, #16
20348     46 A5 C2 FA | 	rdbyte	local13, local01
2034c     80 A4 46 F5 | 	or	local13, #128
20350     10 A2 06 F1 | 	add	local12, #16
20354     51 A5 42 FC | 	wrbyte	local13, local12
20358                 | LR__1210
20358     0C 50 05 F1 | 	add	fp, #12
2035c     A8 A2 02 FB | 	rdlong	local12, fp
20360     18 50 05 F1 | 	add	fp, #24
20364     A8 8C 02 FB | 	rdlong	local01, fp
20368     46 A3 82 F1 | 	sub	local12, local01
2036c     18 50 85 F1 | 	sub	fp, #24
20370     A8 A2 62 FC | 	wrlong	local12, fp
20374     04 50 05 F1 | 	add	fp, #4
20378     A8 9A 02 FB | 	rdlong	local08, fp
2037c     4D 99 02 F6 | 	mov	local07, local08
20380     4D 9D 02 FB | 	rdlong	local09, local08
20384     14 50 05 F1 | 	add	fp, #20
20388     A8 8E 02 FB | 	rdlong	local02, fp
2038c     47 91 02 F6 | 	mov	local03, local02
20390     47 9D 02 F1 | 	add	local09, local02
20394     4C 9D 62 FC | 	wrlong	local09, local07
20398     0C 50 05 F1 | 	add	fp, #12
2039c     A8 A6 02 FB | 	rdlong	local14, fp
203a0     53 A9 02 F6 | 	mov	local15, local14
203a4     0C 50 85 F1 | 	sub	fp, #12
203a8     A8 AA 02 FB | 	rdlong	local16, fp
203ac     55 AD 02 F6 | 	mov	local17, local16
203b0     55 A9 02 F1 | 	add	local15, local16
203b4     0C 50 05 F1 | 	add	fp, #12
203b8     A8 A8 62 FC | 	wrlong	local15, fp
203bc     2C 50 85 F1 | 	sub	fp, #44
203c0     A8 AE 02 FB | 	rdlong	local18, fp
203c4     57 B1 02 F6 | 	mov	local19, local18
203c8     57 B3 02 F6 | 	mov	local20, local18
203cc     59 B5 02 F6 | 	mov	local21, local20
203d0     14 B4 06 F1 | 	add	local21, #20
203d4     5A B7 02 FB | 	rdlong	local22, local21
203d8     14 B4 86 F1 | 	sub	local21, #20
203dc     5B B9 02 F6 | 	mov	local23, local22
203e0     20 50 05 F1 | 	add	fp, #32
203e4     A8 BA 02 FB | 	rdlong	local24, fp
203e8     5D BD 02 F6 | 	mov	local25, local24
203ec     5D B9 02 F1 | 	add	local23, local24
203f0     14 B0 06 F1 | 	add	local19, #20
203f4     58 B9 62 FC | 	wrlong	local23, local19
203f8     14 B0 86 F1 | 	sub	local19, #20
203fc     20 50 85 F1 | 	sub	fp, #32
20400     A8 BE 02 FB | 	rdlong	local26, fp
20404     5F C1 02 F6 | 	mov	local27, local26
20408     5F C3 02 F6 | 	mov	local28, local26
2040c     61 C5 02 F6 | 	mov	local29, local28
20410     5F C7 02 F6 | 	mov	local30, local26
20414     04 50 85 F1 | 	sub	fp, #4
20418     63 C9 02 F6 | 	mov	local31, local30
2041c     14 C4 06 F1 | 	add	local29, #20
20420     62 CB 02 FB | 	rdlong	local32, local29
20424     14 C4 86 F1 | 	sub	local29, #20
20428     65 CD 02 F6 | 	mov	local33, local32
2042c     0C C8 06 F1 | 	add	local31, #12
20430     64 CF 02 FB | 	rdlong	local34, local31
20434     0C C8 86 F1 | 	sub	local31, #12
20438     67 D1 02 F6 | 	mov	local35, local34
2043c     68 CD 1A F2 | 	cmp	local33, local35 wcz
20440     24 00 90 ED |  if_be	jmp	#LR__1211
20444     04 50 05 F1 | 	add	fp, #4
20448     A8 D2 02 FB | 	rdlong	local36, fp
2044c     04 50 85 F1 | 	sub	fp, #4
20450     69 D5 02 F6 | 	mov	local37, local36
20454     14 D4 06 F1 | 	add	local37, #20
20458     6A D7 02 FB | 	rdlong	local38, local37
2045c     14 D4 86 F1 | 	sub	local37, #20
20460     6B D9 02 F6 | 	mov	local39, local38
20464     20 00 90 FD | 	jmp	#LR__1212
20468                 | LR__1211
20468     04 50 05 F1 | 	add	fp, #4
2046c     A8 DA 02 FB | 	rdlong	local40, fp
20470     04 50 85 F1 | 	sub	fp, #4
20474     6D DD 02 F6 | 	mov	local41, local40
20478     0C DC 06 F1 | 	add	local41, #12
2047c     6E DF 02 FB | 	rdlong	local42, local41
20480     0C DC 86 F1 | 	sub	local41, #12
20484     6F D9 02 F6 | 	mov	local39, local42
20488                 | LR__1212
20488     0C C0 06 F1 | 	add	local27, #12
2048c     60 D9 62 FC | 	wrlong	local39, local27
20490     0C C0 86 F1 | 	sub	local27, #12
20494     18 F9 9F FD | 	jmp	#LR__1194
20498                 | LR__1213
20498     04 50 05 F1 | 	add	fp, #4
2049c     A8 96 02 FB | 	rdlong	local06, fp
204a0     4B 95 02 F6 | 	mov	local05, local06
204a4     04 50 85 F1 | 	sub	fp, #4
204a8     10 96 06 F1 | 	add	local06, #16
204ac     4B A3 C2 FA | 	rdbyte	local12, local06
204b0     40 A2 46 F5 | 	or	local12, #64
204b4     10 94 06 F1 | 	add	local05, #16
204b8     4A A3 42 FC | 	wrbyte	local12, local05
204bc                 | ' 
204bc                 | ' 
204bc                 | ' 
204bc                 | ' 
204bc                 | ' 
204bc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
204bc                 | ' 		fp->flag |=  0x80 ;
204bc                 | ' 
204bc                 | ' 	}
204bc                 | ' 
204bc                 | ' 	fp->flag |=  0x40 ;
204bc                 | ' 
204bc                 | ' 	return FR_OK ;
204bc     00 34 06 F6 | 	mov	result1, #0
204c0                 | LR__1214
204c0     A8 F0 03 F6 | 	mov	ptra, fp
204c4     B3 00 A0 FD | 	call	#popregs_
204c8                 | _fatfs_cc_f_write_ret
204c8     2D 00 64 FD | 	ret
204cc                 | 
204cc                 | _fatfs_cc_f_sync
204cc     01 4C 05 F6 | 	mov	COUNT_, #1
204d0     A9 00 A0 FD | 	call	#pushregs_
204d4     18 F0 07 F1 | 	add	ptra, #24
204d8     04 50 05 F1 | 	add	fp, #4
204dc     A8 74 62 FC | 	wrlong	arg01, fp
204e0     08 50 05 F1 | 	add	fp, #8
204e4     A8 76 02 F6 | 	mov	arg02, fp
204e8     0C 50 85 F1 | 	sub	fp, #12
204ec     C8 E7 BF FD | 	call	#_fatfs_cc_validate
204f0     08 50 05 F1 | 	add	fp, #8
204f4     A8 34 62 FC | 	wrlong	result1, fp
204f8     08 50 85 F1 | 	sub	fp, #8
204fc     00 34 0E F2 | 	cmp	result1, #0 wz
20500     C4 01 90 5D |  if_ne	jmp	#LR__1218
20504     04 50 05 F1 | 	add	fp, #4
20508     A8 34 02 FB | 	rdlong	result1, fp
2050c     04 50 85 F1 | 	sub	fp, #4
20510     10 34 06 F1 | 	add	result1, #16
20514     1A 35 C2 FA | 	rdbyte	result1, result1
20518     40 34 CE F7 | 	test	result1, #64 wz
2051c     A8 01 90 AD |  if_e	jmp	#LR__1217
20520     04 50 05 F1 | 	add	fp, #4
20524     A8 34 02 FB | 	rdlong	result1, fp
20528     04 50 85 F1 | 	sub	fp, #4
2052c     10 34 06 F1 | 	add	result1, #16
20530     1A 35 C2 FA | 	rdbyte	result1, result1
20534     80 34 CE F7 | 	test	result1, #128 wz
20538     64 00 90 AD |  if_e	jmp	#LR__1215
2053c     0C 50 05 F1 | 	add	fp, #12
20540     A8 7A 02 FB | 	rdlong	arg04, fp
20544     01 7A 06 F1 | 	add	arg04, #1
20548     3D 75 C2 FA | 	rdbyte	arg01, arg04
2054c     08 50 85 F1 | 	sub	fp, #8
20550     A8 7A 02 FB | 	rdlong	arg04, fp
20554     3D 77 02 F6 | 	mov	arg02, arg04
20558     28 76 06 F1 | 	add	arg02, #40
2055c     04 50 85 F1 | 	sub	fp, #4
20560     1C 7A 06 F1 | 	add	arg04, #28
20564     3D 79 02 FB | 	rdlong	arg03, arg04
20568     01 7A 06 F6 | 	mov	arg04, #1
2056c     94 C2 BF FD | 	call	#_fatfs_cc_disk_write
20570     00 34 0E F2 | 	cmp	result1, #0 wz
20574     01 34 06 56 |  if_ne	mov	result1, #1
20578     58 01 90 5D |  if_ne	jmp	#LR__1219
2057c     04 50 05 F1 | 	add	fp, #4
20580     A8 34 02 FB | 	rdlong	result1, fp
20584     1A 8D 02 F6 | 	mov	local01, result1
20588     04 50 85 F1 | 	sub	fp, #4
2058c     10 34 06 F1 | 	add	result1, #16
20590     1A 35 C2 FA | 	rdbyte	result1, result1
20594     7F 34 06 F5 | 	and	result1, #127
20598     10 8C 06 F1 | 	add	local01, #16
2059c     46 35 42 FC | 	wrbyte	result1, local01
205a0                 | LR__1215
205a0     C4 2A B0 FD | 	call	#_fatfs_cc__get_fattime
205a4     10 50 05 F1 | 	add	fp, #16
205a8     A8 34 62 FC | 	wrlong	result1, fp
205ac     04 50 85 F1 | 	sub	fp, #4
205b0     A8 74 02 FB | 	rdlong	arg01, fp
205b4     08 50 85 F1 | 	sub	fp, #8
205b8     A8 8C 02 FB | 	rdlong	local01, fp
205bc     04 50 85 F1 | 	sub	fp, #4
205c0     20 8C 06 F1 | 	add	local01, #32
205c4     46 77 02 FB | 	rdlong	arg02, local01
205c8     8C C6 BF FD | 	call	#_fatfs_cc_move_window
205cc     08 50 05 F1 | 	add	fp, #8
205d0     A8 34 62 FC | 	wrlong	result1, fp
205d4     08 50 85 F1 | 	sub	fp, #8
205d8     00 34 0E F2 | 	cmp	result1, #0 wz
205dc     E8 00 90 5D |  if_ne	jmp	#LR__1216
205e0     04 50 05 F1 | 	add	fp, #4
205e4     A8 8C 02 FB | 	rdlong	local01, fp
205e8     24 8C 06 F1 | 	add	local01, #36
205ec     46 8D 02 FB | 	rdlong	local01, local01
205f0     10 50 05 F1 | 	add	fp, #16
205f4     A8 8C 62 FC | 	wrlong	local01, fp
205f8     46 79 02 F6 | 	mov	arg03, local01
205fc     0B 78 06 F1 | 	add	arg03, #11
20600     3C 79 C2 FA | 	rdbyte	arg03, arg03
20604     20 78 46 F5 | 	or	arg03, #32
20608     0B 8C 06 F1 | 	add	local01, #11
2060c     46 79 42 FC | 	wrbyte	arg03, local01
20610     10 50 85 F1 | 	sub	fp, #16
20614     A8 8C 02 FB | 	rdlong	local01, fp
20618     46 75 02 FB | 	rdlong	arg01, local01
2061c     10 50 05 F1 | 	add	fp, #16
20620     A8 76 02 FB | 	rdlong	arg02, fp
20624     14 50 85 F1 | 	sub	fp, #20
20628     08 8C 06 F1 | 	add	local01, #8
2062c     46 79 02 FB | 	rdlong	arg03, local01
20630     A0 D4 BF FD | 	call	#_fatfs_cc_st_clust
20634     14 50 05 F1 | 	add	fp, #20
20638     A8 74 02 FB | 	rdlong	arg01, fp
2063c     1C 74 06 F1 | 	add	arg01, #28
20640     10 50 85 F1 | 	sub	fp, #16
20644     A8 8C 02 FB | 	rdlong	local01, fp
20648     0C 8C 06 F1 | 	add	local01, #12
2064c     46 77 02 FB | 	rdlong	arg02, local01
20650     3A 77 62 FC | 	wrlong	arg02, arg01
20654     10 50 05 F1 | 	add	fp, #16
20658     A8 74 02 FB | 	rdlong	arg01, fp
2065c     16 74 06 F1 | 	add	arg01, #22
20660     04 50 85 F1 | 	sub	fp, #4
20664     A8 76 02 FB | 	rdlong	arg02, fp
20668     3A 77 62 FC | 	wrlong	arg02, arg01
2066c     04 50 05 F1 | 	add	fp, #4
20670     A8 74 02 FB | 	rdlong	arg01, fp
20674     12 74 06 F1 | 	add	arg01, #18
20678     00 76 06 F6 | 	mov	arg02, #0
2067c     3A 01 58 FC | 	wrword	#0, arg01
20680     08 50 85 F1 | 	sub	fp, #8
20684     A8 8C 02 FB | 	rdlong	local01, fp
20688     03 8C 06 F1 | 	add	local01, #3
2068c     46 03 48 FC | 	wrbyte	#1, local01
20690     A8 74 02 FB | 	rdlong	arg01, fp
20694     0C 50 85 F1 | 	sub	fp, #12
20698     34 C6 BF FD | 	call	#_fatfs_cc_sync_fs
2069c     08 50 05 F1 | 	add	fp, #8
206a0     A8 34 62 FC | 	wrlong	result1, fp
206a4     04 50 85 F1 | 	sub	fp, #4
206a8     A8 7A 02 FB | 	rdlong	arg04, fp
206ac     3D 8D 02 F6 | 	mov	local01, arg04
206b0     04 50 85 F1 | 	sub	fp, #4
206b4     10 7A 06 F1 | 	add	arg04, #16
206b8     3D 7B C2 FA | 	rdbyte	arg04, arg04
206bc     BF 7A 06 F5 | 	and	arg04, #191
206c0     10 8C 06 F1 | 	add	local01, #16
206c4     46 7B 42 FC | 	wrbyte	arg04, local01
206c8                 | LR__1216
206c8                 | LR__1217
206c8                 | LR__1218
206c8                 | ' 					dir = fp->dir_ptr;
206c8                 | ' 					dir[ 11 ] |=  0x20 ;
206c8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
206c8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
206c8                 | ' 					st_dword(dir +  22 , tm);
206c8                 | ' 					st_word(dir +  18 , 0);
206c8                 | ' 					fs->wflag = 1;
206c8                 | ' 					res = sync_fs(fs);
206c8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
206c8                 | ' 				}
206c8                 | ' 			}
206c8                 | ' 		}
206c8                 | ' 	}
206c8                 | ' 
206c8                 | ' 	return res ;
206c8     08 50 05 F1 | 	add	fp, #8
206cc     A8 34 02 FB | 	rdlong	result1, fp
206d0     08 50 85 F1 | 	sub	fp, #8
206d4                 | LR__1219
206d4     A8 F0 03 F6 | 	mov	ptra, fp
206d8     B3 00 A0 FD | 	call	#popregs_
206dc                 | _fatfs_cc_f_sync_ret
206dc     2D 00 64 FD | 	ret
206e0                 | 
206e0                 | _fatfs_cc_f_close
206e0     01 4C 05 F6 | 	mov	COUNT_, #1
206e4     A9 00 A0 FD | 	call	#pushregs_
206e8     10 F0 07 F1 | 	add	ptra, #16
206ec     04 50 05 F1 | 	add	fp, #4
206f0     A8 74 62 FC | 	wrlong	arg01, fp
206f4     04 50 85 F1 | 	sub	fp, #4
206f8     D0 FD BF FD | 	call	#_fatfs_cc_f_sync
206fc     08 50 05 F1 | 	add	fp, #8
20700     A8 34 62 FC | 	wrlong	result1, fp
20704     08 50 85 F1 | 	sub	fp, #8
20708     00 34 0E F2 | 	cmp	result1, #0 wz
2070c     38 00 90 5D |  if_ne	jmp	#LR__1220
20710     04 50 05 F1 | 	add	fp, #4
20714     A8 74 02 FB | 	rdlong	arg01, fp
20718     08 50 05 F1 | 	add	fp, #8
2071c     A8 76 02 F6 | 	mov	arg02, fp
20720     0C 50 85 F1 | 	sub	fp, #12
20724     90 E5 BF FD | 	call	#_fatfs_cc_validate
20728     08 50 05 F1 | 	add	fp, #8
2072c     A8 34 62 FC | 	wrlong	result1, fp
20730     08 50 85 F1 | 	sub	fp, #8
20734     00 34 0E F2 | 	cmp	result1, #0 wz
20738     04 50 05 A1 |  if_e	add	fp, #4
2073c     A8 8C 02 AB |  if_e	rdlong	local01, fp
20740     04 50 85 A1 |  if_e	sub	fp, #4
20744     46 01 68 AC |  if_e	wrlong	#0, local01
20748                 | LR__1220
20748                 | ' 
20748                 | ' 
20748                 | ' 
20748                 | ' 
20748                 | ' 			fp->obj.fs = 0;
20748                 | ' #line 4191 "ff.c"
20748                 | ' 		}
20748                 | ' 	}
20748                 | ' 	return res;
20748     08 50 05 F1 | 	add	fp, #8
2074c     A8 34 02 FB | 	rdlong	result1, fp
20750     08 50 85 F1 | 	sub	fp, #8
20754     A8 F0 03 F6 | 	mov	ptra, fp
20758     B3 00 A0 FD | 	call	#popregs_
2075c                 | _fatfs_cc_f_close_ret
2075c     2D 00 64 FD | 	ret
20760                 | 
20760                 | _fatfs_cc_f_lseek
20760     0C 4C 05 F6 | 	mov	COUNT_, #12
20764     A9 00 A0 FD | 	call	#pushregs_
20768     24 F0 07 F1 | 	add	ptra, #36
2076c     04 50 05 F1 | 	add	fp, #4
20770     A8 74 62 FC | 	wrlong	arg01, fp
20774     04 50 05 F1 | 	add	fp, #4
20778     A8 76 62 FC | 	wrlong	arg02, fp
2077c     04 50 85 F1 | 	sub	fp, #4
20780     A8 74 02 FB | 	rdlong	arg01, fp
20784     0C 50 05 F1 | 	add	fp, #12
20788     A8 76 02 F6 | 	mov	arg02, fp
2078c     10 50 85 F1 | 	sub	fp, #16
20790     24 E5 BF FD | 	call	#_fatfs_cc_validate
20794     0C 50 05 F1 | 	add	fp, #12
20798     A8 34 62 FC | 	wrlong	result1, fp
2079c     0C 50 85 F1 | 	sub	fp, #12
207a0     00 34 0E F2 | 	cmp	result1, #0 wz
207a4     1C 00 90 5D |  if_ne	jmp	#LR__1221
207a8     04 50 05 F1 | 	add	fp, #4
207ac     A8 8C 02 FB | 	rdlong	local01, fp
207b0     11 8C 06 F1 | 	add	local01, #17
207b4     46 8D C2 FA | 	rdbyte	local01, local01
207b8     08 50 05 F1 | 	add	fp, #8
207bc     A8 8C 62 FC | 	wrlong	local01, fp
207c0     0C 50 85 F1 | 	sub	fp, #12
207c4                 | LR__1221
207c4     0C 50 05 F1 | 	add	fp, #12
207c8     A8 8C 0A FB | 	rdlong	local01, fp wz
207cc     0C 50 85 F1 | 	sub	fp, #12
207d0     0C 50 05 51 |  if_ne	add	fp, #12
207d4     A8 34 02 5B |  if_ne	rdlong	result1, fp
207d8     0C 50 85 51 |  if_ne	sub	fp, #12
207dc     80 06 90 5D |  if_ne	jmp	#LR__1244
207e0     04 50 05 F1 | 	add	fp, #4
207e4     A8 8C 02 FB | 	rdlong	local01, fp
207e8     04 50 05 F1 | 	add	fp, #4
207ec     A8 8E 02 FB | 	rdlong	local02, fp
207f0     08 50 85 F1 | 	sub	fp, #8
207f4     0C 8C 06 F1 | 	add	local01, #12
207f8     46 91 02 FB | 	rdlong	local03, local01
207fc     48 93 02 F6 | 	mov	local04, local03
20800     49 8F 1A F2 | 	cmp	local02, local04 wcz
20804     4C 00 90 ED |  if_be	jmp	#LR__1222
20808     04 50 05 F1 | 	add	fp, #4
2080c     A8 94 02 FB | 	rdlong	local05, fp
20810     04 50 85 F1 | 	sub	fp, #4
20814     4A 97 02 F6 | 	mov	local06, local05
20818     10 96 06 F1 | 	add	local06, #16
2081c     4B 99 C2 FA | 	rdbyte	local07, local06
20820     10 96 86 F1 | 	sub	local06, #16
20824     4C 9B E2 F8 | 	getbyte	local08, local07, #0
20828     02 9A 0E F5 | 	and	local08, #2 wz
2082c     24 00 90 5D |  if_ne	jmp	#LR__1222
20830     04 50 05 F1 | 	add	fp, #4
20834     A8 8C 02 FB | 	rdlong	local01, fp
20838     46 9D 02 F6 | 	mov	local09, local01
2083c     0C 9C 06 F1 | 	add	local09, #12
20840     4E 9F 02 FB | 	rdlong	local10, local09
20844     0C 9C 86 F1 | 	sub	local09, #12
20848     04 50 05 F1 | 	add	fp, #4
2084c     A8 9E 62 FC | 	wrlong	local10, fp
20850     08 50 85 F1 | 	sub	fp, #8
20854                 | LR__1222
20854     04 50 05 F1 | 	add	fp, #4
20858     A8 9C 02 FB | 	rdlong	local09, fp
2085c     14 9C 06 F1 | 	add	local09, #20
20860     4E 9F 02 FB | 	rdlong	local10, local09
20864     1C 50 05 F1 | 	add	fp, #28
20868     A8 9E 62 FC | 	wrlong	local10, fp
2086c     1C 50 85 F1 | 	sub	fp, #28
20870     A8 9C 02 FB | 	rdlong	local09, fp
20874     18 50 05 F1 | 	add	fp, #24
20878     A8 00 68 FC | 	wrlong	#0, fp
2087c     14 9C 06 F1 | 	add	local09, #20
20880     4E 01 68 FC | 	wrlong	#0, local09
20884     14 50 85 F1 | 	sub	fp, #20
20888     A8 9C 02 FB | 	rdlong	local09, fp
2088c     08 50 85 F1 | 	sub	fp, #8
20890     01 9C 16 F2 | 	cmp	local09, #1 wc
20894     EC 03 90 CD |  if_b	jmp	#LR__1238
20898     10 50 05 F1 | 	add	fp, #16
2089c     A8 8C 02 FB | 	rdlong	local01, fp
208a0     0A 8C 06 F1 | 	add	local01, #10
208a4     46 93 E2 FA | 	rdword	local04, local01
208a8     09 92 66 F0 | 	shl	local04, #9
208ac     08 50 05 F1 | 	add	fp, #8
208b0     A8 92 62 FC | 	wrlong	local04, fp
208b4     08 50 05 F1 | 	add	fp, #8
208b8     A8 9C 02 FB | 	rdlong	local09, fp
208bc     20 50 85 F1 | 	sub	fp, #32
208c0     01 9C 16 F2 | 	cmp	local09, #1 wc
208c4     B4 00 90 CD |  if_b	jmp	#LR__1223
208c8     08 50 05 F1 | 	add	fp, #8
208cc     A8 92 02 FB | 	rdlong	local04, fp
208d0     01 92 86 F1 | 	sub	local04, #1
208d4     10 50 05 F1 | 	add	fp, #16
208d8     A8 A0 02 FB | 	rdlong	local11, fp
208dc     50 93 12 FD | 	qdiv	local04, local11
208e0     08 50 05 F1 | 	add	fp, #8
208e4     A8 94 02 FB | 	rdlong	local05, fp
208e8     4A 99 02 F6 | 	mov	local07, local05
208ec     01 98 86 F1 | 	sub	local07, #1
208f0     50 A3 02 F6 | 	mov	local12, local11
208f4     18 92 62 FD | 	getqx	local04
208f8     51 99 12 FD | 	qdiv	local07, local12
208fc     20 50 85 F1 | 	sub	fp, #32
20900     18 98 62 FD | 	getqx	local07
20904     4C 93 12 F2 | 	cmp	local04, local07 wc
20908     70 00 90 CD |  if_b	jmp	#LR__1223
2090c     04 50 05 F1 | 	add	fp, #4
20910     A8 9C 02 FB | 	rdlong	local09, fp
20914     1C 50 05 F1 | 	add	fp, #28
20918     A8 9E 02 FB | 	rdlong	local10, fp
2091c     01 9E 86 F1 | 	sub	local10, #1
20920     08 50 85 F1 | 	sub	fp, #8
20924     A8 92 02 FB | 	rdlong	local04, fp
20928     01 92 86 F1 | 	sub	local04, #1
2092c     49 9F 22 F5 | 	andn	local10, local04
20930     14 9C 06 F1 | 	add	local09, #20
20934     4E 9F 62 FC | 	wrlong	local10, local09
20938     10 50 85 F1 | 	sub	fp, #16
2093c     A8 9C 02 FB | 	rdlong	local09, fp
20940     04 50 85 F1 | 	sub	fp, #4
20944     A8 9E 02 FB | 	rdlong	local10, fp
20948     14 9E 06 F1 | 	add	local10, #20
2094c     4F 93 02 FB | 	rdlong	local04, local10
20950     49 9D 82 F1 | 	sub	local09, local04
20954     04 50 05 F1 | 	add	fp, #4
20958     A8 9C 62 FC | 	wrlong	local09, fp
2095c     04 50 85 F1 | 	sub	fp, #4
20960     A8 9C 02 FB | 	rdlong	local09, fp
20964     18 9C 06 F1 | 	add	local09, #24
20968     4E 9F 02 FB | 	rdlong	local10, local09
2096c     10 50 05 F1 | 	add	fp, #16
20970     A8 9E 62 FC | 	wrlong	local10, fp
20974     14 50 85 F1 | 	sub	fp, #20
20978     D0 00 90 FD | 	jmp	#LR__1227
2097c                 | LR__1223
2097c     04 50 05 F1 | 	add	fp, #4
20980     A8 9C 02 FB | 	rdlong	local09, fp
20984     08 9C 06 F1 | 	add	local09, #8
20988     4E 9D 0A FB | 	rdlong	local09, local09 wz
2098c     10 50 05 F1 | 	add	fp, #16
20990     A8 9C 62 FC | 	wrlong	local09, fp
20994     14 50 85 F1 | 	sub	fp, #20
20998     94 00 90 5D |  if_ne	jmp	#LR__1226
2099c     04 50 05 F1 | 	add	fp, #4
209a0     A8 74 02 FB | 	rdlong	arg01, fp
209a4     04 50 85 F1 | 	sub	fp, #4
209a8     00 76 06 F6 | 	mov	arg02, #0
209ac     FC C9 BF FD | 	call	#_fatfs_cc_create_chain
209b0     14 50 05 F1 | 	add	fp, #20
209b4     A8 34 62 FC | 	wrlong	result1, fp
209b8     14 50 85 F1 | 	sub	fp, #20
209bc     01 34 0E F2 | 	cmp	result1, #1 wz
209c0     1C 00 90 5D |  if_ne	jmp	#LR__1224
209c4     04 50 05 F1 | 	add	fp, #4
209c8     A8 9C 02 FB | 	rdlong	local09, fp
209cc     04 50 85 F1 | 	sub	fp, #4
209d0     11 9C 06 F1 | 	add	local09, #17
209d4     4E 05 48 FC | 	wrbyte	#2, local09
209d8     02 34 06 F6 | 	mov	result1, #2
209dc     80 04 90 FD | 	jmp	#LR__1244
209e0                 | LR__1224
209e0     14 50 05 F1 | 	add	fp, #20
209e4     A8 9C 02 FB | 	rdlong	local09, fp
209e8     14 50 85 F1 | 	sub	fp, #20
209ec     FF FF 7F FF 
209f0     FF 9D 0E F2 | 	cmp	local09, ##-1 wz
209f4     1C 00 90 5D |  if_ne	jmp	#LR__1225
209f8     04 50 05 F1 | 	add	fp, #4
209fc     A8 9C 02 FB | 	rdlong	local09, fp
20a00     04 50 85 F1 | 	sub	fp, #4
20a04     11 9C 06 F1 | 	add	local09, #17
20a08     4E 03 48 FC | 	wrbyte	#1, local09
20a0c     01 34 06 F6 | 	mov	result1, #1
20a10     4C 04 90 FD | 	jmp	#LR__1244
20a14                 | LR__1225
20a14     04 50 05 F1 | 	add	fp, #4
20a18     A8 9C 02 FB | 	rdlong	local09, fp
20a1c     10 50 05 F1 | 	add	fp, #16
20a20     A8 9E 02 FB | 	rdlong	local10, fp
20a24     14 50 85 F1 | 	sub	fp, #20
20a28     08 9C 06 F1 | 	add	local09, #8
20a2c     4E 9F 62 FC | 	wrlong	local10, local09
20a30                 | LR__1226
20a30     04 50 05 F1 | 	add	fp, #4
20a34     A8 9C 02 FB | 	rdlong	local09, fp
20a38     10 50 05 F1 | 	add	fp, #16
20a3c     A8 9E 02 FB | 	rdlong	local10, fp
20a40     14 50 85 F1 | 	sub	fp, #20
20a44     18 9C 06 F1 | 	add	local09, #24
20a48     4E 9F 62 FC | 	wrlong	local10, local09
20a4c                 | LR__1227
20a4c     14 50 05 F1 | 	add	fp, #20
20a50     A8 9C 0A FB | 	rdlong	local09, fp wz
20a54     14 50 85 F1 | 	sub	fp, #20
20a58     28 02 90 AD |  if_e	jmp	#LR__1237
20a5c                 | ' 				while (ofs > bcs) {
20a5c                 | LR__1228
20a5c     08 50 05 F1 | 	add	fp, #8
20a60     A8 9C 02 FB | 	rdlong	local09, fp
20a64     10 50 05 F1 | 	add	fp, #16
20a68     A8 9E 02 FB | 	rdlong	local10, fp
20a6c     18 50 85 F1 | 	sub	fp, #24
20a70     4F 9D 1A F2 | 	cmp	local09, local10 wcz
20a74     68 01 90 ED |  if_be	jmp	#LR__1234
20a78     08 50 05 F1 | 	add	fp, #8
20a7c     A8 9C 02 FB | 	rdlong	local09, fp
20a80     10 50 05 F1 | 	add	fp, #16
20a84     A8 9E 02 FB | 	rdlong	local10, fp
20a88     4F 9D 82 F1 | 	sub	local09, local10
20a8c     10 50 85 F1 | 	sub	fp, #16
20a90     A8 9C 62 FC | 	wrlong	local09, fp
20a94     04 50 85 F1 | 	sub	fp, #4
20a98     A8 92 02 FB | 	rdlong	local04, fp
20a9c     49 8F 02 F6 | 	mov	local02, local04
20aa0     14 8E 06 F1 | 	add	local02, #20
20aa4     47 9F 02 FB | 	rdlong	local10, local02
20aa8     14 50 05 F1 | 	add	fp, #20
20aac     A8 96 02 FB | 	rdlong	local06, fp
20ab0     4B 9F 02 F1 | 	add	local10, local06
20ab4     14 92 06 F1 | 	add	local04, #20
20ab8     49 9F 62 FC | 	wrlong	local10, local04
20abc     14 50 85 F1 | 	sub	fp, #20
20ac0     A8 8C 02 FB | 	rdlong	local01, fp
20ac4     04 50 85 F1 | 	sub	fp, #4
20ac8     10 8C 06 F1 | 	add	local01, #16
20acc     46 9D C2 FA | 	rdbyte	local09, local01
20ad0     02 9C CE F7 | 	test	local09, #2 wz
20ad4     3C 00 90 AD |  if_e	jmp	#LR__1229
20ad8     04 50 05 F1 | 	add	fp, #4
20adc     A8 74 02 FB | 	rdlong	arg01, fp
20ae0     10 50 05 F1 | 	add	fp, #16
20ae4     A8 76 02 FB | 	rdlong	arg02, fp
20ae8     14 50 85 F1 | 	sub	fp, #20
20aec     BC C8 BF FD | 	call	#_fatfs_cc_create_chain
20af0     14 50 05 F1 | 	add	fp, #20
20af4     A8 34 62 FC | 	wrlong	result1, fp
20af8     00 34 4E F2 | 	cmps	result1, #0 wz
20afc     14 50 85 F1 | 	sub	fp, #20
20b00     08 50 05 A1 |  if_e	add	fp, #8
20b04     A8 00 68 AC |  if_e	wrlong	#0, fp
20b08     08 50 85 A1 |  if_e	sub	fp, #8
20b0c                 | ' 							ofs = 0; break;
20b0c     D0 00 90 AD |  if_e	jmp	#LR__1234
20b10     24 00 90 FD | 	jmp	#LR__1230
20b14                 | LR__1229
20b14     04 50 05 F1 | 	add	fp, #4
20b18     A8 74 02 FB | 	rdlong	arg01, fp
20b1c     10 50 05 F1 | 	add	fp, #16
20b20     A8 76 02 FB | 	rdlong	arg02, fp
20b24     14 50 85 F1 | 	sub	fp, #20
20b28     FC C2 BF FD | 	call	#_fatfs_cc_get_fat
20b2c     14 50 05 F1 | 	add	fp, #20
20b30     A8 34 62 FC | 	wrlong	result1, fp
20b34     14 50 85 F1 | 	sub	fp, #20
20b38                 | LR__1230
20b38     14 50 05 F1 | 	add	fp, #20
20b3c     A8 9C 02 FB | 	rdlong	local09, fp
20b40     14 50 85 F1 | 	sub	fp, #20
20b44     FF FF 7F FF 
20b48     FF 9D 0E F2 | 	cmp	local09, ##-1 wz
20b4c     1C 00 90 5D |  if_ne	jmp	#LR__1231
20b50     04 50 05 F1 | 	add	fp, #4
20b54     A8 9C 02 FB | 	rdlong	local09, fp
20b58     04 50 85 F1 | 	sub	fp, #4
20b5c     11 9C 06 F1 | 	add	local09, #17
20b60     4E 03 48 FC | 	wrbyte	#1, local09
20b64     01 34 06 F6 | 	mov	result1, #1
20b68     F4 02 90 FD | 	jmp	#LR__1244
20b6c                 | LR__1231
20b6c     14 50 05 F1 | 	add	fp, #20
20b70     A8 9C 02 FB | 	rdlong	local09, fp
20b74     14 50 85 F1 | 	sub	fp, #20
20b78     02 9C 16 F2 | 	cmp	local09, #2 wc
20b7c     24 00 90 CD |  if_b	jmp	#LR__1232
20b80     10 50 05 F1 | 	add	fp, #16
20b84     A8 9E 02 FB | 	rdlong	local10, fp
20b88     04 50 05 F1 | 	add	fp, #4
20b8c     A8 92 02 FB | 	rdlong	local04, fp
20b90     14 50 85 F1 | 	sub	fp, #20
20b94     14 9E 06 F1 | 	add	local10, #20
20b98     4F 9B 02 FB | 	rdlong	local08, local10
20b9c     4D 93 12 F2 | 	cmp	local04, local08 wc
20ba0     1C 00 90 CD |  if_b	jmp	#LR__1233
20ba4                 | LR__1232
20ba4     04 50 05 F1 | 	add	fp, #4
20ba8     A8 9C 02 FB | 	rdlong	local09, fp
20bac     04 50 85 F1 | 	sub	fp, #4
20bb0     11 9C 06 F1 | 	add	local09, #17
20bb4     4E 05 48 FC | 	wrbyte	#2, local09
20bb8     02 34 06 F6 | 	mov	result1, #2
20bbc     A0 02 90 FD | 	jmp	#LR__1244
20bc0                 | LR__1233
20bc0     04 50 05 F1 | 	add	fp, #4
20bc4     A8 9C 02 FB | 	rdlong	local09, fp
20bc8     10 50 05 F1 | 	add	fp, #16
20bcc     A8 9E 02 FB | 	rdlong	local10, fp
20bd0     14 50 85 F1 | 	sub	fp, #20
20bd4     18 9C 06 F1 | 	add	local09, #24
20bd8     4E 9F 62 FC | 	wrlong	local10, local09
20bdc     7C FE 9F FD | 	jmp	#LR__1228
20be0                 | LR__1234
20be0     04 50 05 F1 | 	add	fp, #4
20be4     A8 8E 02 FB | 	rdlong	local02, fp
20be8     47 9D 02 F6 | 	mov	local09, local02
20bec     14 8E 06 F1 | 	add	local02, #20
20bf0     47 9F 02 FB | 	rdlong	local10, local02
20bf4     04 50 05 F1 | 	add	fp, #4
20bf8     A8 9A 02 FB | 	rdlong	local08, fp
20bfc     4D 9F 02 F1 | 	add	local10, local08
20c00     14 9C 06 F1 | 	add	local09, #20
20c04     4E 9F 62 FC | 	wrlong	local10, local09
20c08     A8 9C 02 FB | 	rdlong	local09, fp
20c0c     08 50 85 F1 | 	sub	fp, #8
20c10     FF 9D CE F7 | 	test	local09, #511 wz
20c14     6C 00 90 AD |  if_e	jmp	#LR__1236
20c18     10 50 05 F1 | 	add	fp, #16
20c1c     A8 74 02 FB | 	rdlong	arg01, fp
20c20     04 50 05 F1 | 	add	fp, #4
20c24     A8 76 02 FB | 	rdlong	arg02, fp
20c28     14 50 85 F1 | 	sub	fp, #20
20c2c     B8 C1 BF FD | 	call	#_fatfs_cc_clst2sect
20c30     1C 50 05 F1 | 	add	fp, #28
20c34     A8 34 62 FC | 	wrlong	result1, fp
20c38     1C 50 85 F1 | 	sub	fp, #28
20c3c     00 34 0E F2 | 	cmp	result1, #0 wz
20c40     1C 00 90 5D |  if_ne	jmp	#LR__1235
20c44     04 50 05 F1 | 	add	fp, #4
20c48     A8 9C 02 FB | 	rdlong	local09, fp
20c4c     04 50 85 F1 | 	sub	fp, #4
20c50     11 9C 06 F1 | 	add	local09, #17
20c54     4E 05 48 FC | 	wrbyte	#2, local09
20c58     02 34 06 F6 | 	mov	result1, #2
20c5c     00 02 90 FD | 	jmp	#LR__1244
20c60                 | LR__1235
20c60     1C 50 05 F1 | 	add	fp, #28
20c64     A8 9C 02 FB | 	rdlong	local09, fp
20c68     14 50 85 F1 | 	sub	fp, #20
20c6c     A8 9E 02 FB | 	rdlong	local10, fp
20c70     09 9E 46 F0 | 	shr	local10, #9
20c74     4F 9D 02 F1 | 	add	local09, local10
20c78     14 50 05 F1 | 	add	fp, #20
20c7c     A8 9C 62 FC | 	wrlong	local09, fp
20c80     1C 50 85 F1 | 	sub	fp, #28
20c84                 | LR__1236
20c84                 | LR__1237
20c84                 | LR__1238
20c84     04 50 05 F1 | 	add	fp, #4
20c88     A8 9E 02 FB | 	rdlong	local10, fp
20c8c     4F 9D 02 F6 | 	mov	local09, local10
20c90     04 50 85 F1 | 	sub	fp, #4
20c94     14 9C 06 F1 | 	add	local09, #20
20c98     4E 93 02 FB | 	rdlong	local04, local09
20c9c     0C 9E 06 F1 | 	add	local10, #12
20ca0     4F 9B 02 FB | 	rdlong	local08, local10
20ca4     4D 93 1A F2 | 	cmp	local04, local08 wcz
20ca8     3C 00 90 ED |  if_be	jmp	#LR__1239
20cac     04 50 05 F1 | 	add	fp, #4
20cb0     A8 9E 02 FB | 	rdlong	local10, fp
20cb4     4F 9D 02 F6 | 	mov	local09, local10
20cb8     14 9E 06 F1 | 	add	local10, #20
20cbc     4F 93 02 FB | 	rdlong	local04, local10
20cc0     0C 9C 06 F1 | 	add	local09, #12
20cc4     4E 93 62 FC | 	wrlong	local04, local09
20cc8     A8 8E 02 FB | 	rdlong	local02, fp
20ccc     47 9D 02 F6 | 	mov	local09, local02
20cd0     04 50 85 F1 | 	sub	fp, #4
20cd4     10 8E 06 F1 | 	add	local02, #16
20cd8     47 9F C2 FA | 	rdbyte	local10, local02
20cdc     40 9E 46 F5 | 	or	local10, #64
20ce0     10 9C 06 F1 | 	add	local09, #16
20ce4     4E 9F 42 FC | 	wrbyte	local10, local09
20ce8                 | LR__1239
20ce8     04 50 05 F1 | 	add	fp, #4
20cec     A8 9C 02 FB | 	rdlong	local09, fp
20cf0     04 50 85 F1 | 	sub	fp, #4
20cf4     14 9C 06 F1 | 	add	local09, #20
20cf8     4E 9F 02 FB | 	rdlong	local10, local09
20cfc     FF 9F CE F7 | 	test	local10, #511 wz
20d00     50 01 90 AD |  if_e	jmp	#LR__1243
20d04     04 50 05 F1 | 	add	fp, #4
20d08     A8 9A 02 FB | 	rdlong	local08, fp
20d0c     4D 91 02 F6 | 	mov	local03, local08
20d10     18 50 05 F1 | 	add	fp, #24
20d14     A8 94 02 FB | 	rdlong	local05, fp
20d18     1C 50 85 F1 | 	sub	fp, #28
20d1c     4A 97 02 F6 | 	mov	local06, local05
20d20     1C 90 06 F1 | 	add	local03, #28
20d24     48 A3 02 FB | 	rdlong	local12, local03
20d28     1C 90 86 F1 | 	sub	local03, #28
20d2c     51 99 02 F6 | 	mov	local07, local12
20d30     4C 97 0A F2 | 	cmp	local06, local07 wz
20d34     1C 01 90 AD |  if_e	jmp	#LR__1243
20d38     04 50 05 F1 | 	add	fp, #4
20d3c     A8 8C 02 FB | 	rdlong	local01, fp
20d40     04 50 85 F1 | 	sub	fp, #4
20d44     10 8C 06 F1 | 	add	local01, #16
20d48     46 9D C2 FA | 	rdbyte	local09, local01
20d4c     80 9C CE F7 | 	test	local09, #128 wz
20d50     80 00 90 AD |  if_e	jmp	#LR__1241
20d54     10 50 05 F1 | 	add	fp, #16
20d58     A8 8C 02 FB | 	rdlong	local01, fp
20d5c     01 8C 06 F1 | 	add	local01, #1
20d60     46 75 C2 FA | 	rdbyte	arg01, local01
20d64     0C 50 85 F1 | 	sub	fp, #12
20d68     A8 8E 02 FB | 	rdlong	local02, fp
20d6c     47 77 02 F6 | 	mov	arg02, local02
20d70     28 76 06 F1 | 	add	arg02, #40
20d74     04 50 85 F1 | 	sub	fp, #4
20d78     1C 8E 06 F1 | 	add	local02, #28
20d7c     47 79 02 FB | 	rdlong	arg03, local02
20d80     01 7A 06 F6 | 	mov	arg04, #1
20d84     7C BA BF FD | 	call	#_fatfs_cc_disk_write
20d88     00 34 0E F2 | 	cmp	result1, #0 wz
20d8c     1C 00 90 AD |  if_e	jmp	#LR__1240
20d90     04 50 05 F1 | 	add	fp, #4
20d94     A8 9C 02 FB | 	rdlong	local09, fp
20d98     04 50 85 F1 | 	sub	fp, #4
20d9c     11 9C 06 F1 | 	add	local09, #17
20da0     4E 03 48 FC | 	wrbyte	#1, local09
20da4     01 34 06 F6 | 	mov	result1, #1
20da8     B4 00 90 FD | 	jmp	#LR__1244
20dac                 | LR__1240
20dac     04 50 05 F1 | 	add	fp, #4
20db0     A8 8E 02 FB | 	rdlong	local02, fp
20db4     47 9D 02 F6 | 	mov	local09, local02
20db8     04 50 85 F1 | 	sub	fp, #4
20dbc     10 8E 06 F1 | 	add	local02, #16
20dc0     47 91 C2 FA | 	rdbyte	local03, local02
20dc4     48 9F E2 F8 | 	getbyte	local10, local03, #0
20dc8     7F 9E 06 F5 | 	and	local10, #127
20dcc     10 9C 06 F1 | 	add	local09, #16
20dd0     4E 9F 42 FC | 	wrbyte	local10, local09
20dd4                 | LR__1241
20dd4     10 50 05 F1 | 	add	fp, #16
20dd8     A8 8C 02 FB | 	rdlong	local01, fp
20ddc     01 8C 06 F1 | 	add	local01, #1
20de0     46 75 C2 FA | 	rdbyte	arg01, local01
20de4     0C 50 85 F1 | 	sub	fp, #12
20de8     A8 92 02 FB | 	rdlong	local04, fp
20dec     28 92 06 F1 | 	add	local04, #40
20df0     18 50 05 F1 | 	add	fp, #24
20df4     A8 78 02 FB | 	rdlong	arg03, fp
20df8     1C 50 85 F1 | 	sub	fp, #28
20dfc     01 8E 06 F6 | 	mov	local02, #1
20e00     49 77 02 F6 | 	mov	arg02, local04
20e04     01 7A 06 F6 | 	mov	arg04, #1
20e08     3C B9 BF FD | 	call	#_fatfs_cc_disk_read
20e0c     00 34 0E F2 | 	cmp	result1, #0 wz
20e10     1C 00 90 AD |  if_e	jmp	#LR__1242
20e14     04 50 05 F1 | 	add	fp, #4
20e18     A8 9C 02 FB | 	rdlong	local09, fp
20e1c     04 50 85 F1 | 	sub	fp, #4
20e20     11 9C 06 F1 | 	add	local09, #17
20e24     4E 03 48 FC | 	wrbyte	#1, local09
20e28     01 34 06 F6 | 	mov	result1, #1
20e2c     30 00 90 FD | 	jmp	#LR__1244
20e30                 | LR__1242
20e30     04 50 05 F1 | 	add	fp, #4
20e34     A8 8C 02 FB | 	rdlong	local01, fp
20e38     46 9D 02 F6 | 	mov	local09, local01
20e3c     18 50 05 F1 | 	add	fp, #24
20e40     A8 9E 02 FB | 	rdlong	local10, fp
20e44     1C 50 85 F1 | 	sub	fp, #28
20e48     1C 9C 06 F1 | 	add	local09, #28
20e4c     4E 9F 62 FC | 	wrlong	local10, local09
20e50     1C 9C 86 F1 | 	sub	local09, #28
20e54                 | LR__1243
20e54                 | ' 
20e54                 | ' 			fp->sect = nsect;
20e54                 | ' 		}
20e54                 | ' 	}
20e54                 | ' 
20e54                 | ' 	return res ;
20e54     0C 50 05 F1 | 	add	fp, #12
20e58     A8 34 02 FB | 	rdlong	result1, fp
20e5c     0C 50 85 F1 | 	sub	fp, #12
20e60                 | LR__1244
20e60     A8 F0 03 F6 | 	mov	ptra, fp
20e64     B3 00 A0 FD | 	call	#popregs_
20e68                 | _fatfs_cc_f_lseek_ret
20e68     2D 00 64 FD | 	ret
20e6c                 | 
20e6c                 | _fatfs_cc_f_opendir
20e6c     01 4C 05 F6 | 	mov	COUNT_, #1
20e70     A9 00 A0 FD | 	call	#pushregs_
20e74     14 F0 07 F1 | 	add	ptra, #20
20e78     04 50 05 F1 | 	add	fp, #4
20e7c     A8 74 62 FC | 	wrlong	arg01, fp
20e80     04 50 05 F1 | 	add	fp, #4
20e84     A8 76 62 FC | 	wrlong	arg02, fp
20e88     04 50 85 F1 | 	sub	fp, #4
20e8c     A8 78 0A FB | 	rdlong	arg03, fp wz
20e90     04 50 85 F1 | 	sub	fp, #4
20e94     09 34 06 A6 |  if_e	mov	result1, #9
20e98     78 01 90 AD |  if_e	jmp	#LR__1251
20e9c     08 50 05 F1 | 	add	fp, #8
20ea0     A8 74 02 F6 | 	mov	arg01, fp
20ea4     08 50 05 F1 | 	add	fp, #8
20ea8     A8 76 02 F6 | 	mov	arg02, fp
20eac     10 50 85 F1 | 	sub	fp, #16
20eb0     00 78 06 F6 | 	mov	arg03, #0
20eb4     34 D8 BF FD | 	call	#_fatfs_cc_mount_volume
20eb8     0C 50 05 F1 | 	add	fp, #12
20ebc     A8 34 62 FC | 	wrlong	result1, fp
20ec0     0C 50 85 F1 | 	sub	fp, #12
20ec4     00 34 0E F2 | 	cmp	result1, #0 wz
20ec8     20 01 90 5D |  if_ne	jmp	#LR__1250
20ecc     04 50 05 F1 | 	add	fp, #4
20ed0     A8 76 02 FB | 	rdlong	arg02, fp
20ed4     0C 50 05 F1 | 	add	fp, #12
20ed8     A8 34 02 FB | 	rdlong	result1, fp
20edc     3B 35 62 FC | 	wrlong	result1, arg02
20ee0     0C 50 85 F1 | 	sub	fp, #12
20ee4     A8 74 02 FB | 	rdlong	arg01, fp
20ee8     04 50 05 F1 | 	add	fp, #4
20eec     A8 76 02 FB | 	rdlong	arg02, fp
20ef0     08 50 85 F1 | 	sub	fp, #8
20ef4     00 D2 BF FD | 	call	#_fatfs_cc_follow_path
20ef8     0C 50 05 F1 | 	add	fp, #12
20efc     A8 34 62 FC | 	wrlong	result1, fp
20f00     0C 50 85 F1 | 	sub	fp, #12
20f04     00 34 0E F2 | 	cmp	result1, #0 wz
20f08     C4 00 90 5D |  if_ne	jmp	#LR__1249
20f0c     04 50 05 F1 | 	add	fp, #4
20f10     A8 34 02 FB | 	rdlong	result1, fp
20f14     04 50 85 F1 | 	sub	fp, #4
20f18     2B 34 06 F1 | 	add	result1, #43
20f1c     1A 35 C2 FA | 	rdbyte	result1, result1
20f20     80 34 CE F7 | 	test	result1, #128 wz
20f24     58 00 90 5D |  if_ne	jmp	#LR__1247
20f28     04 50 05 F1 | 	add	fp, #4
20f2c     A8 76 02 FB | 	rdlong	arg02, fp
20f30     04 50 85 F1 | 	sub	fp, #4
20f34     06 76 06 F1 | 	add	arg02, #6
20f38     3B 35 C2 FA | 	rdbyte	result1, arg02
20f3c     10 34 CE F7 | 	test	result1, #16 wz
20f40     30 00 90 AD |  if_e	jmp	#LR__1245
20f44     04 50 05 F1 | 	add	fp, #4
20f48     A8 76 02 FB | 	rdlong	arg02, fp
20f4c     3B 8D 02 F6 | 	mov	local01, arg02
20f50     0C 50 05 F1 | 	add	fp, #12
20f54     A8 74 02 FB | 	rdlong	arg01, fp
20f58     10 50 85 F1 | 	sub	fp, #16
20f5c     1C 76 06 F1 | 	add	arg02, #28
20f60     3B 77 02 FB | 	rdlong	arg02, arg02
20f64     28 CB BF FD | 	call	#_fatfs_cc_ld_clust
20f68     08 8C 06 F1 | 	add	local01, #8
20f6c     46 35 62 FC | 	wrlong	result1, local01
20f70     0C 00 90 FD | 	jmp	#LR__1246
20f74                 | LR__1245
20f74     0C 50 05 F1 | 	add	fp, #12
20f78     A8 0A 68 FC | 	wrlong	#5, fp
20f7c     0C 50 85 F1 | 	sub	fp, #12
20f80                 | LR__1246
20f80                 | LR__1247
20f80     0C 50 05 F1 | 	add	fp, #12
20f84     A8 8C 0A FB | 	rdlong	local01, fp wz
20f88     0C 50 85 F1 | 	sub	fp, #12
20f8c     40 00 90 5D |  if_ne	jmp	#LR__1248
20f90     04 50 05 F1 | 	add	fp, #4
20f94     A8 8C 02 FB | 	rdlong	local01, fp
20f98     0C 50 05 F1 | 	add	fp, #12
20f9c     A8 76 02 FB | 	rdlong	arg02, fp
20fa0     06 76 06 F1 | 	add	arg02, #6
20fa4     3B 77 E2 FA | 	rdword	arg02, arg02
20fa8     04 8C 06 F1 | 	add	local01, #4
20fac     46 77 52 FC | 	wrword	arg02, local01
20fb0     0C 50 85 F1 | 	sub	fp, #12
20fb4     A8 74 02 FB | 	rdlong	arg01, fp
20fb8     04 50 85 F1 | 	sub	fp, #4
20fbc     00 76 06 F6 | 	mov	arg02, #0
20fc0     D8 C6 BF FD | 	call	#_fatfs_cc_dir_sdi
20fc4     0C 50 05 F1 | 	add	fp, #12
20fc8     A8 34 62 FC | 	wrlong	result1, fp
20fcc     0C 50 85 F1 | 	sub	fp, #12
20fd0                 | LR__1248
20fd0                 | LR__1249
20fd0     0C 50 05 F1 | 	add	fp, #12
20fd4     A8 8C 02 FB | 	rdlong	local01, fp
20fd8     0C 50 85 F1 | 	sub	fp, #12
20fdc     04 8C 0E F2 | 	cmp	local01, #4 wz
20fe0     0C 50 05 A1 |  if_e	add	fp, #12
20fe4     A8 0A 68 AC |  if_e	wrlong	#5, fp
20fe8     0C 50 85 A1 |  if_e	sub	fp, #12
20fec                 | LR__1250
20fec     0C 50 05 F1 | 	add	fp, #12
20ff0     A8 8C 0A FB | 	rdlong	local01, fp wz
20ff4     0C 50 85 F1 | 	sub	fp, #12
20ff8     04 50 05 51 |  if_ne	add	fp, #4
20ffc     A8 8C 02 5B |  if_ne	rdlong	local01, fp
21000     04 50 85 51 |  if_ne	sub	fp, #4
21004     46 01 68 5C |  if_ne	wrlong	#0, local01
21008                 | ' 
21008                 | ' 	return res ;
21008     0C 50 05 F1 | 	add	fp, #12
2100c     A8 34 02 FB | 	rdlong	result1, fp
21010     0C 50 85 F1 | 	sub	fp, #12
21014                 | LR__1251
21014     A8 F0 03 F6 | 	mov	ptra, fp
21018     B3 00 A0 FD | 	call	#popregs_
2101c                 | _fatfs_cc_f_opendir_ret
2101c     2D 00 64 FD | 	ret
21020                 | 
21020                 | _fatfs_cc_f_closedir
21020     00 4C 05 F6 | 	mov	COUNT_, #0
21024     A9 00 A0 FD | 	call	#pushregs_
21028     10 F0 07 F1 | 	add	ptra, #16
2102c     04 50 05 F1 | 	add	fp, #4
21030     A8 74 62 FC | 	wrlong	arg01, fp
21034     08 50 05 F1 | 	add	fp, #8
21038     A8 76 02 F6 | 	mov	arg02, fp
2103c     0C 50 85 F1 | 	sub	fp, #12
21040     74 DC BF FD | 	call	#_fatfs_cc_validate
21044     08 50 05 F1 | 	add	fp, #8
21048     A8 34 62 FC | 	wrlong	result1, fp
2104c     08 50 85 F1 | 	sub	fp, #8
21050     00 34 0E F2 | 	cmp	result1, #0 wz
21054     04 50 05 A1 |  if_e	add	fp, #4
21058     A8 34 02 AB |  if_e	rdlong	result1, fp
2105c     04 50 85 A1 |  if_e	sub	fp, #4
21060     1A 01 68 AC |  if_e	wrlong	#0, result1
21064                 | ' 
21064                 | ' 
21064                 | ' 
21064                 | ' 
21064                 | ' 		dp->obj.fs = 0;
21064                 | ' #line 4632 "ff.c"
21064                 | ' 	}
21064                 | ' 	return res;
21064     08 50 05 F1 | 	add	fp, #8
21068     A8 34 02 FB | 	rdlong	result1, fp
2106c     08 50 85 F1 | 	sub	fp, #8
21070     A8 F0 03 F6 | 	mov	ptra, fp
21074     B3 00 A0 FD | 	call	#popregs_
21078                 | _fatfs_cc_f_closedir_ret
21078     2D 00 64 FD | 	ret
2107c                 | 
2107c                 | _fatfs_cc_f_readdir
2107c     00 4C 05 F6 | 	mov	COUNT_, #0
21080     A9 00 A0 FD | 	call	#pushregs_
21084     14 F0 07 F1 | 	add	ptra, #20
21088     04 50 05 F1 | 	add	fp, #4
2108c     A8 74 62 FC | 	wrlong	arg01, fp
21090     04 50 05 F1 | 	add	fp, #4
21094     A8 76 62 FC | 	wrlong	arg02, fp
21098     04 50 85 F1 | 	sub	fp, #4
2109c     A8 74 02 FB | 	rdlong	arg01, fp
210a0     0C 50 05 F1 | 	add	fp, #12
210a4     A8 76 02 F6 | 	mov	arg02, fp
210a8     10 50 85 F1 | 	sub	fp, #16
210ac     08 DC BF FD | 	call	#_fatfs_cc_validate
210b0     0C 50 05 F1 | 	add	fp, #12
210b4     A8 34 62 FC | 	wrlong	result1, fp
210b8     0C 50 85 F1 | 	sub	fp, #12
210bc     00 34 0E F2 | 	cmp	result1, #0 wz
210c0     BC 00 90 5D |  if_ne	jmp	#LR__1255
210c4     08 50 05 F1 | 	add	fp, #8
210c8     A8 34 0A FB | 	rdlong	result1, fp wz
210cc     08 50 85 F1 | 	sub	fp, #8
210d0     24 00 90 5D |  if_ne	jmp	#LR__1252
210d4     04 50 05 F1 | 	add	fp, #4
210d8     A8 74 02 FB | 	rdlong	arg01, fp
210dc     04 50 85 F1 | 	sub	fp, #4
210e0     00 76 06 F6 | 	mov	arg02, #0
210e4     B4 C5 BF FD | 	call	#_fatfs_cc_dir_sdi
210e8     0C 50 05 F1 | 	add	fp, #12
210ec     A8 34 62 FC | 	wrlong	result1, fp
210f0     0C 50 85 F1 | 	sub	fp, #12
210f4     88 00 90 FD | 	jmp	#LR__1254
210f8                 | LR__1252
210f8     04 50 05 F1 | 	add	fp, #4
210fc     A8 74 02 FB | 	rdlong	arg01, fp
21100     04 50 85 F1 | 	sub	fp, #4
21104     00 76 06 F6 | 	mov	arg02, #0
21108     00 CA BF FD | 	call	#_fatfs_cc_dir_read
2110c     0C 50 05 F1 | 	add	fp, #12
21110     A8 34 62 FC | 	wrlong	result1, fp
21114     0C 50 85 F1 | 	sub	fp, #12
21118     04 34 0E F2 | 	cmp	result1, #4 wz
2111c     0C 50 05 A1 |  if_e	add	fp, #12
21120     A8 00 68 AC |  if_e	wrlong	#0, fp
21124     0C 50 85 A1 |  if_e	sub	fp, #12
21128     0C 50 05 F1 | 	add	fp, #12
2112c     A8 34 0A FB | 	rdlong	result1, fp wz
21130     0C 50 85 F1 | 	sub	fp, #12
21134     48 00 90 5D |  if_ne	jmp	#LR__1253
21138     04 50 05 F1 | 	add	fp, #4
2113c     A8 74 02 FB | 	rdlong	arg01, fp
21140     04 50 05 F1 | 	add	fp, #4
21144     A8 76 02 FB | 	rdlong	arg02, fp
21148     08 50 85 F1 | 	sub	fp, #8
2114c     70 CC BF FD | 	call	#_fatfs_cc_get_fileinfo
21150     04 50 05 F1 | 	add	fp, #4
21154     A8 74 02 FB | 	rdlong	arg01, fp
21158     04 50 85 F1 | 	sub	fp, #4
2115c     00 76 06 F6 | 	mov	arg02, #0
21160     B0 C6 BF FD | 	call	#_fatfs_cc_dir_next
21164     0C 50 05 F1 | 	add	fp, #12
21168     A8 34 62 FC | 	wrlong	result1, fp
2116c     0C 50 85 F1 | 	sub	fp, #12
21170     04 34 0E F2 | 	cmp	result1, #4 wz
21174     0C 50 05 A1 |  if_e	add	fp, #12
21178     A8 00 68 AC |  if_e	wrlong	#0, fp
2117c     0C 50 85 A1 |  if_e	sub	fp, #12
21180                 | LR__1253
21180                 | LR__1254
21180                 | LR__1255
21180                 | ' 			}
21180                 | ' 			;
21180                 | ' 		}
21180                 | ' 	}
21180                 | ' 	return res ;
21180     0C 50 05 F1 | 	add	fp, #12
21184     A8 34 02 FB | 	rdlong	result1, fp
21188     0C 50 85 F1 | 	sub	fp, #12
2118c     A8 F0 03 F6 | 	mov	ptra, fp
21190     B3 00 A0 FD | 	call	#popregs_
21194                 | _fatfs_cc_f_readdir_ret
21194     2D 00 64 FD | 	ret
21198                 | 
21198                 | _fatfs_cc_f_stat
21198     00 4C 05 F6 | 	mov	COUNT_, #0
2119c     A9 00 A0 FD | 	call	#pushregs_
211a0     3C F0 07 F1 | 	add	ptra, #60
211a4     04 50 05 F1 | 	add	fp, #4
211a8     A8 74 62 FC | 	wrlong	arg01, fp
211ac     04 50 05 F1 | 	add	fp, #4
211b0     A8 76 62 FC | 	wrlong	arg02, fp
211b4     04 50 85 F1 | 	sub	fp, #4
211b8     A8 74 02 F6 | 	mov	arg01, fp
211bc     0C 50 05 F1 | 	add	fp, #12
211c0     A8 76 02 F6 | 	mov	arg02, fp
211c4     10 50 85 F1 | 	sub	fp, #16
211c8     00 78 06 F6 | 	mov	arg03, #0
211cc     1C D5 BF FD | 	call	#_fatfs_cc_mount_volume
211d0     0C 50 05 F1 | 	add	fp, #12
211d4     A8 34 62 FC | 	wrlong	result1, fp
211d8     0C 50 85 F1 | 	sub	fp, #12
211dc     00 34 0E F2 | 	cmp	result1, #0 wz
211e0     74 00 90 5D |  if_ne	jmp	#LR__1259
211e4     10 50 05 F1 | 	add	fp, #16
211e8     A8 74 02 F6 | 	mov	arg01, fp
211ec     0C 50 85 F1 | 	sub	fp, #12
211f0     A8 76 02 FB | 	rdlong	arg02, fp
211f4     04 50 85 F1 | 	sub	fp, #4
211f8     FC CE BF FD | 	call	#_fatfs_cc_follow_path
211fc     0C 50 05 F1 | 	add	fp, #12
21200     A8 34 62 FC | 	wrlong	result1, fp
21204     0C 50 85 F1 | 	sub	fp, #12
21208     00 34 0E F2 | 	cmp	result1, #0 wz
2120c     48 00 90 5D |  if_ne	jmp	#LR__1258
21210     3B 50 05 F1 | 	add	fp, #59
21214     A8 34 C2 FA | 	rdbyte	result1, fp
21218     3B 50 85 F1 | 	sub	fp, #59
2121c     80 34 CE F7 | 	test	result1, #128 wz
21220     0C 50 05 51 |  if_ne	add	fp, #12
21224     A8 0C 68 5C |  if_ne	wrlong	#6, fp
21228     0C 50 85 51 |  if_ne	sub	fp, #12
2122c     28 00 90 5D |  if_ne	jmp	#LR__1257
21230     08 50 05 F1 | 	add	fp, #8
21234     A8 34 0A FB | 	rdlong	result1, fp wz
21238     08 50 85 F1 | 	sub	fp, #8
2123c     18 00 90 AD |  if_e	jmp	#LR__1256
21240     10 50 05 F1 | 	add	fp, #16
21244     A8 74 02 F6 | 	mov	arg01, fp
21248     08 50 85 F1 | 	sub	fp, #8
2124c     A8 76 02 FB | 	rdlong	arg02, fp
21250     08 50 85 F1 | 	sub	fp, #8
21254     68 CB BF FD | 	call	#_fatfs_cc_get_fileinfo
21258                 | LR__1256
21258                 | LR__1257
21258                 | LR__1258
21258                 | LR__1259
21258                 | ' 			}
21258                 | ' 		}
21258                 | ' 		;
21258                 | ' 	}
21258                 | ' 
21258                 | ' 	return res ;
21258     0C 50 05 F1 | 	add	fp, #12
2125c     A8 34 02 FB | 	rdlong	result1, fp
21260     0C 50 85 F1 | 	sub	fp, #12
21264     A8 F0 03 F6 | 	mov	ptra, fp
21268     B3 00 A0 FD | 	call	#popregs_
2126c                 | _fatfs_cc_f_stat_ret
2126c     2D 00 64 FD | 	ret
21270                 | 
21270                 | _fatfs_cc_f_unlink
21270     04 4C 05 F6 | 	mov	COUNT_, #4
21274     A9 00 A0 FD | 	call	#pushregs_
21278     6C F0 07 F1 | 	add	ptra, #108
2127c     04 50 05 F1 | 	add	fp, #4
21280     A8 74 62 FC | 	wrlong	arg01, fp
21284     60 50 05 F1 | 	add	fp, #96
21288     A8 00 68 FC | 	wrlong	#0, fp
2128c     60 50 85 F1 | 	sub	fp, #96
21290     A8 74 02 F6 | 	mov	arg01, fp
21294     64 50 05 F1 | 	add	fp, #100
21298     A8 76 02 F6 | 	mov	arg02, fp
2129c     68 50 85 F1 | 	sub	fp, #104
212a0     02 78 06 F6 | 	mov	arg03, #2
212a4     44 D4 BF FD | 	call	#_fatfs_cc_mount_volume
212a8     08 50 05 F1 | 	add	fp, #8
212ac     A8 34 62 FC | 	wrlong	result1, fp
212b0     08 50 85 F1 | 	sub	fp, #8
212b4     00 34 0E F2 | 	cmp	result1, #0 wz
212b8     F0 01 90 5D |  if_ne	jmp	#LR__1268
212bc     68 50 05 F1 | 	add	fp, #104
212c0     A8 76 02 FB | 	rdlong	arg02, fp
212c4     5C 50 85 F1 | 	sub	fp, #92
212c8     A8 76 62 FC | 	wrlong	arg02, fp
212cc     A8 74 02 F6 | 	mov	arg01, fp
212d0     08 50 85 F1 | 	sub	fp, #8
212d4     A8 76 02 FB | 	rdlong	arg02, fp
212d8     04 50 85 F1 | 	sub	fp, #4
212dc     18 CE BF FD | 	call	#_fatfs_cc_follow_path
212e0     08 50 05 F1 | 	add	fp, #8
212e4     A8 34 62 FC | 	wrlong	result1, fp
212e8     00 34 4E F2 | 	cmps	result1, #0 wz
212ec     08 50 85 F1 | 	sub	fp, #8
212f0     B8 01 90 5D |  if_ne	jmp	#LR__1267
212f4     37 50 05 F1 | 	add	fp, #55
212f8     A8 34 C2 FA | 	rdbyte	result1, fp
212fc     37 50 85 F1 | 	sub	fp, #55
21300     80 34 CE F7 | 	test	result1, #128 wz
21304     08 50 05 51 |  if_ne	add	fp, #8
21308     A8 0C 68 5C |  if_ne	wrlong	#6, fp
2130c     08 50 85 51 |  if_ne	sub	fp, #8
21310     1C 00 90 5D |  if_ne	jmp	#LR__1260
21314     12 50 05 F1 | 	add	fp, #18
21318     A8 34 C2 FA | 	rdbyte	result1, fp
2131c     12 50 85 F1 | 	sub	fp, #18
21320     01 34 CE F7 | 	test	result1, #1 wz
21324     08 50 05 51 |  if_ne	add	fp, #8
21328     A8 0E 68 5C |  if_ne	wrlong	#7, fp
2132c     08 50 85 51 |  if_ne	sub	fp, #8
21330                 | LR__1260
21330     08 50 05 F1 | 	add	fp, #8
21334     A8 34 0A FB | 	rdlong	result1, fp wz
21338     08 50 85 F1 | 	sub	fp, #8
2133c     C8 00 90 5D |  if_ne	jmp	#LR__1263
21340     68 50 05 F1 | 	add	fp, #104
21344     A8 74 02 FB | 	rdlong	arg01, fp
21348     40 50 85 F1 | 	sub	fp, #64
2134c     A8 76 02 FB | 	rdlong	arg02, fp
21350     28 50 85 F1 | 	sub	fp, #40
21354     38 C7 BF FD | 	call	#_fatfs_cc_ld_clust
21358     64 50 05 F1 | 	add	fp, #100
2135c     A8 34 62 FC | 	wrlong	result1, fp
21360     52 50 85 F1 | 	sub	fp, #82
21364     A8 34 C2 FA | 	rdbyte	result1, fp
21368     12 50 85 F1 | 	sub	fp, #18
2136c     10 34 CE F7 | 	test	result1, #16 wz
21370     94 00 90 AD |  if_e	jmp	#LR__1262
21374     68 50 05 F1 | 	add	fp, #104
21378     A8 34 02 FB | 	rdlong	result1, fp
2137c     30 50 85 F1 | 	sub	fp, #48
21380     A8 34 62 FC | 	wrlong	result1, fp
21384     2C 50 05 F1 | 	add	fp, #44
21388     A8 76 02 FB | 	rdlong	arg02, fp
2138c     24 50 85 F1 | 	sub	fp, #36
21390     A8 76 62 FC | 	wrlong	arg02, fp
21394     08 50 85 F1 | 	sub	fp, #8
21398     A8 74 02 F6 | 	mov	arg01, fp
2139c     38 50 85 F1 | 	sub	fp, #56
213a0     00 76 06 F6 | 	mov	arg02, #0
213a4     F4 C2 BF FD | 	call	#_fatfs_cc_dir_sdi
213a8     08 50 05 F1 | 	add	fp, #8
213ac     A8 34 62 FC | 	wrlong	result1, fp
213b0     08 50 85 F1 | 	sub	fp, #8
213b4     00 34 0E F2 | 	cmp	result1, #0 wz
213b8     4C 00 90 5D |  if_ne	jmp	#LR__1261
213bc     38 50 05 F1 | 	add	fp, #56
213c0     A8 74 02 F6 | 	mov	arg01, fp
213c4     38 50 85 F1 | 	sub	fp, #56
213c8     00 76 06 F6 | 	mov	arg02, #0
213cc     3C C7 BF FD | 	call	#_fatfs_cc_dir_read
213d0     08 50 05 F1 | 	add	fp, #8
213d4     A8 34 62 FC | 	wrlong	result1, fp
213d8     00 34 4E F2 | 	cmps	result1, #0 wz
213dc     08 50 85 F1 | 	sub	fp, #8
213e0     08 50 05 A1 |  if_e	add	fp, #8
213e4     A8 0E 68 AC |  if_e	wrlong	#7, fp
213e8     08 50 85 A1 |  if_e	sub	fp, #8
213ec     08 50 05 F1 | 	add	fp, #8
213f0     A8 34 02 FB | 	rdlong	result1, fp
213f4     08 50 85 F1 | 	sub	fp, #8
213f8     04 34 0E F2 | 	cmp	result1, #4 wz
213fc     08 50 05 A1 |  if_e	add	fp, #8
21400     A8 00 68 AC |  if_e	wrlong	#0, fp
21404     08 50 85 A1 |  if_e	sub	fp, #8
21408                 | LR__1261
21408                 | LR__1262
21408                 | LR__1263
21408     08 50 05 F1 | 	add	fp, #8
2140c     A8 34 0A FB | 	rdlong	result1, fp wz
21410     08 50 85 F1 | 	sub	fp, #8
21414     94 00 90 5D |  if_ne	jmp	#LR__1266
21418     0C 50 05 F1 | 	add	fp, #12
2141c     A8 74 02 F6 | 	mov	arg01, fp
21420     0C 50 85 F1 | 	sub	fp, #12
21424     50 C9 BF FD | 	call	#_fatfs_cc_dir_remove
21428     08 50 05 F1 | 	add	fp, #8
2142c     A8 34 62 FC | 	wrlong	result1, fp
21430     08 50 85 F1 | 	sub	fp, #8
21434     00 34 0E F2 | 	cmp	result1, #0 wz
21438     44 00 90 5D |  if_ne	jmp	#LR__1264
2143c     64 50 05 F1 | 	add	fp, #100
21440     A8 8C 0A FB | 	rdlong	local01, fp wz
21444     64 50 85 F1 | 	sub	fp, #100
21448     34 00 90 AD |  if_e	jmp	#LR__1264
2144c     0C 50 05 F1 | 	add	fp, #12
21450     A8 74 02 F6 | 	mov	arg01, fp
21454     58 50 05 F1 | 	add	fp, #88
21458     A8 8E 02 FB | 	rdlong	local02, fp
2145c     64 50 85 F1 | 	sub	fp, #100
21460     00 90 06 F6 | 	mov	local03, #0
21464     47 77 02 F6 | 	mov	arg02, local02
21468     00 78 06 F6 | 	mov	arg03, #0
2146c     24 BE BF FD | 	call	#_fatfs_cc_remove_chain
21470     1A 93 02 F6 | 	mov	local04, result1
21474     08 50 05 F1 | 	add	fp, #8
21478     A8 92 62 FC | 	wrlong	local04, fp
2147c     08 50 85 F1 | 	sub	fp, #8
21480                 | LR__1264
21480     08 50 05 F1 | 	add	fp, #8
21484     A8 92 0A FB | 	rdlong	local04, fp wz
21488     08 50 85 F1 | 	sub	fp, #8
2148c     1C 00 90 5D |  if_ne	jmp	#LR__1265
21490     68 50 05 F1 | 	add	fp, #104
21494     A8 74 02 FB | 	rdlong	arg01, fp
21498     68 50 85 F1 | 	sub	fp, #104
2149c     30 B8 BF FD | 	call	#_fatfs_cc_sync_fs
214a0     08 50 05 F1 | 	add	fp, #8
214a4     A8 34 62 FC | 	wrlong	result1, fp
214a8     08 50 85 F1 | 	sub	fp, #8
214ac                 | LR__1265
214ac                 | LR__1266
214ac                 | LR__1267
214ac                 | LR__1268
214ac                 | ' 			}
214ac                 | ' 		}
214ac                 | ' 		;
214ac                 | ' 	}
214ac                 | ' 
214ac                 | ' 	return res ;
214ac     08 50 05 F1 | 	add	fp, #8
214b0     A8 34 02 FB | 	rdlong	result1, fp
214b4     08 50 85 F1 | 	sub	fp, #8
214b8     A8 F0 03 F6 | 	mov	ptra, fp
214bc     B3 00 A0 FD | 	call	#popregs_
214c0                 | _fatfs_cc_f_unlink_ret
214c0     2D 00 64 FD | 	ret
214c4                 | 
214c4                 | _fatfs_cc_f_mkdir
214c4     04 4C 05 F6 | 	mov	COUNT_, #4
214c8     A9 00 A0 FD | 	call	#pushregs_
214cc     58 F0 07 F1 | 	add	ptra, #88
214d0     04 50 05 F1 | 	add	fp, #4
214d4     A8 74 62 FC | 	wrlong	arg01, fp
214d8     A8 74 02 F6 | 	mov	arg01, fp
214dc     44 50 05 F1 | 	add	fp, #68
214e0     A8 76 02 F6 | 	mov	arg02, fp
214e4     48 50 85 F1 | 	sub	fp, #72
214e8     02 78 06 F6 | 	mov	arg03, #2
214ec     FC D1 BF FD | 	call	#_fatfs_cc_mount_volume
214f0     08 50 05 F1 | 	add	fp, #8
214f4     A8 34 62 FC | 	wrlong	result1, fp
214f8     08 50 85 F1 | 	sub	fp, #8
214fc     00 34 0E F2 | 	cmp	result1, #0 wz
21500     D0 02 90 5D |  if_ne	jmp	#LR__1274
21504     48 50 05 F1 | 	add	fp, #72
21508     A8 76 02 FB | 	rdlong	arg02, fp
2150c     3C 50 85 F1 | 	sub	fp, #60
21510     A8 76 62 FC | 	wrlong	arg02, fp
21514     A8 74 02 F6 | 	mov	arg01, fp
21518     08 50 85 F1 | 	sub	fp, #8
2151c     A8 8C 02 FB | 	rdlong	local01, fp
21520     04 50 85 F1 | 	sub	fp, #4
21524     46 77 02 F6 | 	mov	arg02, local01
21528     CC CB BF FD | 	call	#_fatfs_cc_follow_path
2152c     08 50 05 F1 | 	add	fp, #8
21530     A8 34 62 FC | 	wrlong	result1, fp
21534     1A 8F 0A F6 | 	mov	local02, result1 wz
21538     08 50 85 F1 | 	sub	fp, #8
2153c     08 50 05 A1 |  if_e	add	fp, #8
21540     A8 10 68 AC |  if_e	wrlong	#8, fp
21544     08 50 85 A1 |  if_e	sub	fp, #8
21548     08 50 05 F1 | 	add	fp, #8
2154c     A8 34 02 FB | 	rdlong	result1, fp
21550     08 50 85 F1 | 	sub	fp, #8
21554     04 34 0E F2 | 	cmp	result1, #4 wz
21558     78 02 90 5D |  if_ne	jmp	#LR__1273
2155c     48 50 05 F1 | 	add	fp, #72
21560     A8 76 02 FB | 	rdlong	arg02, fp
21564     10 50 85 F1 | 	sub	fp, #16
21568     A8 76 62 FC | 	wrlong	arg02, fp
2156c     A8 74 02 F6 | 	mov	arg01, fp
21570     38 50 85 F1 | 	sub	fp, #56
21574     00 76 06 F6 | 	mov	arg02, #0
21578     30 BE BF FD | 	call	#_fatfs_cc_create_chain
2157c     4C 50 05 F1 | 	add	fp, #76
21580     A8 34 62 FC | 	wrlong	result1, fp
21584     44 50 85 F1 | 	sub	fp, #68
21588     A8 00 68 FC | 	wrlong	#0, fp
2158c     44 50 05 F1 | 	add	fp, #68
21590     A8 34 0A FB | 	rdlong	result1, fp wz
21594     4C 50 85 F1 | 	sub	fp, #76
21598     08 50 05 A1 |  if_e	add	fp, #8
2159c     A8 0E 68 AC |  if_e	wrlong	#7, fp
215a0     08 50 85 A1 |  if_e	sub	fp, #8
215a4     4C 50 05 F1 | 	add	fp, #76
215a8     A8 34 02 FB | 	rdlong	result1, fp
215ac     4C 50 85 F1 | 	sub	fp, #76
215b0     01 34 0E F2 | 	cmp	result1, #1 wz
215b4     08 50 05 A1 |  if_e	add	fp, #8
215b8     A8 04 68 AC |  if_e	wrlong	#2, fp
215bc     08 50 85 A1 |  if_e	sub	fp, #8
215c0     4C 50 05 F1 | 	add	fp, #76
215c4     A8 90 02 FB | 	rdlong	local03, fp
215c8     4C 50 85 F1 | 	sub	fp, #76
215cc     FF FF 7F FF 
215d0     FF 91 0E F2 | 	cmp	local03, ##-1 wz
215d4     08 50 05 A1 |  if_e	add	fp, #8
215d8     A8 02 68 AC |  if_e	wrlong	#1, fp
215dc     08 50 85 A1 |  if_e	sub	fp, #8
215e0     84 1A B0 FD | 	call	#_fatfs_cc__get_fattime
215e4     54 50 05 F1 | 	add	fp, #84
215e8     A8 34 62 FC | 	wrlong	result1, fp
215ec     4C 50 85 F1 | 	sub	fp, #76
215f0     A8 90 0A FB | 	rdlong	local03, fp wz
215f4     08 50 85 F1 | 	sub	fp, #8
215f8     24 01 90 5D |  if_ne	jmp	#LR__1270
215fc     48 50 05 F1 | 	add	fp, #72
21600     A8 74 02 FB | 	rdlong	arg01, fp
21604     04 50 05 F1 | 	add	fp, #4
21608     A8 8C 02 FB | 	rdlong	local01, fp
2160c     4C 50 85 F1 | 	sub	fp, #76
21610     46 77 02 F6 | 	mov	arg02, local01
21614     C4 BF BF FD | 	call	#_fatfs_cc_dir_clear
21618     08 50 05 F1 | 	add	fp, #8
2161c     A8 34 62 FC | 	wrlong	result1, fp
21620     1A 8F 0A F6 | 	mov	local02, result1 wz
21624     08 50 85 F1 | 	sub	fp, #8
21628     F4 00 90 5D |  if_ne	jmp	#LR__1269
2162c     48 50 05 F1 | 	add	fp, #72
21630     A8 74 02 FB | 	rdlong	arg01, fp
21634     48 50 85 F1 | 	sub	fp, #72
21638     30 74 06 F1 | 	add	arg01, #48
2163c     20 76 06 F6 | 	mov	arg02, #32
21640     0B 78 06 F6 | 	mov	arg03, #11
21644     3A 93 02 F6 | 	mov	local04, arg01
21648     99 00 A0 FD | 	call	#\builtin_bytefill_
2164c     48 50 05 F1 | 	add	fp, #72
21650     A8 90 02 FB | 	rdlong	local03, fp
21654     30 90 06 F1 | 	add	local03, #48
21658     48 5D 48 FC | 	wrbyte	#46, local03
2165c     A8 90 02 FB | 	rdlong	local03, fp
21660     3B 90 06 F1 | 	add	local03, #59
21664     48 21 48 FC | 	wrbyte	#16, local03
21668     A8 74 02 FB | 	rdlong	arg01, fp
2166c     46 74 06 F1 | 	add	arg01, #70
21670     0C 50 05 F1 | 	add	fp, #12
21674     A8 76 02 FB | 	rdlong	arg02, fp
21678     3A 77 62 FC | 	wrlong	arg02, arg01
2167c     0C 50 85 F1 | 	sub	fp, #12
21680     A8 76 02 FB | 	rdlong	arg02, fp
21684     3B 75 02 F6 | 	mov	arg01, arg02
21688     30 76 06 F1 | 	add	arg02, #48
2168c     04 50 05 F1 | 	add	fp, #4
21690     A8 78 02 FB | 	rdlong	arg03, fp
21694     4C 50 85 F1 | 	sub	fp, #76
21698     38 C4 BF FD | 	call	#_fatfs_cc_st_clust
2169c     48 50 05 F1 | 	add	fp, #72
216a0     A8 76 02 FB | 	rdlong	arg02, fp
216a4     3B 75 02 F6 | 	mov	arg01, arg02
216a8     50 74 06 F1 | 	add	arg01, #80
216ac     48 50 85 F1 | 	sub	fp, #72
216b0     30 76 06 F1 | 	add	arg02, #48
216b4     20 78 06 F6 | 	mov	arg03, #32
216b8     4C 3B B0 FD | 	call	#__system____builtin_memmove
216bc     48 50 05 F1 | 	add	fp, #72
216c0     A8 90 02 FB | 	rdlong	local03, fp
216c4     51 90 06 F1 | 	add	local03, #81
216c8     48 5D 48 FC | 	wrbyte	#46, local03
216cc     34 50 85 F1 | 	sub	fp, #52
216d0     A8 78 02 FB | 	rdlong	arg03, fp
216d4     3C 50 05 F1 | 	add	fp, #60
216d8     A8 78 62 FC | 	wrlong	arg03, fp
216dc     08 50 85 F1 | 	sub	fp, #8
216e0     A8 76 02 FB | 	rdlong	arg02, fp
216e4     3B 75 02 F6 | 	mov	arg01, arg02
216e8     50 76 06 F1 | 	add	arg02, #80
216ec     48 50 85 F1 | 	sub	fp, #72
216f0     E0 C3 BF FD | 	call	#_fatfs_cc_st_clust
216f4     48 50 05 F1 | 	add	fp, #72
216f8     A8 90 02 FB | 	rdlong	local03, fp
216fc     03 90 06 F1 | 	add	local03, #3
21700     48 03 48 FC | 	wrbyte	#1, local03
21704     3C 50 85 F1 | 	sub	fp, #60
21708     A8 74 02 F6 | 	mov	arg01, fp
2170c     0C 50 85 F1 | 	sub	fp, #12
21710     E4 C5 BF FD | 	call	#_fatfs_cc_dir_register
21714     08 50 05 F1 | 	add	fp, #8
21718     A8 34 62 FC | 	wrlong	result1, fp
2171c     08 50 85 F1 | 	sub	fp, #8
21720                 | LR__1269
21720                 | LR__1270
21720     08 50 05 F1 | 	add	fp, #8
21724     A8 90 0A FB | 	rdlong	local03, fp wz
21728     08 50 85 F1 | 	sub	fp, #8
2172c     88 00 90 5D |  if_ne	jmp	#LR__1271
21730     28 50 05 F1 | 	add	fp, #40
21734     A8 74 02 FB | 	rdlong	arg01, fp
21738     16 74 06 F1 | 	add	arg01, #22
2173c     2C 50 05 F1 | 	add	fp, #44
21740     A8 76 02 FB | 	rdlong	arg02, fp
21744     3A 77 62 FC | 	wrlong	arg02, arg01
21748     0C 50 85 F1 | 	sub	fp, #12
2174c     A8 74 02 FB | 	rdlong	arg01, fp
21750     20 50 85 F1 | 	sub	fp, #32
21754     A8 76 02 FB | 	rdlong	arg02, fp
21758     24 50 05 F1 | 	add	fp, #36
2175c     A8 78 02 FB | 	rdlong	arg03, fp
21760     4C 50 85 F1 | 	sub	fp, #76
21764     6C C3 BF FD | 	call	#_fatfs_cc_st_clust
21768     28 50 05 F1 | 	add	fp, #40
2176c     A8 90 02 FB | 	rdlong	local03, fp
21770     0B 90 06 F1 | 	add	local03, #11
21774     48 21 48 FC | 	wrbyte	#16, local03
21778     20 50 05 F1 | 	add	fp, #32
2177c     A8 90 02 FB | 	rdlong	local03, fp
21780     03 90 06 F1 | 	add	local03, #3
21784     48 03 48 FC | 	wrbyte	#1, local03
21788     40 50 85 F1 | 	sub	fp, #64
2178c     A8 90 0A FB | 	rdlong	local03, fp wz
21790     08 50 85 F1 | 	sub	fp, #8
21794     3C 00 90 5D |  if_ne	jmp	#LR__1272
21798     48 50 05 F1 | 	add	fp, #72
2179c     A8 74 02 FB | 	rdlong	arg01, fp
217a0     48 50 85 F1 | 	sub	fp, #72
217a4     28 B5 BF FD | 	call	#_fatfs_cc_sync_fs
217a8     08 50 05 F1 | 	add	fp, #8
217ac     A8 34 62 FC | 	wrlong	result1, fp
217b0     08 50 85 F1 | 	sub	fp, #8
217b4     1C 00 90 FD | 	jmp	#LR__1272
217b8                 | LR__1271
217b8     38 50 05 F1 | 	add	fp, #56
217bc     A8 74 02 F6 | 	mov	arg01, fp
217c0     14 50 05 F1 | 	add	fp, #20
217c4     A8 76 02 FB | 	rdlong	arg02, fp
217c8     4C 50 85 F1 | 	sub	fp, #76
217cc     00 78 06 F6 | 	mov	arg03, #0
217d0     C0 BA BF FD | 	call	#_fatfs_cc_remove_chain
217d4                 | LR__1272
217d4                 | LR__1273
217d4                 | LR__1274
217d4                 | ' 				remove_chain(&sobj, dcl, 0);
217d4                 | ' 			}
217d4                 | ' 		}
217d4                 | ' 		;
217d4                 | ' 	}
217d4                 | ' 
217d4                 | ' 	return res ;
217d4     08 50 05 F1 | 	add	fp, #8
217d8     A8 34 02 FB | 	rdlong	result1, fp
217dc     08 50 85 F1 | 	sub	fp, #8
217e0     A8 F0 03 F6 | 	mov	ptra, fp
217e4     B3 00 A0 FD | 	call	#popregs_
217e8                 | _fatfs_cc_f_mkdir_ret
217e8     2D 00 64 FD | 	ret
217ec                 | 
217ec                 | _fatfs_cc_f_rename
217ec     09 4C 05 F6 | 	mov	COUNT_, #9
217f0     A9 00 A0 FD | 	call	#pushregs_
217f4     94 F0 07 F1 | 	add	ptra, #148
217f8     04 50 05 F1 | 	add	fp, #4
217fc     A8 74 62 FC | 	wrlong	arg01, fp
21800     04 50 05 F1 | 	add	fp, #4
21804     A8 76 62 FC | 	wrlong	arg02, fp
21808     A8 74 02 F6 | 	mov	arg01, fp
2180c     08 50 85 F1 | 	sub	fp, #8
21810     F4 CA BF FD | 	call	#_fatfs_cc_get_ldnumber
21814     04 50 05 F1 | 	add	fp, #4
21818     A8 74 02 F6 | 	mov	arg01, fp
2181c     64 50 05 F1 | 	add	fp, #100
21820     A8 76 02 F6 | 	mov	arg02, fp
21824     68 50 85 F1 | 	sub	fp, #104
21828     02 78 06 F6 | 	mov	arg03, #2
2182c     BC CE BF FD | 	call	#_fatfs_cc_mount_volume
21830     0C 50 05 F1 | 	add	fp, #12
21834     A8 34 62 FC | 	wrlong	result1, fp
21838     0C 50 85 F1 | 	sub	fp, #12
2183c     00 34 0E F2 | 	cmp	result1, #0 wz
21840     84 03 90 5D |  if_ne	jmp	#LR__1288
21844     68 50 05 F1 | 	add	fp, #104
21848     A8 76 02 FB | 	rdlong	arg02, fp
2184c     58 50 85 F1 | 	sub	fp, #88
21850     A8 76 62 FC | 	wrlong	arg02, fp
21854     A8 74 02 F6 | 	mov	arg01, fp
21858     0C 50 85 F1 | 	sub	fp, #12
2185c     A8 76 02 FB | 	rdlong	arg02, fp
21860     04 50 85 F1 | 	sub	fp, #4
21864     90 C8 BF FD | 	call	#_fatfs_cc_follow_path
21868     0C 50 05 F1 | 	add	fp, #12
2186c     A8 34 62 FC | 	wrlong	result1, fp
21870     00 34 4E F2 | 	cmps	result1, #0 wz
21874     0C 50 85 F1 | 	sub	fp, #12
21878     1C 00 90 5D |  if_ne	jmp	#LR__1275
2187c     3B 50 05 F1 | 	add	fp, #59
21880     A8 34 C2 FA | 	rdbyte	result1, fp
21884     3B 50 85 F1 | 	sub	fp, #59
21888     A0 34 CE F7 | 	test	result1, #160 wz
2188c     0C 50 05 51 |  if_ne	add	fp, #12
21890     A8 0C 68 5C |  if_ne	wrlong	#6, fp
21894     0C 50 85 51 |  if_ne	sub	fp, #12
21898                 | LR__1275
21898     0C 50 05 F1 | 	add	fp, #12
2189c     A8 8C 0A FB | 	rdlong	local01, fp wz
218a0     0C 50 85 F1 | 	sub	fp, #12
218a4     20 03 90 5D |  if_ne	jmp	#LR__1287
218a8     6C 50 05 F1 | 	add	fp, #108
218ac     A8 74 02 F6 | 	mov	arg01, fp
218b0     40 50 85 F1 | 	sub	fp, #64
218b4     A8 76 02 FB | 	rdlong	arg02, fp
218b8     2C 50 85 F1 | 	sub	fp, #44
218bc     20 78 06 F6 | 	mov	arg03, #32
218c0     44 39 B0 FD | 	call	#__system____builtin_memmove
218c4     3C 50 05 F1 | 	add	fp, #60
218c8     A8 74 02 F6 | 	mov	arg01, fp
218cc     2C 50 85 F1 | 	sub	fp, #44
218d0     A8 76 02 F6 | 	mov	arg02, fp
218d4     10 50 85 F1 | 	sub	fp, #16
218d8     2C 78 06 F6 | 	mov	arg03, #44
218dc     28 39 B0 FD | 	call	#__system____builtin_memmove
218e0     3C 50 05 F1 | 	add	fp, #60
218e4     A8 74 02 F6 | 	mov	arg01, fp
218e8     34 50 85 F1 | 	sub	fp, #52
218ec     A8 76 02 FB | 	rdlong	arg02, fp
218f0     08 50 85 F1 | 	sub	fp, #8
218f4     00 C8 BF FD | 	call	#_fatfs_cc_follow_path
218f8     0C 50 05 F1 | 	add	fp, #12
218fc     A8 34 62 FC | 	wrlong	result1, fp
21900     0C 50 85 F1 | 	sub	fp, #12
21904     00 34 0E F2 | 	cmp	result1, #0 wz
21908     4C 00 90 5D |  if_ne	jmp	#LR__1278
2190c     44 50 05 F1 | 	add	fp, #68
21910     A8 74 02 FB | 	rdlong	arg01, fp
21914     2C 50 85 F1 | 	sub	fp, #44
21918     A8 34 02 FB | 	rdlong	result1, fp
2191c     18 50 85 F1 | 	sub	fp, #24
21920     1A 75 0A F2 | 	cmp	arg01, result1 wz
21924     20 00 90 5D |  if_ne	jmp	#LR__1276
21928     4C 50 05 F1 | 	add	fp, #76
2192c     A8 34 02 FB | 	rdlong	result1, fp
21930     2C 50 85 F1 | 	sub	fp, #44
21934     A8 8E 02 FB | 	rdlong	local02, fp
21938     20 50 85 F1 | 	sub	fp, #32
2193c     47 35 0A F2 | 	cmp	result1, local02 wz
21940     04 8C 06 A6 |  if_e	mov	local01, #4
21944     04 00 90 AD |  if_e	jmp	#LR__1277
21948                 | LR__1276
21948     08 8C 06 F6 | 	mov	local01, #8
2194c                 | LR__1277
2194c     0C 50 05 F1 | 	add	fp, #12
21950     A8 8C 62 FC | 	wrlong	local01, fp
21954     0C 50 85 F1 | 	sub	fp, #12
21958                 | LR__1278
21958     0C 50 05 F1 | 	add	fp, #12
2195c     A8 8C 02 FB | 	rdlong	local01, fp
21960     0C 50 85 F1 | 	sub	fp, #12
21964     04 8C 0E F2 | 	cmp	local01, #4 wz
21968     0C 02 90 5D |  if_ne	jmp	#LR__1284
2196c     3C 50 05 F1 | 	add	fp, #60
21970     A8 74 02 F6 | 	mov	arg01, fp
21974     3C 50 85 F1 | 	sub	fp, #60
21978     7C C3 BF FD | 	call	#_fatfs_cc_dir_register
2197c     0C 50 05 F1 | 	add	fp, #12
21980     A8 34 62 FC | 	wrlong	result1, fp
21984     0C 50 85 F1 | 	sub	fp, #12
21988     00 34 0E F2 | 	cmp	result1, #0 wz
2198c     E8 01 90 5D |  if_ne	jmp	#LR__1283
21990     58 50 05 F1 | 	add	fp, #88
21994     A8 74 02 FB | 	rdlong	arg01, fp
21998     34 50 05 F1 | 	add	fp, #52
2199c     A8 74 62 FC | 	wrlong	arg01, fp
219a0     0D 74 06 F1 | 	add	arg01, #13
219a4     20 50 85 F1 | 	sub	fp, #32
219a8     A8 76 02 F6 | 	mov	arg02, fp
219ac     6C 50 85 F1 | 	sub	fp, #108
219b0     0D 76 06 F1 | 	add	arg02, #13
219b4     13 78 06 F6 | 	mov	arg03, #19
219b8     4C 38 B0 FD | 	call	#__system____builtin_memmove
219bc     8C 50 05 F1 | 	add	fp, #140
219c0     A8 8C 02 FB | 	rdlong	local01, fp
219c4     15 50 85 F1 | 	sub	fp, #21
219c8     A8 34 C2 FA | 	rdbyte	result1, fp
219cc     0B 8C 06 F1 | 	add	local01, #11
219d0     46 35 42 FC | 	wrbyte	result1, local01
219d4     15 50 05 F1 | 	add	fp, #21
219d8     A8 8C 02 FB | 	rdlong	local01, fp
219dc     8C 50 85 F1 | 	sub	fp, #140
219e0     0B 8C 06 F1 | 	add	local01, #11
219e4     46 8D C2 FA | 	rdbyte	local01, local01
219e8     10 8C CE F7 | 	test	local01, #16 wz
219ec     24 00 90 5D |  if_ne	jmp	#LR__1279
219f0     8C 50 05 F1 | 	add	fp, #140
219f4     A8 34 02 FB | 	rdlong	result1, fp
219f8     1A 8D 02 F6 | 	mov	local01, result1
219fc     8C 50 85 F1 | 	sub	fp, #140
21a00     0B 34 06 F1 | 	add	result1, #11
21a04     1A 35 C2 FA | 	rdbyte	result1, result1
21a08     20 34 46 F5 | 	or	result1, #32
21a0c     0B 8C 06 F1 | 	add	local01, #11
21a10     46 35 42 FC | 	wrbyte	result1, local01
21a14                 | LR__1279
21a14     68 50 05 F1 | 	add	fp, #104
21a18     A8 8C 02 FB | 	rdlong	local01, fp
21a1c     03 8C 06 F1 | 	add	local01, #3
21a20     46 03 48 FC | 	wrbyte	#1, local01
21a24     24 50 05 F1 | 	add	fp, #36
21a28     A8 8C 02 FB | 	rdlong	local01, fp
21a2c     8C 50 85 F1 | 	sub	fp, #140
21a30     0B 8C 06 F1 | 	add	local01, #11
21a34     46 8D C2 FA | 	rdbyte	local01, local01
21a38     10 8C CE F7 | 	test	local01, #16 wz
21a3c     38 01 90 AD |  if_e	jmp	#LR__1282
21a40     18 50 05 F1 | 	add	fp, #24
21a44     A8 90 02 FB | 	rdlong	local03, fp
21a48     48 93 02 F6 | 	mov	local04, local03
21a4c     2C 50 05 F1 | 	add	fp, #44
21a50     A8 94 02 FB | 	rdlong	local05, fp
21a54     44 50 85 F1 | 	sub	fp, #68
21a58     4A 97 02 F6 | 	mov	local06, local05
21a5c     4B 93 0A F2 | 	cmp	local04, local06 wz
21a60     14 01 90 AD |  if_e	jmp	#LR__1282
21a64     68 50 05 F1 | 	add	fp, #104
21a68     A8 74 02 FB | 	rdlong	arg01, fp
21a6c     3A 8D 02 F6 | 	mov	local01, arg01
21a70     24 50 05 F1 | 	add	fp, #36
21a74     A8 98 02 FB | 	rdlong	local07, fp
21a78     8C 50 85 F1 | 	sub	fp, #140
21a7c     4C 9B 02 F6 | 	mov	local08, local07
21a80     4D 77 02 F6 | 	mov	arg02, local08
21a84     08 C0 BF FD | 	call	#_fatfs_cc_ld_clust
21a88     1A 77 02 F6 | 	mov	arg02, result1
21a8c     46 75 02 F6 | 	mov	arg01, local01
21a90     54 B3 BF FD | 	call	#_fatfs_cc_clst2sect
21a94     90 50 05 F1 | 	add	fp, #144
21a98     A8 34 62 FC | 	wrlong	result1, fp
21a9c     1A 9D 0A F6 | 	mov	local09, result1 wz
21aa0     90 50 85 F1 | 	sub	fp, #144
21aa4     02 8C 06 A6 |  if_e	mov	local01, #2
21aa8     0C 50 05 A1 |  if_e	add	fp, #12
21aac     A8 04 68 AC |  if_e	wrlong	#2, fp
21ab0     0C 50 85 A1 |  if_e	sub	fp, #12
21ab4     C0 00 90 AD |  if_e	jmp	#LR__1281
21ab8     68 50 05 F1 | 	add	fp, #104
21abc     A8 74 02 FB | 	rdlong	arg01, fp
21ac0     28 50 05 F1 | 	add	fp, #40
21ac4     A8 76 02 FB | 	rdlong	arg02, fp
21ac8     90 50 85 F1 | 	sub	fp, #144
21acc     88 B1 BF FD | 	call	#_fatfs_cc_move_window
21ad0     0C 50 05 F1 | 	add	fp, #12
21ad4     A8 34 62 FC | 	wrlong	result1, fp
21ad8     5C 50 05 F1 | 	add	fp, #92
21adc     A8 9A 02 FB | 	rdlong	local08, fp
21ae0     4D 99 02 F6 | 	mov	local07, local08
21ae4     30 98 06 F1 | 	add	local07, #48
21ae8     4C 8D 02 F6 | 	mov	local01, local07
21aec     20 8C 06 F1 | 	add	local01, #32
21af0     24 50 05 F1 | 	add	fp, #36
21af4     A8 8C 62 FC | 	wrlong	local01, fp
21af8     80 50 85 F1 | 	sub	fp, #128
21afc     A8 9C 02 FB | 	rdlong	local09, fp
21b00     0C 50 85 F1 | 	sub	fp, #12
21b04     4E 8D 0A F6 | 	mov	local01, local09 wz
21b08     6C 00 90 5D |  if_ne	jmp	#LR__1280
21b0c     8C 50 05 F1 | 	add	fp, #140
21b10     A8 92 02 FB | 	rdlong	local04, fp
21b14     8C 50 85 F1 | 	sub	fp, #140
21b18     49 99 02 F6 | 	mov	local07, local04
21b1c     01 98 06 F1 | 	add	local07, #1
21b20     4C 91 C2 FA | 	rdbyte	local03, local07
21b24     01 98 86 F1 | 	sub	local07, #1
21b28     48 9B E2 F8 | 	getbyte	local08, local03, #0
21b2c     2E 9A 0E F2 | 	cmp	local08, #46 wz
21b30     44 00 90 5D |  if_ne	jmp	#LR__1280
21b34     68 50 05 F1 | 	add	fp, #104
21b38     A8 74 02 FB | 	rdlong	arg01, fp
21b3c     24 50 05 F1 | 	add	fp, #36
21b40     A8 76 02 FB | 	rdlong	arg02, fp
21b44     48 50 85 F1 | 	sub	fp, #72
21b48     A8 98 02 FB | 	rdlong	local07, fp
21b4c     44 50 85 F1 | 	sub	fp, #68
21b50     4C 79 02 F6 | 	mov	arg03, local07
21b54     7C BF BF FD | 	call	#_fatfs_cc_st_clust
21b58     68 50 05 F1 | 	add	fp, #104
21b5c     A8 9C 02 FB | 	rdlong	local09, fp
21b60     68 50 85 F1 | 	sub	fp, #104
21b64     4E 8D 02 F6 | 	mov	local01, local09
21b68     01 9A 06 F6 | 	mov	local08, #1
21b6c     03 8C 06 F1 | 	add	local01, #3
21b70     46 03 48 FC | 	wrbyte	#1, local01
21b74     03 8C 86 F1 | 	sub	local01, #3
21b78                 | LR__1280
21b78                 | LR__1281
21b78                 | LR__1282
21b78                 | LR__1283
21b78                 | LR__1284
21b78     0C 50 05 F1 | 	add	fp, #12
21b7c     A8 8C 0A FB | 	rdlong	local01, fp wz
21b80     0C 50 85 F1 | 	sub	fp, #12
21b84     40 00 90 5D |  if_ne	jmp	#LR__1286
21b88     10 50 05 F1 | 	add	fp, #16
21b8c     A8 74 02 F6 | 	mov	arg01, fp
21b90     10 50 85 F1 | 	sub	fp, #16
21b94     E0 C1 BF FD | 	call	#_fatfs_cc_dir_remove
21b98     0C 50 05 F1 | 	add	fp, #12
21b9c     A8 34 62 FC | 	wrlong	result1, fp
21ba0     0C 50 85 F1 | 	sub	fp, #12
21ba4     00 34 0E F2 | 	cmp	result1, #0 wz
21ba8     1C 00 90 5D |  if_ne	jmp	#LR__1285
21bac     68 50 05 F1 | 	add	fp, #104
21bb0     A8 74 02 FB | 	rdlong	arg01, fp
21bb4     68 50 85 F1 | 	sub	fp, #104
21bb8     14 B1 BF FD | 	call	#_fatfs_cc_sync_fs
21bbc     0C 50 05 F1 | 	add	fp, #12
21bc0     A8 34 62 FC | 	wrlong	result1, fp
21bc4     0C 50 85 F1 | 	sub	fp, #12
21bc8                 | LR__1285
21bc8                 | LR__1286
21bc8                 | LR__1287
21bc8                 | LR__1288
21bc8                 | ' 					res = sync_fs(fs);
21bc8                 | ' 				}
21bc8                 | ' 			}
21bc8                 | ' 
21bc8                 | ' 		}
21bc8                 | ' 		;
21bc8                 | ' 	}
21bc8                 | ' 
21bc8                 | ' 	return res ;
21bc8     0C 50 05 F1 | 	add	fp, #12
21bcc     A8 34 02 FB | 	rdlong	result1, fp
21bd0     0C 50 85 F1 | 	sub	fp, #12
21bd4     A8 F0 03 F6 | 	mov	ptra, fp
21bd8     B3 00 A0 FD | 	call	#popregs_
21bdc                 | _fatfs_cc_f_rename_ret
21bdc     2D 00 64 FD | 	ret
21be0                 | 
21be0                 | _fatfs_cc_time
21be0     00 4C 05 F6 | 	mov	COUNT_, #0
21be4     A9 00 A0 FD | 	call	#pushregs_
21be8     14 F0 07 F1 | 	add	ptra, #20
21bec     04 50 05 F1 | 	add	fp, #4
21bf0     A8 74 62 FC | 	wrlong	arg01, fp
21bf4     04 50 05 F1 | 	add	fp, #4
21bf8     A8 74 02 F6 | 	mov	arg01, fp
21bfc     08 50 85 F1 | 	sub	fp, #8
21c00     00 76 06 F6 | 	mov	arg02, #0
21c04     1C 27 B0 FD | 	call	#_fatfs_cc_gettimeofday
21c08     08 50 05 F1 | 	add	fp, #8
21c0c     A8 34 02 FB | 	rdlong	result1, fp
21c10     08 50 05 F1 | 	add	fp, #8
21c14     A8 34 62 FC | 	wrlong	result1, fp
21c18     0C 50 85 F1 | 	sub	fp, #12
21c1c     A8 34 0A FB | 	rdlong	result1, fp wz
21c20     04 50 85 F1 | 	sub	fp, #4
21c24     18 00 90 AD |  if_e	jmp	#LR__1289
21c28     04 50 05 F1 | 	add	fp, #4
21c2c     A8 34 02 FB | 	rdlong	result1, fp
21c30     0C 50 05 F1 | 	add	fp, #12
21c34     A8 76 02 FB | 	rdlong	arg02, fp
21c38     10 50 85 F1 | 	sub	fp, #16
21c3c     1A 77 62 FC | 	wrlong	arg02, result1
21c40                 | LR__1289
21c40                 | '         *tp = now;
21c40                 | '     return now;
21c40     10 50 05 F1 | 	add	fp, #16
21c44     A8 34 02 FB | 	rdlong	result1, fp
21c48     10 50 85 F1 | 	sub	fp, #16
21c4c     A8 F0 03 F6 | 	mov	ptra, fp
21c50     B3 00 A0 FD | 	call	#popregs_
21c54                 | _fatfs_cc_time_ret
21c54     2D 00 64 FD | 	ret
21c58                 | 
21c58                 | _fatfs_cc_mktime
21c58     07 4C 05 F6 | 	mov	COUNT_, #7
21c5c     A9 00 A0 FD | 	call	#pushregs_
21c60     3A 8D 02 F6 | 	mov	local01, arg01
21c64     14 8C 06 F1 | 	add	local01, #20
21c68     46 75 02 FB | 	rdlong	arg01, local01
21c6c     14 8C 86 F1 | 	sub	local01, #20
21c70     46 74 56 F2 | 	cmps	arg01, #70 wc
21c74                 | '                 return (time_t) -1;
21c74     01 34 66 C6 |  if_b	neg	result1, #1
21c78     70 01 90 CD |  if_b	jmp	#LR__1294
21c7c     03 00 00 FF 
21c80     6C 8F 06 F6 | 	mov	local02, ##1900
21c84     14 8C 06 F1 | 	add	local01, #20
21c88     46 35 02 FB | 	rdlong	result1, local01
21c8c     1A 8F 02 F1 | 	add	local02, result1
21c90     08 8C 86 F1 | 	sub	local01, #8
21c94     46 91 02 FB | 	rdlong	local03, local01
21c98     01 90 86 F1 | 	sub	local03, #1
21c9c     04 8C 06 F1 | 	add	local01, #4
21ca0     46 75 02 FB | 	rdlong	arg01, local01
21ca4     10 8C 86 F1 | 	sub	local01, #16
21ca8     02 74 66 F0 | 	shl	arg01, #2
21cac     94 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #404
21cb0     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
21cb4     3A 35 02 FB | 	rdlong	result1, arg01
21cb8     1A 91 02 F1 | 	add	local03, result1
21cbc     47 75 02 F6 | 	mov	arg01, local02
21cc0     94 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #404
21cc4     74 28 B0 FD | 	call	#_fatfs_cc__is_leap_year
21cc8     00 34 0E F2 | 	cmp	result1, #0 wz
21ccc     1C 00 90 AD |  if_e	jmp	#LR__1290
21cd0     00 92 06 F6 | 	mov	local04, #0
21cd4     10 8C 06 F1 | 	add	local01, #16
21cd8     46 35 02 FB | 	rdlong	result1, local01
21cdc     10 8C 86 F1 | 	sub	local01, #16
21ce0     02 34 56 F2 | 	cmps	result1, #2 wc
21ce4     01 92 06 36 |  if_ae	mov	local04, #1
21ce8     04 00 90 FD | 	jmp	#LR__1291
21cec                 | LR__1290
21cec     00 92 06 F6 | 	mov	local04, #0
21cf0                 | LR__1291
21cf0     04 8C 06 F1 | 	add	local01, #4
21cf4     46 95 02 FB | 	rdlong	local05, local01
21cf8     04 8C 86 F1 | 	sub	local01, #4
21cfc     46 97 02 FB | 	rdlong	local06, local01
21d00     08 8C 06 F1 | 	add	local01, #8
21d04     46 35 02 FB | 	rdlong	result1, local01
21d08     07 00 00 FF 
21d0c     10 34 06 FD | 	qmul	result1, ##3600
21d10     49 91 02 F1 | 	add	local03, local04
21d14     4A 93 02 F6 | 	mov	local04, local05
21d18     04 92 66 F0 | 	shl	local04, #4
21d1c     4A 93 82 F1 | 	sub	local04, local05
21d20     02 92 66 F0 | 	shl	local04, #2
21d24     49 97 02 F1 | 	add	local06, local04
21d28     08 8C 86 F1 | 	sub	local01, #8
21d2c     18 94 62 FD | 	getqx	local05
21d30     A8 00 00 FF 
21d34     80 91 06 FD | 	qmul	local03, ##86400
21d38     4A 97 02 F1 | 	add	local06, local05
21d3c     47 91 02 F6 | 	mov	local03, local02
21d40     03 00 00 FF 
21d44     B2 91 86 F1 | 	sub	local03, ##1970
21d48     18 94 62 FD | 	getqx	local05
21d4c     99 F0 00 FF 
21d50     80 91 06 FD | 	qmul	local03, ##31536000
21d54     4A 97 02 F1 | 	add	local06, local05
21d58     47 91 02 F6 | 	mov	local03, local02
21d5c     03 00 00 FF 
21d60     B1 91 86 F1 | 	sub	local03, ##1969
21d64     48 99 52 F6 | 	abs	local07, local03 wc
21d68     02 98 46 F0 | 	shr	local07, #2
21d6c     4C 99 82 F6 | 	negc	local07, local07
21d70     03 00 00 FF 
21d74     D1 8F 56 F2 | 	cmps	local02, ##2001 wc
21d78     18 94 62 FD | 	getqx	local05
21d7c     4A 97 02 F1 | 	add	local06, local05
21d80     1C 00 90 CD |  if_b	jmp	#LR__1292
21d84     03 00 00 FF 
21d88     D0 8F 86 F1 | 	sub	local02, ##2000
21d8c     47 95 52 F6 | 	abs	local05, local02 wc
21d90     64 94 16 FD | 	qdiv	local05, #100
21d94     18 94 62 FD | 	getqx	local05
21d98     4A 95 82 F6 | 	negc	local05, local05
21d9c     4A 99 82 F1 | 	sub	local07, local05
21da0                 | LR__1292
21da0     A8 00 00 FF 
21da4     80 99 06 FD | 	qmul	local07, ##86400
21da8     18 98 62 FD | 	getqx	local07
21dac     4C 97 02 F1 | 	add	local06, local07
21db0     D4 01 B0 FD | 	call	#_fatfs_cc__tzset
21db4     60 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #352
21db8     F0 98 02 FB | 	rdlong	local07, ptr__fatfs_cc_dat__
21dbc     4C 97 02 F1 | 	add	local06, local07
21dc0     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
21dc4     F0 74 02 FB | 	rdlong	arg01, ptr__fatfs_cc_dat__
21dc8     C8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #456
21dcc     01 74 0E F2 | 	cmp	arg01, #1 wz
21dd0     14 00 90 5D |  if_ne	jmp	#LR__1293
21dd4     46 75 02 F6 | 	mov	arg01, local01
21dd8     60 2A B0 FD | 	call	#_fatfs_cc___indst
21ddc     00 34 4E F2 | 	cmps	result1, #0 wz
21de0     07 00 00 5F 
21de4     10 96 86 51 |  if_ne	sub	local06, ##3600
21de8                 | LR__1293
21de8                 | '                 s -=  (3600L) ;
21de8                 | ' 
21de8                 | '         return s;
21de8     4B 35 02 F6 | 	mov	result1, local06
21dec                 | LR__1294
21dec     A8 F0 03 F6 | 	mov	ptra, fp
21df0     B3 00 A0 FD | 	call	#popregs_
21df4                 | _fatfs_cc_mktime_ret
21df4     2D 00 64 FD | 	ret
21df8                 | 
21df8                 | _fatfs_cc__gmtime_r
21df8     03 4C 05 F6 | 	mov	COUNT_, #3
21dfc     A9 00 A0 FD | 	call	#pushregs_
21e00     3A 8D 02 FB | 	rdlong	local01, arg01
21e04     A8 00 00 FF 
21e08     80 8D 16 FD | 	qdiv	local01, ##86400
21e0c     18 34 62 FD | 	getqx	result1
21e10     04 34 06 F1 | 	add	result1, #4
21e14     07 34 16 FD | 	qdiv	result1, #7
21e18     18 76 06 F1 | 	add	arg02, #24
21e1c     D1 7F 27 FF 
21e20     00 8C 16 F2 | 	cmp	local01, ##1325376000 wc
21e24     D1 7F 27 3F 
21e28     00 8C 86 31 |  if_ae	sub	local01, ##1325376000
21e2c     03 00 00 3F 
21e30     DC 8F 06 36 |  if_ae	mov	local02, ##2012
21e34     03 00 00 CF 
21e38     B2 8F 06 C6 |  if_b	mov	local02, ##1970
21e3c                 | ' 	  year = 1970;
21e3c                 | ' 	}
21e3c                 | ' 
21e3c                 | ' 	for(;;) {
21e3c     19 34 62 FD | 	getqy	result1
21e40     3B 35 62 FC | 	wrlong	result1, arg02
21e44     18 76 86 F1 | 	sub	arg02, #24
21e48                 | LR__1295
21e48     47 75 02 F6 | 	mov	arg01, local02
21e4c     EC 26 B0 FD | 	call	#_fatfs_cc__is_leap_year
21e50     00 34 0E F2 | 	cmp	result1, #0 wz
21e54     42 F1 00 5F 
21e58     00 91 06 56 |  if_ne	mov	local03, ##31622400
21e5c     99 F0 00 AF 
21e60     80 91 06 A6 |  if_e	mov	local03, ##31536000
21e64     48 8D 12 F2 | 	cmp	local01, local03 wc
21e68                 | ' 	    break;
21e68     01 8E 06 31 |  if_ae	add	local02, #1
21e6c     48 8D 82 31 |  if_ae	sub	local01, local03
21e70     D4 FF 9F 3D |  if_ae	jmp	#LR__1295
21e74     A8 00 00 FF 
21e78     80 8D 16 FD | 	qdiv	local01, ##86400
21e7c     47 91 02 F6 | 	mov	local03, local02
21e80     03 00 00 FF 
21e84     6C 91 86 F1 | 	sub	local03, ##1900
21e88     14 76 06 F1 | 	add	arg02, #20
21e8c     3B 91 62 FC | 	wrlong	local03, arg02
21e90     08 76 06 F1 | 	add	arg02, #8
21e94     47 75 02 F6 | 	mov	arg01, local02
21e98     18 8E 62 FD | 	getqx	local02
21e9c     3B 8F 62 FC | 	wrlong	local02, arg02
21ea0     1C 76 86 F1 | 	sub	arg02, #28
21ea4     94 26 B0 FD | 	call	#_fatfs_cc__is_leap_year
21ea8     00 34 0E F2 | 	cmp	result1, #0 wz
21eac     1D 90 06 56 |  if_ne	mov	local03, #29
21eb0     1C 90 06 A6 |  if_e	mov	local03, #28
21eb4     68 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #360
21eb8     F0 90 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
21ebc     68 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #360
21ec0                 | ' 
21ec0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
21ec0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
21ec0     00 74 06 F6 | 	mov	arg01, #0
21ec4     7C E1 9D FE | 	loc	pa,	#(@LR__1297-@LR__1296)
21ec8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
21ecc                 | LR__1296
21ecc     3A 91 02 F6 | 	mov	local03, arg01
21ed0     02 90 66 F0 | 	shl	local03, #2
21ed4     64 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #356
21ed8     F0 90 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
21edc     48 91 02 FB | 	rdlong	local03, local03
21ee0     48 8F 52 F2 | 	cmps	local02, local03 wc
21ee4     64 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #356
21ee8     24 00 90 CD |  if_b	jmp	#LR__1298
21eec     3A 91 02 F6 | 	mov	local03, arg01
21ef0     02 90 66 F0 | 	shl	local03, #2
21ef4     64 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #356
21ef8     F0 90 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
21efc     48 91 02 FB | 	rdlong	local03, local03
21f00     48 8F 82 F1 | 	sub	local02, local03
21f04     01 74 06 F1 | 	add	arg01, #1
21f08     64 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #356
21f0c     BC FF 9F FD | 	jmp	#LR__1296
21f10                 | LR__1297
21f10                 | LR__1298
21f10     A8 00 00 FF 
21f14     80 8D 16 FD | 	qdiv	local01, ##86400
21f18     10 76 06 F1 | 	add	arg02, #16
21f1c     3B 75 62 FC | 	wrlong	arg01, arg02
21f20     01 8E 06 F1 | 	add	local02, #1
21f24     04 76 86 F1 | 	sub	arg02, #4
21f28     3B 8F 62 FC | 	wrlong	local02, arg02
21f2c     19 8C 62 FD | 	getqy	local01
21f30     07 00 00 FF 
21f34     10 8C 16 FD | 	qdiv	local01, ##3600
21f38     18 90 62 FD | 	getqx	local03
21f3c     07 00 00 FF 
21f40     10 8C 16 FD | 	qdiv	local01, ##3600
21f44     04 76 86 F1 | 	sub	arg02, #4
21f48     3B 91 62 FC | 	wrlong	local03, arg02
21f4c     19 8C 62 FD | 	getqy	local01
21f50     3C 8C 16 FD | 	qdiv	local01, #60
21f54     18 90 62 FD | 	getqx	local03
21f58     3C 8C 16 FD | 	qdiv	local01, #60
21f5c     04 76 86 F1 | 	sub	arg02, #4
21f60     3B 91 62 FC | 	wrlong	local03, arg02
21f64     04 76 86 F1 | 	sub	arg02, #4
21f68                 | '         stm->tm_isdst = 0;
21f68                 | ' 
21f68                 | ' ;
21f68                 | '         return stm;
21f68     3B 35 02 F6 | 	mov	result1, arg02
21f6c     19 90 62 FD | 	getqy	local03
21f70     3B 91 62 FC | 	wrlong	local03, arg02
21f74     20 76 06 F1 | 	add	arg02, #32
21f78     3B 01 68 FC | 	wrlong	#0, arg02
21f7c     A8 F0 03 F6 | 	mov	ptra, fp
21f80     B3 00 A0 FD | 	call	#popregs_
21f84                 | _fatfs_cc__gmtime_r_ret
21f84     2D 00 64 FD | 	ret
21f88                 | 
21f88                 | _fatfs_cc__tzset
21f88     53 01 00 FF 
21f8c     75 75 06 F6 | 	mov	arg01, ##@LR__2281
21f90     1C 10 B0 FD | 	call	#_fatfs_cc_getenv
21f94     1A 75 02 F6 | 	mov	arg01, result1
21f98     C8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #456
21f9c     F0 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
21fa0     C8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #456
21fa4     E4 25 B0 FD | 	call	#_fatfs_cc___tzoffset
21fa8     60 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #352
21fac     F0 34 62 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
21fb0     60 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #352
21fb4                 | _fatfs_cc__tzset_ret
21fb4     2D 00 64 FD | 	ret
21fb8                 | 
21fb8                 | _fatfs_cc_opendir
21fb8     06 4C 05 F6 | 	mov	COUNT_, #6
21fbc     A9 00 A0 FD | 	call	#pushregs_
21fc0     3A 77 02 F6 | 	mov	arg02, arg01
21fc4     7C A3 05 F1 | 	add	ptr___system__dat__, #380
21fc8     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
21fcc     46 75 02 F6 | 	mov	arg01, local01
21fd0     00 78 06 F6 | 	mov	arg03, #0
21fd4     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
21fd8     28 35 B0 FD | 	call	#__system____getvfsforfile
21fdc     1A 8F 0A F6 | 	mov	local02, result1 wz
21fe0     28 8E 06 51 |  if_ne	add	local02, #40
21fe4     47 75 02 5B |  if_ne	rdlong	arg01, local02
21fe8     28 8E 86 51 |  if_ne	sub	local02, #40
21fec     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
21ff0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
21ff4     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
21ff8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
21ffc                 | ' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
21ffc                 | '         _seterror( 16 );
21ffc                 | '         return 0;
21ffc     00 34 06 A6 |  if_e	mov	result1, #0
22000     80 00 90 AD |  if_e	jmp	#LR__1300
22004     5C 74 06 F6 | 	mov	arg01, #92
22008                 | '     return _gc_alloc(size);
22008     10 76 06 F6 | 	mov	arg02, #16
2200c     B4 5E B0 FD | 	call	#__system___gc_doalloc
22010     1A 91 0A F6 | 	mov	local03, result1 wz
22014     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22018     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2201c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22020                 | ' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
22020                 | '         _seterror( 7 );
22020                 | '         return 0;
22020     00 34 06 A6 |  if_e	mov	result1, #0
22024     5C 00 90 AD |  if_e	jmp	#LR__1300
22028     28 8E 06 F1 | 	add	local02, #40
2202c     47 77 02 FB | 	rdlong	arg02, local02
22030     28 8E 86 F1 | 	sub	local02, #40
22034     3B 93 02 FB | 	rdlong	local04, arg02
22038     04 76 06 F1 | 	add	arg02, #4
2203c     3B 95 02 FB | 	rdlong	local05, arg02
22040     48 75 02 F6 | 	mov	arg01, local03
22044     46 77 02 F6 | 	mov	arg02, local01
22048     C9 96 02 F6 | 	mov	local06, objptr
2204c     49 93 01 F6 | 	mov	objptr, local04
22050     2D 94 62 FD | 	call	local05
22054     4B 93 01 F6 | 	mov	objptr, local06
22058     1A 75 0A F6 | 	mov	arg01, result1 wz
2205c     1C 00 90 AD |  if_e	jmp	#LR__1299
22060     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22064     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
22068     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
2206c     48 75 02 F6 | 	mov	arg01, local03
22070                 | '     return _gc_free(ptr);
22070     80 5F B0 FD | 	call	#__system___gc_free
22074                 | ' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
22074                 | '         _seterror(r);
22074                 | '         free(dir);
22074                 | '         return 0;
22074     00 34 06 F6 | 	mov	result1, #0
22078     08 00 90 FD | 	jmp	#LR__1300
2207c                 | LR__1299
2207c     48 8F 62 FC | 	wrlong	local02, local03
22080                 | '     }
22080                 | '     dir->vfs = v;
22080                 | '     return dir;
22080     48 35 02 F6 | 	mov	result1, local03
22084                 | LR__1300
22084     A8 F0 03 F6 | 	mov	ptra, fp
22088     B3 00 A0 FD | 	call	#popregs_
2208c                 | _fatfs_cc_opendir_ret
2208c     2D 00 64 FD | 	ret
22090                 | 
22090                 | _fatfs_cc_closedir
22090     04 4C 05 F6 | 	mov	COUNT_, #4
22094     A9 00 A0 FD | 	call	#pushregs_
22098     3A 8D 02 F6 | 	mov	local01, arg01
2209c     46 75 02 FB | 	rdlong	arg01, local01
220a0     2C 74 06 F1 | 	add	arg01, #44
220a4     3A 75 02 FB | 	rdlong	arg01, arg01
220a8     3A 8F 02 FB | 	rdlong	local02, arg01
220ac     04 74 06 F1 | 	add	arg01, #4
220b0     3A 91 02 FB | 	rdlong	local03, arg01
220b4     46 75 02 F6 | 	mov	arg01, local01
220b8     C9 92 02 F6 | 	mov	local04, objptr
220bc     47 93 01 F6 | 	mov	objptr, local02
220c0     2D 90 62 FD | 	call	local03
220c4     49 93 01 F6 | 	mov	objptr, local04
220c8     1A 93 02 F6 | 	mov	local04, result1
220cc     46 75 02 F6 | 	mov	arg01, local01
220d0                 | '     return _gc_free(ptr);
220d0     20 5F B0 FD | 	call	#__system___gc_free
220d4                 | '     r = v->closedir(dir);
220d4                 | '     free(dir);
220d4                 | '     return _seterror(r);
220d4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
220d8     D1 92 62 FC | 	wrlong	local04, ptr___system__dat__
220dc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
220e0     00 92 0E F2 | 	cmp	local04, #0 wz
220e4     01 34 66 56 |  if_ne	neg	result1, #1
220e8     00 34 06 A6 |  if_e	mov	result1, #0
220ec     A8 F0 03 F6 | 	mov	ptra, fp
220f0     B3 00 A0 FD | 	call	#popregs_
220f4                 | _fatfs_cc_closedir_ret
220f4     2D 00 64 FD | 	ret
220f8                 | 
220f8                 | _fatfs_cc_readdir
220f8     04 4C 05 F6 | 	mov	COUNT_, #4
220fc     A9 00 A0 FD | 	call	#pushregs_
22100     3A 77 0A FB | 	rdlong	arg02, arg01 wz
22104     08 74 06 F1 | 	add	arg01, #8
22108     3A 8D 02 F6 | 	mov	local01, arg01
2210c                 | '         return 0;
2210c     08 74 86 F1 | 	sub	arg01, #8
22110     00 34 06 A6 |  if_e	mov	result1, #0
22114     4C 00 90 AD |  if_e	jmp	#LR__1302
22118     30 76 06 F1 | 	add	arg02, #48
2211c     3B 77 02 FB | 	rdlong	arg02, arg02
22120     3B 8F 02 FB | 	rdlong	local02, arg02
22124     04 76 06 F1 | 	add	arg02, #4
22128     3B 91 02 FB | 	rdlong	local03, arg02
2212c     46 77 02 F6 | 	mov	arg02, local01
22130     C9 92 02 F6 | 	mov	local04, objptr
22134     47 93 01 F6 | 	mov	objptr, local02
22138     2D 90 62 FD | 	call	local03
2213c     49 93 01 F6 | 	mov	objptr, local04
22140     00 34 4E F2 | 	cmps	result1, #0 wz
22144     18 00 90 AD |  if_e	jmp	#LR__1301
22148     01 34 56 F2 | 	cmps	result1, #1 wc
2214c     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22150     D1 34 62 3C |  if_ae	wrlong	result1, ptr___system__dat__
22154     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22158                 | '             _seterror(r);
22158                 | '         }
22158                 | '         return 0;
22158     00 34 06 F6 | 	mov	result1, #0
2215c     04 00 90 FD | 	jmp	#LR__1302
22160                 | LR__1301
22160                 | '     }
22160                 | '     return D;
22160     46 35 02 F6 | 	mov	result1, local01
22164                 | LR__1302
22164     A8 F0 03 F6 | 	mov	ptra, fp
22168     B3 00 A0 FD | 	call	#popregs_
2216c                 | _fatfs_cc_readdir_ret
2216c     2D 00 64 FD | 	ret
22170                 | 
22170                 | _fatfs_cc__openraw
22170     0C 4C 05 F6 | 	mov	COUNT_, #12
22174     A9 00 A0 FD | 	call	#pushregs_
22178     34 F0 07 F1 | 	add	ptra, #52
2217c     04 50 05 F1 | 	add	fp, #4
22180     A8 74 62 FC | 	wrlong	arg01, fp
22184     04 50 05 F1 | 	add	fp, #4
22188     A8 76 62 FC | 	wrlong	arg02, fp
2218c     04 50 05 F1 | 	add	fp, #4
22190     A8 78 62 FC | 	wrlong	arg03, fp
22194     04 50 05 F1 | 	add	fp, #4
22198     A8 7A 62 FC | 	wrlong	arg04, fp
2219c     0C 50 05 F1 | 	add	fp, #12
221a0     A8 08 68 FC | 	wrlong	#4, fp
221a4     18 50 85 F1 | 	sub	fp, #24
221a8     A8 78 02 FB | 	rdlong	arg03, fp
221ac     1C 50 05 F1 | 	add	fp, #28
221b0     A8 78 62 FC | 	wrlong	arg03, fp
221b4     7C A3 05 F1 | 	add	ptr___system__dat__, #380
221b8     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
221bc     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
221c0     04 50 05 F1 | 	add	fp, #4
221c4     A8 74 62 FC | 	wrlong	arg01, fp
221c8     1C 50 85 F1 | 	sub	fp, #28
221cc     A8 76 02 FB | 	rdlong	arg02, fp
221d0     08 50 85 F1 | 	sub	fp, #8
221d4     00 78 06 F6 | 	mov	arg03, #0
221d8     28 33 B0 FD | 	call	#__system____getvfsforfile
221dc     18 50 05 F1 | 	add	fp, #24
221e0     A8 34 62 FC | 	wrlong	result1, fp
221e4     00 34 4E F2 | 	cmps	result1, #0 wz
221e8     18 50 85 F1 | 	sub	fp, #24
221ec     18 00 90 AD |  if_e	jmp	#LR__1303
221f0     18 50 05 F1 | 	add	fp, #24
221f4     A8 34 02 FB | 	rdlong	result1, fp
221f8     18 50 85 F1 | 	sub	fp, #24
221fc     20 34 06 F1 | 	add	result1, #32
22200     1A 35 0A FB | 	rdlong	result1, result1 wz
22204     14 00 90 5D |  if_ne	jmp	#LR__1304
22208                 | LR__1303
22208                 | ' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
22208                 | '         return _seterror( 16 );
22208     18 A2 05 F1 | 	add	ptr___system__dat__, #24
2220c     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
22210     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22214     01 34 66 F6 | 	neg	result1, #1
22218     74 04 90 FD | 	jmp	#LR__1319
2221c                 | LR__1304
2221c     20 50 05 F1 | 	add	fp, #32
22220     A8 74 02 FB | 	rdlong	arg01, fp
22224     20 50 85 F1 | 	sub	fp, #32
22228     00 76 06 F6 | 	mov	arg02, #0
2222c     30 78 06 F6 | 	mov	arg03, #48
22230     3A 8D 02 F6 | 	mov	local01, arg01
22234     99 00 A0 FD | 	call	#\builtin_bytefill_
22238     18 50 05 F1 | 	add	fp, #24
2223c     A8 8E 02 FB | 	rdlong	local02, fp
22240     47 91 02 F6 | 	mov	local03, local02
22244     20 90 06 F1 | 	add	local03, #32
22248     48 93 02 FB | 	rdlong	local04, local03
2224c     49 79 02 F6 | 	mov	arg03, local04
22250     3C 95 02 FB | 	rdlong	local05, arg03
22254     04 78 06 F1 | 	add	arg03, #4
22258     3C 97 02 FB | 	rdlong	local06, arg03
2225c     4B 99 02 F6 | 	mov	local07, local06
22260     08 50 05 F1 | 	add	fp, #8
22264     A8 9A 02 FB | 	rdlong	local08, fp
22268     04 50 05 F1 | 	add	fp, #4
2226c     A8 9C 02 FB | 	rdlong	local09, fp
22270     18 50 85 F1 | 	sub	fp, #24
22274     A8 9E 02 FB | 	rdlong	local10, fp
22278     0C 50 85 F1 | 	sub	fp, #12
2227c     4D 75 02 F6 | 	mov	arg01, local08
22280     4E 77 02 F6 | 	mov	arg02, local09
22284     4F 79 02 F6 | 	mov	arg03, local10
22288     C9 A0 02 F6 | 	mov	local11, objptr
2228c     4A 93 01 F6 | 	mov	objptr, local05
22290     2D 98 62 FD | 	call	local07
22294     50 93 01 F6 | 	mov	objptr, local11
22298     14 50 05 F1 | 	add	fp, #20
2229c     A8 34 62 FC | 	wrlong	result1, fp
222a0     14 50 85 F1 | 	sub	fp, #20
222a4     00 34 0E F2 | 	cmp	result1, #0 wz
222a8     88 00 90 AD |  if_e	jmp	#LR__1305
222ac     0C 50 05 F1 | 	add	fp, #12
222b0     A8 98 02 FB | 	rdlong	local07, fp
222b4     0C 50 85 F1 | 	sub	fp, #12
222b8     04 98 CE F7 | 	test	local07, #4 wz
222bc     74 00 90 AD |  if_e	jmp	#LR__1305
222c0     18 50 05 F1 | 	add	fp, #24
222c4     A8 8E 02 FB | 	rdlong	local02, fp
222c8     47 91 02 F6 | 	mov	local03, local02
222cc     24 90 06 F1 | 	add	local03, #36
222d0     48 93 02 FB | 	rdlong	local04, local03
222d4     24 90 86 F1 | 	sub	local03, #36
222d8     49 A1 02 F6 | 	mov	local11, local04
222dc     50 95 02 FB | 	rdlong	local05, local11
222e0     04 A0 06 F1 | 	add	local11, #4
222e4     50 97 02 FB | 	rdlong	local06, local11
222e8     4B 99 02 F6 | 	mov	local07, local06
222ec     08 50 05 F1 | 	add	fp, #8
222f0     A8 9A 02 FB | 	rdlong	local08, fp
222f4     04 50 05 F1 | 	add	fp, #4
222f8     A8 9C 02 FB | 	rdlong	local09, fp
222fc     14 50 85 F1 | 	sub	fp, #20
22300     A8 9E 02 FB | 	rdlong	local10, fp
22304     10 50 85 F1 | 	sub	fp, #16
22308     4D 75 02 F6 | 	mov	arg01, local08
2230c     4E 77 02 F6 | 	mov	arg02, local09
22310     4F 79 02 F6 | 	mov	arg03, local10
22314     C9 A0 02 F6 | 	mov	local11, objptr
22318     4A 93 01 F6 | 	mov	objptr, local05
2231c     2D 98 62 FD | 	call	local07
22320     50 93 01 F6 | 	mov	objptr, local11
22324     1A A3 02 F6 | 	mov	local12, result1
22328     14 50 05 F1 | 	add	fp, #20
2232c     A8 A2 62 FC | 	wrlong	local12, fp
22330     14 50 85 F1 | 	sub	fp, #20
22334                 | LR__1305
22334     14 50 05 F1 | 	add	fp, #20
22338     A8 A2 0A FB | 	rdlong	local12, fp wz
2233c     14 50 85 F1 | 	sub	fp, #20
22340     2C 03 90 5D |  if_ne	jmp	#LR__1318
22344     0C 50 05 F1 | 	add	fp, #12
22348     A8 A2 02 FB | 	rdlong	local12, fp
2234c     03 A2 0E F5 | 	and	local12, #3 wz
22350     1C 50 05 F1 | 	add	fp, #28
22354     A8 A2 62 FC | 	wrlong	local12, fp
22358     28 50 85 F1 | 	sub	fp, #40
2235c     1C 50 05 51 |  if_ne	add	fp, #28
22360     A8 A2 02 5B |  if_ne	rdlong	local12, fp
22364     02 A2 46 55 |  if_ne	or	local12, #2
22368     A8 A2 62 5C |  if_ne	wrlong	local12, fp
2236c     1C 50 85 51 |  if_ne	sub	fp, #28
22370     28 50 05 F1 | 	add	fp, #40
22374     A8 A2 02 FB | 	rdlong	local12, fp
22378     28 50 85 F1 | 	sub	fp, #40
2237c     01 A2 0E F2 | 	cmp	local12, #1 wz
22380     1C 50 05 51 |  if_ne	add	fp, #28
22384     A8 A2 02 5B |  if_ne	rdlong	local12, fp
22388     01 A2 46 55 |  if_ne	or	local12, #1
2238c     A8 A2 62 5C |  if_ne	wrlong	local12, fp
22390     1C 50 85 51 |  if_ne	sub	fp, #28
22394     0C 50 05 F1 | 	add	fp, #12
22398     A8 A2 02 FB | 	rdlong	local12, fp
2239c     0C 50 85 F1 | 	sub	fp, #12
223a0     20 A2 CE F7 | 	test	local12, #32 wz
223a4     1C 50 05 51 |  if_ne	add	fp, #28
223a8     A8 A2 02 5B |  if_ne	rdlong	local12, fp
223ac     C0 A2 46 55 |  if_ne	or	local12, #192
223b0     A8 A2 62 5C |  if_ne	wrlong	local12, fp
223b4     1C 50 85 51 |  if_ne	sub	fp, #28
223b8     20 50 05 F1 | 	add	fp, #32
223bc     A8 A2 02 FB | 	rdlong	local12, fp
223c0     04 50 85 F1 | 	sub	fp, #4
223c4     A8 98 02 FB | 	rdlong	local07, fp
223c8     08 A2 06 F1 | 	add	local12, #8
223cc     51 99 62 FC | 	wrlong	local07, local12
223d0     04 50 05 F1 | 	add	fp, #4
223d4     A8 A2 02 FB | 	rdlong	local12, fp
223d8     20 50 85 F1 | 	sub	fp, #32
223dc     10 A2 06 F1 | 	add	local12, #16
223e0     51 99 0A FB | 	rdlong	local07, local12 wz
223e4     24 00 90 5D |  if_ne	jmp	#LR__1306
223e8     20 50 05 F1 | 	add	fp, #32
223ec     A8 A2 02 FB | 	rdlong	local12, fp
223f0     08 50 85 F1 | 	sub	fp, #8
223f4     A8 98 02 FB | 	rdlong	local07, fp
223f8     18 50 85 F1 | 	sub	fp, #24
223fc     04 98 06 F1 | 	add	local07, #4
22400     4C 8F 02 FB | 	rdlong	local02, local07
22404     10 A2 06 F1 | 	add	local12, #16
22408     51 8F 62 FC | 	wrlong	local02, local12
2240c                 | LR__1306
2240c     20 50 05 F1 | 	add	fp, #32
22410     A8 A2 02 FB | 	rdlong	local12, fp
22414     20 50 85 F1 | 	sub	fp, #32
22418     14 A2 06 F1 | 	add	local12, #20
2241c     51 99 0A FB | 	rdlong	local07, local12 wz
22420     24 00 90 5D |  if_ne	jmp	#LR__1307
22424     20 50 05 F1 | 	add	fp, #32
22428     A8 A2 02 FB | 	rdlong	local12, fp
2242c     08 50 85 F1 | 	sub	fp, #8
22430     A8 98 02 FB | 	rdlong	local07, fp
22434     18 50 85 F1 | 	sub	fp, #24
22438     08 98 06 F1 | 	add	local07, #8
2243c     4C 8F 02 FB | 	rdlong	local02, local07
22440     14 A2 06 F1 | 	add	local12, #20
22444     51 8F 62 FC | 	wrlong	local02, local12
22448                 | LR__1307
22448     20 50 05 F1 | 	add	fp, #32
2244c     A8 A2 02 FB | 	rdlong	local12, fp
22450     20 50 85 F1 | 	sub	fp, #32
22454     20 A2 06 F1 | 	add	local12, #32
22458     51 99 0A FB | 	rdlong	local07, local12 wz
2245c     20 00 90 5D |  if_ne	jmp	#LR__1308
22460     20 50 05 F1 | 	add	fp, #32
22464     A8 A2 02 FB | 	rdlong	local12, fp
22468     08 50 85 F1 | 	sub	fp, #8
2246c     A8 98 02 FB | 	rdlong	local07, fp
22470     18 50 85 F1 | 	sub	fp, #24
22474     4C 8F 02 FB | 	rdlong	local02, local07
22478     20 A2 06 F1 | 	add	local12, #32
2247c     51 8F 62 FC | 	wrlong	local02, local12
22480                 | LR__1308
22480     20 50 05 F1 | 	add	fp, #32
22484     A8 A2 02 FB | 	rdlong	local12, fp
22488     20 50 85 F1 | 	sub	fp, #32
2248c     24 A2 06 F1 | 	add	local12, #36
22490     51 99 0A FB | 	rdlong	local07, local12 wz
22494     24 00 90 5D |  if_ne	jmp	#LR__1309
22498     20 50 05 F1 | 	add	fp, #32
2249c     A8 A2 02 FB | 	rdlong	local12, fp
224a0     08 50 85 F1 | 	sub	fp, #8
224a4     A8 98 02 FB | 	rdlong	local07, fp
224a8     18 50 85 F1 | 	sub	fp, #24
224ac     10 98 06 F1 | 	add	local07, #16
224b0     4C 8F 02 FB | 	rdlong	local02, local07
224b4     24 A2 06 F1 | 	add	local12, #36
224b8     51 8F 62 FC | 	wrlong	local02, local12
224bc                 | LR__1309
224bc     20 50 05 F1 | 	add	fp, #32
224c0     A8 A2 02 FB | 	rdlong	local12, fp
224c4     20 50 85 F1 | 	sub	fp, #32
224c8     2C A2 06 F1 | 	add	local12, #44
224cc     51 99 0A FB | 	rdlong	local07, local12 wz
224d0     24 00 90 5D |  if_ne	jmp	#LR__1310
224d4     20 50 05 F1 | 	add	fp, #32
224d8     A8 A2 02 FB | 	rdlong	local12, fp
224dc     08 50 85 F1 | 	sub	fp, #8
224e0     A8 98 02 FB | 	rdlong	local07, fp
224e4     18 50 85 F1 | 	sub	fp, #24
224e8     0C 98 06 F1 | 	add	local07, #12
224ec     4C 8F 02 FB | 	rdlong	local02, local07
224f0     2C A2 06 F1 | 	add	local12, #44
224f4     51 8F 62 FC | 	wrlong	local02, local12
224f8                 | LR__1310
224f8     20 50 05 F1 | 	add	fp, #32
224fc     A8 A2 02 FB | 	rdlong	local12, fp
22500     20 50 85 F1 | 	sub	fp, #32
22504     18 A2 06 F1 | 	add	local12, #24
22508     51 99 0A FB | 	rdlong	local07, local12 wz
2250c     B0 00 90 5D |  if_ne	jmp	#LR__1313
22510     20 50 05 F1 | 	add	fp, #32
22514     A8 74 02 FB | 	rdlong	arg01, fp
22518     3A 91 02 F6 | 	mov	local03, arg01
2251c     24 90 06 F1 | 	add	local03, #36
22520     48 A3 02 FB | 	rdlong	local12, local03
22524     51 95 02 FB | 	rdlong	local05, local12
22528     04 A2 06 F1 | 	add	local12, #4
2252c     51 99 02 FB | 	rdlong	local07, local12
22530     10 50 05 F1 | 	add	fp, #16
22534     A8 78 02 F6 | 	mov	arg03, fp
22538     30 50 85 F1 | 	sub	fp, #48
2253c     00 77 06 F6 | 	mov	arg02, #256
22540     C9 A0 02 F6 | 	mov	local11, objptr
22544     4A 93 01 F6 | 	mov	objptr, local05
22548     2D 98 62 FD | 	call	local07
2254c     50 93 01 F6 | 	mov	objptr, local11
22550     2C 50 05 F1 | 	add	fp, #44
22554     A8 34 62 FC | 	wrlong	result1, fp
22558     2C 50 85 F1 | 	sub	fp, #44
2255c     00 34 0E F2 | 	cmp	result1, #0 wz
22560     3C 00 90 5D |  if_ne	jmp	#LR__1311
22564     30 50 05 F1 | 	add	fp, #48
22568     A8 98 02 FB | 	rdlong	local07, fp
2256c     30 50 85 F1 | 	sub	fp, #48
22570     02 98 CE F7 | 	test	local07, #2 wz
22574     28 00 90 AD |  if_e	jmp	#LR__1311
22578     20 50 05 F1 | 	add	fp, #32
2257c     A8 A2 02 FB | 	rdlong	local12, fp
22580     20 50 85 F1 | 	sub	fp, #32
22584     C9 74 02 F6 | 	mov	arg01, objptr
22588     EF 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_putc_terminal_
2258c     58 2D B0 FD | 	call	#__system___make_methodptr
22590     1A 99 02 F6 | 	mov	local07, result1
22594     18 A2 06 F1 | 	add	local12, #24
22598     51 99 62 FC | 	wrlong	local07, local12
2259c     20 00 90 FD | 	jmp	#LR__1312
225a0                 | LR__1311
225a0     20 50 05 F1 | 	add	fp, #32
225a4     A8 A2 02 FB | 	rdlong	local12, fp
225a8     20 50 85 F1 | 	sub	fp, #32
225ac     C9 74 02 F6 | 	mov	arg01, objptr
225b0     EE 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_putc_
225b4     30 2D B0 FD | 	call	#__system___make_methodptr
225b8     18 A2 06 F1 | 	add	local12, #24
225bc     51 35 62 FC | 	wrlong	result1, local12
225c0                 | LR__1312
225c0                 | LR__1313
225c0     20 50 05 F1 | 	add	fp, #32
225c4     A8 A2 02 FB | 	rdlong	local12, fp
225c8     20 50 85 F1 | 	sub	fp, #32
225cc     1C A2 06 F1 | 	add	local12, #28
225d0     51 99 0A FB | 	rdlong	local07, local12 wz
225d4     20 00 90 5D |  if_ne	jmp	#LR__1314
225d8     20 50 05 F1 | 	add	fp, #32
225dc     A8 A2 02 FB | 	rdlong	local12, fp
225e0     20 50 85 F1 | 	sub	fp, #32
225e4     C9 74 02 F6 | 	mov	arg01, objptr
225e8     ED 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_getc_
225ec     F8 2C B0 FD | 	call	#__system___make_methodptr
225f0     1C A2 06 F1 | 	add	local12, #28
225f4     51 35 62 FC | 	wrlong	result1, local12
225f8                 | LR__1314
225f8     20 50 05 F1 | 	add	fp, #32
225fc     A8 A2 02 FB | 	rdlong	local12, fp
22600     20 50 85 F1 | 	sub	fp, #32
22604     28 A2 06 F1 | 	add	local12, #40
22608     51 99 0A FB | 	rdlong	local07, local12 wz
2260c     60 00 90 5D |  if_ne	jmp	#LR__1317
22610     18 50 05 F1 | 	add	fp, #24
22614     A8 A2 02 FB | 	rdlong	local12, fp
22618     18 50 85 F1 | 	sub	fp, #24
2261c     14 A2 06 F1 | 	add	local12, #20
22620     51 99 0A FB | 	rdlong	local07, local12 wz
22624     28 00 90 AD |  if_e	jmp	#LR__1315
22628     20 50 05 F1 | 	add	fp, #32
2262c     A8 A2 02 FB | 	rdlong	local12, fp
22630     08 50 85 F1 | 	sub	fp, #8
22634     A8 98 02 FB | 	rdlong	local07, fp
22638     18 50 85 F1 | 	sub	fp, #24
2263c     14 98 06 F1 | 	add	local07, #20
22640     4C 8F 02 FB | 	rdlong	local02, local07
22644     28 A2 06 F1 | 	add	local12, #40
22648     51 8F 62 FC | 	wrlong	local02, local12
2264c     20 00 90 FD | 	jmp	#LR__1316
22650                 | LR__1315
22650     20 50 05 F1 | 	add	fp, #32
22654     A8 A2 02 FB | 	rdlong	local12, fp
22658     20 50 85 F1 | 	sub	fp, #32
2265c     C9 74 02 F6 | 	mov	arg01, objptr
22660     EC 76 02 F6 | 	mov	arg02, ptr__fatfs_cc___default_flush_
22664     80 2C B0 FD | 	call	#__system___make_methodptr
22668     28 A2 06 F1 | 	add	local12, #40
2266c     51 35 62 FC | 	wrlong	result1, local12
22670                 | LR__1316
22670                 | LR__1317
22670                 | LR__1318
22670     14 50 05 F1 | 	add	fp, #20
22674     A8 A2 0A FB | 	rdlong	local12, fp wz
22678     00 74 06 A6 |  if_e	mov	arg01, #0
2267c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22680     D1 74 62 AC |  if_e	wrlong	arg01, ptr___system__dat__
22684     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22688                 | '     return r;
22688     A8 34 02 FB | 	rdlong	result1, fp
2268c     14 50 85 F1 | 	sub	fp, #20
22690                 | LR__1319
22690     A8 F0 03 F6 | 	mov	ptra, fp
22694     B3 00 A0 FD | 	call	#popregs_
22698                 | _fatfs_cc__openraw_ret
22698     2D 00 64 FD | 	ret
2269c                 | 
2269c                 | _fatfs_cc__closeraw
2269c     05 4C 05 F6 | 	mov	COUNT_, #5
226a0     A9 00 A0 FD | 	call	#pushregs_
226a4     3A 8D 02 F6 | 	mov	local01, arg01
226a8     00 8E 06 F6 | 	mov	local02, #0
226ac     08 8C 06 F1 | 	add	local01, #8
226b0     46 35 0A FB | 	rdlong	result1, local01 wz
226b4     08 8C 86 F1 | 	sub	local01, #8
226b8                 | '         return _seterror( 5 );
226b8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
226bc     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
226c0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
226c4     01 34 66 A6 |  if_e	neg	result1, #1
226c8     90 00 90 AD |  if_e	jmp	#LR__1322
226cc     28 8C 06 F1 | 	add	local01, #40
226d0     46 35 0A FB | 	rdlong	result1, local01 wz
226d4     28 8C 86 F1 | 	sub	local01, #40
226d8     2C 00 90 AD |  if_e	jmp	#LR__1320
226dc     28 8C 06 F1 | 	add	local01, #40
226e0     46 75 02 FB | 	rdlong	arg01, local01
226e4     28 8C 86 F1 | 	sub	local01, #40
226e8     3A 91 02 FB | 	rdlong	local03, arg01
226ec     04 74 06 F1 | 	add	arg01, #4
226f0     3A 93 02 FB | 	rdlong	local04, arg01
226f4     46 75 02 F6 | 	mov	arg01, local01
226f8     C9 94 02 F6 | 	mov	local05, objptr
226fc     48 93 01 F6 | 	mov	objptr, local03
22700     2D 92 62 FD | 	call	local04
22704     4A 93 01 F6 | 	mov	objptr, local05
22708                 | LR__1320
22708     20 8C 06 F1 | 	add	local01, #32
2270c     46 95 0A FB | 	rdlong	local05, local01 wz
22710     20 8C 86 F1 | 	sub	local01, #32
22714     30 00 90 AD |  if_e	jmp	#LR__1321
22718     20 8C 06 F1 | 	add	local01, #32
2271c     46 95 02 FB | 	rdlong	local05, local01
22720     20 8C 86 F1 | 	sub	local01, #32
22724     4A 91 02 FB | 	rdlong	local03, local05
22728     04 94 06 F1 | 	add	local05, #4
2272c     4A 93 02 FB | 	rdlong	local04, local05
22730     46 75 02 F6 | 	mov	arg01, local01
22734     C9 94 02 F6 | 	mov	local05, objptr
22738     48 93 01 F6 | 	mov	objptr, local03
2273c     2D 92 62 FD | 	call	local04
22740     4A 93 01 F6 | 	mov	objptr, local05
22744     1A 8F 02 F6 | 	mov	local02, result1
22748                 | LR__1321
22748     46 75 02 F6 | 	mov	arg01, local01
2274c     00 76 06 F6 | 	mov	arg02, #0
22750     30 78 06 F6 | 	mov	arg03, #48
22754     99 00 A0 FD | 	call	#\builtin_bytefill_
22758                 | '     return r;
22758     47 35 02 F6 | 	mov	result1, local02
2275c                 | LR__1322
2275c     A8 F0 03 F6 | 	mov	ptra, fp
22760     B3 00 A0 FD | 	call	#popregs_
22764                 | _fatfs_cc__closeraw_ret
22764     2D 00 64 FD | 	ret
22768                 | 
22768                 | _fatfs_cc___default_getc
22768     03 4C 05 F6 | 	mov	COUNT_, #3
2276c     A9 00 A0 FD | 	call	#pushregs_
22770     3A 8D 02 F6 | 	mov	local01, arg01
22774     46 8F 02 FB | 	rdlong	local02, local01
22778     08 8E 06 F1 | 	add	local02, #8
2277c     47 91 02 FB | 	rdlong	local03, local02
22780     02 90 CE F7 | 	test	local03, #2 wz
22784     46 75 02 56 |  if_ne	mov	arg01, local01
22788     6C 01 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
2278c     47 91 02 FB | 	rdlong	local03, local02
22790     01 90 46 F5 | 	or	local03, #1
22794     47 91 62 FC | 	wrlong	local03, local02
22798     08 8E 86 F1 | 	sub	local02, #8
2279c     47 91 0A FB | 	rdlong	local03, local02 wz
227a0     0C 00 90 5D |  if_ne	jmp	#LR__1323
227a4     46 75 02 F6 | 	mov	arg01, local01
227a8     2C 27 B0 FD | 	call	#_fatfs_cc___default_filbuf
227ac     1A 91 02 F6 | 	mov	local03, result1
227b0                 | LR__1323
227b0     01 90 56 F2 | 	cmps	local03, #1 wc
227b4                 | '         return -1;
227b4     01 34 66 C6 |  if_b	neg	result1, #1
227b8     1C 00 90 CD |  if_b	jmp	#LR__1324
227bc     01 90 86 F1 | 	sub	local03, #1
227c0     47 91 62 FC | 	wrlong	local03, local02
227c4     04 8E 06 F1 | 	add	local02, #4
227c8     47 91 02 FB | 	rdlong	local03, local02
227cc     48 35 C2 FA | 	rdbyte	result1, local03
227d0     01 90 06 F1 | 	add	local03, #1
227d4     47 91 62 FC | 	wrlong	local03, local02
227d8                 | '     }
227d8                 | '     b->cnt = i-1;
227d8                 | '     ptr = b->ptr;
227d8                 | '     i = *ptr++;
227d8                 | '     b->ptr = ptr;
227d8                 | '     return i;
227d8                 | LR__1324
227d8     A8 F0 03 F6 | 	mov	ptra, fp
227dc     B3 00 A0 FD | 	call	#popregs_
227e0                 | _fatfs_cc___default_getc_ret
227e0     2D 00 64 FD | 	ret
227e4                 | 
227e4                 | _fatfs_cc___default_putc
227e4     04 4C 05 F6 | 	mov	COUNT_, #4
227e8     A9 00 A0 FD | 	call	#pushregs_
227ec     3A 8D 02 F6 | 	mov	local01, arg01
227f0     3B 8F 02 F6 | 	mov	local02, arg02
227f4     47 91 02 FB | 	rdlong	local03, local02
227f8     08 90 06 F1 | 	add	local03, #8
227fc     48 35 02 FB | 	rdlong	result1, local03
22800     01 34 CE F7 | 	test	result1, #1 wz
22804     47 75 02 56 |  if_ne	mov	arg01, local02
22808     EC 00 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
2280c     48 75 02 FB | 	rdlong	arg01, local03
22810     02 74 46 F5 | 	or	arg01, #2
22814     48 75 62 FC | 	wrlong	arg01, local03
22818     08 90 86 F1 | 	sub	local03, #8
2281c     48 75 02 FB | 	rdlong	arg01, local03
22820     3A 93 02 F6 | 	mov	local04, arg01
22824     0C 90 06 F1 | 	add	local03, #12
22828     48 93 02 F1 | 	add	local04, local03
2282c     49 8D 42 FC | 	wrbyte	local01, local04
22830     46 8D E2 F8 | 	getbyte	local01, local01, #0
22834     01 74 06 F1 | 	add	arg01, #1
22838     0C 90 86 F1 | 	sub	local03, #12
2283c     48 75 62 FC | 	wrlong	arg01, local03
22840     02 00 00 FF 
22844     00 74 0E F2 | 	cmp	arg01, ##1024 wz
22848     10 00 90 5D |  if_ne	jmp	#LR__1325
2284c     47 75 02 F6 | 	mov	arg01, local02
22850     A4 00 B0 FD | 	call	#_fatfs_cc___default_flush
22854     00 34 0E F2 | 	cmp	result1, #0 wz
22858     01 8C 66 56 |  if_ne	neg	local01, #1
2285c                 | LR__1325
2285c                 | '             c = -1;
2285c                 | '         }
2285c                 | '     }
2285c                 | '     return c;
2285c     46 35 02 F6 | 	mov	result1, local01
22860     A8 F0 03 F6 | 	mov	ptra, fp
22864     B3 00 A0 FD | 	call	#popregs_
22868                 | _fatfs_cc___default_putc_ret
22868     2D 00 64 FD | 	ret
2286c                 | 
2286c                 | _fatfs_cc___default_putc_terminal
2286c     04 4C 05 F6 | 	mov	COUNT_, #4
22870     A9 00 A0 FD | 	call	#pushregs_
22874     3A 8D 02 F6 | 	mov	local01, arg01
22878     3B 8F 02 F6 | 	mov	local02, arg02
2287c     47 91 02 FB | 	rdlong	local03, local02
22880     08 90 06 F1 | 	add	local03, #8
22884     48 35 02 FB | 	rdlong	result1, local03
22888     01 34 CE F7 | 	test	result1, #1 wz
2288c     47 75 02 56 |  if_ne	mov	arg01, local02
22890     64 00 B0 5D |  if_ne	call	#_fatfs_cc___default_flush
22894     48 75 02 FB | 	rdlong	arg01, local03
22898     02 74 46 F5 | 	or	arg01, #2
2289c     48 75 62 FC | 	wrlong	arg01, local03
228a0     08 90 86 F1 | 	sub	local03, #8
228a4     48 75 02 FB | 	rdlong	arg01, local03
228a8     3A 93 02 F6 | 	mov	local04, arg01
228ac     0C 90 06 F1 | 	add	local03, #12
228b0     48 93 02 F1 | 	add	local04, local03
228b4     49 8D 42 FC | 	wrbyte	local01, local04
228b8     46 8D E2 F8 | 	getbyte	local01, local01, #0
228bc     0C 90 86 F1 | 	sub	local03, #12
228c0     01 74 06 F1 | 	add	arg01, #1
228c4     48 75 62 FC | 	wrlong	arg01, local03
228c8     0A 8C 0E F2 | 	cmp	local01, #10 wz
228cc     02 00 00 5F 
228d0     00 74 0E 52 |  if_ne	cmp	arg01, ##1024 wz
228d4     10 00 90 5D |  if_ne	jmp	#LR__1326
228d8     47 75 02 F6 | 	mov	arg01, local02
228dc     18 00 B0 FD | 	call	#_fatfs_cc___default_flush
228e0     00 34 0E F2 | 	cmp	result1, #0 wz
228e4     01 8C 66 56 |  if_ne	neg	local01, #1
228e8                 | LR__1326
228e8                 | '             c = -1;
228e8                 | '         }
228e8                 | '     }
228e8                 | '     return c;
228e8     46 35 02 F6 | 	mov	result1, local01
228ec     A8 F0 03 F6 | 	mov	ptra, fp
228f0     B3 00 A0 FD | 	call	#popregs_
228f4                 | _fatfs_cc___default_putc_terminal_ret
228f4     2D 00 64 FD | 	ret
228f8                 | 
228f8                 | _fatfs_cc___default_flush
228f8     0D 4C 05 F6 | 	mov	COUNT_, #13
228fc     A9 00 A0 FD | 	call	#pushregs_
22900     3A 8D 02 F6 | 	mov	local01, arg01
22904     46 8F 02 FB | 	rdlong	local02, local01
22908     47 91 02 FB | 	rdlong	local03, local02
2290c     08 8E 06 F1 | 	add	local02, #8
22910     47 93 02 FB | 	rdlong	local04, local02
22914     08 8E 86 F1 | 	sub	local02, #8
22918     02 92 CE F7 | 	test	local04, #2 wz
2291c     B8 00 90 AD |  if_e	jmp	#LR__1329
22920     01 90 56 F2 | 	cmps	local03, #1 wc
22924     24 01 90 CD |  if_b	jmp	#LR__1331
22928     08 8C 06 F1 | 	add	local01, #8
2292c     46 93 02 FB | 	rdlong	local04, local01
22930     08 8C 86 F1 | 	sub	local01, #8
22934     40 92 CE F7 | 	test	local04, #64 wz
22938     5C 00 90 AD |  if_e	jmp	#LR__1328
2293c     08 8C 06 F1 | 	add	local01, #8
22940     46 93 02 FB | 	rdlong	local04, local01
22944     08 8C 86 F1 | 	sub	local01, #8
22948     80 92 CE F7 | 	test	local04, #128 wz
2294c     48 00 90 AD |  if_e	jmp	#LR__1327
22950     2C 8C 06 F1 | 	add	local01, #44
22954     46 93 02 FB | 	rdlong	local04, local01
22958     2C 8C 86 F1 | 	sub	local01, #44
2295c     49 95 02 FB | 	rdlong	local05, local04
22960     04 92 06 F1 | 	add	local04, #4
22964     49 93 02 FB | 	rdlong	local04, local04
22968     46 75 02 F6 | 	mov	arg01, local01
2296c     00 76 06 F6 | 	mov	arg02, #0
22970     02 78 06 F6 | 	mov	arg03, #2
22974     C9 96 02 F6 | 	mov	local06, objptr
22978     4A 93 01 F6 | 	mov	objptr, local05
2297c     2D 92 62 FD | 	call	local04
22980     4B 93 01 F6 | 	mov	objptr, local06
22984     08 8C 06 F1 | 	add	local01, #8
22988     46 93 02 FB | 	rdlong	local04, local01
2298c     80 92 26 F5 | 	andn	local04, #128
22990     46 93 62 FC | 	wrlong	local04, local01
22994     08 8C 86 F1 | 	sub	local01, #8
22998                 | LR__1327
22998                 | LR__1328
22998     14 8C 06 F1 | 	add	local01, #20
2299c     46 93 02 FB | 	rdlong	local04, local01
229a0     14 8C 86 F1 | 	sub	local01, #20
229a4     49 95 02 FB | 	rdlong	local05, local04
229a8     04 92 06 F1 | 	add	local04, #4
229ac     49 99 02 FB | 	rdlong	local07, local04
229b0     0C 8E 06 F1 | 	add	local02, #12
229b4     47 77 02 F6 | 	mov	arg02, local02
229b8     0C 8E 86 F1 | 	sub	local02, #12
229bc     46 75 02 F6 | 	mov	arg01, local01
229c0     48 79 02 F6 | 	mov	arg03, local03
229c4     C9 96 02 F6 | 	mov	local06, objptr
229c8     4A 93 01 F6 | 	mov	objptr, local05
229cc     2D 98 62 FD | 	call	local07
229d0     4B 93 01 F6 | 	mov	objptr, local06
229d4     74 00 90 FD | 	jmp	#LR__1331
229d8                 | LR__1329
229d8     08 8E 06 F1 | 	add	local02, #8
229dc     47 93 02 FB | 	rdlong	local04, local02
229e0     08 8E 86 F1 | 	sub	local02, #8
229e4     01 92 CE F7 | 	test	local04, #1 wz
229e8     60 00 90 AD |  if_e	jmp	#LR__1330
229ec     00 90 0E F2 | 	cmp	local03, #0 wz
229f0     58 00 90 AD |  if_e	jmp	#LR__1330
229f4     2C 8C 06 F1 | 	add	local01, #44
229f8     46 9B 02 FB | 	rdlong	local08, local01
229fc     2C 8C 86 F1 | 	sub	local01, #44
22a00     4D 93 02 F6 | 	mov	local04, local08
22a04     49 95 02 FB | 	rdlong	local05, local04
22a08     04 92 06 F1 | 	add	local04, #4
22a0c     49 9D 02 FB | 	rdlong	local09, local04
22a10     4E 99 02 F6 | 	mov	local07, local09
22a14     46 9F 02 F6 | 	mov	local10, local01
22a18     48 A1 62 F6 | 	neg	local11, local03
22a1c     01 A2 06 F6 | 	mov	local12, #1
22a20     4F 75 02 F6 | 	mov	arg01, local10
22a24     50 77 02 F6 | 	mov	arg02, local11
22a28     01 78 06 F6 | 	mov	arg03, #1
22a2c     C9 96 02 F6 | 	mov	local06, objptr
22a30     4A 93 01 F6 | 	mov	objptr, local05
22a34     2D 98 62 FD | 	call	local07
22a38     4B 93 01 F6 | 	mov	objptr, local06
22a3c     1A 93 02 F6 | 	mov	local04, result1
22a40     49 A5 02 F6 | 	mov	local13, local04
22a44     00 A4 56 F2 | 	cmps	local13, #0 wc
22a48     48 A5 02 36 |  if_ae	mov	local13, local03
22a4c                 | LR__1330
22a4c                 | LR__1331
22a4c     47 01 68 FC | 	wrlong	#0, local02
22a50     04 8E 06 F1 | 	add	local02, #4
22a54     47 01 68 FC | 	wrlong	#0, local02
22a58     04 8E 06 F1 | 	add	local02, #4
22a5c     47 01 68 FC | 	wrlong	#0, local02
22a60                 | '     }
22a60                 | '     b->cnt = 0;
22a60                 | '     b->ptr = 0;
22a60                 | '     b->flags = 0;
22a60                 | '     return 0;
22a60     00 34 06 F6 | 	mov	result1, #0
22a64     A8 F0 03 F6 | 	mov	ptra, fp
22a68     B3 00 A0 FD | 	call	#popregs_
22a6c                 | _fatfs_cc___default_flush_ret
22a6c     2D 00 64 FD | 	ret
22a70                 | 
22a70                 | _fatfs_cc_stat
22a70     07 4C 05 F6 | 	mov	COUNT_, #7
22a74     A9 00 A0 FD | 	call	#pushregs_
22a78     3A 79 02 F6 | 	mov	arg03, arg01
22a7c     3B 8D 02 F6 | 	mov	local01, arg02
22a80     7C A3 05 F1 | 	add	ptr___system__dat__, #380
22a84     D1 8E 02 F6 | 	mov	local02, ptr___system__dat__
22a88     47 75 02 F6 | 	mov	arg01, local02
22a8c     3C 77 02 F6 | 	mov	arg02, arg03
22a90     00 78 06 F6 | 	mov	arg03, #0
22a94     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
22a98     68 2A B0 FD | 	call	#__system____getvfsforfile
22a9c     1A 91 0A F6 | 	mov	local03, result1 wz
22aa0     34 90 06 51 |  if_ne	add	local03, #52
22aa4     48 75 02 5B |  if_ne	rdlong	arg01, local03
22aa8     34 90 86 51 |  if_ne	sub	local03, #52
22aac     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
22ab0                 | ' #line 22 "C:/flexprop/include/libc/unix/stat.c"
22ab0                 | '         return _seterror( 16 );
22ab0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22ab4     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
22ab8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22abc     01 34 66 A6 |  if_e	neg	result1, #1
22ac0     5C 00 90 AD |  if_e	jmp	#LR__1332
22ac4     46 75 02 F6 | 	mov	arg01, local01
22ac8     00 76 06 F6 | 	mov	arg02, #0
22acc     30 78 06 F6 | 	mov	arg03, #48
22ad0     3A 93 02 F6 | 	mov	local04, arg01
22ad4     99 00 A0 FD | 	call	#\builtin_bytefill_
22ad8     49 35 02 F6 | 	mov	result1, local04
22adc     47 77 CA FA | 	rdbyte	arg02, local02 wz
22ae0     08 8C 06 A1 |  if_e	add	local01, #8
22ae4     08 00 80 AF 
22ae8     46 FF 6B AC |  if_e	wrlong	##4607, local01
22aec                 | ' #line 29 "C:/flexprop/include/libc/unix/stat.c"
22aec                 | '         buf->st_mode =  0010000  | 0777;
22aec                 | '         return 0;
22aec     00 34 06 A6 |  if_e	mov	result1, #0
22af0     2C 00 90 AD |  if_e	jmp	#LR__1332
22af4     34 90 06 F1 | 	add	local03, #52
22af8     48 77 02 FB | 	rdlong	arg02, local03
22afc     3B 95 02 FB | 	rdlong	local05, arg02
22b00     04 76 06 F1 | 	add	arg02, #4
22b04     3B 97 02 FB | 	rdlong	local06, arg02
22b08     47 75 02 F6 | 	mov	arg01, local02
22b0c     46 77 02 F6 | 	mov	arg02, local01
22b10     C9 98 02 F6 | 	mov	local07, objptr
22b14     4A 93 01 F6 | 	mov	objptr, local05
22b18     2D 96 62 FD | 	call	local06
22b1c     4C 93 01 F6 | 	mov	objptr, local07
22b20                 | '     }
22b20                 | ' #line 39 "C:/flexprop/include/libc/unix/stat.c"
22b20                 | '     r = v->stat(name, buf);
22b20                 | ' #line 43 "C:/flexprop/include/libc/unix/stat.c"
22b20                 | '     return r;
22b20                 | LR__1332
22b20     A8 F0 03 F6 | 	mov	ptra, fp
22b24     B3 00 A0 FD | 	call	#popregs_
22b28                 | _fatfs_cc_stat_ret
22b28     2D 00 64 FD | 	ret
22b2c                 | 
22b2c                 | _fatfs_cc_open
22b2c     05 4C 05 F6 | 	mov	COUNT_, #5
22b30     A9 00 A0 FD | 	call	#pushregs_
22b34     3A 8D 02 F6 | 	mov	local01, arg01
22b38     3B 8F 02 F6 | 	mov	local02, arg02
22b3c     3C 91 02 F6 | 	mov	local03, arg03
22b40     01 00 00 FF 
22b44     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
22b48     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
22b4c                 | ' 
22b4c                 | '     for (fd = 0; fd <  10 ; fd++) {
22b4c     00 94 06 F6 | 	mov	local05, #0
22b50     01 00 00 FF 
22b54     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
22b58     D0 D4 9D FE | 	loc	pa,	#(@LR__1334-@LR__1333)
22b5c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
22b60                 | LR__1333
22b60     0A 94 56 F2 | 	cmps	local05, #10 wc
22b64     24 00 90 3D |  if_ae	jmp	#LR__1335
22b68     4A 35 02 F6 | 	mov	result1, local05
22b6c     01 34 66 F0 | 	shl	result1, #1
22b70     4A 35 02 F1 | 	add	result1, local05
22b74     04 34 66 F0 | 	shl	result1, #4
22b78     49 35 02 F1 | 	add	result1, local04
22b7c     08 34 06 F1 | 	add	result1, #8
22b80     1A 35 0A FB | 	rdlong	result1, result1 wz
22b84     01 94 06 51 |  if_ne	add	local05, #1
22b88     D4 FF 9F 5D |  if_ne	jmp	#LR__1333
22b8c                 | LR__1334
22b8c                 | LR__1335
22b8c     0A 94 0E F2 | 	cmp	local05, #10 wz
22b90                 | '         return _seterror( 11 );
22b90     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22b94     D1 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
22b98     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22b9c     01 34 66 A6 |  if_e	neg	result1, #1
22ba0     2C 00 90 AD |  if_e	jmp	#LR__1336
22ba4     4A 75 02 F6 | 	mov	arg01, local05
22ba8     01 74 66 F0 | 	shl	arg01, #1
22bac     4A 75 02 F1 | 	add	arg01, local05
22bb0     04 74 66 F0 | 	shl	arg01, #4
22bb4     49 75 02 F1 | 	add	arg01, local04
22bb8     46 77 02 F6 | 	mov	arg02, local01
22bbc     47 79 02 F6 | 	mov	arg03, local02
22bc0     48 7B 02 F6 | 	mov	arg04, local03
22bc4     A8 F5 BF FD | 	call	#_fatfs_cc__openraw
22bc8     00 34 4E F2 | 	cmps	result1, #0 wz
22bcc     4A 35 02 A6 |  if_e	mov	result1, local05
22bd0                 | '         r = fd;
22bd0                 | '     }
22bd0                 | '     return r;
22bd0                 | LR__1336
22bd0     A8 F0 03 F6 | 	mov	ptra, fp
22bd4     B3 00 A0 FD | 	call	#popregs_
22bd8                 | _fatfs_cc_open_ret
22bd8     2D 00 64 FD | 	ret
22bdc                 | 
22bdc                 | _fatfs_cc_write
22bdc     01 4C 05 F6 | 	mov	COUNT_, #1
22be0     A9 00 A0 FD | 	call	#pushregs_
22be4     3A 8D 02 F6 | 	mov	local01, arg01
22be8     0A 8C 16 F2 | 	cmp	local01, #10 wc
22bec                 | '         return _seterror( 5 );
22bec     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22bf0     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22bf4     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22bf8     01 34 66 36 |  if_ae	neg	result1, #1
22bfc     28 00 90 3D |  if_ae	jmp	#LR__1337
22c00     46 75 02 F6 | 	mov	arg01, local01
22c04     01 74 66 F0 | 	shl	arg01, #1
22c08     46 75 02 F1 | 	add	arg01, local01
22c0c     04 74 66 F0 | 	shl	arg01, #4
22c10     01 00 00 FF 
22c14     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
22c18     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22c1c                 | '     }
22c1c                 | '     f = &__filetab[fd];
22c1c                 | '     return _vfswrite(f, vbuf, count);
22c1c     01 00 00 FF 
22c20     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
22c24     40 1D B0 FD | 	call	#_fatfs_cc__vfswrite
22c28                 | LR__1337
22c28     A8 F0 03 F6 | 	mov	ptra, fp
22c2c     B3 00 A0 FD | 	call	#popregs_
22c30                 | _fatfs_cc_write_ret
22c30     2D 00 64 FD | 	ret
22c34                 | 
22c34                 | _fatfs_cc_read
22c34     01 4C 05 F6 | 	mov	COUNT_, #1
22c38     A9 00 A0 FD | 	call	#pushregs_
22c3c     3A 8D 02 F6 | 	mov	local01, arg01
22c40     0A 8C 16 F2 | 	cmp	local01, #10 wc
22c44                 | '         return _seterror( 5 );
22c44     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22c48     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22c4c     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22c50     01 34 66 36 |  if_ae	neg	result1, #1
22c54     28 00 90 3D |  if_ae	jmp	#LR__1338
22c58     46 75 02 F6 | 	mov	arg01, local01
22c5c     01 74 66 F0 | 	shl	arg01, #1
22c60     46 75 02 F1 | 	add	arg01, local01
22c64     04 74 66 F0 | 	shl	arg01, #4
22c68     01 00 00 FF 
22c6c     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
22c70     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22c74                 | '     }
22c74                 | '     f = &__filetab[fd];
22c74                 | '     return _vfsread(f, vbuf, count);
22c74     01 00 00 FF 
22c78     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
22c7c     8C 1E B0 FD | 	call	#_fatfs_cc__vfsread
22c80                 | LR__1338
22c80     A8 F0 03 F6 | 	mov	ptra, fp
22c84     B3 00 A0 FD | 	call	#popregs_
22c88                 | _fatfs_cc_read_ret
22c88     2D 00 64 FD | 	ret
22c8c                 | 
22c8c                 | _fatfs_cc_close
22c8c     01 4C 05 F6 | 	mov	COUNT_, #1
22c90     A9 00 A0 FD | 	call	#pushregs_
22c94     3A 8D 02 F6 | 	mov	local01, arg01
22c98     0A 8C 16 F2 | 	cmp	local01, #10 wc
22c9c                 | '         return _seterror( 5 );
22c9c     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22ca0     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22ca4     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22ca8     01 34 66 36 |  if_ae	neg	result1, #1
22cac     28 00 90 3D |  if_ae	jmp	#LR__1339
22cb0     46 75 02 F6 | 	mov	arg01, local01
22cb4     01 74 66 F0 | 	shl	arg01, #1
22cb8     46 75 02 F1 | 	add	arg01, local01
22cbc     04 74 66 F0 | 	shl	arg01, #4
22cc0     01 00 00 FF 
22cc4     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
22cc8     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22ccc                 | '     }
22ccc                 | '     f = &__filetab[fd];
22ccc                 | '     return _closeraw(f);
22ccc     01 00 00 FF 
22cd0     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
22cd4     C4 F9 BF FD | 	call	#_fatfs_cc__closeraw
22cd8                 | LR__1339
22cd8     A8 F0 03 F6 | 	mov	ptra, fp
22cdc     B3 00 A0 FD | 	call	#popregs_
22ce0                 | _fatfs_cc_close_ret
22ce0     2D 00 64 FD | 	ret
22ce4                 | 
22ce4                 | _fatfs_cc_lseek
22ce4     06 4C 05 F6 | 	mov	COUNT_, #6
22ce8     A9 00 A0 FD | 	call	#pushregs_
22cec     0A 74 16 F2 | 	cmp	arg01, #10 wc
22cf0                 | '         return _seterror( 5 );
22cf0     18 A2 05 31 |  if_ae	add	ptr___system__dat__, #24
22cf4     D1 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
22cf8     18 A2 85 31 |  if_ae	sub	ptr___system__dat__, #24
22cfc     01 34 66 36 |  if_ae	neg	result1, #1
22d00     C0 00 90 3D |  if_ae	jmp	#LR__1341
22d04     3A 8D 02 F6 | 	mov	local01, arg01
22d08     01 8C 66 F0 | 	shl	local01, #1
22d0c     3A 8D 02 F1 | 	add	local01, arg01
22d10     04 8C 66 F0 | 	shl	local01, #4
22d14     01 00 00 FF 
22d18     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
22d1c     F0 8C 02 F1 | 	add	local01, ptr__fatfs_cc_dat__
22d20     2C 8C 06 F1 | 	add	local01, #44
22d24     46 75 0A FB | 	rdlong	arg01, local01 wz
22d28     2C 8C 86 F1 | 	sub	local01, #44
22d2c     01 00 00 FF 
22d30     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
22d34                 | '         return _seterror( 16 );
22d34     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22d38     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
22d3c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22d40     01 34 66 A6 |  if_e	neg	result1, #1
22d44     7C 00 90 AD |  if_e	jmp	#LR__1341
22d48     08 8C 06 F1 | 	add	local01, #8
22d4c     46 8F 02 FB | 	rdlong	local02, local01
22d50     08 8C 86 F1 | 	sub	local01, #8
22d54     40 8E CE F7 | 	test	local02, #64 wz
22d58     08 8C 06 51 |  if_ne	add	local01, #8
22d5c     46 8F 02 5B |  if_ne	rdlong	local02, local01
22d60     80 8E 46 55 |  if_ne	or	local02, #128
22d64     46 8F 62 5C |  if_ne	wrlong	local02, local01
22d68     08 8C 86 51 |  if_ne	sub	local01, #8
22d6c     2C 8C 06 F1 | 	add	local01, #44
22d70     46 8F 02 FB | 	rdlong	local02, local01
22d74     2C 8C 86 F1 | 	sub	local01, #44
22d78     47 91 02 FB | 	rdlong	local03, local02
22d7c     04 8E 06 F1 | 	add	local02, #4
22d80     47 93 02 FB | 	rdlong	local04, local02
22d84     46 75 02 F6 | 	mov	arg01, local01
22d88     C9 94 02 F6 | 	mov	local05, objptr
22d8c     48 93 01 F6 | 	mov	objptr, local03
22d90     2D 92 62 FD | 	call	local04
22d94     4A 93 01 F6 | 	mov	objptr, local05
22d98     1A 97 02 F6 | 	mov	local06, result1
22d9c     00 96 56 F2 | 	cmps	local06, #0 wc
22da0     1C 00 90 3D |  if_ae	jmp	#LR__1340
22da4                 | '         return _seterror(-r);
22da4     4B 75 6A F6 | 	neg	arg01, local06 wz
22da8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22dac     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
22db0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22db4     01 34 66 56 |  if_ne	neg	result1, #1
22db8     00 34 06 A6 |  if_e	mov	result1, #0
22dbc     04 00 90 FD | 	jmp	#LR__1341
22dc0                 | LR__1340
22dc0                 | '     }
22dc0                 | '     return r;
22dc0     4B 35 02 F6 | 	mov	result1, local06
22dc4                 | LR__1341
22dc4     A8 F0 03 F6 | 	mov	ptra, fp
22dc8     B3 00 A0 FD | 	call	#popregs_
22dcc                 | _fatfs_cc_lseek_ret
22dcc     2D 00 64 FD | 	ret
22dd0                 | 
22dd0                 | _fatfs_cc_ioctl
22dd0     04 4C 05 F6 | 	mov	COUNT_, #4
22dd4     A9 00 A0 FD | 	call	#pushregs_
22dd8     F0 15 B0 FD | 	call	#_fatfs_cc___getftab
22ddc     1A 8D 0A F6 | 	mov	local01, result1 wz
22de0                 | '         return _seterror( 5 );
22de0     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22de4     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22de8     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22dec     01 34 66 A6 |  if_e	neg	result1, #1
22df0     54 00 90 AD |  if_e	jmp	#LR__1343
22df4     24 8C 06 F1 | 	add	local01, #36
22df8     46 75 02 FB | 	rdlong	arg01, local01
22dfc     24 8C 86 F1 | 	sub	local01, #36
22e00     3A 8F 02 FB | 	rdlong	local02, arg01
22e04     04 74 06 F1 | 	add	arg01, #4
22e08     3A 91 02 FB | 	rdlong	local03, arg01
22e0c     46 75 02 F6 | 	mov	arg01, local01
22e10     C9 92 02 F6 | 	mov	local04, objptr
22e14     47 93 01 F6 | 	mov	objptr, local02
22e18     2D 90 62 FD | 	call	local03
22e1c     49 93 01 F6 | 	mov	objptr, local04
22e20     1A 75 0A F6 | 	mov	arg01, result1 wz
22e24     1C 00 90 AD |  if_e	jmp	#LR__1342
22e28                 | '         return _seterror(r);
22e28     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22e2c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
22e30     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22e34     00 74 0E F2 | 	cmp	arg01, #0 wz
22e38     01 34 66 56 |  if_ne	neg	result1, #1
22e3c     00 34 06 A6 |  if_e	mov	result1, #0
22e40     04 00 90 FD | 	jmp	#LR__1343
22e44                 | LR__1342
22e44                 | '     }
22e44                 | '     return 0;
22e44     00 34 06 F6 | 	mov	result1, #0
22e48                 | LR__1343
22e48     A8 F0 03 F6 | 	mov	ptra, fp
22e4c     B3 00 A0 FD | 	call	#popregs_
22e50                 | _fatfs_cc_ioctl_ret
22e50     2D 00 64 FD | 	ret
22e54                 | 
22e54                 | _fatfs_cc_rmdir
22e54     06 4C 05 F6 | 	mov	COUNT_, #6
22e58     A9 00 A0 FD | 	call	#pushregs_
22e5c     3A 77 02 F6 | 	mov	arg02, arg01
22e60     7C A3 05 F1 | 	add	ptr___system__dat__, #380
22e64     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
22e68     46 75 02 F6 | 	mov	arg01, local01
22e6c     00 78 06 F6 | 	mov	arg03, #0
22e70     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
22e74     8C 26 B0 FD | 	call	#__system____getvfsforfile
22e78     1A 8F 0A F6 | 	mov	local02, result1 wz
22e7c     3C 8E 06 51 |  if_ne	add	local02, #60
22e80     47 75 02 5B |  if_ne	rdlong	arg01, local02
22e84     3C 8E 86 51 |  if_ne	sub	local02, #60
22e88     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
22e8c                 | ' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
22e8c                 | '         return _seterror( 16 );
22e8c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22e90     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
22e94     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22e98     01 34 66 A6 |  if_e	neg	result1, #1
22e9c     50 00 90 AD |  if_e	jmp	#LR__1345
22ea0     3C 8E 06 F1 | 	add	local02, #60
22ea4     47 75 02 FB | 	rdlong	arg01, local02
22ea8     3A 91 02 FB | 	rdlong	local03, arg01
22eac     04 74 06 F1 | 	add	arg01, #4
22eb0     3A 93 02 FB | 	rdlong	local04, arg01
22eb4     46 75 02 F6 | 	mov	arg01, local01
22eb8     C9 94 02 F6 | 	mov	local05, objptr
22ebc     48 93 01 F6 | 	mov	objptr, local03
22ec0     2D 92 62 FD | 	call	local04
22ec4     4A 93 01 F6 | 	mov	objptr, local05
22ec8     1A 97 0A F6 | 	mov	local06, result1 wz
22ecc     1C 00 90 AD |  if_e	jmp	#LR__1344
22ed0                 | '         return _seterror(-r);
22ed0     4B 75 6A F6 | 	neg	arg01, local06 wz
22ed4     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22ed8     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
22edc     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22ee0     01 34 66 56 |  if_ne	neg	result1, #1
22ee4     00 34 06 A6 |  if_e	mov	result1, #0
22ee8     04 00 90 FD | 	jmp	#LR__1345
22eec                 | LR__1344
22eec                 | '     }
22eec                 | '     return r;
22eec     4B 35 02 F6 | 	mov	result1, local06
22ef0                 | LR__1345
22ef0     A8 F0 03 F6 | 	mov	ptra, fp
22ef4     B3 00 A0 FD | 	call	#popregs_
22ef8                 | _fatfs_cc_rmdir_ret
22ef8     2D 00 64 FD | 	ret
22efc                 | 
22efc                 | _fatfs_cc_mkdir
22efc     07 4C 05 F6 | 	mov	COUNT_, #7
22f00     A9 00 A0 FD | 	call	#pushregs_
22f04     3A 79 02 F6 | 	mov	arg03, arg01
22f08     3B 8D 02 F6 | 	mov	local01, arg02
22f0c     7C A3 05 F1 | 	add	ptr___system__dat__, #380
22f10     D1 8E 02 F6 | 	mov	local02, ptr___system__dat__
22f14     47 75 02 F6 | 	mov	arg01, local02
22f18     3C 77 02 F6 | 	mov	arg02, arg03
22f1c     00 78 06 F6 | 	mov	arg03, #0
22f20     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
22f24     DC 25 B0 FD | 	call	#__system____getvfsforfile
22f28     1A 91 0A F6 | 	mov	local03, result1 wz
22f2c     20 90 06 51 |  if_ne	add	local03, #32
22f30     48 75 02 5B |  if_ne	rdlong	arg01, local03
22f34     20 90 86 51 |  if_ne	sub	local03, #32
22f38     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
22f3c                 | ' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
22f3c                 | '         return _seterror( 16 );
22f3c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
22f40     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
22f44     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
22f48     01 34 66 A6 |  if_e	neg	result1, #1
22f4c     54 00 90 AD |  if_e	jmp	#LR__1347
22f50     38 90 06 F1 | 	add	local03, #56
22f54     48 77 02 FB | 	rdlong	arg02, local03
22f58     3B 93 02 FB | 	rdlong	local04, arg02
22f5c     04 76 06 F1 | 	add	arg02, #4
22f60     3B 95 02 FB | 	rdlong	local05, arg02
22f64     47 75 02 F6 | 	mov	arg01, local02
22f68     46 77 02 F6 | 	mov	arg02, local01
22f6c     C9 96 02 F6 | 	mov	local06, objptr
22f70     49 93 01 F6 | 	mov	objptr, local04
22f74     2D 94 62 FD | 	call	local05
22f78     4B 93 01 F6 | 	mov	objptr, local06
22f7c     1A 99 0A F6 | 	mov	local07, result1 wz
22f80     1C 00 90 AD |  if_e	jmp	#LR__1346
22f84                 | '         return _seterror(-r);
22f84     4C 75 6A F6 | 	neg	arg01, local07 wz
22f88     18 A2 05 F1 | 	add	ptr___system__dat__, #24
22f8c     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
22f90     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
22f94     01 34 66 56 |  if_ne	neg	result1, #1
22f98     00 34 06 A6 |  if_e	mov	result1, #0
22f9c     04 00 90 FD | 	jmp	#LR__1347
22fa0                 | LR__1346
22fa0                 | '     }
22fa0                 | '     return r;
22fa0     4C 35 02 F6 | 	mov	result1, local07
22fa4                 | LR__1347
22fa4     A8 F0 03 F6 | 	mov	ptra, fp
22fa8     B3 00 A0 FD | 	call	#popregs_
22fac                 | _fatfs_cc_mkdir_ret
22fac     2D 00 64 FD | 	ret
22fb0                 | 
22fb0                 | _fatfs_cc_getenv
22fb0     05 4C 05 F6 | 	mov	COUNT_, #5
22fb4     A9 00 A0 FD | 	call	#pushregs_
22fb8     3A 8D 02 F6 | 	mov	local01, arg01
22fbc     00 8E 06 F6 | 	mov	local02, #0
22fc0     4C D0 9D FE | 	loc	pa,	#(@LR__1349-@LR__1348)
22fc4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
22fc8                 | LR__1348
22fc8     3A 35 CA FA | 	rdbyte	result1, arg01 wz
22fcc     01 8E 06 51 |  if_ne	add	local02, #1
22fd0     01 74 06 51 |  if_ne	add	arg01, #1
22fd4     F0 FF 9F 5D |  if_ne	jmp	#LR__1348
22fd8                 | LR__1349
22fd8     47 35 02 F6 | 	mov	result1, local02
22fdc     1A 91 02 F6 | 	mov	local03, result1
22fe0     02 00 00 FF 
22fe4     58 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1112
22fe8     F0 78 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
22fec     02 00 00 FF 
22ff0     58 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1112
22ff4                 | '             return 0;
22ff4     00 34 06 A6 |  if_e	mov	result1, #0
22ff8     60 00 90 AD |  if_e	jmp	#LR__1353
22ffc                 | ' 
22ffc                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
22ffc     02 00 00 FF 
23000     58 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1112
23004     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23008     02 00 00 FF 
2300c     58 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1112
23010                 | LR__1350
23010     49 95 0A FB | 	rdlong	local05, local04 wz
23014     40 00 90 AD |  if_e	jmp	#LR__1352
23018     4A 75 02 F6 | 	mov	arg01, local05
2301c     46 77 02 F6 | 	mov	arg02, local01
23020     48 79 02 F6 | 	mov	arg03, local03
23024     9C 8F BF FD | 	call	#_fatfs_cc_strncmp
23028     00 34 0E F2 | 	cmp	result1, #0 wz
2302c     20 00 90 5D |  if_ne	jmp	#LR__1351
23030     48 79 02 F6 | 	mov	arg03, local03
23034     4A 79 02 F1 | 	add	arg03, local05
23038     3C 79 C2 FA | 	rdbyte	arg03, arg03
2303c     3D 78 0E F2 | 	cmp	arg03, #61 wz
23040                 | ' 			return name+len+1;
23040     4A 35 02 A6 |  if_e	mov	result1, local05
23044     48 35 02 A1 |  if_e	add	result1, local03
23048     01 34 06 A1 |  if_e	add	result1, #1
2304c     0C 00 90 AD |  if_e	jmp	#LR__1353
23050                 | LR__1351
23050     04 92 06 F1 | 	add	local04, #4
23054     B8 FF 9F FD | 	jmp	#LR__1350
23058                 | LR__1352
23058                 | ' 	}
23058                 | ' 	return 0;
23058     00 34 06 F6 | 	mov	result1, #0
2305c                 | LR__1353
2305c     A8 F0 03 F6 | 	mov	ptra, fp
23060     B3 00 A0 FD | 	call	#popregs_
23064                 | _fatfs_cc_getenv_ret
23064     2D 00 64 FD | 	ret
23068                 | 
23068                 | _fatfs_cc__get_fattime
23068     00 4C 05 F6 | 	mov	COUNT_, #0
2306c     A9 00 A0 FD | 	call	#pushregs_
23070     34 F0 07 F1 | 	add	ptra, #52
23074     00 74 06 F6 | 	mov	arg01, #0
23078     64 EB BF FD | 	call	#_fatfs_cc_time
2307c     04 50 05 F1 | 	add	fp, #4
23080     A8 34 62 FC | 	wrlong	result1, fp
23084     A8 74 02 F6 | 	mov	arg01, fp
23088     0C 50 05 F1 | 	add	fp, #12
2308c     A8 76 02 F6 | 	mov	arg02, fp
23090     10 50 85 F1 | 	sub	fp, #16
23094     60 ED BF FD | 	call	#_fatfs_cc__gmtime_r
23098     24 50 05 F1 | 	add	fp, #36
2309c     A8 76 02 FB | 	rdlong	arg02, fp
230a0     50 76 86 F1 | 	sub	arg02, #80
230a4     09 76 66 F0 | 	shl	arg02, #9
230a8     04 50 85 F1 | 	sub	fp, #4
230ac     A8 34 02 FB | 	rdlong	result1, fp
230b0     01 34 06 F1 | 	add	result1, #1
230b4     05 34 66 F0 | 	shl	result1, #5
230b8     1A 77 42 F5 | 	or	arg02, result1
230bc     04 50 85 F1 | 	sub	fp, #4
230c0     A8 34 02 FB | 	rdlong	result1, fp
230c4     1A 77 42 F5 | 	or	arg02, result1
230c8     14 50 85 F1 | 	sub	fp, #20
230cc     A8 76 62 FC | 	wrlong	arg02, fp
230d0     10 50 05 F1 | 	add	fp, #16
230d4     A8 76 02 FB | 	rdlong	arg02, fp
230d8     0B 76 66 F0 | 	shl	arg02, #11
230dc     04 50 85 F1 | 	sub	fp, #4
230e0     A8 34 02 FB | 	rdlong	result1, fp
230e4     05 34 66 F0 | 	shl	result1, #5
230e8     1A 77 42 F5 | 	or	arg02, result1
230ec     04 50 85 F1 | 	sub	fp, #4
230f0     A8 34 02 FB | 	rdlong	result1, fp
230f4     1A 77 42 F5 | 	or	arg02, result1
230f8     04 50 85 F1 | 	sub	fp, #4
230fc     A8 76 62 FC | 	wrlong	arg02, fp
23100                 | ' 
23100                 | '     now = time(0);
23100                 | '     _gmtime_r (&now, &date);
23100                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
23100                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
23100                 | '     return (ffdate << 16) | fftime;
23100     04 50 85 F1 | 	sub	fp, #4
23104     A8 34 02 FB | 	rdlong	result1, fp
23108     10 34 66 F0 | 	shl	result1, #16
2310c     08 50 85 F1 | 	sub	fp, #8
23110     3B 35 42 F5 | 	or	result1, arg02
23114     A8 F0 03 F6 | 	mov	ptra, fp
23118     B3 00 A0 FD | 	call	#popregs_
2311c                 | _fatfs_cc__get_fattime_ret
2311c     2D 00 64 FD | 	ret
23120                 | 
23120                 | _fatfs_cc_unixtime_0220
23120     00 4C 05 F6 | 	mov	COUNT_, #0
23124     A9 00 A0 FD | 	call	#pushregs_
23128     34 F0 07 F1 | 	add	ptra, #52
2312c     04 50 05 F1 | 	add	fp, #4
23130     A8 74 62 FC | 	wrlong	arg01, fp
23134     04 50 05 F1 | 	add	fp, #4
23138     A8 76 62 FC | 	wrlong	arg02, fp
2313c     04 50 85 F1 | 	sub	fp, #4
23140     A8 74 02 FB | 	rdlong	arg01, fp
23144     09 74 46 F0 | 	shr	arg01, #9
23148     7F 74 06 F5 | 	and	arg01, #127
2314c     50 34 06 F6 | 	mov	result1, #80
23150     3A 35 02 F1 | 	add	result1, arg01
23154     20 50 05 F1 | 	add	fp, #32
23158     A8 34 62 FC | 	wrlong	result1, fp
2315c     20 50 85 F1 | 	sub	fp, #32
23160     A8 34 02 FB | 	rdlong	result1, fp
23164     05 34 46 F0 | 	shr	result1, #5
23168     1A 35 42 F8 | 	getnib	result1, result1, #0
2316c     01 34 86 F1 | 	sub	result1, #1
23170     1C 50 05 F1 | 	add	fp, #28
23174     A8 34 62 FC | 	wrlong	result1, fp
23178     1C 50 85 F1 | 	sub	fp, #28
2317c     A8 34 02 FB | 	rdlong	result1, fp
23180     1F 34 06 F5 | 	and	result1, #31
23184     18 50 05 F1 | 	add	fp, #24
23188     A8 34 62 FC | 	wrlong	result1, fp
2318c     14 50 85 F1 | 	sub	fp, #20
23190     A8 34 02 FB | 	rdlong	result1, fp
23194     0B 34 46 F0 | 	shr	result1, #11
23198     1F 34 06 F5 | 	and	result1, #31
2319c     10 50 05 F1 | 	add	fp, #16
231a0     A8 34 62 FC | 	wrlong	result1, fp
231a4     10 50 85 F1 | 	sub	fp, #16
231a8     A8 34 02 FB | 	rdlong	result1, fp
231ac     05 34 46 F0 | 	shr	result1, #5
231b0     3F 34 06 F5 | 	and	result1, #63
231b4     0C 50 05 F1 | 	add	fp, #12
231b8     A8 34 62 FC | 	wrlong	result1, fp
231bc     0C 50 85 F1 | 	sub	fp, #12
231c0     A8 74 02 FB | 	rdlong	arg01, fp
231c4     1F 74 06 F5 | 	and	arg01, #31
231c8     01 74 66 F0 | 	shl	arg01, #1
231cc     08 50 05 F1 | 	add	fp, #8
231d0     A8 74 62 FC | 	wrlong	arg01, fp
231d4     A8 74 02 F6 | 	mov	arg01, fp
231d8     10 50 85 F1 | 	sub	fp, #16
231dc     78 EA BF FD | 	call	#_fatfs_cc_mktime
231e0     0C 50 05 F1 | 	add	fp, #12
231e4     A8 34 62 FC | 	wrlong	result1, fp
231e8                 | ' 
231e8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
231e8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
231e8                 | '     date.tm_mday = (dosdate & 0x1f);
231e8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
231e8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
231e8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
231e8                 | ' 
231e8                 | '     t = mktime(&date);
231e8                 | ' #line 58 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
231e8                 | '     return t;
231e8     0C 50 85 F1 | 	sub	fp, #12
231ec     A8 F0 03 F6 | 	mov	ptra, fp
231f0     B3 00 A0 FD | 	call	#popregs_
231f4                 | _fatfs_cc_unixtime_0220_ret
231f4     2D 00 64 FD | 	ret
231f8                 | 
231f8                 | _fatfs_cc__set_dos_error_0222
231f8     03 4C 05 F6 | 	mov	COUNT_, #3
231fc     A9 00 A0 FD | 	call	#pushregs_
23200     3A 8D 02 F6 | 	mov	local01, arg01
23204                 | ' #line 72 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23204                 | '     switch (derr) {
23204     46 8F 02 F6 | 	mov	local02, local01
23208     14 8E 26 F3 | 	fle	local02, #20
2320c     30 8E 62 FD | 	jmprel	local02
23210                 | LR__1354
23210     50 00 90 FD | 	jmp	#LR__1355
23214     84 00 90 FD | 	jmp	#LR__1369
23218     80 00 90 FD | 	jmp	#LR__1370
2321c     7C 00 90 FD | 	jmp	#LR__1371
23220     48 00 90 FD | 	jmp	#LR__1356
23224     44 00 90 FD | 	jmp	#LR__1357
23228     40 00 90 FD | 	jmp	#LR__1358
2322c     44 00 90 FD | 	jmp	#LR__1359
23230     48 00 90 FD | 	jmp	#LR__1361
23234     54 00 90 FD | 	jmp	#LR__1364
23238     38 00 90 FD | 	jmp	#LR__1360
2323c     4C 00 90 FD | 	jmp	#LR__1365
23240     48 00 90 FD | 	jmp	#LR__1366
23244     44 00 90 FD | 	jmp	#LR__1367
23248     50 00 90 FD | 	jmp	#LR__1372
2324c     4C 00 90 FD | 	jmp	#LR__1372
23250     48 00 90 FD | 	jmp	#LR__1372
23254     2C 00 90 FD | 	jmp	#LR__1362
23258     38 00 90 FD | 	jmp	#LR__1368
2325c     2C 00 90 FD | 	jmp	#LR__1363
23260     38 00 90 FD | 	jmp	#LR__1372
23264                 | LR__1355
23264     00 90 06 F6 | 	mov	local03, #0
23268                 | '         r = 0;
23268                 | '         break;
23268     34 00 90 FD | 	jmp	#LR__1373
2326c                 | LR__1356
2326c                 | LR__1357
2326c                 | LR__1358
2326c     04 90 06 F6 | 	mov	local03, #4
23270                 | '         r =  4 ;
23270                 | '         break;
23270     2C 00 90 FD | 	jmp	#LR__1373
23274                 | LR__1359
23274                 | LR__1360
23274     06 90 06 F6 | 	mov	local03, #6
23278                 | '         r =  6 ;
23278                 | '         break;
23278     24 00 90 FD | 	jmp	#LR__1373
2327c                 | LR__1361
2327c     09 90 06 F6 | 	mov	local03, #9
23280                 | '         r =  9 ;
23280                 | '         break;
23280     1C 00 90 FD | 	jmp	#LR__1373
23284                 | LR__1362
23284     07 90 06 F6 | 	mov	local03, #7
23288                 | '         r =  7 ;
23288                 | '         break;
23288     14 00 90 FD | 	jmp	#LR__1373
2328c                 | LR__1363
2328c                 | LR__1364
2328c                 | LR__1365
2328c                 | LR__1366
2328c                 | LR__1367
2328c     0A 90 06 F6 | 	mov	local03, #10
23290                 | '         r =  10 ;
23290                 | '         break;
23290     0C 00 90 FD | 	jmp	#LR__1373
23294                 | LR__1368
23294     0B 90 06 F6 | 	mov	local03, #11
23298                 | '         r =  11 ;
23298                 | '         break;
23298     04 00 90 FD | 	jmp	#LR__1373
2329c                 | LR__1369
2329c                 | LR__1370
2329c                 | LR__1371
2329c                 | LR__1372
2329c     0C 90 06 F6 | 	mov	local03, #12
232a0                 | '         r =  12 ;
232a0                 | '         break;
232a0                 | LR__1373
232a0                 | '     }
232a0                 | '     return _seterror(r);
232a0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
232a4     D1 90 62 FC | 	wrlong	local03, ptr___system__dat__
232a8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
232ac     00 90 0E F2 | 	cmp	local03, #0 wz
232b0     01 34 66 56 |  if_ne	neg	result1, #1
232b4     00 34 06 A6 |  if_e	mov	result1, #0
232b8     A8 F0 03 F6 | 	mov	ptra, fp
232bc     B3 00 A0 FD | 	call	#popregs_
232c0                 | _fatfs_cc__set_dos_error_0222_ret
232c0     2D 00 64 FD | 	ret
232c4                 | 
232c4                 | _fatfs_cc_v_creat
232c4     04 4C 05 F6 | 	mov	COUNT_, #4
232c8     A9 00 A0 FD | 	call	#pushregs_
232cc     3A 8D 02 F6 | 	mov	local01, arg01
232d0     3B 8F 02 F6 | 	mov	local02, arg02
232d4     03 00 00 FF 
232d8     34 74 06 F6 | 	mov	arg01, ##1588
232dc                 | '     return _gc_alloc(size);
232dc     10 76 06 F6 | 	mov	arg02, #16
232e0     E0 4B B0 FD | 	call	#__system___gc_doalloc
232e4     1A 91 0A F6 | 	mov	local03, result1 wz
232e8                 | '       return _seterror( 7 );
232e8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
232ec     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
232f0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
232f4     01 34 66 A6 |  if_e	neg	result1, #1
232f8     58 00 90 AD |  if_e	jmp	#LR__1375
232fc     48 75 02 F6 | 	mov	arg01, local03
23300     00 76 06 F6 | 	mov	arg02, #0
23304     03 00 00 FF 
23308     34 78 06 F6 | 	mov	arg03, ##1588
2330c     99 00 A0 FD | 	call	#\builtin_bytefill_
23310     02 00 00 FF 
23314     0C 90 06 F1 | 	add	local03, ##1036
23318     48 75 02 F6 | 	mov	arg01, local03
2331c     02 00 00 FF 
23320     0C 90 86 F1 | 	sub	local03, ##1036
23324     47 77 02 F6 | 	mov	arg02, local02
23328     07 78 06 F6 | 	mov	arg03, #7
2332c     40 BB BF FD | 	call	#_fatfs_cc_f_open
23330     1A 93 0A F6 | 	mov	local04, result1 wz
23334     14 00 90 AD |  if_e	jmp	#LR__1374
23338     48 75 02 F6 | 	mov	arg01, local03
2333c                 | '     return _gc_free(ptr);
2333c     B4 4C B0 FD | 	call	#__system___gc_free
23340                 | '     free(f);
23340                 | '     return _set_dos_error(r);
23340     49 75 02 F6 | 	mov	arg01, local04
23344     B0 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23348     08 00 90 FD | 	jmp	#LR__1375
2334c                 | LR__1374
2334c     46 91 62 FC | 	wrlong	local03, local01
23350                 | '   }
23350                 | '   fil->vfsdata = f;
23350                 | '   return 0;
23350     00 34 06 F6 | 	mov	result1, #0
23354                 | LR__1375
23354     A8 F0 03 F6 | 	mov	ptra, fp
23358     B3 00 A0 FD | 	call	#popregs_
2335c                 | _fatfs_cc_v_creat_ret
2335c     2D 00 64 FD | 	ret
23360                 | 
23360                 | _fatfs_cc_v_close
23360     02 4C 05 F6 | 	mov	COUNT_, #2
23364     A9 00 A0 FD | 	call	#pushregs_
23368     3A 8D 02 FB | 	rdlong	local01, arg01
2336c     02 00 00 FF 
23370     0C 8C 06 F1 | 	add	local01, ##1036
23374     46 75 02 F6 | 	mov	arg01, local01
23378     02 00 00 FF 
2337c     0C 8C 86 F1 | 	sub	local01, ##1036
23380     5C D3 BF FD | 	call	#_fatfs_cc_f_close
23384     1A 8F 02 F6 | 	mov	local02, result1
23388     46 75 02 F6 | 	mov	arg01, local01
2338c                 | '     return _gc_free(ptr);
2338c     64 4C B0 FD | 	call	#__system___gc_free
23390                 | '     FAT_FIL *f = fil->vfsdata;
23390                 | '     r=f_close(&f->fil);
23390                 | '     free(f);
23390                 | '     return _set_dos_error(r);
23390     47 75 02 F6 | 	mov	arg01, local02
23394     60 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23398     A8 F0 03 F6 | 	mov	ptra, fp
2339c     B3 00 A0 FD | 	call	#popregs_
233a0                 | _fatfs_cc_v_close_ret
233a0     2D 00 64 FD | 	ret
233a4                 | 
233a4                 | _fatfs_cc_v_opendir
233a4     04 4C 05 F6 | 	mov	COUNT_, #4
233a8     A9 00 A0 FD | 	call	#pushregs_
233ac     3A 8D 02 F6 | 	mov	local01, arg01
233b0     3B 8F 02 F6 | 	mov	local02, arg02
233b4     2C 74 06 F6 | 	mov	arg01, #44
233b8                 | '     return _gc_alloc(size);
233b8     10 76 06 F6 | 	mov	arg02, #16
233bc     04 4B B0 FD | 	call	#__system___gc_doalloc
233c0     1A 91 0A F6 | 	mov	local03, result1 wz
233c4                 | ' #line 156 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
233c4                 | '       return _seterror( 7 );
233c4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
233c8     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
233cc     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
233d0     01 34 66 A6 |  if_e	neg	result1, #1
233d4     34 00 90 AD |  if_e	jmp	#LR__1377
233d8     47 77 02 F6 | 	mov	arg02, local02
233dc     48 75 02 F6 | 	mov	arg01, local03
233e0     88 DA BF FD | 	call	#_fatfs_cc_f_opendir
233e4     1A 93 0A F6 | 	mov	local04, result1 wz
233e8     14 00 90 AD |  if_e	jmp	#LR__1376
233ec     48 75 02 F6 | 	mov	arg01, local03
233f0                 | '     return _gc_free(ptr);
233f0     00 4C B0 FD | 	call	#__system___gc_free
233f4                 | '         free(f);
233f4                 | '         return _set_dos_error(r);
233f4     49 75 02 F6 | 	mov	arg01, local04
233f8     FC FD BF FD | 	call	#_fatfs_cc__set_dos_error_0222
233fc     0C 00 90 FD | 	jmp	#LR__1377
23400                 | LR__1376
23400     04 8C 06 F1 | 	add	local01, #4
23404     46 91 62 FC | 	wrlong	local03, local01
23408                 | '     }
23408                 | '     dir->vfsdata = f;
23408                 | '     return 0;
23408     00 34 06 F6 | 	mov	result1, #0
2340c                 | LR__1377
2340c     A8 F0 03 F6 | 	mov	ptra, fp
23410     B3 00 A0 FD | 	call	#popregs_
23414                 | _fatfs_cc_v_opendir_ret
23414     2D 00 64 FD | 	ret
23418                 | 
23418                 | _fatfs_cc_v_closedir
23418     02 4C 05 F6 | 	mov	COUNT_, #2
2341c     A9 00 A0 FD | 	call	#pushregs_
23420     04 74 06 F1 | 	add	arg01, #4
23424     3A 8D 02 FB | 	rdlong	local01, arg01
23428     46 75 02 F6 | 	mov	arg01, local01
2342c     F0 DB BF FD | 	call	#_fatfs_cc_f_closedir
23430     1A 8F 02 F6 | 	mov	local02, result1
23434     46 75 02 F6 | 	mov	arg01, local01
23438                 | '     return _gc_free(ptr);
23438     B8 4B B0 FD | 	call	#__system___gc_free
2343c     00 8E 0E F2 | 	cmp	local02, #0 wz
23440     47 75 02 56 |  if_ne	mov	arg01, local02
23444     B0 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0222
23448                 | '     return r;
23448     47 35 02 F6 | 	mov	result1, local02
2344c     A8 F0 03 F6 | 	mov	ptra, fp
23450     B3 00 A0 FD | 	call	#popregs_
23454                 | _fatfs_cc_v_closedir_ret
23454     2D 00 64 FD | 	ret
23458                 | 
23458                 | _fatfs_cc_v_readdir
23458     01 4C 05 F6 | 	mov	COUNT_, #1
2345c     A9 00 A0 FD | 	call	#pushregs_
23460     2C F0 07 F1 | 	add	ptra, #44
23464     04 50 05 F1 | 	add	fp, #4
23468     A8 74 62 FC | 	wrlong	arg01, fp
2346c     04 50 05 F1 | 	add	fp, #4
23470     A8 76 62 FC | 	wrlong	arg02, fp
23474     04 50 85 F1 | 	sub	fp, #4
23478     A8 76 02 FB | 	rdlong	arg02, fp
2347c     04 76 06 F1 | 	add	arg02, #4
23480     3B 75 02 FB | 	rdlong	arg01, arg02
23484     08 50 05 F1 | 	add	fp, #8
23488     A8 76 02 F6 | 	mov	arg02, fp
2348c     0C 50 85 F1 | 	sub	fp, #12
23490     E8 DB BF FD | 	call	#_fatfs_cc_f_readdir
23494     28 50 05 F1 | 	add	fp, #40
23498     A8 34 62 FC | 	wrlong	result1, fp
2349c     28 50 85 F1 | 	sub	fp, #40
234a0     00 34 0E F2 | 	cmp	result1, #0 wz
234a4     14 00 90 AD |  if_e	jmp	#LR__1378
234a8                 | '         return _set_dos_error(r);
234a8     28 50 05 F1 | 	add	fp, #40
234ac     A8 74 02 FB | 	rdlong	arg01, fp
234b0     28 50 85 F1 | 	sub	fp, #40
234b4     40 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0222
234b8     B4 00 90 FD | 	jmp	#LR__1381
234bc                 | LR__1378
234bc     18 50 05 F1 | 	add	fp, #24
234c0     A8 76 C2 FA | 	rdbyte	arg02, fp
234c4     18 50 85 F1 | 	sub	fp, #24
234c8     07 76 4E F7 | 	zerox	arg02, #7 wz
234cc                 | '         return -1;
234cc     01 34 66 A6 |  if_e	neg	result1, #1
234d0     9C 00 90 AD |  if_e	jmp	#LR__1381
234d4     08 50 05 F1 | 	add	fp, #8
234d8     A8 74 02 FB | 	rdlong	arg01, fp
234dc     10 50 05 F1 | 	add	fp, #16
234e0     A8 76 02 F6 | 	mov	arg02, fp
234e4     18 50 85 F1 | 	sub	fp, #24
234e8     AC 1D B0 FD | 	call	#__system____builtin_strcpy
234ec     14 50 05 F1 | 	add	fp, #20
234f0     A8 34 C2 FA | 	rdbyte	result1, fp
234f4     14 50 85 F1 | 	sub	fp, #20
234f8     10 34 CE F7 | 	test	result1, #16 wz
234fc     18 00 90 AD |  if_e	jmp	#LR__1379
23500     08 50 05 F1 | 	add	fp, #8
23504     A8 34 02 FB | 	rdlong	result1, fp
23508     08 50 85 F1 | 	sub	fp, #8
2350c     50 34 06 F1 | 	add	result1, #80
23510     1A 03 48 FC | 	wrbyte	#1, result1
23514     14 00 90 FD | 	jmp	#LR__1380
23518                 | LR__1379
23518     08 50 05 F1 | 	add	fp, #8
2351c     A8 34 02 FB | 	rdlong	result1, fp
23520     08 50 85 F1 | 	sub	fp, #8
23524     50 34 06 F1 | 	add	result1, #80
23528     1A 01 48 FC | 	wrbyte	#0, result1
2352c                 | LR__1380
2352c     08 50 05 F1 | 	add	fp, #8
23530     A8 34 02 FB | 	rdlong	result1, fp
23534     04 50 05 F1 | 	add	fp, #4
23538     A8 76 02 FB | 	rdlong	arg02, fp
2353c     48 34 06 F1 | 	add	result1, #72
23540     1A 77 62 FC | 	wrlong	arg02, result1
23544     04 50 85 F1 | 	sub	fp, #4
23548     A8 8C 02 FB | 	rdlong	local01, fp
2354c     08 50 05 F1 | 	add	fp, #8
23550     A8 74 E2 FA | 	rdword	arg01, fp
23554     02 50 05 F1 | 	add	fp, #2
23558     A8 76 E2 FA | 	rdword	arg02, fp
2355c     12 50 85 F1 | 	sub	fp, #18
23560     BC FB BF FD | 	call	#_fatfs_cc_unixtime_0220
23564     4C 8C 06 F1 | 	add	local01, #76
23568     46 35 62 FC | 	wrlong	result1, local01
2356c                 | '         ent->d_type =  (0) ;
2356c                 | '     }
2356c                 | '     ent->d_size = finfo.fsize;
2356c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2356c                 | '     return 0;
2356c     00 34 06 F6 | 	mov	result1, #0
23570                 | LR__1381
23570     A8 F0 03 F6 | 	mov	ptra, fp
23574     B3 00 A0 FD | 	call	#popregs_
23578                 | _fatfs_cc_v_readdir_ret
23578     2D 00 64 FD | 	ret
2357c                 | 
2357c                 | _fatfs_cc_v_stat
2357c     03 4C 05 F6 | 	mov	COUNT_, #3
23580     A9 00 A0 FD | 	call	#pushregs_
23584     30 F0 07 F1 | 	add	ptra, #48
23588     04 50 05 F1 | 	add	fp, #4
2358c     A8 74 62 FC | 	wrlong	arg01, fp
23590     04 50 05 F1 | 	add	fp, #4
23594     A8 76 62 FC | 	wrlong	arg02, fp
23598     08 50 85 F1 | 	sub	fp, #8
2359c     3B 75 02 F6 | 	mov	arg01, arg02
235a0     00 76 06 F6 | 	mov	arg02, #0
235a4     30 78 06 F6 | 	mov	arg03, #48
235a8     99 00 A0 FD | 	call	#\builtin_bytefill_
235ac     04 50 05 F1 | 	add	fp, #4
235b0     A8 34 02 FB | 	rdlong	result1, fp
235b4     04 50 85 F1 | 	sub	fp, #4
235b8     1A 35 CA FA | 	rdbyte	result1, result1 wz
235bc     30 00 90 AD |  if_e	jmp	#LR__1382
235c0     04 50 05 F1 | 	add	fp, #4
235c4     A8 34 02 FB | 	rdlong	result1, fp
235c8     04 50 85 F1 | 	sub	fp, #4
235cc     1A 35 C2 FA | 	rdbyte	result1, result1
235d0     2E 34 0E F2 | 	cmp	result1, #46 wz
235d4     30 00 90 5D |  if_ne	jmp	#LR__1383
235d8     04 50 05 F1 | 	add	fp, #4
235dc     A8 34 02 FB | 	rdlong	result1, fp
235e0     04 50 85 F1 | 	sub	fp, #4
235e4     01 34 06 F1 | 	add	result1, #1
235e8     1A 35 CA FA | 	rdbyte	result1, result1 wz
235ec     18 00 90 5D |  if_ne	jmp	#LR__1383
235f0                 | LR__1382
235f0     18 50 05 F1 | 	add	fp, #24
235f4     A8 20 48 FC | 	wrbyte	#16, fp
235f8     0C 50 85 F1 | 	sub	fp, #12
235fc     A8 00 68 FC | 	wrlong	#0, fp
23600     0C 50 85 F1 | 	sub	fp, #12
23604     24 00 90 FD | 	jmp	#LR__1384
23608                 | LR__1383
23608     04 50 05 F1 | 	add	fp, #4
2360c     A8 74 02 FB | 	rdlong	arg01, fp
23610     0C 50 05 F1 | 	add	fp, #12
23614     A8 76 02 F6 | 	mov	arg02, fp
23618     10 50 85 F1 | 	sub	fp, #16
2361c     78 DB BF FD | 	call	#_fatfs_cc_f_stat
23620     0C 50 05 F1 | 	add	fp, #12
23624     A8 34 62 FC | 	wrlong	result1, fp
23628     0C 50 85 F1 | 	sub	fp, #12
2362c                 | LR__1384
2362c     0C 50 05 F1 | 	add	fp, #12
23630     A8 34 0A FB | 	rdlong	result1, fp wz
23634     0C 50 85 F1 | 	sub	fp, #12
23638     14 00 90 AD |  if_e	jmp	#LR__1385
2363c                 | '         return _set_dos_error(r);
2363c     0C 50 05 F1 | 	add	fp, #12
23640     A8 74 02 FB | 	rdlong	arg01, fp
23644     0C 50 85 F1 | 	sub	fp, #12
23648     AC FB BF FD | 	call	#_fatfs_cc__set_dos_error_0222
2364c     10 01 90 FD | 	jmp	#LR__1386
23650                 | LR__1385
23650     2C 50 05 F1 | 	add	fp, #44
23654     A8 48 6A FC | 	wrlong	#292, fp
23658     14 50 85 F1 | 	sub	fp, #20
2365c     A8 8C C2 FA | 	rdbyte	local01, fp
23660     18 50 85 F1 | 	sub	fp, #24
23664     01 8C CE F7 | 	test	local01, #1 wz
23668     2C 50 05 51 |  if_ne	add	fp, #44
2366c     A8 8C 02 5B |  if_ne	rdlong	local01, fp
23670     92 8C 46 55 |  if_ne	or	local01, #146
23674     A8 8C 62 5C |  if_ne	wrlong	local01, fp
23678     2C 50 85 51 |  if_ne	sub	fp, #44
2367c     18 50 05 F1 | 	add	fp, #24
23680     A8 8C C2 FA | 	rdbyte	local01, fp
23684     18 50 85 F1 | 	sub	fp, #24
23688     10 8C CE F7 | 	test	local01, #16 wz
2368c     2C 50 05 51 |  if_ne	add	fp, #44
23690     A8 8C 02 5B |  if_ne	rdlong	local01, fp
23694     08 00 00 5F 
23698     49 8C 46 55 |  if_ne	or	local01, ##4169
2369c     A8 8C 62 5C |  if_ne	wrlong	local01, fp
236a0     2C 50 85 51 |  if_ne	sub	fp, #44
236a4     08 50 05 F1 | 	add	fp, #8
236a8     A8 8C 02 FB | 	rdlong	local01, fp
236ac     24 50 05 F1 | 	add	fp, #36
236b0     A8 34 02 FB | 	rdlong	result1, fp
236b4     08 8C 06 F1 | 	add	local01, #8
236b8     46 35 62 FC | 	wrlong	result1, local01
236bc     24 50 85 F1 | 	sub	fp, #36
236c0     A8 8C 02 FB | 	rdlong	local01, fp
236c4     0C 8C 06 F1 | 	add	local01, #12
236c8     46 03 68 FC | 	wrlong	#1, local01
236cc     A8 8C 02 FB | 	rdlong	local01, fp
236d0     08 50 05 F1 | 	add	fp, #8
236d4     A8 34 02 FB | 	rdlong	result1, fp
236d8     18 8C 06 F1 | 	add	local01, #24
236dc     46 35 62 FC | 	wrlong	result1, local01
236e0     08 50 85 F1 | 	sub	fp, #8
236e4     A8 8C 02 FB | 	rdlong	local01, fp
236e8     1C 8C 06 F1 | 	add	local01, #28
236ec     01 00 80 FF 
236f0     46 01 68 FC | 	wrlong	##512, local01
236f4     A8 34 02 FB | 	rdlong	result1, fp
236f8     1A 8D 02 F6 | 	mov	local01, result1
236fc     18 34 06 F1 | 	add	result1, #24
23700     1A 35 02 FB | 	rdlong	result1, result1
23704     1A 35 52 F6 | 	abs	result1, result1 wc
23708     09 34 46 F0 | 	shr	result1, #9
2370c     1A 35 82 F6 | 	negc	result1, result1
23710     20 8C 06 F1 | 	add	local01, #32
23714     46 35 62 FC | 	wrlong	result1, local01
23718     A8 8E 02 FB | 	rdlong	local02, fp
2371c     47 8D 02 F6 | 	mov	local01, local02
23720     47 91 02 F6 | 	mov	local03, local02
23724     0C 50 05 F1 | 	add	fp, #12
23728     A8 74 E2 FA | 	rdword	arg01, fp
2372c     02 50 05 F1 | 	add	fp, #2
23730     A8 76 E2 FA | 	rdword	arg02, fp
23734     16 50 85 F1 | 	sub	fp, #22
23738     E4 F9 BF FD | 	call	#_fatfs_cc_unixtime_0220
2373c     2C 90 06 F1 | 	add	local03, #44
23740     48 35 62 FC | 	wrlong	result1, local03
23744     28 8E 06 F1 | 	add	local02, #40
23748     47 35 62 FC | 	wrlong	result1, local02
2374c     24 8C 06 F1 | 	add	local01, #36
23750     46 35 62 FC | 	wrlong	result1, local01
23754                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23754                 | '     }
23754                 | '     buf->st_mode = mode;
23754                 | '     buf->st_nlink = 1;
23754                 | '     buf->st_size = finfo.fsize;
23754                 | '     buf->st_blksize = 512;
23754                 | '     buf->st_blocks = buf->st_size / 512;
23754                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23754                 | ' #line 247 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23754                 | '     return r;
23754     0C 50 05 F1 | 	add	fp, #12
23758     A8 34 02 FB | 	rdlong	result1, fp
2375c     0C 50 85 F1 | 	sub	fp, #12
23760                 | LR__1386
23760     A8 F0 03 F6 | 	mov	ptra, fp
23764     B3 00 A0 FD | 	call	#popregs_
23768                 | _fatfs_cc_v_stat_ret
23768     2D 00 64 FD | 	ret
2376c                 | 
2376c                 | _fatfs_cc_v_read
2376c     01 4C 05 F6 | 	mov	COUNT_, #1
23770     A9 00 A0 FD | 	call	#pushregs_
23774     1C F0 07 F1 | 	add	ptra, #28
23778     04 50 05 F1 | 	add	fp, #4
2377c     A8 74 62 FC | 	wrlong	arg01, fp
23780     04 50 05 F1 | 	add	fp, #4
23784     A8 76 62 FC | 	wrlong	arg02, fp
23788     04 50 05 F1 | 	add	fp, #4
2378c     A8 78 62 FC | 	wrlong	arg03, fp
23790     08 50 85 F1 | 	sub	fp, #8
23794     A8 74 02 FB | 	rdlong	arg01, fp
23798     3A 75 0A FB | 	rdlong	arg01, arg01 wz
2379c     0C 50 05 F1 | 	add	fp, #12
237a0     A8 74 62 FC | 	wrlong	arg01, fp
237a4     10 50 85 F1 | 	sub	fp, #16
237a8                 | '         return _seterror( 5 );
237a8     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
237ac     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
237b0     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
237b4     01 34 66 A6 |  if_e	neg	result1, #1
237b8     B8 00 90 AD |  if_e	jmp	#LR__1389
237bc     10 50 05 F1 | 	add	fp, #16
237c0     A8 74 02 FB | 	rdlong	arg01, fp
237c4     02 00 00 FF 
237c8     0C 74 06 F1 | 	add	arg01, ##1036
237cc     08 50 85 F1 | 	sub	fp, #8
237d0     A8 76 02 FB | 	rdlong	arg02, fp
237d4     04 50 05 F1 | 	add	fp, #4
237d8     A8 78 02 FB | 	rdlong	arg03, fp
237dc     0C 50 05 F1 | 	add	fp, #12
237e0     A8 7A 02 F6 | 	mov	arg04, fp
237e4     18 50 85 F1 | 	sub	fp, #24
237e8     C0 BD BF FD | 	call	#_fatfs_cc_f_read
237ec     14 50 05 F1 | 	add	fp, #20
237f0     A8 34 62 FC | 	wrlong	result1, fp
237f4     14 50 85 F1 | 	sub	fp, #20
237f8     00 34 0E F2 | 	cmp	result1, #0 wz
237fc     34 00 90 AD |  if_e	jmp	#LR__1387
23800     04 50 05 F1 | 	add	fp, #4
23804     A8 74 02 FB | 	rdlong	arg01, fp
23808     3A 8D 02 F6 | 	mov	local01, arg01
2380c     08 74 06 F1 | 	add	arg01, #8
23810     3A 75 02 FB | 	rdlong	arg01, arg01
23814     20 74 46 F5 | 	or	arg01, #32
23818     08 8C 06 F1 | 	add	local01, #8
2381c     46 75 62 FC | 	wrlong	arg01, local01
23820                 | '         fil->state |=  (0x20) ;
23820                 | '         return _set_dos_error(r);
23820     10 50 05 F1 | 	add	fp, #16
23824     A8 74 02 FB | 	rdlong	arg01, fp
23828     14 50 85 F1 | 	sub	fp, #20
2382c     C8 F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23830     40 00 90 FD | 	jmp	#LR__1389
23834                 | LR__1387
23834     18 50 05 F1 | 	add	fp, #24
23838     A8 8C 0A FB | 	rdlong	local01, fp wz
2383c     18 50 85 F1 | 	sub	fp, #24
23840     24 00 90 5D |  if_ne	jmp	#LR__1388
23844     04 50 05 F1 | 	add	fp, #4
23848     A8 34 02 FB | 	rdlong	result1, fp
2384c     1A 8D 02 F6 | 	mov	local01, result1
23850     04 50 85 F1 | 	sub	fp, #4
23854     08 34 06 F1 | 	add	result1, #8
23858     1A 35 02 FB | 	rdlong	result1, result1
2385c     10 34 46 F5 | 	or	result1, #16
23860     08 8C 06 F1 | 	add	local01, #8
23864     46 35 62 FC | 	wrlong	result1, local01
23868                 | LR__1388
23868                 | '         fil->state |=  (0x10) ;
23868                 | '     }
23868                 | '     return x;
23868     18 50 05 F1 | 	add	fp, #24
2386c     A8 34 02 FB | 	rdlong	result1, fp
23870     18 50 85 F1 | 	sub	fp, #24
23874                 | LR__1389
23874     A8 F0 03 F6 | 	mov	ptra, fp
23878     B3 00 A0 FD | 	call	#popregs_
2387c                 | _fatfs_cc_v_read_ret
2387c     2D 00 64 FD | 	ret
23880                 | 
23880                 | _fatfs_cc_v_write
23880     01 4C 05 F6 | 	mov	COUNT_, #1
23884     A9 00 A0 FD | 	call	#pushregs_
23888     1C F0 07 F1 | 	add	ptra, #28
2388c     04 50 05 F1 | 	add	fp, #4
23890     A8 74 62 FC | 	wrlong	arg01, fp
23894     04 50 05 F1 | 	add	fp, #4
23898     A8 76 62 FC | 	wrlong	arg02, fp
2389c     04 50 05 F1 | 	add	fp, #4
238a0     A8 78 62 FC | 	wrlong	arg03, fp
238a4     08 50 85 F1 | 	sub	fp, #8
238a8     A8 74 02 FB | 	rdlong	arg01, fp
238ac     3A 75 0A FB | 	rdlong	arg01, arg01 wz
238b0     0C 50 05 F1 | 	add	fp, #12
238b4     A8 74 62 FC | 	wrlong	arg01, fp
238b8     10 50 85 F1 | 	sub	fp, #16
238bc                 | '         return _seterror( 5 );
238bc     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
238c0     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
238c4     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
238c8     01 34 66 A6 |  if_e	neg	result1, #1
238cc     84 00 90 AD |  if_e	jmp	#LR__1391
238d0     10 50 05 F1 | 	add	fp, #16
238d4     A8 74 02 FB | 	rdlong	arg01, fp
238d8     02 00 00 FF 
238dc     0C 74 06 F1 | 	add	arg01, ##1036
238e0     08 50 85 F1 | 	sub	fp, #8
238e4     A8 76 02 FB | 	rdlong	arg02, fp
238e8     04 50 05 F1 | 	add	fp, #4
238ec     A8 78 02 FB | 	rdlong	arg03, fp
238f0     0C 50 05 F1 | 	add	fp, #12
238f4     A8 7A 02 F6 | 	mov	arg04, fp
238f8     18 50 85 F1 | 	sub	fp, #24
238fc     84 C3 BF FD | 	call	#_fatfs_cc_f_write
23900     14 50 05 F1 | 	add	fp, #20
23904     A8 34 62 FC | 	wrlong	result1, fp
23908     14 50 85 F1 | 	sub	fp, #20
2390c     00 34 0E F2 | 	cmp	result1, #0 wz
23910     34 00 90 AD |  if_e	jmp	#LR__1390
23914     04 50 05 F1 | 	add	fp, #4
23918     A8 74 02 FB | 	rdlong	arg01, fp
2391c     3A 8D 02 F6 | 	mov	local01, arg01
23920     08 74 06 F1 | 	add	arg01, #8
23924     3A 75 02 FB | 	rdlong	arg01, arg01
23928     20 74 46 F5 | 	or	arg01, #32
2392c     08 8C 06 F1 | 	add	local01, #8
23930     46 75 62 FC | 	wrlong	arg01, local01
23934                 | '         fil->state |=  (0x20) ;
23934                 | '         return _set_dos_error(r);
23934     10 50 05 F1 | 	add	fp, #16
23938     A8 74 02 FB | 	rdlong	arg01, fp
2393c     14 50 85 F1 | 	sub	fp, #20
23940     B4 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23944     0C 00 90 FD | 	jmp	#LR__1391
23948                 | LR__1390
23948                 | '     }
23948                 | '     return x;
23948     18 50 05 F1 | 	add	fp, #24
2394c     A8 34 02 FB | 	rdlong	result1, fp
23950     18 50 85 F1 | 	sub	fp, #24
23954                 | LR__1391
23954     A8 F0 03 F6 | 	mov	ptra, fp
23958     B3 00 A0 FD | 	call	#popregs_
2395c                 | _fatfs_cc_v_write_ret
2395c     2D 00 64 FD | 	ret
23960                 | 
23960                 | _fatfs_cc_v_lseek
23960     04 4C 05 F6 | 	mov	COUNT_, #4
23964     A9 00 A0 FD | 	call	#pushregs_
23968     3B 8D 02 F6 | 	mov	local01, arg02
2396c     3C 8F 02 F6 | 	mov	local02, arg03
23970     3A 91 02 FB | 	rdlong	local03, arg01
23974     02 00 00 FF 
23978     0C 90 0E F1 | 	add	local03, ##1036 wz
2397c                 | '         return _seterror( 5 );
2397c     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23980     D1 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23984     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23988     01 34 66 A6 |  if_e	neg	result1, #1
2398c     4C 00 90 AD |  if_e	jmp	#LR__1394
23990     00 8E 0E F2 | 	cmp	local02, #0 wz
23994     24 00 90 AD |  if_e	jmp	#LR__1392
23998     01 8E 0E F2 | 	cmp	local02, #1 wz
2399c     14 90 06 A1 |  if_e	add	local03, #20
239a0     48 93 02 AB |  if_e	rdlong	local04, local03
239a4     14 90 86 A1 |  if_e	sub	local03, #20
239a8     49 8D 02 A1 |  if_e	add	local01, local04
239ac     0C 90 06 51 |  if_ne	add	local03, #12
239b0     48 93 02 5B |  if_ne	rdlong	local04, local03
239b4     0C 90 86 51 |  if_ne	sub	local03, #12
239b8     49 8D 02 51 |  if_ne	add	local01, local04
239bc                 | LR__1392
239bc     46 77 02 F6 | 	mov	arg02, local01
239c0     48 75 02 F6 | 	mov	arg01, local03
239c4     98 CD BF FD | 	call	#_fatfs_cc_f_lseek
239c8     1A 75 0A F6 | 	mov	arg01, result1 wz
239cc     08 00 90 AD |  if_e	jmp	#LR__1393
239d0                 | '         return _set_dos_error(result);
239d0     24 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
239d4     04 00 90 FD | 	jmp	#LR__1394
239d8                 | LR__1393
239d8                 | '     }
239d8                 | '     return offset;
239d8     46 35 02 F6 | 	mov	result1, local01
239dc                 | LR__1394
239dc     A8 F0 03 F6 | 	mov	ptra, fp
239e0     B3 00 A0 FD | 	call	#popregs_
239e4                 | _fatfs_cc_v_lseek_ret
239e4     2D 00 64 FD | 	ret
239e8                 | 
239e8                 | _fatfs_cc_v_ioctl
239e8                 | ' {
239e8                 | '     return _seterror( 10 );
239e8     18 A2 05 F1 | 	add	ptr___system__dat__, #24
239ec     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
239f0     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
239f4     01 34 66 F6 | 	neg	result1, #1
239f8                 | _fatfs_cc_v_ioctl_ret
239f8     2D 00 64 FD | 	ret
239fc                 | 
239fc                 | _fatfs_cc_v_mkdir
239fc     C4 DA BF FD | 	call	#_fatfs_cc_f_mkdir
23a00     1A 75 02 F6 | 	mov	arg01, result1
23a04                 | ' 
23a04                 | '     r = f_mkdir(name);
23a04                 | '     return _set_dos_error(r);
23a04     F0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23a08                 | _fatfs_cc_v_mkdir_ret
23a08     2D 00 64 FD | 	ret
23a0c                 | 
23a0c                 | _fatfs_cc_v_remove
23a0c     60 D8 BF FD | 	call	#_fatfs_cc_f_unlink
23a10     1A 75 02 F6 | 	mov	arg01, result1
23a14                 | ' 
23a14                 | '     r = f_unlink(name);
23a14                 | '     return _set_dos_error(r);
23a14     E0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23a18                 | _fatfs_cc_v_remove_ret
23a18     2D 00 64 FD | 	ret
23a1c                 | 
23a1c                 | _fatfs_cc_v_rmdir
23a1c     50 D8 BF FD | 	call	#_fatfs_cc_f_unlink
23a20     1A 75 02 F6 | 	mov	arg01, result1
23a24                 | ' 
23a24                 | '     r = f_unlink(name);
23a24                 | '     return _set_dos_error(r);
23a24     D0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23a28                 | _fatfs_cc_v_rmdir_ret
23a28     2D 00 64 FD | 	ret
23a2c                 | 
23a2c                 | _fatfs_cc_v_rename
23a2c     BC DD BF FD | 	call	#_fatfs_cc_f_rename
23a30     1A 75 02 F6 | 	mov	arg01, result1
23a34                 | '     return _set_dos_error(r);
23a34     C0 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23a38                 | _fatfs_cc_v_rename_ret
23a38     2D 00 64 FD | 	ret
23a3c                 | 
23a3c                 | _fatfs_cc_v_open
23a3c     0B 4C 05 F6 | 	mov	COUNT_, #11
23a40     A9 00 A0 FD | 	call	#pushregs_
23a44     3A 8D 02 F6 | 	mov	local01, arg01
23a48     3B 8F 02 F6 | 	mov	local02, arg02
23a4c     3C 91 02 F6 | 	mov	local03, arg03
23a50     03 00 00 FF 
23a54     34 74 06 F6 | 	mov	arg01, ##1588
23a58                 | '     return _gc_alloc(size);
23a58     10 76 06 F6 | 	mov	arg02, #16
23a5c     64 44 B0 FD | 	call	#__system___gc_doalloc
23a60     1A 93 0A F6 | 	mov	local04, result1 wz
23a64                 | '       return _seterror( 7 );
23a64     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
23a68     D1 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23a6c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
23a70     01 34 66 A6 |  if_e	neg	result1, #1
23a74     B0 00 90 AD |  if_e	jmp	#LR__1401
23a78     49 95 02 F6 | 	mov	local05, local04
23a7c     00 96 06 F6 | 	mov	local06, #0
23a80     03 00 00 FF 
23a84     34 98 06 F6 | 	mov	local07, ##1588
23a88     4A 75 02 F6 | 	mov	arg01, local05
23a8c     00 76 06 F6 | 	mov	arg02, #0
23a90     03 00 00 FF 
23a94     34 78 06 F6 | 	mov	arg03, ##1588
23a98     3A 9B 02 F6 | 	mov	local08, arg01
23a9c     99 00 A0 FD | 	call	#\builtin_bytefill_
23aa0     4D 35 02 F6 | 	mov	result1, local08
23aa4                 | '   switch (flags & 3) {
23aa4     48 9D 02 F6 | 	mov	local09, local03
23aa8     03 9C 0E F5 | 	and	local09, #3 wz
23aac     0C 00 90 AD |  if_e	jmp	#LR__1395
23ab0     01 9C 0E F2 | 	cmp	local09, #1 wz
23ab4     0C 00 90 AD |  if_e	jmp	#LR__1396
23ab8     10 00 90 FD | 	jmp	#LR__1397
23abc                 | LR__1395
23abc     01 9E 06 F6 | 	mov	local10, #1
23ac0                 | '       fs_flags =  0x01 ;
23ac0                 | '       break;
23ac0     0C 00 90 FD | 	jmp	#LR__1398
23ac4                 | LR__1396
23ac4     02 9E 06 F6 | 	mov	local10, #2
23ac8                 | '       fs_flags =  0x02 ;
23ac8                 | '       break;
23ac8     04 00 90 FD | 	jmp	#LR__1398
23acc                 | LR__1397
23acc     03 9E 06 F6 | 	mov	local10, #3
23ad0                 | '       fs_flags =  0x01  |  0x02 ;
23ad0                 | '       break;
23ad0                 | LR__1398
23ad0     08 90 CE F7 | 	test	local03, #8 wz
23ad4     18 9E 46 55 |  if_ne	or	local10, #24
23ad8     08 00 90 5D |  if_ne	jmp	#LR__1399
23adc     20 90 CE F7 | 	test	local03, #32 wz
23ae0     30 9E 46 55 |  if_ne	or	local10, #48
23ae4                 | LR__1399
23ae4     02 00 00 FF 
23ae8     0C 92 06 F1 | 	add	local04, ##1036
23aec     49 75 02 F6 | 	mov	arg01, local04
23af0     02 00 00 FF 
23af4     0C 92 86 F1 | 	sub	local04, ##1036
23af8     47 77 02 F6 | 	mov	arg02, local02
23afc     4F 79 02 F6 | 	mov	arg03, local10
23b00     6C B3 BF FD | 	call	#_fatfs_cc_f_open
23b04     1A A1 0A F6 | 	mov	local11, result1 wz
23b08     14 00 90 AD |  if_e	jmp	#LR__1400
23b0c     49 75 02 F6 | 	mov	arg01, local04
23b10                 | '     return _gc_free(ptr);
23b10     E0 44 B0 FD | 	call	#__system___gc_free
23b14                 | '     free(f);
23b14                 | ' #line 395 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23b14                 | '     return _set_dos_error(r);
23b14     50 75 02 F6 | 	mov	arg01, local11
23b18     DC F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0222
23b1c     08 00 90 FD | 	jmp	#LR__1401
23b20                 | LR__1400
23b20     46 93 62 FC | 	wrlong	local04, local01
23b24                 | '   }
23b24                 | '   fil->vfsdata = f;
23b24                 | '   return 0;
23b24     00 34 06 F6 | 	mov	result1, #0
23b28                 | LR__1401
23b28     A8 F0 03 F6 | 	mov	ptra, fp
23b2c     B3 00 A0 FD | 	call	#popregs_
23b30                 | _fatfs_cc_v_open_ret
23b30     2D 00 64 FD | 	ret
23b34                 | 
23b34                 | _fatfs_cc_v_init
23b34                 | ' {
23b34                 | '     return 0;
23b34     00 34 06 F6 | 	mov	result1, #0
23b38                 | _fatfs_cc_v_init_ret
23b38     2D 00 64 FD | 	ret
23b3c                 | 
23b3c                 | _fatfs_cc_v_deinit
23b3c     53 01 00 FF 
23b40     78 77 06 F6 | 	mov	arg02, ##@LR__2282
23b44     00 74 06 F6 | 	mov	arg01, #0
23b48     00 78 06 F6 | 	mov	arg03, #0
23b4c     14 B2 BF FD | 	call	#_fatfs_cc_f_mount
23b50                 | ' #line 417 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
23b50                 | '     return 0;
23b50     00 34 06 F6 | 	mov	result1, #0
23b54                 | _fatfs_cc_v_deinit_ret
23b54     2D 00 64 FD | 	ret
23b58                 | 
23b58                 | _fatfs_cc_get_vfs
23b58     02 4C 05 F6 | 	mov	COUNT_, #2
23b5c     A9 00 A0 FD | 	call	#pushregs_
23b60     3A 8D 02 F6 | 	mov	local01, arg01
23b64     50 74 06 F6 | 	mov	arg01, #80
23b68     14 43 B0 FD | 	call	#__system___gc_alloc_managed
23b6c     1A 8F 02 F6 | 	mov	local02, result1
23b70     C9 74 02 F6 | 	mov	arg01, objptr
23b74     F1 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_close_
23b78     6C 17 B0 FD | 	call	#__system___make_methodptr
23b7c     47 35 62 FC | 	wrlong	result1, local02
23b80     C9 74 02 F6 | 	mov	arg01, objptr
23b84     FB 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_read_
23b88     5C 17 B0 FD | 	call	#__system___make_methodptr
23b8c     04 8E 06 F1 | 	add	local02, #4
23b90     47 35 62 FC | 	wrlong	result1, local02
23b94     C9 74 02 F6 | 	mov	arg01, objptr
23b98     01 77 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_write_
23b9c     48 17 B0 FD | 	call	#__system___make_methodptr
23ba0     04 8E 06 F1 | 	add	local02, #4
23ba4     47 35 62 FC | 	wrlong	result1, local02
23ba8     C9 74 02 F6 | 	mov	arg01, objptr
23bac     F7 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_lseek_
23bb0     34 17 B0 FD | 	call	#__system___make_methodptr
23bb4     04 8E 06 F1 | 	add	local02, #4
23bb8     47 35 62 FC | 	wrlong	result1, local02
23bbc     C9 74 02 F6 | 	mov	arg01, objptr
23bc0     F6 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_ioctl_
23bc4     20 17 B0 FD | 	call	#__system___make_methodptr
23bc8     04 8E 06 F1 | 	add	local02, #4
23bcc     47 35 62 FC | 	wrlong	result1, local02
23bd0     04 8E 06 F1 | 	add	local02, #4
23bd4     47 01 68 FC | 	wrlong	#0, local02
23bd8     04 8E 06 F1 | 	add	local02, #4
23bdc     47 8D 62 FC | 	wrlong	local01, local02
23be0     04 8E 06 F1 | 	add	local02, #4
23be4     47 01 68 FC | 	wrlong	#0, local02
23be8     C9 74 02 F6 | 	mov	arg01, objptr
23bec     F9 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_open_
23bf0     F4 16 B0 FD | 	call	#__system___make_methodptr
23bf4     04 8E 06 F1 | 	add	local02, #4
23bf8     47 35 62 FC | 	wrlong	result1, local02
23bfc     C9 74 02 F6 | 	mov	arg01, objptr
23c00     F3 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_creat_
23c04     E0 16 B0 FD | 	call	#__system___make_methodptr
23c08     04 8E 06 F1 | 	add	local02, #4
23c0c     47 35 62 FC | 	wrlong	result1, local02
23c10     C9 74 02 F6 | 	mov	arg01, objptr
23c14     FA 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_opendir_
23c18     CC 16 B0 FD | 	call	#__system___make_methodptr
23c1c     04 8E 06 F1 | 	add	local02, #4
23c20     47 35 62 FC | 	wrlong	result1, local02
23c24     C9 74 02 F6 | 	mov	arg01, objptr
23c28     F2 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_closedir_
23c2c     B8 16 B0 FD | 	call	#__system___make_methodptr
23c30     04 8E 06 F1 | 	add	local02, #4
23c34     47 35 62 FC | 	wrlong	result1, local02
23c38     C9 74 02 F6 | 	mov	arg01, objptr
23c3c     FC 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_readdir_
23c40     A4 16 B0 FD | 	call	#__system___make_methodptr
23c44     04 8E 06 F1 | 	add	local02, #4
23c48     47 35 62 FC | 	wrlong	result1, local02
23c4c     C9 74 02 F6 | 	mov	arg01, objptr
23c50     00 77 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_stat_
23c54     90 16 B0 FD | 	call	#__system___make_methodptr
23c58     04 8E 06 F1 | 	add	local02, #4
23c5c     47 35 62 FC | 	wrlong	result1, local02
23c60     C9 74 02 F6 | 	mov	arg01, objptr
23c64     F8 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_mkdir_
23c68     7C 16 B0 FD | 	call	#__system___make_methodptr
23c6c     04 8E 06 F1 | 	add	local02, #4
23c70     47 35 62 FC | 	wrlong	result1, local02
23c74     C9 74 02 F6 | 	mov	arg01, objptr
23c78     FF 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_rmdir_
23c7c     68 16 B0 FD | 	call	#__system___make_methodptr
23c80     04 8E 06 F1 | 	add	local02, #4
23c84     47 35 62 FC | 	wrlong	result1, local02
23c88     C9 74 02 F6 | 	mov	arg01, objptr
23c8c     FD 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_remove_
23c90     54 16 B0 FD | 	call	#__system___make_methodptr
23c94     04 8E 06 F1 | 	add	local02, #4
23c98     47 35 62 FC | 	wrlong	result1, local02
23c9c     C9 74 02 F6 | 	mov	arg01, objptr
23ca0     FE 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_rename_
23ca4     40 16 B0 FD | 	call	#__system___make_methodptr
23ca8     04 8E 06 F1 | 	add	local02, #4
23cac     47 35 62 FC | 	wrlong	result1, local02
23cb0     C9 74 02 F6 | 	mov	arg01, objptr
23cb4     F5 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_init_
23cb8     2C 16 B0 FD | 	call	#__system___make_methodptr
23cbc     04 8E 06 F1 | 	add	local02, #4
23cc0     47 35 62 FC | 	wrlong	result1, local02
23cc4     C9 74 02 F6 | 	mov	arg01, objptr
23cc8     F4 76 02 F6 | 	mov	arg02, ptr__fatfs_cc_v_deinit_
23ccc     18 16 B0 FD | 	call	#__system___make_methodptr
23cd0     04 8E 06 F1 | 	add	local02, #4
23cd4     47 35 62 FC | 	wrlong	result1, local02
23cd8     4C 8E 86 F1 | 	sub	local02, #76
23cdc                 | ' 
23cdc                 | '     v->close = &v_close;
23cdc                 | '     v->read = &v_read;
23cdc                 | '     v->write = &v_write;
23cdc                 | '     v->lseek = &v_lseek;
23cdc                 | '     v->ioctl = &v_ioctl;
23cdc                 | '     v->flush = 0;
23cdc                 | '     v->vfs_data = ptr;
23cdc                 | '     v->reserved = 0;
23cdc                 | ' 
23cdc                 | '     v->open = &v_open;
23cdc                 | '     v->creat = &v_creat;
23cdc                 | '     v->opendir = &v_opendir;
23cdc                 | '     v->closedir = &v_closedir;
23cdc                 | '     v->readdir = &v_readdir;
23cdc                 | '     v->stat = &v_stat;
23cdc                 | ' 
23cdc                 | '     v->mkdir = &v_mkdir;
23cdc                 | '     v->rmdir = &v_rmdir;
23cdc                 | ' 
23cdc                 | '     v->remove = &v_remove;
23cdc                 | '     v->rename = &v_rename;
23cdc                 | ' 
23cdc                 | '     v->init = &v_init;
23cdc                 | '     v->deinit = &v_deinit;
23cdc                 | ' 
23cdc                 | '     return v;
23cdc     47 35 02 F6 | 	mov	result1, local02
23ce0     A8 F0 03 F6 | 	mov	ptra, fp
23ce4     B3 00 A0 FD | 	call	#popregs_
23ce8                 | _fatfs_cc_get_vfs_ret
23ce8     2D 00 64 FD | 	ret
23cec                 | 
23cec                 | _fatfs_cc_xmit_mmc_0398
23cec     08 92 05 F1 | 	add	objptr, #8
23cf0     C9 3A 02 FB | 	rdlong	_var01, objptr
23cf4     08 92 05 F1 | 	add	objptr, #8
23cf8     C9 3C 02 FB | 	rdlong	_var02, objptr
23cfc     10 92 85 F1 | 	sub	objptr, #16
23d00     40 3C 62 FD | 	dirl	_var02
23d04     28 02 64 FD | 	setq	#1
23d08     3A 3F 02 FB | 	rdlong	_var03, arg01
23d0c     69 3E 62 FD | 	rev	_var03
23d10     1B 3E FE F9 | 	movbyts	_var03, #27
23d14     1E 3F 22 FC | 	wypin	_var03, _var02
23d18     3B 3F 02 F6 | 	mov	_var03, arg02
23d1c     02 76 4E F0 | 	shr	arg02, #2 wz
23d20     03 3E 66 F0 | 	shl	_var03, #3
23d24     1D 3F 22 FC | 	wypin	_var03, _var01
23d28     41 3C 62 FD | 	dirh	_var02
23d2c     08 74 06 F1 | 	add	arg01, #8
23d30     69 40 62 FD | 	rev	_var04
23d34     1B 40 FE F9 | 	movbyts	_var04, #27
23d38                 | LR__1402
23d38     1E 41 22 5C |  if_ne	wypin	_var04, _var02
23d3c     3A 41 02 5B |  if_ne	rdlong	_var04, arg01
23d40     04 74 06 51 |  if_ne	add	arg01, #4
23d44     69 40 62 5D |  if_ne	rev	_var04
23d48     1B 40 FE 59 |  if_ne	movbyts	_var04, #27
23d4c                 | LR__1403
23d4c     40 3C 72 5D |  if_ne	testp	_var02 wc
23d50     F8 FF 9F 1D |  if_a	jmp	#LR__1403
23d54     F8 77 6E 5B |  if_ne	djnz	arg02, #LR__1402
23d58                 | LR__1404
23d58     40 3A 72 FD | 	testp	_var01 wc
23d5c     F8 FF 9F 3D |  if_ae	jmp	#LR__1404
23d60     40 3C 62 FD | 	dirl	_var02
23d64     FF FF FF FF 
23d68     1E FF 2B FC | 	wypin	##-1, _var02
23d6c     41 3C 62 FD | 	dirh	_var02
23d70                 | _fatfs_cc_xmit_mmc_0398_ret
23d70     2D 00 64 FD | 	ret
23d74                 | 
23d74                 | _fatfs_cc_rcvr_mmc_0405
23d74     08 92 05 F1 | 	add	objptr, #8
23d78     C9 3A 02 FB | 	rdlong	_var01, objptr
23d7c     0C 92 05 F1 | 	add	objptr, #12
23d80     C9 3C 02 FB | 	rdlong	_var02, objptr
23d84     14 92 85 F1 | 	sub	objptr, #20
23d88     1E 03 08 FC | 	akpin	_var02
23d8c     3B 3F 0A F6 | 	mov	_var03, arg02 wz
23d90     02 3E 4E F0 | 	shr	_var03, #2 wz
23d94     30 00 90 AD |  if_e	jmp	#LR__1407
23d98     1F 41 02 F6 | 	mov	_var04, _var03
23d9c     05 40 66 F0 | 	shl	_var04, #5
23da0     1D 41 22 FC | 	wypin	_var04, _var01
23da4     1E 7F 18 FC | 	wxpin	#63, _var02
23da8                 | LR__1405
23da8                 | LR__1406
23da8     40 3C 72 FD | 	testp	_var02 wc
23dac     F8 FF 9F 3D |  if_ae	jmp	#LR__1406
23db0     1E 41 8A FA | 	rdpin	_var04, _var02
23db4     69 40 62 FD | 	rev	_var04
23db8     1B 40 FE F9 | 	movbyts	_var04, #27
23dbc     3A 41 62 FC | 	wrlong	_var04, arg01
23dc0     04 74 06 F1 | 	add	arg01, #4
23dc4     F8 3F 6E FB | 	djnz	_var03, #LR__1405
23dc8                 | LR__1407
23dc8     03 76 0E F5 | 	and	arg02, #3 wz
23dcc     24 00 90 AD |  if_e	jmp	#LR__1410
23dd0     1E 4F 18 FC | 	wxpin	#39, _var02
23dd4                 | LR__1408
23dd4     1D 11 28 FC | 	wypin	#8, _var01
23dd8                 | LR__1409
23dd8     40 3C 72 FD | 	testp	_var02 wc
23ddc     F8 FF 9F 3D |  if_ae	jmp	#LR__1409
23de0     1E 41 8A FA | 	rdpin	_var04, _var02
23de4     69 40 62 FD | 	rev	_var04
23de8     3A 41 42 FC | 	wrbyte	_var04, arg01
23dec     01 74 06 F1 | 	add	arg01, #1
23df0     F8 77 6E FB | 	djnz	arg02, #LR__1408
23df4                 | LR__1410
23df4                 | _fatfs_cc_rcvr_mmc_0405_ret
23df4     2D 00 64 FD | 	ret
23df8                 | 
23df8                 | _fatfs_cc_wait_ready_0409
23df8     01 4C 05 F6 | 	mov	COUNT_, #1
23dfc     A9 00 A0 FD | 	call	#pushregs_
23e00     10 F0 07 F1 | 	add	ptra, #16
23e04     1A 34 62 FD | 	getct	result1
23e08     08 50 05 F1 | 	add	fp, #8
23e0c     A8 34 62 FC | 	wrlong	result1, fp
23e10     14 8C 06 FB | 	rdlong	local01, #20
23e14     01 8C 46 F0 | 	shr	local01, #1
23e18     04 50 05 F1 | 	add	fp, #4
23e1c     A8 8C 62 FC | 	wrlong	local01, fp
23e20     0C 50 85 F1 | 	sub	fp, #12
23e24                 | ' {
23e24                 | ' 	BYTE d;
23e24                 | ' 	UINT tmr, tmout;
23e24                 | ' 
23e24                 | ' 	tmr = _cnt();
23e24                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23e24                 | ' 	for(;;) {
23e24                 | LR__1411
23e24     04 50 05 F1 | 	add	fp, #4
23e28     A8 74 02 F6 | 	mov	arg01, fp
23e2c     04 50 85 F1 | 	sub	fp, #4
23e30     01 76 06 F6 | 	mov	arg02, #1
23e34     3C FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
23e38     04 50 05 F1 | 	add	fp, #4
23e3c     A8 8C C2 FA | 	rdbyte	local01, fp
23e40     04 50 85 F1 | 	sub	fp, #4
23e44     FF 8C 0E F2 | 	cmp	local01, #255 wz
23e48     01 34 06 A6 |  if_e	mov	result1, #1
23e4c     28 00 90 AD |  if_e	jmp	#LR__1412
23e50     1A 34 62 FD | 	getct	result1
23e54     08 50 05 F1 | 	add	fp, #8
23e58     A8 8C 02 FB | 	rdlong	local01, fp
23e5c     46 35 82 F1 | 	sub	result1, local01
23e60     04 50 05 F1 | 	add	fp, #4
23e64     A8 8C 02 FB | 	rdlong	local01, fp
23e68     0C 50 85 F1 | 	sub	fp, #12
23e6c     46 35 12 F2 | 	cmp	result1, local01 wc
23e70     00 34 06 36 |  if_ae	mov	result1, #0
23e74     AC FF 9F CD |  if_b	jmp	#LR__1411
23e78                 | LR__1412
23e78     A8 F0 03 F6 | 	mov	ptra, fp
23e7c     B3 00 A0 FD | 	call	#popregs_
23e80                 | _fatfs_cc_wait_ready_0409_ret
23e80     2D 00 64 FD | 	ret
23e84                 | 
23e84                 | _fatfs_cc_deselect_0415
23e84     00 4C 05 F6 | 	mov	COUNT_, #0
23e88     A9 00 A0 FD | 	call	#pushregs_
23e8c     14 F0 07 F1 | 	add	ptra, #20
23e90     0C 92 05 F1 | 	add	objptr, #12
23e94     C9 76 02 FB | 	rdlong	arg02, objptr
23e98     04 50 05 F1 | 	add	fp, #4
23e9c     A8 76 62 FC | 	wrlong	arg02, fp
23ea0     04 92 85 F1 | 	sub	objptr, #4
23ea4     C9 76 02 FB | 	rdlong	arg02, objptr
23ea8     04 50 05 F1 | 	add	fp, #4
23eac     A8 76 62 FC | 	wrlong	arg02, fp
23eb0     08 92 05 F1 | 	add	objptr, #8
23eb4     C9 76 02 FB | 	rdlong	arg02, objptr
23eb8     04 50 05 F1 | 	add	fp, #4
23ebc     A8 76 62 FC | 	wrlong	arg02, fp
23ec0     04 92 05 F1 | 	add	objptr, #4
23ec4     C9 76 02 FB | 	rdlong	arg02, objptr
23ec8     14 92 85 F1 | 	sub	objptr, #20
23ecc     04 50 05 F1 | 	add	fp, #4
23ed0     A8 76 62 FC | 	wrlong	arg02, fp
23ed4     0C 50 85 F1 | 	sub	fp, #12
23ed8     A8 74 02 FB | 	rdlong	arg01, fp
23edc     04 50 85 F1 | 	sub	fp, #4
23ee0     59 74 62 FD | 	drvh	arg01
23ee4     1F 20 64 FD | 	waitx	#16
23ee8     A8 74 02 F6 | 	mov	arg01, fp
23eec     01 76 06 F6 | 	mov	arg02, #1
23ef0     80 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
23ef4     A8 F0 03 F6 | 	mov	ptra, fp
23ef8     B3 00 A0 FD | 	call	#popregs_
23efc                 | _fatfs_cc_deselect_0415_ret
23efc     2D 00 64 FD | 	ret
23f00                 | 
23f00                 | _fatfs_cc_select_0419
23f00     00 4C 05 F6 | 	mov	COUNT_, #0
23f04     A9 00 A0 FD | 	call	#pushregs_
23f08     10 F0 07 F1 | 	add	ptra, #16
23f0c     0C 92 05 F1 | 	add	objptr, #12
23f10     C9 74 02 FB | 	rdlong	arg01, objptr
23f14     08 50 05 F1 | 	add	fp, #8
23f18     A8 74 62 FC | 	wrlong	arg01, fp
23f1c     08 92 05 F1 | 	add	objptr, #8
23f20     C9 74 02 FB | 	rdlong	arg01, objptr
23f24     14 92 85 F1 | 	sub	objptr, #20
23f28     04 50 05 F1 | 	add	fp, #4
23f2c     A8 74 62 FC | 	wrlong	arg01, fp
23f30     50 74 62 FD | 	fltl	arg01
23f34     04 50 85 F1 | 	sub	fp, #4
23f38     A8 74 02 FB | 	rdlong	arg01, fp
23f3c     58 74 62 FD | 	drvl	arg01
23f40     1F 20 64 FD | 	waitx	#16
23f44     04 50 05 F1 | 	add	fp, #4
23f48     A8 74 02 FB | 	rdlong	arg01, fp
23f4c     41 74 62 FD | 	dirh	arg01
23f50     08 50 85 F1 | 	sub	fp, #8
23f54     A8 74 02 F6 | 	mov	arg01, fp
23f58     04 50 85 F1 | 	sub	fp, #4
23f5c     01 76 06 F6 | 	mov	arg02, #1
23f60     10 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
23f64     90 FE BF FD | 	call	#_fatfs_cc_wait_ready_0409
23f68     00 34 0E F2 | 	cmp	result1, #0 wz
23f6c     01 34 06 56 |  if_ne	mov	result1, #1
23f70     08 00 90 5D |  if_ne	jmp	#LR__1413
23f74     0C FF BF FD | 	call	#_fatfs_cc_deselect_0415
23f78                 | ' 
23f78                 | ' 	deselect();
23f78                 | ' 	return 0;
23f78     00 34 06 F6 | 	mov	result1, #0
23f7c                 | LR__1413
23f7c     A8 F0 03 F6 | 	mov	ptra, fp
23f80     B3 00 A0 FD | 	call	#popregs_
23f84                 | _fatfs_cc_select_0419_ret
23f84     2D 00 64 FD | 	ret
23f88                 | 
23f88                 | _fatfs_cc_rcvr_datablock_0423
23f88     01 4C 05 F6 | 	mov	COUNT_, #1
23f8c     A9 00 A0 FD | 	call	#pushregs_
23f90     18 F0 07 F1 | 	add	ptra, #24
23f94     04 50 05 F1 | 	add	fp, #4
23f98     A8 74 62 FC | 	wrlong	arg01, fp
23f9c     04 50 05 F1 | 	add	fp, #4
23fa0     A8 76 62 FC | 	wrlong	arg02, fp
23fa4     1A 34 62 FD | 	getct	result1
23fa8     08 50 05 F1 | 	add	fp, #8
23fac     A8 34 62 FC | 	wrlong	result1, fp
23fb0     14 8C 06 FB | 	rdlong	local01, #20
23fb4     03 8C 46 F0 | 	shr	local01, #3
23fb8     04 50 05 F1 | 	add	fp, #4
23fbc     A8 8C 62 FC | 	wrlong	local01, fp
23fc0     14 50 85 F1 | 	sub	fp, #20
23fc4                 | ' 	BYTE *buff,
23fc4                 | ' 	UINT btr
23fc4                 | ' )
23fc4                 | ' {
23fc4                 | ' 	BYTE d[2];
23fc4                 | ' 	UINT tmr, tmout;
23fc4                 | ' 
23fc4                 | ' 	tmr = _cnt();
23fc4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
23fc4                 | ' 	for(;;) {
23fc4                 | LR__1414
23fc4     0C 50 05 F1 | 	add	fp, #12
23fc8     A8 74 02 F6 | 	mov	arg01, fp
23fcc     0C 50 85 F1 | 	sub	fp, #12
23fd0     01 76 06 F6 | 	mov	arg02, #1
23fd4     9C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
23fd8     0C 50 05 F1 | 	add	fp, #12
23fdc     A8 8C C2 FA | 	rdbyte	local01, fp
23fe0     0C 50 85 F1 | 	sub	fp, #12
23fe4     FF 8C 0E F2 | 	cmp	local01, #255 wz
23fe8     28 00 90 5D |  if_ne	jmp	#LR__1415
23fec     1A 34 62 FD | 	getct	result1
23ff0     1A 8D 02 F6 | 	mov	local01, result1
23ff4     10 50 05 F1 | 	add	fp, #16
23ff8     A8 76 02 FB | 	rdlong	arg02, fp
23ffc     3B 8D 82 F1 | 	sub	local01, arg02
24000     04 50 05 F1 | 	add	fp, #4
24004     A8 76 02 FB | 	rdlong	arg02, fp
24008     14 50 85 F1 | 	sub	fp, #20
2400c     3B 8D 12 F2 | 	cmp	local01, arg02 wc
24010     B0 FF 9F CD |  if_b	jmp	#LR__1414
24014                 | LR__1415
24014     0C 50 05 F1 | 	add	fp, #12
24018     A8 8C C2 FA | 	rdbyte	local01, fp
2401c     0C 50 85 F1 | 	sub	fp, #12
24020     FE 8C 0E F2 | 	cmp	local01, #254 wz
24024     00 34 06 56 |  if_ne	mov	result1, #0
24028     30 00 90 5D |  if_ne	jmp	#LR__1416
2402c     04 50 05 F1 | 	add	fp, #4
24030     A8 74 02 FB | 	rdlong	arg01, fp
24034     04 50 05 F1 | 	add	fp, #4
24038     A8 76 02 FB | 	rdlong	arg02, fp
2403c     08 50 85 F1 | 	sub	fp, #8
24040     30 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
24044     0C 50 05 F1 | 	add	fp, #12
24048     A8 74 02 F6 | 	mov	arg01, fp
2404c     0C 50 85 F1 | 	sub	fp, #12
24050     02 76 06 F6 | 	mov	arg02, #2
24054     1C FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
24058                 | ' 
24058                 | ' 	rcvr_mmc(buff, btr);
24058                 | ' 	rcvr_mmc(d, 2);
24058                 | ' 
24058                 | ' 	return 1;
24058     01 34 06 F6 | 	mov	result1, #1
2405c                 | LR__1416
2405c     A8 F0 03 F6 | 	mov	ptra, fp
24060     B3 00 A0 FD | 	call	#popregs_
24064                 | _fatfs_cc_rcvr_datablock_0423_ret
24064     2D 00 64 FD | 	ret
24068                 | 
24068                 | _fatfs_cc_xmit_datablock_0425
24068     00 4C 05 F6 | 	mov	COUNT_, #0
2406c     A9 00 A0 FD | 	call	#pushregs_
24070     10 F0 07 F1 | 	add	ptra, #16
24074     04 50 05 F1 | 	add	fp, #4
24078     A8 74 62 FC | 	wrlong	arg01, fp
2407c     04 50 05 F1 | 	add	fp, #4
24080     A8 76 42 FC | 	wrbyte	arg02, fp
24084     08 50 85 F1 | 	sub	fp, #8
24088     6C FD BF FD | 	call	#_fatfs_cc_wait_ready_0409
2408c     00 34 0E F2 | 	cmp	result1, #0 wz
24090     00 34 06 A6 |  if_e	mov	result1, #0
24094     90 00 90 AD |  if_e	jmp	#LR__1418
24098     08 50 05 F1 | 	add	fp, #8
2409c     A8 76 C2 FA | 	rdbyte	arg02, fp
240a0     04 50 05 F1 | 	add	fp, #4
240a4     A8 76 42 FC | 	wrbyte	arg02, fp
240a8     A8 74 02 F6 | 	mov	arg01, fp
240ac     0C 50 85 F1 | 	sub	fp, #12
240b0     01 76 06 F6 | 	mov	arg02, #1
240b4     34 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0398
240b8     08 50 05 F1 | 	add	fp, #8
240bc     A8 76 C2 FA | 	rdbyte	arg02, fp
240c0     08 50 85 F1 | 	sub	fp, #8
240c4     FD 76 0E F2 | 	cmp	arg02, #253 wz
240c8     58 00 90 AD |  if_e	jmp	#LR__1417
240cc     04 50 05 F1 | 	add	fp, #4
240d0     A8 74 02 FB | 	rdlong	arg01, fp
240d4     04 50 85 F1 | 	sub	fp, #4
240d8     09 76 C6 F9 | 	decod	arg02, #9
240dc     0C FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0398
240e0     0C 50 05 F1 | 	add	fp, #12
240e4     A8 74 02 F6 | 	mov	arg01, fp
240e8     0C 50 85 F1 | 	sub	fp, #12
240ec     02 76 06 F6 | 	mov	arg02, #2
240f0     80 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
240f4     0C 50 05 F1 | 	add	fp, #12
240f8     A8 74 02 F6 | 	mov	arg01, fp
240fc     0C 50 85 F1 | 	sub	fp, #12
24100     01 76 06 F6 | 	mov	arg02, #1
24104     6C FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
24108     0C 50 05 F1 | 	add	fp, #12
2410c     A8 76 C2 FA | 	rdbyte	arg02, fp
24110     0C 50 85 F1 | 	sub	fp, #12
24114     1F 76 06 F5 | 	and	arg02, #31
24118     05 76 0E F2 | 	cmp	arg02, #5 wz
2411c                 | ' 			return 0;
2411c     00 34 06 56 |  if_ne	mov	result1, #0
24120     04 00 90 5D |  if_ne	jmp	#LR__1418
24124                 | LR__1417
24124                 | ' 	}
24124                 | ' 
24124                 | ' 	return 1;
24124     01 34 06 F6 | 	mov	result1, #1
24128                 | LR__1418
24128     A8 F0 03 F6 | 	mov	ptra, fp
2412c     B3 00 A0 FD | 	call	#popregs_
24130                 | _fatfs_cc_xmit_datablock_0425_ret
24130     2D 00 64 FD | 	ret
24134                 | 
24134                 | _fatfs_cc_send_cmd_0429
24134     01 4C 05 F6 | 	mov	COUNT_, #1
24138     A9 00 A0 FD | 	call	#pushregs_
2413c     1C F0 07 F1 | 	add	ptra, #28
24140                 | _fatfs_cc_send_cmd_0429_enter
24140     04 50 05 F1 | 	add	fp, #4
24144     A8 74 42 FC | 	wrbyte	arg01, fp
24148     04 50 05 F1 | 	add	fp, #4
2414c     A8 76 62 FC | 	wrlong	arg02, fp
24150     04 50 85 F1 | 	sub	fp, #4
24154     A8 34 C2 FA | 	rdbyte	result1, fp
24158     04 50 85 F1 | 	sub	fp, #4
2415c     80 34 CE F7 | 	test	result1, #128 wz
24160     44 00 90 AD |  if_e	jmp	#LR__1419
24164     04 50 05 F1 | 	add	fp, #4
24168     A8 76 C2 FA | 	rdbyte	arg02, fp
2416c     7F 76 06 F5 | 	and	arg02, #127
24170     A8 76 42 FC | 	wrbyte	arg02, fp
24174     04 50 85 F1 | 	sub	fp, #4
24178     37 74 06 F6 | 	mov	arg01, #55
2417c     00 76 06 F6 | 	mov	arg02, #0
24180     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0429
24184     0C 50 05 F1 | 	add	fp, #12
24188     A8 34 42 FC | 	wrbyte	result1, fp
2418c     A8 8C C2 FA | 	rdbyte	local01, fp
24190     0C 50 85 F1 | 	sub	fp, #12
24194     02 8C 16 F2 | 	cmp	local01, #2 wc
24198     0C 50 05 31 |  if_ae	add	fp, #12
2419c     A8 34 C2 3A |  if_ae	rdbyte	result1, fp
241a0     0C 50 85 31 |  if_ae	sub	fp, #12
241a4     70 01 90 3D |  if_ae	jmp	#LR__1423
241a8                 | LR__1419
241a8     04 50 05 F1 | 	add	fp, #4
241ac     A8 8C C2 FA | 	rdbyte	local01, fp
241b0     04 50 85 F1 | 	sub	fp, #4
241b4     0C 8C 0E F2 | 	cmp	local01, #12 wz
241b8     14 00 90 AD |  if_e	jmp	#LR__1420
241bc     C4 FC BF FD | 	call	#_fatfs_cc_deselect_0415
241c0     3C FD BF FD | 	call	#_fatfs_cc_select_0419
241c4     00 34 0E F2 | 	cmp	result1, #0 wz
241c8     FF 34 06 A6 |  if_e	mov	result1, #255
241cc     48 01 90 AD |  if_e	jmp	#LR__1423
241d0                 | LR__1420
241d0     04 50 05 F1 | 	add	fp, #4
241d4     A8 76 C2 FA | 	rdbyte	arg02, fp
241d8     40 8C 06 F6 | 	mov	local01, #64
241dc     3B 8D 42 F5 | 	or	local01, arg02
241e0     10 50 05 F1 | 	add	fp, #16
241e4     A8 8C 42 FC | 	wrbyte	local01, fp
241e8     0C 50 85 F1 | 	sub	fp, #12
241ec     A8 8C 02 FB | 	rdlong	local01, fp
241f0     18 8C 46 F0 | 	shr	local01, #24
241f4     0D 50 05 F1 | 	add	fp, #13
241f8     A8 8C 42 FC | 	wrbyte	local01, fp
241fc     0D 50 85 F1 | 	sub	fp, #13
24200     A8 8C 02 FB | 	rdlong	local01, fp
24204     10 8C 46 F0 | 	shr	local01, #16
24208     0E 50 05 F1 | 	add	fp, #14
2420c     A8 8C 42 FC | 	wrbyte	local01, fp
24210     0E 50 85 F1 | 	sub	fp, #14
24214     A8 8C 02 FB | 	rdlong	local01, fp
24218     08 8C 46 F0 | 	shr	local01, #8
2421c     0F 50 05 F1 | 	add	fp, #15
24220     A8 8C 42 FC | 	wrbyte	local01, fp
24224     0F 50 85 F1 | 	sub	fp, #15
24228     A8 8C 02 FB | 	rdlong	local01, fp
2422c     10 50 05 F1 | 	add	fp, #16
24230     A8 8C 42 FC | 	wrbyte	local01, fp
24234     0C 50 85 F1 | 	sub	fp, #12
24238     A8 02 48 FC | 	wrbyte	#1, fp
2423c     08 50 85 F1 | 	sub	fp, #8
24240     A8 8C C2 FA | 	rdbyte	local01, fp
24244     04 50 85 F1 | 	sub	fp, #4
24248     07 8C 4E F7 | 	zerox	local01, #7 wz
2424c     0C 50 05 A1 |  if_e	add	fp, #12
24250     A8 2A 49 AC |  if_e	wrbyte	#149, fp
24254     0C 50 85 A1 |  if_e	sub	fp, #12
24258     04 50 05 F1 | 	add	fp, #4
2425c     A8 8C C2 FA | 	rdbyte	local01, fp
24260     04 50 85 F1 | 	sub	fp, #4
24264     08 8C 0E F2 | 	cmp	local01, #8 wz
24268     0C 50 05 A1 |  if_e	add	fp, #12
2426c     A8 0E 49 AC |  if_e	wrbyte	#135, fp
24270     0C 50 85 A1 |  if_e	sub	fp, #12
24274     0C 50 05 F1 | 	add	fp, #12
24278     A8 8C C2 FA | 	rdbyte	local01, fp
2427c     0D 50 05 F1 | 	add	fp, #13
24280     A8 8C 42 FC | 	wrbyte	local01, fp
24284     05 50 85 F1 | 	sub	fp, #5
24288     A8 74 02 F6 | 	mov	arg01, fp
2428c     14 50 85 F1 | 	sub	fp, #20
24290     06 76 06 F6 | 	mov	arg02, #6
24294     54 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0398
24298     04 50 05 F1 | 	add	fp, #4
2429c     A8 8C C2 FA | 	rdbyte	local01, fp
242a0     04 50 85 F1 | 	sub	fp, #4
242a4     0C 8C 0E F2 | 	cmp	local01, #12 wz
242a8     10 50 05 A1 |  if_e	add	fp, #16
242ac     A8 74 02 A6 |  if_e	mov	arg01, fp
242b0     10 50 85 A1 |  if_e	sub	fp, #16
242b4     01 76 06 A6 |  if_e	mov	arg02, #1
242b8     B8 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0405
242bc     0C 50 05 F1 | 	add	fp, #12
242c0     A8 14 48 FC | 	wrbyte	#10, fp
242c4     0C 50 85 F1 | 	sub	fp, #12
242c8                 | ' 	n = 10;
242c8                 | ' 	do
242c8                 | LR__1421
242c8     10 50 05 F1 | 	add	fp, #16
242cc     A8 74 02 F6 | 	mov	arg01, fp
242d0     10 50 85 F1 | 	sub	fp, #16
242d4     01 76 06 F6 | 	mov	arg02, #1
242d8     98 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0405
242dc     10 50 05 F1 | 	add	fp, #16
242e0     A8 8C C2 FA | 	rdbyte	local01, fp
242e4     10 50 85 F1 | 	sub	fp, #16
242e8     80 8C CE F7 | 	test	local01, #128 wz
242ec     1C 00 90 AD |  if_e	jmp	#LR__1422
242f0     0C 50 05 F1 | 	add	fp, #12
242f4     A8 8C C2 FA | 	rdbyte	local01, fp
242f8     01 8C 86 F1 | 	sub	local01, #1
242fc     A8 8C 42 FC | 	wrbyte	local01, fp
24300     A8 8C CA FA | 	rdbyte	local01, fp wz
24304     0C 50 85 F1 | 	sub	fp, #12
24308     BC FF 9F 5D |  if_ne	jmp	#LR__1421
2430c                 | LR__1422
2430c                 | ' 
2430c                 | ' 	return d;
2430c     10 50 05 F1 | 	add	fp, #16
24310     A8 34 C2 FA | 	rdbyte	result1, fp
24314     10 50 85 F1 | 	sub	fp, #16
24318                 | LR__1423
24318     A8 F0 03 F6 | 	mov	ptra, fp
2431c     B3 00 A0 FD | 	call	#popregs_
24320                 | _fatfs_cc_send_cmd_0429_ret
24320     2D 00 64 FD | 	ret
24324                 | 
24324                 | _fatfs_cc_gettimeofday
24324     04 4C 05 F6 | 	mov	COUNT_, #4
24328     A9 00 A0 FD | 	call	#pushregs_
2432c     3A 8D 02 F6 | 	mov	local01, arg01
24330     74 0E B0 FD | 	call	#__system___getus
24334     1A 75 02 F6 | 	mov	arg01, result1
24338     02 00 00 FF 
2433c     64 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1124
24340     F0 8E 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24344     3A 35 02 F6 | 	mov	result1, arg01
24348     47 35 82 F1 | 	sub	result1, local02
2434c     A1 07 00 FF 
24350     40 34 16 FD | 	qdiv	result1, ##1000000
24354     02 00 00 FF 
24358     64 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1124
2435c     18 8E 62 FD | 	getqx	local02
24360     A1 07 00 FF 
24364     40 34 16 FD | 	qdiv	result1, ##1000000
24368     00 8E 0E F2 | 	cmp	local02, #0 wz
2436c     19 90 62 FD | 	getqy	local03
24370     28 00 90 AD |  if_e	jmp	#LR__1424
24374     02 00 00 FF 
24378     60 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1120
2437c     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24380     47 93 02 F1 | 	add	local04, local02
24384     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24388     48 75 82 F1 | 	sub	arg01, local03
2438c     04 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
24390     F0 74 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24394     02 00 00 FF 
24398     64 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1124
2439c                 | LR__1424
2439c     02 00 00 FF 
243a0     60 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1120
243a4     F0 92 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
243a8     02 00 00 FF 
243ac     60 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1120
243b0     46 93 62 FC | 	wrlong	local04, local01
243b4     04 8C 06 F1 | 	add	local01, #4
243b8     46 91 62 FC | 	wrlong	local03, local01
243bc                 | '         lastsec += secs;
243bc                 | '         lastus = now - leftover;
243bc                 | '     }
243bc                 | '     tv->tv_sec = lastsec;
243bc                 | '     tv->tv_usec = leftover;
243bc                 | '     return 0;
243bc     00 34 06 F6 | 	mov	result1, #0
243c0     A8 F0 03 F6 | 	mov	ptra, fp
243c4     B3 00 A0 FD | 	call	#popregs_
243c8                 | _fatfs_cc_gettimeofday_ret
243c8     2D 00 64 FD | 	ret
243cc                 | 
243cc                 | _fatfs_cc___getftab
243cc     0A 74 16 F2 | 	cmp	arg01, #10 wc
243d0                 | '         return 0;
243d0     00 34 06 36 |  if_ae	mov	result1, #0
243d4     24 00 90 3D |  if_ae	jmp	#_fatfs_cc___getftab_ret
243d8                 | '     }
243d8                 | '     return &__filetab[i];
243d8     3A 35 02 F6 | 	mov	result1, arg01
243dc     01 34 66 F0 | 	shl	result1, #1
243e0     3A 35 02 F1 | 	add	result1, arg01
243e4     04 34 66 F0 | 	shl	result1, #4
243e8     01 00 00 FF 
243ec     18 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##536
243f0     F0 34 02 F1 | 	add	result1, ptr__fatfs_cc_dat__
243f4     01 00 00 FF 
243f8     18 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##536
243fc                 | _fatfs_cc___getftab_ret
243fc     2D 00 64 FD | 	ret
24400                 | 
24400                 | _fatfs_cc_rename
24400     03 4C 05 F6 | 	mov	COUNT_, #3
24404     A9 00 A0 FD | 	call	#pushregs_
24408     1C F1 07 F1 | 	add	ptra, #284
2440c     04 50 05 F1 | 	add	fp, #4
24410     A8 74 62 FC | 	wrlong	arg01, fp
24414     04 50 05 F1 | 	add	fp, #4
24418     A8 76 62 FC | 	wrlong	arg02, fp
2441c     7C A3 05 F1 | 	add	ptr___system__dat__, #380
24420     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
24424     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
24428     10 50 05 F1 | 	add	fp, #16
2442c     A8 74 62 FC | 	wrlong	arg01, fp
24430     14 50 85 F1 | 	sub	fp, #20
24434     A8 76 02 FB | 	rdlong	arg02, fp
24438     04 50 85 F1 | 	sub	fp, #4
2443c     00 78 06 F6 | 	mov	arg03, #0
24440     C0 10 B0 FD | 	call	#__system____getvfsforfile
24444     10 50 05 F1 | 	add	fp, #16
24448     A8 34 62 FC | 	wrlong	result1, fp
2444c     00 34 4E F2 | 	cmps	result1, #0 wz
24450     10 50 85 F1 | 	sub	fp, #16
24454     18 00 90 AD |  if_e	jmp	#LR__1425
24458     10 50 05 F1 | 	add	fp, #16
2445c     A8 78 02 FB | 	rdlong	arg03, fp
24460     10 50 85 F1 | 	sub	fp, #16
24464     44 78 06 F1 | 	add	arg03, #68
24468     3C 79 0A FB | 	rdlong	arg03, arg03 wz
2446c     14 00 90 5D |  if_ne	jmp	#LR__1426
24470                 | LR__1425
24470                 | '         return _seterror( 16 );
24470     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24474     D1 20 68 FC | 	wrlong	#16, ptr___system__dat__
24478     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
2447c     01 34 66 F6 | 	neg	result1, #1
24480     AC 00 90 FD | 	jmp	#LR__1427
24484                 | LR__1426
24484     1C 50 05 F1 | 	add	fp, #28
24488     A8 74 02 F6 | 	mov	arg01, fp
2448c     14 50 85 F1 | 	sub	fp, #20
24490     A8 76 02 FB | 	rdlong	arg02, fp
24494     08 50 85 F1 | 	sub	fp, #8
24498     00 78 06 F6 | 	mov	arg03, #0
2449c     64 10 B0 FD | 	call	#__system____getvfsforfile
244a0     14 50 05 F1 | 	add	fp, #20
244a4     A8 34 62 FC | 	wrlong	result1, fp
244a8     04 50 85 F1 | 	sub	fp, #4
244ac     A8 74 02 FB | 	rdlong	arg01, fp
244b0     10 50 85 F1 | 	sub	fp, #16
244b4     3A 35 0A F2 | 	cmp	result1, arg01 wz
244b8                 | '         return _seterror( 23 );
244b8     18 A2 05 51 |  if_ne	add	ptr___system__dat__, #24
244bc     D1 2E 68 5C |  if_ne	wrlong	#23, ptr___system__dat__
244c0     18 A2 85 51 |  if_ne	sub	ptr___system__dat__, #24
244c4     01 34 66 56 |  if_ne	neg	result1, #1
244c8     64 00 90 5D |  if_ne	jmp	#LR__1427
244cc     10 50 05 F1 | 	add	fp, #16
244d0     A8 8C 02 FB | 	rdlong	local01, fp
244d4     44 8C 06 F1 | 	add	local01, #68
244d8     46 8D 02 FB | 	rdlong	local01, local01
244dc     46 8F 02 FB | 	rdlong	local02, local01
244e0     04 8C 06 F1 | 	add	local01, #4
244e4     46 8D 02 FB | 	rdlong	local01, local01
244e8     08 50 05 F1 | 	add	fp, #8
244ec     A8 74 02 FB | 	rdlong	arg01, fp
244f0     04 50 05 F1 | 	add	fp, #4
244f4     A8 76 02 F6 | 	mov	arg02, fp
244f8     1C 50 85 F1 | 	sub	fp, #28
244fc     C9 90 02 F6 | 	mov	local03, objptr
24500     47 93 01 F6 | 	mov	objptr, local02
24504     2D 8C 62 FD | 	call	local01
24508     48 93 01 F6 | 	mov	objptr, local03
2450c     0C 50 05 F1 | 	add	fp, #12
24510     A8 34 62 FC | 	wrlong	result1, fp
24514                 | '     }
24514                 | '     r = (v->rename)(oldname, newname);
24514                 | '     return _seterror(r);
24514     1A 75 0A F6 | 	mov	arg01, result1 wz
24518     0C 50 85 F1 | 	sub	fp, #12
2451c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24520     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
24524     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24528     01 34 66 56 |  if_ne	neg	result1, #1
2452c     00 34 06 A6 |  if_e	mov	result1, #0
24530                 | LR__1427
24530     A8 F0 03 F6 | 	mov	ptra, fp
24534     B3 00 A0 FD | 	call	#popregs_
24538                 | _fatfs_cc_rename_ret
24538     2D 00 64 FD | 	ret
2453c                 | 
2453c                 | _fatfs_cc__is_leap_year
2453c     3A 35 52 F6 | 	abs	result1, arg01 wc
24540     03 34 06 F5 | 	and	result1, #3
24544     1A 35 8A F6 | 	negc	result1, result1 wz
24548     38 00 90 5D |  if_ne	jmp	#LR__1429
2454c     3A 35 52 F6 | 	abs	result1, arg01 wc
24550     64 34 16 FD | 	qdiv	result1, #100
24554     19 34 62 FD | 	getqy	result1
24558     1A 35 8A F6 | 	negc	result1, result1 wz
2455c     1C 00 90 5D |  if_ne	jmp	#LR__1428
24560     3A 35 52 F6 | 	abs	result1, arg01 wc
24564     90 35 16 FD | 	qdiv	result1, #400
24568                 | '       return (0 == y % 400);
24568     00 34 06 F6 | 	mov	result1, #0
2456c     19 3A 62 FD | 	getqy	_var01
24570     1D 3B 8A F6 | 	negc	_var01, _var01 wz
24574     01 34 06 A6 |  if_e	mov	result1, #1
24578     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2457c                 | LR__1428
2457c                 | '     return 1;
2457c     01 34 06 F6 | 	mov	result1, #1
24580     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24584                 | LR__1429
24584                 | '   }
24584                 | '   return 0;
24584     00 34 06 F6 | 	mov	result1, #0
24588                 | _fatfs_cc__is_leap_year_ret
24588     2D 00 64 FD | 	ret
2458c                 | 
2458c                 | _fatfs_cc___tzoffset
2458c     0A 4C 05 F6 | 	mov	COUNT_, #10
24590     A9 00 A0 FD | 	call	#pushregs_
24594     3A 8D 0A F6 | 	mov	local01, arg01 wz
24598     3B 8F 02 F6 | 	mov	local02, arg02
2459c     FF FF FF FF 
245a0     47 FF 6B FC | 	wrlong	##-1, local02
245a4     01 90 06 F6 | 	mov	local03, #1
245a8     46 93 CA 5A |  if_ne	rdbyte	local04, local01 wz
245ac                 | '                 return 0;
245ac     00 34 06 A6 |  if_e	mov	result1, #0
245b0     7C 02 90 AD |  if_e	jmp	#LR__1447
245b4     47 01 68 FC | 	wrlong	#0, local02
245b8     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
245bc     F0 94 02 F6 | 	mov	local05, ptr__fatfs_cc_dat__
245c0                 | ' 
245c0                 | '        *hasdst = 0;
245c0                 | ' 
245c0                 | ' 	n = stdname;
245c0                 | '         while (*s && isalpha(*s)) {
245c0     F8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #504
245c4     88 BA 9D FE | 	loc	pa,	#(@LR__1431-@LR__1430)
245c8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
245cc                 | LR__1430
245cc     46 93 CA FA | 	rdbyte	local04, local01 wz
245d0     48 00 90 AD |  if_e	jmp	#LR__1432
245d4     46 75 C2 FA | 	rdbyte	arg01, local01
245d8                 | ' {
245d8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
245d8     80 74 36 F3 | 	fle	arg01, #128 wc
245dc                 | '     return __ctype[c];
245dc     02 00 00 FF 
245e0     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
245e4     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
245e8     3A 35 C2 FA | 	rdbyte	result1, arg01
245ec     02 00 00 FF 
245f0     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
245f4     0C 34 CE F7 | 	test	result1, #12 wz
245f8     20 00 90 AD |  if_e	jmp	#LR__1432
245fc     46 97 02 F6 | 	mov	local06, local01
24600     46 99 02 F6 | 	mov	local07, local01
24604     01 98 06 F1 | 	add	local07, #1
24608     4B 9B C2 FA | 	rdbyte	local08, local06
2460c     4C 8D 02 F6 | 	mov	local01, local07
24610     4A 9B 42 FC | 	wrbyte	local08, local05
24614     01 94 06 F1 | 	add	local05, #1
24618     B0 FF 9F FD | 	jmp	#LR__1430
2461c                 | LR__1431
2461c                 | LR__1432
2461c     4A 01 48 FC | 	wrbyte	#0, local05
24620     00 9C 06 F6 | 	mov	local09, #0
24624     46 93 C2 FA | 	rdbyte	local04, local01
24628     2D 92 0E F2 | 	cmp	local04, #45 wz
2462c     01 90 66 A6 |  if_e	neg	local03, #1
24630     01 8C 06 A1 |  if_e	add	local01, #1
24634     18 BA 9D FE | 	loc	pa,	#(@LR__1434-@LR__1433)
24638     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2463c                 | '                 sgn = -1;
2463c                 | '                 s++;
2463c                 | '         }
2463c                 | '         while (isdigit(*s)) {
2463c                 | LR__1433
2463c     46 75 C2 FA | 	rdbyte	arg01, local01
24640                 | ' {
24640                 | '   return  (__ctype_get(c) & 0x02 ) ;
24640     80 74 36 F3 | 	fle	arg01, #128 wc
24644                 | '     return __ctype[c];
24644     02 00 00 FF 
24648     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
2464c     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24650     3A 35 C2 FA | 	rdbyte	result1, arg01
24654     02 00 00 FF 
24658     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
2465c     02 34 CE F7 | 	test	result1, #2 wz
24660     28 00 90 AD |  if_e	jmp	#LR__1435
24664     4E 93 02 F6 | 	mov	local04, local09
24668     02 92 66 F0 | 	shl	local04, #2
2466c     4E 93 02 F1 | 	add	local04, local09
24670     01 92 66 F0 | 	shl	local04, #1
24674     46 97 C2 FA | 	rdbyte	local06, local01
24678     30 96 86 F1 | 	sub	local06, #48
2467c     4B 93 02 F1 | 	add	local04, local06
24680     49 9D 02 F6 | 	mov	local09, local04
24684     01 8C 06 F1 | 	add	local01, #1
24688     B0 FF 9F FD | 	jmp	#LR__1433
2468c                 | LR__1434
2468c                 | LR__1435
2468c     07 00 00 FF 
24690     10 9C 06 FD | 	qmul	local09, ##3600
24694     46 93 C2 FA | 	rdbyte	local04, local01
24698     3A 92 0E F2 | 	cmp	local04, #58 wz
2469c     18 9E 62 FD | 	getqx	local10
246a0     74 00 90 5D |  if_ne	jmp	#LR__1439
246a4     00 9C 06 F6 | 	mov	local09, #0
246a8     01 8C 06 F1 | 	add	local01, #1
246ac     A0 B9 9D FE | 	loc	pa,	#(@LR__1437-@LR__1436)
246b0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
246b4                 | '                 x = 0;
246b4                 | '                 s++;
246b4                 | '                 while (isdigit(*s)) {
246b4                 | LR__1436
246b4     46 75 C2 FA | 	rdbyte	arg01, local01
246b8                 | ' {
246b8                 | '   return  (__ctype_get(c) & 0x02 ) ;
246b8     80 74 36 F3 | 	fle	arg01, #128 wc
246bc                 | '     return __ctype[c];
246bc     02 00 00 FF 
246c0     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
246c4     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
246c8     3A 35 C2 FA | 	rdbyte	result1, arg01
246cc     02 00 00 FF 
246d0     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
246d4     02 34 CE F7 | 	test	result1, #2 wz
246d8     28 00 90 AD |  if_e	jmp	#LR__1438
246dc     4E 93 02 F6 | 	mov	local04, local09
246e0     02 92 66 F0 | 	shl	local04, #2
246e4     4E 93 02 F1 | 	add	local04, local09
246e8     01 92 66 F0 | 	shl	local04, #1
246ec     46 97 C2 FA | 	rdbyte	local06, local01
246f0     30 96 86 F1 | 	sub	local06, #48
246f4     4B 93 02 F1 | 	add	local04, local06
246f8     49 9D 02 F6 | 	mov	local09, local04
246fc     01 8C 06 F1 | 	add	local01, #1
24700     B0 FF 9F FD | 	jmp	#LR__1436
24704                 | LR__1437
24704                 | LR__1438
24704     4E 9B 02 F6 | 	mov	local08, local09
24708     04 9A 66 F0 | 	shl	local08, #4
2470c     4E 9B 82 F1 | 	sub	local08, local09
24710     02 9A 66 F0 | 	shl	local08, #2
24714     4D 9F 02 F1 | 	add	local10, local08
24718                 | LR__1439
24718     01 00 00 FF 
2471c     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
24720     F0 94 02 F6 | 	mov	local05, ptr__fatfs_cc_dat__
24724     46 75 C2 FA | 	rdbyte	arg01, local01
24728                 | ' {
24728                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24728     80 74 36 F3 | 	fle	arg01, #128 wc
2472c                 | '     return __ctype[c];
2472c     01 00 00 FF 
24730     67 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##615
24734     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24738     3A 35 C2 FA | 	rdbyte	result1, arg01
2473c     02 00 00 FF 
24740     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
24744     0C 34 CE F7 | 	test	result1, #12 wz
24748     50 00 90 AD |  if_e	jmp	#LR__1442
2474c     47 03 68 FC | 	wrlong	#1, local02
24750                 | '                 *hasdst = 1;
24750                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24750                 | LR__1440
24750     46 93 CA FA | 	rdbyte	local04, local01 wz
24754     44 00 90 AD |  if_e	jmp	#LR__1441
24758     46 75 C2 FA | 	rdbyte	arg01, local01
2475c                 | ' {
2475c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2475c     80 74 36 F3 | 	fle	arg01, #128 wc
24760                 | '     return __ctype[c];
24760     02 00 00 FF 
24764     68 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1128
24768     F0 74 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2476c     3A 35 C2 FA | 	rdbyte	result1, arg01
24770     02 00 00 FF 
24774     68 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1128
24778     0C 34 CE F7 | 	test	result1, #12 wz
2477c     1C 00 90 AD |  if_e	jmp	#LR__1441
24780     46 99 02 F6 | 	mov	local07, local01
24784     01 98 06 F1 | 	add	local07, #1
24788     46 9B C2 FA | 	rdbyte	local08, local01
2478c     4C 8D 02 F6 | 	mov	local01, local07
24790     4A 9B 42 FC | 	wrbyte	local08, local05
24794     01 94 06 F1 | 	add	local05, #1
24798     B4 FF 9F FD | 	jmp	#LR__1440
2479c                 | LR__1441
2479c                 | LR__1442
2479c     4A 01 48 FC | 	wrbyte	#0, local05
247a0     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
247a4     F0 92 CA FA | 	rdbyte	local04, ptr__fatfs_cc_dat__ wz
247a8     F8 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #504
247ac     18 00 90 AD |  if_e	jmp	#LR__1443
247b0     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
247b4     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
247b8     08 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
247bc     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
247c0     F0 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #496
247c4     18 00 90 FD | 	jmp	#LR__1444
247c8                 | LR__1443
247c8     01 00 00 FF 
247cc     0A E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##522
247d0     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
247d4     1A E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
247d8     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
247dc     F0 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #496
247e0                 | LR__1444
247e0     01 00 00 FF 
247e4     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
247e8     F0 92 CA FA | 	rdbyte	local04, ptr__fatfs_cc_dat__ wz
247ec     01 00 00 FF 
247f0     01 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##513
247f4     1C 00 90 AD |  if_e	jmp	#LR__1445
247f8     01 00 00 FF 
247fc     01 E0 05 F1 | 	add	ptr__fatfs_cc_dat__, ##513
24800     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
24804     0D E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
24808     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2480c     F4 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #500
24810     14 00 90 FD | 	jmp	#LR__1446
24814                 | LR__1445
24814     F8 E1 05 F1 | 	add	ptr__fatfs_cc_dat__, #504
24818     F0 92 02 F6 | 	mov	local04, ptr__fatfs_cc_dat__
2481c     04 E0 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
24820     F0 92 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24824     F4 E1 85 F1 | 	sub	ptr__fatfs_cc_dat__, #500
24828                 | LR__1446
24828     4F 91 02 FD | 	qmul	local03, local10
2482c                 | ' 		_tzname[1] = stdname;
2482c                 | ' 
2482c                 | '         return sgn * off;
2482c     18 34 62 FD | 	getqx	result1
24830                 | LR__1447
24830     A8 F0 03 F6 | 	mov	ptra, fp
24834     B3 00 A0 FD | 	call	#popregs_
24838                 | _fatfs_cc___tzoffset_ret
24838     2D 00 64 FD | 	ret
2483c                 | 
2483c                 | _fatfs_cc___indst
2483c     3A 3B 02 F6 | 	mov	_var01, arg01
24840     10 3A 06 F1 | 	add	_var01, #16
24844     1D 3D 02 FB | 	rdlong	_var02, _var01
24848     10 3A 86 F1 | 	sub	_var01, #16
2484c     02 3C 0E F2 | 	cmp	_var02, #2 wz
24850     30 00 90 5D |  if_ne	jmp	#LR__1448
24854     07 3C 06 F6 | 	mov	_var02, #7
24858     18 3A 06 F1 | 	add	_var01, #24
2485c     1D 3F 02 FB | 	rdlong	_var03, _var01
24860     1F 3D 02 F1 | 	add	_var02, _var03
24864     0C 3A 86 F1 | 	sub	_var01, #12
24868     1D 41 02 FB | 	rdlong	_var04, _var01
2486c     20 3D 82 F1 | 	sub	_var02, _var04
24870     00 3C 56 F2 | 	cmps	_var02, #0 wc
24874                 | '                         return 1;
24874     01 34 06 C6 |  if_b	mov	result1, #1
24878     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2487c                 | '                 return 0;
2487c     00 34 06 F6 | 	mov	result1, #0
24880     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24884                 | LR__1448
24884     10 3A 06 F1 | 	add	_var01, #16
24888     1D 3D 02 FB | 	rdlong	_var02, _var01
2488c     10 3A 86 F1 | 	sub	_var01, #16
24890     0A 3C 0E F2 | 	cmp	_var02, #10 wz
24894     28 00 90 5D |  if_ne	jmp	#LR__1449
24898     18 3A 06 F1 | 	add	_var01, #24
2489c     1D 3D 02 FB | 	rdlong	_var02, _var01
248a0     0C 3A 86 F1 | 	sub	_var01, #12
248a4     1D 43 02 FB | 	rdlong	_var05, _var01
248a8     21 3D 82 F1 | 	sub	_var02, _var05
248ac     00 3C 56 F2 | 	cmps	_var02, #0 wc
248b0                 | '                         return 0;
248b0     00 34 06 C6 |  if_b	mov	result1, #0
248b4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
248b8                 | '                 return 1;
248b8     01 34 06 F6 | 	mov	result1, #1
248bc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
248c0                 | LR__1449
248c0                 | '         }
248c0                 | ' 
248c0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
248c0     00 3C 06 F6 | 	mov	_var02, #0
248c4     10 3A 06 F1 | 	add	_var01, #16
248c8     1D 3F 02 FB | 	rdlong	_var03, _var01
248cc     10 3A 86 F1 | 	sub	_var01, #16
248d0     03 3E 56 F2 | 	cmps	_var03, #3 wc
248d4     10 00 90 CD |  if_b	jmp	#LR__1450
248d8     10 3A 06 F1 | 	add	_var01, #16
248dc     1D 41 02 FB | 	rdlong	_var04, _var01
248e0     0A 40 56 F2 | 	cmps	_var04, #10 wc
248e4     01 3C 06 C6 |  if_b	mov	_var02, #1
248e8                 | LR__1450
248e8     1E 35 02 F6 | 	mov	result1, _var02
248ec                 | _fatfs_cc___indst_ret
248ec     2D 00 64 FD | 	ret
248f0                 | 
248f0                 | _fatfs_cc__rxtxioctl_1333
248f0     02 4C 05 F6 | 	mov	COUNT_, #2
248f4     A9 00 A0 FD | 	call	#pushregs_
248f8     3B 8D 02 F6 | 	mov	local01, arg02
248fc     3C 8F 02 F6 | 	mov	local02, arg03
24900                 | '     switch (req) {
24900     00 8D 0E F2 | 	cmp	local01, #256 wz
24904     0C 00 90 AD |  if_e	jmp	#LR__1451
24908     01 8D 0E F2 | 	cmp	local01, #257 wz
2490c     1C 00 90 AD |  if_e	jmp	#LR__1452
24910     30 00 90 FD | 	jmp	#LR__1453
24914                 | LR__1451
24914     08 A2 05 F1 | 	add	ptr___system__dat__, #8
24918     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
2491c     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
24920     47 35 62 FC | 	wrlong	result1, local02
24924                 | '         *argl = _getrxtxflags();
24924                 | '         return 0;
24924     00 34 06 F6 | 	mov	result1, #0
24928     28 00 90 FD | 	jmp	#LR__1454
2492c                 | LR__1452
2492c     47 75 02 FB | 	rdlong	arg01, local02
24930     08 A2 05 F1 | 	add	ptr___system__dat__, #8
24934     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
24938     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
2493c                 | '         _setrxtxflags(*argl);
2493c                 | '         return 0;
2493c     00 34 06 F6 | 	mov	result1, #0
24940     10 00 90 FD | 	jmp	#LR__1454
24944                 | LR__1453
24944                 | '         return _seterror( 10 );
24944     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24948     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
2494c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24950     01 34 66 F6 | 	neg	result1, #1
24954                 | LR__1454
24954     A8 F0 03 F6 | 	mov	ptra, fp
24958     B3 00 A0 FD | 	call	#popregs_
2495c                 | _fatfs_cc__rxtxioctl_1333_ret
2495c     2D 00 64 FD | 	ret
24960                 | 
24960                 | _fatfs_cc___dummy_flush_1334
24960                 | ' {
24960                 | '     return 0;
24960     00 34 06 F6 | 	mov	result1, #0
24964                 | _fatfs_cc___dummy_flush_1334_ret
24964     2D 00 64 FD | 	ret
24968                 | 
24968                 | _fatfs_cc__vfswrite
24968     09 4C 05 F6 | 	mov	COUNT_, #9
2496c     A9 00 A0 FD | 	call	#pushregs_
24970     3A 8D 02 F6 | 	mov	local01, arg01
24974     3B 8F 02 F6 | 	mov	local02, arg02
24978     3C 91 02 F6 | 	mov	local03, arg03
2497c     47 93 02 F6 | 	mov	local04, local02
24980     08 8C 06 F1 | 	add	local01, #8
24984     46 75 02 FB | 	rdlong	arg01, local01
24988     08 8C 86 F1 | 	sub	local01, #8
2498c     02 74 CE F7 | 	test	arg01, #2 wz
24990                 | '         return _seterror( 6 );
24990     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24994     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24998     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
2499c     01 34 66 A6 |  if_e	neg	result1, #1
249a0     5C 01 90 AD |  if_e	jmp	#LR__1461
249a4     08 8C 06 F1 | 	add	local01, #8
249a8     46 35 02 FB | 	rdlong	result1, local01
249ac     08 8C 86 F1 | 	sub	local01, #8
249b0     40 34 CE F7 | 	test	result1, #64 wz
249b4     5C 00 90 AD |  if_e	jmp	#LR__1456
249b8     08 8C 06 F1 | 	add	local01, #8
249bc     46 35 02 FB | 	rdlong	result1, local01
249c0     08 8C 86 F1 | 	sub	local01, #8
249c4     80 34 CE F7 | 	test	result1, #128 wz
249c8     48 00 90 AD |  if_e	jmp	#LR__1455
249cc     2C 8C 06 F1 | 	add	local01, #44
249d0     46 79 02 FB | 	rdlong	arg03, local01
249d4     2C 8C 86 F1 | 	sub	local01, #44
249d8     3C 95 02 FB | 	rdlong	local05, arg03
249dc     04 78 06 F1 | 	add	arg03, #4
249e0     3C 97 02 FB | 	rdlong	local06, arg03
249e4     46 75 02 F6 | 	mov	arg01, local01
249e8     00 76 06 F6 | 	mov	arg02, #0
249ec     02 78 06 F6 | 	mov	arg03, #2
249f0     C9 98 02 F6 | 	mov	local07, objptr
249f4     4A 93 01 F6 | 	mov	objptr, local05
249f8     2D 96 62 FD | 	call	local06
249fc     4C 93 01 F6 | 	mov	objptr, local07
24a00     08 8C 06 F1 | 	add	local01, #8
24a04     46 99 02 FB | 	rdlong	local07, local01
24a08     80 98 26 F5 | 	andn	local07, #128
24a0c     46 99 62 FC | 	wrlong	local07, local01
24a10     08 8C 86 F1 | 	sub	local01, #8
24a14                 | LR__1455
24a14                 | LR__1456
24a14     14 8C 06 F1 | 	add	local01, #20
24a18     46 99 0A FB | 	rdlong	local07, local01 wz
24a1c     14 8C 86 F1 | 	sub	local01, #20
24a20     74 00 90 AD |  if_e	jmp	#LR__1458
24a24     14 8C 06 F1 | 	add	local01, #20
24a28     46 99 02 FB | 	rdlong	local07, local01
24a2c     14 8C 86 F1 | 	sub	local01, #20
24a30     4C 95 02 FB | 	rdlong	local05, local07
24a34     04 98 06 F1 | 	add	local07, #4
24a38     4C 97 02 FB | 	rdlong	local06, local07
24a3c     47 77 02 F6 | 	mov	arg02, local02
24a40     48 79 02 F6 | 	mov	arg03, local03
24a44     46 75 02 F6 | 	mov	arg01, local01
24a48     C9 98 02 F6 | 	mov	local07, objptr
24a4c     4A 93 01 F6 | 	mov	objptr, local05
24a50     2D 96 62 FD | 	call	local06
24a54     4C 93 01 F6 | 	mov	objptr, local07
24a58     1A 9B 02 F6 | 	mov	local08, result1
24a5c     00 9A 56 F2 | 	cmps	local08, #0 wc
24a60     2C 00 90 3D |  if_ae	jmp	#LR__1457
24a64     08 8C 06 F1 | 	add	local01, #8
24a68     46 99 02 FB | 	rdlong	local07, local01
24a6c     20 98 46 F5 | 	or	local07, #32
24a70     46 99 62 FC | 	wrlong	local07, local01
24a74                 | '             f->state |=  (0x20) ;
24a74                 | '             return _seterror(r);
24a74     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24a78     D1 9A 62 FC | 	wrlong	local08, ptr___system__dat__
24a7c     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24a80     00 9A 0E F2 | 	cmp	local08, #0 wz
24a84     01 34 66 56 |  if_ne	neg	result1, #1
24a88     00 34 06 A6 |  if_e	mov	result1, #0
24a8c     70 00 90 FD | 	jmp	#LR__1461
24a90                 | LR__1457
24a90                 | '         }
24a90                 | '         return r;
24a90     4D 35 02 F6 | 	mov	result1, local08
24a94     68 00 90 FD | 	jmp	#LR__1461
24a98                 | LR__1458
24a98     18 8C 06 F1 | 	add	local01, #24
24a9c     46 9D 0A FB | 	rdlong	local09, local01 wz
24aa0     18 8C 86 F1 | 	sub	local01, #24
24aa4                 | '         return _seterror( 6 );
24aa4     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24aa8     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24aac     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24ab0     01 34 66 A6 |  if_e	neg	result1, #1
24ab4     48 00 90 AD |  if_e	jmp	#LR__1461
24ab8     00 9A 06 F6 | 	mov	local08, #0
24abc                 | '     }
24abc                 | '     r = 0;
24abc                 | '     while (count > 0) {
24abc                 | LR__1459
24abc     01 90 16 F2 | 	cmp	local03, #1 wc
24ac0     38 00 90 CD |  if_b	jmp	#LR__1460
24ac4     4E 99 02 F6 | 	mov	local07, local09
24ac8     4C 95 02 FB | 	rdlong	local05, local07
24acc     04 98 06 F1 | 	add	local07, #4
24ad0     4C 97 02 FB | 	rdlong	local06, local07
24ad4     49 75 C2 FA | 	rdbyte	arg01, local04
24ad8     46 77 02 F6 | 	mov	arg02, local01
24adc     C9 98 02 F6 | 	mov	local07, objptr
24ae0     4A 93 01 F6 | 	mov	objptr, local05
24ae4     2D 96 62 FD | 	call	local06
24ae8     4C 93 01 F6 | 	mov	objptr, local07
24aec     1A 9B 02 F1 | 	add	local08, result1
24af0     01 90 86 F1 | 	sub	local03, #1
24af4     01 92 06 F1 | 	add	local04, #1
24af8     C0 FF 9F FD | 	jmp	#LR__1459
24afc                 | LR__1460
24afc                 | '         r += (*tx)(*buf++, f);
24afc                 | '         --count;
24afc                 | '     }
24afc                 | '     return r;
24afc     4D 35 02 F6 | 	mov	result1, local08
24b00                 | LR__1461
24b00     A8 F0 03 F6 | 	mov	ptra, fp
24b04     B3 00 A0 FD | 	call	#popregs_
24b08                 | _fatfs_cc__vfswrite_ret
24b08     2D 00 64 FD | 	ret
24b0c                 | 
24b0c                 | _fatfs_cc__vfsread
24b0c     0B 4C 05 F6 | 	mov	COUNT_, #11
24b10     A9 00 A0 FD | 	call	#pushregs_
24b14     28 F0 07 F1 | 	add	ptra, #40
24b18     04 50 05 F1 | 	add	fp, #4
24b1c     A8 74 62 FC | 	wrlong	arg01, fp
24b20     04 50 05 F1 | 	add	fp, #4
24b24     A8 76 62 FC | 	wrlong	arg02, fp
24b28     04 50 05 F1 | 	add	fp, #4
24b2c     A8 78 62 FC | 	wrlong	arg03, fp
24b30     04 50 85 F1 | 	sub	fp, #4
24b34     A8 8C 02 FB | 	rdlong	local01, fp
24b38     14 50 05 F1 | 	add	fp, #20
24b3c     A8 8C 62 FC | 	wrlong	local01, fp
24b40     04 50 05 F1 | 	add	fp, #4
24b44     A8 00 68 FC | 	wrlong	#0, fp
24b48     1C 50 85 F1 | 	sub	fp, #28
24b4c     A8 8E 02 FB | 	rdlong	local02, fp
24b50     04 50 85 F1 | 	sub	fp, #4
24b54     08 8E 06 F1 | 	add	local02, #8
24b58     47 8D 02 FB | 	rdlong	local01, local02
24b5c     01 8C CE F7 | 	test	local01, #1 wz
24b60                 | ' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
24b60                 | '         return _seterror( 6 );
24b60     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24b64     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24b68     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24b6c     01 34 66 A6 |  if_e	neg	result1, #1
24b70     70 02 90 AD |  if_e	jmp	#LR__1468
24b74     04 50 05 F1 | 	add	fp, #4
24b78     A8 8C 02 FB | 	rdlong	local01, fp
24b7c     04 50 85 F1 | 	sub	fp, #4
24b80     10 8C 06 F1 | 	add	local01, #16
24b84     46 8D 0A FB | 	rdlong	local01, local01 wz
24b88     AC 00 90 AD |  if_e	jmp	#LR__1463
24b8c     04 50 05 F1 | 	add	fp, #4
24b90     A8 74 02 FB | 	rdlong	arg01, fp
24b94     3A 8F 02 F6 | 	mov	local02, arg01
24b98     10 8E 06 F1 | 	add	local02, #16
24b9c     47 8D 02 FB | 	rdlong	local01, local02
24ba0     46 8F 02 FB | 	rdlong	local02, local01
24ba4     04 8C 06 F1 | 	add	local01, #4
24ba8     46 8D 02 FB | 	rdlong	local01, local01
24bac     04 50 05 F1 | 	add	fp, #4
24bb0     A8 76 02 FB | 	rdlong	arg02, fp
24bb4     04 50 05 F1 | 	add	fp, #4
24bb8     A8 78 02 FB | 	rdlong	arg03, fp
24bbc     0C 50 85 F1 | 	sub	fp, #12
24bc0     C9 90 02 F6 | 	mov	local03, objptr
24bc4     47 93 01 F6 | 	mov	objptr, local02
24bc8     2D 8C 62 FD | 	call	local01
24bcc     48 93 01 F6 | 	mov	objptr, local03
24bd0     10 50 05 F1 | 	add	fp, #16
24bd4     A8 34 62 FC | 	wrlong	result1, fp
24bd8     10 50 85 F1 | 	sub	fp, #16
24bdc     00 34 56 F2 | 	cmps	result1, #0 wc
24be0     44 00 90 3D |  if_ae	jmp	#LR__1462
24be4     04 50 05 F1 | 	add	fp, #4
24be8     A8 90 02 FB | 	rdlong	local03, fp
24bec     48 8D 02 F6 | 	mov	local01, local03
24bf0     08 90 06 F1 | 	add	local03, #8
24bf4     48 91 02 FB | 	rdlong	local03, local03
24bf8     20 90 46 F5 | 	or	local03, #32
24bfc     08 8C 06 F1 | 	add	local01, #8
24c00     46 91 62 FC | 	wrlong	local03, local01
24c04                 | '             f->state |=  (0x20) ;
24c04                 | '             return _seterror(r);
24c04     0C 50 05 F1 | 	add	fp, #12
24c08     A8 74 0A FB | 	rdlong	arg01, fp wz
24c0c     10 50 85 F1 | 	sub	fp, #16
24c10     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24c14     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
24c18     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24c1c     01 34 66 56 |  if_ne	neg	result1, #1
24c20     00 34 06 A6 |  if_e	mov	result1, #0
24c24     BC 01 90 FD | 	jmp	#LR__1468
24c28                 | LR__1462
24c28                 | '         }
24c28                 | '         return r;
24c28     10 50 05 F1 | 	add	fp, #16
24c2c     A8 34 02 FB | 	rdlong	result1, fp
24c30     10 50 85 F1 | 	sub	fp, #16
24c34     AC 01 90 FD | 	jmp	#LR__1468
24c38                 | LR__1463
24c38     04 50 05 F1 | 	add	fp, #4
24c3c     A8 8C 02 FB | 	rdlong	local01, fp
24c40     1C 8C 06 F1 | 	add	local01, #28
24c44     46 8D 0A FB | 	rdlong	local01, local01 wz
24c48     14 50 05 F1 | 	add	fp, #20
24c4c     A8 8C 62 FC | 	wrlong	local01, fp
24c50     18 50 85 F1 | 	sub	fp, #24
24c54                 | '         return _seterror( 6 );
24c54     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24c58     D1 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24c5c     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24c60     01 34 66 A6 |  if_e	neg	result1, #1
24c64     7C 01 90 AD |  if_e	jmp	#LR__1468
24c68     04 50 05 F1 | 	add	fp, #4
24c6c     A8 8C 02 FB | 	rdlong	local01, fp
24c70     04 50 85 F1 | 	sub	fp, #4
24c74     24 8C 06 F1 | 	add	local01, #36
24c78     46 93 0A FB | 	rdlong	local04, local01 wz
24c7c     90 00 90 AD |  if_e	jmp	#LR__1465
24c80     04 50 05 F1 | 	add	fp, #4
24c84     A8 94 02 FB | 	rdlong	local05, fp
24c88     4A 97 02 F6 | 	mov	local06, local05
24c8c     24 96 06 F1 | 	add	local06, #36
24c90     4B 99 02 FB | 	rdlong	local07, local06
24c94     4C 8D 02 F6 | 	mov	local01, local07
24c98     46 8F 02 FB | 	rdlong	local02, local01
24c9c     04 8C 06 F1 | 	add	local01, #4
24ca0     46 9B 02 FB | 	rdlong	local08, local01
24ca4     4D 93 02 F6 | 	mov	local04, local08
24ca8     4A 9D 02 F6 | 	mov	local09, local05
24cac     00 9F 06 F6 | 	mov	local10, #256
24cb0     20 50 05 F1 | 	add	fp, #32
24cb4     A8 A0 02 F6 | 	mov	local11, fp
24cb8     4E 75 02 F6 | 	mov	arg01, local09
24cbc     00 77 06 F6 | 	mov	arg02, #256
24cc0     50 79 02 F6 | 	mov	arg03, local11
24cc4     C9 90 02 F6 | 	mov	local03, objptr
24cc8     47 93 01 F6 | 	mov	objptr, local02
24ccc     24 50 85 F1 | 	sub	fp, #36
24cd0     2D 92 62 FD | 	call	local04
24cd4     48 93 01 F6 | 	mov	objptr, local03
24cd8     10 50 05 F1 | 	add	fp, #16
24cdc     A8 34 62 FC | 	wrlong	result1, fp
24ce0     1A 8F 0A F6 | 	mov	local02, result1 wz
24ce4     10 50 85 F1 | 	sub	fp, #16
24ce8     24 00 90 5D |  if_ne	jmp	#LR__1464
24cec     24 50 05 F1 | 	add	fp, #36
24cf0     A8 96 02 FB | 	rdlong	local06, fp
24cf4     24 50 85 F1 | 	sub	fp, #36
24cf8     4B 93 02 F6 | 	mov	local04, local06
24cfc     02 92 0E F5 | 	and	local04, #2 wz
24d00     01 8C 06 56 |  if_ne	mov	local01, #1
24d04     20 50 05 51 |  if_ne	add	fp, #32
24d08     A8 02 68 5C |  if_ne	wrlong	#1, fp
24d0c     20 50 85 51 |  if_ne	sub	fp, #32
24d10                 | LR__1464
24d10                 | LR__1465
24d10     10 50 05 F1 | 	add	fp, #16
24d14     A8 00 68 FC | 	wrlong	#0, fp
24d18     10 50 85 F1 | 	sub	fp, #16
24d1c                 | '             break_on_nl = 1;
24d1c                 | '         }
24d1c                 | '     }
24d1c                 | '     r = 0;
24d1c                 | '     while (count > 0) {
24d1c                 | LR__1466
24d1c     0C 50 05 F1 | 	add	fp, #12
24d20     A8 8C 02 FB | 	rdlong	local01, fp
24d24     0C 50 85 F1 | 	sub	fp, #12
24d28     01 8C 16 F2 | 	cmp	local01, #1 wc
24d2c     A8 00 90 CD |  if_b	jmp	#LR__1467
24d30     18 50 05 F1 | 	add	fp, #24
24d34     A8 8C 02 FB | 	rdlong	local01, fp
24d38     46 8F 02 FB | 	rdlong	local02, local01
24d3c     04 8C 06 F1 | 	add	local01, #4
24d40     46 93 02 FB | 	rdlong	local04, local01
24d44     14 50 85 F1 | 	sub	fp, #20
24d48     A8 74 02 FB | 	rdlong	arg01, fp
24d4c     04 50 85 F1 | 	sub	fp, #4
24d50     C9 9A 02 F6 | 	mov	local08, objptr
24d54     47 93 01 F6 | 	mov	objptr, local02
24d58     2D 92 62 FD | 	call	local04
24d5c     4D 93 01 F6 | 	mov	objptr, local08
24d60     14 50 05 F1 | 	add	fp, #20
24d64     A8 34 62 FC | 	wrlong	result1, fp
24d68     14 50 85 F1 | 	sub	fp, #20
24d6c     00 34 56 F2 | 	cmps	result1, #0 wc
24d70     64 00 90 CD |  if_b	jmp	#LR__1467
24d74     1C 50 05 F1 | 	add	fp, #28
24d78     A8 8E 02 FB | 	rdlong	local02, fp
24d7c     47 93 02 F6 | 	mov	local04, local02
24d80     01 92 06 F1 | 	add	local04, #1
24d84     A8 92 62 FC | 	wrlong	local04, fp
24d88     08 50 85 F1 | 	sub	fp, #8
24d8c     A8 94 02 FB | 	rdlong	local05, fp
24d90     47 95 42 FC | 	wrbyte	local05, local02
24d94     04 50 85 F1 | 	sub	fp, #4
24d98     A8 8C 02 FB | 	rdlong	local01, fp
24d9c     01 8C 06 F1 | 	add	local01, #1
24da0     A8 8C 62 FC | 	wrlong	local01, fp
24da4     04 50 85 F1 | 	sub	fp, #4
24da8     A8 8C 02 FB | 	rdlong	local01, fp
24dac     01 8C 86 F1 | 	sub	local01, #1
24db0     A8 8C 62 FC | 	wrlong	local01, fp
24db4     14 50 05 F1 | 	add	fp, #20
24db8     A8 8C 0A FB | 	rdlong	local01, fp wz
24dbc     20 50 85 F1 | 	sub	fp, #32
24dc0     58 FF 9F AD |  if_e	jmp	#LR__1466
24dc4     14 50 05 F1 | 	add	fp, #20
24dc8     A8 92 02 FB | 	rdlong	local04, fp
24dcc     14 50 85 F1 | 	sub	fp, #20
24dd0     0A 92 0E F2 | 	cmp	local04, #10 wz
24dd4                 | '             break;
24dd4     44 FF 9F 5D |  if_ne	jmp	#LR__1466
24dd8                 | LR__1467
24dd8                 | '         }
24dd8                 | '     }
24dd8                 | '     return r;
24dd8     10 50 05 F1 | 	add	fp, #16
24ddc     A8 34 02 FB | 	rdlong	result1, fp
24de0     10 50 85 F1 | 	sub	fp, #16
24de4                 | LR__1468
24de4     A8 F0 03 F6 | 	mov	ptra, fp
24de8     B3 00 A0 FD | 	call	#popregs_
24dec                 | _fatfs_cc__vfsread_ret
24dec     2D 00 64 FD | 	ret
24df0                 | 
24df0                 | _fatfs_cc__remove
24df0     06 4C 05 F6 | 	mov	COUNT_, #6
24df4     A9 00 A0 FD | 	call	#pushregs_
24df8     3A 77 02 F6 | 	mov	arg02, arg01
24dfc     7C A3 05 F1 | 	add	ptr___system__dat__, #380
24e00     D1 8C 02 F6 | 	mov	local01, ptr___system__dat__
24e04     46 75 02 F6 | 	mov	arg01, local01
24e08     00 78 06 F6 | 	mov	arg03, #0
24e0c     7C A3 85 F1 | 	sub	ptr___system__dat__, #380
24e10     F0 06 B0 FD | 	call	#__system____getvfsforfile
24e14     1A 8F 0A F6 | 	mov	local02, result1 wz
24e18     20 8E 06 51 |  if_ne	add	local02, #32
24e1c     47 75 02 5B |  if_ne	rdlong	arg01, local02
24e20     20 8E 86 51 |  if_ne	sub	local02, #32
24e24     00 74 4E 52 |  if_ne	cmps	arg01, #0 wz
24e28                 | ' #line 20 "C:/flexprop/include/libsys/remove.c"
24e28                 | '         return _seterror( 16 );
24e28     18 A2 05 A1 |  if_e	add	ptr___system__dat__, #24
24e2c     D1 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
24e30     18 A2 85 A1 |  if_e	sub	ptr___system__dat__, #24
24e34     01 34 66 A6 |  if_e	neg	result1, #1
24e38     90 00 90 AD |  if_e	jmp	#LR__1471
24e3c     40 8E 06 F1 | 	add	local02, #64
24e40     47 75 02 FB | 	rdlong	arg01, local02
24e44     40 8E 86 F1 | 	sub	local02, #64
24e48     3A 91 02 FB | 	rdlong	local03, arg01
24e4c     04 74 06 F1 | 	add	arg01, #4
24e50     3A 93 02 FB | 	rdlong	local04, arg01
24e54     46 75 02 F6 | 	mov	arg01, local01
24e58     C9 94 02 F6 | 	mov	local05, objptr
24e5c     48 93 01 F6 | 	mov	objptr, local03
24e60     2D 92 62 FD | 	call	local04
24e64     4A 93 01 F6 | 	mov	objptr, local05
24e68     1A 97 02 F6 | 	mov	local06, result1
24e6c     FF FF 7F FF 
24e70     F2 97 0E F2 | 	cmp	local06, ##-14 wz
24e74     2C 00 90 5D |  if_ne	jmp	#LR__1469
24e78     3C 8E 06 F1 | 	add	local02, #60
24e7c     47 97 02 FB | 	rdlong	local06, local02
24e80     4B 91 02 FB | 	rdlong	local03, local06
24e84     04 96 06 F1 | 	add	local06, #4
24e88     4B 93 02 FB | 	rdlong	local04, local06
24e8c     46 75 02 F6 | 	mov	arg01, local01
24e90     C9 94 02 F6 | 	mov	local05, objptr
24e94     48 93 01 F6 | 	mov	objptr, local03
24e98     2D 92 62 FD | 	call	local04
24e9c     4A 93 01 F6 | 	mov	objptr, local05
24ea0     1A 97 02 F6 | 	mov	local06, result1
24ea4                 | LR__1469
24ea4     00 96 0E F2 | 	cmp	local06, #0 wz
24ea8     1C 00 90 AD |  if_e	jmp	#LR__1470
24eac                 | '         return _seterror(-r);
24eac     4B 75 6A F6 | 	neg	arg01, local06 wz
24eb0     18 A2 05 F1 | 	add	ptr___system__dat__, #24
24eb4     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
24eb8     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
24ebc     01 34 66 56 |  if_ne	neg	result1, #1
24ec0     00 34 06 A6 |  if_e	mov	result1, #0
24ec4     04 00 90 FD | 	jmp	#LR__1471
24ec8                 | LR__1470
24ec8                 | '     }
24ec8                 | '     return 0;
24ec8     00 34 06 F6 | 	mov	result1, #0
24ecc                 | LR__1471
24ecc     A8 F0 03 F6 | 	mov	ptra, fp
24ed0     B3 00 A0 FD | 	call	#popregs_
24ed4                 | _fatfs_cc__remove_ret
24ed4     2D 00 64 FD | 	ret
24ed8                 | 
24ed8                 | _fatfs_cc___default_filbuf
24ed8     04 4C 05 F6 | 	mov	COUNT_, #4
24edc     A9 00 A0 FD | 	call	#pushregs_
24ee0     3A 8D 02 FB | 	rdlong	local01, arg01
24ee4     10 74 06 F1 | 	add	arg01, #16
24ee8     3A 79 02 FB | 	rdlong	arg03, arg01
24eec     10 74 86 F1 | 	sub	arg01, #16
24ef0     3C 8F 02 FB | 	rdlong	local02, arg03
24ef4     04 78 06 F1 | 	add	arg03, #4
24ef8     3C 91 02 FB | 	rdlong	local03, arg03
24efc     0C 8C 06 F1 | 	add	local01, #12
24f00     46 77 02 F6 | 	mov	arg02, local01
24f04     0C 8C 86 F1 | 	sub	local01, #12
24f08     0A 78 C6 F9 | 	decod	arg03, #10
24f0c     C9 92 02 F6 | 	mov	local04, objptr
24f10     47 93 01 F6 | 	mov	objptr, local02
24f14     2D 90 62 FD | 	call	local03
24f18     49 93 01 F6 | 	mov	objptr, local04
24f1c     1A 93 02 F6 | 	mov	local04, result1
24f20     00 92 56 F2 | 	cmps	local04, #0 wc
24f24                 | '         return -1;
24f24     01 34 66 C6 |  if_b	neg	result1, #1
24f28     28 00 90 CD |  if_b	jmp	#LR__1472
24f2c     46 93 62 FC | 	wrlong	local04, local01
24f30     0C 8C 06 F1 | 	add	local01, #12
24f34     46 91 02 F6 | 	mov	local03, local01
24f38     08 8C 86 F1 | 	sub	local01, #8
24f3c     46 91 62 FC | 	wrlong	local03, local01
24f40     04 8C 06 F1 | 	add	local01, #4
24f44     46 91 02 FB | 	rdlong	local03, local01
24f48     01 90 46 F5 | 	or	local03, #1
24f4c     46 91 62 FC | 	wrlong	local03, local01
24f50                 | '     }
24f50                 | '     b->cnt = r;
24f50                 | '     b->ptr = &b->buf[0];
24f50                 | '     b->flags |=  (0x01) ;
24f50                 | '     return r;
24f50     49 35 02 F6 | 	mov	result1, local04
24f54                 | LR__1472
24f54     A8 F0 03 F6 | 	mov	ptra, fp
24f58     B3 00 A0 FD | 	call	#popregs_
24f5c                 | _fatfs_cc___default_filbuf_ret
24f5c     2D 00 64 FD | 	ret
24f60                 | 
24f60                 | __struct___anon_9b5668f900000005_sputc
24f60     C9 3A 02 FB | 	rdlong	_var01, objptr
24f64     04 92 05 F1 | 	add	objptr, #4
24f68     C9 3C 02 FB | 	rdlong	_var02, objptr
24f6c     04 92 85 F1 | 	sub	objptr, #4
24f70     1E 3B 52 F2 | 	cmps	_var01, _var02 wc
24f74     C9 3A 02 CB |  if_b	rdlong	_var01, objptr
24f78     1D 3D 02 C6 |  if_b	mov	_var02, _var01
24f7c     01 3C 06 C1 |  if_b	add	_var02, #1
24f80     C9 3C 62 CC |  if_b	wrlong	_var02, objptr
24f84     1D 75 42 CC |  if_b	wrbyte	arg01, _var01
24f88                 | '             *ptr++ = c;
24f88                 | '         }
24f88                 | '         return 1;
24f88     01 34 06 F6 | 	mov	result1, #1
24f8c                 | __struct___anon_9b5668f900000005_sputc_ret
24f8c     2D 00 64 FD | 	ret
24f90                 | 
24f90                 | __struct___fmtfile_putchar
24f90     03 4C 05 F6 | 	mov	COUNT_, #3
24f94     A9 00 A0 FD | 	call	#pushregs_
24f98                 | '         return f->putcf(c, f);
24f98     C9 76 02 FB | 	rdlong	arg02, objptr
24f9c     18 76 06 F1 | 	add	arg02, #24
24fa0     3B 77 02 FB | 	rdlong	arg02, arg02
24fa4     3B 8D 02 FB | 	rdlong	local01, arg02
24fa8     04 76 06 F1 | 	add	arg02, #4
24fac     3B 8F 02 FB | 	rdlong	local02, arg02
24fb0     C9 76 02 FB | 	rdlong	arg02, objptr
24fb4     C9 90 02 F6 | 	mov	local03, objptr
24fb8     46 93 01 F6 | 	mov	objptr, local01
24fbc     2D 8E 62 FD | 	call	local02
24fc0     48 93 01 F6 | 	mov	objptr, local03
24fc4     A8 F0 03 F6 | 	mov	ptra, fp
24fc8     B3 00 A0 FD | 	call	#popregs_
24fcc                 | __struct___fmtfile_putchar_ret
24fcc     2D 00 64 FD | 	ret
24fd0                 | hubexit
24fd0     81 00 80 FD | 	jmp	#cogexit
24fd4                 | 
24fd4                 | __system___setbaud
24fd4     14 E0 06 FB | 	rdlong	muldiva_, #20
24fd8     3A E3 02 F6 | 	mov	muldivb_, arg01
24fdc     BB 00 A0 FD | 	call	#divide_
24fe0     40 7C 64 FD | 	dirl	#62
24fe4     40 7E 64 FD | 	dirl	#63
24fe8     D1 E2 62 FC | 	wrlong	muldivb_, ptr___system__dat__
24fec     10 E2 66 F0 | 	shl	muldivb_, #16
24ff0     07 76 06 F6 | 	mov	arg02, #7
24ff4     71 77 02 F1 | 	add	arg02, muldivb_
24ff8     3E F8 0C FC | 	wrpin	#124, #62
24ffc     3E 76 16 FC | 	wxpin	arg02, #62
25000     3F 7C 0C FC | 	wrpin	#62, #63
25004     14 76 06 F1 | 	add	arg02, #20
25008     3F 76 16 FC | 	wxpin	arg02, #63
2500c     41 7C 64 FD | 	dirh	#62
25010     41 7E 64 FD | 	dirh	#63
25014                 | __system___setbaud_ret
25014     2D 00 64 FD | 	ret
25018                 | 
25018                 | __system___txraw
25018     01 4C 05 F6 | 	mov	COUNT_, #1
2501c     A9 00 A0 FD | 	call	#pushregs_
25020     3A 8D 02 F6 | 	mov	local01, arg01
25024     D1 34 0A FB | 	rdlong	result1, ptr___system__dat__ wz
25028     C2 01 00 AF 
2502c     00 74 06 A6 |  if_e	mov	arg01, ##230400
25030     A0 FF BF AD |  if_e	call	#__system___setbaud
25034     3E 8C 26 FC | 	wypin	local01, #62
25038     1F 02 64 FD | 	waitx	#1
2503c     C8 AF 9D FE | 	loc	pa,	#(@LR__1474-@LR__1473)
25040     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25044                 | LR__1473
25044     40 7C 74 FD | 	testp	#62 wc
25048     F8 FF 9F 3D |  if_ae	jmp	#LR__1473
2504c                 | LR__1474
2504c     01 34 06 F6 | 	mov	result1, #1
25050     A8 F0 03 F6 | 	mov	ptra, fp
25054     B3 00 A0 FD | 	call	#popregs_
25058                 | __system___txraw_ret
25058     2D 00 64 FD | 	ret
2505c                 | 
2505c                 | __system___rxraw
2505c     0D 4C 05 F6 | 	mov	COUNT_, #13
25060     A9 00 A0 FD | 	call	#pushregs_
25064     3A 8D 02 F6 | 	mov	local01, arg01
25068     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2506c     C2 01 00 AF 
25070     00 74 06 A6 |  if_e	mov	arg01, ##230400
25074     5C FF BF AD |  if_e	call	#__system___setbaud
25078     00 8C 0E F2 | 	cmp	local01, #0 wz
2507c     1C 00 90 AD |  if_e	jmp	#LR__1475
25080     14 90 06 FB | 	rdlong	local03, #20
25084     0A 90 46 F0 | 	shr	local03, #10
25088     48 8D 02 FD | 	qmul	local01, local03
2508c     1A 34 62 FD | 	getct	result1
25090     18 92 62 FD | 	getqx	local04
25094     49 35 02 F1 | 	add	result1, local04
25098     1A 95 02 F6 | 	mov	local05, result1
2509c                 | LR__1475
2509c     01 96 66 F6 | 	neg	local06, #1
250a0     3F 98 06 F6 | 	mov	local07, #63
250a4     00 9A 06 F6 | 	mov	local08, #0
250a8     04 A2 05 F1 | 	add	ptr___system__dat__, #4
250ac     D1 9C 02 FB | 	rdlong	local09, ptr___system__dat__
250b0     04 A2 85 F1 | 	sub	ptr___system__dat__, #4
250b4                 | LR__1476
250b4     08 9C 16 F4 | 	testb	local09, #8 wc
250b8     09 9C 76 F4 | 	testbn	local09, #9 andc
250bc     0A 9C 46 F0 | 	shr	local09, #10
250c0     01 9A 06 C6 |  if_b	mov	local08, #1
250c4     40 7E 6C 3D |  if_ae	testp	#63 wz
250c8     01 9A 06 26 |  if_nc_and_z	mov	local08, #1
250cc     3F 9C 8E 2A |  if_nc_and_z	rdpin	local09, #63
250d0     04 9C 46 20 |  if_nc_and_z	shr	local09, #4
250d4                 | LR__1477
250d4     00 8E 06 F6 | 	mov	local02, #0
250d8     00 9A 0E F2 | 	cmp	local08, #0 wz
250dc     01 8E 66 56 |  if_ne	neg	local02, #1
250e0     00 9E 06 F6 | 	mov	local10, #0
250e4     00 90 06 F6 | 	mov	local03, #0
250e8     00 8C 0E F2 | 	cmp	local01, #0 wz
250ec     01 90 66 56 |  if_ne	neg	local03, #1
250f0     00 92 06 F6 | 	mov	local04, #0
250f4     00 A0 06 F6 | 	mov	local11, #0
250f8     1A 34 62 FD | 	getct	result1
250fc     1A A3 02 F6 | 	mov	local12, result1
25100     51 A5 02 F6 | 	mov	local13, local12
25104     4A A5 82 F1 | 	sub	local13, local05
25108     00 A4 56 F2 | 	cmps	local13, #0 wc
2510c     00 A0 26 C6 |  if_b	not	local11, #0
25110     00 A0 0E F2 | 	cmp	local11, #0 wz
25114     00 92 26 56 |  if_ne	not	local04, #0
25118     49 91 CA F7 | 	test	local03, local04 wz
2511c     00 9E 26 56 |  if_ne	not	local10, #0
25120     4F 8F 4A F5 | 	or	local02, local10 wz
25124     8C FF 9F AD |  if_e	jmp	#LR__1476
25128     00 9A 0E F2 | 	cmp	local08, #0 wz
2512c     4E 97 02 56 |  if_ne	mov	local06, local09
25130     4B 97 E2 58 |  if_ne	getbyte	local06, local06, #0
25134     04 A2 05 F1 | 	add	ptr___system__dat__, #4
25138     D1 9C 62 FC | 	wrlong	local09, ptr___system__dat__
2513c     04 A2 85 F1 | 	sub	ptr___system__dat__, #4
25140     4B 35 02 F6 | 	mov	result1, local06
25144     A8 F0 03 F6 | 	mov	ptra, fp
25148     B3 00 A0 FD | 	call	#popregs_
2514c                 | __system___rxraw_ret
2514c     2D 00 64 FD | 	ret
25150                 | 
25150                 | __system___getms
25150     02 4C 05 F6 | 	mov	COUNT_, #2
25154     A9 00 A0 FD | 	call	#pushregs_
25158     1A 36 72 FD | 	getct	result2 wc
2515c     1A 8C 62 FD | 	getct	local01
25160     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25164     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25168     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
2516c     20 00 90 5D |  if_ne	jmp	#LR__1478
25170     14 8E 06 FB | 	rdlong	local02, #20
25174     01 00 00 FF 
25178     E8 8F 16 FD | 	qdiv	local02, ##1000
2517c     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25180     18 34 62 FD | 	getqx	result1
25184     1A 8F 02 F6 | 	mov	local02, result1
25188     D1 34 62 FC | 	wrlong	result1, ptr___system__dat__
2518c     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25190                 | LR__1478
25190     28 36 62 FD | 	setq	result2
25194     47 8D 12 FD | 	qdiv	local01, local02
25198     18 34 62 FD | 	getqx	result1
2519c     A8 F0 03 F6 | 	mov	ptra, fp
251a0     B3 00 A0 FD | 	call	#popregs_
251a4                 | __system___getms_ret
251a4     2D 00 64 FD | 	ret
251a8                 | 
251a8                 | __system___getus
251a8     02 4C 05 F6 | 	mov	COUNT_, #2
251ac     A9 00 A0 FD | 	call	#pushregs_
251b0     1A 36 72 FD | 	getct	result2 wc
251b4     1A 8C 62 FD | 	getct	local01
251b8     10 A2 05 F1 | 	add	ptr___system__dat__, #16
251bc     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
251c0     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
251c4     20 00 90 5D |  if_ne	jmp	#LR__1479
251c8     14 8E 06 FB | 	rdlong	local02, #20
251cc     A1 07 00 FF 
251d0     40 8E 16 FD | 	qdiv	local02, ##1000000
251d4     10 A2 05 F1 | 	add	ptr___system__dat__, #16
251d8     18 34 62 FD | 	getqx	result1
251dc     1A 8F 02 F6 | 	mov	local02, result1
251e0     D1 34 62 FC | 	wrlong	result1, ptr___system__dat__
251e4     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
251e8                 | LR__1479
251e8     47 37 12 FD | 	qdiv	result2, local02
251ec     19 36 62 FD | 	getqy	result2
251f0     28 36 62 FD | 	setq	result2
251f4     47 8D 12 FD | 	qdiv	local01, local02
251f8     18 34 62 FD | 	getqx	result1
251fc     A8 F0 03 F6 | 	mov	ptra, fp
25200     B3 00 A0 FD | 	call	#popregs_
25204                 | __system___getus_ret
25204     2D 00 64 FD | 	ret
25208                 | 
25208                 | __system____builtin_memmove
25208     3A 3B 02 F6 | 	mov	_var01, arg01
2520c     3B 75 52 F2 | 	cmps	arg01, arg02 wc
25210     50 00 90 3D |  if_ae	jmp	#LR__1487
25214     08 AE 9D FE | 	loc	pa,	#(@LR__1481-@LR__1480)
25218     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2521c                 | LR__1480
2521c     04 78 56 F2 | 	cmps	arg03, #4 wc
25220     18 00 90 CD |  if_b	jmp	#LR__1482
25224     3B 35 02 FB | 	rdlong	result1, arg02
25228     3A 35 62 FC | 	wrlong	result1, arg01
2522c     04 74 06 F1 | 	add	arg01, #4
25230     04 76 06 F1 | 	add	arg02, #4
25234     04 78 86 F1 | 	sub	arg03, #4
25238     E0 FF 9F FD | 	jmp	#LR__1480
2523c                 | LR__1481
2523c                 | LR__1482
2523c     3C 3D 0A F6 | 	mov	_var02, arg03 wz
25240     4C 00 90 AD |  if_e	jmp	#LR__1493
25244     CC AD 9D FE | 	loc	pa,	#(@LR__1485-@LR__1483)
25248     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2524c                 | LR__1483
2524c     1E 09 D8 FC | 	rep	@LR__1486, _var02
25250                 | LR__1484
25250     3B 3D C2 FA | 	rdbyte	_var02, arg02
25254     3A 3D 42 FC | 	wrbyte	_var02, arg01
25258     01 74 06 F1 | 	add	arg01, #1
2525c     01 76 06 F1 | 	add	arg02, #1
25260                 | LR__1485
25260                 | LR__1486
25260     2C 00 90 FD | 	jmp	#LR__1493
25264                 | LR__1487
25264     3C 75 02 F1 | 	add	arg01, arg03
25268     3C 77 02 F1 | 	add	arg02, arg03
2526c     3C 3F 0A F6 | 	mov	_var03, arg03 wz
25270     1C 00 90 AD |  if_e	jmp	#LR__1492
25274     9C AD 9D FE | 	loc	pa,	#(@LR__1490-@LR__1488)
25278     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2527c                 | LR__1488
2527c     1F 09 D8 FC | 	rep	@LR__1491, _var03
25280                 | LR__1489
25280     01 74 86 F1 | 	sub	arg01, #1
25284     01 76 86 F1 | 	sub	arg02, #1
25288     3B 41 C2 FA | 	rdbyte	_var04, arg02
2528c     3A 41 42 FC | 	wrbyte	_var04, arg01
25290                 | LR__1490
25290                 | LR__1491
25290                 | LR__1492
25290                 | LR__1493
25290     1D 35 02 F6 | 	mov	result1, _var01
25294                 | __system____builtin_memmove_ret
25294     2D 00 64 FD | 	ret
25298                 | 
25298                 | __system____builtin_strcpy
25298     3A 3B 02 F6 | 	mov	_var01, arg01
2529c     74 AD 9D FE | 	loc	pa,	#(@LR__1495-@LR__1494)
252a0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
252a4                 | LR__1494
252a4     3B 35 CA FA | 	rdbyte	result1, arg02 wz
252a8     3A 35 42 FC | 	wrbyte	result1, arg01
252ac     01 76 06 F1 | 	add	arg02, #1
252b0     01 74 06 F1 | 	add	arg01, #1
252b4     EC FF 9F 5D |  if_ne	jmp	#LR__1494
252b8                 | LR__1495
252b8     1D 35 02 F6 | 	mov	result1, _var01
252bc                 | __system____builtin_strcpy_ret
252bc     2D 00 64 FD | 	ret
252c0                 | 
252c0                 | __system____topofstack
252c0     00 4C 05 F6 | 	mov	COUNT_, #0
252c4     A9 00 A0 FD | 	call	#pushregs_
252c8     08 F0 07 F1 | 	add	ptra, #8
252cc     04 50 05 F1 | 	add	fp, #4
252d0     A8 74 62 FC | 	wrlong	arg01, fp
252d4     A8 34 02 F6 | 	mov	result1, fp
252d8     04 50 85 F1 | 	sub	fp, #4
252dc     A8 F0 03 F6 | 	mov	ptra, fp
252e0     B3 00 A0 FD | 	call	#popregs_
252e4                 | __system____topofstack_ret
252e4     2D 00 64 FD | 	ret
252e8                 | 
252e8                 | __system___make_methodptr
252e8     02 4C 05 F6 | 	mov	COUNT_, #2
252ec     A9 00 A0 FD | 	call	#pushregs_
252f0     3A 8D 02 F6 | 	mov	local01, arg01
252f4     3B 8F 02 F6 | 	mov	local02, arg02
252f8     08 74 06 F6 | 	mov	arg01, #8
252fc     80 2B B0 FD | 	call	#__system___gc_alloc_managed
25300     00 34 4E F2 | 	cmps	result1, #0 wz
25304     1A 8D 62 5C |  if_ne	wrlong	local01, result1
25308     1A 8D 02 56 |  if_ne	mov	local01, result1
2530c     04 8C 06 51 |  if_ne	add	local01, #4
25310     46 8F 62 5C |  if_ne	wrlong	local02, local01
25314     A8 F0 03 F6 | 	mov	ptra, fp
25318     B3 00 A0 FD | 	call	#popregs_
2531c                 | __system___make_methodptr_ret
2531c     2D 00 64 FD | 	ret
25320                 | 
25320                 | __system___lockmem
25320     01 4C 05 F6 | 	mov	COUNT_, #1
25324     A9 00 A0 FD | 	call	#pushregs_
25328     00 34 06 F6 | 	mov	result1, #0
2532c     01 34 62 FD | 	cogid	result1
25330     00 35 06 F1 | 	add	result1, #256
25334                 | LR__1496
25334     3A 8D 0A FB | 	rdlong	local01, arg01 wz
25338     3A 35 62 AC |  if_e	wrlong	result1, arg01
2533c     3A 8D 02 AB |  if_e	rdlong	local01, arg01
25340     3A 8D 02 AB |  if_e	rdlong	local01, arg01
25344     1A 8D 0A F2 | 	cmp	local01, result1 wz
25348     E8 FF 9F 5D |  if_ne	jmp	#LR__1496
2534c     A8 F0 03 F6 | 	mov	ptra, fp
25350     B3 00 A0 FD | 	call	#popregs_
25354                 | __system___lockmem_ret
25354     2D 00 64 FD | 	ret
25358                 | 
25358                 | __system___funcptr_cmp
25358     3A 35 02 FB | 	rdlong	result1, arg01
2535c     3B 3B 02 FB | 	rdlong	_var01, arg02
25360     1D 35 8A F1 | 	sub	result1, _var01 wz
25364     04 74 06 A1 |  if_e	add	arg01, #4
25368     3A 35 02 AB |  if_e	rdlong	result1, arg01
2536c     04 76 06 A1 |  if_e	add	arg02, #4
25370     3B 3B 02 AB |  if_e	rdlong	_var01, arg02
25374     1D 35 82 A1 |  if_e	sub	result1, _var01
25378                 | __system___funcptr_cmp_ret
25378     2D 00 64 FD | 	ret
2537c                 | 
2537c                 | __system___tx
2537c     02 4C 05 F6 | 	mov	COUNT_, #2
25380     A9 00 A0 FD | 	call	#pushregs_
25384     3A 8D 02 F6 | 	mov	local01, arg01
25388     0A 8C 0E F2 | 	cmp	local01, #10 wz
2538c     18 00 90 5D |  if_ne	jmp	#LR__1497
25390     08 A2 05 F1 | 	add	ptr___system__dat__, #8
25394     D1 8E 02 FB | 	rdlong	local02, ptr___system__dat__
25398     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
2539c     02 8E CE F7 | 	test	local02, #2 wz
253a0     0D 74 06 56 |  if_ne	mov	arg01, #13
253a4     70 FC BF 5D |  if_ne	call	#__system___txraw
253a8                 | LR__1497
253a8     46 75 02 F6 | 	mov	arg01, local01
253ac     68 FC BF FD | 	call	#__system___txraw
253b0     A8 F0 03 F6 | 	mov	ptra, fp
253b4     B3 00 A0 FD | 	call	#popregs_
253b8                 | __system___tx_ret
253b8     2D 00 64 FD | 	ret
253bc                 | 
253bc                 | __system___rx
253bc     01 4C 05 F6 | 	mov	COUNT_, #1
253c0     A9 00 A0 FD | 	call	#pushregs_
253c4                 | LR__1498
253c4     00 74 06 F6 | 	mov	arg01, #0
253c8     90 FC BF FD | 	call	#__system___rxraw
253cc     1A 8D 02 F6 | 	mov	local01, result1
253d0     FF FF 7F FF 
253d4     FF 8D 0E F2 | 	cmp	local01, ##-1 wz
253d8     E8 FF 9F AD |  if_e	jmp	#LR__1498
253dc     0D 8C 0E F2 | 	cmp	local01, #13 wz
253e0     14 00 90 5D |  if_ne	jmp	#LR__1499
253e4     08 A2 05 F1 | 	add	ptr___system__dat__, #8
253e8     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
253ec     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
253f0     02 34 CE F7 | 	test	result1, #2 wz
253f4     0A 8C 06 56 |  if_ne	mov	local01, #10
253f8                 | LR__1499
253f8     08 A2 05 F1 | 	add	ptr___system__dat__, #8
253fc     D1 74 02 FB | 	rdlong	arg01, ptr___system__dat__
25400     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
25404     01 74 CE F7 | 	test	arg01, #1 wz
25408     1C 00 90 AD |  if_e	jmp	#LR__1502
2540c     7F 8C 0E F2 | 	cmp	local01, #127 wz
25410     0C 00 90 5D |  if_ne	jmp	#LR__1500
25414     08 74 06 F6 | 	mov	arg01, #8
25418     60 FF BF FD | 	call	#__system___tx
2541c     08 00 90 FD | 	jmp	#LR__1501
25420                 | LR__1500
25420     46 75 02 F6 | 	mov	arg01, local01
25424     54 FF BF FD | 	call	#__system___tx
25428                 | LR__1501
25428                 | LR__1502
25428     46 35 02 F6 | 	mov	result1, local01
2542c     A8 F0 03 F6 | 	mov	ptra, fp
25430     B3 00 A0 FD | 	call	#popregs_
25434                 | __system___rx_ret
25434     2D 00 64 FD | 	ret
25438                 | 
25438                 | __system___waitms
25438     03 4C 05 F6 | 	mov	COUNT_, #3
2543c     A9 00 A0 FD | 	call	#pushregs_
25440     3A 8D 02 F6 | 	mov	local01, arg01
25444     14 8E 06 FB | 	rdlong	local02, #20
25448     CC AB 9D FE | 	loc	pa,	#(@LR__1504-@LR__1503)
2544c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25450                 | LR__1503
25450     01 00 00 FF 
25454     E9 8D 56 F2 | 	cmps	local01, ##1001 wc
25458     1F 8E 62 3D |  if_ae	waitx	local02
2545c     01 00 00 3F 
25460     E8 8D 86 31 |  if_ae	sub	local01, ##1000
25464     E8 FF 9F 3D |  if_ae	jmp	#LR__1503
25468                 | LR__1504
25468     0C A2 05 F1 | 	add	ptr___system__dat__, #12
2546c     D1 90 0A FB | 	rdlong	local03, ptr___system__dat__ wz
25470     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25474     1C 00 90 5D |  if_ne	jmp	#LR__1505
25478     01 00 00 FF 
2547c     E8 8F 16 FD | 	qdiv	local02, ##1000
25480     0C A2 05 F1 | 	add	ptr___system__dat__, #12
25484     18 8E 62 FD | 	getqx	local02
25488     47 91 02 F6 | 	mov	local03, local02
2548c     D1 8E 62 FC | 	wrlong	local02, ptr___system__dat__
25490     0C A2 85 F1 | 	sub	ptr___system__dat__, #12
25494                 | LR__1505
25494     01 8C 56 F2 | 	cmps	local01, #1 wc
25498     48 8D 02 3D |  if_ae	qmul	local01, local03
2549c     18 74 62 3D |  if_ae	getqx	arg01
254a0     1F 74 62 3D |  if_ae	waitx	arg01
254a4     A8 F0 03 F6 | 	mov	ptra, fp
254a8     B3 00 A0 FD | 	call	#popregs_
254ac                 | __system___waitms_ret
254ac     2D 00 64 FD | 	ret
254b0                 | 
254b0                 | __system___waitus
254b0     02 4C 05 F6 | 	mov	COUNT_, #2
254b4     A9 00 A0 FD | 	call	#pushregs_
254b8     3A 8D 02 F6 | 	mov	local01, arg01
254bc     10 A2 05 F1 | 	add	ptr___system__dat__, #16
254c0     D1 8E 0A FB | 	rdlong	local02, ptr___system__dat__ wz
254c4     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
254c8     20 00 90 5D |  if_ne	jmp	#LR__1506
254cc     14 8E 06 FB | 	rdlong	local02, #20
254d0     A1 07 00 FF 
254d4     40 8E 16 FD | 	qdiv	local02, ##1000000
254d8     10 A2 05 F1 | 	add	ptr___system__dat__, #16
254dc     18 74 62 FD | 	getqx	arg01
254e0     3A 8F 02 F6 | 	mov	local02, arg01
254e4     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
254e8     10 A2 85 F1 | 	sub	ptr___system__dat__, #16
254ec                 | LR__1506
254ec     47 8D 02 FD | 	qmul	local01, local02
254f0     18 74 62 FD | 	getqx	arg01
254f4     1F 74 62 FD | 	waitx	arg01
254f8     A8 F0 03 F6 | 	mov	ptra, fp
254fc     B3 00 A0 FD | 	call	#popregs_
25500                 | __system___waitus_ret
25500     2D 00 64 FD | 	ret
25504                 | 
25504                 | __system____getvfsforfile
25504     13 4C 05 F6 | 	mov	COUNT_, #19
25508     A9 00 A0 FD | 	call	#pushregs_
2550c     3A 8D 02 F6 | 	mov	local01, arg01
25510     3B 8F 02 F6 | 	mov	local02, arg02
25514     3C 91 02 F6 | 	mov	local03, arg03
25518     08 AB 9D FE | 	loc	pa,	#(@LR__1508-@LR__1507)
2551c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25520                 | LR__1507
25520     47 35 C2 FA | 	rdbyte	result1, local02
25524     2F 34 0E F2 | 	cmp	result1, #47 wz
25528     18 00 90 5D |  if_ne	jmp	#LR__1509
2552c     01 8E 06 F1 | 	add	local02, #1
25530     47 35 C2 FA | 	rdbyte	result1, local02
25534     01 8E 86 F1 | 	sub	local02, #1
25538     2F 34 0E F2 | 	cmp	result1, #47 wz
2553c     01 8E 06 A1 |  if_e	add	local02, #1
25540     DC FF 9F AD |  if_e	jmp	#LR__1507
25544                 | LR__1508
25544                 | LR__1509
25544     47 79 C2 FA | 	rdbyte	arg03, local02
25548     2F 78 0E F2 | 	cmp	arg03, #47 wz
2554c     14 00 90 5D |  if_ne	jmp	#LR__1510
25550     46 75 02 F6 | 	mov	arg01, local01
25554     47 77 02 F6 | 	mov	arg02, local02
25558     00 79 06 F6 | 	mov	arg03, #256
2555c     74 2F B0 FD | 	call	#__system__strncpy
25560     8C 00 90 FD | 	jmp	#LR__1515
25564                 | LR__1510
25564     7C A2 05 F1 | 	add	ptr___system__dat__, #124
25568     D1 76 02 F6 | 	mov	arg02, ptr___system__dat__
2556c     7C A2 85 F1 | 	sub	ptr___system__dat__, #124
25570     46 75 02 F6 | 	mov	arg01, local01
25574     00 79 06 F6 | 	mov	arg03, #256
25578     58 2F B0 FD | 	call	#__system__strncpy
2557c     47 93 CA FA | 	rdbyte	local04, local02 wz
25580     6C 00 90 AD |  if_e	jmp	#LR__1514
25584     47 95 C2 FA | 	rdbyte	local05, local02
25588     2E 94 0E F2 | 	cmp	local05, #46 wz
2558c     18 00 90 5D |  if_ne	jmp	#LR__1511
25590     01 8E 06 F1 | 	add	local02, #1
25594     47 97 C2 FA | 	rdbyte	local06, local02
25598     01 8E 86 F1 | 	sub	local02, #1
2559c     4B 99 02 F6 | 	mov	local07, local06
255a0     07 98 4E F7 | 	zerox	local07, #7 wz
255a4     48 00 90 AD |  if_e	jmp	#LR__1514
255a8                 | LR__1511
255a8     46 93 C2 FA | 	rdbyte	local04, local01
255ac     2F 92 0E F2 | 	cmp	local04, #47 wz
255b0     18 00 90 5D |  if_ne	jmp	#LR__1512
255b4     01 8C 06 F1 | 	add	local01, #1
255b8     46 99 C2 FA | 	rdbyte	local07, local01
255bc     01 8C 86 F1 | 	sub	local01, #1
255c0     4C 95 02 F6 | 	mov	local05, local07
255c4     07 94 4E F7 | 	zerox	local05, #7 wz
255c8     14 00 90 AD |  if_e	jmp	#LR__1513
255cc                 | LR__1512
255cc     47 01 00 FF 
255d0     5C 76 06 F6 | 	mov	arg02, ##@LR__1802
255d4     46 75 02 F6 | 	mov	arg01, local01
255d8     00 79 06 F6 | 	mov	arg03, #256
255dc     44 2F B0 FD | 	call	#__system__strncat
255e0                 | LR__1513
255e0     46 75 02 F6 | 	mov	arg01, local01
255e4     47 77 02 F6 | 	mov	arg02, local02
255e8     00 79 06 F6 | 	mov	arg03, #256
255ec     34 2F B0 FD | 	call	#__system__strncat
255f0                 | LR__1514
255f0                 | LR__1515
255f0     46 93 CA FA | 	rdbyte	local04, local01 wz
255f4     20 00 90 AD |  if_e	jmp	#LR__1516
255f8     46 95 C2 FA | 	rdbyte	local05, local01
255fc     2F 94 0E F2 | 	cmp	local05, #47 wz
25600     2C 00 90 5D |  if_ne	jmp	#LR__1517
25604     01 8C 06 F1 | 	add	local01, #1
25608     46 99 C2 FA | 	rdbyte	local07, local01
2560c     01 8C 86 F1 | 	sub	local01, #1
25610     07 98 4E F7 | 	zerox	local07, #7 wz
25614     18 00 90 5D |  if_ne	jmp	#LR__1517
25618                 | LR__1516
25618     01 00 00 FF 
2561c     7C A2 05 F1 | 	add	ptr___system__dat__, ##636
25620     D1 34 02 F6 | 	mov	result1, ptr___system__dat__
25624     01 00 00 FF 
25628     7C A2 85 F1 | 	sub	ptr___system__dat__, ##636
2562c     2C 02 90 FD | 	jmp	#LR__1532
25630                 | LR__1517
25630     00 9A 06 F6 | 	mov	local08, #0
25634                 | LR__1518
25634     04 9A 56 F2 | 	cmps	local08, #4 wc
25638     0C 02 90 3D |  if_ae	jmp	#LR__1531
2563c     4D 93 02 F6 | 	mov	local04, local08
25640     02 92 66 F0 | 	shl	local04, #2
25644     5C A2 05 F1 | 	add	ptr___system__dat__, #92
25648     D1 92 02 F1 | 	add	local04, ptr___system__dat__
2564c     49 99 0A FB | 	rdlong	local07, local04 wz
25650     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
25654     E8 01 90 AD |  if_e	jmp	#LR__1530
25658     4D 95 02 F6 | 	mov	local05, local08
2565c     02 94 66 F0 | 	shl	local05, #2
25660     5C A2 05 F1 | 	add	ptr___system__dat__, #92
25664     D1 94 02 F1 | 	add	local05, ptr___system__dat__
25668     4A 75 02 FB | 	rdlong	arg01, local05
2566c     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
25670     00 9C 06 F6 | 	mov	local09, #0
25674     98 A9 9D FE | 	loc	pa,	#(@LR__1520-@LR__1519)
25678     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2567c                 | LR__1519
2567c     3A 35 CA FA | 	rdbyte	result1, arg01 wz
25680     01 9C 06 51 |  if_ne	add	local09, #1
25684     01 74 06 51 |  if_ne	add	arg01, #1
25688     F0 FF 9F 5D |  if_ne	jmp	#LR__1519
2568c                 | LR__1520
2568c     4E 9F 02 F6 | 	mov	local10, local09
25690     4F 95 02 F6 | 	mov	local05, local10
25694     46 95 02 F1 | 	add	local05, local01
25698     4A 93 C2 FA | 	rdbyte	local04, local05
2569c     2F 92 0E F2 | 	cmp	local04, #47 wz
256a0     4F A1 02 56 |  if_ne	mov	local11, local10
256a4     46 A3 02 56 |  if_ne	mov	local12, local01
256a8     51 A1 02 51 |  if_ne	add	local11, local12
256ac     50 97 CA 5A |  if_ne	rdbyte	local06, local11 wz
256b0     8C 01 90 5D |  if_ne	jmp	#LR__1529
256b4     4D 99 02 F6 | 	mov	local07, local08
256b8     02 98 66 F0 | 	shl	local07, #2
256bc     5C A2 05 F1 | 	add	ptr___system__dat__, #92
256c0     D1 A4 02 F6 | 	mov	local13, ptr___system__dat__
256c4     D1 98 02 F1 | 	add	local07, ptr___system__dat__
256c8     4C A7 02 FB | 	rdlong	local14, local07
256cc     4F A9 02 F6 | 	mov	local15, local10
256d0     46 75 02 F6 | 	mov	arg01, local01
256d4     53 77 02 F6 | 	mov	arg02, local14
256d8     54 79 02 F6 | 	mov	arg03, local15
256dc     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
256e0     C8 2E B0 FD | 	call	#__system__strncmp
256e4     1A AB 0A F6 | 	mov	local16, result1 wz
256e8     54 01 90 5D |  if_ne	jmp	#LR__1529
256ec     4D 93 02 F6 | 	mov	local04, local08
256f0     02 92 66 F0 | 	shl	local04, #2
256f4     6C A2 05 F1 | 	add	ptr___system__dat__, #108
256f8     D1 92 02 F1 | 	add	local04, ptr___system__dat__
256fc     49 AD 02 FB | 	rdlong	local17, local04
25700     6C A2 85 F1 | 	sub	ptr___system__dat__, #108
25704     5C A9 9D FE | 	loc	pa,	#(@LR__1523-@LR__1521)
25708     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2570c                 | LR__1521
2570c     4F 95 02 F6 | 	mov	local05, local10
25710     01 94 06 F1 | 	add	local05, #1
25714     4A 99 02 F6 | 	mov	local07, local05
25718     46 97 02 F6 | 	mov	local06, local01
2571c     46 99 02 F1 | 	add	local07, local01
25720     4C 93 C2 FA | 	rdbyte	local04, local07
25724     2E 92 0E F2 | 	cmp	local04, #46 wz
25728     44 00 90 5D |  if_ne	jmp	#LR__1524
2572c     4F A3 02 F6 | 	mov	local12, local10
25730     02 A2 06 F1 | 	add	local12, #2
25734     51 AB 02 F6 | 	mov	local16, local12
25738     46 A7 02 F6 | 	mov	local14, local01
2573c     46 AB 02 F1 | 	add	local16, local01
25740     55 A1 C2 FA | 	rdbyte	local11, local16
25744     2F A0 0E F2 | 	cmp	local11, #47 wz
25748     1C 00 90 AD |  if_e	jmp	#LR__1522
2574c     4F A5 02 F6 | 	mov	local13, local10
25750     02 A4 06 F1 | 	add	local13, #2
25754     52 AF 02 F6 | 	mov	local18, local13
25758     46 B1 02 F6 | 	mov	local19, local01
2575c     46 AF 02 F1 | 	add	local18, local01
25760     57 A9 CA FA | 	rdbyte	local15, local18 wz
25764     08 00 90 5D |  if_ne	jmp	#LR__1524
25768                 | LR__1522
25768     01 9E 06 F1 | 	add	local10, #1
2576c     9C FF 9F FD | 	jmp	#LR__1521
25770                 | LR__1523
25770                 | LR__1524
25770     00 90 0E F2 | 	cmp	local03, #0 wz
25774     48 75 02 56 |  if_ne	mov	arg01, local03
25778     46 77 02 56 |  if_ne	mov	arg02, local01
2577c     00 79 06 56 |  if_ne	mov	arg03, #256
25780     50 2D B0 5D |  if_ne	call	#__system__strncpy
25784     46 77 02 F6 | 	mov	arg02, local01
25788     4F 77 02 F1 | 	add	arg02, local10
2578c     01 76 06 F1 | 	add	arg02, #1
25790     46 75 02 F6 | 	mov	arg01, local01
25794     00 FB BF FD | 	call	#__system____builtin_strcpy
25798     46 75 02 F6 | 	mov	arg01, local01
2579c     00 9C 06 F6 | 	mov	local09, #0
257a0     6C A8 9D FE | 	loc	pa,	#(@LR__1526-@LR__1525)
257a4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
257a8                 | LR__1525
257a8     3A 35 CA FA | 	rdbyte	result1, arg01 wz
257ac     01 9C 06 51 |  if_ne	add	local09, #1
257b0     01 74 06 51 |  if_ne	add	arg01, #1
257b4     F0 FF 9F 5D |  if_ne	jmp	#LR__1525
257b8                 | LR__1526
257b8     4E 35 02 F6 | 	mov	result1, local09
257bc     1A 9F 02 F6 | 	mov	local10, result1
257c0                 | LR__1527
257c0     01 9E 56 F2 | 	cmps	local10, #1 wc
257c4     70 00 90 CD |  if_b	jmp	#LR__1528
257c8     4F 95 02 F6 | 	mov	local05, local10
257cc     46 95 02 F1 | 	add	local05, local01
257d0     4A 93 C2 FA | 	rdbyte	local04, local05
257d4     2F 92 0E F2 | 	cmp	local04, #47 wz
257d8     4F 93 02 A6 |  if_e	mov	local04, local10
257dc     46 93 02 A1 |  if_e	add	local04, local01
257e0     49 01 48 AC |  if_e	wrbyte	#0, local04
257e4     01 9E 86 A1 |  if_e	sub	local10, #1
257e8     D4 FF 9F AD |  if_e	jmp	#LR__1527
257ec     4F 95 02 F6 | 	mov	local05, local10
257f0     46 95 02 F1 | 	add	local05, local01
257f4     4A 93 C2 FA | 	rdbyte	local04, local05
257f8     2E 92 0E F2 | 	cmp	local04, #46 wz
257fc     38 00 90 5D |  if_ne	jmp	#LR__1528
25800     02 9E 56 F2 | 	cmps	local10, #2 wc
25804     30 00 90 CD |  if_b	jmp	#LR__1528
25808     4F A3 02 F6 | 	mov	local12, local10
2580c     01 A2 86 F1 | 	sub	local12, #1
25810     46 A3 02 F1 | 	add	local12, local01
25814     51 97 C2 FA | 	rdbyte	local06, local12
25818     2F 96 0E F2 | 	cmp	local06, #47 wz
2581c     18 00 90 5D |  if_ne	jmp	#LR__1528
25820     4F 95 02 F6 | 	mov	local05, local10
25824     01 94 86 F1 | 	sub	local05, #1
25828     46 95 02 F1 | 	add	local05, local01
2582c     4A 01 48 FC | 	wrbyte	#0, local05
25830     02 9E 86 F1 | 	sub	local10, #2
25834     88 FF 9F FD | 	jmp	#LR__1527
25838                 | LR__1528
25838     56 35 02 F6 | 	mov	result1, local17
2583c     1C 00 90 FD | 	jmp	#LR__1532
25840                 | LR__1529
25840                 | LR__1530
25840     01 9A 06 F1 | 	add	local08, #1
25844     EC FD 9F FD | 	jmp	#LR__1518
25848                 | LR__1531
25848     01 00 00 FF 
2584c     EC A2 05 F1 | 	add	ptr___system__dat__, ##748
25850     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
25854     01 00 00 FF 
25858     EC A2 85 F1 | 	sub	ptr___system__dat__, ##748
2585c                 | LR__1532
2585c     A8 F0 03 F6 | 	mov	ptra, fp
25860     B3 00 A0 FD | 	call	#popregs_
25864                 | __system____getvfsforfile_ret
25864     2D 00 64 FD | 	ret
25868                 | 
25868                 | __system___basic_print_char
25868     03 4C 05 F6 | 	mov	COUNT_, #3
2586c     A9 00 A0 FD | 	call	#pushregs_
25870     3B 8D 02 F6 | 	mov	local01, arg02
25874     94 32 B0 FD | 	call	#__system___gettxfunc
25878     1A 75 0A F6 | 	mov	arg01, result1 wz
2587c     00 34 06 A6 |  if_e	mov	result1, #0
25880     24 00 90 AD |  if_e	jmp	#LR__1533
25884     3A 8F 02 FB | 	rdlong	local02, arg01
25888     04 74 06 F1 | 	add	arg01, #4
2588c     3A 91 02 FB | 	rdlong	local03, arg01
25890     46 75 02 F6 | 	mov	arg01, local01
25894     C9 8C 02 F6 | 	mov	local01, objptr
25898     47 93 01 F6 | 	mov	objptr, local02
2589c     2D 90 62 FD | 	call	local03
258a0     46 93 01 F6 | 	mov	objptr, local01
258a4     01 34 06 F6 | 	mov	result1, #1
258a8                 | LR__1533
258a8     A8 F0 03 F6 | 	mov	ptra, fp
258ac     B3 00 A0 FD | 	call	#popregs_
258b0                 | __system___basic_print_char_ret
258b0     2D 00 64 FD | 	ret
258b4                 | 
258b4                 | __system___basic_print_string
258b4     03 4C 05 F6 | 	mov	COUNT_, #3
258b8     A9 00 A0 FD | 	call	#pushregs_
258bc     3B 8D 02 F6 | 	mov	local01, arg02
258c0     3C 8F 02 F6 | 	mov	local02, arg03
258c4     44 32 B0 FD | 	call	#__system___gettxfunc
258c8     1A 91 0A F6 | 	mov	local03, result1 wz
258cc     00 34 06 A6 |  if_e	mov	result1, #0
258d0     18 00 90 AD |  if_e	jmp	#LR__1534
258d4     00 8C 0E F2 | 	cmp	local01, #0 wz
258d8     00 34 06 A6 |  if_e	mov	result1, #0
258dc     47 77 02 56 |  if_ne	mov	arg02, local02
258e0     46 79 02 56 |  if_ne	mov	arg03, local01
258e4     48 75 02 56 |  if_ne	mov	arg01, local03
258e8     AC 00 B0 5D |  if_ne	call	#__system___fmtstr
258ec                 | LR__1534
258ec     A8 F0 03 F6 | 	mov	ptra, fp
258f0     B3 00 A0 FD | 	call	#popregs_
258f4                 | __system___basic_print_string_ret
258f4     2D 00 64 FD | 	ret
258f8                 | 
258f8                 | __system___basic_print_integer
258f8     04 4C 05 F6 | 	mov	COUNT_, #4
258fc     A9 00 A0 FD | 	call	#pushregs_
25900     3B 8D 02 F6 | 	mov	local01, arg02
25904     3C 8F 02 F6 | 	mov	local02, arg03
25908     3D 91 02 F6 | 	mov	local03, arg04
2590c     FC 31 B0 FD | 	call	#__system___gettxfunc
25910     1A 93 0A F6 | 	mov	local04, result1 wz
25914     00 34 06 A6 |  if_e	mov	result1, #0
25918     47 77 02 56 |  if_ne	mov	arg02, local02
2591c     46 79 02 56 |  if_ne	mov	arg03, local01
25920     48 7B 02 56 |  if_ne	mov	arg04, local03
25924     49 75 02 56 |  if_ne	mov	arg01, local04
25928     58 01 B0 5D |  if_ne	call	#__system___fmtnum
2592c     A8 F0 03 F6 | 	mov	ptra, fp
25930     B3 00 A0 FD | 	call	#popregs_
25934                 | __system___basic_print_integer_ret
25934     2D 00 64 FD | 	ret
25938                 | 
25938                 | __system___fmtchar
25938     00 4C 05 F6 | 	mov	COUNT_, #0
2593c     A9 00 A0 FD | 	call	#pushregs_
25940     14 F0 07 F1 | 	add	ptra, #20
25944     04 50 05 F1 | 	add	fp, #4
25948     A8 74 62 FC | 	wrlong	arg01, fp
2594c     04 50 05 F1 | 	add	fp, #4
25950     A8 76 62 FC | 	wrlong	arg02, fp
25954     04 50 05 F1 | 	add	fp, #4
25958     A8 78 62 FC | 	wrlong	arg03, fp
2595c     04 50 05 F1 | 	add	fp, #4
25960     A8 78 42 FC | 	wrbyte	arg03, fp
25964     01 50 05 F1 | 	add	fp, #1
25968     A8 00 48 FC | 	wrbyte	#0, fp
2596c     0D 50 85 F1 | 	sub	fp, #13
25970     A8 74 02 FB | 	rdlong	arg01, fp
25974     04 50 05 F1 | 	add	fp, #4
25978     A8 76 02 FB | 	rdlong	arg02, fp
2597c     08 50 05 F1 | 	add	fp, #8
25980     A8 78 02 F6 | 	mov	arg03, fp
25984     10 50 85 F1 | 	sub	fp, #16
25988     0C 00 B0 FD | 	call	#__system___fmtstr
2598c     A8 F0 03 F6 | 	mov	ptra, fp
25990     B3 00 A0 FD | 	call	#popregs_
25994                 | __system___fmtchar_ret
25994     2D 00 64 FD | 	ret
25998                 | 
25998                 | __system___fmtstr
25998     0A 4C 05 F6 | 	mov	COUNT_, #10
2599c     A9 00 A0 FD | 	call	#pushregs_
259a0     3A 8D 02 F6 | 	mov	local01, arg01
259a4     3B 8F 02 F6 | 	mov	local02, arg02
259a8     3C 91 02 F6 | 	mov	local03, arg03
259ac     47 7B E2 F8 | 	getbyte	arg04, local02, #0
259b0     48 75 02 F6 | 	mov	arg01, local03
259b4     00 92 06 F6 | 	mov	local04, #0
259b8     54 A6 9D FE | 	loc	pa,	#(@LR__1536-@LR__1535)
259bc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
259c0                 | LR__1535
259c0     3A 35 CA FA | 	rdbyte	result1, arg01 wz
259c4     01 92 06 51 |  if_ne	add	local04, #1
259c8     01 74 06 51 |  if_ne	add	arg01, #1
259cc     F0 FF 9F 5D |  if_ne	jmp	#LR__1535
259d0                 | LR__1536
259d0     49 95 02 F6 | 	mov	local05, local04
259d4     00 7A 0E F2 | 	cmp	arg04, #0 wz
259d8     3D 95 7A 53 |  if_ne	fles	local05, arg04 wcz
259dc     47 77 02 F6 | 	mov	arg02, local02
259e0     4A 79 02 F6 | 	mov	arg03, local05
259e4     46 75 02 F6 | 	mov	arg01, local01
259e8     02 7A 06 F6 | 	mov	arg04, #2
259ec     8C 2D B0 FD | 	call	#__system___fmtpad
259f0     1A 97 02 F6 | 	mov	local06, result1
259f4     00 96 56 F2 | 	cmps	local06, #0 wc
259f8     4B 35 02 C6 |  if_b	mov	result1, local06
259fc     78 00 90 CD |  if_b	jmp	#LR__1539
25a00     00 98 06 F6 | 	mov	local07, #0
25a04                 | LR__1537
25a04     4A 99 52 F2 | 	cmps	local07, local05 wc
25a08     44 00 90 3D |  if_ae	jmp	#LR__1538
25a0c     46 75 02 F6 | 	mov	arg01, local01
25a10     3A 93 02 FB | 	rdlong	local04, arg01
25a14     04 74 06 F1 | 	add	arg01, #4
25a18     3A 9B 02 FB | 	rdlong	local08, arg01
25a1c     48 75 C2 FA | 	rdbyte	arg01, local03
25a20     C9 9C 02 F6 | 	mov	local09, objptr
25a24     49 93 01 F6 | 	mov	objptr, local04
25a28     2D 9A 62 FD | 	call	local08
25a2c     4E 93 01 F6 | 	mov	objptr, local09
25a30     1A 9D 02 F6 | 	mov	local09, result1
25a34     00 9C 56 F2 | 	cmps	local09, #0 wc
25a38     01 90 06 F1 | 	add	local03, #1
25a3c     4E 35 02 C6 |  if_b	mov	result1, local09
25a40     34 00 90 CD |  if_b	jmp	#LR__1539
25a44     4E 97 02 F1 | 	add	local06, local09
25a48     01 98 06 F1 | 	add	local07, #1
25a4c     B4 FF 9F FD | 	jmp	#LR__1537
25a50                 | LR__1538
25a50     47 77 02 F6 | 	mov	arg02, local02
25a54     4A 79 02 F6 | 	mov	arg03, local05
25a58     46 75 02 F6 | 	mov	arg01, local01
25a5c     01 7A 06 F6 | 	mov	arg04, #1
25a60     18 2D B0 FD | 	call	#__system___fmtpad
25a64     1A 9F 02 F6 | 	mov	local10, result1
25a68     00 9E 56 F2 | 	cmps	local10, #0 wc
25a6c     4F 35 02 C6 |  if_b	mov	result1, local10
25a70     4F 97 02 31 |  if_ae	add	local06, local10
25a74     4B 35 02 36 |  if_ae	mov	result1, local06
25a78                 | LR__1539
25a78     A8 F0 03 F6 | 	mov	ptra, fp
25a7c     B3 00 A0 FD | 	call	#popregs_
25a80                 | __system___fmtstr_ret
25a80     2D 00 64 FD | 	ret
25a84                 | 
25a84                 | __system___fmtnum
25a84     03 4C 05 F6 | 	mov	COUNT_, #3
25a88     A9 00 A0 FD | 	call	#pushregs_
25a8c     70 F0 07 F1 | 	add	ptra, #112
25a90     04 50 05 F1 | 	add	fp, #4
25a94     A8 74 62 FC | 	wrlong	arg01, fp
25a98     04 50 05 F1 | 	add	fp, #4
25a9c     A8 76 62 FC | 	wrlong	arg02, fp
25aa0     04 50 05 F1 | 	add	fp, #4
25aa4     A8 78 62 FC | 	wrlong	arg03, fp
25aa8     04 50 05 F1 | 	add	fp, #4
25aac     A8 7A 62 FC | 	wrlong	arg04, fp
25ab0     04 50 05 F1 | 	add	fp, #4
25ab4     A8 34 02 F6 | 	mov	result1, fp
25ab8     44 50 05 F1 | 	add	fp, #68
25abc     A8 34 62 FC | 	wrlong	result1, fp
25ac0     04 50 05 F1 | 	add	fp, #4
25ac4     A8 00 68 FC | 	wrlong	#0, fp
25ac8     54 50 85 F1 | 	sub	fp, #84
25acc     A8 34 02 FB | 	rdlong	result1, fp
25ad0     10 34 46 F0 | 	shr	result1, #16
25ad4     3F 34 06 F5 | 	and	result1, #63
25ad8     58 50 05 F1 | 	add	fp, #88
25adc     A8 34 62 FC | 	wrlong	result1, fp
25ae0     58 50 85 F1 | 	sub	fp, #88
25ae4     A8 34 02 FB | 	rdlong	result1, fp
25ae8     1A 35 E2 F8 | 	getbyte	result1, result1, #0
25aec     5C 50 05 F1 | 	add	fp, #92
25af0     A8 34 62 FC | 	wrlong	result1, fp
25af4     5C 50 85 F1 | 	sub	fp, #92
25af8     A8 34 02 FB | 	rdlong	result1, fp
25afc     1A 34 46 F0 | 	shr	result1, #26
25b00     03 34 06 F5 | 	and	result1, #3
25b04     60 50 05 F1 | 	add	fp, #96
25b08     A8 34 62 FC | 	wrlong	result1, fp
25b0c     08 50 85 F1 | 	sub	fp, #8
25b10     A8 8C 02 FB | 	rdlong	local01, fp
25b14     60 50 85 F1 | 	sub	fp, #96
25b18     01 8C 56 F2 | 	cmps	local01, #1 wc
25b1c     60 50 05 31 |  if_ae	add	fp, #96
25b20     A8 8C 02 3B |  if_ae	rdlong	local01, fp
25b24     01 8C 86 31 |  if_ae	sub	local01, #1
25b28     A8 8C 62 3C |  if_ae	wrlong	local01, fp
25b2c     60 50 85 31 |  if_ae	sub	fp, #96
25b30     64 50 05 F1 | 	add	fp, #100
25b34     A8 8C 02 FB | 	rdlong	local01, fp
25b38     64 50 85 F1 | 	sub	fp, #100
25b3c     41 8C 56 F2 | 	cmps	local01, #65 wc
25b40     64 50 05 C1 |  if_b	add	fp, #100
25b44     A8 8C 02 CB |  if_b	rdlong	local01, fp
25b48     64 50 85 C1 |  if_b	sub	fp, #100
25b4c     00 8C 4E C2 |  if_b	cmps	local01, #0 wz
25b50     64 50 05 B1 |  if_nc_or_z	add	fp, #100
25b54     A8 80 68 BC |  if_nc_or_z	wrlong	#64, fp
25b58     64 50 85 B1 |  if_nc_or_z	sub	fp, #100
25b5c     68 50 05 F1 | 	add	fp, #104
25b60     A8 8C 02 FB | 	rdlong	local01, fp
25b64     68 50 85 F1 | 	sub	fp, #104
25b68     03 8C 0E F2 | 	cmp	local01, #3 wz
25b6c     68 50 05 A1 |  if_e	add	fp, #104
25b70     A8 00 68 AC |  if_e	wrlong	#0, fp
25b74     68 50 85 A1 |  if_e	sub	fp, #104
25b78     30 00 90 AD |  if_e	jmp	#LR__1541
25b7c     0C 50 05 F1 | 	add	fp, #12
25b80     A8 8C 02 FB | 	rdlong	local01, fp
25b84     0C 50 85 F1 | 	sub	fp, #12
25b88     00 8C 56 F2 | 	cmps	local01, #0 wc
25b8c     1C 00 90 3D |  if_ae	jmp	#LR__1540
25b90     68 50 05 F1 | 	add	fp, #104
25b94     A8 08 68 FC | 	wrlong	#4, fp
25b98     5C 50 85 F1 | 	sub	fp, #92
25b9c     A8 8C 02 FB | 	rdlong	local01, fp
25ba0     46 8D 62 F6 | 	neg	local01, local01
25ba4     A8 8C 62 FC | 	wrlong	local01, fp
25ba8     0C 50 85 F1 | 	sub	fp, #12
25bac                 | LR__1540
25bac                 | LR__1541
25bac     68 50 05 F1 | 	add	fp, #104
25bb0     A8 8C 0A FB | 	rdlong	local01, fp wz
25bb4     68 50 85 F1 | 	sub	fp, #104
25bb8     E8 00 90 AD |  if_e	jmp	#LR__1548
25bbc     5C 50 05 F1 | 	add	fp, #92
25bc0     A8 8C 02 FB | 	rdlong	local01, fp
25bc4     01 8C 06 F1 | 	add	local01, #1
25bc8     A8 8C 62 FC | 	wrlong	local01, fp
25bcc     04 50 05 F1 | 	add	fp, #4
25bd0     A8 8C 02 FB | 	rdlong	local01, fp
25bd4     04 50 05 F1 | 	add	fp, #4
25bd8     A8 78 02 FB | 	rdlong	arg03, fp
25bdc     64 50 85 F1 | 	sub	fp, #100
25be0     3C 8D 0A F2 | 	cmp	local01, arg03 wz
25be4     38 00 90 5D |  if_ne	jmp	#LR__1543
25be8     60 50 05 F1 | 	add	fp, #96
25bec     A8 8C 02 FB | 	rdlong	local01, fp
25bf0     01 8C 8E F1 | 	sub	local01, #1 wz
25bf4     A8 8C 62 FC | 	wrlong	local01, fp
25bf8     60 50 85 F1 | 	sub	fp, #96
25bfc     20 00 90 5D |  if_ne	jmp	#LR__1542
25c00     04 50 05 F1 | 	add	fp, #4
25c04     A8 74 02 FB | 	rdlong	arg01, fp
25c08     04 50 05 F1 | 	add	fp, #4
25c0c     A8 76 02 FB | 	rdlong	arg02, fp
25c10     08 50 85 F1 | 	sub	fp, #8
25c14     23 78 06 F6 | 	mov	arg03, #35
25c18     1C FD BF FD | 	call	#__system___fmtchar
25c1c     6C 01 90 FD | 	jmp	#LR__1553
25c20                 | LR__1542
25c20                 | LR__1543
25c20     68 50 05 F1 | 	add	fp, #104
25c24     A8 8C 02 FB | 	rdlong	local01, fp
25c28     68 50 85 F1 | 	sub	fp, #104
25c2c     02 8C 0E F2 | 	cmp	local01, #2 wz
25c30     20 00 90 5D |  if_ne	jmp	#LR__1544
25c34     58 50 05 F1 | 	add	fp, #88
25c38     A8 8C 02 FB | 	rdlong	local01, fp
25c3c     46 35 02 F6 | 	mov	result1, local01
25c40     01 34 06 F1 | 	add	result1, #1
25c44     A8 34 62 FC | 	wrlong	result1, fp
25c48     58 50 85 F1 | 	sub	fp, #88
25c4c     46 41 48 FC | 	wrbyte	#32, local01
25c50     50 00 90 FD | 	jmp	#LR__1547
25c54                 | LR__1544
25c54     68 50 05 F1 | 	add	fp, #104
25c58     A8 8C 02 FB | 	rdlong	local01, fp
25c5c     68 50 85 F1 | 	sub	fp, #104
25c60     04 8C 0E F2 | 	cmp	local01, #4 wz
25c64     20 00 90 5D |  if_ne	jmp	#LR__1545
25c68     58 50 05 F1 | 	add	fp, #88
25c6c     A8 8C 02 FB | 	rdlong	local01, fp
25c70     46 35 02 F6 | 	mov	result1, local01
25c74     01 34 06 F1 | 	add	result1, #1
25c78     A8 34 62 FC | 	wrlong	result1, fp
25c7c     58 50 85 F1 | 	sub	fp, #88
25c80     46 5B 48 FC | 	wrbyte	#45, local01
25c84     1C 00 90 FD | 	jmp	#LR__1546
25c88                 | LR__1545
25c88     58 50 05 F1 | 	add	fp, #88
25c8c     A8 8C 02 FB | 	rdlong	local01, fp
25c90     46 35 02 F6 | 	mov	result1, local01
25c94     01 34 06 F1 | 	add	result1, #1
25c98     A8 34 62 FC | 	wrlong	result1, fp
25c9c     58 50 85 F1 | 	sub	fp, #88
25ca0     46 57 48 FC | 	wrbyte	#43, local01
25ca4                 | LR__1546
25ca4                 | LR__1547
25ca4                 | LR__1548
25ca4     58 50 05 F1 | 	add	fp, #88
25ca8     A8 74 02 FB | 	rdlong	arg01, fp
25cac     4C 50 85 F1 | 	sub	fp, #76
25cb0     A8 76 02 FB | 	rdlong	arg02, fp
25cb4     04 50 05 F1 | 	add	fp, #4
25cb8     A8 78 02 FB | 	rdlong	arg03, fp
25cbc     50 50 05 F1 | 	add	fp, #80
25cc0     A8 7A 02 FB | 	rdlong	arg04, fp
25cc4     00 7C 06 F6 | 	mov	arg05, #0
25cc8     58 50 85 F1 | 	sub	fp, #88
25ccc     A8 8C 02 FB | 	rdlong	local01, fp
25cd0     08 50 85 F1 | 	sub	fp, #8
25cd4     1D 8C 2E F4 | 	testbn	local01, #29 wz
25cd8     01 7C 06 56 |  if_ne	mov	arg05, #1
25cdc     5C 2B B0 FD | 	call	#__system___uitoa
25ce0     1A 8F 02 F6 | 	mov	local02, result1
25ce4     5C 50 05 F1 | 	add	fp, #92
25ce8     A8 8C 02 FB | 	rdlong	local01, fp
25cec     47 8D 02 F1 | 	add	local01, local02
25cf0     A8 8C 62 FC | 	wrlong	local01, fp
25cf4     08 50 05 F1 | 	add	fp, #8
25cf8     A8 90 02 FB | 	rdlong	local03, fp
25cfc     64 50 85 F1 | 	sub	fp, #100
25d00     48 8D 5A F2 | 	cmps	local01, local03 wcz
25d04     64 00 90 ED |  if_be	jmp	#LR__1552
25d08     34 A3 9D FE | 	loc	pa,	#(@LR__1550-@LR__1549)
25d0c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
25d10                 | LR__1549
25d10     64 50 05 F1 | 	add	fp, #100
25d14     A8 8E 02 FB | 	rdlong	local02, fp
25d18     47 91 02 F6 | 	mov	local03, local02
25d1c     01 90 86 F1 | 	sub	local03, #1
25d20     A8 90 62 FC | 	wrlong	local03, fp
25d24     64 50 85 F1 | 	sub	fp, #100
25d28     01 8E 56 F2 | 	cmps	local02, #1 wc
25d2c     20 00 90 CD |  if_b	jmp	#LR__1551
25d30     58 50 05 F1 | 	add	fp, #88
25d34     A8 8E 02 FB | 	rdlong	local02, fp
25d38     47 91 02 F6 | 	mov	local03, local02
25d3c     01 90 06 F1 | 	add	local03, #1
25d40     A8 90 62 FC | 	wrlong	local03, fp
25d44     58 50 85 F1 | 	sub	fp, #88
25d48     47 47 48 FC | 	wrbyte	#35, local02
25d4c     C0 FF 9F FD | 	jmp	#LR__1549
25d50                 | LR__1550
25d50                 | LR__1551
25d50     58 50 05 F1 | 	add	fp, #88
25d54     A8 8E 02 FB | 	rdlong	local02, fp
25d58     47 91 02 F6 | 	mov	local03, local02
25d5c     01 90 06 F1 | 	add	local03, #1
25d60     A8 90 62 FC | 	wrlong	local03, fp
25d64     58 50 85 F1 | 	sub	fp, #88
25d68     47 01 48 FC | 	wrbyte	#0, local02
25d6c                 | LR__1552
25d6c     04 50 05 F1 | 	add	fp, #4
25d70     A8 74 02 FB | 	rdlong	arg01, fp
25d74     04 50 05 F1 | 	add	fp, #4
25d78     A8 76 02 FB | 	rdlong	arg02, fp
25d7c     0C 50 05 F1 | 	add	fp, #12
25d80     A8 78 02 F6 | 	mov	arg03, fp
25d84     14 50 85 F1 | 	sub	fp, #20
25d88     0C FC BF FD | 	call	#__system___fmtstr
25d8c                 | LR__1553
25d8c     A8 F0 03 F6 | 	mov	ptra, fp
25d90     B3 00 A0 FD | 	call	#popregs_
25d94                 | __system___fmtnum_ret
25d94     2D 00 64 FD | 	ret
25d98                 | 
25d98                 | __system___fmtfloat
25d98     10 4C 05 F6 | 	mov	COUNT_, #16
25d9c     A9 00 A0 FD | 	call	#pushregs_
25da0     24 F1 07 F1 | 	add	ptra, #292
25da4     04 50 05 F1 | 	add	fp, #4
25da8     A8 74 62 FC | 	wrlong	arg01, fp
25dac     04 50 05 F1 | 	add	fp, #4
25db0     A8 76 62 FC | 	wrlong	arg02, fp
25db4     04 50 05 F1 | 	add	fp, #4
25db8     A8 78 62 FC | 	wrlong	arg03, fp
25dbc     04 50 05 F1 | 	add	fp, #4
25dc0     A8 7A 62 FC | 	wrlong	arg04, fp
25dc4     0C 50 05 F1 | 	add	fp, #12
25dc8     A8 14 68 FC | 	wrlong	#10, fp
25dcc     08 50 05 F1 | 	add	fp, #8
25dd0     A8 00 68 FC | 	wrlong	#0, fp
25dd4     08 50 05 F1 | 	add	fp, #8
25dd8     A8 00 68 FC | 	wrlong	#0, fp
25ddc     08 50 05 F1 | 	add	fp, #8
25de0     A8 00 68 FC | 	wrlong	#0, fp
25de4     04 50 05 F1 | 	add	fp, #4
25de8     A8 04 68 FC | 	wrlong	#2, fp
25dec     04 50 05 F1 | 	add	fp, #4
25df0     A8 00 68 FC | 	wrlong	#0, fp
25df4     04 50 05 F1 | 	add	fp, #4
25df8     A8 00 68 FC | 	wrlong	#0, fp
25dfc     04 50 05 F1 | 	add	fp, #4
25e00     A8 00 68 FC | 	wrlong	#0, fp
25e04     04 50 05 F1 | 	add	fp, #4
25e08     A8 00 68 FC | 	wrlong	#0, fp
25e0c     18 50 05 F1 | 	add	fp, #24
25e10     A8 00 68 FC | 	wrlong	#0, fp
25e14     68 50 05 F1 | 	add	fp, #104
25e18     A8 8C 02 F6 | 	mov	local01, fp
25e1c     08 50 85 F1 | 	sub	fp, #8
25e20     A8 8C 62 FC | 	wrlong	local01, fp
25e24     04 50 05 F1 | 	add	fp, #4
25e28     A8 8C 62 FC | 	wrlong	local01, fp
25e2c     BC 50 85 F1 | 	sub	fp, #188
25e30     A8 8E 02 FB | 	rdlong	local02, fp
25e34     10 8E 46 F0 | 	shr	local02, #16
25e38     3F 8E 06 F5 | 	and	local02, #63
25e3c     B0 50 05 F1 | 	add	fp, #176
25e40     A8 8E 62 FC | 	wrlong	local02, fp
25e44     B0 50 85 F1 | 	sub	fp, #176
25e48     A8 8E 02 FB | 	rdlong	local02, fp
25e4c     1C 8E 46 F0 | 	shr	local02, #28
25e50     01 8E 06 F5 | 	and	local02, #1
25e54     08 51 05 F1 | 	add	fp, #264
25e58     A8 8E 62 FC | 	wrlong	local02, fp
25e5c     58 50 85 F1 | 	sub	fp, #88
25e60     A8 8E 0A FB | 	rdlong	local02, fp wz
25e64     B8 50 85 F1 | 	sub	fp, #184
25e68     3C 00 90 5D |  if_ne	jmp	#LR__1555
25e6c     10 50 05 F1 | 	add	fp, #16
25e70     A8 8E 02 FB | 	rdlong	local02, fp
25e74     10 50 85 F1 | 	sub	fp, #16
25e78     61 8E 0E F2 | 	cmp	local02, #97 wz
25e7c     18 00 90 5D |  if_ne	jmp	#LR__1554
25e80     B8 50 05 F1 | 	add	fp, #184
25e84     A8 1A 68 FC | 	wrlong	#13, fp
25e88     84 50 85 F1 | 	sub	fp, #132
25e8c     A8 02 68 FC | 	wrlong	#1, fp
25e90     34 50 85 F1 | 	sub	fp, #52
25e94     24 00 90 FD | 	jmp	#LR__1556
25e98                 | LR__1554
25e98     B8 50 05 F1 | 	add	fp, #184
25e9c     A8 0C 68 FC | 	wrlong	#6, fp
25ea0     B8 50 85 F1 | 	sub	fp, #184
25ea4     14 00 90 FD | 	jmp	#LR__1556
25ea8                 | LR__1555
25ea8     B8 50 05 F1 | 	add	fp, #184
25eac     A8 8E 02 FB | 	rdlong	local02, fp
25eb0     01 8E 86 F1 | 	sub	local02, #1
25eb4     A8 8E 62 FC | 	wrlong	local02, fp
25eb8     B8 50 85 F1 | 	sub	fp, #184
25ebc                 | LR__1556
25ebc     08 50 05 F1 | 	add	fp, #8
25ec0     A8 8E 02 FB | 	rdlong	local02, fp
25ec4     16 8E 46 F0 | 	shr	local02, #22
25ec8     03 8E 06 F5 | 	and	local02, #3
25ecc     04 51 05 F1 | 	add	fp, #260
25ed0     A8 8E 62 FC | 	wrlong	local02, fp
25ed4     04 51 85 F1 | 	sub	fp, #260
25ed8     A8 8E 02 FB | 	rdlong	local02, fp
25edc     1D 8E 46 F0 | 	shr	local02, #29
25ee0     01 8E 06 F5 | 	and	local02, #1
25ee4     B4 50 05 F1 | 	add	fp, #180
25ee8     A8 8E 62 FC | 	wrlong	local02, fp
25eec     B4 50 85 F1 | 	sub	fp, #180
25ef0     A8 8E 02 FB | 	rdlong	local02, fp
25ef4     47 8F EA F8 | 	getbyte	local02, local02, #1
25ef8     60 50 05 F1 | 	add	fp, #96
25efc     A8 8E 62 FC | 	wrlong	local02, fp
25f00     60 50 85 F1 | 	sub	fp, #96
25f04     A8 8E 02 FB | 	rdlong	local02, fp
25f08     47 8F E2 F8 | 	getbyte	local02, local02, #0
25f0c     64 50 05 F1 | 	add	fp, #100
25f10     A8 8E 62 FC | 	wrlong	local02, fp
25f14     00 8E 06 F6 | 	mov	local02, #0
25f18     5C 50 85 F1 | 	sub	fp, #92
25f1c     A8 8C 02 FB | 	rdlong	local01, fp
25f20     65 8C 0E F2 | 	cmp	local01, #101 wz
25f24     01 8E 06 A6 |  if_e	mov	local02, #1
25f28     14 50 05 F1 | 	add	fp, #20
25f2c     A8 8E 62 FC | 	wrlong	local02, fp
25f30     98 50 05 F1 | 	add	fp, #152
25f34     A8 8C 0A FB | 	rdlong	local01, fp wz
25f38     45 8E 06 56 |  if_ne	mov	local02, #69
25f3c     65 8E 06 A6 |  if_e	mov	local02, #101
25f40     8C 50 85 F1 | 	sub	fp, #140
25f44     A8 8E 62 FC | 	wrlong	local02, fp
25f48     20 50 85 F1 | 	sub	fp, #32
25f4c     A8 8E 02 FB | 	rdlong	local02, fp
25f50     10 50 85 F1 | 	sub	fp, #16
25f54     61 8E 0E F2 | 	cmp	local02, #97 wz
25f58     4C 00 90 5D |  if_ne	jmp	#LR__1557
25f5c     24 50 05 F1 | 	add	fp, #36
25f60     A8 02 68 FC | 	wrlong	#1, fp
25f64     98 50 05 F1 | 	add	fp, #152
25f68     A8 8C 0A FB | 	rdlong	local01, fp wz
25f6c     50 8E 06 56 |  if_ne	mov	local02, #80
25f70     70 8E 06 A6 |  if_e	mov	local02, #112
25f74     8C 50 85 F1 | 	sub	fp, #140
25f78     A8 8E 62 FC | 	wrlong	local02, fp
25f7c     14 50 85 F1 | 	sub	fp, #20
25f80     A8 04 68 FC | 	wrlong	#2, fp
25f84     1C 50 05 F1 | 	add	fp, #28
25f88     A8 02 68 FC | 	wrlong	#1, fp
25f8c     84 50 05 F1 | 	add	fp, #132
25f90     A8 8C 0A FB | 	rdlong	local01, fp wz
25f94     58 8E 06 56 |  if_ne	mov	local02, #88
25f98     78 8E 06 A6 |  if_e	mov	local02, #120
25f9c     7C 50 85 F1 | 	sub	fp, #124
25fa0     A8 8E 62 FC | 	wrlong	local02, fp
25fa4     40 50 85 F1 | 	sub	fp, #64
25fa8                 | LR__1557
25fa8     10 50 05 F1 | 	add	fp, #16
25fac     A8 8E 02 FB | 	rdlong	local02, fp
25fb0     10 50 85 F1 | 	sub	fp, #16
25fb4     23 8E 0E F2 | 	cmp	local02, #35 wz
25fb8     3C 00 90 5D |  if_ne	jmp	#LR__1560
25fbc     48 50 05 F1 | 	add	fp, #72
25fc0     A8 02 68 FC | 	wrlong	#1, fp
25fc4     C8 50 05 F1 | 	add	fp, #200
25fc8     A8 8E 0A FB | 	rdlong	local02, fp wz
25fcc     10 51 85 F1 | 	sub	fp, #272
25fd0     18 00 90 AD |  if_e	jmp	#LR__1558
25fd4     10 50 05 F1 | 	add	fp, #16
25fd8     A8 CC 68 FC | 	wrlong	#102, fp
25fdc     00 51 05 F1 | 	add	fp, #256
25fe0     A8 00 68 FC | 	wrlong	#0, fp
25fe4     10 51 85 F1 | 	sub	fp, #272
25fe8     0C 00 90 FD | 	jmp	#LR__1559
25fec                 | LR__1558
25fec     10 51 05 F1 | 	add	fp, #272
25ff0     A8 02 68 FC | 	wrlong	#1, fp
25ff4     10 51 85 F1 | 	sub	fp, #272
25ff8                 | LR__1559
25ff8                 | LR__1560
25ff8     08 50 05 F1 | 	add	fp, #8
25ffc     A8 8E 02 FB | 	rdlong	local02, fp
26000     1A 8E 46 F0 | 	shr	local02, #26
26004     03 8E 06 F5 | 	and	local02, #3
26008     5C 50 05 F1 | 	add	fp, #92
2600c     A8 8E 62 FC | 	wrlong	local02, fp
26010     58 50 85 F1 | 	sub	fp, #88
26014     A8 34 02 FB | 	rdlong	result1, fp
26018     0C 50 85 F1 | 	sub	fp, #12
2601c     1F 34 4E F0 | 	shr	result1, #31 wz
26020     20 00 90 AD |  if_e	jmp	#LR__1561
26024     2C 50 05 F1 | 	add	fp, #44
26028     A8 5A 68 FC | 	wrlong	#45, fp
2602c     20 50 85 F1 | 	sub	fp, #32
26030     A8 34 02 FB | 	rdlong	result1, fp
26034     1F 34 E6 F4 | 	bitnot	result1, #31
26038     A8 34 62 FC | 	wrlong	result1, fp
2603c     0C 50 85 F1 | 	sub	fp, #12
26040     3C 00 90 FD | 	jmp	#LR__1563
26044                 | LR__1561
26044     64 50 05 F1 | 	add	fp, #100
26048     A8 8E 02 FB | 	rdlong	local02, fp
2604c     64 50 85 F1 | 	sub	fp, #100
26050     01 8E 0E F2 | 	cmp	local02, #1 wz
26054     2C 50 05 A1 |  if_e	add	fp, #44
26058     A8 56 68 AC |  if_e	wrlong	#43, fp
2605c     2C 50 85 A1 |  if_e	sub	fp, #44
26060     1C 00 90 AD |  if_e	jmp	#LR__1562
26064     64 50 05 F1 | 	add	fp, #100
26068     A8 8E 02 FB | 	rdlong	local02, fp
2606c     64 50 85 F1 | 	sub	fp, #100
26070     02 8E 0E F2 | 	cmp	local02, #2 wz
26074     2C 50 05 A1 |  if_e	add	fp, #44
26078     A8 40 68 AC |  if_e	wrlong	#32, fp
2607c     2C 50 85 A1 |  if_e	sub	fp, #44
26080                 | LR__1562
26080                 | LR__1563
26080     08 50 05 F1 | 	add	fp, #8
26084     A8 8E 02 FB | 	rdlong	local02, fp
26088     18 8E 46 F0 | 	shr	local02, #24
2608c     03 8E 06 F5 | 	and	local02, #3
26090     3C 50 05 F1 | 	add	fp, #60
26094     A8 8E 62 FC | 	wrlong	local02, fp
26098     00 8E 06 F6 | 	mov	local02, #0
2609c     18 50 85 F1 | 	sub	fp, #24
260a0     A8 90 02 FB | 	rdlong	local03, fp
260a4     2C 50 85 F1 | 	sub	fp, #44
260a8     48 8D 0A F6 | 	mov	local01, local03 wz
260ac     18 00 90 5D |  if_ne	jmp	#LR__1564
260b0     1C 50 05 F1 | 	add	fp, #28
260b4     A8 92 02 FB | 	rdlong	local04, fp
260b8     1C 50 85 F1 | 	sub	fp, #28
260bc     49 95 02 F6 | 	mov	local05, local04
260c0     0A 94 0E F2 | 	cmp	local05, #10 wz
260c4     04 00 90 AD |  if_e	jmp	#LR__1565
260c8                 | LR__1564
260c8     01 8E 66 F5 | 	xor	local02, #1
260cc                 | LR__1565
260cc     3C 50 05 F1 | 	add	fp, #60
260d0     A8 8E 62 FC | 	wrlong	local02, fp
260d4     3C 50 85 F1 | 	sub	fp, #60
260d8     00 8E 0E F2 | 	cmp	local02, #0 wz
260dc     10 01 90 AD |  if_e	jmp	#LR__1567
260e0     44 50 05 F1 | 	add	fp, #68
260e4     A8 90 02 FB | 	rdlong	local03, fp
260e8     44 50 85 F1 | 	sub	fp, #68
260ec     02 90 0E F2 | 	cmp	local03, #2 wz
260f0     FC 00 90 5D |  if_ne	jmp	#LR__1567
260f4     0C 51 05 F1 | 	add	fp, #268
260f8     A8 96 02 FB | 	rdlong	local06, fp
260fc     0C 51 85 F1 | 	sub	fp, #268
26100     4B 93 02 F6 | 	mov	local04, local06
26104     02 92 0E F2 | 	cmp	local04, #2 wz
26108     E4 00 90 AD |  if_e	jmp	#LR__1567
2610c     C0 50 05 F1 | 	add	fp, #192
26110     A8 74 02 FB | 	rdlong	arg01, fp
26114     94 50 85 F1 | 	sub	fp, #148
26118     A8 76 02 FB | 	rdlong	arg02, fp
2611c     14 50 05 F1 | 	add	fp, #20
26120     A8 78 02 FB | 	rdlong	arg03, fp
26124     40 50 85 F1 | 	sub	fp, #64
26128     B0 29 B0 FD | 	call	#__system__emitsign_1165
2612c     14 51 05 F1 | 	add	fp, #276
26130     A8 34 62 FC | 	wrlong	result1, fp
26134     14 51 85 F1 | 	sub	fp, #276
26138     00 34 56 F2 | 	cmps	result1, #0 wc
2613c     14 51 05 C1 |  if_b	add	fp, #276
26140     A8 34 02 CB |  if_b	rdlong	result1, fp
26144     14 51 85 C1 |  if_b	sub	fp, #276
26148     E0 0B 90 CD |  if_b	jmp	#LR__1618
2614c     C0 50 05 F1 | 	add	fp, #192
26150     A8 8E 02 FB | 	rdlong	local02, fp
26154     54 50 05 F1 | 	add	fp, #84
26158     A8 94 02 FB | 	rdlong	local05, fp
2615c     4A 91 02 F6 | 	mov	local03, local05
26160     4A 8F 02 F1 | 	add	local02, local05
26164     54 50 85 F1 | 	sub	fp, #84
26168     A8 8E 62 FC | 	wrlong	local02, fp
2616c     58 50 85 F1 | 	sub	fp, #88
26170     A8 8C 0A FB | 	rdlong	local01, fp wz
26174     68 50 85 F1 | 	sub	fp, #104
26178     64 00 90 AD |  if_e	jmp	#LR__1566
2617c     68 50 05 F1 | 	add	fp, #104
26180     A8 8E 02 FB | 	rdlong	local02, fp
26184     AC 50 05 F1 | 	add	fp, #172
26188     A8 90 02 FB | 	rdlong	local03, fp
2618c     48 8F 82 F1 | 	sub	local02, local03
26190     AC 50 85 F1 | 	sub	fp, #172
26194     A8 8E 62 FC | 	wrlong	local02, fp
26198     68 50 85 F1 | 	sub	fp, #104
2619c     00 8E 56 F2 | 	cmps	local02, #0 wc
261a0     68 50 05 C1 |  if_b	add	fp, #104
261a4     A8 00 68 CC |  if_b	wrlong	#0, fp
261a8     68 50 85 C1 |  if_b	sub	fp, #104
261ac     08 50 05 F1 | 	add	fp, #8
261b0     A8 8C 02 FB | 	rdlong	local01, fp
261b4     E8 8C 06 F4 | 	bitl	local01, #232
261b8     A8 8C 62 FC | 	wrlong	local01, fp
261bc     46 8F 02 F6 | 	mov	local02, local01
261c0     60 50 05 F1 | 	add	fp, #96
261c4     A8 94 02 FB | 	rdlong	local05, fp
261c8     4A 91 02 F6 | 	mov	local03, local05
261cc     08 90 66 F0 | 	shl	local03, #8
261d0     48 8F 42 F5 | 	or	local02, local03
261d4     60 50 85 F1 | 	sub	fp, #96
261d8     A8 8E 62 FC | 	wrlong	local02, fp
261dc     08 50 85 F1 | 	sub	fp, #8
261e0                 | LR__1566
261e0     00 8E 06 F6 | 	mov	local02, #0
261e4     3C 50 05 F1 | 	add	fp, #60
261e8     A8 00 68 FC | 	wrlong	#0, fp
261ec     3C 50 85 F1 | 	sub	fp, #60
261f0                 | LR__1567
261f0     0C 50 05 F1 | 	add	fp, #12
261f4     A8 74 02 FB | 	rdlong	arg01, fp
261f8     0C 50 85 F1 | 	sub	fp, #12
261fc     48 15 B0 FD | 	call	#__system____builtin_ilogb
26200     FF FF 3F FF 
26204     FF 35 0E F2 | 	cmp	result1, ##2147483647 wz
26208     50 00 90 5D |  if_ne	jmp	#LR__1569
2620c     2C 50 05 F1 | 	add	fp, #44
26210     A8 8E 0A FB | 	rdlong	local02, fp wz
26214     2C 50 85 F1 | 	sub	fp, #44
26218     24 00 90 AD |  if_e	jmp	#LR__1568
2621c     C0 50 05 F1 | 	add	fp, #192
26220     A8 8C 02 FB | 	rdlong	local01, fp
26224     46 91 02 F6 | 	mov	local03, local01
26228     01 90 06 F1 | 	add	local03, #1
2622c     A8 90 62 FC | 	wrlong	local03, fp
26230     94 50 85 F1 | 	sub	fp, #148
26234     A8 92 02 FB | 	rdlong	local04, fp
26238     2C 50 85 F1 | 	sub	fp, #44
2623c     46 93 42 FC | 	wrbyte	local04, local01
26240                 | LR__1568
26240     C0 50 05 F1 | 	add	fp, #192
26244     A8 74 02 FB | 	rdlong	arg01, fp
26248     C0 50 85 F1 | 	sub	fp, #192
2624c     47 01 00 FF 
26250     5E 76 06 F6 | 	mov	arg02, ##@LR__1803
26254     40 F0 BF FD | 	call	#__system____builtin_strcpy
26258     E4 08 90 FD | 	jmp	#LR__1606
2625c                 | LR__1569
2625c     0C 50 05 F1 | 	add	fp, #12
26260     A8 74 02 FB | 	rdlong	arg01, fp
26264     0C 50 85 F1 | 	sub	fp, #12
26268     DC 14 B0 FD | 	call	#__system____builtin_ilogb
2626c     00 00 40 FF 
26270     00 34 0E F2 | 	cmp	result1, ##-2147483648 wz
26274     50 00 90 5D |  if_ne	jmp	#LR__1571
26278     2C 50 05 F1 | 	add	fp, #44
2627c     A8 8E 0A FB | 	rdlong	local02, fp wz
26280     2C 50 85 F1 | 	sub	fp, #44
26284     24 00 90 AD |  if_e	jmp	#LR__1570
26288     C0 50 05 F1 | 	add	fp, #192
2628c     A8 8C 02 FB | 	rdlong	local01, fp
26290     46 91 02 F6 | 	mov	local03, local01
26294     01 90 06 F1 | 	add	local03, #1
26298     A8 90 62 FC | 	wrlong	local03, fp
2629c     94 50 85 F1 | 	sub	fp, #148
262a0     A8 92 02 FB | 	rdlong	local04, fp
262a4     2C 50 85 F1 | 	sub	fp, #44
262a8     46 93 42 FC | 	wrbyte	local04, local01
262ac                 | LR__1570
262ac     C0 50 05 F1 | 	add	fp, #192
262b0     A8 74 02 FB | 	rdlong	arg01, fp
262b4     C0 50 85 F1 | 	sub	fp, #192
262b8     47 01 00 FF 
262bc     62 76 06 F6 | 	mov	arg02, ##@LR__1804
262c0     D4 EF BF FD | 	call	#__system____builtin_strcpy
262c4     78 08 90 FD | 	jmp	#LR__1606
262c8                 | LR__1571
262c8     10 50 05 F1 | 	add	fp, #16
262cc     A8 8C 02 FB | 	rdlong	local01, fp
262d0     10 50 85 F1 | 	sub	fp, #16
262d4     67 8C 0E F2 | 	cmp	local01, #103 wz
262d8     18 00 90 AD |  if_e	jmp	#LR__1572
262dc     10 50 05 F1 | 	add	fp, #16
262e0     A8 94 02 FB | 	rdlong	local05, fp
262e4     10 50 85 F1 | 	sub	fp, #16
262e8     4A 91 02 F6 | 	mov	local03, local05
262ec     23 90 0E F2 | 	cmp	local03, #35 wz
262f0     98 01 90 5D |  if_ne	jmp	#LR__1577
262f4                 | LR__1572
262f4     0C 50 05 F1 | 	add	fp, #12
262f8     A8 74 02 FB | 	rdlong	arg01, fp
262fc     08 50 05 F1 | 	add	fp, #8
26300     A8 76 02 F6 | 	mov	arg02, fp
26304     0C 50 05 F1 | 	add	fp, #12
26308     A8 78 02 F6 | 	mov	arg03, fp
2630c     98 50 05 F1 | 	add	fp, #152
26310     A8 7A 02 FB | 	rdlong	arg04, fp
26314     9C 50 85 F1 | 	sub	fp, #156
26318     A8 7C 02 FB | 	rdlong	arg05, fp
2631c     1C 50 85 F1 | 	sub	fp, #28
26320     98 25 B0 FD | 	call	#__system__disassemble_1163
26324     10 50 05 F1 | 	add	fp, #16
26328     A8 8E 02 FB | 	rdlong	local02, fp
2632c     10 50 85 F1 | 	sub	fp, #16
26330     23 8E 0E F2 | 	cmp	local02, #35 wz
26334     A0 00 90 5D |  if_ne	jmp	#LR__1574
26338     20 50 05 F1 | 	add	fp, #32
2633c     A8 8E 02 FB | 	rdlong	local02, fp
26340     98 50 05 F1 | 	add	fp, #152
26344     A8 90 02 FB | 	rdlong	local03, fp
26348     B8 50 85 F1 | 	sub	fp, #184
2634c     48 8F 5A F2 | 	cmps	local02, local03 wcz
26350     24 50 05 11 |  if_a	add	fp, #36
26354     A8 02 68 1C |  if_a	wrlong	#1, fp
26358     24 50 85 11 |  if_a	sub	fp, #36
2635c     A8 01 90 1D |  if_a	jmp	#LR__1580
26360     20 50 05 F1 | 	add	fp, #32
26364     A8 8E 02 FB | 	rdlong	local02, fp
26368     20 50 85 F1 | 	sub	fp, #32
2636c     00 8E 56 F2 | 	cmps	local02, #0 wc
26370     2C 00 90 3D |  if_ae	jmp	#LR__1573
26374     B8 50 05 F1 | 	add	fp, #184
26378     A8 8E 02 FB | 	rdlong	local02, fp
2637c     47 8F 62 F6 | 	neg	local02, local02
26380     98 50 85 F1 | 	sub	fp, #152
26384     A8 90 02 FB | 	rdlong	local03, fp
26388     20 50 85 F1 | 	sub	fp, #32
2638c     47 91 5A F2 | 	cmps	local03, local02 wcz
26390     24 50 05 E1 |  if_be	add	fp, #36
26394     A8 02 68 EC |  if_be	wrlong	#1, fp
26398     24 50 85 E1 |  if_be	sub	fp, #36
2639c     68 01 90 FD | 	jmp	#LR__1580
263a0                 | LR__1573
263a0     20 50 05 F1 | 	add	fp, #32
263a4     A8 8E 02 FB | 	rdlong	local02, fp
263a8     20 50 85 F1 | 	sub	fp, #32
263ac     01 8E 56 F2 | 	cmps	local02, #1 wc
263b0     54 01 90 CD |  if_b	jmp	#LR__1580
263b4     B8 50 05 F1 | 	add	fp, #184
263b8     A8 8E 02 FB | 	rdlong	local02, fp
263bc     98 50 85 F1 | 	sub	fp, #152
263c0     A8 90 02 FB | 	rdlong	local03, fp
263c4     48 8F 82 F1 | 	sub	local02, local03
263c8     98 50 05 F1 | 	add	fp, #152
263cc     A8 8E 62 FC | 	wrlong	local02, fp
263d0     B8 50 85 F1 | 	sub	fp, #184
263d4     30 01 90 FD | 	jmp	#LR__1580
263d8                 | LR__1574
263d8     00 8E 06 F6 | 	mov	local02, #0
263dc     08 50 05 F1 | 	add	fp, #8
263e0     A8 8C 02 FB | 	rdlong	local01, fp
263e4     1C 8C 46 F0 | 	shr	local01, #28
263e8     01 8C CE F7 | 	test	local01, #1 wz
263ec     01 8E 06 A6 |  if_e	mov	local02, #1
263f0     2C 50 05 F1 | 	add	fp, #44
263f4     A8 8E 62 FC | 	wrlong	local02, fp
263f8     14 50 85 F1 | 	sub	fp, #20
263fc     A8 8C 02 FB | 	rdlong	local01, fp
26400     46 8F 02 F6 | 	mov	local02, local01
26404     98 50 05 F1 | 	add	fp, #152
26408     A8 94 02 FB | 	rdlong	local05, fp
2640c     B8 50 85 F1 | 	sub	fp, #184
26410     4A 8F 52 F2 | 	cmps	local02, local05 wc
26414     18 00 90 3D |  if_ae	jmp	#LR__1575
26418     20 50 05 F1 | 	add	fp, #32
2641c     A8 96 02 FB | 	rdlong	local06, fp
26420     20 50 85 F1 | 	sub	fp, #32
26424     FF FF 7F FF 
26428     FC 97 56 F2 | 	cmps	local06, ##-4 wc
2642c     10 00 90 3D |  if_ae	jmp	#LR__1576
26430                 | LR__1575
26430     24 50 05 F1 | 	add	fp, #36
26434     A8 02 68 FC | 	wrlong	#1, fp
26438     24 50 85 F1 | 	sub	fp, #36
2643c     C8 00 90 FD | 	jmp	#LR__1580
26440                 | LR__1576
26440     B8 50 05 F1 | 	add	fp, #184
26444     A8 92 02 FB | 	rdlong	local04, fp
26448     98 50 85 F1 | 	sub	fp, #152
2644c     A8 90 02 FB | 	rdlong	local03, fp
26450     48 93 82 F1 | 	sub	local04, local03
26454     98 50 05 F1 | 	add	fp, #152
26458     A8 92 62 FC | 	wrlong	local04, fp
2645c     AC 50 85 F1 | 	sub	fp, #172
26460     A8 74 02 FB | 	rdlong	arg01, fp
26464     08 50 05 F1 | 	add	fp, #8
26468     A8 76 02 F6 | 	mov	arg02, fp
2646c     0C 50 05 F1 | 	add	fp, #12
26470     A8 78 02 F6 | 	mov	arg03, fp
26474     49 7B 62 F6 | 	neg	arg04, local04
26478     04 50 85 F1 | 	sub	fp, #4
2647c     A8 7C 02 FB | 	rdlong	arg05, fp
26480     1C 50 85 F1 | 	sub	fp, #28
26484     34 24 B0 FD | 	call	#__system__disassemble_1163
26488     7C 00 90 FD | 	jmp	#LR__1580
2648c                 | LR__1577
2648c     24 50 05 F1 | 	add	fp, #36
26490     A8 8E 0A FB | 	rdlong	local02, fp wz
26494     24 50 85 F1 | 	sub	fp, #36
26498     34 00 90 AD |  if_e	jmp	#LR__1578
2649c     0C 50 05 F1 | 	add	fp, #12
264a0     A8 74 02 FB | 	rdlong	arg01, fp
264a4     08 50 05 F1 | 	add	fp, #8
264a8     A8 76 02 F6 | 	mov	arg02, fp
264ac     0C 50 05 F1 | 	add	fp, #12
264b0     A8 78 02 F6 | 	mov	arg03, fp
264b4     98 50 05 F1 | 	add	fp, #152
264b8     A8 7A 02 FB | 	rdlong	arg04, fp
264bc     9C 50 85 F1 | 	sub	fp, #156
264c0     A8 7C 02 FB | 	rdlong	arg05, fp
264c4     1C 50 85 F1 | 	sub	fp, #28
264c8     F0 23 B0 FD | 	call	#__system__disassemble_1163
264cc     38 00 90 FD | 	jmp	#LR__1579
264d0                 | LR__1578
264d0     0C 50 05 F1 | 	add	fp, #12
264d4     A8 74 02 FB | 	rdlong	arg01, fp
264d8     08 50 05 F1 | 	add	fp, #8
264dc     A8 76 02 F6 | 	mov	arg02, fp
264e0     0C 50 05 F1 | 	add	fp, #12
264e4     A8 78 02 F6 | 	mov	arg03, fp
264e8     98 50 05 F1 | 	add	fp, #152
264ec     A8 92 02 FB | 	rdlong	local04, fp
264f0     01 92 06 F1 | 	add	local04, #1
264f4     49 7B 62 F6 | 	neg	arg04, local04
264f8     9C 50 85 F1 | 	sub	fp, #156
264fc     A8 7C 02 FB | 	rdlong	arg05, fp
26500     1C 50 85 F1 | 	sub	fp, #28
26504     B4 23 B0 FD | 	call	#__system__disassemble_1163
26508                 | LR__1579
26508                 | LR__1580
26508     1C 50 05 F1 | 	add	fp, #28
2650c     A8 8E 02 FB | 	rdlong	local02, fp
26510     1C 50 85 F1 | 	sub	fp, #28
26514     02 8E 0E F2 | 	cmp	local02, #2 wz
26518     4C 00 90 5D |  if_ne	jmp	#LR__1583
2651c     1C 50 05 F1 | 	add	fp, #28
26520     A8 20 68 FC | 	wrlong	#16, fp
26524     1C 50 85 F1 | 	sub	fp, #28
26528                 | LR__1581
26528     14 50 05 F1 | 	add	fp, #20
2652c     A8 8E 0A FB | 	rdlong	local02, fp wz
26530     14 50 85 F1 | 	sub	fp, #20
26534     30 00 90 AD |  if_e	jmp	#LR__1582
26538     14 50 05 F1 | 	add	fp, #20
2653c     A8 90 02 FB | 	rdlong	local03, fp
26540     14 50 85 F1 | 	sub	fp, #20
26544     00 80 00 FF 
26548     00 90 16 F2 | 	cmp	local03, ##16777216 wc
2654c     18 00 90 3D |  if_ae	jmp	#LR__1582
26550     14 50 05 F1 | 	add	fp, #20
26554     A8 8E 02 FB | 	rdlong	local02, fp
26558     01 8E 66 F0 | 	shl	local02, #1
2655c     A8 8E 62 FC | 	wrlong	local02, fp
26560     14 50 85 F1 | 	sub	fp, #20
26564     C0 FF 9F FD | 	jmp	#LR__1581
26568                 | LR__1582
26568                 | LR__1583
26568     70 50 05 F1 | 	add	fp, #112
2656c     A8 74 02 F6 | 	mov	arg01, fp
26570     5C 50 85 F1 | 	sub	fp, #92
26574     A8 76 02 FB | 	rdlong	arg02, fp
26578     08 50 05 F1 | 	add	fp, #8
2657c     A8 78 02 FB | 	rdlong	arg03, fp
26580     A0 50 05 F1 | 	add	fp, #160
26584     A8 7C 02 FB | 	rdlong	arg05, fp
26588     BC 50 85 F1 | 	sub	fp, #188
2658c     01 7A 06 F6 | 	mov	arg04, #1
26590     A8 22 B0 FD | 	call	#__system___uitoa
26594     58 50 05 F1 | 	add	fp, #88
26598     A8 34 62 FC | 	wrlong	result1, fp
2659c     38 50 85 F1 | 	sub	fp, #56
265a0     A8 8E 02 FB | 	rdlong	local02, fp
265a4     20 50 85 F1 | 	sub	fp, #32
265a8     00 8E 56 F2 | 	cmps	local02, #0 wc
265ac     4C 00 90 3D |  if_ae	jmp	#LR__1584
265b0     60 50 05 F1 | 	add	fp, #96
265b4     A8 5A 68 FC | 	wrlong	#45, fp
265b8     50 50 05 F1 | 	add	fp, #80
265bc     A8 74 02 F6 | 	mov	arg01, fp
265c0     90 50 85 F1 | 	sub	fp, #144
265c4     A8 90 02 FB | 	rdlong	local03, fp
265c8     48 77 62 F6 | 	neg	arg02, local03
265cc     18 50 05 F1 | 	add	fp, #24
265d0     A8 7A 02 FB | 	rdlong	arg04, fp
265d4     84 50 05 F1 | 	add	fp, #132
265d8     A8 96 02 FB | 	rdlong	local06, fp
265dc     BC 50 85 F1 | 	sub	fp, #188
265e0     0A 78 06 F6 | 	mov	arg03, #10
265e4     4B 7D 02 F6 | 	mov	arg05, local06
265e8     50 22 B0 FD | 	call	#__system___uitoa
265ec     5C 50 05 F1 | 	add	fp, #92
265f0     A8 34 62 FC | 	wrlong	result1, fp
265f4     5C 50 85 F1 | 	sub	fp, #92
265f8     44 00 90 FD | 	jmp	#LR__1585
265fc                 | LR__1584
265fc     60 50 05 F1 | 	add	fp, #96
26600     A8 56 68 FC | 	wrlong	#43, fp
26604     50 50 05 F1 | 	add	fp, #80
26608     A8 74 02 F6 | 	mov	arg01, fp
2660c     90 50 85 F1 | 	sub	fp, #144
26610     A8 76 02 FB | 	rdlong	arg02, fp
26614     18 50 05 F1 | 	add	fp, #24
26618     A8 7A 02 FB | 	rdlong	arg04, fp
2661c     84 50 05 F1 | 	add	fp, #132
26620     A8 96 02 FB | 	rdlong	local06, fp
26624     BC 50 85 F1 | 	sub	fp, #188
26628     0A 78 06 F6 | 	mov	arg03, #10
2662c     4B 7D 02 F6 | 	mov	arg05, local06
26630     08 22 B0 FD | 	call	#__system___uitoa
26634     5C 50 05 F1 | 	add	fp, #92
26638     A8 34 62 FC | 	wrlong	result1, fp
2663c     5C 50 85 F1 | 	sub	fp, #92
26640                 | LR__1585
26640     24 50 05 F1 | 	add	fp, #36
26644     A8 8E 0A FB | 	rdlong	local02, fp wz
26648     24 50 85 F1 | 	sub	fp, #36
2664c     2C 00 90 AD |  if_e	jmp	#LR__1586
26650     50 50 05 F1 | 	add	fp, #80
26654     A8 00 68 FC | 	wrlong	#0, fp
26658     04 50 85 F1 | 	sub	fp, #4
2665c     A8 00 68 FC | 	wrlong	#0, fp
26660     6C 50 05 F1 | 	add	fp, #108
26664     A8 8E 02 FB | 	rdlong	local02, fp
26668     01 8E 06 F1 | 	add	local02, #1
2666c     64 50 85 F1 | 	sub	fp, #100
26670     A8 8E 62 FC | 	wrlong	local02, fp
26674     54 50 85 F1 | 	sub	fp, #84
26678     88 00 90 FD | 	jmp	#LR__1589
2667c                 | LR__1586
2667c     20 50 05 F1 | 	add	fp, #32
26680     A8 8E 02 FB | 	rdlong	local02, fp
26684     20 50 85 F1 | 	sub	fp, #32
26688     00 8E 56 F2 | 	cmps	local02, #0 wc
2668c     40 00 90 3D |  if_ae	jmp	#LR__1587
26690     20 50 05 F1 | 	add	fp, #32
26694     A8 8C 02 FB | 	rdlong	local01, fp
26698     30 50 05 F1 | 	add	fp, #48
2669c     A8 8C 62 FC | 	wrlong	local01, fp
266a0     04 50 85 F1 | 	sub	fp, #4
266a4     A8 8C 62 FC | 	wrlong	local01, fp
266a8     2C 50 85 F1 | 	sub	fp, #44
266ac     A8 8E 02 FB | 	rdlong	local02, fp
266b0     98 50 05 F1 | 	add	fp, #152
266b4     A8 90 02 FB | 	rdlong	local03, fp
266b8     48 8F 02 F1 | 	add	local02, local03
266bc     01 8E 06 F1 | 	add	local02, #1
266c0     64 50 85 F1 | 	sub	fp, #100
266c4     A8 8E 62 FC | 	wrlong	local02, fp
266c8     54 50 85 F1 | 	sub	fp, #84
266cc     34 00 90 FD | 	jmp	#LR__1588
266d0                 | LR__1587
266d0     4C 50 05 F1 | 	add	fp, #76
266d4     A8 00 68 FC | 	wrlong	#0, fp
266d8     2C 50 85 F1 | 	sub	fp, #44
266dc     A8 8E 02 FB | 	rdlong	local02, fp
266e0     30 50 05 F1 | 	add	fp, #48
266e4     A8 8E 62 FC | 	wrlong	local02, fp
266e8     68 50 05 F1 | 	add	fp, #104
266ec     A8 90 02 FB | 	rdlong	local03, fp
266f0     48 8F 02 F1 | 	add	local02, local03
266f4     01 8E 06 F1 | 	add	local02, #1
266f8     64 50 85 F1 | 	sub	fp, #100
266fc     A8 8E 62 FC | 	wrlong	local02, fp
26700     54 50 85 F1 | 	sub	fp, #84
26704                 | LR__1588
26704                 | LR__1589
26704     54 50 05 F1 | 	add	fp, #84
26708     A8 8E 02 FB | 	rdlong	local02, fp
2670c     08 50 85 F1 | 	sub	fp, #8
26710     A8 90 02 FB | 	rdlong	local03, fp
26714     48 8F 82 F1 | 	sub	local02, local03
26718     01 8E 06 F1 | 	add	local02, #1
2671c     24 50 85 F1 | 	sub	fp, #36
26720     A8 8E 62 FC | 	wrlong	local02, fp
26724     04 50 05 F1 | 	add	fp, #4
26728     A8 8E 0A FB | 	rdlong	local02, fp wz
2672c     2C 50 85 F1 | 	sub	fp, #44
26730     28 50 05 51 |  if_ne	add	fp, #40
26734     A8 90 02 5B |  if_ne	rdlong	local03, fp
26738     01 90 06 51 |  if_ne	add	local03, #1
2673c     A8 90 62 5C |  if_ne	wrlong	local03, fp
26740     28 50 85 51 |  if_ne	sub	fp, #40
26744     1C 50 05 F1 | 	add	fp, #28
26748     A8 8E 02 FB | 	rdlong	local02, fp
2674c     1C 50 85 F1 | 	sub	fp, #28
26750     10 8E 0E F2 | 	cmp	local02, #16 wz
26754     28 50 05 A1 |  if_e	add	fp, #40
26758     A8 8E 02 AB |  if_e	rdlong	local02, fp
2675c     02 8E 06 A1 |  if_e	add	local02, #2
26760     A8 8E 62 AC |  if_e	wrlong	local02, fp
26764     28 50 85 A1 |  if_e	sub	fp, #40
26768     24 50 05 F1 | 	add	fp, #36
2676c     A8 8E 0A FB | 	rdlong	local02, fp wz
26770     24 50 85 F1 | 	sub	fp, #36
26774     28 00 90 AD |  if_e	jmp	#LR__1590
26778     28 50 05 F1 | 	add	fp, #40
2677c     A8 8E 02 FB | 	rdlong	local02, fp
26780     02 90 06 F6 | 	mov	local03, #2
26784     34 50 05 F1 | 	add	fp, #52
26788     A8 94 02 FB | 	rdlong	local05, fp
2678c     4A 91 02 F1 | 	add	local03, local05
26790     48 8F 02 F1 | 	add	local02, local03
26794     34 50 85 F1 | 	sub	fp, #52
26798     A8 8E 62 FC | 	wrlong	local02, fp
2679c     28 50 85 F1 | 	sub	fp, #40
267a0                 | LR__1590
267a0     28 50 05 F1 | 	add	fp, #40
267a4     A8 8E 02 FB | 	rdlong	local02, fp
267a8     28 50 85 F1 | 	sub	fp, #40
267ac     41 8E 56 F2 | 	cmps	local02, #65 wc
267b0     01 34 66 36 |  if_ae	neg	result1, #1
267b4     74 05 90 3D |  if_ae	jmp	#LR__1618
267b8     3C 50 05 F1 | 	add	fp, #60
267bc     A8 8E 0A FB | 	rdlong	local02, fp wz
267c0     3C 50 85 F1 | 	sub	fp, #60
267c4     60 00 90 AD |  if_e	jmp	#LR__1591
267c8     C0 50 05 F1 | 	add	fp, #192
267cc     A8 74 02 FB | 	rdlong	arg01, fp
267d0     94 50 85 F1 | 	sub	fp, #148
267d4     A8 76 02 FB | 	rdlong	arg02, fp
267d8     14 50 05 F1 | 	add	fp, #20
267dc     A8 78 02 FB | 	rdlong	arg03, fp
267e0     40 50 85 F1 | 	sub	fp, #64
267e4     F4 22 B0 FD | 	call	#__system__emitsign_1165
267e8     18 51 05 F1 | 	add	fp, #280
267ec     A8 34 62 FC | 	wrlong	result1, fp
267f0     18 51 85 F1 | 	sub	fp, #280
267f4     00 34 56 F2 | 	cmps	result1, #0 wc
267f8     18 51 05 C1 |  if_b	add	fp, #280
267fc     A8 34 02 CB |  if_b	rdlong	result1, fp
26800     18 51 85 C1 |  if_b	sub	fp, #280
26804     24 05 90 CD |  if_b	jmp	#LR__1618
26808     C0 50 05 F1 | 	add	fp, #192
2680c     A8 8E 02 FB | 	rdlong	local02, fp
26810     58 50 05 F1 | 	add	fp, #88
26814     A8 90 02 FB | 	rdlong	local03, fp
26818     48 8F 02 F1 | 	add	local02, local03
2681c     58 50 85 F1 | 	sub	fp, #88
26820     A8 8E 62 FC | 	wrlong	local02, fp
26824     C0 50 85 F1 | 	sub	fp, #192
26828                 | LR__1591
26828     4C 50 05 F1 | 	add	fp, #76
2682c     A8 8E 02 FB | 	rdlong	local02, fp
26830     34 50 85 F1 | 	sub	fp, #52
26834     A8 8E 62 FC | 	wrlong	local02, fp
26838     18 50 85 F1 | 	sub	fp, #24
2683c     14 99 9D FE | 	loc	pa,	#(@LR__1597-@LR__1592)
26840     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26844                 | LR__1592
26844     18 50 05 F1 | 	add	fp, #24
26848     A8 90 02 FB | 	rdlong	local03, fp
2684c     48 8D 02 F6 | 	mov	local01, local03
26850     3C 50 05 F1 | 	add	fp, #60
26854     A8 92 02 FB | 	rdlong	local04, fp
26858     54 50 85 F1 | 	sub	fp, #84
2685c     49 95 02 F6 | 	mov	local05, local04
26860     4A 8D 52 F2 | 	cmps	local01, local05 wc
26864     30 01 90 3D |  if_ae	jmp	#LR__1598
26868     18 50 05 F1 | 	add	fp, #24
2686c     A8 96 02 FB | 	rdlong	local06, fp
26870     18 50 85 F1 | 	sub	fp, #24
26874     00 96 56 F2 | 	cmps	local06, #0 wc
26878     58 00 90 CD |  if_b	jmp	#LR__1593
2687c     18 50 05 F1 | 	add	fp, #24
26880     A8 96 02 FB | 	rdlong	local06, fp
26884     40 50 05 F1 | 	add	fp, #64
26888     A8 98 02 FB | 	rdlong	local07, fp
2688c     58 50 85 F1 | 	sub	fp, #88
26890     4C 97 52 F2 | 	cmps	local06, local07 wc
26894     3C 00 90 3D |  if_ae	jmp	#LR__1593
26898     C0 50 05 F1 | 	add	fp, #192
2689c     A8 98 02 FB | 	rdlong	local07, fp
268a0     4C 97 02 F6 | 	mov	local06, local07
268a4     01 98 06 F1 | 	add	local07, #1
268a8     A8 98 62 FC | 	wrlong	local07, fp
268ac     A8 50 85 F1 | 	sub	fp, #168
268b0     A8 98 02 FB | 	rdlong	local07, fp
268b4     4C 9B 02 F6 | 	mov	local08, local07
268b8     58 50 05 F1 | 	add	fp, #88
268bc     A8 9C 02 F6 | 	mov	local09, fp
268c0     A8 9A 02 F1 | 	add	local08, fp
268c4     4D 9F C2 FA | 	rdbyte	local10, local08
268c8     4B 9F 42 FC | 	wrbyte	local10, local06
268cc     70 50 85 F1 | 	sub	fp, #112
268d0     20 00 90 FD | 	jmp	#LR__1594
268d4                 | LR__1593
268d4     C0 50 05 F1 | 	add	fp, #192
268d8     A8 96 02 FB | 	rdlong	local06, fp
268dc     4B 9B 02 F6 | 	mov	local08, local06
268e0     01 9A 06 F1 | 	add	local08, #1
268e4     A8 9A 62 FC | 	wrlong	local08, fp
268e8     C0 50 85 F1 | 	sub	fp, #192
268ec     30 9A 06 F6 | 	mov	local08, #48
268f0     4B 61 48 FC | 	wrbyte	#48, local06
268f4                 | LR__1594
268f4     18 50 05 F1 | 	add	fp, #24
268f8     A8 96 02 FB | 	rdlong	local06, fp
268fc     38 50 05 F1 | 	add	fp, #56
26900     A8 A0 02 FB | 	rdlong	local11, fp
26904     50 50 85 F1 | 	sub	fp, #80
26908     50 97 0A F2 | 	cmp	local06, local11 wz
2690c     64 00 90 5D |  if_ne	jmp	#LR__1596
26910     10 51 05 F1 | 	add	fp, #272
26914     A8 98 02 FB | 	rdlong	local07, fp
26918     10 51 85 F1 | 	sub	fp, #272
2691c     4C 9B 0A F6 | 	mov	local08, local07 wz
26920     28 00 90 5D |  if_ne	jmp	#LR__1595
26924     54 50 05 F1 | 	add	fp, #84
26928     A8 9E 02 FB | 	rdlong	local10, fp
2692c     4F 9D 02 F6 | 	mov	local09, local10
26930     01 9C 86 F1 | 	sub	local09, #1
26934     3C 50 85 F1 | 	sub	fp, #60
26938     A8 A2 02 FB | 	rdlong	local12, fp
2693c     18 50 85 F1 | 	sub	fp, #24
26940     51 A5 02 F6 | 	mov	local13, local12
26944     4E A5 52 F2 | 	cmps	local13, local09 wc
26948     28 00 90 3D |  if_ae	jmp	#LR__1596
2694c                 | LR__1595
2694c     C0 50 05 F1 | 	add	fp, #192
26950     A8 A6 02 FB | 	rdlong	local14, fp
26954     53 97 02 F6 | 	mov	local06, local14
26958     53 A9 02 F6 | 	mov	local15, local14
2695c     54 A1 02 F6 | 	mov	local11, local15
26960     01 A0 06 F1 | 	add	local11, #1
26964     A8 A0 62 FC | 	wrlong	local11, fp
26968     C0 50 85 F1 | 	sub	fp, #192
2696c     2E 9A 06 F6 | 	mov	local08, #46
26970     4B 5D 48 FC | 	wrbyte	#46, local06
26974                 | LR__1596
26974     18 50 05 F1 | 	add	fp, #24
26978     A8 A6 02 FB | 	rdlong	local14, fp
2697c     53 97 02 F6 | 	mov	local06, local14
26980     53 A9 02 F6 | 	mov	local15, local14
26984     54 A1 02 F6 | 	mov	local11, local15
26988     01 A0 06 F1 | 	add	local11, #1
2698c     A8 A0 62 FC | 	wrlong	local11, fp
26990     18 50 85 F1 | 	sub	fp, #24
26994     AC FE 9F FD | 	jmp	#LR__1592
26998                 | LR__1597
26998                 | LR__1598
26998     34 50 05 F1 | 	add	fp, #52
2699c     A8 8E 0A FB | 	rdlong	local02, fp wz
269a0     34 50 85 F1 | 	sub	fp, #52
269a4     AC 00 90 AD |  if_e	jmp	#LR__1602
269a8     C0 50 05 F1 | 	add	fp, #192
269ac     A8 8E 02 FB | 	rdlong	local02, fp
269b0     01 8E 86 F1 | 	sub	local02, #1
269b4     A8 8E 62 FC | 	wrlong	local02, fp
269b8     C0 50 85 F1 | 	sub	fp, #192
269bc     90 96 9D FE | 	loc	pa,	#(@LR__1600-@LR__1599)
269c0     8C 00 A0 FD | 	call	#FCACHE_LOAD_
269c4                 | LR__1599
269c4     C0 50 05 F1 | 	add	fp, #192
269c8     A8 8E 02 FB | 	rdlong	local02, fp
269cc     04 50 05 F1 | 	add	fp, #4
269d0     A8 90 02 FB | 	rdlong	local03, fp
269d4     C4 50 85 F1 | 	sub	fp, #196
269d8     48 8F 5A F2 | 	cmps	local02, local03 wcz
269dc     34 00 90 ED |  if_be	jmp	#LR__1601
269e0     C0 50 05 F1 | 	add	fp, #192
269e4     A8 A6 02 FB | 	rdlong	local14, fp
269e8     C0 50 85 F1 | 	sub	fp, #192
269ec     53 97 02 F6 | 	mov	local06, local14
269f0     4B 93 C2 FA | 	rdbyte	local04, local06
269f4     30 92 0E F2 | 	cmp	local04, #48 wz
269f8     18 00 90 5D |  if_ne	jmp	#LR__1601
269fc     C0 50 05 F1 | 	add	fp, #192
26a00     A8 8E 02 FB | 	rdlong	local02, fp
26a04     01 8E 86 F1 | 	sub	local02, #1
26a08     A8 8E 62 FC | 	wrlong	local02, fp
26a0c     C0 50 85 F1 | 	sub	fp, #192
26a10     B0 FF 9F FD | 	jmp	#LR__1599
26a14                 | LR__1600
26a14                 | LR__1601
26a14     C0 50 05 F1 | 	add	fp, #192
26a18     A8 8C 02 FB | 	rdlong	local01, fp
26a1c     C0 50 85 F1 | 	sub	fp, #192
26a20     46 8F C2 FA | 	rdbyte	local02, local01
26a24     2E 8E 0E F2 | 	cmp	local02, #46 wz
26a28     C0 50 05 A1 |  if_e	add	fp, #192
26a2c     A8 8E 02 AB |  if_e	rdlong	local02, fp
26a30     01 8E 86 A1 |  if_e	sub	local02, #1
26a34     A8 8E 62 AC |  if_e	wrlong	local02, fp
26a38     C0 50 85 A1 |  if_e	sub	fp, #192
26a3c     C0 50 05 F1 | 	add	fp, #192
26a40     A8 94 02 FB | 	rdlong	local05, fp
26a44     4A 91 02 F6 | 	mov	local03, local05
26a48     01 90 06 F1 | 	add	local03, #1
26a4c     A8 90 62 FC | 	wrlong	local03, fp
26a50     C0 50 85 F1 | 	sub	fp, #192
26a54                 | LR__1602
26a54     24 50 05 F1 | 	add	fp, #36
26a58     A8 8E 0A FB | 	rdlong	local02, fp wz
26a5c     24 50 85 F1 | 	sub	fp, #36
26a60     C4 00 90 AD |  if_e	jmp	#LR__1605
26a64     C0 50 05 F1 | 	add	fp, #192
26a68     A8 8C 02 FB | 	rdlong	local01, fp
26a6c     46 91 02 F6 | 	mov	local03, local01
26a70     01 90 06 F1 | 	add	local03, #1
26a74     A8 90 62 FC | 	wrlong	local03, fp
26a78     90 50 85 F1 | 	sub	fp, #144
26a7c     A8 92 02 FB | 	rdlong	local04, fp
26a80     46 93 42 FC | 	wrbyte	local04, local01
26a84     90 50 05 F1 | 	add	fp, #144
26a88     A8 8C 02 FB | 	rdlong	local01, fp
26a8c     46 91 02 F6 | 	mov	local03, local01
26a90     01 90 06 F1 | 	add	local03, #1
26a94     A8 90 62 FC | 	wrlong	local03, fp
26a98     60 50 85 F1 | 	sub	fp, #96
26a9c     A8 92 02 FB | 	rdlong	local04, fp
26aa0     46 93 42 FC | 	wrbyte	local04, local01
26aa4     48 50 85 F1 | 	sub	fp, #72
26aa8     A8 00 68 FC | 	wrlong	#0, fp
26aac     18 50 85 F1 | 	sub	fp, #24
26ab0                 | LR__1603
26ab0     18 50 05 F1 | 	add	fp, #24
26ab4     A8 8C 02 FB | 	rdlong	local01, fp
26ab8     44 50 05 F1 | 	add	fp, #68
26abc     A8 92 02 FB | 	rdlong	local04, fp
26ac0     5C 50 85 F1 | 	sub	fp, #92
26ac4     49 95 02 F6 | 	mov	local05, local04
26ac8     4A 8D 52 F2 | 	cmps	local01, local05 wc
26acc     58 00 90 3D |  if_ae	jmp	#LR__1604
26ad0     C0 50 05 F1 | 	add	fp, #192
26ad4     A8 A6 02 FB | 	rdlong	local14, fp
26ad8     53 A1 02 F6 | 	mov	local11, local14
26adc     01 A0 06 F1 | 	add	local11, #1
26ae0     A8 A0 62 FC | 	wrlong	local11, fp
26ae4     A8 50 85 F1 | 	sub	fp, #168
26ae8     A8 98 02 FB | 	rdlong	local07, fp
26aec     4C 9B 02 F6 | 	mov	local08, local07
26af0     98 50 05 F1 | 	add	fp, #152
26af4     A8 9C 02 F6 | 	mov	local09, fp
26af8     A8 9A 02 F1 | 	add	local08, fp
26afc     4D 9F C2 FA | 	rdbyte	local10, local08
26b00     53 9F 42 FC | 	wrbyte	local10, local14
26b04     98 50 85 F1 | 	sub	fp, #152
26b08     A8 A6 02 FB | 	rdlong	local14, fp
26b0c     53 97 02 F6 | 	mov	local06, local14
26b10     53 A9 02 F6 | 	mov	local15, local14
26b14     54 A1 02 F6 | 	mov	local11, local15
26b18     01 A0 06 F1 | 	add	local11, #1
26b1c     A8 A0 62 FC | 	wrlong	local11, fp
26b20     18 50 85 F1 | 	sub	fp, #24
26b24     88 FF 9F FD | 	jmp	#LR__1603
26b28                 | LR__1604
26b28                 | LR__1605
26b28     C0 50 05 F1 | 	add	fp, #192
26b2c     A8 8C 02 FB | 	rdlong	local01, fp
26b30     C0 50 85 F1 | 	sub	fp, #192
26b34     46 8F 02 F6 | 	mov	local02, local01
26b38     00 90 06 F6 | 	mov	local03, #0
26b3c     47 01 48 FC | 	wrbyte	#0, local02
26b40                 | LR__1606
26b40     6C 50 05 F1 | 	add	fp, #108
26b44     A8 8E 0A FB | 	rdlong	local02, fp wz
26b48     6C 50 85 F1 | 	sub	fp, #108
26b4c     BC 01 90 AD |  if_e	jmp	#LR__1617
26b50     48 50 05 F1 | 	add	fp, #72
26b54     A8 90 0A FB | 	rdlong	local03, fp wz
26b58     48 50 85 F1 | 	sub	fp, #72
26b5c     AC 01 90 AD |  if_e	jmp	#LR__1617
26b60     C4 50 05 F1 | 	add	fp, #196
26b64     A8 74 02 FB | 	rdlong	arg01, fp
26b68     C4 50 85 F1 | 	sub	fp, #196
26b6c     00 AA 06 F6 | 	mov	local16, #0
26b70     9C 94 9D FE | 	loc	pa,	#(@LR__1608-@LR__1607)
26b74     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26b78                 | LR__1607
26b78     3A 35 CA FA | 	rdbyte	result1, arg01 wz
26b7c     01 AA 06 51 |  if_ne	add	local16, #1
26b80     01 74 06 51 |  if_ne	add	arg01, #1
26b84     F0 FF 9F 5D |  if_ne	jmp	#LR__1607
26b88                 | LR__1608
26b88     55 35 02 F6 | 	mov	result1, local16
26b8c     1A 93 02 F6 | 	mov	local04, result1
26b90     6C 50 05 F1 | 	add	fp, #108
26b94     A8 A6 02 FB | 	rdlong	local14, fp
26b98     6C 50 85 F1 | 	sub	fp, #108
26b9c     53 97 02 F6 | 	mov	local06, local14
26ba0     4B 93 5A F2 | 	cmps	local04, local06 wcz
26ba4     64 01 90 ED |  if_be	jmp	#LR__1617
26ba8     C4 50 05 F1 | 	add	fp, #196
26bac     A8 8E 02 FB | 	rdlong	local02, fp
26bb0     5C 50 05 F1 | 	add	fp, #92
26bb4     A8 8E 62 FC | 	wrlong	local02, fp
26bb8     FC 50 85 F1 | 	sub	fp, #252
26bbc     A8 8E 0A FB | 	rdlong	local02, fp wz
26bc0     24 50 85 F1 | 	sub	fp, #36
26bc4     20 00 90 AD |  if_e	jmp	#LR__1609
26bc8     B8 50 05 F1 | 	add	fp, #184
26bcc     A8 00 68 FC | 	wrlong	#0, fp
26bd0     4C 50 85 F1 | 	sub	fp, #76
26bd4     A8 8E 02 FB | 	rdlong	local02, fp
26bd8     B0 50 05 F1 | 	add	fp, #176
26bdc     A8 8E 62 FC | 	wrlong	local02, fp
26be0     1C 51 85 F1 | 	sub	fp, #284
26be4     24 00 90 FD | 	jmp	#LR__1610
26be8                 | LR__1609
26be8     6C 50 05 F1 | 	add	fp, #108
26bec     A8 8E 02 FB | 	rdlong	local02, fp
26bf0     01 8E 86 F1 | 	sub	local02, #1
26bf4     4C 50 05 F1 | 	add	fp, #76
26bf8     A8 90 02 FB | 	rdlong	local03, fp
26bfc     48 8F 82 F1 | 	sub	local02, local03
26c00     64 50 05 F1 | 	add	fp, #100
26c04     A8 8E 62 FC | 	wrlong	local02, fp
26c08     1C 51 85 F1 | 	sub	fp, #284
26c0c                 | LR__1610
26c0c     30 94 9D FE | 	loc	pa,	#(@LR__1612-@LR__1611)
26c10     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26c14                 | LR__1611
26c14     1C 51 05 F1 | 	add	fp, #284
26c18     A8 8E 0A FB | 	rdlong	local02, fp wz
26c1c     1C 51 85 F1 | 	sub	fp, #284
26c20     30 00 90 AD |  if_e	jmp	#LR__1613
26c24     20 51 05 F1 | 	add	fp, #288
26c28     A8 8C 02 FB | 	rdlong	local01, fp
26c2c     46 91 02 F6 | 	mov	local03, local01
26c30     01 90 06 F1 | 	add	local03, #1
26c34     A8 90 62 FC | 	wrlong	local03, fp
26c38     46 55 48 FC | 	wrbyte	#42, local01
26c3c     04 50 85 F1 | 	sub	fp, #4
26c40     A8 8E 02 FB | 	rdlong	local02, fp
26c44     01 8E 86 F1 | 	sub	local02, #1
26c48     A8 8E 62 FC | 	wrlong	local02, fp
26c4c     1C 51 85 F1 | 	sub	fp, #284
26c50     C0 FF 9F FD | 	jmp	#LR__1611
26c54                 | LR__1612
26c54                 | LR__1613
26c54     B8 50 05 F1 | 	add	fp, #184
26c58     A8 8E 0A FB | 	rdlong	local02, fp wz
26c5c     B8 50 85 F1 | 	sub	fp, #184
26c60     80 00 90 AD |  if_e	jmp	#LR__1616
26c64     20 51 05 F1 | 	add	fp, #288
26c68     A8 8C 02 FB | 	rdlong	local01, fp
26c6c     46 91 02 F6 | 	mov	local03, local01
26c70     01 90 06 F1 | 	add	local03, #1
26c74     A8 90 62 FC | 	wrlong	local03, fp
26c78     46 5D 48 FC | 	wrbyte	#46, local01
26c7c     04 50 85 F1 | 	sub	fp, #4
26c80     A8 00 68 FC | 	wrlong	#0, fp
26c84     1C 51 85 F1 | 	sub	fp, #284
26c88                 | LR__1614
26c88     1C 51 05 F1 | 	add	fp, #284
26c8c     A8 8C 02 FB | 	rdlong	local01, fp
26c90     64 50 85 F1 | 	sub	fp, #100
26c94     A8 94 02 FB | 	rdlong	local05, fp
26c98     B8 50 85 F1 | 	sub	fp, #184
26c9c     4A 8D 52 F2 | 	cmps	local01, local05 wc
26ca0     40 00 90 3D |  if_ae	jmp	#LR__1615
26ca4     20 51 05 F1 | 	add	fp, #288
26ca8     A8 A6 02 FB | 	rdlong	local14, fp
26cac     53 A1 02 F6 | 	mov	local11, local14
26cb0     01 A0 06 F1 | 	add	local11, #1
26cb4     A8 A0 62 FC | 	wrlong	local11, fp
26cb8     2A 9A 06 F6 | 	mov	local08, #42
26cbc     53 55 48 FC | 	wrbyte	#42, local14
26cc0     04 50 85 F1 | 	sub	fp, #4
26cc4     A8 A6 02 FB | 	rdlong	local14, fp
26cc8     53 97 02 F6 | 	mov	local06, local14
26ccc     53 A9 02 F6 | 	mov	local15, local14
26cd0     54 A1 02 F6 | 	mov	local11, local15
26cd4     01 A0 06 F1 | 	add	local11, #1
26cd8     A8 A0 62 FC | 	wrlong	local11, fp
26cdc     1C 51 85 F1 | 	sub	fp, #284
26ce0     A4 FF 9F FD | 	jmp	#LR__1614
26ce4                 | LR__1615
26ce4                 | LR__1616
26ce4     20 51 05 F1 | 	add	fp, #288
26ce8     A8 8C 02 FB | 	rdlong	local01, fp
26cec     46 8F 02 F6 | 	mov	local02, local01
26cf0     46 95 02 F6 | 	mov	local05, local01
26cf4     4A 91 02 F6 | 	mov	local03, local05
26cf8     01 90 06 F1 | 	add	local03, #1
26cfc     A8 90 62 FC | 	wrlong	local03, fp
26d00     20 51 85 F1 | 	sub	fp, #288
26d04     00 92 06 F6 | 	mov	local04, #0
26d08     47 01 48 FC | 	wrbyte	#0, local02
26d0c                 | LR__1617
26d0c     04 50 05 F1 | 	add	fp, #4
26d10     A8 74 02 FB | 	rdlong	arg01, fp
26d14     04 50 05 F1 | 	add	fp, #4
26d18     A8 76 02 FB | 	rdlong	arg02, fp
26d1c     BC 50 05 F1 | 	add	fp, #188
26d20     A8 78 02 FB | 	rdlong	arg03, fp
26d24     C4 50 85 F1 | 	sub	fp, #196
26d28     6C EC BF FD | 	call	#__system___fmtstr
26d2c                 | LR__1618
26d2c     A8 F0 03 F6 | 	mov	ptra, fp
26d30     B3 00 A0 FD | 	call	#popregs_
26d34                 | __system___fmtfloat_ret
26d34     2D 00 64 FD | 	ret
26d38                 | 
26d38                 | __system___float_fromuns
26d38     3A 79 0A F6 | 	mov	arg03, arg01 wz
26d3c     3C 35 02 A6 |  if_e	mov	result1, arg03
26d40     24 00 90 AD |  if_e	jmp	#LR__1619
26d44     3C 77 92 F7 | 	encod	arg02, arg03 wc
26d48     01 76 06 C1 |  if_b	add	arg02, #1
26d4c     01 76 86 F1 | 	sub	arg02, #1
26d50     1F 74 06 F6 | 	mov	arg01, #31
26d54     3B 75 82 F1 | 	sub	arg01, arg02
26d58     3A 79 62 F0 | 	shl	arg03, arg01
26d5c     02 78 46 F0 | 	shr	arg03, #2
26d60     00 74 06 F6 | 	mov	arg01, #0
26d64     E0 08 B0 FD | 	call	#__system___float_Pack
26d68                 | LR__1619
26d68                 | __system___float_fromuns_ret
26d68     2D 00 64 FD | 	ret
26d6c                 | 
26d6c                 | __system___float_fromint
26d6c     01 4C 05 F6 | 	mov	COUNT_, #1
26d70     A9 00 A0 FD | 	call	#pushregs_
26d74     00 74 56 F2 | 	cmps	arg01, #0 wc
26d78     3A 75 62 C6 |  if_b	neg	arg01, arg01
26d7c     01 8C 06 C6 |  if_b	mov	local01, #1
26d80     00 8C 06 36 |  if_ae	mov	local01, #0
26d84     B0 FF BF FD | 	call	#__system___float_fromuns
26d88     00 8C 0E F2 | 	cmp	local01, #0 wz
26d8c     1F 34 E6 54 |  if_ne	bitnot	result1, #31
26d90     A8 F0 03 F6 | 	mov	ptra, fp
26d94     B3 00 A0 FD | 	call	#popregs_
26d98                 | __system___float_fromint_ret
26d98     2D 00 64 FD | 	ret
26d9c                 | 
26d9c                 | __system___float_add
26d9c     0F 4C 05 F6 | 	mov	COUNT_, #15
26da0     A9 00 A0 FD | 	call	#pushregs_
26da4     3A 8D 02 F6 | 	mov	local01, arg01
26da8     3B 8F 02 F6 | 	mov	local02, arg02
26dac     00 90 06 F6 | 	mov	local03, #0
26db0     46 93 02 F6 | 	mov	local04, local01
26db4     49 95 02 F6 | 	mov	local05, local04
26db8     16 94 46 F7 | 	zerox	local05, #22
26dbc     49 97 02 F6 | 	mov	local06, local04
26dc0     01 96 66 F0 | 	shl	local06, #1
26dc4     18 96 46 F0 | 	shr	local06, #24
26dc8     1F 92 46 F0 | 	shr	local04, #31
26dcc     47 75 02 F6 | 	mov	arg01, local02
26dd0     3A 35 02 F6 | 	mov	result1, arg01
26dd4     1A 99 02 F6 | 	mov	local07, result1
26dd8     16 98 46 F7 | 	zerox	local07, #22
26ddc     1A 9B 02 F6 | 	mov	local08, result1
26de0     01 9A 66 F0 | 	shl	local08, #1
26de4     18 9A 46 F0 | 	shr	local08, #24
26de8     1A 9D 02 F6 | 	mov	local09, result1
26dec     1F 9C 46 F0 | 	shr	local09, #31
26df0     4E 9F 02 F6 | 	mov	local10, local09
26df4     00 A0 06 F6 | 	mov	local11, #0
26df8     00 A2 06 F6 | 	mov	local12, #0
26dfc     4D 97 12 F2 | 	cmp	local06, local08 wc
26e00     4D 97 0A 32 |  if_ae	cmp	local06, local08 wz
26e04     2C 00 90 1D |  if_a	jmp	#LR__1620
26e08     4C 95 12 32 |  if_ae	cmp	local05, local07 wc
26e0c     24 00 90 3D |  if_ae	jmp	#LR__1620
26e10     4A A5 02 F6 | 	mov	local13, local05
26e14     4C 95 02 F6 | 	mov	local05, local07
26e18     52 99 02 F6 | 	mov	local07, local13
26e1c     4B A5 02 F6 | 	mov	local13, local06
26e20     4D 97 02 F6 | 	mov	local06, local08
26e24     52 9B 02 F6 | 	mov	local08, local13
26e28     49 A5 02 F6 | 	mov	local13, local04
26e2c     4F 93 02 F6 | 	mov	local04, local10
26e30     52 9F 02 F6 | 	mov	local10, local13
26e34                 | LR__1620
26e34     FF 96 0E F2 | 	cmp	local06, #255 wz
26e38     74 01 90 AD |  if_e	jmp	#LR__1635
26e3c     00 96 0E F2 | 	cmp	local06, #0 wz
26e40     B0 01 90 AD |  if_e	jmp	#LR__1637
26e44     17 94 26 F4 | 	bith	local05, #23
26e48                 | LR__1621
26e48     00 9A 0E F2 | 	cmp	local08, #0 wz
26e4c     F8 01 90 AD |  if_e	jmp	#LR__1641
26e50     17 98 26 F4 | 	bith	local07, #23
26e54                 | LR__1622
26e54     7F 96 86 F1 | 	sub	local06, #127
26e58     7F 9A 86 F1 | 	sub	local08, #127
26e5c     4B A7 02 F6 | 	mov	local14, local06
26e60     4D A7 82 F1 | 	sub	local14, local08
26e64     C0 91 9D FE | 	loc	pa,	#(@LR__1624-@LR__1623)
26e68     8C 00 A0 FD | 	call	#FCACHE_LOAD_
26e6c                 | LR__1623
26e6c     20 A6 56 F2 | 	cmps	local14, #32 wc
26e70     20 00 90 CD |  if_b	jmp	#LR__1625
26e74     4C 9D 02 F6 | 	mov	local09, local07
26e78     00 A0 0E F2 | 	cmp	local11, #0 wz
26e7c     6F A0 62 FD | 	wrnz	local11
26e80     50 9D 42 F5 | 	or	local09, local11
26e84     4E A1 02 F6 | 	mov	local11, local09
26e88     00 98 06 F6 | 	mov	local07, #0
26e8c     20 A6 86 F1 | 	sub	local14, #32
26e90     D8 FF 9F FD | 	jmp	#LR__1623
26e94                 | LR__1624
26e94                 | LR__1625
26e94     00 A6 0E F2 | 	cmp	local14, #0 wz
26e98     38 00 90 AD |  if_e	jmp	#LR__1626
26e9c     4C A5 02 F6 | 	mov	local13, local07
26ea0     20 9C 06 F6 | 	mov	local09, #32
26ea4     53 9D 82 F1 | 	sub	local09, local14
26ea8     4E A5 62 F0 | 	shl	local13, local09
26eac     50 9D 02 F6 | 	mov	local09, local11
26eb0     20 9A 06 F6 | 	mov	local08, #32
26eb4     53 9B 82 F1 | 	sub	local08, local14
26eb8     4D 9D 6A F0 | 	shl	local09, local08 wz
26ebc     53 A1 42 F0 | 	shr	local11, local14
26ec0     53 99 42 F0 | 	shr	local07, local14
26ec4     52 A1 42 F5 | 	or	local11, local13
26ec8     00 A8 06 F6 | 	mov	local15, #0
26ecc     01 A8 06 56 |  if_ne	mov	local15, #1
26ed0     54 A1 42 F5 | 	or	local11, local15
26ed4                 | LR__1626
26ed4     49 A9 02 F6 | 	mov	local15, local04
26ed8     4F A9 62 F5 | 	xor	local15, local10
26edc     01 A8 CE F7 | 	test	local15, #1 wz
26ee0     18 00 90 AD |  if_e	jmp	#LR__1627
26ee4     4C 99 22 F6 | 	not	local07, local07
26ee8     50 A1 22 F6 | 	not	local11, local11
26eec     01 A0 0E F1 | 	add	local11, #1 wz
26ef0     00 A8 06 F6 | 	mov	local15, #0
26ef4     01 A8 06 A6 |  if_e	mov	local15, #1
26ef8     54 99 02 F1 | 	add	local07, local15
26efc                 | LR__1627
26efc     50 A3 12 F1 | 	add	local12, local11 wc
26f00     4C 95 22 F1 | 	addx	local05, local07
26f04     00 94 56 F2 | 	cmps	local05, #0 wc
26f08     1C 00 90 3D |  if_ae	jmp	#LR__1628
26f0c     01 92 66 F5 | 	xor	local04, #1
26f10     4A 95 22 F6 | 	not	local05, local05
26f14     51 A3 22 F6 | 	not	local12, local12
26f18     01 A2 0E F1 | 	add	local12, #1 wz
26f1c     00 A8 06 F6 | 	mov	local15, #0
26f20     01 A8 06 A6 |  if_e	mov	local15, #1
26f24     54 95 02 F1 | 	add	local05, local15
26f28                 | LR__1628
26f28     00 80 00 FF 
26f2c     00 94 16 F2 | 	cmp	local05, ##16777216 wc
26f30     28 00 90 CD |  if_b	jmp	#LR__1629
26f34     01 96 06 F1 | 	add	local06, #1
26f38     51 A7 02 F6 | 	mov	local14, local12
26f3c     01 A6 06 F5 | 	and	local14, #1
26f40     01 A2 46 F0 | 	shr	local12, #1
26f44     4A A9 02 F6 | 	mov	local15, local05
26f48     1F A8 66 F0 | 	shl	local15, #31
26f4c     54 A3 42 F5 | 	or	local12, local15
26f50     53 A3 42 F5 | 	or	local12, local14
26f54     01 94 46 F0 | 	shr	local05, #1
26f58     3C 00 90 FD | 	jmp	#LR__1634
26f5c                 | LR__1629
26f5c     00 40 00 FF 
26f60     00 94 16 F2 | 	cmp	local05, ##8388608 wc
26f64     30 00 90 3D |  if_ae	jmp	#LR__1633
26f68     00 94 0E F2 | 	cmp	local05, #0 wz
26f6c     00 A2 0E A2 |  if_e	cmp	local12, #0 wz
26f70     08 92 46 A5 |  if_e	or	local04, #8
26f74     01 92 26 A5 |  if_e	andn	local04, #1
26f78     1C 00 90 AD |  if_e	jmp	#LR__1632
26f7c                 | LR__1630
26f7c     00 40 00 FF 
26f80     00 94 16 F2 | 	cmp	local05, ##8388608 wc
26f84     10 00 90 3D |  if_ae	jmp	#LR__1631
26f88     51 A3 12 F1 | 	add	local12, local12 wc
26f8c     4A 95 22 F1 | 	addx	local05, local05
26f90     01 96 86 F1 | 	sub	local06, #1
26f94     E4 FF 9F FD | 	jmp	#LR__1630
26f98                 | LR__1631
26f98                 | LR__1632
26f98                 | LR__1633
26f98                 | LR__1634
26f98     4A 75 02 F6 | 	mov	arg01, local05
26f9c     51 77 02 F6 | 	mov	arg02, local12
26fa0     4B 79 02 F6 | 	mov	arg03, local06
26fa4     49 7B 02 F6 | 	mov	arg04, local04
26fa8     E4 1B B0 FD | 	call	#__system__pack_1245
26fac     E4 00 90 FD | 	jmp	#LR__1645
26fb0                 | LR__1635
26fb0     FF 9A 0E F2 | 	cmp	local08, #255 wz
26fb4     10 00 90 5D |  if_ne	jmp	#LR__1636
26fb8     49 9F 0A F2 | 	cmp	local10, local04 wz
26fbc     00 F8 3F 5F 
26fc0     00 34 06 56 |  if_ne	mov	result1, ##2146435072
26fc4     CC 00 90 5D |  if_ne	jmp	#LR__1645
26fc8                 | LR__1636
26fc8     00 94 0E F2 | 	cmp	local05, #0 wz
26fcc     00 F8 3F 5F 
26fd0     00 34 06 56 |  if_ne	mov	result1, ##2146435072
26fd4     BC 00 90 5D |  if_ne	jmp	#LR__1645
26fd8     51 77 02 F6 | 	mov	arg02, local12
26fdc     4B 79 02 F6 | 	mov	arg03, local06
26fe0     49 7B 02 F6 | 	mov	arg04, local04
26fe4     02 7A 46 F5 | 	or	arg04, #2
26fe8     4A 75 02 F6 | 	mov	arg01, local05
26fec     A0 1B B0 FD | 	call	#__system__pack_1245
26ff0     A0 00 90 FD | 	jmp	#LR__1645
26ff4                 | LR__1637
26ff4     00 94 0E F2 | 	cmp	local05, #0 wz
26ff8     2C 00 90 AD |  if_e	jmp	#LR__1640
26ffc     01 94 66 F0 | 	shl	local05, #1
27000     18 90 9D FE | 	loc	pa,	#(@LR__1639-@LR__1638)
27004     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27008                 | LR__1638
27008     00 40 00 FF 
2700c     00 94 16 F2 | 	cmp	local05, ##8388608 wc
27010     4B A9 02 C6 |  if_b	mov	local15, local06
27014     01 A8 86 C1 |  if_b	sub	local15, #1
27018     54 97 02 C6 |  if_b	mov	local06, local15
2701c     01 94 66 C0 |  if_b	shl	local05, #1
27020     E4 FF 9F CD |  if_b	jmp	#LR__1638
27024                 | LR__1639
27024     20 FE 9F FD | 	jmp	#LR__1621
27028                 | LR__1640
27028     4F 93 02 F5 | 	and	local04, local10
2702c     49 7B 02 F6 | 	mov	arg04, local04
27030     08 7A 46 F5 | 	or	arg04, #8
27034     00 74 06 F6 | 	mov	arg01, #0
27038     00 76 06 F6 | 	mov	arg02, #0
2703c     00 78 06 F6 | 	mov	arg03, #0
27040     4C 1B B0 FD | 	call	#__system__pack_1245
27044     4C 00 90 FD | 	jmp	#LR__1645
27048                 | LR__1641
27048     00 98 0E F2 | 	cmp	local07, #0 wz
2704c     2C 00 90 AD |  if_e	jmp	#LR__1644
27050     01 98 66 F0 | 	shl	local07, #1
27054     C4 8F 9D FE | 	loc	pa,	#(@LR__1643-@LR__1642)
27058     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2705c                 | LR__1642
2705c     00 40 00 FF 
27060     00 98 16 F2 | 	cmp	local07, ##8388608 wc
27064     4D A9 02 C6 |  if_b	mov	local15, local08
27068     01 A8 86 C1 |  if_b	sub	local15, #1
2706c     54 9B 02 C6 |  if_b	mov	local08, local15
27070     01 98 66 C0 |  if_b	shl	local07, #1
27074     E4 FF 9F CD |  if_b	jmp	#LR__1642
27078                 | LR__1643
27078     D8 FD 9F FD | 	jmp	#LR__1622
2707c                 | LR__1644
2707c     51 77 02 F6 | 	mov	arg02, local12
27080     7F 96 86 F1 | 	sub	local06, #127
27084     4B 79 02 F6 | 	mov	arg03, local06
27088     49 7B 02 F6 | 	mov	arg04, local04
2708c     4A 75 02 F6 | 	mov	arg01, local05
27090     FC 1A B0 FD | 	call	#__system__pack_1245
27094                 | LR__1645
27094     A8 F0 03 F6 | 	mov	ptra, fp
27098     B3 00 A0 FD | 	call	#popregs_
2709c                 | __system___float_add_ret
2709c     2D 00 64 FD | 	ret
270a0                 | 
270a0                 | __system___float_mul
270a0     0C 4C 05 F6 | 	mov	COUNT_, #12
270a4     A9 00 A0 FD | 	call	#pushregs_
270a8     3A 8D 02 F6 | 	mov	local01, arg01
270ac     3B 8F 02 F6 | 	mov	local02, arg02
270b0     46 91 02 F6 | 	mov	local03, local01
270b4     48 93 02 F6 | 	mov	local04, local03
270b8     16 92 46 F7 | 	zerox	local04, #22
270bc     48 95 02 F6 | 	mov	local05, local03
270c0     01 94 66 F0 | 	shl	local05, #1
270c4     18 94 46 F0 | 	shr	local05, #24
270c8     1F 90 46 F0 | 	shr	local03, #31
270cc     47 75 02 F6 | 	mov	arg01, local02
270d0     3A 35 02 F6 | 	mov	result1, arg01
270d4     1A 97 02 F6 | 	mov	local06, result1
270d8     4B 99 02 F6 | 	mov	local07, local06
270dc     16 98 46 F7 | 	zerox	local07, #22
270e0     4B 9B 02 F6 | 	mov	local08, local06
270e4     01 9A 66 F0 | 	shl	local08, #1
270e8     18 9A 46 F0 | 	shr	local08, #24
270ec     4D 9D 02 F6 | 	mov	local09, local08
270f0     1F 96 46 F0 | 	shr	local06, #31
270f4     00 9E 06 F6 | 	mov	local10, #0
270f8     4B 91 62 F5 | 	xor	local03, local06
270fc     FF 94 0E F2 | 	cmp	local05, #255 wz
27100     90 00 90 AD |  if_e	jmp	#LR__1649
27104     FF 9C 0E F2 | 	cmp	local09, #255 wz
27108     E0 00 90 AD |  if_e	jmp	#LR__1652
2710c     00 94 0E F2 | 	cmp	local05, #0 wz
27110     14 01 90 AD |  if_e	jmp	#LR__1653
27114     17 92 26 F4 | 	bith	local04, #23
27118                 | LR__1646
27118     00 9C 0E F2 | 	cmp	local09, #0 wz
2711c     50 01 90 AD |  if_e	jmp	#LR__1657
27120     17 98 26 F4 | 	bith	local07, #23
27124                 | LR__1647
27124     49 9B 02 F6 | 	mov	local08, local04
27128     04 9A 66 F0 | 	shl	local08, #4
2712c     4C 9F 02 F6 | 	mov	local10, local07
27130     05 9E 66 F0 | 	shl	local10, #5
27134     4F 9B 02 FD | 	qmul	local08, local10
27138     4E 95 02 F1 | 	add	local05, local09
2713c     FE 94 86 F1 | 	sub	local05, #254
27140     4A A1 02 F6 | 	mov	local11, local05
27144     04 92 66 F0 | 	shl	local04, #4
27148     05 98 66 F0 | 	shl	local07, #5
2714c     18 9E 62 FD | 	getqx	local10
27150     4C 93 02 FD | 	qmul	local04, local07
27154     19 A2 62 FD | 	getqy	local12
27158     00 80 00 FF 
2715c     00 A2 16 F2 | 	cmp	local12, ##16777216 wc
27160     18 00 90 CD |  if_b	jmp	#LR__1648
27164     01 A0 06 F1 | 	add	local11, #1
27168     01 9E 46 F0 | 	shr	local10, #1
2716c     51 9D 02 F6 | 	mov	local09, local12
27170     1F 9C 66 F0 | 	shl	local09, #31
27174     4E 9F 42 F5 | 	or	local10, local09
27178     01 A2 46 F0 | 	shr	local12, #1
2717c                 | LR__1648
2717c     51 75 02 F6 | 	mov	arg01, local12
27180     4F 77 02 F6 | 	mov	arg02, local10
27184     50 79 02 F6 | 	mov	arg03, local11
27188     48 7B 02 F6 | 	mov	arg04, local03
2718c     00 1A B0 FD | 	call	#__system__pack_1245
27190     20 01 90 FD | 	jmp	#LR__1661
27194                 | LR__1649
27194     00 92 0E F2 | 	cmp	local04, #0 wz
27198     46 35 02 56 |  if_ne	mov	result1, local01
2719c     14 01 90 5D |  if_ne	jmp	#LR__1661
271a0     FF 9C 56 F2 | 	cmps	local09, #255 wc
271a4     1C 00 90 3D |  if_ae	jmp	#LR__1650
271a8     00 9C 0E F2 | 	cmp	local09, #0 wz
271ac     20 00 90 5D |  if_ne	jmp	#LR__1651
271b0     00 98 0E F2 | 	cmp	local07, #0 wz
271b4     18 00 90 5D |  if_ne	jmp	#LR__1651
271b8     00 F8 3F FF 
271bc     00 34 06 F6 | 	mov	result1, ##2146435072
271c0     F0 00 90 FD | 	jmp	#LR__1661
271c4                 | LR__1650
271c4     00 98 0E F2 | 	cmp	local07, #0 wz
271c8     47 35 02 56 |  if_ne	mov	result1, local02
271cc     E4 00 90 5D |  if_ne	jmp	#LR__1661
271d0                 | LR__1651
271d0     02 90 46 F5 | 	or	local03, #2
271d4     00 74 06 F6 | 	mov	arg01, #0
271d8     00 76 06 F6 | 	mov	arg02, #0
271dc     4A 79 02 F6 | 	mov	arg03, local05
271e0     48 7B 02 F6 | 	mov	arg04, local03
271e4     A8 19 B0 FD | 	call	#__system__pack_1245
271e8     C8 00 90 FD | 	jmp	#LR__1661
271ec                 | LR__1652
271ec     00 94 0E F2 | 	cmp	local05, #0 wz
271f0     00 92 0E A2 |  if_e	cmp	local04, #0 wz
271f4     00 F8 3F AF 
271f8     00 34 06 A6 |  if_e	mov	result1, ##2146435072
271fc     B4 00 90 AD |  if_e	jmp	#LR__1661
27200     00 98 0E F2 | 	cmp	local07, #0 wz
27204     47 35 02 56 |  if_ne	mov	result1, local02
27208     A8 00 90 5D |  if_ne	jmp	#LR__1661
2720c     4E 79 02 F6 | 	mov	arg03, local09
27210     48 7B 02 F6 | 	mov	arg04, local03
27214     02 7A 46 F5 | 	or	arg04, #2
27218     00 74 06 F6 | 	mov	arg01, #0
2721c     00 76 06 F6 | 	mov	arg02, #0
27220     6C 19 B0 FD | 	call	#__system__pack_1245
27224     8C 00 90 FD | 	jmp	#LR__1661
27228                 | LR__1653
27228     00 92 0E F2 | 	cmp	local04, #0 wz
2722c     24 00 90 AD |  if_e	jmp	#LR__1656
27230     01 92 66 F0 | 	shl	local04, #1
27234     DC 8D 9D FE | 	loc	pa,	#(@LR__1655-@LR__1654)
27238     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2723c                 | LR__1654
2723c     00 40 00 FF 
27240     00 92 16 F2 | 	cmp	local04, ##8388608 wc
27244     01 94 86 C1 |  if_b	sub	local05, #1
27248     01 92 66 C0 |  if_b	shl	local04, #1
2724c     EC FF 9F CD |  if_b	jmp	#LR__1654
27250                 | LR__1655
27250     C4 FE 9F FD | 	jmp	#LR__1646
27254                 | LR__1656
27254     08 90 46 F5 | 	or	local03, #8
27258     00 74 06 F6 | 	mov	arg01, #0
2725c     00 76 06 F6 | 	mov	arg02, #0
27260     00 78 06 F6 | 	mov	arg03, #0
27264     48 7B 02 F6 | 	mov	arg04, local03
27268     24 19 B0 FD | 	call	#__system__pack_1245
2726c     44 00 90 FD | 	jmp	#LR__1661
27270                 | LR__1657
27270     00 98 0E F2 | 	cmp	local07, #0 wz
27274     24 00 90 AD |  if_e	jmp	#LR__1660
27278     01 98 66 F0 | 	shl	local07, #1
2727c     94 8D 9D FE | 	loc	pa,	#(@LR__1659-@LR__1658)
27280     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27284                 | LR__1658
27284     00 40 00 FF 
27288     00 98 16 F2 | 	cmp	local07, ##8388608 wc
2728c     01 9C 86 C1 |  if_b	sub	local09, #1
27290     01 98 66 C0 |  if_b	shl	local07, #1
27294     EC FF 9F CD |  if_b	jmp	#LR__1658
27298                 | LR__1659
27298     88 FE 9F FD | 	jmp	#LR__1647
2729c                 | LR__1660
2729c     48 7B 02 F6 | 	mov	arg04, local03
272a0     08 7A 46 F5 | 	or	arg04, #8
272a4     00 74 06 F6 | 	mov	arg01, #0
272a8     00 76 06 F6 | 	mov	arg02, #0
272ac     00 78 06 F6 | 	mov	arg03, #0
272b0     DC 18 B0 FD | 	call	#__system__pack_1245
272b4                 | LR__1661
272b4     A8 F0 03 F6 | 	mov	ptra, fp
272b8     B3 00 A0 FD | 	call	#popregs_
272bc                 | __system___float_mul_ret
272bc     2D 00 64 FD | 	ret
272c0                 | 
272c0                 | __system___float_div
272c0     0E 4C 05 F6 | 	mov	COUNT_, #14
272c4     A9 00 A0 FD | 	call	#pushregs_
272c8     3A 91 02 F6 | 	mov	local03, arg01
272cc     3B 93 02 F6 | 	mov	local04, arg02
272d0     48 95 02 F6 | 	mov	local05, local03
272d4     4A 97 02 F6 | 	mov	local06, local05
272d8     16 96 46 F7 | 	zerox	local06, #22
272dc     4A 99 02 F6 | 	mov	local07, local05
272e0     01 98 66 F0 | 	shl	local07, #1
272e4     18 98 46 F0 | 	shr	local07, #24
272e8     1F 94 46 F0 | 	shr	local05, #31
272ec     49 35 02 F6 | 	mov	result1, local04
272f0     1A 9B 02 F6 | 	mov	local08, result1
272f4     4D 9D 02 F6 | 	mov	local09, local08
272f8     16 9C 46 F7 | 	zerox	local09, #22
272fc     4D 9F 02 F6 | 	mov	local10, local08
27300     01 9E 66 F0 | 	shl	local10, #1
27304     18 9E 46 F0 | 	shr	local10, #24
27308     1F 9A 46 F0 | 	shr	local08, #31
2730c     4D 95 62 F5 | 	xor	local05, local08
27310     FF 98 0E F2 | 	cmp	local07, #255 wz
27314     D4 00 90 AD |  if_e	jmp	#LR__1667
27318     FF 9E 0E F2 | 	cmp	local10, #255 wz
2731c     04 01 90 AD |  if_e	jmp	#LR__1668
27320     00 98 0E F2 | 	cmp	local07, #0 wz
27324     24 01 90 AD |  if_e	jmp	#LR__1669
27328     17 96 26 F4 | 	bith	local06, #23
2732c                 | LR__1662
2732c     00 9E 0E F2 | 	cmp	local10, #0 wz
27330     74 01 90 AD |  if_e	jmp	#LR__1673
27334     17 9C 26 F4 | 	bith	local09, #23
27338                 | LR__1663
27338     4F 99 82 F1 | 	sub	local07, local10
2733c     4C A1 02 F6 | 	mov	local11, local07
27340     4B 75 02 F6 | 	mov	arg01, local06
27344     02 74 46 F0 | 	shr	arg01, #2
27348     1E 96 66 F0 | 	shl	local06, #30
2734c     4B 77 02 F6 | 	mov	arg02, local06
27350     4E 79 02 F6 | 	mov	arg03, local09
27354     28 74 62 FD | 	setq	arg01
27358     3C 77 12 FD | 	qdiv	arg02, arg03
2735c     00 A2 06 F6 | 	mov	local12, #0
27360     18 8C 62 FD | 	getqx	local01
27364     19 36 62 FD | 	getqy	result2
27368     1B 8F 02 F6 | 	mov	local02, result2
2736c     46 A5 02 F6 | 	mov	local13, local01
27370     00 8E 4E F2 | 	cmps	local02, #0 wz
27374     52 A7 02 F6 | 	mov	local14, local13
27378     19 A6 66 F0 | 	shl	local14, #25
2737c     01 A2 06 56 |  if_ne	mov	local12, #1
27380     51 A7 42 F5 | 	or	local14, local12
27384     07 A4 46 F0 | 	shr	local13, #7
27388     00 80 00 FF 
2738c     00 A4 16 F2 | 	cmp	local13, ##16777216 wc
27390     1C 00 90 CD |  if_b	jmp	#LR__1664
27394     01 A0 06 F1 | 	add	local11, #1
27398     01 A6 46 F0 | 	shr	local14, #1
2739c     52 A3 02 F6 | 	mov	local12, local13
273a0     1F A2 66 F0 | 	shl	local12, #31
273a4     51 A7 42 F5 | 	or	local14, local12
273a8     01 A4 46 F0 | 	shr	local13, #1
273ac     24 00 90 FD | 	jmp	#LR__1666
273b0                 | LR__1664
273b0     00 40 00 FF 
273b4     00 A4 16 F2 | 	cmp	local13, ##8388608 wc
273b8     18 00 90 3D |  if_ae	jmp	#LR__1665
273bc     01 A0 86 F1 | 	sub	local11, #1
273c0     01 A4 66 F0 | 	shl	local13, #1
273c4     53 A3 02 F6 | 	mov	local12, local14
273c8     1F A2 46 F0 | 	shr	local12, #31
273cc     51 A5 42 F5 | 	or	local13, local12
273d0     01 A6 66 F0 | 	shl	local14, #1
273d4                 | LR__1665
273d4                 | LR__1666
273d4     52 75 02 F6 | 	mov	arg01, local13
273d8     53 77 02 F6 | 	mov	arg02, local14
273dc     50 79 02 F6 | 	mov	arg03, local11
273e0     4A 7B 02 F6 | 	mov	arg04, local05
273e4     A8 17 B0 FD | 	call	#__system__pack_1245
273e8     00 01 90 FD | 	jmp	#LR__1677
273ec                 | LR__1667
273ec     00 96 0E F2 | 	cmp	local06, #0 wz
273f0     48 35 02 56 |  if_ne	mov	result1, local03
273f4     F4 00 90 5D |  if_ne	jmp	#LR__1677
273f8     FF 9E 0E F2 | 	cmp	local10, #255 wz
273fc     00 F8 3F AF 
27400     00 34 06 A6 |  if_e	mov	result1, ##2146435072
27404     E4 00 90 AD |  if_e	jmp	#LR__1677
27408     02 94 46 F5 | 	or	local05, #2
2740c     00 74 06 F6 | 	mov	arg01, #0
27410     00 76 06 F6 | 	mov	arg02, #0
27414     4C 79 02 F6 | 	mov	arg03, local07
27418     4A 7B 02 F6 | 	mov	arg04, local05
2741c     70 17 B0 FD | 	call	#__system__pack_1245
27420     C8 00 90 FD | 	jmp	#LR__1677
27424                 | LR__1668
27424     00 9C 0E F2 | 	cmp	local09, #0 wz
27428     49 35 02 56 |  if_ne	mov	result1, local04
2742c     BC 00 90 5D |  if_ne	jmp	#LR__1677
27430     4A 7B 02 F6 | 	mov	arg04, local05
27434     08 7A 46 F5 | 	or	arg04, #8
27438     00 74 06 F6 | 	mov	arg01, #0
2743c     00 76 06 F6 | 	mov	arg02, #0
27440     00 78 06 F6 | 	mov	arg03, #0
27444     48 17 B0 FD | 	call	#__system__pack_1245
27448     A0 00 90 FD | 	jmp	#LR__1677
2744c                 | LR__1669
2744c     00 96 0E F2 | 	cmp	local06, #0 wz
27450     24 00 90 AD |  if_e	jmp	#LR__1672
27454     01 96 66 F0 | 	shl	local06, #1
27458     B8 8B 9D FE | 	loc	pa,	#(@LR__1671-@LR__1670)
2745c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27460                 | LR__1670
27460     00 40 00 FF 
27464     00 96 16 F2 | 	cmp	local06, ##8388608 wc
27468     01 98 86 C1 |  if_b	sub	local07, #1
2746c     01 96 66 C0 |  if_b	shl	local06, #1
27470     EC FF 9F CD |  if_b	jmp	#LR__1670
27474                 | LR__1671
27474     B4 FE 9F FD | 	jmp	#LR__1662
27478                 | LR__1672
27478     00 9E 0E F2 | 	cmp	local10, #0 wz
2747c     00 9C 0E A2 |  if_e	cmp	local09, #0 wz
27480     00 F8 3F AF 
27484     00 34 06 A6 |  if_e	mov	result1, ##2146435072
27488     60 00 90 AD |  if_e	jmp	#LR__1677
2748c     4A 7B 02 F6 | 	mov	arg04, local05
27490     08 7A 46 F5 | 	or	arg04, #8
27494     00 74 06 F6 | 	mov	arg01, #0
27498     00 76 06 F6 | 	mov	arg02, #0
2749c     00 78 06 F6 | 	mov	arg03, #0
274a0     EC 16 B0 FD | 	call	#__system__pack_1245
274a4     44 00 90 FD | 	jmp	#LR__1677
274a8                 | LR__1673
274a8     00 9C 0E F2 | 	cmp	local09, #0 wz
274ac     24 00 90 AD |  if_e	jmp	#LR__1676
274b0     01 9C 66 F0 | 	shl	local09, #1
274b4     5C 8B 9D FE | 	loc	pa,	#(@LR__1675-@LR__1674)
274b8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
274bc                 | LR__1674
274bc     00 40 00 FF 
274c0     00 9C 16 F2 | 	cmp	local09, ##8388608 wc
274c4     01 9E 86 C1 |  if_b	sub	local10, #1
274c8     01 9C 66 C0 |  if_b	shl	local09, #1
274cc     EC FF 9F CD |  if_b	jmp	#LR__1674
274d0                 | LR__1675
274d0     64 FE 9F FD | 	jmp	#LR__1663
274d4                 | LR__1676
274d4     4A 7B 02 F6 | 	mov	arg04, local05
274d8     02 7A 46 F5 | 	or	arg04, #2
274dc     00 74 06 F6 | 	mov	arg01, #0
274e0     00 76 06 F6 | 	mov	arg02, #0
274e4     00 78 06 F6 | 	mov	arg03, #0
274e8     A4 16 B0 FD | 	call	#__system__pack_1245
274ec                 | LR__1677
274ec     A8 F0 03 F6 | 	mov	ptra, fp
274f0     B3 00 A0 FD | 	call	#popregs_
274f4                 | __system___float_div_ret
274f4     2D 00 64 FD | 	ret
274f8                 | 
274f8                 | __system___float_cmp
274f8     3A 3B 02 F6 | 	mov	_var01, arg01
274fc     00 C0 3F FF 
27500     01 3A 56 F2 | 	cmps	_var01, ##2139095041 wc
27504     00 C0 3F CF 
27508     01 76 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2750c     3C 35 02 36 |  if_ae	mov	result1, arg03
27510     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
27514     00 C0 7F FF 
27518     01 3A 16 F2 | 	cmp	_var01, ##-8388607 wc
2751c     00 C0 7F CF 
27520     01 3A 16 C2 |  if_b	cmp	_var01, ##-8388607 wc
27524     3C 35 02 36 |  if_ae	mov	result1, arg03
27528     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2752c     00 3A 56 F2 | 	cmps	_var01, #0 wc
27530     2C 00 90 3D |  if_ae	jmp	#LR__1678
27534     00 76 56 F2 | 	cmps	arg02, #0 wc
27538     3B 35 02 C6 |  if_b	mov	result1, arg02
2753c     1D 35 82 C1 |  if_b	sub	result1, _var01
27540     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
27544     00 76 0E F2 | 	cmp	arg02, #0 wz
27548     00 00 40 AF 
2754c     00 3A 0E A2 |  if_e	cmp	_var01, ##-2147483648 wz
27550     00 34 06 A6 |  if_e	mov	result1, #0
27554     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
27558     01 34 66 F6 | 	neg	result1, #1
2755c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
27560                 | LR__1678
27560     00 76 56 F2 | 	cmps	arg02, #0 wc
27564     1C 00 90 3D |  if_ae	jmp	#LR__1679
27568     00 3A 0E F2 | 	cmp	_var01, #0 wz
2756c     00 00 40 AF 
27570     00 76 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
27574     00 34 06 A6 |  if_e	mov	result1, #0
27578     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2757c     01 34 06 F6 | 	mov	result1, #1
27580     08 00 90 FD | 	jmp	#__system___float_cmp_ret
27584                 | LR__1679
27584     3B 3B 82 F1 | 	sub	_var01, arg02
27588     1D 35 02 F6 | 	mov	result1, _var01
2758c                 | __system___float_cmp_ret
2758c     2D 00 64 FD | 	ret
27590                 | 
27590                 | __system___float_tointeger
27590     04 4C 05 F6 | 	mov	COUNT_, #4
27594     A9 00 A0 FD | 	call	#pushregs_
27598     3B 8D 02 F6 | 	mov	local01, arg02
2759c     54 00 B0 FD | 	call	#__system___float_Unpack
275a0     1C 8F 02 F6 | 	mov	local02, result3
275a4     1B 91 02 F6 | 	mov	local03, result2
275a8     FF FF 7F FF 
275ac     FF 91 56 F2 | 	cmps	local03, ##-1 wc
275b0     30 00 90 CD |  if_b	jmp	#LR__1680
275b4     1F 90 56 F2 | 	cmps	local03, #31 wc
275b8     28 00 90 3D |  if_ae	jmp	#LR__1680
275bc     02 8E 66 F0 | 	shl	local02, #2
275c0     1E 92 06 F6 | 	mov	local04, #30
275c4     48 93 82 F1 | 	sub	local04, local03
275c8     49 8F 42 F0 | 	shr	local02, local04
275cc     46 8F 02 F1 | 	add	local02, local01
275d0     01 8E 46 F0 | 	shr	local02, #1
275d4     00 34 0E F2 | 	cmp	result1, #0 wz
275d8     47 8F 62 56 |  if_ne	neg	local02, local02
275dc     47 35 02 F6 | 	mov	result1, local02
275e0     04 00 90 FD | 	jmp	#LR__1681
275e4                 | LR__1680
275e4     00 34 06 F6 | 	mov	result1, #0
275e8                 | LR__1681
275e8     A8 F0 03 F6 | 	mov	ptra, fp
275ec     B3 00 A0 FD | 	call	#popregs_
275f0                 | __system___float_tointeger_ret
275f0     2D 00 64 FD | 	ret
275f4                 | 
275f4                 | __system___float_Unpack
275f4     3A 3B 02 F6 | 	mov	_var01, arg01
275f8     1F 3A 46 F0 | 	shr	_var01, #31
275fc     3A 3D 02 F6 | 	mov	_var02, arg01
27600     01 3C 66 F0 | 	shl	_var02, #1
27604     18 3C 4E F0 | 	shr	_var02, #24 wz
27608     17 75 06 F4 | 	bitl	arg01, #279
2760c     06 74 66 50 |  if_ne	shl	arg01, #6
27610     1D 74 26 54 |  if_ne	bith	arg01, #29
27614     1C 00 90 5D |  if_ne	jmp	#LR__1682
27618     3A 3F 92 F7 | 	encod	_var03, arg01 wc
2761c     01 3E 06 C1 |  if_b	add	_var03, #1
27620     17 3E 86 F1 | 	sub	_var03, #23
27624     1F 3D 02 F6 | 	mov	_var02, _var03
27628     07 36 06 F6 | 	mov	result2, #7
2762c     1F 37 82 F1 | 	sub	result2, _var03
27630     1B 75 62 F0 | 	shl	arg01, result2
27634                 | LR__1682
27634     7F 3C 86 F1 | 	sub	_var02, #127
27638     3A 39 02 F6 | 	mov	result3, arg01
2763c     1D 35 02 F6 | 	mov	result1, _var01
27640     1E 37 02 F6 | 	mov	result2, _var02
27644                 | __system___float_Unpack_ret
27644     2D 00 64 FD | 	ret
27648                 | 
27648                 | __system___float_Pack
27648     00 3A 06 F6 | 	mov	_var01, #0
2764c     00 78 0E F2 | 	cmp	arg03, #0 wz
27650     8C 00 90 AD |  if_e	jmp	#LR__1684
27654     3C 3D 92 F7 | 	encod	_var02, arg03 wc
27658     01 3C 06 C1 |  if_b	add	_var02, #1
2765c     21 3A 06 F6 | 	mov	_var01, #33
27660     1E 3B 82 F1 | 	sub	_var01, _var02
27664     1D 79 62 F0 | 	shl	arg03, _var01
27668     03 3C 06 F6 | 	mov	_var02, #3
2766c     1D 3D 82 F1 | 	sub	_var02, _var01
27670     1E 77 02 F1 | 	add	arg02, _var02
27674     3B 3F 02 F6 | 	mov	_var03, arg02
27678     00 79 06 F1 | 	add	arg03, #256
2767c     3C 3D 02 F6 | 	mov	_var02, arg03
27680     FF 3C 2E F5 | 	andn	_var02, #255 wz
27684     01 3E 06 A1 |  if_e	add	_var03, #1
27688     7F 3E 06 F1 | 	add	_var03, #127
2768c     FF FF 7F FF 
27690     E9 3F 46 F3 | 	fges	_var03, ##-23
27694     FF 3E 66 F3 | 	fles	_var03, #255
27698     01 3E 56 F2 | 	cmps	_var03, #1 wc
2769c     1C 00 90 3D |  if_ae	jmp	#LR__1683
276a0     01 78 46 F0 | 	shr	arg03, #1
276a4     1F 3C C6 F9 | 	decod	_var02, #31
276a8     3C 3D 02 F1 | 	add	_var02, arg03
276ac     1F 3F 62 F6 | 	neg	_var03, _var03
276b0     1F 3D 42 F0 | 	shr	_var02, _var03
276b4     1E 79 02 F6 | 	mov	arg03, _var02
276b8     00 3E 06 F6 | 	mov	_var03, #0
276bc                 | LR__1683
276bc     3A 35 02 F6 | 	mov	result1, arg01
276c0     1F 34 66 F0 | 	shl	result1, #31
276c4     1F 3D 02 F6 | 	mov	_var02, _var03
276c8     17 3C 66 F0 | 	shl	_var02, #23
276cc     1E 35 42 F5 | 	or	result1, _var02
276d0     3C 41 02 F6 | 	mov	_var04, arg03
276d4     09 40 46 F0 | 	shr	_var04, #9
276d8     20 35 42 F5 | 	or	result1, _var04
276dc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
276e0                 | LR__1684
276e0     1D 35 02 F6 | 	mov	result1, _var01
276e4                 | __system___float_Pack_ret
276e4     2D 00 64 FD | 	ret
276e8                 | 
276e8                 | __system___basic_print_float
276e8     05 4C 05 F6 | 	mov	COUNT_, #5
276ec     A9 00 A0 FD | 	call	#pushregs_
276f0     3A 8D 02 F6 | 	mov	local01, arg01
276f4     3B 8F 02 F6 | 	mov	local02, arg02
276f8     3C 91 0A F6 | 	mov	local03, arg03 wz
276fc     3D 93 02 F6 | 	mov	local04, arg04
27700     14 00 90 5D |  if_ne	jmp	#LR__1685
27704     23 92 0E F2 | 	cmp	local04, #35 wz
27708     80 02 10 AF 
2770c     00 94 06 A6 |  if_e	mov	local05, ##537198592
27710     1D 94 C6 59 |  if_ne	decod	local05, #29
27714     4A 91 02 F6 | 	mov	local03, local05
27718                 | LR__1685
27718     46 75 02 F6 | 	mov	arg01, local01
2771c     EC 13 B0 FD | 	call	#__system___gettxfunc
27720     1A 95 0A F6 | 	mov	local05, result1 wz
27724     00 34 06 A6 |  if_e	mov	result1, #0
27728     48 77 02 56 |  if_ne	mov	arg02, local03
2772c     47 79 02 56 |  if_ne	mov	arg03, local02
27730     49 7B 02 56 |  if_ne	mov	arg04, local04
27734     4A 75 02 56 |  if_ne	mov	arg01, local05
27738     5C E6 BF 5D |  if_ne	call	#__system___fmtfloat
2773c     A8 F0 03 F6 | 	mov	ptra, fp
27740     B3 00 A0 FD | 	call	#popregs_
27744                 | __system___basic_print_float_ret
27744     2D 00 64 FD | 	ret
27748                 | 
27748                 | __system____builtin_ilogb
27748     02 4C 05 F6 | 	mov	COUNT_, #2
2774c     A9 00 A0 FD | 	call	#pushregs_
27750     A0 FE BF FD | 	call	#__system___float_Unpack
27754     1B 8D 02 F6 | 	mov	local01, result2
27758     1C 8F 0A F6 | 	mov	local02, result3 wz
2775c     00 00 40 AF 
27760     01 34 06 A6 |  if_e	mov	result1, ##-2147483647
27764     24 00 90 AD |  if_e	jmp	#LR__1687
27768     80 8C 0E F2 | 	cmp	local01, #128 wz
2776c     18 00 90 5D |  if_ne	jmp	#LR__1686
27770     00 00 10 FF 
27774     00 8E 0E F2 | 	cmp	local02, ##536870912 wz
27778     1E 34 CE A9 |  if_e	bmask	result1, #30
2777c     0C 00 90 AD |  if_e	jmp	#LR__1687
27780     1F 34 C6 F9 | 	decod	result1, #31
27784     04 00 90 FD | 	jmp	#LR__1687
27788                 | LR__1686
27788     46 35 02 F6 | 	mov	result1, local01
2778c                 | LR__1687
2778c     A8 F0 03 F6 | 	mov	ptra, fp
27790     B3 00 A0 FD | 	call	#popregs_
27794                 | __system____builtin_ilogb_ret
27794     2D 00 64 FD | 	ret
27798                 | 
27798                 | __system____builtin_exp2f
27798     04 4C 05 F6 | 	mov	COUNT_, #4
2779c     A9 00 A0 FD | 	call	#pushregs_
277a0     3A 8D 02 F6 | 	mov	local01, arg01
277a4     00 7F 21 FF 
277a8     00 76 06 F6 | 	mov	arg02, ##1123942400
277ac     01 78 66 F6 | 	neg	arg03, #1
277b0     44 FD BF FD | 	call	#__system___float_cmp
277b4     00 34 56 F2 | 	cmps	result1, #0 wc
277b8     00 C0 3F 3F 
277bc     00 34 06 36 |  if_ae	mov	result1, ##2139095040
277c0     D4 00 90 3D |  if_ae	jmp	#LR__1689
277c4     46 75 02 F6 | 	mov	arg01, local01
277c8     00 7F 61 FF 
277cc     00 76 06 F6 | 	mov	arg02, ##-1023541248
277d0     01 78 06 F6 | 	mov	arg03, #1
277d4     20 FD BF FD | 	call	#__system___float_cmp
277d8     00 34 56 F2 | 	cmps	result1, #0 wc
277dc     00 34 06 C6 |  if_b	mov	result1, #0
277e0     B4 00 90 CD |  if_b	jmp	#LR__1689
277e4     46 75 02 F6 | 	mov	arg01, local01
277e8     00 76 06 F6 | 	mov	arg02, #0
277ec     A0 FD BF FD | 	call	#__system___float_tointeger
277f0     1A 8F 02 F6 | 	mov	local02, result1
277f4     47 75 02 F6 | 	mov	arg01, local02
277f8     70 F5 BF FD | 	call	#__system___float_fromint
277fc     1A 77 02 F6 | 	mov	arg02, result1
27800     46 75 02 F6 | 	mov	arg01, local01
27804     1F 76 E6 F4 | 	bitnot	arg02, #31
27808     90 F5 BF FD | 	call	#__system___float_add
2780c     1A 91 02 F6 | 	mov	local03, result1
27810     48 75 02 F6 | 	mov	arg01, local03
27814     00 76 06 F6 | 	mov	arg02, #0
27818     01 78 06 F6 | 	mov	arg03, #1
2781c     D8 FC BF FD | 	call	#__system___float_cmp
27820     00 34 56 F2 | 	cmps	result1, #0 wc
27824     18 00 90 3D |  if_ae	jmp	#LR__1688
27828     48 75 02 F6 | 	mov	arg01, local03
2782c     00 C0 1F FF 
27830     00 76 06 F6 | 	mov	arg02, ##1065353216
27834     64 F5 BF FD | 	call	#__system___float_add
27838     1A 91 02 F6 | 	mov	local03, result1
2783c     01 8E 86 F1 | 	sub	local02, #1
27840                 | LR__1688
27840     7F 8E 06 F1 | 	add	local02, #127
27844     17 8E 66 F0 | 	shl	local02, #23
27848     47 93 02 F6 | 	mov	local04, local02
2784c     48 75 02 F6 | 	mov	arg01, local03
27850     00 80 26 FF 
27854     00 76 06 F6 | 	mov	arg02, ##1291845632
27858     44 F8 BF FD | 	call	#__system___float_mul
2785c     1A 75 02 F6 | 	mov	arg01, result1
27860     00 76 06 F6 | 	mov	arg02, #0
27864     28 FD BF FD | 	call	#__system___float_tointeger
27868     1A 77 0A F6 | 	mov	arg02, result1 wz
2786c     49 35 02 A6 |  if_e	mov	result1, local04
27870     24 00 90 AD |  if_e	jmp	#LR__1689
27874     3E 76 26 F4 | 	bith	arg02, #62
27878     0F 76 62 FD | 	qexp	arg02
2787c     49 75 02 F6 | 	mov	arg01, local04
27880     18 76 62 FD | 	getqx	arg02
27884     01 76 06 F1 | 	add	arg02, #1
27888     01 76 46 F0 | 	shr	arg02, #1
2788c     00 80 1F FF 
27890     00 76 06 F1 | 	add	arg02, ##1056964608
27894     08 F8 BF FD | 	call	#__system___float_mul
27898                 | LR__1689
27898     A8 F0 03 F6 | 	mov	ptra, fp
2789c     B3 00 A0 FD | 	call	#popregs_
278a0                 | __system____builtin_exp2f_ret
278a0     2D 00 64 FD | 	ret
278a4                 | 
278a4                 | __system____builtin_log2f
278a4     05 4C 05 F6 | 	mov	COUNT_, #5
278a8     A9 00 A0 FD | 	call	#pushregs_
278ac     3A 8D 02 F6 | 	mov	local01, arg01
278b0     3A 8F 0A F6 | 	mov	local02, arg01 wz
278b4     00 00 40 5F 
278b8     00 8E 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
278bc     00 C0 3F AF 
278c0     00 34 06 A6 |  if_e	mov	result1, ##2139095040
278c4     1F 34 E6 A4 |  if_e	bitnot	result1, #31
278c8     04 01 90 AD |  if_e	jmp	#LR__1694
278cc     00 8E 56 F2 | 	cmps	local02, #0 wc
278d0     00 E0 3F CF 
278d4     00 34 06 C6 |  if_b	mov	result1, ##2143289344
278d8     F4 00 90 CD |  if_b	jmp	#LR__1694
278dc     46 75 02 F6 | 	mov	arg01, local01
278e0     00 90 20 FF 
278e4     00 76 06 F6 | 	mov	arg02, ##1092616192
278e8     01 78 06 F6 | 	mov	arg03, #1
278ec     08 FC BF FD | 	call	#__system___float_cmp
278f0     00 34 0E F2 | 	cmp	result1, #0 wz
278f4     4D 2A 20 AF 
278f8     78 34 06 A6 |  if_e	mov	result1, ##1079286392
278fc     D0 00 90 AD |  if_e	jmp	#LR__1694
27900     46 75 02 F6 | 	mov	arg01, local01
27904     FC 16 20 FF 
27908     54 76 06 F6 | 	mov	arg02, ##1076754516
2790c     01 78 06 F6 | 	mov	arg03, #1
27910     E4 FB BF FD | 	call	#__system___float_cmp
27914     00 34 0E F2 | 	cmp	result1, #0 wz
27918     55 DC 1F AF 
2791c     3B 34 06 A6 |  if_e	mov	result1, ##1069066811
27920     AC 00 90 AD |  if_e	jmp	#LR__1694
27924     47 91 02 F6 | 	mov	local03, local02
27928     17 90 46 F0 | 	shr	local03, #23
2792c     48 91 E2 F8 | 	getbyte	local03, local03, #0
27930     17 8F 06 F4 | 	bitl	local02, #279
27934     47 93 02 F6 | 	mov	local04, local02
27938     FF 90 0E F2 | 	cmp	local03, #255 wz
2793c     1C 00 90 5D |  if_ne	jmp	#LR__1690
27940     00 92 0E F2 | 	cmp	local04, #0 wz
27944     00 C0 3F 5F 
27948     00 94 06 56 |  if_ne	mov	local05, ##2139095040
2794c     00 E0 3F AF 
27950     00 94 06 A6 |  if_e	mov	local05, ##2143289344
27954     4A 35 02 F6 | 	mov	result1, local05
27958     74 00 90 FD | 	jmp	#LR__1694
2795c                 | LR__1690
2795c     00 90 0E F2 | 	cmp	local03, #0 wz
27960     17 92 26 54 |  if_ne	bith	local04, #23
27964     7F 90 86 51 |  if_ne	sub	local03, #127
27968     30 00 90 5D |  if_ne	jmp	#LR__1693
2796c     00 92 0E F2 | 	cmp	local04, #0 wz
27970     00 C0 3F AF 
27974     00 34 06 A6 |  if_e	mov	result1, ##2139095040
27978     1F 34 E6 A4 |  if_e	bitnot	result1, #31
2797c     50 00 90 AD |  if_e	jmp	#LR__1694
27980     7E 90 66 F6 | 	neg	local03, #126
27984     88 86 9D FE | 	loc	pa,	#(@LR__1692-@LR__1691)
27988     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2798c                 | LR__1691
2798c     17 92 2E F4 | 	testbn	local04, #23 wz
27990     01 92 66 A0 |  if_e	shl	local04, #1
27994     01 90 06 A1 |  if_e	add	local03, #1
27998     F0 FF 9F AD |  if_e	jmp	#LR__1691
2799c                 | LR__1692
2799c                 | LR__1693
2799c     0E 92 62 FD | 	qlog	local04
279a0     01 90 86 F1 | 	sub	local03, #1
279a4     48 75 02 F6 | 	mov	arg01, local03
279a8     18 94 62 FD | 	getqx	local05
279ac     9B 94 06 F4 | 	bitl	local05, #155
279b0     08 94 06 F1 | 	add	local05, #8
279b4     04 94 46 F0 | 	shr	local05, #4
279b8     00 C0 1F FF 
279bc     00 94 06 F1 | 	add	local05, ##1065353216
279c0     A8 F3 BF FD | 	call	#__system___float_fromint
279c4     1A 77 02 F6 | 	mov	arg02, result1
279c8     4A 75 02 F6 | 	mov	arg01, local05
279cc     CC F3 BF FD | 	call	#__system___float_add
279d0                 | LR__1694
279d0     A8 F0 03 F6 | 	mov	ptra, fp
279d4     B3 00 A0 FD | 	call	#popregs_
279d8                 | __system____builtin_log2f_ret
279d8     2D 00 64 FD | 	ret
279dc                 | 
279dc                 | __system____builtin_powf
279dc     03 4C 05 F6 | 	mov	COUNT_, #3
279e0     A9 00 A0 FD | 	call	#pushregs_
279e4     3A 8D 02 F6 | 	mov	local01, arg01
279e8     3B 8F 02 F6 | 	mov	local02, arg02
279ec     47 75 02 F6 | 	mov	arg01, local02
279f0     00 76 06 F6 | 	mov	arg02, #0
279f4     98 FB BF FD | 	call	#__system___float_tointeger
279f8     1A 91 02 F6 | 	mov	local03, result1
279fc     48 75 02 F6 | 	mov	arg01, local03
27a00     68 F3 BF FD | 	call	#__system___float_fromint
27a04     1A 75 02 F6 | 	mov	arg01, result1
27a08     47 77 02 F6 | 	mov	arg02, local02
27a0c     01 78 06 F6 | 	mov	arg03, #1
27a10     E4 FA BF FD | 	call	#__system___float_cmp
27a14     00 34 0E F2 | 	cmp	result1, #0 wz
27a18     18 00 90 5D |  if_ne	jmp	#LR__1695
27a1c     00 C0 1F FF 
27a20     00 74 06 F6 | 	mov	arg01, ##1065353216
27a24     46 77 02 F6 | 	mov	arg02, local01
27a28     48 79 02 F6 | 	mov	arg03, local03
27a2c     A0 00 B0 FD | 	call	#__system___float_pow_n
27a30     58 00 90 FD | 	jmp	#LR__1696
27a34                 | LR__1695
27a34     46 75 02 F6 | 	mov	arg01, local01
27a38     00 76 06 F6 | 	mov	arg02, #0
27a3c     01 78 06 F6 | 	mov	arg03, #1
27a40     B4 FA BF FD | 	call	#__system___float_cmp
27a44     00 34 56 F2 | 	cmps	result1, #0 wc
27a48     00 E0 3F CF 
27a4c     00 34 06 C6 |  if_b	mov	result1, ##2143289344
27a50     38 00 90 CD |  if_b	jmp	#LR__1696
27a54     46 75 02 F6 | 	mov	arg01, local01
27a58     00 76 06 F6 | 	mov	arg02, #0
27a5c     01 78 06 F6 | 	mov	arg03, #1
27a60     94 FA BF FD | 	call	#__system___float_cmp
27a64     00 34 0E F2 | 	cmp	result1, #0 wz
27a68     00 34 06 A6 |  if_e	mov	result1, #0
27a6c     1C 00 90 AD |  if_e	jmp	#LR__1696
27a70     46 75 02 F6 | 	mov	arg01, local01
27a74     2C FE BF FD | 	call	#__system____builtin_log2f
27a78     1A 75 02 F6 | 	mov	arg01, result1
27a7c     47 77 02 F6 | 	mov	arg02, local02
27a80     1C F6 BF FD | 	call	#__system___float_mul
27a84     1A 75 02 F6 | 	mov	arg01, result1
27a88     0C FD BF FD | 	call	#__system____builtin_exp2f
27a8c                 | LR__1696
27a8c     A8 F0 03 F6 | 	mov	ptra, fp
27a90     B3 00 A0 FD | 	call	#popregs_
27a94                 | __system____builtin_powf_ret
27a94     2D 00 64 FD | 	ret
27a98                 | 
27a98                 | __system____builtin_logbase
27a98     02 4C 05 F6 | 	mov	COUNT_, #2
27a9c     A9 00 A0 FD | 	call	#pushregs_
27aa0     3A 8D 02 F6 | 	mov	local01, arg01
27aa4     3B 75 02 F6 | 	mov	arg01, arg02
27aa8     F8 FD BF FD | 	call	#__system____builtin_log2f
27aac     1A 8F 02 F6 | 	mov	local02, result1
27ab0     46 75 02 F6 | 	mov	arg01, local01
27ab4     EC FD BF FD | 	call	#__system____builtin_log2f
27ab8     1A 77 02 F6 | 	mov	arg02, result1
27abc     47 75 02 F6 | 	mov	arg01, local02
27ac0     FC F7 BF FD | 	call	#__system___float_div
27ac4     A8 F0 03 F6 | 	mov	ptra, fp
27ac8     B3 00 A0 FD | 	call	#popregs_
27acc                 | __system____builtin_logbase_ret
27acc     2D 00 64 FD | 	ret
27ad0                 | 
27ad0                 | __system___float_pow_n
27ad0     05 4C 05 F6 | 	mov	COUNT_, #5
27ad4     A9 00 A0 FD | 	call	#pushregs_
27ad8     3A 8D 02 F6 | 	mov	local01, arg01
27adc     3B 8F 02 F6 | 	mov	local02, arg02
27ae0     3C 91 02 F6 | 	mov	local03, arg03
27ae4     00 90 56 F2 | 	cmps	local03, #0 wc
27ae8     18 00 90 3D |  if_ae	jmp	#LR__1697
27aec     01 92 06 F6 | 	mov	local04, #1
27af0     48 91 62 F6 | 	neg	local03, local03
27af4     00 90 56 F2 | 	cmps	local03, #0 wc
27af8     00 34 06 C6 |  if_b	mov	result1, #0
27afc     94 00 90 CD |  if_b	jmp	#LR__1705
27b00     04 00 90 FD | 	jmp	#LR__1698
27b04                 | LR__1697
27b04     00 92 06 F6 | 	mov	local04, #0
27b08                 | LR__1698
27b08     00 C0 1F FF 
27b0c     00 94 06 F6 | 	mov	local05, ##1065353216
27b10                 | LR__1699
27b10     01 90 56 F2 | 	cmps	local03, #1 wc
27b14     30 00 90 CD |  if_b	jmp	#LR__1701
27b18     01 90 CE F7 | 	test	local03, #1 wz
27b1c     10 00 90 AD |  if_e	jmp	#LR__1700
27b20     4A 75 02 F6 | 	mov	arg01, local05
27b24     47 77 02 F6 | 	mov	arg02, local02
27b28     74 F5 BF FD | 	call	#__system___float_mul
27b2c     1A 95 02 F6 | 	mov	local05, result1
27b30                 | LR__1700
27b30     01 90 C6 F0 | 	sar	local03, #1
27b34     47 75 02 F6 | 	mov	arg01, local02
27b38     47 77 02 F6 | 	mov	arg02, local02
27b3c     60 F5 BF FD | 	call	#__system___float_mul
27b40     1A 8F 02 F6 | 	mov	local02, result1
27b44     C8 FF 9F FD | 	jmp	#LR__1699
27b48                 | LR__1701
27b48     00 92 0E F2 | 	cmp	local04, #0 wz
27b4c     14 00 90 AD |  if_e	jmp	#LR__1702
27b50     46 75 02 F6 | 	mov	arg01, local01
27b54     4A 77 02 F6 | 	mov	arg02, local05
27b58     64 F7 BF FD | 	call	#__system___float_div
27b5c     1A 95 02 F6 | 	mov	local05, result1
27b60     2C 00 90 FD | 	jmp	#LR__1704
27b64                 | LR__1702
27b64     46 75 02 F6 | 	mov	arg01, local01
27b68     00 C0 1F FF 
27b6c     00 76 06 F6 | 	mov	arg02, ##1065353216
27b70     01 78 06 F6 | 	mov	arg03, #1
27b74     80 F9 BF FD | 	call	#__system___float_cmp
27b78     00 34 0E F2 | 	cmp	result1, #0 wz
27b7c     10 00 90 AD |  if_e	jmp	#LR__1703
27b80     46 75 02 F6 | 	mov	arg01, local01
27b84     4A 77 02 F6 | 	mov	arg02, local05
27b88     14 F5 BF FD | 	call	#__system___float_mul
27b8c     1A 95 02 F6 | 	mov	local05, result1
27b90                 | LR__1703
27b90                 | LR__1704
27b90     4A 35 02 F6 | 	mov	result1, local05
27b94                 | LR__1705
27b94     A8 F0 03 F6 | 	mov	ptra, fp
27b98     B3 00 A0 FD | 	call	#popregs_
27b9c                 | __system___float_pow_n_ret
27b9c     2D 00 64 FD | 	ret
27ba0                 | 
27ba0                 | __system___gc_ptrs
27ba0     02 4C 05 F6 | 	mov	COUNT_, #2
27ba4     A9 00 A0 FD | 	call	#pushregs_
27ba8     C5 8C 02 F6 | 	mov	local01, __heap_ptr
27bac     46 8F 02 F6 | 	mov	local02, local01
27bb0     3F 00 00 FF 
27bb4     F8 8F 06 F1 | 	add	local02, ##32760
27bb8     46 37 0A FB | 	rdlong	result2, local01 wz
27bbc     74 00 90 5D |  if_ne	jmp	#LR__1706
27bc0     47 37 02 F6 | 	mov	result2, local02
27bc4     46 37 82 F1 | 	sub	result2, local01
27bc8     46 03 58 FC | 	wrword	#1, local01
27bcc     46 35 02 F6 | 	mov	result1, local01
27bd0     02 34 06 F1 | 	add	result1, #2
27bd4     36 00 80 FF 
27bd8     1A 21 59 FC | 	wrword	##27792, result1
27bdc     46 35 02 F6 | 	mov	result1, local01
27be0     04 34 06 F1 | 	add	result1, #4
27be4     1A 01 58 FC | 	wrword	#0, result1
27be8     46 35 02 F6 | 	mov	result1, local01
27bec     06 34 06 F1 | 	add	result1, #6
27bf0     1A 03 58 FC | 	wrword	#1, result1
27bf4     10 8C 06 F1 | 	add	local01, #16
27bf8     1B 37 52 F6 | 	abs	result2, result2 wc
27bfc     04 36 46 F0 | 	shr	result2, #4
27c00     1B 37 82 F6 | 	negc	result2, result2
27c04     46 37 52 FC | 	wrword	result2, local01
27c08     46 37 02 F6 | 	mov	result2, local01
27c0c     02 36 06 F1 | 	add	result2, #2
27c10     36 00 80 FF 
27c14     1B 1F 59 FC | 	wrword	##27791, result2
27c18     46 37 02 F6 | 	mov	result2, local01
27c1c     04 36 06 F1 | 	add	result2, #4
27c20     1B 01 58 FC | 	wrword	#0, result2
27c24     46 37 02 F6 | 	mov	result2, local01
27c28     06 36 06 F1 | 	add	result2, #6
27c2c     1B 01 58 FC | 	wrword	#0, result2
27c30     10 8C 86 F1 | 	sub	local01, #16
27c34                 | LR__1706
27c34     47 37 02 F6 | 	mov	result2, local02
27c38     46 35 02 F6 | 	mov	result1, local01
27c3c     A8 F0 03 F6 | 	mov	ptra, fp
27c40     B3 00 A0 FD | 	call	#popregs_
27c44                 | __system___gc_ptrs_ret
27c44     2D 00 64 FD | 	ret
27c48                 | 
27c48                 | __system___gc_nextBlockPtr
27c48     02 4C 05 F6 | 	mov	COUNT_, #2
27c4c     A9 00 A0 FD | 	call	#pushregs_
27c50     3A 8D 02 F6 | 	mov	local01, arg01
27c54     46 8F EA FA | 	rdword	local02, local01 wz
27c58     10 00 90 5D |  if_ne	jmp	#LR__1707
27c5c     47 01 00 FF 
27c60     6C 74 06 F6 | 	mov	arg01, ##@LR__1808
27c64     E8 01 B0 FD | 	call	#__system___gc_errmsg
27c68     0C 00 90 FD | 	jmp	#LR__1708
27c6c                 | LR__1707
27c6c     46 35 02 F6 | 	mov	result1, local01
27c70     04 8E 66 F0 | 	shl	local02, #4
27c74     47 35 02 F1 | 	add	result1, local02
27c78                 | LR__1708
27c78     A8 F0 03 F6 | 	mov	ptra, fp
27c7c     B3 00 A0 FD | 	call	#popregs_
27c80                 | __system___gc_nextBlockPtr_ret
27c80     2D 00 64 FD | 	ret
27c84                 | 
27c84                 | __system___gc_tryalloc
27c84     0D 4C 05 F6 | 	mov	COUNT_, #13
27c88     A9 00 A0 FD | 	call	#pushregs_
27c8c     3A 8D 02 F6 | 	mov	local01, arg01
27c90     3B 8F 02 F6 | 	mov	local02, arg02
27c94     08 FF BF FD | 	call	#__system___gc_ptrs
27c98     1A 91 02 F6 | 	mov	local03, result1
27c9c     1B 93 02 F6 | 	mov	local04, result2
27ca0     48 95 02 F6 | 	mov	local05, local03
27ca4     00 96 06 F6 | 	mov	local06, #0
27ca8     98 83 9D FE | 	loc	pa,	#(@LR__1710-@LR__1709)
27cac     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27cb0                 | LR__1709
27cb0     4A 99 02 F6 | 	mov	local07, local05
27cb4     06 94 06 F1 | 	add	local05, #6
27cb8     4A 77 EA FA | 	rdword	arg02, local05 wz
27cbc     48 75 02 F6 | 	mov	arg01, local03
27cc0     00 34 06 A6 |  if_e	mov	result1, #0
27cc4     04 76 66 50 |  if_ne	shl	arg02, #4
27cc8     3B 75 02 51 |  if_ne	add	arg01, arg02
27ccc     3A 35 02 56 |  if_ne	mov	result1, arg01
27cd0     1A 9B 02 F6 | 	mov	local08, result1
27cd4     4D 95 0A F6 | 	mov	local05, local08 wz
27cd8     4A 9B 02 56 |  if_ne	mov	local08, local05
27cdc     4D 97 E2 5A |  if_ne	rdword	local06, local08
27ce0     00 94 0E F2 | 	cmp	local05, #0 wz
27ce4     49 95 52 52 |  if_ne	cmps	local05, local04 wc
27ce8     08 00 90 1D |  if_a	jmp	#LR__1711
27cec     4B 8D 5A 52 |  if_ne	cmps	local01, local06 wcz
27cf0     BC FF 9F 1D |  if_a	jmp	#LR__1709
27cf4                 | LR__1710
27cf4                 | LR__1711
27cf4     00 94 0E F2 | 	cmp	local05, #0 wz
27cf8     4A 35 02 A6 |  if_e	mov	result1, local05
27cfc     44 01 90 AD |  if_e	jmp	#LR__1714
27d00     4A 9B 02 F6 | 	mov	local08, local05
27d04     06 9A 06 F1 | 	add	local08, #6
27d08     4D 9D E2 FA | 	rdword	local09, local08
27d0c     4B 8D 52 F2 | 	cmps	local01, local06 wc
27d10     C0 00 90 3D |  if_ae	jmp	#LR__1713
27d14     4A 8D 52 FC | 	wrword	local01, local05
27d18     4A 75 02 F6 | 	mov	arg01, local05
27d1c     46 9D 02 F6 | 	mov	local09, local01
27d20     04 9C 66 F0 | 	shl	local09, #4
27d24     4E 75 02 F1 | 	add	arg01, local09
27d28     4B 9B 02 F6 | 	mov	local08, local06
27d2c     46 9B 82 F1 | 	sub	local08, local01
27d30     3A 9B 52 FC | 	wrword	local08, arg01
27d34     3A 9B 02 F6 | 	mov	local08, arg01
27d38     02 9A 06 F1 | 	add	local08, #2
27d3c     36 00 80 FF 
27d40     4D 1F 59 FC | 	wrword	##27791, local08
27d44     4A 77 0A F6 | 	mov	arg02, local05 wz
27d48     00 34 06 A6 |  if_e	mov	result1, #0
27d4c     48 77 82 51 |  if_ne	sub	arg02, local03
27d50     04 76 46 50 |  if_ne	shr	arg02, #4
27d54     3B 35 02 56 |  if_ne	mov	result1, arg02
27d58     3A 9D 02 F6 | 	mov	local09, arg01
27d5c     04 9C 06 F1 | 	add	local09, #4
27d60     4E 35 52 FC | 	wrword	result1, local09
27d64     4A 9B 02 F6 | 	mov	local08, local05
27d68     06 9A 06 F1 | 	add	local08, #6
27d6c     3A 9D 02 F6 | 	mov	local09, arg01
27d70     4D 9F E2 FA | 	rdword	local10, local08
27d74     06 9C 06 F1 | 	add	local09, #6
27d78     4E 9F 52 FC | 	wrword	local10, local09
27d7c     3A A1 02 F6 | 	mov	local11, arg01
27d80     50 77 0A F6 | 	mov	arg02, local11 wz
27d84     00 34 06 A6 |  if_e	mov	result1, #0
27d88     48 77 82 51 |  if_ne	sub	arg02, local03
27d8c     04 76 46 50 |  if_ne	shr	arg02, #4
27d90     3B 35 02 56 |  if_ne	mov	result1, arg02
27d94     1A 9D 02 F6 | 	mov	local09, result1
27d98     AC FE BF FD | 	call	#__system___gc_nextBlockPtr
27d9c     1A A3 0A F6 | 	mov	local12, result1 wz
27da0     30 00 90 AD |  if_e	jmp	#LR__1712
27da4     49 A3 52 F2 | 	cmps	local12, local04 wc
27da8     28 00 90 3D |  if_ae	jmp	#LR__1712
27dac     48 75 02 F6 | 	mov	arg01, local03
27db0     50 77 0A F6 | 	mov	arg02, local11 wz
27db4     00 34 06 A6 |  if_e	mov	result1, #0
27db8     3A 77 82 51 |  if_ne	sub	arg02, arg01
27dbc     04 76 46 50 |  if_ne	shr	arg02, #4
27dc0     3B 35 02 56 |  if_ne	mov	result1, arg02
27dc4     1A 9B 02 F6 | 	mov	local08, result1
27dc8     51 A5 02 F6 | 	mov	local13, local12
27dcc     04 A4 06 F1 | 	add	local13, #4
27dd0     52 9B 52 FC | 	wrword	local08, local13
27dd4                 | LR__1712
27dd4                 | LR__1713
27dd4     06 98 06 F1 | 	add	local07, #6
27dd8     4C 9D 52 FC | 	wrword	local09, local07
27ddc     36 00 00 FF 
27de0     80 9A 06 F6 | 	mov	local08, ##27776
27de4     47 9B 42 F5 | 	or	local08, local02
27de8     00 34 06 F6 | 	mov	result1, #0
27dec     01 34 62 FD | 	cogid	result1
27df0     1A 9B 42 F5 | 	or	local08, result1
27df4     4A 9F 02 F6 | 	mov	local10, local05
27df8     02 9E 06 F1 | 	add	local10, #2
27dfc     4F 9B 52 FC | 	wrword	local08, local10
27e00     48 9B 02 F6 | 	mov	local08, local03
27e04     08 9A 06 F1 | 	add	local08, #8
27e08     4A A5 02 F6 | 	mov	local13, local05
27e0c     4D 9F E2 FA | 	rdword	local10, local08
27e10     06 A4 06 F1 | 	add	local13, #6
27e14     52 9F 52 FC | 	wrword	local10, local13
27e18     4A 77 0A F6 | 	mov	arg02, local05 wz
27e1c     00 34 06 A6 |  if_e	mov	result1, #0
27e20     48 77 82 51 |  if_ne	sub	arg02, local03
27e24     04 76 46 50 |  if_ne	shr	arg02, #4
27e28     3B 35 02 56 |  if_ne	mov	result1, arg02
27e2c     08 90 06 F1 | 	add	local03, #8
27e30     48 35 52 FC | 	wrword	result1, local03
27e34     4A 35 02 F6 | 	mov	result1, local05
27e38     08 34 06 F1 | 	add	result1, #8
27e3c     00 C0 31 FF 
27e40     00 34 46 F5 | 	or	result1, ##1669332992
27e44                 | LR__1714
27e44     A8 F0 03 F6 | 	mov	ptra, fp
27e48     B3 00 A0 FD | 	call	#popregs_
27e4c                 | __system___gc_tryalloc_ret
27e4c     2D 00 64 FD | 	ret
27e50                 | 
27e50                 | __system___gc_errmsg
27e50     01 4C 05 F6 | 	mov	COUNT_, #1
27e54     A9 00 A0 FD | 	call	#pushregs_
27e58     3A 8D 02 F6 | 	mov	local01, arg01
27e5c                 | LR__1715
27e5c     46 75 CA FA | 	rdbyte	arg01, local01 wz
27e60     01 8C 06 F1 | 	add	local01, #1
27e64     08 00 90 AD |  if_e	jmp	#LR__1716
27e68     10 D5 BF FD | 	call	#__system___tx
27e6c     EC FF 9F FD | 	jmp	#LR__1715
27e70                 | LR__1716
27e70     00 34 06 F6 | 	mov	result1, #0
27e74     A8 F0 03 F6 | 	mov	ptra, fp
27e78     B3 00 A0 FD | 	call	#popregs_
27e7c                 | __system___gc_errmsg_ret
27e7c     2D 00 64 FD | 	ret
27e80                 | 
27e80                 | __system___gc_alloc_managed
27e80     02 4C 05 F6 | 	mov	COUNT_, #2
27e84     A9 00 A0 FD | 	call	#pushregs_
27e88     3A 8D 02 F6 | 	mov	local01, arg01
27e8c     00 76 06 F6 | 	mov	arg02, #0
27e90     30 00 B0 FD | 	call	#__system___gc_doalloc
27e94     1A 8F 0A F6 | 	mov	local02, result1 wz
27e98     18 00 90 5D |  if_ne	jmp	#LR__1717
27e9c     01 8C 56 F2 | 	cmps	local01, #1 wc
27ea0     10 00 90 CD |  if_b	jmp	#LR__1717
27ea4     47 01 00 FF 
27ea8     88 74 06 F6 | 	mov	arg01, ##@LR__1809
27eac     A0 FF BF FD | 	call	#__system___gc_errmsg
27eb0     04 00 90 FD | 	jmp	#LR__1718
27eb4                 | LR__1717
27eb4     47 35 02 F6 | 	mov	result1, local02
27eb8                 | LR__1718
27eb8     A8 F0 03 F6 | 	mov	ptra, fp
27ebc     B3 00 A0 FD | 	call	#popregs_
27ec0                 | __system___gc_alloc_managed_ret
27ec0     2D 00 64 FD | 	ret
27ec4                 | 
27ec4                 | __system___gc_doalloc
27ec4     06 4C 05 F6 | 	mov	COUNT_, #6
27ec8     A9 00 A0 FD | 	call	#pushregs_
27ecc     3A 8D 0A F6 | 	mov	local01, arg01 wz
27ed0     3B 8F 02 F6 | 	mov	local02, arg02
27ed4     00 34 06 A6 |  if_e	mov	result1, #0
27ed8     90 00 90 AD |  if_e	jmp	#LR__1726
27edc     17 8C 06 F1 | 	add	local01, #23
27ee0     0F 8C 26 F5 | 	andn	local01, #15
27ee4     04 8C 46 F0 | 	shr	local01, #4
27ee8     14 A2 05 F1 | 	add	ptr___system__dat__, #20
27eec     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
27ef0     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
27ef4     28 D4 BF FD | 	call	#__system___lockmem
27ef8     46 75 02 F6 | 	mov	arg01, local01
27efc     47 77 02 F6 | 	mov	arg02, local02
27f00     80 FD BF FD | 	call	#__system___gc_tryalloc
27f04     1A 91 0A F6 | 	mov	local03, result1 wz
27f08     14 00 90 5D |  if_ne	jmp	#LR__1719
27f0c     74 03 B0 FD | 	call	#__system___gc_docollect
27f10     46 75 02 F6 | 	mov	arg01, local01
27f14     47 77 02 F6 | 	mov	arg02, local02
27f18     68 FD BF FD | 	call	#__system___gc_tryalloc
27f1c     1A 91 02 F6 | 	mov	local03, result1
27f20                 | LR__1719
27f20     14 A2 05 F1 | 	add	ptr___system__dat__, #20
27f24     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
27f28     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
27f2c     3A 01 68 FC | 	wrlong	#0, arg01
27f30     00 90 0E F2 | 	cmp	local03, #0 wz
27f34     30 00 90 AD |  if_e	jmp	#LR__1725
27f38     04 8C 66 F0 | 	shl	local01, #4
27f3c     08 8C 86 F1 | 	sub	local01, #8
27f40     46 93 52 F6 | 	abs	local04, local01 wc
27f44     02 92 46 F0 | 	shr	local04, #2
27f48     49 95 8A F6 | 	negc	local05, local04 wz
27f4c     48 97 02 F6 | 	mov	local06, local03
27f50     14 00 90 AD |  if_e	jmp	#LR__1724
27f54     B4 80 9D FE | 	loc	pa,	#(@LR__1722-@LR__1720)
27f58     8C 00 A0 FD | 	call	#FCACHE_LOAD_
27f5c                 | LR__1720
27f5c     4A 05 D8 FC | 	rep	@LR__1723, local05
27f60                 | LR__1721
27f60     4B 01 68 FC | 	wrlong	#0, local06
27f64     04 96 06 F1 | 	add	local06, #4
27f68                 | LR__1722
27f68                 | LR__1723
27f68                 | LR__1724
27f68                 | LR__1725
27f68     48 35 02 F6 | 	mov	result1, local03
27f6c                 | LR__1726
27f6c     A8 F0 03 F6 | 	mov	ptra, fp
27f70     B3 00 A0 FD | 	call	#popregs_
27f74                 | __system___gc_doalloc_ret
27f74     2D 00 64 FD | 	ret
27f78                 | 
27f78                 | __system___gc_isvalidptr
27f78     3C 3B 02 F6 | 	mov	_var01, arg03
27f7c     1D 3D 02 F6 | 	mov	_var02, _var01
27f80     00 F8 7F FF 
27f84     00 3C 06 F5 | 	and	_var02, ##-1048576
27f88     00 C0 31 FF 
27f8c     00 3C 0E F2 | 	cmp	_var02, ##1669332992 wz
27f90     00 34 06 56 |  if_ne	mov	result1, #0
27f94     58 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
27f98     08 3A 86 F1 | 	sub	_var01, #8
27f9c     74 3B 06 F4 | 	bitl	_var01, #372
27fa0     3A 3B 52 F2 | 	cmps	_var01, arg01 wc
27fa4     08 00 90 CD |  if_b	jmp	#LR__1727
27fa8     3B 3B 52 F2 | 	cmps	_var01, arg02 wc
27fac     08 00 90 CD |  if_b	jmp	#LR__1728
27fb0                 | LR__1727
27fb0     00 34 06 F6 | 	mov	result1, #0
27fb4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
27fb8                 | LR__1728
27fb8     1D 3D 02 F6 | 	mov	_var02, _var01
27fbc     3A 3D 62 F5 | 	xor	_var02, arg01
27fc0     0F 3C 0E F5 | 	and	_var02, #15 wz
27fc4     00 34 06 56 |  if_ne	mov	result1, #0
27fc8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
27fcc     1D 3D 02 F6 | 	mov	_var02, _var01
27fd0     02 3C 06 F1 | 	add	_var02, #2
27fd4     1E 3D E2 FA | 	rdword	_var02, _var02
27fd8     7F 00 00 FF 
27fdc     C0 3D 06 F5 | 	and	_var02, ##65472
27fe0     36 00 00 FF 
27fe4     80 3C 0E F2 | 	cmp	_var02, ##27776 wz
27fe8     00 34 06 56 |  if_ne	mov	result1, #0
27fec     1D 35 02 A6 |  if_e	mov	result1, _var01
27ff0                 | __system___gc_isvalidptr_ret
27ff0     2D 00 64 FD | 	ret
27ff4                 | 
27ff4                 | __system___gc_free
27ff4     01 4C 05 F6 | 	mov	COUNT_, #1
27ff8     A9 00 A0 FD | 	call	#pushregs_
27ffc     3A 8D 02 F6 | 	mov	local01, arg01
28000     9C FB BF FD | 	call	#__system___gc_ptrs
28004     1A 75 02 F6 | 	mov	arg01, result1
28008     1B 77 02 F6 | 	mov	arg02, result2
2800c     46 79 02 F6 | 	mov	arg03, local01
28010     64 FF BF FD | 	call	#__system___gc_isvalidptr
28014     1A 8D 0A F6 | 	mov	local01, result1 wz
28018     28 00 90 AD |  if_e	jmp	#LR__1729
2801c     14 A2 05 F1 | 	add	ptr___system__dat__, #20
28020     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
28024     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
28028     F4 D2 BF FD | 	call	#__system___lockmem
2802c     46 75 02 F6 | 	mov	arg01, local01
28030     1C 00 B0 FD | 	call	#__system___gc_dofree
28034     14 A2 05 F1 | 	add	ptr___system__dat__, #20
28038     D1 74 02 F6 | 	mov	arg01, ptr___system__dat__
2803c     14 A2 85 F1 | 	sub	ptr___system__dat__, #20
28040     3A 01 68 FC | 	wrlong	#0, arg01
28044                 | LR__1729
28044     A8 F0 03 F6 | 	mov	ptra, fp
28048     B3 00 A0 FD | 	call	#popregs_
2804c                 | __system___gc_free_ret
2804c     2D 00 64 FD | 	ret
28050                 | 
28050                 | __system___gc_dofree
28050     0B 4C 05 F6 | 	mov	COUNT_, #11
28054     A9 00 A0 FD | 	call	#pushregs_
28058     3A 8D 02 F6 | 	mov	local01, arg01
2805c     40 FB BF FD | 	call	#__system___gc_ptrs
28060     1A 8F 02 F6 | 	mov	local02, result1
28064     1B 91 02 F6 | 	mov	local03, result2
28068     46 75 02 F6 | 	mov	arg01, local01
2806c     02 74 06 F1 | 	add	arg01, #2
28070     36 00 80 FF 
28074     3A 1F 59 FC | 	wrword	##27791, arg01
28078     46 93 02 F6 | 	mov	local04, local01
2807c     46 75 02 F6 | 	mov	arg01, local01
28080     C4 FB BF FD | 	call	#__system___gc_nextBlockPtr
28084     1A 95 02 F6 | 	mov	local05, result1
28088     BC 7F 9D FE | 	loc	pa,	#(@LR__1731-@LR__1730)
2808c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28090                 | LR__1730
28090     04 92 06 F1 | 	add	local04, #4
28094     49 77 EA FA | 	rdword	arg02, local04 wz
28098     47 75 02 F6 | 	mov	arg01, local02
2809c     00 34 06 A6 |  if_e	mov	result1, #0
280a0     04 76 66 50 |  if_ne	shl	arg02, #4
280a4     3B 75 02 51 |  if_ne	add	arg01, arg02
280a8     3A 35 02 56 |  if_ne	mov	result1, arg01
280ac     1A 93 0A F6 | 	mov	local04, result1 wz
280b0     24 00 90 AD |  if_e	jmp	#LR__1732
280b4     49 75 02 F6 | 	mov	arg01, local04
280b8     00 34 06 F6 | 	mov	result1, #0
280bc     02 74 06 F1 | 	add	arg01, #2
280c0     3A 75 E2 FA | 	rdword	arg01, arg01
280c4     36 00 00 FF 
280c8     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
280cc     01 34 66 A6 |  if_e	neg	result1, #1
280d0     00 34 4E F2 | 	cmps	result1, #0 wz
280d4     B8 FF 9F AD |  if_e	jmp	#LR__1730
280d8                 | LR__1731
280d8                 | LR__1732
280d8     00 92 0E F2 | 	cmp	local04, #0 wz
280dc     47 93 02 A6 |  if_e	mov	local04, local02
280e0     49 77 02 F6 | 	mov	arg02, local04
280e4     06 76 06 F1 | 	add	arg02, #6
280e8     46 75 02 F6 | 	mov	arg01, local01
280ec     3B 77 E2 FA | 	rdword	arg02, arg02
280f0     06 74 06 F1 | 	add	arg01, #6
280f4     3A 77 52 FC | 	wrword	arg02, arg01
280f8     46 77 0A F6 | 	mov	arg02, local01 wz
280fc     00 34 06 A6 |  if_e	mov	result1, #0
28100     47 77 82 51 |  if_ne	sub	arg02, local02
28104     04 76 46 50 |  if_ne	shr	arg02, #4
28108     3B 35 02 56 |  if_ne	mov	result1, arg02
2810c     49 75 02 F6 | 	mov	arg01, local04
28110     06 74 06 F1 | 	add	arg01, #6
28114     3A 35 52 FC | 	wrword	result1, arg01
28118     47 93 0A F2 | 	cmp	local04, local02 wz
2811c     84 00 90 AD |  if_e	jmp	#LR__1735
28120     49 75 02 F6 | 	mov	arg01, local04
28124     20 FB BF FD | 	call	#__system___gc_nextBlockPtr
28128     46 35 0A F2 | 	cmp	result1, local01 wz
2812c     74 00 90 5D |  if_ne	jmp	#LR__1734
28130     49 95 E2 FA | 	rdword	local05, local04
28134     46 37 E2 FA | 	rdword	result2, local01
28138     1B 95 02 F1 | 	add	local05, result2
2813c     49 95 52 FC | 	wrword	local05, local04
28140     46 95 02 F6 | 	mov	local05, local01
28144     02 94 06 F1 | 	add	local05, #2
28148     4A 01 58 FC | 	wrword	#0, local05
2814c     46 75 02 F6 | 	mov	arg01, local01
28150     F4 FA BF FD | 	call	#__system___gc_nextBlockPtr
28154     1A 95 02 F6 | 	mov	local05, result1
28158     48 95 52 F2 | 	cmps	local05, local03 wc
2815c     20 00 90 3D |  if_ae	jmp	#LR__1733
28160     49 77 0A F6 | 	mov	arg02, local04 wz
28164     00 34 06 A6 |  if_e	mov	result1, #0
28168     47 77 82 51 |  if_ne	sub	arg02, local02
2816c     04 76 46 50 |  if_ne	shr	arg02, #4
28170     3B 35 02 56 |  if_ne	mov	result1, arg02
28174     4A 37 02 F6 | 	mov	result2, local05
28178     04 36 06 F1 | 	add	result2, #4
2817c     1B 35 52 FC | 	wrword	result1, result2
28180                 | LR__1733
28180     46 37 02 F6 | 	mov	result2, local01
28184     06 36 06 F1 | 	add	result2, #6
28188     49 35 02 F6 | 	mov	result1, local04
2818c     1B 37 E2 FA | 	rdword	result2, result2
28190     06 34 06 F1 | 	add	result1, #6
28194     1A 37 52 FC | 	wrword	result2, result1
28198     06 8C 06 F1 | 	add	local01, #6
2819c     46 01 58 FC | 	wrword	#0, local01
281a0     49 8D 02 F6 | 	mov	local01, local04
281a4                 | LR__1734
281a4                 | LR__1735
281a4     46 75 02 F6 | 	mov	arg01, local01
281a8     9C FA BF FD | 	call	#__system___gc_nextBlockPtr
281ac     1A 97 0A F6 | 	mov	local06, result1 wz
281b0     C0 00 90 AD |  if_e	jmp	#LR__1737
281b4     48 97 52 F2 | 	cmps	local06, local03 wc
281b8     B8 00 90 3D |  if_ae	jmp	#LR__1737
281bc     4B 75 02 F6 | 	mov	arg01, local06
281c0     00 34 06 F6 | 	mov	result1, #0
281c4     02 74 06 F1 | 	add	arg01, #2
281c8     3A 75 E2 FA | 	rdword	arg01, arg01
281cc     36 00 00 FF 
281d0     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
281d4     01 34 66 A6 |  if_e	neg	result1, #1
281d8     00 34 0E F2 | 	cmp	result1, #0 wz
281dc     94 00 90 AD |  if_e	jmp	#LR__1737
281e0     46 93 02 F6 | 	mov	local04, local01
281e4     49 95 E2 FA | 	rdword	local05, local04
281e8     4B 8D 02 F6 | 	mov	local01, local06
281ec     46 99 E2 FA | 	rdword	local07, local01
281f0     4C 95 02 F1 | 	add	local05, local07
281f4     49 9B 02 F6 | 	mov	local08, local04
281f8     4D 95 52 FC | 	wrword	local05, local08
281fc     46 95 02 F6 | 	mov	local05, local01
28200     06 94 06 F1 | 	add	local05, #6
28204     49 37 02 F6 | 	mov	result2, local04
28208     4A 9D E2 FA | 	rdword	local09, local05
2820c     06 36 06 F1 | 	add	result2, #6
28210     1B 9D 52 FC | 	wrword	local09, result2
28214     46 95 02 F6 | 	mov	local05, local01
28218     02 94 06 F1 | 	add	local05, #2
2821c     4A 55 59 FC | 	wrword	#170, local05
28220     46 95 02 F6 | 	mov	local05, local01
28224     06 94 06 F1 | 	add	local05, #6
28228     00 9E 06 F6 | 	mov	local10, #0
2822c     4A 01 58 FC | 	wrword	#0, local05
28230     46 75 02 F6 | 	mov	arg01, local01
28234     10 FA BF FD | 	call	#__system___gc_nextBlockPtr
28238     1A A1 02 F6 | 	mov	local11, result1
2823c     50 95 0A F6 | 	mov	local05, local11 wz
28240     30 00 90 AD |  if_e	jmp	#LR__1736
28244     48 95 52 F2 | 	cmps	local05, local03 wc
28248     28 00 90 3D |  if_ae	jmp	#LR__1736
2824c     47 75 02 F6 | 	mov	arg01, local02
28250     49 77 0A F6 | 	mov	arg02, local04 wz
28254     00 34 06 A6 |  if_e	mov	result1, #0
28258     3A 77 82 51 |  if_ne	sub	arg02, arg01
2825c     04 76 46 50 |  if_ne	shr	arg02, #4
28260     3B 35 02 56 |  if_ne	mov	result1, arg02
28264     1A A1 02 F6 | 	mov	local11, result1
28268     4A 9F 02 F6 | 	mov	local10, local05
2826c     04 9E 06 F1 | 	add	local10, #4
28270     4F A1 52 FC | 	wrword	local11, local10
28274                 | LR__1736
28274                 | LR__1737
28274     4A 35 02 F6 | 	mov	result1, local05
28278     A8 F0 03 F6 | 	mov	ptra, fp
2827c     B3 00 A0 FD | 	call	#popregs_
28280                 | __system___gc_dofree_ret
28280     2D 00 64 FD | 	ret
28284                 | 
28284                 | __system___gc_docollect
28284     09 4C 05 F6 | 	mov	COUNT_, #9
28288     A9 00 A0 FD | 	call	#pushregs_
2828c     10 F9 BF FD | 	call	#__system___gc_ptrs
28290     1B 8D 02 F6 | 	mov	local01, result2
28294     1A 8F 02 F6 | 	mov	local02, result1
28298     47 75 02 F6 | 	mov	arg01, local02
2829c     A8 F9 BF FD | 	call	#__system___gc_nextBlockPtr
282a0     1A 91 0A F6 | 	mov	local03, result1 wz
282a4     00 92 06 F6 | 	mov	local04, #0
282a8     01 92 62 FD | 	cogid	local04
282ac     34 00 90 AD |  if_e	jmp	#LR__1739
282b0                 | LR__1738
282b0     46 91 52 F2 | 	cmps	local03, local01 wc
282b4     2C 00 90 3D |  if_ae	jmp	#LR__1739
282b8     48 95 02 F6 | 	mov	local05, local03
282bc     02 94 06 F1 | 	add	local05, #2
282c0     4A 97 E2 FA | 	rdword	local06, local05
282c4     20 96 26 F5 | 	andn	local06, #32
282c8     48 99 02 F6 | 	mov	local07, local03
282cc     02 98 06 F1 | 	add	local07, #2
282d0     4C 97 52 FC | 	wrword	local06, local07
282d4     48 75 02 F6 | 	mov	arg01, local03
282d8     6C F9 BF FD | 	call	#__system___gc_nextBlockPtr
282dc     1A 91 0A F6 | 	mov	local03, result1 wz
282e0     CC FF 9F 5D |  if_ne	jmp	#LR__1738
282e4                 | LR__1739
282e4     00 96 06 F6 | 	mov	local06, #0
282e8     00 74 06 F6 | 	mov	arg01, #0
282ec     D0 CF BF FD | 	call	#__system____topofstack
282f0     1A 77 02 F6 | 	mov	arg02, result1
282f4     4B 75 02 F6 | 	mov	arg01, local06
282f8     90 00 B0 FD | 	call	#__system___gc_markhub
282fc     1C 01 B0 FD | 	call	#__system___gc_markcog
28300     47 75 02 F6 | 	mov	arg01, local02
28304     40 F9 BF FD | 	call	#__system___gc_nextBlockPtr
28308     1A 9B 0A F6 | 	mov	local08, result1 wz
2830c     10 00 90 5D |  if_ne	jmp	#LR__1740
28310     47 01 00 FF 
28314     A5 74 06 F6 | 	mov	arg01, ##@LR__1810
28318     34 FB BF FD | 	call	#__system___gc_errmsg
2831c     60 00 90 FD | 	jmp	#LR__1744
28320                 | LR__1740
28320                 | LR__1741
28320     4D 91 02 F6 | 	mov	local03, local08
28324     48 75 02 F6 | 	mov	arg01, local03
28328     1C F9 BF FD | 	call	#__system___gc_nextBlockPtr
2832c     1A 9B 02 F6 | 	mov	local08, result1
28330     48 97 02 F6 | 	mov	local06, local03
28334     02 96 06 F1 | 	add	local06, #2
28338     4B 97 E2 FA | 	rdword	local06, local06
2833c     20 96 CE F7 | 	test	local06, #32 wz
28340     30 00 90 5D |  if_ne	jmp	#LR__1743
28344     4B 95 02 F6 | 	mov	local05, local06
28348     10 94 0E F5 | 	and	local05, #16 wz
2834c     24 00 90 5D |  if_ne	jmp	#LR__1743
28350     4B 97 42 F8 | 	getnib	local06, local06, #0
28354     4B 9D 02 F6 | 	mov	local09, local06
28358     49 9D 0A F2 | 	cmp	local09, local04 wz
2835c     0E 9C 0E 52 |  if_ne	cmp	local09, #14 wz
28360     10 00 90 5D |  if_ne	jmp	#LR__1742
28364     48 75 02 F6 | 	mov	arg01, local03
28368     E4 FC BF FD | 	call	#__system___gc_dofree
2836c     1A 97 02 F6 | 	mov	local06, result1
28370     4B 9B 02 F6 | 	mov	local08, local06
28374                 | LR__1742
28374                 | LR__1743
28374     00 9A 0E F2 | 	cmp	local08, #0 wz
28378     46 9B 52 52 |  if_ne	cmps	local08, local01 wc
2837c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__1741
28380                 | LR__1744
28380     A8 F0 03 F6 | 	mov	ptra, fp
28384     B3 00 A0 FD | 	call	#popregs_
28388                 | __system___gc_docollect_ret
28388     2D 00 64 FD | 	ret
2838c                 | 
2838c                 | __system___gc_markhub
2838c     04 4C 05 F6 | 	mov	COUNT_, #4
28390     A9 00 A0 FD | 	call	#pushregs_
28394     3A 8D 02 F6 | 	mov	local01, arg01
28398     3B 8F 02 F6 | 	mov	local02, arg02
2839c     00 F8 BF FD | 	call	#__system___gc_ptrs
283a0     1A 91 02 F6 | 	mov	local03, result1
283a4     1B 93 02 F6 | 	mov	local04, result2
283a8                 | LR__1745
283a8     47 8D 52 F2 | 	cmps	local01, local02 wc
283ac     60 00 90 3D |  if_ae	jmp	#LR__1746
283b0     46 79 02 FB | 	rdlong	arg03, local01
283b4     04 8C 06 F1 | 	add	local01, #4
283b8     49 77 02 F6 | 	mov	arg02, local04
283bc     48 75 02 F6 | 	mov	arg01, local03
283c0     B4 FB BF FD | 	call	#__system___gc_isvalidptr
283c4     1A 79 0A F6 | 	mov	arg03, result1 wz
283c8     DC FF 9F AD |  if_e	jmp	#LR__1745
283cc     3C 75 02 F6 | 	mov	arg01, arg03
283d0     00 34 06 F6 | 	mov	result1, #0
283d4     02 74 06 F1 | 	add	arg01, #2
283d8     3A 75 E2 FA | 	rdword	arg01, arg01
283dc     36 00 00 FF 
283e0     8F 74 0E F2 | 	cmp	arg01, ##27791 wz
283e4     01 34 66 A6 |  if_e	neg	result1, #1
283e8     00 34 0E F2 | 	cmp	result1, #0 wz
283ec     B8 FF 9F 5D |  if_ne	jmp	#LR__1745
283f0     3C 37 02 F6 | 	mov	result2, arg03
283f4     02 36 06 F1 | 	add	result2, #2
283f8     1B 37 E2 FA | 	rdword	result2, result2
283fc     0F 36 26 F5 | 	andn	result2, #15
28400     2E 36 46 F5 | 	or	result2, #46
28404     02 78 06 F1 | 	add	arg03, #2
28408     3C 37 52 FC | 	wrword	result2, arg03
2840c     98 FF 9F FD | 	jmp	#LR__1745
28410                 | LR__1746
28410     A8 F0 03 F6 | 	mov	ptra, fp
28414     B3 00 A0 FD | 	call	#popregs_
28418                 | __system___gc_markhub_ret
28418     2D 00 64 FD | 	ret
2841c                 | 
2841c                 | __system___gc_markcog
2841c     04 4C 05 F6 | 	mov	COUNT_, #4
28420     A9 00 A0 FD | 	call	#pushregs_
28424     78 F7 BF FD | 	call	#__system___gc_ptrs
28428     1A 8D 02 F6 | 	mov	local01, result1
2842c     1B 8F 02 F6 | 	mov	local02, result2
28430     00 90 06 F6 | 	mov	local03, #0
28434                 | LR__1747
28434     F0 93 06 F6 | 	mov	local04, #496
28438     48 93 82 F1 | 	sub	local04, local03
2843c     F0 93 06 F1 | 	add	local04, #496
28440                 | 	'.live	local04
28440     00 92 96 F9 | 	alts	local04, #0
28444     49 93 02 F6 | 	mov	local04, local04
28448     46 75 02 F6 | 	mov	arg01, local01
2844c     47 77 02 F6 | 	mov	arg02, local02
28450     49 79 02 F6 | 	mov	arg03, local04
28454     20 FB BF FD | 	call	#__system___gc_isvalidptr
28458     00 34 0E F2 | 	cmp	result1, #0 wz
2845c     18 00 90 AD |  if_e	jmp	#LR__1748
28460     1A 93 02 F6 | 	mov	local04, result1
28464     02 92 06 F1 | 	add	local04, #2
28468     49 93 E2 FA | 	rdword	local04, local04
2846c     20 92 46 F5 | 	or	local04, #32
28470     02 34 06 F1 | 	add	result1, #2
28474     1A 93 52 FC | 	wrword	local04, result1
28478                 | LR__1748
28478     01 90 06 F1 | 	add	local03, #1
2847c     F0 91 56 F2 | 	cmps	local03, #496 wc
28480     B0 FF 9F CD |  if_b	jmp	#LR__1747
28484     A8 F0 03 F6 | 	mov	ptra, fp
28488     B3 00 A0 FD | 	call	#popregs_
2848c                 | __system___gc_markcog_ret
2848c     2D 00 64 FD | 	ret
28490                 | 
28490                 | __system____default_getc
28490                 | __system____default_getc_ret
28490     2D 00 64 FD | 	ret
28494                 | 
28494                 | __system____default_putc
28494                 | __system____default_putc_ret
28494     2D 00 64 FD | 	ret
28498                 | 
28498                 | __system____default_putc_terminal
28498                 | __system____default_putc_terminal_ret
28498     2D 00 64 FD | 	ret
2849c                 | 
2849c                 | __system____default_flush
2849c                 | __system____default_flush_ret
2849c     2D 00 64 FD | 	ret
284a0                 | 
284a0                 | __system____getftab
284a0     0A 74 16 F2 | 	cmp	arg01, #10 wc
284a4     00 34 06 36 |  if_ae	mov	result1, #0
284a8     24 00 90 3D |  if_ae	jmp	#__system____getftab_ret
284ac     3A 35 02 F6 | 	mov	result1, arg01
284b0     01 34 66 F0 | 	shl	result1, #1
284b4     3A 35 02 F1 | 	add	result1, arg01
284b8     04 34 66 F0 | 	shl	result1, #4
284bc     01 00 00 FF 
284c0     F4 A2 05 F1 | 	add	ptr___system__dat__, ##756
284c4     D1 34 02 F1 | 	add	result1, ptr___system__dat__
284c8     01 00 00 FF 
284cc     F4 A2 85 F1 | 	sub	ptr___system__dat__, ##756
284d0                 | __system____getftab_ret
284d0     2D 00 64 FD | 	ret
284d4                 | 
284d4                 | __system__strncpy
284d4     3A 3B 02 F6 | 	mov	_var01, arg01
284d8                 | LR__1749
284d8     01 78 86 F1 | 	sub	arg03, #1
284dc     00 78 56 F2 | 	cmps	arg03, #0 wc
284e0     18 00 90 CD |  if_b	jmp	#LR__1750
284e4     3B 35 C2 FA | 	rdbyte	result1, arg02
284e8     1D 35 42 FC | 	wrbyte	result1, _var01
284ec     01 76 06 F1 | 	add	arg02, #1
284f0     1D 35 CA FA | 	rdbyte	result1, _var01 wz
284f4     01 3A 06 F1 | 	add	_var01, #1
284f8     DC FF 9F 5D |  if_ne	jmp	#LR__1749
284fc                 | LR__1750
284fc     18 7B 9D FE | 	loc	pa,	#(@LR__1752-@LR__1751)
28500     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28504                 | LR__1751
28504     01 78 86 F1 | 	sub	arg03, #1
28508     00 78 56 F2 | 	cmps	arg03, #0 wc
2850c     1D 3D 02 36 |  if_ae	mov	_var02, _var01
28510     01 3A 06 31 |  if_ae	add	_var01, #1
28514     1E 01 48 3C |  if_ae	wrbyte	#0, _var02
28518     E8 FF 9F 3D |  if_ae	jmp	#LR__1751
2851c                 | LR__1752
2851c     3A 35 02 F6 | 	mov	result1, arg01
28520                 | __system__strncpy_ret
28520     2D 00 64 FD | 	ret
28524                 | 
28524                 | __system__strncat
28524     3A 3B 02 F6 | 	mov	_var01, arg01
28528     3B 3D 02 F6 | 	mov	_var02, arg02
2852c     3C 3F 02 F6 | 	mov	_var03, arg03
28530     1E 41 0A F6 | 	mov	_var04, _var02 wz
28534     6C 00 90 AD |  if_e	jmp	#LR__1757
28538     01 3E 16 F2 | 	cmp	_var03, #1 wc
2853c     64 00 90 CD |  if_b	jmp	#LR__1757
28540     1D 43 02 F6 | 	mov	_var05, _var01
28544     08 7B 9D FE | 	loc	pa,	#(@LR__1755-@LR__1753)
28548     8C 00 A0 FD | 	call	#FCACHE_LOAD_
2854c                 | LR__1753
2854c     21 45 CA FA | 	rdbyte	_var06, _var05 wz
28550     01 42 06 51 |  if_ne	add	_var05, #1
28554     F4 FF 9F 5D |  if_ne	jmp	#LR__1753
28558     1F 47 02 F6 | 	mov	_var07, _var03
2855c                 | LR__1754
2855c     20 49 02 F6 | 	mov	_var08, _var04
28560     20 4B 02 F6 | 	mov	_var09, _var04
28564     01 4A 06 F1 | 	add	_var09, #1
28568     25 41 02 F6 | 	mov	_var04, _var09
2856c     24 4D C2 FA | 	rdbyte	_var10, _var08
28570     26 45 02 F6 | 	mov	_var06, _var10
28574     07 44 4E F7 | 	zerox	_var06, #7 wz
28578     20 00 90 AD |  if_e	jmp	#LR__1756
2857c     23 4F 02 F6 | 	mov	_var11, _var07
28580     01 4E 86 F1 | 	sub	_var11, #1
28584     27 47 02 F6 | 	mov	_var07, _var11
28588     00 46 56 F2 | 	cmps	_var07, #0 wc
2858c     21 45 02 36 |  if_ae	mov	_var06, _var05
28590     01 42 06 31 |  if_ae	add	_var05, #1
28594     22 4D 42 3C |  if_ae	wrbyte	_var10, _var06
28598     C0 FF 9F 3D |  if_ae	jmp	#LR__1754
2859c                 | LR__1755
2859c                 | LR__1756
2859c     00 44 06 F6 | 	mov	_var06, #0
285a0     21 01 48 FC | 	wrbyte	#0, _var05
285a4                 | LR__1757
285a4     1D 35 02 F6 | 	mov	result1, _var01
285a8                 | __system__strncat_ret
285a8     2D 00 64 FD | 	ret
285ac                 | 
285ac                 | __system__strncmp
285ac     3A 3B 0A F6 | 	mov	_var01, arg01 wz
285b0     14 00 90 5D |  if_ne	jmp	#LR__1758
285b4     00 76 0E F2 | 	cmp	arg02, #0 wz
285b8     01 3C 66 56 |  if_ne	neg	_var02, #1
285bc     00 3C 06 A6 |  if_e	mov	_var02, #0
285c0     1E 35 02 F6 | 	mov	result1, _var02
285c4     88 00 90 FD | 	jmp	#__system__strncmp_ret
285c8                 | LR__1758
285c8     00 76 0E F2 | 	cmp	arg02, #0 wz
285cc     01 34 06 A6 |  if_e	mov	result1, #1
285d0     7C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
285d4     3C 3F 02 F6 | 	mov	_var03, arg03
285d8     60 7A 9D FE | 	loc	pa,	#(@LR__1760-@LR__1759)
285dc     8C 00 A0 FD | 	call	#FCACHE_LOAD_
285e0                 | LR__1759
285e0     1D 41 C2 FA | 	rdbyte	_var04, _var01
285e4     3B 43 02 F6 | 	mov	_var05, arg02
285e8     3B 45 02 F6 | 	mov	_var06, arg02
285ec     01 44 06 F1 | 	add	_var06, #1
285f0     22 77 02 F6 | 	mov	arg02, _var06
285f4     21 47 C2 FA | 	rdbyte	_var07, _var05
285f8     1F 3D 02 F6 | 	mov	_var02, _var03
285fc     01 3C 86 F1 | 	sub	_var02, #1
28600     1E 3F 02 F6 | 	mov	_var03, _var02
28604     00 3E 56 F2 | 	cmps	_var03, #0 wc
28608     01 3A 06 F1 | 	add	_var01, #1
2860c     00 40 0E 32 |  if_ae	cmp	_var04, #0 wz
28610     08 00 90 2D |  if_nc_and_z	jmp	#LR__1761
28614     23 41 0A 32 |  if_ae	cmp	_var04, _var07 wz
28618     C4 FF 9F 2D |  if_nc_and_z	jmp	#LR__1759
2861c                 | LR__1760
2861c                 | LR__1761
2861c     00 3E 56 F2 | 	cmps	_var03, #0 wc
28620     00 34 06 C6 |  if_b	mov	result1, #0
28624     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
28628     23 41 0A F2 | 	cmp	_var04, _var07 wz
2862c     00 34 06 A6 |  if_e	mov	result1, #0
28630     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28634     00 40 0E F2 | 	cmp	_var04, #0 wz
28638     01 34 66 A6 |  if_e	neg	result1, #1
2863c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
28640     00 46 0E F2 | 	cmp	_var07, #0 wz
28644     01 34 06 A6 |  if_e	mov	result1, #1
28648     20 35 02 56 |  if_ne	mov	result1, _var04
2864c     23 35 82 51 |  if_ne	sub	result1, _var07
28650                 | __system__strncmp_ret
28650     2D 00 64 FD | 	ret
28654                 | 
28654                 | __system____root_opendir
28654     5C A2 05 F1 | 	add	ptr___system__dat__, #92
28658     04 74 06 F1 | 	add	arg01, #4
2865c     3A A3 61 FC | 	wrlong	ptr___system__dat__, arg01
28660     00 34 06 F6 | 	mov	result1, #0
28664     5C A2 85 F1 | 	sub	ptr___system__dat__, #92
28668                 | __system____root_opendir_ret
28668     2D 00 64 FD | 	ret
2866c                 | 
2866c                 | __system____root_readdir
2866c     03 4C 05 F6 | 	mov	COUNT_, #3
28670     A9 00 A0 FD | 	call	#pushregs_
28674     3A 8D 02 F6 | 	mov	local01, arg01
28678     3B 8F 02 F6 | 	mov	local02, arg02
2867c     04 8C 06 F1 | 	add	local01, #4
28680     46 91 02 FB | 	rdlong	local03, local01
28684     04 8C 86 F1 | 	sub	local01, #4
28688                 | LR__1762
28688     6C A2 05 F1 | 	add	ptr___system__dat__, #108
2868c     D1 90 0A F2 | 	cmp	local03, ptr___system__dat__ wz
28690     6C A2 85 F1 | 	sub	ptr___system__dat__, #108
28694     01 34 66 A6 |  if_e	neg	result1, #1
28698     48 00 90 AD |  if_e	jmp	#LR__1763
2869c     48 79 0A FB | 	rdlong	arg03, local03 wz
286a0     04 90 06 A1 |  if_e	add	local03, #4
286a4     E0 FF 9F AD |  if_e	jmp	#LR__1762
286a8     48 77 02 FB | 	rdlong	arg02, local03
286ac     01 76 06 F1 | 	add	arg02, #1
286b0     47 75 02 F6 | 	mov	arg01, local02
286b4     40 78 06 F6 | 	mov	arg03, #64
286b8     18 FE BF FD | 	call	#__system__strncpy
286bc     50 8E 06 F1 | 	add	local02, #80
286c0     47 03 48 FC | 	wrbyte	#1, local02
286c4     08 8E 86 F1 | 	sub	local02, #8
286c8     47 01 68 FC | 	wrlong	#0, local02
286cc     04 8E 06 F1 | 	add	local02, #4
286d0     47 01 68 FC | 	wrlong	#0, local02
286d4     04 90 06 F1 | 	add	local03, #4
286d8     04 8C 06 F1 | 	add	local01, #4
286dc     46 91 62 FC | 	wrlong	local03, local01
286e0     00 34 06 F6 | 	mov	result1, #0
286e4                 | LR__1763
286e4     A8 F0 03 F6 | 	mov	ptra, fp
286e8     B3 00 A0 FD | 	call	#popregs_
286ec                 | __system____root_readdir_ret
286ec     2D 00 64 FD | 	ret
286f0                 | 
286f0                 | __system____root_closedir
286f0     00 34 06 F6 | 	mov	result1, #0
286f4                 | __system____root_closedir_ret
286f4     2D 00 64 FD | 	ret
286f8                 | 
286f8                 | __system____root_stat
286f8     01 4C 05 F6 | 	mov	COUNT_, #1
286fc     A9 00 A0 FD | 	call	#pushregs_
28700     3B 8D 02 F6 | 	mov	local01, arg02
28704     46 75 02 F6 | 	mov	arg01, local01
28708     00 76 06 F6 | 	mov	arg02, #0
2870c     30 78 06 F6 | 	mov	arg03, #48
28710     99 00 A0 FD | 	call	#\builtin_bytefill_
28714     08 8C 06 F1 | 	add	local01, #8
28718     08 00 80 FF 
2871c     46 FF 6B FC | 	wrlong	##4607, local01
28720     00 34 06 F6 | 	mov	result1, #0
28724     A8 F0 03 F6 | 	mov	ptra, fp
28728     B3 00 A0 FD | 	call	#popregs_
2872c                 | __system____root_stat_ret
2872c     2D 00 64 FD | 	ret
28730                 | 
28730                 | __system___strrev
28730     3A 3B CA FA | 	rdbyte	_var01, arg01 wz
28734     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
28738     3A 3D 02 F6 | 	mov	_var02, arg01
2873c     F4 78 9D FE | 	loc	pa,	#(@LR__1766-@LR__1764)
28740     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28744                 | LR__1764
28744     1E 3B CA FA | 	rdbyte	_var01, _var02 wz
28748     01 3C 06 51 |  if_ne	add	_var02, #1
2874c     F4 FF 9F 5D |  if_ne	jmp	#LR__1764
28750     01 3C 86 F1 | 	sub	_var02, #1
28754                 | LR__1765
28754     3A 3D 5A F2 | 	cmps	_var02, arg01 wcz
28758     1C 00 90 ED |  if_be	jmp	#LR__1767
2875c     3A 3B C2 FA | 	rdbyte	_var01, arg01
28760     1E 3F C2 FA | 	rdbyte	_var03, _var02
28764     3A 3F 42 FC | 	wrbyte	_var03, arg01
28768     1E 3B 42 FC | 	wrbyte	_var01, _var02
2876c     01 74 06 F1 | 	add	arg01, #1
28770     01 3C 86 F1 | 	sub	_var02, #1
28774     DC FF 9F FD | 	jmp	#LR__1765
28778                 | LR__1766
28778                 | LR__1767
28778                 | __system___strrev_ret
28778     2D 00 64 FD | 	ret
2877c                 | 
2877c                 | __system___fmtpad
2877c     07 4C 05 F6 | 	mov	COUNT_, #7
28780     A9 00 A0 FD | 	call	#pushregs_
28784     3A 8D 02 F6 | 	mov	local01, arg01
28788     3B 8F 02 F6 | 	mov	local02, arg02
2878c     3C 91 02 F6 | 	mov	local03, arg03
28790     47 75 EA F8 | 	getbyte	arg01, local02, #1
28794     16 8E 46 F0 | 	shr	local02, #22
28798     03 8E 0E F5 | 	and	local02, #3 wz
2879c     00 92 06 F6 | 	mov	local04, #0
287a0     01 8E 06 A6 |  if_e	mov	local02, #1
287a4     3D 8F CA F7 | 	test	local02, arg04 wz
287a8     00 34 06 A6 |  if_e	mov	result1, #0
287ac     80 00 90 AD |  if_e	jmp	#LR__1771
287b0     3A 91 C2 F2 | 	subr	local03, arg01
287b4     01 90 56 F2 | 	cmps	local03, #1 wc
287b8     00 34 06 C6 |  if_b	mov	result1, #0
287bc     70 00 90 CD |  if_b	jmp	#LR__1771
287c0     03 8E 0E F2 | 	cmp	local02, #3 wz
287c4     18 00 90 5D |  if_ne	jmp	#LR__1768
287c8     01 7A 0E F2 | 	cmp	arg04, #1 wz
287cc     6E 8E 62 FD | 	wrz	local02
287d0     47 91 02 F1 | 	add	local03, local02
287d4     48 91 52 F6 | 	abs	local03, local03 wc
287d8     01 90 46 F0 | 	shr	local03, #1
287dc     48 91 82 F6 | 	negc	local03, local03
287e0                 | LR__1768
287e0     00 94 06 F6 | 	mov	local05, #0
287e4                 | LR__1769
287e4     48 95 52 F2 | 	cmps	local05, local03 wc
287e8     40 00 90 3D |  if_ae	jmp	#LR__1770
287ec     46 97 02 F6 | 	mov	local06, local01
287f0     4B 99 02 FB | 	rdlong	local07, local06
287f4     04 96 06 F1 | 	add	local06, #4
287f8     4B 97 02 FB | 	rdlong	local06, local06
287fc     20 74 06 F6 | 	mov	arg01, #32
28800     C9 8E 02 F6 | 	mov	local02, objptr
28804     4C 93 01 F6 | 	mov	objptr, local07
28808     2D 96 62 FD | 	call	local06
2880c     47 93 01 F6 | 	mov	objptr, local02
28810     1A 97 02 F6 | 	mov	local06, result1
28814     00 96 56 F2 | 	cmps	local06, #0 wc
28818     4B 35 02 C6 |  if_b	mov	result1, local06
2881c     10 00 90 CD |  if_b	jmp	#LR__1771
28820     4B 93 02 F1 | 	add	local04, local06
28824     01 94 06 F1 | 	add	local05, #1
28828     B8 FF 9F FD | 	jmp	#LR__1769
2882c                 | LR__1770
2882c     49 35 02 F6 | 	mov	result1, local04
28830                 | LR__1771
28830     A8 F0 03 F6 | 	mov	ptra, fp
28834     B3 00 A0 FD | 	call	#popregs_
28838                 | __system___fmtpad_ret
28838     2D 00 64 FD | 	ret
2883c                 | 
2883c                 | __system___uitoa
2883c     08 4C 05 F6 | 	mov	COUNT_, #8
28840     A9 00 A0 FD | 	call	#pushregs_
28844     3A 8D 02 F6 | 	mov	local01, arg01
28848     3B 8F 02 F6 | 	mov	local02, arg02
2884c     3C 91 02 F6 | 	mov	local03, arg03
28850     3D 93 02 F6 | 	mov	local04, arg04
28854     3E 95 0A F6 | 	mov	local05, arg05 wz
28858     46 97 02 F6 | 	mov	local06, local01
2885c     00 98 06 F6 | 	mov	local07, #0
28860     37 9A 06 56 |  if_ne	mov	local08, #55
28864     57 9A 06 A6 |  if_e	mov	local08, #87
28868                 | LR__1772
28868     48 8F 12 FD | 	qdiv	local02, local03
2886c     19 94 62 FD | 	getqy	local05
28870     48 8F 12 FD | 	qdiv	local02, local03
28874     0A 94 16 F2 | 	cmp	local05, #10 wc
28878     30 94 06 C1 |  if_b	add	local05, #48
2887c     4D 95 02 31 |  if_ae	add	local05, local08
28880     4B 95 42 FC | 	wrbyte	local05, local06
28884     01 96 06 F1 | 	add	local06, #1
28888     01 98 06 F1 | 	add	local07, #1
2888c     18 8E 62 FD | 	getqx	local02
28890     00 8E 0E F2 | 	cmp	local02, #0 wz
28894     D0 FF 9F 5D |  if_ne	jmp	#LR__1772
28898     49 99 12 F2 | 	cmp	local07, local04 wc
2889c     C8 FF 9F CD |  if_b	jmp	#LR__1772
288a0     4B 01 48 FC | 	wrbyte	#0, local06
288a4     46 75 02 F6 | 	mov	arg01, local01
288a8     84 FE BF FD | 	call	#__system___strrev
288ac     4C 35 02 F6 | 	mov	result1, local07
288b0     A8 F0 03 F6 | 	mov	ptra, fp
288b4     B3 00 A0 FD | 	call	#popregs_
288b8                 | __system___uitoa_ret
288b8     2D 00 64 FD | 	ret
288bc                 | 
288bc                 | __system__disassemble_1163
288bc     16 4C 05 F6 | 	mov	COUNT_, #22
288c0     A9 00 A0 FD | 	call	#pushregs_
288c4     3A 8D 02 F6 | 	mov	local01, arg01
288c8     3B 8F 02 F6 | 	mov	local02, arg02
288cc     3C 91 02 F6 | 	mov	local03, arg03
288d0     3D 93 02 F6 | 	mov	local04, arg04
288d4     3E 95 02 F6 | 	mov	local05, arg05
288d8     4A 75 02 F6 | 	mov	arg01, local05
288dc     8C E4 BF FD | 	call	#__system___float_fromint
288e0     1A 97 02 F6 | 	mov	local06, result1
288e4     00 98 06 F6 | 	mov	local07, #0
288e8     00 9A 06 F6 | 	mov	local08, #0
288ec     01 9C 06 F6 | 	mov	local09, #1
288f0     46 75 02 F6 | 	mov	arg01, local01
288f4     00 76 06 F6 | 	mov	arg02, #0
288f8     01 78 06 F6 | 	mov	arg03, #1
288fc     F8 EB BF FD | 	call	#__system___float_cmp
28900     00 34 0E F2 | 	cmp	result1, #0 wz
28904     00 9E 06 A6 |  if_e	mov	local10, #0
28908     47 01 68 AC |  if_e	wrlong	#0, local02
2890c     48 9F 62 AC |  if_e	wrlong	local10, local03
28910     BC 01 90 AD |  if_e	jmp	#LR__1785
28914     46 75 02 F6 | 	mov	arg01, local01
28918     2C EE BF FD | 	call	#__system____builtin_ilogb
2891c     1A A1 02 F6 | 	mov	local11, result1
28920     0A 94 0E F2 | 	cmp	local05, #10 wz
28924     24 00 90 5D |  if_ne	jmp	#LR__1773
28928     50 9F 02 F6 | 	mov	local10, local11
2892c     01 9E 66 F0 | 	shl	local10, #1
28930     50 9F 02 F1 | 	add	local10, local11
28934     4F A1 52 F6 | 	abs	local11, local10 wc
28938     0A A0 16 FD | 	qdiv	local11, #10
2893c     09 A2 06 F6 | 	mov	local12, #9
28940     18 A0 62 FD | 	getqx	local11
28944     50 A1 82 F6 | 	negc	local11, local11
28948     04 00 90 FD | 	jmp	#LR__1774
2894c                 | LR__1773
2894c     18 A2 06 F6 | 	mov	local12, #24
28950                 | LR__1774
28950                 | LR__1775
28950     08 98 56 F2 | 	cmps	local07, #8 wc
28954     01 98 06 F1 | 	add	local07, #1
28958     6C 00 90 3D |  if_ae	jmp	#LR__1776
2895c     00 C0 1F FF 
28960     00 74 06 F6 | 	mov	arg01, ##1065353216
28964     4B 77 02 F6 | 	mov	arg02, local06
28968     50 79 02 F6 | 	mov	arg03, local11
2896c     60 F1 BF FD | 	call	#__system___float_pow_n
28970     1A A5 02 F6 | 	mov	local13, result1
28974     46 75 02 F6 | 	mov	arg01, local01
28978     52 77 02 F6 | 	mov	arg02, local13
2897c     40 E9 BF FD | 	call	#__system___float_div
28980     1A A7 02 F6 | 	mov	local14, result1
28984     01 9C 06 F6 | 	mov	local09, #1
28988     53 75 02 F6 | 	mov	arg01, local14
2898c     00 C0 1F FF 
28990     00 76 06 F6 | 	mov	arg02, ##1065353216
28994     01 78 06 F6 | 	mov	arg03, #1
28998     5C EB BF FD | 	call	#__system___float_cmp
2899c     00 34 56 F2 | 	cmps	result1, #0 wc
289a0     01 A0 86 C1 |  if_b	sub	local11, #1
289a4     A8 FF 9F CD |  if_b	jmp	#LR__1775
289a8     4B 77 02 F6 | 	mov	arg02, local06
289ac     01 9C 66 F6 | 	neg	local09, #1
289b0     53 75 02 F6 | 	mov	arg01, local14
289b4     01 78 66 F6 | 	neg	arg03, #1
289b8     3C EB BF FD | 	call	#__system___float_cmp
289bc     00 34 56 F2 | 	cmps	result1, #0 wc
289c0     01 A0 06 31 |  if_ae	add	local11, #1
289c4     88 FF 9F 3D |  if_ae	jmp	#LR__1775
289c8                 | LR__1776
289c8     53 75 02 F6 | 	mov	arg01, local14
289cc     78 ED BF FD | 	call	#__system____builtin_ilogb
289d0     1A A9 02 F6 | 	mov	local15, result1
289d4     53 AB 02 F6 | 	mov	local16, local14
289d8     55 AD 02 F6 | 	mov	local17, local16
289dc     17 AD 06 F4 | 	bitl	local17, #279
289e0     17 AC 26 F4 | 	bith	local17, #23
289e4     54 AD 62 F0 | 	shl	local17, local15
289e8     02 94 0E F2 | 	cmp	local05, #2 wz
289ec     02 92 66 A0 |  if_e	shl	local04, #2
289f0     00 AE 06 F6 | 	mov	local18, #0
289f4     00 92 56 F2 | 	cmps	local04, #0 wc
289f8     10 00 90 3D |  if_ae	jmp	#LR__1777
289fc     50 93 C2 F2 | 	subr	local04, local11
28a00     00 92 56 F2 | 	cmps	local04, #0 wc
28a04     C0 00 90 CD |  if_b	jmp	#LR__1784
28a08     04 00 90 FD | 	jmp	#LR__1778
28a0c                 | LR__1777
28a0c     01 92 06 F1 | 	add	local04, #1
28a10                 | LR__1778
28a10     51 93 7A F3 | 	fles	local04, local12 wcz
28a14     01 B0 06 F6 | 	mov	local19, #1
28a18     28 76 9D FE | 	loc	pa,	#(@LR__1780-@LR__1779)
28a1c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28a20                 | LR__1779
28a20     00 40 00 FF 
28a24     00 AE 16 F2 | 	cmp	local18, ##8388608 wc
28a28     38 00 90 3D |  if_ae	jmp	#LR__1781
28a2c     01 92 56 F2 | 	cmps	local04, #1 wc
28a30     01 92 86 F1 | 	sub	local04, #1
28a34     2C 00 90 CD |  if_b	jmp	#LR__1781
28a38     4A AF 02 FD | 	qmul	local18, local05
28a3c     56 B3 02 F6 | 	mov	local20, local17
28a40     17 B2 46 F0 | 	shr	local20, #23
28a44     17 AD 06 F4 | 	bitl	local17, #279
28a48     18 AE 62 FD | 	getqx	local18
28a4c     4A B1 02 FD | 	qmul	local19, local05
28a50     18 B0 62 FD | 	getqx	local19
28a54     4A AD 02 FD | 	qmul	local17, local05
28a58     59 AF 02 F1 | 	add	local18, local20
28a5c     18 AC 62 FD | 	getqx	local17
28a60     BC FF 9F FD | 	jmp	#LR__1779
28a64                 | LR__1780
28a64                 | LR__1781
28a64     4A 9F 02 F6 | 	mov	local10, local05
28a68     17 9E 66 F0 | 	shl	local10, #23
28a6c     4F 9B 52 F6 | 	abs	local08, local10 wc
28a70     01 9A 46 F0 | 	shr	local08, #1
28a74     4D 9B 82 F6 | 	negc	local08, local08
28a78     4D AD 1A F2 | 	cmp	local17, local08 wcz
28a7c     28 00 90 1D |  if_a	jmp	#LR__1782
28a80     4A 9D 02 F6 | 	mov	local09, local05
28a84     17 9C 66 F0 | 	shl	local09, #23
28a88     4E B5 52 F6 | 	abs	local21, local09 wc
28a8c     01 B4 46 F0 | 	shr	local21, #1
28a90     5A B5 82 F6 | 	negc	local21, local21
28a94     5A AD 0A F2 | 	cmp	local17, local21 wz
28a98     2C 00 90 5D |  if_ne	jmp	#LR__1783
28a9c     57 B7 02 F6 | 	mov	local22, local18
28aa0     01 B6 0E F5 | 	and	local22, #1 wz
28aa4     20 00 90 AD |  if_e	jmp	#LR__1783
28aa8                 | LR__1782
28aa8     57 9F 02 F6 | 	mov	local10, local18
28aac     57 9B 02 F6 | 	mov	local08, local18
28ab0     01 9A 06 F1 | 	add	local08, #1
28ab4     4D AF 02 F6 | 	mov	local18, local08
28ab8     58 AF 0A F2 | 	cmp	local18, local19 wz
28abc     50 9F 02 A6 |  if_e	mov	local10, local11
28ac0     01 9E 06 A1 |  if_e	add	local10, #1
28ac4     4F A1 02 A6 |  if_e	mov	local11, local10
28ac8                 | LR__1783
28ac8                 | LR__1784
28ac8     47 AF 62 FC | 	wrlong	local18, local02
28acc     48 A1 62 FC | 	wrlong	local11, local03
28ad0                 | LR__1785
28ad0     A8 F0 03 F6 | 	mov	ptra, fp
28ad4     B3 00 A0 FD | 	call	#popregs_
28ad8                 | __system__disassemble_1163_ret
28ad8     2D 00 64 FD | 	ret
28adc                 | 
28adc                 | __system__emitsign_1165
28adc     00 34 06 F6 | 	mov	result1, #0
28ae0     00 76 0E F2 | 	cmp	arg02, #0 wz
28ae4     3A 3B 02 56 |  if_ne	mov	_var01, arg01
28ae8     01 74 06 51 |  if_ne	add	arg01, #1
28aec     1D 77 42 5C |  if_ne	wrbyte	arg02, _var01
28af0     01 34 06 56 |  if_ne	mov	result1, #1
28af4     00 78 0E F2 | 	cmp	arg03, #0 wz
28af8     3A 61 48 5C |  if_ne	wrbyte	#48, arg01
28afc     01 74 06 51 |  if_ne	add	arg01, #1
28b00     3A 79 42 5C |  if_ne	wrbyte	arg03, arg01
28b04     02 34 06 51 |  if_ne	add	result1, #2
28b08                 | __system__emitsign_1165_ret
28b08     2D 00 64 FD | 	ret
28b0c                 | 
28b0c                 | __system___gettxfunc
28b0c     02 4C 05 F6 | 	mov	COUNT_, #2
28b10     A9 00 A0 FD | 	call	#pushregs_
28b14     88 F9 BF FD | 	call	#__system____getftab
28b18     1A 8D 0A F6 | 	mov	local01, result1 wz
28b1c     08 8C 06 51 |  if_ne	add	local01, #8
28b20     46 8F 02 5B |  if_ne	rdlong	local02, local01
28b24     08 8C 86 51 |  if_ne	sub	local01, #8
28b28     00 8E 4E 52 |  if_ne	cmps	local02, #0 wz
28b2c     00 34 06 A6 |  if_e	mov	result1, #0
28b30     D0 76 02 56 |  if_ne	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
28b34     46 75 02 56 |  if_ne	mov	arg01, local01
28b38     AC C7 BF 5D |  if_ne	call	#__system___make_methodptr
28b3c     A8 F0 03 F6 | 	mov	ptra, fp
28b40     B3 00 A0 FD | 	call	#popregs_
28b44                 | __system___gettxfunc_ret
28b44     2D 00 64 FD | 	ret
28b48                 | 
28b48                 | __system___getiolock_1205
28b48     02 4C 05 F6 | 	mov	COUNT_, #2
28b4c     A9 00 A0 FD | 	call	#pushregs_
28b50     4C F9 BF FD | 	call	#__system____getftab
28b54     1A 8D 0A F6 | 	mov	local01, result1 wz
28b58     08 8C 06 51 |  if_ne	add	local01, #8
28b5c     46 8F 02 5B |  if_ne	rdlong	local02, local01
28b60     08 8C 86 51 |  if_ne	sub	local01, #8
28b64     00 8E 4E 52 |  if_ne	cmps	local02, #0 wz
28b68     01 00 00 AF 
28b6c     F0 A2 05 A1 |  if_e	add	ptr___system__dat__, ##752
28b70     D1 34 02 A6 |  if_e	mov	result1, ptr___system__dat__
28b74     01 00 00 AF 
28b78     F0 A2 85 A1 |  if_e	sub	ptr___system__dat__, ##752
28b7c     0C 8C 06 51 |  if_ne	add	local01, #12
28b80     46 35 02 56 |  if_ne	mov	result1, local01
28b84     A8 F0 03 F6 | 	mov	ptra, fp
28b88     B3 00 A0 FD | 	call	#popregs_
28b8c                 | __system___getiolock_1205_ret
28b8c     2D 00 64 FD | 	ret
28b90                 | 
28b90                 | __system__pack_1245
28b90     06 4C 05 F6 | 	mov	COUNT_, #6
28b94     A9 00 A0 FD | 	call	#pushregs_
28b98     3A 8D 02 F6 | 	mov	local01, arg01
28b9c     3B 8F 02 F6 | 	mov	local02, arg02
28ba0     3C 91 02 F6 | 	mov	local03, arg03
28ba4     3D 93 02 F6 | 	mov	local04, arg04
28ba8     7F 90 06 F1 | 	add	local03, #127
28bac     04 92 CE F7 | 	test	local04, #4 wz
28bb0     10 00 90 AD |  if_e	jmp	#LR__1786
28bb4     00 8C 0E F2 | 	cmp	local01, #0 wz
28bb8     16 8C C6 A9 |  if_e	decod	local01, #22
28bbc     F7 8C 26 F4 | 	bith	local01, #247
28bc0     B8 00 90 FD | 	jmp	#LR__1795
28bc4                 | LR__1786
28bc4     02 92 CE F7 | 	test	local04, #2 wz
28bc8     00 C0 3F 5F 
28bcc     00 8C 06 56 |  if_ne	mov	local01, ##2139095040
28bd0     00 8E 06 56 |  if_ne	mov	local02, #0
28bd4     A4 00 90 5D |  if_ne	jmp	#LR__1794
28bd8     08 92 CE F7 | 	test	local04, #8 wz
28bdc     00 8C 06 56 |  if_ne	mov	local01, #0
28be0     98 00 90 5D |  if_ne	jmp	#LR__1793
28be4     FF 90 56 F2 | 	cmps	local03, #255 wc
28be8     00 C0 3F 3F 
28bec     00 8C 06 36 |  if_ae	mov	local01, ##2139095040
28bf0     00 8E 06 36 |  if_ae	mov	local02, #0
28bf4     84 00 90 3D |  if_ae	jmp	#LR__1792
28bf8     01 90 56 F2 | 	cmps	local03, #1 wc
28bfc     70 00 90 3D |  if_ae	jmp	#LR__1790
28c00     01 8E 46 F0 | 	shr	local02, #1
28c04     46 95 02 F6 | 	mov	local05, local01
28c08     01 94 06 F5 | 	and	local05, #1
28c0c     1F 94 66 F0 | 	shl	local05, #31
28c10     4A 8F 42 F5 | 	or	local02, local05
28c14     01 8C 46 F0 | 	shr	local01, #1
28c18     20 74 9D FE | 	loc	pa,	#(@LR__1788-@LR__1787)
28c1c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
28c20                 | LR__1787
28c20     00 90 56 F2 | 	cmps	local03, #0 wc
28c24     34 00 90 3D |  if_ae	jmp	#LR__1789
28c28     00 8C 0E F2 | 	cmp	local01, #0 wz
28c2c     2C 00 90 AD |  if_e	jmp	#LR__1789
28c30     47 97 02 F6 | 	mov	local06, local02
28c34     01 96 06 F5 | 	and	local06, #1
28c38     01 90 06 F1 | 	add	local03, #1
28c3c     01 8E 46 F0 | 	shr	local02, #1
28c40     46 95 02 F6 | 	mov	local05, local01
28c44     01 94 06 F5 | 	and	local05, #1
28c48     1F 94 66 F0 | 	shl	local05, #31
28c4c     4A 8F 42 F5 | 	or	local02, local05
28c50     4B 8F 42 F5 | 	or	local02, local06
28c54     01 8C 46 F0 | 	shr	local01, #1
28c58     C4 FF 9F FD | 	jmp	#LR__1787
28c5c                 | LR__1788
28c5c                 | LR__1789
28c5c     00 90 56 F2 | 	cmps	local03, #0 wc
28c60     18 00 90 3D |  if_ae	jmp	#LR__1791
28c64     00 8E 0E F2 | 	cmp	local02, #0 wz
28c68     6F 8E 62 FD | 	wrnz	local02
28c6c     0C 00 90 FD | 	jmp	#LR__1791
28c70                 | LR__1790
28c70     17 8D 06 F4 | 	bitl	local01, #279
28c74     17 90 66 F0 | 	shl	local03, #23
28c78     48 8D 42 F5 | 	or	local01, local03
28c7c                 | LR__1791
28c7c                 | LR__1792
28c7c                 | LR__1793
28c7c                 | LR__1794
28c7c                 | LR__1795
28c7c     01 8C CE F7 | 	test	local01, #1 wz
28c80     01 8E 46 55 |  if_ne	or	local02, #1
28c84     47 97 02 F6 | 	mov	local06, local02
28c88     00 94 06 F6 | 	mov	local05, #0
28c8c     FF FF 3F FF 
28c90     FF 8F 06 F1 | 	add	local02, ##2147483647
28c94     4B 8F 12 F2 | 	cmp	local02, local06 wc
28c98     01 94 06 C6 |  if_b	mov	local05, #1
28c9c     4A 8D 02 F1 | 	add	local01, local05
28ca0     01 92 CE F7 | 	test	local04, #1 wz
28ca4     1F 8C 26 54 |  if_ne	bith	local01, #31
28ca8     46 35 02 F6 | 	mov	result1, local01
28cac     A8 F0 03 F6 | 	mov	ptra, fp
28cb0     B3 00 A0 FD | 	call	#popregs_
28cb4                 | __system__pack_1245_ret
28cb4     2D 00 64 FD | 	ret
28cb8                 | 
28cb8                 | __system___rxtxioctl_1991
28cb8     02 4C 05 F6 | 	mov	COUNT_, #2
28cbc     A9 00 A0 FD | 	call	#pushregs_
28cc0     3B 8D 02 F6 | 	mov	local01, arg02
28cc4     3C 8F 02 F6 | 	mov	local02, arg03
28cc8     00 8D 0E F2 | 	cmp	local01, #256 wz
28ccc     0C 00 90 AD |  if_e	jmp	#LR__1796
28cd0     01 8D 0E F2 | 	cmp	local01, #257 wz
28cd4     1C 00 90 AD |  if_e	jmp	#LR__1797
28cd8     30 00 90 FD | 	jmp	#LR__1798
28cdc                 | LR__1796
28cdc     08 A2 05 F1 | 	add	ptr___system__dat__, #8
28ce0     D1 34 02 FB | 	rdlong	result1, ptr___system__dat__
28ce4     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
28ce8     47 35 62 FC | 	wrlong	result1, local02
28cec     00 34 06 F6 | 	mov	result1, #0
28cf0     28 00 90 FD | 	jmp	#LR__1799
28cf4                 | LR__1797
28cf4     47 75 02 FB | 	rdlong	arg01, local02
28cf8     08 A2 05 F1 | 	add	ptr___system__dat__, #8
28cfc     D1 74 62 FC | 	wrlong	arg01, ptr___system__dat__
28d00     08 A2 85 F1 | 	sub	ptr___system__dat__, #8
28d04     00 34 06 F6 | 	mov	result1, #0
28d08     10 00 90 FD | 	jmp	#LR__1799
28d0c                 | LR__1798
28d0c     18 A2 05 F1 | 	add	ptr___system__dat__, #24
28d10     D1 14 68 FC | 	wrlong	#10, ptr___system__dat__
28d14     18 A2 85 F1 | 	sub	ptr___system__dat__, #24
28d18     01 34 66 F6 | 	neg	result1, #1
28d1c                 | LR__1799
28d1c     A8 F0 03 F6 | 	mov	ptra, fp
28d20     B3 00 A0 FD | 	call	#popregs_
28d24                 | __system___rxtxioctl_1991_ret
28d24     2D 00 64 FD | 	ret
28d28                 | 
28d28                 | __system____dummy_flush_1992
28d28     00 34 06 F6 | 	mov	result1, #0
28d2c                 | __system____dummy_flush_1992_ret
28d2c     2D 00 64 FD | 	ret
28d30                 | 
28d30                 | __struct__s_vfs_file_t_putchar
28d30     04 4C 05 F6 | 	mov	COUNT_, #4
28d34     A9 00 A0 FD | 	call	#pushregs_
28d38     18 92 05 F1 | 	add	objptr, #24
28d3c     C9 76 0A FB | 	rdlong	arg02, objptr wz
28d40     18 92 85 F1 | 	sub	objptr, #24
28d44     00 34 06 A6 |  if_e	mov	result1, #0
28d48     3C 00 90 AD |  if_e	jmp	#LR__1800
28d4c     18 92 05 F1 | 	add	objptr, #24
28d50     C9 8C 02 FB | 	rdlong	local01, objptr
28d54     18 92 85 F1 | 	sub	objptr, #24
28d58     46 8F 02 FB | 	rdlong	local02, local01
28d5c     04 8C 06 F1 | 	add	local01, #4
28d60     46 91 02 FB | 	rdlong	local03, local01
28d64     C9 76 02 F6 | 	mov	arg02, objptr
28d68     C9 92 02 F6 | 	mov	local04, objptr
28d6c     47 93 01 F6 | 	mov	objptr, local02
28d70     2D 90 62 FD | 	call	local03
28d74     49 93 01 F6 | 	mov	objptr, local04
28d78     00 34 56 F2 | 	cmps	result1, #0 wc
28d7c     00 8C 06 C6 |  if_b	mov	local01, #0
28d80     01 8C 06 36 |  if_ae	mov	local01, #1
28d84     46 35 02 F6 | 	mov	result1, local01
28d88                 | LR__1800
28d88     A8 F0 03 F6 | 	mov	ptra, fp
28d8c     B3 00 A0 FD | 	call	#popregs_
28d90                 | __struct__s_vfs_file_t_putchar_ret
28d90     2D 00 64 FD | 	ret
28d94                 | 
28d94                 | __struct__s_vfs_file_t_getchar
28d94     03 4C 05 F6 | 	mov	COUNT_, #3
28d98     A9 00 A0 FD | 	call	#pushregs_
28d9c     1C 92 05 F1 | 	add	objptr, #28
28da0     C9 74 0A FB | 	rdlong	arg01, objptr wz
28da4     1C 92 85 F1 | 	sub	objptr, #28
28da8     01 34 66 A6 |  if_e	neg	result1, #1
28dac     2C 00 90 AD |  if_e	jmp	#LR__1801
28db0                 | '         return getcf(__this);
28db0     1C 92 05 F1 | 	add	objptr, #28
28db4     C9 74 02 FB | 	rdlong	arg01, objptr
28db8     1C 92 85 F1 | 	sub	objptr, #28
28dbc     3A 8D 02 FB | 	rdlong	local01, arg01
28dc0     04 74 06 F1 | 	add	arg01, #4
28dc4     3A 8F 02 FB | 	rdlong	local02, arg01
28dc8     C9 74 02 F6 | 	mov	arg01, objptr
28dcc     C9 90 02 F6 | 	mov	local03, objptr
28dd0     46 93 01 F6 | 	mov	objptr, local01
28dd4     2D 8E 62 FD | 	call	local02
28dd8     48 93 01 F6 | 	mov	objptr, local03
28ddc                 | LR__1801
28ddc     A8 F0 03 F6 | 	mov	ptra, fp
28de0     B3 00 A0 FD | 	call	#popregs_
28de4                 | __struct__s_vfs_file_t_getchar_ret
28de4     2D 00 64 FD | 	ret
28de8                 | 
28de8                 | __struct___bas_wrap_sender_tx
28de8     03 4C 05 F6 | 	mov	COUNT_, #3
28dec     A9 00 A0 FD | 	call	#pushregs_
28df0     C9 8C 02 FB | 	rdlong	local01, objptr
28df4     46 8F 02 FB | 	rdlong	local02, local01
28df8     04 8C 06 F1 | 	add	local01, #4
28dfc     46 8D 02 FB | 	rdlong	local01, local01
28e00     C9 90 02 F6 | 	mov	local03, objptr
28e04     47 93 01 F6 | 	mov	objptr, local02
28e08     2D 8C 62 FD | 	call	local01
28e0c     48 93 01 F6 | 	mov	objptr, local03
28e10     01 34 06 F6 | 	mov	result1, #1
28e14     A8 F0 03 F6 | 	mov	ptra, fp
28e18     B3 00 A0 FD | 	call	#popregs_
28e1c                 | __struct___bas_wrap_sender_tx_ret
28e1c     2D 00 64 FD | 	ret
28e20                 | 
28e20                 | __struct___bas_wrap_sender_rx
28e20     03 4C 05 F6 | 	mov	COUNT_, #3
28e24     A9 00 A0 FD | 	call	#pushregs_
28e28     04 92 05 F1 | 	add	objptr, #4
28e2c     C9 8C 02 FB | 	rdlong	local01, objptr
28e30     04 92 85 F1 | 	sub	objptr, #4
28e34     46 8F 02 FB | 	rdlong	local02, local01
28e38     04 8C 06 F1 | 	add	local01, #4
28e3c     46 8D 02 FB | 	rdlong	local01, local01
28e40     C9 90 02 F6 | 	mov	local03, objptr
28e44     47 93 01 F6 | 	mov	objptr, local02
28e48     2D 8C 62 FD | 	call	local01
28e4c     48 93 01 F6 | 	mov	objptr, local03
28e50     A8 F0 03 F6 | 	mov	ptra, fp
28e54     B3 00 A0 FD | 	call	#popregs_
28e58                 | __struct___bas_wrap_sender_rx_ret
28e58     2D 00 64 FD | 	ret
28e5c                 | 
28e5c                 | LR__1802
28e5c     2F          | 	byte	"/"
28e5d     00          | 	byte	0
28e5e                 | LR__1803
28e5e     69 6E 66    | 	byte	"inf"
28e61     00          | 	byte	0
28e62                 | LR__1804
28e62     6E 61 6E    | 	byte	"nan"
28e65     00          | 	byte	0
28e66                 | LR__1805
28e66     00          | 	byte	0
28e67     00          | 	byte	0
28e68                 | LR__1806
28e68     00          | 	byte	0
28e69     00          | 	byte	0
28e6a                 | LR__1807
28e6a     00          | 	byte	0
28e6b     00          | 	byte	0
28e6c                 | LR__1808
28e6c     20 21 21 21 
28e70     20 63 6F 72 
28e74     72 75 70 74 
28e78     65 64 20 68 
28e7c     65 61 70 3F 
28e80     3F 3F 20 21 
28e84     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
28e87     00          | 	byte	0
28e88                 | LR__1809
28e88     20 21 21 21 
28e8c     20 6F 75 74 
28e90     20 6F 66 20 
28e94     68 65 61 70 
28e98     20 6D 65 6D 
28e9c     6F 72 79 20 
28ea0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
28ea4     00          | 	byte	0
28ea5                 | LR__1810
28ea5     20 21 21 21 
28ea9     20 63 6F 72 
28ead     72 75 70 74 
28eb1     65 64 20 68 
28eb5     65 61 70 20 
28eb9     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
28ebd     00          | 	byte	0
28ebe                 | LR__1811
28ebe     00          | 	byte	0
28ebf     00          | 	byte	0
28ec0                 | LR__1812
28ec0     45 72 72 6F 
28ec4     72 20 73 65 
28ec8     74 74 69 6E 
28ecc     67 20 75 70 
28ed0     20 4D 43 50 
28ed4     32 33 30 31 
28ed8     37 3A 20 41 
28edc     43 4B 3A 25 
28ee0     64 0A       | 	byte	"Error setting up MCP23017: ACK:%d",10
28ee2     00          | 	byte	0
28ee3                 | LR__1813
28ee3     45 72 72 6F 
28ee7     72 20 61 6C 
28eeb     6C 6F 63 61 
28eef     74 69 6E 67 
28ef3     20 6E 65 77 
28ef7     20 6C 6F 63 
28efb     6B 0A       | 	byte	"Error allocating new lock",10
28efd     00          | 	byte	0
28efe                 | LR__1814
28efe     4D 75 73 74 
28f02     20 62 65 20 
28f06     69 6E 20 74 
28f0a     65 73 74 20 
28f0e     6D 6F 64 65 
28f12     20 74 6F 20 
28f16     72 75 6E 20 
28f1a     74 65 73 74 
28f1e     0A          | 	byte	"Must be in test mode to run test",10
28f1f     00          | 	byte	0
28f20                 | LR__1815
28f20     44 69 73 70 
28f24     6C 61 79 20 
28f28     6E 6F 74 20 
28f2c     66 6F 75 6E 
28f30     64          | 	byte	"Display not found"
28f31     00          | 	byte	0
28f32                 | LR__1816
28f32     45 72 72 6F 
28f36     72 3A       | 	byte	"Error:"
28f38     00          | 	byte	0
28f39                 | LR__1817
28f39     4C 6F 61 64 
28f3d     69 6E 67 20 
28f41     69 6D 61 67 
28f45     65 20       | 	byte	"Loading image "
28f47     00          | 	byte	0
28f48                 | LR__1818
28f48     2F 73 64 2F 
28f4c     69 6D 67    | 	byte	"/sd/img"
28f4f     00          | 	byte	0
28f50                 | LR__1819
28f50     2F 73 64 2F 
28f54     69 6D 67    | 	byte	"/sd/img"
28f57     00          | 	byte	0
28f58                 | LR__1820
28f58     4C 6F 61 64 
28f5c     69 6E 67 20 
28f60     69 6D 61 67 
28f64     65 20       | 	byte	"Loading image "
28f66     00          | 	byte	0
28f67                 | LR__1821
28f67     72          | 	byte	"r"
28f68     00          | 	byte	0
28f69                 | LR__1822
28f69     45 72 72 6F 
28f6d     72 20 6F 70 
28f71     65 6E 69 6E 
28f75     67 20 66 69 
28f79     6C 65 28    | 	byte	"Error opening file("
28f7c     00          | 	byte	0
28f7d                 | LR__1823
28f7d     29 3A 20    | 	byte	"): "
28f80     00          | 	byte	0
28f81                 | LR__1824
28f81     50 4C 4C 20 
28f85     69 6E 69 74 
28f89     69 61 6C 20 
28f8d     66 61 69 6C 
28f91     21          | 	byte	"PLL initial fail!"
28f92     00          | 	byte	0
28f93                 | LR__1825
28f93     53 44 52 41 
28f97     4D 20 69 6E 
28f9b     69 74 69 61 
28f9f     6C 20 66 61 
28fa3     69 6C 21    | 	byte	"SDRAM initial fail!"
28fa6     00          | 	byte	0
28fa7                 | LR__1826
28fa7     45 72 72 6F 
28fab     72 3A 20 6A 
28faf     73 6F 6E 5F 
28fb3     63 72 65 61 
28fb7     74 65 57 69 
28fbb     74 68 50 6F 
28fbf     6F 6C 3A 20 
28fc3     69 6E 76 61 
28fc7     6C 69 64 20 
28fcb     6A 73 6F 6E 
28fcf     20 73 74 72 
28fd3     69 6E 67 28 
28fd7     6D 69 73 73 
28fdb     69 6E 67 20 
28fdf     6F 70 65 6E 
28fe3     69 6E 67 20 
28fe7     7B 2F 5B 2E 
28feb     0A          | 	byte	"Error: json_createWithPool: invalid json string(missing opening {/[.",10
28fec     00          | 	byte	0
28fed                 | LR__1827
28fed     45 72 72 6F 
28ff1     72 3A 20 6A 
28ff5     73 6F 6E 5F 
28ff9     63 72 65 61 
28ffd     74 65 57 69 
29001     74 68 50 6F 
29005     6F 6C 3A 20 
29009     69 6E 76 61 
2900d     6C 69 64 20 
29011     6A 73 6F 6E 
29015     20 73 74 72 
29019     69 6E 67 2E 
2901d     0A          | 	byte	"Error: json_createWithPool: invalid json string.",10
2901e     00          | 	byte	0
2901f                 | LR__1828
2901f     00          | 	byte	0
29020     00          | 	byte	0
29021                 | LR__1829
29021     00          | 	byte	0
29022     00          | 	byte	0
29023                 | LR__1830
29023     00          | 	byte	0
29024     00          | 	byte	0
29025                 | LR__1831
29025     00          | 	byte	0
29026     00          | 	byte	0
29027                 | LR__1832
29027     77          | 	byte	"w"
29028     00          | 	byte	0
29029                 | LR__1833
29029     45 72 72 6F 
2902d     72 20 6F 70 
29031     65 6E 69 6E 
29035     67 20 66 69 
29039     6C 65 3A    | 	byte	"Error opening file:"
2903c     00          | 	byte	0
2903d                 | LR__1834
2903d     7B          | 	byte	"{"
2903e     00          | 	byte	0
2903f                 | LR__1835
2903f     4E 61 6D 65 | 	byte	"Name"
29043     00          | 	byte	0
29044                 | LR__1836
29044     77 72 69 74 
29048     69 6E 67 20 
2904c     6E 61 6D 65 
29050     3A 20       | 	byte	"writing name: "
29052     00          | 	byte	0
29053                 | LR__1837
29053     2C          | 	byte	","
29054     00          | 	byte	0
29055                 | LR__1838
29055     4E 75 6D 62 
29059     65 72       | 	byte	"Number"
2905b     00          | 	byte	0
2905c                 | LR__1839
2905c     2C          | 	byte	","
2905d     00          | 	byte	0
2905e                 | LR__1840
2905e     2C          | 	byte	","
2905f     00          | 	byte	0
29060                 | LR__1841
29060     7D          | 	byte	"}"
29061     00          | 	byte	0
29062                 | LR__1842
29062     77          | 	byte	"w"
29063     00          | 	byte	0
29064                 | LR__1843
29064     45 72 72 6F 
29068     72 20 6F 70 
2906c     65 6E 69 6E 
29070     67 20 66 69 
29074     6C 65 3A 20 | 	byte	"Error opening file: "
29078     00          | 	byte	0
29079                 | LR__1844
29079     7B          | 	byte	"{"
2907a     00          | 	byte	0
2907b                 | LR__1845
2907b     4E 61 6D 65 | 	byte	"Name"
2907f     00          | 	byte	0
29080                 | LR__1846
29080     53 61 6D 70 
29084     6C 65 20 53 
29088     65 72 69 61 
2908c     6C 20 4E 75 
29090     6D 62 65 72 | 	byte	"Sample Serial Number"
29094     00          | 	byte	0
29095                 | LR__1847
29095     2C          | 	byte	","
29096     00          | 	byte	0
29097                 | LR__1848
29097     4D 61 63 68 
2909b     69 6E 65 20 
2909f     50 72 6F 66 
290a3     69 6C 65 20 
290a7     4E 61 6D 65 | 	byte	"Machine Profile Name"
290ab     00          | 	byte	0
290ac                 | LR__1849
290ac     2C          | 	byte	","
290ad     00          | 	byte	0
290ae                 | LR__1850
290ae     53 61 6D 70 
290b2     6C 65 20 50 
290b6     72 6F 66 69 
290ba     6C 65 20 4E 
290be     61 6D 65    | 	byte	"Sample Profile Name"
290c1     00          | 	byte	0
290c2                 | LR__1851
290c2     2C          | 	byte	","
290c3     00          | 	byte	0
290c4                 | LR__1852
290c4     4D 6F 74 69 
290c8     6F 6E 20 50 
290cc     72 6F 66 69 
290d0     6C 65 20 4E 
290d4     61 6D 65    | 	byte	"Motion Profile Name"
290d7     00          | 	byte	0
290d8                 | LR__1853
290d8     2C          | 	byte	","
290d9     00          | 	byte	0
290da                 | LR__1854
290da     43 6F 6D 6D 
290de     65 6E 74    | 	byte	"Comment"
290e1     00          | 	byte	0
290e2                 | LR__1855
290e2     7D          | 	byte	"}"
290e3     00          | 	byte	0
290e4                 | LR__1856
290e4     77          | 	byte	"w"
290e5     00          | 	byte	0
290e6                 | LR__1857
290e6     45 72 72 6F 
290ea     72 20 6F 70 
290ee     65 6E 69 6E 
290f2     67 20 66 69 
290f6     6C 65 3A 20 | 	byte	"Error opening file: "
290fa     00          | 	byte	0
290fb                 | LR__1858
290fb     7B          | 	byte	"{"
290fc     00          | 	byte	0
290fd                 | LR__1859
290fd     4E 61 6D 65 | 	byte	"Name"
29101     00          | 	byte	0
29102                 | LR__1860
29102     2C          | 	byte	","
29103     00          | 	byte	0
29104                 | LR__1861
29104     4E 75 6D 62 
29108     65 72       | 	byte	"Number"
2910a     00          | 	byte	0
2910b                 | LR__1862
2910b     2C          | 	byte	","
2910c     00          | 	byte	0
2910d                 | LR__1863
2910d     22 4D 6F 74 
29111     69 6F 6E 20 
29115     53 65 74 73 
29119     22 3A 5B    | 	byte	34,"Motion Sets",34,":["
2911c     00          | 	byte	0
2911d                 | LR__1864
2911d     77 72 69 74 
29121     69 6E 67 20 
29125     6D 6F 74 69 
29129     6F 6E 20 73 
2912d     65 74 3A 20 | 	byte	"writing motion set: "
29131     00          | 	byte	0
29132                 | LR__1865
29132     22 25 73 22 | 	byte	34,"%s",34
29136     00          | 	byte	0
29137                 | LR__1866
29137     2C          | 	byte	","
29138     00          | 	byte	0
29139                 | LR__1867
29139     5D 7D       | 	byte	"]}"
2913b     00          | 	byte	0
2913c                 | LR__1868
2913c     77          | 	byte	"w"
2913d     00          | 	byte	0
2913e                 | LR__1869
2913e     45 72 72 6F 
29142     72 20 6F 70 
29146     65 6E 69 6E 
2914a     67 20 66 69 
2914e     6C 65 3A 20 | 	byte	"Error opening file: "
29152     00          | 	byte	0
29153                 | LR__1870
29153     7B          | 	byte	"{"
29154     00          | 	byte	0
29155                 | LR__1871
29155     4E 61 6D 65 | 	byte	"Name"
29159     00          | 	byte	0
2915a                 | LR__1872
2915a     2C          | 	byte	","
2915b     00          | 	byte	0
2915c                 | LR__1873
2915c     4E 75 6D 62 
29160     65 72       | 	byte	"Number"
29162     00          | 	byte	0
29163                 | LR__1874
29163     2C          | 	byte	","
29164     00          | 	byte	0
29165                 | LR__1875
29165     54 79 70 65 | 	byte	"Type"
29169     00          | 	byte	0
2916a                 | LR__1876
2916a     2C          | 	byte	","
2916b     00          | 	byte	0
2916c                 | LR__1877
2916c     45 78 65 63 
29170     75 74 69 6F 
29174     6E 73       | 	byte	"Executions"
29176     00          | 	byte	0
29177                 | LR__1878
29177     2C          | 	byte	","
29178     00          | 	byte	0
29179                 | LR__1879
29179     22 51 75 61 
2917d     72 74 65 74 
29181     73 22 3A 5B | 	byte	34,"Quartets",34,":["
29185     00          | 	byte	0
29186                 | LR__1880
29186     22 25 73 22 | 	byte	34,"%s",34
2918a     00          | 	byte	0
2918b                 | LR__1881
2918b     2C          | 	byte	","
2918c     00          | 	byte	0
2918d                 | LR__1882
2918d     5D 7D       | 	byte	"]}"
2918f     00          | 	byte	0
29190                 | LR__1883
29190     77          | 	byte	"w"
29191     00          | 	byte	0
29192                 | LR__1884
29192     45 72 72 6F 
29196     72 20 6F 70 
2919a     65 6E 69 6E 
2919e     67 20 66 69 
291a2     6C 65 3A 20 | 	byte	"Error opening file: "
291a6     00          | 	byte	0
291a7                 | LR__1885
291a7     7B          | 	byte	"{"
291a8     00          | 	byte	0
291a9                 | LR__1886
291a9     4E 61 6D 65 | 	byte	"Name"
291ad     00          | 	byte	0
291ae                 | LR__1887
291ae     2C          | 	byte	","
291af     00          | 	byte	0
291b0                 | LR__1888
291b0     46 75 6E 63 
291b4     74 69 6F 6E | 	byte	"Function"
291b8     00          | 	byte	0
291b9                 | LR__1889
291b9     2C          | 	byte	","
291ba     00          | 	byte	0
291bb                 | LR__1890
291bb     22 50 61 72 
291bf     61 6D 65 74 
291c3     65 72 73 22 
291c7     3A 5B       | 	byte	34,"Parameters",34,":["
291c9     00          | 	byte	0
291ca                 | LR__1891
291ca     25 66       | 	byte	"%f"
291cc     00          | 	byte	0
291cd                 | LR__1892
291cd     2C          | 	byte	","
291ce     00          | 	byte	0
291cf                 | LR__1893
291cf     5D 2C       | 	byte	"],"
291d1     00          | 	byte	0
291d2                 | LR__1894
291d2     44 77 65 6C 
291d6     6C          | 	byte	"Dwell"
291d7     00          | 	byte	0
291d8                 | LR__1895
291d8     7D          | 	byte	"}"
291d9     00          | 	byte	0
291da                 | LR__1896
291da     72          | 	byte	"r"
291db     00          | 	byte	0
291dc                 | LR__1897
291dc     45 72 72 6F 
291e0     72 20 6F 70 
291e4     65 6E 69 6E 
291e8     67 20 66 69 
291ec     6C 65 3A    | 	byte	"Error opening file:"
291ef     00          | 	byte	0
291f0                 | LR__1898
291f0     45 72 72 6F 
291f4     72 20 61 6C 
291f8     6C 6F 63 61 
291fc     74 69 6E 67 
29200     20 6D 65 6D 
29204     6F 72 79    | 	byte	"Error allocating memory"
29207     00          | 	byte	0
29208                 | LR__1899
29208     45 72 72 6F 
2920c     72 2C 20 74 
29210     68 65 20 20 
29214     4A 53 4F 4E 
29218     20 63 61 6E 
2921c     6E 6F 74 20 
29220     62 65 20 70 
29224     61 72 73 65 
29228     64 2E       | 	byte	"Error, the  JSON cannot be parsed."
2922a     00          | 	byte	0
2922b                 | LR__1900
2922b     4E 61 6D 65 | 	byte	"Name"
2922f     00          | 	byte	0
29230                 | LR__1901
29230     4E 75 6D 62 
29234     65 72       | 	byte	"Number"
29236     00          | 	byte	0
29237                 | LR__1902
29237     43 6F 6E 66 
2923b     69 67 75 72 
2923f     61 74 69 6F 
29243     6E          | 	byte	"Configuration"
29244     00          | 	byte	0
29245                 | LR__1903
29245     45 72 72 6F 
29249     72 2C 20 74 
2924d     68 65 20 20 
29251     4D 61 63 68 
29255     69 6E 65 20 
29259     43 6F 6E 66 
2925d     69 67 75 72 
29261     61 74 69 6F 
29265     6E 20 20 70 
29269     72 6F 70 65 
2926d     72 74 79 20 
29271     69 73 20 6E 
29275     6F 74 20 66 
29279     6F 75 6E 64 
2927d     2E          | 	byte	"Error, the  Machine Configuration  property is not found."
2927e     00          | 	byte	0
2927f                 | LR__1904
2927f     50 65 72 66 
29283     6F 72 6D 61 
29287     6E 63 65    | 	byte	"Performance"
2928a     00          | 	byte	0
2928b                 | LR__1905
2928b     45 72 72 6F 
2928f     72 2C 20 74 
29293     68 65 20 20 
29297     4D 61 63 68 
2929b     69 6E 65 20 
2929f     50 72 6F 66 
292a3     69 6C 65 20 
292a7     20 70 72 6F 
292ab     70 65 72 74 
292af     79 20 69 73 
292b3     20 6E 6F 74 
292b7     20 66 6F 75 
292bb     6E 64 2E    | 	byte	"Error, the  Machine Profile  property is not found."
292be     00          | 	byte	0
292bf                 | LR__1906
292bf     72          | 	byte	"r"
292c0     00          | 	byte	0
292c1                 | LR__1907
292c1     45 72 72 6F 
292c5     72 20 6F 70 
292c9     65 6E 69 6E 
292cd     67 20 66 69 
292d1     6C 65 3A    | 	byte	"Error opening file:"
292d4     00          | 	byte	0
292d5                 | LR__1908
292d5     4E 61 6D 65 | 	byte	"Name"
292d9     00          | 	byte	0
292da                 | LR__1909
292da     4E 75 6D 62 
292de     65 72       | 	byte	"Number"
292e0     00          | 	byte	0
292e1                 | LR__1910
292e1     4C 65 6E 67 
292e5     74 68       | 	byte	"Length"
292e7     00          | 	byte	0
292e8                 | LR__1911
292e8     53 74 72 65 
292ec     74 63 68 20 
292f0     4D 61 78    | 	byte	"Stretch Max"
292f3     00          | 	byte	0
292f4                 | LR__1912
292f4     4D 61 78 20 
292f8     56 65 6C 6F 
292fc     63 69 74 79 | 	byte	"Max Velocity"
29300     00          | 	byte	0
29301                 | LR__1913
29301     4D 61 78 20 
29305     41 63 63 65 
29309     6C 65 72 61 
2930d     74 69 6F 6E | 	byte	"Max Acceleration"
29311     00          | 	byte	0
29312                 | LR__1914
29312     4D 61 78 20 
29316     4A 65 72 6B | 	byte	"Max Jerk"
2931a     00          | 	byte	0
2931b                 | LR__1915
2931b     4D 61 78 20 
2931f     46 6F 72 63 
29323     65 20 54 65 
29327     6E 73 69 6C 
2932b     65          | 	byte	"Max Force Tensile"
2932c     00          | 	byte	0
2932d                 | LR__1916
2932d     4D 61 78 20 
29331     46 6F 72 63 
29335     65 20 43 6F 
29339     6D 70 72 65 
2933d     73 73 69 6F 
29341     6E          | 	byte	"Max Force Compression"
29342     00          | 	byte	0
29343                 | LR__1917
29343     62 65 66 6F 
29347     72 65 20 6F 
2934b     70 65 6E    | 	byte	"before open"
2934e     00          | 	byte	0
2934f                 | LR__1918
2934f     72          | 	byte	"r"
29350     00          | 	byte	0
29351                 | LR__1919
29351     61 66 74 65 
29355     72 20 6F 70 
29359     65 6E       | 	byte	"after open"
2935b     00          | 	byte	0
2935c                 | LR__1920
2935c     45 72 72 6F 
29360     72 20 6F 70 
29364     65 6E 69 6E 
29368     67 20 66 69 
2936c     6C 65 3A    | 	byte	"Error opening file:"
2936f     00          | 	byte	0
29370                 | LR__1921
29370     62 65 66 6F 
29374     72 65 20 72 
29378     65 61 64    | 	byte	"before read"
2937b     00          | 	byte	0
2937c                 | LR__1922
2937c     4E 61 6D 65 | 	byte	"Name"
29380     00          | 	byte	0
29381                 | LR__1923
29381     53 61 6D 70 
29385     6C 65 20 53 
29389     65 72 69 61 
2938d     6C 20 4E 75 
29391     6D 62 65 72 | 	byte	"Sample Serial Number"
29395     00          | 	byte	0
29396                 | LR__1924
29396     4D 61 63 68 
2939a     69 6E 65 20 
2939e     50 72 6F 66 
293a2     69 6C 65 20 
293a6     4E 61 6D 65 | 	byte	"Machine Profile Name"
293aa     00          | 	byte	0
293ab                 | LR__1925
293ab     53 61 6D 70 
293af     6C 65 20 50 
293b3     72 6F 66 69 
293b7     6C 65 20 4E 
293bb     61 6D 65    | 	byte	"Sample Profile Name"
293be     00          | 	byte	0
293bf                 | LR__1926
293bf     4D 6F 74 69 
293c3     6F 6E 20 50 
293c7     72 6F 66 69 
293cb     6C 65 20 4E 
293cf     61 6D 65    | 	byte	"Motion Profile Name"
293d2     00          | 	byte	0
293d3                 | LR__1927
293d3     72          | 	byte	"r"
293d4     00          | 	byte	0
293d5                 | LR__1928
293d5     45 72 72 6F 
293d9     72 20 6F 70 
293dd     65 6E 69 6E 
293e1     67 20 66 69 
293e5     6C 65 3A    | 	byte	"Error opening file:"
293e8     00          | 	byte	0
293e9                 | LR__1929
293e9     62 65 66 6F 
293ed     72 65 20 72 
293f1     65 61 64    | 	byte	"before read"
293f4     00          | 	byte	0
293f5                 | LR__1930
293f5     4E 61 6D 65 | 	byte	"Name"
293f9     00          | 	byte	0
293fa                 | LR__1931
293fa     4E 75 6D 62 
293fe     65 72       | 	byte	"Number"
29400     00          | 	byte	0
29401                 | LR__1932
29401     4D 6F 74 69 
29405     6F 6E 20 53 
29409     65 74 73    | 	byte	"Motion Sets"
2940c     00          | 	byte	0
2940d                 | LR__1933
2940d     72 65 61 64 
29411     69 6E 67 20 
29415     6D 6F 74 69 
29419     6F 6E 20 70 
2941d     72 6F 66 69 
29421     6C 65 3A 20 | 	byte	"reading motion profile: "
29425     00          | 	byte	0
29426                 | LR__1934
29426     72          | 	byte	"r"
29427     00          | 	byte	0
29428                 | LR__1935
29428     45 72 72 6F 
2942c     72 20 6F 70 
29430     65 6E 69 6E 
29434     67 20 66 69 
29438     6C 65 3A    | 	byte	"Error opening file:"
2943b     00          | 	byte	0
2943c                 | LR__1936
2943c     4E 61 6D 65 | 	byte	"Name"
29440     00          | 	byte	0
29441                 | LR__1937
29441     4E 75 6D 62 
29445     65 72       | 	byte	"Number"
29447     00          | 	byte	0
29448                 | LR__1938
29448     54 79 70 65 | 	byte	"Type"
2944c     00          | 	byte	0
2944d                 | LR__1939
2944d     45 78 65 63 
29451     75 74 69 6F 
29455     6E 73       | 	byte	"Executions"
29457     00          | 	byte	0
29458                 | LR__1940
29458     51 75 61 72 
2945c     74 65 74 73 | 	byte	"Quartets"
29460     00          | 	byte	0
29461                 | LR__1941
29461     72 65 61 64 
29465     69 6E 67 20 
29469     6D 6F 74 69 
2946d     6F 6E 20 73 
29471     65 74 3A 20 | 	byte	"reading motion set: "
29475     00          | 	byte	0
29476                 | LR__1942
29476     4F 70 65 6E 
2947a     69 6E 67 20 
2947e     66 69 6C 65 | 	byte	"Opening file"
29482     00          | 	byte	0
29483                 | LR__1943
29483     72          | 	byte	"r"
29484     00          | 	byte	0
29485                 | LR__1944
29485     45 72 72 6F 
29489     72 20 6F 70 
2948d     65 6E 69 6E 
29491     67 20 66 69 
29495     6C 65 3A    | 	byte	"Error opening file:"
29498     00          | 	byte	0
29499                 | LR__1945
29499     66 69 6C 65 
2949d     20 6F 70 65 
294a1     6E 65 64    | 	byte	"file opened"
294a4     00          | 	byte	0
294a5                 | LR__1946
294a5     70 61 72 73 
294a9     69 6E 67 20 
294ad     6E 61 6D 65 | 	byte	"parsing name"
294b1     00          | 	byte	0
294b2                 | LR__1947
294b2     4E 61 6D 65 | 	byte	"Name"
294b6     00          | 	byte	0
294b7                 | LR__1948
294b7     70 61 72 73 
294bb     69 6E 67 20 
294bf     46 75 6E 63 
294c3     74 69 6F 6E | 	byte	"parsing Function"
294c7     00          | 	byte	0
294c8                 | LR__1949
294c8     46 75 6E 63 
294cc     74 69 6F 6E | 	byte	"Function"
294d0     00          | 	byte	0
294d1                 | LR__1950
294d1     70 61 72 73 
294d5     69 6E 67 20 
294d9     50 61 72 61 
294dd     6D 65 74 65 
294e1     72 73       | 	byte	"parsing Parameters"
294e3     00          | 	byte	0
294e4                 | LR__1951
294e4     50 61 72 61 
294e8     6D 65 74 65 
294ec     72 73       | 	byte	"Parameters"
294ee     00          | 	byte	0
294ef                 | LR__1952
294ef     70 61 72 61 
294f3     6D 6F 75 74 
294f7     65 72 3A    | 	byte	"paramouter:"
294fa     00          | 	byte	0
294fb                 | LR__1953
294fb     20          | 	byte	" "
294fc     00          | 	byte	0
294fd                 | LR__1954
294fd     70 61 72 73 
29501     69 6E 67 20 
29505     44 77 65 6C 
29509     6C          | 	byte	"parsing Dwell"
2950a     00          | 	byte	0
2950b                 | LR__1955
2950b     44 77 65 6C 
2950f     6C          | 	byte	"Dwell"
29510     00          | 	byte	0
29511                 | LR__1956
29511     64 6F 6E 65 | 	byte	"done"
29515     00          | 	byte	0
29516                 | LR__1957
29516     4E 61 6D 65 
2951a     3A          | 	byte	"Name:"
2951b     00          | 	byte	0
2951c                 | LR__1958
2951c     4E 75 6D 62 
29520     65 72 3A    | 	byte	"Number:"
29523     00          | 	byte	0
29524                 | LR__1959
29524     4E 61 6D 65 
29528     3A          | 	byte	"Name:"
29529     00          | 	byte	0
2952a                 | LR__1960
2952a     4E 75 6D 62 
2952e     65 72 3A    | 	byte	"Number:"
29531     00          | 	byte	0
29532                 | LR__1961
29532     53 65 74 73 
29536     3A          | 	byte	"Sets:"
29537     00          | 	byte	0
29538                 | LR__1962
29538     46 6F 72 63 
2953c     65 20 67 61 
29540     75 67 65 20 
29544     6E 6F 74 20 
29548     72 65 73 70 
2954c     6F 6E 64 69 
29550     6E 67       | 	byte	"Force gauge not responding"
29552     00          | 	byte	0
29553                 | LR__1963
29553     45 72 72 6F 
29557     72 3A 20 54 
2955b     6F 6F 20 6D 
2955f     61 6E 79 20 
29563     63 68 69 6C 
29567     64 72 65 6E | 	byte	"Error: Too many children"
2956b     00          | 	byte	0
2956c                 | LR__1964
2956c     00          | 	byte	0
2956d     00          | 	byte	0
2956e                 | LR__1965
2956e     6B 65 79 62 
29572     6F 61 72 64 
29576     20 72 75 6E 
2957a     6E 69 6E 67 
2957e     3A          | 	byte	"keyboard running:"
2957f     00          | 	byte	0
29580                 | LR__1966
29580     00          | 	byte	0
29581     00          | 	byte	0
29582                 | LR__1967
29582     53 74 61 72 
29586     74 69 6E 67 
2958a     20 6E 61 76 
2958e     69 67 61 74 
29592     69 6F 6E 20 
29596     70 61 67 65 | 	byte	"Starting navigation page"
2959a     00          | 	byte	0
2959b                 | LR__1968
2959b     64 6F 6E 65 
2959f     20 64 72 61 
295a3     77 69 6E 67 
295a7     20 70 61 67 
295ab     65          | 	byte	"done drawing page"
295ac     00          | 	byte	0
295ad                 | LR__1969
295ad     2D 2D 2D 2D 
295b1     2D 2D 2D 2D 
295b5     2D 2D 2D 2D 
295b9     2D 2D 2D 2D 
295bd     2D          | 	byte	"-----------------"
295be     00          | 	byte	0
295bf                 | LR__1970
295bf     54 45 4D 50 
295c3     20 44 49 53 
295c7     50 4C 41 59 
295cb     3A 20       | 	byte	"TEMP DISPLAY: "
295cd     00          | 	byte	0
295ce                 | LR__1971
295ce     2D 2D 2D 2D 
295d2     2D 2D 2D 2D 
295d6     2D 2D 2D 2D 
295da     2D 2D 2D 2D 
295de     2D          | 	byte	"-----------------"
295df     00          | 	byte	0
295e0                 | LR__1972
295e0     25 2E 32 66 | 	byte	"%.2f"
295e4     00          | 	byte	0
295e5                 | LR__1973
295e5     25 2E 32 66 | 	byte	"%.2f"
295e9     00          | 	byte	0
295ea                 | LR__1974
295ea     50 6F 73 69 
295ee     74 69 6F 6E | 	byte	"Position"
295f2     00          | 	byte	0
295f3                 | LR__1975
295f3     6D 6D       | 	byte	"mm"
295f5     00          | 	byte	0
295f6                 | LR__1976
295f6     46 6F 72 63 
295fa     65          | 	byte	"Force"
295fb     00          | 	byte	0
295fc                 | LR__1977
295fc     4E          | 	byte	"N"
295fd     00          | 	byte	0
295fe                 | LR__1978
295fe     25 30 2E 33 
29602     66 6D 6D    | 	byte	"%0.3fmm"
29605     00          | 	byte	0
29606                 | LR__1979
29606     25 30 2E 33 
2960a     66 4E       | 	byte	"%0.3fN"
2960c     00          | 	byte	0
2960d                 | LR__1980
2960d     45 72 72 6F 
29611     72 3A 20    | 	byte	"Error: "
29614     00          | 	byte	0
29615                 | LR__1981
29615     46 69 6C 65 
29619     3A 20       | 	byte	"File: "
2961b     00          | 	byte	0
2961c                 | LR__1982
2961c     73 65 6C 65 
29620     63 74 69 6F 
29624     6E 3A 20    | 	byte	"selection: "
29627     00          | 	byte	0
29628                 | LR__1983
29628     64 6F 6E 65 
2962c     20 64 72 61 
29630     77 69 6E 67 | 	byte	"done drawing"
29634     00          | 	byte	0
29635                 | LR__1984
29635     00          | 	byte	0
29636     00          | 	byte	0
29637                 | LR__1985
29637     2F          | 	byte	"/"
29638     00          | 	byte	0
29639                 | LR__1986
29639     50 61 74 68 
2963d     3A          | 	byte	"Path:"
2963e     00          | 	byte	0
2963f                 | LR__1987
2963f     61 64 64 69 
29643     6E 67 20 6F 
29647     70 74 69 6F 
2964b     6E          | 	byte	"adding option"
2964c     00          | 	byte	0
2964d                 | LR__1988
2964d     64 6F 6E 65 
29651     20 61 64 64 
29655     69 6E 67 20 
29659     6F 70 74 69 
2965d     6F 6E       | 	byte	"done adding option"
2965f     00          | 	byte	0
29660                 | LR__1989
29660     73 65 6C 65 
29664     63 74 65 64 
29668     3A 20       | 	byte	"selected: "
2966a     00          | 	byte	0
2966b                 | LR__1990
2966b     4C 69 6E 65 | 	byte	"Line"
2966f     00          | 	byte	0
29670                 | LR__1991
29670     64 69 73 74 
29674     61 6E 63 65 | 	byte	"distance"
29678     00          | 	byte	0
29679                 | LR__1992
29679     73 74 72 61 
2967d     69 6E 20 72 
29681     61 74 65    | 	byte	"strain rate"
29684     00          | 	byte	0
29685                 | LR__1993
29685     53 69 67 6D 
29689     6F 69 64    | 	byte	"Sigmoid"
2968c     00          | 	byte	0
2968d                 | LR__1994
2968d     64 69 73 74 
29691     61 6E 63 65 | 	byte	"distance"
29695     00          | 	byte	0
29696                 | LR__1995
29696     73 74 72 61 
2969a     69 6E 20 72 
2969e     61 74 65    | 	byte	"strain rate"
296a1     00          | 	byte	0
296a2                 | LR__1996
296a2     65 72 72 6F 
296a6     72          | 	byte	"error"
296a7     00          | 	byte	0
296a8                 | LR__1997
296a8     00          | 	byte	0
296a9     00          | 	byte	0
296aa                 | LR__1998
296aa     2F 73 64    | 	byte	"/sd"
296ad     00          | 	byte	0
296ae                 | LR__1999
296ae     00          | 	byte	0
296af     00          | 	byte	0
296b0                 | LR__2000
296b0     50 6F 73 69 
296b4     74 69 6F 6E 
296b8     20 56 73 2E 
296bc     20 54 69 6D 
296c0     65          | 	byte	"Position Vs. Time"
296c1     00          | 	byte	0
296c2                 | LR__2001
296c2     6D 6D       | 	byte	"mm"
296c4     00          | 	byte	0
296c5                 | LR__2002
296c5     00          | 	byte	0
296c6     00          | 	byte	0
296c7                 | LR__2003
296c7     54 65 73 74 
296cb     20 70 72 6F 
296cf     66 69 6C 65 
296d3     20 70 61 67 
296d7     65 20 72 75 
296db     6E 6E 69 6E 
296df     67          | 	byte	"Test profile page running"
296e0     00          | 	byte	0
296e1                 | LR__2004
296e1     4D 6F 64 65 
296e5     3A          | 	byte	"Mode:"
296e6     00          | 	byte	0
296e7                 | LR__2005
296e7     51 75 61 72 
296eb     74 65 74    | 	byte	"Quartet"
296ee     00          | 	byte	0
296ef                 | LR__2006
296ef     51 75 61 72 
296f3     74 65 74 20 
296f7     6E 61 6D 65 
296fb     3A          | 	byte	"Quartet name:"
296fc     00          | 	byte	0
296fd                 | LR__2007
296fd     51 75 61 72 
29701     74 65 74    | 	byte	"Quartet"
29704     00          | 	byte	0
29705                 | LR__2008
29705     4E 61 6D 65 
29709     3A 20 25 73 | 	byte	"Name: %s"
2970d     00          | 	byte	0
2970e                 | LR__2009
2970e     4E 61 6D 65 
29712     3A          | 	byte	"Name:"
29713     00          | 	byte	0
29714                 | LR__2010
29714     46 75 6E 63 
29718     74 69 6F 6E 
2971c     3A 20 25 73 | 	byte	"Function: %s"
29720     00          | 	byte	0
29721                 | LR__2011
29721     20 20 20 20 
29725     25 73 3A 20 
29729     25 30 2E 33 
2972d     66          | 	byte	"    %s: %0.3f"
2972e     00          | 	byte	0
2972f                 | LR__2012
2972f     44 77 65 6C 
29733     6C 20 28 6D 
29737     73 29 3A 20 
2973b     25 30 2E 33 
2973f     66          | 	byte	"Dwell (ms): %0.3f"
29740     00          | 	byte	0
29741                 | LR__2013
29741     53 65 74    | 	byte	"Set"
29744     00          | 	byte	0
29745                 | LR__2014
29745     53 65 74    | 	byte	"Set"
29748     00          | 	byte	0
29749                 | LR__2015
29749     4E 61 6D 65 
2974d     3A 20 25 73 | 	byte	"Name: %s"
29751     00          | 	byte	0
29752                 | LR__2016
29752     4E 75 6D 62 
29756     65 72 3A 20 
2975a     25 64       | 	byte	"Number: %d"
2975c     00          | 	byte	0
2975d                 | LR__2017
2975d     54 79 70 65 
29761     3A 20 25 73 | 	byte	"Type: %s"
29765     00          | 	byte	0
29766                 | LR__2018
29766     45 78 65 63 
2976a     75 74 69 6F 
2976e     6E 73 3A 20 
29772     25 64       | 	byte	"Executions: %d"
29774     00          | 	byte	0
29775                 | LR__2019
29775     25 73       | 	byte	"%s"
29777     00          | 	byte	0
29778                 | LR__2020
29778     4E 65 77 20 
2977c     51 75 61 72 
29780     74 65 74    | 	byte	"New Quartet"
29783     00          | 	byte	0
29784                 | LR__2021
29784     53 74 61 72 
29788     74 69 6E 67 
2978c     20 4D 41 44 
29790     20 50 32    | 	byte	"Starting MAD P2"
29793     00          | 	byte	0
29794                 | LR__2022
29794     45 72 72 6F 
29798     72 20 73 74 
2979c     61 72 74 69 
297a0     6E 67 20 64 
297a4     69 73 70 6C 
297a8     61 79       | 	byte	"Error starting display"
297aa     00          | 	byte	0
297ab                 | LR__2023
297ab     44 69 73 70 
297af     6C 61 79 20 
297b3     49 6E 69 74 
297b7     69 61 6C 69 
297bb     7A 65 64 21 | 	byte	"Display Initialized!"
297bf     00          | 	byte	0
297c0                 | LR__2024
297c0     4C 6F 61 64 
297c4     65 64 20 4D 
297c8     61 63 68 69 
297cc     6E 65 20 50 
297d0     72 6F 66 69 
297d4     6C 65       | 	byte	"Loaded Machine Profile"
297d6     00          | 	byte	0
297d7                 | LR__2025
297d7     41 6C 6C 20 
297db     49 6D 61 67 
297df     65 73 20 4C 
297e3     6F 61 64 65 
297e7     64          | 	byte	"All Images Loaded"
297e8     00          | 	byte	0
297e9                 | LR__2026
297e9     4D 6F 6E 69 
297ed     74 6F 72 20 
297f1     53 74 61 72 
297f5     74 65 64    | 	byte	"Monitor Started"
297f8     00          | 	byte	0
297f9                 | LR__2027
297f9     4D 6F 6E 69 
297fd     74 6F 72 20 
29801     46 61 69 6C 
29805     65 64 2C 20 
29809     70 6C 65 61 
2980d     73 65 20 72 
29811     65 73 65 74 | 	byte	"Monitor Failed, please reset"
29815     00          | 	byte	0
29816                 | LR__2028
29816     43 6F 6E 74 
2981a     72 6F 6C 53 
2981e     79 73 74 65 
29822     6D 20 53 74 
29826     61 72 74 65 
2982a     64          | 	byte	"ControlSystem Started"
2982b     00          | 	byte	0
2982c                 | LR__2029
2982c     43 6F 6E 74 
29830     72 6F 6C 53 
29834     79 73 74 65 
29838     6D 20 46 61 
2983c     69 6C 65 64 
29840     2C 20 70 6C 
29844     65 61 73 65 
29848     20 72 65 73 
2984c     65 74       | 	byte	"ControlSystem Failed, please reset"
2984e     00          | 	byte	0
2984f                 | LR__2030
2984f     4D 61 63 68 
29853     69 6E 65 20 
29857     70 72 6F 70 
2985b     66 69 6C 65 
2985f     20 73 69 7A 
29863     65 3A       | 	byte	"Machine propfile size:"
29865     00          | 	byte	0
29866                 | LR__2031
29866     4C 6F 61 64 
2986a     69 6E 67 20 
2986e     73 74 61 74 
29872     75 73 20 70 
29876     61 67 65    | 	byte	"Loading status page"
29879     00          | 	byte	0
2987a                 | LR__2032
2987a     4C 65 61 76 
2987e     69 6E 67 20 
29882     73 74 61 74 
29886     75 73 20 70 
2988a     61 67 65    | 	byte	"Leaving status page"
2988d     00          | 	byte	0
2988e                 | LR__2033
2988e     4C 6F 61 64 
29892     69 6E 67 20 
29896     6D 61 6E 75 
2989a     61 6C 20 70 
2989e     61 67 65    | 	byte	"Loading manual page"
298a1     00          | 	byte	0
298a2                 | LR__2034
298a2     4C 65 61 76 
298a6     69 6E 67 20 
298aa     6D 61 6E 75 
298ae     61 6C 20 70 
298b2     61 67 65    | 	byte	"Leaving manual page"
298b5     00          | 	byte	0
298b6                 | LR__2035
298b6     4C 6F 61 64 
298ba     69 6E 67 20 
298be     61 75 74 6F 
298c2     6D 61 74 69 
298c6     63 20 70 61 
298ca     67 65 2E 2E 
298ce     2E          | 	byte	"Loading automatic page..."
298cf     00          | 	byte	0
298d0                 | LR__2036
298d0     4C 65 61 76 
298d4     69 6E 67 20 
298d8     61 75 74 6F 
298dc     6D 61 74 69 
298e0     63 20 70 61 
298e4     67 65       | 	byte	"Leaving automatic page"
298e6     00          | 	byte	0
298e7                 | LR__2037
298e7     4C 6F 61 64 
298eb     69 6E 67 20 
298ef     66 6F 72 63 
298f3     65 20 63 61 
298f7     6C 69 62 72 
298fb     61 74 69 6F 
298ff     6E 20 70 61 
29903     67 65 2E 2E 
29907     2E          | 	byte	"Loading force calibration page..."
29908     00          | 	byte	0
29909                 | LR__2038
29909     4C 65 61 76 
2990d     69 6E 67 20 
29911     66 6F 72 63 
29915     65 20 63 61 
29919     6C 69 62 72 
2991d     61 74 69 6F 
29921     6E 20 70 61 
29925     67 65       | 	byte	"Leaving force calibration page"
29927     00          | 	byte	0
29928                 | LR__2039
29928     4C 6F 61 64 
2992c     69 6E 67 20 
29930     73 65 74 74 
29934     69 6E 67 73 
29938     20 70 61 67 
2993c     65 2E 2E 2E | 	byte	"Loading settings page..."
29940     00          | 	byte	0
29941                 | LR__2040
29941     4C 65 61 76 
29945     69 6E 67 20 
29949     73 65 74 74 
2994d     69 6E 67 73 
29951     20 70 61 67 
29955     65          | 	byte	"Leaving settings page"
29956     00          | 	byte	0
29957                 | LR__2041
29957     53 65 6C 65 
2995b     63 74 69 6E 
2995f     67 20 6E 65 
29963     77 20 70 61 
29967     67 65       | 	byte	"Selecting new page"
29969     00          | 	byte	0
2996a                 | LR__2042
2996a     2F 73 64    | 	byte	"/sd"
2996d     00          | 	byte	0
2996e                 | LR__2043
2996e     6B 65 79 62 
29972     6F 61 72 64 
29976     2E 62 69 6E | 	byte	"keyboard.bin"
2997a     00          | 	byte	0
2997b                 | LR__2044
2997b     4E 61 6D 65 
2997f     3A          | 	byte	"Name:"
29980     00          | 	byte	0
29981                 | LR__2045
29981     6D 61 6E 75 
29985     61 6C 2E 62 
29989     69 6E       | 	byte	"manual.bin"
2998b     00          | 	byte	0
2998c                 | LR__2046
2998c     61 75 74 6F 
29990     2E 62 69 6E | 	byte	"auto.bin"
29994     00          | 	byte	0
29995                 | LR__2047
29995     73 74 61 74 
29999     75 73 2E 62 
2999d     69 6E       | 	byte	"status.bin"
2999f     00          | 	byte	0
299a0                 | LR__2048
299a0     63 61 6C 69 
299a4     62 2E 62 69 
299a8     6E          | 	byte	"calib.bin"
299a9     00          | 	byte	0
299aa                 | LR__2049
299aa     66 69 6C 65 
299ae     73 2E 62 69 
299b2     6E          | 	byte	"files.bin"
299b3     00          | 	byte	0
299b4                 | LR__2050
299b4     6E 61 76 2E 
299b8     62 69 6E    | 	byte	"nav.bin"
299bb     00          | 	byte	0
299bc                 | LR__2051
299bc     63 68 65 63 
299c0     6B 2E 62 69 
299c4     6E          | 	byte	"check.bin"
299c5     00          | 	byte	0
299c6                 | LR__2052
299c6     65 78 2E 62 
299ca     69 6E       | 	byte	"ex.bin"
299cc     00          | 	byte	0
299cd                 | LR__2053
299cd     61 64 64 2E 
299d1     62 69 6E    | 	byte	"add.bin"
299d4     00          | 	byte	0
299d5                 | LR__2054
299d5     67 61 72 62 
299d9     61 67 65 2E 
299dd     62 69 6E    | 	byte	"garbage.bin"
299e0     00          | 	byte	0
299e1                 | LR__2055
299e1     66 69 6C 65 
299e5     2E 62 69 6E | 	byte	"file.bin"
299e9     00          | 	byte	0
299ea                 | LR__2056
299ea     66 6F 6C 64 
299ee     65 72 2E 62 
299f2     69 6E       | 	byte	"folder.bin"
299f4     00          | 	byte	0
299f5                 | LR__2057
299f5     4C 6F 61 64 
299f9     69 6E 67 20 
299fd     49 6D 61 67 
29a01     65 3A 20 6E 
29a05     61 76       | 	byte	"Loading Image: nav"
29a07     00          | 	byte	0
29a08                 | LR__2058
29a08     4C 6F 61 64 
29a0c     69 6E 67 20 
29a10     49 6D 61 67 
29a14     65 3A 20 6D 
29a18     61 6E 75 61 
29a1c     6C 20 70 61 
29a20     67 65       | 	byte	"Loading Image: manual page"
29a22     00          | 	byte	0
29a23                 | LR__2059
29a23     4C 6F 61 64 
29a27     69 6E 67 20 
29a2b     49 6D 61 67 
29a2f     65 3A 20 61 
29a33     75 74 6F 6D 
29a37     61 74 69 63 
29a3b     20 70 61 67 
29a3f     65          | 	byte	"Loading Image: automatic page"
29a40     00          | 	byte	0
29a41                 | LR__2060
29a41     4C 6F 61 64 
29a45     69 6E 67 20 
29a49     49 6D 61 67 
29a4d     65 3A 20 73 
29a51     74 61 74 75 
29a55     73 20 70 61 
29a59     67 65       | 	byte	"Loading Image: status page"
29a5b     00          | 	byte	0
29a5c                 | LR__2061
29a5c     4C 6F 61 64 
29a60     69 6E 67 20 
29a64     49 6D 61 67 
29a68     65 3A 20 63 
29a6c     61 6C 69 62 
29a70     72 61 74 65 
29a74     20 70 61 67 
29a78     65          | 	byte	"Loading Image: calibrate page"
29a79     00          | 	byte	0
29a7a                 | LR__2062
29a7a     4C 6F 61 64 
29a7e     69 6E 67 20 
29a82     49 6D 61 67 
29a86     65 3A 20 66 
29a8a     69 6C 65 73 
29a8e     20 70 61 67 
29a92     65          | 	byte	"Loading Image: files page"
29a93     00          | 	byte	0
29a94                 | LR__2063
29a94     4C 6F 61 64 
29a98     69 6E 67 20 
29a9c     49 6D 61 67 
29aa0     65 3A 20 63 
29aa4     68 65 63 6B 
29aa8     20 73 74 61 
29aac     74 75 73    | 	byte	"Loading Image: check status"
29aaf     00          | 	byte	0
29ab0                 | LR__2064
29ab0     4C 6F 61 64 
29ab4     69 6E 67 20 
29ab8     49 6D 61 67 
29abc     65 3A 20 66 
29ac0     61 69 6C 20 
29ac4     73 74 61 74 
29ac8     75 73       | 	byte	"Loading Image: fail status"
29aca     00          | 	byte	0
29acb                 | LR__2065
29acb     4C 6F 61 64 
29acf     69 6E 67 20 
29ad3     49 6D 61 67 
29ad7     65 3A 20 61 
29adb     64 64 20 73 
29adf     74 61 74 75 
29ae3     73          | 	byte	"Loading Image: add status"
29ae4     00          | 	byte	0
29ae5                 | LR__2066
29ae5     4C 6F 61 64 
29ae9     69 6E 67 20 
29aed     49 6D 61 67 
29af1     65 3A 20 67 
29af5     61 72 62 61 
29af9     67 65 20 73 
29afd     74 61 74 75 
29b01     73          | 	byte	"Loading Image: garbage status"
29b02     00          | 	byte	0
29b03                 | LR__2067
29b03     4C 6F 61 64 
29b07     69 6E 67 20 
29b0b     49 6D 61 67 
29b0f     65 3A 20 66 
29b13     69 6C 65 20 
29b17     73 74 61 74 
29b1b     75 73       | 	byte	"Loading Image: file status"
29b1d     00          | 	byte	0
29b1e                 | LR__2068
29b1e     4C 6F 61 64 
29b22     69 6E 67 20 
29b26     49 6D 61 67 
29b2a     65 3A 20 66 
29b2e     6F 6C 64 65 
29b32     72 20 73 74 
29b36     61 74 75 73 | 	byte	"Loading Image: folder status"
29b3a     00          | 	byte	0
29b3b                 | LR__2069
29b3b     2F 73 64 2F 
29b3f     73 65 74 74 
29b43     69 6E 67 73 | 	byte	"/sd/settings"
29b47     00          | 	byte	0
29b48                 | LR__2070
29b48     57 72 69 74 
29b4c     69 6E 67 20 
29b50     6D 61 63 68 
29b54     69 6E 65 20 
29b58     70 72 6F 66 
29b5c     69 6C 65 20 
29b60     74 6F 20 73 
29b64     65 74 74 69 
29b68     6E 67 73 20 
29b6c     66 69 6C 65 | 	byte	"Writing machine profile to settings file"
29b70     00          | 	byte	0
29b71                 | LR__2071
29b71     2F 73 64 2F 
29b75     73 65 74 74 
29b79     69 6E 67 73 
29b7d     2F 44 65 66 
29b81     61 75 6C 74 
29b85     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
29b89     00          | 	byte	0
29b8a                 | LR__2072
29b8a     2F 73 64 2F 
29b8e     73 65 74 74 
29b92     69 6E 67 73 
29b96     2F 44 65 66 
29b9a     61 75 6C 74 
29b9e     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
29ba2     00          | 	byte	0
29ba3                 | LR__2073
29ba3     4F 70 65 6E 
29ba7     69 6E 67 20 
29bab     65 78 69 73 
29baf     74 69 6E 67 
29bb3     20 70 72 6F 
29bb7     66 69 6C 65 | 	byte	"Opening existing profile"
29bbb     00          | 	byte	0
29bbc                 | LR__2074
29bbc     2F 73 64 2F 
29bc0     73 65 74 74 
29bc4     69 6E 67 73 
29bc8     2F 44 65 66 
29bcc     61 75 6C 74 
29bd0     2E 6D 63 70 | 	byte	"/sd/settings/Default.mcp"
29bd4     00          | 	byte	0
29bd5                 | LR__2075
29bd5     4E 6F 20 6D 
29bd9     61 63 68 69 
29bdd     6E 65 20 70 
29be1     72 6F 66 69 
29be5     6C 65 20 66 
29be9     6F 75 6E 64 
29bed     2C 20 63 72 
29bf1     65 61 74 69 
29bf5     6E 67 20 64 
29bf9     65 66 61 75 
29bfd     6C 74       | 	byte	"No machine profile found, creating default"
29bff     00          | 	byte	0
29c00                 | LR__2076
29c00     54 65 6E 73 
29c04     69 6C 65 5F 
29c08     54 65 73 74 
29c0c     5F 31       | 	byte	"Tensile_Test_1"
29c0e     00          | 	byte	0
29c0f                 | LR__2077
29c0f     36 34 30 2D 
29c13     44 53 54    | 	byte	"640-DST"
29c16     00          | 	byte	0
29c17                 | LR__2078
29c17     51 75 61 64 
29c1b     45 6E 63 6F 
29c1f     64 65 72    | 	byte	"QuadEncoder"
29c22     00          | 	byte	0
29c23                 | LR__2079
29c23     44 53 32 2D 
29c27     35 4E       | 	byte	"DS2-5N"
29c29     00          | 	byte	0
29c2a                 | LR__2080
29c2a     2F 73 64 2F 
29c2e     70 72 6F 66 
29c32     69 6C 65 73 | 	byte	"/sd/profiles"
29c36     00          | 	byte	0
29c37                 | LR__2081
29c37     2F 73 64 2F 
29c3b     70 72 6F 66 
29c3f     69 6C 65 73 
29c43     2F 54 65 73 
29c47     74 31 2E 6D 
29c4b     70          | 	byte	"/sd/profiles/Test1.mp"
29c4c     00          | 	byte	0
29c4d                 | LR__2082
29c4d     2F 73 64 2F 
29c51     70 72 6F 66 
29c55     69 6C 65 73 
29c59     2F 53 65 74 
29c5d     5F 31 2E 73 
29c61     65 74       | 	byte	"/sd/profiles/Set_1.set"
29c63     00          | 	byte	0
29c64                 | LR__2083
29c64     2F 73 64 2F 
29c68     70 72 6F 66 
29c6c     69 6C 65 73 
29c70     2F 71 72 74 
29c74     31 2E 71 72 
29c78     74          | 	byte	"/sd/profiles/qrt1.qrt"
29c79     00          | 	byte	0
29c7a                 | LR__2084
29c7a     2F 73 64 2F 
29c7e     70 72 6F 66 
29c82     69 6C 65 73 
29c86     2F 71 72 74 
29c8a     32 2E 71 72 
29c8e     74          | 	byte	"/sd/profiles/qrt2.qrt"
29c8f     00          | 	byte	0
29c90                 | LR__2085
29c90     2F 73 64 2F 
29c94     70 72 6F 66 
29c98     69 6C 65 73 
29c9c     2F 53 65 74 
29ca0     5F 32 2E 73 
29ca4     65 74       | 	byte	"/sd/profiles/Set_2.set"
29ca6     00          | 	byte	0
29ca7                 | LR__2086
29ca7     2F 73 64 2F 
29cab     70 72 6F 66 
29caf     69 6C 65 73 
29cb3     2F 71 72 74 
29cb7     33 2E 71 72 
29cbb     74          | 	byte	"/sd/profiles/qrt3.qrt"
29cbc     00          | 	byte	0
29cbd                 | LR__2087
29cbd     2F 73 64 2F 
29cc1     70 72 6F 66 
29cc5     69 6C 65 73 
29cc9     2F 71 72 74 
29ccd     34 2E 71 72 
29cd1     74          | 	byte	"/sd/profiles/qrt4.qrt"
29cd2     00          | 	byte	0
29cd3                 | LR__2088
29cd3     45 72 72 6F 
29cd7     72 20 73 74 
29cdb     61 72 74 69 
29cdf     6E 67 20 64 
29ce3     69 73 70 6C 
29ce7     61 79 3A    | 	byte	"Error starting display:"
29cea     00          | 	byte	0
29ceb                 | LR__2089
29ceb     22 25 73 22 
29cef     3A 25 66    | 	byte	34,"%s",34,":%f"
29cf2     00          | 	byte	0
29cf3                 | LR__2090
29cf3     22 25 73 22 
29cf7     3A 25 64    | 	byte	34,"%s",34,":%d"
29cfa     00          | 	byte	0
29cfb                 | LR__2091
29cfb     22 25 73 22 
29cff     3A 22 25 73 
29d03     22          | 	byte	34,"%s",34,":",34,"%s",34
29d04     00          | 	byte	0
29d05                 | LR__2092
29d05     45 72 72 6F 
29d09     72 2C 20 74 
29d0d     68 65 20    | 	byte	"Error, the "
29d10     00          | 	byte	0
29d11                 | LR__2093
29d11     20 70 72 6F 
29d15     70 65 72 74 
29d19     79 20 69 73 
29d1d     20 6E 6F 74 
29d21     20 66 6F 75 
29d25     6E 64 2E    | 	byte	" property is not found."
29d28     00          | 	byte	0
29d29                 | LR__2094
29d29     45 72 72 6F 
29d2d     72 2C 20 74 
29d31     68 65 20    | 	byte	"Error, the "
29d34     00          | 	byte	0
29d35                 | LR__2095
29d35     20 70 72 6F 
29d39     70 65 72 74 
29d3d     79 20 69 73 
29d41     20 6E 6F 74 
29d45     20 66 6F 75 
29d49     6E 64 2E    | 	byte	" property is not found."
29d4c     00          | 	byte	0
29d4d                 | LR__2096
29d4d     45 72 72 6F 
29d51     72 2C 20 74 
29d55     68 65 20    | 	byte	"Error, the "
29d58     00          | 	byte	0
29d59                 | LR__2097
29d59     20 70 72 6F 
29d5d     70 65 72 74 
29d61     79 20 69 73 
29d65     20 6E 6F 74 
29d69     20 66 6F 75 
29d6d     6E 64 2E    | 	byte	" property is not found."
29d70     00          | 	byte	0
29d71                 | LR__2098
29d71     70 61 72 61 
29d75     6D 3A       | 	byte	"param:"
29d77     00          | 	byte	0
29d78                 | LR__2099
29d78     20          | 	byte	" "
29d79     00          | 	byte	0
29d7a                 | LR__2100
29d7a     4D 6F 74 6F 
29d7e     72 20 54 79 
29d82     70 65       | 	byte	"Motor Type"
29d84     00          | 	byte	0
29d85                 | LR__2101
29d85     4D 61 78 20 
29d89     4D 6F 74 6F 
29d8d     72 20 52 50 
29d91     4D          | 	byte	"Max Motor RPM"
29d92     00          | 	byte	0
29d93                 | LR__2102
29d93     4D 61 78 20 
29d97     4D 6F 74 6F 
29d9b     72 20 54 6F 
29d9f     72 71 75 65 | 	byte	"Max Motor Torque"
29da3     00          | 	byte	0
29da4                 | LR__2103
29da4     47 65 61 72 
29da8     20 44 69 61 
29dac     6D 65 74 65 
29db0     72          | 	byte	"Gear Diameter"
29db1     00          | 	byte	0
29db2                 | LR__2104
29db2     47 65 61 72 
29db6     20 50 69 74 
29dba     63 68       | 	byte	"Gear Pitch"
29dbc     00          | 	byte	0
29dbd                 | LR__2105
29dbd     53 79 73 74 
29dc1     65 6D 20 49 
29dc5     6E 74 65 72 
29dc9     74 69 61    | 	byte	"System Intertia"
29dcc     00          | 	byte	0
29dcd                 | LR__2106
29dcd     53 74 61 74 
29dd1     69 63 20 54 
29dd5     6F 72 71 75 
29dd9     65          | 	byte	"Static Torque"
29dda     00          | 	byte	0
29ddb                 | LR__2107
29ddb     4C 6F 61 64 | 	byte	"Load"
29ddf     00          | 	byte	0
29de0                 | LR__2108
29de0     50 6F 73 69 
29de4     74 69 6F 6E 
29de8     20 45 6E 63 
29dec     6F 64 65 72 
29df0     20 54 79 70 
29df4     65          | 	byte	"Position Encoder Type"
29df5     00          | 	byte	0
29df6                 | LR__2109
29df6     50 6F 73 69 
29dfa     74 69 6F 6E 
29dfe     20 45 6E 63 
29e02     6F 64 65 72 
29e06     20 53 63 61 
29e0a     6C 65 20 46 
29e0e     61 63 74 6F 
29e12     72          | 	byte	"Position Encoder Scale Factor"
29e13     00          | 	byte	0
29e14                 | LR__2110
29e14     46 6F 72 63 
29e18     65 20 47 61 
29e1c     75 67 65    | 	byte	"Force Gauge"
29e1f     00          | 	byte	0
29e20                 | LR__2111
29e20     46 6F 72 63 
29e24     65 20 47 61 
29e28     75 67 65 20 
29e2c     53 63 61 6C 
29e30     65 20 46 61 
29e34     63 74 6F 72 | 	byte	"Force Gauge Scale Factor"
29e38     00          | 	byte	0
29e39                 | LR__2112
29e39     46 6F 72 63 
29e3d     65 20 47 61 
29e41     75 67 65 20 
29e45     5A 65 72 6F 
29e49     20 46 61 63 
29e4d     74 6F 72    | 	byte	"Force Gauge Zero Factor"
29e50     00          | 	byte	0
29e51                 | LR__2113
29e51     50 6F 73 69 
29e55     74 69 6F 6E 
29e59     20 4D 69 6E 
29e5d     69 6D 75 6D | 	byte	"Position Minimum"
29e61     00          | 	byte	0
29e62                 | LR__2114
29e62     50 6F 73 69 
29e66     74 69 6F 6E 
29e6a     20 4D 61 78 
29e6e     69 6D 75 6D | 	byte	"Position Maximum"
29e72     00          | 	byte	0
29e73                 | LR__2115
29e73     56 65 6C 6F 
29e77     63 69 74 79 
29e7b     20 4D 61 78 
29e7f     69 6D 75 6D | 	byte	"Velocity Maximum"
29e83     00          | 	byte	0
29e84                 | LR__2116
29e84     41 63 63 65 
29e88     6C 65 72 61 
29e8c     74 69 6F 6E 
29e90     20 4D 61 78 
29e94     69 6D 75 6D | 	byte	"Acceleration Maximum"
29e98     00          | 	byte	0
29e99                 | LR__2117
29e99     46 6F 72 63 
29e9d     65 20 54 65 
29ea1     6E 73 69 6C 
29ea5     65 20 4D 61 
29ea9     78 69 6D 75 
29ead     6D          | 	byte	"Force Tensile Maximum"
29eae     00          | 	byte	0
29eaf                 | LR__2118
29eaf     46 6F 72 63 
29eb3     65 20 43 6F 
29eb7     6D 70 72 65 
29ebb     73 73 69 6F 
29ebf     6E 20 4D 61 
29ec3     78 69 6D 75 
29ec7     6D          | 	byte	"Force Compression Maximum"
29ec8     00          | 	byte	0
29ec9                 | LR__2119
29ec9     46 6F 72 63 
29ecd     65 20 67 61 
29ed1     75 67 65 20 
29ed5     4E 65 75 74 
29ed9     72 61 6C 20 
29edd     4F 66 66 73 
29ee1     65 74       | 	byte	"Force gauge Neutral Offset"
29ee3     00          | 	byte	0
29ee4                 | LR__2120
29ee4     22 43 6F 6E 
29ee8     66 69 67 75 
29eec     72 61 74 69 
29ef0     6F 6E 22 3A 
29ef4     7B          | 	byte	34,"Configuration",34,":{"
29ef5     00          | 	byte	0
29ef6                 | LR__2121
29ef6     4D 6F 74 6F 
29efa     72 20 54 79 
29efe     70 65       | 	byte	"Motor Type"
29f00     00          | 	byte	0
29f01                 | LR__2122
29f01     2C          | 	byte	","
29f02     00          | 	byte	0
29f03                 | LR__2123
29f03     4D 61 78 20 
29f07     4D 6F 74 6F 
29f0b     72 20 52 50 
29f0f     4D          | 	byte	"Max Motor RPM"
29f10     00          | 	byte	0
29f11                 | LR__2124
29f11     2C          | 	byte	","
29f12     00          | 	byte	0
29f13                 | LR__2125
29f13     4D 61 78 20 
29f17     4D 6F 74 6F 
29f1b     72 20 54 6F 
29f1f     72 71 75 65 | 	byte	"Max Motor Torque"
29f23     00          | 	byte	0
29f24                 | LR__2126
29f24     2C          | 	byte	","
29f25     00          | 	byte	0
29f26                 | LR__2127
29f26     47 65 61 72 
29f2a     20 44 69 61 
29f2e     6D 65 74 65 
29f32     72          | 	byte	"Gear Diameter"
29f33     00          | 	byte	0
29f34                 | LR__2128
29f34     2C          | 	byte	","
29f35     00          | 	byte	0
29f36                 | LR__2129
29f36     47 65 61 72 
29f3a     20 50 69 74 
29f3e     63 68       | 	byte	"Gear Pitch"
29f40     00          | 	byte	0
29f41                 | LR__2130
29f41     2C          | 	byte	","
29f42     00          | 	byte	0
29f43                 | LR__2131
29f43     53 79 73 74 
29f47     65 6D 20 49 
29f4b     6E 74 65 72 
29f4f     74 69 61    | 	byte	"System Intertia"
29f52     00          | 	byte	0
29f53                 | LR__2132
29f53     2C          | 	byte	","
29f54     00          | 	byte	0
29f55                 | LR__2133
29f55     53 74 61 74 
29f59     69 63 20 54 
29f5d     6F 72 71 75 
29f61     65          | 	byte	"Static Torque"
29f62     00          | 	byte	0
29f63                 | LR__2134
29f63     2C          | 	byte	","
29f64     00          | 	byte	0
29f65                 | LR__2135
29f65     4C 6F 61 64 | 	byte	"Load"
29f69     00          | 	byte	0
29f6a                 | LR__2136
29f6a     2C          | 	byte	","
29f6b     00          | 	byte	0
29f6c                 | LR__2137
29f6c     50 6F 73 69 
29f70     74 69 6F 6E 
29f74     20 45 6E 63 
29f78     6F 64 65 72 
29f7c     20 54 79 70 
29f80     65          | 	byte	"Position Encoder Type"
29f81     00          | 	byte	0
29f82                 | LR__2138
29f82     2C          | 	byte	","
29f83     00          | 	byte	0
29f84                 | LR__2139
29f84     50 6F 73 69 
29f88     74 69 6F 6E 
29f8c     20 45 6E 63 
29f90     6F 64 65 72 
29f94     20 53 63 61 
29f98     6C 65 20 46 
29f9c     61 63 74 6F 
29fa0     72          | 	byte	"Position Encoder Scale Factor"
29fa1     00          | 	byte	0
29fa2                 | LR__2140
29fa2     2C          | 	byte	","
29fa3     00          | 	byte	0
29fa4                 | LR__2141
29fa4     46 6F 72 63 
29fa8     65 20 47 61 
29fac     75 67 65    | 	byte	"Force Gauge"
29faf     00          | 	byte	0
29fb0                 | LR__2142
29fb0     2C          | 	byte	","
29fb1     00          | 	byte	0
29fb2                 | LR__2143
29fb2     46 6F 72 63 
29fb6     65 20 47 61 
29fba     75 67 65 20 
29fbe     53 63 61 6C 
29fc2     65 20 46 61 
29fc6     63 74 6F 72 | 	byte	"Force Gauge Scale Factor"
29fca     00          | 	byte	0
29fcb                 | LR__2144
29fcb     2C          | 	byte	","
29fcc     00          | 	byte	0
29fcd                 | LR__2145
29fcd     46 6F 72 63 
29fd1     65 20 47 61 
29fd5     75 67 65 20 
29fd9     5A 65 72 6F 
29fdd     20 46 61 63 
29fe1     74 6F 72    | 	byte	"Force Gauge Zero Factor"
29fe4     00          | 	byte	0
29fe5                 | LR__2146
29fe5     7D          | 	byte	"}"
29fe6     00          | 	byte	0
29fe7                 | LR__2147
29fe7     22 50 65 72 
29feb     66 6F 72 6D 
29fef     61 6E 63 65 
29ff3     22 3A 7B    | 	byte	34,"Performance",34,":{"
29ff6     00          | 	byte	0
29ff7                 | LR__2148
29ff7     50 6F 73 69 
29ffb     74 69 6F 6E 
29fff     20 4D 69 6E 
2a003     69 6D 75 6D | 	byte	"Position Minimum"
2a007     00          | 	byte	0
2a008                 | LR__2149
2a008     2C          | 	byte	","
2a009     00          | 	byte	0
2a00a                 | LR__2150
2a00a     50 6F 73 69 
2a00e     74 69 6F 6E 
2a012     20 4D 61 78 
2a016     69 6D 75 6D | 	byte	"Position Maximum"
2a01a     00          | 	byte	0
2a01b                 | LR__2151
2a01b     2C          | 	byte	","
2a01c     00          | 	byte	0
2a01d                 | LR__2152
2a01d     56 65 6C 6F 
2a021     63 69 74 79 
2a025     20 4D 61 78 
2a029     69 6D 75 6D | 	byte	"Velocity Maximum"
2a02d     00          | 	byte	0
2a02e                 | LR__2153
2a02e     2C          | 	byte	","
2a02f     00          | 	byte	0
2a030                 | LR__2154
2a030     41 63 63 65 
2a034     6C 65 72 61 
2a038     74 69 6F 6E 
2a03c     20 4D 61 78 
2a040     69 6D 75 6D | 	byte	"Acceleration Maximum"
2a044     00          | 	byte	0
2a045                 | LR__2155
2a045     2C          | 	byte	","
2a046     00          | 	byte	0
2a047                 | LR__2156
2a047     46 6F 72 63 
2a04b     65 20 54 65 
2a04f     6E 73 69 6C 
2a053     65 20 4D 61 
2a057     78 69 6D 75 
2a05b     6D          | 	byte	"Force Tensile Maximum"
2a05c     00          | 	byte	0
2a05d                 | LR__2157
2a05d     2C          | 	byte	","
2a05e     00          | 	byte	0
2a05f                 | LR__2158
2a05f     46 6F 72 63 
2a063     65 20 43 6F 
2a067     6D 70 72 65 
2a06b     73 73 69 6F 
2a06f     6E 20 4D 61 
2a073     78 69 6D 75 
2a077     6D          | 	byte	"Force Compression Maximum"
2a078     00          | 	byte	0
2a079                 | LR__2159
2a079     2C          | 	byte	","
2a07a     00          | 	byte	0
2a07b                 | LR__2160
2a07b     46 6F 72 63 
2a07f     65 20 67 61 
2a083     75 67 65 20 
2a087     4E 65 75 74 
2a08b     72 61 6C 20 
2a08f     4F 66 66 73 
2a093     65 74       | 	byte	"Force gauge Neutral Offset"
2a095     00          | 	byte	0
2a096                 | LR__2161
2a096     7D          | 	byte	"}"
2a097     00          | 	byte	0
2a098                 | LR__2162
2a098     4D 61 63 68 
2a09c     69 6E 65 20 
2a0a0     43 6F 6E 66 
2a0a4     69 67 75 72 
2a0a8     61 74 69 6F 
2a0ac     6E 3A       | 	byte	"Machine Configuration:"
2a0ae     00          | 	byte	0
2a0af                 | LR__2163
2a0af     20 20 20 20 
2a0b3     4D 6F 74 6F 
2a0b7     72 20 54 79 
2a0bb     70 65 3A 20 | 	byte	"    Motor Type: "
2a0bf     00          | 	byte	0
2a0c0                 | LR__2164
2a0c0     20 20 20 20 
2a0c4     6D 61 78 4D 
2a0c8     6F 74 6F 72 
2a0cc     54 6F 72 71 
2a0d0     75 65 3A 20 | 	byte	"    maxMotorTorque: "
2a0d4     00          | 	byte	0
2a0d5                 | LR__2165
2a0d5     20 20 20 20 
2a0d9     6D 61 78 4D 
2a0dd     6F 74 6F 72 
2a0e1     52 50 4D 3A 
2a0e5     20          | 	byte	"    maxMotorRPM: "
2a0e6     00          | 	byte	0
2a0e7                 | LR__2166
2a0e7     20 20 20 20 
2a0eb     67 65 61 72 
2a0ef     50 69 74 63 
2a0f3     68 3A 20    | 	byte	"    gearPitch: "
2a0f6     00          | 	byte	0
2a0f7                 | LR__2167
2a0f7     20 20 20 20 
2a0fb     73 79 73 74 
2a0ff     65 6D 49 6E 
2a103     74 65 72 74 
2a107     69 61 3A 20 | 	byte	"    systemIntertia: "
2a10b     00          | 	byte	0
2a10c                 | LR__2168
2a10c     20 20 20 20 
2a110     73 74 61 74 
2a114     69 63 54 6F 
2a118     72 71 75 65 
2a11c     3A 20       | 	byte	"    staticTorque: "
2a11e     00          | 	byte	0
2a11f                 | LR__2169
2a11f     20 20 20 20 
2a123     6C 6F 61 64 
2a127     3A 20       | 	byte	"    load: "
2a129     00          | 	byte	0
2a12a                 | LR__2170
2a12a     20 20 20 20 
2a12e     70 6F 73 69 
2a132     74 69 6F 6E 
2a136     45 6E 63 6F 
2a13a     64 65 72 54 
2a13e     79 70 65 3A 
2a142     20          | 	byte	"    positionEncoderType: "
2a143     00          | 	byte	0
2a144                 | LR__2171
2a144     20 20 20 20 
2a148     70 6F 73 69 
2a14c     74 69 6F 6E 
2a150     45 6E 63 6F 
2a154     64 65 72 53 
2a158     63 61 6C 65 
2a15c     46 61 63 74 
2a160     6F 72 3A 20 | 	byte	"    positionEncoderScaleFactor: "
2a164     00          | 	byte	0
2a165                 | LR__2172
2a165     20 20 20 20 
2a169     66 6F 72 63 
2a16d     65 47 61 75 
2a171     67 65 3A 20 | 	byte	"    forceGauge: "
2a175     00          | 	byte	0
2a176                 | LR__2173
2a176     20 20 20 20 
2a17a     66 6F 72 63 
2a17e     65 47 61 75 
2a182     67 65 53 63 
2a186     61 6C 65 46 
2a18a     61 63 74 6F 
2a18e     72 3A 20    | 	byte	"    forceGaugeScaleFactor: "
2a191     00          | 	byte	0
2a192                 | LR__2174
2a192     20 20 20 20 
2a196     66 6F 72 63 
2a19a     65 47 61 75 
2a19e     67 65 5A 65 
2a1a2     72 6F 46 61 
2a1a6     63 74 6F 72 
2a1aa     3A 20       | 	byte	"    forceGaugeZeroFactor: "
2a1ac     00          | 	byte	0
2a1ad                 | LR__2175
2a1ad     4D 61 63 68 
2a1b1     69 6E 65 20 
2a1b5     70 65 72 66 
2a1b9     6F 72 6D 61 
2a1bd     6E 63 65 3A | 	byte	"Machine performance:"
2a1c1     00          | 	byte	0
2a1c2                 | LR__2176
2a1c2     20 20 20 20 
2a1c6     6D 69 6E 50 
2a1ca     6F 73 69 74 
2a1ce     69 6F 6E 3A 
2a1d2     20          | 	byte	"    minPosition: "
2a1d3     00          | 	byte	0
2a1d4                 | LR__2177
2a1d4     20 20 20 20 
2a1d8     6D 61 78 50 
2a1dc     6F 73 69 74 
2a1e0     69 6F 6E 3A 
2a1e4     20          | 	byte	"    maxPosition: "
2a1e5     00          | 	byte	0
2a1e6                 | LR__2178
2a1e6     20 20 20 20 
2a1ea     6D 61 78 56 
2a1ee     65 6C 6F 63 
2a1f2     69 74 79 3A 
2a1f6     20          | 	byte	"    maxVelocity: "
2a1f7     00          | 	byte	0
2a1f8                 | LR__2179
2a1f8     20 20 20 20 
2a1fc     6D 61 78 41 
2a200     63 63 65 6C 
2a204     65 72 61 74 
2a208     69 6F 6E 3A 
2a20c     20          | 	byte	"    maxAcceleration: "
2a20d     00          | 	byte	0
2a20e                 | LR__2180
2a20e     20 20 20 20 
2a212     6D 61 78 46 
2a216     6F 72 63 65 
2a21a     54 65 6E 73 
2a21e     69 6C 65 3A 
2a222     20          | 	byte	"    maxForceTensile: "
2a223     00          | 	byte	0
2a224                 | LR__2181
2a224     20 20 20 20 
2a228     6D 61 78 46 
2a22c     6F 72 63 65 
2a230     43 6F 6D 70 
2a234     72 65 73 73 
2a238     69 6F 6E 3A 
2a23c     20          | 	byte	"    maxForceCompression: "
2a23d     00          | 	byte	0
2a23e                 | LR__2182
2a23e     20 20 20 20 
2a242     66 6F 72 63 
2a246     65 47 61 75 
2a24a     67 65 4E 65 
2a24e     75 74 72 61 
2a252     6C 4F 66 66 
2a256     73 65 74 3A 
2a25a     20          | 	byte	"    forceGaugeNeutralOffset: "
2a25b     00          | 	byte	0
2a25c                 | LR__2183
2a25c     20 20 20 20 
2a260     20 20 20 20 
2a264     4E 61 6D 65 
2a268     3A          | 	byte	"        Name:"
2a269     00          | 	byte	0
2a26a                 | LR__2184
2a26a     20 20 20 20 
2a26e     20 20 20 20 
2a272     46 75 6E 63 
2a276     74 69 6F 6E 
2a27a     3A          | 	byte	"        Function:"
2a27b     00          | 	byte	0
2a27c                 | LR__2185
2a27c     20 20 20 20 
2a280     20 20 20 20 
2a284     44 77 65 6C 
2a288     6C 3A       | 	byte	"        Dwell:"
2a28a     00          | 	byte	0
2a28b                 | LR__2186
2a28b     20 20 20 20 
2a28f     20 20 20 20 
2a293     50 61 72 61 
2a297     6D 65 74 65 
2a29b     72 73 3A 5B | 	byte	"        Parameters:["
2a29f     00          | 	byte	0
2a2a0                 | LR__2187
2a2a0     2C          | 	byte	","
2a2a1     00          | 	byte	0
2a2a2                 | LR__2188
2a2a2     20 20 20 20 
2a2a6     4E 61 6D 65 
2a2aa     3A          | 	byte	"    Name:"
2a2ab     00          | 	byte	0
2a2ac                 | LR__2189
2a2ac     20 20 20 20 
2a2b0     4E 75 6D 62 
2a2b4     65 72 3A    | 	byte	"    Number:"
2a2b7     00          | 	byte	0
2a2b8                 | LR__2190
2a2b8     20 20 20 20 
2a2bc     54 79 70 65 
2a2c0     3A          | 	byte	"    Type:"
2a2c1     00          | 	byte	0
2a2c2                 | LR__2191
2a2c2     20 20 20 20 
2a2c6     45 78 65 63 
2a2ca     75 74 69 6F 
2a2ce     6E 73 3A    | 	byte	"    Executions:"
2a2d1     00          | 	byte	0
2a2d2                 | LR__2192
2a2d2     20 20 20 20 
2a2d6     51 75 61 72 
2a2da     74 65 73 74 
2a2de     3A          | 	byte	"    Quartest:"
2a2df     00          | 	byte	0
2a2e0                 | LR__2193
2a2e0     4D 6F 6E 69 
2a2e4     74 6F 72 20 
2a2e8     43 6F 67 20 
2a2ec     53 74 61 72 
2a2f0     74 65 64 20 
2a2f4     61 74 20    | 	byte	"Monitor Cog Started at "
2a2f7     00          | 	byte	0
2a2f8                 | LR__2194
2a2f8     48 7A 20 77 
2a2fc     69 74 68 20 
2a300     64 65 6C 61 
2a304     79 20 6F 66 
2a308     3A          | 	byte	"Hz with delay of:"
2a309     00          | 	byte	0
2a30a                 | LR__2195
2a30a     46 6F 72 63 
2a30e     65 20 47 61 
2a312     75 67 65 20 
2a316     64 69 73 63 
2a31a     6F 6E 6E 65 
2a31e     63 74 65 64 
2a322     2C 20 61 74 
2a326     74 65 6D 70 
2a32a     74 69 6E 67 
2a32e     20 74 6F 20 
2a332     72 65 63 6F 
2a336     6E 6E 65 63 
2a33a     74          | 	byte	"Force Gauge disconnected, attempting to reconnect"
2a33b     00          | 	byte	0
2a33c                 | LR__2196
2a33c     2F 64 61 2F 
2a340     72 61 77 31 
2a344     2E 74 78 74 | 	byte	"/da/raw1.txt"
2a348     00          | 	byte	0
2a349                 | LR__2197
2a349     77          | 	byte	"w"
2a34a     00          | 	byte	0
2a34b                 | LR__2198
2a34b     6F 70 65 6E 
2a34f     69 6E 67 20 
2a353     66 69 6C 65 | 	byte	"opening file"
2a357     00          | 	byte	0
2a358                 | LR__2199
2a358     74 69 6D 65 
2a35c     20 28 6D 73 
2a360     29 2C 66 6F 
2a364     72 63 65 20 
2a368     28 6D 4E 29 
2a36c     2C 70 6F 73 
2a370     69 74 69 6F 
2a374     6E 20 28 6D 
2a378     6D 29 2C 66 
2a37c     6F 72 63 65 
2a380     52 61 77 2C 
2a384     65 6E 63 6F 
2a388     64 65 72 52 
2a38c     61 77 0A    | 	byte	"time (ms),force (mN),position (mm),forceRaw,encoderRaw",10
2a38f     00          | 	byte	0
2a390                 | LR__2200
2a390     25 64 2C 25 
2a394     64 2C 25 64 
2a398     0A          | 	byte	"%d,%d,%d",10
2a399     00          | 	byte	0
2a39a                 | LR__2201
2a39a     63 6C 6F 73 
2a39e     69 6E 67 20 
2a3a2     66 69 6C 65 | 	byte	"closing file"
2a3a6     00          | 	byte	0
2a3a7                 | LR__2202
2a3a7     6D 6F 76 69 
2a3ab     6E 67 20 72 
2a3af     65 6C 69 74 
2a3b3     69 76 65    | 	byte	"moving relitive"
2a3b6     00          | 	byte	0
2a3b7                 | LR__2203
2a3b7     4D 43 50 32 
2a3bb     33 30 31 37 
2a3bf     20 6E 6F 74 
2a3c3     20 63 6F 6D 
2a3c7     6D 75 6E 69 
2a3cb     63 61 74 69 
2a3cf     6E 67 2C 20 
2a3d3     74 72 79 69 
2a3d7     6E 67 20 61 
2a3db     67 61 69 6E | 	byte	"MCP23017 not communicating, trying again"
2a3df     00          | 	byte	0
2a3e0                 | LR__2204
2a3e0     43 6F 6E 74 
2a3e4     72 6F 6C 20 
2a3e8     63 6F 67 20 
2a3ec     73 74 61 72 
2a3f0     74 65 64    | 	byte	"Control cog started"
2a3f3     00          | 	byte	0
2a3f4                 | LR__2205
2a3f4     75 70 20 72 
2a3f8     65 6C 65 61 
2a3fc     73 65 64    | 	byte	"up released"
2a3ff     00          | 	byte	0
2a400                 | LR__2206
2a400     64 6F 77 6E 
2a404     20 72 65 6C 
2a408     65 61 73 65 
2a40c     64          | 	byte	"down released"
2a40d     00          | 	byte	0
2a40e                 | LR__2207
2a40e     2F 73 64    | 	byte	"/sd"
2a411     00          | 	byte	0
2a412                 | LR__2208
2a412     46 69 6C 65 
2a416     70 61 74 68 
2a41a     3A 20       | 	byte	"Filepath: "
2a41c     00          | 	byte	0
2a41d                 | LR__2209
2a41d     00          | 	byte	0
2a41e     00          | 	byte	0
2a41f                 | LR__2210
2a41f     46 69 6C 65 
2a423     70 61 74 68 
2a427     3A 20       | 	byte	"Filepath: "
2a429     00          | 	byte	0
2a42a                 | LR__2211
2a42a     4E 61 6D 65 
2a42e     3A 20 25 73 | 	byte	"Name: %s"
2a432     00          | 	byte	0
2a433                 | LR__2212
2a433     4E 75 6D 62 
2a437     65 72 3A 20 
2a43b     25 64       | 	byte	"Number: %d"
2a43d     00          | 	byte	0
2a43e                 | LR__2213
2a43e     2F          | 	byte	"/"
2a43f     00          | 	byte	0
2a440                 | LR__2214
2a440     52 65 6D 6F 
2a444     76 69 6E 67 
2a448     20          | 	byte	"Removing "
2a449     00          | 	byte	0
2a44a                 | LR__2215
2a44a     20 66 72 6F 
2a44e     6D 20       | 	byte	" from "
2a450     00          | 	byte	0
2a451                 | LR__2216
2a451     00          | 	byte	0
2a452     00          | 	byte	0
2a453                 | LR__2217
2a453     2F          | 	byte	"/"
2a454     00          | 	byte	0
2a455                 | LR__2218
2a455     2F          | 	byte	"/"
2a456     00          | 	byte	0
2a457                 | LR__2219
2a457     2F 73 64    | 	byte	"/sd"
2a45a     00          | 	byte	0
2a45b                 | LR__2220
2a45b     00          | 	byte	0
2a45c     00          | 	byte	0
2a45d                 | LR__2221
2a45d     46 6F 75 6E 
2a461     64 20 6D 6F 
2a465     64 65 3A    | 	byte	"Found mode:"
2a468     00          | 	byte	0
2a469                 | LR__2222
2a469     4D 6F 64 65 
2a46d     3A          | 	byte	"Mode:"
2a46e     00          | 	byte	0
2a46f                 | LR__2223
2a46f     51 75 61 72 
2a473     74 65 74 20 
2a477     66 72 6F 6D 
2a47b     20 6A 73 6F 
2a47f     6E          | 	byte	"Quartet from json"
2a480     00          | 	byte	0
2a481                 | LR__2224
2a481     54 65 73 74 
2a485     50 72 6F 66 
2a489     69 6C 65 20 
2a48d     42 75 74 74 
2a491     6F 6E 20 6E 
2a495     65 77 20 4B 
2a499     65 79 62 6F 
2a49d     61 72 64 20 
2a4a1     63 6F 75 6C 
2a4a5     64 20 6E 6F 
2a4a9     74 20 61 6C 
2a4ad     6C 6F 63 61 
2a4b1     74 65 20 6D 
2a4b5     65 6D 6F 72 
2a4b9     79          | 	byte	"TestProfile Button new Keyboard could not allocate memory"
2a4ba     00          | 	byte	0
2a4bb                 | LR__2225
2a4bb     45 6E 74 65 
2a4bf     72 20 66 69 
2a4c3     6C 65 20 6E 
2a4c7     61 6D 65 3A 
2a4cb     20          | 	byte	"Enter file name: "
2a4cc     00          | 	byte	0
2a4cd                 | LR__2226
2a4cd     00          | 	byte	0
2a4ce     00          | 	byte	0
2a4cf                 | LR__2227
2a4cf     2F 73 64    | 	byte	"/sd"
2a4d2     00          | 	byte	0
2a4d3                 | LR__2228
2a4d3     54 65 73 74 
2a4d7     70 72 6F 66 
2a4db     69 6C 65 2E 
2a4df     63 20 65 78 
2a4e3     70 6C 6F 72 
2a4e7     65 72 20 63 
2a4eb     6F 75 6C 64 
2a4ef     20 6E 6F 74 
2a4f3     20 61 6C 6C 
2a4f7     6F 63 61 74 
2a4fb     65 20 6D 65 
2a4ff     6D 6F 72 79 | 	byte	"Testprofile.c explorer could not allocate memory"
2a503     00          | 	byte	0
2a504                 | LR__2229
2a504     00          | 	byte	0
2a505     00          | 	byte	0
2a506                 | LR__2230
2a506     53 61 76 69 
2a50a     6E 67 20 71 
2a50e     75 61 72 74 
2a512     65 74       | 	byte	"Saving quartet"
2a514     00          | 	byte	0
2a515                 | LR__2231
2a515     53 61 76 69 
2a519     6E 67 20 73 
2a51d     65 74       | 	byte	"Saving set"
2a51f     00          | 	byte	0
2a520                 | LR__2232
2a520     53 61 76 69 
2a524     6E 67 20 6D 
2a528     6F 74 69 6F 
2a52c     6E          | 	byte	"Saving motion"
2a52d     00          | 	byte	0
2a52e                 | LR__2233
2a52e     53 61 76 69 
2a532     6E 67 20 74 
2a536     65 73 74    | 	byte	"Saving test"
2a539     00          | 	byte	0
2a53a                 | LR__2234
2a53a     42 55 54 54 
2a53e     4F 4E 5F 51 
2a542     55 41 52 54 
2a546     45 54 5F 69 
2a54a     64 3A       | 	byte	"BUTTON_QUARTET_id:"
2a54c     00          | 	byte	0
2a54d                 | LR__2235
2a54d     45 6E 74 65 
2a551     72 20 66 69 
2a555     6C 65 20 6E 
2a559     61 6D 65 3A 
2a55d     20          | 	byte	"Enter file name: "
2a55e     00          | 	byte	0
2a55f                 | LR__2236
2a55f     00          | 	byte	0
2a560     00          | 	byte	0
2a561                 | LR__2237
2a561     66 75 6E 63 
2a565     74 69 6F 6E 
2a569     3A          | 	byte	"function:"
2a56a     00          | 	byte	0
2a56b                 | LR__2238
2a56b     2C 6E 61 6D 
2a56f     65 3A       | 	byte	",name:"
2a571     00          | 	byte	0
2a572                 | LR__2239
2a572     44 77 65 6C 
2a576     6C 3A 20    | 	byte	"Dwell: "
2a579     00          | 	byte	0
2a57a                 | LR__2240
2a57a     3A 20       | 	byte	": "
2a57c     00          | 	byte	0
2a57d                 | LR__2241
2a57d     45 6E 74 65 
2a581     72 20 66 69 
2a585     6C 65 20 6E 
2a589     61 6D 65 3A 
2a58d     20          | 	byte	"Enter file name: "
2a58e     00          | 	byte	0
2a58f                 | LR__2242
2a58f     00          | 	byte	0
2a590     00          | 	byte	0
2a591                 | LR__2243
2a591     4E 75 6D 62 
2a595     65 72 3A 20 | 	byte	"Number: "
2a599     00          | 	byte	0
2a59a                 | LR__2244
2a59a     45 6E 74 65 
2a59e     72 20 66 69 
2a5a2     6C 65 20 6E 
2a5a6     61 6D 65 3A 
2a5aa     20          | 	byte	"Enter file name: "
2a5ab     00          | 	byte	0
2a5ac                 | LR__2245
2a5ac     00          | 	byte	0
2a5ad     00          | 	byte	0
2a5ae                 | LR__2246
2a5ae     45 78 65 63 
2a5b2     75 74 69 6F 
2a5b6     6E 73 3A 20 | 	byte	"Executions: "
2a5ba     00          | 	byte	0
2a5bb                 | LR__2247
2a5bb     2F 73 64    | 	byte	"/sd"
2a5be     00          | 	byte	0
2a5bf                 | LR__2248
2a5bf     00          | 	byte	0
2a5c0     00          | 	byte	0
2a5c1                 | LR__2249
2a5c1     2F          | 	byte	"/"
2a5c2     00          | 	byte	0
2a5c3                 | LR__2250
2a5c3     3F 3F 3F    | 	byte	"???"
2a5c6     00          | 	byte	0
2a5c7                 | LR__2251
2a5c7     20 0A 0D 09 
2a5cb     0C          | 	byte	" ",10,13,9,12
2a5cc     00          | 	byte	0
2a5cd                 | LR__2252
2a5cd     7D 5D       | 	byte	"}]"
2a5cf     00          | 	byte	0
2a5d0                 | LR__2253
2a5d0     20 0A 0D 09 
2a5d4     0C          | 	byte	" ",10,13,9,12
2a5d5     00          | 	byte	0
2a5d6                 | LR__2254
2a5d6     7D 5D       | 	byte	"}]"
2a5d8     00          | 	byte	0
2a5d9                 | LR__2255
2a5d9     74 72 75 65 | 	byte	"true"
2a5dd     00          | 	byte	0
2a5de                 | LR__2256
2a5de     66 61 6C 73 
2a5e2     65          | 	byte	"false"
2a5e3     00          | 	byte	0
2a5e4                 | LR__2257
2a5e4     6E 75 6C 6C | 	byte	"null"
2a5e8     00          | 	byte	0
2a5e9                 | LR__2258
2a5e9     45 72 72 6F 
2a5ed     72 3A 20 55 
2a5f1     6E 65 78 70 
2a5f5     65 63 74 65 
2a5f9     64 20 67 6F 
2a5fd     62 6C 61 6E 
2a601     6B 20 65 72 
2a605     72 6F 72 2E 
2a609     0A          | 	byte	"Error: Unexpected goblank error.",10
2a60a     00          | 	byte	0
2a60b                 | LR__2259
2a60b     45 72 72 6F 
2a60f     72 3A 20 55 
2a613     6E 65 78 70 
2a617     65 63 74 65 
2a61b     64 20 61 6C 
2a61f     6C 6F 63 61 
2a623     74 69 6F 6E 
2a627     20 65 72 72 
2a62b     6F 72 2E 0A | 	byte	"Error: Unexpected allocation error.",10
2a62f     00          | 	byte	0
2a630                 | LR__2260
2a630     45 72 72 6F 
2a634     72 3A 20 55 
2a638     6E 65 78 70 
2a63c     65 63 74 65 
2a640     64 20 71 75 
2a644     6F 74 65 20 
2a648     6D 69 73 73 
2a64c     69 6E 67 2E 
2a650     0A          | 	byte	"Error: Unexpected quote missing.",10
2a651     00          | 	byte	0
2a652                 | LR__2261
2a652     45 72 72 6F 
2a656     72 3A 20 70 
2a65a     72 6F 70 65 
2a65e     72 74 79 20 
2a662     6E 61 6D 65 
2a666     20 64 6F 65 
2a66a     73 20 6E 6F 
2a66e     74 20 65 78 
2a672     69 73 74 2E 
2a676     0A          | 	byte	"Error: property name does not exist.",10
2a677     00          | 	byte	0
2a678                 | LR__2262
2a678     45 72 72 6F 
2a67c     72 3A 20 75 
2a680     6E 61 62 6C 
2a684     65 20 74 6F 
2a688     20 70 61 72 
2a68c     73 65 20 76 
2a690     61 6C 75 65 
2a694     2E 0A       | 	byte	"Error: unable to parse value.",10
2a696     00          | 	byte	0
2a697                 | LR__2263
2a697     00          | 	byte	0
2a698     00          | 	byte	0
2a699                 | LR__2264
2a699     20          | 	byte	" "
2a69a     00          | 	byte	0
2a69b                 | LR__2265
2a69b     53 74 61 74 
2a69f     75 73 3A 20 
2a6a3     44 69 73 61 
2a6a7     62 6C 65 64 | 	byte	"Status: Disabled"
2a6ab     00          | 	byte	0
2a6ac                 | LR__2266
2a6ac     53 74 61 74 
2a6b0     75 73 3A 20 
2a6b4     65 6E 61 62 
2a6b8     6C 65 64    | 	byte	"Status: enabled"
2a6bb     00          | 	byte	0
2a6bc                 | LR__2267
2a6bc     4F 46 46    | 	byte	"OFF"
2a6bf     00          | 	byte	0
2a6c0                 | LR__2268
2a6c0     49 4E 43 52 
2a6c4     20 4A 4F 47 
2a6c8     3A 20 25 30 
2a6cc     2E 31 66 6D 
2a6d0     6D          | 	byte	"INCR JOG: %0.1fmm"
2a6d1     00          | 	byte	0
2a6d2                 | LR__2269
2a6d2     43 4F 4E 54 
2a6d6     20 4A 4F 47 
2a6da     3A 20 25 64 
2a6de     6D 6D       | 	byte	"CONT JOG: %dmm"
2a6e0     00          | 	byte	0
2a6e1                 | LR__2270
2a6e1     50 4F 53 4E 
2a6e5     20 4D 4F 56 
2a6e9     45 3A 20 25 
2a6ed     64 6D 6D    | 	byte	"POSN MOVE: %dmm"
2a6f0     00          | 	byte	0
2a6f1                 | LR__2271
2a6f1     48 4F 4D 45 | 	byte	"HOME"
2a6f5     00          | 	byte	0
2a6f6                 | LR__2272
2a6f6     48 4F 4D 49 
2a6fa     4E 47       | 	byte	"HOMING"
2a6fc     00          | 	byte	0
2a6fd                 | LR__2273
2a6fd     48 4F 4D 49 
2a701     4E 47 20 53 
2a705     45 45 4B 49 
2a709     4E 47 20 53 
2a70d     4C 4F 57    | 	byte	"HOMING SEEKING SLOW"
2a710     00          | 	byte	0
2a711                 | LR__2274
2a711     48 4F 4D 49 
2a715     4E 47 20 42 
2a719     41 43 4B 49 
2a71d     4E 47 20 4F 
2a721     46 46       | 	byte	"HOMING BACKING OFF"
2a723     00          | 	byte	0
2a724                 | LR__2275
2a724     48 4F 4D 49 
2a728     4E 47 20 43 
2a72c     4F 4D 50 4C 
2a730     45 54 45    | 	byte	"HOMING COMPLETE"
2a733     00          | 	byte	0
2a734                 | LR__2276
2a734     47 41 55 47 
2a738     45 20 4C 45 
2a73c     4E 47 54 48 
2a740     3A 20 25 64 
2a744     6D 6D       | 	byte	"GAUGE LENGTH: %dmm"
2a746     00          | 	byte	0
2a747                 | LR__2277
2a747     47 41 55 47 
2a74b     45 20 46 4F 
2a74f     52 43 45 3A 
2a753     20 25 64 6D 
2a757     4E          | 	byte	"GAUGE FORCE: %dmN"
2a758     00          | 	byte	0
2a759                 | LR__2278
2a759     4F 46 46    | 	byte	"OFF"
2a75c     00          | 	byte	0
2a75d                 | LR__2279
2a75d     2A 2B 2C 3A 
2a761     3B 3C 3D 3E 
2a765     5B 5D 7C 22 
2a769     3F 7F       | 	byte	"*+,:;<=>[]|",34,"?",127
2a76b     00          | 	byte	0
2a76c                 | LR__2280
2a76c     46 41 54 33 
2a770     32 20 20 20 | 	byte	"FAT32   "
2a774     00          | 	byte	0
2a775                 | LR__2281
2a775     54 5A       | 	byte	"TZ"
2a777     00          | 	byte	0
2a778                 | LR__2282
2a778     00          | 	byte	0
2a779     00          | 	byte	0
2a77a     00 00       | 	alignl
2a77c                 | _dat_
2a77c     00 00 00 00 
      ...             
3fcec     00 00 00 00 
3fcf0     00 00 00 00 | 	byte	$00[87416]
3fcf4     05 00 00 00 
3fcf8     00 00 00 00 
3fcfc     00 00 00 00 
3fd00     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fd04     CC FE 03 00 | 	long	@@@_dat_ + 87888
3fd08     D4 FE 03 00 | 	long	@@@_dat_ + 87896
3fd0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd10     DC FE 03 00 | 	long	@@@_dat_ + 87904
3fd14     E4 FE 03 00 | 	long	@@@_dat_ + 87912
3fd18     00 00 00 00 
3fd1c     00 00 00 00 | 	byte	$00[8]
3fd20     01 00 00 00 
3fd24     06 00 00 00 
3fd28     00 00 00 00 
3fd2c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fd30     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd34     EC FE 03 00 | 	long	@@@_dat_ + 87920
3fd38     F4 FE 03 00 | 	long	@@@_dat_ + 87928
3fd3c     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd40     FC FE 03 00 | 	long	@@@_dat_ + 87936
3fd44     04 FF 03 00 | 	long	@@@_dat_ + 87944
3fd48     00 00 00 00 
3fd4c     00 00 00 00 | 	byte	$00[8]
3fd50     01 00 00 00 
3fd54     06 00 00 00 
3fd58     00 00 00 00 
3fd5c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3fd60     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd64     0C FF 03 00 | 	long	@@@_dat_ + 87952
3fd68     14 FF 03 00 | 	long	@@@_dat_ + 87960
3fd6c     00 00 00 00 | 	byte	$00, $00, $00, $00
3fd70     1C FF 03 00 | 	long	@@@_dat_ + 87968
3fd74     24 FF 03 00 | 	long	@@@_dat_ + 87976
3fd78     00 00 00 00 
      ...             
3fec8     00 00 00 00 
3fecc     00 00 00 00 | 	byte	$00[344]
3fed0     7C 53 02 00 | 	long	@@@__system___tx
3fed4     00 00 00 00 | 	byte	$00, $00, $00, $00
3fed8     BC 53 02 00 | 	long	@@@__system___rx
3fedc     00 00 00 00 | 	byte	$00, $00, $00, $00
3fee0     A4 2A 01 00 | 	long	@@@__rxtxioctl_0485
3fee4     00 00 00 00 | 	byte	$00, $00, $00, $00
3fee8     14 2B 01 00 | 	long	@@@___dummy_flush_0486
3feec     00 00 00 00 | 	byte	$00, $00, $00, $00
3fef0     7C 53 02 00 | 	long	@@@__system___tx
3fef4     00 00 00 00 | 	byte	$00, $00, $00, $00
3fef8     BC 53 02 00 | 	long	@@@__system___rx
3fefc     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff00     A4 2A 01 00 | 	long	@@@__rxtxioctl_0485
3ff04     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff08     14 2B 01 00 | 	long	@@@___dummy_flush_0486
3ff0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff10     7C 53 02 00 | 	long	@@@__system___tx
3ff14     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff18     BC 53 02 00 | 	long	@@@__system___rx
3ff1c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff20     A4 2A 01 00 | 	long	@@@__rxtxioctl_0485
3ff24     00 00 00 00 | 	byte	$00, $00, $00, $00
3ff28     14 2B 01 00 | 	long	@@@___dummy_flush_0486
3ff2c     00 00 00 00 
      ...             
40024     00 00 00 00 
40028     00 00 00 00 | 	byte	$00[256]
4002c     63 00 04 58 
40030     02 0A 3D 00 
40034     01 08 28 0F 
40038     50 32 03 05 | 	byte	$63, $00, $04, $58, $02, $0a, $3d, $00, $01, $08, $28, $0f, $50, $32, $03, $05
4003c     00 00 00 00 
40040     00 00 00    | 	byte	$00[7]
40043     17 19 1D 14 
40047     90 2F 89 23 
4004b     25 D3 07 00 
4004f     00 00 02 03 | 	byte	$17, $19, $1d, $14, $90, $2f, $89, $23, $25, $d3, $07, $00, $00, $00, $02, $03
40053     1D 00 00 00 
40057     00 00 00 00 
4005b     00 00 00 00 
4005f     19 32 94 D5 | 	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $19, $32, $94, $d5
40063     02 07 00 00 
40067     04 A2 1A 00 
4006b     90 1E 00 80 
4006f     23 00 73 28 | 	byte	$02, $07, $00, $00, $04, $a2, $1a, $00, $90, $1e, $00, $80, $23, $00, $73, $28
40073     00 68 2E 00 
40077     68 00 00 00 
4007b     00 00 00 00 
4007f     00 00 00 00 | 	byte	$00, $68, $2e, $00, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40083     00 00 00 00 
40087     00 00 00 00 
4008b     00 00 00 00 
4008f     00 00 00 00 
40093     00 00 00 00 
40097     00 00 00 00 
4009b     00          | 	byte	$00[25]
4009c     16 15 14 11 
400a0     10 0F 0E 0D 
400a4     0C 09 08 07 
400a8     06 05 04 01 | 	byte	$16, $15, $14, $11, $10, $0f, $0e, $0d, $0c, $09, $08, $07, $06, $05, $04, $01
400ac     00 FF FF FF 
400b0     00 00 00 00 
400b4     00 00 00 00 
400b8     00 00 29 28 | 	byte	$00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $29, $28
400bc     27 26 25 24 
400c0     23 22 21 20 
400c4     1F 1E 1C 1B 
400c8     19 14 13 12 | 	byte	$27, $26, $25, $24, $23, $22, $21, $20, $1f, $1e, $1c, $1b, $19, $14, $13, $12
400cc     11 10 0F 0E 
400d0     0D 0C 0A 08 
400d4     07 06 04 02 
400d8     00 FF 00 00 | 	byte	$11, $10, $0f, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $02, $00, $ff, $00, $00
400dc     00 00 00 00 
400e0     00 00 00 00 | 	byte	$00[8]
400e4     71 01 00 00 
400e8     00 00 00 00 
400ec     00 00 00 00 
400f0     00 00 00 00 | 	byte	$71, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
400f4     00 00 00 00 
      ...             
41854     00 00 00 00 
41858     00          | 	byte	$00[5989]
41859     53 74 61 74 
4185d     75 73 00 4D 
41861     61 6E 75 61 
41865     6C 00 54 65 | 	byte	$53, $74, $61, $74, $75, $73, $00, $4d, $61, $6e, $75, $61, $6c, $00, $54, $65
41869     73 74 00 43 
4186d     61 6C 69 62 
41871     72 61 74 65 
41875     00 53 65 74 | 	byte	$73, $74, $00, $43, $61, $6c, $69, $62, $72, $61, $74, $65, $00, $53, $65, $74
41879     74 69 6E 67 
4187d     73 00 43 72 
41881     65 61 74 65 
41885     20 50 72 6F | 	byte	$74, $69, $6e, $67, $73, $00, $43, $72, $65, $61, $74, $65, $20, $50, $72, $6f
41889     66 69 6C 65 
4188d     73 00 00 00 
41891     00 00 00 00 
41895     00 00 00 00 | 	byte	$66, $69, $6c, $65, $73, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41899     00 00 00 00 
      ...             
45bdd     00 00 00 00 
45be1     00 00 00 00 | 	byte	$00[17228]
45be5     4D 61 63 68 
45be9     69 6E 65 20 
45bed     53 74 61 74 
45bf1     65 00 43 68 | 	byte	$4d, $61, $63, $68, $69, $6e, $65, $20, $53, $74, $61, $74, $65, $00, $43, $68
45bf5     61 72 67 65 
45bf9     20 50 75 6D 
45bfd     70 00 53 77 
45c01     69 74 63 68 | 	byte	$61, $72, $67, $65, $20, $50, $75, $6d, $70, $00, $53, $77, $69, $74, $63, $68
45c05     65 64 20 50 
45c09     6F 77 65 72 
45c0d     00 45 53 44 
45c11     20 53 77 69 | 	byte	$65, $64, $20, $50, $6f, $77, $65, $72, $00, $45, $53, $44, $20, $53, $77, $69
45c15     74 63 68 00 
45c19     45 53 44 20 
45c1d     55 70 70 65 
45c21     72 00 45 53 | 	byte	$74, $63, $68, $00, $45, $53, $44, $20, $55, $70, $70, $65, $72, $00, $45, $53
45c25     44 20 4C 6F 
45c29     77 65 72 00 
45c2d     53 65 72 76 
45c31     6F 20 52 65 | 	byte	$44, $20, $4c, $6f, $77, $65, $72, $00, $53, $65, $72, $76, $6f, $20, $52, $65
45c35     61 64 79 00 
45c39     46 6F 72 63 
45c3d     65 20 43 6F 
45c41     6D 6D 00 53 | 	byte	$61, $64, $79, $00, $46, $6f, $72, $63, $65, $20, $43, $6f, $6d, $6d, $00, $53
45c45     65 72 76 6F 
45c49     20 43 6F 6D 
45c4d     6D 00 4D 61 
45c51     63 68 69 6E | 	byte	$65, $72, $76, $6f, $20, $43, $6f, $6d, $6d, $00, $4d, $61, $63, $68, $69, $6e
45c55     65 20 49 6E 
45c59     66 6F 00 46 
45c5d     6F 72 63 65 
45c61     20 28 4E 29 | 	byte	$65, $20, $49, $6e, $66, $6f, $00, $46, $6f, $72, $63, $65, $20, $28, $4e, $29
45c65     00 50 6F 73 
45c69     69 74 69 6F 
45c6d     6E 20 28 6D 
45c71     6D 29 00 00 | 	byte	$00, $50, $6f, $73, $69, $74, $69, $6f, $6e, $20, $28, $6d, $6d, $29, $00, $00
45c75     00 00 00 00 
      ...             
4a045     00 00 00 00 
4a049     00 00 00    | 	byte	$00[17367]
4a04c     52 75 6E 20 
4a050     54 65 73 74 
4a054     20 50 72 6F 
4a058     66 69 6C 65 | 	byte	$52, $75, $6e, $20, $54, $65, $73, $74, $20, $50, $72, $6f, $66, $69, $6c, $65
4a05c     00 4F 70 65 
4a060     6E 00 52 75 
4a064     6E 21 00 43 
4a068     61 6E 63 65 | 	byte	$00, $4f, $70, $65, $6e, $00, $52, $75, $6e, $21, $00, $43, $61, $6e, $63, $65
4a06c     6C 00 2E 2E 
4a070     00 3C 00 3E 
4a074     00 44 6F 6E 
4a078     65 00 00 00 | 	byte	$6c, $00, $2e, $2e, $00, $3c, $00, $3e, $00, $44, $6f, $6e, $65, $00, $00, $00
4a07c     00 00 00 00 
      ...             
4d2a8     00 00 00 00 
4d2ac     00 00 00 00 | 	byte	$00[12852]
4d2b0     4F 70 65 6E 
4d2b4     00 4E 65 77 
4d2b8     00 53 61 76 
4d2bc     65 00 00 00 | 	byte	$4f, $70, $65, $6e, $00, $4e, $65, $77, $00, $53, $61, $76, $65, $00, $00, $00
4d2c0     E1 D2 04 00 | 	long	@@@_dat_ + 142181
4d2c4     E9 D2 04 00 | 	long	@@@_dat_ + 142189
4d2c8     ED D2 04 00 | 	long	@@@_dat_ + 142193
4d2cc     F4 D2 04 00 | 	long	@@@_dat_ + 142200
4d2d0     F9 D2 04 00 | 	long	@@@_dat_ + 142205
4d2d4     FE D2 04 00 | 	long	@@@_dat_ + 142210
4d2d8     03 D3 04 00 | 	long	@@@_dat_ + 142215
4d2dc     08 D3 04 00 | 	long	@@@_dat_ + 142220
4d2e0     00 51 75 61 
4d2e4     72 74 65 74 
4d2e8     00 53 65 74 
4d2ec     00 4D 6F 74 | 	byte	$00, $51, $75, $61, $72, $74, $65, $74, $00, $53, $65, $74, $00, $4d, $6f, $74
4d2f0     69 6F 6E 00 
4d2f4     54 65 73 74 
4d2f8     00 2E 51 52 
4d2fc     54 00 2E 53 | 	byte	$69, $6f, $6e, $00, $54, $65, $73, $74, $00, $2e, $51, $52, $54, $00, $2e, $53
4d300     45 54 00 2E 
4d304     4D 4F 54 00 
4d308     2E 54 53 54 
4d30c     00 00 00 00 | 	byte	$45, $54, $00, $2e, $4d, $4f, $54, $00, $2e, $54, $53, $54, $00, $00, $00, $00
4d310     00 00 00 00 
      ...             
4d590     00 00 00 00 
4d594     00 00 00 00 | 	byte	$00[648]
4d598     C0 D5 04 00 | 	long	@@@_dat_ + 142916
4d59c     C8 D5 04 00 | 	long	@@@_dat_ + 142924
4d5a0     D0 D5 04 00 | 	long	@@@_dat_ + 142932
4d5a4     D8 D5 04 00 | 	long	@@@_dat_ + 142940
4d5a8     00 00 00 00 
4d5ac     00 00 00 00 
4d5b0     00 00 00 00 
4d5b4     00 00 00 00 
4d5b8     00 00 00 00 
4d5bc     00 00 00 00 
4d5c0     00 00 00 00 | 	byte	$00[28]
4d5c4     6C 79 01 00 | 	long	@@@___root_opendir
4d5c8     00 00 00 00 | 	byte	$00, $00, $00, $00
4d5cc     18 7A 01 00 | 	long	@@@___root_closedir
4d5d0     00 00 00 00 | 	byte	$00, $00, $00, $00
4d5d4     8C 79 01 00 | 	long	@@@___root_readdir
4d5d8     00 00 00 00 | 	byte	$00, $00, $00, $00
4d5dc     20 7A 01 00 | 	long	@@@___root_stat
4d5e0     22 22 00 00 
4d5e4     5C 5C 00 00 
4d5e8     2F 2F 00 00 
4d5ec     62 08 00 00 | 	byte	$22, $22, $00, $00, $5c, $5c, $00, $00, $2f, $2f, $00, $00, $62, $08, $00, $00
4d5f0     66 0C 00 00 
4d5f4     6E 0A 00 00 
4d5f8     72 0D 00 00 
4d5fc     74 09 00 00 | 	byte	$66, $0c, $00, $00, $6e, $0a, $00, $00, $72, $0d, $00, $00, $74, $09, $00, $00
4d600     2D 39 32 32 
4d604     33 33 37 32 
4d608     30 33 36 38 
4d60c     35 34 37 37 | 	byte	$2d, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38, $35, $34, $37, $37
4d610     35 38 30 38 
4d614     00 39 32 32 
4d618     33 33 37 32 
4d61c     30 33 36 38 | 	byte	$35, $38, $30, $38, $00, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38
4d620     35 34 37 37 
4d624     35 38 30 37 
4d628     00 00 00 00 
4d62c     00 00 00 00 | 	byte	$35, $34, $37, $37, $35, $38, $30, $37, $00, $00, $00, $00, $00, $00, $00, $00
4d630     00 00 00 00 
      ...             
55240     00 00 00 00 
55244     00 00 00 00 | 	byte	$00[31768]
55248     04 53 05 00 | 	long	@@@_dat_ + 174984
5524c     06 53 05 00 | 	long	@@@_dat_ + 174986
55250     08 53 05 00 | 	long	@@@_dat_ + 174988
55254     0A 53 05 00 | 	long	@@@_dat_ + 174990
55258     0C 53 05 00 | 	long	@@@_dat_ + 174992
5525c     0E 53 05 00 | 	long	@@@_dat_ + 174994
55260     10 53 05 00 | 	long	@@@_dat_ + 174996
55264     12 53 05 00 | 	long	@@@_dat_ + 174998
55268     14 53 05 00 | 	long	@@@_dat_ + 175000
5526c     16 53 05 00 | 	long	@@@_dat_ + 175002
55270     18 53 05 00 | 	long	@@@_dat_ + 175004
55274     1C 53 05 00 | 	long	@@@_dat_ + 175008
55278     1E 53 05 00 | 	long	@@@_dat_ + 175010
5527c     20 53 05 00 | 	long	@@@_dat_ + 175012
55280     22 53 05 00 | 	long	@@@_dat_ + 175014
55284     24 53 05 00 | 	long	@@@_dat_ + 175016
55288     26 53 05 00 | 	long	@@@_dat_ + 175018
5528c     28 53 05 00 | 	long	@@@_dat_ + 175020
55290     2A 53 05 00 | 	long	@@@_dat_ + 175022
55294     2C 53 05 00 | 	long	@@@_dat_ + 175024
55298     2E 53 05 00 | 	long	@@@_dat_ + 175026
5529c     30 53 05 00 | 	long	@@@_dat_ + 175028
552a0     32 53 05 00 | 	long	@@@_dat_ + 175030
552a4     34 53 05 00 | 	long	@@@_dat_ + 175032
552a8     36 53 05 00 | 	long	@@@_dat_ + 175034
552ac     38 53 05 00 | 	long	@@@_dat_ + 175036
552b0     3A 53 05 00 | 	long	@@@_dat_ + 175038
552b4     3C 53 05 00 | 	long	@@@_dat_ + 175040
552b8     3E 53 05 00 | 	long	@@@_dat_ + 175042
552bc     40 53 05 00 | 	long	@@@_dat_ + 175044
552c0     42 53 05 00 | 	long	@@@_dat_ + 175046
552c4     44 53 05 00 | 	long	@@@_dat_ + 175048
552c8     48 53 05 00 | 	long	@@@_dat_ + 175052
552cc     4E 53 05 00 | 	long	@@@_dat_ + 175058
552d0     50 53 05 00 | 	long	@@@_dat_ + 175060
552d4     52 53 05 00 | 	long	@@@_dat_ + 175062
552d8     54 53 05 00 | 	long	@@@_dat_ + 175064
552dc     56 53 05 00 | 	long	@@@_dat_ + 175066
552e0     58 53 05 00 | 	long	@@@_dat_ + 175068
552e4     5A 53 05 00 | 	long	@@@_dat_ + 175070
552e8     5C 53 05 00 | 	long	@@@_dat_ + 175072
552ec     5E 53 05 00 | 	long	@@@_dat_ + 175074
552f0     60 53 05 00 | 	long	@@@_dat_ + 175076
552f4     67 53 05 00 | 	long	@@@_dat_ + 175083
552f8     69 53 05 00 | 	long	@@@_dat_ + 175085
552fc     6F 53 05 00 | 	long	@@@_dat_ + 175091
55300     71 53 05 00 | 	long	@@@_dat_ + 175093
55304     30 00 31 00 
55308     32 00 33 00 
5530c     34 00 35 00 
55310     36 00 37 00 | 	byte	$30, $00, $31, $00, $32, $00, $33, $00, $34, $00, $35, $00, $36, $00, $37, $00
55314     38 00 39 00 
55318     74 61 62 00 
5531c     71 00 77 00 
55320     65 00 72 00 | 	byte	$38, $00, $39, $00, $74, $61, $62, $00, $71, $00, $77, $00, $65, $00, $72, $00
55324     74 00 79 00 
55328     75 00 69 00 
5532c     6F 00 70 00 
55330     2D 00 61 00 | 	byte	$74, $00, $79, $00, $75, $00, $69, $00, $6f, $00, $70, $00, $2d, $00, $61, $00
55334     73 00 64 00 
55338     66 00 67 00 
5533c     68 00 6A 00 
55340     6B 00 6C 00 | 	byte	$73, $00, $64, $00, $66, $00, $67, $00, $68, $00, $6a, $00, $6b, $00, $6c, $00
55344     64 65 6C 00 
55348     73 68 69 66 
5534c     74 00 7A 00 
55350     78 00 63 00 | 	byte	$64, $65, $6c, $00, $73, $68, $69, $66, $74, $00, $7a, $00, $78, $00, $63, $00
55354     76 00 62 00 
55358     6E 00 6D 00 
5535c     2C 00 2E 00 
55360     63 61 6E 63 | 	byte	$76, $00, $62, $00, $6e, $00, $6d, $00, $2c, $00, $2e, $00, $63, $61, $6e, $63
55364     65 6C 00 3C 
55368     00 73 70 61 
5536c     63 65 00 3E 
55370     00 73 75 62 | 	byte	$65, $6c, $00, $3c, $00, $73, $70, $61, $63, $65, $00, $3e, $00, $73, $75, $62
55374     6D 69 74 00 
55378     44 49 53 41 
5537c     42 4C 44 00 
55380     45 4E 41 42 | 	byte	$6d, $69, $74, $00, $44, $49, $53, $41, $42, $4c, $44, $00, $45, $4e, $41, $42
55384     4C 45 44 00 
55388     53 4D 50 20 
5538c     4C 49 4D 00 
55390     4D 43 48 20 | 	byte	$4c, $45, $44, $00, $53, $4d, $50, $20, $4c, $49, $4d, $00, $4d, $43, $48, $20
55394     4C 49 4D 00 
55398     46 41 55 4C 
5539c     54 45 44 00 
553a0     4C 45 4E 47 | 	byte	$4c, $49, $4d, $00, $46, $41, $55, $4c, $54, $45, $44, $00, $4c, $45, $4e, $47
553a4     54 48 00 46 
553a8     4F 52 43 45 
553ac     00 54 45 4E 
553b0     53 49 4F 4E | 	byte	$54, $48, $00, $46, $4f, $52, $43, $45, $00, $54, $45, $4e, $53, $49, $4f, $4e
553b4     00 43 4F 4D 
553b8     50 52 45 53 
553bc     00 55 50 50 
553c0     45 52 00 4C | 	byte	$00, $43, $4f, $4d, $50, $52, $45, $53, $00, $55, $50, $50, $45, $52, $00, $4c
553c4     4F 57 45 52 
553c8     00 44 4F 4F 
553cc     52 00 53 54 
553d0     4F 50 50 45 | 	byte	$4f, $57, $45, $52, $00, $44, $4f, $4f, $52, $00, $53, $54, $4f, $50, $50, $45
553d4     44 00 4D 4F 
553d8     56 49 4E 47 
553dc     00 4D 41 4E 
553e0     55 41 4C 00 | 	byte	$44, $00, $4d, $4f, $56, $49, $4e, $47, $00, $4d, $41, $4e, $55, $41, $4c, $00
553e4     54 45 53 54 
553e8     00 52 55 4E 
553ec     00 53 74 61 
553f0     74 75 73 00 | 	byte	$54, $45, $53, $54, $00, $52, $55, $4e, $00, $53, $74, $61, $74, $75, $73, $00
553f4     43 6F 6E 64 
553f8     69 74 69 6F 
553fc     6E 00 4D 6F 
55400     64 65 00 4F | 	byte	$43, $6f, $6e, $64, $69, $74, $69, $6f, $6e, $00, $4d, $6f, $64, $65, $00, $4f
55404     66 66 00 49 
55408     4E 43 52 00 
5540c     43 4F 4E 54 
55410     00 50 4F 53 | 	byte	$66, $66, $00, $49, $4e, $43, $52, $00, $43, $4f, $4e, $54, $00, $50, $4f, $53
55414     4E 00 48 4F 
55418     4D 45 00 47 
5541c     41 2D 4C 00 
55420     47 41 2D 46 | 	byte	$4e, $00, $48, $4f, $4d, $45, $00, $47, $41, $2d, $4c, $00, $47, $41, $2d, $46
55424     00 53 65 6C 
55428     65 63 74 00 
5542c     01 01 01 01 
55430     01 01 01 01 | 	byte	$00, $53, $65, $6c, $65, $63, $74, $00, $01, $01, $01, $01, $01, $01, $01, $01
55434     01 91 11 11 
55438     11 11 01 01 
5543c     01 01 01 01 
55440     01 01 01 01 | 	byte	$01, $91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
55444     01 01 01 01 
55448     01 01 01 01 | 	byte	$01[8]
5544c     90 20 20 20 
55450     20 20 20 20 
55454     20 20 20 20 
55458     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
5545c     42 42 42 42 
55460     42 42 42 42 
55464     42 42       | 	byte	$42[10]
55466     20 20 20 20 
5546a     20 20 20    | 	byte	$20[7]
5546d     44 44 44 44 
55471     44 44       | 	byte	$44[6]
55473     04 04 04 04 
55477     04 04 04 04 
5547b     04 04 04 04 
5547f     04 04 04 04 
55483     04 04 04 04 | 	byte	$04[20]
55487     20 20 20 20 
5548b     20 20       | 	byte	$20[6]
5548d     48 48 48 48 
55491     48 48       | 	byte	$48[6]
55493     08 08 08 08 
55497     08 08 08 08 
5549b     08 08 08 08 
5549f     08 08 08 08 
554a3     08 08 08 08 | 	byte	$08[20]
554a7     20 20 20 20 
554ab     01 00 00 00 
554af     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
554b0                 | 	alignl
554b0                 | _jm_fullduplexserial_spin2_dat_
554b0                 | 
554b0                 |                 org
554b0 000             | 
554b0 000 28 06 64 FD | uart_mgr        setq      #4-1                                  ' get 4 parameters from hub
554b4 001 00 3B 04 FB |                 rdlong    rxd, ptra
554b8 002             | 
554b8 002             | 
554b8 002 1F 3A 14 F4 | uart_main       testb     rxd, #31                      wc      ' rx in use?
554bc 003 0C 00 B0 3D |     if_nc       call      #rx_serial
554c0 004             | 
554c0 004 1F 3C 14 F4 |                 testb     txd, #31                      wc      ' tx in use?
554c4 005 2C 00 B0 3D |     if_nc       call      #tx_serial
554c8 006             | 
554c8 006 EC FF 9F FD |                 jmp       #uart_main
554cc 007             | 
554cc 007             | 
554cc 007 40 3A 70 FD | rx_serial       testp     rxd                           wc      ' anything waiting?
554d0 008 2D 00 64 3D |     if_nc       ret
554d4 009             | 
554d4 009 1D 46 88 FA |                 rdpin     t3, rxd                               ' read new byte
554d8 00a 18 46 44 F0 |                 shr       t3, #24                               ' align lsb
554dc 00b 1F 42 00 F6 |                 mov       t1, p_rxbuf                           ' t1 := @rxbuf
554e0 00c 04 45 04 FB |                 rdlong    t2, ptra[4]                           ' t2 := rxhead
554e4 00d 22 42 00 F1 |                 add       t1, t2
554e8 00e 21 46 40 FC |                 wrbyte    t3, t1                                ' rxbuf[rxhead] := t3
554ec 00f FF 44 04 F7 |                 incmod    t2, #(BUF_SIZE-1)                     ' update head index
554f0 010 04 45 64 0C |     _ret_       wrlong    t2, ptra[4]                           ' write head index back to hub
554f4 011             | 
554f4 011             | 
554f4 011 1E 42 98 FA | tx_serial       rdpin     t1, txd                       wc      ' check busy flag
554f8 012 2D 00 64 CD |     if_c        ret                                             '  abort if busy
554fc 013             | 
554fc 013 06 43 04 FB |                 rdlong    t1, ptra[6]                           ' t1 = txhead
55500 014 07 45 04 FB |                 rdlong    t2, ptra[7]                           ' t2 = txtail
55504 015 22 42 08 F2 |                 cmp       t1, t2                        wz      ' byte(s) to tx?
55508 016 2D 00 64 AD |     if_e        ret
5550c 017             | 
5550c 017 20 42 00 F6 |                 mov       t1, p_txbuf                           ' start of tx buffer
55510 018 22 42 00 F1 |                 add       t1, t2                                ' add tail index
55514 019 21 46 C0 FA |                 rdbyte    t3, t1                                ' t3 := txbuf[txtail]
55518 01a 1E 46 20 FC |                 wypin     t3, txd                               ' load into sp uart
5551c 01b FF 44 04 F7 |                 incmod    t2, #(BUF_SIZE-1)                     ' update tail index
55520 01c 07 45 64 0C |     _ret_       wrlong    t2, ptra[7]                           ' write tail index back to hub
55524 01d             | 
55524 01d             | 
55524 01d             | ' --------------------------------------------------------------------------------------------------
55524 01d             | 
55524 01d             | rxd             res       1                                     ' receive pin
55524 01d             | rxd             res       1                                     ' receive pin
55524 01d             | txd             res       1                                     ' transmit pin
55524 01d             | txd             res       1                                     ' transmit pin
55524 01d             | p_rxbuf         res       1                                     ' pointer to rxbuf
55524 01d             | p_rxbuf         res       1                                     ' pointer to rxbuf
55524 01d             | p_txbuf         res       1                                     ' pointer to txbuf
55524 01d             | p_txbuf         res       1                                     ' pointer to txbuf
55524 01d             | 
55524 01d             | t1              res       1                                     ' work vars
55524 01d             | t1              res       1                                     ' work vars
55524 01d             | t2              res       1
55524 01d             | t2              res       1
55524 01d             | t3              res       1
55524 01d             | t3              res       1
55524 01d             |                 fit       496
55524 01d             | _fatfs_cc_dat_
55524 01d 43 55 45 41 
55528 01e 41 41 41 43 
5552c 01f 45 45 45 49 
55530 020 49 49 41 41 | 	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
55534 021 45 92 92 4F 
55538 022 4F 4F 55 55 
5553c 023 59 4F 55 4F 
55540 024 9C 4F 9E 9F | 	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
55544 025 41 49 4F 55 
55548 026 A5 A5 A6 A7 
5554c 027 A8 A9 AA AB 
55550 028 AC AD AE AF | 	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
55554 029 B0 B1 B2 B3 
55558 02a B4 41 41 41 
5555c 02b B8 B9 BA BB 
55560 02c BC BD BE BF | 	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
55564 02d C0 C1 C2 C3 
55568 02e C4 C5 41 41 
5556c 02f C8 C9 CA CB 
55570 030 CC CD CE CF | 	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
55574 031 D1 D1 45 45 
55578 032 45 49 49 49 
5557c 033 49 D9 DA DB 
55580 034 DC DD 49 DF | 	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
55584 035 4F E1 4F 4F 
55588 036 4F 4F E6 E8 
5558c 037 E8 55 55 55 
55590 038 59 59 EE EF | 	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
55594 039 F0 F1 F2 F3 
55598 03a F4 F5 F6 F7 
5559c 03b F8 F9 FA FB 
555a0 03c FC FD FE FF | 	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
555a4 03d 00 00 00 00 
555a8 03e 00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
555ac 03f FC 55 05 00 | 	long	@@@_fatfs_cc_dat_ + 216
555b0 040 04 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 224
555b4 041 0C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 232
555b8 042 14 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 240
555bc 043 1C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 248
555c0 044 00 00 00 00 
555c4 045 00 00 00 00 
555c8 046 00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
555cc 047 24 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 256
555d0 048 2C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 264
555d4 049 34 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 272
555d8 04a 3C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 280
555dc 04b 44 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 288
555e0 04c 4C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 296
555e4 04d 54 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 304
555e8 04e 5C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 312
555ec 04f 64 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 320
555f0 050 6C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 328
555f4 051 74 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 336
555f8 052 7C 56 05 00 | 	long	@@@_fatfs_cc_dat_ + 344
555fc 053 00 00 00 00 | 	byte	$00, $00, $00, $00
55600 054 60 33 02 00 | 	long	@@@_fatfs_cc_v_close
55604 055 00 00 00 00 | 	byte	$00, $00, $00, $00
55608 056 6C 37 02 00 | 	long	@@@_fatfs_cc_v_read
5560c 057 00 00 00 00 | 	byte	$00, $00, $00, $00
55610 058 80 38 02 00 | 	long	@@@_fatfs_cc_v_write
55614 059 00 00 00 00 | 	byte	$00, $00, $00, $00
55618 05a 60 39 02 00 | 	long	@@@_fatfs_cc_v_lseek
5561c 05b 00 00 00 00 | 	byte	$00, $00, $00, $00
55620 05c E8 39 02 00 | 	long	@@@_fatfs_cc_v_ioctl
55624 05d 00 00 00 00 | 	byte	$00, $00, $00, $00
55628 05e 3C 3A 02 00 | 	long	@@@_fatfs_cc_v_open
5562c 05f 00 00 00 00 | 	byte	$00, $00, $00, $00
55630 060 C4 32 02 00 | 	long	@@@_fatfs_cc_v_creat
55634 061 00 00 00 00 | 	byte	$00, $00, $00, $00
55638 062 A4 33 02 00 | 	long	@@@_fatfs_cc_v_opendir
5563c 063 00 00 00 00 | 	byte	$00, $00, $00, $00
55640 064 18 34 02 00 | 	long	@@@_fatfs_cc_v_closedir
55644 065 00 00 00 00 | 	byte	$00, $00, $00, $00
55648 066 58 34 02 00 | 	long	@@@_fatfs_cc_v_readdir
5564c 067 00 00 00 00 | 	byte	$00, $00, $00, $00
55650 068 7C 35 02 00 | 	long	@@@_fatfs_cc_v_stat
55654 069 00 00 00 00 | 	byte	$00, $00, $00, $00
55658 06a FC 39 02 00 | 	long	@@@_fatfs_cc_v_mkdir
5565c 06b 00 00 00 00 | 	byte	$00, $00, $00, $00
55660 06c 1C 3A 02 00 | 	long	@@@_fatfs_cc_v_rmdir
55664 06d 00 00 00 00 | 	byte	$00, $00, $00, $00
55668 06e 0C 3A 02 00 | 	long	@@@_fatfs_cc_v_remove
5566c 06f 00 00 00 00 | 	byte	$00, $00, $00, $00
55670 070 2C 3A 02 00 | 	long	@@@_fatfs_cc_v_rename
55674 071 00 00 00 00 | 	byte	$00, $00, $00, $00
55678 072 34 3B 02 00 | 	long	@@@_fatfs_cc_v_init
5567c 073 00 00 00 00 | 	byte	$00, $00, $00, $00
55680 074 3C 3B 02 00 | 	long	@@@_fatfs_cc_v_deinit
55684 075 FF FF FF FF 
55688 076 1F 00 00 00 
5568c 077 1C 00 00 00 
55690 078 1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
55694 079 1E 00 00 00 
55698 07a 1F 00 00 00 
5569c 07b 1E 00 00 00 
556a0 07c 1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
556a4 07d 1F 00 00 00 
556a8 07e 1E 00 00 00 
556ac 07f 1F 00 00 00 
556b0 080 1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
556b4 081 1F 00 00 00 
556b8 082 00 00 00 00 
556bc 083 1F 00 00 00 
556c0 084 3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
556c4 085 5A 00 00 00 
556c8 086 78 00 00 00 
556cc 087 97 00 00 00 
556d0 088 B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
556d4 089 D4 00 00 00 
556d8 08a F3 00 00 00 
556dc 08b 11 01 00 00 
556e0 08c 30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
556e4 08d 4E 01 00 00 
556e8 08e 6D 01 00 00 
556ec 08f FF FF FF FF 
556f0 090 00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
556f4 091 00 00 00 00 
      ...             
5570c 097 00 00 00 00 
55710 098 00 00 00 00 | 	byte	$00[32]
55714 099 32 57 05 00 | 	long	@@@_fatfs_cc_dat_ + 526
55718 09a 36 57 05 00 | 	long	@@@_fatfs_cc_dat_ + 530
5571c 09b 00 00 00 00 
55720 09c 00 00 00 00 
55724 09d 00 00 00 00 
55728 09e 00 00 00 00 
5572c 09f 00 00       | 	byte	$00[18]
5572e 09f 3F 3F 3F 00 
55732 0a0 55 43 54 00 
55736 0a1 55 43 54 00 
5573a 0a2 00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
5573e 0a3 00 00 00 00 
55742 0a4 00 00       | 	byte	$00[6]
55744 0a5 05 00 00 00 
55748 0a6 00 00 00 00 
5574c 0a7 00 00 00 00 
55750 0a8 00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55754 0a9 1C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1016
55758 0aa 24 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1024
5575c 0ab 00 00 00 00 | 	byte	$00, $00, $00, $00
55760 0ac 2C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1032
55764 0ad 34 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1040
55768 0ae 00 00 00 00 
5576c 0af 00 00 00 00 | 	byte	$00[8]
55770 0b0 01 00 00 00 
55774 0b1 06 00 00 00 
55778 0b2 00 00 00 00 
5577c 0b3 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55780 0b4 00 00 00 00 | 	byte	$00, $00, $00, $00
55784 0b5 3C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1048
55788 0b6 44 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1056
5578c 0b7 00 00 00 00 | 	byte	$00, $00, $00, $00
55790 0b8 4C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1064
55794 0b9 54 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1072
55798 0ba 00 00 00 00 
5579c 0bb 00 00 00 00 | 	byte	$00[8]
557a0 0bc 01 00 00 00 
557a4 0bd 06 00 00 00 
557a8 0be 00 00 00 00 
557ac 0bf 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
557b0 0c0 00 00 00 00 | 	byte	$00, $00, $00, $00
557b4 0c1 5C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1080
557b8 0c2 64 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1088
557bc 0c3 00 00 00 00 | 	byte	$00, $00, $00, $00
557c0 0c4 6C 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1096
557c4 0c5 74 59 05 00 | 	long	@@@_fatfs_cc_dat_ + 1104
557c8 0c6 00 00 00 00 
      ...             
55918 11a 00 00 00 00 
5591c 11b 00 00 00 00 | 	byte	$00[344]
55920 11c 7C 53 02 00 | 	long	@@@__system___tx
55924 11d 00 00 00 00 | 	byte	$00, $00, $00, $00
55928 11e BC 53 02 00 | 	long	@@@__system___rx
5592c 11f 00 00 00 00 | 	byte	$00, $00, $00, $00
55930 120 F0 48 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1333
55934 121 00 00 00 00 | 	byte	$00, $00, $00, $00
55938 122 60 49 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1334
5593c 123 00 00 00 00 | 	byte	$00, $00, $00, $00
55940 124 7C 53 02 00 | 	long	@@@__system___tx
55944 125 00 00 00 00 | 	byte	$00, $00, $00, $00
55948 126 BC 53 02 00 | 	long	@@@__system___rx
5594c 127 00 00 00 00 | 	byte	$00, $00, $00, $00
55950 128 F0 48 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1333
55954 129 00 00 00 00 | 	byte	$00, $00, $00, $00
55958 12a 60 49 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1334
5595c 12b 00 00 00 00 | 	byte	$00, $00, $00, $00
55960 12c 7C 53 02 00 | 	long	@@@__system___tx
55964 12d 00 00 00 00 | 	byte	$00, $00, $00, $00
55968 12e BC 53 02 00 | 	long	@@@__system___rx
5596c 12f 00 00 00 00 | 	byte	$00, $00, $00, $00
55970 130 F0 48 02 00 | 	long	@@@_fatfs_cc__rxtxioctl_1333
55974 131 00 00 00 00 | 	byte	$00, $00, $00, $00
55978 132 60 49 02 00 | 	long	@@@_fatfs_cc___dummy_flush_1334
5597c 133 00 00 00 00 
55980 134 00 00 00 00 
55984 135 00          | 	byte	$00[9]
55985 135 CA 9A 3B 00 
55989 136 00 00 00 01 
5598d 137 01 01 01 01 
55991 138 01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
55995 139 91 11 11 11 
55999 13a 11 01 01 01 
5599d 13b 01 01 01 01 
559a1 13c 01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
559a5 13d 01 01 01 01 
559a9 13e 01 01 01    | 	byte	$01[7]
559ac 13f 90 20 20 20 
559b0 140 20 20 20 20 
559b4 141 20 20 20 20 
559b8 142 20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
559bc 143 42 42 42 42 
559c0 144 42 42 42 42 
559c4 145 42 42       | 	byte	$42[10]
559c6 145 20 20 20 20 
559ca 146 20 20 20    | 	byte	$20[7]
559cd 147 44 44 44 44 
559d1 148 44 44       | 	byte	$44[6]
559d3 148 04 04 04 04 
559d7 149 04 04 04 04 
559db 14a 04 04 04 04 
559df 14b 04 04 04 04 
559e3 14c 04 04 04 04 | 	byte	$04[20]
559e7 14d 20 20 20 20 
559eb 14e 20 20       | 	byte	$20[6]
559ed 14f 48 48 48 48 
559f1 150 48 48       | 	byte	$48[6]
559f3 150 08 08 08 08 
559f7 151 08 08 08 08 
559fb 152 08 08 08 08 
559ff 153 08 08 08 08 
55a03 154 08 08 08 08 | 	byte	$08[20]
55a07 155 20 20 20 20 
55a0b 156 01 00 00 00 
55a0f 157 00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
55a10 158             | 	alignl
55a10 158             | __system__dat_
55a10 158 00 00 00 00 
55a14 159 00 00 00 00 | 	byte	$00[8]
55a18 15a 03 00 00 00 
55a1c 15b 00 00 00 00 
55a20 15c 00 00 00 00 
55a24 15d 00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55a28 15e 00 00 00 00 
      ...             
55cac 1ff 00 00 00 00 
55cb0 200 00 00 00 00 | 	byte	$00[652]
55cb4 201 DC 5C 05 00 | 	long	@@@__system__dat_ + 716
55cb8 202 E4 5C 05 00 | 	long	@@@__system__dat_ + 724
55cbc 203 EC 5C 05 00 | 	long	@@@__system__dat_ + 732
55cc0 204 F4 5C 05 00 | 	long	@@@__system__dat_ + 740
55cc4 205 00 00 00 00 
55cc8 206 00 00 00 00 
55ccc 207 00 00 00 00 
55cd0 208 00 00 00 00 
55cd4 209 00 00 00 00 
55cd8 20a 00 00 00 00 
55cdc 20b 00 00 00 00 | 	byte	$00[28]
55ce0 20c 54 86 02 00 | 	long	@@@__system____root_opendir
55ce4 20d 00 00 00 00 | 	byte	$00, $00, $00, $00
55ce8 20e F0 86 02 00 | 	long	@@@__system____root_closedir
55cec 20f 00 00 00 00 | 	byte	$00, $00, $00, $00
55cf0 210 6C 86 02 00 | 	long	@@@__system____root_readdir
55cf4 211 00 00 00 00 | 	byte	$00, $00, $00, $00
55cf8 212 F8 86 02 00 | 	long	@@@__system____root_stat
55cfc 213 00 00 00 00 
55d00 214 00 00 00 00 
55d04 215 00 00 00 00 
55d08 216 00 00 00 00 | 	byte	$00[16]
55d0c 217 05 00 00 00 
55d10 218 00 00 00 00 
55d14 219 00 00 00 00 
55d18 21a 00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55d1c 21b E4 5E 05 00 | 	long	@@@__system__dat_ + 1236
55d20 21c EC 5E 05 00 | 	long	@@@__system__dat_ + 1244
55d24 21d 00 00 00 00 | 	byte	$00, $00, $00, $00
55d28 21e F4 5E 05 00 | 	long	@@@__system__dat_ + 1252
55d2c 21f FC 5E 05 00 | 	long	@@@__system__dat_ + 1260
55d30 220 00 00 00 00 
55d34 221 00 00 00 00 | 	byte	$00[8]
55d38 222 01 00 00 00 
55d3c 223 06 00 00 00 
55d40 224 00 00 00 00 
55d44 225 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55d48 226 00 00 00 00 | 	byte	$00, $00, $00, $00
55d4c 227 04 5F 05 00 | 	long	@@@__system__dat_ + 1268
55d50 228 0C 5F 05 00 | 	long	@@@__system__dat_ + 1276
55d54 229 00 00 00 00 | 	byte	$00, $00, $00, $00
55d58 22a 14 5F 05 00 | 	long	@@@__system__dat_ + 1284
55d5c 22b 1C 5F 05 00 | 	long	@@@__system__dat_ + 1292
55d60 22c 00 00 00 00 
55d64 22d 00 00 00 00 | 	byte	$00[8]
55d68 22e 01 00 00 00 
55d6c 22f 06 00 00 00 
55d70 230 00 00 00 00 
55d74 231 00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
55d78 232 00 00 00 00 | 	byte	$00, $00, $00, $00
55d7c 233 24 5F 05 00 | 	long	@@@__system__dat_ + 1300
55d80 234 2C 5F 05 00 | 	long	@@@__system__dat_ + 1308
55d84 235 00 00 00 00 | 	byte	$00, $00, $00, $00
55d88 236 34 5F 05 00 | 	long	@@@__system__dat_ + 1316
55d8c 237 3C 5F 05 00 | 	long	@@@__system__dat_ + 1324
55d90 238 00 00 00 00 
      ...             
55ee0 28c 00 00 00 00 
55ee4 28d 00 00 00 00 | 	byte	$00[344]
55ee8 28e 7C 53 02 00 | 	long	@@@__system___tx
55eec 28f 00 00 00 00 | 	byte	$00, $00, $00, $00
55ef0 290 BC 53 02 00 | 	long	@@@__system___rx
55ef4 291 00 00 00 00 | 	byte	$00, $00, $00, $00
55ef8 292 B8 8C 02 00 | 	long	@@@__system___rxtxioctl_1991
55efc 293 00 00 00 00 | 	byte	$00, $00, $00, $00
55f00 294 28 8D 02 00 | 	long	@@@__system____dummy_flush_1992
55f04 295 00 00 00 00 | 	byte	$00, $00, $00, $00
55f08 296 7C 53 02 00 | 	long	@@@__system___tx
55f0c 297 00 00 00 00 | 	byte	$00, $00, $00, $00
55f10 298 BC 53 02 00 | 	long	@@@__system___rx
55f14 299 00 00 00 00 | 	byte	$00, $00, $00, $00
55f18 29a B8 8C 02 00 | 	long	@@@__system___rxtxioctl_1991
55f1c 29b 00 00 00 00 | 	byte	$00, $00, $00, $00
55f20 29c 28 8D 02 00 | 	long	@@@__system____dummy_flush_1992
55f24 29d 00 00 00 00 | 	byte	$00, $00, $00, $00
55f28 29e 7C 53 02 00 | 	long	@@@__system___tx
55f2c 29f 00 00 00 00 | 	byte	$00, $00, $00, $00
55f30 2a0 BC 53 02 00 | 	long	@@@__system___rx
55f34 2a1 00 00 00 00 | 	byte	$00, $00, $00, $00
55f38 2a2 B8 8C 02 00 | 	long	@@@__system___rxtxioctl_1991
55f3c 2a3 00 00 00 00 | 	byte	$00, $00, $00, $00
55f40 2a4 28 8D 02 00 | 	long	@@@__system____dummy_flush_1992
55f44 2a5             | __heap_base
55f44 2a5 00 00 00 00 
      ...             
594ac fff 00 00 00 00 
594b0 1000 00 00 00 00 
594b4 1001 00 00 00 00 
594b8 1002 00 00 00 00 
594bc 1003 00 00 00 00 
594c0 1004 00 00 00 00 
594c4 1005 00 00 00 00 
594c8 1006 00 00 00 00 
594cc 1007 00 00 00 00 
594d0 1008 00 00 00 00 
594d4 1009 00 00 00 00 
594d8 100a 00 00 00 00 
594dc 100b 00 00 00 00 
594e0 100c 00 00 00 00 
594e4 100d 00 00 00 00 
594e8 100e 00 00 00 00 
594ec 100f 00 00 00 00 
594f0 1010 00 00 00 00 
594f4 1011 00 00 00 00 
594f8 1012 00 00 00 00 
594fc 1013 00 00 00 00 
59500 1014 00 00 00 00 
59504 1015 00 00 00 00 
59508 1016 00 00 00 00 
5950c 1017 00 00 00 00 
59510 1018 00 00 00 00 
59514 1019 00 00 00 00 
59518 101a 00 00 00 00 
5951c 101b 00 00 00 00 
59520 101c 00 00 00 00 
59524 101d 00 00 00 00 
59528 101e 00 00 00 00 
5952c 101f 00 00 00 00 
59530 1020 00 00 00 00 
59534 1021 00 00 00 00 
59538 1022 00 00 00 00 
5953c 1023 00 00 00 00 
59540 1024 00 00 00 00 
59544 1025 00 00 00 00 
59548 1026 00 00 00 00 
5954c 1027 00 00 00 00 
59550 1028 00 00 00 00 
59554 1029 00 00 00 00 
59558 102a 00 00 00 00 
5955c 102b 00 00 00 00 
59560 102c 00 00 00 00 
59564 102d 00 00 00 00 
59568 102e 00 00 00 00 
5956c 102f 00 00 00 00 
59570 1030 00 00 00 00 
59574 1031 00 00 00 00 
59578 1032 00 00 00 00 
5957c 1033 00 00 00 00 
59580 1034 00 00 00 00 
59584 1035 00 00 00 00 
59588 1036 00 00 00 00 
5958c 1037 00 00 00 00 
59590 1038 00 00 00 00 
59594 1039 00 00 00 00 
59598 103a 00 00 00 00 
5959c 103b 00 00 00 00 
595a0 103c 00 00 00 00 
595a4 103d 00 00 00 00 
595a8 103e 00 00 00 00 
595ac 103f 00 00 00 00 
595b0 1040 00 00 00 00 
595b4 1041 00 00 00 00 
595b8 1042 00 00 00 00 
595bc 1043 00 00 00 00 
595c0 1044 00 00 00 00 
595c4 1045 00 00 00 00 
595c8 1046 00 00 00 00 
595cc 1047 00 00 00 00 
595d0 1048 00 00 00 00 
595d4 1049 00 00 00 00 
595d8 104a 00 00 00 00 
595dc 104b 00 00 00 00 
595e0 104c 00 00 00 00 
595e4 104d 00 00 00 00 
595e8 104e 00 00 00 00 
595ec 104f 00 00 00 00 
595f0 1050 00 00 00 00 
595f4 1051 00 00 00 00 
595f8 1052 00 00 00 00 
595fc 1053 00 00 00 00 
59600 1054 00 00 00 00 
59604 1055 00 00 00 00 
59608 1056 00 00 00 00 
5960c 1057 00 00 00 00 
59610 1058 00 00 00 00 
59614 1059 00 00 00 00 
59618 105a 00 00 00 00 
5961c 105b 00 00 00 00 
59620 105c 00 00 00 00 
59624 105d 00 00 00 00 
59628 105e 00 00 00 00 
5962c 105f 00 00 00 00 
59630 1060 00 00 00 00 
59634 1061 00 00 00 00 
59638 1062 00 00 00 00 
5963c 1063 00 00 00 00 
59640 1064 00 00 00 00 
59644 1065 00 00 00 00 
59648 1066 00 00 00 00 
5964c 1067 00 00 00 00 
59650 1068 00 00 00 00 
59654 1069 00 00 00 00 
59658 106a 00 00 00 00 
5965c 106b 00 00 00 00 
59660 106c 00 00 00 00 
59664 106d 00 00 00 00 
59668 106e 00 00 00 00 
5966c 106f 00 00 00 00 
59670 1070 00 00 00 00 
59674 1071 00 00 00 00 
59678 1072 00 00 00 00 
5967c 1073 00 00 00 00 
59680 1074 00 00 00 00 
59684 1075 00 00 00 00 
59688 1076 00 00 00 00 
5968c 1077 00 00 00 00 
59690 1078 00 00 00 00 
59694 1079 00 00 00 00 
59698 107a 00 00 00 00 
5969c 107b 00 00 00 00 
596a0 107c 00 00 00 00 
596a4 107d 00 00 00 00 
596a8 107e 00 00 00 00 
596ac 107f 00 00 00 00 
596b0 1080 00 00 00 00 
596b4 1081 00 00 00 00 
596b8 1082 00 00 00 00 
596bc 1083 00 00 00 00 
596c0 1084 00 00 00 00 
596c4 1085 00 00 00 00 
596c8 1086 00 00 00 00 
596cc 1087 00 00 00 00 
596d0 1088 00 00 00 00 
596d4 1089 00 00 00 00 
596d8 108a 00 00 00 00 
596dc 108b 00 00 00 00 
596e0 108c 00 00 00 00 
596e4 108d 00 00 00 00 
596e8 108e 00 00 00 00 
596ec 108f 00 00 00 00 
596f0 1090 00 00 00 00 
596f4 1091 00 00 00 00 
596f8 1092 00 00 00 00 
596fc 1093 00 00 00 00 
59700 1094 00 00 00 00 
59704 1095 00 00 00 00 
59708 1096 00 00 00 00 
5970c 1097 00 00 00 00 
59710 1098 00 00 00 00 
59714 1099 00 00 00 00 
59718 109a 00 00 00 00 
5971c 109b 00 00 00 00 
59720 109c 00 00 00 00 
59724 109d 00 00 00 00 
59728 109e 00 00 00 00 
5972c 109f 00 00 00 00 
59730 10a0 00 00 00 00 
59734 10a1 00 00 00 00 
59738 10a2 00 00 00 00 
5973c 10a3 00 00 00 00 
59740 10a4 00 00 00 00 
59744 10a5 00 00 00 00 
59748 10a6 00 00 00 00 
5974c 10a7 00 00 00 00 
59750 10a8 00 00 00 00 
59754 10a9 00 00 00 00 
59758 10aa 00 00 00 00 
5975c 10ab 00 00 00 00 
59760 10ac 00 00 00 00 
59764 10ad 00 00 00 00 
59768 10ae 00 00 00 00 
5976c 10af 00 00 00 00 
59770 10b0 00 00 00 00 
59774 10b1 00 00 00 00 
59778 10b2 00 00 00 00 
5977c 10b3 00 00 00 00 
59780 10b4 00 00 00 00 
59784 10b5 00 00 00 00 
59788 10b6 00 00 00 00 
5978c 10b7 00 00 00 00 
59790 10b8 00 00 00 00 
59794 10b9 00 00 00 00 
59798 10ba 00 00 00 00 
5979c 10bb 00 00 00 00 
597a0 10bc 00 00 00 00 
597a4 10bd 00 00 00 00 
597a8 10be 00 00 00 00 
597ac 10bf 00 00 00 00 
597b0 10c0 00 00 00 00 
597b4 10c1 00 00 00 00 
597b8 10c2 00 00 00 00 
597bc 10c3 00 00 00 00 
597c0 10c4 00 00 00 00 
597c4 10c5 00 00 00 00 
597c8 10c6 00 00 00 00 
597cc 10c7 00 00 00 00 
597d0 10c8 00 00 00 00 
597d4 10c9 00 00 00 00 
597d8 10ca 00 00 00 00 
597dc 10cb 00 00 00 00 
597e0 10cc 00 00 00 00 
597e4 10cd 00 00 00 00 
597e8 10ce 00 00 00 00 
597ec 10cf 00 00 00 00 
597f0 10d0 00 00 00 00 
597f4 10d1 00 00 00 00 
597f8 10d2 00 00 00 00 
597fc 10d3 00 00 00 00 
59800 10d4 00 00 00 00 
59804 10d5 00 00 00 00 
59808 10d6 00 00 00 00 
5980c 10d7 00 00 00 00 
59810 10d8 00 00 00 00 
59814 10d9 00 00 00 00 
59818 10da 00 00 00 00 
5981c 10db 00 00 00 00 
59820 10dc 00 00 00 00 
59824 10dd 00 00 00 00 
59828 10de 00 00 00 00 
5982c 10df 00 00 00 00 
59830 10e0 00 00 00 00 
59834 10e1 00 00 00 00 
59838 10e2 00 00 00 00 
5983c 10e3 00 00 00 00 
59840 10e4 00 00 00 00 
59844 10e5 00 00 00 00 
59848 10e6 00 00 00 00 
5984c 10e7 00 00 00 00 
59850 10e8 00 00 00 00 
59854 10e9 00 00 00 00 
59858 10ea 00 00 00 00 
5985c 10eb 00 00 00 00 
59860 10ec 00 00 00 00 
59864 10ed 00 00 00 00 
59868 10ee 00 00 00 00 
5986c 10ef 00 00 00 00 
59870 10f0 00 00 00 00 
59874 10f1 00 00 00 00 
59878 10f2 00 00 00 00 
5987c 10f3 00 00 00 00 
59880 10f4 00 00 00 00 
59884 10f5 00 00 00 00 
59888 10f6 00 00 00 00 
5988c 10f7 00 00 00 00 
59890 10f8 00 00 00 00 
59894 10f9 00 00 00 00 
59898 10fa 00 00 00 00 
5989c 10fb 00 00 00 00 
598a0 10fc 00 00 00 00 
598a4 10fd 00 00 00 00 
598a8 10fe 00 00 00 00 
598ac 10ff 00 00 00 00 
598b0 1100 00 00 00 00 
598b4 1101 00 00 00 00 
598b8 1102 00 00 00 00 
598bc 1103 00 00 00 00 
598c0 1104 00 00 00 00 
598c4 1105 00 00 00 00 
598c8 1106 00 00 00 00 
598cc 1107 00 00 00 00 
598d0 1108 00 00 00 00 
598d4 1109 00 00 00 00 
598d8 110a 00 00 00 00 
598dc 110b 00 00 00 00 
598e0 110c 00 00 00 00 
598e4 110d 00 00 00 00 
598e8 110e 00 00 00 00 
598ec 110f 00 00 00 00 
598f0 1110 00 00 00 00 
598f4 1111 00 00 00 00 
598f8 1112 00 00 00 00 
598fc 1113 00 00 00 00 
59900 1114 00 00 00 00 
59904 1115 00 00 00 00 
59908 1116 00 00 00 00 
5990c 1117 00 00 00 00 
59910 1118 00 00 00 00 
59914 1119 00 00 00 00 
59918 111a 00 00 00 00 
5991c 111b 00 00 00 00 
59920 111c 00 00 00 00 
59924 111d 00 00 00 00 
59928 111e 00 00 00 00 
5992c 111f 00 00 00 00 
59930 1120 00 00 00 00 
59934 1121 00 00 00 00 
59938 1122 00 00 00 00 
5993c 1123 00 00 00 00 
59940 1124 00 00 00 00 
59944 1125 00 00 00 00 
59948 1126 00 00 00 00 
5994c 1127 00 00 00 00 
59950 1128 00 00 00 00 
59954 1129 00 00 00 00 
59958 112a 00 00 00 00 
5995c 112b 00 00 00 00 
59960 112c 00 00 00 00 
59964 112d 00 00 00 00 
59968 112e 00 00 00 00 
5996c 112f 00 00 00 00 
59970 1130 00 00 00 00 
59974 1131 00 00 00 00 
59978 1132 00 00 00 00 
5997c 1133 00 00 00 00 
59980 1134 00 00 00 00 
59984 1135 00 00 00 00 
59988 1136 00 00 00 00 
5998c 1137 00 00 00 00 
59990 1138 00 00 00 00 
59994 1139 00 00 00 00 
59998 113a 00 00 00 00 
5999c 113b 00 00 00 00 
599a0 113c 00 00 00 00 
599a4 113d 00 00 00 00 
599a8 113e 00 00 00 00 
599ac 113f 00 00 00 00 
599b0 1140 00 00 00 00 
599b4 1141 00 00 00 00 
599b8 1142 00 00 00 00 
599bc 1143 00 00 00 00 
599c0 1144 00 00 00 00 
599c4 1145 00 00 00 00 
599c8 1146 00 00 00 00 
599cc 1147 00 00 00 00 
599d0 1148 00 00 00 00 
599d4 1149 00 00 00 00 
599d8 114a 00 00 00 00 
599dc 114b 00 00 00 00 
599e0 114c 00 00 00 00 
599e4 114d 00 00 00 00 
599e8 114e 00 00 00 00 
599ec 114f 00 00 00 00 
599f0 1150 00 00 00 00 
599f4 1151 00 00 00 00 
599f8 1152 00 00 00 00 
599fc 1153 00 00 00 00 
59a00 1154 00 00 00 00 
59a04 1155 00 00 00 00 
59a08 1156 00 00 00 00 
59a0c 1157 00 00 00 00 
59a10 1158 00 00 00 00 
59a14 1159 00 00 00 00 
59a18 115a 00 00 00 00 
59a1c 115b 00 00 00 00 
59a20 115c 00 00 00 00 
59a24 115d 00 00 00 00 
59a28 115e 00 00 00 00 
59a2c 115f 00 00 00 00 
59a30 1160 00 00 00 00 
59a34 1161 00 00 00 00 
59a38 1162 00 00 00 00 
59a3c 1163 00 00 00 00 
59a40 1164 00 00 00 00 
59a44 1165 00 00 00 00 
59a48 1166 00 00 00 00 
59a4c 1167 00 00 00 00 
59a50 1168 00 00 00 00 
59a54 1169 00 00 00 00 
59a58 116a 00 00 00 00 
59a5c 116b 00 00 00 00 
59a60 116c 00 00 00 00 
59a64 116d 00 00 00 00 
59a68 116e 00 00 00 00 
59a6c 116f 00 00 00 00 
59a70 1170 00 00 00 00 
59a74 1171 00 00 00 00 
59a78 1172 00 00 00 00 
59a7c 1173 00 00 00 00 
59a80 1174 00 00 00 00 
59a84 1175 00 00 00 00 
59a88 1176 00 00 00 00 
59a8c 1177 00 00 00 00 
59a90 1178 00 00 00 00 
59a94 1179 00 00 00 00 
59a98 117a 00 00 00 00 
59a9c 117b 00 00 00 00 
59aa0 117c 00 00 00 00 
59aa4 117d 00 00 00 00 
59aa8 117e 00 00 00 00 
59aac 117f 00 00 00 00 
59ab0 1180 00 00 00 00 
59ab4 1181 00 00 00 00 
59ab8 1182 00 00 00 00 
59abc 1183 00 00 00 00 
59ac0 1184 00 00 00 00 
59ac4 1185 00 00 00 00 
59ac8 1186 00 00 00 00 
59acc 1187 00 00 00 00 
59ad0 1188 00 00 00 00 
59ad4 1189 00 00 00 00 
59ad8 118a 00 00 00 00 
59adc 118b 00 00 00 00 
59ae0 118c 00 00 00 00 
59ae4 118d 00 00 00 00 
59ae8 118e 00 00 00 00 
59aec 118f 00 00 00 00 
59af0 1190 00 00 00 00 
59af4 1191 00 00 00 00 
59af8 1192 00 00 00 00 
59afc 1193 00 00 00 00 
59b00 1194 00 00 00 00 
59b04 1195 00 00 00 00 
59b08 1196 00 00 00 00 
59b0c 1197 00 00 00 00 
59b10 1198 00 00 00 00 
59b14 1199 00 00 00 00 
59b18 119a 00 00 00 00 
59b1c 119b 00 00 00 00 
59b20 119c 00 00 00 00 
59b24 119d 00 00 00 00 
59b28 119e 00 00 00 00 
59b2c 119f 00 00 00 00 
59b30 11a0 00 00 00 00 
59b34 11a1 00 00 00 00 
59b38 11a2 00 00 00 00 
59b3c 11a3 00 00 00 00 
59b40 11a4 00 00 00 00 
59b44 11a5 00 00 00 00 
59b48 11a6 00 00 00 00 
59b4c 11a7 00 00 00 00 
59b50 11a8 00 00 00 00 
59b54 11a9 00 00 00 00 
59b58 11aa 00 00 00 00 
59b5c 11ab 00 00 00 00 
59b60 11ac 00 00 00 00 
59b64 11ad 00 00 00 00 
59b68 11ae 00 00 00 00 
59b6c 11af 00 00 00 00 
59b70 11b0 00 00 00 00 
59b74 11b1 00 00 00 00 
59b78 11b2 00 00 00 00 
59b7c 11b3 00 00 00 00 
59b80 11b4 00 00 00 00 
59b84 11b5 00 00 00 00 
59b88 11b6 00 00 00 00 
59b8c 11b7 00 00 00 00 
59b90 11b8 00 00 00 00 
59b94 11b9 00 00 00 00 
59b98 11ba 00 00 00 00 
59b9c 11bb 00 00 00 00 
59ba0 11bc 00 00 00 00 
59ba4 11bd 00 00 00 00 
59ba8 11be 00 00 00 00 
59bac 11bf 00 00 00 00 
59bb0 11c0 00 00 00 00 
59bb4 11c1 00 00 00 00 
59bb8 11c2 00 00 00 00 
59bbc 11c3 00 00 00 00 
59bc0 11c4 00 00 00 00 
59bc4 11c5 00 00 00 00 
59bc8 11c6 00 00 00 00 
59bcc 11c7 00 00 00 00 
59bd0 11c8 00 00 00 00 
59bd4 11c9 00 00 00 00 
59bd8 11ca 00 00 00 00 
59bdc 11cb 00 00 00 00 
59be0 11cc 00 00 00 00 
59be4 11cd 00 00 00 00 
59be8 11ce 00 00 00 00 
59bec 11cf 00 00 00 00 
59bf0 11d0 00 00 00 00 
59bf4 11d1 00 00 00 00 
59bf8 11d2 00 00 00 00 
59bfc 11d3 00 00 00 00 
59c00 11d4 00 00 00 00 
59c04 11d5 00 00 00 00 
59c08 11d6 00 00 00 00 
59c0c 11d7 00 00 00 00 
59c10 11d8 00 00 00 00 
59c14 11d9 00 00 00 00 
59c18 11da 00 00 00 00 
59c1c 11db 00 00 00 00 
59c20 11dc 00 00 00 00 
59c24 11dd 00 00 00 00 
59c28 11de 00 00 00 00 
59c2c 11df 00 00 00 00 
59c30 11e0 00 00 00 00 
59c34 11e1 00 00 00 00 
59c38 11e2 00 00 00 00 
59c3c 11e3 00 00 00 00 
59c40 11e4 00 00 00 00 
59c44 11e5 00 00 00 00 
59c48 11e6 00 00 00 00 
59c4c 11e7 00 00 00 00 
59c50 11e8 00 00 00 00 
59c54 11e9 00 00 00 00 
59c58 11ea 00 00 00 00 
59c5c 11eb 00 00 00 00 
59c60 11ec 00 00 00 00 
59c64 11ed 00 00 00 00 
59c68 11ee 00 00 00 00 
59c6c 11ef 00 00 00 00 
59c70 11f0 00 00 00 00 
59c74 11f1 00 00 00 00 
59c78 11f2 00 00 00 00 
59c7c 11f3 00 00 00 00 
59c80 11f4 00 00 00 00 
59c84 11f5 00 00 00 00 
59c88 11f6 00 00 00 00 
59c8c 11f7 00 00 00 00 
59c90 11f8 00 00 00 00 
59c94 11f9 00 00 00 00 
59c98 11fa 00 00 00 00 
59c9c 11fb 00 00 00 00 
59ca0 11fc 00 00 00 00 
59ca4 11fd 00 00 00 00 
59ca8 11fe 00 00 00 00 
59cac 11ff 00 00 00 00 
59cb0 1200 00 00 00 00 
59cb4 1201 00 00 00 00 
59cb8 1202 00 00 00 00 
59cbc 1203 00 00 00 00 
59cc0 1204 00 00 00 00 
59cc4 1205 00 00 00 00 
59cc8 1206 00 00 00 00 
59ccc 1207 00 00 00 00 
59cd0 1208 00 00 00 00 
59cd4 1209 00 00 00 00 
59cd8 120a 00 00 00 00 
59cdc 120b 00 00 00 00 
59ce0 120c 00 00 00 00 
59ce4 120d 00 00 00 00 
59ce8 120e 00 00 00 00 
59cec 120f 00 00 00 00 
59cf0 1210 00 00 00 00 
59cf4 1211 00 00 00 00 
59cf8 1212 00 00 00 00 
59cfc 1213 00 00 00 00 
59d00 1214 00 00 00 00 
59d04 1215 00 00 00 00 
59d08 1216 00 00 00 00 
59d0c 1217 00 00 00 00 
59d10 1218 00 00 00 00 
59d14 1219 00 00 00 00 
59d18 121a 00 00 00 00 
59d1c 121b 00 00 00 00 
59d20 121c 00 00 00 00 
59d24 121d 00 00 00 00 
59d28 121e 00 00 00 00 
59d2c 121f 00 00 00 00 
59d30 1220 00 00 00 00 
59d34 1221 00 00 00 00 
59d38 1222 00 00 00 00 
59d3c 1223 00 00 00 00 
59d40 1224 00 00 00 00 
59d44 1225 00 00 00 00 
59d48 1226 00 00 00 00 
59d4c 1227 00 00 00 00 
59d50 1228 00 00 00 00 
59d54 1229 00 00 00 00 
59d58 122a 00 00 00 00 
59d5c 122b 00 00 00 00 
59d60 122c 00 00 00 00 
59d64 122d 00 00 00 00 
59d68 122e 00 00 00 00 
59d6c 122f 00 00 00 00 
59d70 1230 00 00 00 00 
59d74 1231 00 00 00 00 
59d78 1232 00 00 00 00 
59d7c 1233 00 00 00 00 
59d80 1234 00 00 00 00 
59d84 1235 00 00 00 00 
59d88 1236 00 00 00 00 
59d8c 1237 00 00 00 00 
59d90 1238 00 00 00 00 
59d94 1239 00 00 00 00 
59d98 123a 00 00 00 00 
59d9c 123b 00 00 00 00 
59da0 123c 00 00 00 00 
59da4 123d 00 00 00 00 
59da8 123e 00 00 00 00 
59dac 123f 00 00 00 00 
59db0 1240 00 00 00 00 
59db4 1241 00 00 00 00 
59db8 1242 00 00 00 00 
59dbc 1243 00 00 00 00 
59dc0 1244 00 00 00 00 
59dc4 1245 00 00 00 00 
59dc8 1246 00 00 00 00 
59dcc 1247 00 00 00 00 
59dd0 1248 00 00 00 00 
59dd4 1249 00 00 00 00 
59dd8 124a 00 00 00 00 
59ddc 124b 00 00 00 00 
59de0 124c 00 00 00 00 
59de4 124d 00 00 00 00 
59de8 124e 00 00 00 00 
59dec 124f 00 00 00 00 
59df0 1250 00 00 00 00 
59df4 1251 00 00 00 00 
59df8 1252 00 00 00 00 
59dfc 1253 00 00 00 00 
59e00 1254 00 00 00 00 
59e04 1255 00 00 00 00 
59e08 1256 00 00 00 00 
59e0c 1257 00 00 00 00 
59e10 1258 00 00 00 00 
59e14 1259 00 00 00 00 
59e18 125a 00 00 00 00 
59e1c 125b 00 00 00 00 
59e20 125c 00 00 00 00 
59e24 125d 00 00 00 00 
59e28 125e 00 00 00 00 
59e2c 125f 00 00 00 00 
59e30 1260 00 00 00 00 
59e34 1261 00 00 00 00 
59e38 1262 00 00 00 00 
59e3c 1263 00 00 00 00 
59e40 1264 00 00 00 00 
59e44 1265 00 00 00 00 
59e48 1266 00 00 00 00 
59e4c 1267 00 00 00 00 
59e50 1268 00 00 00 00 
59e54 1269 00 00 00 00 
59e58 126a 00 00 00 00 
59e5c 126b 00 00 00 00 
59e60 126c 00 00 00 00 
59e64 126d 00 00 00 00 
59e68 126e 00 00 00 00 
59e6c 126f 00 00 00 00 
59e70 1270 00 00 00 00 
59e74 1271 00 00 00 00 
59e78 1272 00 00 00 00 
59e7c 1273 00 00 00 00 
59e80 1274 00 00 00 00 
59e84 1275 00 00 00 00 
59e88 1276 00 00 00 00 
59e8c 1277 00 00 00 00 
59e90 1278 00 00 00 00 
59e94 1279 00 00 00 00 
59e98 127a 00 00 00 00 
59e9c 127b 00 00 00 00 
59ea0 127c 00 00 00 00 
59ea4 127d 00 00 00 00 
59ea8 127e 00 00 00 00 
59eac 127f 00 00 00 00 
59eb0 1280 00 00 00 00 
59eb4 1281 00 00 00 00 
59eb8 1282 00 00 00 00 
59ebc 1283 00 00 00 00 
59ec0 1284 00 00 00 00 
59ec4 1285 00 00 00 00 
59ec8 1286 00 00 00 00 
59ecc 1287 00 00 00 00 
59ed0 1288 00 00 00 00 
59ed4 1289 00 00 00 00 
59ed8 128a 00 00 00 00 
59edc 128b 00 00 00 00 
59ee0 128c 00 00 00 00 
59ee4 128d 00 00 00 00 
59ee8 128e 00 00 00 00 
59eec 128f 00 00 00 00 
59ef0 1290 00 00 00 00 
59ef4 1291 00 00 00 00 
59ef8 1292 00 00 00 00 
59efc 1293 00 00 00 00 
59f00 1294 00 00 00 00 
59f04 1295 00 00 00 00 
59f08 1296 00 00 00 00 
59f0c 1297 00 00 00 00 
59f10 1298 00 00 00 00 
59f14 1299 00 00 00 00 
59f18 129a 00 00 00 00 
59f1c 129b 00 00 00 00 
59f20 129c 00 00 00 00 
59f24 129d 00 00 00 00 
59f28 129e 00 00 00 00 
59f2c 129f 00 00 00 00 
59f30 12a0 00 00 00 00 
59f34 12a1 00 00 00 00 
59f38 12a2 00 00 00 00 
59f3c 12a3 00 00 00 00 
59f40 12a4 00 00 00 00 
59f44 12a5 00 00 00 00 
59f48 12a6 00 00 00 00 
59f4c 12a7 00 00 00 00 
59f50 12a8 00 00 00 00 
59f54 12a9 00 00 00 00 
59f58 12aa 00 00 00 00 
59f5c 12ab 00 00 00 00 
59f60 12ac 00 00 00 00 
59f64 12ad 00 00 00 00 
59f68 12ae 00 00 00 00 
59f6c 12af 00 00 00 00 
59f70 12b0 00 00 00 00 
59f74 12b1 00 00 00 00 
59f78 12b2 00 00 00 00 
59f7c 12b3 00 00 00 00 
59f80 12b4 00 00 00 00 
59f84 12b5 00 00 00 00 
59f88 12b6 00 00 00 00 
59f8c 12b7 00 00 00 00 
59f90 12b8 00 00 00 00 
59f94 12b9 00 00 00 00 
59f98 12ba 00 00 00 00 
59f9c 12bb 00 00 00 00 
59fa0 12bc 00 00 00 00 
59fa4 12bd 00 00 00 00 
59fa8 12be 00 00 00 00 
59fac 12bf 00 00 00 00 
59fb0 12c0 00 00 00 00 
59fb4 12c1 00 00 00 00 
59fb8 12c2 00 00 00 00 
59fbc 12c3 00 00 00 00 
59fc0 12c4 00 00 00 00 
59fc4 12c5 00 00 00 00 
59fc8 12c6 00 00 00 00 
59fcc 12c7 00 00 00 00 
59fd0 12c8 00 00 00 00 
59fd4 12c9 00 00 00 00 
59fd8 12ca 00 00 00 00 
59fdc 12cb 00 00 00 00 
59fe0 12cc 00 00 00 00 
59fe4 12cd 00 00 00 00 
59fe8 12ce 00 00 00 00 
59fec 12cf 00 00 00 00 
59ff0 12d0 00 00 00 00 
59ff4 12d1 00 00 00 00 
59ff8 12d2 00 00 00 00 
59ffc 12d3 00 00 00 00 
5a000 12d4 00 00 00 00 
5a004 12d5 00 00 00 00 
5a008 12d6 00 00 00 00 
5a00c 12d7 00 00 00 00 
5a010 12d8 00 00 00 00 
5a014 12d9 00 00 00 00 
5a018 12da 00 00 00 00 
5a01c 12db 00 00 00 00 
5a020 12dc 00 00 00 00 
5a024 12dd 00 00 00 00 
5a028 12de 00 00 00 00 
5a02c 12df 00 00 00 00 
5a030 12e0 00 00 00 00 
5a034 12e1 00 00 00 00 
5a038 12e2 00 00 00 00 
5a03c 12e3 00 00 00 00 
5a040 12e4 00 00 00 00 
5a044 12e5 00 00 00 00 
5a048 12e6 00 00 00 00 
5a04c 12e7 00 00 00 00 
5a050 12e8 00 00 00 00 
5a054 12e9 00 00 00 00 
5a058 12ea 00 00 00 00 
5a05c 12eb 00 00 00 00 
5a060 12ec 00 00 00 00 
5a064 12ed 00 00 00 00 
5a068 12ee 00 00 00 00 
5a06c 12ef 00 00 00 00 
5a070 12f0 00 00 00 00 
5a074 12f1 00 00 00 00 
5a078 12f2 00 00 00 00 
5a07c 12f3 00 00 00 00 
5a080 12f4 00 00 00 00 
5a084 12f5 00 00 00 00 
5a088 12f6 00 00 00 00 
5a08c 12f7 00 00 00 00 
5a090 12f8 00 00 00 00 
5a094 12f9 00 00 00 00 
5a098 12fa 00 00 00 00 
5a09c 12fb 00 00 00 00 
5a0a0 12fc 00 00 00 00 
5a0a4 12fd 00 00 00 00 
5a0a8 12fe 00 00 00 00 
5a0ac 12ff 00 00 00 00 
5a0b0 1300 00 00 00 00 
5a0b4 1301 00 00 00 00 
5a0b8 1302 00 00 00 00 
5a0bc 1303 00 00 00 00 
5a0c0 1304 00 00 00 00 
5a0c4 1305 00 00 00 00 
5a0c8 1306 00 00 00 00 
5a0cc 1307 00 00 00 00 
5a0d0 1308 00 00 00 00 
5a0d4 1309 00 00 00 00 
5a0d8 130a 00 00 00 00 
5a0dc 130b 00 00 00 00 
5a0e0 130c 00 00 00 00 
5a0e4 130d 00 00 00 00 
5a0e8 130e 00 00 00 00 
5a0ec 130f 00 00 00 00 
5a0f0 1310 00 00 00 00 
5a0f4 1311 00 00 00 00 
5a0f8 1312 00 00 00 00 
5a0fc 1313 00 00 00 00 
5a100 1314 00 00 00 00 
5a104 1315 00 00 00 00 
5a108 1316 00 00 00 00 
5a10c 1317 00 00 00 00 
5a110 1318 00 00 00 00 
5a114 1319 00 00 00 00 
5a118 131a 00 00 00 00 
5a11c 131b 00 00 00 00 
5a120 131c 00 00 00 00 
5a124 131d 00 00 00 00 
5a128 131e 00 00 00 00 
5a12c 131f 00 00 00 00 
5a130 1320 00 00 00 00 
5a134 1321 00 00 00 00 
5a138 1322 00 00 00 00 
5a13c 1323 00 00 00 00 
5a140 1324 00 00 00 00 
5a144 1325 00 00 00 00 
5a148 1326 00 00 00 00 
5a14c 1327 00 00 00 00 
5a150 1328 00 00 00 00 
5a154 1329 00 00 00 00 
5a158 132a 00 00 00 00 
5a15c 132b 00 00 00 00 
5a160 132c 00 00 00 00 
5a164 132d 00 00 00 00 
5a168 132e 00 00 00 00 
5a16c 132f 00 00 00 00 
5a170 1330 00 00 00 00 
5a174 1331 00 00 00 00 
5a178 1332 00 00 00 00 
5a17c 1333 00 00 00 00 
5a180 1334 00 00 00 00 
5a184 1335 00 00 00 00 
5a188 1336 00 00 00 00 
5a18c 1337 00 00 00 00 
5a190 1338 00 00 00 00 
5a194 1339 00 00 00 00 
5a198 133a 00 00 00 00 
5a19c 133b 00 00 00 00 
5a1a0 133c 00 00 00 00 
5a1a4 133d 00 00 00 00 
5a1a8 133e 00 00 00 00 
5a1ac 133f 00 00 00 00 
5a1b0 1340 00 00 00 00 
5a1b4 1341 00 00 00 00 
5a1b8 1342 00 00 00 00 
5a1bc 1343 00 00 00 00 
5a1c0 1344 00 00 00 00 
5a1c4 1345 00 00 00 00 
5a1c8 1346 00 00 00 00 
5a1cc 1347 00 00 00 00 
5a1d0 1348 00 00 00 00 
5a1d4 1349 00 00 00 00 
5a1d8 134a 00 00 00 00 
5a1dc 134b 00 00 00 00 
5a1e0 134c 00 00 00 00 
5a1e4 134d 00 00 00 00 
5a1e8 134e 00 00 00 00 
5a1ec 134f 00 00 00 00 
5a1f0 1350 00 00 00 00 
5a1f4 1351 00 00 00 00 
5a1f8 1352 00 00 00 00 
5a1fc 1353 00 00 00 00 
5a200 1354 00 00 00 00 
5a204 1355 00 00 00 00 
5a208 1356 00 00 00 00 
5a20c 1357 00 00 00 00 
5a210 1358 00 00 00 00 
5a214 1359 00 00 00 00 
5a218 135a 00 00 00 00 
5a21c 135b 00 00 00 00 
5a220 135c 00 00 00 00 
5a224 135d 00 00 00 00 
5a228 135e 00 00 00 00 
5a22c 135f 00 00 00 00 
5a230 1360 00 00 00 00 
5a234 1361 00 00 00 00 
5a238 1362 00 00 00 00 
5a23c 1363 00 00 00 00 
5a240 1364 00 00 00 00 
5a244 1365 00 00 00 00 
5a248 1366 00 00 00 00 
5a24c 1367 00 00 00 00 
5a250 1368 00 00 00 00 
5a254 1369 00 00 00 00 
5a258 136a 00 00 00 00 
5a25c 136b 00 00 00 00 
5a260 136c 00 00 00 00 
5a264 136d 00 00 00 00 
5a268 136e 00 00 00 00 
5a26c 136f 00 00 00 00 
5a270 1370 00 00 00 00 
5a274 1371 00 00 00 00 
5a278 1372 00 00 00 00 
5a27c 1373 00 00 00 00 
5a280 1374 00 00 00 00 
5a284 1375 00 00 00 00 
5a288 1376 00 00 00 00 
5a28c 1377 00 00 00 00 
5a290 1378 00 00 00 00 
5a294 1379 00 00 00 00 
5a298 137a 00 00 00 00 
5a29c 137b 00 00 00 00 
5a2a0 137c 00 00 00 00 
5a2a4 137d 00 00 00 00 
5a2a8 137e 00 00 00 00 
5a2ac 137f 00 00 00 00 
5a2b0 1380 00 00 00 00 
5a2b4 1381 00 00 00 00 
5a2b8 1382 00 00 00 00 
5a2bc 1383 00 00 00 00 
5a2c0 1384 00 00 00 00 
5a2c4 1385 00 00 00 00 
5a2c8 1386 00 00 00 00 
5a2cc 1387 00 00 00 00 
5a2d0 1388 00 00 00 00 
5a2d4 1389 00 00 00 00 
5a2d8 138a 00 00 00 00 
5a2dc 138b 00 00 00 00 
5a2e0 138c 00 00 00 00 
5a2e4 138d 00 00 00 00 
5a2e8 138e 00 00 00 00 
5a2ec 138f 00 00 00 00 
5a2f0 1390 00 00 00 00 
5a2f4 1391 00 00 00 00 
5a2f8 1392 00 00 00 00 
5a2fc 1393 00 00 00 00 
5a300 1394 00 00 00 00 
5a304 1395 00 00 00 00 
5a308 1396 00 00 00 00 
5a30c 1397 00 00 00 00 
5a310 1398 00 00 00 00 
5a314 1399 00 00 00 00 
5a318 139a 00 00 00 00 
5a31c 139b 00 00 00 00 
5a320 139c 00 00 00 00 
5a324 139d 00 00 00 00 
5a328 139e 00 00 00 00 
5a32c 139f 00 00 00 00 
5a330 13a0 00 00 00 00 
5a334 13a1 00 00 00 00 
5a338 13a2 00 00 00 00 
5a33c 13a3 00 00 00 00 
5a340 13a4 00 00 00 00 
5a344 13a5 00 00 00 00 
5a348 13a6 00 00 00 00 
5a34c 13a7 00 00 00 00 
5a350 13a8 00 00 00 00 
5a354 13a9 00 00 00 00 
5a358 13aa 00 00 00 00 
5a35c 13ab 00 00 00 00 
5a360 13ac 00 00 00 00 
5a364 13ad 00 00 00 00 
5a368 13ae 00 00 00 00 
5a36c 13af 00 00 00 00 
5a370 13b0 00 00 00 00 
5a374 13b1 00 00 00 00 
5a378 13b2 00 00 00 00 
5a37c 13b3 00 00 00 00 
5a380 13b4 00 00 00 00 
5a384 13b5 00 00 00 00 
5a388 13b6 00 00 00 00 
5a38c 13b7 00 00 00 00 
5a390 13b8 00 00 00 00 
5a394 13b9 00 00 00 00 
5a398 13ba 00 00 00 00 
5a39c 13bb 00 00 00 00 
5a3a0 13bc 00 00 00 00 
5a3a4 13bd 00 00 00 00 
5a3a8 13be 00 00 00 00 
5a3ac 13bf 00 00 00 00 
5a3b0 13c0 00 00 00 00 
5a3b4 13c1 00 00 00 00 
5a3b8 13c2 00 00 00 00 
5a3bc 13c3 00 00 00 00 
5a3c0 13c4 00 00 00 00 
5a3c4 13c5 00 00 00 00 
5a3c8 13c6 00 00 00 00 
5a3cc 13c7 00 00 00 00 
5a3d0 13c8 00 00 00 00 
5a3d4 13c9 00 00 00 00 
5a3d8 13ca 00 00 00 00 
5a3dc 13cb 00 00 00 00 
5a3e0 13cc 00 00 00 00 
5a3e4 13cd 00 00 00 00 
5a3e8 13ce 00 00 00 00 
5a3ec 13cf 00 00 00 00 
5a3f0 13d0 00 00 00 00 
5a3f4 13d1 00 00 00 00 
5a3f8 13d2 00 00 00 00 
5a3fc 13d3 00 00 00 00 
5a400 13d4 00 00 00 00 
5a404 13d5 00 00 00 00 
5a408 13d6 00 00 00 00 
5a40c 13d7 00 00 00 00 
5a410 13d8 00 00 00 00 
5a414 13d9 00 00 00 00 
5a418 13da 00 00 00 00 
5a41c 13db 00 00 00 00 
5a420 13dc 00 00 00 00 
5a424 13dd 00 00 00 00 
5a428 13de 00 00 00 00 
5a42c 13df 00 00 00 00 
5a430 13e0 00 00 00 00 
5a434 13e1 00 00 00 00 
5a438 13e2 00 00 00 00 
5a43c 13e3 00 00 00 00 
5a440 13e4 00 00 00 00 
5a444 13e5 00 00 00 00 
5a448 13e6 00 00 00 00 
5a44c 13e7 00 00 00 00 
5a450 13e8 00 00 00 00 
5a454 13e9 00 00 00 00 
5a458 13ea 00 00 00 00 
5a45c 13eb 00 00 00 00 
5a460 13ec 00 00 00 00 
5a464 13ed 00 00 00 00 
5a468 13ee 00 00 00 00 
5a46c 13ef 00 00 00 00 
5a470 13f0 00 00 00 00 
5a474 13f1 00 00 00 00 
5a478 13f2 00 00 00 00 
5a47c 13f3 00 00 00 00 
5a480 13f4 00 00 00 00 
5a484 13f5 00 00 00 00 
5a488 13f6 00 00 00 00 
5a48c 13f7 00 00 00 00 
5a490 13f8 00 00 00 00 
5a494 13f9 00 00 00 00 
5a498 13fa 00 00 00 00 
5a49c 13fb 00 00 00 00 
5a4a0 13fc 00 00 00 00 
5a4a4 13fd 00 00 00 00 
5a4a8 13fe 00 00 00 00 
5a4ac 13ff 00 00 00 00 
5a4b0 1400 00 00 00 00 
5a4b4 1401 00 00 00 00 
5a4b8 1402 00 00 00 00 
5a4bc 1403 00 00 00 00 
5a4c0 1404 00 00 00 00 
5a4c4 1405 00 00 00 00 
5a4c8 1406 00 00 00 00 
5a4cc 1407 00 00 00 00 
5a4d0 1408 00 00 00 00 
5a4d4 1409 00 00 00 00 
5a4d8 140a 00 00 00 00 
5a4dc 140b 00 00 00 00 
5a4e0 140c 00 00 00 00 
5a4e4 140d 00 00 00 00 
5a4e8 140e 00 00 00 00 
5a4ec 140f 00 00 00 00 
5a4f0 1410 00 00 00 00 
5a4f4 1411 00 00 00 00 
5a4f8 1412 00 00 00 00 
5a4fc 1413 00 00 00 00 
5a500 1414 00 00 00 00 
5a504 1415 00 00 00 00 
5a508 1416 00 00 00 00 
5a50c 1417 00 00 00 00 
5a510 1418 00 00 00 00 
5a514 1419 00 00 00 00 
5a518 141a 00 00 00 00 
5a51c 141b 00 00 00 00 
5a520 141c 00 00 00 00 
5a524 141d 00 00 00 00 
5a528 141e 00 00 00 00 
5a52c 141f 00 00 00 00 
5a530 1420 00 00 00 00 
5a534 1421 00 00 00 00 
5a538 1422 00 00 00 00 
5a53c 1423 00 00 00 00 
5a540 1424 00 00 00 00 
5a544 1425 00 00 00 00 
5a548 1426 00 00 00 00 
5a54c 1427 00 00 00 00 
5a550 1428 00 00 00 00 
5a554 1429 00 00 00 00 
5a558 142a 00 00 00 00 
5a55c 142b 00 00 00 00 
5a560 142c 00 00 00 00 
5a564 142d 00 00 00 00 
5a568 142e 00 00 00 00 
5a56c 142f 00 00 00 00 
5a570 1430 00 00 00 00 
5a574 1431 00 00 00 00 
5a578 1432 00 00 00 00 
5a57c 1433 00 00 00 00 
5a580 1434 00 00 00 00 
5a584 1435 00 00 00 00 
5a588 1436 00 00 00 00 
5a58c 1437 00 00 00 00 
5a590 1438 00 00 00 00 
5a594 1439 00 00 00 00 
5a598 143a 00 00 00 00 
5a59c 143b 00 00 00 00 
5a5a0 143c 00 00 00 00 
5a5a4 143d 00 00 00 00 
5a5a8 143e 00 00 00 00 
5a5ac 143f 00 00 00 00 
5a5b0 1440 00 00 00 00 
5a5b4 1441 00 00 00 00 
5a5b8 1442 00 00 00 00 
5a5bc 1443 00 00 00 00 
5a5c0 1444 00 00 00 00 
5a5c4 1445 00 00 00 00 
5a5c8 1446 00 00 00 00 
5a5cc 1447 00 00 00 00 
5a5d0 1448 00 00 00 00 
5a5d4 1449 00 00 00 00 
5a5d8 144a 00 00 00 00 
5a5dc 144b 00 00 00 00 
5a5e0 144c 00 00 00 00 
5a5e4 144d 00 00 00 00 
5a5e8 144e 00 00 00 00 
5a5ec 144f 00 00 00 00 
5a5f0 1450 00 00 00 00 
5a5f4 1451 00 00 00 00 
5a5f8 1452 00 00 00 00 
5a5fc 1453 00 00 00 00 
5a600 1454 00 00 00 00 
5a604 1455 00 00 00 00 
5a608 1456 00 00 00 00 
5a60c 1457 00 00 00 00 
5a610 1458 00 00 00 00 
5a614 1459 00 00 00 00 
5a618 145a 00 00 00 00 
5a61c 145b 00 00 00 00 
5a620 145c 00 00 00 00 
5a624 145d 00 00 00 00 
5a628 145e 00 00 00 00 
5a62c 145f 00 00 00 00 
5a630 1460 00 00 00 00 
5a634 1461 00 00 00 00 
5a638 1462 00 00 00 00 
5a63c 1463 00 00 00 00 
5a640 1464 00 00 00 00 
5a644 1465 00 00 00 00 
5a648 1466 00 00 00 00 
5a64c 1467 00 00 00 00 
5a650 1468 00 00 00 00 
5a654 1469 00 00 00 00 
5a658 146a 00 00 00 00 
5a65c 146b 00 00 00 00 
5a660 146c 00 00 00 00 
5a664 146d 00 00 00 00 
5a668 146e 00 00 00 00 
5a66c 146f 00 00 00 00 
5a670 1470 00 00 00 00 
5a674 1471 00 00 00 00 
5a678 1472 00 00 00 00 
5a67c 1473 00 00 00 00 
5a680 1474 00 00 00 00 
5a684 1475 00 00 00 00 
5a688 1476 00 00 00 00 
5a68c 1477 00 00 00 00 
5a690 1478 00 00 00 00 
5a694 1479 00 00 00 00 
5a698 147a 00 00 00 00 
5a69c 147b 00 00 00 00 
5a6a0 147c 00 00 00 00 
5a6a4 147d 00 00 00 00 
5a6a8 147e 00 00 00 00 
5a6ac 147f 00 00 00 00 
5a6b0 1480 00 00 00 00 
5a6b4 1481 00 00 00 00 
5a6b8 1482 00 00 00 00 
5a6bc 1483 00 00 00 00 
5a6c0 1484 00 00 00 00 
5a6c4 1485 00 00 00 00 
5a6c8 1486 00 00 00 00 
5a6cc 1487 00 00 00 00 
5a6d0 1488 00 00 00 00 
5a6d4 1489 00 00 00 00 
5a6d8 148a 00 00 00 00 
5a6dc 148b 00 00 00 00 
5a6e0 148c 00 00 00 00 
5a6e4 148d 00 00 00 00 
5a6e8 148e 00 00 00 00 
5a6ec 148f 00 00 00 00 
5a6f0 1490 00 00 00 00 
5a6f4 1491 00 00 00 00 
5a6f8 1492 00 00 00 00 
5a6fc 1493 00 00 00 00 
5a700 1494 00 00 00 00 
5a704 1495 00 00 00 00 
5a708 1496 00 00 00 00 
5a70c 1497 00 00 00 00 
5a710 1498 00 00 00 00 
5a714 1499 00 00 00 00 
5a718 149a 00 00 00 00 
5a71c 149b 00 00 00 00 
5a720 149c 00 00 00 00 
5a724 149d 00 00 00 00 
5a728 149e 00 00 00 00 
5a72c 149f 00 00 00 00 
5a730 14a0 00 00 00 00 
5a734 14a1 00 00 00 00 
5a738 14a2 00 00 00 00 
5a73c 14a3 00 00 00 00 
5a740 14a4 00 00 00 00 
5a744 14a5 00 00 00 00 
5a748 14a6 00 00 00 00 
5a74c 14a7 00 00 00 00 
5a750 14a8 00 00 00 00 
5a754 14a9 00 00 00 00 
5a758 14aa 00 00 00 00 
5a75c 14ab 00 00 00 00 
5a760 14ac 00 00 00 00 
5a764 14ad 00 00 00 00 
5a768 14ae 00 00 00 00 
5a76c 14af 00 00 00 00 
5a770 14b0 00 00 00 00 
5a774 14b1 00 00 00 00 
5a778 14b2 00 00 00 00 
5a77c 14b3 00 00 00 00 
5a780 14b4 00 00 00 00 
5a784 14b5 00 00 00 00 
5a788 14b6 00 00 00 00 
5a78c 14b7 00 00 00 00 
5a790 14b8 00 00 00 00 
5a794 14b9 00 00 00 00 
5a798 14ba 00 00 00 00 
5a79c 14bb 00 00 00 00 
5a7a0 14bc 00 00 00 00 
5a7a4 14bd 00 00 00 00 
5a7a8 14be 00 00 00 00 
5a7ac 14bf 00 00 00 00 
5a7b0 14c0 00 00 00 00 
5a7b4 14c1 00 00 00 00 
5a7b8 14c2 00 00 00 00 
5a7bc 14c3 00 00 00 00 
5a7c0 14c4 00 00 00 00 
5a7c4 14c5 00 00 00 00 
5a7c8 14c6 00 00 00 00 
5a7cc 14c7 00 00 00 00 
5a7d0 14c8 00 00 00 00 
5a7d4 14c9 00 00 00 00 
5a7d8 14ca 00 00 00 00 
5a7dc 14cb 00 00 00 00 
5a7e0 14cc 00 00 00 00 
5a7e4 14cd 00 00 00 00 
5a7e8 14ce 00 00 00 00 
5a7ec 14cf 00 00 00 00 
5a7f0 14d0 00 00 00 00 
5a7f4 14d1 00 00 00 00 
5a7f8 14d2 00 00 00 00 
5a7fc 14d3 00 00 00 00 
5a800 14d4 00 00 00 00 
5a804 14d5 00 00 00 00 
5a808 14d6 00 00 00 00 
5a80c 14d7 00 00 00 00 
5a810 14d8 00 00 00 00 
5a814 14d9 00 00 00 00 
5a818 14da 00 00 00 00 
5a81c 14db 00 00 00 00 
5a820 14dc 00 00 00 00 
5a824 14dd 00 00 00 00 
5a828 14de 00 00 00 00 
5a82c 14df 00 00 00 00 
5a830 14e0 00 00 00 00 
5a834 14e1 00 00 00 00 
5a838 14e2 00 00 00 00 
5a83c 14e3 00 00 00 00 
5a840 14e4 00 00 00 00 
5a844 14e5 00 00 00 00 
5a848 14e6 00 00 00 00 
5a84c 14e7 00 00 00 00 
5a850 14e8 00 00 00 00 
5a854 14e9 00 00 00 00 
5a858 14ea 00 00 00 00 
5a85c 14eb 00 00 00 00 
5a860 14ec 00 00 00 00 
5a864 14ed 00 00 00 00 
5a868 14ee 00 00 00 00 
5a86c 14ef 00 00 00 00 
5a870 14f0 00 00 00 00 
5a874 14f1 00 00 00 00 
5a878 14f2 00 00 00 00 
5a87c 14f3 00 00 00 00 
5a880 14f4 00 00 00 00 
5a884 14f5 00 00 00 00 
5a888 14f6 00 00 00 00 
5a88c 14f7 00 00 00 00 
5a890 14f8 00 00 00 00 
5a894 14f9 00 00 00 00 
5a898 14fa 00 00 00 00 
5a89c 14fb 00 00 00 00 
5a8a0 14fc 00 00 00 00 
5a8a4 14fd 00 00 00 00 
5a8a8 14fe 00 00 00 00 
5a8ac 14ff 00 00 00 00 
5a8b0 1500 00 00 00 00 
5a8b4 1501 00 00 00 00 
5a8b8 1502 00 00 00 00 
5a8bc 1503 00 00 00 00 
5a8c0 1504 00 00 00 00 
5a8c4 1505 00 00 00 00 
5a8c8 1506 00 00 00 00 
5a8cc 1507 00 00 00 00 
5a8d0 1508 00 00 00 00 
5a8d4 1509 00 00 00 00 
5a8d8 150a 00 00 00 00 
5a8dc 150b 00 00 00 00 
5a8e0 150c 00 00 00 00 
5a8e4 150d 00 00 00 00 
5a8e8 150e 00 00 00 00 
5a8ec 150f 00 00 00 00 
5a8f0 1510 00 00 00 00 
5a8f4 1511 00 00 00 00 
5a8f8 1512 00 00 00 00 
5a8fc 1513 00 00 00 00 
5a900 1514 00 00 00 00 
5a904 1515 00 00 00 00 
5a908 1516 00 00 00 00 
5a90c 1517 00 00 00 00 
5a910 1518 00 00 00 00 
5a914 1519 00 00 00 00 
5a918 151a 00 00 00 00 
5a91c 151b 00 00 00 00 
5a920 151c 00 00 00 00 
5a924 151d 00 00 00 00 
5a928 151e 00 00 00 00 
5a92c 151f 00 00 00 00 
5a930 1520 00 00 00 00 
5a934 1521 00 00 00 00 
5a938 1522 00 00 00 00 
5a93c 1523 00 00 00 00 
5a940 1524 00 00 00 00 
5a944 1525 00 00 00 00 
5a948 1526 00 00 00 00 
5a94c 1527 00 00 00 00 
5a950 1528 00 00 00 00 
5a954 1529 00 00 00 00 
5a958 152a 00 00 00 00 
5a95c 152b 00 00 00 00 
5a960 152c 00 00 00 00 
5a964 152d 00 00 00 00 
5a968 152e 00 00 00 00 
5a96c 152f 00 00 00 00 
5a970 1530 00 00 00 00 
5a974 1531 00 00 00 00 
5a978 1532 00 00 00 00 
5a97c 1533 00 00 00 00 
5a980 1534 00 00 00 00 
5a984 1535 00 00 00 00 
5a988 1536 00 00 00 00 
5a98c 1537 00 00 00 00 
5a990 1538 00 00 00 00 
5a994 1539 00 00 00 00 
5a998 153a 00 00 00 00 
5a99c 153b 00 00 00 00 
5a9a0 153c 00 00 00 00 
5a9a4 153d 00 00 00 00 
5a9a8 153e 00 00 00 00 
5a9ac 153f 00 00 00 00 
5a9b0 1540 00 00 00 00 
5a9b4 1541 00 00 00 00 
5a9b8 1542 00 00 00 00 
5a9bc 1543 00 00 00 00 
5a9c0 1544 00 00 00 00 
5a9c4 1545 00 00 00 00 
5a9c8 1546 00 00 00 00 
5a9cc 1547 00 00 00 00 
5a9d0 1548 00 00 00 00 
5a9d4 1549 00 00 00 00 
5a9d8 154a 00 00 00 00 
5a9dc 154b 00 00 00 00 
5a9e0 154c 00 00 00 00 
5a9e4 154d 00 00 00 00 
5a9e8 154e 00 00 00 00 
5a9ec 154f 00 00 00 00 
5a9f0 1550 00 00 00 00 
5a9f4 1551 00 00 00 00 
5a9f8 1552 00 00 00 00 
5a9fc 1553 00 00 00 00 
5aa00 1554 00 00 00 00 
5aa04 1555 00 00 00 00 
5aa08 1556 00 00 00 00 
5aa0c 1557 00 00 00 00 
5aa10 1558 00 00 00 00 
5aa14 1559 00 00 00 00 
5aa18 155a 00 00 00 00 
5aa1c 155b 00 00 00 00 
5aa20 155c 00 00 00 00 
5aa24 155d 00 00 00 00 
5aa28 155e 00 00 00 00 
5aa2c 155f 00 00 00 00 
5aa30 1560 00 00 00 00 
5aa34 1561 00 00 00 00 
5aa38 1562 00 00 00 00 
5aa3c 1563 00 00 00 00 
5aa40 1564 00 00 00 00 
5aa44 1565 00 00 00 00 
5aa48 1566 00 00 00 00 
5aa4c 1567 00 00 00 00 
5aa50 1568 00 00 00 00 
5aa54 1569 00 00 00 00 
5aa58 156a 00 00 00 00 
5aa5c 156b 00 00 00 00 
5aa60 156c 00 00 00 00 
5aa64 156d 00 00 00 00 
5aa68 156e 00 00 00 00 
5aa6c 156f 00 00 00 00 
5aa70 1570 00 00 00 00 
5aa74 1571 00 00 00 00 
5aa78 1572 00 00 00 00 
5aa7c 1573 00 00 00 00 
5aa80 1574 00 00 00 00 
5aa84 1575 00 00 00 00 
5aa88 1576 00 00 00 00 
5aa8c 1577 00 00 00 00 
5aa90 1578 00 00 00 00 
5aa94 1579 00 00 00 00 
5aa98 157a 00 00 00 00 
5aa9c 157b 00 00 00 00 
5aaa0 157c 00 00 00 00 
5aaa4 157d 00 00 00 00 
5aaa8 157e 00 00 00 00 
5aaac 157f 00 00 00 00 
5aab0 1580 00 00 00 00 
5aab4 1581 00 00 00 00 
5aab8 1582 00 00 00 00 
5aabc 1583 00 00 00 00 
5aac0 1584 00 00 00 00 
5aac4 1585 00 00 00 00 
5aac8 1586 00 00 00 00 
5aacc 1587 00 00 00 00 
5aad0 1588 00 00 00 00 
5aad4 1589 00 00 00 00 
5aad8 158a 00 00 00 00 
5aadc 158b 00 00 00 00 
5aae0 158c 00 00 00 00 
5aae4 158d 00 00 00 00 
5aae8 158e 00 00 00 00 
5aaec 158f 00 00 00 00 
5aaf0 1590 00 00 00 00 
5aaf4 1591 00 00 00 00 
5aaf8 1592 00 00 00 00 
5aafc 1593 00 00 00 00 
5ab00 1594 00 00 00 00 
5ab04 1595 00 00 00 00 
5ab08 1596 00 00 00 00 
5ab0c 1597 00 00 00 00 
5ab10 1598 00 00 00 00 
5ab14 1599 00 00 00 00 
5ab18 159a 00 00 00 00 
5ab1c 159b 00 00 00 00 
5ab20 159c 00 00 00 00 
5ab24 159d 00 00 00 00 
5ab28 159e 00 00 00 00 
5ab2c 159f 00 00 00 00 
5ab30 15a0 00 00 00 00 
5ab34 15a1 00 00 00 00 
5ab38 15a2 00 00 00 00 
5ab3c 15a3 00 00 00 00 
5ab40 15a4 00 00 00 00 
5ab44 15a5 00 00 00 00 
5ab48 15a6 00 00 00 00 
5ab4c 15a7 00 00 00 00 
5ab50 15a8 00 00 00 00 
5ab54 15a9 00 00 00 00 
5ab58 15aa 00 00 00 00 
5ab5c 15ab 00 00 00 00 
5ab60 15ac 00 00 00 00 
5ab64 15ad 00 00 00 00 
5ab68 15ae 00 00 00 00 
5ab6c 15af 00 00 00 00 
5ab70 15b0 00 00 00 00 
5ab74 15b1 00 00 00 00 
5ab78 15b2 00 00 00 00 
5ab7c 15b3 00 00 00 00 
5ab80 15b4 00 00 00 00 
5ab84 15b5 00 00 00 00 
5ab88 15b6 00 00 00 00 
5ab8c 15b7 00 00 00 00 
5ab90 15b8 00 00 00 00 
5ab94 15b9 00 00 00 00 
5ab98 15ba 00 00 00 00 
5ab9c 15bb 00 00 00 00 
5aba0 15bc 00 00 00 00 
5aba4 15bd 00 00 00 00 
5aba8 15be 00 00 00 00 
5abac 15bf 00 00 00 00 
5abb0 15c0 00 00 00 00 
5abb4 15c1 00 00 00 00 
5abb8 15c2 00 00 00 00 
5abbc 15c3 00 00 00 00 
5abc0 15c4 00 00 00 00 
5abc4 15c5 00 00 00 00 
5abc8 15c6 00 00 00 00 
5abcc 15c7 00 00 00 00 
5abd0 15c8 00 00 00 00 
5abd4 15c9 00 00 00 00 
5abd8 15ca 00 00 00 00 
5abdc 15cb 00 00 00 00 
5abe0 15cc 00 00 00 00 
5abe4 15cd 00 00 00 00 
5abe8 15ce 00 00 00 00 
5abec 15cf 00 00 00 00 
5abf0 15d0 00 00 00 00 
5abf4 15d1 00 00 00 00 
5abf8 15d2 00 00 00 00 
5abfc 15d3 00 00 00 00 
5ac00 15d4 00 00 00 00 
5ac04 15d5 00 00 00 00 
5ac08 15d6 00 00 00 00 
5ac0c 15d7 00 00 00 00 
5ac10 15d8 00 00 00 00 
5ac14 15d9 00 00 00 00 
5ac18 15da 00 00 00 00 
5ac1c 15db 00 00 00 00 
5ac20 15dc 00 00 00 00 
5ac24 15dd 00 00 00 00 
5ac28 15de 00 00 00 00 
5ac2c 15df 00 00 00 00 
5ac30 15e0 00 00 00 00 
5ac34 15e1 00 00 00 00 
5ac38 15e2 00 00 00 00 
5ac3c 15e3 00 00 00 00 
5ac40 15e4 00 00 00 00 
5ac44 15e5 00 00 00 00 
5ac48 15e6 00 00 00 00 
5ac4c 15e7 00 00 00 00 
5ac50 15e8 00 00 00 00 
5ac54 15e9 00 00 00 00 
5ac58 15ea 00 00 00 00 
5ac5c 15eb 00 00 00 00 
5ac60 15ec 00 00 00 00 
5ac64 15ed 00 00 00 00 
5ac68 15ee 00 00 00 00 
5ac6c 15ef 00 00 00 00 
5ac70 15f0 00 00 00 00 
5ac74 15f1 00 00 00 00 
5ac78 15f2 00 00 00 00 
5ac7c 15f3 00 00 00 00 
5ac80 15f4 00 00 00 00 
5ac84 15f5 00 00 00 00 
5ac88 15f6 00 00 00 00 
5ac8c 15f7 00 00 00 00 
5ac90 15f8 00 00 00 00 
5ac94 15f9 00 00 00 00 
5ac98 15fa 00 00 00 00 
5ac9c 15fb 00 00 00 00 
5aca0 15fc 00 00 00 00 
5aca4 15fd 00 00 00 00 
5aca8 15fe 00 00 00 00 
5acac 15ff 00 00 00 00 
5acb0 1600 00 00 00 00 
5acb4 1601 00 00 00 00 
5acb8 1602 00 00 00 00 
5acbc 1603 00 00 00 00 
5acc0 1604 00 00 00 00 
5acc4 1605 00 00 00 00 
5acc8 1606 00 00 00 00 
5accc 1607 00 00 00 00 
5acd0 1608 00 00 00 00 
5acd4 1609 00 00 00 00 
5acd8 160a 00 00 00 00 
5acdc 160b 00 00 00 00 
5ace0 160c 00 00 00 00 
5ace4 160d 00 00 00 00 
5ace8 160e 00 00 00 00 
5acec 160f 00 00 00 00 
5acf0 1610 00 00 00 00 
5acf4 1611 00 00 00 00 
5acf8 1612 00 00 00 00 
5acfc 1613 00 00 00 00 
5ad00 1614 00 00 00 00 
5ad04 1615 00 00 00 00 
5ad08 1616 00 00 00 00 
5ad0c 1617 00 00 00 00 
5ad10 1618 00 00 00 00 
5ad14 1619 00 00 00 00 
5ad18 161a 00 00 00 00 
5ad1c 161b 00 00 00 00 
5ad20 161c 00 00 00 00 
5ad24 161d 00 00 00 00 
5ad28 161e 00 00 00 00 
5ad2c 161f 00 00 00 00 
5ad30 1620 00 00 00 00 
5ad34 1621 00 00 00 00 
5ad38 1622 00 00 00 00 
5ad3c 1623 00 00 00 00 
5ad40 1624 00 00 00 00 
5ad44 1625 00 00 00 00 
5ad48 1626 00 00 00 00 
5ad4c 1627 00 00 00 00 
5ad50 1628 00 00 00 00 
5ad54 1629 00 00 00 00 
5ad58 162a 00 00 00 00 
5ad5c 162b 00 00 00 00 
5ad60 162c 00 00 00 00 
5ad64 162d 00 00 00 00 
5ad68 162e 00 00 00 00 
5ad6c 162f 00 00 00 00 
5ad70 1630 00 00 00 00 
5ad74 1631 00 00 00 00 
5ad78 1632 00 00 00 00 
5ad7c 1633 00 00 00 00 
5ad80 1634 00 00 00 00 
5ad84 1635 00 00 00 00 
5ad88 1636 00 00 00 00 
5ad8c 1637 00 00 00 00 
5ad90 1638 00 00 00 00 
5ad94 1639 00 00 00 00 
5ad98 163a 00 00 00 00 
5ad9c 163b 00 00 00 00 
5ada0 163c 00 00 00 00 
5ada4 163d 00 00 00 00 
5ada8 163e 00 00 00 00 
5adac 163f 00 00 00 00 
5adb0 1640 00 00 00 00 
5adb4 1641 00 00 00 00 
5adb8 1642 00 00 00 00 
5adbc 1643 00 00 00 00 
5adc0 1644 00 00 00 00 
5adc4 1645 00 00 00 00 
5adc8 1646 00 00 00 00 
5adcc 1647 00 00 00 00 
5add0 1648 00 00 00 00 
5add4 1649 00 00 00 00 
5add8 164a 00 00 00 00 
5addc 164b 00 00 00 00 
5ade0 164c 00 00 00 00 
5ade4 164d 00 00 00 00 
5ade8 164e 00 00 00 00 
5adec 164f 00 00 00 00 
5adf0 1650 00 00 00 00 
5adf4 1651 00 00 00 00 
5adf8 1652 00 00 00 00 
5adfc 1653 00 00 00 00 
5ae00 1654 00 00 00 00 
5ae04 1655 00 00 00 00 
5ae08 1656 00 00 00 00 
5ae0c 1657 00 00 00 00 
5ae10 1658 00 00 00 00 
5ae14 1659 00 00 00 00 
5ae18 165a 00 00 00 00 
5ae1c 165b 00 00 00 00 
5ae20 165c 00 00 00 00 
5ae24 165d 00 00 00 00 
5ae28 165e 00 00 00 00 
5ae2c 165f 00 00 00 00 
5ae30 1660 00 00 00 00 
5ae34 1661 00 00 00 00 
5ae38 1662 00 00 00 00 
5ae3c 1663 00 00 00 00 
5ae40 1664 00 00 00 00 
5ae44 1665 00 00 00 00 
5ae48 1666 00 00 00 00 
5ae4c 1667 00 00 00 00 
5ae50 1668 00 00 00 00 
5ae54 1669 00 00 00 00 
5ae58 166a 00 00 00 00 
5ae5c 166b 00 00 00 00 
5ae60 166c 00 00 00 00 
5ae64 166d 00 00 00 00 
5ae68 166e 00 00 00 00 
5ae6c 166f 00 00 00 00 
5ae70 1670 00 00 00 00 
5ae74 1671 00 00 00 00 
5ae78 1672 00 00 00 00 
5ae7c 1673 00 00 00 00 
5ae80 1674 00 00 00 00 
5ae84 1675 00 00 00 00 
5ae88 1676 00 00 00 00 
5ae8c 1677 00 00 00 00 
5ae90 1678 00 00 00 00 
5ae94 1679 00 00 00 00 
5ae98 167a 00 00 00 00 
5ae9c 167b 00 00 00 00 
5aea0 167c 00 00 00 00 
5aea4 167d 00 00 00 00 
5aea8 167e 00 00 00 00 
5aeac 167f 00 00 00 00 
5aeb0 1680 00 00 00 00 
5aeb4 1681 00 00 00 00 
5aeb8 1682 00 00 00 00 
5aebc 1683 00 00 00 00 
5aec0 1684 00 00 00 00 
5aec4 1685 00 00 00 00 
5aec8 1686 00 00 00 00 
5aecc 1687 00 00 00 00 
5aed0 1688 00 00 00 00 
5aed4 1689 00 00 00 00 
5aed8 168a 00 00 00 00 
5aedc 168b 00 00 00 00 
5aee0 168c 00 00 00 00 
5aee4 168d 00 00 00 00 
5aee8 168e 00 00 00 00 
5aeec 168f 00 00 00 00 
5aef0 1690 00 00 00 00 
5aef4 1691 00 00 00 00 
5aef8 1692 00 00 00 00 
5aefc 1693 00 00 00 00 
5af00 1694 00 00 00 00 
5af04 1695 00 00 00 00 
5af08 1696 00 00 00 00 
5af0c 1697 00 00 00 00 
5af10 1698 00 00 00 00 
5af14 1699 00 00 00 00 
5af18 169a 00 00 00 00 
5af1c 169b 00 00 00 00 
5af20 169c 00 00 00 00 
5af24 169d 00 00 00 00 
5af28 169e 00 00 00 00 
5af2c 169f 00 00 00 00 
5af30 16a0 00 00 00 00 
5af34 16a1 00 00 00 00 
5af38 16a2 00 00 00 00 
5af3c 16a3 00 00 00 00 
5af40 16a4 00 00 00 00 
5af44 16a5 00 00 00 00 
5af48 16a6 00 00 00 00 
5af4c 16a7 00 00 00 00 
5af50 16a8 00 00 00 00 
5af54 16a9 00 00 00 00 
5af58 16aa 00 00 00 00 
5af5c 16ab 00 00 00 00 
5af60 16ac 00 00 00 00 
5af64 16ad 00 00 00 00 
5af68 16ae 00 00 00 00 
5af6c 16af 00 00 00 00 
5af70 16b0 00 00 00 00 
5af74 16b1 00 00 00 00 
5af78 16b2 00 00 00 00 
5af7c 16b3 00 00 00 00 
5af80 16b4 00 00 00 00 
5af84 16b5 00 00 00 00 
5af88 16b6 00 00 00 00 
5af8c 16b7 00 00 00 00 
5af90 16b8 00 00 00 00 
5af94 16b9 00 00 00 00 
5af98 16ba 00 00 00 00 
5af9c 16bb 00 00 00 00 
5afa0 16bc 00 00 00 00 
5afa4 16bd 00 00 00 00 
5afa8 16be 00 00 00 00 
5afac 16bf 00 00 00 00 
5afb0 16c0 00 00 00 00 
5afb4 16c1 00 00 00 00 
5afb8 16c2 00 00 00 00 
5afbc 16c3 00 00 00 00 
5afc0 16c4 00 00 00 00 
5afc4 16c5 00 00 00 00 
5afc8 16c6 00 00 00 00 
5afcc 16c7 00 00 00 00 
5afd0 16c8 00 00 00 00 
5afd4 16c9 00 00 00 00 
5afd8 16ca 00 00 00 00 
5afdc 16cb 00 00 00 00 
5afe0 16cc 00 00 00 00 
5afe4 16cd 00 00 00 00 
5afe8 16ce 00 00 00 00 
5afec 16cf 00 00 00 00 
5aff0 16d0 00 00 00 00 
5aff4 16d1 00 00 00 00 
5aff8 16d2 00 00 00 00 
5affc 16d3 00 00 00 00 
5b000 16d4 00 00 00 00 
5b004 16d5 00 00 00 00 
5b008 16d6 00 00 00 00 
5b00c 16d7 00 00 00 00 
5b010 16d8 00 00 00 00 
5b014 16d9 00 00 00 00 
5b018 16da 00 00 00 00 
5b01c 16db 00 00 00 00 
5b020 16dc 00 00 00 00 
5b024 16dd 00 00 00 00 
5b028 16de 00 00 00 00 
5b02c 16df 00 00 00 00 
5b030 16e0 00 00 00 00 
5b034 16e1 00 00 00 00 
5b038 16e2 00 00 00 00 
5b03c 16e3 00 00 00 00 
5b040 16e4 00 00 00 00 
5b044 16e5 00 00 00 00 
5b048 16e6 00 00 00 00 
5b04c 16e7 00 00 00 00 
5b050 16e8 00 00 00 00 
5b054 16e9 00 00 00 00 
5b058 16ea 00 00 00 00 
5b05c 16eb 00 00 00 00 
5b060 16ec 00 00 00 00 
5b064 16ed 00 00 00 00 
5b068 16ee 00 00 00 00 
5b06c 16ef 00 00 00 00 
5b070 16f0 00 00 00 00 
5b074 16f1 00 00 00 00 
5b078 16f2 00 00 00 00 
5b07c 16f3 00 00 00 00 
5b080 16f4 00 00 00 00 
5b084 16f5 00 00 00 00 
5b088 16f6 00 00 00 00 
5b08c 16f7 00 00 00 00 
5b090 16f8 00 00 00 00 
5b094 16f9 00 00 00 00 
5b098 16fa 00 00 00 00 
5b09c 16fb 00 00 00 00 
5b0a0 16fc 00 00 00 00 
5b0a4 16fd 00 00 00 00 
5b0a8 16fe 00 00 00 00 
5b0ac 16ff 00 00 00 00 
5b0b0 1700 00 00 00 00 
5b0b4 1701 00 00 00 00 
5b0b8 1702 00 00 00 00 
5b0bc 1703 00 00 00 00 
5b0c0 1704 00 00 00 00 
5b0c4 1705 00 00 00 00 
5b0c8 1706 00 00 00 00 
5b0cc 1707 00 00 00 00 
5b0d0 1708 00 00 00 00 
5b0d4 1709 00 00 00 00 
5b0d8 170a 00 00 00 00 
5b0dc 170b 00 00 00 00 
5b0e0 170c 00 00 00 00 
5b0e4 170d 00 00 00 00 
5b0e8 170e 00 00 00 00 
5b0ec 170f 00 00 00 00 
5b0f0 1710 00 00 00 00 
5b0f4 1711 00 00 00 00 
5b0f8 1712 00 00 00 00 
5b0fc 1713 00 00 00 00 
5b100 1714 00 00 00 00 
5b104 1715 00 00 00 00 
5b108 1716 00 00 00 00 
5b10c 1717 00 00 00 00 
5b110 1718 00 00 00 00 
5b114 1719 00 00 00 00 
5b118 171a 00 00 00 00 
5b11c 171b 00 00 00 00 
5b120 171c 00 00 00 00 
5b124 171d 00 00 00 00 
5b128 171e 00 00 00 00 
5b12c 171f 00 00 00 00 
5b130 1720 00 00 00 00 
5b134 1721 00 00 00 00 
5b138 1722 00 00 00 00 
5b13c 1723 00 00 00 00 
5b140 1724 00 00 00 00 
5b144 1725 00 00 00 00 
5b148 1726 00 00 00 00 
5b14c 1727 00 00 00 00 
5b150 1728 00 00 00 00 
5b154 1729 00 00 00 00 
5b158 172a 00 00 00 00 
5b15c 172b 00 00 00 00 
5b160 172c 00 00 00 00 
5b164 172d 00 00 00 00 
5b168 172e 00 00 00 00 
5b16c 172f 00 00 00 00 
5b170 1730 00 00 00 00 
5b174 1731 00 00 00 00 
5b178 1732 00 00 00 00 
5b17c 1733 00 00 00 00 
5b180 1734 00 00 00 00 
5b184 1735 00 00 00 00 
5b188 1736 00 00 00 00 
5b18c 1737 00 00 00 00 
5b190 1738 00 00 00 00 
5b194 1739 00 00 00 00 
5b198 173a 00 00 00 00 
5b19c 173b 00 00 00 00 
5b1a0 173c 00 00 00 00 
5b1a4 173d 00 00 00 00 
5b1a8 173e 00 00 00 00 
5b1ac 173f 00 00 00 00 
5b1b0 1740 00 00 00 00 
5b1b4 1741 00 00 00 00 
5b1b8 1742 00 00 00 00 
5b1bc 1743 00 00 00 00 
5b1c0 1744 00 00 00 00 
5b1c4 1745 00 00 00 00 
5b1c8 1746 00 00 00 00 
5b1cc 1747 00 00 00 00 
5b1d0 1748 00 00 00 00 
5b1d4 1749 00 00 00 00 
5b1d8 174a 00 00 00 00 
5b1dc 174b 00 00 00 00 
5b1e0 174c 00 00 00 00 
5b1e4 174d 00 00 00 00 
5b1e8 174e 00 00 00 00 
5b1ec 174f 00 00 00 00 
5b1f0 1750 00 00 00 00 
5b1f4 1751 00 00 00 00 
5b1f8 1752 00 00 00 00 
5b1fc 1753 00 00 00 00 
5b200 1754 00 00 00 00 
5b204 1755 00 00 00 00 
5b208 1756 00 00 00 00 
5b20c 1757 00 00 00 00 
5b210 1758 00 00 00 00 
5b214 1759 00 00 00 00 
5b218 175a 00 00 00 00 
5b21c 175b 00 00 00 00 
5b220 175c 00 00 00 00 
5b224 175d 00 00 00 00 
5b228 175e 00 00 00 00 
5b22c 175f 00 00 00 00 
5b230 1760 00 00 00 00 
5b234 1761 00 00 00 00 
5b238 1762 00 00 00 00 
5b23c 1763 00 00 00 00 
5b240 1764 00 00 00 00 
5b244 1765 00 00 00 00 
5b248 1766 00 00 00 00 
5b24c 1767 00 00 00 00 
5b250 1768 00 00 00 00 
5b254 1769 00 00 00 00 
5b258 176a 00 00 00 00 
5b25c 176b 00 00 00 00 
5b260 176c 00 00 00 00 
5b264 176d 00 00 00 00 
5b268 176e 00 00 00 00 
5b26c 176f 00 00 00 00 
5b270 1770 00 00 00 00 
5b274 1771 00 00 00 00 
5b278 1772 00 00 00 00 
5b27c 1773 00 00 00 00 
5b280 1774 00 00 00 00 
5b284 1775 00 00 00 00 
5b288 1776 00 00 00 00 
5b28c 1777 00 00 00 00 
5b290 1778 00 00 00 00 
5b294 1779 00 00 00 00 
5b298 177a 00 00 00 00 
5b29c 177b 00 00 00 00 
5b2a0 177c 00 00 00 00 
5b2a4 177d 00 00 00 00 
5b2a8 177e 00 00 00 00 
5b2ac 177f 00 00 00 00 
5b2b0 1780 00 00 00 00 
5b2b4 1781 00 00 00 00 
5b2b8 1782 00 00 00 00 
5b2bc 1783 00 00 00 00 
5b2c0 1784 00 00 00 00 
5b2c4 1785 00 00 00 00 
5b2c8 1786 00 00 00 00 
5b2cc 1787 00 00 00 00 
5b2d0 1788 00 00 00 00 
5b2d4 1789 00 00 00 00 
5b2d8 178a 00 00 00 00 
5b2dc 178b 00 00 00 00 
5b2e0 178c 00 00 00 00 
5b2e4 178d 00 00 00 00 
5b2e8 178e 00 00 00 00 
5b2ec 178f 00 00 00 00 
5b2f0 1790 00 00 00 00 
5b2f4 1791 00 00 00 00 
5b2f8 1792 00 00 00 00 
5b2fc 1793 00 00 00 00 
5b300 1794 00 00 00 00 
5b304 1795 00 00 00 00 
5b308 1796 00 00 00 00 
5b30c 1797 00 00 00 00 
5b310 1798 00 00 00 00 
5b314 1799 00 00 00 00 
5b318 179a 00 00 00 00 
5b31c 179b 00 00 00 00 
5b320 179c 00 00 00 00 
5b324 179d 00 00 00 00 
5b328 179e 00 00 00 00 
5b32c 179f 00 00 00 00 
5b330 17a0 00 00 00 00 
5b334 17a1 00 00 00 00 
5b338 17a2 00 00 00 00 
5b33c 17a3 00 00 00 00 
5b340 17a4 00 00 00 00 
5b344 17a5 00 00 00 00 
5b348 17a6 00 00 00 00 
5b34c 17a7 00 00 00 00 
5b350 17a8 00 00 00 00 
5b354 17a9 00 00 00 00 
5b358 17aa 00 00 00 00 
5b35c 17ab 00 00 00 00 
5b360 17ac 00 00 00 00 
5b364 17ad 00 00 00 00 
5b368 17ae 00 00 00 00 
5b36c 17af 00 00 00 00 
5b370 17b0 00 00 00 00 
5b374 17b1 00 00 00 00 
5b378 17b2 00 00 00 00 
5b37c 17b3 00 00 00 00 
5b380 17b4 00 00 00 00 
5b384 17b5 00 00 00 00 
5b388 17b6 00 00 00 00 
5b38c 17b7 00 00 00 00 
5b390 17b8 00 00 00 00 
5b394 17b9 00 00 00 00 
5b398 17ba 00 00 00 00 
5b39c 17bb 00 00 00 00 
5b3a0 17bc 00 00 00 00 
5b3a4 17bd 00 00 00 00 
5b3a8 17be 00 00 00 00 
5b3ac 17bf 00 00 00 00 
5b3b0 17c0 00 00 00 00 
5b3b4 17c1 00 00 00 00 
5b3b8 17c2 00 00 00 00 
5b3bc 17c3 00 00 00 00 
5b3c0 17c4 00 00 00 00 
5b3c4 17c5 00 00 00 00 
5b3c8 17c6 00 00 00 00 
5b3cc 17c7 00 00 00 00 
5b3d0 17c8 00 00 00 00 
5b3d4 17c9 00 00 00 00 
5b3d8 17ca 00 00 00 00 
5b3dc 17cb 00 00 00 00 
5b3e0 17cc 00 00 00 00 
5b3e4 17cd 00 00 00 00 
5b3e8 17ce 00 00 00 00 
5b3ec 17cf 00 00 00 00 
5b3f0 17d0 00 00 00 00 
5b3f4 17d1 00 00 00 00 
5b3f8 17d2 00 00 00 00 
5b3fc 17d3 00 00 00 00 
5b400 17d4 00 00 00 00 
5b404 17d5 00 00 00 00 
5b408 17d6 00 00 00 00 
5b40c 17d7 00 00 00 00 
5b410 17d8 00 00 00 00 
5b414 17d9 00 00 00 00 
5b418 17da 00 00 00 00 
5b41c 17db 00 00 00 00 
5b420 17dc 00 00 00 00 
5b424 17dd 00 00 00 00 
5b428 17de 00 00 00 00 
5b42c 17df 00 00 00 00 
5b430 17e0 00 00 00 00 
5b434 17e1 00 00 00 00 
5b438 17e2 00 00 00 00 
5b43c 17e3 00 00 00 00 
5b440 17e4 00 00 00 00 
5b444 17e5 00 00 00 00 
5b448 17e6 00 00 00 00 
5b44c 17e7 00 00 00 00 
5b450 17e8 00 00 00 00 
5b454 17e9 00 00 00 00 
5b458 17ea 00 00 00 00 
5b45c 17eb 00 00 00 00 
5b460 17ec 00 00 00 00 
5b464 17ed 00 00 00 00 
5b468 17ee 00 00 00 00 
5b46c 17ef 00 00 00 00 
5b470 17f0 00 00 00 00 
5b474 17f1 00 00 00 00 
5b478 17f2 00 00 00 00 
5b47c 17f3 00 00 00 00 
5b480 17f4 00 00 00 00 
5b484 17f5 00 00 00 00 
5b488 17f6 00 00 00 00 
5b48c 17f7 00 00 00 00 
5b490 17f8 00 00 00 00 
5b494 17f9 00 00 00 00 
5b498 17fa 00 00 00 00 
5b49c 17fb 00 00 00 00 
5b4a0 17fc 00 00 00 00 
5b4a4 17fd 00 00 00 00 
5b4a8 17fe 00 00 00 00 
5b4ac 17ff 00 00 00 00 
5b4b0 1800 00 00 00 00 
5b4b4 1801 00 00 00 00 
5b4b8 1802 00 00 00 00 
5b4bc 1803 00 00 00 00 
5b4c0 1804 00 00 00 00 
5b4c4 1805 00 00 00 00 
5b4c8 1806 00 00 00 00 
5b4cc 1807 00 00 00 00 
5b4d0 1808 00 00 00 00 
5b4d4 1809 00 00 00 00 
5b4d8 180a 00 00 00 00 
5b4dc 180b 00 00 00 00 
5b4e0 180c 00 00 00 00 
5b4e4 180d 00 00 00 00 
5b4e8 180e 00 00 00 00 
5b4ec 180f 00 00 00 00 
5b4f0 1810 00 00 00 00 
5b4f4 1811 00 00 00 00 
5b4f8 1812 00 00 00 00 
5b4fc 1813 00 00 00 00 
5b500 1814 00 00 00 00 
5b504 1815 00 00 00 00 
5b508 1816 00 00 00 00 
5b50c 1817 00 00 00 00 
5b510 1818 00 00 00 00 
5b514 1819 00 00 00 00 
5b518 181a 00 00 00 00 
5b51c 181b 00 00 00 00 
5b520 181c 00 00 00 00 
5b524 181d 00 00 00 00 
5b528 181e 00 00 00 00 
5b52c 181f 00 00 00 00 
5b530 1820 00 00 00 00 
5b534 1821 00 00 00 00 
5b538 1822 00 00 00 00 
5b53c 1823 00 00 00 00 
5b540 1824 00 00 00 00 
5b544 1825 00 00 00 00 
5b548 1826 00 00 00 00 
5b54c 1827 00 00 00 00 
5b550 1828 00 00 00 00 
5b554 1829 00 00 00 00 
5b558 182a 00 00 00 00 
5b55c 182b 00 00 00 00 
5b560 182c 00 00 00 00 
5b564 182d 00 00 00 00 
5b568 182e 00 00 00 00 
5b56c 182f 00 00 00 00 
5b570 1830 00 00 00 00 
5b574 1831 00 00 00 00 
5b578 1832 00 00 00 00 
5b57c 1833 00 00 00 00 
5b580 1834 00 00 00 00 
5b584 1835 00 00 00 00 
5b588 1836 00 00 00 00 
5b58c 1837 00 00 00 00 
5b590 1838 00 00 00 00 
5b594 1839 00 00 00 00 
5b598 183a 00 00 00 00 
5b59c 183b 00 00 00 00 
5b5a0 183c 00 00 00 00 
5b5a4 183d 00 00 00 00 
5b5a8 183e 00 00 00 00 
5b5ac 183f 00 00 00 00 
5b5b0 1840 00 00 00 00 
5b5b4 1841 00 00 00 00 
5b5b8 1842 00 00 00 00 
5b5bc 1843 00 00 00 00 
5b5c0 1844 00 00 00 00 
5b5c4 1845 00 00 00 00 
5b5c8 1846 00 00 00 00 
5b5cc 1847 00 00 00 00 
5b5d0 1848 00 00 00 00 
5b5d4 1849 00 00 00 00 
5b5d8 184a 00 00 00 00 
5b5dc 184b 00 00 00 00 
5b5e0 184c 00 00 00 00 
5b5e4 184d 00 00 00 00 
5b5e8 184e 00 00 00 00 
5b5ec 184f 00 00 00 00 
5b5f0 1850 00 00 00 00 
5b5f4 1851 00 00 00 00 
5b5f8 1852 00 00 00 00 
5b5fc 1853 00 00 00 00 
5b600 1854 00 00 00 00 
5b604 1855 00 00 00 00 
5b608 1856 00 00 00 00 
5b60c 1857 00 00 00 00 
5b610 1858 00 00 00 00 
5b614 1859 00 00 00 00 
5b618 185a 00 00 00 00 
5b61c 185b 00 00 00 00 
5b620 185c 00 00 00 00 
5b624 185d 00 00 00 00 
5b628 185e 00 00 00 00 
5b62c 185f 00 00 00 00 
5b630 1860 00 00 00 00 
5b634 1861 00 00 00 00 
5b638 1862 00 00 00 00 
5b63c 1863 00 00 00 00 
5b640 1864 00 00 00 00 
5b644 1865 00 00 00 00 
5b648 1866 00 00 00 00 
5b64c 1867 00 00 00 00 
5b650 1868 00 00 00 00 
5b654 1869 00 00 00 00 
5b658 186a 00 00 00 00 
5b65c 186b 00 00 00 00 
5b660 186c 00 00 00 00 
5b664 186d 00 00 00 00 
5b668 186e 00 00 00 00 
5b66c 186f 00 00 00 00 
5b670 1870 00 00 00 00 
5b674 1871 00 00 00 00 
5b678 1872 00 00 00 00 
5b67c 1873 00 00 00 00 
5b680 1874 00 00 00 00 
5b684 1875 00 00 00 00 
5b688 1876 00 00 00 00 
5b68c 1877 00 00 00 00 
5b690 1878 00 00 00 00 
5b694 1879 00 00 00 00 
5b698 187a 00 00 00 00 
5b69c 187b 00 00 00 00 
5b6a0 187c 00 00 00 00 
5b6a4 187d 00 00 00 00 
5b6a8 187e 00 00 00 00 
5b6ac 187f 00 00 00 00 
5b6b0 1880 00 00 00 00 
5b6b4 1881 00 00 00 00 
5b6b8 1882 00 00 00 00 
5b6bc 1883 00 00 00 00 
5b6c0 1884 00 00 00 00 
5b6c4 1885 00 00 00 00 
5b6c8 1886 00 00 00 00 
5b6cc 1887 00 00 00 00 
5b6d0 1888 00 00 00 00 
5b6d4 1889 00 00 00 00 
5b6d8 188a 00 00 00 00 
5b6dc 188b 00 00 00 00 
5b6e0 188c 00 00 00 00 
5b6e4 188d 00 00 00 00 
5b6e8 188e 00 00 00 00 
5b6ec 188f 00 00 00 00 
5b6f0 1890 00 00 00 00 
5b6f4 1891 00 00 00 00 
5b6f8 1892 00 00 00 00 
5b6fc 1893 00 00 00 00 
5b700 1894 00 00 00 00 
5b704 1895 00 00 00 00 
5b708 1896 00 00 00 00 
5b70c 1897 00 00 00 00 
5b710 1898 00 00 00 00 
5b714 1899 00 00 00 00 
5b718 189a 00 00 00 00 
5b71c 189b 00 00 00 00 
5b720 189c 00 00 00 00 
5b724 189d 00 00 00 00 
5b728 189e 00 00 00 00 
5b72c 189f 00 00 00 00 
5b730 18a0 00 00 00 00 
5b734 18a1 00 00 00 00 
5b738 18a2 00 00 00 00 
5b73c 18a3 00 00 00 00 
5b740 18a4 00 00 00 00 
5b744 18a5 00 00 00 00 
5b748 18a6 00 00 00 00 
5b74c 18a7 00 00 00 00 
5b750 18a8 00 00 00 00 
5b754 18a9 00 00 00 00 
5b758 18aa 00 00 00 00 
5b75c 18ab 00 00 00 00 
5b760 18ac 00 00 00 00 
5b764 18ad 00 00 00 00 
5b768 18ae 00 00 00 00 
5b76c 18af 00 00 00 00 
5b770 18b0 00 00 00 00 
5b774 18b1 00 00 00 00 
5b778 18b2 00 00 00 00 
5b77c 18b3 00 00 00 00 
5b780 18b4 00 00 00 00 
5b784 18b5 00 00 00 00 
5b788 18b6 00 00 00 00 
5b78c 18b7 00 00 00 00 
5b790 18b8 00 00 00 00 
5b794 18b9 00 00 00 00 
5b798 18ba 00 00 00 00 
5b79c 18bb 00 00 00 00 
5b7a0 18bc 00 00 00 00 
5b7a4 18bd 00 00 00 00 
5b7a8 18be 00 00 00 00 
5b7ac 18bf 00 00 00 00 
5b7b0 18c0 00 00 00 00 
5b7b4 18c1 00 00 00 00 
5b7b8 18c2 00 00 00 00 
5b7bc 18c3 00 00 00 00 
5b7c0 18c4 00 00 00 00 
5b7c4 18c5 00 00 00 00 
5b7c8 18c6 00 00 00 00 
5b7cc 18c7 00 00 00 00 
5b7d0 18c8 00 00 00 00 
5b7d4 18c9 00 00 00 00 
5b7d8 18ca 00 00 00 00 
5b7dc 18cb 00 00 00 00 
5b7e0 18cc 00 00 00 00 
5b7e4 18cd 00 00 00 00 
5b7e8 18ce 00 00 00 00 
5b7ec 18cf 00 00 00 00 
5b7f0 18d0 00 00 00 00 
5b7f4 18d1 00 00 00 00 
5b7f8 18d2 00 00 00 00 
5b7fc 18d3 00 00 00 00 
5b800 18d4 00 00 00 00 
5b804 18d5 00 00 00 00 
5b808 18d6 00 00 00 00 
5b80c 18d7 00 00 00 00 
5b810 18d8 00 00 00 00 
5b814 18d9 00 00 00 00 
5b818 18da 00 00 00 00 
5b81c 18db 00 00 00 00 
5b820 18dc 00 00 00 00 
5b824 18dd 00 00 00 00 
5b828 18de 00 00 00 00 
5b82c 18df 00 00 00 00 
5b830 18e0 00 00 00 00 
5b834 18e1 00 00 00 00 
5b838 18e2 00 00 00 00 
5b83c 18e3 00 00 00 00 
5b840 18e4 00 00 00 00 
5b844 18e5 00 00 00 00 
5b848 18e6 00 00 00 00 
5b84c 18e7 00 00 00 00 
5b850 18e8 00 00 00 00 
5b854 18e9 00 00 00 00 
5b858 18ea 00 00 00 00 
5b85c 18eb 00 00 00 00 
5b860 18ec 00 00 00 00 
5b864 18ed 00 00 00 00 
5b868 18ee 00 00 00 00 
5b86c 18ef 00 00 00 00 
5b870 18f0 00 00 00 00 
5b874 18f1 00 00 00 00 
5b878 18f2 00 00 00 00 
5b87c 18f3 00 00 00 00 
5b880 18f4 00 00 00 00 
5b884 18f5 00 00 00 00 
5b888 18f6 00 00 00 00 
5b88c 18f7 00 00 00 00 
5b890 18f8 00 00 00 00 
5b894 18f9 00 00 00 00 
5b898 18fa 00 00 00 00 
5b89c 18fb 00 00 00 00 
5b8a0 18fc 00 00 00 00 
5b8a4 18fd 00 00 00 00 
5b8a8 18fe 00 00 00 00 
5b8ac 18ff 00 00 00 00 
5b8b0 1900 00 00 00 00 
5b8b4 1901 00 00 00 00 
5b8b8 1902 00 00 00 00 
5b8bc 1903 00 00 00 00 
5b8c0 1904 00 00 00 00 
5b8c4 1905 00 00 00 00 
5b8c8 1906 00 00 00 00 
5b8cc 1907 00 00 00 00 
5b8d0 1908 00 00 00 00 
5b8d4 1909 00 00 00 00 
5b8d8 190a 00 00 00 00 
5b8dc 190b 00 00 00 00 
5b8e0 190c 00 00 00 00 
5b8e4 190d 00 00 00 00 
5b8e8 190e 00 00 00 00 
5b8ec 190f 00 00 00 00 
5b8f0 1910 00 00 00 00 
5b8f4 1911 00 00 00 00 
5b8f8 1912 00 00 00 00 
5b8fc 1913 00 00 00 00 
5b900 1914 00 00 00 00 
5b904 1915 00 00 00 00 
5b908 1916 00 00 00 00 
5b90c 1917 00 00 00 00 
5b910 1918 00 00 00 00 
5b914 1919 00 00 00 00 
5b918 191a 00 00 00 00 
5b91c 191b 00 00 00 00 
5b920 191c 00 00 00 00 
5b924 191d 00 00 00 00 
5b928 191e 00 00 00 00 
5b92c 191f 00 00 00 00 
5b930 1920 00 00 00 00 
5b934 1921 00 00 00 00 
5b938 1922 00 00 00 00 
5b93c 1923 00 00 00 00 
5b940 1924 00 00 00 00 
5b944 1925 00 00 00 00 
5b948 1926 00 00 00 00 
5b94c 1927 00 00 00 00 
5b950 1928 00 00 00 00 
5b954 1929 00 00 00 00 
5b958 192a 00 00 00 00 
5b95c 192b 00 00 00 00 
5b960 192c 00 00 00 00 
5b964 192d 00 00 00 00 
5b968 192e 00 00 00 00 
5b96c 192f 00 00 00 00 
5b970 1930 00 00 00 00 
5b974 1931 00 00 00 00 
5b978 1932 00 00 00 00 
5b97c 1933 00 00 00 00 
5b980 1934 00 00 00 00 
5b984 1935 00 00 00 00 
5b988 1936 00 00 00 00 
5b98c 1937 00 00 00 00 
5b990 1938 00 00 00 00 
5b994 1939 00 00 00 00 
5b998 193a 00 00 00 00 
5b99c 193b 00 00 00 00 
5b9a0 193c 00 00 00 00 
5b9a4 193d 00 00 00 00 
5b9a8 193e 00 00 00 00 
5b9ac 193f 00 00 00 00 
5b9b0 1940 00 00 00 00 
5b9b4 1941 00 00 00 00 
5b9b8 1942 00 00 00 00 
5b9bc 1943 00 00 00 00 
5b9c0 1944 00 00 00 00 
5b9c4 1945 00 00 00 00 
5b9c8 1946 00 00 00 00 
5b9cc 1947 00 00 00 00 
5b9d0 1948 00 00 00 00 
5b9d4 1949 00 00 00 00 
5b9d8 194a 00 00 00 00 
5b9dc 194b 00 00 00 00 
5b9e0 194c 00 00 00 00 
5b9e4 194d 00 00 00 00 
5b9e8 194e 00 00 00 00 
5b9ec 194f 00 00 00 00 
5b9f0 1950 00 00 00 00 
5b9f4 1951 00 00 00 00 
5b9f8 1952 00 00 00 00 
5b9fc 1953 00 00 00 00 
5ba00 1954 00 00 00 00 
5ba04 1955 00 00 00 00 
5ba08 1956 00 00 00 00 
5ba0c 1957 00 00 00 00 
5ba10 1958 00 00 00 00 
5ba14 1959 00 00 00 00 
5ba18 195a 00 00 00 00 
5ba1c 195b 00 00 00 00 
5ba20 195c 00 00 00 00 
5ba24 195d 00 00 00 00 
5ba28 195e 00 00 00 00 
5ba2c 195f 00 00 00 00 
5ba30 1960 00 00 00 00 
5ba34 1961 00 00 00 00 
5ba38 1962 00 00 00 00 
5ba3c 1963 00 00 00 00 
5ba40 1964 00 00 00 00 
5ba44 1965 00 00 00 00 
5ba48 1966 00 00 00 00 
5ba4c 1967 00 00 00 00 
5ba50 1968 00 00 00 00 
5ba54 1969 00 00 00 00 
5ba58 196a 00 00 00 00 
5ba5c 196b 00 00 00 00 
5ba60 196c 00 00 00 00 
5ba64 196d 00 00 00 00 
5ba68 196e 00 00 00 00 
5ba6c 196f 00 00 00 00 
5ba70 1970 00 00 00 00 
5ba74 1971 00 00 00 00 
5ba78 1972 00 00 00 00 
5ba7c 1973 00 00 00 00 
5ba80 1974 00 00 00 00 
5ba84 1975 00 00 00 00 
5ba88 1976 00 00 00 00 
5ba8c 1977 00 00 00 00 
5ba90 1978 00 00 00 00 
5ba94 1979 00 00 00 00 
5ba98 197a 00 00 00 00 
5ba9c 197b 00 00 00 00 
5baa0 197c 00 00 00 00 
5baa4 197d 00 00 00 00 
5baa8 197e 00 00 00 00 
5baac 197f 00 00 00 00 
5bab0 1980 00 00 00 00 
5bab4 1981 00 00 00 00 
5bab8 1982 00 00 00 00 
5babc 1983 00 00 00 00 
5bac0 1984 00 00 00 00 
5bac4 1985 00 00 00 00 
5bac8 1986 00 00 00 00 
5bacc 1987 00 00 00 00 
5bad0 1988 00 00 00 00 
5bad4 1989 00 00 00 00 
5bad8 198a 00 00 00 00 
5badc 198b 00 00 00 00 
5bae0 198c 00 00 00 00 
5bae4 198d 00 00 00 00 
5bae8 198e 00 00 00 00 
5baec 198f 00 00 00 00 
5baf0 1990 00 00 00 00 
5baf4 1991 00 00 00 00 
5baf8 1992 00 00 00 00 
5bafc 1993 00 00 00 00 
5bb00 1994 00 00 00 00 
5bb04 1995 00 00 00 00 
5bb08 1996 00 00 00 00 
5bb0c 1997 00 00 00 00 
5bb10 1998 00 00 00 00 
5bb14 1999 00 00 00 00 
5bb18 199a 00 00 00 00 
5bb1c 199b 00 00 00 00 
5bb20 199c 00 00 00 00 
5bb24 199d 00 00 00 00 
5bb28 199e 00 00 00 00 
5bb2c 199f 00 00 00 00 
5bb30 19a0 00 00 00 00 
5bb34 19a1 00 00 00 00 
5bb38 19a2 00 00 00 00 
5bb3c 19a3 00 00 00 00 
5bb40 19a4 00 00 00 00 
5bb44 19a5 00 00 00 00 
5bb48 19a6 00 00 00 00 
5bb4c 19a7 00 00 00 00 
5bb50 19a8 00 00 00 00 
5bb54 19a9 00 00 00 00 
5bb58 19aa 00 00 00 00 
5bb5c 19ab 00 00 00 00 
5bb60 19ac 00 00 00 00 
5bb64 19ad 00 00 00 00 
5bb68 19ae 00 00 00 00 
5bb6c 19af 00 00 00 00 
5bb70 19b0 00 00 00 00 
5bb74 19b1 00 00 00 00 
5bb78 19b2 00 00 00 00 
5bb7c 19b3 00 00 00 00 
5bb80 19b4 00 00 00 00 
5bb84 19b5 00 00 00 00 
5bb88 19b6 00 00 00 00 
5bb8c 19b7 00 00 00 00 
5bb90 19b8 00 00 00 00 
5bb94 19b9 00 00 00 00 
5bb98 19ba 00 00 00 00 
5bb9c 19bb 00 00 00 00 
5bba0 19bc 00 00 00 00 
5bba4 19bd 00 00 00 00 
5bba8 19be 00 00 00 00 
5bbac 19bf 00 00 00 00 
5bbb0 19c0 00 00 00 00 
5bbb4 19c1 00 00 00 00 
5bbb8 19c2 00 00 00 00 
5bbbc 19c3 00 00 00 00 
5bbc0 19c4 00 00 00 00 
5bbc4 19c5 00 00 00 00 
5bbc8 19c6 00 00 00 00 
5bbcc 19c7 00 00 00 00 
5bbd0 19c8 00 00 00 00 
5bbd4 19c9 00 00 00 00 
5bbd8 19ca 00 00 00 00 
5bbdc 19cb 00 00 00 00 
5bbe0 19cc 00 00 00 00 
5bbe4 19cd 00 00 00 00 
5bbe8 19ce 00 00 00 00 
5bbec 19cf 00 00 00 00 
5bbf0 19d0 00 00 00 00 
5bbf4 19d1 00 00 00 00 
5bbf8 19d2 00 00 00 00 
5bbfc 19d3 00 00 00 00 
5bc00 19d4 00 00 00 00 
5bc04 19d5 00 00 00 00 
5bc08 19d6 00 00 00 00 
5bc0c 19d7 00 00 00 00 
5bc10 19d8 00 00 00 00 
5bc14 19d9 00 00 00 00 
5bc18 19da 00 00 00 00 
5bc1c 19db 00 00 00 00 
5bc20 19dc 00 00 00 00 
5bc24 19dd 00 00 00 00 
5bc28 19de 00 00 00 00 
5bc2c 19df 00 00 00 00 
5bc30 19e0 00 00 00 00 
5bc34 19e1 00 00 00 00 
5bc38 19e2 00 00 00 00 
5bc3c 19e3 00 00 00 00 
5bc40 19e4 00 00 00 00 
5bc44 19e5 00 00 00 00 
5bc48 19e6 00 00 00 00 
5bc4c 19e7 00 00 00 00 
5bc50 19e8 00 00 00 00 
5bc54 19e9 00 00 00 00 
5bc58 19ea 00 00 00 00 
5bc5c 19eb 00 00 00 00 
5bc60 19ec 00 00 00 00 
5bc64 19ed 00 00 00 00 
5bc68 19ee 00 00 00 00 
5bc6c 19ef 00 00 00 00 
5bc70 19f0 00 00 00 00 
5bc74 19f1 00 00 00 00 
5bc78 19f2 00 00 00 00 
5bc7c 19f3 00 00 00 00 
5bc80 19f4 00 00 00 00 
5bc84 19f5 00 00 00 00 
5bc88 19f6 00 00 00 00 
5bc8c 19f7 00 00 00 00 
5bc90 19f8 00 00 00 00 
5bc94 19f9 00 00 00 00 
5bc98 19fa 00 00 00 00 
5bc9c 19fb 00 00 00 00 
5bca0 19fc 00 00 00 00 
5bca4 19fd 00 00 00 00 
5bca8 19fe 00 00 00 00 
5bcac 19ff 00 00 00 00 
5bcb0 1a00 00 00 00 00 
5bcb4 1a01 00 00 00 00 
5bcb8 1a02 00 00 00 00 
5bcbc 1a03 00 00 00 00 
5bcc0 1a04 00 00 00 00 
5bcc4 1a05 00 00 00 00 
5bcc8 1a06 00 00 00 00 
5bccc 1a07 00 00 00 00 
5bcd0 1a08 00 00 00 00 
5bcd4 1a09 00 00 00 00 
5bcd8 1a0a 00 00 00 00 
5bcdc 1a0b 00 00 00 00 
5bce0 1a0c 00 00 00 00 
5bce4 1a0d 00 00 00 00 
5bce8 1a0e 00 00 00 00 
5bcec 1a0f 00 00 00 00 
5bcf0 1a10 00 00 00 00 
5bcf4 1a11 00 00 00 00 
5bcf8 1a12 00 00 00 00 
5bcfc 1a13 00 00 00 00 
5bd00 1a14 00 00 00 00 
5bd04 1a15 00 00 00 00 
5bd08 1a16 00 00 00 00 
5bd0c 1a17 00 00 00 00 
5bd10 1a18 00 00 00 00 
5bd14 1a19 00 00 00 00 
5bd18 1a1a 00 00 00 00 
5bd1c 1a1b 00 00 00 00 
5bd20 1a1c 00 00 00 00 
5bd24 1a1d 00 00 00 00 
5bd28 1a1e 00 00 00 00 
5bd2c 1a1f 00 00 00 00 
5bd30 1a20 00 00 00 00 
5bd34 1a21 00 00 00 00 
5bd38 1a22 00 00 00 00 
5bd3c 1a23 00 00 00 00 
5bd40 1a24 00 00 00 00 
5bd44 1a25 00 00 00 00 
5bd48 1a26 00 00 00 00 
5bd4c 1a27 00 00 00 00 
5bd50 1a28 00 00 00 00 
5bd54 1a29 00 00 00 00 
5bd58 1a2a 00 00 00 00 
5bd5c 1a2b 00 00 00 00 
5bd60 1a2c 00 00 00 00 
5bd64 1a2d 00 00 00 00 
5bd68 1a2e 00 00 00 00 
5bd6c 1a2f 00 00 00 00 
5bd70 1a30 00 00 00 00 
5bd74 1a31 00 00 00 00 
5bd78 1a32 00 00 00 00 
5bd7c 1a33 00 00 00 00 
5bd80 1a34 00 00 00 00 
5bd84 1a35 00 00 00 00 
5bd88 1a36 00 00 00 00 
5bd8c 1a37 00 00 00 00 
5bd90 1a38 00 00 00 00 
5bd94 1a39 00 00 00 00 
5bd98 1a3a 00 00 00 00 
5bd9c 1a3b 00 00 00 00 
5bda0 1a3c 00 00 00 00 
5bda4 1a3d 00 00 00 00 
5bda8 1a3e 00 00 00 00 
5bdac 1a3f 00 00 00 00 
5bdb0 1a40 00 00 00 00 
5bdb4 1a41 00 00 00 00 
5bdb8 1a42 00 00 00 00 
5bdbc 1a43 00 00 00 00 
5bdc0 1a44 00 00 00 00 
5bdc4 1a45 00 00 00 00 
5bdc8 1a46 00 00 00 00 
5bdcc 1a47 00 00 00 00 
5bdd0 1a48 00 00 00 00 
5bdd4 1a49 00 00 00 00 
5bdd8 1a4a 00 00 00 00 
5bddc 1a4b 00 00 00 00 
5bde0 1a4c 00 00 00 00 
5bde4 1a4d 00 00 00 00 
5bde8 1a4e 00 00 00 00 
5bdec 1a4f 00 00 00 00 
5bdf0 1a50 00 00 00 00 
5bdf4 1a51 00 00 00 00 
5bdf8 1a52 00 00 00 00 
5bdfc 1a53 00 00 00 00 
5be00 1a54 00 00 00 00 
5be04 1a55 00 00 00 00 
5be08 1a56 00 00 00 00 
5be0c 1a57 00 00 00 00 
5be10 1a58 00 00 00 00 
5be14 1a59 00 00 00 00 
5be18 1a5a 00 00 00 00 
5be1c 1a5b 00 00 00 00 
5be20 1a5c 00 00 00 00 
5be24 1a5d 00 00 00 00 
5be28 1a5e 00 00 00 00 
5be2c 1a5f 00 00 00 00 
5be30 1a60 00 00 00 00 
5be34 1a61 00 00 00 00 
5be38 1a62 00 00 00 00 
5be3c 1a63 00 00 00 00 
5be40 1a64 00 00 00 00 
5be44 1a65 00 00 00 00 
5be48 1a66 00 00 00 00 
5be4c 1a67 00 00 00 00 
5be50 1a68 00 00 00 00 
5be54 1a69 00 00 00 00 
5be58 1a6a 00 00 00 00 
5be5c 1a6b 00 00 00 00 
5be60 1a6c 00 00 00 00 
5be64 1a6d 00 00 00 00 
5be68 1a6e 00 00 00 00 
5be6c 1a6f 00 00 00 00 
5be70 1a70 00 00 00 00 
5be74 1a71 00 00 00 00 
5be78 1a72 00 00 00 00 
5be7c 1a73 00 00 00 00 
5be80 1a74 00 00 00 00 
5be84 1a75 00 00 00 00 
5be88 1a76 00 00 00 00 
5be8c 1a77 00 00 00 00 
5be90 1a78 00 00 00 00 
5be94 1a79 00 00 00 00 
5be98 1a7a 00 00 00 00 
5be9c 1a7b 00 00 00 00 
5bea0 1a7c 00 00 00 00 
5bea4 1a7d 00 00 00 00 
5bea8 1a7e 00 00 00 00 
5beac 1a7f 00 00 00 00 
5beb0 1a80 00 00 00 00 
5beb4 1a81 00 00 00 00 
5beb8 1a82 00 00 00 00 
5bebc 1a83 00 00 00 00 
5bec0 1a84 00 00 00 00 
5bec4 1a85 00 00 00 00 
5bec8 1a86 00 00 00 00 
5becc 1a87 00 00 00 00 
5bed0 1a88 00 00 00 00 
5bed4 1a89 00 00 00 00 
5bed8 1a8a 00 00 00 00 
5bedc 1a8b 00 00 00 00 
5bee0 1a8c 00 00 00 00 
5bee4 1a8d 00 00 00 00 
5bee8 1a8e 00 00 00 00 
5beec 1a8f 00 00 00 00 
5bef0 1a90 00 00 00 00 
5bef4 1a91 00 00 00 00 
5bef8 1a92 00 00 00 00 
5befc 1a93 00 00 00 00 
5bf00 1a94 00 00 00 00 
5bf04 1a95 00 00 00 00 
5bf08 1a96 00 00 00 00 
5bf0c 1a97 00 00 00 00 
5bf10 1a98 00 00 00 00 
5bf14 1a99 00 00 00 00 
5bf18 1a9a 00 00 00 00 
5bf1c 1a9b 00 00 00 00 
5bf20 1a9c 00 00 00 00 
5bf24 1a9d 00 00 00 00 
5bf28 1a9e 00 00 00 00 
5bf2c 1a9f 00 00 00 00 
5bf30 1aa0 00 00 00 00 
5bf34 1aa1 00 00 00 00 
5bf38 1aa2 00 00 00 00 
5bf3c 1aa3 00 00 00 00 
5bf40 1aa4 00 00 00 00 
5bf44 1aa5 00 00 00 00 
5bf48 1aa6 00 00 00 00 
5bf4c 1aa7 00 00 00 00 
5bf50 1aa8 00 00 00 00 
5bf54 1aa9 00 00 00 00 
5bf58 1aaa 00 00 00 00 
5bf5c 1aab 00 00 00 00 
5bf60 1aac 00 00 00 00 
5bf64 1aad 00 00 00 00 
5bf68 1aae 00 00 00 00 
5bf6c 1aaf 00 00 00 00 
5bf70 1ab0 00 00 00 00 
5bf74 1ab1 00 00 00 00 
5bf78 1ab2 00 00 00 00 
5bf7c 1ab3 00 00 00 00 
5bf80 1ab4 00 00 00 00 
5bf84 1ab5 00 00 00 00 
5bf88 1ab6 00 00 00 00 
5bf8c 1ab7 00 00 00 00 
5bf90 1ab8 00 00 00 00 
5bf94 1ab9 00 00 00 00 
5bf98 1aba 00 00 00 00 
5bf9c 1abb 00 00 00 00 
5bfa0 1abc 00 00 00 00 
5bfa4 1abd 00 00 00 00 
5bfa8 1abe 00 00 00 00 
5bfac 1abf 00 00 00 00 
5bfb0 1ac0 00 00 00 00 
5bfb4 1ac1 00 00 00 00 
5bfb8 1ac2 00 00 00 00 
5bfbc 1ac3 00 00 00 00 
5bfc0 1ac4 00 00 00 00 
5bfc4 1ac5 00 00 00 00 
5bfc8 1ac6 00 00 00 00 
5bfcc 1ac7 00 00 00 00 
5bfd0 1ac8 00 00 00 00 
5bfd4 1ac9 00 00 00 00 
5bfd8 1aca 00 00 00 00 
5bfdc 1acb 00 00 00 00 
5bfe0 1acc 00 00 00 00 
5bfe4 1acd 00 00 00 00 
5bfe8 1ace 00 00 00 00 
5bfec 1acf 00 00 00 00 
5bff0 1ad0 00 00 00 00 
5bff4 1ad1 00 00 00 00 
5bff8 1ad2 00 00 00 00 
5bffc 1ad3 00 00 00 00 
5c000 1ad4 00 00 00 00 
5c004 1ad5 00 00 00 00 
5c008 1ad6 00 00 00 00 
5c00c 1ad7 00 00 00 00 
5c010 1ad8 00 00 00 00 
5c014 1ad9 00 00 00 00 
5c018 1ada 00 00 00 00 
5c01c 1adb 00 00 00 00 
5c020 1adc 00 00 00 00 
5c024 1add 00 00 00 00 
5c028 1ade 00 00 00 00 
5c02c 1adf 00 00 00 00 
5c030 1ae0 00 00 00 00 
5c034 1ae1 00 00 00 00 
5c038 1ae2 00 00 00 00 
5c03c 1ae3 00 00 00 00 
5c040 1ae4 00 00 00 00 
5c044 1ae5 00 00 00 00 
5c048 1ae6 00 00 00 00 
5c04c 1ae7 00 00 00 00 
5c050 1ae8 00 00 00 00 
5c054 1ae9 00 00 00 00 
5c058 1aea 00 00 00 00 
5c05c 1aeb 00 00 00 00 
5c060 1aec 00 00 00 00 
5c064 1aed 00 00 00 00 
5c068 1aee 00 00 00 00 
5c06c 1aef 00 00 00 00 
5c070 1af0 00 00 00 00 
5c074 1af1 00 00 00 00 
5c078 1af2 00 00 00 00 
5c07c 1af3 00 00 00 00 
5c080 1af4 00 00 00 00 
5c084 1af5 00 00 00 00 
5c088 1af6 00 00 00 00 
5c08c 1af7 00 00 00 00 
5c090 1af8 00 00 00 00 
5c094 1af9 00 00 00 00 
5c098 1afa 00 00 00 00 
5c09c 1afb 00 00 00 00 
5c0a0 1afc 00 00 00 00 
5c0a4 1afd 00 00 00 00 
5c0a8 1afe 00 00 00 00 
5c0ac 1aff 00 00 00 00 
5c0b0 1b00 00 00 00 00 
5c0b4 1b01 00 00 00 00 
5c0b8 1b02 00 00 00 00 
5c0bc 1b03 00 00 00 00 
5c0c0 1b04 00 00 00 00 
5c0c4 1b05 00 00 00 00 
5c0c8 1b06 00 00 00 00 
5c0cc 1b07 00 00 00 00 
5c0d0 1b08 00 00 00 00 
5c0d4 1b09 00 00 00 00 
5c0d8 1b0a 00 00 00 00 
5c0dc 1b0b 00 00 00 00 
5c0e0 1b0c 00 00 00 00 
5c0e4 1b0d 00 00 00 00 
5c0e8 1b0e 00 00 00 00 
5c0ec 1b0f 00 00 00 00 
5c0f0 1b10 00 00 00 00 
5c0f4 1b11 00 00 00 00 
5c0f8 1b12 00 00 00 00 
5c0fc 1b13 00 00 00 00 
5c100 1b14 00 00 00 00 
5c104 1b15 00 00 00 00 
5c108 1b16 00 00 00 00 
5c10c 1b17 00 00 00 00 
5c110 1b18 00 00 00 00 
5c114 1b19 00 00 00 00 
5c118 1b1a 00 00 00 00 
5c11c 1b1b 00 00 00 00 
5c120 1b1c 00 00 00 00 
5c124 1b1d 00 00 00 00 
5c128 1b1e 00 00 00 00 
5c12c 1b1f 00 00 00 00 
5c130 1b20 00 00 00 00 
5c134 1b21 00 00 00 00 
5c138 1b22 00 00 00 00 
5c13c 1b23 00 00 00 00 
5c140 1b24 00 00 00 00 
5c144 1b25 00 00 00 00 
5c148 1b26 00 00 00 00 
5c14c 1b27 00 00 00 00 
5c150 1b28 00 00 00 00 
5c154 1b29 00 00 00 00 
5c158 1b2a 00 00 00 00 
5c15c 1b2b 00 00 00 00 
5c160 1b2c 00 00 00 00 
5c164 1b2d 00 00 00 00 
5c168 1b2e 00 00 00 00 
5c16c 1b2f 00 00 00 00 
5c170 1b30 00 00 00 00 
5c174 1b31 00 00 00 00 
5c178 1b32 00 00 00 00 
5c17c 1b33 00 00 00 00 
5c180 1b34 00 00 00 00 
5c184 1b35 00 00 00 00 
5c188 1b36 00 00 00 00 
5c18c 1b37 00 00 00 00 
5c190 1b38 00 00 00 00 
5c194 1b39 00 00 00 00 
5c198 1b3a 00 00 00 00 
5c19c 1b3b 00 00 00 00 
5c1a0 1b3c 00 00 00 00 
5c1a4 1b3d 00 00 00 00 
5c1a8 1b3e 00 00 00 00 
5c1ac 1b3f 00 00 00 00 
5c1b0 1b40 00 00 00 00 
5c1b4 1b41 00 00 00 00 
5c1b8 1b42 00 00 00 00 
5c1bc 1b43 00 00 00 00 
5c1c0 1b44 00 00 00 00 
5c1c4 1b45 00 00 00 00 
5c1c8 1b46 00 00 00 00 
5c1cc 1b47 00 00 00 00 
5c1d0 1b48 00 00 00 00 
5c1d4 1b49 00 00 00 00 
5c1d8 1b4a 00 00 00 00 
5c1dc 1b4b 00 00 00 00 
5c1e0 1b4c 00 00 00 00 
5c1e4 1b4d 00 00 00 00 
5c1e8 1b4e 00 00 00 00 
5c1ec 1b4f 00 00 00 00 
5c1f0 1b50 00 00 00 00 
5c1f4 1b51 00 00 00 00 
5c1f8 1b52 00 00 00 00 
5c1fc 1b53 00 00 00 00 
5c200 1b54 00 00 00 00 
5c204 1b55 00 00 00 00 
5c208 1b56 00 00 00 00 
5c20c 1b57 00 00 00 00 
5c210 1b58 00 00 00 00 
5c214 1b59 00 00 00 00 
5c218 1b5a 00 00 00 00 
5c21c 1b5b 00 00 00 00 
5c220 1b5c 00 00 00 00 
5c224 1b5d 00 00 00 00 
5c228 1b5e 00 00 00 00 
5c22c 1b5f 00 00 00 00 
5c230 1b60 00 00 00 00 
5c234 1b61 00 00 00 00 
5c238 1b62 00 00 00 00 
5c23c 1b63 00 00 00 00 
5c240 1b64 00 00 00 00 
5c244 1b65 00 00 00 00 
5c248 1b66 00 00 00 00 
5c24c 1b67 00 00 00 00 
5c250 1b68 00 00 00 00 
5c254 1b69 00 00 00 00 
5c258 1b6a 00 00 00 00 
5c25c 1b6b 00 00 00 00 
5c260 1b6c 00 00 00 00 
5c264 1b6d 00 00 00 00 
5c268 1b6e 00 00 00 00 
5c26c 1b6f 00 00 00 00 
5c270 1b70 00 00 00 00 
5c274 1b71 00 00 00 00 
5c278 1b72 00 00 00 00 
5c27c 1b73 00 00 00 00 
5c280 1b74 00 00 00 00 
5c284 1b75 00 00 00 00 
5c288 1b76 00 00 00 00 
5c28c 1b77 00 00 00 00 
5c290 1b78 00 00 00 00 
5c294 1b79 00 00 00 00 
5c298 1b7a 00 00 00 00 
5c29c 1b7b 00 00 00 00 
5c2a0 1b7c 00 00 00 00 
5c2a4 1b7d 00 00 00 00 
5c2a8 1b7e 00 00 00 00 
5c2ac 1b7f 00 00 00 00 
5c2b0 1b80 00 00 00 00 
5c2b4 1b81 00 00 00 00 
5c2b8 1b82 00 00 00 00 
5c2bc 1b83 00 00 00 00 
5c2c0 1b84 00 00 00 00 
5c2c4 1b85 00 00 00 00 
5c2c8 1b86 00 00 00 00 
5c2cc 1b87 00 00 00 00 
5c2d0 1b88 00 00 00 00 
5c2d4 1b89 00 00 00 00 
5c2d8 1b8a 00 00 00 00 
5c2dc 1b8b 00 00 00 00 
5c2e0 1b8c 00 00 00 00 
5c2e4 1b8d 00 00 00 00 
5c2e8 1b8e 00 00 00 00 
5c2ec 1b8f 00 00 00 00 
5c2f0 1b90 00 00 00 00 
5c2f4 1b91 00 00 00 00 
5c2f8 1b92 00 00 00 00 
5c2fc 1b93 00 00 00 00 
5c300 1b94 00 00 00 00 
5c304 1b95 00 00 00 00 
5c308 1b96 00 00 00 00 
5c30c 1b97 00 00 00 00 
5c310 1b98 00 00 00 00 
5c314 1b99 00 00 00 00 
5c318 1b9a 00 00 00 00 
5c31c 1b9b 00 00 00 00 
5c320 1b9c 00 00 00 00 
5c324 1b9d 00 00 00 00 
5c328 1b9e 00 00 00 00 
5c32c 1b9f 00 00 00 00 
5c330 1ba0 00 00 00 00 
5c334 1ba1 00 00 00 00 
5c338 1ba2 00 00 00 00 
5c33c 1ba3 00 00 00 00 
5c340 1ba4 00 00 00 00 
5c344 1ba5 00 00 00 00 
5c348 1ba6 00 00 00 00 
5c34c 1ba7 00 00 00 00 
5c350 1ba8 00 00 00 00 
5c354 1ba9 00 00 00 00 
5c358 1baa 00 00 00 00 
5c35c 1bab 00 00 00 00 
5c360 1bac 00 00 00 00 
5c364 1bad 00 00 00 00 
5c368 1bae 00 00 00 00 
5c36c 1baf 00 00 00 00 
5c370 1bb0 00 00 00 00 
5c374 1bb1 00 00 00 00 
5c378 1bb2 00 00 00 00 
5c37c 1bb3 00 00 00 00 
5c380 1bb4 00 00 00 00 
5c384 1bb5 00 00 00 00 
5c388 1bb6 00 00 00 00 
5c38c 1bb7 00 00 00 00 
5c390 1bb8 00 00 00 00 
5c394 1bb9 00 00 00 00 
5c398 1bba 00 00 00 00 
5c39c 1bbb 00 00 00 00 
5c3a0 1bbc 00 00 00 00 
5c3a4 1bbd 00 00 00 00 
5c3a8 1bbe 00 00 00 00 
5c3ac 1bbf 00 00 00 00 
5c3b0 1bc0 00 00 00 00 
5c3b4 1bc1 00 00 00 00 
5c3b8 1bc2 00 00 00 00 
5c3bc 1bc3 00 00 00 00 
5c3c0 1bc4 00 00 00 00 
5c3c4 1bc5 00 00 00 00 
5c3c8 1bc6 00 00 00 00 
5c3cc 1bc7 00 00 00 00 
5c3d0 1bc8 00 00 00 00 
5c3d4 1bc9 00 00 00 00 
5c3d8 1bca 00 00 00 00 
5c3dc 1bcb 00 00 00 00 
5c3e0 1bcc 00 00 00 00 
5c3e4 1bcd 00 00 00 00 
5c3e8 1bce 00 00 00 00 
5c3ec 1bcf 00 00 00 00 
5c3f0 1bd0 00 00 00 00 
5c3f4 1bd1 00 00 00 00 
5c3f8 1bd2 00 00 00 00 
5c3fc 1bd3 00 00 00 00 
5c400 1bd4 00 00 00 00 
5c404 1bd5 00 00 00 00 
5c408 1bd6 00 00 00 00 
5c40c 1bd7 00 00 00 00 
5c410 1bd8 00 00 00 00 
5c414 1bd9 00 00 00 00 
5c418 1bda 00 00 00 00 
5c41c 1bdb 00 00 00 00 
5c420 1bdc 00 00 00 00 
5c424 1bdd 00 00 00 00 
5c428 1bde 00 00 00 00 
5c42c 1bdf 00 00 00 00 
5c430 1be0 00 00 00 00 
5c434 1be1 00 00 00 00 
5c438 1be2 00 00 00 00 
5c43c 1be3 00 00 00 00 
5c440 1be4 00 00 00 00 
5c444 1be5 00 00 00 00 
5c448 1be6 00 00 00 00 
5c44c 1be7 00 00 00 00 
5c450 1be8 00 00 00 00 
5c454 1be9 00 00 00 00 
5c458 1bea 00 00 00 00 
5c45c 1beb 00 00 00 00 
5c460 1bec 00 00 00 00 
5c464 1bed 00 00 00 00 
5c468 1bee 00 00 00 00 
5c46c 1bef 00 00 00 00 
5c470 1bf0 00 00 00 00 
5c474 1bf1 00 00 00 00 
5c478 1bf2 00 00 00 00 
5c47c 1bf3 00 00 00 00 
5c480 1bf4 00 00 00 00 
5c484 1bf5 00 00 00 00 
5c488 1bf6 00 00 00 00 
5c48c 1bf7 00 00 00 00 
5c490 1bf8 00 00 00 00 
5c494 1bf9 00 00 00 00 
5c498 1bfa 00 00 00 00 
5c49c 1bfb 00 00 00 00 
5c4a0 1bfc 00 00 00 00 
5c4a4 1bfd 00 00 00 00 
5c4a8 1bfe 00 00 00 00 
5c4ac 1bff 00 00 00 00 
5c4b0 1c00 00 00 00 00 
5c4b4 1c01 00 00 00 00 
5c4b8 1c02 00 00 00 00 
5c4bc 1c03 00 00 00 00 
5c4c0 1c04 00 00 00 00 
5c4c4 1c05 00 00 00 00 
5c4c8 1c06 00 00 00 00 
5c4cc 1c07 00 00 00 00 
5c4d0 1c08 00 00 00 00 
5c4d4 1c09 00 00 00 00 
5c4d8 1c0a 00 00 00 00 
5c4dc 1c0b 00 00 00 00 
5c4e0 1c0c 00 00 00 00 
5c4e4 1c0d 00 00 00 00 
5c4e8 1c0e 00 00 00 00 
5c4ec 1c0f 00 00 00 00 
5c4f0 1c10 00 00 00 00 
5c4f4 1c11 00 00 00 00 
5c4f8 1c12 00 00 00 00 
5c4fc 1c13 00 00 00 00 
5c500 1c14 00 00 00 00 
5c504 1c15 00 00 00 00 
5c508 1c16 00 00 00 00 
5c50c 1c17 00 00 00 00 
5c510 1c18 00 00 00 00 
5c514 1c19 00 00 00 00 
5c518 1c1a 00 00 00 00 
5c51c 1c1b 00 00 00 00 
5c520 1c1c 00 00 00 00 
5c524 1c1d 00 00 00 00 
5c528 1c1e 00 00 00 00 
5c52c 1c1f 00 00 00 00 
5c530 1c20 00 00 00 00 
5c534 1c21 00 00 00 00 
5c538 1c22 00 00 00 00 
5c53c 1c23 00 00 00 00 
5c540 1c24 00 00 00 00 
5c544 1c25 00 00 00 00 
5c548 1c26 00 00 00 00 
5c54c 1c27 00 00 00 00 
5c550 1c28 00 00 00 00 
5c554 1c29 00 00 00 00 
5c558 1c2a 00 00 00 00 
5c55c 1c2b 00 00 00 00 
5c560 1c2c 00 00 00 00 
5c564 1c2d 00 00 00 00 
5c568 1c2e 00 00 00 00 
5c56c 1c2f 00 00 00 00 
5c570 1c30 00 00 00 00 
5c574 1c31 00 00 00 00 
5c578 1c32 00 00 00 00 
5c57c 1c33 00 00 00 00 
5c580 1c34 00 00 00 00 
5c584 1c35 00 00 00 00 
5c588 1c36 00 00 00 00 
5c58c 1c37 00 00 00 00 
5c590 1c38 00 00 00 00 
5c594 1c39 00 00 00 00 
5c598 1c3a 00 00 00 00 
5c59c 1c3b 00 00 00 00 
5c5a0 1c3c 00 00 00 00 
5c5a4 1c3d 00 00 00 00 
5c5a8 1c3e 00 00 00 00 
5c5ac 1c3f 00 00 00 00 
5c5b0 1c40 00 00 00 00 
5c5b4 1c41 00 00 00 00 
5c5b8 1c42 00 00 00 00 
5c5bc 1c43 00 00 00 00 
5c5c0 1c44 00 00 00 00 
5c5c4 1c45 00 00 00 00 
5c5c8 1c46 00 00 00 00 
5c5cc 1c47 00 00 00 00 
5c5d0 1c48 00 00 00 00 
5c5d4 1c49 00 00 00 00 
5c5d8 1c4a 00 00 00 00 
5c5dc 1c4b 00 00 00 00 
5c5e0 1c4c 00 00 00 00 
5c5e4 1c4d 00 00 00 00 
5c5e8 1c4e 00 00 00 00 
5c5ec 1c4f 00 00 00 00 
5c5f0 1c50 00 00 00 00 
5c5f4 1c51 00 00 00 00 
5c5f8 1c52 00 00 00 00 
5c5fc 1c53 00 00 00 00 
5c600 1c54 00 00 00 00 
5c604 1c55 00 00 00 00 
5c608 1c56 00 00 00 00 
5c60c 1c57 00 00 00 00 
5c610 1c58 00 00 00 00 
5c614 1c59 00 00 00 00 
5c618 1c5a 00 00 00 00 
5c61c 1c5b 00 00 00 00 
5c620 1c5c 00 00 00 00 
5c624 1c5d 00 00 00 00 
5c628 1c5e 00 00 00 00 
5c62c 1c5f 00 00 00 00 
5c630 1c60 00 00 00 00 
5c634 1c61 00 00 00 00 
5c638 1c62 00 00 00 00 
5c63c 1c63 00 00 00 00 
5c640 1c64 00 00 00 00 
5c644 1c65 00 00 00 00 
5c648 1c66 00 00 00 00 
5c64c 1c67 00 00 00 00 
5c650 1c68 00 00 00 00 
5c654 1c69 00 00 00 00 
5c658 1c6a 00 00 00 00 
5c65c 1c6b 00 00 00 00 
5c660 1c6c 00 00 00 00 
5c664 1c6d 00 00 00 00 
5c668 1c6e 00 00 00 00 
5c66c 1c6f 00 00 00 00 
5c670 1c70 00 00 00 00 
5c674 1c71 00 00 00 00 
5c678 1c72 00 00 00 00 
5c67c 1c73 00 00 00 00 
5c680 1c74 00 00 00 00 
5c684 1c75 00 00 00 00 
5c688 1c76 00 00 00 00 
5c68c 1c77 00 00 00 00 
5c690 1c78 00 00 00 00 
5c694 1c79 00 00 00 00 
5c698 1c7a 00 00 00 00 
5c69c 1c7b 00 00 00 00 
5c6a0 1c7c 00 00 00 00 
5c6a4 1c7d 00 00 00 00 
5c6a8 1c7e 00 00 00 00 
5c6ac 1c7f 00 00 00 00 
5c6b0 1c80 00 00 00 00 
5c6b4 1c81 00 00 00 00 
5c6b8 1c82 00 00 00 00 
5c6bc 1c83 00 00 00 00 
5c6c0 1c84 00 00 00 00 
5c6c4 1c85 00 00 00 00 
5c6c8 1c86 00 00 00 00 
5c6cc 1c87 00 00 00 00 
5c6d0 1c88 00 00 00 00 
5c6d4 1c89 00 00 00 00 
5c6d8 1c8a 00 00 00 00 
5c6dc 1c8b 00 00 00 00 
5c6e0 1c8c 00 00 00 00 
5c6e4 1c8d 00 00 00 00 
5c6e8 1c8e 00 00 00 00 
5c6ec 1c8f 00 00 00 00 
5c6f0 1c90 00 00 00 00 
5c6f4 1c91 00 00 00 00 
5c6f8 1c92 00 00 00 00 
5c6fc 1c93 00 00 00 00 
5c700 1c94 00 00 00 00 
5c704 1c95 00 00 00 00 
5c708 1c96 00 00 00 00 
5c70c 1c97 00 00 00 00 
5c710 1c98 00 00 00 00 
5c714 1c99 00 00 00 00 
5c718 1c9a 00 00 00 00 
5c71c 1c9b 00 00 00 00 
5c720 1c9c 00 00 00 00 
5c724 1c9d 00 00 00 00 
5c728 1c9e 00 00 00 00 
5c72c 1c9f 00 00 00 00 
5c730 1ca0 00 00 00 00 
5c734 1ca1 00 00 00 00 
5c738 1ca2 00 00 00 00 
5c73c 1ca3 00 00 00 00 
5c740 1ca4 00 00 00 00 
5c744 1ca5 00 00 00 00 
5c748 1ca6 00 00 00 00 
5c74c 1ca7 00 00 00 00 
5c750 1ca8 00 00 00 00 
5c754 1ca9 00 00 00 00 
5c758 1caa 00 00 00 00 
5c75c 1cab 00 00 00 00 
5c760 1cac 00 00 00 00 
5c764 1cad 00 00 00 00 
5c768 1cae 00 00 00 00 
5c76c 1caf 00 00 00 00 
5c770 1cb0 00 00 00 00 
5c774 1cb1 00 00 00 00 
5c778 1cb2 00 00 00 00 
5c77c 1cb3 00 00 00 00 
5c780 1cb4 00 00 00 00 
5c784 1cb5 00 00 00 00 
5c788 1cb6 00 00 00 00 
5c78c 1cb7 00 00 00 00 
5c790 1cb8 00 00 00 00 
5c794 1cb9 00 00 00 00 
5c798 1cba 00 00 00 00 
5c79c 1cbb 00 00 00 00 
5c7a0 1cbc 00 00 00 00 
5c7a4 1cbd 00 00 00 00 
5c7a8 1cbe 00 00 00 00 
5c7ac 1cbf 00 00 00 00 
5c7b0 1cc0 00 00 00 00 
5c7b4 1cc1 00 00 00 00 
5c7b8 1cc2 00 00 00 00 
5c7bc 1cc3 00 00 00 00 
5c7c0 1cc4 00 00 00 00 
5c7c4 1cc5 00 00 00 00 
5c7c8 1cc6 00 00 00 00 
5c7cc 1cc7 00 00 00 00 
5c7d0 1cc8 00 00 00 00 
5c7d4 1cc9 00 00 00 00 
5c7d8 1cca 00 00 00 00 
5c7dc 1ccb 00 00 00 00 
5c7e0 1ccc 00 00 00 00 
5c7e4 1ccd 00 00 00 00 
5c7e8 1cce 00 00 00 00 
5c7ec 1ccf 00 00 00 00 
5c7f0 1cd0 00 00 00 00 
5c7f4 1cd1 00 00 00 00 
5c7f8 1cd2 00 00 00 00 
5c7fc 1cd3 00 00 00 00 
5c800 1cd4 00 00 00 00 
5c804 1cd5 00 00 00 00 
5c808 1cd6 00 00 00 00 
5c80c 1cd7 00 00 00 00 
5c810 1cd8 00 00 00 00 
5c814 1cd9 00 00 00 00 
5c818 1cda 00 00 00 00 
5c81c 1cdb 00 00 00 00 
5c820 1cdc 00 00 00 00 
5c824 1cdd 00 00 00 00 
5c828 1cde 00 00 00 00 
5c82c 1cdf 00 00 00 00 
5c830 1ce0 00 00 00 00 
5c834 1ce1 00 00 00 00 
5c838 1ce2 00 00 00 00 
5c83c 1ce3 00 00 00 00 
5c840 1ce4 00 00 00 00 
5c844 1ce5 00 00 00 00 
5c848 1ce6 00 00 00 00 
5c84c 1ce7 00 00 00 00 
5c850 1ce8 00 00 00 00 
5c854 1ce9 00 00 00 00 
5c858 1cea 00 00 00 00 
5c85c 1ceb 00 00 00 00 
5c860 1cec 00 00 00 00 
5c864 1ced 00 00 00 00 
5c868 1cee 00 00 00 00 
5c86c 1cef 00 00 00 00 
5c870 1cf0 00 00 00 00 
5c874 1cf1 00 00 00 00 
5c878 1cf2 00 00 00 00 
5c87c 1cf3 00 00 00 00 
5c880 1cf4 00 00 00 00 
5c884 1cf5 00 00 00 00 
5c888 1cf6 00 00 00 00 
5c88c 1cf7 00 00 00 00 
5c890 1cf8 00 00 00 00 
5c894 1cf9 00 00 00 00 
5c898 1cfa 00 00 00 00 
5c89c 1cfb 00 00 00 00 
5c8a0 1cfc 00 00 00 00 
5c8a4 1cfd 00 00 00 00 
5c8a8 1cfe 00 00 00 00 
5c8ac 1cff 00 00 00 00 
5c8b0 1d00 00 00 00 00 
5c8b4 1d01 00 00 00 00 
5c8b8 1d02 00 00 00 00 
5c8bc 1d03 00 00 00 00 
5c8c0 1d04 00 00 00 00 
5c8c4 1d05 00 00 00 00 
5c8c8 1d06 00 00 00 00 
5c8cc 1d07 00 00 00 00 
5c8d0 1d08 00 00 00 00 
5c8d4 1d09 00 00 00 00 
5c8d8 1d0a 00 00 00 00 
5c8dc 1d0b 00 00 00 00 
5c8e0 1d0c 00 00 00 00 
5c8e4 1d0d 00 00 00 00 
5c8e8 1d0e 00 00 00 00 
5c8ec 1d0f 00 00 00 00 
5c8f0 1d10 00 00 00 00 
5c8f4 1d11 00 00 00 00 
5c8f8 1d12 00 00 00 00 
5c8fc 1d13 00 00 00 00 
5c900 1d14 00 00 00 00 
5c904 1d15 00 00 00 00 
5c908 1d16 00 00 00 00 
5c90c 1d17 00 00 00 00 
5c910 1d18 00 00 00 00 
5c914 1d19 00 00 00 00 
5c918 1d1a 00 00 00 00 
5c91c 1d1b 00 00 00 00 
5c920 1d1c 00 00 00 00 
5c924 1d1d 00 00 00 00 
5c928 1d1e 00 00 00 00 
5c92c 1d1f 00 00 00 00 
5c930 1d20 00 00 00 00 
5c934 1d21 00 00 00 00 
5c938 1d22 00 00 00 00 
5c93c 1d23 00 00 00 00 
5c940 1d24 00 00 00 00 
5c944 1d25 00 00 00 00 
5c948 1d26 00 00 00 00 
5c94c 1d27 00 00 00 00 
5c950 1d28 00 00 00 00 
5c954 1d29 00 00 00 00 
5c958 1d2a 00 00 00 00 
5c95c 1d2b 00 00 00 00 
5c960 1d2c 00 00 00 00 
5c964 1d2d 00 00 00 00 
5c968 1d2e 00 00 00 00 
5c96c 1d2f 00 00 00 00 
5c970 1d30 00 00 00 00 
5c974 1d31 00 00 00 00 
5c978 1d32 00 00 00 00 
5c97c 1d33 00 00 00 00 
5c980 1d34 00 00 00 00 
5c984 1d35 00 00 00 00 
5c988 1d36 00 00 00 00 
5c98c 1d37 00 00 00 00 
5c990 1d38 00 00 00 00 
5c994 1d39 00 00 00 00 
5c998 1d3a 00 00 00 00 
5c99c 1d3b 00 00 00 00 
5c9a0 1d3c 00 00 00 00 
5c9a4 1d3d 00 00 00 00 
5c9a8 1d3e 00 00 00 00 
5c9ac 1d3f 00 00 00 00 
5c9b0 1d40 00 00 00 00 
5c9b4 1d41 00 00 00 00 
5c9b8 1d42 00 00 00 00 
5c9bc 1d43 00 00 00 00 
5c9c0 1d44 00 00 00 00 
5c9c4 1d45 00 00 00 00 
5c9c8 1d46 00 00 00 00 
5c9cc 1d47 00 00 00 00 
5c9d0 1d48 00 00 00 00 
5c9d4 1d49 00 00 00 00 
5c9d8 1d4a 00 00 00 00 
5c9dc 1d4b 00 00 00 00 
5c9e0 1d4c 00 00 00 00 
5c9e4 1d4d 00 00 00 00 
5c9e8 1d4e 00 00 00 00 
5c9ec 1d4f 00 00 00 00 
5c9f0 1d50 00 00 00 00 
5c9f4 1d51 00 00 00 00 
5c9f8 1d52 00 00 00 00 
5c9fc 1d53 00 00 00 00 
5ca00 1d54 00 00 00 00 
5ca04 1d55 00 00 00 00 
5ca08 1d56 00 00 00 00 
5ca0c 1d57 00 00 00 00 
5ca10 1d58 00 00 00 00 
5ca14 1d59 00 00 00 00 
5ca18 1d5a 00 00 00 00 
5ca1c 1d5b 00 00 00 00 
5ca20 1d5c 00 00 00 00 
5ca24 1d5d 00 00 00 00 
5ca28 1d5e 00 00 00 00 
5ca2c 1d5f 00 00 00 00 
5ca30 1d60 00 00 00 00 
5ca34 1d61 00 00 00 00 
5ca38 1d62 00 00 00 00 
5ca3c 1d63 00 00 00 00 
5ca40 1d64 00 00 00 00 
5ca44 1d65 00 00 00 00 
5ca48 1d66 00 00 00 00 
5ca4c 1d67 00 00 00 00 
5ca50 1d68 00 00 00 00 
5ca54 1d69 00 00 00 00 
5ca58 1d6a 00 00 00 00 
5ca5c 1d6b 00 00 00 00 
5ca60 1d6c 00 00 00 00 
5ca64 1d6d 00 00 00 00 
5ca68 1d6e 00 00 00 00 
5ca6c 1d6f 00 00 00 00 
5ca70 1d70 00 00 00 00 
5ca74 1d71 00 00 00 00 
5ca78 1d72 00 00 00 00 
5ca7c 1d73 00 00 00 00 
5ca80 1d74 00 00 00 00 
5ca84 1d75 00 00 00 00 
5ca88 1d76 00 00 00 00 
5ca8c 1d77 00 00 00 00 
5ca90 1d78 00 00 00 00 
5ca94 1d79 00 00 00 00 
5ca98 1d7a 00 00 00 00 
5ca9c 1d7b 00 00 00 00 
5caa0 1d7c 00 00 00 00 
5caa4 1d7d 00 00 00 00 
5caa8 1d7e 00 00 00 00 
5caac 1d7f 00 00 00 00 
5cab0 1d80 00 00 00 00 
5cab4 1d81 00 00 00 00 
5cab8 1d82 00 00 00 00 
5cabc 1d83 00 00 00 00 
5cac0 1d84 00 00 00 00 
5cac4 1d85 00 00 00 00 
5cac8 1d86 00 00 00 00 
5cacc 1d87 00 00 00 00 
5cad0 1d88 00 00 00 00 
5cad4 1d89 00 00 00 00 
5cad8 1d8a 00 00 00 00 
5cadc 1d8b 00 00 00 00 
5cae0 1d8c 00 00 00 00 
5cae4 1d8d 00 00 00 00 
5cae8 1d8e 00 00 00 00 
5caec 1d8f 00 00 00 00 
5caf0 1d90 00 00 00 00 
5caf4 1d91 00 00 00 00 
5caf8 1d92 00 00 00 00 
5cafc 1d93 00 00 00 00 
5cb00 1d94 00 00 00 00 
5cb04 1d95 00 00 00 00 
5cb08 1d96 00 00 00 00 
5cb0c 1d97 00 00 00 00 
5cb10 1d98 00 00 00 00 
5cb14 1d99 00 00 00 00 
5cb18 1d9a 00 00 00 00 
5cb1c 1d9b 00 00 00 00 
5cb20 1d9c 00 00 00 00 
5cb24 1d9d 00 00 00 00 
5cb28 1d9e 00 00 00 00 
5cb2c 1d9f 00 00 00 00 
5cb30 1da0 00 00 00 00 
5cb34 1da1 00 00 00 00 
5cb38 1da2 00 00 00 00 
5cb3c 1da3 00 00 00 00 
5cb40 1da4 00 00 00 00 
5cb44 1da5 00 00 00 00 
5cb48 1da6 00 00 00 00 
5cb4c 1da7 00 00 00 00 
5cb50 1da8 00 00 00 00 
5cb54 1da9 00 00 00 00 
5cb58 1daa 00 00 00 00 
5cb5c 1dab 00 00 00 00 
5cb60 1dac 00 00 00 00 
5cb64 1dad 00 00 00 00 
5cb68 1dae 00 00 00 00 
5cb6c 1daf 00 00 00 00 
5cb70 1db0 00 00 00 00 
5cb74 1db1 00 00 00 00 
5cb78 1db2 00 00 00 00 
5cb7c 1db3 00 00 00 00 
5cb80 1db4 00 00 00 00 
5cb84 1db5 00 00 00 00 
5cb88 1db6 00 00 00 00 
5cb8c 1db7 00 00 00 00 
5cb90 1db8 00 00 00 00 
5cb94 1db9 00 00 00 00 
5cb98 1dba 00 00 00 00 
5cb9c 1dbb 00 00 00 00 
5cba0 1dbc 00 00 00 00 
5cba4 1dbd 00 00 00 00 
5cba8 1dbe 00 00 00 00 
5cbac 1dbf 00 00 00 00 
5cbb0 1dc0 00 00 00 00 
5cbb4 1dc1 00 00 00 00 
5cbb8 1dc2 00 00 00 00 
5cbbc 1dc3 00 00 00 00 
5cbc0 1dc4 00 00 00 00 
5cbc4 1dc5 00 00 00 00 
5cbc8 1dc6 00 00 00 00 
5cbcc 1dc7 00 00 00 00 
5cbd0 1dc8 00 00 00 00 
5cbd4 1dc9 00 00 00 00 
5cbd8 1dca 00 00 00 00 
5cbdc 1dcb 00 00 00 00 
5cbe0 1dcc 00 00 00 00 
5cbe4 1dcd 00 00 00 00 
5cbe8 1dce 00 00 00 00 
5cbec 1dcf 00 00 00 00 
5cbf0 1dd0 00 00 00 00 
5cbf4 1dd1 00 00 00 00 
5cbf8 1dd2 00 00 00 00 
5cbfc 1dd3 00 00 00 00 
5cc00 1dd4 00 00 00 00 
5cc04 1dd5 00 00 00 00 
5cc08 1dd6 00 00 00 00 
5cc0c 1dd7 00 00 00 00 
5cc10 1dd8 00 00 00 00 
5cc14 1dd9 00 00 00 00 
5cc18 1dda 00 00 00 00 
5cc1c 1ddb 00 00 00 00 
5cc20 1ddc 00 00 00 00 
5cc24 1ddd 00 00 00 00 
5cc28 1dde 00 00 00 00 
5cc2c 1ddf 00 00 00 00 
5cc30 1de0 00 00 00 00 
5cc34 1de1 00 00 00 00 
5cc38 1de2 00 00 00 00 
5cc3c 1de3 00 00 00 00 
5cc40 1de4 00 00 00 00 
5cc44 1de5 00 00 00 00 
5cc48 1de6 00 00 00 00 
5cc4c 1de7 00 00 00 00 
5cc50 1de8 00 00 00 00 
5cc54 1de9 00 00 00 00 
5cc58 1dea 00 00 00 00 
5cc5c 1deb 00 00 00 00 
5cc60 1dec 00 00 00 00 
5cc64 1ded 00 00 00 00 
5cc68 1dee 00 00 00 00 
5cc6c 1def 00 00 00 00 
5cc70 1df0 00 00 00 00 
5cc74 1df1 00 00 00 00 
5cc78 1df2 00 00 00 00 
5cc7c 1df3 00 00 00 00 
5cc80 1df4 00 00 00 00 
5cc84 1df5 00 00 00 00 
5cc88 1df6 00 00 00 00 
5cc8c 1df7 00 00 00 00 
5cc90 1df8 00 00 00 00 
5cc94 1df9 00 00 00 00 
5cc98 1dfa 00 00 00 00 
5cc9c 1dfb 00 00 00 00 
5cca0 1dfc 00 00 00 00 
5cca4 1dfd 00 00 00 00 
5cca8 1dfe 00 00 00 00 
5ccac 1dff 00 00 00 00 
5ccb0 1e00 00 00 00 00 
5ccb4 1e01 00 00 00 00 
5ccb8 1e02 00 00 00 00 
5ccbc 1e03 00 00 00 00 
5ccc0 1e04 00 00 00 00 
5ccc4 1e05 00 00 00 00 
5ccc8 1e06 00 00 00 00 
5cccc 1e07 00 00 00 00 
5ccd0 1e08 00 00 00 00 
5ccd4 1e09 00 00 00 00 
5ccd8 1e0a 00 00 00 00 
5ccdc 1e0b 00 00 00 00 
5cce0 1e0c 00 00 00 00 
5cce4 1e0d 00 00 00 00 
5cce8 1e0e 00 00 00 00 
5ccec 1e0f 00 00 00 00 
5ccf0 1e10 00 00 00 00 
5ccf4 1e11 00 00 00 00 
5ccf8 1e12 00 00 00 00 
5ccfc 1e13 00 00 00 00 
5cd00 1e14 00 00 00 00 
5cd04 1e15 00 00 00 00 
5cd08 1e16 00 00 00 00 
5cd0c 1e17 00 00 00 00 
5cd10 1e18 00 00 00 00 
5cd14 1e19 00 00 00 00 
5cd18 1e1a 00 00 00 00 
5cd1c 1e1b 00 00 00 00 
5cd20 1e1c 00 00 00 00 
5cd24 1e1d 00 00 00 00 
5cd28 1e1e 00 00 00 00 
5cd2c 1e1f 00 00 00 00 
5cd30 1e20 00 00 00 00 
5cd34 1e21 00 00 00 00 
5cd38 1e22 00 00 00 00 
5cd3c 1e23 00 00 00 00 
5cd40 1e24 00 00 00 00 
5cd44 1e25 00 00 00 00 
5cd48 1e26 00 00 00 00 
5cd4c 1e27 00 00 00 00 
5cd50 1e28 00 00 00 00 
5cd54 1e29 00 00 00 00 
5cd58 1e2a 00 00 00 00 
5cd5c 1e2b 00 00 00 00 
5cd60 1e2c 00 00 00 00 
5cd64 1e2d 00 00 00 00 
5cd68 1e2e 00 00 00 00 
5cd6c 1e2f 00 00 00 00 
5cd70 1e30 00 00 00 00 
5cd74 1e31 00 00 00 00 
5cd78 1e32 00 00 00 00 
5cd7c 1e33 00 00 00 00 
5cd80 1e34 00 00 00 00 
5cd84 1e35 00 00 00 00 
5cd88 1e36 00 00 00 00 
5cd8c 1e37 00 00 00 00 
5cd90 1e38 00 00 00 00 
5cd94 1e39 00 00 00 00 
5cd98 1e3a 00 00 00 00 
5cd9c 1e3b 00 00 00 00 
5cda0 1e3c 00 00 00 00 
5cda4 1e3d 00 00 00 00 
5cda8 1e3e 00 00 00 00 
5cdac 1e3f 00 00 00 00 
5cdb0 1e40 00 00 00 00 
5cdb4 1e41 00 00 00 00 
5cdb8 1e42 00 00 00 00 
5cdbc 1e43 00 00 00 00 
5cdc0 1e44 00 00 00 00 
5cdc4 1e45 00 00 00 00 
5cdc8 1e46 00 00 00 00 
5cdcc 1e47 00 00 00 00 
5cdd0 1e48 00 00 00 00 
5cdd4 1e49 00 00 00 00 
5cdd8 1e4a 00 00 00 00 
5cddc 1e4b 00 00 00 00 
5cde0 1e4c 00 00 00 00 
5cde4 1e4d 00 00 00 00 
5cde8 1e4e 00 00 00 00 
5cdec 1e4f 00 00 00 00 
5cdf0 1e50 00 00 00 00 
5cdf4 1e51 00 00 00 00 
5cdf8 1e52 00 00 00 00 
5cdfc 1e53 00 00 00 00 
5ce00 1e54 00 00 00 00 
5ce04 1e55 00 00 00 00 
5ce08 1e56 00 00 00 00 
5ce0c 1e57 00 00 00 00 
5ce10 1e58 00 00 00 00 
5ce14 1e59 00 00 00 00 
5ce18 1e5a 00 00 00 00 
5ce1c 1e5b 00 00 00 00 
5ce20 1e5c 00 00 00 00 
5ce24 1e5d 00 00 00 00 
5ce28 1e5e 00 00 00 00 
5ce2c 1e5f 00 00 00 00 
5ce30 1e60 00 00 00 00 
5ce34 1e61 00 00 00 00 
5ce38 1e62 00 00 00 00 
5ce3c 1e63 00 00 00 00 
5ce40 1e64 00 00 00 00 
5ce44 1e65 00 00 00 00 
5ce48 1e66 00 00 00 00 
5ce4c 1e67 00 00 00 00 
5ce50 1e68 00 00 00 00 
5ce54 1e69 00 00 00 00 
5ce58 1e6a 00 00 00 00 
5ce5c 1e6b 00 00 00 00 
5ce60 1e6c 00 00 00 00 
5ce64 1e6d 00 00 00 00 
5ce68 1e6e 00 00 00 00 
5ce6c 1e6f 00 00 00 00 
5ce70 1e70 00 00 00 00 
5ce74 1e71 00 00 00 00 
5ce78 1e72 00 00 00 00 
5ce7c 1e73 00 00 00 00 
5ce80 1e74 00 00 00 00 
5ce84 1e75 00 00 00 00 
5ce88 1e76 00 00 00 00 
5ce8c 1e77 00 00 00 00 
5ce90 1e78 00 00 00 00 
5ce94 1e79 00 00 00 00 
5ce98 1e7a 00 00 00 00 
5ce9c 1e7b 00 00 00 00 
5cea0 1e7c 00 00 00 00 
5cea4 1e7d 00 00 00 00 
5cea8 1e7e 00 00 00 00 
5ceac 1e7f 00 00 00 00 
5ceb0 1e80 00 00 00 00 
5ceb4 1e81 00 00 00 00 
5ceb8 1e82 00 00 00 00 
5cebc 1e83 00 00 00 00 
5cec0 1e84 00 00 00 00 
5cec4 1e85 00 00 00 00 
5cec8 1e86 00 00 00 00 
5cecc 1e87 00 00 00 00 
5ced0 1e88 00 00 00 00 
5ced4 1e89 00 00 00 00 
5ced8 1e8a 00 00 00 00 
5cedc 1e8b 00 00 00 00 
5cee0 1e8c 00 00 00 00 
5cee4 1e8d 00 00 00 00 
5cee8 1e8e 00 00 00 00 
5ceec 1e8f 00 00 00 00 
5cef0 1e90 00 00 00 00 
5cef4 1e91 00 00 00 00 
5cef8 1e92 00 00 00 00 
5cefc 1e93 00 00 00 00 
5cf00 1e94 00 00 00 00 
5cf04 1e95 00 00 00 00 
5cf08 1e96 00 00 00 00 
5cf0c 1e97 00 00 00 00 
5cf10 1e98 00 00 00 00 
5cf14 1e99 00 00 00 00 
5cf18 1e9a 00 00 00 00 
5cf1c 1e9b 00 00 00 00 
5cf20 1e9c 00 00 00 00 
5cf24 1e9d 00 00 00 00 
5cf28 1e9e 00 00 00 00 
5cf2c 1e9f 00 00 00 00 
5cf30 1ea0 00 00 00 00 
5cf34 1ea1 00 00 00 00 
5cf38 1ea2 00 00 00 00 
5cf3c 1ea3 00 00 00 00 
5cf40 1ea4 00 00 00 00 
5cf44 1ea5 00 00 00 00 
5cf48 1ea6 00 00 00 00 
5cf4c 1ea7 00 00 00 00 
5cf50 1ea8 00 00 00 00 
5cf54 1ea9 00 00 00 00 
5cf58 1eaa 00 00 00 00 
5cf5c 1eab 00 00 00 00 
5cf60 1eac 00 00 00 00 
5cf64 1ead 00 00 00 00 
5cf68 1eae 00 00 00 00 
5cf6c 1eaf 00 00 00 00 
5cf70 1eb0 00 00 00 00 
5cf74 1eb1 00 00 00 00 
5cf78 1eb2 00 00 00 00 
5cf7c 1eb3 00 00 00 00 
5cf80 1eb4 00 00 00 00 
5cf84 1eb5 00 00 00 00 
5cf88 1eb6 00 00 00 00 
5cf8c 1eb7 00 00 00 00 
5cf90 1eb8 00 00 00 00 
5cf94 1eb9 00 00 00 00 
5cf98 1eba 00 00 00 00 
5cf9c 1ebb 00 00 00 00 
5cfa0 1ebc 00 00 00 00 
5cfa4 1ebd 00 00 00 00 
5cfa8 1ebe 00 00 00 00 
5cfac 1ebf 00 00 00 00 
5cfb0 1ec0 00 00 00 00 
5cfb4 1ec1 00 00 00 00 
5cfb8 1ec2 00 00 00 00 
5cfbc 1ec3 00 00 00 00 
5cfc0 1ec4 00 00 00 00 
5cfc4 1ec5 00 00 00 00 
5cfc8 1ec6 00 00 00 00 
5cfcc 1ec7 00 00 00 00 
5cfd0 1ec8 00 00 00 00 
5cfd4 1ec9 00 00 00 00 
5cfd8 1eca 00 00 00 00 
5cfdc 1ecb 00 00 00 00 
5cfe0 1ecc 00 00 00 00 
5cfe4 1ecd 00 00 00 00 
5cfe8 1ece 00 00 00 00 
5cfec 1ecf 00 00 00 00 
5cff0 1ed0 00 00 00 00 
5cff4 1ed1 00 00 00 00 
5cff8 1ed2 00 00 00 00 
5cffc 1ed3 00 00 00 00 
5d000 1ed4 00 00 00 00 
5d004 1ed5 00 00 00 00 
5d008 1ed6 00 00 00 00 
5d00c 1ed7 00 00 00 00 
5d010 1ed8 00 00 00 00 
5d014 1ed9 00 00 00 00 
5d018 1eda 00 00 00 00 
5d01c 1edb 00 00 00 00 
5d020 1edc 00 00 00 00 
5d024 1edd 00 00 00 00 
5d028 1ede 00 00 00 00 
5d02c 1edf 00 00 00 00 
5d030 1ee0 00 00 00 00 
5d034 1ee1 00 00 00 00 
5d038 1ee2 00 00 00 00 
5d03c 1ee3 00 00 00 00 
5d040 1ee4 00 00 00 00 
5d044 1ee5 00 00 00 00 
5d048 1ee6 00 00 00 00 
5d04c 1ee7 00 00 00 00 
5d050 1ee8 00 00 00 00 
5d054 1ee9 00 00 00 00 
5d058 1eea 00 00 00 00 
5d05c 1eeb 00 00 00 00 
5d060 1eec 00 00 00 00 
5d064 1eed 00 00 00 00 
5d068 1eee 00 00 00 00 
5d06c 1eef 00 00 00 00 
5d070 1ef0 00 00 00 00 
5d074 1ef1 00 00 00 00 
5d078 1ef2 00 00 00 00 
5d07c 1ef3 00 00 00 00 
5d080 1ef4 00 00 00 00 
5d084 1ef5 00 00 00 00 
5d088 1ef6 00 00 00 00 
5d08c 1ef7 00 00 00 00 
5d090 1ef8 00 00 00 00 
5d094 1ef9 00 00 00 00 
5d098 1efa 00 00 00 00 
5d09c 1efb 00 00 00 00 
5d0a0 1efc 00 00 00 00 
5d0a4 1efd 00 00 00 00 
5d0a8 1efe 00 00 00 00 
5d0ac 1eff 00 00 00 00 
5d0b0 1f00 00 00 00 00 
5d0b4 1f01 00 00 00 00 
5d0b8 1f02 00 00 00 00 
5d0bc 1f03 00 00 00 00 
5d0c0 1f04 00 00 00 00 
5d0c4 1f05 00 00 00 00 
5d0c8 1f06 00 00 00 00 
5d0cc 1f07 00 00 00 00 
5d0d0 1f08 00 00 00 00 
5d0d4 1f09 00 00 00 00 
5d0d8 1f0a 00 00 00 00 
5d0dc 1f0b 00 00 00 00 
5d0e0 1f0c 00 00 00 00 
5d0e4 1f0d 00 00 00 00 
5d0e8 1f0e 00 00 00 00 
5d0ec 1f0f 00 00 00 00 
5d0f0 1f10 00 00 00 00 
5d0f4 1f11 00 00 00 00 
5d0f8 1f12 00 00 00 00 
5d0fc 1f13 00 00 00 00 
5d100 1f14 00 00 00 00 
5d104 1f15 00 00 00 00 
5d108 1f16 00 00 00 00 
5d10c 1f17 00 00 00 00 
5d110 1f18 00 00 00 00 
5d114 1f19 00 00 00 00 
5d118 1f1a 00 00 00 00 
5d11c 1f1b 00 00 00 00 
5d120 1f1c 00 00 00 00 
5d124 1f1d 00 00 00 00 
5d128 1f1e 00 00 00 00 
5d12c 1f1f 00 00 00 00 
5d130 1f20 00 00 00 00 
5d134 1f21 00 00 00 00 
5d138 1f22 00 00 00 00 
5d13c 1f23 00 00 00 00 
5d140 1f24 00 00 00 00 
5d144 1f25 00 00 00 00 
5d148 1f26 00 00 00 00 
5d14c 1f27 00 00 00 00 
5d150 1f28 00 00 00 00 
5d154 1f29 00 00 00 00 
5d158 1f2a 00 00 00 00 
5d15c 1f2b 00 00 00 00 
5d160 1f2c 00 00 00 00 
5d164 1f2d 00 00 00 00 
5d168 1f2e 00 00 00 00 
5d16c 1f2f 00 00 00 00 
5d170 1f30 00 00 00 00 
5d174 1f31 00 00 00 00 
5d178 1f32 00 00 00 00 
5d17c 1f33 00 00 00 00 
5d180 1f34 00 00 00 00 
5d184 1f35 00 00 00 00 
5d188 1f36 00 00 00 00 
5d18c 1f37 00 00 00 00 
5d190 1f38 00 00 00 00 
5d194 1f39 00 00 00 00 
5d198 1f3a 00 00 00 00 
5d19c 1f3b 00 00 00 00 
5d1a0 1f3c 00 00 00 00 
5d1a4 1f3d 00 00 00 00 
5d1a8 1f3e 00 00 00 00 
5d1ac 1f3f 00 00 00 00 
5d1b0 1f40 00 00 00 00 
5d1b4 1f41 00 00 00 00 
5d1b8 1f42 00 00 00 00 
5d1bc 1f43 00 00 00 00 
5d1c0 1f44 00 00 00 00 
5d1c4 1f45 00 00 00 00 
5d1c8 1f46 00 00 00 00 
5d1cc 1f47 00 00 00 00 
5d1d0 1f48 00 00 00 00 
5d1d4 1f49 00 00 00 00 
5d1d8 1f4a 00 00 00 00 
5d1dc 1f4b 00 00 00 00 
5d1e0 1f4c 00 00 00 00 
5d1e4 1f4d 00 00 00 00 
5d1e8 1f4e 00 00 00 00 
5d1ec 1f4f 00 00 00 00 
5d1f0 1f50 00 00 00 00 
5d1f4 1f51 00 00 00 00 
5d1f8 1f52 00 00 00 00 
5d1fc 1f53 00 00 00 00 
5d200 1f54 00 00 00 00 
5d204 1f55 00 00 00 00 
5d208 1f56 00 00 00 00 
5d20c 1f57 00 00 00 00 
5d210 1f58 00 00 00 00 
5d214 1f59 00 00 00 00 
5d218 1f5a 00 00 00 00 
5d21c 1f5b 00 00 00 00 
5d220 1f5c 00 00 00 00 
5d224 1f5d 00 00 00 00 
5d228 1f5e 00 00 00 00 
5d22c 1f5f 00 00 00 00 
5d230 1f60 00 00 00 00 
5d234 1f61 00 00 00 00 
5d238 1f62 00 00 00 00 
5d23c 1f63 00 00 00 00 
5d240 1f64 00 00 00 00 
5d244 1f65 00 00 00 00 
5d248 1f66 00 00 00 00 
5d24c 1f67 00 00 00 00 
5d250 1f68 00 00 00 00 
5d254 1f69 00 00 00 00 
5d258 1f6a 00 00 00 00 
5d25c 1f6b 00 00 00 00 
5d260 1f6c 00 00 00 00 
5d264 1f6d 00 00 00 00 
5d268 1f6e 00 00 00 00 
5d26c 1f6f 00 00 00 00 
5d270 1f70 00 00 00 00 
5d274 1f71 00 00 00 00 
5d278 1f72 00 00 00 00 
5d27c 1f73 00 00 00 00 
5d280 1f74 00 00 00 00 
5d284 1f75 00 00 00 00 
5d288 1f76 00 00 00 00 
5d28c 1f77 00 00 00 00 
5d290 1f78 00 00 00 00 
5d294 1f79 00 00 00 00 
5d298 1f7a 00 00 00 00 
5d29c 1f7b 00 00 00 00 
5d2a0 1f7c 00 00 00 00 
5d2a4 1f7d 00 00 00 00 
5d2a8 1f7e 00 00 00 00 
5d2ac 1f7f 00 00 00 00 
5d2b0 1f80 00 00 00 00 
5d2b4 1f81 00 00 00 00 
5d2b8 1f82 00 00 00 00 
5d2bc 1f83 00 00 00 00 
5d2c0 1f84 00 00 00 00 
5d2c4 1f85 00 00 00 00 
5d2c8 1f86 00 00 00 00 
5d2cc 1f87 00 00 00 00 
5d2d0 1f88 00 00 00 00 
5d2d4 1f89 00 00 00 00 
5d2d8 1f8a 00 00 00 00 
5d2dc 1f8b 00 00 00 00 
5d2e0 1f8c 00 00 00 00 
5d2e4 1f8d 00 00 00 00 
5d2e8 1f8e 00 00 00 00 
5d2ec 1f8f 00 00 00 00 
5d2f0 1f90 00 00 00 00 
5d2f4 1f91 00 00 00 00 
5d2f8 1f92 00 00 00 00 
5d2fc 1f93 00 00 00 00 
5d300 1f94 00 00 00 00 
5d304 1f95 00 00 00 00 
5d308 1f96 00 00 00 00 
5d30c 1f97 00 00 00 00 
5d310 1f98 00 00 00 00 
5d314 1f99 00 00 00 00 
5d318 1f9a 00 00 00 00 
5d31c 1f9b 00 00 00 00 
5d320 1f9c 00 00 00 00 
5d324 1f9d 00 00 00 00 
5d328 1f9e 00 00 00 00 
5d32c 1f9f 00 00 00 00 
5d330 1fa0 00 00 00 00 
5d334 1fa1 00 00 00 00 
5d338 1fa2 00 00 00 00 
5d33c 1fa3 00 00 00 00 
5d340 1fa4 00 00 00 00 
5d344 1fa5 00 00 00 00 
5d348 1fa6 00 00 00 00 
5d34c 1fa7 00 00 00 00 
5d350 1fa8 00 00 00 00 
5d354 1fa9 00 00 00 00 
5d358 1faa 00 00 00 00 
5d35c 1fab 00 00 00 00 
5d360 1fac 00 00 00 00 
5d364 1fad 00 00 00 00 
5d368 1fae 00 00 00 00 
5d36c 1faf 00 00 00 00 
5d370 1fb0 00 00 00 00 
5d374 1fb1 00 00 00 00 
5d378 1fb2 00 00 00 00 
5d37c 1fb3 00 00 00 00 
5d380 1fb4 00 00 00 00 
5d384 1fb5 00 00 00 00 
5d388 1fb6 00 00 00 00 
5d38c 1fb7 00 00 00 00 
5d390 1fb8 00 00 00 00 
5d394 1fb9 00 00 00 00 
5d398 1fba 00 00 00 00 
5d39c 1fbb 00 00 00 00 
5d3a0 1fbc 00 00 00 00 
5d3a4 1fbd 00 00 00 00 
5d3a8 1fbe 00 00 00 00 
5d3ac 1fbf 00 00 00 00 
5d3b0 1fc0 00 00 00 00 
5d3b4 1fc1 00 00 00 00 
5d3b8 1fc2 00 00 00 00 
5d3bc 1fc3 00 00 00 00 
5d3c0 1fc4 00 00 00 00 
5d3c4 1fc5 00 00 00 00 
5d3c8 1fc6 00 00 00 00 
5d3cc 1fc7 00 00 00 00 
5d3d0 1fc8 00 00 00 00 
5d3d4 1fc9 00 00 00 00 
5d3d8 1fca 00 00 00 00 
5d3dc 1fcb 00 00 00 00 
5d3e0 1fcc 00 00 00 00 
5d3e4 1fcd 00 00 00 00 
5d3e8 1fce 00 00 00 00 
5d3ec 1fcf 00 00 00 00 
5d3f0 1fd0 00 00 00 00 
5d3f4 1fd1 00 00 00 00 
5d3f8 1fd2 00 00 00 00 
5d3fc 1fd3 00 00 00 00 
5d400 1fd4 00 00 00 00 
5d404 1fd5 00 00 00 00 
5d408 1fd6 00 00 00 00 
5d40c 1fd7 00 00 00 00 
5d410 1fd8 00 00 00 00 
5d414 1fd9 00 00 00 00 
5d418 1fda 00 00 00 00 
5d41c 1fdb 00 00 00 00 
5d420 1fdc 00 00 00 00 
5d424 1fdd 00 00 00 00 
5d428 1fde 00 00 00 00 
5d42c 1fdf 00 00 00 00 
5d430 1fe0 00 00 00 00 
5d434 1fe1 00 00 00 00 
5d438 1fe2 00 00 00 00 
5d43c 1fe3 00 00 00 00 
5d440 1fe4 00 00 00 00 
5d444 1fe5 00 00 00 00 
5d448 1fe6 00 00 00 00 
5d44c 1fe7 00 00 00 00 
5d450 1fe8 00 00 00 00 
5d454 1fe9 00 00 00 00 
5d458 1fea 00 00 00 00 
5d45c 1feb 00 00 00 00 
5d460 1fec 00 00 00 00 
5d464 1fed 00 00 00 00 
5d468 1fee 00 00 00 00 
5d46c 1fef 00 00 00 00 
5d470 1ff0 00 00 00 00 
5d474 1ff1 00 00 00 00 
5d478 1ff2 00 00 00 00 
5d47c 1ff3 00 00 00 00 
5d480 1ff4 00 00 00 00 
5d484 1ff5 00 00 00 00 
5d488 1ff6 00 00 00 00 
5d48c 1ff7 00 00 00 00 
5d490 1ff8 00 00 00 00 
5d494 1ff9 00 00 00 00 
5d498 1ffa 00 00 00 00 
5d49c 1ffb 00 00 00 00 
5d4a0 1ffc 00 00 00 00 
5d4a4 1ffd 00 00 00 00 
5d4a8 1ffe 00 00 00 00 
5d4ac 1fff 00 00 00 00 
5d4b0 2000 00 00 00 00 
5d4b4 2001 00 00 00 00 
5d4b8 2002 00 00 00 00 
5d4bc 2003 00 00 00 00 
5d4c0 2004 00 00 00 00 
5d4c4 2005 00 00 00 00 
5d4c8 2006 00 00 00 00 
5d4cc 2007 00 00 00 00 
5d4d0 2008 00 00 00 00 
5d4d4 2009 00 00 00 00 
5d4d8 200a 00 00 00 00 
5d4dc 200b 00 00 00 00 
5d4e0 200c 00 00 00 00 
5d4e4 200d 00 00 00 00 
5d4e8 200e 00 00 00 00 
5d4ec 200f 00 00 00 00 
5d4f0 2010 00 00 00 00 
5d4f4 2011 00 00 00 00 
5d4f8 2012 00 00 00 00 
5d4fc 2013 00 00 00 00 
5d500 2014 00 00 00 00 
5d504 2015 00 00 00 00 
5d508 2016 00 00 00 00 
5d50c 2017 00 00 00 00 
5d510 2018 00 00 00 00 
5d514 2019 00 00 00 00 
5d518 201a 00 00 00 00 
5d51c 201b 00 00 00 00 
5d520 201c 00 00 00 00 
5d524 201d 00 00 00 00 
5d528 201e 00 00 00 00 
5d52c 201f 00 00 00 00 
5d530 2020 00 00 00 00 
5d534 2021 00 00 00 00 
5d538 2022 00 00 00 00 
5d53c 2023 00 00 00 00 
5d540 2024 00 00 00 00 
5d544 2025 00 00 00 00 
5d548 2026 00 00 00 00 
5d54c 2027 00 00 00 00 
5d550 2028 00 00 00 00 
5d554 2029 00 00 00 00 
5d558 202a 00 00 00 00 
5d55c 202b 00 00 00 00 
5d560 202c 00 00 00 00 
5d564 202d 00 00 00 00 
5d568 202e 00 00 00 00 
5d56c 202f 00 00 00 00 
5d570 2030 00 00 00 00 
5d574 2031 00 00 00 00 
5d578 2032 00 00 00 00 
5d57c 2033 00 00 00 00 
5d580 2034 00 00 00 00 
5d584 2035 00 00 00 00 
5d588 2036 00 00 00 00 
5d58c 2037 00 00 00 00 
5d590 2038 00 00 00 00 
5d594 2039 00 00 00 00 
5d598 203a 00 00 00 00 
5d59c 203b 00 00 00 00 
5d5a0 203c 00 00 00 00 
5d5a4 203d 00 00 00 00 
5d5a8 203e 00 00 00 00 
5d5ac 203f 00 00 00 00 
5d5b0 2040 00 00 00 00 
5d5b4 2041 00 00 00 00 
5d5b8 2042 00 00 00 00 
5d5bc 2043 00 00 00 00 
5d5c0 2044 00 00 00 00 
5d5c4 2045 00 00 00 00 
5d5c8 2046 00 00 00 00 
5d5cc 2047 00 00 00 00 
5d5d0 2048 00 00 00 00 
5d5d4 2049 00 00 00 00 
5d5d8 204a 00 00 00 00 
5d5dc 204b 00 00 00 00 
5d5e0 204c 00 00 00 00 
5d5e4 204d 00 00 00 00 
5d5e8 204e 00 00 00 00 
5d5ec 204f 00 00 00 00 
5d5f0 2050 00 00 00 00 
5d5f4 2051 00 00 00 00 
5d5f8 2052 00 00 00 00 
5d5fc 2053 00 00 00 00 
5d600 2054 00 00 00 00 
5d604 2055 00 00 00 00 
5d608 2056 00 00 00 00 
5d60c 2057 00 00 00 00 
5d610 2058 00 00 00 00 
5d614 2059 00 00 00 00 
5d618 205a 00 00 00 00 
5d61c 205b 00 00 00 00 
5d620 205c 00 00 00 00 
5d624 205d 00 00 00 00 
5d628 205e 00 00 00 00 
5d62c 205f 00 00 00 00 
5d630 2060 00 00 00 00 
5d634 2061 00 00 00 00 
5d638 2062 00 00 00 00 
5d63c 2063 00 00 00 00 
5d640 2064 00 00 00 00 
5d644 2065 00 00 00 00 
5d648 2066 00 00 00 00 
5d64c 2067 00 00 00 00 
5d650 2068 00 00 00 00 
5d654 2069 00 00 00 00 
5d658 206a 00 00 00 00 
5d65c 206b 00 00 00 00 
5d660 206c 00 00 00 00 
5d664 206d 00 00 00 00 
5d668 206e 00 00 00 00 
5d66c 206f 00 00 00 00 
5d670 2070 00 00 00 00 
5d674 2071 00 00 00 00 
5d678 2072 00 00 00 00 
5d67c 2073 00 00 00 00 
5d680 2074 00 00 00 00 
5d684 2075 00 00 00 00 
5d688 2076 00 00 00 00 
5d68c 2077 00 00 00 00 
5d690 2078 00 00 00 00 
5d694 2079 00 00 00 00 
5d698 207a 00 00 00 00 
5d69c 207b 00 00 00 00 
5d6a0 207c 00 00 00 00 
5d6a4 207d 00 00 00 00 
5d6a8 207e 00 00 00 00 
5d6ac 207f 00 00 00 00 
5d6b0 2080 00 00 00 00 
5d6b4 2081 00 00 00 00 
5d6b8 2082 00 00 00 00 
5d6bc 2083 00 00 00 00 
5d6c0 2084 00 00 00 00 
5d6c4 2085 00 00 00 00 
5d6c8 2086 00 00 00 00 
5d6cc 2087 00 00 00 00 
5d6d0 2088 00 00 00 00 
5d6d4 2089 00 00 00 00 
5d6d8 208a 00 00 00 00 
5d6dc 208b 00 00 00 00 
5d6e0 208c 00 00 00 00 
5d6e4 208d 00 00 00 00 
5d6e8 208e 00 00 00 00 
5d6ec 208f 00 00 00 00 
5d6f0 2090 00 00 00 00 
5d6f4 2091 00 00 00 00 
5d6f8 2092 00 00 00 00 
5d6fc 2093 00 00 00 00 
5d700 2094 00 00 00 00 
5d704 2095 00 00 00 00 
5d708 2096 00 00 00 00 
5d70c 2097 00 00 00 00 
5d710 2098 00 00 00 00 
5d714 2099 00 00 00 00 
5d718 209a 00 00 00 00 
5d71c 209b 00 00 00 00 
5d720 209c 00 00 00 00 
5d724 209d 00 00 00 00 
5d728 209e 00 00 00 00 
5d72c 209f 00 00 00 00 
5d730 20a0 00 00 00 00 
5d734 20a1 00 00 00 00 
5d738 20a2 00 00 00 00 
5d73c 20a3 00 00 00 00 
5d740 20a4 00 00 00 00 
5d744 20a5 00 00 00 00 
5d748 20a6 00 00 00 00 
5d74c 20a7 00 00 00 00 
5d750 20a8 00 00 00 00 
5d754 20a9 00 00 00 00 
5d758 20aa 00 00 00 00 
5d75c 20ab 00 00 00 00 
5d760 20ac 00 00 00 00 
5d764 20ad 00 00 00 00 
5d768 20ae 00 00 00 00 
5d76c 20af 00 00 00 00 
5d770 20b0 00 00 00 00 
5d774 20b1 00 00 00 00 
5d778 20b2 00 00 00 00 
5d77c 20b3 00 00 00 00 
5d780 20b4 00 00 00 00 
5d784 20b5 00 00 00 00 
5d788 20b6 00 00 00 00 
5d78c 20b7 00 00 00 00 
5d790 20b8 00 00 00 00 
5d794 20b9 00 00 00 00 
5d798 20ba 00 00 00 00 
5d79c 20bb 00 00 00 00 
5d7a0 20bc 00 00 00 00 
5d7a4 20bd 00 00 00 00 
5d7a8 20be 00 00 00 00 
5d7ac 20bf 00 00 00 00 
5d7b0 20c0 00 00 00 00 
5d7b4 20c1 00 00 00 00 
5d7b8 20c2 00 00 00 00 
5d7bc 20c3 00 00 00 00 
5d7c0 20c4 00 00 00 00 
5d7c4 20c5 00 00 00 00 
5d7c8 20c6 00 00 00 00 
5d7cc 20c7 00 00 00 00 
5d7d0 20c8 00 00 00 00 
5d7d4 20c9 00 00 00 00 
5d7d8 20ca 00 00 00 00 
5d7dc 20cb 00 00 00 00 
5d7e0 20cc 00 00 00 00 
5d7e4 20cd 00 00 00 00 
5d7e8 20ce 00 00 00 00 
5d7ec 20cf 00 00 00 00 
5d7f0 20d0 00 00 00 00 
5d7f4 20d1 00 00 00 00 
5d7f8 20d2 00 00 00 00 
5d7fc 20d3 00 00 00 00 
5d800 20d4 00 00 00 00 
5d804 20d5 00 00 00 00 
5d808 20d6 00 00 00 00 
5d80c 20d7 00 00 00 00 
5d810 20d8 00 00 00 00 
5d814 20d9 00 00 00 00 
5d818 20da 00 00 00 00 
5d81c 20db 00 00 00 00 
5d820 20dc 00 00 00 00 
5d824 20dd 00 00 00 00 
5d828 20de 00 00 00 00 
5d82c 20df 00 00 00 00 
5d830 20e0 00 00 00 00 
5d834 20e1 00 00 00 00 
5d838 20e2 00 00 00 00 
5d83c 20e3 00 00 00 00 
5d840 20e4 00 00 00 00 
5d844 20e5 00 00 00 00 
5d848 20e6 00 00 00 00 
5d84c 20e7 00 00 00 00 
5d850 20e8 00 00 00 00 
5d854 20e9 00 00 00 00 
5d858 20ea 00 00 00 00 
5d85c 20eb 00 00 00 00 
5d860 20ec 00 00 00 00 
5d864 20ed 00 00 00 00 
5d868 20ee 00 00 00 00 
5d86c 20ef 00 00 00 00 
5d870 20f0 00 00 00 00 
5d874 20f1 00 00 00 00 
5d878 20f2 00 00 00 00 
5d87c 20f3 00 00 00 00 
5d880 20f4 00 00 00 00 
5d884 20f5 00 00 00 00 
5d888 20f6 00 00 00 00 
5d88c 20f7 00 00 00 00 
5d890 20f8 00 00 00 00 
5d894 20f9 00 00 00 00 
5d898 20fa 00 00 00 00 
5d89c 20fb 00 00 00 00 
5d8a0 20fc 00 00 00 00 
5d8a4 20fd 00 00 00 00 
5d8a8 20fe 00 00 00 00 
5d8ac 20ff 00 00 00 00 
5d8b0 2100 00 00 00 00 
5d8b4 2101 00 00 00 00 
5d8b8 2102 00 00 00 00 
5d8bc 2103 00 00 00 00 
5d8c0 2104 00 00 00 00 
5d8c4 2105 00 00 00 00 
5d8c8 2106 00 00 00 00 
5d8cc 2107 00 00 00 00 
5d8d0 2108 00 00 00 00 
5d8d4 2109 00 00 00 00 
5d8d8 210a 00 00 00 00 
5d8dc 210b 00 00 00 00 
5d8e0 210c 00 00 00 00 
5d8e4 210d 00 00 00 00 
5d8e8 210e 00 00 00 00 
5d8ec 210f 00 00 00 00 
5d8f0 2110 00 00 00 00 
5d8f4 2111 00 00 00 00 
5d8f8 2112 00 00 00 00 
5d8fc 2113 00 00 00 00 
5d900 2114 00 00 00 00 
5d904 2115 00 00 00 00 
5d908 2116 00 00 00 00 
5d90c 2117 00 00 00 00 
5d910 2118 00 00 00 00 
5d914 2119 00 00 00 00 
5d918 211a 00 00 00 00 
5d91c 211b 00 00 00 00 
5d920 211c 00 00 00 00 
5d924 211d 00 00 00 00 
5d928 211e 00 00 00 00 
5d92c 211f 00 00 00 00 
5d930 2120 00 00 00 00 
5d934 2121 00 00 00 00 
5d938 2122 00 00 00 00 
5d93c 2123 00 00 00 00 
5d940 2124 00 00 00 00 
5d944 2125 00 00 00 00 
5d948 2126 00 00 00 00 
5d94c 2127 00 00 00 00 
5d950 2128 00 00 00 00 
5d954 2129 00 00 00 00 
5d958 212a 00 00 00 00 
5d95c 212b 00 00 00 00 
5d960 212c 00 00 00 00 
5d964 212d 00 00 00 00 
5d968 212e 00 00 00 00 
5d96c 212f 00 00 00 00 
5d970 2130 00 00 00 00 
5d974 2131 00 00 00 00 
5d978 2132 00 00 00 00 
5d97c 2133 00 00 00 00 
5d980 2134 00 00 00 00 
5d984 2135 00 00 00 00 
5d988 2136 00 00 00 00 
5d98c 2137 00 00 00 00 
5d990 2138 00 00 00 00 
5d994 2139 00 00 00 00 
5d998 213a 00 00 00 00 
5d99c 213b 00 00 00 00 
5d9a0 213c 00 00 00 00 
5d9a4 213d 00 00 00 00 
5d9a8 213e 00 00 00 00 
5d9ac 213f 00 00 00 00 
5d9b0 2140 00 00 00 00 
5d9b4 2141 00 00 00 00 
5d9b8 2142 00 00 00 00 
5d9bc 2143 00 00 00 00 
5d9c0 2144 00 00 00 00 
5d9c4 2145 00 00 00 00 
5d9c8 2146 00 00 00 00 
5d9cc 2147 00 00 00 00 
5d9d0 2148 00 00 00 00 
5d9d4 2149 00 00 00 00 
5d9d8 214a 00 00 00 00 
5d9dc 214b 00 00 00 00 
5d9e0 214c 00 00 00 00 
5d9e4 214d 00 00 00 00 
5d9e8 214e 00 00 00 00 
5d9ec 214f 00 00 00 00 
5d9f0 2150 00 00 00 00 
5d9f4 2151 00 00 00 00 
5d9f8 2152 00 00 00 00 
5d9fc 2153 00 00 00 00 
5da00 2154 00 00 00 00 
5da04 2155 00 00 00 00 
5da08 2156 00 00 00 00 
5da0c 2157 00 00 00 00 
5da10 2158 00 00 00 00 
5da14 2159 00 00 00 00 
5da18 215a 00 00 00 00 
5da1c 215b 00 00 00 00 
5da20 215c 00 00 00 00 
5da24 215d 00 00 00 00 
5da28 215e 00 00 00 00 
5da2c 215f 00 00 00 00 
5da30 2160 00 00 00 00 
5da34 2161 00 00 00 00 
5da38 2162 00 00 00 00 
5da3c 2163 00 00 00 00 
5da40 2164 00 00 00 00 
5da44 2165 00 00 00 00 
5da48 2166 00 00 00 00 
5da4c 2167 00 00 00 00 
5da50 2168 00 00 00 00 
5da54 2169 00 00 00 00 
5da58 216a 00 00 00 00 
5da5c 216b 00 00 00 00 
5da60 216c 00 00 00 00 
5da64 216d 00 00 00 00 
5da68 216e 00 00 00 00 
5da6c 216f 00 00 00 00 
5da70 2170 00 00 00 00 
5da74 2171 00 00 00 00 
5da78 2172 00 00 00 00 
5da7c 2173 00 00 00 00 
5da80 2174 00 00 00 00 
5da84 2175 00 00 00 00 
5da88 2176 00 00 00 00 
5da8c 2177 00 00 00 00 
5da90 2178 00 00 00 00 
5da94 2179 00 00 00 00 
5da98 217a 00 00 00 00 
5da9c 217b 00 00 00 00 
5daa0 217c 00 00 00 00 
5daa4 217d 00 00 00 00 
5daa8 217e 00 00 00 00 
5daac 217f 00 00 00 00 
5dab0 2180 00 00 00 00 
5dab4 2181 00 00 00 00 
5dab8 2182 00 00 00 00 
5dabc 2183 00 00 00 00 
5dac0 2184 00 00 00 00 
5dac4 2185 00 00 00 00 
5dac8 2186 00 00 00 00 
5dacc 2187 00 00 00 00 
5dad0 2188 00 00 00 00 
5dad4 2189 00 00 00 00 
5dad8 218a 00 00 00 00 
5dadc 218b 00 00 00 00 
5dae0 218c 00 00 00 00 
5dae4 218d 00 00 00 00 
5dae8 218e 00 00 00 00 
5daec 218f 00 00 00 00 
5daf0 2190 00 00 00 00 
5daf4 2191 00 00 00 00 
5daf8 2192 00 00 00 00 
5dafc 2193 00 00 00 00 
5db00 2194 00 00 00 00 
5db04 2195 00 00 00 00 
5db08 2196 00 00 00 00 
5db0c 2197 00 00 00 00 
5db10 2198 00 00 00 00 
5db14 2199 00 00 00 00 
5db18 219a 00 00 00 00 
5db1c 219b 00 00 00 00 
5db20 219c 00 00 00 00 
5db24 219d 00 00 00 00 
5db28 219e 00 00 00 00 
5db2c 219f 00 00 00 00 
5db30 21a0 00 00 00 00 
5db34 21a1 00 00 00 00 
5db38 21a2 00 00 00 00 
5db3c 21a3 00 00 00 00 
5db40 21a4 00 00 00 00 
5db44 21a5 00 00 00 00 
5db48 21a6 00 00 00 00 
5db4c 21a7 00 00 00 00 
5db50 21a8 00 00 00 00 
5db54 21a9 00 00 00 00 
5db58 21aa 00 00 00 00 
5db5c 21ab 00 00 00 00 
5db60 21ac 00 00 00 00 
5db64 21ad 00 00 00 00 
5db68 21ae 00 00 00 00 
5db6c 21af 00 00 00 00 
5db70 21b0 00 00 00 00 
5db74 21b1 00 00 00 00 
5db78 21b2 00 00 00 00 
5db7c 21b3 00 00 00 00 
5db80 21b4 00 00 00 00 
5db84 21b5 00 00 00 00 
5db88 21b6 00 00 00 00 
5db8c 21b7 00 00 00 00 
5db90 21b8 00 00 00 00 
5db94 21b9 00 00 00 00 
5db98 21ba 00 00 00 00 
5db9c 21bb 00 00 00 00 
5dba0 21bc 00 00 00 00 
5dba4 21bd 00 00 00 00 
5dba8 21be 00 00 00 00 
5dbac 21bf 00 00 00 00 
5dbb0 21c0 00 00 00 00 
5dbb4 21c1 00 00 00 00 
5dbb8 21c2 00 00 00 00 
5dbbc 21c3 00 00 00 00 
5dbc0 21c4 00 00 00 00 
5dbc4 21c5 00 00 00 00 
5dbc8 21c6 00 00 00 00 
5dbcc 21c7 00 00 00 00 
5dbd0 21c8 00 00 00 00 
5dbd4 21c9 00 00 00 00 
5dbd8 21ca 00 00 00 00 
5dbdc 21cb 00 00 00 00 
5dbe0 21cc 00 00 00 00 
5dbe4 21cd 00 00 00 00 
5dbe8 21ce 00 00 00 00 
5dbec 21cf 00 00 00 00 
5dbf0 21d0 00 00 00 00 
5dbf4 21d1 00 00 00 00 
5dbf8 21d2 00 00 00 00 
5dbfc 21d3 00 00 00 00 
5dc00 21d4 00 00 00 00 
5dc04 21d5 00 00 00 00 
5dc08 21d6 00 00 00 00 
5dc0c 21d7 00 00 00 00 
5dc10 21d8 00 00 00 00 
5dc14 21d9 00 00 00 00 
5dc18 21da 00 00 00 00 
5dc1c 21db 00 00 00 00 
5dc20 21dc 00 00 00 00 
5dc24 21dd 00 00 00 00 
5dc28 21de 00 00 00 00 
5dc2c 21df 00 00 00 00 
5dc30 21e0 00 00 00 00 
5dc34 21e1 00 00 00 00 
5dc38 21e2 00 00 00 00 
5dc3c 21e3 00 00 00 00 
5dc40 21e4 00 00 00 00 
5dc44 21e5 00 00 00 00 
5dc48 21e6 00 00 00 00 
5dc4c 21e7 00 00 00 00 
5dc50 21e8 00 00 00 00 
5dc54 21e9 00 00 00 00 
5dc58 21ea 00 00 00 00 
5dc5c 21eb 00 00 00 00 
5dc60 21ec 00 00 00 00 
5dc64 21ed 00 00 00 00 
5dc68 21ee 00 00 00 00 
5dc6c 21ef 00 00 00 00 
5dc70 21f0 00 00 00 00 
5dc74 21f1 00 00 00 00 
5dc78 21f2 00 00 00 00 
5dc7c 21f3 00 00 00 00 
5dc80 21f4 00 00 00 00 
5dc84 21f5 00 00 00 00 
5dc88 21f6 00 00 00 00 
5dc8c 21f7 00 00 00 00 
5dc90 21f8 00 00 00 00 
5dc94 21f9 00 00 00 00 
5dc98 21fa 00 00 00 00 
5dc9c 21fb 00 00 00 00 
5dca0 21fc 00 00 00 00 
5dca4 21fd 00 00 00 00 
5dca8 21fe 00 00 00 00 
5dcac 21ff 00 00 00 00 
5dcb0 2200 00 00 00 00 
5dcb4 2201 00 00 00 00 
5dcb8 2202 00 00 00 00 
5dcbc 2203 00 00 00 00 
5dcc0 2204 00 00 00 00 
5dcc4 2205 00 00 00 00 
5dcc8 2206 00 00 00 00 
5dccc 2207 00 00 00 00 
5dcd0 2208 00 00 00 00 
5dcd4 2209 00 00 00 00 
5dcd8 220a 00 00 00 00 
5dcdc 220b 00 00 00 00 
5dce0 220c 00 00 00 00 
5dce4 220d 00 00 00 00 
5dce8 220e 00 00 00 00 
5dcec 220f 00 00 00 00 
5dcf0 2210 00 00 00 00 
5dcf4 2211 00 00 00 00 
5dcf8 2212 00 00 00 00 
5dcfc 2213 00 00 00 00 
5dd00 2214 00 00 00 00 
5dd04 2215 00 00 00 00 
5dd08 2216 00 00 00 00 
5dd0c 2217 00 00 00 00 
5dd10 2218 00 00 00 00 
5dd14 2219 00 00 00 00 
5dd18 221a 00 00 00 00 
5dd1c 221b 00 00 00 00 
5dd20 221c 00 00 00 00 
5dd24 221d 00 00 00 00 
5dd28 221e 00 00 00 00 
5dd2c 221f 00 00 00 00 
5dd30 2220 00 00 00 00 
5dd34 2221 00 00 00 00 
5dd38 2222 00 00 00 00 
5dd3c 2223 00 00 00 00 
5dd40 2224 00 00 00 00 
5dd44 2225 00 00 00 00 
5dd48 2226 00 00 00 00 
5dd4c 2227 00 00 00 00 
5dd50 2228 00 00 00 00 
5dd54 2229 00 00 00 00 
5dd58 222a 00 00 00 00 
5dd5c 222b 00 00 00 00 
5dd60 222c 00 00 00 00 
5dd64 222d 00 00 00 00 
5dd68 222e 00 00 00 00 
5dd6c 222f 00 00 00 00 
5dd70 2230 00 00 00 00 
5dd74 2231 00 00 00 00 
5dd78 2232 00 00 00 00 
5dd7c 2233 00 00 00 00 
5dd80 2234 00 00 00 00 
5dd84 2235 00 00 00 00 
5dd88 2236 00 00 00 00 
5dd8c 2237 00 00 00 00 
5dd90 2238 00 00 00 00 
5dd94 2239 00 00 00 00 
5dd98 223a 00 00 00 00 
5dd9c 223b 00 00 00 00 
5dda0 223c 00 00 00 00 
5dda4 223d 00 00 00 00 
5dda8 223e 00 00 00 00 
5ddac 223f 00 00 00 00 
5ddb0 2240 00 00 00 00 
5ddb4 2241 00 00 00 00 
5ddb8 2242 00 00 00 00 
5ddbc 2243 00 00 00 00 
5ddc0 2244 00 00 00 00 
5ddc4 2245 00 00 00 00 
5ddc8 2246 00 00 00 00 
5ddcc 2247 00 00 00 00 
5ddd0 2248 00 00 00 00 
5ddd4 2249 00 00 00 00 
5ddd8 224a 00 00 00 00 
5dddc 224b 00 00 00 00 
5dde0 224c 00 00 00 00 
5dde4 224d 00 00 00 00 
5dde8 224e 00 00 00 00 
5ddec 224f 00 00 00 00 
5ddf0 2250 00 00 00 00 
5ddf4 2251 00 00 00 00 
5ddf8 2252 00 00 00 00 
5ddfc 2253 00 00 00 00 
5de00 2254 00 00 00 00 
5de04 2255 00 00 00 00 
5de08 2256 00 00 00 00 
5de0c 2257 00 00 00 00 
5de10 2258 00 00 00 00 
5de14 2259 00 00 00 00 
5de18 225a 00 00 00 00 
5de1c 225b 00 00 00 00 
5de20 225c 00 00 00 00 
5de24 225d 00 00 00 00 
5de28 225e 00 00 00 00 
5de2c 225f 00 00 00 00 
5de30 2260 00 00 00 00 
5de34 2261 00 00 00 00 
5de38 2262 00 00 00 00 
5de3c 2263 00 00 00 00 
5de40 2264 00 00 00 00 
5de44 2265 00 00 00 00 
5de48 2266 00 00 00 00 
5de4c 2267 00 00 00 00 
5de50 2268 00 00 00 00 
5de54 2269 00 00 00 00 
5de58 226a 00 00 00 00 
5de5c 226b 00 00 00 00 
5de60 226c 00 00 00 00 
5de64 226d 00 00 00 00 
5de68 226e 00 00 00 00 
5de6c 226f 00 00 00 00 
5de70 2270 00 00 00 00 
5de74 2271 00 00 00 00 
5de78 2272 00 00 00 00 
5de7c 2273 00 00 00 00 
5de80 2274 00 00 00 00 
5de84 2275 00 00 00 00 
5de88 2276 00 00 00 00 
5de8c 2277 00 00 00 00 
5de90 2278 00 00 00 00 
5de94 2279 00 00 00 00 
5de98 227a 00 00 00 00 
5de9c 227b 00 00 00 00 
5dea0 227c 00 00 00 00 
5dea4 227d 00 00 00 00 
5dea8 227e 00 00 00 00 
5deac 227f 00 00 00 00 
5deb0 2280 00 00 00 00 
5deb4 2281 00 00 00 00 
5deb8 2282 00 00 00 00 
5debc 2283 00 00 00 00 
5dec0 2284 00 00 00 00 
5dec4 2285 00 00 00 00 
5dec8 2286 00 00 00 00 
5decc 2287 00 00 00 00 
5ded0 2288 00 00 00 00 
5ded4 2289 00 00 00 00 
5ded8 228a 00 00 00 00 
5dedc 228b 00 00 00 00 
5dee0 228c 00 00 00 00 
5dee4 228d 00 00 00 00 
5dee8 228e 00 00 00 00 
5deec 228f 00 00 00 00 
5def0 2290 00 00 00 00 
5def4 2291 00 00 00 00 
5def8 2292 00 00 00 00 
5defc 2293 00 00 00 00 
5df00 2294 00 00 00 00 
5df04 2295 00 00 00 00 
5df08 2296 00 00 00 00 
5df0c 2297 00 00 00 00 
5df10 2298 00 00 00 00 
5df14 2299 00 00 00 00 
5df18 229a 00 00 00 00 
5df1c 229b 00 00 00 00 
5df20 229c 00 00 00 00 
5df24 229d 00 00 00 00 
5df28 229e 00 00 00 00 
5df2c 229f 00 00 00 00 
5df30 22a0 00 00 00 00 
5df34 22a1 00 00 00 00 
5df38 22a2 00 00 00 00 
5df3c 22a3 00 00 00 00 
5df40 22a4 00 00 00 00 
5df44 22a5 00 00 00 00 
5df48 22a6 00 00 00 00 | 	long	0[8194]
5df4c 22a7             | objmem
5df4c 22a7             | 	long	0[0]
5df4c 22a7             | stackspace
5df4c 22a7 00 00 00 00 | 	long	0[1]
5df50 11d             | 	org	COG_BSS_START
5df50 11d             | _var01
5df50 11d             | 	res	1
5df50 11e             | _var02
5df50 11e             | 	res	1
5df50 11f             | _var03
5df50 11f             | 	res	1
5df50 120             | _var04
5df50 120             | 	res	1
5df50 121             | _var05
5df50 121             | 	res	1
5df50 122             | _var06
5df50 122             | 	res	1
5df50 123             | _var07
5df50 123             | 	res	1
5df50 124             | _var08
5df50 124             | 	res	1
5df50 125             | _var09
5df50 125             | 	res	1
5df50 126             | _var10
5df50 126             | 	res	1
5df50 127             | _var11
5df50 127             | 	res	1
5df50 128             | _var12
5df50 128             | 	res	1
5df50 129             | _var13
5df50 129             | 	res	1
5df50 12a             | _var14
5df50 12a             | 	res	1
5df50 12b             | _var15
5df50 12b             | 	res	1
5df50 12c             | _var16
5df50 12c             | 	res	1
5df50 12d             | _var17
5df50 12d             | 	res	1
5df50 12e             | _var18
5df50 12e             | 	res	1
5df50 12f             | _var19
5df50 12f             | 	res	1
5df50 130             | _var20
5df50 130             | 	res	1
5df50 131             | _var21
5df50 131             | 	res	1
5df50 132             | _var22
5df50 132             | 	res	1
5df50 133             | _var23
5df50 133             | 	res	1
5df50 134             | _var24
5df50 134             | 	res	1
5df50 135             | _var25
5df50 135             | 	res	1
5df50 136             | _var26
5df50 136             | 	res	1
5df50 137             | _var27
5df50 137             | 	res	1
5df50 138             | _var28
5df50 138             | 	res	1
5df50 139             | _var29
5df50 139             | 	res	1
5df50 13a             | arg01
5df50 13a             | 	res	1
5df50 13b             | arg02
5df50 13b             | 	res	1
5df50 13c             | arg03
5df50 13c             | 	res	1
5df50 13d             | arg04
5df50 13d             | 	res	1
5df50 13e             | arg05
5df50 13e             | 	res	1
5df50 13f             | arg06
5df50 13f             | 	res	1
5df50 140             | arg07
5df50 140             | 	res	1
5df50 141             | arg08
5df50 141             | 	res	1
5df50 142             | arg09
5df50 142             | 	res	1
5df50 143             | arg10
5df50 143             | 	res	1
5df50 144             | arg11
5df50 144             | 	res	1
5df50 145             | arg12
5df50 145             | 	res	1
5df50 146             | local01
5df50 146             | 	res	1
5df50 147             | local02
5df50 147             | 	res	1
5df50 148             | local03
5df50 148             | 	res	1
5df50 149             | local04
5df50 149             | 	res	1
5df50 14a             | local05
5df50 14a             | 	res	1
5df50 14b             | local06
5df50 14b             | 	res	1
5df50 14c             | local07
5df50 14c             | 	res	1
5df50 14d             | local08
5df50 14d             | 	res	1
5df50 14e             | local09
5df50 14e             | 	res	1
5df50 14f             | local10
5df50 14f             | 	res	1
5df50 150             | local11
5df50 150             | 	res	1
5df50 151             | local12
5df50 151             | 	res	1
5df50 152             | local13
5df50 152             | 	res	1
5df50 153             | local14
5df50 153             | 	res	1
5df50 154             | local15
5df50 154             | 	res	1
5df50 155             | local16
5df50 155             | 	res	1
5df50 156             | local17
5df50 156             | 	res	1
5df50 157             | local18
5df50 157             | 	res	1
5df50 158             | local19
5df50 158             | 	res	1
5df50 159             | local20
5df50 159             | 	res	1
5df50 15a             | local21
5df50 15a             | 	res	1
5df50 15b             | local22
5df50 15b             | 	res	1
5df50 15c             | local23
5df50 15c             | 	res	1
5df50 15d             | local24
5df50 15d             | 	res	1
5df50 15e             | local25
5df50 15e             | 	res	1
5df50 15f             | local26
5df50 15f             | 	res	1
5df50 160             | local27
5df50 160             | 	res	1
5df50 161             | local28
5df50 161             | 	res	1
5df50 162             | local29
5df50 162             | 	res	1
5df50 163             | local30
5df50 163             | 	res	1
5df50 164             | local31
5df50 164             | 	res	1
5df50 165             | local32
5df50 165             | 	res	1
5df50 166             | local33
5df50 166             | 	res	1
5df50 167             | local34
5df50 167             | 	res	1
5df50 168             | local35
5df50 168             | 	res	1
5df50 169             | local36
5df50 169             | 	res	1
5df50 16a             | local37
5df50 16a             | 	res	1
5df50 16b             | local38
5df50 16b             | 	res	1
5df50 16c             | local39
5df50 16c             | 	res	1
5df50 16d             | local40
5df50 16d             | 	res	1
5df50 16e             | local41
5df50 16e             | 	res	1
5df50 16f             | local42
5df50 16f             | 	res	1
5df50 170             | muldiva_
5df50 170             | 	res	1
5df50 171             | muldivb_
5df50 171             | 	res	1
5df50 172             | 	fit	480
5df50 172             | 
