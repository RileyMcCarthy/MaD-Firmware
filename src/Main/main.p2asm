con
	_clkfreq = 160000000
	_clkmode = 16779259
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 160000000
	long	0 ' clock mode: will default to $10007fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779256
	waitx	##200000
	mov	pa, ##16779259
	hubset	pa
	wrlong	pa, #24
	wrlong	##160000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_main
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    pop	fcache_tmpb_
    add	fcache_tmpb_, pa
    push	fcache_tmpb_
    sub	fcache_tmpb_, pa
    shr	pa, #2
    altd	pa
    mov	 0-0, ret_instr_
    sub	pa, #1
    setq	pa
    rdlong	$0, fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    ret
fcache_tmpb_
    long 0
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

divide_
       abs     muldivb_,muldivb_     wcz      'abs(y)
       wrc     itmp2_                         'store sign of y
       abs     muldiva_,muldiva_     wc       'abs(x)
       qdiv    muldiva_, muldivb_             'queue divide
 if_c  xor     itmp2_,#1                      'store sign of x
       getqx   muldivb_                       'get quotient
       getqy   muldiva_                       'get remainder
       negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
       testb   itmp2_,#0             wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_     

__heap_ptr
	long	@__heap_base
entryptr__
	long	@entry
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr____default_flush_
	long	@___default_flush
ptr____default_getc_
	long	@___default_getc
ptr____default_putc_
	long	@___default_putc
ptr____default_putc_terminal_
	long	@___default_putc_terminal
ptr___struct___anon_9b5668f900000005_sputc_
	long	@__struct___anon_9b5668f900000005_sputc
ptr___struct___fmtfile_putchar_
	long	@__struct___fmtfile_putchar
ptr___struct__s_vfs_file_t_putchar_
	long	@__struct__s_vfs_file_t_putchar
ptr___system__dat__
	long	@__system__dat_
ptr__button_callback_1829_
	long	@_button_callback_1829
ptr__button_cancel_0893_
	long	@_button_cancel_0893
ptr__button_delete_0891_
	long	@_button_delete_0891
ptr__button_done_0902_
	long	@_button_done_0902
ptr__button_dotdot_0896_
	long	@_button_dotdot_0896
ptr__button_files_0906_
	long	@_button_files_0906
ptr__button_nav_0857_
	long	@_button_nav_0857
ptr__button_navigation_0764_
	long	@_button_navigation_0764
ptr__button_navigation_0981_
	long	@_button_navigation_0981
ptr__button_new_0996_
	long	@_button_new_0996
ptr__button_next_0900_
	long	@_button_next_0900
ptr__button_open_0860_
	long	@_button_open_0860
ptr__button_open_0988_
	long	@_button_open_0988
ptr__button_prev_0898_
	long	@_button_prev_0898
ptr__button_quartet_1020_
	long	@_button_quartet_1020
ptr__button_quartet_parameters_1025_
	long	@_button_quartet_parameters_1025
ptr__button_run_0855_
	long	@_button_run_0855
ptr__button_save_1011_
	long	@_button_save_1011
ptr__button_set_1035_
	long	@_button_set_1035
ptr__button_set_add_
	long	@_button_set_add
ptr__button_set_function_1901_
	long	@_button_set_function_1901
ptr__button_set_remove_
	long	@_button_set_remove
ptr__check_buttons_0722_
	long	@_check_buttons_0722
ptr__check_buttons_1974_
	long	@_check_buttons_1974
ptr__control_cog_0827_
	long	@_control_cog_0827
ptr__dat__
	long	@_dat_
ptr__fatfs_cc___default_flush_
	long	@_fatfs_cc___default_flush
ptr__fatfs_cc___default_getc_
	long	@_fatfs_cc___default_getc
ptr__fatfs_cc___default_putc_
	long	@_fatfs_cc___default_putc
ptr__fatfs_cc___default_putc_terminal_
	long	@_fatfs_cc___default_putc_terminal
ptr__fatfs_cc_dat__
	long	@_fatfs_cc_dat_
ptr__fatfs_cc_v_close_
	long	@_fatfs_cc_v_close
ptr__fatfs_cc_v_closedir_
	long	@_fatfs_cc_v_closedir
ptr__fatfs_cc_v_creat_
	long	@_fatfs_cc_v_creat
ptr__fatfs_cc_v_deinit_
	long	@_fatfs_cc_v_deinit
ptr__fatfs_cc_v_init_
	long	@_fatfs_cc_v_init
ptr__fatfs_cc_v_ioctl_
	long	@_fatfs_cc_v_ioctl
ptr__fatfs_cc_v_lseek_
	long	@_fatfs_cc_v_lseek
ptr__fatfs_cc_v_mkdir_
	long	@_fatfs_cc_v_mkdir
ptr__fatfs_cc_v_open_
	long	@_fatfs_cc_v_open
ptr__fatfs_cc_v_opendir_
	long	@_fatfs_cc_v_opendir
ptr__fatfs_cc_v_read_
	long	@_fatfs_cc_v_read
ptr__fatfs_cc_v_readdir_
	long	@_fatfs_cc_v_readdir
ptr__fatfs_cc_v_remove_
	long	@_fatfs_cc_v_remove
ptr__fatfs_cc_v_rename_
	long	@_fatfs_cc_v_rename
ptr__fatfs_cc_v_rmdir_
	long	@_fatfs_cc_v_rmdir
ptr__fatfs_cc_v_stat_
	long	@_fatfs_cc_v_stat
ptr__fatfs_cc_v_write_
	long	@_fatfs_cc_v_write
ptr__jm_fullduplexserial_spin2_dat__
	long	@_jm_fullduplexserial_spin2_dat_
ptr__key_pressed_1685_
	long	@_key_pressed_1685
ptr__module_animation_switch_page_down_
	long	@_module_animation_switch_page_down
ptr__module_animation_switch_page_up_
	long	@_module_animation_switch_page_up
ptr__module_animation_touch_1620_
	long	@_module_animation_touch_1620
ptr__module_graph_draw_1966_
	long	@_module_graph_draw_1966
ptr__monitor_cog_0748_
	long	@_monitor_cog_0748
ptr__poolAlloc_
	long	@_poolAlloc
ptr__poolInit_
	long	@_poolInit
ptr__sigmoid_
	long	@_sigmoid
ptr__update_condition_1841_
	long	@_update_condition_1841
ptr__update_continuous_1920_
	long	@_update_continuous_1920
ptr__update_force_1940_
	long	@_update_force_1940
ptr__update_header_1905_
	long	@_update_header_1905
ptr__update_home_1930_
	long	@_update_home_1930
ptr__update_incremental_1915_
	long	@_update_incremental_1915
ptr__update_length_1935_
	long	@_update_length_1935
ptr__update_mode_1847_
	long	@_update_mode_1847
ptr__update_off_1910_
	long	@_update_off_1910
ptr__update_positional_1925_
	long	@_update_positional_1925
ptr__update_profileName_0863_
	long	@_update_profileName_0863
ptr__update_profileNumber_0866_
	long	@_update_profileNumber_0866
ptr__update_status_1835_
	long	@_update_status_1835
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	1
result3
	long	2
COG_BSS_START
	fit	480
	orgh
hubentry

_count
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	cmps	arg03, #0 wc
 if_b	jmp	#LR__0001
	sub	arg03, local01
	mov	local03, arg03
	abs	arg04, local03
	cmps	arg04, #4 wc
'     {
'        return -1;
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0002
	cmps	local03, #0 wc
 if_b	and	local03, #3
 if_b	or	local03, #4
 if_ae	and	local03, #3
LR__0001
	mov	arg02, #28
	shl	local03, #28
	or	arg02, local03
	mov	arg03, #0
	mov	arg04, #0
	dirl	local01
	wrpin	arg02, local01
	wxpin	#0, local01
	wypin	#0, local01
	dirh	local01
	mov	arg01, local02
	call	#__system___waitms
	mov	result1, #0
	rdpin	result1, local01
	fltl	local01
	wrpin	#0, local01
'     {
'       pinOffset = (pinOffset & 0x03);
'     }
'   }
' 
'   _pinstart(pin, p_count_rises | (pinOffset << 28), 0, 0);
' 
'   _waitms(duration) ;
' 
'   transitions = _rdpin(pin);
' 
'   _pinclear(pin);
' #line 93 "C:/flexprop/include/libsimpletools/count.c"
'   return transitions;
LR__0002
	mov	ptra, fp
	call	#popregs_
_count_ret
	ret

_opendir
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	local01, ptr__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr__dat__, ##142580
	call	#___getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #40
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #40
 if_ne	cmps	arg01, #0 wz
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror( 16 );
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0004
	mov	arg01, #92
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror( 7 );
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0004
	add	local02, #40
	rdlong	arg02, local02
	sub	local02, #40
	rdlong	local04, arg02
	add	arg02, #4
	rdlong	local05, arg02
	mov	arg01, local03
	mov	arg02, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	arg01, result1 wz
 if_e	jmp	#LR__0003
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror(r);
'         free(dir);
'         return 0;
	mov	result1, #0
	jmp	#LR__0004
LR__0003
	wrlong	local02, local03
'     }
'     dir->vfs = v;
'     return dir;
	mov	result1, local03
LR__0004
	mov	ptra, fp
	call	#popregs_
_opendir_ret
	ret

_closedir
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	add	arg01, #44
	rdlong	arg01, arg01
	rdlong	local02, arg01
	add	arg01, #4
	rdlong	local03, arg01
	mov	arg01, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	local04, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
'     r = v->closedir(dir);
'     free(dir);
'     return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	local04, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	local04, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_closedir_ret
	ret

_readdir
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	arg02, arg01 wz
	add	arg01, #8
	mov	local01, arg01
'         return 0;
	sub	arg01, #8
 if_e	mov	result1, #0
 if_e	jmp	#LR__0006
	add	arg02, #48
	rdlong	arg02, arg02
	rdlong	local02, arg02
	add	arg02, #4
	rdlong	local03, arg02
	mov	arg02, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wz
 if_e	jmp	#LR__0005
	cmps	result1, #1 wc
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	result1, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
'             _seterror(r);
'         }
'         return 0;
	mov	result1, #0
	jmp	#LR__0006
LR__0005
'     }
'     return D;
	mov	result1, local01
LR__0006
	mov	ptra, fp
	call	#popregs_
_readdir_ret
	ret

__openraw
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #12
	wrlong	#4, fp
	sub	fp, #24
	rdlong	arg03, fp
	add	fp, #28
	wrlong	arg03, fp
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##142580
	add	fp, #4
	wrlong	arg01, fp
	sub	fp, #28
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #0
	call	#___getvfsforfile
	add	fp, #24
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #24
 if_e	jmp	#LR__0007
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
	add	result1, #32
	rdlong	result1, result1 wz
 if_ne	jmp	#LR__0008
LR__0007
' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
	add	ptr___system__dat__, #24
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
	jmp	#LR__0023
LR__0008
	add	fp, #32
	rdlong	arg01, fp
	sub	fp, #32
	mov	arg02, #0
	mov	arg03, #48
	mov	local01, arg01
	call	#\builtin_bytefill_
	add	fp, #24
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #32
	rdlong	local04, local03
	mov	arg03, local04
	rdlong	local05, arg03
	add	arg03, #4
	rdlong	local06, arg03
	mov	local07, local06
	add	fp, #8
	rdlong	local08, fp
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #24
	rdlong	local10, fp
	sub	fp, #12
	mov	arg01, local08
	mov	arg02, local09
	mov	arg03, local10
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__0009
	add	fp, #12
	rdlong	local07, fp
	sub	fp, #12
	test	local07, #4 wz
 if_e	jmp	#LR__0009
	add	fp, #24
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #36
	rdlong	local04, local03
	sub	local03, #36
	mov	local11, local04
	rdlong	local05, local11
	add	local11, #4
	rdlong	local06, local11
	mov	local07, local06
	add	fp, #8
	rdlong	local08, fp
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #20
	rdlong	local10, fp
	sub	fp, #16
	mov	arg01, local08
	mov	arg02, local09
	mov	arg03, local10
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	mov	local12, result1
	add	fp, #20
	wrlong	local12, fp
	sub	fp, #20
LR__0009
	add	fp, #20
	rdlong	local12, fp wz
	sub	fp, #20
 if_ne	jmp	#LR__0022
	add	fp, #12
	rdlong	local12, fp
	and	local12, #3 wz
	add	fp, #28
	wrlong	local12, fp
	sub	fp, #40
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #2
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #40
	rdlong	local12, fp
	sub	fp, #40
	cmp	local12, #1 wz
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #1
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #12
	rdlong	local12, fp
	sub	fp, #12
	test	local12, #32 wz
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #192
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #4
	rdlong	local07, fp
	add	local12, #8
	wrlong	local07, local12
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #16
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0010
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #4
	rdlong	local02, local07
	add	local12, #16
	wrlong	local02, local12
LR__0010
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #20
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0011
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #8
	rdlong	local02, local07
	add	local12, #20
	wrlong	local02, local12
LR__0011
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #32
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0012
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	rdlong	local02, local07
	add	local12, #32
	wrlong	local02, local12
LR__0012
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #36
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0013
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #16
	rdlong	local02, local07
	add	local12, #36
	wrlong	local02, local12
LR__0013
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #44
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0014
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #12
	rdlong	local02, local07
	add	local12, #44
	wrlong	local02, local12
LR__0014
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #24
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0017
	add	fp, #32
	rdlong	arg01, fp
	mov	local03, arg01
	add	local03, #36
	rdlong	local12, local03
	rdlong	local05, local12
	add	local12, #4
	rdlong	local07, local12
	add	fp, #16
	mov	arg03, fp
	sub	fp, #48
	mov	arg02, #256
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	add	fp, #44
	wrlong	result1, fp
	sub	fp, #44
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0015
	add	fp, #48
	rdlong	local07, fp
	sub	fp, #48
	test	local07, #2 wz
 if_e	jmp	#LR__0015
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr____default_putc_terminal_
	call	#__system___make_methodptr
	mov	local07, result1
	add	local12, #24
	wrlong	local07, local12
	jmp	#LR__0016
LR__0015
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr____default_putc_
	call	#__system___make_methodptr
	add	local12, #24
	wrlong	result1, local12
LR__0016
LR__0017
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #28
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0018
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr____default_getc_
	call	#__system___make_methodptr
	add	local12, #28
	wrlong	result1, local12
LR__0018
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #40
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__0021
	add	fp, #24
	rdlong	local12, fp
	sub	fp, #24
	add	local12, #20
	rdlong	local07, local12 wz
 if_e	jmp	#LR__0019
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #20
	rdlong	local02, local07
	add	local12, #40
	wrlong	local02, local12
	jmp	#LR__0020
LR__0019
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr____default_flush_
	call	#__system___make_methodptr
	add	local12, #40
	wrlong	result1, local12
LR__0020
LR__0021
LR__0022
	add	fp, #20
	rdlong	local12, fp wz
 if_e	mov	arg01, #0
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	arg01, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
'     return r;
	rdlong	result1, fp
	sub	fp, #20
LR__0023
	mov	ptra, fp
	call	#popregs_
__openraw_ret
	ret

__closeraw
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	result1, local01 wz
	sub	local01, #8
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0026
	add	local01, #40
	rdlong	result1, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__0024
	add	local01, #40
	rdlong	arg01, local01
	sub	local01, #40
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
LR__0024
	add	local01, #32
	rdlong	local05, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__0025
	add	local01, #32
	rdlong	local05, local01
	sub	local01, #32
	rdlong	local03, local05
	add	local05, #4
	rdlong	local04, local05
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local02, result1
LR__0025
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
'     return r;
	mov	result1, local02
LR__0026
	mov	ptra, fp
	call	#popregs_
__closeraw_ret
	ret

__vfs_open_sdcardx
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	arg01, #28
	call	#__system___gc_alloc_managed
	mov	local05, result1
	mov	arg01, ##560
	call	#__system___gc_alloc_managed
	mov	local06, result1
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, local03
	mov	arg05, local04
	mov	local04, objptr
	mov	objptr, local05
	call	#_fatfs_cc_disk_setpins
	mov	objptr, local04
	mov	local04, result1 wz
 if_ne	jmp	#LR__0027
	mov	arg02, ##@LR__1811
	mov	arg01, local06
	mov	arg03, #0
	mov	local03, objptr
	mov	objptr, local05
	call	#_fatfs_cc_f_mount
	mov	objptr, local03
	mov	local04, result1
LR__0027
	cmp	local04, #0 wz
 if_e	jmp	#LR__0028
	neg	arg01, local04 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
	mov	result1, #0
	jmp	#LR__0029
LR__0028
	mov	arg01, local05
	mov	local01, objptr
	mov	objptr, local05
	call	#_fatfs_cc_get_vfs
	mov	objptr, local01
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
LR__0029
	mov	ptra, fp
	call	#popregs_
__vfs_open_sdcardx_ret
	ret

___default_getc
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	test	local03, #2 wz
 if_ne	mov	arg01, local01
 if_ne	call	#___default_flush
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local03, local02 wz
 if_ne	jmp	#LR__0030
	mov	arg01, local01
	call	#___default_filbuf
	mov	local03, result1
LR__0030
	cmps	local03, #1 wc
'         return -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__0031
	sub	local03, #1
	wrlong	local03, local02
	add	local02, #4
	rdlong	local03, local02
	rdbyte	result1, local03
	add	local03, #1
	wrlong	local03, local02
'     }
'     b->cnt = i-1;
'     ptr = b->ptr;
'     i = *ptr++;
'     b->ptr = ptr;
'     return i;
LR__0031
	mov	ptra, fp
	call	#popregs_
___default_getc_ret
	ret

___default_putc
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	result1, local03
	test	result1, #1 wz
 if_ne	mov	arg01, local02
 if_ne	call	#___default_flush
	rdlong	arg01, local03
	or	arg01, #2
	wrlong	arg01, local03
	sub	local03, #8
	rdlong	arg01, local03
	mov	local04, arg01
	add	local03, #12
	add	local04, local03
	wrbyte	local01, local04
	getbyte	local01, local01, #0
	add	arg01, #1
	sub	local03, #12
	wrlong	arg01, local03
	cmp	arg01, ##1024 wz
 if_ne	jmp	#LR__0032
	mov	arg01, local02
	call	#___default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0032
'             c = -1;
'         }
'     }
'     return c;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
___default_putc_ret
	ret

___default_putc_terminal
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	result1, local03
	test	result1, #1 wz
 if_ne	mov	arg01, local02
 if_ne	call	#___default_flush
	rdlong	arg01, local03
	or	arg01, #2
	wrlong	arg01, local03
	sub	local03, #8
	rdlong	arg01, local03
	mov	local04, arg01
	add	local03, #12
	add	local04, local03
	wrbyte	local01, local04
	getbyte	local01, local01, #0
	sub	local03, #12
	add	arg01, #1
	wrlong	arg01, local03
	cmp	local01, #10 wz
 if_ne	cmp	arg01, ##1024 wz
 if_ne	jmp	#LR__0033
	mov	arg01, local02
	call	#___default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0033
'             c = -1;
'         }
'     }
'     return c;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
___default_putc_terminal_ret
	ret

___default_flush
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__0036
	cmps	local03, #1 wc
 if_b	jmp	#LR__0038
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__0035
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__0034
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local04, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local06, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local06
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__0034
LR__0035
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local07, local04
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	mov	arg01, local01
	mov	arg03, local03
	mov	local06, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local06
	jmp	#LR__0038
LR__0036
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__0037
	cmp	local03, #0 wz
 if_e	jmp	#LR__0037
	add	local01, #44
	rdlong	local08, local01
	sub	local01, #44
	mov	local04, local08
	rdlong	local05, local04
	add	local04, #4
	rdlong	local09, local04
	mov	local07, local09
	mov	local10, local01
	neg	local11, local03
	mov	local12, #1
	mov	arg01, local10
	mov	arg02, local11
	mov	arg03, #1
	mov	local06, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local06
	mov	local04, result1
	mov	local13, local04
	cmps	local13, #0 wc
 if_ae	mov	local13, local03
LR__0037
LR__0038
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
'     }
'     b->cnt = 0;
'     b->ptr = 0;
'     b->flags = 0;
'     return 0;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
___default_flush_ret
	ret

_open
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	add	ptr__dat__, ##87408
	mov	local04, ptr__dat__
' 
'     for (fd = 0; fd <  10 ; fd++) {
	mov	local05, #0
	sub	ptr__dat__, ##87408
	loc	pa,	#(@LR__0040-@LR__0039)
	call	#FCACHE_LOAD_
LR__0039
	cmps	local05, #10 wc
 if_ae	jmp	#LR__0041
	mov	result1, local05
	shl	result1, #1
	add	result1, local05
	shl	result1, #4
	add	result1, local04
	add	result1, #8
	rdlong	result1, result1 wz
 if_ne	add	local05, #1
 if_ne	jmp	#LR__0039
LR__0040
LR__0041
	cmp	local05, #10 wz
'         return _seterror( 11 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#11, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0042
	mov	arg01, local05
	shl	arg01, #1
	add	arg01, local05
	shl	arg01, #4
	add	arg01, local04
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, local03
	call	#__openraw
	cmps	result1, #0 wz
 if_e	mov	result1, local05
'         r = fd;
'     }
'     return r;
LR__0042
	mov	ptra, fp
	call	#popregs_
_open_ret
	ret

_write
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0043
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__dat__, ##87408
	add	arg01, ptr__dat__
'     }
'     f = &__filetab[fd];
'     return _vfswrite(f, vbuf, count);
	sub	ptr__dat__, ##87408
	call	#__vfswrite
LR__0043
	mov	ptra, fp
	call	#popregs_
_write_ret
	ret

_read
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0044
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__dat__, ##87408
	add	arg01, ptr__dat__
'     }
'     f = &__filetab[fd];
'     return _vfsread(f, vbuf, count);
	sub	ptr__dat__, ##87408
	call	#__vfsread
LR__0044
	mov	ptra, fp
	call	#popregs_
_read_ret
	ret

_close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0045
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__dat__, ##87408
	add	arg01, ptr__dat__
'     }
'     f = &__filetab[fd];
'     return _closeraw(f);
	sub	ptr__dat__, ##87408
	call	#__closeraw
LR__0045
	mov	ptra, fp
	call	#popregs_
_close_ret
	ret

_lseek
	mov	COUNT_, #6
	call	#pushregs_
	cmp	arg01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0047
	mov	local01, arg01
	shl	local01, #1
	add	local01, arg01
	shl	local01, #4
	add	ptr__dat__, ##87408
	add	local01, ptr__dat__
	add	local01, #44
	rdlong	arg01, local01 wz
	sub	local01, #44
	sub	ptr__dat__, ##87408
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0047
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	test	local02, #64 wz
 if_ne	add	local01, #8
 if_ne	rdlong	local02, local01
 if_ne	or	local02, #128
 if_ne	wrlong	local02, local01
 if_ne	sub	local01, #8
	add	local01, #44
	rdlong	local02, local01
	sub	local01, #44
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmps	local06, #0 wc
 if_ae	jmp	#LR__0046
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0047
LR__0046
'     }
'     return r;
	mov	result1, local06
LR__0047
	mov	ptra, fp
	call	#popregs_
_lseek_ret
	ret

_ioctl
	mov	COUNT_, #4
	call	#pushregs_
	call	#___getftab
	mov	local01, result1 wz
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0049
	add	local01, #36
	rdlong	arg01, local01
	sub	local01, #36
	rdlong	local02, arg01
	add	arg01, #4
	rdlong	local03, arg01
	mov	arg01, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	arg01, result1 wz
 if_e	jmp	#LR__0048
'         return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	arg01, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0049
LR__0048
'     }
'     return 0;
	mov	result1, #0
LR__0049
	mov	ptra, fp
	call	#popregs_
_ioctl_ret
	ret

_access
	mov	COUNT_, #6
	call	#pushregs_
	add	ptra, #60
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_stat
	cmps	result1, #0 wc
' 		return -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__0053
	add	fp, #8
	rdlong	local01, fp wz
	sub	fp, #8
' 		return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0053
	add	fp, #28
	rdword	local01, fp
	sub	fp, #28
	zerox	local01, #15 wz
 if_ne	jmp	#LR__0050
	add	fp, #20
	rdlong	local01, fp
	shr	local01, #6
	sub	fp, #12
	rdlong	arg02, fp
	and	local01, arg02
	sub	fp, #8
	cmp	local01, arg02 wz
' 			return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0053
' 			goto accdn;
	jmp	#LR__0052
LR__0050
	add	fp, #30
	rdword	local01, fp
	sub	fp, #30
	zerox	local01, #15 wz
 if_ne	jmp	#LR__0051
	add	fp, #20
	rdlong	local01, fp
	shr	local01, #3
	sub	fp, #12
	rdlong	arg02, fp
	and	local01, arg02
	sub	fp, #8
	cmp	local01, arg02 wz
' 			return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0053
' 			goto accdn;
	jmp	#LR__0052
LR__0051
	add	fp, #20
	rdlong	local02, fp
	mov	local01, local02
	sub	fp, #12
	rdlong	local03, fp
	mov	local04, local03
	and	local01, local04
	mov	local05, local03
	sub	fp, #8
	mov	local06, local05
	cmp	local01, local06 wz
' 		return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0053
LR__0052
	add	ptr___system__dat__, #24
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, #24
	wrlong	#6, result1
' accdn:
' 	(*(_geterrnoptr()))  =  6 ; return -1;
	neg	result1, #1
LR__0053
	mov	ptra, fp
	call	#popregs_
_access_ret
	ret

_isatty
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #12
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #8
	mov	arg02, #256
	call	#_ioctl
	cmp	result1, #0 wz
'         return 1;
 if_e	mov	result1, #1
'     }
'     return 0;
 if_ne	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_isatty_ret
	ret

_chdir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #8
	call	#_stat
	add	fp, #60
	wrlong	result1, fp
	sub	fp, #60
	cmp	result1, #0 wz
' #line 294 "C:/flexprop/include/libc/unix/_mount.c"
'         return r;
 if_ne	add	fp, #60
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #60
 if_ne	jmp	#LR__0056
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	and	arg01, ##61440
	cmp	arg01, ##4096 wz
' #line 300 "C:/flexprop/include/libc/unix/_mount.c"
'         return _seterror( 13 );
 if_ne	add	ptr___system__dat__, #24
 if_ne	wrlong	#13, ptr___system__dat__
 if_ne	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_ne	jmp	#LR__0056
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	rdbyte	arg03, arg03
	cmp	arg03, #47 wz
 if_ne	jmp	#LR__0054
	add	ptr__dat__, ##142324
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##142324
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg03, #256
	call	#_strncpy
	jmp	#LR__0055
LR__0054
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	arg01, ptr__dat__
	add	fp, #56
	wrlong	arg01, fp
	sub	fp, #56
	sub	ptr__dat__, #256
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##142324
	mov	arg03, #256
	call	#_strncpy
	add	fp, #56
	rdlong	arg01, fp
	sub	fp, #52
	rdlong	arg02, fp
	sub	fp, #4
	add	ptr__dat__, ##142324
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##142324
	call	#___getvfsforfile
LR__0055
'         tmp = __getfilebuffer();
'         strncpy(tmp, curdir,  (256) );
'         __getvfsforfile(tmp, path, curdir);
'     }
'     return 0;
	mov	result1, #0
LR__0056
	mov	ptra, fp
	call	#popregs_
_chdir_ret
	ret

_rmdir
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	local01, ptr__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr__dat__, ##142580
	call	#___getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #60
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #60
 if_ne	cmps	arg01, #0 wz
' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0058
	add	local02, #60
	rdlong	arg01, local02
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1 wz
 if_e	jmp	#LR__0057
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0058
LR__0057
'     }
'     return r;
	mov	result1, local06
LR__0058
	mov	ptra, fp
	call	#popregs_
_rmdir_ret
	ret

_mkdir
	mov	COUNT_, #7
	call	#pushregs_
	mov	arg03, arg01
	mov	local01, arg02
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	local02, ptr__dat__
	mov	arg01, local02
	mov	arg02, arg03
	mov	arg03, #0
	sub	ptr__dat__, ##142580
	call	#___getvfsforfile
	mov	local03, result1 wz
 if_ne	add	local03, #32
 if_ne	rdlong	arg01, local03
 if_ne	sub	local03, #32
 if_ne	cmps	arg01, #0 wz
' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0060
	add	local03, #56
	rdlong	arg02, local03
	rdlong	local04, arg02
	add	arg02, #4
	rdlong	local05, arg02
	mov	arg01, local02
	mov	arg02, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local07, result1 wz
 if_e	jmp	#LR__0059
'         return _seterror(-r);
	neg	arg01, local07 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0060
LR__0059
'     }
'     return r;
	mov	result1, local07
LR__0060
	mov	ptra, fp
	call	#popregs_
_mkdir_ret
	ret

___getftab
	cmp	arg01, #10 wc
'         return 0;
 if_ae	mov	result1, #0
 if_ae	jmp	#___getftab_ret
'     }
'     return &__filetab[i];
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr__dat__, ##87408
	add	result1, ptr__dat__
	sub	ptr__dat__, ##87408
___getftab_ret
	ret

_fgetc
	mov	COUNT_, #3
	call	#pushregs_
'     return  (((f)->getcf)( (f) )) ;
	add	arg01, #28
	rdlong	local01, arg01
	sub	arg01, #28
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	ptra, fp
	call	#popregs_
_fgetc_ret
	ret

_sprintf
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #32
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	rdlong	result1, fp
	add	result1, ##16777215
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #12
	rdlong	result1, fp
	wrlong	result1, fp
	add	fp, #8
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, ptr___struct___anon_9b5668f900000005_sputc_
	call	#__system___make_methodptr
	mov	arg01, result1
	add	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #12
	call	#__dofmt
	add	fp, #16
	wrlong	result1, fp
	add	fp, #4
	mov	arg01, #0
	mov	arg03, objptr
	mov	objptr, fp
	sub	fp, #20
	call	#__struct___anon_9b5668f900000005_sputc
	mov	objptr, arg03
'     r = _dofmt( &S.sputc, fmt, &args);
'     ;
'     S.sputc(0);
'     return r;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	mov	ptra, fp
	call	#popregs_
_sprintf_ret
	ret

_printf
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #8
	mov	arg01, #1
	call	#___getftab
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #8
	rdlong	result1, fp
	wrlong	result1, fp
	add	fp, #8
	mov	arg01, fp
	sub	fp, #16
	mov	arg02, ptr___struct___fmtfile_putchar_
	call	#__system___make_methodptr
	mov	arg01, result1
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #8
	call	#__dofmt
	add	fp, #12
	wrlong	result1, fp
'     r = _dofmt( &ff.putchar, fmt, &args);
'     ;
'     return r;
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_printf_ret
	ret

_fprintf
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #8
	rdlong	result1, fp
	wrlong	result1, fp
	add	fp, #8
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, ptr___struct___fmtfile_putchar_
	call	#__system___make_methodptr
	mov	arg01, result1
	add	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #12
	call	#__dofmt
	add	fp, #16
	wrlong	result1, fp
'     r = _dofmt( &ff.putchar, fmt, &args);
'     ;
'     return r;
	sub	fp, #16
	mov	ptra, fp
	call	#popregs_
_fprintf_ret
	ret

_fopen
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	mov	local04, #0
	mov	local05, #0
	mov	local06, #0
	mov	local07, #0
	mov	local08, #0
'     vfs_file_t *ftab;
' 
'     while ((c = *mode++) != 0) {
LR__0061
	mov	local09, local02
	mov	local10, local02
	add	local10, #1
	mov	local02, local10
	rdbyte	local11, local09
	mov	local12, local11 wz
 if_e	jmp	#LR__0068
'         switch (c) {
	mov	local13, local12
	cmp	local13, #114 wz
 if_e	jmp	#LR__0062
	cmp	local13, #119 wz
 if_e	jmp	#LR__0063
	cmp	local13, #97 wz
 if_e	jmp	#LR__0064
	cmp	local13, #98 wz
 if_e	jmp	#LR__0065
	cmp	local13, #43 wz
 if_e	jmp	#LR__0066
	jmp	#LR__0067
LR__0062
	mov	local03, #1
'             want_read = 1;
'             break;
	jmp	#LR__0061
LR__0063
	mov	local07, #1
	mov	local08, #1
	mov	local04, #1
'             want_create = 1;
'             want_trunc = 1;
'             want_write = 1;
'             break;
	jmp	#LR__0061
LR__0064
	mov	local04, #1
	mov	local07, #1
	mov	local05, #1
'             want_write = 1;
'             want_create = 1;
'             want_append = 1;
'             break;
	jmp	#LR__0061
LR__0065
	mov	local06, #1
'             want_binary = 1;
'             break;
	jmp	#LR__0061
LR__0066
	cmp	local03, #0 wz
 if_ne	mov	local04, #1
 if_ne	jmp	#LR__0061
	cmp	local04, #0 wz
 if_ne	mov	local03, #1
'                 want_read = 1;
'                 break;
 if_ne	jmp	#LR__0061
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
'                 _seterror( 10 );
'                 return 0;
	mov	result1, #0
	jmp	#LR__0071
'             }
'             break;
LR__0067
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
'             _seterror( 10 );
'             return 0;
	mov	result1, #0
	jmp	#LR__0071
LR__0068
	cmp	local03, #0 wz
 if_e	jmp	#LR__0069
	cmp	local04, #0 wz
 if_ne	mov	local14, #2
 if_ne	jmp	#LR__0070
	mov	local14, #0
	jmp	#LR__0070
LR__0069
	cmp	local04, #0 wz
 if_ne	mov	local14, #1
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#10, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
'         _seterror( 10 );
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0071
LR__0070
	cmp	local05, #0 wz
 if_ne	or	local14, #32
	cmp	local07, #0 wz
 if_ne	or	local14, #4
	cmp	local08, #0 wz
 if_ne	or	local14, #8
	mov	arg02, local14
	mov	arg01, local01
	mov	arg03, #438
	call	#_open
	mov	local15, result1
	cmps	local15, #0 wc
' #line 82 "C:/flexprop/include/libc/stdio/fopen.c"
'         return 0;
 if_b	mov	result1, #0
 if_b	jmp	#LR__0071
	mov	arg01, local15
	call	#___getftab
	mov	local16, result1
	mov	arg01, local15
	call	#_isatty
	cmp	result1, #0 wz
 if_ne	add	local16, #8
 if_ne	rdlong	local11, local16
 if_ne	or	local11, #256
 if_ne	wrlong	local11, local16
 if_ne	sub	local16, #8
'         ftab->state |=  (0x100) ;
'     }
'     return ftab;
	mov	result1, local16
LR__0071
	mov	ptra, fp
	call	#popregs_
_fopen_ret
	ret

_fflush
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, #0
	add	arg01, #40
	rdlong	result1, arg01 wz
	sub	arg01, #40
 if_e	jmp	#LR__0072
	add	arg01, #40
	rdlong	local01, arg01
	sub	arg01, #40
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	local01, result1
LR__0072
'         r = (*f->flush)(f);
'     }
'     return r;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_fflush_ret
	ret

_fread
	mov	COUNT_, #5
	call	#pushregs_
	qmul	arg02, arg03
	mov	local01, arg01
	mov	local02, arg04
	mov	local03, #0
	add	local02, #8
	rdlong	result1, local02
	sub	local02, #8
	test	result1, #256 wz
	getqx	local04
 if_e	jmp	#LR__0075
	mov	local05, local01
'         while (size > 0) {
LR__0073
	cmp	local04, #1 wc
 if_b	jmp	#LR__0074
	mov	arg01, local02
	call	#_fgetc
	cmps	result1, #0 wc
 if_ae	wrbyte	result1, local05
 if_ae	add	local03, #1
 if_ae	add	local05, #1
 if_ae	jmp	#LR__0073
LR__0074
'             *dst++ = c;
'             r++;
'         }
'         return r;
	mov	result1, local03
	jmp	#LR__0076
LR__0075
	mov	arg01, local02
	call	#_fflush
	mov	arg02, local01
	mov	arg03, local04
	mov	arg01, local02
	call	#__vfsread
'     }
'     fflush(f);
'     r = _vfsread(f, ptr, size);
' #line 36 "C:/flexprop/include/libc/stdio/fwrite.c"
'     return r;
LR__0076
	mov	ptra, fp
	call	#popregs_
_fread_ret
	ret

_fseek
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
' {
'     return (f -  __getftab(0) );
	mov	local04, local01
	mov	arg01, #0
	call	#___getftab
	sub	local04, result1
	qdiv	local04, #48
	mov	arg01, local01
	getqx	local04
	call	#_fflush
	mov	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	call	#_lseek
	cmp	result1, ##-1 wz
 if_ne	mov	result1, #0
'         r = 0;
'     }
'     return r;
	mov	ptra, fp
	call	#popregs_
_fseek_ret
	ret

_ftell
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
' {
'     return (f -  __getftab(0) );
	mov	local02, arg01
	mov	arg01, #0
	call	#___getftab
	sub	local02, result1
	qdiv	local02, #48
	mov	arg01, local01
	getqx	local02
	call	#_fflush
	mov	arg01, local02
	mov	arg02, #0
	mov	arg03, #1
	call	#_lseek
' 
'     fflush(f);
'     r = lseek(fd, 0,  1 );
'     return r;
	mov	ptra, fp
	call	#popregs_
_ftell_ret
	ret

_atol
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	mov	local03, #0
'   while (isspace(*str)) str++;
	add	ptr__dat__, ##175280
	loc	pa,	#(@LR__0078-@LR__0077)
	call	#FCACHE_LOAD_
LR__0077
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x10 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	test	result1, #16 wz
 if_ne	add	local01, #1
 if_ne	jmp	#LR__0077
LR__0078
	sub	ptr__dat__, ##175280
	rdbyte	local04, local01
	cmp	local04, #45 wz
 if_e	mov	local03, #1
 if_e	add	local01, #1
	loc	pa,	#(@LR__0080-@LR__0079)
	call	#FCACHE_LOAD_
'     {
'       neg=1;
'       str++;
'     }
'   while (isdigit(*str))
LR__0079
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	test	result1, #2 wz
 if_e	jmp	#LR__0081
	mov	local04, local02
	shl	local04, #2
	add	local04, local02
	shl	local04, #1
	rdbyte	local02, local01
	sub	local02, #48
	add	local02, local04
	add	local01, #1
	jmp	#LR__0079
LR__0080
LR__0081
	cmp	local03, #0 wz
 if_ne	neg	local02, local02
'     num = -num;
'   return num;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_atol_ret
	ret

_mcp23017_begin
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, arg04
	mov	arg02, arg03
	mov	arg03, #100
	mov	arg04, #1
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_setup
	mov	objptr, local03
	getbyte	local03, local02, #0
	mov	result1, #32
	or	result1, local03
	shl	result1, #1
	and	result1, #254
	add	local01, #12
	wrbyte	result1, local01
	getbyte	local02, local02, #0
	mov	local03, #32
	or	local03, local02
	shl	local03, #1
	or	local03, #1
	add	local01, #1
	wrbyte	local03, local01
	sub	local01, #13
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #15
	call	#_write_register_1531
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #255
	call	#_write_register_1531
	getbyte	local03, result1, #0
	getbyte	local02, result1, #0
	and	local03, local02
	mov	arg01, local01
	mov	arg02, #0
	call	#_read_register_1529
	getbyte	local02, result1, #0
	cmp	local02, #15 wz
 if_ne	jmp	#LR__0082
	mov	arg01, local01
	mov	arg02, #1
	call	#_read_register_1529
	getbyte	result1, result1, #0
	cmp	result1, #255 wz
 if_e	jmp	#LR__0083
LR__0082
	mov	arg01, ##@LR__1812
	getbyte	local03, local03, #0
	mov	arg02, ptra
	wrlong	local03, ptra++
	call	#_printf
	sub	ptra, #4
'     {
'         printf("Error setting up MCP23017: ACK:%d\n",ack);
'         return  (0) ;
	mov	result1, #0
	jmp	#LR__0084
LR__0083
'     }
'     return  (1) ;
	mov	result1, #1
LR__0084
	mov	ptra, fp
	call	#popregs_
_mcp23017_begin_ret
	ret

_mcp_update_register
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #18
	call	#_read_register_1529
	add	local01, #14
	wrbyte	result1, local01
	sub	local01, #14
	mov	arg01, local01
	mov	arg02, #19
	call	#_read_register_1529
	add	local01, #15
	wrbyte	result1, local01
	mov	ptra, fp
	call	#popregs_
_mcp_update_register_ret
	ret

_mcp_set_pin
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg04
	mov	arg02, arg03
	zerox	arg02, #7 wz
 if_e	mov	local04, #18
 if_ne	mov	local04, #19
	mov	arg01, local01
	mov	arg02, local04
	call	#_read_register_1529
	getbyte	arg03, result1, #0
	cmp	local03, #0 wz
 if_ne	getword	local02, local02, #0
 if_ne	decod	local03, local02
 if_ne	or	arg03, local03
 if_e	getword	local02, local02, #0
 if_e	decod	local03, local02
 if_e	andn	arg03, local03
	mov	arg01, local01
	mov	arg02, local04
	call	#_write_register_1531
	mov	ptra, fp
	call	#popregs_
_mcp_set_pin_ret
	ret

_mcp_get_pin
'     (state ? ((value) |= (1UL << (pin))) : ((value) &= ~(1UL << (pin))) ) ;
'     write_register(mcp23017, reg, value);
' }
' uint8_t mcp_get_pin(MCP23017 *mcp23017, uint16_t pin, uint8_t reg)
' {
'     return  (((reg == 0x00 ? mcp23017->dira : mcp23017->dirb) >> (pin)) & 0x01) ;
	zerox	arg03, #7 wz
 if_e	add	arg01, #14
 if_e	rdbyte	_var01, arg01
 if_ne	add	arg01, #15
 if_ne	rdbyte	_var01, arg01
	getbyte	result1, _var01, #0
	getword	arg02, arg02, #0
	shr	result1, arg02
	and	result1, #1
_mcp_get_pin_ret
	ret

_dyn4_begin
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #36
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #12
	rdlong	result1, fp
	wrlong	arg04, result1
	rdlong	local01, fp
	add	local01, #4
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	mov	arg03, #2
	mov	arg04, ##38400
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_start
	mov	objptr, local02
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #16
	mov	arg02, fp
	sub	fp, #20
	call	#_dyn4_get_status
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	cmp	result1, #0 wz
'     {
' 
'         return ret;
 if_ne	add	fp, #32
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #32
'     }
' 
' 
' 
' 
'     return ret;
 if_e	add	fp, #32
 if_e	rdlong	result1, fp
 if_e	sub	fp, #32
	mov	ptra, fp
	call	#popregs_
_dyn4_begin_ret
	ret

_dyn4_send_command
	mov	COUNT_, #9
	call	#pushregs_
	add	ptra, #44
	mov	local01, arg01
	mov	local02, arg02
	cmps	arg03, ##1048576 wc
 if_ae	jmp	#LR__0085
	cmps	arg03, ##-1048576 wc
 if_ae	jmp	#LR__0086
LR__0085
	mov	local03, #4
	jmp	#LR__0093
LR__0086
	cmps	arg03, ##8192 wc
 if_ae	jmp	#LR__0087
	cmps	arg03, ##-8192 wc
 if_ae	jmp	#LR__0088
LR__0087
	mov	local03, #3
	jmp	#LR__0092
LR__0088
	cmps	arg03, #64 wc
 if_ae	jmp	#LR__0089
	cmps	arg03, ##-64 wc
 if_ae	jmp	#LR__0090
LR__0089
	mov	local03, #2
	jmp	#LR__0091
LR__0090
	mov	local03, #1
LR__0091
LR__0092
LR__0093
	mov	arg02, #3
	add	arg02, local03
	mov	arg01, arg02
	sub	arg01, #1
	add	fp, #20
	rdlong	local04, local01
	add	arg01, fp
	wrbyte	local04, arg01
	mov	local05, arg02
	sub	local05, #2
	add	local05, fp
	mov	arg01, local03
	sub	arg01, #1
	shl	arg01, #5
	mov	local04, #128
	add	local04, arg01
	getbyte	local02, local02, #0
	add	local04, local02
	wrbyte	local04, local05
	mov	local02, arg02
	sub	local02, #1
	add	local02, fp
	rdbyte	local06, local02
	mov	local07, arg02
	sub	local07, #2
	add	local07, fp
	rdbyte	local08, local07
	add	local06, local08
	mov	local09, #0
'     for (int i = 0; i < n; i++)
	sub	fp, #20
	loc	pa,	#(@LR__0095-@LR__0094)
	call	#FCACHE_LOAD_
LR__0094
	cmps	local09, local03 wc
 if_ae	jmp	#LR__0096
	mov	local05, arg02
	sub	local05, #3
	sub	local05, local09
	add	fp, #20
	add	local05, fp
	mov	local08, arg03
	mov	local04, local03
	sub	local04, local09
	sub	local04, #1
	mov	local07, local04
	shl	local07, #3
	sub	local07, local04
	sar	local08, local07
	and	local08, #127
	mov	local04, #128
	add	local04, local08
	wrbyte	local04, local05
	mov	local04, arg02
	sub	local04, #3
	sub	local04, local09
	add	local04, fp
	rdbyte	local05, local04
	add	local06, local05
	add	local09, #1
	sub	fp, #20
	jmp	#LR__0094
LR__0095
LR__0096
	abs	local05, local06 wc
	and	local05, #127
	negc	local05, local05
	mov	local09, #128
	add	local09, local05
	add	fp, #20
	wrbyte	local09, fp
	sub	fp, #20
	sub	arg02, #1
'     {
'         bytes[package_size - 3 - i] = 0x80 + ((data >> ((n - i - 1) * 7)) & 0x7F);
' 
'         totalData += bytes[package_size - 3 - i];
'     }
'     bytes[0] = 0x80 + (totalData % 128);
' 
'     for (int i = package_size - 1; i >= 0; i--)
LR__0097
	cmps	arg02, #0 wc
 if_b	jmp	#LR__0098
	add	local01, #4
	mov	local04, arg02
	add	fp, #20
	add	local04, fp
	rdbyte	arg01, local04
	mov	local02, objptr
	mov	objptr, local01
	sub	fp, #20
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local02
	sub	arg02, #1
	sub	local01, #4
	jmp	#LR__0097
LR__0098
	mov	ptra, fp
	call	#popregs_
_dyn4_send_command_ret
	ret

_dyn4_read_command
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
' {
'     uint8_t byte;
' 
'     for (int i = 0; i < 10; i++)
LR__0099
	cmps	local02, #10 wc
 if_ae	jmp	#LR__0100
	add	local01, #4
	mov	arg01, #100
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local03
	mov	local04, result1
	getbyte	local03, local04, #0
	sub	local01, #4
	rdlong	arg01, local01
	cmp	local03, arg01 wz
'         {
'             break;
 if_ne	neg	local04, #1
 if_ne	add	local02, #1
 if_ne	jmp	#LR__0099
LR__0100
	getbyte	local04, local04, #0
	cmp	local04, ##-1 wz
'     {
'         return -1;
 if_e	neg	result1, #1
 if_e	jmp	#LR__0103
	add	local01, #4
	mov	arg01, #200
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local03
	sub	local01, #4
	getbyte	local05, result1, #0
	shr	local05, #5
	and	local05, #3
	mov	local06, #0
'     for (int i = n - 1; i >= 0; i--)
LR__0101
	cmps	local05, #0 wc
 if_b	jmp	#LR__0102
	add	local01, #4
	mov	arg01, #200
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local03
	getbyte	result1, result1, #0
	and	result1, #127
	mov	local04, local05
	shl	local04, #3
	sub	local04, local05
	shl	result1, local04
	add	local06, result1
	sub	local05, #1
	sub	local01, #4
	jmp	#LR__0101
LR__0102
'     {
'         data += ((uint8_t)dyn4->serial.rxtime(200) & 0x7F) << (7 * i);
'     }
'     return data;
	mov	result1, local06
LR__0103
	mov	ptra, fp
	call	#popregs_
_dyn4_read_command_ret
	ret

_dyn4_get_status
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, #9
	mov	arg03, #1
	call	#_dyn4_send_command
	mov	arg01, local01
	mov	arg02, #25
	call	#_dyn4_read_command
	mov	local01, result1
	getbyte	arg03, local01, #0
	cmp	arg03, ##-1 wz
'     {
'         return DYN4_NOT_RESPONDING;
 if_e	mov	result1, #101
 if_e	jmp	#LR__0104
	getbyte	result1, local01, #0
	and	result1, #1
	wrbyte	result1, local02
	getbyte	result1, local01, #0
	and	result1, #2
	sar	result1, #1
	add	local02, #1
	wrbyte	result1, local02
	getbyte	result1, local01, #0
	and	result1, #28
	sar	result1, #2
	add	local02, #3
	wrlong	result1, local02
	getbyte	result1, local01, #0
	and	result1, #32
	sar	result1, #5
	add	local02, #4
	wrbyte	result1, local02
	getbyte	local01, local01, #0
	and	local01, #64
	sar	local01, #6
	add	local02, #1
	wrbyte	local01, local02
'     }
'     status->onRange = (statusReg & (0x01 <<  0x00 )) >>  0x00 ;
'     status->motorFree = (statusReg & (0x01 <<  0x01 )) >>  0x01 ;
'     status->alarm = (statusReg & (0x07 <<  0x02 )) >>  0x02 ;
'     status->motorBusy = (statusReg & (0x01 <<  0x05 )) >>  0x05 ;
'     status->jp3P2Status = (statusReg & (0x01 <<  0x06 )) >>  0x06 ;
'     return SUCCESS;
	mov	result1, #0
LR__0104
	mov	ptra, fp
	call	#popregs_
_dyn4_get_status_ret
	ret

_machine_state_init
	wrlong	#0, arg01
	add	arg01, #4
	wrbyte	#0, arg01
	add	arg01, #4
	wrbyte	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	add	arg01, #4
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#1, arg01
	add	arg01, #8
	wrlong	#7, arg01
	add	arg01, #4
	wrlong	#0, arg01
	sub	arg01, #8
	wrlong	#0, arg01
	add	arg01, #12
	wrlong	#0, arg01
	mov	result1, #0
	locknew	result1
	add	arg01, #8
	wrlong	result1, arg01
	cmp	result1, ##-1 wz
 if_e	mov	arg01, ##@LR__1813
 if_e	call	#_printf
_machine_state_init_ret
	ret

_state_machine_set
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
' {
'     switch (param)
	fle	local02, #12
	jmprel	local02
LR__0105
	jmp	#LR__0106
	jmp	#LR__0107
	jmp	#LR__0108
	jmp	#LR__0109
	jmp	#LR__0110
	jmp	#LR__0111
	jmp	#LR__0112
	jmp	#LR__0113
	jmp	#LR__0114
	jmp	#LR__0115
	jmp	#LR__0116
	jmp	#LR__0119
	jmp	#LR__0120
LR__0106
	add	local01, #4
	rdbyte	local02, local01
	sub	local01, #4
	cmp	local02, local03 wz
 if_ne	add	local01, #4
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #4
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->selfCheckParameters.chargePump = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0107
	add	local01, #8
	rdbyte	local02, local01
	sub	local01, #8
	cmp	local02, local03 wz
 if_ne	add	local01, #8
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #8
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.switchedPower = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0108
	add	local01, #12
	rdlong	local02, local01
	sub	local01, #12
	cmp	local02, local03 wz
 if_ne	add	local01, #12
 if_ne	wrlong	local03, local01
 if_ne	sub	local01, #12
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.esdTravelLimit = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0109
	add	local01, #16
	rdbyte	local02, local01
	sub	local01, #16
	cmp	local02, local03 wz
 if_ne	add	local01, #16
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #16
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.esdSwitch = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0110
	add	local01, #17
	rdbyte	local02, local01
	sub	local01, #17
	cmp	local02, local03 wz
 if_ne	add	local01, #17
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #17
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.servoOK = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0111
	add	local01, #18
	rdbyte	local02, local01
	sub	local01, #18
	cmp	local02, local03 wz
 if_ne	add	local01, #18
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #18
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.forceGaugeCom = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0112
	add	local01, #19
	rdbyte	local02, local01
	sub	local01, #19
	cmp	local02, local03 wz
 if_ne	add	local01, #19
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #19
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.servoCom = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0113
	add	local01, #20
	rdbyte	local02, local01
	sub	local01, #20
	cmp	local02, local03 wz
 if_ne	add	local01, #20
 if_ne	wrbyte	local03, local01
 if_ne	sub	local01, #20
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->machineCheckParameters.rtcCom = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0114
	add	local01, #24
	rdlong	local02, local01
	sub	local01, #24
	cmp	local02, local03 wz
 if_ne	add	local01, #24
 if_ne	wrlong	local03, local01
 if_ne	sub	local01, #24
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->motionParameters.status = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0115
	add	local01, #28
	rdlong	local02, local01
	sub	local01, #28
	cmp	local02, local03 wz
 if_ne	add	local01, #28
 if_ne	wrlong	local03, local01
 if_ne	sub	local01, #28
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->motionParameters.condition = state;
'             state_machine_update(machineState);
'         }
'         break;
	jmp	#LR__0120
LR__0116
	add	local01, #32
	rdlong	local02, local01
	sub	local01, #32
	cmp	local02, local03 wz
 if_e	jmp	#LR__0118
	add	local01, #32
	rdlong	arg01, local01
	sub	local01, #32
	cmp	arg01, #1 wz
 if_e	jmp	#LR__0117
	cmp	local03, #2 wz
 if_ne	jmp	#LR__0117
	mov	arg01, ##@LR__1814
	call	#_printf
'             {
'                 printf("Must be in test mode to run test\n");
'                 break;
	jmp	#LR__0120
LR__0117
	add	local01, #32
	wrlong	local03, local01
	sub	local01, #32
	mov	arg01, local01
	call	#_state_machine_update_0551
LR__0118
LR__0119
	add	local01, #36
	rdlong	local04, local01
	sub	local01, #36
	cmp	local04, local03 wz
 if_ne	add	local01, #36
 if_ne	wrlong	local03, local01
 if_ne	sub	local01, #36
 if_ne	mov	arg01, local01
 if_ne	call	#_state_machine_update_0551
'         {
'             machineState->function = state;
'             state_machine_update(machineState);
'         }
'         break;
LR__0120
	mov	ptra, fp
	call	#popregs_
_state_machine_set_ret
	ret

_state_machine_check_equal
	mov	_var01, arg01
	mov	_var02, arg02
' {
'     return motionParameters1->switchedPower == motionParameters2->switchedPower &&
	rdbyte	_var03, _var01
	mov	_var04, #0
	rdbyte	_var05, _var02
	cmp	_var03, _var05 wz
 if_ne	jmp	#LR__0121
	add	_var01, #4
	rdlong	_var06, _var01
	sub	_var01, #4
	mov	_var07, _var06
	add	_var02, #4
	rdlong	_var08, _var02
	sub	_var02, #4
	mov	_var09, _var08
	cmp	_var07, _var09 wz
 if_ne	jmp	#LR__0121
	add	_var01, #8
	rdbyte	_var10, _var01
	sub	_var01, #8
	getbyte	_var11, _var10, #0
	add	_var02, #8
	rdbyte	_var12, _var02
	sub	_var02, #8
	getbyte	_var13, _var12, #0
	cmp	_var11, _var13 wz
 if_ne	jmp	#LR__0121
	add	_var01, #9
	rdbyte	_var14, _var01
	sub	_var01, #9
	getbyte	_var15, _var14, #0
	add	_var02, #9
	rdbyte	_var16, _var02
	sub	_var02, #9
	getbyte	_var17, _var16, #0
	cmp	_var15, _var17 wz
 if_ne	jmp	#LR__0121
	add	_var01, #10
	rdbyte	_var18, _var01
	sub	_var01, #10
	getbyte	_var19, _var18, #0
	add	_var02, #10
	rdbyte	_var20, _var02
	sub	_var02, #10
	getbyte	_var21, _var20, #0
	cmp	_var19, _var21 wz
 if_ne	jmp	#LR__0121
	add	_var01, #11
	rdbyte	_var22, _var01
	sub	_var01, #11
	getbyte	_var23, _var22, #0
	add	_var02, #11
	rdbyte	_var24, _var02
	sub	_var02, #11
	getbyte	_var25, _var24, #0
	cmp	_var23, _var25 wz
 if_ne	jmp	#LR__0121
	add	_var01, #12
	rdbyte	_var26, _var01
	sub	_var01, #12
	getbyte	_var27, _var26, #0
	add	_var02, #12
	rdbyte	_var28, _var02
	sub	_var02, #12
	getbyte	_var29, _var28, #0
	cmp	_var27, _var29 wz
 if_e	mov	_var04, #1
LR__0121
	mov	result1, _var04
_state_machine_check_equal_ret
	ret

_state_machine_motion_equal
	mov	_var01, arg01
	mov	_var02, arg02
' {
'     return motionParameters1->status == motionParameters2->status &&
	rdlong	_var03, _var01
	mov	_var04, #0
	rdlong	_var05, _var02
	cmp	_var03, _var05 wz
 if_ne	jmp	#LR__0122
	add	_var01, #8
	rdlong	_var06, _var01
	sub	_var01, #8
	mov	_var07, _var06
	add	_var02, #8
	rdlong	_var08, _var02
	sub	_var02, #8
	mov	_var09, _var08
	cmp	_var07, _var09 wz
 if_ne	jmp	#LR__0122
	add	_var01, #4
	rdlong	_var10, _var01
	sub	_var01, #4
	mov	_var11, _var10
	add	_var02, #4
	rdlong	_var12, _var02
	sub	_var02, #4
	mov	_var13, _var12
	cmp	_var11, _var13 wz
 if_e	mov	_var04, #1
LR__0122
	mov	result1, _var04
_state_machine_motion_equal_ret
	ret

_state_machine_equal
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' {
'     return state_machine_self_check_equal(&(machineState1->selfCheckParameters), &(machineState2->selfCheckParameters)) &&
	mov	local03, #0
	add	local01, #4
	mov	arg01, local01
	sub	local01, #4
	add	local02, #4
	mov	arg02, local02
	sub	local02, #4
' {
'     return selfCheckParameters1->chargePump == selfCheckParameters2->chargePump;
	rdbyte	arg01, arg01
	mov	result1, #0
	rdbyte	arg02, arg02
	cmp	arg01, arg02 wz
 if_e	mov	result1, #1
	mov	local04, result1 wz
 if_e	jmp	#LR__0123
	add	local01, #8
	mov	arg01, local01
	sub	local01, #8
	add	local02, #8
	mov	arg02, local02
	sub	local02, #8
	call	#_state_machine_check_equal
	mov	local05, result1 wz
 if_e	jmp	#LR__0123
	add	local01, #24
	mov	arg01, local01
	sub	local01, #24
	add	local02, #24
	mov	arg02, local02
	sub	local02, #24
	call	#_state_machine_motion_equal
	mov	local06, result1 wz
 if_e	jmp	#LR__0123
	rdlong	local07, local01
	rdlong	local08, local02
	cmp	local07, local08 wz
 if_ne	jmp	#LR__0123
	add	local01, #36
	rdlong	local09, local01
	sub	local01, #36
	mov	local10, local09
	add	local02, #36
	rdlong	local11, local02
	sub	local02, #36
	mov	local12, local11
	cmp	local10, local12 wz
 if_ne	jmp	#LR__0123
	add	local01, #40
	rdlong	local13, local01
	sub	local01, #40
	mov	local14, local13
	add	local02, #40
	rdlong	local15, local02
	sub	local02, #40
	mov	local16, local15
	cmp	local14, local16 wz
 if_e	xor	local03, #1
LR__0123
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_state_machine_equal_ret
	ret

_display_begin
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg06
	mov	local04, arg07
	mov	local05, arg08
	add	local01, #4
	wrlong	local02, local01
	sub	local01, #4
	wrlong	arg03, local01
	add	local01, #16
	wrlong	local03, local01
	sub	local01, #8
	wrlong	arg04, local01
	add	local01, #4
	wrlong	arg05, local01
	add	local01, #44
	mov	arg01, arg05
	mov	arg02, arg04
	mov	arg03, local03
	mov	arg04, ##10000
	mov	local06, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_start
	sub	local01, #12
	mov	objptr, local01
	mov	arg01, local04
	mov	arg02, local05
	mov	arg03, #100
	mov	arg04, #1
	call	#_jm_i2c_spin2_setup
	mov	objptr, local06
	sub	local01, #24
	wrlong	#186, local01
	add	local01, #4
	wrlong	#187, local01
	sub	local01, #20
	rdlong	arg01, local01
	drvl	arg01
	mov	arg01, #2
	call	#__system___waitms
	rdlong	arg01, local01
	sub	local01, #4
	drvh	arg01
	mov	arg01, #2
	call	#__system___waitms
	mov	arg01, ##1000
	call	#__system___waitms
	add	ptr__dat__, ##88240
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88240
	mov	arg01, local01
	mov	arg03, #186
	call	#_display_gt9271_send_cfg
	rdlong	arg01, local01
	drvh	arg01
	drvl	local03
	drvh	local02
	mov	arg01, #1
	call	#__system___waitms
	add	local01, #4
	rdlong	arg01, local01
	sub	local01, #4
	drvl	arg01
	mov	arg01, #1
	call	#__system___waitms
	drvh	local02
	mov	arg01, #10
	call	#__system___waitms
	mov	arg02, #1
	mov	arg03, #8
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #8
	call	#_lcdDataWrite
	mov	arg01, #100
	call	#__system___waitms
	mov	arg01, local01
	mov	arg02, #255
	mov	local06, arg01
	call	#_lcdRegWrite
	mov	arg01, local06
	call	#_lcdDataRead
' {
'   lcdRegWrite(display, reg);
'   lcdDataWrite(display, data);
' }
' 
' 
' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
' {
'   lcdRegWrite(display, reg);
'   uint8_t data = lcdDataRead(display);
'   return data;
	getbyte	local06, result1, #0
	cmp	local06, #118 wz
 if_e	jmp	#LR__0124
	mov	arg01, local01
	mov	arg02, #255
	mov	local05, arg01
	call	#_lcdRegWrite
	mov	arg01, local05
	call	#_lcdDataRead
' {
'   lcdRegWrite(display, reg);
'   lcdDataWrite(display, data);
' }
' 
' 
' uint8_t lcdRegDataRead(Display *display, uint8_t reg)
' {
'   lcdRegWrite(display, reg);
'   uint8_t data = lcdDataRead(display);
'   return data;
	getbyte	local05, result1, #0
	cmp	local05, #119 wz
 if_e	jmp	#LR__0124
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1815
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return DISPLAY_NOT_FOUND;
	mov	result1, #2
	jmp	#LR__0126
LR__0124
	mov	arg01, local01
	call	#_display_initialize
	mov	local07, result1 wz
 if_e	jmp	#LR__0125
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1816
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local07
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return err;
	mov	result1, local07
	jmp	#LR__0126
LR__0125
'   }
'   return SUCCESS;
	mov	result1, #0
LR__0126
	mov	ptra, fp
	call	#popregs_
_display_begin_ret
	ret

_display_load_image
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1817
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local02, #20
	rdlong	local03, local02
	sub	local02, #20
	cmp	local03, #1 wz
 if_ne	jmp	#LR__0127
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_canvas_image_start_address
	jmp	#LR__0130
LR__0127
	add	local02, #20
	rdlong	local03, local02
	sub	local02, #20
	cmp	local03, #2 wz
 if_ne	jmp	#LR__0128
	mov	arg01, local01
	mov	arg02, ##1228800
	call	#_display_canvas_image_start_address
	jmp	#LR__0129
LR__0128
	add	local02, #20
	rdlong	local03, local02
	sub	local02, #20
	cmp	local03, #3 wz
 if_e	mov	arg01, local01
 if_e	mov	arg02, ##2457600
 if_e	call	#_display_canvas_image_start_address
LR__0129
LR__0130
	mov	arg01, ##@LR__1818
	mov	arg02, #0
	call	#_mkdir
	mov	arg01, ##@LR__1819
	call	#_chdir
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1820
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1821
	mov	arg01, local02
	call	#_fopen
	mov	local04, result1 wz
 if_ne	jmp	#LR__0131
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1822
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__1823
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	add	ptr___system__dat__, #24
	rdlong	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #24
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_canvas_image_start_address
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_display_active_window_xy
	mov	arg01, local01
	decod	arg02, #10
	mov	arg03, ##600
	call	#_display_active_window_wh
'     display_canvas_image_start_address(display,  0 );
'     display_active_window_xy(display, 0, 0);
'     display_active_window_wh(display,  1024 ,  600 );
'     return;
	jmp	#LR__0135
LR__0131
	add	local02, #24
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	add	local02, #4
	rdlong	arg04, local02
	add	local02, #4
	rdlong	arg05, local02
	mov	arg01, local01
	call	#_display_put_picture_16bpp
	sub	local02, #4
	rdlong	local05, local02
	add	local02, #4
	rdlong	local03, local02
	qmul	local05, local03
	sub	local02, #36
	mov	local06, #0
' 
'   for (int i = 0; i < imageSize; i++)
	getqx	local07
LR__0132
	cmps	local06, local07 wc
 if_ae	jmp	#LR__0134
	mov	arg01, local04
	call	#_fgetc
	mov	local05, result1
	cmp	local05, ##-1 wz
'       break;
 if_e	jmp	#LR__0134
	mov	local08, local05
	mov	arg01, local04
	call	#_fgetc
	cmp	result1, ##-1 wz
'       break;
 if_e	jmp	#LR__0134
	getword	local08, local08, #0
	shl	result1, #8
	or	local08, result1
	getword	local03, local08, #0
	add	local02, #42
	rdword	local05, local02
	sub	local02, #42
	cmp	local03, local05 wz
 if_ne	jmp	#LR__0133
	add	local02, #42
	rdword	local05, local02
	add	local02, #2
	rdword	result1, local02
	sub	local02, #44
	cmp	local05, result1 wz
 if_ne	add	local02, #44
 if_ne	rdword	local03, local02
 if_ne	sub	local02, #44
 if_ne	mov	local08, local03
LR__0133
	mov	arg01, local01
	mov	arg02, local08
	call	#_lcdDataWrite16bbp
	add	local06, #1
	jmp	#LR__0132
LR__0134
	mov	arg01, local04
' {
'     return _closeraw(f);
	call	#__closeraw
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_canvas_image_start_address
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_display_active_window_xy
	mov	arg01, local01
	decod	arg02, #10
	mov	arg03, ##600
	call	#_display_active_window_wh
LR__0135
	mov	ptra, fp
	call	#popregs_
_display_load_image_ret
	ret

_display_bte_memory_copy_image
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, #0
'   switch (image->page)
	add	local02, #20
	rdlong	local06, local02
	sub	local02, #20
	mov	local07, local06
	sub	local07, #1
	fle	local07, #3
	jmprel	local07
LR__0136
	jmp	#LR__0137
	jmp	#LR__0138
	jmp	#LR__0139
	jmp	#LR__0140
LR__0137
	mov	local05, #0
'     pageAddr =  0 ;
'     break;
	jmp	#LR__0141
LR__0138
	mov	local05, ##1228800
'     pageAddr =  1024 * 600 * 2 ;
'     break;
	jmp	#LR__0141
LR__0139
	mov	local05, ##2457600
'     pageAddr =  1024 * 600 * 2 * 2 ;
'     break;
	jmp	#LR__0141
LR__0140
'     break;
LR__0141
	add	local02, #40
	rdword	local06, local02
	sub	local02, #40
	zerox	local06, #15 wz
 if_e	jmp	#LR__0142
	mov	arg01, local01
	add	local02, #24
	rdlong	arg04, local02
	add	local02, #4
	rdlong	arg05, local02
	add	local01, #72
	rdlong	arg06, local01
	add	local02, #4
	rdlong	arg10, local02
	add	local02, #4
	rdlong	arg11, local02
	add	local02, #4
	rdword	arg12, local02
	mov	arg02, local05
	decod	arg03, #10
	decod	arg07, #10
	mov	arg08, local03
	mov	arg09, local04
	call	#_display_bte_memory_copy_with_chroma_key
	jmp	#LR__0143
LR__0142
	mov	arg01, local01
	add	local02, #24
	rdlong	arg04, local02
	add	local02, #4
	rdlong	arg05, local02
	add	local01, #72
	rdlong	arg06, local01
	add	local02, #4
	rdlong	arg10, local02
	add	local02, #4
	rdlong	arg11, local02
	mov	arg02, local05
	decod	arg03, #10
	decod	arg07, #10
	mov	arg08, local03
	mov	arg09, local04
	call	#_display_bte_memory_copy
LR__0143
	mov	ptra, fp
	call	#popregs_
_display_bte_memory_copy_image_ret
	ret

_display_on
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	arg02, #0 wz
 if_e	jmp	#LR__0144
	mov	arg02, #18
	mov	arg03, #192
	mov	local02, #192
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	jmp	#LR__0145
LR__0144
	mov	arg02, #18
	mov	arg03, #128
	mov	local02, #128
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
LR__0145
	mov	arg01, #20
	call	#__system___waitms
	mov	ptra, fp
	call	#popregs_
_display_on_ret
	ret

_display_lcd_horizontal_width_vertical_height
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	getword	arg03, local02, #0
	abs	arg03, arg03 wc
	shr	arg03, #3
	negc	arg03, arg03
	sub	arg03, #1
	mov	arg02, #20
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	local02, local02, #0
	abs	local02, local02 wc
	and	local02, #7
	negc	arg03, local02
	mov	arg02, #21
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	sub	arg03, #1
	mov	arg02, #26
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	sub	arg03, #1
	sar	arg03, #8
	mov	arg02, #27
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_lcd_horizontal_width_vertical_height_ret
	ret

_display_lcd_horizontal_non_display
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	getword	arg03, local02, #0
	cmp	arg03, #8 wc
 if_ae	jmp	#LR__0146
	mov	arg02, #22
	mov	arg03, #0
	mov	local03, #0
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #23
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	jmp	#LR__0147
LR__0146
	getword	arg03, local02, #0
	abs	arg03, arg03 wc
	shr	arg03, #3
	negc	arg03, arg03
	sub	arg03, #1
	mov	arg02, #22
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	local02, local02, #0
	abs	local02, local02 wc
	and	local02, #7
	negc	arg03, local02
	mov	arg02, #23
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
LR__0147
	mov	ptra, fp
	call	#popregs_
_display_lcd_horizontal_non_display_ret
	ret

_display_lcd_hsync_start_position
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	getword	arg03, local02, #0
	cmp	arg03, #8 wc
 if_ae	jmp	#LR__0148
	mov	arg02, #24
	mov	arg03, #0
	mov	local02, #0
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	jmp	#LR__0149
LR__0148
	getword	local02, local02, #0
	abs	local02, local02 wc
	shr	local02, #3
	negc	arg03, local02
	sub	arg03, #1
	mov	arg02, #24
	mov	local02, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
LR__0149
	mov	ptra, fp
	call	#popregs_
_display_lcd_hsync_start_position_ret
	ret

_display_lcd_hsync_pulse_width
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	getword	arg03, local02, #0
	cmp	arg03, #8 wc
 if_ae	jmp	#LR__0150
	mov	arg02, #25
	mov	arg03, #0
	mov	local02, #0
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	jmp	#LR__0151
LR__0150
	getword	local02, local02, #0
	abs	local02, local02 wc
	shr	local02, #3
	negc	arg03, local02
	sub	arg03, #1
	mov	arg02, #25
	mov	local02, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
LR__0151
	mov	ptra, fp
	call	#popregs_
_display_lcd_hsync_pulse_width_ret
	ret

_display_lcd_vertical_non_display
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	getword	local02, arg02, #0
	sub	local02, #1
	mov	arg02, #28
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getbyte	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #29
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_lcd_vertical_non_display_ret
	ret

_display_image_start_address
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #32
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #8
	mov	arg02, #33
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #16
	mov	arg02, #34
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	shr	local02, #24
	mov	arg02, #35
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_image_start_address_ret
	ret

_display_image_width
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #36
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #37
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_image_width_ret
	ret

_display_window_start_xy
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #38
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #39
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #40
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #41
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_window_start_xy_ret
	ret

_display_canvas_image_start_address
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #72
	wrlong	local02, local01
	sub	local01, #72
	mov	arg02, #80
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #8
	mov	arg02, #81
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #16
	mov	arg02, #82
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	shr	local02, #24
	mov	arg02, #83
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_canvas_image_start_address_ret
	ret

_display_canvas_image_width
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #84
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #85
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_canvas_image_width_ret
	ret

_display_active_window_xy
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #86
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #87
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #88
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #89
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_active_window_xy_ret
	ret

_display_active_window_wh
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #90
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #91
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #92
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #93
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_active_window_wh_ret
	ret

_display_fore_ground_color_16bpp
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #210
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #3
	mov	arg02, #211
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shl	arg03, #3
	mov	arg02, #212
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_fore_ground_color_16bpp_ret
	ret

_display_back_ground_color_16bpp
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #213
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #3
	mov	arg02, #214
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shl	arg03, #3
	mov	arg02, #215
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_back_ground_color_16bpp_ret
	ret

_display_set_pixel_cursor
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #95
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #96
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #97
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #98
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_set_pixel_cursor_ret
	ret

_display_put_picture_16bpp
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local03
	call	#_display_active_window_xy
	mov	arg01, local01
	mov	arg02, local04
	mov	arg03, local05
	call	#_display_active_window_wh
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local03
	call	#_display_set_pixel_cursor
	mov	arg01, local01
	mov	arg02, #4
	call	#_lcdRegWrite
	mov	ptra, fp
	call	#popregs_
_display_put_picture_16bpp_ret
	ret

_display_text_mode
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	arg02, #0 wz
 if_e	jmp	#LR__0152
	mov	arg02, #3
	mov	arg03, #4
	mov	local02, #4
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	jmp	#LR__0153
LR__0152
	mov	arg02, #3
	mov	arg03, #0
	mov	local02, #0
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
LR__0153
	mov	ptra, fp
	call	#popregs_
_display_text_mode_ret
	ret

_display_set_text_cursor
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #99
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #100
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #101
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #102
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_set_text_cursor_ret
	ret

_display_set_text_parameter1
	mov	COUNT_, #2
	call	#pushregs_
	getbyte	arg02, arg02, #0
	shl	arg02, #6
	getbyte	arg03, arg03, #0
	shl	arg03, #4
	or	arg02, arg03
	getbyte	arg03, arg04, #0
	or	arg03, arg02
	mov	arg02, #204
	mov	local01, arg01
	mov	local02, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_set_text_parameter1_ret
	ret

_display_set_text_parameter2
	mov	COUNT_, #2
	call	#pushregs_
	getbyte	arg02, arg02, #0
	shl	arg02, #7
	getbyte	arg03, arg03, #0
	shl	arg03, #6
	or	arg02, arg03
	getbyte	arg03, arg04, #0
	shl	arg03, #2
	or	arg02, arg03
	getbyte	arg03, arg05, #0
	or	arg03, arg02
	mov	arg02, #205
	mov	local01, arg01
	mov	local02, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_display_set_text_parameter2_ret
	ret

_display_draw_string
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	arg01, local01
	mov	arg02, #1
	call	#_display_text_mode
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local03
	call	#_display_set_text_cursor
	mov	arg01, local01
	mov	arg02, #4
	call	#_lcdRegWrite
' {
'   display_text_mode(display,  (1) );
'   display_set_text_cursor(display, x0, y0);
'   display_ram_access_prepare(display);
'   while (*str != '\0')
LR__0154
	rdbyte	local03, local04 wz
 if_e	jmp	#LR__0155
	mov	arg01, local01
	call	#_checkWriteFifoNotFull
	mov	arg01, local01
	rdbyte	arg02, local04
	call	#_lcdDataWrite
	add	local04, #1
	jmp	#LR__0154
LR__0155
	mov	arg01, local01
	call	#_check2dBusy
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_text_mode
	mov	ptra, fp
	call	#popregs_
_display_draw_string_ret
	ret

_display_draw_line
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	arg01, local01
	mov	arg02, arg06
	call	#_display_fore_ground_color_16bpp
	mov	arg02, #104
	mov	arg03, local02
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #105
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #106
	mov	arg03, local03
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #107
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #108
	mov	arg03, local04
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local04, #0
	shr	arg03, #8
	mov	arg02, #109
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #110
	mov	arg03, local05
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local05, #0
	shr	arg03, #8
	mov	arg02, #111
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #103
	mov	arg03, #128
	mov	local06, #128
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_check2dBusy
	mov	ptra, fp
	call	#popregs_
_display_draw_line_ret
	ret

_display_draw_square_fill
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	arg01, local01
	mov	arg02, arg06
	call	#_display_fore_ground_color_16bpp
	mov	arg02, #104
	mov	arg03, local02
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #105
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #106
	mov	arg03, local03
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #107
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #108
	mov	arg03, local04
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local04, #0
	shr	arg03, #8
	mov	arg02, #109
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #110
	mov	arg03, local05
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	getword	arg03, local05, #0
	shr	arg03, #8
	mov	arg02, #111
	mov	local06, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg02, #118
	mov	arg03, #224
	mov	local06, #224
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local06
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_check2dBusy
	mov	ptra, fp
	call	#popregs_
_display_draw_square_fill_ret
	ret

_display_draw_circle_square_fill
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	getword	arg02, local04, #0
	getword	arg01, local02, #0
	sub	arg02, arg01
	sub	arg02, #1
	abs	arg02, arg02 wc
	shr	arg02, #1
	negc	arg02, arg02
	getword	local06, local05, #0
	getword	arg01, local03, #0
	sub	local06, arg01
	sub	local06, #1
	abs	arg01, local06 wc
	shr	arg01, #1
	negc	arg01, arg01
	getword	local07, arg06, #0
	cmps	local07, arg02 wcz
 if_a	mov	local06, arg02
 if_be	mov	local06, arg06
	mov	local08, local06
	getword	local07, arg07, #0
	cmps	local07, arg01 wcz
 if_a	mov	local06, arg01
 if_be	mov	local06, arg07
	mov	arg01, local01
	mov	arg02, arg08
	call	#_display_fore_ground_color_16bpp
	mov	arg02, #104
	mov	arg03, local02
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #105
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	mov	arg02, #106
	mov	arg03, local03
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #107
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	mov	arg02, #108
	mov	arg03, local04
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	getword	arg03, local04, #0
	shr	arg03, #8
	mov	arg02, #109
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	mov	arg02, #110
	mov	arg03, local05
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	getword	arg03, local05, #0
	shr	arg03, #8
	mov	arg02, #111
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	mov	arg02, #119
	mov	arg03, local08
	mov	local07, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local07
	call	#_lcdDataWrite
	getword	arg03, local08, #0
	shr	arg03, #8
	mov	arg02, #120
	mov	local08, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local08
	call	#_lcdDataWrite
	mov	arg02, #121
	mov	arg03, local06
	mov	local08, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local08
	call	#_lcdDataWrite
	getword	arg03, local06, #0
	shr	arg03, #8
	mov	arg02, #122
	mov	local08, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local08
	call	#_lcdDataWrite
	mov	arg02, #118
	mov	arg03, #240
	mov	local08, #240
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local08
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_check2dBusy
	mov	ptra, fp
	call	#popregs_
_display_draw_circle_square_fill_ret
	ret

_display_bte_memory_copy
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg03
	mov	local03, arg04
	mov	local04, arg05
	mov	local05, arg06
	mov	local06, arg07
	mov	local07, arg08
	mov	local08, arg09
	mov	local09, arg10
	mov	local10, arg11
	mov	arg01, local01
	call	#_bte_Source0_MemoryStartAddr
	mov	arg01, local01
	mov	arg02, local02
	call	#_bte_Source0_ImageWidth
	mov	arg01, local01
	mov	arg02, local03
	mov	arg03, local04
	call	#_bte_Source0_WindowStartXY
	mov	arg01, local01
	mov	arg02, local05
	call	#_bte_DestinationMemoryStartAddr
	mov	arg01, local01
	mov	arg02, local06
	call	#_bte_DestinationImageWidth
	mov	arg01, local01
	mov	arg02, local07
	mov	arg03, local08
	call	#_bte_DestinationWindowStartXY
	mov	arg01, local01
	mov	arg02, local09
	mov	arg03, local10
	call	#_bte_WindowSize
	mov	arg02, #145
	mov	arg03, #194
	mov	local10, #194
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local10
	call	#_lcdDataWrite
	mov	arg02, #146
	mov	arg03, #37
	mov	local10, #37
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local10
	call	#_lcdDataWrite
	mov	arg02, #144
	mov	arg03, #16
	mov	local10, #16
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local10
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_check2dBusy
	mov	ptra, fp
	call	#popregs_
_display_bte_memory_copy_ret
	ret

_display_bte_memory_copy_with_chroma_key
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg03
	mov	local03, arg04
	mov	local04, arg05
	mov	local05, arg06
	mov	local06, arg07
	mov	local07, arg08
	mov	local08, arg09
	mov	local09, arg10
	mov	local10, arg11
	mov	local11, arg12
	mov	arg01, local01
	call	#_bte_Source0_MemoryStartAddr
	mov	arg01, local01
	mov	arg02, local02
	call	#_bte_Source0_ImageWidth
	mov	arg01, local01
	mov	arg02, local03
	mov	arg03, local04
	call	#_bte_Source0_WindowStartXY
	mov	arg01, local01
	mov	arg02, local05
	call	#_bte_DestinationMemoryStartAddr
	mov	arg01, local01
	mov	arg02, local06
	call	#_bte_DestinationImageWidth
	mov	arg01, local01
	mov	arg02, local07
	mov	arg03, local08
	call	#_bte_DestinationWindowStartXY
	mov	arg01, local01
	mov	arg02, local09
	mov	arg03, local10
	call	#_bte_WindowSize
	mov	arg01, local01
	mov	arg02, local11
	call	#_display_back_ground_color_16bpp
	mov	arg02, #145
	mov	arg03, #5
	mov	local11, #5
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local11
	call	#_lcdDataWrite
	mov	arg02, #146
	mov	arg03, #37
	mov	local11, #37
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local11
	call	#_lcdDataWrite
	mov	arg02, #144
	mov	arg03, #16
	mov	local11, #16
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local11
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_check2dBusy
	mov	ptra, fp
	call	#popregs_
_display_bte_memory_copy_with_chroma_key_ret
	ret

_display_initialize
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	call	#_display_pll_initial
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0156
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1824
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return DISPLAY_PLL_FAIL;
	mov	result1, #3
	jmp	#LR__0158
LR__0156
	mov	arg01, local01
	call	#_display_sdram_initial
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0157
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1825
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return DISPLAY_SDRAM_FAIL;
	mov	result1, #4
	jmp	#LR__0158
LR__0157
	mov	arg01, local01
	mov	arg02, #1
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #130
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #2
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #0
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #3
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #0
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #16
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #4
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #17
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #5
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #94
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #1
	call	#_lcdDataWrite
	mov	arg02, #146
	mov	arg03, #37
	mov	local02, #37
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #18
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #128
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #19
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #192
	call	#_lcdDataWrite
	mov	arg01, local01
	decod	arg02, #10
	mov	arg03, ##600
	call	#_display_lcd_horizontal_width_vertical_height
	mov	arg01, local01
	mov	arg02, #160
	call	#_display_lcd_horizontal_non_display
	mov	arg01, local01
	mov	arg02, #160
	call	#_display_lcd_hsync_start_position
	mov	arg01, local01
	mov	arg02, #70
	call	#_display_lcd_hsync_pulse_width
	mov	arg01, local01
	mov	arg02, #23
	call	#_display_lcd_vertical_non_display
	mov	arg03, #11
	mov	arg02, #30
	mov	local02, #11
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	arg03, #9
	mov	arg02, #31
	mov	local03, local01
	mov	local02, #9
	mov	arg01, local03
	call	#_lcdRegWrite
	mov	arg01, local03
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_image_start_address
	mov	arg01, local01
	decod	arg02, #10
	call	#_display_image_width
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_display_window_start_xy
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_canvas_image_start_address
	mov	arg01, local01
	decod	arg02, #10
	call	#_display_canvas_image_width
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_display_active_window_xy
	mov	arg01, local01
	decod	arg02, #10
	mov	arg03, ##600
	call	#_display_active_window_wh
'   }
'   lcdRegWrite(display,  0x01 );
'   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0  << 5 |  0  << 3 |  0  << 2 |  1  << 1 |  0 );
' 
'   lcdRegWrite(display,  0x02 );
'   lcdDataWrite(display,  0  << 6 |  0  << 4 |  0  << 1);
' 
'   lcdRegWrite(display,  0x03 );
'   lcdDataWrite(display,  0  << 3 |  0  << 2 |  0 );
' 
'   lcdRegWrite(display,  0x10 );
'   lcdDataWrite(display,  0  << 7 |  0  << 6 |  0  << 4 |  1  << 2 |  0 );
' 
'   lcdRegWrite(display,  0x11 );
'   lcdDataWrite(display,  1  << 2 |  1 );
' 
'   lcdRegWrite(display,  0x5E );
'   lcdDataWrite(display,  0  << 2 |  1 );
' 
'   lcdRegDataWrite(display,  0x92 ,  1  << 5 |  1  << 2 |  1 );
' 
' 
'   lcdRegWrite(display,  0x12 );
'   lcdDataWrite(display,  1  << 7 |  0  << 6 |  0 );
' 
'   lcdRegWrite(display,  0x13 );
'   lcdDataWrite(display,  1  << 7 |  1  << 6 |  0  << 5);
' 
'   display_lcd_horizontal_width_vertical_height(display,  1024 ,  600 );
'   display_lcd_horizontal_non_display(display,  160 );
'   display_lcd_hsync_start_position(display,  160 );
'   display_lcd_hsync_pulse_width(display,  70 );
'   display_lcd_vertical_non_display(display,  23 );
'   display_lcd_vsync_start_position(display,  12 );
'   display_lcd_vsync_pulse_width(display,  10 );
' 
' 
'   display_image_start_address(display,  0 );
'   display_image_width(display,  1024 );
'   display_window_start_xy(display, 0, 0);
'   display_canvas_image_start_address(display,  0 );
'   display_canvas_image_width(display,  1024 );
'   display_active_window_xy(display, 0, 0);
'   display_active_window_wh(display,  1024 ,  600 );
'   return SUCCESS;
	mov	result1, #0
LR__0158
	mov	ptra, fp
	call	#popregs_
_display_initialize_ret
	ret

_display_pll_initial
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #5
	mov	arg03, #6
	mov	local02, arg01
	mov	local03, #6
	mov	arg01, local02
	call	#_lcdRegWrite
	mov	arg01, local02
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #6
	mov	arg03, #39
	mov	local03, #39
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #7
	mov	arg03, #4
	mov	local03, #4
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #8
	mov	arg03, #47
	mov	local03, #47
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #9
	mov	arg03, #4
	mov	local03, #4
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #10
	mov	arg03, #47
	mov	local03, #47
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg01, #1
	call	#__system___waitms
	mov	arg01, local01
	mov	arg02, #1
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, #128
	call	#_lcdDataWrite
	mov	arg01, #2
	call	#__system___waitms
	mov	arg01, local01
	call	#_lcdDataRead
	getbyte	result1, result1, #0
	and	result1, #128
	cmp	result1, #128 wz
'     return  (1) ;
 if_e	mov	result1, #1
'     return  (0) ;
 if_ne	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_display_pll_initial_ret
	ret

_display_sdram_initial
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #224
	mov	arg03, #41
	mov	local02, arg01
	mov	local03, #41
	mov	arg01, local02
	call	#_lcdRegWrite
	mov	arg01, local02
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #225
	mov	arg03, #3
	mov	local03, #3
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #226
	mov	arg03, ##1873
	mov	local03, ##1873
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #227
	mov	arg03, #7
	mov	local03, #7
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg02, #228
	mov	arg03, #1
	mov	local03, #1
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg01, local01
	call	#_checkSdramReady
' {
'   uint8_t CAS_Latency;
'   uint16_t Auto_Refresh;
' 
'   CAS_Latency = 3;
'   Auto_Refresh = (64 *  120  * 1000) / (4096);
'   Auto_Refresh = Auto_Refresh - 2;
'   lcdRegDataWrite(display, 0xe0, 0x29);
'   lcdRegDataWrite(display, 0xe1, CAS_Latency);
'   lcdRegDataWrite(display, 0xe2, Auto_Refresh);
'   lcdRegDataWrite(display, 0xe3, Auto_Refresh >> 8);
'   lcdRegDataWrite(display, 0xe4, 0x01);
' 
'   checkSdramReady(display);
'   return  (1) ;
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
_display_sdram_initial_ret
	ret

_display_gt9271_send_cfg
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg02
	mov	arg04, arg03
	mov	arg02, ##32839
	mov	arg03, local01
	call	#_display_write_gt9271_touch_register
	mov	arg01, #10
	call	#__system___waitms
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_display_gt9271_send_cfg_ret
	ret

_display_write_gt9271_touch_register
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	local01, #44
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	sub	local01, #24
	rdlong	arg01, local01
	call	#_jm_i2c_spin2_write
	add	local01, #24
	mov	objptr, local01
	getword	arg01, arg02, #0
	shr	arg01, #8
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	sub	local01, #44
	getword	arg01, arg02, #0
	call	#_jm_i2c_spin2_write
	mov	objptr, local02
' {
'   uint16_t i = 0;
'   display->i2cBus.start();
'   display->i2cBus.write(display->i2c_addr_write);
'   display->i2cBus.write(regAddr >> 8);
'   display->i2cBus.write(regAddr);
'   for (i = 0; i < cnt; i++, val++)
	mov	local02, #0
LR__0159
	getword	arg02, local02, #0
	getword	arg01, arg04, #0
	cmp	arg02, arg01 wc
 if_ae	jmp	#LR__0160
	add	local01, #44
	rdbyte	arg01, arg03
	mov	arg02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, arg02
	add	local02, #1
	add	arg03, #1
	sub	local01, #44
	jmp	#LR__0159
LR__0160
	add	local01, #44
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local02
	mov	ptra, fp
	call	#popregs_
_display_write_gt9271_touch_register_ret
	ret

_display_read_gt9271_touch_addr
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	add	local01, #44
	mov	local05, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	sub	local01, #24
	rdlong	arg01, local01
	call	#_jm_i2c_spin2_write
	add	local01, #24
	mov	objptr, local01
	getword	arg01, local02, #0
	shr	arg01, #8
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	getword	arg01, local02, #0
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	sub	local01, #20
	rdlong	arg01, local01
	sub	local01, #24
	call	#_jm_i2c_spin2_write
	mov	objptr, local05
'   {
'     display->i2cBus.write(*val);
'   }
' 
'   display->i2cBus.stop();
' }
' 
' uint8_t display_gt9271_send_cfg(Display *display, uint8_t *buf, uint16_t cfg_len)
' {
'   display_write_gt9271_touch_register(display, 0x8047, buf, cfg_len);
'   _waitms(10);
' }
' 
' uint8_t display_read_gt9271_touch_addr(Display *display, uint16_t regAddr, uint8_t *pBuf, uint8_t len)
' {
'   uint8_t i;
'   display->i2cBus.start();
' 
'   display->i2cBus.write(display->i2c_addr_write);
'   display->i2cBus.write(regAddr >> 8);
'   display->i2cBus.write(regAddr);
'   display->i2cBus.start();
'   display->i2cBus.write(display->i2c_addr_read);
'   for (i = 0; i < len; i++)
	mov	local06, #0
LR__0161
	getbyte	local05, local06, #0
	getbyte	local02, local04, #0
	cmp	local05, local02 wc
 if_ae	jmp	#LR__0163
	getbyte	local05, local06, #0
	getbyte	arg01, local04, #0
	sub	arg01, #1
	cmp	local05, arg01 wz
 if_ne	jmp	#LR__0162
	mov	local05, local06
	add	local05, local03
	add	local01, #44
	mov	arg01, #1
	mov	local04, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_read
	mov	objptr, local04
	wrbyte	result1, local05
'     {
'       pBuf[i] = display->i2cBus.read(1);
'       break;
	sub	local01, #44
	jmp	#LR__0163
LR__0162
	mov	local05, local06
	add	local05, local03
	add	local01, #44
	mov	arg01, #0
	mov	local07, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_read
	mov	objptr, local07
	wrbyte	result1, local05
	add	local06, #1
	sub	local01, #44
	jmp	#LR__0161
LR__0163
	add	local01, #44
	mov	local07, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local07
'     }
'     pBuf[i] = display->i2cBus.read(0);
'   }
'   display->i2cBus.stop();
'   return i;
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
_display_read_gt9271_touch_addr_ret
	ret

_readGT9271TouchLocation
	mov	COUNT_, #23
	call	#pushregs_
	add	ptra, #120
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #4
	wrbyte	#0, fp
	add	fp, #4
	wrbyte	#0, fp
	add	fp, #4
	wrbyte	#0, fp
' }
' 
' uint8_t readGT9271TouchLocation(Display *display, TouchLocation *pLoc, uint8_t num)
' {
'   uint8_t retVal = 0;
'   uint8_t i = 0;
'   uint8_t k = 0;
'   uint8_t ss[1];
'   do
	sub	fp, #16
	rdlong	local01, fp wz
	sub	fp, #8
'       break;
 if_e	jmp	#LR__0182
	add	fp, #12
	rdbyte	local01, fp wz
	sub	fp, #12
'       break;
 if_e	jmp	#LR__0182
	add	fp, #28
	wrbyte	#0, fp
	sub	fp, #24
	rdlong	arg01, fp
	add	fp, #24
	mov	arg03, fp
	sub	fp, #28
	mov	arg02, ##33102
	mov	arg04, #1
	call	#_display_read_gt9271_touch_addr
	add	fp, #28
	rdbyte	local01, fp
	add	fp, #4
	wrbyte	local01, fp
	rdbyte	local01, fp
	sub	fp, #32
	test	local01, #15 wz
'       break;
 if_e	jmp	#LR__0182
	add	fp, #32
	rdbyte	local01, fp
	getnib	local01, local01, #0
	add	fp, #4
	wrbyte	local01, fp
	sub	fp, #32
	rdlong	arg01, fp
	add	fp, #36
	mov	arg03, fp
	sub	fp, #40
	mov	arg02, ##33104
	mov	arg04, #32
	call	#_display_read_gt9271_touch_addr
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #68
	mov	arg03, fp
	sub	fp, #72
	mov	arg02, ##33136
	mov	arg04, #32
	call	#_display_read_gt9271_touch_addr
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #100
	mov	local02, fp
	mov	local03, #16
	mov	arg02, ##33168
	mov	arg03, local02
	mov	arg04, #16
	sub	fp, #104
	call	#_display_read_gt9271_touch_addr
	add	fp, #36
	rdbyte	local01, fp
	sub	fp, #36
	cmp	local01, #5 wc
 if_ae	jmp	#LR__0166
'     {
'       for (k = 0, i = 0;
	add	fp, #24
	wrbyte	#0, fp
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
LR__0164
	add	fp, #20
	rdbyte	local03, fp
	sub	fp, #20
	getbyte	local02, local03, #0
	cmp	local02, #32 wc
 if_ae	jmp	#LR__0165
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0165
	add	fp, #8
	rdlong	local03, fp
	add	fp, #16
	rdbyte	local02, fp
	shl	local02, #2
	add	local02, local03
	sub	fp, #4
	rdbyte	local03, fp
	getbyte	local01, local03, #0
	add	local01, #1
	add	fp, #20
	add	local01, fp
	rdbyte	local01, local01
	shl	local01, #8
	getbyte	local03, local03, #0
	add	local03, fp
	rdbyte	local03, local03
	or	local01, local03
	wrword	local01, local02
	sub	fp, #32
	rdlong	local03, fp
	add	fp, #16
	rdbyte	local02, fp
	shl	local02, #2
	add	local02, local03
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #20
	mov	local11, fp
	add	local10, fp
	rdbyte	local03, local10
	shl	local03, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local03, local16
	add	local02, #2
	wrword	local03, local02
	sub	fp, #16
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0164
LR__0165
LR__0166
	add	fp, #36
	rdbyte	local01, fp
	sub	fp, #36
	cmp	local01, #5 wc
 if_b	jmp	#LR__0172
'     {
'       for (k = 0, i = 0;
	add	fp, #24
	wrbyte	#0, fp
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
	loc	pa,	#(@LR__0168-@LR__0167)
	call	#FCACHE_LOAD_
LR__0167
	add	fp, #20
	rdbyte	local02, fp
	sub	fp, #20
	cmp	local02, #32 wc
 if_ae	jmp	#LR__0169
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0169
	add	fp, #8
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local14, fp
	getbyte	local10, local14, #0
	add	local10, #1
	add	fp, #20
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	getbyte	local14, local14, #0
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	wrword	local21, local20
	sub	fp, #32
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #20
	mov	local11, fp
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	add	local20, #2
	wrword	local21, local20
	sub	fp, #16
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0167
LR__0168
LR__0169
'            (i < 4 * 8) && (k < num); k++, i += 8)
'       {
'         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
'         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
'       }
' 
'       for (k = 4, i = 0;
	add	fp, #24
	wrbyte	#4, fp
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
LR__0170
	add	fp, #20
	rdbyte	local03, fp
	sub	fp, #20
	getbyte	local02, local03, #0
	cmp	local02, #32 wc
 if_ae	jmp	#LR__0171
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0171
	add	fp, #8
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local14, fp
	getbyte	local10, local14, #0
	add	local10, #1
	add	fp, #52
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	getbyte	local14, local14, #0
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	wrword	local21, local20
	sub	fp, #64
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #52
	mov	local11, fp
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	add	local20, #2
	wrword	local21, local20
	sub	fp, #48
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0170
LR__0171
LR__0172
	add	fp, #36
	rdbyte	local23, fp
	sub	fp, #36
	getbyte	local01, local23, #0
	cmp	local01, #9 wc
 if_b	jmp	#LR__0181
'     {
'       for (k = 0, i = 0;
	add	fp, #24
	wrbyte	#0, fp
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
	loc	pa,	#(@LR__0174-@LR__0173)
	call	#FCACHE_LOAD_
LR__0173
	add	fp, #20
	rdbyte	local02, fp
	sub	fp, #20
	cmp	local02, #32 wc
 if_ae	jmp	#LR__0175
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0175
	add	fp, #8
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local14, fp
	getbyte	local10, local14, #0
	add	local10, #1
	add	fp, #20
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	getbyte	local14, local14, #0
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	wrword	local21, local20
	sub	fp, #32
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #20
	mov	local11, fp
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	add	local20, #2
	wrword	local21, local20
	sub	fp, #16
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0173
LR__0174
LR__0175
'            (i < 4 * 8) && (k < num); k++, i += 8)
'       {
'         pLoc[k].x = tbuf[i + 1] << 8 | tbuf[i + 0];
'         pLoc[k].y = tbuf[i + 3] << 8 | tbuf[i + 2];
'       }
' 
'       for (k = 4, i = 0;
	add	fp, #24
	wrbyte	#4, fp
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
	loc	pa,	#(@LR__0177-@LR__0176)
	call	#FCACHE_LOAD_
LR__0176
	add	fp, #20
	rdbyte	local02, fp
	sub	fp, #20
	cmp	local02, #32 wc
 if_ae	jmp	#LR__0178
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0178
	add	fp, #8
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local14, fp
	getbyte	local10, local14, #0
	add	local10, #1
	add	fp, #52
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	getbyte	local14, local14, #0
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	wrword	local21, local20
	sub	fp, #64
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #52
	mov	local11, fp
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	add	local20, #2
	wrword	local21, local20
	sub	fp, #48
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0176
LR__0177
LR__0178
'            (i < 4 * 8) && (k < num); k++, i += 8)
'       {
'         pLoc[k].x = tbuf1[i + 1] << 8 | tbuf1[i + 0];
'         pLoc[k].y = tbuf1[i + 3] << 8 | tbuf1[i + 2];
'       }
' 
'       for (k = 8, i = 0;
	add	fp, #24
	wrbyte	#8, fp
	mov	local23, #0
	sub	fp, #4
	wrbyte	#0, fp
	sub	fp, #20
LR__0179
	add	fp, #20
	rdbyte	local03, fp
	sub	fp, #20
	getbyte	local02, local03, #0
	cmp	local02, #16 wc
 if_ae	jmp	#LR__0180
	add	fp, #24
	rdbyte	local04, fp
	getbyte	local05, local04, #0
	sub	fp, #12
	rdbyte	local06, fp
	sub	fp, #12
	getbyte	local07, local06, #0
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0180
	add	fp, #8
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local14, fp
	getbyte	local10, local14, #0
	add	local10, #1
	add	fp, #84
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	getbyte	local14, local14, #0
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	wrword	local21, local20
	sub	fp, #96
	rdlong	local22, fp
	add	fp, #16
	rdbyte	local20, fp
	shl	local20, #2
	add	local20, local22
	sub	fp, #4
	rdbyte	local08, fp
	getbyte	local09, local08, #0
	add	local09, #3
	mov	local10, local09
	add	fp, #84
	mov	local11, fp
	add	local10, fp
	rdbyte	local21, local10
	shl	local21, #8
	mov	local12, local08
	getbyte	local13, local12, #0
	add	local13, #2
	mov	local14, local13
	mov	local15, fp
	add	local14, fp
	rdbyte	local16, local14
	or	local21, local16
	add	local20, #2
	wrword	local21, local20
	sub	fp, #80
	rdbyte	local17, fp
	mov	local18, local17
	mov	local19, local17
	mov	local20, local19
	add	local20, #1
	wrbyte	local20, fp
	sub	fp, #4
	rdbyte	local21, fp
	getbyte	local22, local21, #0
	add	local22, #8
	wrbyte	local22, fp
	sub	fp, #20
	jmp	#LR__0179
LR__0180
LR__0181
	add	fp, #36
	rdbyte	local01, fp
	sub	fp, #20
	wrbyte	local01, fp
	sub	fp, #16
LR__0182
	add	fp, #28
	wrbyte	#0, fp
	sub	fp, #24
	rdlong	arg01, fp
	add	fp, #24
	mov	arg03, fp
	sub	fp, #28
	mov	arg02, ##33102
	mov	arg04, #1
	call	#_display_write_gt9271_touch_register
' 
'   ss[0] = 0;
'   display_write_gt9271_touch_register(display, 0x814e, ss, 1);
' 
'   return retVal;
	add	fp, #16
	rdbyte	result1, fp
	sub	fp, #16
	mov	ptra, fp
	call	#popregs_
_readGT9271TouchLocation_ret
	ret

_display_update_touch
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	local01, #32
	mov	arg02, local01
	mov	arg03, #1
	call	#_readGT9271TouchLocation
	getbyte	local02, result1, #0
	add	local01, #4
	rdword	result1, local01
	sub	local01, #4
	rdword	arg03, local01
	sub	local01, #32
	cmp	result1, arg03 wz
 if_ne	jmp	#LR__0183
	add	local01, #38
	rdword	result1, local01
	sub	local01, #4
	rdword	arg03, local01
	sub	local01, #34
	cmp	result1, arg03 wz
 if_e	jmp	#LR__0184
LR__0183
	add	local01, #40
	wrlong	local02, local01
	sub	local01, #40
	jmp	#LR__0185
LR__0184
	add	local01, #40
	wrlong	#0, local01
	sub	local01, #40
LR__0185
	add	local01, #36
	mov	arg01, local01
	sub	local01, #4
	mov	arg02, local01
	mov	arg03, #4
	call	#__system____builtin_memmove
'   {
'     display->locationCount = 0;
'   }
'   display->lastLocation[0] = display->location[0];
'   return touchCount;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_display_update_touch_ret
	ret

_lcdRegWrite
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	arg01, local01
	drvl	arg01
	add	local01, #56
	mov	arg01, #1
	mov	arg02, #0
	mov	arg03, #8
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local01
	sub	local01, #56
	getbyte	arg02, local02, #0
	mov	arg01, #1
	mov	arg03, #8
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local03
	rdlong	arg01, local01
	drvh	arg01
	mov	ptra, fp
	call	#popregs_
_lcdRegWrite_ret
	ret

_lcdDataWrite
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	arg01, local01
	drvl	arg01
	add	local01, #56
	mov	arg01, #1
	mov	arg02, #128
	mov	arg03, #8
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local01
	sub	local01, #56
	getbyte	arg02, local02, #0
	mov	arg01, #1
	mov	arg03, #8
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local03
	rdlong	arg01, local01
	drvh	arg01
	mov	ptra, fp
	call	#popregs_
_lcdDataWrite_ret
	ret

_lcdDataRead
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	drvl	arg01
	add	local01, #56
	mov	arg01, #1
	mov	arg02, #192
	mov	arg03, #8
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftout
	sub	local01, #48
	rdlong	arg01, local01
	drvh	arg01
	add	local01, #48
	mov	arg01, #1
	mov	arg02, #8
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftin
	mov	objptr, local02
	sub	local01, #56
	rdlong	arg01, local01
	drvh	arg01
' {
'   _pinl(display->xnscs);
' 
' 
' 
' 
'   display->spi.shiftout(1, 0x80 , (uint32_t)8);
'   display->spi.shiftout(1,data, (uint32_t)8);
'   _pinh(display->xnscs);
' }
' 
' 
' uint8_t lcdDataRead(Display *display)
' {
'   _pinl(display->xnscs);
' 
' 
'   display->spi.shiftout(1, 0xc0 , (uint32_t)8);
'   _pinh(display->spi_mosi);
' 
' 
'   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
'   _pinh(display->xnscs);
'   return data;
	mov	ptra, fp
	call	#popregs_
_lcdDataRead_ret
	ret

_lcdStatusRead
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	drvl	arg01
	add	local01, #56
	mov	arg01, #1
	mov	arg02, #64
	mov	arg03, #8
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftout
	sub	local01, #48
	rdlong	arg01, local01
	drvh	arg01
	add	local01, #48
	mov	arg01, #1
	mov	arg02, #8
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftin
	mov	objptr, local02
	sub	local01, #56
	rdlong	arg01, local01
	drvh	arg01
' }
' 
' 
' uint8_t lcdStatusRead(Display *display)
' {
'   _pinl(display->xnscs);
' 
' 
'   display->spi.shiftout(1, 0x40 , (uint32_t)8);
'   _pinh(display->spi_mosi);
' 
' 
'   uint8_t data = display->spi.shiftin(1, (uint32_t)8);
'   _pinh(display->xnscs);
'   return data;
	mov	ptra, fp
	call	#popregs_
_lcdStatusRead_ret
	ret

_lcdRegDataWrite
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local02
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_lcdRegDataWrite_ret
	ret

_lcdDataWrite16bbp
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	arg01, local01
	drvl	arg01
	add	local01, #56
	mov	arg01, #1
	mov	arg02, #128
	mov	arg03, #8
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local01
	getword	arg02, local02, #0
	mov	arg01, #1
	mov	arg03, #8
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local01
	sub	local01, #56
	getword	arg02, local02, #0
	shr	arg02, #8
	mov	arg01, #1
	mov	arg03, #8
	call	#_jm_spi_spin2_shiftout
	mov	objptr, local03
	rdlong	arg01, local01
	drvh	arg01
	mov	ptra, fp
	call	#popregs_
_lcdDataWrite16bbp_ret
	ret

_checkWriteFifoNotFull
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
' {
'   uint16_t i;
'   for (i = 0; i < 10000; i++)
	mov	local02, #0
LR__0186
	getword	result1, local02, #0
	cmp	result1, ##10000 wc
 if_ae	jmp	#LR__0187
	mov	arg01, local01
	call	#_lcdStatusRead
	getbyte	result1, result1, #0
	test	result1, #128 wz
'     {
'       break;
 if_ne	add	local02, #1
 if_ne	jmp	#LR__0186
LR__0187
	mov	ptra, fp
	call	#popregs_
_checkWriteFifoNotFull_ret
	ret

_check2dBusy
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
' {
'   uint32_t i;
'   for (i = 0; i < 1000000; i++)
	mov	local02, #0
LR__0188
	cmp	local02, ##1000000 wc
 if_ae	jmp	#LR__0189
	mov	arg01, #1
	call	#__system___waitus
	mov	arg01, local01
	call	#_lcdStatusRead
	getbyte	result1, result1, #0
	test	result1, #8 wz
'     {
'       break;
 if_ne	add	local02, #1
 if_ne	jmp	#LR__0188
LR__0189
	mov	ptra, fp
	call	#popregs_
_check2dBusy_ret
	ret

_checkSdramReady
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
' {
'   uint32_t i;
'   for (i = 0; i < 1000000; i++)
	mov	local02, #0
LR__0190
	cmp	local02, ##1000000 wc
 if_ae	jmp	#LR__0191
	mov	arg01, #1
	call	#__system___waitms
	mov	arg01, local01
	call	#_lcdStatusRead
	getbyte	result1, result1, #0
	and	result1, #4
	cmp	result1, #4 wz
'     {
'       return  (1) ;
 if_e	mov	result1, #1
 if_e	jmp	#LR__0192
	add	local02, #1
	jmp	#LR__0190
LR__0191
'     }
'   }
'   return  (0) ;
	mov	result1, #0
LR__0192
	mov	ptra, fp
	call	#popregs_
_checkSdramReady_ret
	ret

_bte_Source0_MemoryStartAddr
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #147
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #8
	mov	arg02, #148
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #16
	mov	arg02, #149
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	shr	local02, #24
	mov	arg02, #150
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_Source0_MemoryStartAddr_ret
	ret

_bte_Source0_ImageWidth
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #151
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #152
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_Source0_ImageWidth_ret
	ret

_bte_Source0_WindowStartXY
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #153
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #154
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #155
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #156
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_Source0_WindowStartXY_ret
	ret

_bte_DestinationMemoryStartAddr
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #167
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #8
	mov	arg02, #168
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	arg03, local02
	shr	arg03, #16
	mov	arg02, #169
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	shr	local02, #24
	mov	arg02, #170
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_DestinationMemoryStartAddr_ret
	ret

_bte_DestinationImageWidth
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, #171
	mov	arg03, local02
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #172
	mov	local03, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local03
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_DestinationImageWidth_ret
	ret

_bte_DestinationWindowStartXY
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #173
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #174
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #175
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #176
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_DestinationWindowStartXY_ret
	ret

_bte_WindowSize
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, #177
	mov	arg03, local02
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local02, #0
	shr	arg03, #8
	mov	arg02, #178
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	arg02, #179
	mov	arg03, local03
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	getword	arg03, local03, #0
	shr	arg03, #8
	mov	arg02, #180
	mov	local04, arg03
	mov	arg01, local01
	call	#_lcdRegWrite
	mov	arg01, local01
	mov	arg02, local04
	call	#_lcdDataWrite
	mov	ptra, fp
	call	#popregs_
_bte_WindowSize_ret
	ret

_strcpy
	mov	_var01, arg01
	cmp	arg02, #0 wz
 if_e	mov	result1, arg01
 if_e	jmp	#_strcpy_ret
	loc	pa,	#(@LR__0194-@LR__0193)
	call	#FCACHE_LOAD_
'         do {
LR__0193
	rdbyte	result1, arg02 wz
	wrbyte	result1, _var01
	add	arg02, #1
	add	_var01, #1
 if_ne	jmp	#LR__0193
LR__0194
' 	return(dst);
	mov	result1, arg01
_strcpy_ret
	ret

_strncpy
	mov	_var01, arg01
	loc	pa,	#(@LR__0196-@LR__0195)
	call	#FCACHE_LOAD_
' 
' 	dscan = dst;
' 	sscan = src;
' 	count = n;
' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
LR__0195
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_b	jmp	#LR__0197
	rdbyte	result1, arg02
	wrbyte	result1, _var01
	add	arg02, #1
	rdbyte	result1, _var01 wz
' 		continue;
	add	_var01, #1
 if_ne	jmp	#LR__0195
LR__0196
LR__0197
	loc	pa,	#(@LR__0199-@LR__0198)
	call	#FCACHE_LOAD_
' 	while (--count >= 0)
LR__0198
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_ae	mov	_var02, _var01
 if_ae	add	_var01, #1
 if_ae	wrbyte	#0, _var02
 if_ae	jmp	#LR__0198
LR__0199
' 		*dscan++ = '\0';
' 	return(dst);
	mov	result1, arg01
_strncpy_ret
	ret

_strcat
	cmps	arg02, #0 wz
 if_e	jmp	#LR__0203
' 	{
' 	    for (dscan = dst; *dscan != '\0'; dscan++)
	mov	_var01, arg01
	loc	pa,	#(@LR__0202-@LR__0200)
	call	#FCACHE_LOAD_
LR__0200
	rdbyte	_var02, _var01 wz
' 		continue;
 if_ne	add	_var01, #1
 if_ne	jmp	#LR__0200
' 	    while ((*dscan++ = *sscan++) != '\0')
LR__0201
	rdbyte	_var02, arg02
	wrbyte	_var02, _var01
	add	arg02, #1
	rdbyte	_var02, _var01 wz
' 			continue;
	add	_var01, #1
 if_ne	jmp	#LR__0201
LR__0202
LR__0203
' 	}
' 	return(dst);
	mov	result1, arg01
_strcat_ret
	ret

_strncat
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, arg03
	mov	_var04, _var02 wz
 if_e	jmp	#LR__0208
	cmp	_var03, #1 wc
 if_b	jmp	#LR__0208
' 	{
' 	    for (dscan = dst; *dscan != '\0'; dscan++)
	mov	_var05, _var01
	loc	pa,	#(@LR__0206-@LR__0204)
	call	#FCACHE_LOAD_
LR__0204
	rdbyte	_var06, _var05 wz
' 		continue;
 if_ne	add	_var05, #1
 if_ne	jmp	#LR__0204
	mov	_var07, _var03
' 	    count = n;
' 	    while ((c = *sscan++) != '\0' && --count >= 0)
LR__0205
	mov	_var08, _var04
	mov	_var09, _var04
	add	_var09, #1
	mov	_var04, _var09
	rdbyte	_var10, _var08
	mov	_var06, _var10
	zerox	_var06, #7 wz
 if_e	jmp	#LR__0207
	mov	_var11, _var07
	sub	_var11, #1
	mov	_var07, _var11
	cmps	_var07, #0 wc
 if_ae	mov	_var06, _var05
 if_ae	add	_var05, #1
 if_ae	wrbyte	_var10, _var06
 if_ae	jmp	#LR__0205
LR__0206
LR__0207
	mov	_var06, #0
	wrbyte	#0, _var05
LR__0208
' 		*dscan++ = c;
' 	    *dscan = '\0';
' 	}
' 	return(dst);
	mov	result1, _var01
_strncat_ret
	ret

_strcmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__0209
'             return scan2 ? -1 : 0;
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#_strcmp_ret
LR__0209
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#_strcmp_ret
	loc	pa,	#(@LR__0211-@LR__0210)
	call	#FCACHE_LOAD_
' 
' 	do {
LR__0210
	rdbyte	_var03, _var01 wz
	mov	_var04, arg02
	mov	_var05, arg02
	add	_var05, #1
	mov	arg02, _var05
	rdbyte	_var02, _var04
	add	_var01, #1
 if_e	jmp	#LR__0212
	cmp	_var03, _var02 wz
 if_e	jmp	#LR__0210
LR__0211
LR__0212
	cmp	_var03, _var02 wz
' 		return(0);
 if_e	mov	result1, #0
 if_e	jmp	#_strcmp_ret
	cmp	_var03, #0 wz
' 		return(-1);
 if_e	neg	result1, #1
 if_e	jmp	#_strcmp_ret
	cmp	_var02, #0 wz
' 		return(1);
 if_e	mov	result1, #1
' 		return(c1 - c2);
 if_ne	mov	result1, _var03
 if_ne	sub	result1, _var02
_strcmp_ret
	ret

_strncmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__0213
' 		return scan2 ? -1 : 0;
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#_strncmp_ret
LR__0213
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#_strncmp_ret
	mov	_var03, arg03
	loc	pa,	#(@LR__0215-@LR__0214)
	call	#FCACHE_LOAD_
' 	count = n;
' 	do {
LR__0214
	rdbyte	_var04, _var01
	mov	_var05, arg02
	mov	_var06, arg02
	add	_var06, #1
	mov	arg02, _var06
	rdbyte	_var07, _var05
	mov	_var02, _var03
	sub	_var02, #1
	mov	_var03, _var02
	cmps	_var03, #0 wc
	add	_var01, #1
 if_ae	cmp	_var04, #0 wz
 if_nc_and_z	jmp	#LR__0216
 if_ae	cmp	_var04, _var07 wz
 if_nc_and_z	jmp	#LR__0214
LR__0215
LR__0216
	cmps	_var03, #0 wc
' 		return(0);
 if_b	mov	result1, #0
 if_b	jmp	#_strncmp_ret
	cmp	_var04, _var07 wz
' 		return(0);
 if_e	mov	result1, #0
 if_e	jmp	#_strncmp_ret
	cmp	_var04, #0 wz
' 		return(-1);
 if_e	neg	result1, #1
 if_e	jmp	#_strncmp_ret
	cmp	_var07, #0 wz
' 		return(1);
 if_e	mov	result1, #1
' 		return(c1 - c2);
 if_ne	mov	result1, _var04
 if_ne	sub	result1, _var07
_strncmp_ret
	ret

_strrchr
	mov	_var01, #0
	loc	pa,	#(@LR__0218-@LR__0217)
	call	#FCACHE_LOAD_
' 
' 	place =  (0) ;
' 	while ((c = *s++) != 0)
LR__0217
	rdbyte	_var02, arg01 wz
	add	arg01, #1
 if_e	jmp	#LR__0219
	cmp	_var02, arg02 wz
 if_e	mov	_var01, arg01
 if_e	sub	_var01, #1
	jmp	#LR__0217
LR__0218
LR__0219
	cmp	arg02, #0 wz
 if_e	sub	arg01, #1
 if_e	mov	_var01, arg01
' 		place = (--s);
' 	return (char *)place;
	mov	result1, _var01
_strrchr_ret
	ret

_strlen
	mov	_var01, arg01 wz
	mov	_var02, _var01
	add	_var02, #1
	mov	_var03, _var02
 if_e	mov	result1, #0
 if_e	jmp	#_strlen_ret
	loc	pa,	#(@LR__0221-@LR__0220)
	call	#FCACHE_LOAD_
' 	while (*scan++ != '\0')
LR__0220
	rdbyte	_var02, _var01 wz
' 		continue;
	add	_var01, #1
 if_ne	jmp	#LR__0220
LR__0221
' 	return (size_t)((long)scan - (long)start);
	sub	_var01, _var03
	mov	result1, _var01
_strlen_ret
	ret

_json_create
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #36
	mov	local01, arg01
	add	fp, #16
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #20
	mov	arg01, objptr
	mov	arg02, ptr__poolInit_
	call	#__system___make_methodptr
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	mov	arg01, objptr
	mov	arg02, ptr__poolAlloc_
	call	#__system___make_methodptr
	add	fp, #32
	wrlong	result1, fp
' {
'     jsonStaticPool_t spool;
'     spool.mem = mem;
'     spool.qty = qty;
'     spool.pool.init = poolInit;
'     spool.pool.alloc = poolAlloc;
'     return json_createWithPool(str, &spool.pool);
	sub	fp, #4
	mov	arg02, fp
	sub	fp, #28
	mov	arg01, local01
	call	#_json_createWithPool
	mov	ptra, fp
	call	#popregs_
_json_create_ret
	ret

_json_getProperty
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
'     for (sibling = obj->u.c.child; sibling; sibling = sibling->sibling)
	add	local01, #8
	rdlong	local01, local01 wz
 if_e	jmp	#LR__0224
LR__0222
	add	local01, #4
	rdlong	result1, local01 wz
	sub	local01, #4
 if_e	jmp	#LR__0223
	add	local01, #4
	rdlong	arg01, local01
	sub	local01, #4
	mov	arg02, local02
	call	#_strcmp
	cmp	result1, #0 wz
'             return sibling;
 if_e	mov	result1, local01
 if_e	jmp	#LR__0225
LR__0223
	rdlong	local01, local01 wz
 if_ne	jmp	#LR__0222
LR__0224
'     return 0;
	mov	result1, #0
LR__0225
	mov	ptra, fp
	call	#popregs_
_json_getProperty_ret
	ret

_json_createWithPool
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg02
' {
'     return goWhile(str, " \n\r\t\f");
	mov	arg02, ##@LR__2251
	call	#_goWhile
	mov	local02, result1 wz
 if_e	jmp	#LR__0226
	rdbyte	arg01, local02
	cmp	arg01, #123 wz
 if_e	jmp	#LR__0227
	rdbyte	arg01, local02
	cmp	arg01, #91 wz
 if_e	jmp	#LR__0227
LR__0226
	mov	arg01, ##@LR__1826
	call	#_printf
'     {
'         printf("Error: json_createWithPool: invalid json string(missing opening {/[.\n");
'         return 0;
	mov	result1, #0
	jmp	#LR__0229
LR__0227
	rdlong	arg01, local01
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	add	local06, #4
	wrlong	#0, local06
	sub	local06, #4
	wrlong	#0, local06
	add	local06, #8
	wrlong	#0, local06
	sub	local06, #8
	mov	arg03, local01
	mov	arg01, local02
	mov	arg02, local06
	call	#_objValue
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0228
	mov	arg01, ##@LR__1827
	call	#_printf
'     {
'         printf("Error: json_createWithPool: invalid json string.\n");
'         return 0;
	mov	result1, #0
	jmp	#LR__0229
LR__0228
'     }
'     return obj;
	mov	result1, local06
LR__0229
	mov	ptra, fp
	call	#popregs_
_json_createWithPool_ret
	ret

_motion_quartet_init
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, ##@LR__1828
	mov	arg01, local01
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#0, local01
	sub	local01, #52
	mov	arg02, #0
	loc	pa,	#(@LR__0231-@LR__0230)
	call	#FCACHE_LOAD_
' {
'     __builtin_strcpy(quartet->name, "") ;
'     quartet->function = 0;
'     for (int i = 0; i <  10 ; i++)
LR__0230
	cmps	arg02, #10 wc
 if_ae	jmp	#LR__0232
	mov	arg01, arg02
	shl	arg01, #2
	add	local01, #56
	add	arg01, local01
	wrlong	#0, arg01
	add	arg02, #1
	sub	local01, #56
	jmp	#LR__0230
LR__0231
LR__0232
	add	local01, #96
	wrlong	#0, local01
	mov	ptra, fp
	call	#popregs_
_motion_quartet_init_ret
	ret

_motion_set_init
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, ##@LR__1829
	mov	arg01, local01
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#0, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1830
	call	#__system____builtin_strcpy
	add	local01, #12
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	sub	local01, #72
	mov	local02, #0
' {
'     __builtin_strcpy(set->name, "") ;
'     set->number = 0;
'     __builtin_strcpy(set->type, "") ;
'     set->executions = 0;
'     set->quartetCount = 0;
'     for (int i = 0; i <  10 ; i++)
LR__0233
	cmps	local02, #10 wc
 if_ae	jmp	#LR__0234
	qmul	local02, #100
	add	local01, #76
	getqx	arg01
	add	arg01, local01
	call	#_motion_quartet_init
	add	local02, #1
	sub	local01, #76
	jmp	#LR__0233
LR__0234
	mov	ptra, fp
	call	#popregs_
_motion_set_init_ret
	ret

_motion_profile_init
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, ##@LR__1831
	mov	arg01, local01
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	sub	local01, #56
	mov	local02, #0
' {
'     __builtin_strcpy(profile->name, "") ;
'     profile->number = 0;
'     profile->setCount = 0;
'     for (int i = 0; i <  15 ; i++)
LR__0235
	cmps	local02, #15 wc
 if_ae	jmp	#LR__0236
	qmul	local02, ##1076
	add	local01, #60
	getqx	arg01
	add	arg01, local01
	call	#_motion_set_init
	add	local02, #1
	sub	local01, #60
	jmp	#LR__0235
LR__0236
	mov	ptra, fp
	call	#popregs_
_motion_profile_init_ret
	ret

_machine_profile_to_json
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1832
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0237
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1833
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return JSON_FILE_ERROR;
	mov	result1, #201
	jmp	#LR__0238
LR__0237
	mov	arg02, ##@LR__1834
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1835
	mov	arg01, local03
	mov	arg03, local01
	call	#_string_to_json_0642
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1836
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1837
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1838
	add	local01, #20
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_int_to_json_0641
	mov	arg02, ##@LR__1839
	mov	arg01, local03
	call	#_fprintf
	add	local01, #4
	mov	arg02, local01
	mov	arg01, local03
	call	#_machine_configuration_to_json_0660
	mov	arg02, ##@LR__1840
	mov	arg01, local03
	call	#_fprintf
	add	local01, #100
	mov	arg01, local03
	mov	arg02, local01
	call	#_machine_performance_to_json_0661
	mov	arg02, ##@LR__1841
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
'     fprintf(file, ",");
' 
'     int_to_json(file, "Number", settings->number);
'     fprintf(file, ",");
' 
'     machine_configuration_to_json(file, &(settings->configuration));
'     fprintf(file, ",");
' 
'     machine_performance_to_json(file, &(settings->performance));
'     fprintf(file, "}");
'     fclose(file);
'     return SUCCESS;
	mov	result1, #0
LR__0238
	mov	ptra, fp
	call	#popregs_
_machine_profile_to_json_ret
	ret

_test_profile_to_json
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1842
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0239
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1843
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return JSON_FILE_ERROR;
	mov	result1, #201
	jmp	#LR__0240
LR__0239
	mov	arg02, ##@LR__1844
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1845
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1846
	add	local01, #4
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_int_to_json_0641
	mov	arg02, ##@LR__1847
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1848
	add	local01, #4
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1849
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1850
	add	local01, #4
	rdlong	local02, local01
	rdlong	arg03, local02
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1851
	mov	arg01, local03
	call	#_fprintf
	rdlong	local02, local01
	mov	arg02, ##@LR__1852
	rdlong	arg03, local02
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1853
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1854
	add	local01, #8
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1855
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
'     }
' 
'     fprintf(file, "{");
'     string_to_json(file, "Name", test->name);
' 
'     int_to_json(file, "Sample Serial Number", test->sampleSN);
'     fprintf(file, ",");
' 
'     string_to_json(file, "Machine Profile Name", test->machineProfile->name);
'     fprintf(file, ",");
' 
'     string_to_json(file, "Sample Profile Name", test->sampleProfile->name);
'     fprintf(file, ",");
' 
'     string_to_json(file, "Motion Profile Name", test->sampleProfile->name);
'     fprintf(file, ",");
' 
'     string_to_json(file, "Comment", test->comment);
'     fprintf(file, "}");
'     fclose(file);
'     return SUCCESS;
	mov	result1, #0
LR__0240
	mov	ptra, fp
	call	#popregs_
_test_profile_to_json_ret
	ret

_motion_profile_to_json
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1856
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0241
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1857
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return JSON_FILE_ERROR;
	mov	result1, #201
	jmp	#LR__0244
LR__0241
	mov	arg02, ##@LR__1858
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1859
	mov	arg01, local03
	mov	arg03, local01
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1860
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1861
	add	local01, #52
	rdlong	arg03, local01
	sub	local01, #52
	mov	arg01, local03
	call	#_int_to_json_0641
	mov	arg02, ##@LR__1862
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
	mov	arg02, ##@LR__1863
	call	#_fprintf
	mov	local04, #0
'     }
' 
'     fprintf(file, "{");
' 
'     string_to_json(file, "Name", motion->name);
'     fprintf(file, ",");
' 
'     int_to_json(file, "Number", motion->number);
'     fprintf(file, ",");
' 
'     fprintf(file, "\"Motion Sets\":[");
'     for (int i = 0; i < motion->setCount; i++)
LR__0242
	add	local01, #56
	rdlong	arg01, local01
	sub	local01, #56
	cmps	local04, arg01 wc
 if_ae	jmp	#LR__0243
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1864
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	qmul	local04, ##1076
	add	local01, #60
	mov	arg01, #0
	mov	arg03, #0
	getqx	arg02
	add	arg02, local01
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	qmul	local04, ##1076
	wrlong	#0, result1
	mov	arg02, ##@LR__1865
	mov	arg01, local03
	getqx	local02
	add	local02, local01
	mov	arg03, ptra
	wrlong	local02, ptra++
	call	#_fprintf
	sub	ptra, #4
	sub	local01, #4
	rdlong	local02, local01
	sub	local01, #56
	sub	local02, #1
	cmps	local04, local02 wc
 if_b	mov	arg02, ##@LR__1866
 if_b	mov	arg01, local03
 if_b	call	#_fprintf
	add	local04, #1
	jmp	#LR__0242
LR__0243
	mov	arg02, ##@LR__1867
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
'         {
'             fprintf(file, ",");
'         }
'     }
'     fprintf(file, "]}");
'     fclose(file);
'     return SUCCESS;
	mov	result1, #0
LR__0244
	mov	ptra, fp
	call	#popregs_
_motion_profile_to_json_ret
	ret

_motion_set_to_json
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1868
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0245
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1869
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return JSON_FILE_ERROR;
	mov	result1, #201
	jmp	#LR__0248
LR__0245
	mov	arg02, ##@LR__1870
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1871
	mov	arg01, local03
	mov	arg03, local01
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1872
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1873
	add	local01, #52
	rdlong	arg03, local01
	mov	arg01, local03
	call	#_int_to_json_0641
	mov	arg02, ##@LR__1874
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1875
	add	local01, #4
	mov	arg03, local01
	mov	arg01, local03
	call	#_string_to_json_0642
	mov	arg02, ##@LR__1876
	mov	arg01, local03
	call	#_fprintf
	mov	arg02, ##@LR__1877
	add	local01, #12
	rdlong	arg03, local01
	sub	local01, #68
	mov	arg01, local03
	call	#_int_to_json_0641
	mov	arg02, ##@LR__1878
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
	mov	arg02, ##@LR__1879
	call	#_fprintf
	mov	local04, #0
'     }
' 
'     fprintf(file, "{");
' 
'     string_to_json(file, "Name", set->name);
'     fprintf(file, ",");
' 
'     int_to_json(file, "Number", set->number);
'     fprintf(file, ",");
' 
'     string_to_json(file, "Type", set->type);
'     fprintf(file, ",");
' 
'     int_to_json(file, "Executions", set->executions);
'     fprintf(file, ",");
' 
' 
'     fprintf(file, "\"Quartets\":[");
'     for (int i = 0; i < set->quartetCount; i++)
LR__0246
	add	local01, #72
	rdlong	arg02, local01
	sub	local01, #72
	cmps	local04, arg02 wc
 if_ae	jmp	#LR__0247
	qmul	local04, #100
	mov	arg02, ##@LR__1880
	add	local01, #76
	mov	arg01, local03
	getqx	local02
	add	local02, local01
	mov	arg03, ptra
	wrlong	local02, ptra++
	call	#_fprintf
	sub	ptra, #4
	sub	local01, #4
	rdlong	local02, local01
	sub	local01, #72
	sub	local02, #1
	cmps	local04, local02 wc
 if_b	mov	arg02, ##@LR__1881
 if_b	mov	arg01, local03
 if_b	call	#_fprintf
	add	local04, #1
	jmp	#LR__0246
LR__0247
	mov	arg02, ##@LR__1882
	mov	arg01, local03
	call	#_fprintf
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
'         {
'             fprintf(file, ",");
'         }
'     }
'     fprintf(file, "]}");
'     fclose(file);
'     return SUCCESS;
	mov	result1, #0
LR__0248
	mov	ptra, fp
	call	#popregs_
_motion_set_to_json_ret
	ret

_motion_quartet_to_json
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #452
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #8
	mov	local01, ##@LR__1883
	mov	arg01, arg02
	mov	arg02, local01
	call	#_fopen
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0249
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1884
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	fp, #8
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return JSON_FILE_ERROR;
	mov	result1, #201
	jmp	#LR__0252
LR__0249
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1885
	call	#_fprintf
	add	fp, #12
	rdlong	arg01, fp
	mov	arg02, ##@LR__1886
	sub	fp, #8
	rdlong	arg03, fp
	sub	fp, #4
	call	#_string_to_json_0642
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1887
	call	#_fprintf
	add	fp, #12
	rdlong	arg01, fp
	mov	arg02, ##@LR__1888
	sub	fp, #8
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #52
	rdlong	arg03, arg03
	call	#_int_to_json_0641
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1889
	call	#_fprintf
	add	fp, #16
	mov	arg01, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #52
	rdlong	arg02, arg02
	call	#_get_function_info
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1890
	call	#_fprintf
	add	fp, #448
	wrlong	#0, fp
	sub	fp, #448
'     }
'     fprintf(file, "{");
'     string_to_json(file, "Name", quartet->name);
'     fprintf(file, ",");
' 
'     int_to_json(file, "Function", quartet->function);
'     fprintf(file, ",");
' 
'     FunctionInfo info;
'     get_function_info(&info, quartet->function);
'     fprintf(file, "\"Parameters\":[");
'     for (int i = 0; i < info.args_count; i++)
LR__0250
	add	fp, #448
	rdlong	arg02, fp
	sub	fp, #404
	rdlong	arg01, fp
	sub	fp, #44
	cmps	arg02, arg01 wc
 if_ae	jmp	#LR__0251
	add	fp, #12
	rdlong	arg01, fp
	mov	arg02, ##@LR__1891
	sub	fp, #8
	rdlong	local01, fp
	add	fp, #444
	rdlong	arg03, fp
	sub	fp, #448
	shl	arg03, #2
	add	local01, #56
	add	arg03, local01
	rdlong	local01, arg03
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_fprintf
	sub	ptra, #4
	add	fp, #44
	rdlong	local01, fp
	sub	local01, #1
	add	fp, #404
	rdlong	local02, fp
	sub	fp, #448
	cmps	local02, local01 wc
 if_b	add	fp, #12
 if_b	rdlong	arg01, fp
 if_b	sub	fp, #12
 if_b	mov	arg02, ##@LR__1892
 if_b	call	#_fprintf
	add	fp, #448
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, #448
	jmp	#LR__0250
LR__0251
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1893
	call	#_fprintf
	add	fp, #12
	rdlong	arg01, fp
	mov	arg02, ##@LR__1894
	sub	fp, #8
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #96
	rdlong	arg03, local02
	call	#_double_to_json_0640
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	mov	arg02, ##@LR__1895
	call	#_fprintf
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
' {
'     return _closeraw(f);
	call	#__closeraw
'         {
'             fprintf(file, ",");
'         }
'     }
'     fprintf(file, "],");
'     double_to_json(file, "Dwell", quartet->dwell);
'     fprintf(file, "}");
'     fclose(file);
'     return SUCCESS;
	mov	result1, #0
LR__0252
	mov	ptra, fp
	call	#popregs_
_motion_quartet_to_json_ret
	ret

_json_to_machine_profile
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1896
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0253
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1897
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0261
LR__0253
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	mov	arg01, local03
	call	#_ftell
	mov	local04, result1
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg02, local04
	mov	arg03, #1
	mov	arg04, local03
	call	#_fread
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
	add	ptr__dat__, ##88426
	add	local04, ptr__dat__
	wrbyte	#0, local04
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
 if_ne	jmp	#LR__0254
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1898
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0261
LR__0254
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	mov	arg03, #200
	sub	ptr__dat__, ##90428
	call	#_json_create
	mov	local05, result1 wz
 if_e	jmp	#LR__0255
	mov	arg01, local05
' {
'     return json->type;
	add	arg01, #16
	rdlong	result1, arg01 wz
 if_e	jmp	#LR__0256
LR__0255
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1899
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0261
LR__0256
	mov	arg02, ##@LR__1900
	mov	arg01, local05
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #20
	call	#_strncpy
	mov	arg02, ##@LR__1901
	mov	arg01, local05
	call	#_json_property_to_int_0646
	add	local01, #20
	wrlong	result1, local01
	sub	local01, #20
	mov	arg02, ##@LR__1902
	mov	arg01, local05
	call	#_json_getProperty
	mov	local06, result1 wz
 if_e	jmp	#LR__0257
	mov	arg01, local06
' {
'     return json->type;
	add	arg01, #16
	rdlong	result1, arg01 wz
 if_e	jmp	#LR__0258
LR__0257
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1903
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0258
	add	local01, #24
	mov	arg02, local01
	sub	local01, #24
	mov	arg01, local06
	call	#_json_to_machine_configuration_0658
	mov	arg02, ##@LR__1904
	mov	arg01, local05
	call	#_json_getProperty
	mov	local07, result1 wz
 if_e	jmp	#LR__0259
	mov	arg01, local07
' {
'     return json->type;
	add	arg01, #16
	rdlong	result1, arg01 wz
 if_e	jmp	#LR__0260
LR__0259
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1905
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0260
	add	local01, #124
	mov	arg02, local01
	mov	arg01, local07
	call	#_json_to_machine_performance_0659
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0261
	mov	ptra, fp
	call	#popregs_
_json_to_machine_profile_ret
	ret

_json_to_sample_profile
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__1906
	mov	arg01, local02
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0262
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1907
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0263
LR__0262
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	mov	arg01, local03
	call	#_ftell
	mov	local02, result1
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg02, local02
	mov	arg03, #1
	mov	arg04, local03
	call	#_fread
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
	add	ptr__dat__, ##88426
	add	local02, ptr__dat__
	wrbyte	#0, local02
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##90428
	mov	arg03, #200
	call	#_json_create
	mov	local03, result1
	rdlong	local02, local01
	mov	arg02, ##@LR__1908
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local02
	mov	arg03, #50
	call	#_strncpy
	mov	arg02, ##@LR__1909
	mov	arg01, local03
	call	#_json_property_to_int_0646
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1910
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1911
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1912
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1913
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1914
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1915
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	mov	arg02, ##@LR__1916
	mov	arg01, local03
	call	#_json_property_to_double_0648
	add	local01, #4
	wrlong	result1, local01
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0263
	mov	ptra, fp
	call	#popregs_
_json_to_sample_profile_ret
	ret

_json_to_test_profile
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1917
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1918
	mov	arg01, local01
	call	#_fopen
	mov	local03, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1919
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	cmp	local03, #0 wz
 if_ne	jmp	#LR__0264
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1920
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0265
LR__0264
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	mov	arg01, local03
	call	#_ftell
	mov	local01, result1
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1921
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg02, local01
	mov	arg03, #1
	mov	arg04, local03
	call	#_fread
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
	add	ptr__dat__, ##88426
	add	local01, ptr__dat__
	wrbyte	#0, local01
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##90428
	mov	arg03, #200
	call	#_json_create
	mov	local03, result1
	rdlong	local01, local02
	mov	arg02, ##@LR__1922
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #50
	call	#_strncpy
	mov	arg02, ##@LR__1923
	mov	arg01, local03
	call	#_json_property_to_int_0646
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__1924
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg02, result1
	add	local02, #4
	rdlong	arg01, local02
	call	#_json_to_machine_profile
	mov	arg02, ##@LR__1925
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg02, result1
	add	local02, #4
	rdlong	arg01, local02
	call	#_json_to_sample_profile
	mov	arg02, ##@LR__1926
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg01, result1
	add	local02, #4
	rdlong	arg02, local02
	call	#_json_to_motion_profile
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0265
	mov	ptra, fp
	call	#popregs_
_json_to_test_profile_ret
	ret

_json_to_motion_profile
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, ##788
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	mov	arg02, ##@LR__1927
	call	#_fopen
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0266
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1928
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg02, fp
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0271
LR__0266
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1929
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	call	#_ftell
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	rdlong	arg04, fp
	sub	fp, #8
	mov	arg03, #1
	call	#_fread
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
' {
'     return _closeraw(f);
	call	#__closeraw
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	ptr__dat__, ##88426
	add	arg01, ptr__dat__
	wrbyte	#0, arg01
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##90428
	mov	arg03, #200
	call	#_json_create
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #12
	rdlong	local01, fp
	mov	arg01, result1
	sub	fp, #4
	mov	arg02, ##@LR__1930
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #50
	call	#_strncpy
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1931
	call	#_json_property_to_int_0646
	add	local01, #52
	wrlong	result1, local01
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1932
	call	#_json_getProperty
	add	fp, #20
	wrlong	result1, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #4
	rdlong	arg01, fp
' {
'     return json->u.c.child;
	add	arg01, #8
	rdlong	local01, arg01
	add	fp, ##760
	wrlong	local01, fp
	sub	fp, ##780
'     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
LR__0267
	add	fp, ##780
	rdlong	local01, fp wz
	sub	fp, ##780
 if_e	jmp	#LR__0268
	add	fp, #24
	rdlong	local01, fp
	qmul	local01, #50
	add	fp, #4
' {
'     return property->u.value;
	mov	arg03, #50
	getqx	local01
	add	local01, fp
	add	fp, ##752
	rdlong	arg01, fp
	sub	fp, ##780
	add	arg01, #8
	rdlong	arg02, arg01
	mov	arg01, local01
	call	#_strncpy
	add	fp, #24
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	add	fp, ##756
	rdlong	arg01, fp
' {
'     return json->sibling;
	rdlong	result1, arg01
	wrlong	result1, fp
	sub	fp, ##780
	jmp	#LR__0267
LR__0268
	add	fp, #4
	rdlong	local01, fp
	add	fp, #20
	rdlong	local02, fp
	add	local01, #56
	wrlong	local02, local01
	add	fp, ##760
	wrlong	#0, fp
	sub	fp, ##784
'     {
'         strncpy(filenames[index], json_getValue(property),  50 );
'         index++;
'     }
'     profile->setCount = index;
' 
'     for (int i = 0; i < profile->setCount; i++)
LR__0269
	add	fp, #4
	rdlong	local01, fp
	add	fp, ##780
	rdlong	local02, fp
	sub	fp, ##784
	add	local01, #56
	rdlong	local01, local01
	cmps	local02, local01 wc
 if_ae	jmp	#LR__0270
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1933
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	fp, ##784
	rdlong	local02, fp
	qmul	local02, #50
	sub	fp, ##756
	mov	arg01, #0
	mov	arg03, #0
	getqx	arg02
	add	arg02, fp
	sub	fp, #28
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, ##784
	rdlong	local02, fp
	qmul	local02, #50
	getqx	arg01
	qmul	local02, ##1076
	sub	fp, ##756
	add	arg01, fp
	sub	fp, #24
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #60
	getqx	arg02
	add	arg02, local02
	call	#_json_to_motion_set
	add	fp, ##784
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, ##784
	jmp	#LR__0269
LR__0270
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0271
	mov	ptra, fp
	call	#popregs_
_json_to_motion_profile_ret
	ret

_json_to_motion_set
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, ##536
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	mov	arg02, ##@LR__1934
	call	#_fopen
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0272
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1935
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg02, fp
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0277
LR__0272
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	call	#_ftell
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	rdlong	arg04, fp
	sub	fp, #8
	mov	arg03, #1
	call	#_fread
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
' {
'     return _closeraw(f);
	call	#__closeraw
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	ptr__dat__, ##88426
	add	arg01, ptr__dat__
	wrbyte	#0, arg01
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##90428
	mov	arg03, #200
	call	#_json_create
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #12
	rdlong	local01, fp
	mov	arg01, result1
	sub	fp, #4
	mov	arg02, ##@LR__1936
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #50
	call	#_strncpy
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1937
	call	#_json_property_to_int_0646
	add	local01, #52
	wrlong	result1, local01
	add	fp, #4
	rdlong	local01, fp
	add	local01, #56
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1938
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #10
	call	#_strncpy
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1939
	call	#_json_property_to_int_0646
	add	local01, #68
	wrlong	result1, local01
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__1940
	call	#_json_getProperty
	add	fp, ##520
	wrlong	result1, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #4
	rdlong	arg01, fp
' {
'     return json->u.c.child;
	add	arg01, #8
	rdlong	local01, arg01
	add	fp, #8
	wrlong	local01, fp
	sub	fp, ##528
'     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
LR__0273
	add	fp, ##528
	rdlong	local01, fp wz
	sub	fp, ##528
 if_e	jmp	#LR__0274
	add	fp, ##524
	rdlong	local01, fp
	qmul	local01, #50
	sub	fp, #504
' {
'     return property->u.value;
	mov	arg03, #50
	getqx	local01
	add	local01, fp
	add	fp, #508
	rdlong	arg01, fp
	sub	fp, ##528
	add	arg01, #8
	rdlong	arg02, arg01
	mov	arg01, local01
	call	#_strncpy
	add	fp, ##524
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	add	fp, #4
	rdlong	arg01, fp
' {
'     return json->sibling;
	rdlong	result1, arg01
	wrlong	result1, fp
	sub	fp, ##528
	jmp	#LR__0273
LR__0274
	add	fp, #4
	rdlong	local01, fp
	add	fp, ##520
	rdlong	local02, fp
	add	local01, #72
	wrlong	local02, local01
	add	fp, #8
	wrlong	#0, fp
	sub	fp, ##532
'     {
'         strncpy(filenames[index], json_getValue(property),  50 );
'         index++;
'     }
'     set->quartetCount = index;
' 
'     for (int i = 0; i < set->quartetCount; i++)
LR__0275
	add	fp, #4
	rdlong	local01, fp
	add	fp, ##528
	rdlong	local02, fp
	sub	fp, ##532
	add	local01, #72
	rdlong	local01, local01
	cmps	local02, local01 wc
 if_ae	jmp	#LR__0276
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1941
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	fp, ##532
	rdlong	local02, fp
	qmul	local02, #50
	sub	fp, ##512
	mov	arg01, #0
	mov	arg03, #0
	getqx	arg02
	add	arg02, fp
	sub	fp, #20
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, ##532
	rdlong	local02, fp
	qmul	local02, #50
	getqx	arg01
	qmul	local02, #100
	sub	fp, ##512
	add	arg01, fp
	sub	fp, #16
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #76
	getqx	arg02
	add	arg02, local02
	call	#_json_to_motion_quartet
	add	fp, ##532
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, ##532
	jmp	#LR__0275
LR__0276
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0277
	mov	ptra, fp
	call	#popregs_
_json_to_motion_set_ret
	ret

_json_to_motion_quartet
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1942
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1943
	mov	arg01, local01
	call	#_fopen
	mov	local03, result1 wz
 if_ne	jmp	#LR__0278
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1944
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return  (0) ;
	jmp	#LR__0279
LR__0278
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1945
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##94428
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##94428
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #2
	call	#_fseek
	mov	arg01, local03
	call	#_ftell
	mov	local01, result1
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #0
	call	#_fseek
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg02, local01
	mov	arg03, #1
	mov	arg04, local03
	call	#_fread
	mov	arg01, local03
' {
'     return _closeraw(f);
	call	#__closeraw
	add	ptr__dat__, ##88426
	add	local01, ptr__dat__
	wrbyte	#0, local01
	mov	arg01, #0
	sub	ptr__dat__, ##88426
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	ptr__dat__, ##88426
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##88426
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##88426
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##2002
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##90428
	mov	arg03, #200
	call	#_json_create
	mov	local03, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1946
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1947
	mov	arg01, local03
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local02
	mov	arg03, #50
	call	#_strncpy
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1948
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1949
	mov	arg01, local03
	call	#_json_property_to_int_0646
	mov	local01, result1
	add	local02, #52
	wrlong	local01, local02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1950
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local02, #4
	mov	arg01, local02
	mov	arg03, ##@LR__1951
	mov	arg02, local03
	call	#_json_property_to_double_array_0652
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1952
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg02, local02
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg02, ##@LR__1953
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1954
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__1955
	mov	arg01, local03
	call	#_json_property_to_double_0648
	mov	local03, result1
	add	local02, #40
	wrlong	local03, local02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1956
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##94428
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##94428
LR__0279
	mov	ptra, fp
	call	#popregs_
_json_to_motion_quartet_ret
	ret

_json_print_machine_profile
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1957
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1958
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #20
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #4
	mov	arg01, local01
	call	#_json_print_machine_configuration_0675
	add	local01, #100
	mov	arg01, local01
	call	#_json_print_machine_performance_0676
	mov	ptra, fp
	call	#popregs_
_json_print_machine_profile_ret
	ret

_json_print_motion_profile
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1959
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1960
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #52
	rdlong	arg02, local01
	sub	local01, #52
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1961
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local02, #0
'     for (int i = 0; i < profile->setCount; i++)
LR__0280
	add	local01, #56
	rdlong	arg01, local01
	sub	local01, #56
	cmps	local02, arg01 wc
 if_ae	jmp	#LR__0281
	qmul	local02, ##1076
	add	local01, #60
	getqx	arg01
	add	arg01, local01
	call	#_json_print_motion_set
	add	local02, #1
	sub	local01, #60
	jmp	#LR__0280
LR__0281
	mov	ptra, fp
	call	#popregs_
_json_print_motion_profile_ret
	ret

_raw_to_force
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg02
' {
'     return  __builtin_round(raw - configuration->forceGaugeZeroFactor)  / (configuration->forceGaugeScaleFactor);
	add	local01, #96
	rdlong	result1, local01
	sub	arg01, result1
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, #1
	call	#__system___float_tointeger
	mov	arg01, result1
	call	#__system___float_fromint
	mov	arg01, result1
	sub	local01, #4
	rdlong	arg02, local01
	call	#__system___float_div
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	ptra, fp
	call	#popregs_
_raw_to_force_ret
	ret

_force_gauge_get_raw
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
 if_ne	wrlong	#0, local02
	mov	arg01, local01
	mov	arg02, #1
	call	#_read_register_1606
	getbyte	result1, result1, #0
	cmp	result1, #216 wz
 if_e	jmp	#LR__0282
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1962
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	cmp	local02, #0 wz
 if_ne	wrlong	#152, local02
'         seterror(err,FORCEGAUGE_CONNECTION_LOST);
'         return 0;
	mov	result1, #0
	jmp	#LR__0283
LR__0282
	mov	arg01, local01
	mov	arg02, #2
	call	#_read_register_1606
	add	local01, #12
	mov	arg01, #85
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	mov	arg01, #16
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	mov	arg01, #100
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local01
	mov	arg01, #100
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	local03, result1
	mov	objptr, local01
	mov	arg01, #100
	call	#_jm_fullduplexserial_spin2_rxtime
	shl	result1, #8
	or	local03, result1
	mov	arg01, #100
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local02
	shl	result1, #16
'     forceRaw |= forceGauge->serial.rxtime(100) << 8;
'     forceRaw |= forceGauge->serial.rxtime(100) << 16;
'     return forceRaw;
	or	result1, local03
LR__0283
	mov	ptra, fp
	call	#popregs_
_force_gauge_get_raw_ret
	ret

_force_gauge_begin
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg01, #100
	call	#__system___waitms
	add	local01, #12
	mov	arg01, local02
	mov	arg02, local03
	mov	arg03, #3
	mov	arg04, ##38400
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_start
	mov	objptr, local01
	mov	arg01, #85
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	sub	local01, #12
	mov	arg01, #6
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local03
	mov	arg01, #100
	call	#__system___waitms
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #216
	call	#_write_register_1604
	mov	arg01, local01
	mov	arg02, #2
	mov	arg03, #64
	call	#_write_register_1604
	mov	arg01, local01
	mov	arg02, #4
	mov	arg03, #119
	call	#_write_register_1604
	mov	arg01, local01
	mov	arg02, #1
	call	#_read_register_1606
	getbyte	result1, result1, #0
	cmp	result1, #216 wz
'     {
'         return FORCEGAUGE_NOT_RESPONDING;
 if_ne	mov	result1, #151
 if_ne	jmp	#LR__0284
	mov	arg01, local01
	mov	arg02, #2
	call	#_read_register_1606
	getbyte	result1, result1, #0
	cmp	result1, #64 wz
'     {
'         return FORCEGAUGE_NOT_RESPONDING;
 if_ne	mov	result1, #151
 if_ne	jmp	#LR__0284
	mov	arg01, local01
	mov	arg02, #4
	call	#_read_register_1606
	getbyte	result1, result1, #0
	cmp	result1, #119 wz
'     {
'         return FORCEGAUGE_NOT_RESPONDING;
 if_ne	mov	result1, #151
 if_ne	jmp	#LR__0284
	add	local01, #12
	mov	local04, local01
	mov	arg01, #85
	mov	local03, objptr
	mov	objptr, local04
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	mov	arg01, #8
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local03
'     }
' 
'     forceGauge->serial.tx(0x55);
'     forceGauge->serial.tx(0x08);
'     return SUCCESS;
	mov	result1, #0
LR__0284
	mov	ptra, fp
	call	#popregs_
_force_gauge_begin_ret
	ret

_module_animation_switch_page_up
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #100
' 
'     for (int i = movePx; i <  600  - movePx; i += movePx)
LR__0285
	cmps	local02, #500 wc
 if_ae	jmp	#LR__0286
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, local02
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #500
	decod	arg10, #10
	mov	arg11, #100
	call	#_display_bte_memory_copy
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #100
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, #500
	call	#_display_bte_memory_copy
	add	local02, #100
	jmp	#LR__0285
LR__0286
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	mov	ptra, fp
	call	#popregs_
_module_animation_switch_page_up_ret
	ret

_module_animation_switch_page_down
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #40
'     for (int i = movePx; i <  600  - movePx; i += movePx)
LR__0287
	cmps	local02, ##560 wc
 if_ae	jmp	#LR__0288
	mov	arg01, local01
	mov	arg05, ##600
	sub	arg05, local02
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, local02
	call	#_display_bte_memory_copy
	add	local02, #40
	jmp	#LR__0287
LR__0288
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	mov	ptra, fp
	call	#popregs_
_module_animation_switch_page_down_ret
	ret

_module_init
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	wrlong	local02, local01
	add	local01, #204
	wrlong	#0, local01
	add	local01, #24
	wrlong	#0, local01
	add	local01, #52
	wrbyte	#1, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#100, local01
	add	local01, #20
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	sub	local01, #84
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
	add	local01, #4
	wrlong	##-1, local01
	add	local01, #32
	wrlong	#0, local01
	mov	arg01, objptr
	mov	arg02, ptr__module_animation_touch_1620_
	call	#__system___make_methodptr
	add	local01, #4
	wrlong	result1, local01
	add	local01, #4
	wrlong	#0, local01
	sub	local01, #304
	cmp	local02, #0 wz
 if_e	jmp	#LR__0291
	add	local02, #228
	rdlong	local03, local02
	sub	local02, #228
	cmps	local03, #50 wc
 if_ae	jmp	#LR__0289
	add	local02, #228
	rdlong	local03, local02
	add	local03, #1
	wrlong	local03, local02
	sub	local03, #1
	shl	local03, #2
	sub	local02, #224
	add	local03, local02
	wrlong	local01, local03
	jmp	#LR__0290
LR__0289
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1963
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0290
LR__0291
	mov	ptra, fp
	call	#popregs_
_module_init_ret
	ret

_module_update_check
	mov	COUNT_, #5
	call	#pushregs_
_module_update_check_enter
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	add	local02, #204
	rdlong	local04, local02
	sub	local02, #204
	cmp	local04, #8 wz
 if_e	add	local02, #208
 if_e	rdlong	local03, local02
 if_e	sub	local02, #208
	mov	local05, #0
'     {
'         arg = module->data.ptr;
'     }
'     for (int i = 0; i < module->numChildren; i++)
LR__0292
	add	local02, #228
	rdlong	local04, local02
	sub	local02, #228
	cmps	local05, local04 wc
 if_ae	jmp	#LR__0293
	mov	arg01, local01
	mov	local04, local05
	shl	local04, #2
	add	local02, #4
	add	local04, local02
	rdlong	arg02, local04
	mov	arg03, local03
	call	#_module_update_check
	add	local05, #1
	sub	local02, #4
	jmp	#LR__0292
LR__0293
	add	local02, #312
	rdlong	arg01, local02
	sub	local02, #312
	mov	arg02, #0
	call	#__system___funcptr_cmp
	cmp	result1, #0 wz
 if_e	jmp	#LR__0294
	add	local02, #312
	rdlong	local04, local02
	sub	local02, #312
	rdlong	local05, local04
	add	local04, #4
	rdlong	local04, local04
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local03
	mov	local03, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local03
LR__0294
	mov	ptra, fp
	call	#popregs_
_module_update_check_ret
	ret

_module_touch_check
	mov	COUNT_, #18
	call	#pushregs_
_module_touch_check_enter
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	add	local02, #40
	rdlong	arg02, local02 wz
	sub	local02, #40
 if_ne	add	local01, #280
 if_ne	rdbyte	local04, local01
 if_ne	sub	local01, #280
 if_ne	cmps	local04, #0 wz
'     {
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0301
	add	local01, #204
	rdlong	local05, local01
	sub	local01, #204
	cmp	local05, #8 wz
 if_e	add	local01, #208
 if_e	rdlong	local03, local01
 if_e	sub	local01, #208
	mov	local06, #0
	mov	local07, #0
'     for (int i = 0; i < root->numChildren; i++)
LR__0295
	add	local01, #228
	rdlong	local05, local01
	sub	local01, #228
	cmps	local07, local05 wc
 if_ae	jmp	#LR__0296
	mov	local04, local07
	shl	local04, #2
	add	local01, #4
	add	local04, local01
	rdlong	arg01, local04
	mov	arg02, local02
	mov	arg03, local03
	call	#_module_touch_check
	mov	local08, result1
	add	local06, result1
	add	local07, #1
	sub	local01, #4
	jmp	#LR__0295
LR__0296
	add	local01, #308
	rdlong	arg01, local01
	mov	arg02, #0
	call	#__system___funcptr_cmp
	cmp	result1, #0 wz
	add	local02, #32
	rdword	local04, local02
	sub	local02, #32
	decod	local05, #10
	sub	local05, local04
	sub	local01, #76
	rdlong	local04, local01
	sub	local01, #232
	cmps	local05, local04 wcz
 if_be	jmp	#LR__0300
	add	local02, #32
	rdword	local09, local02
	sub	local02, #32
	getword	local10, local09, #0
	decod	local11, #10
	sub	local11, local10
	add	local01, #232
	rdlong	local12, local01
	mov	local13, local12
	add	local01, #8
	rdlong	local14, local01
	sub	local01, #240
	mov	local15, local14
	add	local13, local14
	cmps	local11, local13 wc
 if_ae	jmp	#LR__0300
	add	local02, #34
	rdword	local16, local02
	sub	local02, #34
	getword	local17, local16, #0
	mov	local05, ##600
	sub	local05, local17
	add	local01, #236
	rdlong	local18, local01
	sub	local01, #236
	mov	local04, local18
	cmps	local05, local04 wcz
 if_be	jmp	#LR__0299
	add	local02, #34
	rdword	local09, local02
	sub	local02, #34
	getword	local10, local09, #0
	mov	local11, ##600
	sub	local11, local10
	add	local01, #236
	rdlong	local12, local01
	mov	local13, local12
	add	local01, #8
	rdlong	local14, local01
	sub	local01, #244
	mov	local15, local14
	add	local13, local14
	cmps	local11, local13 wc
 if_ae	jmp	#LR__0299
	add	local01, #308
	rdlong	arg01, local01
	sub	local01, #308
	mov	local17, #0
	mov	arg02, #0
	call	#__system___funcptr_cmp
	mov	local05, result1 wz
 if_e	jmp	#LR__0298
	call	#__system___getms
	add	local01, #284
	wrlong	result1, local01
	add	local01, #24
	rdlong	local04, local01
	mov	local05, local04
	rdlong	local17, local05
	add	local05, #4
	rdlong	local18, local05
	mov	local16, local18
	sub	local01, #16
	rdlong	local11, local01
	mov	local10, local03
	mov	arg01, local11
	mov	arg02, local10
	mov	local09, objptr
	mov	objptr, local17
	call	local16
	mov	objptr, local09
	add	local06, #1
	add	local01, #8
	rdlong	arg01, local01
	sub	local01, #300
	mov	local17, #0
	mov	arg02, #0
	call	#__system___funcptr_cmp
	mov	local05, result1 wz
 if_e	jmp	#LR__0297
	add	local01, #300
	rdlong	local04, local01
	sub	local01, #300
	mov	local05, local04
	rdlong	local17, local05
	add	local05, #4
	rdlong	local18, local05
	sub	local05, #4
	mov	local16, local18
	mov	local11, local02
	mov	local10, local01
	mov	arg01, local11
	mov	arg02, local10
	mov	local09, objptr
	mov	objptr, local17
	call	local16
	mov	objptr, local09
LR__0297
LR__0298
LR__0299
LR__0300
'                 {
'                     root->touchAnimate(display, root);
'                 }
'             }
'         }
'     }
'     return touchCount;
	mov	result1, local06
LR__0301
	mov	ptra, fp
	call	#popregs_
_module_touch_check_ret
	ret

_module_copy
	add	arg02, #204
	rdlong	_var01, arg02
	add	arg01, #204
	wrlong	_var01, arg01
	add	arg02, #28
	rdlong	_var01, arg02
	add	arg01, #28
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
_module_copy_ret
	ret

_module_set_image
	add	arg01, #204
	wrlong	#2, arg01
	add	arg01, #4
	wrlong	arg02, arg01
	add	arg02, #32
	rdlong	_var01, arg02
	add	arg01, #32
	wrlong	_var01, arg01
	add	arg02, #4
	rdlong	_var01, arg02
	add	arg01, #4
	wrlong	_var01, arg01
_module_set_image_ret
	ret

_module_set_text
	add	arg01, #204
	wrlong	#1, arg01
	add	arg01, #4
	wrlong	arg02, arg01
	add	arg01, #4
	wrlong	#1, arg01
	add	arg01, #8
	wrlong	#1, arg01
	add	arg01, #4
	wrlong	#4, arg01
	sub	arg01, #8
	wrbyte	#0, arg01
	sub	arg01, #216
	call	#_module_text_fit
_module_set_text_ret
	ret

_module_text_get
	add	arg01, #204
	rdlong	_var01, arg01
	sub	arg01, #204
	cmp	_var01, #1 wz
'     {
'         return module->data.text.value;
 if_e	add	arg01, #208
 if_e	rdlong	result1, arg01
'     }
'     return  (0) ;
 if_ne	mov	result1, #0
_module_text_get_ret
	ret

_module_text_fit
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
' {
'     switch (module->data.text.font)
	add	local01, #212
	rdlong	local02, local01
	sub	local01, #212
	mov	local03, local02
	fle	local03, #3
	jmprel	local03
LR__0302
	jmp	#LR__0305
	jmp	#LR__0304
	jmp	#LR__0303
	jmp	#LR__0306
LR__0303
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	shl	result1, #4
	add	local01, #32
	wrlong	result1, local01
	add	local01, #4
	wrlong	#32, local01
	sub	local01, #244
'         module->w = strlen(module->data.text.value) * 16;
'         module->h = 32;
'         break;
	jmp	#LR__0306
LR__0304
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	mov	local03, result1
	shl	local03, #1
	add	local03, result1
	shl	local03, #2
	add	local01, #32
	wrlong	local03, local01
	add	local01, #4
	wrlong	#24, local01
	sub	local01, #244
'         module->w = strlen(module->data.text.value) * 12;
'         module->h = 24;
'         break;
	jmp	#LR__0306
LR__0305
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	mov	local04, result1
	shl	local04, #3
	add	local01, #32
	wrlong	local04, local01
	mov	local05, #16
	add	local01, #4
	wrlong	#16, local01
	sub	local01, #244
'         module->w = strlen(module->data.text.value) * 8;
'         module->h = 16;
'         break;
LR__0306
	add	local01, #216
	rdbyte	local02, local01 wz
	sub	local01, #216
 if_ne	add	local01, #244
 if_ne	rdlong	local02, local01
 if_ne	add	local02, #2
 if_ne	wrlong	local02, local01
	mov	ptra, fp
	call	#popregs_
_module_text_fit_ret
	ret

_module_text_font
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	local01, #204
	rdlong	local02, local01
	sub	local01, #204
	cmp	local02, #1 wz
'         return;
 if_ne	jmp	#LR__0311
	cmp	arg02, ##-1 wz
 if_ne	jmp	#LR__0309
	add	local01, #244
	rdlong	local02, local01
	sub	local01, #244
	cmps	local02, #32 wc
 if_b	jmp	#LR__0307
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	mov	local02, result1
	shl	local02, #4
	add	local01, #32
	rdlong	arg02, local01
	sub	local01, #240
	cmps	arg02, local02 wcz
 if_a	add	local01, #212
 if_a	wrlong	#2, local01
 if_a	jmp	#LR__0310
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	mov	local02, result1
	shl	local02, #1
	add	local02, result1
	shl	local02, #2
	add	local01, #32
	rdlong	result1, local01
	sub	local01, #240
	cmps	result1, local02 wcz
 if_a	add	local01, #212
 if_a	wrlong	#1, local01
 if_a	jmp	#LR__0310
	add	local01, #212
	wrlong	#0, local01
	jmp	#LR__0310
LR__0307
	rdlong	local02, local01
	add	local02, #244
	rdlong	local02, local02
	cmps	local02, #24 wc
 if_b	jmp	#LR__0308
	rdlong	local02, local01
	add	local01, #208
	rdlong	arg01, local01
	sub	local01, #208
	call	#_strlen
	mov	arg02, result1
	shl	arg02, #1
	add	arg02, result1
	shl	arg02, #2
	add	local02, #240
	rdlong	local02, local02
	cmps	local02, arg02 wcz
 if_a	add	local01, #212
 if_a	wrlong	#1, local01
 if_a	jmp	#LR__0310
	add	local01, #212
	wrlong	#0, local01
	jmp	#LR__0310
LR__0308
	add	local01, #212
	wrlong	#0, local01
	jmp	#LR__0310
LR__0309
	add	local01, #212
	wrlong	arg02, local01
LR__0310
LR__0311
	mov	ptra, fp
	call	#popregs_
_module_text_font_ret
	ret

_module_text_font_width
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	add	local01, #204
	rdlong	local02, local01
	sub	local01, #204
	cmp	local02, #1 wz
'         return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0317
'     switch (module->data.text.font)
	add	local01, #212
	rdlong	local03, local01
	sub	local01, #212
	fle	local03, #3
	jmprel	local03
LR__0312
	jmp	#LR__0315
	jmp	#LR__0314
	jmp	#LR__0313
	jmp	#LR__0316
LR__0313
'         return strlen(module->data.text.value) * 16;
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	shl	result1, #4
	jmp	#LR__0317
LR__0314
'         return strlen(module->data.text.value) * 12;
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	mov	local03, result1
	shl	local03, #1
	add	local03, result1
	shl	local03, #2
	mov	result1, local03
	jmp	#LR__0317
LR__0315
'         return strlen(module->data.text.value) * 8;
	add	local01, #208
	rdlong	arg01, local01
	call	#_strlen
	shl	result1, #3
	jmp	#LR__0317
LR__0316
'     }
'     return 0;
	mov	result1, #0
LR__0317
	mov	ptra, fp
	call	#popregs_
_module_text_font_width_ret
	ret

_module_text_font_height
	mov	_var01, arg01
	add	_var01, #204
	rdlong	_var02, _var01
	sub	_var01, #204
	cmp	_var02, #1 wz
'         return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#_module_text_font_height_ret
'     switch (module->data.text.font)
	add	_var01, #212
	rdlong	_var03, _var01
	fle	_var03, #3
	jmprel	_var03
LR__0318
	jmp	#LR__0321
	jmp	#LR__0320
	jmp	#LR__0319
	jmp	#LR__0322
LR__0319
'         return 32;
	mov	result1, #32
	jmp	#_module_text_font_height_ret
LR__0320
'         return 24;
	mov	result1, #24
	jmp	#_module_text_font_height_ret
LR__0321
'         return 16;
	mov	result1, #16
	jmp	#_module_text_font_height_ret
LR__0322
'     }
'     return 0;
	mov	result1, #0
_module_text_font_height_ret
	ret

_module_add_border
	add	arg01, #276
	wrlong	arg02, arg01
	add	arg01, #20
	wrlong	arg03, arg01
	mov	arg02, arg03
	shl	arg02, #1
	sub	arg01, #56
	rdlong	_var01, arg01
	add	_var01, arg02
	wrlong	_var01, arg01
	shl	arg03, #1
	add	arg01, #4
	rdlong	_var01, arg01
	add	_var01, arg03
	wrlong	_var01, arg01
_module_add_border_ret
	ret

_module_align_inner_top
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #236
	rdlong	_var01, _var01
	add	_var02, #252
	rdlong	_var02, _var02
	add	_var01, _var02
	add	arg01, #236
	wrlong	_var01, arg01
_module_align_inner_top_ret
	ret

_module_align_inner_left
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #232
	rdlong	_var01, _var01
	add	_var02, #248
	rdlong	_var02, _var02
	add	_var01, _var02
	add	arg01, #232
	wrlong	_var01, arg01
_module_align_inner_left_ret
	ret

_module_align_inner_right
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #232
	rdlong	_var01, _var01
	add	_var02, #240
	rdlong	_var02, _var02
	add	_var01, _var02
	add	arg01, #240
	rdlong	_var02, arg01
	sub	arg01, #240
	sub	_var01, _var02
	rdlong	_var02, arg01
	add	_var02, #248
	rdlong	_var02, _var02
	sub	_var01, _var02
	add	arg01, #232
	wrlong	_var01, arg01
_module_align_inner_right_ret
	ret

_module_align_inner_bottom
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #236
	rdlong	_var01, _var01
	add	_var02, #244
	rdlong	_var02, _var02
	add	_var01, _var02
	add	arg01, #244
	rdlong	_var02, arg01
	sub	arg01, #244
	sub	_var01, _var02
	rdlong	_var02, arg01
	add	_var02, #252
	rdlong	_var02, _var02
	sub	_var01, _var02
	add	arg01, #236
	wrlong	_var01, arg01
_module_align_inner_bottom_ret
	ret

_module_align_middle
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var02, #244
	rdlong	_var02, _var02
	abs	_var02, _var02 wc
	shr	_var02, #1
	negc	_var02, _var02
	add	_var01, #236
	rdlong	_var01, _var01
	add	_var01, _var02
	add	arg01, #244
	rdlong	_var02, arg01
	abs	_var02, _var02 wc
	shr	_var02, #1
	negc	_var02, _var02
	sub	_var01, _var02
	sub	arg01, #8
	wrlong	_var01, arg01
_module_align_middle_ret
	ret

_module_align_center_sector
	rdlong	muldiva_, arg01
	mov	muldivb_, muldiva_
	add	muldivb_, #248
	rdlong	muldivb_, muldivb_
	shl	muldivb_, #1
	add	muldiva_, #240
	rdlong	muldiva_, muldiva_
	sub	muldiva_, muldivb_
	qmul	arg02, muldiva_
	rdlong	muldiva_, arg01
	mov	muldivb_, muldiva_
	add	muldiva_, #232
	rdlong	arg02, muldiva_
	add	muldivb_, #248
	rdlong	muldiva_, muldivb_
	add	arg02, muldiva_
	mov	muldivb_, arg03
	getqx	muldiva_
	call	#divide_
	add	arg02, muldivb_
	add	arg01, #240
	rdlong	muldiva_, arg01
	abs	muldiva_, muldiva_ wc
	shr	muldiva_, #1
	negc	muldiva_, muldiva_
	sub	arg02, muldiva_
	sub	arg01, #8
	wrlong	arg02, arg01
_module_align_center_sector_ret
	ret

_module_align_space_even
	rdlong	_var01, arg01
	add	arg01, #240
	rdlong	_var02, arg01
	qmul	arg03, _var02
	mov	muldiva_, _var01
	add	muldiva_, #240
	rdlong	muldiva_, muldiva_
	getqx	muldivb_
	sub	muldiva_, muldivb_
	qmul	arg02, muldiva_
	add	arg03, #1
	mov	muldivb_, arg03
	getqx	muldiva_
	call	#divide_
	sub	arg02, #1
	qmul	arg02, _var02
	add	_var01, #232
	rdlong	_var02, _var01
	add	_var02, muldivb_
	sub	arg01, #8
	getqx	_var01
	add	_var02, _var01
	wrlong	_var02, arg01
_module_align_space_even_ret
	ret

_module_align_above
	add	arg02, #236
	rdlong	_var01, arg02
	add	arg01, #244
	rdlong	_var02, arg01
	sub	_var01, _var02
	add	arg02, #24
	rdlong	_var02, arg02
	sub	_var01, _var02
	sub	arg01, #8
	wrlong	_var01, arg01
_module_align_above_ret
	ret

_module_align_left
	add	arg02, #232
	rdlong	_var01, arg02
	add	arg01, #240
	rdlong	_var02, arg01
	sub	_var01, _var02
	add	arg02, #24
	rdlong	_var02, arg02
	sub	_var01, _var02
	sub	arg01, #8
	wrlong	_var01, arg01
_module_align_left_ret
	ret

_module_align_below
	add	arg02, #236
	rdlong	_var01, arg02
	add	arg02, #8
	rdlong	_var02, arg02
	add	_var01, _var02
	add	arg02, #16
	rdlong	_var02, arg02
	add	_var01, _var02
	add	arg01, #236
	wrlong	_var01, arg01
_module_align_below_ret
	ret

_module_align_right
	add	arg02, #232
	rdlong	_var01, arg02
	add	arg02, #8
	rdlong	_var02, arg02
	add	_var01, _var02
	add	arg02, #16
	rdlong	_var02, arg02
	add	_var01, _var02
	add	arg01, #232
	wrlong	_var01, arg01
_module_align_right_ret
	ret

_module_fit_width
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #240
	rdlong	_var01, _var01
	add	_var02, #248
	rdlong	_var02, _var02
	sub	_var01, _var02
	rdlong	_var02, arg01
	add	_var02, #248
	rdlong	_var02, _var02
	sub	_var01, _var02
	add	arg01, #240
	wrlong	_var01, arg01
_module_fit_width_ret
	ret

_module_fit_space_even
	rdlong	muldivb_, arg01
	add	arg01, #256
	rdlong	muldiva_, arg01
	qmul	arg02, muldiva_
	mov	muldiva_, muldivb_
	add	muldiva_, #256
	rdlong	_var01, muldiva_
	shl	_var01, #1
	add	muldivb_, #240
	rdlong	muldiva_, muldivb_
	sub	muldiva_, _var01
	mov	muldivb_, arg02
	getqx	_var01
	sub	muldiva_, _var01
	call	#divide_
	sub	arg01, #16
	wrlong	muldivb_, arg01
_module_fit_space_even_ret
	ret

_module_fit_space_even_verticle
	rdlong	muldivb_, arg01
	add	arg01, #260
	rdlong	muldiva_, arg01
	qmul	arg02, muldiva_
	mov	muldiva_, muldivb_
	add	muldiva_, #260
	rdlong	_var01, muldiva_
	shl	_var01, #1
	add	muldivb_, #244
	rdlong	muldiva_, muldivb_
	sub	muldiva_, _var01
	mov	muldivb_, arg02
	getqx	_var01
	sub	muldiva_, _var01
	call	#divide_
	sub	arg01, #16
	wrlong	muldivb_, arg01
_module_fit_space_even_verticle_ret
	ret

_module_fit_height
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #244
	rdlong	_var01, _var01
	add	_var02, #252
	rdlong	_var02, _var02
	sub	_var01, _var02
	rdlong	_var02, arg01
	add	_var02, #252
	rdlong	_var02, _var02
	sub	_var01, _var02
	add	arg01, #244
	wrlong	_var01, arg01
_module_fit_height_ret
	ret

_module_fit_below
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_align_below
	rdlong	arg02, local01
	mov	arg01, arg02
	add	local02, #236
	rdlong	local03, local02
	add	arg01, #236
	rdlong	arg01, arg01
	sub	local03, arg01
	add	arg02, #244
	rdlong	arg02, arg02
	sub	arg02, local03
	add	local02, #8
	rdlong	local03, local02
	sub	arg02, local03
	add	local02, #16
	rdlong	local03, local02
	sub	arg02, local03
	rdlong	local03, local01
	add	local03, #252
	rdlong	local03, local03
	sub	arg02, local03
	add	local01, #244
	wrlong	arg02, local01
	mov	ptra, fp
	call	#popregs_
_module_fit_below_ret
	ret

_module_fit_right
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	arg02, #232
	rdlong	_var03, arg02
	add	_var02, #232
	rdlong	_var02, _var02
	sub	_var03, _var02
	add	_var01, #240
	rdlong	_var02, _var01
	sub	_var02, _var03
	add	arg02, #8
	rdlong	_var03, arg02
	sub	_var02, _var03
	add	arg02, #16
	rdlong	_var03, arg02
	sub	_var02, _var03
	rdlong	_var03, arg01
	add	_var03, #248
	rdlong	_var03, _var03
	sub	_var02, _var03
	add	arg01, #240
	wrlong	_var02, arg01
_module_fit_right_ret
	ret

_module_draw
	mov	COUNT_, #19
	call	#pushregs_
_module_draw_enter
	mov	local01, arg01
	mov	local02, arg02
	add	local02, #280
	rdbyte	result1, local02 wz
	sub	local02, #280
'     {
'         return;
 if_e	jmp	#LR__0346
	add	local02, #304
	rdlong	arg01, local02
	mov	arg02, #0
	call	#__system___funcptr_cmp
	cmp	result1, #0 wz
 if_ne	mov	arg01, local01
 if_ne	mov	arg02, ##3686400
 if_ne	call	#_display_canvas_image_start_address
'     {
'         display_canvas_image_start_address(display,  1024 * 600 * 2 * 3 );
'     }
'     switch (module->type)
	sub	local02, #100
	rdlong	local03, local02
	sub	local02, #204
	mov	local04, local03
	sub	local04, #1
	fle	local04, #7
	jmprel	local04
LR__0323
	jmp	#LR__0324
	jmp	#LR__0336
	jmp	#LR__0337
	jmp	#LR__0338
	jmp	#LR__0339
	jmp	#LR__0340
	jmp	#LR__0341
	jmp	#LR__0342
LR__0324
	mov	local05, #0
	add	local02, #236
	rdlong	local06, local02
	sub	local02, #236
	mov	arg01, local02
	call	#_module_text_font_width
	mov	local07, result1
	mov	arg01, local02
	call	#_module_text_font_height
	mov	local08, result1
'         switch (module->data.text.alignmentH)
	add	local02, #220
	rdlong	local09, local02
	sub	local02, #220
	mov	local10, local09
	sub	local10, #1
	fle	local10, #3
	jmprel	local10
LR__0325
	jmp	#LR__0326
	jmp	#LR__0327
	jmp	#LR__0328
	jmp	#LR__0329
LR__0326
	add	local02, #232
	rdlong	local05, local02
	add	local02, #16
	rdlong	local11, local02
	sub	local02, #248
	add	local05, local11
'             x = module->x + module->px;
'             break;
	jmp	#LR__0329
LR__0327
	add	local02, #240
	rdlong	local09, local02
	sub	local09, local07
	abs	local12, local09 wc
	shr	local12, #1
	negc	local12, local12
	sub	local02, #8
	rdlong	local13, local02
	sub	local02, #232
	mov	local05, local13
	add	local05, local12
'             x = module->x + (module->w - width) / 2;
'             break;
	jmp	#LR__0329
LR__0328
	add	local02, #232
	rdlong	local14, local02
	mov	local15, local14
	add	local02, #8
	rdlong	local12, local02
	mov	local11, local12
	add	local15, local12
	sub	local15, local07
	add	local02, #8
	rdlong	local16, local02
	sub	local02, #248
	mov	local13, local16
	sub	local15, local13
	mov	local05, local15
'             x = module->x + module->w - width - module->px;
'             break;
LR__0329
'         }
' 
'         switch (module->data.text.alignmentV)
	add	local02, #224
	rdlong	local09, local02
	sub	local02, #224
	mov	local17, local09
	sub	local17, #4
	fle	local17, #3
	jmprel	local17
LR__0330
	jmp	#LR__0331
	jmp	#LR__0332
	jmp	#LR__0333
	jmp	#LR__0334
LR__0331
	add	local02, #236
	rdlong	local06, local02
	add	local02, #16
	rdlong	local11, local02
	sub	local02, #252
	add	local06, local11
'             y = module->y + module->py;
'             break;
	jmp	#LR__0334
LR__0332
	add	local02, #244
	rdlong	local14, local02
	sub	local14, local08
	abs	local12, local14 wc
	shr	local12, #1
	negc	local12, local12
	sub	local02, #8
	rdlong	local06, local02
	sub	local02, #236
	add	local06, local12
'             y = module->y + (module->h - height) / 2;
'             break;
	jmp	#LR__0334
LR__0333
	add	local02, #236
	rdlong	local14, local02
	mov	local15, local14
	add	local02, #8
	rdlong	local12, local02
	mov	local11, local12
	add	local15, local12
	sub	local15, local08
	add	local02, #8
	rdlong	local16, local02
	sub	local02, #252
	mov	local13, local16
	sub	local15, local13
	mov	local06, local15
'             y = module->y + module->h - height - module->py;
'             break;
LR__0334
	add	local02, #212
	rdlong	arg03, local02
	sub	local02, #212
	mov	arg01, local01
	mov	arg02, #0
	mov	arg04, #0
	call	#_display_set_text_parameter1
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	mov	arg04, #0
	mov	arg05, #0
	call	#_display_set_text_parameter2
	mov	local15, local02
	add	local02, #268
	rdlong	local14, local02
	sub	local02, #268
	mov	arg01, local02
	call	#_get_radius_1634
	mov	arg04, result1
	mov	arg01, local01
	mov	arg02, local15
	mov	arg03, local14
	call	#_draw_border_rectangle_rounded_1636
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0335
	add	local02, #232
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	mov	arg04, arg02
	add	local02, #4
	rdlong	local16, local02
	add	arg04, local16
	mov	arg05, arg03
	add	local02, #4
	rdlong	local17, local02
	add	arg05, local17
	add	local02, #24
	rdlong	arg06, local02
	sub	local02, #268
	mov	arg01, local01
	call	#_display_draw_square_fill
LR__0335
	add	local02, #272
	rdlong	arg02, local02
	sub	local02, #4
	rdlong	arg03, local02
	mov	local17, arg03
	mov	arg01, local01
	call	#_display_fore_ground_color_16bpp
	mov	arg01, local01
	mov	arg02, local17
	call	#_display_back_ground_color_16bpp
	sub	local02, #60
	rdlong	arg04, local02
	mov	arg01, local01
	mov	arg02, local05
	mov	arg03, local06
	call	#_display_draw_string
	add	local02, #8
	rdbyte	local09, local02 wz
	sub	local02, #216
 if_e	jmp	#LR__0342
	mov	arg03, local06
	add	arg03, local08
	add	arg03, #1
	mov	arg04, local05
	add	arg04, local07
	add	local06, local08
	add	local06, #1
	add	local02, #272
	rdlong	arg06, local02
	sub	local02, #272
	mov	arg01, local01
	mov	arg02, local05
	mov	arg05, local06
	call	#_display_draw_line
'             display_draw_line(display, x, y + height + 1, x + width, y + height + 1, module->foregroundColor);
'         break;
	jmp	#LR__0342
LR__0336
	add	local02, #208
	rdlong	arg02, local02
	add	local02, #24
	rdlong	arg03, local02
	add	local02, #4
	rdlong	arg04, local02
	sub	local02, #236
	mov	arg01, local01
	call	#_display_bte_memory_copy_image
'     {
'         display_bte_memory_copy_image(display, module->data.image, module->x, module->y);
'         break;
	jmp	#LR__0342
LR__0337
	add	local02, #232
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	mov	arg04, arg02
	add	local02, #4
	rdlong	local16, local02
	add	arg04, local16
	mov	arg05, arg03
	add	local02, #32
	rdlong	arg06, local02
	sub	local02, #272
	mov	arg01, local01
	call	#_display_draw_line
'     {
'         display_draw_line(display, module->x, module->y, module->x + module->w, module->y, module->foregroundColor);
'         break;
	jmp	#LR__0342
LR__0338
	add	local02, #232
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	mov	arg04, arg02
	add	local02, #4
	rdlong	local16, local02
	add	arg04, local16
	mov	arg05, arg03
	add	local02, #4
	rdlong	local17, local02
	add	arg05, local17
	add	local02, #28
	rdlong	arg06, local02
	sub	local02, #272
	mov	arg01, local01
	call	#_display_draw_square_fill
'     {
'         display_draw_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, module->foregroundColor);
'         break;
	jmp	#LR__0342
LR__0339
	mov	arg01, local02
	call	#_get_radius_1634
	mov	local17, result1
	mov	arg02, local02
	add	local02, #272
	rdlong	arg03, local02
	mov	arg01, local01
	mov	arg04, local17
	call	#_draw_border_rectangle_rounded_1636
	sub	local02, #40
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	mov	arg04, arg02
	add	local02, #4
	rdlong	local16, local02
	add	arg04, local16
	mov	arg05, arg03
	add	local02, #4
	rdlong	local16, local02
	add	arg05, local16
	add	local02, #28
	rdlong	arg08, local02
	sub	local02, #272
	mov	arg01, local01
	mov	arg06, local17
	mov	arg07, local17
	call	#_display_draw_circle_square_fill
'     {
'         radius = get_radius(module);
'         draw_border_rectangle_rounded(display, module, module->foregroundColor, radius);
'         display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, module->foregroundColor);
'         break;
	jmp	#LR__0342
LR__0340
	add	local02, #316
	rdlong	local09, local02
	sub	local02, #316
	rdlong	local15, local09
	add	local09, #4
	rdlong	local14, local09
	mov	arg01, local01
	mov	arg02, local02
	mov	local17, objptr
	mov	objptr, local15
	call	local14
	mov	objptr, local17
'     {
'         module->draw(display, module);
'         break;
	jmp	#LR__0342
LR__0341
	add	local02, #316
	rdlong	local11, local02
	sub	local02, #316
	mov	local09, local11
	rdlong	local15, local09
	add	local09, #4
	rdlong	local12, local09
	mov	local14, local12
	mov	local13, local01
	mov	local16, local02
	mov	arg01, local13
	mov	arg02, local16
	mov	local18, objptr
	mov	objptr, local15
	call	local14
	mov	objptr, local18
'     {
'         module->draw(display, module);
'         break;
LR__0342
	mov	local19, #0
'     }
'     }
' 
'     for (int i = 0; i < module->numChildren; i++)
LR__0343
	add	local02, #228
	rdlong	local03, local02
	sub	local02, #228
	cmps	local19, local03 wc
 if_ae	jmp	#LR__0344
	mov	arg01, local01
	mov	local11, local19
	shl	local11, #2
	add	local02, #4
	add	local11, local02
	rdlong	arg02, local11
	call	#_module_draw
	add	local19, #1
	sub	local02, #4
	jmp	#LR__0343
LR__0344
	add	local02, #304
	rdlong	arg01, local02
	sub	local02, #304
	mov	arg02, #0
	call	#__system___funcptr_cmp
	cmp	result1, #0 wz
 if_e	jmp	#LR__0345
	add	local02, #304
	rdlong	local03, local02
	sub	local02, #304
	rdlong	local09, local03
	add	local03, #4
	rdlong	local15, local03
	mov	arg01, local01
	mov	arg02, local02
	mov	local16, objptr
	mov	objptr, local09
	call	local15
	mov	objptr, local16
	mov	arg01, local01
	mov	arg02, #0
	call	#_display_canvas_image_start_address
LR__0345
LR__0346
	mov	ptra, fp
	call	#popregs_
_module_draw_ret
	ret

_keyboard_create
	add	ptr__dat__, ##143024
	wrlong	arg01, ptr__dat__
	add	ptr__dat__, #4
	wrlong	arg02, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##143032
	mov	arg02, ##@LR__1964
	call	#_strcpy
' }
' 
' 
' Keyboard *keyboard_create(Display *display, Images *images)
' {
'     staticKeyboard.display = display;
'     staticKeyboard.images = images;
'     strcpy(staticKeyboard.keyboard_buffer, "");
'     return &staticKeyboard;
	add	ptr__dat__, ##143024
	mov	result1, ptr__dat__
	sub	ptr__dat__, ##143024
_keyboard_create_ret
	ret

_keyboard_get_input
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1965
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #90
	wrbyte	#0, local01
	sub	local01, #82
	mov	arg01, local01
	mov	arg02, ##@LR__1966
	call	#_strcpy
	add	local01, #52
	mov	arg01, local01
	sub	local01, #60
	mov	arg02, local02
	call	#_strcpy
	rdlong	arg01, local01
	mov	arg02, #0
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, ##2457600
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	add	local01, #92
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	#283, arg01
	mov	arg01, local02
	add	arg01, #232
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#316, arg01
	mov	arg01, local02
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	mov	arg03, #16
	add	arg01, #272
	wrlong	#16, arg01
	sub	arg01, #4
	wrlong	#16, arg01
	add	local01, #320
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local04
	decod	arg02, #10
	mov	arg03, #40
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	#40, arg01
	mov	local02, #0
	mov	local05, ##1134444544
	mov	arg01, #40
	call	#__system___float_fromint
	mov	arg02, result1
	mov	arg01, local05
	bitnot	arg02, #31
	call	#__system___float_add
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	arg01, local04
	add	arg01, #232
	wrlong	local02, arg01
	add	arg01, #4
	wrlong	result1, arg01
	mov	arg01, local04
	mov	arg03, #0
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	#0, arg01
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	sub	local01, ##992
	mov	arg02, local01
	sub	local01, #60
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	call	#_module_align_middle
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local01
	mov	arg02, #10
	mov	arg04, #0
	mov	arg05, ##1067450368
	call	#_createKey_1688
	mov	local05, result1
	mov	arg01, local01
	mov	arg02, #11
	mov	arg03, local05
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #12
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #13
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #14
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #15
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #16
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #17
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #18
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #19
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #20
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg01, local01
	mov	arg02, #21
	mov	arg03, #0
	mov	arg04, local05
	mov	arg05, ##1069547520
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #22
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #23
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #24
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #25
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #26
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #27
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #28
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #29
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #30
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #31
	mov	arg04, local05
	mov	arg05, ##1069547520
	call	#_createKey_1688
	mov	local05, result1
	mov	arg01, local01
	mov	arg02, #32
	mov	arg03, #0
	mov	arg04, local05
	mov	arg05, ##1074790400
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #33
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #34
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #35
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #36
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #37
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #38
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #39
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #40
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #41
	mov	arg04, local05
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	local06, result1
	mov	arg01, local01
	mov	arg02, #42
	mov	arg03, #0
	mov	arg04, local06
	mov	arg05, ##1076887552
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #43
	mov	arg04, local06
	mov	arg05, ##1067450368
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #44
	mov	arg04, local06
	mov	arg05, ##1077936128
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #45
	mov	arg04, local06
	mov	arg05, ##1067450368
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #46
	mov	arg04, local06
	decod	arg05, #30
	call	#_createKey_1688
	mov	arg01, local01
	mov	arg02, #7
	mov	arg03, local05
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #8
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #9
	mov	arg04, #0
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	local06, result1
	mov	arg01, local01
	mov	arg02, #4
	mov	arg03, local05
	mov	arg04, local06
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #5
	mov	arg04, local06
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	local07, result1
	mov	arg01, local01
	mov	arg02, #6
	mov	arg03, local07
	mov	arg04, local06
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, local05
	mov	arg04, local07
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #2
	mov	arg04, local07
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #3
	mov	arg04, local07
	mov	arg05, ##1065353216
	call	#_createKey_1688
	mov	arg04, result1
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, local05
	mov	arg05, ##1080033280
	call	#_createKey_1688
	add	local01, #90
	wrbyte	#0, local01
	sub	local01, #90
	rdlong	arg01, local01
	mov	arg02, local03
	call	#_module_draw
' 
' 
'     display_bte_memory_copy(keyboard->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
' 
' 
'     Module *root = &(keyboard->root);
'     module_init(root,  (0) );
' 
'     Module *background = &(keyboard->background);
'     module_init(background, root);
'     module_set_rectangle(background,  1024 , 283.5);
'     module_set_position(background, 0,  600  - 283.5);
'     module_set_padding(background, padding, padding);
'     module_set_color(background,  0x0010 ,  0x0010 );
' 
'     Module *topBar = &(keyboard->topbar);
'     module_init(topBar, background);
'     module_set_rectangle(topBar,  1024 , topBarSize);
'     module_set_position(topBar, 0,  600  - 283.5 - topBarSize);
'     module_set_color(topBar,  0x0000 ,  0x0000 );
' 
'     Module *topBarText = &(keyboard->topbarPrompt);
'     module_init(topBarText, topBar);
'     module_set_text(topBarText, keyboard->prompt);
'     module_text_font(topBarText,  2 );
'     module_text_fit(topBarText);
'     module_align_center(topBarText);
'     module_align_middle(topBarText);
'     module_set_color(topBarText,  0xffff ,  0x0000 );
' 
'     Module *tab = createKey(keyboard, key_tab,  (0) ,  (0) , 1.25);
'     Module *q = createKey(keyboard, key_q, tab,  (0) , 1);
'     Module *w = createKey(keyboard, key_w, q,  (0) , 1);
'     Module *e = createKey(keyboard, key_e, w,  (0) , 1);
'     Module *r = createKey(keyboard, key_r, e,  (0) , 1);
'     Module *t = createKey(keyboard, key_t, r,  (0) , 1);
'     Module *y = createKey(keyboard, key_y, t,  (0) , 1);
'     Module *u = createKey(keyboard, key_u, y,  (0) , 1);
'     Module *i = createKey(keyboard, key_i, u,  (0) , 1);
'     Module *o = createKey(keyboard, key_o, i,  (0) , 1);
'     Module *p = createKey(keyboard, key_p, o,  (0) , 1);
' 
'     Module *minus = createKey(keyboard, key_minus,  (0) , tab, 1.5);
'     Module *a = createKey(keyboard, key_a, minus, tab, 1);
'     Module *s = createKey(keyboard, key_s, a, tab, 1);
'     Module *d = createKey(keyboard, key_d, s, tab, 1);
'     Module *f = createKey(keyboard, key_f, d, tab, 1);
'     Module *g = createKey(keyboard, key_g, f, tab, 1);
'     Module *h = createKey(keyboard, key_h, g, tab, 1);
'     Module *j = createKey(keyboard, key_j, h, tab, 1);
'     Module *k = createKey(keyboard, key_k, j, tab, 1);
'     Module *l = createKey(keyboard, key_l, k, tab, 1);
'     Module *del = createKey(keyboard, key_del, l, tab, 1.5);
' 
'     Module *shift = createKey(keyboard, key_shift,  (0) , del, 2.25);
'     Module *z = createKey(keyboard, key_z, shift, del, 1);
'     Module *x = createKey(keyboard, key_x, z, del, 1);
'     Module *c = createKey(keyboard, key_c, x, del, 1);
'     Module *v = createKey(keyboard, key_v, c, del, 1);
'     Module *b = createKey(keyboard, key_b, v, del, 1);
'     Module *n = createKey(keyboard, key_n, b, del, 1);
'     Module *m = createKey(keyboard, key_m, n, del, 1);
'     Module *comma = createKey(keyboard, key_comma, m, del, 1);
'     Module *period = createKey(keyboard, key_period, comma, del, 1);
' 
'     Module *cancel = createKey(keyboard, key_cancel,  (0) , period, 2.75);
'     Module *left = createKey(keyboard, key_left, cancel, period, 1.25);
'     Module *space = createKey(keyboard, key_space, left, period, 3);
'     Module *right = createKey(keyboard, key_right, space, period, 1.25);
'     Module *submit = createKey(keyboard, key_submit, right, period, 2);
' 
'     Module *seven = createKey(keyboard, key_7, del,  (0) , 1);
'     Module *eight = createKey(keyboard, key_8, seven,  (0) , 1);
'     Module *nine = createKey(keyboard, key_9, eight,  (0) , 1);
' 
'     Module *four = createKey(keyboard, key_4, del, nine, 1);
'     Module *five = createKey(keyboard, key_5, four, nine, 1);
'     Module *six = createKey(keyboard, key_6, five, nine, 1);
' 
'     Module *one = createKey(keyboard, key_1, del, five, 1);
'     Module *two = createKey(keyboard, key_2, one, five, 1);
'     Module *three = createKey(keyboard, key_3, two, five, 1);
' 
'     createKey(keyboard, key_0, del, three, 3.5);
' 
'     keyboard->keyboard_complete =  (0) ;
' 
'     module_draw(keyboard->display, root);
'     while (!keyboard->keyboard_complete)
LR__0347
	add	local01, #90
	rdbyte	local07, local01 wz
	sub	local01, #90
 if_ne	jmp	#LR__0349
	rdlong	arg01, local01
	mov	arg02, local04
	call	#_module_draw
'     {
' 
'         module_draw(keyboard->display, topBar);
'         do
LR__0348
	rdlong	arg01, local01
	call	#_display_update_touch
	rdlong	arg02, local01
	mov	arg03, local01
	mov	arg01, local03
	call	#_module_touch_check
	cmp	result1, #0 wz
 if_e	jmp	#LR__0348
	add	local01, #8
	mov	arg02, local01
	sub	local01, #8
	mov	arg01, local02
	add	arg01, #208
	wrlong	arg02, arg01
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	call	#_module_align_middle
	jmp	#LR__0347
LR__0349
	rdlong	arg01, local01
	mov	arg02, ##2457600
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
' 
'         module_text_update(topBarText, keyboard->keyboard_buffer);
'         module_align_center(topBarText);
'         module_align_middle(topBarText);
'     }
'     display_bte_memory_copy(keyboard->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
' 
'     return keyboard->keyboard_buffer;
	add	local01, #8
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_keyboard_get_input_ret
	ret

_navigation_page_init
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	add	local01, #4
	wrlong	arg02, local01
	add	local01, #4
	wrlong	arg03, local01
	add	local01, #8
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	##600, arg01
	mov	arg01, local03
	add	arg01, #232
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #248
	wrlong	#50, arg01
	add	arg01, #4
	wrlong	#50, arg01
	mov	arg01, local03
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##627, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, objptr
	mov	arg02, ptr__module_animation_switch_page_down_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #304
	wrlong	result1, arg01
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##648
	rdlong	arg02, local01
	add	arg02, #144
	mov	arg01, local02
	call	#_module_set_image
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, ##968
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94429
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94429
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##1288
	rdlong	arg02, local01
	add	arg02, #96
	mov	arg01, local02
	call	#_module_set_image
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #2
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #1
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#1, arg01
	add	local01, ##1608
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94436
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94436
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##1928
	rdlong	arg02, local01
	add	arg02, #192
	mov	arg01, local02
	call	#_module_set_image
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #3
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #2
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#2, arg01
	add	local01, ##2248
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94443
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94443
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##2568
	rdlong	arg02, local01
	add	arg02, #240
	mov	arg01, local02
	call	#_module_set_image
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #4
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #4
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#4, arg01
	add	local01, ##2888
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94448
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94448
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#200, arg01
	add	arg01, #4
	wrlong	#200, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	##50712, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local02
	call	#_module_align_inner_bottom
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #3
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#3, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94458
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94458
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#200, arg01
	add	arg01, #4
	wrlong	#200, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	##50712, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local02
	call	#_module_align_inner_bottom
	mov	arg01, local02
	mov	arg02, #2
	mov	arg03, #4
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_0722_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #5
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#5, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##94467
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##94467
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	rdlong	arg02, local01
	mov	arg01, local01
	call	#_module_align_below
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	ptra, fp
	call	#popregs_
_navigation_page_init_ret
	ret

_navigation_page_run
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1967
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	wrbyte	#0, local01
	add	local01, #4
	rdlong	arg01, local01
	add	local01, #12
	mov	arg02, local01
	sub	local01, #16
	call	#_module_draw
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1968
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     while (!page->complete)
LR__0350
	rdbyte	arg01, local01 wz
 if_ne	jmp	#LR__0351
	add	local01, #4
	rdlong	arg01, local01
	call	#_display_update_touch
	add	local01, #12
	mov	arg01, local01
	sub	local01, #12
	rdlong	arg02, local01
	sub	local01, #4
	mov	arg03, local01
	call	#_module_touch_check
	jmp	#LR__0350
LR__0351
'     {
'         display_update_touch(page->display);
'         module_touch_check(&(page->root), page->display, page);
'     }
'     return page->newPage;
	add	local01, #12
	rdlong	result1, local01
	mov	ptra, fp
	call	#popregs_
_navigation_page_run_ret
	ret

_loading_overlay_display
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	arg04, #0
	call	#_display_set_text_parameter1
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	mov	arg04, #0
	mov	arg05, #0
	call	#_display_set_text_parameter2
	mov	arg01, local01
	mov	arg02, #262
	mov	arg03, #200
	mov	arg04, ##762
	mov	arg05, #400
	mov	arg06, #50
	mov	arg07, #50
	mov	arg08, ##15220
	call	#_display_draw_circle_square_fill
	mov	arg02, #0
	mov	arg03, ##15220
	mov	arg01, local01
	call	#_display_fore_ground_color_16bpp
	mov	arg01, local01
	mov	arg02, ##15220
	call	#_display_back_ground_color_16bpp
	mov	arg01, local02
	call	#_strlen
	shl	result1, #3
	decod	arg02, #9
	sub	arg02, result1
	mov	arg01, local01
	mov	arg03, #284
	mov	arg04, local02
	call	#_display_draw_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1969
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg02, ##@LR__1970
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg02, ##@LR__1971
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_loading_overlay_display_ret
	ret

_monitor_begin
	add	arg01, #16
	wrlong	arg03, arg01
	sub	arg01, #4
	wrlong	arg02, arg01
	sub	arg01, #12
	add	ptr__dat__, ##94484
	mov	arg03, ptr__dat__
	wrlong	objptr, arg03
	add	arg03, #4
	wrlong	ptr__monitor_cog_0748_, arg03
	add	arg03, #4
	wrlong	arg01, arg03
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##94484
	mov	result1, #30
	setq	arg03
	coginit	result1, entryptr__ wc
 if_b	neg	result1, #1
	add	arg01, #20
	wrlong	result1, arg01
	cmp	result1, ##-1 wz
'     {
'         return  (1) ;
 if_ne	mov	result1, #1
'     }
'     return  (0) ;
 if_e	mov	result1, #0
_monitor_begin_ret
	ret

_navkey_begin
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg05
	add	local01, #108
	wrbyte	arg04, local01
	sub	local01, #108
	mov	arg01, arg02
	mov	arg02, arg03
	mov	arg03, #10
	mov	arg04, #1
	mov	local03, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_setup
	mov	objptr, local03
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #128
	call	#_writeNavKey8_1801
	mov	arg01, #100
	call	#__system___waitms
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, local02
	call	#_writeNavKey8_1801
	add	local01, #114
	wrbyte	local02, local01
	mov	ptra, fp
	call	#popregs_
_navkey_begin_ret
	ret

_navkey_update_status
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #6
	call	#_readNavKeyInt_1798
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #1
	add	local01, #20
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #2
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #4
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #8
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #16
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #32
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #64
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #128
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, #256
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, ##512
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, ##1024
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, ##2048
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, ##4096
	add	local01, #4
	wrlong	arg02, local01
	mov	arg02, result1
	signx	arg02, #15
	and	arg02, ##8192
	add	local01, #4
	wrlong	arg02, local01
	signx	result1, #15
	and	result1, ##16384
	add	local01, #4
	wrlong	result1, local01
	mov	ptra, fp
	call	#popregs_
_navkey_update_status_ret
	ret

_navkey_write_max
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	call	#__system___float_fromint
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #14
	call	#_writeNavKeyFloat_1804
	mov	ptra, fp
	call	#popregs_
_navkey_write_max_ret
	ret

_navkey_write_min
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	call	#__system___float_fromint
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, #18
	call	#_writeNavKeyFloat_1804
	mov	ptra, fp
	call	#popregs_
_navkey_write_min_ret
	ret

_motion_state_window_init
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	wrlong	arg03, local01
	mov	arg01, arg02
	add	arg01, #204
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	local01, arg01
	add	local01, #4
	mov	local02, local01
	mov	arg01, local02
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local02
	bmask	arg02, #15
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local02
	call	#_module_fit_height
	mov	arg01, local02
	call	#_module_fit_width
	mov	arg01, local02
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local02
	call	#_module_align_inner_left
	mov	arg01, local02
	call	#_module_align_inner_top
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	ptr__dat__, ##175224
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175224
	mov	arg01, local03
	call	#_module_set_text
	mov	arg01, local03
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local03
	call	#_module_text_fit
	rdlong	arg03, local03
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local03
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local03
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local03
	call	#_module_align_inner_top
	add	local01, #320
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local04
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	ptr__dat__, ##175217
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175217
	mov	arg01, local04
	call	#_module_set_text
	mov	arg01, local04
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local04
	call	#_module_text_fit
	rdlong	arg03, local04
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local04
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_align_left
	mov	arg01, local04
	call	#_module_align_inner_top
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local01
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	ptr__dat__, ##175234
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175234
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	rdlong	arg03, local04
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_align_right
	mov	arg01, local01
	call	#_module_align_inner_top
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local03
	mov	arg02, ##63488
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local03
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local03
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local03
	mov	arg02, local04
	call	#_module_fit_below
	mov	arg01, local03
	mov	arg02, #1
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_callback_1829_
	call	#__system___make_methodptr
	mov	arg01, local03
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_status_1835_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_init
	add	ptr__dat__, ##175100
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175100
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	call	#_module_fit_width
	rdlong	local03, local01
	add	local03, #272
	rdlong	arg03, local03
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	call	#_module_align_inner_left
	mov	arg01, local01
	call	#_module_align_middle
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local03
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local03
	mov	arg03, #2
	add	arg01, #248
	wrlong	#2, arg01
	add	arg01, #4
	wrlong	#2, arg01
	mov	arg01, local03
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local03
	mov	arg02, local04
	call	#_module_fit_below
	mov	arg01, local03
	mov	arg02, #2
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__update_condition_1841_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_init
	add	ptr__dat__, ##175186
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175186
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	call	#_module_fit_width
	rdlong	local03, local01
	add	local03, #272
	rdlong	arg03, local03
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	call	#_module_align_inner_left
	mov	arg01, local01
	call	#_module_align_middle
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local03
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local03
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local03
	mov	arg02, local04
	call	#_module_fit_below
	mov	arg01, local03
	mov	arg02, #3
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_callback_1829_
	call	#__system___make_methodptr
	mov	arg01, local03
	mov	arg03, #2
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#2, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_mode_1847_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_init
	add	ptr__dat__, ##175201
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175201
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	call	#_module_fit_width
	rdlong	local04, local01
	add	local04, #272
	rdlong	arg03, local04
	mov	arg01, local01
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	call	#_module_align_inner_left
	mov	arg01, local01
	call	#_module_align_middle
	mov	ptra, fp
	call	#popregs_
_motion_state_window_init_ret
	ret

_function_window_init
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	wrlong	arg03, local01
	mov	arg01, arg02
	add	arg01, #204
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	local01, arg01
	add	local01, #36
	mov	local02, local01
	mov	arg01, local02
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local02
	bmask	arg02, #15
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local02
	call	#_module_fit_height
	mov	arg01, local02
	call	#_module_fit_width
	mov	arg01, local02
	add	arg01, #248
	wrlong	#5, arg01
	add	arg01, #4
	wrlong	#5, arg01
	mov	arg01, local02
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local02
	call	#_module_align_inner_left
	mov	arg01, local02
	call	#_module_align_inner_top
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	mov	arg03, #8
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local03
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	sub	local01, #352
	mov	arg02, local01
	mov	arg01, local03
	call	#_module_set_text
	mov	arg01, local03
	mov	arg02, #1
	call	#_module_text_font
	rdlong	arg03, local03
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local03
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local03
	add	arg01, #204
	rdlong	arg02, arg01
	sub	arg01, #204
	cmp	arg02, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local03
	call	#_module_align_inner_top
	mov	arg01, objptr
	mov	arg02, ptr__update_header_1905_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, ##672
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local04
	mov	arg03, #0
	add	arg01, #248
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	call	#_module_fit_width
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_fit_below
	mov	arg01, local04
	call	#_module_align_inner_left
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_align_below
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	add	ptr__dat__, ##175239
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175239
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local02
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local02
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local02
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local02
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local02
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local02
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_off_1910_
	call	#__system___make_methodptr
	mov	arg01, local02
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_copy
	add	ptr__dat__, ##175243
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175243
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local01
	mov	arg02, #2
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local01
	mov	arg03, #1
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#1, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_incremental_1915_
	call	#__system___make_methodptr
	mov	arg01, local01
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_copy
	add	ptr__dat__, ##175248
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175248
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local01
	mov	arg02, #3
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local01
	mov	arg03, #2
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#2, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_continuous_1920_
	call	#__system___make_methodptr
	mov	arg01, local01
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	local05, local01
	mov	arg01, local05
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local05
	mov	arg02, local02
	call	#_module_copy
	add	ptr__dat__, ##175253
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175253
	mov	arg01, local05
	call	#_module_set_text
	mov	arg01, local05
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local05
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local05
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local05
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local05
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local05
	mov	arg02, #1
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, local05
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local05
	mov	arg03, #3
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#3, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_positional_1925_
	call	#__system___make_methodptr
	mov	arg01, local05
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local03
	mov	arg02, local05
	call	#_module_copy
	add	ptr__dat__, ##175258
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175258
	mov	arg01, local03
	call	#_module_set_text
	mov	arg01, local03
	add	arg01, #204
	rdlong	result1, arg01
	sub	arg01, #204
	cmp	result1, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local03
	add	arg01, #204
	rdlong	arg02, arg01
	sub	arg01, #204
	cmp	arg02, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local03
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local03
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local03
	mov	arg02, #2
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local03
	mov	arg03, #4
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#4, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_home_1930_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_copy
	add	ptr__dat__, ##175263
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175263
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local01
	mov	arg02, #3
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local01
	mov	arg03, #6
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#6, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_force_1940_
	call	#__system___make_methodptr
	mov	arg01, local01
	add	arg01, #312
	wrlong	result1, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_copy
	add	ptr__dat__, ##175268
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175268
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local01
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #3
	call	#_module_add_border
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local01
	mov	arg02, #3
	call	#_module_fit_space_even_verticle
	mov	arg01, local01
	mov	arg02, #2
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, local01
	mov	arg02, local05
	call	#_module_align_below
	mov	arg01, objptr
	mov	arg02, ptr__button_set_function_1901_
	call	#__system___make_methodptr
	mov	arg01, local01
	mov	arg03, #5
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#5, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_length_1935_
	call	#__system___make_methodptr
	add	local01, #312
	wrlong	result1, local01
	mov	ptra, fp
	call	#popregs_
_function_window_init_ret
	ret

_module_set_graph
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	add	local01, #204
	wrlong	#6, local01
	mov	arg01, objptr
	mov	arg02, ptr__module_graph_draw_1966_
	call	#__system___make_methodptr
	add	local01, #112
	wrlong	result1, local01
	sub	local01, #108
	wrlong	local02, local01
	sub	local01, #208
	add	local02, #106
	wrbyte	#1, local02
	sub	local02, #30
	mov	arg01, local02
	mov	arg02, local03
	mov	arg03, #20
	call	#_strncpy
	add	local02, #20
	mov	arg01, local02
	mov	arg02, local04
	mov	arg03, #10
	call	#_strncpy
	add	local02, #12
	mov	arg01, local02
	mov	arg02, local01
	call	#_module_init
	mov	arg01, local02
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	sub	local02, #32
	mov	arg02, local02
	call	#_module_set_text
	add	local02, #32
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	add	local02, #320
	mov	arg01, local02
	call	#_module_text_fit
	sub	local02, #320
	mov	arg01, local02
	rdlong	local04, local02
	add	local04, #272
	rdlong	arg03, local04
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	add	local02, #320
	mov	arg01, local02
	mov	arg02, local01
	call	#_module_init
	add	local02, ##1920
	mov	arg01, local02
	mov	arg02, ##@LR__1972
	sub	local02, ##2336
	rdlong	local04, local02
	mov	arg03, ptra
	wrlong	local04, ptra++
	call	#_sprintf
	sub	ptra, #4
	add	local02, #416
	mov	arg01, local02
	mov	arg03, #3
	add	arg01, #256
	wrlong	#3, arg01
	add	arg01, #4
	wrlong	#3, arg01
	mov	arg01, local02
	add	local02, ##1920
	mov	arg02, local02
	call	#_module_set_text
	sub	local02, ##1920
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	rdlong	local04, local02
	add	local04, #272
	rdlong	arg03, local04
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local02
	call	#_module_align_inner_bottom
	mov	arg01, local02
	call	#_module_align_inner_left
	mov	arg01, local02
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#1, arg01
	add	local02, ##1932
	mov	arg01, local02
	mov	arg02, ##@LR__1973
	sub	local02, ##2352
	rdlong	local04, local02
	mov	arg03, ptra
	wrlong	local04, ptra++
	call	#_sprintf
	sub	ptra, #4
	add	local02, ##740
	mov	arg01, local02
	mov	arg02, local01
	call	#_module_init
	mov	arg01, local02
	mov	arg03, #3
	add	arg01, #256
	wrlong	#3, arg01
	add	arg01, #4
	wrlong	#3, arg01
	mov	arg01, local02
	add	local02, ##1612
	mov	arg02, local02
	call	#_module_set_text
	sub	local02, ##1612
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	call	#_module_align_inner_left
	mov	arg01, local02
	add	arg01, #204
	rdlong	local04, arg01
	sub	arg01, #204
	cmp	local04, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#1, arg01
	mov	arg01, local02
	rdlong	local04, local02
	add	local04, #272
	rdlong	arg03, local04
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local02
	sub	local02, ##640
	mov	arg02, local02
	call	#_module_align_below
	add	local02, ##960
	mov	arg01, local02
	mov	arg02, local01
	call	#_module_init
	mov	arg01, local02
	sub	local02, ##960
	mov	arg02, local02
	call	#_module_align_below
	add	local02, ##960
	mov	arg01, local02
	sub	local02, ##960
	mov	arg02, local02
	call	#_module_fit_below
	add	local02, ##960
	mov	arg01, local02
	sub	local02, ##640
	mov	arg02, local02
	call	#_module_fit_right
	add	local02, ##640
	mov	arg01, local02
	sub	local02, ##640
	mov	arg02, local02
	call	#_module_align_right
	add	local02, ##640
	mov	arg01, local02
	rdlong	local04, local02
	mov	local03, local04
	add	local03, #272
	rdlong	arg02, local03
	add	local04, #268
	rdlong	arg03, local04
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #320
	mov	arg01, local02
	mov	arg02, local01
	call	#_module_init
	mov	arg01, local02
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	sub	local02, ##1292
	mov	arg02, local02
	call	#_module_set_text
	add	local02, ##1292
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local02
	rdlong	local04, local02
	add	local04, #272
	rdlong	arg03, local04
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	call	#_module_align_inner_left
	add	local02, #320
	mov	arg01, local02
	sub	local02, ##640
	mov	arg02, local02
	call	#_module_init
	add	local02, ##640
	mov	arg01, local02
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local02
	call	#_module_fit_width
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	call	#_module_align_middle
	mov	arg01, local02
	bmask	arg03, #15
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##65535, arg01
	add	local02, #320
	mov	arg01, local02
	sub	local02, ##960
	mov	arg02, local02
	call	#_module_init
	add	local02, ##960
	mov	arg01, local02
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local02
	call	#_module_fit_height
	mov	arg01, local02
	call	#_module_align_inner_left
	mov	arg01, local02
	call	#_module_align_inner_top
	add	local02, #272
	wrlong	##65535, local02
	sub	local02, #4
	wrlong	##65535, local02
	mov	ptra, fp
	call	#popregs_
_module_set_graph_ret
	ret

_module_graph_insert
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	add	arg01, #208
	rdlong	local02, arg01
	add	local02, #8
	rdlong	arg02, local02
	sub	local02, #8
	mov	arg01, local01
	neg	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #1 wc
 if_ae	jmp	#LR__0352
	add	local02, #12
	rdlong	arg02, local02
	sub	local02, #12
	mov	arg01, local01
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
'     {
'         return;
 if_ae	rdlong	local03, local02
 if_ae	add	local02, #4
 if_ae	wrlong	local03, local02
 if_ae	sub	local02, #4
 if_ae	wrlong	local01, local02
LR__0352
	mov	ptra, fp
	call	#popregs_
_module_graph_insert_ret
	ret

_status_page_init
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	add	local01, #4
	wrlong	arg02, local01
	add	local01, #4
	wrlong	arg03, local01
	add	local01, #4
	wrlong	arg04, local01
	add	local01, #4
	wrlong	arg05, local01
	add	local01, #4
	wrlong	arg06, local01
	add	local01, #4
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	##600, arg01
	mov	arg01, local03
	add	arg01, #232
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local03
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##627, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, objptr
	mov	arg02, ptr__module_animation_switch_page_up_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #304
	wrlong	result1, arg01
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##644
	rdlong	arg02, local01
	add	arg02, #48
	mov	arg01, local02
	call	#_module_set_image
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	call	#_module_align_inner_right
	mov	arg01, objptr
	mov	arg02, ptr__button_navigation_0764_
	call	#__system___make_methodptr
	mov	arg03, #0
	add	local02, #308
	wrlong	result1, local02
	sub	local02, #16
	wrlong	#0, local02
	add	local01, ##964
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local04
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local04
	bmask	arg02, #15
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local04
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local04
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local04
	call	#_module_fit_height
	mov	arg01, local04
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local04
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local04
	call	#_module_align_inner_left
	mov	arg01, local04
	call	#_module_align_inner_top
	add	local01, #320
	mov	local05, local01
	mov	arg01, local05
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local05
	mov	arg03, #0
	add	arg01, #248
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local05
	call	#_module_align_inner_left
	mov	arg01, local05
	call	#_module_align_inner_top
	mov	arg01, local05
	call	#_module_fit_width
	mov	arg01, local05
	call	#_module_fit_height
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	add	ptr__dat__, ##111721
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111721
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg03, #8
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	add	arg01, #204
	rdlong	arg02, arg01
	sub	arg01, #204
	cmp	arg02, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	add	local01, #320
	mov	local06, local01
	mov	arg01, local06
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local06
	mov	arg03, #8
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	add	ptr__dat__, ##111735
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111735
	mov	arg01, local06
	call	#_module_set_text
	mov	arg01, local06
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local06
	mov	arg03, ##15220
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local06
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local06
	call	#_module_align_inner_left
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##2244
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##2564
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111747
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111747
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local02
	mov	arg02, local06
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##2884
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##3204
	mov	local08, local01
	mov	arg01, local08
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local08
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111762
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111762
	mov	arg01, local08
	call	#_module_set_text
	mov	arg01, local08
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local08
	mov	arg02, local02
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##3524
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##3844
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111773
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111773
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local02
	mov	arg02, local08
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##4164
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##4484
	mov	local08, local01
	mov	arg01, local08
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local08
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111783
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111783
	mov	arg01, local08
	call	#_module_set_text
	mov	arg01, local08
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local08
	mov	arg02, local02
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##4804
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##5124
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111793
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111793
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local02
	mov	arg02, local08
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##5444
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##5764
	mov	local08, local01
	mov	arg01, local08
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local08
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111805
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111805
	mov	arg01, local08
	call	#_module_set_text
	mov	arg01, local08
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local08
	mov	arg02, local02
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##6084
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##6404
	mov	arg01, local01
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local06
	call	#_module_copy
	add	ptr__dat__, ##111816
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111816
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	mov	arg02, local08
	call	#_module_align_below
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local05
	call	#_module_init
	sub	local01, ##6724
	rdlong	arg02, local01
	add	arg02, #384
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_right
	add	local01, ##7044
	mov	local08, local01
	mov	arg01, local08
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local08
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local08
	bmask	arg02, #15
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local08
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local08
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local08
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local08
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local08
	call	#_module_fit_height
	mov	arg01, local08
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local08
	mov	arg02, local04
	call	#_module_align_right
	mov	arg01, local08
	call	#_module_align_inner_top
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local08
	call	#_module_init
	add	ptr__dat__, ##111827
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111827
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg03, #8
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	add	arg01, #204
	rdlong	local07, arg01
	sub	arg01, #204
	cmp	local07, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	add	local01, #320
	mov	local06, local01
	mov	arg01, local06
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local06
	mov	arg03, #8
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	add	ptr__dat__, ##111840
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111840
	mov	arg01, local06
	call	#_module_set_text
	mov	arg01, local06
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local06
	call	#_module_text_fit
	mov	arg01, local06
	mov	arg03, ##15220
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local06
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local06
	call	#_module_align_inner_left
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_copy
	add	local01, ##13424
	mov	arg02, local01
	mov	arg01, local07
	call	#_module_set_text
	mov	arg01, local07
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local07
	call	#_module_text_fit
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_fit_right
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_align_right
	mov	arg01, local07
	add	arg01, #204
	rdlong	local07, arg01
	sub	arg01, #204
	cmp	local07, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#3, arg01
	sub	local01, ##13104
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local02
	mov	arg03, #8
	add	arg01, #256
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	add	ptr__dat__, ##111850
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##111850
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	mov	arg03, ##15220
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local02
	mov	arg02, local06
	call	#_module_align_below
	mov	arg01, local02
	call	#_module_align_inner_left
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_copy
	add	local01, ##12804
	mov	arg02, local01
	mov	arg01, local07
	call	#_module_set_text
	mov	arg01, local07
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local07
	call	#_module_text_fit
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_fit_right
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_right
	mov	arg01, local07
	add	arg01, #204
	rdlong	local07, arg01
	sub	arg01, #204
	cmp	local07, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#3, arg01
	sub	local01, ##12484
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local07
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local07
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#200, arg01
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local07
	call	#_module_align_inner_left
	rdlong	local06, local07
	add	local06, #272
	rdlong	arg02, local06
	rdlong	local06, local07
	add	local06, #268
	rdlong	arg03, local06
	mov	arg01, local07
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local07
	call	#_module_fit_width
	add	local01, #320
	mov	arg02, local01
	mov	arg03, ##@LR__1974
	mov	arg04, ##@LR__1975
	mov	arg01, local07
	call	#_module_set_graph
	mov	arg01, local07
	mov	arg03, ##-1054867456
	add	arg01, #208
	rdlong	arg01, arg01
	add	arg01, #8
	wrlong	##1092616192, arg01
	add	arg01, #4
	wrlong	##-1054867456, arg01
	add	local01, ##2372
	mov	local06, local01
	mov	arg01, local06
	mov	arg02, local08
	call	#_module_init
	mov	arg01, local06
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local06
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#200, arg01
	mov	arg01, local06
	mov	arg02, local07
	call	#_module_align_below
	add	local06, #236
	rdlong	local07, local06
	add	local07, #10
	wrlong	local07, local06
	sub	local06, #236
	mov	arg01, local06
	call	#_module_align_inner_left
	rdlong	local08, local06
	add	local08, #272
	rdlong	arg02, local08
	rdlong	local08, local06
	add	local08, #268
	rdlong	arg03, local08
	mov	arg01, local06
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local06
	call	#_module_fit_width
	add	local01, #320
	mov	arg02, local01
	mov	arg03, ##@LR__1976
	mov	arg04, ##@LR__1977
	mov	arg01, local06
	call	#_module_set_graph
	mov	arg03, ##-1063256064
	add	local06, #208
	rdlong	local06, local06
	add	local06, #8
	wrlong	##1084227584, local06
	add	local06, #4
	wrlong	##-1063256064, local06
	add	local01, ##2372
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local02
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local02
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#200, arg01
	mov	arg01, local02
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local02
	mov	arg02, #3
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, local02
	call	#_module_align_inner_bottom
	add	local01, #320
	mov	arg01, local01
	sub	local01, ##14680
	rdlong	arg03, local01
	mov	arg02, local02
	call	#_function_window_init
	add	local01, ##17916
	mov	local08, local01
	mov	arg01, local08
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local08
	add	arg01, #248
	wrlong	#8, arg01
	add	arg01, #4
	wrlong	#8, arg01
	mov	arg01, local08
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local08
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#110, arg01
	mov	arg01, local08
	mov	arg02, #3
	call	#_module_fit_space_even
	mov	arg01, local08
	mov	arg02, #3
	mov	arg03, #3
	call	#_module_align_space_even
	mov	arg01, local08
	mov	arg02, local02
	call	#_module_align_above
	add	local01, #320
	mov	arg01, local01
	sub	local01, ##18236
	rdlong	arg03, local01
	mov	arg02, local08
	call	#_motion_state_window_init
	mov	ptra, fp
	call	#popregs_
_status_page_init_ret
	ret

_status_page_run
	mov	COUNT_, #8
	call	#pushregs_
	add	ptra, #112
	wrlong	arg01, fp
	add	ptr__dat__, ##111720
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##111720
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, #24
	call	#_module_draw
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	arg03, #8
	rdlong	arg02, arg03
	mov	arg03, #48
	call	#__system____builtin_memmove
	add	fp, #52
	wrbyte	#1, fp
	add	fp, #4
	wrbyte	#1, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #60
' 
'     while (!complete)
LR__0353
	add	ptr__dat__, ##111720
	rdbyte	local02, ptr__dat__ wz
	sub	ptr__dat__, ##111720
 if_ne	jmp	#LR__0382
	add	fp, #64
	mov	arg01, fp
	sub	fp, #64
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg02, local02
	mov	arg03, #48
	call	#__system____builtin_memmove
	add	fp, #68
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local03, fp
	sub	fp, #8
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0356
	add	fp, #56
	wrbyte	#1, fp
	add	fp, #12
	rdbyte	local02, fp wz
	sub	fp, #68
 if_e	jmp	#LR__0354
	rdlong	arg01, fp
	add	arg01, ##2264
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	jmp	#LR__0355
LR__0354
	rdlong	arg01, fp
	add	arg01, ##2264
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
LR__0355
LR__0356
	add	fp, #72
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local03, fp
	sub	fp, #12
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0359
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #8
	rdbyte	local03, local01 wz
 if_e	jmp	#LR__0357
	rdlong	arg01, fp
	add	arg01, ##2904
	rdlong	local03, fp
	add	local03, #20
	rdlong	local04, local03
	add	local04, #336
	mov	arg02, local04
	call	#_module_set_image
	jmp	#LR__0358
LR__0357
	rdlong	arg01, fp
	add	arg01, ##2904
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
LR__0358
LR__0359
	add	fp, #76
	rdlong	local02, fp
	sub	fp, #60
	rdlong	local03, fp
	sub	fp, #16
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0365
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #12
	rdlong	local03, local01 wz
 if_ne	jmp	#LR__0360
	rdlong	arg01, fp
	add	arg01, ##4184
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	rdlong	arg01, fp
	add	arg01, ##4824
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	jmp	#LR__0364
LR__0360
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #12
	rdlong	local03, local01
	cmp	local03, #2 wz
 if_ne	jmp	#LR__0361
	rdlong	arg01, fp
	add	arg01, ##4184
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	rdlong	arg01, fp
	add	arg01, ##4824
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
	jmp	#LR__0363
LR__0361
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #12
	rdlong	local03, local01
	cmp	local03, #1 wz
 if_ne	jmp	#LR__0362
	rdlong	arg01, fp
	add	arg01, ##4184
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
	rdlong	arg01, fp
	add	arg01, ##4824
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
LR__0362
LR__0363
LR__0364
LR__0365
	add	fp, #80
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local03, fp
	sub	fp, #20
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0368
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #16
	rdbyte	local03, local01 wz
 if_e	jmp	#LR__0366
	rdlong	arg01, fp
	add	arg01, ##3544
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	jmp	#LR__0367
LR__0366
	rdlong	arg01, fp
	add	arg01, ##3544
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
LR__0367
LR__0368
	add	fp, #81
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local03, fp
	sub	fp, #21
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0371
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #17
	rdbyte	local03, local01 wz
 if_e	jmp	#LR__0369
	rdlong	arg01, fp
	add	arg01, ##5464
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	jmp	#LR__0370
LR__0369
	rdlong	arg01, fp
	add	arg01, ##5464
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
LR__0370
LR__0371
	add	fp, #82
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local03, fp
	sub	fp, #22
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0374
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #18
	rdbyte	local03, local01 wz
 if_e	jmp	#LR__0372
	rdlong	arg01, fp
	add	arg01, ##6104
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #336
	call	#_module_set_image
	jmp	#LR__0373
LR__0372
	rdlong	arg01, fp
	add	arg01, ##6104
	rdlong	local03, fp
	add	local03, #20
	rdlong	arg02, local03
	add	arg02, #384
	call	#_module_set_image
LR__0373
LR__0374
	add	fp, #83
	rdbyte	local02, fp
	sub	fp, #60
	rdbyte	local06, fp
	sub	fp, #23
	getbyte	local03, local06, #0
	cmp	local02, local03 wz
 if_e	add	fp, #52
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #52
 if_e	mov	local05, local04 wz
 if_e	jmp	#LR__0377
	add	fp, #56
	wrbyte	#1, fp
	sub	fp, #56
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	local01, #19
	rdbyte	local06, local01 wz
 if_e	jmp	#LR__0375
	rdlong	arg01, fp
	add	arg01, ##6744
	rdlong	local03, fp
	add	local03, #20
	rdlong	local05, local03
	mov	local04, local05
	add	local04, #336
	mov	arg02, local04
	call	#_module_set_image
	jmp	#LR__0376
LR__0375
	rdlong	arg01, fp
	add	arg01, ##6744
	rdlong	local03, fp
	add	local03, #20
	rdlong	local05, local03
	mov	local04, local05
	add	local04, #384
	mov	arg02, local04
	call	#_module_set_image
LR__0376
LR__0377
	rdlong	arg01, fp
	add	arg01, #24
	rdlong	local03, fp
	add	local03, #4
	rdlong	arg02, local03
	rdlong	arg03, fp
	call	#_module_touch_check
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, #24
	rdlong	arg03, fp
	call	#_module_update_check
	add	fp, #56
	rdbyte	local02, fp wz
	sub	fp, #56
 if_e	jmp	#LR__0378
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, ##984
	call	#_module_draw
	add	fp, #56
	wrbyte	#0, fp
	sub	fp, #56
LR__0378
'         {
'             module_draw(page->display, &(page->machineStateWindow));
'             updateMachineState =  (0) ;
'         }
'         while (display_update_touch(page->display) == 0 && state_machine_equal(page->stateMachine, &currentState))
LR__0379
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	call	#_display_update_touch
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0381
	rdlong	local03, fp
	add	local03, #8
	rdlong	arg01, local03
	add	fp, #64
	mov	arg02, fp
	sub	fp, #64
	call	#_state_machine_equal
	cmp	result1, #0 wz
 if_e	jmp	#LR__0381
	call	#__system___getms
	mov	local02, result1
	add	fp, #60
	rdlong	local03, fp
	sub	fp, #60
	sub	local02, local03
	cmp	local02, #101 wc
 if_b	jmp	#LR__0380
	call	#__system___getms
	add	fp, #60
	wrlong	result1, fp
	sub	fp, #60
	rdlong	local02, fp
	add	local02, ##21468
	mov	local01, ##@LR__1978
	rdlong	local06, fp
	add	local06, #16
	rdlong	local05, local06
	add	local05, #4
	rdlong	arg01, local05
	rdlong	local05, fp
	add	local05, #12
	rdlong	arg02, local05
	add	arg02, #24
	call	#_steps_to_mm
	mov	local03, result1
	mov	arg01, local02
	mov	arg02, local01
	mov	arg03, ptra
	wrlong	local03, ptra++
	call	#_sprintf
	sub	ptra, #4
	rdlong	local02, fp
	add	local02, ##21448
	mov	local01, ##@LR__1979
	rdlong	local06, fp
	add	local06, #16
	rdlong	local05, local06
	rdlong	arg01, local05
	rdlong	local05, fp
	add	local05, #12
	rdlong	local07, local05
	add	local07, #24
	mov	arg02, local07
	call	#_raw_to_force
	mov	arg01, result1
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	local03, result1
	mov	arg01, local02
	mov	arg02, local01
	mov	arg03, ptra
	wrlong	local03, ptra++
	call	#_sprintf
	sub	ptra, #4
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, ##8024
	call	#_module_draw
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, ##8664
	call	#_module_draw
LR__0380
	rdlong	local02, fp
	add	local02, ##8984
	rdlong	local03, fp
	add	local03, #16
	rdlong	local06, local03
	add	local06, #4
	rdlong	arg01, local06
	rdlong	local06, fp
	add	local06, #12
	rdlong	arg02, local06
	add	arg02, #24
	call	#_steps_to_mm
	mov	arg02, result1
	mov	arg01, local02
	call	#_module_graph_insert
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, ##8984
	call	#_module_draw
	rdlong	local02, fp
	add	local02, ##11676
	rdlong	local03, fp
	add	local03, #16
	rdlong	local06, local03
	rdlong	arg01, local06
	rdlong	local06, fp
	add	local06, #12
	rdlong	local04, local06
	mov	local05, local04
	add	local05, #24
	mov	local08, local05
	mov	arg02, local08
	call	#_raw_to_force
	mov	arg01, result1
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	arg02, result1
	mov	arg01, local02
	call	#_module_graph_insert
	rdlong	local01, fp
	add	local01, #4
	rdlong	arg01, local01
	rdlong	arg02, fp
	add	arg02, ##11676
	call	#_module_draw
	jmp	#LR__0379
LR__0381
	add	fp, #4
	mov	arg01, fp
	add	fp, #60
	mov	arg02, fp
	sub	fp, #64
	mov	arg03, #48
	call	#__system____builtin_memmove
	add	fp, #52
	wrbyte	#0, fp
	sub	fp, #52
	jmp	#LR__0353
LR__0382
	mov	ptra, fp
	call	#popregs_
_status_page_run_ret
	ret

_control_begin
	wrlong	arg02, arg01
	add	arg01, #4
	wrlong	arg04, arg01
	add	arg01, #4
	wrlong	arg03, arg01
	sub	arg01, #8
	add	ptr__dat__, ##111864
	mov	arg04, ptr__dat__
	wrlong	objptr, arg04
	add	arg04, #4
	wrlong	ptr__control_cog_0827_, arg04
	add	arg04, #4
	wrlong	arg01, arg04
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##111864
	mov	result1, #30
	setq	arg03
	coginit	result1, entryptr__ wc
 if_b	neg	result1, #1
	add	arg01, ##16212
	wrlong	result1, arg01
	cmp	result1, ##-1 wz
'     {
'         return  (1) ;
 if_ne	mov	result1, #1
'     }
'     return  (0) ;
 if_e	mov	result1, #0
_control_begin_ret
	ret

_automatic_page_init
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	wrlong	arg02, local01
	add	local01, #4
	wrlong	arg03, local01
	add	local01, #4
	wrlong	arg04, local01
	add	local01, #4
	wrlong	arg05, local01
	add	local01, #8
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	##600, arg01
	mov	arg01, local03
	add	arg01, #232
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #248
	wrlong	#20, arg01
	add	arg01, #4
	wrlong	#20, arg01
	mov	arg01, local03
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##627, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, objptr
	mov	arg02, ptr__module_animation_switch_page_up_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #304
	wrlong	result1, arg01
	add	local01, #320
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local04
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#341, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	call	#_module_fit_height
	mov	arg01, local04
	add	arg01, #248
	wrlong	#20, arg01
	add	arg01, #4
	wrlong	#20, arg01
	mov	arg01, local04
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local04
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local04
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local04
	call	#_module_align_inner_top
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	mov	arg03, #5
	add	arg01, #256
	wrlong	#5, arg01
	add	arg01, #4
	wrlong	#5, arg01
	add	ptr__dat__, ##129232
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129232
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	add	arg01, #204
	rdlong	arg03, arg01
	sub	arg01, #204
	cmp	arg03, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local05, local01
	mov	arg01, local05
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local05
	mov	arg03, #5
	add	arg01, #256
	wrlong	#5, arg01
	add	arg01, #4
	wrlong	#5, arg01
	add	local01, ##2240
	mov	arg02, local01
	mov	arg01, local05
	call	#_module_set_text
	mov	arg01, local05
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local05
	call	#_module_text_fit
	mov	arg01, local05
	call	#_module_fit_width
	mov	arg01, local05
	add	arg01, #204
	rdlong	arg03, arg01
	sub	arg01, #204
	cmp	arg03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local05
	mov	arg02, local02
	call	#_module_align_below
	mov	arg01, local05
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	rdlong	local02, local05
	add	local02, #272
	rdlong	arg03, local02
	mov	arg01, local05
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_profileName_0863_
	call	#__system___make_methodptr
	mov	arg01, local05
	add	arg01, #312
	wrlong	result1, arg01
	sub	local01, ##1920
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	add	local01, ##1972
	mov	arg02, local01
	mov	arg01, local02
	call	#_module_set_text
	mov	arg01, local02
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local02
	call	#_module_text_fit
	mov	arg01, local02
	add	arg01, #204
	rdlong	arg03, arg01
	sub	arg01, #204
	cmp	arg03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local02
	call	#_module_fit_width
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local02
	mov	arg02, local05
	call	#_module_align_below
	rdlong	local05, local02
	add	local05, #272
	rdlong	arg03, local05
	mov	arg01, local02
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, objptr
	mov	arg02, ptr__update_profileNumber_0866_
	call	#__system___make_methodptr
	add	local02, #312
	wrlong	result1, local02
	sub	local01, ##1652
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#50, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local02
	add	arg01, #248
	wrlong	#20, arg01
	add	arg01, #4
	wrlong	#20, arg01
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_space_even
	mov	arg01, local02
	call	#_module_align_inner_bottom
	mov	arg01, objptr
	mov	arg02, ptr__button_open_0860_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##129249
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129249
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local01
	call	#_module_align_middle
	rdlong	local05, local01
	add	local05, #272
	rdlong	arg03, local05
	mov	arg01, local01
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#50, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local02
	add	arg01, #248
	wrlong	#20, arg01
	add	arg01, #4
	wrlong	#20, arg01
	mov	arg01, local02
	mov	arg02, #2
	mov	arg03, #2
	call	#_module_align_space_even
	mov	arg01, local02
	call	#_module_align_inner_bottom
	mov	arg01, objptr
	mov	arg02, ptr__button_run_0855_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##129254
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129254
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local01
	call	#_module_align_middle
	rdlong	local05, local01
	add	local05, #272
	rdlong	arg03, local05
	mov	arg01, local01
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local01
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#100, arg01
	mov	arg01, local01
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local01
	mov	arg03, #20
	add	arg01, #248
	wrlong	#20, arg01
	add	arg01, #4
	wrlong	#20, arg01
	mov	arg01, local01
	call	#_module_align_inner_right
	mov	arg01, local01
	call	#_module_align_inner_top
	mov	arg01, objptr
	mov	arg02, ptr__button_nav_0857_
	call	#__system___make_methodptr
	add	local01, #308
	wrlong	result1, local01
	sub	local01, #16
	wrlong	#0, local01
	mov	ptra, fp
	call	#popregs_
_automatic_page_init_ret
	ret

_automatic_page_run
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	add	local01, #16
	wrbyte	#0, local01
	sub	local01, #16
	rdlong	arg01, local01
	add	local01, #20
	mov	arg02, local01
	sub	local01, #20
	call	#_module_draw
' {
'     page->complete =  (0) ;
'     module_draw(page->display, &(page->root));
' 
'     while (!page->complete)
LR__0383
	add	local01, #16
	rdbyte	result1, local01 wz
	sub	local01, #16
 if_ne	jmp	#LR__0385
	add	local01, #20
	mov	arg01, local01
	sub	local01, #20
	rdlong	arg02, local01
	mov	arg03, local01
	call	#_module_touch_check
	rdlong	arg01, local01
	add	local01, #20
	mov	arg02, local01
	sub	local01, #20
	mov	arg03, local01
	call	#_module_update_check
'     {
'         module_touch_check(&(page->root), page->display, page);
'         module_update_check(page->display, &(page->root), page);
'         while (display_update_touch(page->display) == 0)
LR__0384
	rdlong	arg01, local01
	call	#_display_update_touch
	cmp	result1, #0 wz
 if_e	jmp	#LR__0384
	jmp	#LR__0383
LR__0385
	mov	ptra, fp
	call	#popregs_
_automatic_page_run_ret
	ret

_explorer_create
	add	ptr__dat__, ##129280
	wrlong	arg01, ptr__dat__
	add	ptr__dat__, #252
	wrlong	arg02, ptr__dat__
	add	ptr__dat__, #4
	wrlong	arg03, ptr__dat__
	add	ptr__dat__, ##12488
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##142024
	mov	arg02, arg05
	call	#_strcpy
	add	ptr__dat__, ##129540
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, #256
	wrlong	arg04, ptr__dat__
	add	ptr__dat__, ##12840
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##-1, ptr__dat__
' {
'     staticExplorer.display = display;
'     staticExplorer.x = x;
'     staticExplorer.y = y;
'     strcpy(staticExplorer.pathBuffer, path);
'     staticExplorer.complete =  (0) ;
'     staticExplorer.mode = mode;
'     staticExplorer.page = 0;
'     staticExplorer.selection = -1;
'     return &staticExplorer;
	sub	ptr__dat__, ##12848
	mov	result1, ptr__dat__
	sub	ptr__dat__, ##129280
_explorer_create_ret
	ret

_explorer_run
	mov	COUNT_, #42
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	mov	local02, ##2457600
	decod	local03, #10
	mov	local04, #0
	mov	local05, #0
	decod	local06, #10
	mov	local07, ##600
	mov	arg02, #0
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, ##2457600
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	mov	local08, #75
	mov	local09, #32
	mov	local10, #10
	add	local01, #260
	wrbyte	#0, local01
	add	local01, #4
	mov	local11, local01
	mov	arg01, local11
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local12, local01
	mov	arg01, local12
	mov	arg02, local11
	call	#_module_init
	mov	arg01, local12
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	##768, arg01
	add	arg01, #4
	wrlong	#400, arg01
	sub	local01, #332
	rdlong	arg02, local01
	add	local01, #4
	rdlong	arg03, local01
	mov	arg01, local12
	add	arg01, #232
	wrlong	arg02, arg01
	add	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local12
	add	arg01, #248
	wrlong	#30, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local12
	add	arg01, #272
	wrlong	##50712, arg01
	sub	arg01, #4
	wrlong	##50712, arg01
	mov	arg01, local12
	mov	arg02, #0
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local12
	add	arg01, #264
	wrlong	#20, arg01
	add	local01, ##648
	mov	local13, local01
	mov	arg01, local13
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local13
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	local01, ##11840
	mov	arg02, local01
	mov	arg01, local13
	call	#_module_set_text
	mov	arg01, local13
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local13
	call	#_module_text_fit
	mov	arg01, local13
	call	#_module_fit_width
	rdlong	arg03, local13
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local13
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local13
	call	#_module_align_inner_top
	mov	arg01, local13
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local13
	add	arg01, #204
	rdlong	result1, arg01
	sub	arg01, #204
	cmp	result1, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local13
	add	arg01, #204
	rdlong	local14, arg01
	sub	arg01, #204
	cmp	local14, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	sub	local01, ##11520
	mov	local15, local01
	mov	arg01, local15
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local15
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	ptr__dat__, ##17012
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17012
	mov	arg01, local15
	call	#_module_set_image
	mov	arg01, local15
	call	#_module_align_inner_top
	mov	arg01, local15
	call	#_module_align_inner_left
	mov	arg01, local15
	mov	arg03, ##63488
	add	arg01, #272
	wrlong	##63488, arg01
	sub	arg01, #4
	wrlong	##63488, arg01
	mov	arg01, objptr
	mov	arg02, ptr__button_delete_0891_
	call	#__system___make_methodptr
	mov	arg01, local15
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local16, local01
	mov	arg01, local16
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local16
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#75, arg01
	add	arg01, #4
	wrlong	#32, arg01
	mov	arg01, local16
	mov	arg02, #1
	mov	arg03, #6
	call	#_module_align_center_sector
	mov	arg01, local16
	call	#_module_align_inner_bottom
	rdlong	arg03, local16
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local16
	add	arg01, #272
	wrlong	##63488, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local16
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, objptr
	mov	arg02, ptr__button_cancel_0893_
	call	#__system___make_methodptr
	mov	arg01, local16
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local17, local01
	mov	arg01, local17
	mov	arg02, local16
	call	#_module_init
	add	ptr__dat__, ##129259
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129259
	mov	arg01, local17
	call	#_module_set_text
	mov	arg01, local17
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local17
	call	#_module_text_fit
	mov	arg01, local17
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local17
	call	#_module_align_middle
	rdlong	arg03, local17
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local17
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local18, local01
	mov	arg01, local18
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local18
	mov	arg02, local16
	call	#_module_copy
	mov	arg01, local18
	mov	arg02, local16
	call	#_module_align_right
	mov	arg01, local18
	mov	arg03, ##65504
	add	arg01, #272
	wrlong	##65504, arg01
	sub	arg01, #4
	wrlong	##65504, arg01
	mov	arg01, objptr
	mov	arg02, ptr__button_dotdot_0896_
	call	#__system___make_methodptr
	mov	arg01, local18
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local19, local01
	mov	arg01, local19
	mov	arg02, local18
	call	#_module_init
	add	ptr__dat__, ##129266
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129266
	mov	arg01, local19
	call	#_module_set_text
	mov	arg01, local19
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local19
	call	#_module_text_fit
	mov	arg01, local19
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local19
	call	#_module_align_middle
	rdlong	arg03, local19
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local19
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local20, local01
	mov	arg01, local20
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local20
	mov	arg02, local18
	call	#_module_copy
	mov	arg01, local20
	mov	arg02, local18
	call	#_module_align_right
	mov	arg01, objptr
	mov	arg02, ptr__button_prev_0898_
	call	#__system___make_methodptr
	mov	arg01, local20
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local21, local01
	mov	arg01, local21
	mov	arg02, local20
	call	#_module_init
	add	ptr__dat__, ##129269
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129269
	mov	arg01, local21
	call	#_module_set_text
	mov	arg01, local21
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local21
	call	#_module_text_fit
	mov	arg01, local21
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local21
	call	#_module_align_middle
	rdlong	arg03, local21
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local21
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local22, local01
	mov	arg01, local22
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local22
	mov	arg02, local20
	call	#_module_copy
	mov	arg01, local22
	mov	arg02, local20
	call	#_module_align_right
	mov	arg01, objptr
	mov	arg02, ptr__button_next_0900_
	call	#__system___make_methodptr
	mov	arg01, local22
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local23, local01
	mov	arg01, local23
	mov	arg02, local22
	call	#_module_init
	add	ptr__dat__, ##129271
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129271
	mov	arg01, local23
	call	#_module_set_text
	mov	arg01, local23
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local23
	call	#_module_text_fit
	mov	arg01, local23
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local23
	call	#_module_align_middle
	rdlong	arg03, local23
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local23
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local24, local01
	mov	arg01, local24
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local24
	mov	arg02, local22
	call	#_module_copy
	mov	arg01, local24
	mov	arg02, #5
	mov	arg03, #6
	call	#_module_align_center_sector
	rdlong	arg03, local24
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local24
	add	arg01, #272
	wrlong	##2016, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, objptr
	mov	arg02, ptr__button_done_0902_
	call	#__system___make_methodptr
	mov	arg01, local24
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local25, local01
	mov	arg01, local25
	mov	arg02, local24
	call	#_module_init
	add	ptr__dat__, ##129273
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129273
	mov	arg01, local25
	call	#_module_set_text
	mov	arg01, local25
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local25
	call	#_module_text_fit
	mov	arg01, local25
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local25
	call	#_module_align_middle
	rdlong	arg03, local25
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local25
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local26, local01
	mov	arg01, local26
	mov	arg02, local12
	call	#_module_init
	mov	arg01, local26
	mov	arg02, local13
	call	#_module_align_below
	mov	arg01, local26
	mov	arg02, local13
	call	#_module_fit_below
	mov	arg01, local26
	call	#_module_fit_width
	mov	arg01, local26
	call	#_module_align_inner_left
	mov	arg01, local26
	rdlong	local27, local26
	add	local27, #272
	rdlong	arg02, local27
	rdlong	local28, local26
	add	local28, #268
	rdlong	local29, local28
	sub	local28, #268
	mov	arg03, local29
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	local30, local13
	mov	local31, #0
	mov	local32, #0
'     for (int i = 0; i <  2 ; i++)
	sub	local01, ##4744
LR__0386
	cmps	local32, #2 wc
 if_ae	jmp	#LR__0389
	mov	local33, #0
'     {
'         Module *file;
'         for (int j = 0; j <  6 ; j++)
LR__0387
	cmps	local33, #6 wc
 if_ae	jmp	#LR__0388
	mov	local34, local31
	shl	local34, #2
	add	local34, local31
	shl	local34, #6
	add	local01, ##5064
	add	local34, local01
	mov	arg01, local34
	mov	arg02, local26
	call	#_module_init
	mov	arg01, local34
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local34
	add	arg01, #204
	wrlong	#4, arg01
	add	arg01, #36
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#100, arg01
	rdlong	local28, local34
	add	local28, #272
	rdlong	arg03, local28
	mov	arg01, local34
	add	arg01, #272
	wrlong	##63488, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local34
	mov	arg02, local30
	call	#_module_align_below
	mov	arg02, local33
	add	arg02, #1
	mov	arg01, local34
	mov	arg03, #6
	call	#_module_align_space_even
	mov	arg01, local34
	add	arg01, #280
	wrbyte	#0, arg01
	mov	local35, local31
	shl	local35, #2
	add	local35, local31
	shl	local35, #6
	add	local01, ##3840
	mov	local27, local01
	add	local35, local01
	mov	arg01, local35
	mov	arg02, local34
	call	#_module_init
	mov	local02, local31
	shl	local02, #2
	add	local02, local31
	shl	local02, #2
	sub	local01, ##8896
	add	local02, local01
	mov	arg01, local35
	mov	arg02, local02
	call	#_module_set_text
	mov	arg01, local35
	mov	arg02, #0
	call	#_module_text_font
	mov	arg01, local35
	call	#_module_text_fit
	mov	arg01, local35
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	rdlong	local28, local35
	add	local28, #268
	rdlong	local29, local28
	sub	local28, #268
	mov	arg01, local35
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	local29, arg01
	mov	arg01, local35
	call	#_module_fit_width
	mov	arg01, local35
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local35
	add	arg01, #204
	rdlong	local14, arg01
	sub	arg01, #204
	cmp	local14, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local35
	rdlong	arg02, local35
	call	#_module_align_below
	add	local31, #1
	add	local33, #1
	sub	local01, #8
	jmp	#LR__0387
LR__0388
	add	local34, #4
	rdlong	local30, local34
	sub	local34, #4
	add	local32, #1
	jmp	#LR__0386
LR__0389
'         {
'             file = &(explorer->fileModule[index]);
'             module_init(file, subroot);
'             module_set_margin(file, padding, padding);
'             module_set_rectangle(file, 100, 100);
'             module_set_color(file,  0xf800 , file->parent->foregroundColor);
'             module_align_below(file, below);
'             module_align_space_even(file, (j + 1),  6 );
'             module_set_visable(file,  (0) );
' 
'             Module *text = &(explorer->fileText[index]);
'             module_init(text, file);
'             module_set_text(text, explorer->files[index]);
'             module_text_font(text,  0 );
'             module_text_fit(text);
'             module_set_margin(text, padding, padding);
'             module_set_color(text,  0x0000 , text->parent->backgroundColor);
'             module_fit_width(text);
'             module_align_center(text);
'             module_text_align(text, MODULE_TEXT_ALIGN_INNER_CENTER);
'             module_align_below(text, text->parent);
'             index++;
'         }
'         below = file->child[0];
'     }
' 
'     while (!explorer->complete)
LR__0390
	add	local01, #260
	rdbyte	result1, local01 wz
	sub	local01, #260
 if_ne	jmp	#LR__0403
	add	local01, ##12744
	mov	arg01, local01
	call	#_chdir
	mov	arg01, local01
	sub	local01, ##12744
	call	#_opendir
	mov	local36, result1 wz
 if_ne	jmp	#LR__0391
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1980
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	add	ptr___system__dat__, #24
	rdlong	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #24
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'             return  (0) ;
	mov	result1, #0
	jmp	#LR__0406
LR__0391
	mov	local37, #0
'         }
' 
'         for (int i = 0; i < explorer->page *  ( 6 * 2 ) ; i++)
LR__0392
	add	local01, ##12844
	rdlong	arg01, local01
	sub	local01, ##12844
	mov	local38, arg01
	shl	local38, #1
	add	local38, arg01
	shl	local38, #2
	cmps	local37, local38 wc
 if_ae	jmp	#LR__0393
	mov	arg01, local36
	call	#_readdir
	cmp	result1, #0 wz
'             {
'                 break;
 if_ne	add	local37, #1
 if_ne	jmp	#LR__0392
LR__0393
	mov	local39, #0
'             }
'         }
' 
'         for (int i = 0; i <  ( 6 * 2 ) ; i++)
LR__0394
	cmps	local39, #12 wc
 if_ae	jmp	#LR__0401
	mov	local38, local39
	shl	local38, #2
	add	local26, #4
	mov	local40, local26
	add	local38, local26
	rdlong	local41, local38
	mov	arg01, local36
	call	#_readdir
	mov	local42, result1 wz
	sub	local26, #4
 if_e	jmp	#LR__0399
	mov	arg01, local39
	shl	arg01, #2
	add	arg01, local39
	shl	arg01, #2
	add	local01, #8
	add	arg01, local01
	mov	arg02, local42
	call	#_strcpy
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1981
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local03, local39
	shl	local03, #2
	add	local03, local39
	shl	local03, #2
	mov	local04, local01
	add	local03, local01
	mov	local05, local03
	mov	arg01, #0
	mov	arg02, local05
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local02, #0
	mov	arg01, local42
	call	#_isFile_0888
	cmp	result1, #0 wz
	sub	local01, #8
 if_e	jmp	#LR__0395
	add	ptr__dat__, ##17060
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17060
	mov	arg01, local41
	call	#_module_set_image
	jmp	#LR__0396
LR__0395
	add	ptr__dat__, ##17108
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17108
	mov	arg01, local41
	call	#_module_set_image
LR__0396
	mov	arg01, local41
	mov	arg03, #100
	add	arg01, #240
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#100, arg01
	mov	arg01, local41
	mov	arg02, #1
	add	arg01, #280
	wrbyte	#1, arg01
	add	local01, ##12848
	rdlong	local38, local01
	sub	local01, ##12848
	cmp	local38, local39 wz
 if_ne	jmp	#LR__0397
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1982
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, ##12848
	rdlong	arg02, local01
	sub	local01, ##12848
	mov	local03, #10
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local02, #0
	add	local41, #4
	rdlong	arg01, local41
	sub	local41, #4
	mov	arg03, ##50712
	add	arg01, #272
	wrlong	##2016, arg01
	sub	arg01, #4
	wrlong	##50712, arg01
	jmp	#LR__0398
LR__0397
	add	local41, #4
	rdlong	arg01, local41
	sub	local41, #4
	mov	arg03, ##50712
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	##50712, arg01
LR__0398
	mov	arg01, objptr
	mov	arg02, ptr__button_files_0906_
	call	#__system___make_methodptr
	mov	arg02, result1
	mov	arg01, local41
	mov	arg03, local39
	add	arg01, #308
	wrlong	arg02, arg01
	sub	arg01, #16
	wrlong	arg03, arg01
	jmp	#LR__0400
LR__0399
	mov	arg01, local41
	mov	arg02, #0
	add	arg01, #280
	wrbyte	#0, arg01
	mov	arg03, #0
	add	local41, #308
	wrlong	#0, local41
	sub	local41, #16
	wrlong	#0, local41
LR__0400
	add	local39, #1
	jmp	#LR__0394
LR__0401
	mov	arg01, local36
	call	#_closedir
	rdlong	arg01, local01
	mov	arg02, local11
	call	#_module_draw
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1983
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local28, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local29, #0
'         do
LR__0402
	rdlong	arg01, local01
	call	#_display_update_touch
	rdlong	arg02, local01
	mov	local27, local01
	mov	arg01, local11
	mov	arg03, local27
	call	#_module_touch_check
	cmp	result1, #0 wz
 if_e	jmp	#LR__0402
	jmp	#LR__0390
LR__0403
	rdlong	arg01, local01
	mov	arg02, ##2457600
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	add	local01, #4
	rdlong	local38, local01 wz
	sub	local01, #4
 if_ne	jmp	#LR__0405
	add	local01, ##12848
	rdlong	local38, local01
	sub	local01, ##12848
	cmp	local38, ##-1 wz
 if_ne	jmp	#LR__0404
	add	local01, ##12744
	mov	arg01, local01
	mov	arg02, ##@LR__1984
	call	#_strcpy
'         {
'             strcpy(explorer->pathBuffer, "");
'             return explorer->pathBuffer;
	mov	result1, local01
	jmp	#LR__0406
LR__0404
	add	local01, ##12744
	mov	arg01, local01
	mov	arg02, ##@LR__1985
	call	#_strcat
	mov	arg01, local01
	add	local01, #104
	rdlong	local27, local01
	mov	arg02, local27
	shl	arg02, #2
	add	arg02, local27
	shl	arg02, #2
	sub	local01, ##12840
	add	arg02, local01
	call	#_strcat
	sub	local01, #8
LR__0405
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1986
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, ##12744
	mov	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return explorer->pathBuffer;
	mov	result1, local01
LR__0406
	mov	ptra, fp
	call	#popregs_
_explorer_run_ret
	ret

_selection_init
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #4
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local04
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#400, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	add	arg01, #232
	wrlong	#312, arg01
	add	arg01, #4
	wrlong	#100, arg01
	mov	arg01, local04
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local04
	add	arg01, #272
	wrlong	##50712, arg01
	sub	arg01, #4
	wrlong	#31, arg01
	mov	arg01, local04
	mov	arg02, #0
	mov	arg03, #1
	call	#_module_add_border
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local03
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	ptr__dat__, ##175273
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##175273
	mov	arg01, local03
	call	#_module_set_text
	mov	arg01, local03
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local03
	call	#_module_text_fit
	rdlong	arg03, local03
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local03
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local03
	call	#_module_align_inner_top
	mov	arg01, local03
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local03
	add	arg01, #204
	rdlong	local05, arg01
	sub	arg01, #204
	cmp	local05, #1 wz
'         return;
 if_e	add	arg01, #216
 if_e	wrbyte	#1, arg01
	mov	local06, #0
' 
' 
'     Module *root = &(selection->root);
'     module_init(root,  (0) );
' 
' 
'     Module *window = &(selection->window);
'     module_init(window, root);
'     module_set_rectangle_circle(window,  400 , 0);
'     module_set_position(window, x, y);
'     module_set_padding(window, padding, padding);
'     module_set_color(window,  0xC618 ,  0x001f );
'     module_add_border(window,  0x0000 , 1);
' 
' 
'     Module *title = &(selection->title);
'     module_init(title, window);
'     module_set_margin(title, padding, padding);
'     module_set_text(title, selectBuffer);
'     module_text_font(title,  2 );
'     module_text_fit(title);
'     module_set_color(title,  0x0000 , title->parent->foregroundColor);
'     module_align_inner_top(title);
'     module_align_center(title);
'     module_text_underline(title);
' 
'     Module *below = title;
'     for (int i = 0; i <  10 ; i++)
	sub	local01, ##644
LR__0407
	cmps	local06, #10 wc
 if_ae	jmp	#LR__0408
	mov	local07, local06
	shl	local07, #2
	add	local07, local06
	shl	local07, #6
	add	local01, ##964
	add	local07, local01
	mov	arg01, local07
	mov	arg02, local04
	call	#_module_init
	mov	arg02, local06
	shl	arg02, #2
	add	arg02, local06
	shl	arg02, #2
	add	local01, ##3200
	add	arg02, local01
	mov	arg01, local07
	call	#_module_set_text
	mov	arg01, local07
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local07
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#40, arg01
	mov	arg01, local07
	call	#_module_fit_width
	mov	arg01, local07
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	rdlong	arg03, local07
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local07
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local07
	call	#_module_align_inner_left
	mov	arg01, local07
	mov	arg02, local03
	call	#_module_align_below
	mov	arg01, local07
	mov	arg02, #0
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local07
	add	arg01, #204
	rdlong	local05, arg01
	sub	arg01, #204
	cmp	local05, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#2, arg01
	mov	arg01, local07
	add	arg01, #204
	rdlong	local05, arg01
	sub	arg01, #204
	cmp	local05, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local07
	add	arg01, #280
	wrbyte	#0, arg01
	mov	arg01, objptr
	mov	arg02, ptr__check_buttons_1974_
	call	#__system___make_methodptr
	mov	arg01, local07
	mov	arg03, local06
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	arg03, arg01
	mov	local03, local07
	add	local06, #1
	sub	local01, ##4164
	jmp	#LR__0407
LR__0408
	add	local04, #244
	wrlong	#100, local04
	add	local01, ##4364
	wrlong	#0, local01
	add	local01, #4
	wrlong	##-1, local01
	sub	local01, ##4368
	wrlong	local02, local01
	mov	ptra, fp
	call	#popregs_
_selection_init_ret
	ret

_selection_add_option
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1987
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, ##4364
	rdlong	arg03, local01
	mov	local03, arg03
	shl	local03, #2
	add	local03, arg03
	shl	local03, #6
	sub	local01, ##3400
	add	local03, local01
	mov	arg01, arg03
	shl	arg01, #2
	add	arg01, arg03
	shl	arg01, #2
	add	local01, ##3200
	add	arg01, local01
	mov	arg02, local02
	mov	arg03, #20
	call	#_strncpy
	mov	arg01, local03
	mov	arg02, #1
	add	arg01, #280
	wrbyte	#1, arg01
	add	local01, #200
	rdlong	local02, local01
	add	local02, #1
	wrlong	local02, local01
	add	local03, #236
	rdlong	local02, local03
	add	local03, #8
	rdlong	arg01, local03
	add	local02, arg01
	add	local03, #8
	rdlong	local03, local03
	add	local02, local03
	sub	local01, ##3796
	wrlong	local02, local01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1988
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_selection_add_option_ret
	ret

_selection_run
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	mov	arg02, #0
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, ##2457600
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
	rdlong	arg01, local01
	add	local01, #4
	mov	arg02, local01
	sub	local01, #4
	call	#_module_draw
' {
' 
'     display_bte_memory_copy(selection->display,  0 ,  1024 , 0, 0,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  1024 ,  600 );
'     module_draw(selection->display, &(selection->root));
' 
'     do
LR__0409
	rdlong	arg01, local01
	call	#_display_update_touch
	add	local01, #4
	mov	arg01, local01
	sub	local01, #4
	rdlong	arg02, local01
	mov	arg03, local01
	call	#_module_touch_check
	cmp	result1, #0 wz
 if_e	jmp	#LR__0409
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__1989
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, ##4368
	rdlong	arg02, local01
	sub	local01, ##4368
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	rdlong	arg01, local01
	mov	arg02, ##2457600
	decod	arg03, #10
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, #0
	mov	arg09, #0
	decod	arg10, #10
	mov	arg11, ##600
	call	#_display_bte_memory_copy
' 
' 
'     display_bte_memory_copy(selection->display,  1024 * 600 * 2 * 2 ,  1024 , 0, 0,  0 ,  1024 , 0, 0,  1024 ,  600 );
'     return selection->selected;
	add	local01, ##4368
	rdlong	result1, local01
	mov	ptra, fp
	call	#popregs_
_selection_run_ret
	ret

_run_motion_profile_init
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	add	arg01, #4
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#0, arg01
	add	arg01, #1
	wrbyte	#0, arg01
	add	arg01, #2
	wrlong	#0, arg01
	add	arg01, #12
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	sub	arg01, #8
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	#0, arg01
_run_motion_profile_init_ret
	ret

_get_function_info
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
' {
'     switch (id)
 if_e	jmp	#LR__0410
	cmp	local02, #1 wz
 if_e	jmp	#LR__0411
	jmp	#LR__0412
LR__0410
	wrlong	#0, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1990
	mov	arg03, #10
	call	#_strncpy
	add	local01, #20
	wrlong	#0, local01
	add	local01, #4
	wrlong	#2, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1991
	mov	arg03, #20
	call	#_strncpy
	add	local01, #20
	mov	arg02, ##@LR__1992
	mov	arg01, local01
	mov	arg03, #20
	call	#_strncpy
'     {
'         info->id = QUARTET_FUNC_LINE;
' 
'         strncpy(info->name, "Line",  10 );
' 
'         info->func =  (0) ;
' 
'         info->args_count = 2;
'         strncpy(info->args[0], "distance",  20 );
'         strncpy(info->args[1], "strain rate",  20 );
'         break;
	jmp	#LR__0413
LR__0411
	wrlong	#1, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1993
	mov	arg03, #10
	call	#_strncpy
	mov	arg01, objptr
	mov	arg02, ptr__sigmoid_
	call	#__system___make_methodptr
	add	local01, #20
	wrlong	result1, local01
	add	local01, #4
	wrlong	#3, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1994
	mov	arg03, #20
	call	#_strncpy
	add	local01, #20
	mov	arg01, local01
	mov	arg02, ##@LR__1995
	mov	arg03, #20
	call	#_strncpy
	add	local01, #20
	mov	arg02, ##@LR__1996
	mov	arg01, local01
	mov	arg03, #20
	call	#_strncpy
'     {
'         info->id = QUARTET_FUNC_SIGMOIDAL;
' 
'         strncpy(info->name, "Sigmoid",  10 );
' 
'         info->func = sigmoid;
' 
'         info->args_count = 3;
'         strncpy(info->args[0], "distance",  20 );
'         strncpy(info->args[1], "strain rate",  20 );
'         strncpy(info->args[2], "error",  20 );
'         break;
	jmp	#LR__0413
LR__0412
	wrlong	#1, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1997
	call	#__system____builtin_strcpy
	add	local01, #20
	wrlong	#0, local01
	add	local01, #4
	wrlong	#0, local01
'         info->id = QUARTET_FUNC_SIGMOIDAL;
' 
'         __builtin_strcpy(info->name, "") ;
' 
'         info->func =  (0) ;
' 
'         info->args_count = 0;
'         break;
LR__0413
	mov	ptra, fp
	call	#popregs_
_get_function_info_ret
	ret

_position_profile
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	rdlong	result1, local01
	qmul	result1, ##1076
	mov	local02, arg03
	add	local02, #60
	mov	arg02, local01
	getqx	arg03
	add	arg03, local02
	call	#_position_set
	mov	arg03, result1
	add	local01, #13
	rdbyte	result1, local01 wz
	sub	local01, #13
	sub	local02, #60
 if_e	jmp	#LR__0414
	rdlong	result1, local01
	add	result1, #1
	wrlong	result1, local01
	add	local01, #13
	wrbyte	#0, local01
	sub	local01, #13
LR__0414
	rdlong	result1, local01
	add	local02, #56
	rdlong	local02, local02
	cmps	result1, local02 wc
 if_ae	add	local01, #12
 if_ae	wrbyte	#1, local01
'     {
'         run->profileComplete =  (1) ;
'     }
'     return position;
	mov	result1, arg03
	mov	ptra, fp
	call	#popregs_
_position_profile_ret
	ret

_position_set
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	add	local01, #8
	rdlong	result1, local01
	qmul	result1, #100
	mov	local02, arg03
	add	local02, #76
	getqx	arg03
	add	arg03, local02
	call	#_position_quartet
	mov	arg03, result1
	add	local01, #6
	rdbyte	result1, local01 wz
	sub	local01, #14
	sub	local02, #76
 if_e	jmp	#LR__0415
	add	local01, #8
	rdlong	result1, local01
	add	result1, #1
	wrlong	result1, local01
	add	local01, #6
	wrbyte	#0, local01
	sub	local01, #14
LR__0415
	add	local01, #8
	rdlong	arg02, local01
	sub	local01, #8
	add	local02, #72
	rdlong	result1, local02
	sub	local02, #72
	cmps	arg02, result1 wc
 if_b	jmp	#LR__0416
	add	local01, #4
	rdlong	result1, local01
	add	result1, #1
	wrlong	result1, local01
	add	local01, #4
	wrlong	#0, local01
	sub	local01, #8
LR__0416
	add	local01, #4
	rdlong	arg02, local01
	sub	local01, #4
	add	local02, #68
	rdlong	local02, local02
	cmps	arg02, local02 wc
 if_ae	add	local01, #13
 if_ae	wrbyte	#1, local01
 if_ae	sub	local01, #9
 if_ae	wrlong	#0, local01
'     {
' 
'         run->setComplete =  (1) ;
'         run->currentExecution = 0;
'     }
'     return position;
	mov	result1, arg03
	mov	ptra, fp
	call	#popregs_
_position_set_ret
	ret

_position_quartet
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #456
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	mov	arg01, fp
	sub	fp, #16
	mov	arg02, arg03
	add	arg02, #52
	rdlong	arg02, arg02
	call	#_get_function_info
	add	fp, #40
	rdlong	arg01, fp
	sub	fp, #40
	mov	arg02, #0
	call	#__system___funcptr_cmp
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0417
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #4
	rdlong	arg02, fp
	add	result1, #16
	wrlong	arg02, result1
	add	fp, #4
	rdlong	arg02, fp
	mov	local01, arg02
	add	arg02, #28
	rdlong	arg01, arg02
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	add	arg02, #56
	rdlong	arg02, arg02
	call	#__system___float_add
	add	local01, #28
	wrlong	result1, local01
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	add	local01, #14
	wrbyte	#1, local01
'     {
' 
'         run->lastQuartetTime = t;
'         run->lastQuartetDistance += quartet->parameters[0];
'         run->quartetComplete =  (1) ;
'         return 0;
	mov	result1, #0
	jmp	#LR__0419
LR__0417
	add	fp, #40
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	sub	fp, #36
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	add	arg02, #16
	rdlong	arg02, arg02
	bitnot	arg02, #31
	call	#__system___float_add
	mov	arg01, result1
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #12
	add	arg02, #56
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	add	fp, #448
	wrlong	result1, fp
	sub	fp, #440
	rdlong	local01, fp
	add	local01, #28
	rdlong	local03, local01
	add	fp, #444
	wrlong	local03, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #436
	rdlong	local03, fp
	sub	fp, #12
	add	local03, #56
	rdlong	arg02, local03
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0418
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	rdlong	local03, fp
	add	local01, #16
	wrlong	local03, local01
	add	fp, #4
	rdlong	local03, fp
	mov	local01, local03
	add	local03, #28
	rdlong	arg01, local03
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #12
	add	local03, #56
	rdlong	arg02, local03
	call	#__system___float_add
	add	local01, #28
	wrlong	result1, local01
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	add	local01, #14
	wrbyte	#1, local01
LR__0418
'     {
'         run->lastQuartetTime = t;
'         run->lastQuartetDistance += quartet->parameters[0];
'         run->quartetComplete =  (1) ;
'     }
'     return lastQuartetDistance + position;
	add	fp, #452
	rdlong	arg01, fp
	sub	fp, #4
	rdlong	arg02, fp
	sub	fp, #448
	call	#__system___float_add
LR__0419
	mov	ptra, fp
	call	#popregs_
_position_quartet_ret
	ret

_sigmoid
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, arg02
	add	arg02, #4
	rdlong	local03, arg02
	add	arg02, #4
	rdlong	local04, arg02
	mov	local05, #1
	mov	arg01, local02
	mov	arg02, #0
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_b	neg	local05, #1
 if_b	bitnot	local02, #31
	mov	arg01, local03
	mov	arg02, ##1082130432
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, local02
	call	#__system___float_div
	mov	local03, result1
	mov	arg01, local02
	mov	arg02, local04
	call	#__system___float_div
	mov	arg01, result1
	mov	arg02, ##1065353216
	bitnot	arg02, #31
	call	#__system___float_add
	mov	arg02, result1
	mov	arg01, ##1076754516
	call	#__system____builtin_logbase
	mov	arg01, result1
	mov	arg02, local03
	call	#__system___float_div
	mov	local06, result1
	mov	arg01, ##-1082130432
	mov	arg02, local03
	call	#__system___float_mul
	mov	local03, result1
	mov	arg01, local01
	mov	arg02, local06
	bitnot	arg02, #31
	call	#__system___float_add
	mov	arg02, result1
	mov	arg01, local03
	call	#__system___float_mul
	mov	arg02, result1
	mov	arg01, ##1076754516
	call	#__system____builtin_powf
	mov	arg02, result1
	mov	arg01, ##1065353216
	call	#__system___float_add
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_div
	mov	local06, result1
	mov	arg01, local06
	bitl	arg01, #31
	mov	arg02, local02
	bitl	arg02, #31
	bitnot	arg02, #31
	call	#__system___float_add
	bitl	result1, #31
	mov	arg01, result1
	bitl	local04, #31
	mov	arg02, local04
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_ae	jmp	#LR__0420
'     {
'         return dir * distance;
	mov	arg01, local05
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, local02
	call	#__system___float_mul
	jmp	#LR__0421
LR__0420
'     }
'     return dir * position;
	mov	arg01, local05
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, local06
	call	#__system___float_mul
LR__0421
	mov	ptra, fp
	call	#popregs_
_sigmoid_ret
	ret

_steps_to_mm
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
' {
'     return steps * (config->gearDiameter * 3.14159) / config->positionEncoderStepsPerRev;
	call	#__system___float_fromint
	mov	local02, result1
	add	local01, #28
	rdlong	arg01, local01
	mov	arg02, ##1078530000
	call	#__system___float_mul
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_mul
	mov	arg01, result1
	add	local01, #40
	rdlong	arg02, local01
	call	#__system___float_div
	mov	ptra, fp
	call	#popregs_
_steps_to_mm_ret
	ret

_mm_to_steps
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
' {
'     return (int) __builtin_round(mm * (double)config->positionEncoderStepsPerRev / (double)(config->gearDiameter * 3.14159)) ;
	add	local01, #68
	rdlong	arg02, local01
	call	#__system___float_mul
	mov	local02, result1
	sub	local01, #40
	rdlong	arg01, local01
	mov	arg02, ##1078530000
	call	#__system___float_mul
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_div
	mov	arg01, result1
	mov	arg02, #1
	call	#__system___float_tointeger
	mov	ptra, fp
	call	#popregs_
_mm_to_steps_ret
	ret

_test_profile_page_init
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	add	local01, #4
	wrlong	arg02, local01
	add	local01, #4
	wrlong	arg03, local01
	add	local01, #4
	wrlong	##-1, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__1998
	call	#__system____builtin_strcpy
	add	local01, #100
	mov	arg01, local01
	mov	arg02, ##@LR__1999
	call	#__system____builtin_strcpy
	add	local01, ##17420
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, #0
	call	#_module_init
	add	local01, #320
	mov	local03, local01
	mov	arg01, local03
	mov	arg02, local02
	call	#_module_init
	mov	arg01, local03
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	##1024, arg01
	add	arg01, #4
	wrlong	##600, arg01
	mov	arg01, local03
	add	arg01, #232
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local03
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local03
	mov	arg03, ##627
	add	arg01, #272
	wrlong	##627, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, objptr
	mov	arg02, ptr__module_animation_switch_page_up_
	call	#__system___make_methodptr
	mov	arg01, local03
	add	arg01, #304
	wrlong	result1, arg01
	add	local01, #320
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local04
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#341, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	call	#_module_fit_height
	mov	arg01, local04
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local04
	add	arg01, #272
	wrlong	##15220, arg01
	sub	arg01, #4
	wrlong	##627, arg01
	mov	arg01, local04
	bmask	arg02, #15
	mov	arg03, #1
	call	#_module_add_border
	mov	arg01, local04
	call	#_module_align_inner_left
	mov	arg01, local04
	call	#_module_align_inner_top
	mov	arg01, local04
	mov	arg03, #10
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	local01, #320
	mov	local02, local01
	mov	arg01, local02
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local02
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	#100, arg01
	add	arg01, #4
	wrlong	#50, arg01
	mov	arg01, local02
	add	arg01, #272
	wrlong	##34800, arg01
	sub	arg01, #4
	wrlong	##34800, arg01
	mov	arg01, local02
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local02
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_space_even
	mov	arg01, local02
	call	#_module_align_inner_top
	mov	arg01, objptr
	mov	arg02, ptr__button_open_0988_
	call	#__system___make_methodptr
	mov	arg01, local02
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	local05, local01
	mov	arg01, local05
	mov	arg02, local02
	call	#_module_init
	add	ptr__dat__, ##142132
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##142132
	mov	arg01, local05
	call	#_module_set_text
	mov	arg01, local05
	neg	arg02, #1
	call	#_module_text_font
	mov	arg01, local05
	call	#_module_text_fit
	mov	arg01, local05
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local05
	call	#_module_align_middle
	rdlong	arg03, local05
	add	arg03, #272
	rdlong	arg03, arg03
	mov	arg01, local05
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	local06, local01
	mov	arg01, local06
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local06
	mov	arg02, local02
	call	#_module_copy
	mov	arg01, local06
	mov	arg02, #2
	mov	arg03, #2
	call	#_module_align_space_even
	mov	arg01, objptr
	mov	arg02, ptr__button_new_0996_
	call	#__system___make_methodptr
	mov	arg01, local06
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local06
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local05
	call	#_module_copy
	add	ptr__dat__, ##142137
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##142137
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	neg	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local07
	mov	arg02, local02
	call	#_module_copy
	mov	arg01, local07
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local07
	call	#_module_align_inner_bottom
	mov	arg01, objptr
	mov	arg02, ptr__button_save_1011_
	call	#__system___make_methodptr
	mov	arg01, local07
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	add	local01, #320
	mov	arg01, local01
	mov	arg02, local07
	call	#_module_init
	mov	arg01, local01
	mov	arg02, local05
	call	#_module_copy
	add	ptr__dat__, ##142141
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##142141
	mov	arg01, local01
	call	#_module_set_text
	mov	arg01, local01
	neg	arg02, #1
	call	#_module_text_font
	mov	arg01, local01
	call	#_module_text_fit
	mov	arg01, local01
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local01
	call	#_module_align_middle
	add	local01, #320
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local03
	call	#_module_init
	sub	local01, ##20408
	rdlong	arg02, local01
	add	arg02, #48
	mov	arg01, local07
	call	#_module_set_image
	mov	arg01, local07
	call	#_module_align_inner_top
	mov	arg01, local07
	call	#_module_align_inner_right
	mov	arg01, objptr
	mov	arg02, ptr__button_navigation_0981_
	call	#__system___make_methodptr
	mov	arg03, #0
	add	local07, #308
	wrlong	result1, local07
	sub	local07, #16
	wrlong	#0, local07
	add	local01, ##21048
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local03
	call	#_module_init
	mov	arg01, local07
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local07
	add	arg01, #240
	wrlong	##512, arg01
	add	arg01, #4
	wrlong	#270, arg01
	mov	arg01, local07
	mov	arg02, local04
	call	#_module_align_right
	mov	arg01, local07
	call	#_module_align_inner_top
	rdlong	local05, local07
	add	local05, #272
	rdlong	arg02, local05
	rdlong	local05, local07
	add	local05, #268
	rdlong	arg03, local05
	mov	arg01, local07
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local01, #320
	mov	arg02, local01
	mov	arg03, ##@LR__2000
	mov	arg04, ##@LR__2001
	mov	arg01, local07
	call	#_module_set_graph
	mov	arg03, ##-1063256064
	add	local07, #208
	rdlong	local07, local07
	add	local07, #8
	wrlong	##1084227584, local07
	add	local07, #4
	wrlong	##-1063256064, local07
	add	local01, ##2372
	mov	local07, local01
	mov	arg01, local07
	mov	arg02, local04
	call	#_module_init
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_align_below
	mov	arg01, local07
	mov	arg02, local06
	call	#_module_fit_below
	mov	arg01, local07
	call	#_module_fit_width
	mov	arg01, local07
	call	#_module_align_inner_left
	rdlong	local06, local07
	add	local06, #272
	rdlong	arg02, local06
	rdlong	local06, local07
	add	local06, #268
	rdlong	arg03, local06
	mov	arg01, local07
	add	arg01, #272
	wrlong	arg02, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local07
	mov	arg03, #0
	add	arg01, #248
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#0, arg01
	sub	local01, ##3012
	mov	local06, local01
	mov	arg01, local06
	mov	arg02, local07
	call	#_module_init
	mov	arg01, local06
	mov	arg03, #10
	add	arg01, #256
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#10, arg01
	add	local01, ##9768
	mov	arg02, local01
	sub	local01, ##30504
	mov	arg01, local06
	call	#_module_set_text
	mov	arg01, local06
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local06
	call	#_module_text_fit
	mov	arg01, local06
	call	#_module_fit_width
	mov	arg01, local06
	add	arg01, #204
	rdlong	local05, arg01
	sub	arg01, #204
	cmp	local05, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#1, arg01
	mov	arg01, local06
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	##15220, arg01
	mov	arg01, local06
	call	#_module_align_inner_top
	mov	arg01, local06
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	local05, #0
' 
' 
'     Module *root = &(page->root);
'     module_init(root,  (0) );
' 
'     Module *background = &(page->background);
'     module_init(background, root);
'     module_set_rectangle_circle(background,  1024 ,  600 );
'     module_set_position(background, 0, 0);
'     module_set_padding(background, padding, padding);
'     module_set_color(background,  0x0273 ,  0x0273 );
'     module_animate_draw(background, module_animation_switch_page_up);
' 
' 
'     Module *editWindow = &(page->editWindow);
'     module_init(editWindow, background);
'     module_set_rectangle_circle(editWindow,  1024  / 3, 0);
'     module_fit_height(editWindow);
'     module_set_padding(editWindow, padding, padding);
'     module_set_color(editWindow,  0x3B74 ,  0x0273 );
'     module_add_border(editWindow,  0xffff , 1);
'     module_align_inner_left(editWindow);
'     module_align_inner_top(editWindow);
'     module_set_margin(editWindow, 10, 10);
' 
' 
'     Module *openButton = &(page->openButton);
'     module_init(openButton, editWindow);
'     module_set_rectangle_circle(openButton, 100, 50);
'     module_set_color(openButton,  0x87f0 ,  0x87f0 );
'     module_set_padding(openButton, padding, padding);
'     module_align_space_even(openButton, 1, 2);
'     module_align_inner_top(openButton);
'     module_touch_callback(openButton, button_open, 0);
' 
' 
'     Module *openText = &(page->openText);
'     module_init(openText, openButton);
'     module_set_text(openText, openTextBuffer);
'     module_text_font(openText, -1);
'     module_text_fit(openText);
'     module_align_center(openText);
'     module_align_middle(openText);
'     module_set_color(openText,  0x0000 , openText->parent->foregroundColor);
' 
' 
'     Module *newButton = &(page->newButton);
'     module_init(newButton, editWindow);
'     module_copy(newButton, openButton);
'     module_align_space_even(newButton, 2, 2);
'     module_touch_callback(newButton, button_new, 0);
' 
' 
'     Module *newText = &(page->newText);
'     module_init(newText, newButton);
'     module_copy(newText, openText);
'     module_set_text(newText, newTextBuffer);
'     module_text_font(newText, -1);
'     module_text_fit(newText);
'     module_align_center(newText);
' 
' 
'     Module *saveButton = &(page->saveButton);
'     module_init(saveButton, editWindow);
'     module_copy(saveButton, openButton);
'     module_align_center(saveButton);
'     module_align_inner_bottom(saveButton);
'     module_touch_callback(saveButton, button_save, 0);
' 
' 
'     Module *saveText = &(page->saveText);
'     module_init(saveText, saveButton);
'     module_copy(saveText, openText);
'     module_set_text(saveText, saveTextBuffer);
'     module_text_font(saveText, -1);
'     module_text_fit(saveText);
'     module_align_center(saveText);
'     module_align_middle(saveText);
' 
' 
'     Module *navigationButton = &(page->navigationButton);
'     module_init(navigationButton, background);
'     module_set_image(navigationButton, &(page->images->navigationImage));
'     module_align_inner_top(navigationButton);
'     module_align_inner_right(navigationButton);
'     module_touch_callback(navigationButton, button_navigation, 0);
' 
'     Module *graphPositionContainer = &(page->graphPositionContainer);
'     module_init(graphPositionContainer, background);
'     module_set_margin(graphPositionContainer, 10, 10);
'     module_set_size(graphPositionContainer,  1024  / 2,  600  / 2 - padding * 3);
'     module_align_right(graphPositionContainer, editWindow);
'     module_align_inner_top(graphPositionContainer);
'     module_set_color(graphPositionContainer, graphPositionContainer->parent->foregroundColor, graphPositionContainer->parent->backgroundColor);
'     module_set_graph(graphPositionContainer, &(page->graphPosition), "Position Vs. Time", "mm");
'     module_graph_set_range(graphPositionContainer, 5, -5);
' 
'     Module *subroot = &(page->subroot);
'     module_init(subroot, editWindow);
'     module_align_below(subroot, newButton);
'     module_fit_below(subroot, newButton);
'     module_fit_width(subroot);
'     module_align_inner_left(subroot);
'     module_set_color(subroot, subroot->parent->foregroundColor, subroot->parent->backgroundColor);
'     module_set_padding(subroot, 0, 0);
' 
' 
'     Module *editWindowTitle = &(page->editWindowTitle);
'     module_init(editWindowTitle, subroot);
'     module_set_margin(editWindowTitle, 0, 10);
'     module_set_text(editWindowTitle, page->editWindowTitleBuffer);
'     module_text_font(editWindowTitle,  2 );
'     module_text_fit(editWindowTitle);
'     module_fit_width(editWindowTitle);
'     module_text_align(editWindowTitle, MODULE_TEXT_ALIGN_INNER_LEFT);
'     module_set_color(editWindowTitle,  0xffff ,  0x3B74 );
'     module_align_inner_top(editWindowTitle);
'     module_align_center(editWindowTitle);
' 
' 
'     Module *below = editWindowTitle;
'     for (int i = 0; i < 20; i++)
LR__0422
	cmps	local05, #20 wc
 if_ae	jmp	#LR__0423
	mov	local04, local05
	shl	local04, #2
	add	local04, local05
	shl	local04, #6
	add	local01, ##24068
	add	local04, local01
	mov	arg01, local04
	mov	arg02, local07
	call	#_module_init
	mov	arg01, local05
	shl	arg01, #4
	sub	arg01, local05
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2002
	call	#__system____builtin_strcpy
	mov	arg02, local05
	shl	arg02, #4
	sub	arg02, local05
	shl	arg02, #1
	add	arg02, local01
	mov	arg01, local04
	call	#_module_set_text
	mov	arg01, local04
	mov	arg02, #1
	call	#_module_text_font
	mov	arg01, local04
	add	arg01, #240
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	#32, arg01
	mov	arg01, local04
	call	#_module_fit_width
	mov	arg01, local04
	add	arg01, #264
	wrlong	#5, arg01
	mov	arg01, local04
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #220
 if_e	wrlong	#1, arg01
	mov	arg01, local04
	add	arg01, #204
	rdlong	local03, arg01
	sub	arg01, #204
	cmp	local03, #1 wz
'         return;
 if_e	add	arg01, #224
 if_e	wrlong	#5, arg01
	mov	arg01, local04
	mov	arg02, local06
	call	#_module_align_below
	mov	arg01, local04
	call	#_module_align_inner_left
	mov	arg01, local04
	mov	arg03, ##50712
	add	arg01, #272
	wrlong	#0, arg01
	sub	arg01, #4
	wrlong	##50712, arg01
	mov	arg01, objptr
	mov	arg02, ptr__button_quartet_1020_
	call	#__system___make_methodptr
	mov	arg01, local04
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, local04
	mov	arg02, #0
	mov	arg03, #2
	call	#_module_add_border
	mov	arg01, local04
	add	arg01, #256
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#10, arg01
	mov	arg01, local04
	mov	arg03, #0
	add	arg01, #248
	wrlong	#10, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	arg01, local04
	add	arg01, #280
	wrbyte	#0, arg01
	mov	local06, local04
	add	local05, #1
	sub	local01, ##30536
	jmp	#LR__0422
LR__0423
	mov	ptra, fp
	call	#popregs_
_test_profile_page_init_ret
	ret

_test_profile_page_run
	mov	COUNT_, #28
	call	#pushregs_
	mov	local01, arg01
	add	ptr__dat__, ##142180
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##142180
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2003
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #4
	rdlong	arg01, local01
	add	local01, ##17532
	mov	arg02, local01
	sub	local01, ##17536
	call	#_module_draw
	neg	local02, #1
'     while (!complete)
LR__0424
	add	ptr__dat__, ##142180
	rdbyte	result1, ptr__dat__ wz
	sub	ptr__dat__, ##142180
 if_ne	jmp	#LR__0440
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2004
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local03, result1
	add	local01, #12
	rdlong	arg02, local01
	mov	local04, #10
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local05, result1
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local06, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	result1, #0
	mov	local07, #0
	rdlong	local08, local01
	sub	local01, #12
	cmp	local08, local02 wz
 if_e	jmp	#LR__0427
	mov	local09, #0
'         {
'             for (int i = 0; i < 20; i++)
LR__0425
	cmps	local09, #20 wc
 if_ae	jmp	#LR__0426
	mov	local08, local09
	shl	local08, #2
	add	local01, ##23752
	mov	local03, local01
	add	local08, local01
	rdlong	arg01, local08
	mov	arg02, #0
	add	arg01, #280
	wrbyte	#0, arg01
	mov	local08, local09
	add	local08, #1
	mov	local09, local08
	sub	local01, ##23752
	jmp	#LR__0425
LR__0426
LR__0427
'             {
'                 module_set_visable(page->subroot.child[i],  (0) );
'             }
'         }
'         switch (page->mode)
	add	local01, #12
	rdlong	local10, local01
	sub	local01, #12
	mov	local11, local10
	fle	local11, #4
	jmprel	local11
LR__0428
	jmp	#LR__0429
	jmp	#LR__0433
	jmp	#LR__0438
	jmp	#LR__0438
	jmp	#LR__0437
LR__0429
	cmp	local02, #0 wz
 if_e	jmp	#LR__0430
	add	local01, ##30504
	mov	arg01, local01
	mov	arg02, ##@LR__2005
	call	#__system____builtin_strcpy
	sub	local01, ##30500
	rdlong	arg01, local01
	add	local01, ##17532
	mov	arg02, local01
	call	#_module_draw
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2006
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	sub	local01, ##17400
	mov	arg02, local01
	sub	local01, #136
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0430
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2007
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local12, #0
	add	local01, ##24068
	mov	local13, local01
	add	local01, ##6468
	mov	arg01, local01
	mov	arg02, ##@LR__2008
	sub	local01, ##30400
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_quartet_1020_
	call	#__system___make_methodptr
	mov	arg01, local13
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, local13
	mov	arg02, #1
	add	arg01, #280
	wrbyte	#1, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2009
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local14, local12
	shl	local14, #4
	sub	local14, local12
	shl	local14, #1
	add	local01, ##30400
	mov	local15, local01
	add	local14, local01
	mov	local16, local14
	mov	arg01, #0
	mov	arg02, local16
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local12, #1
	mov	local17, local12
	shl	local17, #2
	add	local17, local12
	shl	local17, #6
	sub	local01, ##6468
	add	local17, local01
	add	local01, ##7068
	mov	arg01, local01
	sub	local01, ##30948
	rdlong	arg02, local01
	call	#_get_function_info
	mov	arg01, local12
	shl	arg01, #4
	sub	arg01, local12
	shl	arg01, #1
	add	local01, ##30348
	add	arg01, local01
	mov	arg02, ##@LR__2010
	add	local01, ##604
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_quartet_1020_
	call	#__system___make_methodptr
	mov	arg01, local17
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#1, arg01
	mov	arg01, local17
	add	arg01, #280
	wrbyte	#1, arg01
	add	local12, #1
	mov	local18, #0
' 
'             paramIndex++;
'             Module *funcModule = &(page->profileParameters[paramIndex]);
'             get_function_info(&(page->info), page->quartet.function);
'             sprintf(page->profileParametersBuffer[paramIndex], "Function: %s", page->info.name);
'             module_touch_callback(funcModule, button_quartet,  1 );
'             module_set_visable(funcModule,  (1) );
' 
'             paramIndex++;
'             for (int i = 0; i < page->info.args_count; i++)
	sub	local01, ##31140
LR__0431
	add	local01, ##31164
	rdlong	local08, local01
	sub	local01, ##31164
	cmps	local18, local08 wc
 if_ae	jmp	#LR__0432
	mov	local19, local12
	shl	local19, #2
	add	local19, local12
	shl	local19, #6
	add	local01, ##24068
	add	local19, local01
	mov	arg01, local12
	shl	arg01, #4
	sub	arg01, local12
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2011
	mov	local16, local18
	shl	local16, #2
	add	local16, local18
	shl	local16, #2
	add	local01, ##632
	add	local16, local01
	mov	local14, local18
	shl	local14, #2
	sub	local01, ##30976
	mov	local15, local01
	add	local14, local01
	rdlong	local04, local14
	mov	arg03, ptra
	wrlong	local16, ptra++
	wrlong	local04, ptra++
	call	#_sprintf
	sub	ptra, #8
	mov	arg01, objptr
	mov	arg02, ptr__button_quartet_parameters_1025_
	call	#__system___make_methodptr
	mov	arg01, local19
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	local18, arg01
	mov	arg01, local19
	add	arg01, #280
	wrbyte	#1, arg01
	add	local12, #1
	add	local18, #1
	sub	local01, #192
	jmp	#LR__0431
LR__0432
	mov	local20, local12
	shl	local20, #2
	add	local20, local12
	shl	local20, #6
	add	local01, ##24068
	add	local20, local01
	mov	arg01, local12
	shl	arg01, #4
	sub	arg01, local12
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2012
	sub	local01, ##30304
	rdlong	local05, local01
	sub	local01, #232
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_quartet_1020_
	call	#__system___make_methodptr
	mov	arg01, local20
	mov	arg03, #2
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#2, arg01
	mov	arg01, local20
	add	arg01, #280
	wrbyte	#1, arg01
'             {
'                 Module *paramModule = &(page->profileParameters[paramIndex]);
'                 sprintf(page->profileParametersBuffer[paramIndex], "    %s: %0.3f", page->info.args[i], page->quartet.parameters[i]);
'                 module_touch_callback(paramModule, button_quartet_parameters, i);
'                 module_set_visable(paramModule,  (1) );
'                 paramIndex++;
'             }
' 
'             Module *dwellModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "Dwell (ms): %0.3f", page->quartet.dwell);
'             module_touch_callback(dwellModule, button_quartet,  2 );
'             module_set_visable(dwellModule,  (1) );
'             break;
	jmp	#LR__0438
LR__0433
	cmp	local02, #1 wz
 if_e	jmp	#LR__0434
	add	local01, ##30504
	mov	arg01, local01
	mov	arg02, ##@LR__2013
	call	#__system____builtin_strcpy
	sub	local01, ##30500
	rdlong	arg01, local01
	add	local01, ##17532
	mov	arg02, local01
	sub	local01, ##17536
	call	#_module_draw
LR__0434
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2014
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local21, #0
	add	local01, ##24068
	mov	local22, local01
	add	local01, ##6468
	mov	arg01, local01
	mov	arg02, ##@LR__2015
	sub	local01, ##30300
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_set_1035_
	call	#__system___make_methodptr
	mov	arg01, local22
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, local22
	add	arg01, #280
	wrbyte	#1, arg01
	add	local21, #1
	mov	local23, local21
	shl	local23, #2
	add	local23, local21
	shl	local23, #6
	add	local01, ##23832
	add	local23, local01
	mov	arg01, local21
	shl	arg01, #4
	sub	arg01, local21
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2016
	sub	local01, ##30248
	rdlong	local05, local01
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_set_1035_
	call	#__system___make_methodptr
	mov	arg01, local23
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#1, arg01
	mov	arg01, local23
	add	arg01, #280
	wrbyte	#1, arg01
	add	local21, #1
	mov	local24, local21
	shl	local24, #2
	add	local24, local21
	shl	local24, #6
	add	local01, ##23780
	add	local24, local01
	mov	arg01, local21
	shl	arg01, #4
	sub	arg01, local21
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2017
	sub	local01, ##30244
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_set_1035_
	call	#__system___make_methodptr
	mov	arg01, local24
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#2, arg01
	mov	arg01, local24
	add	arg01, #280
	wrbyte	#1, arg01
	add	local21, #1
	mov	local25, local21
	shl	local25, #2
	add	local25, local21
	shl	local25, #6
	add	local01, ##23776
	add	local25, local01
	mov	arg01, local21
	shl	arg01, #4
	sub	arg01, local21
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2018
	sub	local01, ##30232
	rdlong	local05, local01
	sub	local01, #304
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_set_1035_
	call	#__system___make_methodptr
	mov	arg01, local25
	mov	arg03, #3
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#3, arg01
	mov	arg01, local25
	add	arg01, #280
	wrbyte	#1, arg01
	mov	local26, #0
' 
'             Module *nameModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "Name: %s", page->set.name);
'             module_touch_callback(nameModule, button_set,  0 );
'             module_set_visable(nameModule,  (1) );
' 
'             paramIndex++;
'             Module *numberModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "Number: %d", page->set.number);
'             module_touch_callback(numberModule, button_set,  1 );
'             module_set_visable(numberModule,  (1) );
' 
'             paramIndex++;
'             Module *typeModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "Type: %s", page->set.type);
'             module_touch_callback(typeModule, button_set,  2 );
'             module_set_visable(typeModule,  (1) );
' 
'             paramIndex++;
'             Module *executionsModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "Executions: %d", page->set.executions);
'             module_touch_callback(executionsModule, button_set,  3 );
'             module_set_visable(executionsModule,  (1) );
' 
'             for (int i = 0; i < page->set.quartetCount; i++)
LR__0435
	add	local01, #308
	rdlong	local08, local01
	sub	local01, #308
	cmps	local26, local08 wc
 if_ae	jmp	#LR__0436
	qmul	local26, #100
	add	local21, #1
	mov	local27, local21
	shl	local27, #2
	add	local27, local21
	shl	local27, #6
	add	local01, ##24068
	add	local27, local01
	mov	arg01, local21
	shl	arg01, #4
	sub	arg01, local21
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2019
	sub	local01, ##30224
	mov	local15, local01
	getqx	local14
	add	local14, local01
	mov	local16, local14
	mov	arg03, ptra
	wrlong	local16, ptra++
	call	#_sprintf
	sub	ptra, #4
	mov	arg01, objptr
	mov	arg02, ptr__button_set_remove_
	call	#__system___make_methodptr
	mov	arg01, local27
	mov	arg03, local26
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	arg03, arg01
	mov	arg01, local27
	add	arg01, #280
	wrbyte	#1, arg01
	add	local26, #1
	sub	local01, #312
	jmp	#LR__0435
LR__0436
	add	local21, #1
	mov	local28, local21
	shl	local28, #2
	add	local28, local21
	shl	local28, #6
	add	local01, ##24068
	add	local28, local01
	mov	arg01, local21
	shl	arg01, #4
	sub	arg01, local21
	shl	arg01, #1
	add	local01, ##6468
	add	arg01, local01
	mov	arg02, ##@LR__2020
	call	#_sprintf
	mov	arg01, objptr
	mov	arg02, ptr__button_set_add_
	call	#__system___make_methodptr
	mov	arg01, local28
	mov	arg03, #0
	add	arg01, #308
	wrlong	result1, arg01
	sub	arg01, #16
	wrlong	#0, arg01
	mov	arg01, local28
	add	arg01, #280
	wrbyte	#1, arg01
'             {
'                 paramIndex++;
'                 Module *quartetModule = &(page->profileParameters[paramIndex]);
'                 sprintf(page->profileParametersBuffer[paramIndex], "%s", page->set.quartets[i].name);
'                 module_touch_callback(quartetModule, button_set_remove, i);
'                 module_set_visable(quartetModule,  (1) );
'             }
' 
'             paramIndex++;
'             Module *quartetModule = &(page->profileParameters[paramIndex]);
'             sprintf(page->profileParametersBuffer[paramIndex], "New Quartet");
'             module_touch_callback(quartetModule, button_set_add, 0);
'             module_set_visable(quartetModule,  (1) );
'             break;
	sub	local01, ##30536
	jmp	#LR__0438
'         {
'             break;
'         {
'             break;
LR__0437
'             break;
LR__0438
	add	local01, #12
	rdlong	local02, local01
	sub	local01, #8
	rdlong	arg01, local01
	add	local01, ##23744
	mov	arg02, local01
	sub	local01, ##23748
	call	#_module_draw
'         }
'         lastMode = page->mode;
'         module_draw(page->display, &(page->subroot));
'         do
LR__0439
	add	local01, #4
	rdlong	arg01, local01
	call	#_display_update_touch
	add	local01, ##17532
	mov	arg01, local01
	sub	local01, ##17532
	rdlong	arg02, local01
	sub	local01, #4
	mov	arg03, local01
	call	#_module_touch_check
	cmp	result1, #0 wz
 if_e	jmp	#LR__0439
	jmp	#LR__0424
LR__0440
	mov	ptra, fp
	call	#popregs_
_test_profile_page_run_ret
	ret

_mad_begin
	mov	COUNT_, #10
	call	#pushregs_
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2021
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	call	#_start_display_0343
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0441
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2022
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return;
	jmp	#LR__0456
LR__0441
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2023
	mov	arg03, #1
	call	#_loading_overlay_display
	mov	arg01, #200
	call	#__system___waitms
	call	#_load_machine_profile_0339
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2024
	mov	arg03, #1
	call	#_loading_overlay_display
	call	#_load_images_0337
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2025
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16484
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16484
	call	#_machine_state_init
	add	ptr__dat__, #16
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##16468
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16484
	mov	arg03, #10
	call	#_monitor_begin
	cmp	result1, #0 wz
 if_e	jmp	#LR__0442
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2026
	mov	arg03, #1
	call	#_loading_overlay_display
	jmp	#LR__0443
LR__0442
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2027
	mov	arg03, #1
	call	#_loading_overlay_display
'   {
'     loading_overlay_display(&display, "Monitor Failed, please reset", OVERLAY_TYPE_LOADING);
'     return;
	jmp	#LR__0456
LR__0443
	add	ptr__dat__, #40
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##16292
	mov	arg02, ptr__dat__
	add	ptr__dat__, #152
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##16468
	mov	arg04, ptr__dat__
	sub	ptr__dat__, #16
	call	#_control_begin
	cmp	result1, #0 wz
 if_e	jmp	#LR__0444
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2028
	mov	arg03, #1
	call	#_loading_overlay_display
	call	#_static_test_profile_0341
	jmp	#LR__0445
LR__0444
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2029
	mov	arg03, #1
	call	#_loading_overlay_display
'   {
'     loading_overlay_display(&display, "ControlSystem Failed, please reset", OVERLAY_TYPE_LOADING);
'     return;
	jmp	#LR__0456
LR__0445
	add	ptr__dat__, ##16484
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16484
	mov	arg02, #0
	mov	arg03, #1
	call	#_state_machine_set
	add	ptr__dat__, ##17156
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##900
	mov	arg02, ptr__dat__
	add	ptr__dat__, #228
	mov	arg03, ptr__dat__
	sub	ptr__dat__, #152
	mov	arg04, ptr__dat__
	sub	ptr__dat__, ##16316
	mov	arg05, ptr__dat__
	add	ptr__dat__, ##16516
	mov	arg06, ptr__dat__
	sub	ptr__dat__, ##16532
	call	#_status_page_init
	add	ptr__dat__, ##38660
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##22404
	mov	arg02, ptr__dat__
	add	ptr__dat__, #276
	mov	arg03, ptr__dat__
	sub	ptr__dat__, #48
	mov	arg04, ptr__dat__
	sub	ptr__dat__, ##16444
	mov	arg05, ptr__dat__
	sub	ptr__dat__, #40
	call	#_automatic_page_init
	add	ptr__dat__, ##46952
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##30696
	mov	arg02, ptr__dat__
	add	ptr__dat__, #276
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##16532
	call	#_test_profile_page_init
	add	ptr__dat__, ##82892
	mov	local01, ptr__dat__
	sub	ptr__dat__, ##66636
	mov	arg02, ptr__dat__
	add	ptr__dat__, #276
	mov	arg03, ptr__dat__
	sub	ptr__dat__, ##16532
	mov	arg01, local01
	call	#_navigation_page_init
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	local02, #0
	mov	arg02, ##@LR__2030
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local03, result1
	mov	local04, #10
	mov	arg01, #0
	mov	arg02, #152
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local05, result1
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local06, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	result1, #0
	mov	local07, #0
	mov	local08, #5
' 
'   Page currentPage = PAGE_TEST_PROFILE;
'   while (1)
LR__0446
'   {
'     switch (currentPage)
	mov	local09, local08
	fle	local09, #6
	jmprel	local09
LR__0447
	jmp	#LR__0448
	jmp	#LR__0449
	jmp	#LR__0450
	jmp	#LR__0452
	jmp	#LR__0451
	jmp	#LR__0453
	jmp	#LR__0454
LR__0448
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2031
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##17156
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##17156
	call	#_status_page_run
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2032
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'       break;
	jmp	#LR__0455
LR__0449
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2033
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2034
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'       break;
	jmp	#LR__0455
LR__0450
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2035
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##38660
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##38660
	call	#_automatic_page_run
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2036
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'       break;
	jmp	#LR__0455
LR__0451
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2037
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local10, #0
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2038
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'       break;
	jmp	#LR__0455
LR__0452
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2039
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2040
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'       break;
	jmp	#LR__0455
LR__0453
	add	ptr__dat__, ##46952
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##46952
	call	#_test_profile_page_run
'     {
'       test_profile_page_run(&testProfilePage);
'       break;
	jmp	#LR__0455
LR__0454
'       break;
LR__0455
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2041
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local03, result1
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local05, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local06, #0
	add	ptr__dat__, ##82892
	mov	local02, ptr__dat__
	mov	arg01, local02
	sub	ptr__dat__, ##82892
	call	#_navigation_page_run
	mov	local01, result1
	mov	local08, local01
	jmp	#LR__0446
LR__0456
	mov	ptra, fp
	call	#popregs_
_mad_begin_ret
	ret

_atof
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	mov	local03, ##1065353216
' 
'     while (isspace(*str))
	add	ptr__dat__, ##175280
	loc	pa,	#(@LR__0458-@LR__0457)
	call	#FCACHE_LOAD_
LR__0457
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x10 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	test	result1, #16 wz
 if_ne	add	local01, #1
 if_ne	jmp	#LR__0457
LR__0458
	sub	ptr__dat__, ##175280
	rdbyte	local04, local01
	cmp	local04, #45 wz
	negz	local05, #1
	mov	local06, local04
	cmp	local06, #45 wz
 if_ne	rdbyte	local04, local01
 if_ne	cmp	local04, #43 wz
 if_e	add	local01, #1
'         str++;
' 
'     while (isdigit(*str))
LR__0459
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	test	result1, #2 wz
 if_e	jmp	#LR__0460
	mov	arg01, ##1092616192
	mov	arg02, local02
	call	#__system___float_mul
	mov	local06, result1
	rdbyte	arg01, local01
	sub	arg01, #48
	call	#__system___float_fromint
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___float_add
	mov	local02, result1
	add	local01, #1
	jmp	#LR__0459
LR__0460
	rdbyte	local06, local01
	cmp	local06, #46 wz
 if_e	add	local01, #1
'         str++;
' 
'     while (isdigit(*str))
LR__0461
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	test	result1, #2 wz
 if_e	jmp	#LR__0462
	mov	arg01, ##1092616192
	mov	arg02, local02
	call	#__system___float_mul
	mov	local06, result1
	rdbyte	arg01, local01
	sub	arg01, #48
	call	#__system___float_fromint
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___float_add
	mov	local02, result1
	mov	arg01, local03
	mov	arg02, ##1092616192
	call	#__system___float_mul
	mov	local03, result1
	add	local01, #1
	jmp	#LR__0461
LR__0462
'     {
'         number = 10.0 * number + (*str - '0');
'         power *= 10.0;
'         str++;
'     }
' 
'     return sign * number / power;
	mov	arg01, local05
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, local02
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, local03
	call	#__system___float_div
	mov	ptra, fp
	call	#popregs_
_atof_ret
	ret

_main
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, ##@LR__2042
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
' 	const BYTE *wbuff = (const BYTE*)buff;
	mov	arg01, #61
	mov	arg02, #60
	mov	arg03, #59
	mov	arg04, #58
	call	#__vfs_open_sdcardx
	mov	arg02, result1
	mov	arg01, local01
	call	#__mount
	call	#_mad_begin
' {
' 
' 
'     mount("/sd", _vfs_open_sdcard());
' 
'     mad_begin();
'     while (1)
LR__0463
	jmp	#LR__0463
'         ;
'     return 0;
	mov	ptra, fp
	call	#popregs_
_main_ret
	ret

_load_images_0337
	add	ptr__dat__, ##16532
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16532
	mov	arg02, ##@LR__2043
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16552
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	##1026, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#284, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#0, ptr__dat__
	mov	arg01, ##600
	add	ptr__dat__, #12
	rdlong	result1, ptr__dat__
	sub	arg01, result1
	sub	ptr__dat__, #8
	wrlong	arg01, ptr__dat__
	add	ptr__dat__, #12
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	sub	ptr__dat__, ##16576
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2044
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	ptr__dat__, ##16532
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16532
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##16628
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16628
	mov	arg02, ##@LR__2045
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16648
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	add	ptr__dat__, #52
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16724
	mov	arg02, ##@LR__2046
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16744
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	sub	ptr__dat__, #92
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16676
	mov	arg02, ##@LR__2047
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16696
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#400, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	add	ptr__dat__, #52
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16772
	mov	arg02, ##@LR__2048
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16792
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	##600, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16820
	mov	arg02, ##@LR__2049
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16840
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	##800, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	sub	ptr__dat__, #284
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16580
	mov	arg02, ##@LR__2050
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16600
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#100, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	##50712, ptr__dat__
	add	ptr__dat__, #244
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16868
	mov	arg02, ##@LR__2051
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16888
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#25, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#25, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #12
	wrword	##63488, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16916
	mov	arg02, ##@LR__2052
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16936
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#25, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#25, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#225, ptr__dat__
	add	ptr__dat__, #12
	wrword	##2016, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16964
	mov	arg02, ##@LR__2053
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16984
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#25, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#25, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#250, ptr__dat__
	add	ptr__dat__, #12
	wrword	##65535, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##17012
	mov	arg02, ##@LR__2054
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##17032
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#25, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#25, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#275, ptr__dat__
	add	ptr__dat__, #12
	wrword	##65535, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##17060
	mov	arg02, ##@LR__2055
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##17080
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#87, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#100, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#150, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #12
	wrword	##65535, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##17108
	mov	arg02, ##@LR__2056
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##17128
	wrlong	#2, ptr__dat__
	add	ptr__dat__, #12
	wrlong	#100, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#80, ptr__dat__
	sub	ptr__dat__, #12
	wrlong	#250, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#200, ptr__dat__
	add	ptr__dat__, #12
	wrword	##65535, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	add	ptr__dat__, #2
	wrword	#0, ptr__dat__
	sub	ptr__dat__, ##896
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2057
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, #324
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16580
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2058
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, #372
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16628
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2059
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, #468
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16724
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2060
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, #420
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16676
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2061
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##516
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16772
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2062
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##564
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16820
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2063
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##612
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16868
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2064
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##660
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16916
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2065
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##708
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##16964
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2066
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##756
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17012
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2067
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##804
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17060
	call	#_display_load_image
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, ##@LR__2068
	mov	arg03, #1
	call	#_loading_overlay_display
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	add	ptr__dat__, ##852
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##17108
	call	#_display_load_image
_load_images_0337_ret
	ret

_write_machine_profile_0338
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, ##@LR__2069
	mov	arg02, #0
	call	#_mkdir
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2070
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg02, ##@LR__2071
	mov	arg01, local01
	call	#_machine_profile_to_json
	mov	ptra, fp
	call	#popregs_
_write_machine_profile_0338_ret
	ret

_load_machine_profile_0339
	mov	arg01, ##@LR__2072
	mov	arg02, #0
	call	#_access
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0464
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2073
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##16332
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16332
	mov	arg02, ##@LR__2074
	call	#_json_to_machine_profile
	add	ptr__dat__, ##16332
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16332
	call	#_json_print_machine_profile
'     json_to_machine_profile(&machineProfile, "/sd/settings/Default.mcp");
'     json_print_machine_profile(&machineProfile);
'     return;
	jmp	#LR__0465
LR__0464
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2075
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##16332
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16332
	mov	arg02, ##@LR__2076
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16352
	wrlong	#1, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16356
	mov	arg02, ##@LR__2077
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16376
	wrlong	##1081375457, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1167867904, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1109393408, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1073741824, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##983472349, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1057937687, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1108816691, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16404
	mov	arg02, ##@LR__2078
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16424
	wrlong	##1174405120, ptr__dat__
	add	ptr__dat__, #4
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16428
	mov	arg02, ##@LR__2079
	call	#__system____builtin_strcpy
	add	ptr__dat__, ##16448
	wrlong	##1065353216, ptr__dat__
	add	ptr__dat__, #4
	wrlong	#0, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1008981770, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1112145920, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1128824832, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1120468992, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1080033280, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1078355558, ptr__dat__
	add	ptr__dat__, #4
	wrlong	##1056964608, ptr__dat__
	sub	ptr__dat__, #148
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16332
	call	#_write_machine_profile_0338
LR__0465
_load_machine_profile_0339_ret
	ret

_static_test_profile_0341
	mov	COUNT_, #1
	call	#pushregs_
	mov	arg01, ##@LR__2080
	mov	arg02, #0
	call	#_mkdir
	mov	arg01, ##16200
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local01, result1
	mov	arg02, ##@LR__2081
	mov	arg01, local01
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #4
	wrlong	#2, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__2082
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #16
	wrlong	#2, local01
	add	local01, #4
	wrlong	#2, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__2083
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #4
	wrlong	##1092616192, local01
	add	local01, #4
	wrlong	##1101004800, local01
	add	local01, #4
	wrlong	##1008981770, local01
	add	local01, #32
	wrlong	##1140457472, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__2084
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #4
	wrlong	##-1054867456, local01
	add	local01, #4
	wrlong	##1073741824, local01
	add	local01, #4
	wrlong	##1008981770, local01
	add	local01, #32
	wrlong	##1128792064, local01
	add	local01, ##804
	mov	arg01, local01
	mov	arg02, ##@LR__2085
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#2, local01
	add	local01, #16
	wrlong	#1, local01
	add	local01, #4
	wrlong	#2, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__2086
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #4
	wrlong	##1092616192, local01
	add	local01, #4
	wrlong	##1109393408, local01
	add	local01, #4
	wrlong	##1008981770, local01
	add	local01, #32
	wrlong	##1140457472, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, ##@LR__2087
	call	#__system____builtin_strcpy
	add	local01, #52
	wrlong	#1, local01
	add	local01, #4
	wrlong	##-1054867456, local01
	add	local01, #4
	wrlong	##1092616192, local01
	add	local01, #4
	wrlong	##1008981770, local01
	add	local01, #32
	wrlong	##1140457472, local01
	sub	local01, ##1408
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_profile_to_json
	add	local01, #60
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_set_to_json
	add	local01, ##1076
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_set_to_json
	sub	local01, ##1000
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_quartet_to_json
	add	local01, #100
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_quartet_to_json
	add	local01, ##976
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_quartet_to_json
	add	local01, #100
	mov	arg01, local01
	mov	arg02, local01
	sub	local01, ##1312
	call	#_motion_quartet_to_json
	mov	arg01, local01
	call	#_json_print_motion_profile
'   __builtin_strcpy(profile->name, "/sd/profiles/Test1.mp") ;
' 
'   profile->number = 1;
'   profile->setCount = 2;
' 
' 
'   __builtin_strcpy(profile->sets[0].name, "/sd/profiles/Set_1.set") ;
' 
'   profile->sets[0].number = 1;
'   profile->sets[0].executions = 2;
'   profile->sets[0].quartetCount = 2;
' 
' 
'   __builtin_strcpy(profile->sets[0].quartets[0].name, "/sd/profiles/qrt1.qrt") ;
' 
'   profile->sets[0].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
' 
'   profile->sets[0].quartets[0].parameters[0] = 10;
'   profile->sets[0].quartets[0].parameters[1] = 20;
'   profile->sets[0].quartets[0].parameters[2] = 0.01;
' 
'   profile->sets[0].quartets[0].dwell = 500;
' 
' 
'   __builtin_strcpy(profile->sets[0].quartets[1].name, "/sd/profiles/qrt2.qrt") ;
' 
'   profile->sets[0].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
' 
'   profile->sets[0].quartets[1].parameters[0] = -10;
'   profile->sets[0].quartets[1].parameters[1] = 2;
'   profile->sets[0].quartets[1].parameters[2] = 0.01;
' 
'   profile->sets[0].quartets[1].dwell = 200;
' 
' 
'   __builtin_strcpy(profile->sets[1].name, "/sd/profiles/Set_2.set") ;
' 
'   profile->sets[1].number = 2;
'   profile->sets[1].executions = 1;
'   profile->sets[1].quartetCount = 2;
' 
' 
'   __builtin_strcpy(profile->sets[1].quartets[0].name, "/sd/profiles/qrt3.qrt") ;
' 
'   profile->sets[1].quartets[0].function = QUARTET_FUNC_SIGMOIDAL;
' 
'   profile->sets[1].quartets[0].parameters[0] = 10;
'   profile->sets[1].quartets[0].parameters[1] = 40;
'   profile->sets[1].quartets[0].parameters[2] = 0.01;
' 
'   profile->sets[1].quartets[0].dwell = 500;
' 
' 
'   __builtin_strcpy(profile->sets[1].quartets[1].name, "/sd/profiles/qrt4.qrt") ;
' 
'   profile->sets[1].quartets[1].function = QUARTET_FUNC_SIGMOIDAL;
' 
'   profile->sets[1].quartets[1].parameters[0] = -10;
'   profile->sets[1].quartets[1].parameters[1] = 10;
'   profile->sets[1].quartets[1].parameters[2] = 0.01;
' 
'   profile->sets[1].quartets[1].dwell = 500;
' 
'   motion_profile_to_json(profile, profile->name);
'   motion_set_to_json(&(profile->sets[0]), profile->sets[0].name);
'   motion_set_to_json(&(profile->sets[1]), profile->sets[1].name);
'   motion_quartet_to_json(&(profile->sets[0].quartets[0]), profile->sets[0].quartets[0].name);
'   motion_quartet_to_json(&(profile->sets[0].quartets[1]), profile->sets[0].quartets[1].name);
'   motion_quartet_to_json(&(profile->sets[1].quartets[0]), profile->sets[1].quartets[0].name);
'   motion_quartet_to_json(&(profile->sets[1].quartets[1]), profile->sets[1].quartets[1].name);
'   json_print_motion_profile(profile);
' 
' 
' 
' 
' 
'   return  (0) ;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_static_test_profile_0341_ret
	ret

_start_display_0343
	mov	COUNT_, #1
	call	#pushregs_
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, #54
	mov	arg03, #55
	mov	arg04, #52
	mov	arg05, #53
	mov	arg06, #51
	mov	arg07, #56
	mov	arg08, #57
	call	#_display_begin
	mov	local01, result1 wz
 if_e	jmp	#LR__0466
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2088
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     return  (0) ;
	mov	result1, #0
	jmp	#LR__0467
LR__0466
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, #1
	call	#_display_on
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, #0
	call	#_display_canvas_image_start_address
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	decod	arg02, #10
	call	#_display_canvas_image_width
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, #0
	mov	arg03, #0
	call	#_display_active_window_xy
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	decod	arg02, #10
	mov	arg03, ##600
	call	#_display_active_window_wh
	add	ptr__dat__, ##16256
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##16256
	mov	arg02, #0
	mov	arg03, #0
	bmask	arg04, #9
	mov	arg05, ##599
	mov	arg06, ##627
	call	#_display_draw_square_fill
'   }
' 
'   display_on(&display,  (1) );
' 
' 
'   display_canvas_image_start_address(&display,  0 );
'   display_canvas_image_width(&display,  1024 );
'   display_active_window_xy(&display, 0, 0);
'   display_active_window_wh(&display,  1024 ,  600 );
'   display_draw_square_fill(&display, 0, 0,  1024  - 1,  600  - 1,  0x0273 );
'   return  (1) ;
	mov	result1, #1
LR__0467
	mov	ptra, fp
	call	#popregs_
_start_display_0343_ret
	ret

_stat
	mov	COUNT_, #7
	call	#pushregs_
	mov	arg03, arg01
	mov	local01, arg02
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	local02, ptr__dat__
	mov	arg01, local02
	mov	arg02, arg03
	mov	arg03, #0
	sub	ptr__dat__, ##142580
	call	#___getvfsforfile
	mov	local03, result1 wz
 if_ne	add	local03, #52
 if_ne	rdlong	arg01, local03
 if_ne	sub	local03, #52
 if_ne	cmps	arg01, #0 wz
' #line 22 "C:/flexprop/include/libc/unix/stat.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0468
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	mov	local04, arg01
	call	#\builtin_bytefill_
	mov	result1, local04
	rdbyte	arg02, local02 wz
 if_e	add	local01, #8
 if_e	wrlong	##4607, local01
' #line 29 "C:/flexprop/include/libc/unix/stat.c"
'         buf->st_mode =  0010000  | 0777;
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0468
	add	local03, #52
	rdlong	arg02, local03
	rdlong	local05, arg02
	add	arg02, #4
	rdlong	local06, arg02
	mov	arg01, local02
	mov	arg02, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
'     }
' #line 39 "C:/flexprop/include/libc/unix/stat.c"
'     r = v->stat(name, buf);
' #line 43 "C:/flexprop/include/libc/unix/stat.c"
'     return r;
LR__0468
	mov	ptra, fp
	call	#popregs_
_stat_ret
	ret

__rxtxioctl_0485
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
'     switch (req) {
	cmp	local01, #256 wz
 if_e	jmp	#LR__0469
	cmp	local01, #257 wz
 if_e	jmp	#LR__0470
	jmp	#LR__0471
LR__0469
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
'         *argl = _getrxtxflags();
'         return 0;
	mov	result1, #0
	jmp	#LR__0472
LR__0470
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
'         _setrxtxflags(*argl);
'         return 0;
	mov	result1, #0
	jmp	#LR__0472
LR__0471
'         return _seterror( 10 );
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
LR__0472
	mov	ptra, fp
	call	#popregs_
__rxtxioctl_0485_ret
	ret

___dummy_flush_0486
' {
'     return 0;
	mov	result1, #0
___dummy_flush_0486_ret
	ret

__vfswrite
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	arg01, local01
	sub	local01, #8
	test	arg01, #2 wz
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0479
	add	local01, #8
	rdlong	result1, local01
	sub	local01, #8
	test	result1, #64 wz
 if_e	jmp	#LR__0474
	add	local01, #8
	rdlong	result1, local01
	sub	local01, #8
	test	result1, #128 wz
 if_e	jmp	#LR__0473
	add	local01, #44
	rdlong	arg03, local01
	sub	local01, #44
	rdlong	local05, arg03
	add	arg03, #4
	rdlong	local06, arg03
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local07, local01
	andn	local07, #128
	wrlong	local07, local01
	sub	local01, #8
LR__0473
LR__0474
	add	local01, #20
	rdlong	local07, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__0476
	add	local01, #20
	rdlong	local07, local01
	sub	local01, #20
	rdlong	local05, local07
	add	local07, #4
	rdlong	local06, local07
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	mov	local08, result1
	cmps	local08, #0 wc
 if_ae	jmp	#LR__0475
	add	local01, #8
	rdlong	local07, local01
	or	local07, #32
	wrlong	local07, local01
'             f->state |=  (0x20) ;
'             return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	local08, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0479
LR__0475
'         }
'         return r;
	mov	result1, local08
	jmp	#LR__0479
LR__0476
	add	local01, #24
	rdlong	local09, local01 wz
	sub	local01, #24
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0479
	mov	local08, #0
'     }
'     r = 0;
'     while (count > 0) {
LR__0477
	cmp	local03, #1 wc
 if_b	jmp	#LR__0478
	mov	local07, local09
	rdlong	local05, local07
	add	local07, #4
	rdlong	local06, local07
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local08, result1
	sub	local03, #1
	add	local04, #1
	jmp	#LR__0477
LR__0478
'         r += (*tx)(*buf++, f);
'         --count;
'     }
'     return r;
	mov	result1, local08
LR__0479
	mov	ptra, fp
	call	#popregs_
__vfswrite_ret
	ret

__vfsread
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #40
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0486
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local01, local01 wz
 if_e	jmp	#LR__0481
	add	fp, #4
	rdlong	arg01, fp
	mov	local02, arg01
	add	local02, #16
	rdlong	local01, local02
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wc
 if_ae	jmp	#LR__0480
	add	fp, #4
	rdlong	local03, fp
	mov	local01, local03
	add	local03, #8
	rdlong	local03, local03
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
'             f->state |=  (0x20) ;
'             return _seterror(r);
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0486
LR__0480
'         }
'         return r;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__0486
LR__0481
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local01, local01 wz
	add	fp, #20
	wrlong	local01, fp
	sub	fp, #24
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0486
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local04, local01 wz
 if_e	jmp	#LR__0483
	add	fp, #4
	rdlong	local05, fp
	mov	local06, local05
	add	local06, #36
	rdlong	local07, local06
	mov	local01, local07
	rdlong	local02, local01
	add	local01, #4
	rdlong	local08, local01
	mov	local04, local08
	mov	local09, local05
	mov	local10, #256
	add	fp, #32
	mov	local11, fp
	mov	arg01, local09
	mov	arg02, #256
	mov	arg03, local11
	mov	local03, objptr
	mov	objptr, local02
	sub	fp, #36
	call	local04
	mov	objptr, local03
	add	fp, #16
	wrlong	result1, fp
	mov	local02, result1 wz
	sub	fp, #16
 if_ne	jmp	#LR__0482
	add	fp, #36
	rdlong	local06, fp
	sub	fp, #36
	mov	local04, local06
	and	local04, #2 wz
 if_ne	mov	local01, #1
 if_ne	add	fp, #32
 if_ne	wrlong	#1, fp
 if_ne	sub	fp, #32
LR__0482
LR__0483
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
'             break_on_nl = 1;
'         }
'     }
'     r = 0;
'     while (count > 0) {
LR__0484
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #1 wc
 if_b	jmp	#LR__0485
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local04, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local08, objptr
	mov	objptr, local02
	call	local04
	mov	objptr, local08
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wc
 if_b	jmp	#LR__0485
	add	fp, #28
	rdlong	local02, fp
	mov	local04, local02
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #8
	rdlong	local05, fp
	wrbyte	local05, local02
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__0484
	add	fp, #20
	rdlong	local04, fp
	sub	fp, #20
	cmp	local04, #10 wz
'             break;
 if_ne	jmp	#LR__0484
LR__0485
'         }
'     }
'     return r;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0486
	mov	ptra, fp
	call	#popregs_
__vfsread_ret
	ret

_state_machine_check_0548
	mov	COUNT_, #8
	call	#pushregs_
	add	ptra, #28
	mov	local01, arg01
	add	arg01, #4
	wrbyte	#1, arg01
	rdbyte	arg01, arg01 wz
 if_ne	mov	result1, #1
 if_e	mov	result1, #0
'     {
'         newState = STATE_SELFCHECK;
'     }
' 
'     return newState;
	cmp	result1, #1 wz
'     {
'         return newState;
 if_ne	jmp	#LR__0488
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	add	local01, #8
	mov	arg02, local01
	mov	arg03, #16
	call	#__system____builtin_memmove
	add	fp, #12
	rdbyte	local02, fp wz
	sub	fp, #12
 if_e	jmp	#LR__0487
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0487
	add	fp, #20
	rdbyte	local04, fp wz
	sub	fp, #20
 if_e	jmp	#LR__0487
	add	fp, #21
	rdbyte	local05, fp wz
	sub	fp, #21
 if_e	jmp	#LR__0487
	add	fp, #22
	rdbyte	local06, fp wz
	sub	fp, #22
 if_e	jmp	#LR__0487
	add	fp, #23
	rdbyte	local07, fp wz
	sub	fp, #23
 if_e	jmp	#LR__0487
	add	fp, #24
	rdbyte	local08, fp wz
	sub	fp, #24
'         params.esdTravelLimit == MOTION_LIMIT_OK &&
'         params.esdSwitch &&
'         params.servoOK &&
'         params.forceGaugeCom &&
'         params.servoCom &&
'         params.rtcCom)
'     {
'         return STATE_MOTION;
 if_ne	mov	result1, #2
 if_ne	jmp	#LR__0488
LR__0487
'     {
' 
'         return STATE_MACHINECHECK;
	mov	result1, #1
LR__0488
	mov	ptra, fp
	call	#popregs_
_state_machine_check_0548_ret
	ret

_state_machine_motion_0550
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	call	#_state_machine_check_0548
	mov	local02, result1
	cmp	local02, #2 wz
 if_e	jmp	#LR__0492
	rdlong	result1, local01
	cmp	result1, #2 wz
 if_ne	jmp	#LR__0490
	add	local01, #12
	rdlong	result1, local01 wz
	sub	local01, #12
 if_ne	jmp	#LR__0489
	add	local01, #16
	rdbyte	result1, local01 wz
	sub	local01, #16
 if_ne	jmp	#LR__0490
LR__0489
	add	local01, #24
	wrlong	#4, local01
	sub	local01, #24
	jmp	#LR__0491
LR__0490
	add	local01, #24
	wrlong	#0, local01
	sub	local01, #24
LR__0491
	add	local01, #32
	wrlong	#0, local01
'         {
'             machineState->motionParameters.status = STATUS_DISABLED;
'         }
' 
'         machineState->motionParameters.mode = MODE_MANUAL;
'         return newState;
	mov	result1, local02
	jmp	#LR__0505
LR__0492
	add	local01, #24
	rdlong	local03, local01 wz
	sub	local01, #24
 if_e	jmp	#LR__0503
'     {
'         switch (machineState->motionParameters.condition)
	add	local01, #28
	rdlong	local04, local01
	sub	local01, #28
	fle	local04, #9
	jmprel	local04
LR__0493
	jmp	#LR__0494
	jmp	#LR__0495
	jmp	#LR__0496
	jmp	#LR__0497
	jmp	#LR__0498
	jmp	#LR__0499
	jmp	#LR__0500
	jmp	#LR__0501
	jmp	#LR__0502
	jmp	#LR__0504
LR__0494
	add	local01, #24
	wrlong	#2, local01
'             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0495
	add	local01, #24
	wrlong	#2, local01
'             machineState->motionParameters.status = STATUS_SAMPLE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0496
	add	local01, #24
	wrlong	#3, local01
'             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0497
	add	local01, #24
	wrlong	#3, local01
'             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0498
	add	local01, #24
	wrlong	#3, local01
'             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0499
	add	local01, #24
	wrlong	#3, local01
'             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0500
	add	local01, #24
	wrlong	#3, local01
'             machineState->motionParameters.status = STATUS_MACHINE_LIMIT;
'             break;
	jmp	#LR__0504
LR__0501
	add	local01, #24
	rdlong	local04, local01
	sub	local01, #24
	cmp	local04, #1 wz
 if_e	jmp	#LR__0504
	add	local01, #24
	rdlong	local04, local01 wz
	sub	local01, #24
 if_ne	add	local01, #24
 if_ne	wrlong	#1, local01
'             {
' 
'                 machineState->motionParameters.status = STATUS_ENABLED;
'             }
'             break;
	jmp	#LR__0504
LR__0502
	add	local01, #24
	rdlong	local04, local01
	sub	local01, #24
	cmp	local04, #1 wz
 if_e	jmp	#LR__0504
	add	local01, #24
	rdlong	local04, local01 wz
	sub	local01, #24
 if_ne	add	local01, #24
 if_ne	wrlong	#1, local01
'             {
' 
'                 machineState->motionParameters.status = STATUS_ENABLED;
'             }
'             break;
	jmp	#LR__0504
LR__0503
	add	local01, #32
	wrlong	#0, local01
LR__0504
'     {
'         machineState->motionParameters.mode = MODE_MANUAL;
'     }
' 
'     return STATE_MOTION;
	mov	result1, #2
LR__0505
	mov	ptra, fp
	call	#popregs_
_state_machine_motion_0550_ret
	ret

_state_machine_update_0551
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
' {
'     while(!_locktry(machineState->lock));
	add	local01, #44
	loc	pa,	#(@LR__0507-@LR__0506)
	call	#FCACHE_LOAD_
LR__0506
	rdlong	arg01, local01
	locktry	arg01 wc
 if_ae	jmp	#LR__0506
LR__0507
	sub	local01, #44
	mov	arg01, local01
	call	#_state_machine_motion_0550
	wrlong	result1, local01
	add	local01, #44
	rdlong	arg01, local01
	lockrel	arg01 wc
	mov	ptra, fp
	call	#popregs_
_state_machine_update_0551_ret
	ret

_double_to_json_0640
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, ##@LR__2089
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, local01
	mov	arg03, ptra
	wrlong	local02, ptra++
	wrlong	local03, ptra++
	call	#_fprintf
	sub	ptra, #8
	mov	ptra, fp
	call	#popregs_
_double_to_json_0640_ret
	ret

_int_to_json_0641
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, ##@LR__2090
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, local01
	mov	arg03, ptra
	wrlong	local02, ptra++
	wrlong	local03, ptra++
	call	#_fprintf
	sub	ptra, #8
	mov	ptra, fp
	call	#popregs_
_int_to_json_0641_ret
	ret

_string_to_json_0642
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, ##@LR__2091
	mov	local02, arg02
	mov	local03, arg03
	mov	arg02, local01
	mov	arg03, ptra
	wrlong	local02, ptra++
	wrlong	local03, ptra++
	call	#_fprintf
	sub	ptra, #8
	mov	ptra, fp
	call	#popregs_
_string_to_json_0642_ret
	ret

_json_property_to_string_0644
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	call	#_json_getProperty
	mov	local02, result1 wz
 if_ne	jmp	#LR__0508
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2092
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__2093
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0508
'     }
'     return json_getValue(property);
' {
'     return property->u.value;
	add	local02, #8
	rdlong	result1, local02
	mov	ptra, fp
	call	#popregs_
_json_property_to_string_0644_ret
	ret

_json_property_to_int_0646
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	call	#_json_getProperty
	mov	local02, result1 wz
 if_e	jmp	#LR__0509
	mov	arg01, local02
' {
'     return json->type;
	add	arg01, #16
	rdlong	result1, arg01
	cmp	result1, #4 wz
 if_e	jmp	#LR__0510
LR__0509
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2094
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__2095
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0510
'     }
'     return (int)json_getInteger(property);
	mov	arg01, local02
' {
'     return atoi(property->u.value);
	add	arg01, #8
	rdlong	arg01, arg01
' {
'   return (int)atol(str);
	call	#_atol
	mov	ptra, fp
	call	#popregs_
_json_property_to_int_0646_ret
	ret

_json_property_to_double_0648
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	call	#_json_getProperty
	mov	local02, result1 wz
 if_e	jmp	#LR__0511
	mov	arg01, local02
' {
'     return json->type;
	add	arg01, #16
	rdlong	result1, arg01
	cmp	result1, #5 wz
 if_e	jmp	#LR__0512
LR__0511
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2096
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__2097
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0512
'     }
'     return json_getReal(property);
	mov	arg01, local02
' {
'     return atof(property->u.value);
	add	arg01, #8
	rdlong	arg01, arg01
	call	#_atof
	mov	ptra, fp
	call	#popregs_
_json_property_to_double_0648_ret
	ret

_json_property_to_double_array_0652
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	mov	arg02, arg03
	call	#_json_getProperty
	mov	local02, #0
' {
'     return json->u.c.child;
	add	result1, #8
	rdlong	result1, result1
	mov	local03, result1 wz
'     for (const json_t *property = json_getChild(properties); property != 0; property = json_getSibling(property))
 if_e	jmp	#LR__0514
LR__0513
	mov	local04, local02
	shl	local04, #2
	add	local04, local01
	mov	arg01, local03
' {
'     return atof(property->u.value);
	add	arg01, #8
	rdlong	arg01, arg01
	call	#_atof
	wrlong	result1, local04
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2098
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local04, local02
	shl	local04, #2
	add	local04, local01
	rdlong	arg02, local04
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg02, ##@LR__2099
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local02, #1
' {
'     return json->sibling;
	rdlong	result1, local03
	mov	local03, result1 wz
 if_ne	jmp	#LR__0513
LR__0514
'         index++;
'     }
' 
'     return index;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_json_property_to_double_array_0652_ret
	ret

_json_to_machine_configuration_0658
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__2100
	mov	arg01, local01
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local02
	mov	arg03, #20
	call	#_strncpy
	mov	arg02, ##@LR__2101
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #24
	wrlong	result1, local02
	mov	arg02, ##@LR__2102
	mov	arg01, local01
	call	#_json_property_to_double_0648
	sub	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2103
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #8
	wrlong	result1, local02
	mov	arg02, ##@LR__2104
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2105
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2106
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2107
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	add	local02, #4
	mov	arg02, ##@LR__2108
	mov	arg01, local01
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local02
	mov	arg03, #20
	call	#_strncpy
	mov	arg02, ##@LR__2109
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #20
	wrlong	result1, local02
	add	local02, #4
	mov	arg02, ##@LR__2110
	mov	arg01, local01
	call	#_json_property_to_string_0644
	mov	arg02, result1
	mov	arg01, local02
	mov	arg03, #20
	call	#_strncpy
	mov	arg02, ##@LR__2111
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #20
	wrlong	result1, local02
	mov	arg02, ##@LR__2112
	mov	arg01, local01
	call	#_json_property_to_int_0646
	add	local02, #4
	wrlong	result1, local02
	mov	ptra, fp
	call	#popregs_
_json_to_machine_configuration_0658_ret
	ret

_json_to_machine_performance_0659
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__2113
	mov	arg01, local01
	call	#_json_property_to_double_0648
	wrlong	result1, local02
	mov	arg02, ##@LR__2114
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2115
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2116
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2117
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2118
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	arg02, ##@LR__2119
	mov	arg01, local01
	call	#_json_property_to_double_0648
	add	local02, #4
	wrlong	result1, local02
	mov	ptra, fp
	call	#popregs_
_json_to_machine_performance_0659_ret
	ret

_machine_configuration_to_json_0660
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__2120
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2121
	mov	arg01, local01
	mov	arg03, local02
	call	#_string_to_json_0642
	mov	arg02, ##@LR__2122
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2123
	add	local02, #24
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2124
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2125
	sub	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2126
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2127
	add	local02, #8
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2128
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2129
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2130
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2131
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2132
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2133
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2134
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2135
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2136
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2137
	add	local02, #4
	mov	arg03, local02
	mov	arg01, local01
	call	#_string_to_json_0642
	mov	arg02, ##@LR__2138
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2139
	add	local02, #20
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2140
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2141
	add	local02, #4
	mov	arg03, local02
	mov	arg01, local01
	call	#_string_to_json_0642
	mov	arg02, ##@LR__2142
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2143
	add	local02, #20
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2144
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2145
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_int_to_json_0641
	mov	arg02, ##@LR__2146
	mov	arg01, local01
	call	#_fprintf
	mov	ptra, fp
	call	#popregs_
_machine_configuration_to_json_0660_ret
	ret

_machine_performance_to_json_0661
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg02, ##@LR__2147
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2148
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2149
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2150
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2151
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2152
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2153
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2154
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2155
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2156
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2157
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2158
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2159
	mov	arg01, local01
	call	#_fprintf
	mov	arg02, ##@LR__2160
	add	local02, #4
	rdlong	arg03, local02
	mov	arg01, local01
	call	#_double_to_json_0640
	mov	arg02, ##@LR__2161
	mov	arg01, local01
	call	#_fprintf
	mov	ptra, fp
	call	#popregs_
_machine_performance_to_json_0661_ret
	ret

_json_print_machine_configuration_0675
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2162
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2163
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2164
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #20
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2165
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2166
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #8
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2167
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2168
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2169
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2170
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	mov	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2171
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #20
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2172
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	mov	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2173
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #20
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2174
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_json_print_machine_configuration_0675_ret
	ret

_json_print_machine_performance_0676
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2175
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2176
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2177
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2178
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2179
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2180
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2181
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2182
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_json_print_machine_performance_0676_ret
	ret

_json_print_quartet
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #440
	wrlong	arg01, fp
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2183
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg02, fp
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2184
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg04, fp
	add	arg04, #52
	rdlong	arg02, arg04
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2185
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	arg04, fp
	add	arg04, #96
	rdlong	arg02, arg04
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	rdlong	arg02, fp
	add	arg02, #52
	rdlong	arg02, arg02
	call	#_get_function_info
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2186
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, #436
	wrlong	#0, fp
	sub	fp, #436
'     for (int i = 0; i < info.args_count; i++)
LR__0515
	add	fp, #436
	rdlong	arg01, fp
	sub	fp, #404
	rdlong	local01, fp
	sub	fp, #32
	cmps	arg01, local01 wc
 if_ae	jmp	#LR__0517
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	rdlong	arg04, fp
	add	fp, #436
	rdlong	arg03, fp
	sub	fp, #436
	shl	arg03, #2
	add	arg04, #56
	add	arg03, arg04
	rdlong	arg02, arg03
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #102
	call	#__system___basic_print_float
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, #32
	rdlong	arg01, fp
	sub	arg01, #1
	add	fp, #404
	rdlong	local02, fp
	sub	fp, #436
	cmps	local02, arg01 wc
 if_ae	jmp	#LR__0516
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2187
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0516
	add	fp, #436
	rdlong	local02, fp
	add	local02, #1
	wrlong	local02, fp
	sub	fp, #436
	jmp	#LR__0515
LR__0517
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_json_print_quartet_ret
	ret

_json_print_motion_set
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2188
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2189
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #52
	rdlong	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2190
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #4
	mov	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2191
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, #12
	rdlong	arg02, local01
	sub	local01, #68
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2192
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local02, #0
'     for (int i = 0; i < set->quartetCount; i++)
LR__0518
	add	local01, #72
	rdlong	arg01, local01
	sub	local01, #72
	cmps	local02, arg01 wc
 if_ae	jmp	#LR__0519
	qmul	local02, #100
	add	local01, #76
	getqx	arg01
	add	arg01, local01
	call	#_json_print_quartet
	add	local02, #1
	sub	local01, #76
	jmp	#LR__0518
LR__0519
	mov	ptra, fp
	call	#popregs_
_json_print_motion_set_ret
	ret

_check_buttons_0722
	add	arg02, #12
	wrlong	arg01, arg02
	sub	arg02, #12
	wrbyte	#1, arg02
_check_buttons_0722_ret
	ret

_monitor_cog_0748
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #24
	wrlong	arg01, fp
	add	ptr__dat__, ##110872
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##110872
	mov	arg02, #15
	mov	arg03, #16
	call	#_force_gauge_begin
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0520
	rdlong	local01, fp
	add	local01, #12
	rdlong	arg01, local01
	mov	arg02, #5
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0521
LR__0520
	rdlong	local01, fp
	add	local01, #12
	rdlong	arg01, local01
	mov	arg02, #5
	mov	arg03, #0
	call	#_state_machine_set
LR__0521
	add	ptr__dat__, ##111692
	mov	arg01, #20
	mov	arg02, #19
	neg	arg03, #1
	mov	arg04, #0
	mov	arg05, #0
	mov	arg06, ##-100000
	mov	arg07, ##100000
	mov	local02, objptr
	mov	objptr, ptr__dat__
	sub	ptr__dat__, ##111692
	call	#_jm_quadrature_spin2_start
	mov	objptr, local02
	mov	local02, result1
	rdlong	muldiva_, #20
	add	local02, #16
	rdlong	muldivb_, local02
	call	#divide_
	add	fp, #4
	wrlong	muldivb_, fp
	sub	fp, #4
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2193
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	rdlong	local02, fp
	add	local02, #16
	rdlong	arg02, local02
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg02, ##@LR__2194
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	mov	local02, #10
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local03, result1
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local04, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	result1, #0
	mov	local05, #0
	mov	local06, #0
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #8
	add	ptr__dat__, ##110868
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##110868
'     FILE *file =  (0) ;
' 
'     monitorWriteData =  (0) ;
'     while (1)
LR__0522
	getct	result1
	add	fp, #4
	rdlong	local06, fp
	add	result1, local06
	add	fp, #8
	wrlong	result1, fp
	add	ptr__dat__, ##110872
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##110872
	add	fp, #4
	mov	arg02, fp
	sub	fp, #16
	call	#_force_gauge_get_raw
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #4
	rdlong	local06, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__0523
	rdlong	local06, fp
	add	fp, #20
	rdlong	local01, fp
	sub	fp, #20
	wrlong	local01, local06
	jmp	#LR__0526
LR__0523
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2195
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	ptr__dat__, ##110872
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##110872
	mov	local07, arg01
	add	local07, #12
	mov	local08, objptr
	mov	objptr, local07
	call	#_jm_fullduplexserial_spin2_stop
	mov	objptr, local08
	add	ptr__dat__, ##110872
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##110872
	mov	arg02, #15
	mov	arg03, #16
	call	#_force_gauge_begin
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0524
	rdlong	local01, fp
	add	local01, #12
	rdlong	arg01, local01
	mov	arg02, #5
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0525
LR__0524
	rdlong	local01, fp
	add	local01, #12
	rdlong	arg01, local01
	mov	arg02, #5
	mov	arg03, #0
	call	#_state_machine_set
LR__0525
LR__0526
	rdlong	local06, fp
	add	ptr__dat__, ##111692
	mov	local09, objptr
	mov	objptr, ptr__dat__
	sub	ptr__dat__, ##111692
	call	#_jm_quadrature_spin2_value
	mov	objptr, local09
	mov	local01, result1
	add	local06, #4
	wrlong	local01, local06
	rdlong	local06, fp
	call	#__system___getms
	add	local06, #8
	wrlong	result1, local06
	add	ptr__dat__, ##110868
	rdbyte	local06, ptr__dat__ wz
	sub	ptr__dat__, ##110868
 if_e	jmp	#LR__0528
	add	fp, #8
	rdlong	local06, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0527
	mov	arg01, ##@LR__2196
	mov	arg02, ##@LR__2197
	call	#_fopen
	mov	local06, result1
	add	fp, #8
	wrlong	local06, fp
	sub	fp, #8
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2198
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, ##@LR__2199
	call	#_fprintf
	jmp	#LR__0530
LR__0527
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
	mov	arg02, ##@LR__2200
	rdlong	local09, fp
	add	local09, #8
	rdlong	local09, local09
	rdlong	local03, fp
	rdlong	local10, local03
	add	local03, #4
	rdlong	local04, local03
	sub	local03, #4
	mov	local11, local04
	mov	arg03, ptra
	wrlong	local09, ptra++
	wrlong	local10, ptra++
	wrlong	local11, ptra++
	call	#_fprintf
	sub	ptra, #12
	jmp	#LR__0530
LR__0528
	add	fp, #8
	rdlong	local06, fp wz
	sub	fp, #8
 if_e	jmp	#LR__0529
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2201
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local10, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local11, #0
	add	fp, #8
	rdlong	arg01, fp
	sub	fp, #8
' {
'     return _closeraw(f);
	call	#__closeraw
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #8
LR__0529
LR__0530
	getct	local06
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, local06 wc
 if_b	jmp	#LR__0522
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	addct1	arg01, #0
	waitct1
	jmp	#LR__0522
	mov	ptra, fp
	call	#popregs_
_monitor_cog_0748_ret
	ret

_button_navigation_0764
	add	ptr__dat__, ##111720
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##111720
_button_navigation_0764_ret
	ret

_move_servo_0812
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, #1
'     switch (type)
	mov	local05, local02
	fle	local05, #4
	jmprel	local05
LR__0531
	jmp	#LR__0533
	jmp	#LR__0534
	jmp	#LR__0535
	jmp	#LR__0532
	jmp	#LR__0536
LR__0532
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	mov	arg02, #3
	mov	arg03, #0
	call	#_dyn4_send_command
'         dyn4_send_command(&dyn4,  0x03 , 0);
'         break;
	jmp	#LR__0536
LR__0533
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2202
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, local03
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	arg01, result1
	rdlong	arg02, local01
	add	arg02, #24
	call	#_mm_to_steps
	add	local01, #4
	rdlong	local05, local01
	add	local05, #4
	rdlong	local05, local05
	add	result1, local05
	mov	arg03, result1
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	mov	arg02, #1
	call	#_dyn4_send_command
'         dyn4_send_command(&dyn4,  0x01 , positionSteps);
'         break;
	jmp	#LR__0536
LR__0534
	mov	arg01, local03
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	arg01, result1
	rdlong	arg02, local01
	add	arg02, #24
	call	#_mm_to_steps
	mov	arg03, result1
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	mov	arg02, #1
	call	#_dyn4_send_command
'         dyn4_send_command(&dyn4,  0x01 , deltaSteps);
'         break;
	jmp	#LR__0536
LR__0535
	mov	arg01, local03
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	arg01, result1
	mov	arg02, ##1061158912
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	local06, result1
	add	ptr__dat__, ##128248
	mov	local07, ptr__dat__
	mov	local08, #10
	mov	local09, local06
	mov	arg01, local07
	mov	arg02, #10
	mov	arg03, local09
	sub	ptr__dat__, ##128248
	call	#_dyn4_send_command
LR__0536
'         dyn4_send_command(&dyn4,  0x0A , rpm);
'     }
'     }
' 
'     return  (1) ;
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
_move_servo_0812_ret
	ret

_control_cog_0827
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #200
	wrlong	arg01, fp
' {
' 
'     while (!mcp23017_begin(&mcp,  0 ,  26 ,  0 ))
LR__0537
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #0
	mov	arg03, #26
	mov	arg04, #0
	call	#_mcp23017_begin
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0538
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2203
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, #100
	call	#__system___waitms
	jmp	#LR__0537
LR__0538
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	mov	arg02, #14
	mov	arg03, #12
	mov	arg04, #0
	call	#_dyn4_begin
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg02, #29
	mov	arg03, #28
	mov	arg04, #36
	mov	arg05, #0
	call	#_navkey_begin
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg03, #0
	mov	arg02, #10
	call	#_writeNavKey32_1802
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg02, ##100000
	call	#_navkey_write_max
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg02, ##-100000
	call	#_navkey_write_min
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg03, #1
	mov	arg02, #22
	call	#_writeNavKey32_1802
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg03, #300
	mov	arg02, #29
	call	#_writeNavKey8_1801
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	mov	arg03, #0
	mov	arg02, #10
	call	#_writeNavKey32_1802
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	arg03, #8
	rdlong	arg02, arg03
	mov	arg03, #48
	call	#__system____builtin_memmove
	mov	arg01, ##1000
	call	#__system___waitms
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2204
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	fp, #52
	wrlong	#0, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #4
	wrbyte	#1, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #64
	rdlong	local01, fp
	add	local01, #4
	rdlong	local01, local01
	rdlong	local01, local01
	rdlong	result1, fp
	add	result1, #4
	rdlong	result1, result1
	add	result1, #4
	rdlong	local02, result1
	rdlong	local03, fp
	add	local03, #4
	rdlong	local04, local03
	add	local04, #8
	rdlong	local05, local04
	add	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	local02, fp
	add	fp, #4
	wrlong	local05, fp
	sub	fp, #76
'     MonitorData lastData = *control->monitorData;
'     while (1)
LR__0539
	add	fp, #80
	mov	arg01, fp
	sub	fp, #80
	rdlong	local05, fp
	add	local05, #8
	rdlong	arg02, local05
	mov	arg03, #48
	call	#__system____builtin_memmove
	rdlong	local02, fp
	add	local02, #4
	rdlong	local05, local02
	rdlong	local01, local05
	rdlong	local05, fp
	add	local05, #4
	rdlong	local03, local05
	add	local03, #4
	rdlong	local02, local03
	rdlong	local03, fp
	add	local03, #4
	rdlong	local06, local03
	mov	local04, local06
	add	local04, #8
	rdlong	local07, local04
	add	fp, #128
	wrlong	local01, fp
	add	fp, #4
	wrlong	local02, fp
	add	fp, #4
	wrlong	local07, fp
	sub	fp, #136
	rdlong	local02, fp
	add	local02, #4
	rdlong	local05, local02
	rdlong	arg01, local05
	rdlong	local05, fp
	rdlong	arg02, local05
	add	arg02, #24
	call	#_raw_to_force
	add	fp, #140
	wrlong	result1, fp
	add	fp, #4
	mov	arg01, fp
	sub	fp, #144
	rdlong	local05, fp
	rdlong	local04, local05
	add	local04, #124
	mov	arg02, local04
	mov	arg03, #28
	call	#__system____builtin_memmove
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	call	#_mcp_update_register
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #6
	mov	arg03, #0
	mov	arg04, #1
	call	#_mcp_set_pin
	add	fp, #84
	rdbyte	local01, fp wz
	sub	fp, #84
 if_e	jmp	#LR__0540
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #4
	mov	arg03, #0
	mov	arg04, #0
	call	#_mcp_set_pin
	jmp	#LR__0541
LR__0540
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #4
	mov	arg03, #0
	mov	arg04, #0
	call	#_mcp_set_pin
LR__0541
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #3
	mov	arg03, #0
	call	#_mcp_get_pin
	zerox	result1, #7 wz
 if_ne	jmp	#LR__0542
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #1
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0543
LR__0542
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #1
	mov	arg03, #0
	call	#_state_machine_set
LR__0543
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #1
	mov	arg03, #0
	call	#_mcp_get_pin
	zerox	result1, #7 wz
 if_ne	jmp	#LR__0544
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #2
	mov	arg03, #2
	call	#_state_machine_set
	jmp	#LR__0547
LR__0544
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #0
	mov	arg03, #0
	call	#_mcp_get_pin
	zerox	result1, #7 wz
 if_ne	jmp	#LR__0545
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #2
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0546
LR__0545
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #2
	mov	arg03, #0
	call	#_state_machine_set
LR__0546
LR__0547
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #3
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0548
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #3
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0549
LR__0548
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #3
	mov	arg03, #0
	call	#_state_machine_set
LR__0549
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #2
	mov	arg03, #0
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0550
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #4
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0551
LR__0550
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #4
	mov	arg03, #0
	call	#_state_machine_set
LR__0551
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	add	fp, #172
	mov	arg02, fp
	sub	fp, #172
	call	#_dyn4_get_status
	cmp	result1, #0 wz
 if_e	jmp	#LR__0552
	add	fp, #64
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #64
	cmps	local01, #4 wc
 if_b	jmp	#LR__0553
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #6
	mov	arg03, #0
	call	#_state_machine_set
	jmp	#LR__0553
LR__0552
	add	fp, #64
	wrlong	#0, fp
	sub	fp, #64
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #6
	mov	arg03, #1
	call	#_state_machine_set
LR__0553
	add	fp, #140
	rdlong	local01, fp
	sub	fp, #140
	cmps	local01, #0 wc
 if_b	jmp	#LR__0554
	add	fp, #140
	rdlong	arg01, fp
	sub	fp, #140
	call	#__system___float_fromint
	mov	local05, result1
	add	fp, #160
	rdlong	arg01, fp
	sub	fp, #160
	mov	arg02, ##1148846080
	call	#__system___float_mul
	mov	local03, result1
	neg	local04, #1
	mov	arg01, local05
	mov	arg02, local03
	neg	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #1 wc
 if_b	jmp	#LR__0554
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #2
	mov	arg02, #9
	mov	arg03, #2
	call	#_state_machine_set
	jmp	#LR__0565
LR__0554
	add	fp, #140
	rdlong	local01, fp
	sub	fp, #140
	cmps	local01, #0 wc
 if_ae	jmp	#LR__0555
	add	fp, #140
	rdlong	arg01, fp
	sub	fp, #140
	call	#__system___float_fromint
	mov	local05, result1
	add	fp, #164
	rdlong	arg01, fp
	sub	fp, #164
	bitnot	arg01, #31
	mov	arg02, ##1148846080
	call	#__system___float_mul
	mov	local03, result1
	mov	local04, #1
	mov	arg01, local05
	mov	arg02, local03
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_ae	jmp	#LR__0555
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #3
	mov	arg02, #9
	mov	arg03, #3
	call	#_state_machine_set
	jmp	#LR__0564
LR__0555
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	local03, #1
	mov	arg02, #4
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0556
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #4
	mov	arg02, #9
	mov	arg03, #4
	call	#_state_machine_set
	jmp	#LR__0563
LR__0556
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	local03, #1
	mov	arg02, #5
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0557
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #5
	mov	arg02, #9
	mov	arg03, #5
	call	#_state_machine_set
	jmp	#LR__0562
LR__0557
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	local03, #1
	mov	arg02, #6
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0558
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #6
	mov	arg02, #9
	mov	arg03, #6
	call	#_state_machine_set
	jmp	#LR__0561
LR__0558
	add	fp, #180
	rdbyte	local01, fp wz
	sub	fp, #180
 if_ne	jmp	#LR__0559
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #7
	mov	arg02, #9
	mov	arg03, #7
	call	#_state_machine_set
	jmp	#LR__0560
LR__0559
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	local05, #8
	mov	arg02, #9
	mov	arg03, #8
	call	#_state_machine_set
LR__0560
LR__0561
LR__0562
LR__0563
LR__0564
LR__0565
	add	fp, #80
	rdlong	local01, fp
	sub	fp, #80
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0615
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	cmp	local01, #2 wz
 if_e	add	fp, #60
 if_e	rdbyte	local03, fp
 if_e	sub	fp, #60
 if_e	mov	local05, local03 wz
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_ne	jmp	#LR__0566
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	jmp	#LR__0616
LR__0566
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #28
	cmp	local01, #1 wz
 if_e	add	fp, #60
 if_e	rdbyte	local03, fp
 if_e	sub	fp, #60
 if_e	mov	local05, local03 wz
	add	fp, #112
	rdlong	local01, fp wz
	sub	fp, #112
 if_ne	jmp	#LR__0612
	add	fp, #36
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	add	fp, #60
 if_e	rdbyte	local03, fp
 if_e	sub	fp, #60
 if_e	mov	local05, local03 wz
	add	ptr__dat__, ##129060
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129060
	call	#_navkey_update_status
	add	ptr__dat__, ##129112
	rdlong	local01, ptr__dat__
	sub	ptr__dat__, ##129112
	cmps	local01, #1 wc
 if_b	jmp	#LR__0576
	add	fp, #108
	rdlong	local01, fp
	sub	fp, #108
	cmp	local01, #7 wz
 if_ne	jmp	#LR__0574
'                         {
' 
'                             switch (currentMachineState.function)
	add	fp, #116
	rdlong	local08, fp
	sub	fp, #116
	fle	local08, #7
	jmprel	local08
LR__0567
	jmp	#LR__0568
	jmp	#LR__0569
	jmp	#LR__0570
	jmp	#LR__0571
	jmp	#LR__0572
	jmp	#LR__0575
	jmp	#LR__0575
	jmp	#LR__0573
LR__0568
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	mov	local04, #1
	add	local05, #36
	wrlong	#1, local05
'                                 control->stateMachine->function = FUNC_MANUAL_INCREMENTAL_JOG;
'                                 break;
	jmp	#LR__0575
LR__0569
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	mov	local04, #2
	add	local05, #36
	wrlong	#2, local05
'                                 control->stateMachine->function = FUNC_MANUAL_CONTINUOUS_JOG;
'                                 break;
	jmp	#LR__0575
LR__0570
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	mov	local04, #3
	add	local05, #36
	wrlong	#3, local05
'                                 control->stateMachine->function = FUNC_MANUAL_POSITIONAL_MOVE;
'                                 break;
	jmp	#LR__0575
LR__0571
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	mov	local04, #4
	add	local05, #36
	wrlong	#4, local05
'                                 control->stateMachine->function = FUNC_MANUAL_HOME;
'                                 break;
	jmp	#LR__0575
LR__0572
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	mov	local04, #0
	add	local05, #36
	wrlong	#0, local05
'                                 control->stateMachine->function = FUNC_MANUAL_OFF;
'                                 break;
	jmp	#LR__0575
'                                 break;
'                                 break;
LR__0573
	rdlong	local02, fp
	add	local02, #8
	rdlong	local03, local02
	mov	local05, local03
	mov	local04, #0
	add	local05, #36
	wrlong	#0, local05
'                                 control->stateMachine->function = FUNC_MANUAL_OFF;
'                                 break;
	jmp	#LR__0575
LR__0574
	rdlong	local01, fp
	add	local01, #8
	rdlong	local02, local01
	add	local02, #28
	rdlong	local03, local02
	cmp	local03, #8 wz
 if_e	rdlong	local01, fp
 if_e	add	local01, #8
 if_e	rdlong	local02, local01
 if_e	add	local02, #36
 if_e	wrlong	#0, local02
LR__0575
LR__0576
'                         {
'                             control->stateMachine->function = FUNC_MANUAL_OFF;
'                         }
'                     }
' 
' 
'                     switch (currentMachineState.function)
	add	fp, #116
	rdlong	local01, fp
	sub	fp, #116
	mov	local09, local01
	fle	local09, #7
	jmprel	local09
LR__0577
	jmp	#LR__0578
	jmp	#LR__0579
	jmp	#LR__0586
	jmp	#LR__0592
	jmp	#LR__0597
	jmp	#LR__0605
	jmp	#LR__0606
	jmp	#LR__0616
LR__0578
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
'                         move_servo(control, MOVE_STOP, 0);
'                         break;
	jmp	#LR__0616
LR__0579
	add	fp, #40
	rdlong	local02, fp
	sub	fp, #40
	cmp	local02, #1 wz
 if_e	add	fp, #60
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #60
 if_e	cmps	local04, #0 wz
 if_e	jmp	#LR__0580
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	##1000, local05
LR__0580
	add	ptr__dat__, ##129104
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129104
	cmps	local02, #1 wc
 if_b	jmp	#LR__0582
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	rdlong	local04, local05
	cmps	local04, ##10000 wc
 if_ae	jmp	#LR__0581
	rdlong	local04, fp
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local10, local06
	mov	local11, local10
	abs	local07, local11 wc
	qdiv	local07, #10
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	getqx	local12
	negc	local12, local12
	wrlong	local12, local05
LR__0581
LR__0582
	add	ptr__dat__, ##129096
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129096
	cmps	local02, #1 wc
 if_b	jmp	#LR__0584
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	rdlong	local06, local05
	cmps	local06, #11 wc
 if_b	jmp	#LR__0583
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local04, fp
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local10, local06
	mov	local11, local10
	mov	local12, local11
	shl	local12, #2
	add	local12, local11
	shl	local12, #1
	add	local05, #40
	wrlong	local12, local05
LR__0583
LR__0584
	add	ptr__dat__, ##129080
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129080
	cmps	local02, #1 wc
 if_b	jmp	#LR__0585
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2205
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local12, local06
	mov	arg02, #0
	mov	arg03, local12
	call	#_move_servo_0812
LR__0585
	add	ptr__dat__, ##129088
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129088
	cmps	local02, #1 wc
 if_b	jmp	#LR__0616
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2206
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local10, local06
	mov	local11, local10
	neg	local12, local11
	mov	arg02, #0
	mov	arg03, local12
	call	#_move_servo_0812
'                             move_servo(control, MOVE_RELATIVE, -1 * control->stateMachine->functionData);
'                         }
'                         break;
	jmp	#LR__0616
LR__0586
	add	fp, #40
	rdlong	local05, fp
	sub	fp, #40
	cmp	local05, #2 wz
 if_e	add	fp, #60
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #60
 if_e	mov	local03, local04 wz
 if_e	jmp	#LR__0587
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	##10000, local05
LR__0587
	add	ptr__dat__, ##129104
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129104
	cmps	local02, #1 wc
 if_b	jmp	#LR__0588
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local12, local06
	mov	local07, local12
	add	local07, #40
	rdlong	local11, local07
	mov	local04, local11
	sub	local04, ##1000
	add	local05, #40
	wrlong	local04, local05
LR__0588
	add	ptr__dat__, ##129096
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129096
	cmps	local02, #1 wc
 if_b	jmp	#LR__0589
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local12, local06
	mov	local07, local12
	add	local07, #40
	rdlong	local11, local07
	mov	local04, local11
	add	local04, ##1000
	add	local05, #40
	wrlong	local04, local05
LR__0589
	add	ptr__dat__, ##129084
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129084
	cmps	local02, #1 wc
 if_b	jmp	#LR__0590
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local12, local06
	mov	arg02, #2
	mov	arg03, local12
	call	#_move_servo_0812
LR__0590
	add	ptr__dat__, ##129092
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129092
	cmps	local02, #1 wc
 if_b	jmp	#LR__0591
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local10, local06
	mov	local11, local10
	neg	local12, local11
	mov	arg02, #2
	mov	arg03, local12
	call	#_move_servo_0812
LR__0591
	add	ptr__dat__, ##129080
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129080
	cmps	local02, #1 wc
 if_ae	rdlong	arg01, fp
 if_ae	mov	arg02, #3
 if_ae	mov	arg03, #0
 if_ae	call	#_move_servo_0812
	add	ptr__dat__, ##129088
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129088
	cmps	local02, #1 wc
 if_ae	rdlong	arg01, fp
 if_ae	mov	arg02, #3
 if_ae	mov	arg03, #0
 if_ae	call	#_move_servo_0812
'                         {
'                             move_servo(control, MOVE_STOP, 0);
'                         }
'                         break;
	jmp	#LR__0616
LR__0592
	add	fp, #40
	rdlong	local02, fp
	sub	fp, #40
	cmp	local02, #3 wz
 if_e	add	fp, #60
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #60
 if_e	cmps	local04, #0 wz
 if_e	jmp	#LR__0593
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #4
	rdlong	local07, local06
	add	local07, #4
	rdlong	arg01, local07
	rdlong	local07, fp
	rdlong	local12, local07
	add	local12, #24
	mov	local11, local12
	mov	arg02, local11
	call	#_steps_to_mm
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	arg01, result1
	mov	arg02, #1
	call	#__system___float_tointeger
	qmul	result1, ##1000
	sub	local12, #24
	add	local05, #40
	getqx	local06
	wrlong	local06, local05
LR__0593
	add	ptr__dat__, ##129104
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129104
	cmps	local02, #1 wc
 if_b	jmp	#LR__0594
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local12, local06
	mov	local07, local12
	add	local07, #40
	rdlong	local11, local07
	mov	local04, local11
	sub	local04, ##1000
	add	local05, #40
	wrlong	local04, local05
LR__0594
	add	ptr__dat__, ##129096
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129096
	cmps	local02, #1 wc
 if_b	jmp	#LR__0595
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local12, local06
	mov	local07, local12
	add	local07, #40
	rdlong	local11, local07
	mov	local04, local11
	add	local04, ##1000
	add	local05, #40
	wrlong	local04, local05
LR__0595
	add	ptr__dat__, ##129080
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129080
	cmps	local02, #1 wc
 if_b	jmp	#LR__0596
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local12, local06
	mov	arg02, #1
	mov	arg03, local12
	call	#_move_servo_0812
LR__0596
	add	ptr__dat__, ##129088
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129088
	cmps	local02, #1 wc
 if_b	jmp	#LR__0616
	rdlong	arg01, fp
	mov	local04, arg01
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local12, local06
	mov	arg02, #1
	mov	arg03, local12
	call	#_move_servo_0812
'                         {
'                             move_servo(control, MOVE_ABSOLUTE, control->stateMachine->functionData);
'                         }
'                         break;
	jmp	#LR__0616
LR__0597
	add	fp, #40
	rdlong	local05, fp
	sub	fp, #40
	cmp	local05, #4 wz
 if_e	add	fp, #60
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #60
 if_e	mov	local03, local04 wz
 if_e	jmp	#LR__0598
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	#0, local05
LR__0598
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #5
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0599
	rdlong	local03, fp
	add	local03, #8
	rdlong	local04, local03
	add	local04, #40
	rdlong	local12, local04
	cmp	local12, #2 wz
 if_ne	jmp	#LR__0599
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	mov	arg01, #100
	call	#__system___waitms
	rdlong	arg01, fp
	mov	arg02, #2
	mov	arg03, ##-1500
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	#3, local05
	jmp	#LR__0603
LR__0599
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #5
	mov	arg03, #1
	call	#_mcp_get_pin
	zerox	result1, #7 wz
 if_ne	jmp	#LR__0600
	rdlong	local03, fp
	add	local03, #8
	rdlong	local04, local03
	add	local04, #40
	rdlong	local12, local04
	cmp	local12, #3 wz
 if_ne	jmp	#LR__0600
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	mov	arg01, #100
	call	#__system___waitms
	rdlong	arg01, fp
	mov	arg02, #2
	mov	arg03, ##1500
	call	#_move_servo_0812
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	#4, local05
	jmp	#LR__0602
LR__0600
	add	ptr__dat__, ##129180
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129180
	mov	arg02, #5
	mov	arg03, #1
	call	#_mcp_get_pin
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0601
	rdlong	local03, fp
	add	local03, #8
	rdlong	local06, local03
	mov	local04, local06
	add	local04, #40
	rdlong	local12, local04
	mov	local07, local12
	cmp	local07, #4 wz
 if_ne	jmp	#LR__0601
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
	mov	arg01, ##1000
	call	#__system___waitms
	add	ptr__dat__, ##128248
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##128248
	mov	arg02, #0
	mov	arg03, #0
	call	#_dyn4_send_command
	rdlong	local02, fp
	add	local02, #8
	rdlong	local03, local02
	sub	local02, #8
	mov	local05, local03
	mov	local04, #1
	add	local05, #40
	wrlong	#1, local05
	sub	local05, #40
LR__0601
LR__0602
LR__0603
	add	ptr__dat__, ##129080
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129080
	cmps	local02, #1 wc
 if_b	jmp	#LR__0604
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	#2, local05
	rdlong	arg01, fp
	mov	arg02, #2
	mov	arg03, ##10000
	call	#_move_servo_0812
LR__0604
	add	ptr__dat__, ##129088
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129088
	cmps	local02, #1 wc
 if_b	jmp	#LR__0616
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	wrlong	#2, local05
	rdlong	arg01, fp
	mov	arg02, #2
	mov	arg03, ##10000
	call	#_move_servo_0812
'                         {
'                             control->stateMachine->functionData = HOMING_SEEKING;
'                             move_servo(control, MOVE_SPEED, 10000);
'                         }
'                         break;
	jmp	#LR__0616
LR__0605
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
'                         move_servo(control, MOVE_STOP, 0);
'                         break;
	jmp	#LR__0616
LR__0606
	add	fp, #40
	rdlong	local02, fp
	sub	fp, #40
	cmp	local02, #6 wz
 if_e	add	fp, #60
 if_e	rdbyte	local04, fp
 if_e	sub	fp, #60
 if_e	cmps	local04, #0 wz
 if_ne	rdlong	local02, fp
 if_ne	add	local02, #8
 if_ne	rdlong	local05, local02
 if_ne	add	local05, #40
 if_ne	wrlong	#0, local05
	add	ptr__dat__, ##129104
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129104
	cmps	local02, #1 wc
 if_b	jmp	#LR__0607
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local07, local06
	add	local07, #40
	rdlong	local04, local07
	add	local04, #100
	add	local05, #40
	wrlong	local04, local05
LR__0607
	add	ptr__dat__, ##129096
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129096
	cmps	local02, #1 wc
 if_b	jmp	#LR__0609
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	add	local05, #40
	rdlong	local04, local05
	cmps	local04, #101 wc
 if_b	jmp	#LR__0608
	rdlong	local02, fp
	add	local02, #8
	rdlong	local05, local02
	rdlong	local06, fp
	add	local06, #8
	rdlong	local07, local06
	add	local07, #40
	rdlong	local04, local07
	sub	local04, #100
	add	local05, #40
	wrlong	local04, local05
LR__0608
LR__0609
	add	fp, #140
	rdlong	local03, fp
	qmul	local03, ##1000
	sub	fp, #140
	rdlong	local04, fp
	add	local04, #8
	rdlong	local06, local04
	add	local06, #40
	rdlong	local11, local06
	mov	local12, local11
	getqx	local02
	cmps	local02, local12 wc
 if_ae	jmp	#LR__0610
	add	ptr__dat__, ##129084
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129084
	cmps	local02, #1 wc
 if_ae	rdlong	arg01, fp
 if_ae	mov	arg02, #2
 if_ae	mov	arg03, #100
 if_ae	call	#_move_servo_0812
	add	ptr__dat__, ##129092
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129092
	cmps	local02, #1 wc
 if_ae	rdlong	arg01, fp
 if_ae	mov	arg02, #2
 if_ae	mov	arg03, #100
 if_ae	call	#_move_servo_0812
	jmp	#LR__0611
LR__0610
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
LR__0611
	add	ptr__dat__, ##129080
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129080
	cmps	local02, #1 wc
 if_ae	rdlong	arg01, fp
 if_ae	mov	arg02, #3
 if_ae	mov	arg03, #0
 if_ae	call	#_move_servo_0812
	add	ptr__dat__, ##129088
	rdlong	local02, ptr__dat__
	sub	ptr__dat__, ##129088
	cmps	local02, #1 wc
 if_b	jmp	#LR__0616
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
'                         {
'                             move_servo(control, MOVE_STOP, 0);
'                         }
'                         break;
	jmp	#LR__0616
LR__0612
	add	fp, #112
	rdlong	local01, fp
	sub	fp, #112
	cmp	local01, #1 wz
 if_e	jmp	#LR__0616
	add	fp, #112
	rdlong	local01, fp
	sub	fp, #112
	cmp	local01, #2 wz
 if_ne	jmp	#LR__0616
	add	fp, #36
	rdlong	local01, fp
	sub	fp, #36
	cmp	local01, #2 wz
 if_e	jmp	#LR__0613
	add	ptr__dat__, ##129196
	mov	arg01, ptr__dat__
	sub	ptr__dat__, ##129196
	call	#_run_motion_profile_init
	call	#__system___getus
	add	fp, #52
	wrlong	result1, fp
	sub	fp, #52
	add	ptr__dat__, ##110868
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##110868
LR__0613
	add	ptr__dat__, ##129208
	rdbyte	local01, ptr__dat__ wz
	sub	ptr__dat__, ##129208
 if_ne	jmp	#LR__0614
	call	#__system___getus
	mov	arg01, result1
	add	fp, #52
	rdlong	local03, fp
	sub	fp, #52
	sub	arg01, local03
	call	#__system___float_fromuns
	mov	arg01, result1
	mov	arg02, ##1232348160
	call	#__system___float_div
	add	fp, #184
	wrlong	result1, fp
	sub	fp, #184
	mov	arg01, result1
	add	ptr__dat__, ##129196
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##129196
	rdlong	arg03, fp
	add	arg03, #12
	call	#_position_profile
	add	fp, #188
	wrlong	result1, fp
	sub	fp, #188
	rdlong	local01, fp
	mov	local02, #1
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	arg03, result1
	mov	arg01, local01
	mov	arg02, local02
	call	#_move_servo_0812
	add	fp, #188
	rdlong	arg01, fp
	sub	fp, #188
	mov	arg02, #0
	call	#__system___float_tointeger
	add	fp, #56
	wrlong	result1, fp
	sub	fp, #56
	jmp	#LR__0616
LR__0614
	add	ptr__dat__, ##110868
	wrbyte	#0, ptr__dat__
	sub	ptr__dat__, ##110868
	rdlong	local02, fp
	add	local02, #8
	rdlong	arg01, local02
	mov	arg02, #10
	mov	arg03, #1
	call	#_state_machine_set
	jmp	#LR__0616
LR__0615
	rdlong	arg01, fp
	mov	arg02, #3
	mov	arg03, #0
	call	#_move_servo_0812
LR__0616
	add	fp, #4
	mov	arg01, fp
	add	fp, #76
	mov	arg02, fp
	sub	fp, #80
	mov	arg03, #48
	call	#__system____builtin_memmove
	add	fp, #128
	rdlong	local01, fp
	add	fp, #4
	rdlong	local02, fp
	add	fp, #4
	rdlong	local05, fp
	sub	fp, #68
	wrlong	local01, fp
	add	fp, #4
	wrlong	local02, fp
	add	fp, #4
	wrlong	local05, fp
	sub	fp, #16
	wrbyte	#0, fp
	sub	fp, #60
	jmp	#LR__0539
	mov	ptra, fp
	call	#popregs_
_control_cog_0827_ret
	ret

_button_run_0855
	add	arg02, #8
	rdlong	arg01, arg02
	mov	arg02, #10
	mov	arg03, #2
	call	#_state_machine_set
_button_run_0855_ret
	ret

_button_nav_0857
	add	arg02, #16
	wrbyte	#1, arg02
_button_nav_0857_ret
	ret

_button_open_0860
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	rdlong	arg01, local01
	mov	arg05, ##@LR__2207
	mov	arg02, #100
	mov	arg03, #100
	mov	arg04, #0
	call	#_explorer_create
	mov	local02, result1
	mov	arg01, local02
	call	#_explorer_run
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2208
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local02, ##12744
	mov	arg02, local02
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, local02
	sub	local02, ##12744
	mov	arg02, ##@LR__2209
	call	#_strcmp
	cmp	result1, #0 wz
'     {
'         return;
 if_e	jmp	#LR__0617
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2210
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local02, ##12744
	mov	arg02, local02
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #12
	rdlong	arg02, local01
	add	arg02, #12
	mov	arg01, local02
	call	#_json_to_motion_profile
	rdlong	arg01, local01
	add	arg01, #12
	call	#_json_print_motion_profile
LR__0617
	mov	ptra, fp
	call	#popregs_
_button_open_0860_ret
	ret

_update_profileName_0863
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #68
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	mov	arg01, fp
	mov	arg02, ##@LR__2211
	sub	fp, #16
	add	arg03, #12
	rdlong	local01, arg03
	add	local01, #12
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	add	fp, #16
	mov	arg01, fp
	sub	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	add	arg02, ##3540
	call	#_strcmp
	cmp	result1, #0 wz
'         return;
 if_e	jmp	#LR__0618
	add	fp, #12
	rdlong	arg01, fp
	add	arg01, ##3540
	add	fp, #4
	mov	arg02, fp
	sub	fp, #16
	call	#__system____builtin_strcpy
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	rdlong	arg02, fp
	add	arg02, ##3540
	add	arg01, #208
	wrlong	arg02, arg01
	rdlong	local01, fp
	rdlong	arg01, local01
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	call	#_module_draw
LR__0618
	mov	ptra, fp
	call	#popregs_
_update_profileName_0863_ret
	ret

_update_profileNumber_0866
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #68
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	mov	arg01, fp
	mov	arg02, ##@LR__2212
	sub	fp, #16
	add	arg03, #12
	rdlong	arg03, arg03
	add	arg03, #64
	rdlong	local01, arg03
	mov	arg03, ptra
	wrlong	local01, ptra++
	call	#_sprintf
	sub	ptra, #4
	add	fp, #16
	mov	arg01, fp
	sub	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	add	arg02, ##3592
	call	#_strcmp
	cmp	result1, #0 wz
'         return;
 if_e	jmp	#LR__0619
	add	fp, #12
	rdlong	arg01, fp
	add	arg01, ##3592
	add	fp, #4
	mov	arg02, fp
	sub	fp, #16
	call	#__system____builtin_strcpy
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	rdlong	arg02, fp
	add	arg02, ##3592
	add	arg01, #208
	wrlong	arg02, arg01
	rdlong	local01, fp
	rdlong	arg01, local01
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	call	#_module_draw
LR__0619
	mov	ptra, fp
	call	#popregs_
_update_profileNumber_0866_ret
	ret

_isFile_0888
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
' {
'     for (int i = 0; i < (int)strlen(name); i++)
LR__0620
	mov	arg01, local01
	call	#_strlen
	cmps	local02, result1 wc
 if_ae	jmp	#LR__0621
	mov	arg01, local02
	add	arg01, local01
	rdbyte	arg01, arg01
	cmp	arg01, #46 wz
'         {
'             return  (1) ;
 if_e	mov	result1, #1
 if_e	jmp	#LR__0622
	add	local02, #1
	jmp	#LR__0620
LR__0621
'         }
'     }
'     return  (0) ;
	mov	result1, #0
LR__0622
	mov	ptra, fp
	call	#popregs_
_isFile_0888_ret
	ret

_button_delete_0891
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	add	local01, ##12744
	mov	arg01, local01
	call	#_strlen
	mov	local02, result1
	mov	arg01, local01
	mov	arg02, ##@LR__2213
	call	#_strcat
	mov	arg01, local01
	add	local01, #104
	rdlong	local03, local01
	mov	arg02, local03
	shl	arg02, #2
	add	arg02, local03
	shl	arg02, #2
	sub	local01, ##12840
	add	arg02, local01
	call	#_strcat
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2214
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, ##12840
	rdlong	local03, local01
	mov	arg02, local03
	shl	arg02, #2
	add	arg02, local03
	shl	arg02, #2
	sub	local01, ##12840
	add	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg02, ##@LR__2215
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local01, ##12736
	mov	arg02, local01
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, local01
'     return _remove(name);
	call	#__remove
	add	local02, local01
	wrbyte	#0, local02
	mov	ptra, fp
	call	#popregs_
_button_delete_0891_ret
	ret

_button_cancel_0893
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg02
	add	local01, ##12744
	mov	arg01, local01
	mov	arg02, ##@LR__2216
	call	#_strcpy
	sub	local01, ##12484
	wrbyte	#1, local01
	mov	ptra, fp
	call	#popregs_
_button_cancel_0893_ret
	ret

_button_dotdot_0896
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	add	local01, ##12744
	mov	arg01, local01
	sub	local01, ##12744
	call	#_strlen
	mov	local02, result1
	sub	local02, #1
	loc	pa,	#(@LR__0625-@LR__0623)
	call	#FCACHE_LOAD_
' {
'     Explorer *explorer = (Explorer *)arg;
'     for (int i = strlen(explorer->pathBuffer) - 1; i >= 0; i--)
LR__0623
	cmps	local02, #0 wc
 if_b	jmp	#LR__0626
	mov	local03, local02
	add	local01, ##12744
	add	local03, local01
	rdbyte	local04, local03
	cmp	local04, #47 wz
	sub	local01, ##12744
 if_ne	jmp	#LR__0624
	add	local01, ##12744
	add	local02, local01
	wrbyte	#0, local02
	add	local01, #104
	wrlong	##-1, local01
	sub	local01, #4
	wrlong	#0, local01
'         {
'             explorer->pathBuffer[i] = '\0';
'             explorer->selection = -1;
'             explorer->page = 0;
'             break;
	jmp	#LR__0626
LR__0624
	sub	local02, #1
	jmp	#LR__0623
LR__0625
LR__0626
	mov	ptra, fp
	call	#popregs_
_button_dotdot_0896_ret
	ret

_button_prev_0898
	add	arg02, ##12844
	rdlong	_var01, arg02
	sub	arg02, ##12844
	cmps	_var01, #1 wc
 if_ae	add	arg02, ##12844
 if_ae	rdlong	_var01, arg02
 if_ae	sub	_var01, #1
 if_ae	wrlong	_var01, arg02
 if_ae	sub	arg02, ##12844
	add	arg02, ##12848
	wrlong	##-1, arg02
_button_prev_0898_ret
	ret

_button_next_0900
	add	arg02, ##12844
	rdlong	_var01, arg02
	add	_var01, #1
	wrlong	_var01, arg02
	add	arg02, #4
	wrlong	##-1, arg02
_button_next_0900_ret
	ret

_button_done_0902
	add	arg02, #260
	wrbyte	#1, arg02
_button_done_0902_ret
	ret

_button_files_0906
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local01
	mov	local04, local03
	shl	local04, #2
	add	local04, local03
	shl	local04, #2
	add	local02, #8
	add	local04, local02
	mov	local05, #0
'     for (int i = 0; i < (int)strlen(newpath); i++)
	sub	local02, #8
LR__0627
	mov	arg01, local04
	call	#_strlen
	cmps	local05, result1 wc
 if_ae	jmp	#LR__0629
	mov	local03, local05
	add	local03, local04
	rdbyte	local03, local03
	cmp	local03, #46 wz
 if_ne	jmp	#LR__0628
	add	local02, #4
	rdlong	local05, local02 wz
	sub	local02, #4
 if_e	add	local02, ##12848
 if_e	wrlong	local01, local02
'             {
'                 explorer->selection = id;
'                 return;
 if_e	jmp	#LR__0630
'             {
'                 return;
	jmp	#LR__0630
LR__0628
	add	local05, #1
	jmp	#LR__0627
LR__0629
	add	local02, ##12744
	mov	arg01, local02
	mov	arg02, ##@LR__2217
	call	#_strcat
	mov	arg01, local02
	mov	arg02, local04
	call	#_strcat
	add	local02, #104
	wrlong	##-1, local02
	sub	local02, #4
	wrlong	#0, local02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	sub	local02, #100
	mov	arg01, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
LR__0630
	mov	ptra, fp
	call	#popregs_
_button_files_0906_ret
	ret

_button_navigation_0981
	add	ptr__dat__, ##142180
	wrbyte	#1, ptr__dat__
	sub	ptr__dat__, ##142180
_button_navigation_0981_ret
	ret

_create_filepath_0982
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	call	#__system____builtin_strcpy
	mov	arg02, ##@LR__2218
	mov	arg01, local01
	call	#_strcat
	mov	arg01, local01
	mov	arg02, arg03
	call	#_strcat
	mov	arg01, local01
	mov	arg02, arg04
	call	#_strcat
	mov	ptra, fp
	call	#popregs_
_create_filepath_0982_ret
	ret

_button_open_0988
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg02
	mov	local02, local01
	add	local02, #4
	rdlong	arg01, local02
	sub	local02, #4
	mov	arg05, ##@LR__2219
	mov	arg02, #100
	mov	arg03, #100
	mov	arg04, #0
	call	#_explorer_create
	mov	local03, result1
	mov	arg01, local03
	call	#_explorer_run
	mov	local04, result1
	mov	arg02, ##@LR__2220
	mov	arg01, local04
	call	#_strcmp
	cmp	result1, #0 wz
'     {
'         return;
 if_e	jmp	#LR__0644
	mov	local05, #0
'     }
' 
' 
' 
' 
' 
'     for (int i = 0; i <  4 ; i++)
LR__0631
	cmps	local05, #4 wc
 if_ae	jmp	#LR__0637
	mov	arg01, local04
	mov	local06, #0
	loc	pa,	#(@LR__0633-@LR__0632)
	call	#FCACHE_LOAD_
LR__0632
	rdbyte	result1, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0632
LR__0633
	mov	local07, local06
	mov	arg01, local05
	shl	arg01, #2
	add	ptr__dat__, ##142164
	add	arg01, ptr__dat__
	rdlong	arg01, arg01
	sub	ptr__dat__, ##142164
	mov	local06, #0
	loc	pa,	#(@LR__0635-@LR__0634)
	call	#FCACHE_LOAD_
LR__0634
	rdbyte	result1, arg01 wz
 if_ne	add	local06, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0634
LR__0635
	sub	local07, local06
	mov	local08, local04
	add	local08, local07
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg01, #0
	mov	arg02, local08
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	arg01, local05
	shl	arg01, #2
	add	ptr__dat__, ##142164
	add	arg01, ptr__dat__
	rdlong	arg02, arg01
	mov	arg01, local08
	sub	ptr__dat__, ##142164
	call	#_strcmp
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0636
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2221
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local05
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local02, #12
	wrlong	local05, local02
	sub	local02, #12
'             page->mode = i;
'             break;
	jmp	#LR__0637
LR__0636
	add	local05, #1
	jmp	#LR__0631
LR__0637
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2222
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local02, #12
	rdlong	arg02, local02
	mov	local09, #10
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local10, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	local11, #0
' 
'     switch (page->mode)
	rdlong	local12, local02
	sub	local02, #12
	mov	local13, local12
	fle	local13, #4
	jmprel	local13
LR__0638
	jmp	#LR__0639
	jmp	#LR__0640
	jmp	#LR__0641
	jmp	#LR__0642
	jmp	#LR__0643
LR__0639
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2223
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local02, #136
	mov	arg01, local04
	mov	arg02, local02
	call	#_json_to_motion_quartet
'         json_to_motion_quartet(filepath, &(page->quartet));
'         break;
	jmp	#LR__0643
LR__0640
	add	local02, #236
	mov	arg01, local04
	mov	arg02, local02
	call	#_json_to_motion_set
'     {
'         json_to_motion_set(filepath, &(page->set));
'         break;
	jmp	#LR__0643
LR__0641
	add	local02, ##1312
	mov	arg01, local04
	mov	arg02, local02
	call	#_json_to_motion_profile
'     {
'         json_to_motion_profile(filepath, &(page->profile));
'         break;
	jmp	#LR__0643
LR__0642
	mov	local14, local04
	add	local02, ##17512
	mov	local15, local02
	mov	local16, local15
	mov	arg01, local14
	mov	arg02, local16
	call	#_json_to_test_profile
'     {
'         json_to_test_profile(filepath, &(page->test));
'         break;
LR__0643
LR__0644
	mov	ptra, fp
	call	#popregs_
_button_open_0988_ret
	ret

_button_new_0996
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local02
	add	local03, ##31568
	mov	arg01, local03
	sub	local03, ##31564
	rdlong	arg02, local03
	sub	local03, #4
	call	#_selection_init
	mov	local04, #0
' {
'     TestProfilePage *page = (TestProfilePage *)arg;
' 
'     selection_init(&(page->selection), page->display);
'     for (int i = 0; i <  4 ; i++)
LR__0645
	cmps	local04, #4 wc
 if_ae	jmp	#LR__0646
	add	local03, ##31568
	mov	arg01, local03
	sub	local03, ##31568
	mov	arg02, local04
	shl	arg02, #2
	add	ptr__dat__, ##142148
	add	arg02, ptr__dat__
	rdlong	arg02, arg02
	sub	ptr__dat__, ##142148
	call	#_selection_add_option
	add	local04, #1
	jmp	#LR__0645
LR__0646
	add	local03, ##31568
	mov	arg01, local03
	call	#_selection_run
	mov	local05, result1
	sub	local03, ##31564
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	sub	local03, #8
	call	#_keyboard_create
	mov	local06, result1 wz
 if_ne	jmp	#LR__0647
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2224
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return;
	jmp	#LR__0654
LR__0647
	mov	arg02, ##@LR__2225
	mov	arg01, local06
	call	#_keyboard_get_input
	mov	local07, result1
	mov	arg02, ##@LR__2226
	mov	arg01, local07
	call	#_strcmp
	cmp	result1, #0 wz
'     {
'         return;
 if_e	jmp	#LR__0654
	add	local03, #4
	rdlong	arg01, local03
	sub	local03, #4
	mov	arg05, ##@LR__2227
	mov	arg02, #100
	mov	arg03, #100
	mov	arg04, #1
	call	#_explorer_create
	mov	local08, result1 wz
 if_ne	jmp	#LR__0648
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2228
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'         return;
	jmp	#LR__0654
LR__0648
	mov	arg01, local08
	call	#_explorer_run
	mov	local09, result1
	mov	arg02, ##@LR__2229
	mov	arg01, local09
	call	#_strcmp
	cmp	result1, #0 wz
'     {
'         return;
 if_e	jmp	#LR__0654
	add	local03, #12
	wrlong	local05, local03
'     }
' 
'     page->mode = newmode;
'     switch (page->mode)
	mov	local10, local05
	sub	local03, #12
	mov	local11, local10
	fle	local11, #3
	jmprel	local11
LR__0649
	jmp	#LR__0650
	jmp	#LR__0651
	jmp	#LR__0652
	jmp	#LR__0653
LR__0650
	add	local03, #136
	mov	arg01, local03
	call	#_motion_quartet_init
	add	ptr__dat__, ##142164
	rdlong	arg04, ptr__dat__
	sub	ptr__dat__, ##142164
	mov	arg01, local03
	mov	arg02, local09
	mov	arg03, local07
	call	#_create_filepath_0982
'     {
'         motion_quartet_init(&(page->quartet));
'         create_filepath(page->quartet.name, newpath, filename, extension[ 0 ]);
'         break;
	jmp	#LR__0653
LR__0651
	add	local03, #236
	mov	arg01, local03
	call	#_motion_set_init
	add	ptr__dat__, ##142168
	rdlong	arg04, ptr__dat__
	sub	ptr__dat__, ##142168
	mov	arg01, local03
	mov	arg02, local09
	mov	arg03, local07
	call	#_create_filepath_0982
'     {
'         motion_set_init(&(page->set));
'         create_filepath(page->set.name, newpath, filename, extension[ 1 ]);
'         break;
	jmp	#LR__0653
LR__0652
	add	local03, ##1312
	mov	arg01, local03
	call	#_motion_profile_init
	mov	local12, local03
	mov	local13, local09
	mov	local14, local07
	add	ptr__dat__, ##142172
	rdlong	local15, ptr__dat__
	sub	ptr__dat__, ##142172
	mov	local16, local15
	mov	arg01, local12
	mov	arg02, local13
	mov	arg03, local14
	mov	arg04, local16
	call	#_create_filepath_0982
'     {
'         motion_profile_init(&(page->profile));
'         create_filepath(page->profile.name, newpath, filename, extension[ 2 ]);
'         break;
LR__0653
LR__0654
	mov	ptra, fp
	call	#popregs_
_button_new_0996_ret
	ret

_button_save_1011
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
' {
'     TestProfilePage *page = (TestProfilePage *)arg;
'     switch (page->mode)
	add	local01, #12
	rdlong	local02, local01
	sub	local01, #12
	fle	local02, #4
	jmprel	local02
LR__0655
	jmp	#LR__0656
	jmp	#LR__0657
	jmp	#LR__0658
	jmp	#LR__0659
	jmp	#LR__0660
LR__0656
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2230
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #136
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_quartet_to_json
'         motion_quartet_to_json(&(page->quartet), page->quartet.name);
'         break;
	jmp	#LR__0660
LR__0657
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2231
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, #236
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_set_to_json
'         motion_set_to_json(&(page->set), page->set.name);
'         break;
	jmp	#LR__0660
LR__0658
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2232
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, ##1312
	mov	arg01, local01
	mov	arg02, local01
	call	#_motion_profile_to_json
'         motion_profile_to_json(&(page->profile), page->profile.name);
'         break;
	jmp	#LR__0660
LR__0659
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2233
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local01, ##17512
	mov	arg01, local01
	rdlong	arg02, local01
	call	#_test_profile_to_json
'         test_profile_to_json(&(page->test), page->test.name);
'         break;
LR__0660
	mov	ptra, fp
	call	#popregs_
_button_save_1011_ret
	ret

_update_filename_1013
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	arg02, #47
	call	#_strrchr
	add	result1, #1
	mov	local02, result1
	mov	arg01, local02
	mov	arg02, local01
	call	#__system____builtin_strcpy
	mov	arg01, local02
	mov	arg02, arg03
	call	#_strcat
	mov	ptra, fp
	call	#popregs_
_update_filename_1013_ret
	ret

_button_quartet_1020
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	local03, #0
	mov	arg02, ##@LR__2234
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	local04, result1
	mov	local05, #10
	mov	arg01, #0
	mov	arg02, local01
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	local06, result1
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local07, #1
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	mov	result1, #0
	mov	local08, #0
	mov	local09, local02
'     TestProfilePage *page = (TestProfilePage *)arg;
'     switch (id)
	mov	local10, local01
	fle	local10, #3
	jmprel	local10
LR__0661
	jmp	#LR__0662
	jmp	#LR__0663
	jmp	#LR__0666
	jmp	#LR__0667
LR__0662
	add	local09, #4
	rdlong	arg01, local09
	add	local09, #4
	rdlong	arg02, local09
	sub	local09, #8
	call	#_keyboard_create
	mov	arg01, result1
	mov	arg02, ##@LR__2235
	call	#_keyboard_get_input
	mov	local08, result1
	mov	arg02, ##@LR__2236
	mov	arg01, local08
	call	#_strcmp
	cmp	result1, #0 wz
'         {
'             return;
 if_e	jmp	#LR__0669
	add	local09, #136
	add	ptr__dat__, ##142164
	rdlong	arg03, ptr__dat__
	sub	ptr__dat__, ##142164
	mov	arg01, local09
	mov	arg02, local08
	call	#_update_filename_1013
'         }
' 
'         update_filename(page->quartet.name, filename, extension[ 0 ]);
' 
'         keyboard_destroy(keyboard);
'         break;
	jmp	#LR__0668
LR__0663
	add	local09, ##31568
	mov	arg01, local09
	sub	local09, ##31564
	rdlong	arg02, local09
	sub	local09, #4
	call	#_selection_init
	mov	local11, #0
'     {
'         selection_init(&(page->selection), page->display);
'         for (int i = 0; i <  2 ; i++)
LR__0664
	cmps	local11, #2 wc
 if_ae	jmp	#LR__0665
	add	local09, ##31136
	mov	arg01, local09
	mov	arg02, local11
	call	#_get_function_info
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2237
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, local11
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg02, ##@LR__2238
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	add	local09, #4
	mov	arg02, local09
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	add	local09, #428
	mov	arg01, local09
	sub	local09, #428
	mov	arg02, local09
	sub	local09, ##31140
	call	#_selection_add_option
	add	local11, #1
	jmp	#LR__0664
LR__0665
	add	local09, ##31568
	mov	arg01, local09
	call	#_selection_run
	sub	local09, ##31380
	wrlong	result1, local09
'             selection_add_option(&(page->selection), page->info.name);
'         }
'         page->quartet.function = selection_run(&(page->selection));
'         break;
	jmp	#LR__0668
LR__0666
	add	local09, #4
	rdlong	arg01, local09
	add	local09, #4
	rdlong	arg02, local09
	call	#_keyboard_create
	mov	arg01, result1
	mov	arg02, ##@LR__2239
	call	#_keyboard_get_input
	mov	arg01, result1
	call	#_atof
	add	local09, #224
	wrlong	result1, local09
'         page->quartet.dwell = atof(dwell);
'         keyboard_destroy(keyboard);
'         break;
	jmp	#LR__0668
LR__0667
'         break;
LR__0668
LR__0669
	mov	ptra, fp
	call	#popregs_
_button_quartet_1020_ret
	ret

_button_quartet_parameters_1025
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #52
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg02, fp
	add	arg02, ##31136
	rdlong	arg01, fp
	sub	fp, #8
	add	arg01, #188
	rdlong	local01, arg01
	mov	arg01, arg02
	mov	arg02, local01
	call	#_get_function_info
	add	fp, #8
	rdlong	arg02, fp
	mov	local01, arg02
	add	local01, #4
	rdlong	arg01, local01
	sub	fp, #8
	add	arg02, #8
	rdlong	arg02, arg02
	call	#_keyboard_create
	add	fp, #12
	wrlong	result1, fp
	add	fp, #4
	mov	arg01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local02, fp
	mov	arg02, local02
	shl	arg02, #2
	add	arg02, local02
	shl	arg02, #2
	add	local01, ##31168
	add	arg02, local01
	call	#__system____builtin_strcpy
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	mov	arg02, ##@LR__2240
	call	#_strcat
	add	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #16
	call	#_keyboard_get_input
	add	fp, #48
	wrlong	result1, fp
	sub	fp, #40
	rdlong	local02, fp
	sub	fp, #8
	rdlong	local01, fp
	shl	local01, #2
	add	local02, #192
	add	local01, local02
	mov	arg01, result1
	call	#_atof
	wrlong	result1, local01
	add	fp, #12
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_button_quartet_parameters_1025_ret
	ret

_button_set_1035
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local02
' {
'     TestProfilePage *page = (TestProfilePage *)arg;
'     switch (id)
	mov	local04, local01
	fle	local04, #4
	jmprel	local04
LR__0670
	jmp	#LR__0671
	jmp	#LR__0672
	jmp	#LR__0673
	jmp	#LR__0674
	jmp	#LR__0675
LR__0671
	add	local03, #4
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	sub	local03, #8
	call	#_keyboard_create
	mov	arg01, result1
	mov	arg02, ##@LR__2241
	call	#_keyboard_get_input
	mov	local04, result1
	mov	arg02, ##@LR__2242
	mov	arg01, local04
	call	#_strcmp
	cmp	result1, #0 wz
'         {
'             return;
 if_e	jmp	#LR__0676
	add	local03, #236
	add	ptr__dat__, ##142168
	rdlong	arg03, ptr__dat__
	sub	ptr__dat__, ##142168
	mov	arg01, local03
	mov	arg02, local04
	call	#_update_filename_1013
'         }
' 
'         update_filename(page->set.name, filename, extension[ 1 ]);
'         break;
	jmp	#LR__0675
LR__0672
	add	local03, #4
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	call	#_keyboard_create
	mov	arg01, result1
	mov	arg02, ##@LR__2243
	call	#_keyboard_get_input
	mov	arg01, result1
' {
'   return (int)atol(str);
	call	#_atol
	add	local03, #280
	wrlong	result1, local03
'         page->set.number = atoi(number);
'         break;
	jmp	#LR__0675
LR__0673
	add	local03, #4
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	sub	local03, #8
	call	#_keyboard_create
	mov	arg01, result1
	mov	arg02, ##@LR__2244
	call	#_keyboard_get_input
	mov	arg03, result1
	mov	arg02, ##@LR__2245
	mov	arg01, arg03
	call	#_strcmp
	cmp	result1, #0 wz
'         {
'             return;
 if_e	jmp	#LR__0676
	add	local03, #292
	mov	arg01, local03
	mov	arg02, arg03
	mov	arg03, #10
	call	#_strncpy
'         }
'         strncpy(page->set.type, type,  10 );
'         break;
	jmp	#LR__0675
LR__0674
	add	local03, #4
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	call	#_keyboard_create
	mov	local05, result1
	mov	local06, ##@LR__2246
	mov	local07, local06
	mov	arg01, local05
	mov	arg02, local07
	call	#_keyboard_get_input
	mov	local08, result1
	mov	arg01, local08
' {
'   return (int)atol(str);
	call	#_atol
	mov	local09, result1
	add	local03, #296
	wrlong	local09, local03
'         page->set.executions = atoi(executions);
'         break;
LR__0675
LR__0676
	mov	ptra, fp
	call	#popregs_
_button_set_1035_ret
	ret

_button_set_add
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	add	local01, #4
	rdlong	arg01, local01
	sub	local01, #4
	mov	arg05, ##@LR__2247
	mov	arg02, #100
	mov	arg03, #100
	mov	arg04, #0
	call	#_explorer_create
	mov	arg01, result1
	call	#_explorer_run
	mov	local02, result1
	mov	arg02, ##@LR__2248
	mov	arg01, local02
	call	#_strcmp
	cmp	result1, #0 wz
'     {
'         return;
 if_e	jmp	#LR__0677
	add	local01, #308
	rdlong	result1, local01
	qmul	result1, #100
	add	local01, #4
	mov	arg01, local02
	getqx	arg02
	add	arg02, local01
	call	#_json_to_motion_quartet
	sub	local01, #4
	rdlong	local02, local01
	add	local02, #1
	wrlong	local02, local01
LR__0677
	mov	ptra, fp
	call	#popregs_
_button_set_add_ret
	ret

_button_set_remove
	mov	COUNT_, #2
	call	#pushregs_
	qmul	arg01, #100
	mov	local01, arg02
	mov	arg03, arg01
	add	arg03, #1
	getqx	local02
	qmul	arg03, #100
	add	local01, #312
	add	local02, local01
	getqx	arg02
	add	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	arg03, arg01
	sub	arg03, #1
	qmul	arg03, #100
	mov	arg01, local02
	getqx	arg03
	call	#__system____builtin_memmove
	rdlong	local02, local01
	sub	local02, #1
	wrlong	local02, local01
	mov	ptra, fp
	call	#popregs_
_button_set_remove_ret
	ret

___default_filbuf
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, arg01
	add	arg01, #16
	rdlong	arg03, arg01
	sub	arg01, #16
	rdlong	local02, arg03
	add	arg03, #4
	rdlong	local03, arg03
	add	local01, #12
	mov	arg02, local01
	sub	local01, #12
	decod	arg03, #10
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	local04, result1
	cmps	local04, #0 wc
'         return -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__0678
	wrlong	local04, local01
	add	local01, #12
	mov	local03, local01
	sub	local01, #8
	wrlong	local03, local01
	add	local01, #4
	rdlong	local03, local01
	or	local03, #1
	wrlong	local03, local01
'     }
'     b->cnt = r;
'     b->ptr = &b->buf[0];
'     b->flags |=  (0x01) ;
'     return r;
	mov	result1, local04
LR__0678
	mov	ptra, fp
	call	#popregs_
___default_filbuf_ret
	ret

___root_opendir
	add	ptr__dat__, ##142292
	add	arg01, #4
	wrlong	ptr__dat__, arg01
' {
'     dir->vfsdata = &mounttab[0];
'     return 0;
	mov	result1, #0
	sub	ptr__dat__, ##142292
___root_opendir_ret
	ret

___root_readdir
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #4
	rdlong	local03, local01
	sub	local01, #4
LR__0679
	add	ptr__dat__, ##142308
	cmp	local03, ptr__dat__ wz
' 
'         return -1;
	sub	ptr__dat__, ##142308
 if_e	neg	result1, #1
 if_e	jmp	#LR__0680
	rdlong	arg03, local03 wz
 if_e	add	local03, #4
'         ptr++;
'         goto again;
 if_e	jmp	#LR__0679
	rdlong	arg02, local03
	add	arg02, #1
	mov	arg01, local02
	mov	arg03, #64
	call	#_strncpy
	add	local02, #80
	wrbyte	#1, local02
	sub	local02, #8
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local03, #4
	add	local01, #4
	wrlong	local03, local01
'     }
'     strncpy(ent->d_name, (*ptr)+1,  (64) );
'     ent->d_type =  (1) ;
'     ent->d_size = 0;
'     ent->d_mtime = 0;
'     dir->vfsdata = ++ptr;
'     return 0;
	mov	result1, #0
LR__0680
	mov	ptra, fp
	call	#popregs_
___root_readdir_ret
	ret

___root_closedir
'     return 0;
	mov	result1, #0
___root_closedir_ret
	ret

___root_stat
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg02
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	add	local01, #8
	wrlong	##4607, local01
'     buf->st_mode =  0010000  | 0777;
'     return 0;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
___root_stat_ret
	ret

___getvfsforfile
	mov	COUNT_, #19
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	loc	pa,	#(@LR__0682-@LR__0681)
	call	#FCACHE_LOAD_
' 
'     while (orig_name[0] == '/' && orig_name[1] == '/') {
LR__0681
	rdbyte	result1, local02
	cmp	result1, #47 wz
 if_ne	jmp	#LR__0683
	add	local02, #1
	rdbyte	result1, local02
	sub	local02, #1
	cmp	result1, #47 wz
 if_e	add	local02, #1
 if_e	jmp	#LR__0681
LR__0682
LR__0683
	rdbyte	arg03, local02
	cmp	arg03, #47 wz
 if_ne	jmp	#LR__0684
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#_strncpy
	jmp	#LR__0689
LR__0684
	add	ptr__dat__, ##142324
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##142324
	mov	arg01, local01
	mov	arg03, #256
	call	#_strncpy
	rdbyte	local04, local02 wz
 if_e	jmp	#LR__0688
	rdbyte	local05, local02
	cmp	local05, #46 wz
 if_ne	jmp	#LR__0685
	add	local02, #1
	rdbyte	local06, local02
	sub	local02, #1
	mov	local07, local06
	zerox	local07, #7 wz
 if_e	jmp	#LR__0688
LR__0685
	rdbyte	local04, local01
	cmp	local04, #47 wz
 if_ne	jmp	#LR__0686
	add	local01, #1
	rdbyte	local07, local01
	sub	local01, #1
	mov	local05, local07
	zerox	local05, #7 wz
 if_e	jmp	#LR__0687
LR__0686
	mov	arg02, ##@LR__2249
	mov	arg01, local01
	mov	arg03, #256
	call	#_strncat
LR__0687
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#_strncat
LR__0688
LR__0689
	rdbyte	local04, local01 wz
 if_e	jmp	#LR__0690
	rdbyte	local05, local01
	cmp	local05, #47 wz
 if_ne	jmp	#LR__0691
	add	local01, #1
	rdbyte	local07, local01
	sub	local01, #1
	zerox	local07, #7 wz
 if_ne	jmp	#LR__0691
LR__0690
'         return &__rootvfs;
	add	ptr__dat__, ##142836
	mov	result1, ptr__dat__
	sub	ptr__dat__, ##142836
	jmp	#LR__0706
LR__0691
'     }
'     for (i = 0; i <  4 ; i++) {
	mov	local08, #0
LR__0692
	cmps	local08, #4 wc
 if_ae	jmp	#LR__0705
	mov	local04, local08
	shl	local04, #2
	add	ptr__dat__, ##142292
	add	local04, ptr__dat__
	rdlong	local07, local04 wz
	sub	ptr__dat__, ##142292
 if_e	jmp	#LR__0704
	mov	local05, local08
	shl	local05, #2
	add	ptr__dat__, ##142292
	add	local05, ptr__dat__
	rdlong	arg01, local05
	sub	ptr__dat__, ##142292
	mov	local09, #0
	loc	pa,	#(@LR__0694-@LR__0693)
	call	#FCACHE_LOAD_
LR__0693
	rdbyte	result1, arg01 wz
 if_ne	add	local09, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0693
LR__0694
	mov	local10, local09
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #47 wz
 if_ne	mov	local11, local10
 if_ne	mov	local12, local01
 if_ne	add	local11, local12
 if_ne	rdbyte	local06, local11 wz
 if_ne	jmp	#LR__0703
	mov	local07, local08
	shl	local07, #2
	add	ptr__dat__, ##142292
	mov	local13, ptr__dat__
	add	local07, ptr__dat__
	rdlong	local14, local07
	mov	local15, local10
	mov	arg01, local01
	mov	arg02, local14
	mov	arg03, local15
	sub	ptr__dat__, ##142292
	call	#_strncmp
	mov	local16, result1 wz
 if_ne	jmp	#LR__0703
	mov	local04, local08
	shl	local04, #2
	add	ptr__dat__, ##142308
	add	local04, ptr__dat__
	rdlong	local17, local04
' 
'             while (name[len+1] == '.' && (name[len+2] == '/' || name[len+2] == 0)) {
	sub	ptr__dat__, ##142308
	loc	pa,	#(@LR__0697-@LR__0695)
	call	#FCACHE_LOAD_
LR__0695
	mov	local05, local10
	add	local05, #1
	mov	local07, local05
	mov	local06, local01
	add	local07, local01
	rdbyte	local04, local07
	cmp	local04, #46 wz
 if_ne	jmp	#LR__0698
	mov	local12, local10
	add	local12, #2
	mov	local16, local12
	mov	local14, local01
	add	local16, local01
	rdbyte	local11, local16
	cmp	local11, #47 wz
 if_e	jmp	#LR__0696
	mov	local13, local10
	add	local13, #2
	mov	local18, local13
	mov	local19, local01
	add	local18, local01
	rdbyte	local15, local18 wz
 if_ne	jmp	#LR__0698
LR__0696
	add	local10, #1
	jmp	#LR__0695
LR__0697
LR__0698
	cmp	local03, #0 wz
 if_ne	mov	arg01, local03
 if_ne	mov	arg02, local01
 if_ne	mov	arg03, #256
 if_ne	call	#_strncpy
	mov	arg02, local01
	add	arg02, local10
	add	arg02, #1
	mov	arg01, local01
	call	#__system____builtin_strcpy
	mov	arg01, local01
	mov	local09, #0
	loc	pa,	#(@LR__0700-@LR__0699)
	call	#FCACHE_LOAD_
LR__0699
	rdbyte	result1, arg01 wz
 if_ne	add	local09, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0699
LR__0700
	mov	result1, local09
	mov	local10, result1
'                 strncpy(full_path, name,  (256) );
'             }
'             __builtin_strcpy(name, name+len+1) ;
' 
'             len =  __builtin_strlen(name) ;
'             while ( len > 0 ) {
LR__0701
	cmps	local10, #1 wc
 if_b	jmp	#LR__0702
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #47 wz
 if_e	mov	local04, local10
 if_e	add	local04, local01
 if_e	wrbyte	#0, local04
 if_e	sub	local10, #1
 if_e	jmp	#LR__0701
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #46 wz
 if_ne	jmp	#LR__0702
	cmps	local10, #2 wc
 if_b	jmp	#LR__0702
	mov	local12, local10
	sub	local12, #1
	add	local12, local01
	rdbyte	local06, local12
	cmp	local06, #47 wz
 if_ne	jmp	#LR__0702
	mov	local05, local10
	sub	local05, #1
	add	local05, local01
	wrbyte	#0, local05
	sub	local10, #2
	jmp	#LR__0701
'                     break;
LR__0702
'                 }
'             }
' #line 137 "C:/flexprop/include/libc/unix/_mount.c"
'             return v;
	mov	result1, local17
	jmp	#LR__0706
LR__0703
LR__0704
	add	local08, #1
	jmp	#LR__0692
LR__0705
	add	ptr___system__dat__, ##748
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##748
'         }
'     }
'     v = _getrootvfs();
' #line 144 "C:/flexprop/include/libc/unix/_mount.c"
'     return v;
LR__0706
	mov	ptra, fp
	call	#popregs_
___getvfsforfile_ret
	ret

__mount
	mov	COUNT_, #18
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	neg	local03, #1
	rdbyte	arg01, local01
	cmp	arg01, #47 wz
 if_ne	jmp	#LR__0709
	mov	arg01, local01
	mov	local04, #0
	loc	pa,	#(@LR__0708-@LR__0707)
	call	#FCACHE_LOAD_
LR__0707
	rdbyte	result1, arg01 wz
 if_ne	add	local04, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0707
LR__0708
	mov	result1, local04
	cmps	result1, #16 wc
 if_b	jmp	#LR__0710
LR__0709
' #line 160 "C:/flexprop/include/libc/unix/_mount.c"
'         return _seterror( 10 );
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
	jmp	#LR__0722
LR__0710
'     }
'     for (i = 0; i <  4 ; i++) {
	mov	local05, #0
LR__0711
	cmps	local05, #4 wc
 if_ae	jmp	#LR__0716
	mov	arg01, local05
	shl	arg01, #2
	add	ptr__dat__, ##142292
	add	arg01, ptr__dat__
	rdlong	arg01, arg01 wz
	sub	ptr__dat__, ##142292
 if_e	cmps	local03, #0 wc
 if_c_and_z	mov	local03, local05
'                 firstfree = i;
'                 continue;
 if_c_and_z	jmp	#LR__0715
	mov	arg01, local05
	shl	arg01, #2
	add	ptr__dat__, ##142292
	add	arg01, ptr__dat__
	rdlong	arg01, arg01
	sub	ptr__dat__, ##142292
	mov	local04, #0
	loc	pa,	#(@LR__0713-@LR__0712)
	call	#FCACHE_LOAD_
LR__0712
	rdbyte	result1, arg01 wz
 if_ne	add	local04, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__0712
LR__0713
	mov	result1, local04
	mov	local06, result1
	mov	arg01, local06
	add	arg01, local01
	rdbyte	arg01, arg01
	cmp	arg01, #47 wz
 if_ne	mov	local07, local06
 if_ne	mov	local08, local01
 if_ne	add	local07, local08
 if_ne	rdbyte	arg01, local07 wz
 if_ne	jmp	#LR__0714
	mov	arg03, local05
	shl	arg03, #2
	add	ptr__dat__, ##142292
	mov	local09, ptr__dat__
	add	arg03, ptr__dat__
	rdlong	arg02, arg03
	mov	local10, local06
	mov	arg01, local01
	mov	arg03, local10
	sub	ptr__dat__, ##142292
	call	#_strncmp
	cmps	result1, #0 wz
 if_e	mov	local03, local05
'             firstfree = i;
'             break;
 if_e	jmp	#LR__0716
LR__0714
LR__0715
	add	local05, #1
	jmp	#LR__0711
LR__0716
	cmp	local03, ##-1 wz
' #line 179 "C:/flexprop/include/libc/unix/_mount.c"
'         return _seterror( 11 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#11, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0722
	mov	local05, local03
	mov	local08, local05
	shl	local08, #2
	add	ptr__dat__, ##142308
	add	local08, ptr__dat__
	rdlong	local11, local08 wz
	sub	ptr__dat__, ##142308
 if_e	jmp	#LR__0717
	add	local11, #76
	rdlong	local08, local11 wz
	sub	local11, #76
 if_e	jmp	#LR__0717
	add	local11, #76
	rdlong	local12, local11
	sub	local11, #76
	mov	local13, local12
	rdlong	local14, local13
	add	local13, #4
	rdlong	local07, local13
	mov	local15, local07
	mov	local08, local05
	shl	local08, #2
	add	ptr__dat__, ##142292
	mov	local16, ptr__dat__
	add	local08, ptr__dat__
	rdlong	local08, local08
	mov	arg01, local08
	mov	local17, objptr
	mov	objptr, local14
	sub	ptr__dat__, ##142292
	call	local15
	mov	objptr, local17
LR__0717
	mov	local13, local05
	shl	local13, #2
	add	ptr__dat__, ##142308
	add	local13, ptr__dat__
	wrlong	local02, local13
	cmp	local02, #0 wz
	sub	ptr__dat__, ##142308
 if_ne	jmp	#LR__0718
	shl	local05, #2
	add	ptr__dat__, ##142292
	add	local05, ptr__dat__
	wrlong	#0, local05
	sub	ptr__dat__, ##142292
	jmp	#LR__0721
LR__0718
	mov	local18, local05
	shl	local18, #4
	add	ptr__dat__, ##142225
	add	local18, ptr__dat__
	mov	arg01, local18
	mov	arg02, local01
	mov	arg03, #16
	sub	ptr__dat__, ##142225
	call	#_strncpy
	add	local02, #72
	rdlong	local13, local02 wz
	sub	local02, #72
 if_e	jmp	#LR__0720
	add	local02, #72
	rdlong	local13, local02
	rdlong	local14, local13
	add	local13, #4
	rdlong	local15, local13
	mov	arg01, local18
	mov	local17, objptr
	mov	objptr, local14
	call	local15
	mov	objptr, local17
	cmp	result1, #0 wz
 if_e	jmp	#LR__0719
	mov	local13, local05
	shl	local13, #2
	add	ptr__dat__, ##142308
	add	local13, ptr__dat__
	wrlong	#0, local13
	shl	local05, #2
	sub	ptr__dat__, #16
	add	local05, ptr__dat__
	wrlong	#0, local05
'                 vfstab[i] = 0;
'                 mounttab[i] = 0;
' #line 209 "C:/flexprop/include/libc/unix/_mount.c"
'                 return _seterror( 12 );
	sub	ptr__dat__, ##142292
	add	ptr___system__dat__, #24
	wrlong	#12, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
	jmp	#LR__0722
LR__0719
LR__0720
	shl	local05, #2
	add	ptr__dat__, ##142292
	add	local05, ptr__dat__
	wrlong	local18, local05
	sub	ptr__dat__, ##142292
LR__0721
'             }
'         }
'         mounttab[i] = name;
' #line 216 "C:/flexprop/include/libc/unix/_mount.c"
'     }
'     return 0;
	mov	result1, #0
LR__0722
	mov	ptra, fp
	call	#popregs_
__mount_ret
	ret

__dofmt
	mov	COUNT_, #10
	call	#pushregs_
	add	ptra, #60
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	mov	local01, #0
	add	fp, #16
	wrlong	#0, fp
	add	fp, #8
	wrlong	#0, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #8
	wrlong	#0, fp
	sub	fp, #48
' #line 150 "C:/flexprop/include/libsys/dofmt.c"
'     for(;;) {
LR__0723
	add	fp, #8
	rdlong	local01, fp
	mov	arg01, local01
	add	arg01, #1
	wrlong	arg01, fp
	rdbyte	local01, local01 wz
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #16
 if_e	jmp	#LR__0746
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #37 wz
 if_e	jmp	#LR__0724
	add	fp, #4
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wc
 if_b	add	fp, #20
 if_b	rdlong	result1, fp
 if_b	sub	fp, #20
 if_b	jmp	#LR__0747
	add	fp, #28
	rdlong	local03, fp
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #28
'             bytes_written++;
'             continue;
	jmp	#LR__0723
LR__0724
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #24
	mov	arg02, fp
	sub	fp, #32
	call	#_parseflags_2111
	add	fp, #8
	wrlong	result1, fp
	add	fp, #24
	rdlong	local01, fp
	shr	local01, #24
	and	local01, #3
	add	fp, #16
	wrlong	local01, fp
	sub	fp, #40
	mov	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	call	#_parseint_2104
	add	fp, #36
	wrlong	result1, fp
	sub	fp, #28
	rdlong	local02, fp
	rdbyte	local01, local02 wz
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #16
 if_e	jmp	#LR__0746
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #46 wz
 if_ne	jmp	#LR__0725
	add	fp, #8
	rdlong	local03, fp
	add	local03, #1
	wrlong	local03, fp
	mov	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #12
	call	#_parseint_2104
	add	result1, #1
	add	fp, #40
	wrlong	result1, fp
	sub	fp, #32
	rdlong	local02, fp
	rdbyte	local01, local02 wz
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #16
 if_e	jmp	#LR__0746
LR__0725
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #36
	mov	arg02, fp
	sub	fp, #44
	call	#_parsesize_2115
	add	fp, #8
	wrlong	result1, fp
	mov	local01, result1
	add	local01, #1
	wrlong	local01, fp
	rdbyte	local01, result1 wz
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #16
 if_e	jmp	#LR__0746
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #37 wz
 if_ne	jmp	#LR__0726
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	sub	fp, #32
	mov	arg03, #37
	call	#__system___fmtchar
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'             q = _fmtchar(fn, flags, '%');
'             continue;
	jmp	#LR__0723
LR__0726
	add	fp, #20
	wrlong	#0, fp
	sub	fp, #8
	rdlong	local04, fp
	rdlong	local03, local04
	rdlong	local01, local03
	mov	local05, local04
	mov	local06, local04
	mov	local07, local06
	rdlong	local03, local07
	add	local03, #4
	wrlong	local03, local05
	add	fp, #40
	wrlong	local01, fp
	sub	fp, #36
	rdlong	local01, fp
	sub	fp, #16
	cmps	local01, #65 wc
 if_b	jmp	#LR__0727
	add	fp, #16
	rdlong	local08, fp
	sub	fp, #16
	mov	local09, local08
	cmps	local09, #91 wc
 if_ae	jmp	#LR__0727
	add	fp, #32
	rdlong	local01, fp
	bith	local01, #29
	wrlong	local01, fp
	sub	fp, #16
	rdlong	local02, fp
	sub	local02, #65
	wrlong	local02, fp
	mov	local01, local02
	add	local01, #97
	wrlong	local01, fp
	sub	fp, #16
LR__0727
	add	fp, #40
	rdlong	local01, fp
	sub	fp, #40
	cmps	local01, #0 wc
 if_b	add	fp, #40
 if_b	wrlong	#0, fp
 if_b	sub	fp, #40
	add	fp, #40
	rdlong	local01, fp
	sub	fp, #40
	cmps	local01, #64 wc
 if_ae	add	fp, #40
 if_ae	wrlong	#63, fp
 if_ae	sub	fp, #40
	add	fp, #36
	rdlong	local01, fp
	sub	fp, #36
	cmps	local01, #0 wc
 if_ae	jmp	#LR__0728
	add	fp, #36
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	bitl	local01, #54
	wrlong	local01, fp
	bith	local01, #22
	wrlong	local01, fp
	add	fp, #16
	wrlong	#1, fp
	sub	fp, #48
LR__0728
	add	fp, #32
	rdlong	local01, fp
	add	fp, #4
	rdlong	local09, fp
	shl	local09, #8
	or	local01, local09
	sub	fp, #4
	wrlong	local01, fp
	add	fp, #8
	rdlong	local09, fp
	shl	local09, #16
	or	local01, local09
	sub	fp, #8
	wrlong	local01, fp
'             width = -width;
'             flags &= ~( 0x3 << (22) );
'             flags |= ( 1 << (22) );
'             padchar =  1 ;
'         }
'         flags = flags | (width <<  (8) );
'         flags = flags | (prec <<  (16) );
'         switch (c) {
	sub	fp, #16
	rdlong	local10, fp
	sub	fp, #16
	cmp	local10, #99 wz
 if_e	jmp	#LR__0729
	cmp	local10, #115 wz
 if_e	jmp	#LR__0730
	cmp	local10, #100 wz
 if_e	jmp	#LR__0732
	cmp	local10, #105 wz
 if_e	jmp	#LR__0733
	cmp	local10, #117 wz
 if_e	jmp	#LR__0734
	cmp	local10, #111 wz
 if_e	jmp	#LR__0736
	cmp	local10, #120 wz
 if_e	jmp	#LR__0738
	cmp	local10, #97 wz
 if_e	jmp	#LR__0740
	cmp	local10, #101 wz
 if_e	jmp	#LR__0741
	cmp	local10, #102 wz
 if_e	jmp	#LR__0742
	cmp	local10, #103 wz
 if_e	jmp	#LR__0743
	jmp	#LR__0744
LR__0729
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #52
	call	#__system___fmtchar
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'             q = _fmtchar(fn, flags, val);
'             break;
	jmp	#LR__0745
LR__0730
	add	fp, #40
	rdlong	local01, fp wz
	sub	fp, #40
 if_e	jmp	#LR__0731
	add	fp, #32
	rdlong	local01, fp
	add	fp, #8
	rdlong	local09, fp
	sub	local09, #1
	or	local01, local09
	sub	fp, #8
	wrlong	local01, fp
	sub	fp, #32
LR__0731
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #52
	call	#__system___fmtstr
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'             break;
	jmp	#LR__0745
LR__0732
LR__0733
LR__0734
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #117 wz
 if_e	add	fp, #32
 if_e	rdlong	local01, fp
 if_e	bith	local01, #58
 if_e	wrlong	local01, fp
 if_e	sub	fp, #32
	add	fp, #40
	rdlong	local01, fp wz
	sub	fp, #40
 if_ne	jmp	#LR__0735
	add	fp, #48
	rdlong	local09, fp
	sub	fp, #48
	cmp	local09, #2 wz
 if_ne	jmp	#LR__0735
	add	fp, #32
	rdlong	local02, fp
	mov	local01, local02
	add	fp, #4
	rdlong	local08, fp
	mov	local09, local08
	add	local09, #1
	shl	local09, #16
	or	local01, local09
	sub	fp, #4
	wrlong	local01, fp
	sub	fp, #32
LR__0735
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #52
	mov	arg04, #10
	call	#__system___fmtnum
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'                 flags |= ((width+1)<< (16) );
'             }
'             q = _fmtnum(fn, flags, val, 10);
'             break;
	jmp	#LR__0745
LR__0736
	add	fp, #32
	rdlong	local01, fp
	bith	local01, #58
	wrlong	local01, fp
	add	fp, #8
	rdlong	local01, fp wz
	sub	fp, #40
 if_ne	jmp	#LR__0737
	add	fp, #48
	rdlong	local09, fp
	sub	fp, #48
	cmp	local09, #2 wz
 if_ne	jmp	#LR__0737
	add	fp, #32
	rdlong	local02, fp
	mov	local01, local02
	add	fp, #4
	rdlong	local08, fp
	mov	local09, local08
	add	local09, #1
	shl	local09, #16
	or	local01, local09
	sub	fp, #4
	wrlong	local01, fp
	sub	fp, #32
LR__0737
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #52
	mov	arg04, #8
	call	#__system___fmtnum
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'                 flags |= ((width+1)<< (16) );
'             }
'             q = _fmtnum(fn, flags, val, 8);
'             break;
	jmp	#LR__0745
LR__0738
	add	fp, #40
	rdlong	local01, fp wz
	sub	fp, #40
 if_ne	jmp	#LR__0739
	add	fp, #48
	rdlong	local09, fp
	sub	fp, #48
	cmp	local09, #2 wz
 if_ne	jmp	#LR__0739
	add	fp, #32
	rdlong	local02, fp
	mov	local01, local02
	add	fp, #4
	rdlong	local08, fp
	mov	local09, local08
	add	local09, #1
	shl	local09, #16
	or	local01, local09
	sub	fp, #4
	wrlong	local01, fp
	sub	fp, #32
LR__0739
	add	fp, #32
	rdlong	arg02, fp
	bith	arg02, #58
	wrlong	arg02, fp
	sub	fp, #28
	rdlong	arg01, fp
	add	fp, #48
	rdlong	arg03, fp
	sub	fp, #52
	mov	arg04, #16
	call	#__system___fmtnum
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'                 flags |= ((width+1)<< (16) );
'             }
'             flags |=  3  <<  (26) ;
'             q = _fmtnum(fn, flags, val, 16);
'             break;
	jmp	#LR__0745
LR__0740
LR__0741
LR__0742
LR__0743
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
'     v.i = x;
'     return v.f;
	sub	fp, #36
	rdlong	local05, fp
	sub	fp, #16
	mov	arg04, local05
	call	#__system___fmtfloat
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
'             q = _fmtfloat(fn, flags, _asfloat(val), c);
'             break;
	jmp	#LR__0745
LR__0744
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #28
	rdlong	local02, fp
	sub	fp, #32
	mov	local08, ##@LR__2250
	mov	local09, local08
	mov	arg02, local02
	mov	arg03, local09
	call	#__system___fmtstr
	mov	local01, result1
	add	fp, #20
	wrlong	local01, fp
	sub	fp, #20
'             q = _fmtstr(fn, flags, "???");
'             break;
LR__0745
	add	fp, #20
	rdlong	local01, fp
	sub	fp, #20
	cmps	local01, #0 wc
'             return q;
 if_b	add	fp, #20
 if_b	rdlong	result1, fp
 if_b	sub	fp, #20
 if_b	jmp	#LR__0747
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #8
	rdlong	local08, fp
	add	local01, local08
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #28
	jmp	#LR__0723
LR__0746
'         }
'         bytes_written += q;
'     }
'     return bytes_written;
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #28
LR__0747
	mov	ptra, fp
	call	#popregs_
__dofmt_ret
	ret

__remove
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
'     return tmpname;
	add	ptr__dat__, ##142580
	mov	local01, ptr__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr__dat__, ##142580
	call	#___getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #32
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #32
 if_ne	cmps	arg01, #0 wz
' #line 20 "C:/flexprop/include/libsys/remove.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__0750
	add	local02, #64
	rdlong	arg01, local02
	sub	local02, #64
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmp	local06, ##-14 wz
 if_ne	jmp	#LR__0748
	add	local02, #60
	rdlong	local06, local02
	rdlong	local03, local06
	add	local06, #4
	rdlong	local04, local06
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
LR__0748
	cmp	local06, #0 wz
 if_e	jmp	#LR__0749
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0750
LR__0749
'     }
'     return 0;
	mov	result1, #0
LR__0750
	mov	ptra, fp
	call	#popregs_
__remove_ret
	ret

_read_register_1529
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #12
	rdbyte	arg01, local01
	sub	local01, #12
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #13
	rdbyte	arg01, local01
	sub	local01, #13
	call	#_jm_i2c_spin2_write
	mov	arg01, #1
	mov	objptr, local01
	call	#_jm_i2c_spin2_read
	mov	arg02, result1
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local02
' {
'     uint8_t rdata = 0xFF;
' 
'     mcp23017->i2cBus.start();
'     mcp23017->i2cBus.write(mcp23017->writeAddr);
'     mcp23017->i2cBus.write(addr);
'     mcp23017->i2cBus.start();
'     mcp23017->i2cBus.write(mcp23017->readAddr);
'     rdata = mcp23017->i2cBus.read(1);
'     mcp23017->i2cBus.stop();
'     return rdata;
	mov	result1, arg02
	mov	ptra, fp
	call	#popregs_
_read_register_1529_ret
	ret

_write_register_1531
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #12
	rdbyte	arg01, local01
	sub	local01, #12
	call	#_jm_i2c_spin2_write
	mov	local03, result1
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg03, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local02
' 
'     mcp23017->i2cBus.start();
'     ack = mcp23017->i2cBus.write(mcp23017->writeAddr);
'     mcp23017->i2cBus.write(addr);
'     mcp23017->i2cBus.write(value);
'     mcp23017->i2cBus.stop();
'     return ack == 0;
	cmp	local03, #0 wz
	wrz	result1
	mov	ptra, fp
	call	#popregs_
_write_register_1531_ret
	ret

_isOneOfThem
' {
'     while (*set != '\0')
LR__0751
	rdbyte	_var01, arg02 wz
 if_e	jmp	#LR__0752
	getbyte	_var01, arg01, #0
	mov	_var02, arg02
	rdbyte	_var03, _var02
	cmp	_var01, _var03 wz
'             return  (1) ;
	add	arg02, #1
 if_e	mov	result1, #1
 if_e	jmp	#_isOneOfThem_ret
	jmp	#LR__0751
LR__0752
'     }
'     return  (0) ;
	mov	result1, #0
_isOneOfThem_ret
	ret

_goWhile
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' {
'     for (; *str != '\0'; ++str)
LR__0753
	rdbyte	arg02, local01 wz
 if_e	jmp	#LR__0754
	rdbyte	arg01, local01
	mov	arg02, local02
	call	#_isOneOfThem
	cmp	result1, #0 wz
'             return str;
 if_e	mov	result1, local01
 if_e	jmp	#LR__0755
	add	local01, #1
	jmp	#LR__0753
LR__0754
'     }
'     return 0;
	mov	result1, #0
LR__0755
	mov	ptra, fp
	call	#popregs_
_goWhile_ret
	ret

_goNum
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
' {
'     for (; *str != '\0'; ++str)
LR__0756
	rdbyte	arg01, local01 wz
 if_e	jmp	#LR__0757
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #2 wz
'             return str;
 if_e	mov	result1, local01
 if_e	jmp	#LR__0758
	add	local01, #1
	jmp	#LR__0756
LR__0757
'     }
'     return 0;
	mov	result1, #0
LR__0758
	mov	ptra, fp
	call	#popregs_
_goNum_ret
	ret

_setToNull
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	rdbyte	arg01, local01
	mov	arg02, ##@LR__2252
	call	#_isOneOfThem
	cmp	result1, #0 wz
 if_e	mov	result1, local01
 if_e	add	local01, #1
 if_e	wrbyte	#0, result1
'         *ch++ = '\0';
'     return ch;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_setToNull_ret
	ret

_isEndOfPrimitive
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
' {
'     return ch == ',' || isOneOfThem(ch, " \n\r\t\f") || isOneOfThem(ch, "}]");
	mov	local02, #0
	getbyte	local03, local01, #0
	cmp	local03, #44 wz
 if_e	jmp	#LR__0759
	mov	arg02, ##@LR__2253
	mov	arg01, local01
	call	#_isOneOfThem
	mov	local04, result1 wz
 if_ne	jmp	#LR__0759
	mov	local05, ##@LR__2254
	mov	local06, local05
	mov	arg01, local01
	mov	arg02, local06
	call	#_isOneOfThem
	mov	local07, result1 wz
 if_e	jmp	#LR__0760
LR__0759
	xor	local02, #1
LR__0760
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_isEndOfPrimitive_ret
	ret

_getEscape
'     for (i = 0; i < sizeof pair / sizeof *pair; ++i)
	mov	_var01, #0
LR__0761
	cmp	_var01, #8 wc
 if_ae	jmp	#LR__0763
	mov	result1, _var01
	shl	result1, #2
	add	ptr__dat__, ##142948
	add	result1, ptr__dat__
	rdbyte	result1, result1
	getbyte	_var02, arg01, #0
	cmp	result1, _var02 wz
	sub	ptr__dat__, ##142948
 if_ne	jmp	#LR__0762
'             return pair[i].code;
	mov	result1, _var01
	shl	result1, #2
	add	ptr__dat__, ##142948
	add	result1, ptr__dat__
	add	result1, #1
	rdbyte	result1, result1
	sub	ptr__dat__, ##142948
	jmp	#_getEscape_ret
LR__0762
	add	_var01, #1
	jmp	#LR__0761
LR__0763
'     return '\0';
	mov	result1, #0
_getEscape_ret
	ret

_getCharFromUnicode
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
'     for (i = 0; i < 4; ++i)
	mov	local02, #0
LR__0764
	cmp	local02, #4 wc
 if_ae	jmp	#LR__0765
	mov	arg01, local02
	add	arg01, local01
	rdbyte	arg01, arg01
' {
'   return  (__ctype_get(c) & 0x40 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #64 wz
'             return '\0';
 if_e	mov	result1, #0
 if_e	jmp	#LR__0766
	add	local02, #1
	jmp	#LR__0764
LR__0765
'     return '?';
	mov	result1, #63
LR__0766
	mov	ptra, fp
	call	#popregs_
_getCharFromUnicode_ret
	ret

_parseString
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, local01
'     for (; *head; ++head, ++tail)
LR__0767
	rdbyte	local03, local02 wz
 if_e	jmp	#LR__0771
	rdbyte	local04, local02
	cmp	local04, #34 wz
 if_e	wrbyte	#0, local01
'         {
'             *tail = '\0';
'             return (char *)++head;
 if_e	add	local02, #1
 if_e	mov	result1, local02
 if_e	jmp	#LR__0772
	rdbyte	local04, local02
	cmp	local04, #92 wz
 if_ne	jmp	#LR__0769
	add	local02, #1
	rdbyte	local04, local02
	cmp	local04, #117 wz
 if_ne	jmp	#LR__0768
	add	local02, #1
	mov	arg01, local02
	call	#_getCharFromUnicode
	mov	local05, result1
	mov	local04, local05
	zerox	local04, #7 wz
'                     return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0772
	wrbyte	local05, local01
	add	local02, #3
	jmp	#LR__0770
LR__0768
	rdbyte	arg01, local02
	call	#_getEscape
	mov	local06, result1
	mov	local04, local06
	zerox	local04, #7 wz
'                     return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0772
	wrbyte	local06, local01
	jmp	#LR__0770
LR__0769
	rdbyte	local04, local02
	wrbyte	local04, local01
LR__0770
	add	local02, #1
	add	local01, #1
	jmp	#LR__0767
LR__0771
'             *tail = *head;
'     }
'     return 0;
	mov	result1, #0
LR__0772
	mov	ptra, fp
	call	#popregs_
_parseString_ret
	ret

_propertyName
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	add	arg01, #1
	add	local01, #4
	wrlong	arg01, local01
	call	#_parseString
	mov	local01, result1 wz
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0773
	mov	arg01, local01
' {
'     return goWhile(str, " \n\r\t\f");
	mov	arg02, ##@LR__2251
	call	#_goWhile
	mov	local02, result1 wz
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0773
	rdbyte	local03, local02
	cmp	local03, #58 wz
'         return 0;
	add	local02, #1
 if_ne	mov	result1, #0
'     return goBlank(ptr);
 if_e	mov	arg01, local02
' {
'     return goWhile(str, " \n\r\t\f");
 if_e	mov	arg02, ##@LR__2251
 if_e	call	#_goWhile
LR__0773
	mov	ptra, fp
	call	#popregs_
_propertyName_ret
	ret

_textValue
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	add	local01, #8
	rdlong	local02, local01
	add	local02, #1
	wrlong	local02, local01
	sub	local01, #8
	add	arg01, #1
	call	#_parseString
	mov	local02, result1 wz
'         return 0;
 if_e	mov	result1, #0
 if_ne	add	local01, #16
 if_ne	wrlong	#2, local01
'     property->type = JSON_TEXT;
'     return ptr;
 if_ne	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_textValue_ret
	ret

_checkStr
' {
'     while (*str)
LR__0774
	rdbyte	_var01, arg02 wz
 if_e	jmp	#LR__0775
	mov	_var02, arg01
	rdbyte	_var01, _var02
	mov	_var03, arg02
	rdbyte	_var04, _var03
	cmp	_var01, _var04 wz
'             return 0;
	add	arg01, #1
	add	arg02, #1
 if_ne	mov	result1, #0
 if_ne	jmp	#_checkStr_ret
	jmp	#LR__0774
LR__0775
'     return ptr;
	mov	result1, arg01
_checkStr_ret
	ret

_primitiveValue
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg04
	mov	arg02, arg03
	call	#_checkStr
	mov	local03, result1 wz
 if_e	jmp	#LR__0776
	rdbyte	arg01, local03
	call	#_isEndOfPrimitive
	cmps	result1, #0 wz
 if_ne	jmp	#LR__0777
LR__0776
'         return 0;
	mov	result1, #0
	jmp	#LR__0778
LR__0777
	mov	arg01, local03
	call	#_setToNull
	add	local01, #16
	wrlong	local02, local01
'     ptr = setToNull(ptr);
'     property->type = type;
'     return ptr;
LR__0778
	mov	ptra, fp
	call	#popregs_
_primitiveValue_ret
	ret

_expValue
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	rdbyte	arg01, local01
	cmp	arg01, #45 wz
 if_ne	rdbyte	arg01, local01
 if_ne	cmp	arg01, #43 wz
 if_e	add	local01, #1
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #2 wz
'         return 0;
 if_e	mov	result1, #0
 if_ne	add	local01, #1
 if_ne	mov	arg01, local01
 if_ne	call	#_goNum
'     ptr = goNum(++ptr);
'     return ptr;
	mov	ptra, fp
	call	#popregs_
_expValue_ret
	ret

_fraqValue
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #2 wz
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0779
	add	local01, #1
	mov	arg01, local01
	call	#_goNum
	mov	local01, result1 wz
'         return 0;
 if_e	mov	result1, #0
'     return ptr;
 if_ne	mov	result1, local01
LR__0779
	mov	ptra, fp
	call	#popregs_
_fraqValue_ret
	ret

_numValue
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdbyte	arg01, local01
	cmp	arg01, #45 wz
 if_e	add	local01, #1
	rdbyte	local03, local01
	mov	arg01, local03
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #2 wz
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0786
	rdbyte	arg01, local01
	cmp	arg01, #48 wz
 if_e	jmp	#LR__0780
	mov	arg01, local01
	call	#_goNum
	mov	local01, result1 wz
'             return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0786
	jmp	#LR__0781
LR__0780
	add	local01, #1
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__dat__, ##175280
	add	arg01, ptr__dat__
	rdbyte	result1, arg01
	sub	ptr__dat__, ##175280
	and	result1, #2 wz
'         return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0786
LR__0781
	add	local02, #16
	wrlong	#4, local02
	sub	local02, #16
	rdbyte	arg01, local01
	cmp	arg01, #46 wz
 if_ne	jmp	#LR__0782
	add	local01, #1
	mov	arg01, local01
	call	#_fraqValue
	mov	local01, result1 wz
'             return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0786
	add	local02, #16
	wrlong	#5, local02
	sub	local02, #16
LR__0782
	rdbyte	arg01, local01
	cmp	arg01, #101 wz
 if_ne	rdbyte	local03, local01
 if_ne	cmp	local03, #69 wz
 if_ne	jmp	#LR__0783
	add	local01, #1
	mov	arg01, local01
	call	#_expValue
	mov	local01, result1 wz
'             return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0786
	add	local02, #16
	wrlong	#5, local02
	sub	local02, #16
LR__0783
	rdbyte	arg01, local01
	call	#_isEndOfPrimitive
	cmp	result1, #0 wz
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0786
	add	local02, #16
	rdlong	local03, local02
	sub	local02, #16
	cmp	local03, #4 wz
 if_ne	jmp	#LR__0785
	add	local02, #8
	rdlong	arg01, local02
	mov	local04, #0
	rdbyte	local05, arg01
	cmp	local05, #45 wz
 if_e	mov	local04, #1
	mov	local06, local04 wz
 if_ne	mov	local05, #21
 if_e	mov	local05, #20
	sub	local05, #1
	mov	local03, local01
	sub	local03, arg01
	cmp	local03, local05 wcz
'             return 0;
 if_a	mov	result1, #0
 if_a	jmp	#LR__0786
	cmp	local03, local05 wz
 if_ne	jmp	#LR__0784
	rdbyte	local05, local01
	wrbyte	#0, local01
	cmp	local06, #0 wz
 if_ne	add	ptr__dat__, ##142980
 if_ne	mov	local04, ptr__dat__
 if_ne	sub	ptr__dat__, ##142980
 if_e	add	ptr__dat__, ##143001
 if_e	mov	local04, ptr__dat__
 if_e	sub	ptr__dat__, ##143001
	mov	arg02, arg01
	mov	arg01, local04
	call	#_strcmp
	cmps	result1, #0 wc
'                 return 0;
 if_b	mov	result1, #0
 if_b	jmp	#LR__0786
	wrbyte	local05, local01
LR__0784
LR__0785
	mov	arg01, local01
	call	#_setToNull
'             *ptr = tmp;
'         }
'     }
'     ptr = setToNull(ptr);
'     return ptr;
LR__0786
	mov	ptra, fp
	call	#popregs_
_numValue_ret
	ret

_add
	wrlong	#0, arg02
	add	arg01, #8
	rdlong	_var01, arg01 wz
	sub	arg01, #8
 if_e	add	arg01, #8
 if_e	wrlong	arg02, arg01
 if_e	add	arg01, #4
 if_e	wrlong	arg02, arg01
 if_ne	add	arg01, #12
 if_ne	rdlong	_var01, arg01
 if_ne	wrlong	arg02, _var01
 if_ne	wrlong	arg02, arg01
_add_ret
	ret

_objValue
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdbyte	local04, local01
	cmp	local04, #123 wz
 if_e	mov	local05, #0
 if_ne	mov	local05, #1
	add	local02, #16
	wrlong	local05, local02
	mov	local05, #0
	sub	local02, #8
	wrlong	#0, local02
	sub	local02, #8
	wrlong	#0, local02
	add	local01, #1
' {
' 
' 
'     obj->type = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
'     obj->u.c.child = 0;
'     obj->sibling = 0;
'     ptr++;
'     for (;;)
LR__0787
	mov	arg01, local01
' {
'     return goWhile(str, " \n\r\t\f");
	mov	arg02, ##@LR__2251
	call	#_goWhile
	mov	local01, result1 wz
 if_ne	jmp	#LR__0788
	mov	arg01, ##@LR__2258
	call	#_printf
'         {
'             printf("Error: Unexpected goblank error.\n");
'             return 0;
	mov	result1, #0
	jmp	#LR__0802
LR__0788
	rdbyte	local05, local01
	cmp	local05, #44 wz
 if_e	add	local01, #1
'         {
'             ++ptr;
'             continue;
 if_e	jmp	#LR__0787
	add	local02, #16
	rdlong	local04, local02 wz
	sub	local02, #16
 if_e	mov	local05, #125
 if_ne	mov	local05, #93
	mov	local06, local05
	rdbyte	local05, local01
	getbyte	local04, local06, #0
	cmp	local05, local04 wz
 if_ne	jmp	#LR__0789
	wrbyte	#0, local01
	rdlong	local07, local02 wz
'                 return ++ptr;
 if_e	add	local01, #1
 if_e	mov	result1, local01
 if_e	jmp	#LR__0802
	wrlong	#0, local02
	mov	local02, local07
	add	local01, #1
'             obj->sibling = 0;
'             obj = parentObj;
'             ++ptr;
'             continue;
	jmp	#LR__0787
LR__0789
	add	local03, #4
	rdlong	local08, local03
	sub	local03, #4
	mov	local05, local08
	rdlong	local04, local05
	add	local05, #4
	rdlong	local09, local05
	mov	local10, local09
	mov	local11, local03
	mov	arg01, local11
	mov	local12, objptr
	mov	objptr, local04
	call	local10
	mov	objptr, local12
	mov	local13, result1 wz
 if_ne	jmp	#LR__0790
	mov	arg01, ##@LR__2259
	call	#_printf
'         {
'             printf("Error: Unexpected allocation error.\n");
'             return 0;
	mov	result1, #0
	jmp	#LR__0802
LR__0790
	add	local02, #16
	rdlong	local05, local02
	sub	local02, #16
	cmp	local05, #1 wz
 if_e	jmp	#LR__0792
	rdbyte	local05, local01
	cmp	local05, #34 wz
 if_e	jmp	#LR__0791
	mov	arg01, ##@LR__2260
	call	#_printf
'             {
'                 printf("Error: Unexpected quote missing.\n");
'                 return 0;
	mov	result1, #0
	jmp	#LR__0802
LR__0791
	mov	arg01, local01
	mov	arg02, local13
	call	#_propertyName
	mov	local01, result1 wz
 if_ne	jmp	#LR__0793
	mov	arg01, ##@LR__2261
	call	#_printf
'             {
'                 printf("Error: property name does not exist.\n");
'                 return 0;
	mov	result1, #0
	jmp	#LR__0802
LR__0792
	add	local13, #4
	wrlong	#0, local13
	sub	local13, #4
LR__0793
	mov	arg01, local02
	mov	arg02, local13
	call	#_add
	add	local13, #8
	wrlong	local01, local13
	sub	local13, #8
'             property->name = 0;
'         add(obj, property);
'         property->u.value = ptr;
'         switch (*ptr)
	rdbyte	local14, local01
	getbyte	local05, local14, #0
	cmp	local05, #123 wz
 if_e	jmp	#LR__0794
	getbyte	local05, local14, #0
	cmp	local05, #91 wz
 if_e	jmp	#LR__0795
	getbyte	local05, local14, #0
	cmp	local05, #34 wz
 if_e	jmp	#LR__0796
	getbyte	local05, local14, #0
	cmp	local05, #116 wz
 if_e	jmp	#LR__0797
	getbyte	local05, local14, #0
	cmp	local05, #102 wz
 if_e	jmp	#LR__0798
	getbyte	local05, local14, #0
	cmp	local05, #110 wz
 if_e	jmp	#LR__0799
	jmp	#LR__0800
LR__0794
	add	local13, #16
	wrlong	#0, local13
	sub	local13, #8
	wrlong	#0, local13
	sub	local13, #8
	wrlong	local02, local13
	mov	local02, local13
	add	local01, #1
'             property->type = JSON_OBJ;
'             property->u.c.child = 0;
'             property->sibling = obj;
'             obj = property;
'             ++ptr;
'             break;
	jmp	#LR__0801
LR__0795
	add	local13, #16
	wrlong	#1, local13
	sub	local13, #8
	wrlong	#0, local13
	sub	local13, #8
	wrlong	local02, local13
	mov	local02, local13
	add	local01, #1
'             property->type = JSON_ARRAY;
'             property->u.c.child = 0;
'             property->sibling = obj;
'             obj = property;
'             ++ptr;
'             break;
	jmp	#LR__0801
LR__0796
	mov	arg01, local01
	mov	arg02, local13
	call	#_textValue
	mov	local01, result1
'             ptr = textValue(ptr, property);
'             break;
	jmp	#LR__0801
LR__0797
	mov	arg01, local01
	mov	arg02, local13
' {
'     return primitiveValue(ptr, property, "true", JSON_BOOLEAN);
	mov	arg03, ##@LR__2255
	mov	arg04, #3
	call	#_primitiveValue
	mov	local01, result1
'             ptr = trueValue(ptr, property);
'             break;
	jmp	#LR__0801
LR__0798
	mov	arg01, local01
	mov	arg02, local13
' {
'     return primitiveValue(ptr, property, "false", JSON_BOOLEAN);
	mov	arg03, ##@LR__2256
	mov	arg04, #3
	call	#_primitiveValue
	mov	local01, result1
'             ptr = falseValue(ptr, property);
'             break;
	jmp	#LR__0801
LR__0799
	mov	arg01, local01
	mov	arg02, local13
' {
'     return primitiveValue(ptr, property, "null", JSON_NULL);
	mov	arg03, ##@LR__2257
	mov	arg04, #6
	call	#_primitiveValue
	mov	local01, result1
'             ptr = nullValue(ptr, property);
'             break;
	jmp	#LR__0801
LR__0800
	mov	local04, local13
	mov	arg01, local01
	mov	arg02, local04
	call	#_numValue
	mov	local05, result1
	mov	local01, local05
'             ptr = numValue(ptr, property);
'             break;
LR__0801
	cmp	local01, #0 wz
 if_ne	jmp	#LR__0787
	mov	arg01, ##@LR__2262
	call	#_printf
'         {
'             printf("Error: unable to parse value.\n");
'             return 0;
	mov	result1, #0
LR__0802
	mov	ptra, fp
	call	#popregs_
_objValue_ret
	ret

_poolInit
	sub	arg01, #4
	wrlong	#1, arg01
	sub	arg01, #8
'     spool->nextFree = 1;
'     return spool->mem;
	rdlong	result1, arg01
_poolInit_ret
	ret

_poolAlloc
	sub	arg01, #4
	rdlong	_var01, arg01
	sub	arg01, #4
	rdlong	_var02, arg01
	sub	arg01, #4
	cmp	_var01, _var02 wc
'         return 0;
 if_ae	mov	result1, #0
 if_ae	jmp	#_poolAlloc_ret
'     return spool->mem + spool->nextFree++;
	add	arg01, #8
	rdlong	_var02, arg01
	mov	_var01, _var02
	add	_var01, #1
	wrlong	_var01, arg01
	sub	arg01, #8
	mov	_var01, _var02
	shl	_var01, #2
	add	_var01, _var02
	shl	_var01, #2
	rdlong	result1, arg01
	add	result1, _var01
_poolAlloc_ret
	ret

_write_register_1604
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	local01, #12
	mov	arg01, #85
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	getbyte	arg02, arg02, #0
	shl	arg02, #1
	mov	arg01, #64
	add	arg01, arg02
	call	#_jm_fullduplexserial_spin2_tx
	getbyte	arg01, arg03, #0
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local02
	mov	ptra, fp
	call	#popregs_
_write_register_1604_ret
	ret

_read_register_1606
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	add	local01, #12
	mov	arg01, #85
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_tx
	mov	objptr, local01
	getbyte	local03, arg02, #0
	shl	local03, #1
	mov	arg01, #32
	add	arg01, local03
	call	#_jm_fullduplexserial_spin2_tx
	mov	arg01, #100
	mov	objptr, local01
	call	#_jm_fullduplexserial_spin2_rxtime
	mov	objptr, local02
' {
'     uint8_t temp;
' 
' 
' 
' 
'     forceGauge->serial.tx(0x55);
'     forceGauge->serial.tx(0x20 + (reg << 1));
'     temp = forceGauge->serial.rxtime(100);
'     return temp;
	mov	ptra, fp
	call	#popregs_
_read_register_1606_ret
	ret

_module_animation_touch_1620
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local02, #232
	rdlong	local03, local02
	add	local02, #64
	rdlong	arg07, local02
	sub	local03, arg07
	sub	local03, #2
	sub	local02, #60
	rdlong	local04, local02
	sub	local04, arg07
	sub	local04, #2
	mov	arg06, arg07
	shl	arg06, #1
	add	local02, #4
	rdlong	local05, local02
	add	local05, arg06
	add	local05, #4
	shl	arg07, #1
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #244
	add	local06, arg07
	add	local06, #4
	mov	arg01, local01
	mov	arg04, local03
	mov	arg05, local04
	mov	arg08, local03
	mov	arg09, local04
	mov	arg10, local05
	mov	arg11, local06
	add	arg11, #5
	mov	arg02, #0
	decod	arg03, #10
	mov	arg06, ##3686400
	decod	arg07, #10
	call	#_display_bte_memory_copy
'     for (i = 1; i < moveY; i++)
	mov	local07, #1
LR__0803
	cmps	local07, #5 wc
 if_ae	jmp	#LR__0804
	mov	arg09, local04
	add	arg09, local07
	mov	arg10, local05
	mov	arg11, local06
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, local03
	mov	arg05, local04
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, local03
	call	#_display_bte_memory_copy
	mov	arg03, local04
	add	arg03, local07
	mov	arg04, local03
	add	arg04, local05
	mov	arg05, local04
	add	arg05, local07
	rdlong	arg06, local02
	add	arg06, #272
	rdlong	arg06, arg06
	mov	arg01, local01
	mov	arg02, local03
	call	#_display_draw_line
	mov	muldiva_, #50
	mov	muldivb_, #5
	call	#divide_
	mov	arg01, muldivb_
	call	#__system___waitms
	add	local07, #1
	jmp	#LR__0803
LR__0804
'     {
'         display_bte_memory_copy(display,  1024 * 600 * 2 * 3 ,  1024 , x, y,  0 ,  1024 , x, y + i, w, h);
'         display_draw_line(display, x, y + i, x + w, y + i, module->parent->foregroundColor);
'         _waitms(speedms / moveY);
'     }
' 
' 
'     for (; i > 0; i--)
LR__0805
	cmps	local07, #1 wc
 if_b	jmp	#LR__0806
	mov	arg09, local04
	add	arg09, local07
	mov	arg10, local05
	mov	arg11, local06
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, local03
	mov	arg05, local04
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, local03
	call	#_display_bte_memory_copy
	mov	arg03, local04
	add	arg03, local07
	mov	arg04, local03
	add	arg04, local05
	mov	arg05, local04
	add	arg05, local07
	rdlong	arg06, local02
	add	arg06, #272
	rdlong	arg06, arg06
	mov	arg01, local01
	mov	arg02, local03
	call	#_display_draw_line
	mov	muldiva_, #50
	mov	muldivb_, #5
	call	#divide_
	mov	arg01, muldivb_
	call	#__system___waitms
	sub	local07, #1
	jmp	#LR__0805
LR__0806
	add	local06, #5
	mov	arg01, local01
	mov	arg02, ##3686400
	decod	arg03, #10
	mov	arg04, local03
	mov	arg05, local04
	mov	arg06, #0
	decod	arg07, #10
	mov	arg08, local03
	mov	arg09, local04
	mov	arg10, local05
	mov	arg11, local06
	call	#_display_bte_memory_copy
	mov	ptra, fp
	call	#popregs_
_module_animation_touch_1620_ret
	ret

_get_radius_1634
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	add	local01, #264
	rdlong	arg01, local01
	sub	local01, #264
	cmp	arg01, ##-1 wz
 if_ne	jmp	#LR__0807
'         return  __builtin_round(module->w * 0.07) ;
	add	local01, #240
	rdlong	arg01, local01
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1032805417
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #1
	call	#__system___float_tointeger
	jmp	#LR__0808
LR__0807
'         return module->r;
	add	local01, #264
	rdlong	result1, local01
LR__0808
	mov	ptra, fp
	call	#popregs_
_get_radius_1634_ret
	ret

_draw_border_rectangle_rounded_1636
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	add	local02, #296
	rdlong	arg07, local02 wz
	sub	local02, #296
'         return  (0) ;
 if_e	mov	result1, #0
 if_e	jmp	#LR__0809
	add	local02, #296
	rdlong	arg07, local02
	sub	local02, #64
	rdlong	arg02, local02
	sub	arg02, arg07
	add	local02, #4
	rdlong	arg03, local02
	sub	arg03, arg07
	sub	local02, #4
	rdlong	arg04, local02
	add	local02, #8
	rdlong	arg06, local02
	add	arg04, arg06
	add	arg04, arg07
	sub	local02, #4
	rdlong	arg05, local02
	add	local02, #8
	rdlong	arg06, local02
	add	arg05, arg06
	add	arg05, arg07
	add	local02, #32
	rdlong	arg08, local02
	mov	arg01, local01
	mov	arg06, local04
	mov	arg07, local04
	call	#_display_draw_circle_square_fill
	mov	arg01, local01
	sub	local02, #44
	rdlong	arg02, local02
	add	local02, #4
	rdlong	arg03, local02
	mov	arg04, arg02
	add	local02, #4
	rdlong	local01, local02
	add	arg04, local01
	mov	arg05, arg03
	add	local02, #4
	rdlong	local02, local02
	add	arg05, local02
	mov	arg06, local04
	mov	arg07, local04
	mov	arg08, local03
	call	#_display_draw_circle_square_fill
'     display_draw_circle_square_fill(display, module->x - width, module->y - width, module->x + module->w + width, module->y + module->h + width, radius, radius, module->borderColor);
'     display_draw_circle_square_fill(display, module->x, module->y, module->x + module->w, module->y + module->h, radius, radius, innerColor);
'     return  (1) ;
	mov	result1, #1
LR__0809
	mov	ptra, fp
	call	#popregs_
_draw_border_rectangle_rounded_1636_ret
	ret

_key_pressed_1685
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	add	local02, #8
	mov	arg02, local02
	sub	local02, #8
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
'     switch (id)
	mov	local03, local01
	cmp	local03, #31 wz
 if_e	jmp	#LR__0810
	cmp	local03, #42 wz
 if_e	jmp	#LR__0811
	cmp	local03, #44 wz
 if_e	jmp	#LR__0812
	cmp	local03, #43 wz
 if_e	jmp	#LR__0815
	cmp	local03, #45 wz
 if_e	jmp	#LR__0815
	cmp	local03, #46 wz
 if_e	jmp	#LR__0813
	jmp	#LR__0814
LR__0810
	add	local02, #8
	mov	arg01, local02
	sub	local02, #8
	call	#_strlen
	cmp	result1, #1 wc
'             break;
 if_b	jmp	#LR__0815
	add	local02, #8
	mov	arg01, local02
	call	#_strlen
	sub	result1, #1
	add	result1, local02
	wrbyte	#0, result1
'         keyboard->keyboard_buffer[strlen(keyboard->keyboard_buffer) - 1] = '\0';
'         break;
	jmp	#LR__0815
LR__0811
	add	local02, #8
	mov	arg01, local02
	mov	arg02, ##@LR__2263
	call	#_strcpy
	add	local02, #82
	wrbyte	#1, local02
'     {
'         strcpy(keyboard->keyboard_buffer, "");
'         keyboard->keyboard_complete =  (1) ;
'         break;
	jmp	#LR__0815
LR__0812
	add	local02, #8
	mov	arg02, ##@LR__2264
	mov	arg01, local02
	call	#_strcat
'         break;
	jmp	#LR__0815
'         break;
LR__0813
	add	local02, #90
	wrbyte	#1, local02
'         keyboard->keyboard_complete =  (1) ;
'         break;
	jmp	#LR__0815
LR__0814
	add	local02, #8
	mov	arg01, local02
	mov	arg02, local01
	shl	arg02, #2
	add	ptr__dat__, ##174796
	add	arg02, ptr__dat__
	rdlong	arg02, arg02
	sub	ptr__dat__, ##174796
	call	#_strcat
'         strcat(keyboard->keyboard_buffer, key_name[id]);
'         break;
LR__0815
	mov	ptra, fp
	call	#popregs_
_key_pressed_1685_ret
	ret

_createKey_1688
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	local06, local02
	shl	local06, #2
	add	local06, local02
	shl	local06, #6
	add	local01, ##1692
	add	local06, local01
	sub	local01, ##1280
	mov	arg02, local01
	sub	local01, #412
	mov	arg01, local06
	call	#_module_init
	mov	arg01, ##1113063424
	mov	arg02, local05
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	arg01, local06
	add	arg01, #204
	wrlong	#5, arg01
	add	arg01, #36
	wrlong	result1, arg01
	add	arg01, #4
	wrlong	#54, arg01
	mov	arg01, local06
	add	arg01, #272
	wrlong	#31, arg01
	sub	arg01, #4
	wrlong	#31, arg01
	mov	arg01, local06
	mov	arg03, #14
	add	arg01, #256
	wrlong	#14, arg01
	add	arg01, #4
	wrlong	#14, arg01
	mov	arg01, objptr
	mov	arg02, ptr__key_pressed_1685_
	call	#__system___make_methodptr
	mov	arg02, result1
	mov	arg03, local02
	mov	arg01, local06
	add	arg01, #308
	wrlong	arg02, arg01
	sub	arg01, #16
	wrlong	arg03, arg01
	cmp	local03, #0 wz
 if_ne	jmp	#LR__0816
	mov	arg01, local06
	call	#_module_align_inner_left
	jmp	#LR__0817
LR__0816
	mov	arg01, local06
	mov	arg02, local03
	call	#_module_align_right
LR__0817
	cmp	local04, #0 wz
 if_ne	jmp	#LR__0818
	mov	arg01, local06
	call	#_module_align_inner_top
	jmp	#LR__0819
LR__0818
	mov	arg01, local06
	mov	arg02, local04
	call	#_module_align_below
LR__0819
	mov	local05, local02
	shl	local05, #2
	add	local05, local02
	shl	local05, #6
	add	local01, ##16732
	add	local05, local01
	mov	arg01, local05
	mov	arg02, local06
	call	#_module_init
	shl	local02, #2
	add	ptr__dat__, ##174796
	add	local02, ptr__dat__
	rdlong	arg02, local02
	mov	arg01, local05
	sub	ptr__dat__, ##174796
	call	#_module_set_text
	mov	arg01, local05
	mov	arg02, #2
	call	#_module_text_font
	mov	arg01, local05
	call	#_module_text_fit
	rdlong	local04, local05
	add	local04, #272
	rdlong	arg03, local04
	mov	arg01, local05
	add	arg01, #272
	wrlong	##65535, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	mov	arg01, local05
	mov	arg02, #1
	mov	arg03, #2
	call	#_module_align_center_sector
	mov	arg01, local05
	call	#_module_align_middle
'     {
'         module_align_below(key, above);
'     }
' 
'     Module *text = &(keyboard->keyText[name]);
'     module_init(text, key);
'     module_set_text(text, key_name[name]);
'     module_text_font(text,  2 );
'     module_text_fit(text);
'     module_set_color(text,  0xffff , text->parent->foregroundColor);
'     module_align_center(text);
'     module_align_middle(text);
'     return key;
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
_createKey_1688_ret
	ret

_readNavKeyInt_1798
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	local01, #116
	wrlong	#0, local01
	sub	local01, #116
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #108
	rdbyte	arg01, local01
	sub	local01, #108
	and	arg01, #254
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #108
	rdbyte	arg01, local01
	sub	local01, #108
	or	arg01, #1
	call	#_jm_i2c_spin2_write
	mov	arg01, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_read
	add	local01, #117
	wrbyte	result1, local01
	sub	local01, #117
	mov	arg01, #1
	mov	objptr, local01
	call	#_jm_i2c_spin2_read
	add	local01, #116
	wrbyte	result1, local01
	sub	local01, #116
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local02
' {
' #line 156 "C:/Users/riley.m/Tensile-Testing-Machine/Firmware/MaD_Firmware/Librarys/NavKey/i2cNavKey.c"
'   navkey->_tem_data.val = 0;
'   navkey->i2cBus.start();
'   navkey->i2cBus.write(navkey->_add & 0b11111110);
'   navkey->i2cBus.write(reg);
'   navkey->i2cBus.start();
'   navkey->i2cBus.write(navkey->_add | 0b00000001);
'   navkey->_tem_data.bval[1] = navkey->i2cBus.read(0);
'   navkey->_tem_data.bval[0] = navkey->i2cBus.read(1);
'   navkey->i2cBus.stop();
' 
'   return ((int16_t)(navkey->_tem_data.val));
	add	local01, #116
	rdlong	result1, local01
	mov	ptra, fp
	call	#popregs_
_readNavKeyInt_1798_ret
	ret

_writeNavKey8_1801
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #108
	rdbyte	arg01, local01
	sub	local01, #108
	and	arg01, #254
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg03, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, local02
	mov	ptra, fp
	call	#popregs_
_writeNavKey8_1801_ret
	ret

_writeNavKey32_1802
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	add	local01, #116
	wrlong	arg03, local01
	sub	local01, #116
	mov	arg03, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #108
	rdbyte	arg01, local01
	sub	local01, #108
	and	arg01, #254
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #119
	rdbyte	arg01, local01
	sub	local01, #119
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #118
	rdbyte	arg01, local01
	sub	local01, #118
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #117
	rdbyte	arg01, local01
	sub	local01, #117
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #116
	rdbyte	arg01, local01
	sub	local01, #116
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, arg03
	mov	ptra, fp
	call	#popregs_
_writeNavKey32_1802_ret
	ret

_writeNavKeyFloat_1804
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	add	local01, #116
	wrlong	arg03, local01
	sub	local01, #116
	mov	arg03, objptr
	mov	objptr, local01
	call	#_jm_i2c_spin2_start
	mov	objptr, local01
	add	local01, #108
	rdbyte	arg01, local01
	sub	local01, #108
	and	arg01, #254
	call	#_jm_i2c_spin2_write
	getbyte	arg01, arg02, #0
	mov	objptr, local01
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #119
	rdbyte	arg01, local01
	sub	local01, #119
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #118
	rdbyte	arg01, local01
	sub	local01, #118
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #117
	rdbyte	arg01, local01
	sub	local01, #117
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	add	local01, #116
	rdbyte	arg01, local01
	sub	local01, #116
	call	#_jm_i2c_spin2_write
	mov	objptr, local01
	call	#_jm_i2c_spin2_stop
	mov	objptr, arg03
	mov	ptra, fp
	call	#popregs_
_writeNavKeyFloat_1804_ret
	ret

_button_callback_1829
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local02
' {
'     MotionStateWindow *window = (MotionStateWindow *)arg;
'     switch (id)
	mov	local04, local01
	fle	local04, #3
	jmprel	local04
LR__0820
	jmp	#LR__0821
	jmp	#LR__0824
	jmp	#LR__0825
	jmp	#LR__0829
LR__0821
'         switch (window->state->motionParameters.status)
	rdlong	local05, local03
	add	local05, #24
	rdlong	local06, local05 wz
 if_e	jmp	#LR__0822
	cmp	local06, #1 wz
 if_e	jmp	#LR__0823
	jmp	#LR__0829
LR__0822
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2265
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	rdlong	arg01, local03
	mov	arg02, #8
	mov	arg03, #1
	call	#_state_machine_set
'             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_ENABLED);
'             break;
	jmp	#LR__0829
LR__0823
	mov	arg01, #0
	call	#__system___getiolock_1205
	mov	arg01, result1
	call	#__system___lockmem
	mov	arg02, ##@LR__2266
	mov	arg01, #0
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	call	#__system___getiolock_1205
	wrlong	#0, result1
	rdlong	arg01, local03
	mov	arg02, #8
	mov	arg03, #0
	call	#_state_machine_set
'             state_machine_set(window->state, PARAM_MOTION_STATUS, STATUS_DISABLED);
'             break;
'         }
'         break;
	jmp	#LR__0829
LR__0824
LR__0825
'     {
'         switch (window->state->motionParameters.mode)
	rdlong	local05, local03
	add	local05, #32
	rdlong	local07, local05 wz
 if_e	jmp	#LR__0826
	cmp	local07, #1 wz
 if_e	jmp	#LR__0827
	jmp	#LR__0828
LR__0826
	rdlong	arg01, local03
	mov	arg02, #10
	mov	arg03, #1
	call	#_state_machine_set
'             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_TEST);
'             break;
	jmp	#LR__0828
LR__0827
	rdlong	local05, local03
	mov	local08, #10
	mov	local09, #0
	mov	arg01, local05
	mov	arg02, #10
	mov	arg03, #0
	call	#_state_machine_set
'             state_machine_set(window->state, PARAM_MOTION_MODE, MODE_MANUAL);
'             break;
LR__0828
LR__0829
	mov	ptra, fp
	call	#popregs_
_button_callback_1829_ret
	ret

_update_status_1835
	mov	COUNT_, #16
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local03
	mov	local05, #0
	mov	local06, #0
	mov	local07, #0
	mov	local08, #0
'     switch (window->state->motionParameters.status)
	rdlong	local09, local04
	add	local09, #24
	rdlong	local10, local09
	mov	local11, local10
	fle	local11, #5
	jmprel	local11
LR__0830
	jmp	#LR__0831
	jmp	#LR__0832
	jmp	#LR__0833
	jmp	#LR__0834
	jmp	#LR__0835
	jmp	#LR__0836
LR__0831
	add	ptr__dat__, ##175100
	rdlong	local09, local04
	mov	local08, ptr__dat__
	rdlong	local12, local09
	cmp	local12, #2 wz
	sub	ptr__dat__, ##175100
 if_e	mov	local05, ##2016
 if_e	mov	local06, #0
 if_e	bmask	local07, #15
 if_e	jmp	#LR__0837
	mov	local05, ##41285
	mov	local06, #0
	mov	local07, ##65504
'         {
'             statusOutlineColor =  0xA145 ;
'             statusInnerColor =  0x0000 ;
'             statusTextColor =  0xffe0 ;
'         }
'         break;
	jmp	#LR__0837
LR__0832
	add	ptr__dat__, ##175108
	mov	local08, ptr__dat__
	mov	local05, ##2016
	bmask	local06, #15
	mov	local07, #0
'     {
'         newString = enabledStr;
'         statusOutlineColor =  0x07e0 ;
'         statusInnerColor =  0xffff ;
'         statusTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175108
	jmp	#LR__0837
LR__0833
	add	ptr__dat__, ##175116
	mov	local08, ptr__dat__
	mov	local05, #31
	mov	local06, ##65504
	mov	local07, #0
'     {
' 
'         newString = smplimStr;
'         statusOutlineColor =  0x001f ;
'         statusInnerColor =  0xffe0 ;
'         statusTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175116
	jmp	#LR__0837
LR__0834
	add	ptr__dat__, ##175124
	mov	local08, ptr__dat__
	mov	local05, #31
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = mchlimStr;
'         statusOutlineColor =  0x001f ;
'         statusInnerColor =  0xffe0 ;
'         statusTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175124
	jmp	#LR__0837
LR__0835
	add	ptr__dat__, ##175132
	mov	local08, ptr__dat__
	mov	local05, #31
	mov	local06, ##63488
	bmask	local07, #15
'     {
'         newString = faultedStr;
'         statusOutlineColor =  0x001f ;
'         statusInnerColor =  0xf800 ;
'         statusTextColor =  0xffff ;
'         break;
	sub	ptr__dat__, ##175132
	jmp	#LR__0837
LR__0836
'         break;
LR__0837
	add	local02, #272
	rdlong	local09, local02
	sub	local02, #272
	cmp	local09, local05 wz
 if_ne	jmp	#LR__0838
	add	local02, #4
	rdlong	local13, local02
	sub	local02, #4
	add	local13, #268
	rdlong	local14, local13
	cmp	local14, local06 wz
 if_ne	jmp	#LR__0838
	add	local02, #4
	rdlong	local15, local02
	sub	local02, #4
	add	local15, #272
	rdlong	local16, local15
	cmp	local16, local07 wz
'         module->child[0]->backgroundColor == statusInnerColor &&
'         module->child[0]->foregroundColor == statusTextColor)
'     {
'         return;
 if_e	jmp	#LR__0839
LR__0838
	add	local02, #276
	wrlong	local05, local02
	sub	local02, #276
	mov	arg01, local02
	add	arg01, #272
	wrlong	local06, arg01
	sub	arg01, #4
	wrlong	local06, arg01
	add	local02, #4
	rdlong	arg01, local02
	mov	arg03, local06
	add	arg01, #272
	wrlong	local07, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	rdlong	arg01, local02
	sub	local02, #4
	add	arg01, #208
	wrlong	local08, arg01
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0839
	mov	ptra, fp
	call	#popregs_
_update_status_1835_ret
	ret

_update_condition_1841
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local03
	mov	local05, #0
	mov	local06, #0
	mov	local07, #0
	mov	local08, #0
' 
'     switch (window->state->motionParameters.condition)
	rdlong	local09, local04
	add	local09, #28
	rdlong	local10, local09
	mov	local11, local10
	fle	local11, #9
	jmprel	local11
LR__0840
	jmp	#LR__0841
	jmp	#LR__0842
	jmp	#LR__0843
	jmp	#LR__0844
	jmp	#LR__0845
	jmp	#LR__0846
	jmp	#LR__0847
	jmp	#LR__0848
	jmp	#LR__0849
	jmp	#LR__0850
LR__0841
	add	ptr__dat__, ##175140
	mov	local08, ptr__dat__
	mov	local05, ##63519
	mov	local06, ##63519
	mov	local07, #0
'     {
'         newString = lengthStr;
'         conditionOutlineColor =  0xf81f ;
'         conditionInnerColor =  0xf81f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175140
	jmp	#LR__0851
LR__0842
	add	ptr__dat__, ##175147
	mov	local08, ptr__dat__
	mov	local05, ##63519
	mov	local06, ##63519
	mov	local07, #0
'     {
'         newString = forceStr;
'         conditionOutlineColor =  0xf81f ;
'         conditionInnerColor =  0xf81f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175147
	jmp	#LR__0851
LR__0843
	add	ptr__dat__, ##175153
	mov	local08, ptr__dat__
	mov	local05, ##65504
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = tensionStr;
'         conditionOutlineColor =  0xffe0 ;
'         conditionInnerColor =  0xffe0 ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175153
	jmp	#LR__0851
LR__0844
	add	ptr__dat__, ##175161
	mov	local08, ptr__dat__
	mov	local05, ##65504
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = compresStr;
'         conditionOutlineColor =  0xffe0 ;
'         conditionInnerColor =  0xffe0 ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175161
	jmp	#LR__0851
LR__0845
	add	ptr__dat__, ##175169
	mov	local08, ptr__dat__
	mov	local05, ##65504
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = upperStr;
'         conditionOutlineColor =  0xffe0 ;
'         conditionInnerColor =  0xffe0 ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175169
	jmp	#LR__0851
LR__0846
	add	ptr__dat__, ##175175
	mov	local08, ptr__dat__
	mov	local05, ##65504
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = lowerStr;
'         conditionOutlineColor =  0xffe0 ;
'         conditionInnerColor =  0xffe0 ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175175
	jmp	#LR__0851
LR__0847
	add	ptr__dat__, ##175181
	mov	local08, ptr__dat__
	mov	local05, ##65504
	mov	local06, ##65504
	mov	local07, #0
'     {
'         newString = doorStr;
'         conditionOutlineColor =  0xffe0 ;
'         conditionInnerColor =  0xffe0 ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175181
	jmp	#LR__0851
LR__0848
	add	ptr__dat__, ##175186
	mov	local08, ptr__dat__
	mov	local05, ##63488
	mov	local06, ##63488
	bmask	local07, #15
'     {
'         newString = stoppedStr;
'         conditionOutlineColor =  0xf800 ;
'         conditionInnerColor =  0xf800 ;
'         conditionTextColor =  0xffff ;
'         break;
	sub	ptr__dat__, ##175186
	jmp	#LR__0851
LR__0849
	add	ptr__dat__, ##175194
	mov	local08, ptr__dat__
	mov	local05, ##64543
	mov	local06, ##64543
	mov	local07, #0
'     {
'         newString = movingStr;
'         conditionOutlineColor =  0xfc1f ;
'         conditionInnerColor =  0xfc1f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175194
	jmp	#LR__0851
LR__0850
'         break;
LR__0851
	add	local02, #272
	rdlong	local09, local02
	sub	local02, #272
	cmp	local09, local05 wz
 if_ne	jmp	#LR__0852
	add	local02, #4
	rdlong	local12, local02
	sub	local02, #4
	add	local12, #268
	rdlong	local13, local12
	cmp	local13, local06 wz
 if_ne	jmp	#LR__0852
	add	local02, #4
	rdlong	local14, local02
	sub	local02, #4
	add	local14, #272
	rdlong	local15, local14
	cmp	local15, local07 wz
'         module->child[0]->backgroundColor == conditionInnerColor &&
'         module->child[0]->foregroundColor == conditionTextColor)
'     {
'         return;
 if_e	jmp	#LR__0853
LR__0852
	mov	arg01, local02
	add	arg01, #272
	wrlong	local05, arg01
	sub	arg01, #4
	wrlong	local05, arg01
	add	local02, #4
	rdlong	arg01, local02
	mov	arg03, local06
	add	arg01, #272
	wrlong	local07, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	rdlong	arg01, local02
	sub	local02, #4
	add	arg01, #208
	wrlong	local08, arg01
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0853
	mov	ptra, fp
	call	#popregs_
_update_condition_1841_ret
	ret

_update_mode_1847
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local03
	mov	local05, #0
	mov	local06, #0
	mov	local07, #0
	mov	local08, #0
' 
'     switch (window->state->motionParameters.mode)
	rdlong	local09, local04
	add	local09, #32
	rdlong	local10, local09
	mov	local11, local10
	fle	local11, #3
	jmprel	local11
LR__0854
	jmp	#LR__0855
	jmp	#LR__0856
	jmp	#LR__0857
	jmp	#LR__0858
LR__0855
	add	ptr__dat__, ##175201
	mov	local08, ptr__dat__
	mov	local05, ##63519
	mov	local06, ##63519
	mov	local07, #0
'     {
'         newString = manualStr;
'         conditionOutlineColor =  0xf81f ;
'         conditionInnerColor =  0xf81f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175201
	jmp	#LR__0859
LR__0856
	add	ptr__dat__, ##175208
	mov	local08, ptr__dat__
	mov	local05, ##63519
	mov	local06, ##63519
	mov	local07, #0
'     {
'         newString = testStr;
'         conditionOutlineColor =  0xf81f ;
'         conditionInnerColor =  0xf81f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175208
	jmp	#LR__0859
LR__0857
	add	ptr__dat__, ##175213
	mov	local08, ptr__dat__
	mov	local05, ##63519
	mov	local06, ##63519
	mov	local07, #0
'     {
'         newString = runStr;
'         conditionOutlineColor =  0xf81f ;
'         conditionInnerColor =  0xf81f ;
'         conditionTextColor =  0x0000 ;
'         break;
	sub	ptr__dat__, ##175213
	jmp	#LR__0859
LR__0858
'         break;
LR__0859
	add	local02, #272
	rdlong	local09, local02
	sub	local02, #272
	cmp	local09, local05 wz
 if_ne	jmp	#LR__0860
	add	local02, #4
	rdlong	local12, local02
	sub	local02, #4
	add	local12, #268
	rdlong	local13, local12
	cmp	local13, local06 wz
 if_ne	jmp	#LR__0860
	add	local02, #4
	rdlong	local14, local02
	sub	local02, #4
	add	local14, #272
	rdlong	local15, local14
	cmp	local15, local07 wz
 if_ne	jmp	#LR__0860
	add	local02, #4
	rdlong	arg01, local02
	sub	local02, #4
	call	#_module_text_get
	mov	arg02, result1
	mov	arg01, local08
	call	#_strcmp
	cmp	result1, #0 wz
'         module->child[0]->backgroundColor == conditionInnerColor &&
'         module->child[0]->foregroundColor == conditionTextColor &&
'         strcmp(newString, module_text_get(module->child[0])) == 0)
'     {
'         return;
 if_e	jmp	#LR__0861
LR__0860
	mov	arg01, local02
	add	arg01, #272
	wrlong	local05, arg01
	sub	arg01, #4
	wrlong	local05, arg01
	add	local02, #4
	rdlong	arg01, local02
	mov	arg03, local06
	add	arg01, #272
	wrlong	local07, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	rdlong	arg01, local02
	sub	local02, #4
	add	arg01, #208
	wrlong	local08, arg01
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0861
	mov	ptra, fp
	call	#popregs_
_update_mode_1847_ret
	ret

_button_set_function_1901
	rdlong	arg02, arg02
	mov	arg03, arg01
	mov	arg01, arg02
	mov	arg02, #11
	call	#_state_machine_set
_button_set_function_1901_ret
	ret

_update_header_1905
	mov	COUNT_, #9
	call	#pushregs_
	add	ptra, #56
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	mov	arg01, fp
	mov	arg02, arg03
	sub	fp, #16
	add	arg02, #4
	call	#__system____builtin_strcpy
'     __builtin_strcpy(lastHeader, window->functionHeaderBuffer) ;
' 
'     switch (window->state->function)
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	mov	local02, local01
	rdlong	local03, local02
	add	local03, #36
	rdlong	local04, local03
	sub	local03, #36
	mov	local05, local04
	fle	local05, #7
	jmprel	local05
LR__0862
	jmp	#LR__0863
	jmp	#LR__0864
	jmp	#LR__0865
	jmp	#LR__0866
	jmp	#LR__0867
	jmp	#LR__0872
	jmp	#LR__0873
	jmp	#LR__0874
LR__0863
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2267
	call	#_sprintf
'         sprintf(window->functionHeaderBuffer, "OFF");
'         break;
	jmp	#LR__0875
LR__0864
	add	fp, #12
	rdlong	local05, fp
	add	local05, #4
	mov	local04, ##@LR__2268
	rdlong	local03, fp
	sub	fp, #12
	rdlong	local03, local03
	add	local03, #40
	rdlong	arg01, local03
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, ##1148846080
	call	#__system___float_div
	mov	local03, result1
	mov	arg01, local05
	mov	arg02, local04
	mov	arg03, ptra
	wrlong	local03, ptra++
	call	#_sprintf
	sub	ptra, #4
'         break;
	jmp	#LR__0875
LR__0865
	add	fp, #12
	rdlong	arg01, fp
	rdlong	local05, arg01
	add	local05, #40
	rdlong	local05, local05
	abs	local05, local05 wc
	qdiv	local05, ##1000
	add	arg01, #4
	mov	arg02, ##@LR__2269
	sub	fp, #12
	getqx	local05
	negc	local05, local05
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
'         sprintf(window->functionHeaderBuffer, "CONT JOG: %dmm", window->state->functionData / 1000);
'         break;
	jmp	#LR__0875
LR__0866
	add	fp, #12
	rdlong	arg01, fp
	rdlong	local05, arg01
	add	local05, #40
	rdlong	local05, local05
	abs	local05, local05 wc
	qdiv	local05, ##1000
	add	arg01, #4
	mov	arg02, ##@LR__2270
	sub	fp, #12
	getqx	local05
	negc	local05, local05
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
'         sprintf(window->functionHeaderBuffer, "POSN MOVE: %dmm", window->state->functionData / 1000);
'         break;
	jmp	#LR__0875
LR__0867
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg02, arg02
	add	arg02, #40
	rdlong	arg02, arg02 wz
 if_ne	jmp	#LR__0868
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2271
	call	#_sprintf
	jmp	#LR__0875
LR__0868
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg02, arg02
	add	arg02, #40
	rdlong	local05, arg02
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0869
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2272
	call	#_sprintf
	jmp	#LR__0875
LR__0869
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg02, arg02
	add	arg02, #40
	rdlong	local05, arg02
	cmp	local05, #4 wz
 if_ne	jmp	#LR__0870
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2273
	call	#_sprintf
	jmp	#LR__0875
LR__0870
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg02, arg02
	add	arg02, #40
	rdlong	local05, arg02
	cmp	local05, #3 wz
 if_ne	jmp	#LR__0871
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2274
	call	#_sprintf
	jmp	#LR__0875
LR__0871
	add	fp, #12
	rdlong	local05, fp
	sub	fp, #12
	rdlong	local05, local05
	add	local05, #40
	rdlong	local05, local05
	cmp	local05, #1 wz
 if_ne	jmp	#LR__0875
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	add	arg01, #4
	mov	arg02, ##@LR__2275
	call	#_sprintf
'             sprintf(window->functionHeaderBuffer, "HOMING COMPLETE");
'         break;
	jmp	#LR__0875
LR__0872
	add	fp, #12
	rdlong	arg01, fp
	rdlong	local05, arg01
	add	local05, #40
	rdlong	local05, local05
	abs	local05, local05 wc
	qdiv	local05, ##1000
	add	arg01, #4
	mov	arg02, ##@LR__2276
	sub	fp, #12
	getqx	local05
	negc	local05, local05
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
'         sprintf(window->functionHeaderBuffer, "GAUGE LENGTH: %dmm", window->state->functionData / 1000);
'         break;
	jmp	#LR__0875
LR__0873
	add	fp, #12
	rdlong	arg01, fp
	add	arg01, #4
	mov	arg02, ##@LR__2277
	rdlong	local05, fp
	sub	fp, #12
	rdlong	arg03, local05
	add	arg03, #40
	rdlong	local05, arg03
	mov	arg03, ptra
	wrlong	local05, ptra++
	call	#_sprintf
	sub	ptra, #4
'         sprintf(window->functionHeaderBuffer, "GAUGE FORCE: %dmN", window->state->functionData);
'         break;
	jmp	#LR__0875
LR__0874
	add	fp, #12
	rdlong	local06, fp
	sub	fp, #12
	add	local06, #4
	mov	local07, local06
	mov	local08, ##@LR__2278
	mov	local09, local08
	mov	arg01, local07
	mov	arg02, local09
	call	#_sprintf
'         sprintf(window->functionHeaderBuffer, "OFF");
'         break;
LR__0875
	add	fp, #48
	wrbyte	#0, fp
	sub	fp, #36
	rdlong	arg01, fp
	add	arg01, #4
	add	fp, #4
	mov	arg02, fp
	sub	fp, #16
	call	#_strcmp
	cmp	result1, #0 wz
 if_ne	rdlong	arg01, fp
 if_ne	add	fp, #4
 if_ne	rdlong	arg02, fp
 if_ne	sub	fp, #4
 if_ne	call	#_module_draw
	mov	ptra, fp
	call	#popregs_
_update_header_1905_ret
	ret

_update_off_1910
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0876
	rdlong	local06, local03
	add	local06, #24
	rdlong	local07, local06 wz
 if_e	jmp	#LR__0876
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04 wz
 if_e	mov	local08, #31
 if_e	mov	local09, #0
 if_e	bmask	local10, #15
 if_e	jmp	#LR__0877
	mov	local08, ##2016
	mov	local09, #0
	bmask	local10, #15
	jmp	#LR__0877
LR__0876
	mov	local08, ##64448
	mov	local09, #0
	bmask	local10, #15
LR__0877
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local08 wz
 if_ne	jmp	#LR__0878
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local11, local06
	cmp	local11, local09 wz
 if_ne	jmp	#LR__0878
	add	local02, #4
	rdlong	local12, local02
	sub	local02, #4
	add	local12, #272
	rdlong	local13, local12
	cmp	local13, local10 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0879
LR__0878
	mov	arg01, local02
	mov	arg03, local09
	add	arg01, #272
	wrlong	local10, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local08, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0879
	mov	ptra, fp
	call	#popregs_
_update_off_1910_ret
	ret

_update_incremental_1915
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0880
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #8 wz
 if_e	jmp	#LR__0880
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08 wz
 if_e	jmp	#LR__0880
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #1 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0881
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0881
LR__0880
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0881
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0882
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0882
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0883
LR__0882
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0883
	mov	ptra, fp
	call	#popregs_
_update_incremental_1915_ret
	ret

_update_continuous_1920
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0884
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #8 wz
 if_e	jmp	#LR__0884
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08 wz
 if_e	jmp	#LR__0884
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0885
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0885
LR__0884
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0885
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0886
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0886
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0887
LR__0886
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0887
	mov	ptra, fp
	call	#popregs_
_update_continuous_1920_ret
	ret

_update_positional_1925
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0888
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #7 wz
 if_ne	jmp	#LR__0888
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08
	cmp	local09, #1 wz
 if_ne	jmp	#LR__0888
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #3 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0889
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0889
LR__0888
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0889
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0890
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0890
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0891
LR__0890
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0891
	mov	ptra, fp
	call	#popregs_
_update_positional_1925_ret
	ret

_update_home_1930
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0892
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #7 wz
 if_ne	jmp	#LR__0892
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08
	cmp	local09, #1 wz
 if_ne	jmp	#LR__0892
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #4 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0893
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0893
LR__0892
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0893
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0894
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0894
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0895
LR__0894
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0895
	mov	ptra, fp
	call	#popregs_
_update_home_1930_ret
	ret

_update_length_1935
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0896
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #7 wz
 if_ne	jmp	#LR__0896
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08
	cmp	local09, #1 wz
 if_ne	jmp	#LR__0896
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #5 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0897
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0897
LR__0896
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0897
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0898
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0898
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0899
LR__0898
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0899
	mov	ptra, fp
	call	#popregs_
_update_length_1935_ret
	ret

_update_force_1940
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local03
	rdlong	local05, local04
	cmp	local05, #2 wz
 if_ne	jmp	#LR__0900
	rdlong	local06, local03
	add	local06, #28
	rdlong	local07, local06
	cmp	local07, #7 wz
 if_ne	jmp	#LR__0900
	rdlong	local08, local03
	add	local08, #24
	rdlong	local09, local08
	cmp	local09, #1 wz
 if_ne	jmp	#LR__0900
	rdlong	local04, local03
	add	local04, #36
	rdlong	local05, local04
	cmp	local05, #6 wz
 if_e	mov	local10, #31
 if_e	mov	local11, #0
 if_e	bmask	local12, #15
 if_e	jmp	#LR__0901
	mov	local10, ##2016
	mov	local11, #0
	bmask	local12, #15
	jmp	#LR__0901
LR__0900
	mov	local10, ##64448
	mov	local11, #0
	bmask	local12, #15
LR__0901
	add	local02, #272
	rdlong	local04, local02
	sub	local02, #272
	cmp	local04, local10 wz
 if_ne	jmp	#LR__0902
	add	local02, #4
	rdlong	local06, local02
	sub	local02, #4
	add	local06, #268
	rdlong	local13, local06
	cmp	local13, local11 wz
 if_ne	jmp	#LR__0902
	add	local02, #4
	rdlong	local09, local02
	sub	local02, #4
	add	local09, #272
	rdlong	local14, local09
	cmp	local14, local12 wz
'         module->child[0]->backgroundColor == innerColor &&
'         module->child[0]->foregroundColor == textColor)
'     {
'         return;
 if_e	jmp	#LR__0903
LR__0902
	mov	arg01, local02
	mov	arg03, local11
	add	arg01, #272
	wrlong	local12, arg01
	sub	arg01, #4
	wrlong	arg03, arg01
	add	local02, #276
	wrlong	local10, local02
	sub	local02, #276
	mov	arg01, local01
	mov	arg02, local02
	call	#_module_draw
LR__0903
	mov	ptra, fp
	call	#popregs_
_update_force_1940_ret
	ret

_module_graph_draw_1966
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local02, #208
	rdlong	local03, local02
	sub	local02, #208
	add	local03, #8
	rdlong	arg01, local03
	add	local03, #4
	rdlong	arg02, local03
	bitnot	arg02, #31
	call	#__system___float_add
	mov	local04, result1
	add	local03, ##1288
	rdlong	arg04, local03
	add	arg04, #4
	add	local03, #4
	rdlong	arg05, local03
	sub	local03, #4
	rdlong	arg08, local03
	add	arg08, #2
	mov	arg09, arg05
	add	local03, #8
	rdlong	arg10, local03
	sub	arg10, #2
	add	local03, #4
	rdlong	arg11, local03
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #10
	mov	arg06, #0
	decod	arg07, #10
	call	#_display_bte_memory_copy
	sub	local03, #12
	rdlong	arg02, local03
	add	local03, #8
	rdlong	arg06, local03
	add	arg02, arg06
	sub	local03, #4
	rdlong	arg03, local03
	sub	local03, #4
	rdlong	arg04, local03
	add	arg04, arg06
	add	arg04, #2
	mov	arg05, arg03
	add	local03, #12
	rdlong	arg06, local03
	add	arg05, arg06
	rdlong	local02, local02
	add	local02, #272
	rdlong	arg06, local02
	mov	arg01, local01
	call	#_display_draw_square_fill
	rdlong	local02, local03
	abs	arg01, local02 wc
	shr	arg01, #1
	negc	arg01, arg01
	sub	local03, #8
	rdlong	local05, local03
	sub	local03, ##1304
	add	local05, arg01
	rdlong	local06, local03
	abs	local02, local02 wc
	shr	local02, #1
	negc	arg01, local02
	call	#__system___float_fromint
	mov	local02, result1
	mov	arg01, local04
	decod	arg02, #30
	call	#__system___float_div
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_div
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	sub	local05, result1
	add	local03, ##1312
	rdlong	local02, local03
	abs	local06, local02 wc
	shr	local06, #1
	negc	local06, local06
	sub	local03, #8
	rdlong	local07, local03
	add	local07, local06
	sub	local03, ##1300
	rdlong	local06, local03
	abs	local02, local02 wc
	shr	local02, #1
	negc	arg01, local02
	call	#__system___float_fromint
	mov	local02, result1
	mov	arg01, local04
	decod	arg02, #30
	call	#__system___float_div
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_div
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	sub	local07, result1
	add	local03, ##1296
	rdlong	arg04, local03
	mov	arg02, arg04
	add	local03, #8
	rdlong	local06, local03
	add	arg02, local06
	add	arg04, local06
	add	arg04, #2
	mov	arg01, local01
	mov	arg03, local07
	mov	arg05, local05
	mov	arg06, ##63488
	call	#_display_draw_line
	mov	ptra, fp
	call	#popregs_
_module_graph_draw_1966_ret
	ret

_check_buttons_1974
	add	arg02, ##4368
	wrlong	arg01, arg02
_check_buttons_1974_ret
	ret

_parseint_2104
	mov	_var01, arg01
	mov	_var02, arg02
	rdlong	_var03, _var01
	mov	_var04, #0
	rdbyte	_var05, _var03
	cmp	_var05, #42 wz
 if_ne	jmp	#LR__0904
	rdlong	_var05, _var02
	rdlong	_var04, _var05
	add	_var05, #4
	wrlong	_var05, _var02
	add	_var03, #1
	jmp	#LR__0907
LR__0904
'         while ( (c>='0') && (c<='9') ) {
LR__0905
	cmps	_var05, #48 wc
 if_b	jmp	#LR__0906
	cmps	_var05, #58 wc
 if_ae	jmp	#LR__0906
	mov	_var06, _var04
	shl	_var06, #2
	add	_var06, _var04
	shl	_var06, #1
	sub	_var05, #48
	add	_var06, _var05
	mov	_var04, _var06
	add	_var03, #1
	rdbyte	_var05, _var03
	jmp	#LR__0905
LR__0906
LR__0907
	wrlong	_var03, _var01
'             r = 10*r + (c-'0');
'             c = *++fmt;
'         }
'     }
'     *fmt_p = fmt;
'     return r;
	mov	result1, _var04
_parseint_2104_ret
	ret

_parseflags_2111
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, #0
	mov	_var04, #1
	mov	_var05, #0
	mov	_var06, #2
	mov	_var07, #0
' 
'     while (!done) {
LR__0908
	cmp	_var07, #0 wz
 if_ne	jmp	#LR__0915
	rdbyte	_var08, _var01
'         c = *fmt++;
'         switch (c) {
	cmp	_var08, #45 wz
	add	_var01, #1
 if_e	jmp	#LR__0909
	cmp	_var08, #35 wz
 if_e	jmp	#LR__0910
	cmp	_var08, #43 wz
 if_e	jmp	#LR__0911
	cmp	_var08, #48 wz
 if_e	jmp	#LR__0912
	cmp	_var08, #32 wz
 if_e	jmp	#LR__0913
	jmp	#LR__0914
LR__0909
	mov	_var06, #1
'             justify =  1 ;
'             break;
	jmp	#LR__0908
LR__0910
	or	_var03, #28
'             flags |=  (28) ;
'             break;
	jmp	#LR__0908
LR__0911
	mov	_var05, #1
'             signchar =  1 ;
'             break;
	jmp	#LR__0908
LR__0912
	mov	_var04, #2
'             padchar =  2 ;
'             break;
	jmp	#LR__0908
LR__0913
	mov	_var04, #1
'             padchar =  1 ;
'             break;
	jmp	#LR__0908
LR__0914
	mov	_var07, #1
'             done = 1;
'             break;
	jmp	#LR__0908
LR__0915
	shl	_var04, #24
	or	_var03, _var04
	shl	_var05, #26
	or	_var03, _var05
	shl	_var06, #22
	or	_var03, _var06
	wrlong	_var03, _var02
'         }
'     }
'     flags |= (padchar <<  (24) );
'     flags |= (signchar <<  (26) );
'     flags |= (justify <<  (22) );
'     *flag_p = flags;
'     return fmt-1;
	sub	_var01, #1
	mov	result1, _var01
_parseflags_2111_ret
	ret

_parsesize_2115
	mov	_var01, arg02
	mov	_var02, #4
	mov	_var03, #0
	mov	_var04, arg01
	mov	_var05, arg01
	add	_var05, #1
	mov	_var06, _var05
	rdbyte	_var07, _var04
'     c = *fmt++;
' 
'     switch (c) {
	mov	_var08, _var07
	cmp	_var08, #108 wz
 if_e	jmp	#LR__0916
	cmp	_var08, #104 wz
 if_e	jmp	#LR__0917
	cmp	_var08, #106 wz
 if_e	jmp	#LR__0918
	cmp	_var08, #122 wz
 if_e	jmp	#LR__0919
	cmp	_var08, #116 wz
 if_e	jmp	#LR__0920
	cmp	_var08, #76 wz
 if_e	jmp	#LR__0921
	jmp	#LR__0922
LR__0916
	mov	_var02, #4
	rdbyte	_var08, _var06
	cmp	_var08, #108 wz
 if_e	mov	_var02, #8
 if_e	add	_var06, #1
'             fmt++;
'         }
'         break;
	jmp	#LR__0923
LR__0917
	mov	_var02, #2
	rdbyte	_var08, _var06
	cmp	_var08, #104 wz
 if_e	mov	_var02, #1
 if_e	add	_var06, #1
'             fmt++;
'         }
'         break;
	jmp	#LR__0923
LR__0918
	mov	_var02, #8
'         break;
	jmp	#LR__0923
LR__0919
LR__0920
	mov	_var02, #4
'         break;
	jmp	#LR__0923
LR__0921
	mov	_var02, #8
'         longflag = 1;
'         break;
	jmp	#LR__0923
LR__0922
	mov	_var09, _var06
	sub	_var09, #1
	mov	_var06, _var09
' 
'         --fmt;
'         break;
LR__0923
	wrlong	_var02, _var01
'     }
'     *size_p = size;
'     return fmt;
	mov	result1, _var06
_parsesize_2115_ret
	ret

' 
' '' This is not a top-level object
' 
' 
' pub setup(scl, sda, khz, pullup) | tix
_jm_i2c_spin2_setup
	mov	_var01, arg03
	qmul	_var01, ##1000
	mov	_var02, arg01
	mov	_var03, arg02
	mov	_var04, arg04
' 
' '' Define I2C SCL (clock) and SDA (data) pins
' '' -- khz is bus frequency: 100 (standard), 400 (full), 1000 (fast)
' ''    * circuit/connections will affect maximum bus speed
' '' -- pullup controls high level drive configuration of SCL and SDA
' 
'   longmove(@sclpin, @scl, 2)                                    ' copy pins
	wrlong	_var02, objptr
	add	objptr, #4
	wrlong	_var03, objptr
	sub	objptr, #4
'   clktix := tix := (clkfreq / (khz * 1_000)) >> 2               ' calculate ticks in 1/4 period
	rdlong	muldiva_, #20
	getqx	_var05
	mov	muldivb_, _var05
	call	#divide_
	mov	_var06, muldivb_
	shr	_var06, #2
	mov	_var07, _var06
	add	objptr, #8
	wrlong	_var06, objptr
	sub	objptr, #8
' 
'   case pullup
	fle	_var04, #3
	mov	_var08, _var04
	jmprel	_var08
LR__0924
	jmp	#LR__0925
	jmp	#LR__0926
	jmp	#LR__0927
	jmp	#LR__0928
LR__0925
'     PU_NONE : pullup := P_HIGH_FLOAT                            ' use external pull-up
	mov	_var09, ##14336
	jmp	#LR__0929
LR__0926
'     PU_1K5  : pullup := P_HIGH_1K5                              ' 1.5k
	decod	_var09, #11
	jmp	#LR__0929
LR__0927
'     PU_3K3  : pullup := P_HIGH_1MA                              ' acts like ~3.3k
	decod	_var09, #13
	jmp	#LR__0929
LR__0928
'     other   : pullup := P_HIGH_15K                              ' 15K
	decod	_var09, #12
LR__0929
' 
'   org
	loc	pa,	#(@LR__0932-@LR__0930)
	call	#FCACHE_LOAD_
LR__0930
	org	0
	wrpin	_var09, _var02
	wrpin	_var09, _var03
	drvh	_var02
	drvh	_var03
	waitx	_var07
	waitx	_var07
	rep	#8, #9
	testp	_var03 wc
 if_b	jmp	#LR__0931
	drvl	_var02
	waitx	_var07
	waitx	_var07
	drvh	_var02
	waitx	_var07
	waitx	_var07
LR__0931
LR__0932
	orgh
_jm_i2c_spin2_setup_ret
	ret

'   until (ackbit == ACK)
' 
' 
' pub start() | scl, sda, tix
_jm_i2c_spin2_start
' 
' '' Create I2C start sequence
' '' -- will wait if I2C bus SCL pin is held low
' 
'   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
	rdlong	_var01, objptr
	add	objptr, #4
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	sub	objptr, #8
' 
'   org
	loc	pa,	#(@LR__0935-@LR__0933)
	call	#FCACHE_LOAD_
LR__0933
	org	0
	drvh	_var02
	drvh	_var01
	waitx	_var03
LR__0934
	testp	_var01 wc
 if_ae	jmp	#LR__0934
	drvl	_var02
	waitx	_var03
	drvl	_var01
	waitx	_var03
LR__0935
	orgh
_jm_i2c_spin2_start_ret
	ret

' 
' 
' pub write(i2cbyte) : ackbit | scl, sda, tix
_jm_i2c_spin2_write
	mov	_var01, arg01
	mov	_var02, #0
' 
' '' Write byte to I2C bus
' '' -- leaves SCL low
' 
'   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
	rdlong	_var03, objptr
	add	objptr, #4
	rdlong	_var04, objptr
	mov	_var05, _var04
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #8
	mov	_var07, _var06
'                                                                  
'   org                                                            
	loc	pa,	#(@LR__0939-@LR__0936)
	call	#FCACHE_LOAD_
LR__0936
	org	0
	shl	_var01, #24
LR__0937
	rep	#8, #8
	shl	_var01, #1 wc
	drvc	_var05
	waitx	_var07
	drvh	_var03
	waitx	_var07
	waitx	_var07
	drvl	_var03
	waitx	_var07
LR__0938
	drvh	_var05
	waitx	_var07
	drvh	_var03
	waitx	_var07
	testp	_var05 wc
	muxc	_var02, #1
	waitx	_var07
	drvl	_var03
	waitx	_var07
	waitx	_var07
LR__0939
	orgh
	mov	result1, _var02
_jm_i2c_spin2_write_ret
	ret

' 
' 
' pub read(ackbit) : i2cbyte | scl, sda, tix
_jm_i2c_spin2_read
	mov	_var01, arg01
	mov	_var02, #0
' 
' '' Read byte from I2C bus
' '' -- ackbit is state of ack bit
' ''    * usually NAK for last byte read
' 
'   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
	rdlong	_var03, objptr
	add	objptr, #4
	rdlong	_var04, objptr
	mov	_var05, _var04
	add	objptr, #4
	rdlong	_var06, objptr
	sub	objptr, #8
	mov	_var07, _var06
' 
'   org                                                    
	loc	pa,	#(@LR__0943-@LR__0940)
	call	#FCACHE_LOAD_
LR__0940
	org	0
	drvh	_var05
LR__0941
	rep	#9, #8
	waitx	_var07
	drvh	_var03
	waitx	_var07
	testp	_var05 wc
	shl	_var02, #1
	muxc	_var02, #1
	waitx	_var07
	drvl	_var03
	waitx	_var07
LR__0942
	testb	_var01, #0 wc
	drvc	_var05
	waitx	_var07
	drvh	_var03
	waitx	_var07
	waitx	_var07
	drvl	_var03
	waitx	_var07
	waitx	_var07
LR__0943
	orgh
	mov	result1, _var02
_jm_i2c_spin2_read_ret
	ret

' 
' 
' pub stop() | scl, sda, tix
_jm_i2c_spin2_stop
' 
' '' Create I2C stop sequence
' '' -- allows for clock stretch
' 
'   longmove(@scl, @sclpin, 3)                                    ' copy pins & timing
	rdlong	_var01, objptr
	add	objptr, #4
	rdlong	_var02, objptr
	add	objptr, #4
	rdlong	_var03, objptr
	sub	objptr, #8
' 
'   org
	loc	pa,	#(@LR__0946-@LR__0944)
	call	#FCACHE_LOAD_
LR__0944
	org	0
	drvl	_var02
	drvh	_var01
	waitx	_var03
LR__0945
	testp	_var01 wc
 if_ae	jmp	#LR__0945
	waitx	_var03
	drvh	_var02
LR__0946
	orgh
_jm_i2c_spin2_stop_ret
	ret

' 
' 
' pub start(rxpin, txpin, mode, baud) : result | baudcfg, spmode
_jm_fullduplexserial_spin2_start
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
' 
' '' Start simple serial coms on rxpin and txpin at baud
' '' -- rxpin... receive pin (-1 if not used)
' '' -- txpin... transmit pin (-1 if not used)
' '' -- mode.... %0xx1 = invert rx
' ''             %0x1x = invert tx
' ''             %01xx = open-drain/open-source tx
' 
'   stop()
	call	#_jm_fullduplexserial_spin2_stop
' 
'   if (rxpin == txpin)                                           ' pin must be unique
	cmp	local01, local02 wz
'     return false
 if_e	mov	result1, #0
 if_e	jmp	#LR__0954
' 
'   longmove(@rxp, @rxpin, 2)                                     ' save pins
	add	objptr, #4
	wrlong	local01, objptr
	add	objptr, #4
	wrlong	local02, objptr
'   rxhub := @rxbuf                                               ' point to buffers
	add	objptr, #32
	mov	muldivb_, objptr
	sub	objptr, #28
	wrlong	muldivb_, objptr
'   txhub := @txbuf
	add	objptr, #284
	mov	muldivb_, objptr
	sub	objptr, #280
	wrlong	muldivb_, objptr
	sub	objptr, #16
' 
'   txdelay := clkfreq / baud * 11                                ' tix to transmit one byte
	rdlong	muldiva_, #20
	mov	muldivb_, local04
	call	#divide_
	qmul	muldivb_, #11
	add	objptr, #36
' 
'   baudcfg := muldiv64(clkfreq, $1_0000, baud) & $FFFFFC00       ' set bit timing
	decod	local05, #16
	mov	local06, local04
	decod	arg02, #16
	mov	arg03, local06
	getqx	result1
	wrlong	result1, objptr
	rdlong	arg01, #20
	qmul	arg01, ##65536
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
'   baudcfg |= (8-1)                                              ' set bits (8)
' 
'   if (rxp >= 0)                                                 ' configure rx pin if used
	sub	objptr, #32
	rdlong	result1, objptr
	sub	objptr, #4
	cmps	result1, #0 wc
	getqx	result1
	mov	local07, result1
	bitl	local07, #288
	or	local07, #7
 if_b	jmp	#LR__0947
'     spmode := P_ASYNC_RX
	mov	arg02, #62
'     if (mode.[0])
	test	local03, #1 wz
'       spmode |= P_INVERT_IN
 if_ne	mov	arg02, ##32830
'     pinstart(rxp, spmode, baudcfg, 0)
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #4
	mov	local05, local07
	mov	local06, #0
	mov	arg03, local05
	mov	arg04, #0
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	arg03, arg01
	wypin	#0, arg01
	dirh	arg01
LR__0947
' 
'   if (txp >= 0)                                                 ' configure tx pin if used
	add	objptr, #8
	rdlong	local08, objptr
	sub	objptr, #8
	cmps	local08, #0 wc
 if_b	jmp	#LR__0953
'     spmode := P_ASYNC_TX | P_OE
	mov	local09, #124
'     case mode.[2..1]
	mov	local08, local03
	shr	local08, #1
	and	local08, #3
	sub	local08, #1
	fle	local08, #3
	mov	local10, local08
	jmprel	local10
LR__0948
	jmp	#LR__0949
	jmp	#LR__0950
	jmp	#LR__0951
	jmp	#LR__0952
LR__0949
'       %01 : spmode |= P_INVERT_OUTPUT
	bith	local09, #14
	jmp	#LR__0952
LR__0950
'       %10 : spmode |= P_HIGH_FLOAT                              ' requires external pull-up
	bith	local09, #75
	jmp	#LR__0952
LR__0951
'       %11 : spmode |= P_INVERT_OUTPUT | P_LOW_FLOAT             ' requires external pull-down
	mov	local11, local09
	or	local11, ##18176
	mov	local09, local11
LR__0952
'     pinstart(txp, spmode, baudcfg, 0)
	add	objptr, #8
	rdlong	arg01, objptr
	sub	objptr, #8
	dirl	arg01
	wrpin	local09, arg01
	wxpin	local07, arg01
	wypin	#0, arg01
	dirh	arg01
LR__0953
' 
'   cog := coginit(COGEXEC_NEW, @uart_mgr, @rxp) + 1              ' start uart manager cog
	add	objptr, #4
	mov	arg03, objptr
	sub	objptr, #4
	mov	result1, #16
	setq	arg03
	coginit	result1, ptr__jm_fullduplexserial_spin2_dat__ wc
 if_b	neg	result1, #1
	add	result1, #1
	wrlong	result1, objptr
' 
'   return cog
LR__0954
	mov	ptra, fp
	call	#popregs_
_jm_fullduplexserial_spin2_start_ret
	ret

' 
' 
' pub stop()
_jm_fullduplexserial_spin2_stop
' 
' '' Stop serial driver
' '' -- frees a cog if driver was running
' 
'   if (cog)                                                      ' cog active?
	rdlong	arg01, objptr wz
'     cogstop(cog-1)                                              '  yes, shut it down
 if_ne	rdlong	arg01, objptr
 if_ne	sub	arg01, #1
 if_ne	cogstop	arg01
'     cog := 0                                                    '  and mark stopped
 if_ne	wrlong	#0, objptr
' 
'   longfill(@rxp,  -1, 2)                                        ' reset object globals
	add	objptr, #4
	mov	arg01, objptr
	sub	objptr, #4
	neg	arg02, #1
	mov	arg03, #2
	call	#\builtin_longfill_
'   longfill(@rxhub, 0, 7)
	add	objptr, #12
	mov	arg01, objptr
	sub	objptr, #12
	mov	arg02, #0
	mov	arg03, #7
	call	#\builtin_longfill_
_jm_fullduplexserial_spin2_stop_ret
	ret

' 
' 
' pub rxcheck() : b
_jm_fullduplexserial_spin2_rxcheck
' 
' '' Pulls byte from receive buffer if available
' '' -- returns -1 if buffer is empty
' 
'   if (rxtail <> rxhead)                                         ' something in buffer?
	add	objptr, #24
	rdlong	result1, objptr
	sub	objptr, #4
	rdlong	_var01, objptr
	sub	objptr, #20
	cmp	result1, _var01 wz
 if_e	jmp	#LR__0955
'     b := rxbuf[rxtail]                                          ' get it
	add	objptr, #24
	rdlong	_var01, objptr
	mov	result1, _var01
	add	objptr, #16
	add	result1, objptr
	rdbyte	_var02, result1
'     if (++rxtail == BUF_SIZE)                                   ' update tail pointer
	add	_var01, #1
	sub	objptr, #16
	wrlong	_var01, objptr
	sub	objptr, #24
	cmp	_var01, #256 wz
'       rxtail := 0
 if_e	add	objptr, #24
 if_e	wrlong	#0, objptr
 if_e	sub	objptr, #24
'   else
	jmp	#LR__0956
LR__0955
'     b := EOF                                                    ' mark no byte available
	neg	_var02, #1
LR__0956
	mov	result1, _var02
_jm_fullduplexserial_spin2_rxcheck_ret
	ret

' 
' 
' pub rxtime(ms) : b | mstix, t
_jm_fullduplexserial_spin2_rxtime
	mov	COUNT_, #6
	call	#pushregs_
	rdlong	result1, #20
	abs	result1, result1 wc
	qdiv	result1, ##1000
' 
' '' Wait ms milliseconds for a byte to be received
' '' -- returns -1 if no byte received, $00..$FF if byte
' 
'   mstix := clkfreq / 1000
' 
'   t := getct()
	getct	local01
'   repeat until ((b := rxcheck()) >= 0) || (((getct()-t) / mstix) >= ms)
	getqx	result1
	negc	local02, result1
LR__0957
	mov	local03, #0
	mov	local04, #0
	call	#_jm_fullduplexserial_spin2_rxcheck
	mov	local05, result1
	cmps	local05, #0 wc
 if_ae	not	local04, #0
	cmp	local04, #0 wz
 if_ne	not	local03, #0
	mov	local04, #0
	mov	local06, #0
	getct	muldiva_
	sub	muldiva_, local01
	mov	muldivb_, local02
	call	#divide_
	cmps	muldivb_, arg01 wc
 if_ae	not	local06, #0
	cmp	local06, #0 wz
 if_ne	not	local04, #0
	or	local03, local04 wz
 if_e	jmp	#LR__0957
	mov	result1, local05
	mov	ptra, fp
	call	#popregs_
_jm_fullduplexserial_spin2_rxtime_ret
	ret

' 
' 
' pub tx(b) | n
_jm_fullduplexserial_spin2_tx
	loc	pa,	#(@LR__0959-@LR__0958)
	call	#FCACHE_LOAD_
' 
' '' Move byte into transmit buffer if room is available
' '' -- will wait if buffer is full
' 
'   repeat
LR__0958
'     n := txhead - txtail                                        ' bytes in buffer
	add	objptr, #28
	rdlong	_var01, objptr
	add	objptr, #4
	rdlong	_var02, objptr
	sub	objptr, #32
	sub	_var01, _var02
'     if (n < 0)                                                  ' fix for index wrap-around
	cmps	_var01, #0 wc
'       n += BUF_SIZE
 if_b	add	_var01, #256
'     if (n < BUF_SIZE-1)
	cmps	_var01, #255 wc
'       quit
 if_ae	jmp	#LR__0958
LR__0959
' 
'   txbuf[txhead] := b                                            ' move to buffer
	add	objptr, #28
	rdlong	_var02, objptr
	add	objptr, #268
	add	_var02, objptr
	wrbyte	arg01, _var02
'   if (++txhead == BUF_SIZE)                                     ' update head pointer
	sub	objptr, #268
	rdlong	_var02, objptr
	add	_var02, #1
	wrlong	_var02, objptr
	sub	objptr, #28
	cmp	_var02, #256 wz
'     txhead := 0
 if_e	add	objptr, #28
 if_e	wrlong	#0, objptr
 if_e	sub	objptr, #28
_jm_fullduplexserial_spin2_tx_ret
	ret

' 
' '' This is not a top object                                                        
'                                                                  
'           
' pub start(sdipin, sdopin, sckpin, khz) : result | m, x
_jm_spi_spin2_start
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
' 
' '' Configure P2 smart pins for SPI coms
' '' -- sdipin is input from external device (-1 if not used)
' '' -- sdopin is output to external device  (-1 if not used)
' '' -- sckpin is clock output
' '' -- khz is clock frequence in kilohertz  (1000 = 1MHz)                                                        
'                                                                  
'   stop()
	call	#_jm_spi_spin2_stop
' 
'   if ((sdipin == sdopin) || (sckpin < 0))                       ' validate pins
	cmp	local01, local02 wz
 if_ne	cmps	local03, #0 wc
'     return false
 if_be	mov	result1, #0
 if_be	jmp	#LR__0962
' 
'   longmove(@sdi, @sdipin, 3)                                    ' save pins
	add	objptr, #4
	wrlong	local01, objptr
	add	objptr, #4
	wrlong	local02, objptr
	add	objptr, #4
	wrlong	local03, objptr
' 
'   if (sdi >= 0)
	sub	objptr, #8
	rdlong	arg04, objptr
	sub	objptr, #4
	cmps	arg04, #0 wc
 if_b	jmp	#LR__0960
'     m := P_SYNC_RX                                              ' spi rx mode                         
'     m |= ((sck-sdi) & %111) << 24                               ' add SCK offset (B pin)              
	mov	arg02, #58
	add	objptr, #12
	rdlong	local03, objptr
	sub	objptr, #8
	rdlong	arg01, objptr
	sub	local03, arg01
	and	local03, #7
	shl	local03, #24
	or	arg02, local03
'     x := %0_00000 | (8-1)                                       ' sample ahead of b pin rise, 8 bits  
	mov	local05, #7
'     pinstart(sdi, m, x, 0)                                      ' configure smart pin                                                                   
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#7, arg01
	wypin	#0, arg01
	dirh	arg01
'     pinf(sdi)                                                   ' disable until used
	sub	objptr, #4
	fltl	arg01
LR__0960
' 
'   if (sdo >= 0)
	add	objptr, #8
	rdlong	arg04, objptr
	sub	objptr, #8
	cmps	arg04, #0 wc
 if_b	jmp	#LR__0961
'     m := P_OE | P_SYNC_TX                                       ' spi tx mode
'     m |= ((sck-sdo) & %111) << 24                               ' add SCK offset (B pin)
	mov	arg02, #120
	add	objptr, #12
	rdlong	local05, objptr
	sub	objptr, #4
	rdlong	arg01, objptr
	sub	local05, arg01
	and	local05, #7
	shl	local05, #24
	or	arg02, local05
'     x := %1_00000 | (8-1)                                       ' start/stop mode, 8 bits
	mov	local05, #39
'     pinstart(sdo, m, x, 0)                                      ' configure smart pin  
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#39, arg01
	wypin	#0, arg01
	dirh	arg01
'     pinf(sdo)                                                   ' disable until used 
	sub	objptr, #8
	fltl	arg01
LR__0961
	qmul	local04, ##1000
' 
'   m := P_OE | P_PULSE                                           ' pulses for spi clock   
'   x.word[0] := 2 #> (clkfreq / (khz*1000)) <# $FFFF             ' ticks in period        
	rdlong	muldiva_, #20
	getqx	muldivb_
	call	#divide_
	mov	local04, #2
	fges	local04, muldivb_
	fles	local04, ##65535
	getword	local04, local04, #0
	bitl	local05, #480
	or	local05, local04
'   x.word[1] := x.word[0] >> 1                                   ' ticks in low cycle (50%)      
	getword	local04, local05, #0
	shr	local04, #1
	getword	local04, local04, #0
	shl	local04, #16
	getword	arg03, local05, #0
	or	arg03, local04
'   pinstart(sck, m, x, 0)                                        ' configure smart pin                                                         
	add	objptr, #12
	rdlong	arg01, objptr
	sub	objptr, #12
	dirl	arg01
	wrpin	#72, arg01
	wxpin	arg03, arg01
	wypin	#0, arg01
	dirh	arg01
' 
'   setup := true
	neg	result1, #1
	wrlong	##-1, objptr
' 
'   return setup
LR__0962
	mov	ptra, fp
	call	#popregs_
_jm_spi_spin2_start_ret
	ret

'                       
' 
' pub stop()
_jm_spi_spin2_stop
' 
' '' Clears SPI smart pins if configured
' 
'   if (setup)                                                    ' configured?
	rdlong	arg03, objptr wz
 if_e	jmp	#LR__0963
'     if (sdi >= 0)                                               ' clear smart pins
	add	objptr, #4
	rdlong	arg03, objptr
	sub	objptr, #4
	cmps	arg03, #0 wc
'       pinclear(sdi)
 if_ae	add	objptr, #4
 if_ae	rdlong	arg01, objptr
 if_ae	sub	objptr, #4
 if_ae	fltl	arg01
 if_ae	wrpin	#0, arg01
'     if (sdo >= 0)
	add	objptr, #8
	rdlong	arg03, objptr
	sub	objptr, #8
	cmps	arg03, #0 wc
'       pinclear(sdo)
 if_ae	add	objptr, #8
 if_ae	rdlong	arg01, objptr
 if_ae	sub	objptr, #8
 if_ae	fltl	arg01
 if_ae	wrpin	#0, arg01
'     pinclear(sck)      
	add	objptr, #12
	rdlong	arg01, objptr
	sub	objptr, #12
	fltl	arg01
	wrpin	#0, arg01
'     setup := false
	wrlong	#0, objptr
LR__0963
'     
'   longfill(@sdi, -1, 3)                                         ' mark pins as unused
	add	objptr, #4
	mov	arg01, objptr
	sub	objptr, #4
	neg	arg02, #1
	mov	arg03, #3
	call	#\builtin_longfill_
_jm_spi_spin2_stop_ret
	ret

' 
' 
' pub shiftin(mode, bits) : value
_jm_spi_spin2_shiftin
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
' 
' '' Shift data in from a synchronous serial device
' '' -- mode is bit order: LSBFIRST or MSBFIRST
' '' -- bits in the number of bits to shift
' 
'   if (sdi < 0)                                                  ' abort if di not defined
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #4
	cmps	arg02, #0 wc
'     return 0
 if_b	mov	result1, #0
 if_b	jmp	#LR__0966
' 
'   pinf(sdi)                                                     ' reset di
	add	objptr, #4
	rdlong	arg01, objptr
	fltl	arg01
'   wxpin(sdi, %0_00000 | (bits-1))                               ' configure di sampling/bits
	mov	arg02, local02
	sub	arg02, #1
	wxpin	arg02, arg01
'   pinl(sdi)                                                     ' enable di
	drvl	arg01
'   wypin(sck, bits)                                              ' start clocking data
	add	objptr, #8
	rdlong	arg01, objptr
	wypin	local02, arg01
	loc	pa,	#(@LR__0965-@LR__0964)
	call	#FCACHE_LOAD_
'   repeat until pinr(sck)                                        ' wait until clocks finished
LR__0964
	rdlong	arg01, objptr
	test	arg01, #32 wz
 if_ne	mov	result1, inb
 if_e	mov	result1, ina
	shr	result1, arg01
	shr	arg01, #6
	zerox	result1, arg01 wz
 if_e	jmp	#LR__0964
LR__0965
' 
'   value := rdpin(sdi)                                           ' get value
	sub	objptr, #8
	rdlong	arg01, objptr
	sub	objptr, #4
	mov	result1, #0
	rdpin	result1, arg01
' 
'   if (mode == LSBFIRST)
	cmp	local01, #0 wz
'     value >>= (32-bits)                                         ' align lsb
 if_e	mov	local03, #32
 if_e	sub	local03, local02
 if_e	shr	result1, local03
'   else
'     value rev= 31                                               ' flip to align lsb
 if_ne	rev	result1
'     if (bits < 32)                                              ' clear unused bits
 if_ne	cmps	local02, #32 wc
'       value zerox= (bits-1)
 if_c_and_nz	sub	local02, #1
 if_c_and_nz	zerox	result1, local02
LR__0966
	mov	ptra, fp
	call	#popregs_
_jm_spi_spin2_shiftin_ret
	ret

' 
' 
' pub shiftout(mode, value, bits)
_jm_spi_spin2_shiftout
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
' 
' '' Shift data out to a synchronous serial device 
' '' -- mode is bit order: LSBFIRST or MSBFIRST 
' '' -- value is shifted out
' '' -- bits in the number of bits to shift
' 
'   if (sdo < 0)                                                  ' abort if do not defined
	add	objptr, #8
	rdlong	arg02, objptr
	sub	objptr, #8
	cmps	arg02, #0 wc
'     return
 if_b	jmp	#LR__0969
' 
'   if (mode == MSBFIRST)                                         ' flip to output from LSB end
	cmp	arg01, #1 wz
'     if (bits < 32)                                              ' adjust alignment if needed
 if_e	cmps	arg03, #32 wc
'       value <<= (32-bits)      
 if_c_and_z	mov	arg01, #32
 if_c_and_z	sub	arg01, arg03
 if_c_and_z	shl	local01, arg01
'     value rev= 31
 if_e	rev	local01
' 
'   wxpin(sdo, %1_00000 | (bits-1))                               ' configure do bits
	add	objptr, #8
	rdlong	arg01, objptr
	mov	local02, arg03
	sub	local02, #1
	mov	arg02, #32
	or	arg02, local02
	wxpin	arg02, arg01
'   wypin(sdo, value)                                             ' load value
	wypin	local01, arg01
'   pinl(sdo)                                                     ' enable do
	drvl	arg01
'   wypin(sck, bits)                                              ' start clocking data
	add	objptr, #4
	rdlong	arg01, objptr
	wypin	arg03, arg01
	loc	pa,	#(@LR__0968-@LR__0967)
	call	#FCACHE_LOAD_
'   repeat until pinr(sck)                                        ' wait for clocking to finish
LR__0967
	rdlong	arg01, objptr
	test	arg01, #32 wz
 if_ne	mov	result1, inb
 if_e	mov	result1, ina
	shr	result1, arg01
	shr	arg01, #6
	zerox	result1, arg01 wz
 if_e	jmp	#LR__0967
LR__0968
'   pinf(sdo)                                                     ' disable do 
	sub	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #8
	fltl	arg01
LR__0969
	mov	ptra, fp
	call	#popregs_
_jm_spi_spin2_shiftout_ret
	ret

' 
' '' This is not a top-level object
' 
' 
' pub start(a, b, btn, d4x, preset, lo, hi) : result | dif
_jm_quadrature_spin2_start
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	local06, arg06
	mov	local07, arg07
' 
' '' Start the encoder object
' '' -- continuous count mode
' '' -- a & b are encoder inputs (active-low)
' '' -- btn is the button input (active-low, -1 if not used)
' '' -- set d4x to true if each "click" is 4 counts
' '' -- preset is initial value for encoder
' '' -- lo & hi are limit values for encoder
' 
'   stop()
	call	#_jm_quadrature_spin2_stop
' 
'   dif := b - a
	sub	local02, local01 wz
'   if ((dif == 0) or (abs(dif) > 3))                             ' check pins   
 if_ne	abs	result1, local02
 if_ne	cmps	result1, #4 wc
'     result := false
 if_nc_or_z	mov	local08, #0
'   else
 if_nc_or_z	jmp	#LR__0970
'     apin := a                                                   ' save pins & limits
	wrlong	local01, objptr
'     longmove(@btnpin, @btn, 5)
	add	objptr, #4
	wrlong	local03, objptr
	add	objptr, #4
	wrlong	local04, objptr
	add	objptr, #4
	wrlong	local05, objptr
	add	objptr, #4
	wrlong	local06, objptr
	add	objptr, #4
	wrlong	local07, objptr
'     mod4x := (d4x) ? 2 : 0                                      ' fix detent modifier
	cmp	local04, #0 wz
 if_ne	mov	local09, #2
 if_e	mov	local09, #0
	sub	objptr, #12
	wrlong	local09, objptr
	sub	objptr, #8
'     pinstart(apin, P_QUADRATURE | dif.[2..0] << 24, 0, 0)       ' start a/b quadrature mode
	rdlong	arg01, objptr
	mov	arg02, #22
	and	local02, #7
	shl	local02, #24
	or	arg02, local02
	mov	arg03, #0
	mov	arg04, #0
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#0, arg01
	wypin	#0, arg01
	dirh	arg01
'     set(preset)                                                 ' preset encoder value
	mov	arg01, local05
	call	#_jm_quadrature_spin2_set
'     result := setup := true
	add	objptr, #24
	wrlong	##-1, objptr
	sub	objptr, #24
	neg	local08, #1
LR__0970
	mov	result1, local08
	mov	ptra, fp
	call	#popregs_
_jm_quadrature_spin2_start_ret
	ret

' 
' 
' pub stop()
_jm_quadrature_spin2_stop
' 
' '' Disable encoder smart pin if previously configured
' 
'   if (setup)
	add	objptr, #24
	rdlong	arg03, objptr wz
	sub	objptr, #24
 if_e	jmp	#LR__0971
'     pinclear(apin)                                              ' disable smart pin
	rdlong	arg01, objptr
	fltl	arg01
	wrpin	#0, arg01
'     longfill(@apin, 0, 7)                                       ' mark disabled
	mov	arg01, objptr
	mov	arg02, #0
	mov	arg03, #7
	call	#\builtin_longfill_
LR__0971
_jm_quadrature_spin2_stop_ret
	ret

' 
' 
' pub set(preset) : result
_jm_quadrature_spin2_set
	mov	result1, arg01
' 
' '' Set encoder to preset value
' 
'   pinfloat(apin)                                                ' reset & clear  
	rdlong	arg01, objptr
	fltl	arg01
'   pinlow(apin)                                                  ' re-enable
	drvl	arg01
'   offset := preset                                              ' set encoder value
	add	objptr, #12
	wrlong	result1, objptr
	sub	objptr, #12
'   result := preset
_jm_quadrature_spin2_set_ret
	ret

' 
' 
' pub value() : result
_jm_quadrature_spin2_value
	mov	COUNT_, #1
	call	#pushregs_
' 
' '' Return encoder value
' '' -- returns encoder value turncated to lolimit..hilimit
' 
'   result := raw() + offset                                      ' read and update value
' 
' '' Returns encoder value w/o offset
' '' -- for development & debugging
' 
'   result := rdpin(apin) sar mod4x
	rdlong	arg01, objptr
	mov	local01, #0
	rdpin	local01, arg01
	add	objptr, #8
	rdlong	arg01, objptr
	sar	local01, arg01
	add	objptr, #4
	rdlong	arg01, objptr
	add	local01, arg01
' 
'   if (result < lolimit)                                         ' limit range
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #16
	cmps	local01, arg01 wc
 if_ae	jmp	#LR__0972
'     result := set(lolimit)
	add	objptr, #16
	rdlong	arg01, objptr
	sub	objptr, #16
	call	#_jm_quadrature_spin2_set
	mov	local01, result1
	jmp	#LR__0974
LR__0972
'   elseif (result > hilimit)
	add	objptr, #20
	rdlong	arg01, objptr
	sub	objptr, #20
	cmps	local01, arg01 wcz
 if_be	jmp	#LR__0973
'     result := set(hilimit)
	add	objptr, #20
	rdlong	arg01, objptr
	sub	objptr, #20
	call	#_jm_quadrature_spin2_set
	mov	local01, result1
LR__0973
LR__0974
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_jm_quadrature_spin2_value_ret
	ret

_fatfs_cc_memcmp
' 	for (n = size; n > 0; n--)
LR__0975
	cmp	arg03, #1 wc
 if_b	jmp	#LR__0976
	rdbyte	_var01, arg01
	rdbyte	_var02, arg02
	cmp	_var01, _var02 wz
 if_e	add	arg01, #1
 if_e	add	arg02, #1
' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
 if_ne	rdbyte	result1, arg01
 if_ne	rdbyte	_var02, arg02
 if_ne	sub	result1, _var02
 if_ne	jmp	#_fatfs_cc_memcmp_ret
	sub	arg03, #1
	jmp	#LR__0975
LR__0976
' 
' 	return(0);
	mov	result1, #0
_fatfs_cc_memcmp_ret
	ret

_fatfs_cc_strncmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__0977
' 		return scan2 ? -1 : 0;
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#_fatfs_cc_strncmp_ret
LR__0977
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#_fatfs_cc_strncmp_ret
	mov	_var03, arg03
	loc	pa,	#(@LR__0979-@LR__0978)
	call	#FCACHE_LOAD_
' 	count = n;
' 	do {
LR__0978
	rdbyte	_var04, _var01
	mov	_var05, arg02
	mov	_var06, arg02
	add	_var06, #1
	mov	arg02, _var06
	rdbyte	_var07, _var05
	mov	_var02, _var03
	sub	_var02, #1
	mov	_var03, _var02
	cmps	_var03, #0 wc
	add	_var01, #1
 if_ae	cmp	_var04, #0 wz
 if_nc_and_z	jmp	#LR__0980
 if_ae	cmp	_var04, _var07 wz
 if_nc_and_z	jmp	#LR__0978
LR__0979
LR__0980
	cmps	_var03, #0 wc
' 		return(0);
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var04, _var07 wz
' 		return(0);
 if_e	mov	result1, #0
 if_e	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var04, #0 wz
' 		return(-1);
 if_e	neg	result1, #1
 if_e	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var07, #0 wz
' 		return(1);
 if_e	mov	result1, #1
' 		return(c1 - c2);
 if_ne	mov	result1, _var04
 if_ne	sub	result1, _var07
_fatfs_cc_strncmp_ret
	ret

_fatfs_cc_strchr
' #line 16 "C:/flexprop/include/libc/string/strchr.c"
' 	while ((c = *s++) != (char) charwanted)
LR__0981
	mov	_var01, arg01
	rdbyte	_var02, _var01
	getbyte	_var03, _var02, #0
	getbyte	_var04, arg02, #0
	cmp	_var03, _var04 wz
	add	arg01, #1
 if_e	jmp	#LR__0982
	mov	_var03, _var02
	zerox	_var03, #7 wz
 if_e	mov	result1, #0
 if_e	jmp	#_fatfs_cc_strchr_ret
	jmp	#LR__0981
LR__0982
' 	return((char *)--s);
	sub	arg01, #1
	mov	result1, arg01
_fatfs_cc_strchr_ret
	ret

_fatfs_cc_disk_initialize
	mov	COUNT_, #7
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrbyte	arg01, fp
	add	objptr, #12
	rdlong	arg01, objptr
	add	fp, #44
	wrlong	arg01, fp
	sub	objptr, #4
	rdlong	arg01, objptr
	add	fp, #4
	wrlong	arg01, fp
	add	objptr, #8
	rdlong	arg01, objptr
	add	fp, #4
	wrlong	arg01, fp
	add	objptr, #4
	rdlong	arg01, objptr
	add	fp, #4
	wrlong	arg01, fp
	add	objptr, #4
	wrbyte	#1, objptr
	sub	objptr, #24
	sub	fp, #56
	rdbyte	arg01, fp wz
	sub	fp, #4
' #line 531 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
'             return RES_NOTRDY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1001
	mov	arg01, ##10000
	call	#__system___waitus
	add	fp, #48
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	##4608, arg01
	sub	fp, #12
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	sub	fp, #32
	wrlong	##524304, fp
	add	fp, #4
	wrlong	##409672, fp
	add	fp, #20
	rdlong	arg04, fp
	mov	arg02, ##409672
	bith	arg02, #16
	sub	fp, #24
	rdlong	arg03, fp
	dirl	arg04
	wrpin	arg02, arg04
	wxpin	arg03, arg04
	wypin	#0, arg04
	dirh	arg04
	add	fp, #28
	rdlong	local01, fp
	sub	arg04, local01
	and	arg04, #7
	shl	arg04, #24
	mov	arg02, #120
	or	arg02, arg04
	sub	fp, #20
	wrlong	arg02, fp
	add	fp, #20
	rdlong	arg01, fp
	bith	arg02, #16
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#31, arg01
	wypin	##-1, arg01
	dirh	arg01
	sub	fp, #4
	rdlong	arg02, fp
	add	fp, #8
	rdlong	arg04, fp
	sub	arg02, arg04
	and	arg02, #7
	shl	arg02, #24
	sub	fp, #20
	wrlong	arg02, fp
	or	arg02, ##21114
	wrlong	arg02, fp
	add	fp, #20
	rdlong	arg01, fp
	mov	local02, #0
	mov	arg03, #39
	mov	arg04, #0
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#39, arg01
	wypin	#0, arg01
	dirh	arg01
	sub	fp, #40
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #10
	call	#_fatfs_cc_rcvr_mmc_0405
	mov	arg01, #0
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	call	#_fatfs_cc_deselect_0415
	mov	arg01, #100
	call	#__system___waitus
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #10
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
	mov	arg01, #0
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__1000
	mov	arg01, #8
	mov	arg02, #426
	call	#_fatfs_cc_send_cmd_0429
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0986
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #4
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #22
	rdbyte	local03, fp
	sub	fp, #22
	cmp	local03, #1 wz
 if_ne	jmp	#LR__0999
	add	fp, #23
	rdbyte	local04, fp
	sub	fp, #23
	cmp	local04, #170 wz
 if_ne	jmp	#LR__0999
' 				for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0983
	add	fp, #24
	rdlong	local04, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0984
	decod	local05, #30
	mov	arg01, #169
	decod	arg02, #30
	call	#_fatfs_cc_send_cmd_0429
	mov	local02, result1
	zerox	local02, #7 wz
 if_e	jmp	#LR__0984
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local06, fp
	mov	local05, local06
	sub	local05, #1
	wrlong	local05, fp
	sub	fp, #24
	jmp	#LR__0983
LR__0984
	add	fp, #24
	rdlong	local03, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0985
	mov	local01, #0
	mov	arg01, #58
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	mov	local02, result1
	mov	local04, local02
	zerox	local04, #7 wz
 if_ne	jmp	#LR__0985
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #4
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #20
	rdbyte	local04, fp
	getbyte	local07, local04, #0
	and	local07, #64 wz
 if_ne	mov	local03, #12
 if_e	mov	local03, #4
	sub	fp, #8
	wrbyte	local03, fp
	sub	fp, #12
LR__0985
	rdlong	local03, #20
	add	fp, #24
	wrlong	local03, fp
	add	fp, #12
	rdlong	local03, fp
	bith	local03, #27
	wrlong	local03, fp
	sub	fp, #12
	rdlong	local07, fp
	sub	fp, #24
	cmp	local07, ##150000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131076, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0999
	add	fp, #24
	rdlong	local07, fp
	sub	fp, #24
	cmp	local07, ##200000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131077, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0999
	add	fp, #24
	rdlong	local07, fp
	sub	fp, #24
	cmp	local07, ##280000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131078, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0999
	add	fp, #28
	wrlong	##196616, fp
	sub	fp, #28
	jmp	#LR__0999
LR__0986
	mov	arg01, #169
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	getbyte	local03, result1, #0
	cmp	local03, #2 wc
 if_ae	jmp	#LR__0987
	add	fp, #12
	wrbyte	#2, fp
	add	fp, #4
	wrbyte	#169, fp
	sub	fp, #16
	jmp	#LR__0988
LR__0987
	add	fp, #12
	wrbyte	#1, fp
	add	fp, #4
	wrbyte	#1, fp
	sub	fp, #16
LR__0988
' 				ty =  0x01 ; cmd =  (1) ;
' 			}
' 			for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0989
	add	fp, #24
	rdlong	local04, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0990
	add	fp, #16
	rdbyte	arg01, fp
	sub	fp, #16
	mov	local05, #0
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	mov	local01, result1
	mov	local02, local01
	zerox	local02, #7 wz
 if_e	jmp	#LR__0990
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local01, fp
	mov	local02, local01
	mov	local06, local01
	mov	local05, local06
	sub	local05, #1
	wrlong	local05, fp
	sub	fp, #24
	jmp	#LR__0989
LR__0990
	add	fp, #24
	rdlong	local07, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0991
	decod	local01, #9
	mov	arg01, #16
	decod	arg02, #9
	call	#_fatfs_cc_send_cmd_0429
	mov	local02, result1
	mov	local04, local02
	zerox	local04, #7 wz
 if_e	jmp	#LR__0992
LR__0991
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
LR__0992
	rdlong	local03, #20
	add	fp, #24
	wrlong	local03, fp
	sub	fp, #24
	cmp	local03, ##100000001 wc
 if_ae	jmp	#LR__0993
	add	fp, #36
	rdlong	local03, fp
	bith	local03, #27
	wrlong	local03, fp
	sub	fp, #36
	jmp	#LR__0994
LR__0993
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##200000001 wc
 if_b	add	fp, #36
 if_b	rdlong	local03, fp
 if_b	or	local03, ##134283264
 if_b	wrlong	local03, fp
 if_b	sub	fp, #36
LR__0994
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##100000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131076, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0998
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##150000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##196614, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0997
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##200000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##262152, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0996
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##250000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##327690, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0995
	add	fp, #24
	rdlong	local03, fp
	sub	fp, #24
	cmp	local03, ##300000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##393228, fp
 if_b	sub	fp, #28
 if_ae	add	fp, #28
 if_ae	wrlong	##458766, fp
 if_ae	sub	fp, #28
LR__0995
LR__0996
LR__0997
LR__0998
LR__0999
LR__1000
	add	fp, #12
	rdbyte	local03, fp
	add	objptr, #25
	wrbyte	local03, objptr
	rdbyte	local07, fp wz
 if_ne	mov	local03, #0
 if_e	mov	local03, #1
	add	fp, #32
	wrbyte	local03, fp
	rdbyte	local03, fp
	sub	fp, #44
	sub	objptr, #1
	wrbyte	local03, objptr
	sub	objptr, #24
	call	#_fatfs_cc_deselect_0415
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #24
	rdlong	arg02, fp
	wxpin	arg02, arg01
	add	fp, #28
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	wrpin	arg02, arg01
' 
' 		}
' 	}
' #line 631 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
' 	CardType = ty;
' 	s = ty ? 0 :  0x01 ;
' 	Stat = s;
' 
' 	deselect();
' 
' 
' 	_wxpin( PIN_CLK, ck_div );
' 	_wrpin( PIN_DI, spm_tx );
' #line 644 "C:/flexprop/include/filesys/fatfs/sdmm.cc"
' 	return s;
	add	fp, #8
	rdbyte	result1, fp
	sub	fp, #44
LR__1001
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_initialize_ret
	ret

_fatfs_cc_disk_read
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	cmp	arg01, #0 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, #24
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, #24
	and	result1, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1004
	add	objptr, #25
	rdbyte	local04, objptr
	sub	objptr, #25
	and	local04, #8 wz
 if_e	shl	local02, #9
	cmp	local03, #2 wc
 if_ae	mov	local04, #18
 if_b	mov	local04, #17
	mov	arg02, local02
	mov	arg01, local04
	call	#_fatfs_cc_send_cmd_0429
	mov	local05, result1
	zerox	local05, #7 wz
 if_ne	jmp	#LR__1003
' 		do {
LR__1002
	mov	arg01, local01
	decod	arg02, #9
	call	#_fatfs_cc_rcvr_datablock_0423
	cmp	result1, #0 wz
 if_ne	add	local01, ##512
 if_ne	djnz	local03, #LR__1002
	getbyte	local04, local04, #0
	cmp	local04, #18 wz
 if_e	mov	arg01, #12
 if_e	mov	arg02, #0
 if_e	call	#_fatfs_cc_send_cmd_0429
LR__1003
	call	#_fatfs_cc_deselect_0415
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local03, #0 wz
 if_ne	mov	local05, #1
 if_e	mov	local05, #0
	mov	result1, local05
LR__1004
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_read_ret
	ret

_fatfs_cc_disk_write
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, local03
	mov	arg01, local01 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, #24
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, #24
	and	result1, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1009
	add	objptr, #25
	rdbyte	local06, objptr
	sub	objptr, #25
	test	local06, #8 wz
 if_e	shl	local05, #9
	cmp	local04, #1 wz
 if_ne	jmp	#LR__1005
	mov	arg01, #24
	mov	arg02, local05
	call	#_fatfs_cc_send_cmd_0429
	mov	local06, result1
	zerox	local06, #7 wz
 if_ne	jmp	#LR__1008
	mov	arg01, local02
	mov	arg02, #254
	call	#_fatfs_cc_xmit_datablock_0425
	cmps	result1, #0 wz
 if_ne	mov	local04, #0
	jmp	#LR__1008
LR__1005
	add	objptr, #25
	rdbyte	local06, objptr
	sub	objptr, #25
	test	local06, #6 wz
 if_ne	mov	arg01, #151
 if_ne	mov	arg02, local04
 if_ne	call	#_fatfs_cc_send_cmd_0429
	mov	arg02, local05
	mov	arg01, #25
	call	#_fatfs_cc_send_cmd_0429
	mov	local06, result1
	zerox	local06, #7 wz
 if_ne	jmp	#LR__1007
' 			do {
LR__1006
	mov	arg01, local02
	mov	arg02, #252
	call	#_fatfs_cc_xmit_datablock_0425
	cmp	result1, #0 wz
 if_ne	add	local02, ##512
 if_ne	djnz	local04, #LR__1006
	mov	arg01, #0
	mov	arg02, #253
	call	#_fatfs_cc_xmit_datablock_0425
	cmp	result1, #0 wz
 if_e	mov	local04, #1
LR__1007
LR__1008
	call	#_fatfs_cc_deselect_0415
' 				count = 1;
' 		}
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local04, #0 wz
 if_ne	mov	local06, #1
 if_e	mov	local06, #0
	mov	result1, local06
LR__1009
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_write_ret
	ret

_fatfs_cc_disk_ioctl
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #48
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdbyte	local01, fp
	sub	fp, #4
	mov	arg01, local01 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, #24
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, #24
	getbyte	local02, result1, #0
	test	local02, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1018
	add	fp, #16
	wrlong	#1, fp
' 
' 	res = RES_ERROR;
' 	switch (ctrl) {
	sub	fp, #8
	rdbyte	local02, fp
	sub	fp, #8
	getbyte	local03, local02, #0
	fle	local03, #4
	jmprel	local03
LR__1010
	jmp	#LR__1011
	jmp	#LR__1012
	jmp	#LR__1016
	jmp	#LR__1015
	jmp	#LR__1016
LR__1011
	call	#_fatfs_cc_select_0419
	cmp	result1, #0 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#0, fp
 if_ne	sub	fp, #16
' 			break;
	jmp	#LR__1017
LR__1012
	mov	arg01, #9
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	mov	local03, result1
	zerox	local03, #7 wz
 if_ne	jmp	#LR__1017
	add	fp, #24
	mov	arg01, fp
	sub	fp, #24
	mov	arg02, #16
	call	#_fatfs_cc_rcvr_datablock_0423
	cmp	result1, #0 wz
 if_e	jmp	#LR__1017
	add	fp, #24
	rdbyte	local01, fp
	sub	fp, #24
	shr	local01, #6
	cmp	local01, #1 wz
 if_ne	jmp	#LR__1013
	add	fp, #33
	rdbyte	local03, fp
	sub	fp, #1
	rdbyte	local02, fp
	getword	local02, local02, #0
	shl	local02, #8
	add	local03, local02
	sub	fp, #1
	rdbyte	local02, fp
	and	local02, #63
	shl	local02, #16
	add	local03, local02
	add	local03, #1
	add	fp, #9
	wrlong	local03, fp
	sub	fp, #28
	rdlong	local01, fp
	sub	fp, #12
	shl	local03, #10
	wrlong	local03, local01
	jmp	#LR__1014
LR__1013
	add	fp, #29
	rdbyte	local03, fp
	getnib	local03, local03, #0
	add	fp, #5
	rdbyte	local02, fp
	and	local02, #128
	sar	local02, #7
	add	local03, local02
	sub	fp, #1
	rdbyte	local02, fp
	and	local02, #3
	shl	local02, #1
	add	local03, local02
	add	local03, #2
	sub	fp, #13
	wrbyte	local03, fp
	add	fp, #12
	rdbyte	local03, fp
	shr	local03, #6
	sub	fp, #1
	rdbyte	local02, fp
	getword	local02, local02, #0
	shl	local02, #2
	add	local03, local02
	sub	fp, #1
	rdbyte	local02, fp
	and	local02, #3
	getword	local02, local02, #0
	shl	local02, #10
	add	local03, local02
	add	local03, #1
	add	fp, #10
	wrlong	local03, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #8
	rdbyte	local02, fp
	sub	fp, #20
	sub	local02, #9
	shl	local03, local02
	wrlong	local03, local01
LR__1014
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
' 					*(LBA_t*)buff = cs << (n - 9);
' 				}
' 				res = RES_OK;
' 			}
' 			break;
	jmp	#LR__1017
LR__1015
	add	fp, #12
	rdlong	local03, fp
	wrlong	#128, local03
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #16
' 			*(DWORD*)buff = 128;
' 			res = RES_OK;
' 			break;
	jmp	#LR__1017
LR__1016
	mov	local04, #4
	add	fp, #16
	wrlong	#4, fp
	sub	fp, #16
LR__1017
	call	#_fatfs_cc_deselect_0415
' 			res = RES_PARERR;
' 	}
' 
' 	deselect();
' 
' 	return res;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__1018
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_ioctl_ret
	ret

_fatfs_cc_disk_setpins
	cmp	arg01, #0 wz
 if_ne	neg	result1, #1
 if_ne	jmp	#_fatfs_cc_disk_setpins_ret
	add	objptr, #8
	wrlong	arg02, objptr
	add	objptr, #4
	wrlong	arg03, objptr
	add	objptr, #4
	wrlong	arg04, objptr
	add	objptr, #4
	wrlong	arg05, objptr
	sub	objptr, #20
	mov	result1, #0
_fatfs_cc_disk_setpins_ret
	ret

_fatfs_cc_sync_window
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #3
	rdbyte	local03, local01 wz
	sub	local01, #3
 if_e	jmp	#LR__1021
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #47
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	local01, #44
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1019
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #41
	rdlong	local03, local01
	sub	local01, #12
	rdlong	result1, local01
	sub	local03, result1
	sub	local01, #8
	rdlong	arg04, local01
	sub	local01, #24
	cmp	local03, arg04 wc
 if_ae	jmp	#LR__1020
	add	local01, #2
	rdbyte	local03, local01
	sub	local01, #2
	cmp	local03, #2 wz
 if_ne	jmp	#LR__1020
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #47
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	local01, #20
	rdlong	local03, local01
	add	arg03, local03
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	jmp	#LR__1020
LR__1019
	mov	local02, #1
LR__1020
LR__1021
' 			res = FR_DISK_ERR;
' 		}
' 	}
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_sync_window_ret
	ret

_fatfs_cc_move_window
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	add	local01, #44
	rdlong	arg01, local01
	sub	local01, #44
	cmp	local02, arg01 wz
 if_e	jmp	#LR__1023
	mov	arg01, local01
	call	#_fatfs_cc_sync_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__1022
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #47
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_ne	neg	local02, #1
 if_ne	mov	local03, #1
	sub	local01, #4
	wrlong	local02, local01
LR__1022
LR__1023
' 				sect = (LBA_t)0 - 1;
' 				res = FR_DISK_ERR;
' 			}
' 			fs->winsect = sect;
' 		}
' 	}
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_move_window_ret
	ret

_fatfs_cc_sync_fs
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	call	#_fatfs_cc_sync_window
	mov	local02, result1 wz
 if_ne	jmp	#LR__1025
	rdbyte	arg03, local01
	cmp	arg03, #3 wz
 if_ne	jmp	#LR__1024
	add	local01, #4
	rdbyte	arg03, local01
	sub	local01, #4
	cmp	arg03, #1 wz
 if_ne	jmp	#LR__1024
	add	local01, #48
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #9
	mov	local03, arg01
	call	#\builtin_bytefill_
	mov	arg01, local01
	add	arg01, #510
	wrword	##43605, arg01
	wrlong	##1096897106, local01
	mov	arg01, local01
	add	arg01, #484
	wrlong	##1631679090, arg01
	mov	arg01, local01
	add	arg01, #488
	sub	local01, #32
	rdlong	arg02, local01
	wrlong	arg02, arg01
	add	local01, #32
	mov	arg01, local01
	add	arg01, #492
	sub	local01, #36
	rdlong	arg02, local01
	wrlong	arg02, arg01
	add	local01, #16
	rdlong	local04, local01
	add	local04, #1
	add	local01, #16
	wrlong	local04, local01
	sub	local01, #43
	rdbyte	arg01, local01
	add	local01, #47
	mov	local05, local01
	mov	local06, #1
	mov	arg02, local05
	mov	arg03, local04
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	mov	local07, #0
	sub	local01, #44
	wrbyte	#0, local01
	sub	local01, #4
LR__1024
	add	local01, #1
	rdbyte	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_fatfs_cc_disk_ioctl
	cmp	result1, #0 wz
 if_ne	mov	local02, #1
LR__1025
' 	}
' 
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_sync_fs_ret
	ret

_fatfs_cc_clst2sect
	sub	arg02, #2
	add	arg01, #20
	rdlong	_var01, arg01
	sub	arg01, #20
	sub	_var01, #2
	cmp	arg02, _var01 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#_fatfs_cc_clst2sect_ret
	add	arg01, #10
	rdword	_var01, arg01
	qmul	_var01, arg02
' 	return fs->database + (LBA_t)fs->csize * clst;
	add	arg01, #30
	rdlong	result1, arg01
	getqx	_var01
	add	result1, _var01
_fatfs_cc_clst2sect_ret
	ret

_fatfs_cc_get_fat
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	cmp	local02, #2 wc
 if_b	jmp	#LR__1026
	add	local03, #20
	rdlong	local04, local03
	sub	local03, #20
	mov	local05, local04
	cmp	local02, local05 wc
 if_b	jmp	#LR__1027
LR__1026
	mov	local06, #1
	jmp	#LR__1034
LR__1027
	neg	local06, #1
' 		val = 0xFFFFFFFF;
' 
' 		switch (fs->fs_type) {
	rdbyte	local07, local03
	sub	local07, #1
	fle	local07, #3
	jmprel	local07
LR__1028
	jmp	#LR__1029
	jmp	#LR__1030
	jmp	#LR__1031
	jmp	#LR__1032
LR__1029
	mov	local07, local02
	mov	local04, local02
	shr	local04, #1
	add	local07, local04
	mov	arg01, local03
	mov	local04, local07
	shr	local04, #9
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local04
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1033
	mov	local04, local07
	and	local04, #511
	add	local03, #48
	add	local04, local03
	rdbyte	local08, local04
	sub	local03, #48
	mov	arg01, local03
	add	local07, #1
	mov	local04, local07
	shr	local04, #9
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local04
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1033
	and	local07, #511
	add	local03, #48
	add	local07, local03
	rdbyte	local04, local07
	shl	local04, #8
	or	local08, local04
	test	local02, #1 wz
 if_ne	shr	local08, #4
 if_ne	mov	local05, local08
 if_e	zerox	local08, #11
 if_e	mov	local05, local08
	mov	local06, local05
' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
' 			break;
	jmp	#LR__1033
LR__1030
	mov	arg01, local03
	mov	local08, local02
	shr	local08, #8
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local08
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1033
	add	local03, #48
	shl	local02, #1
	and	local02, #511
	add	local03, local02
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, local03
	getword	local06, result1, #0
' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
' 			break;
	jmp	#LR__1033
LR__1031
	mov	arg01, local03
	mov	local09, local02
	shr	local09, #7
	add	local03, #32
	rdlong	arg02, local03
	sub	local03, #32
	add	arg02, local09
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1033
	add	local03, #48
	mov	arg01, local03
	shl	local02, #2
	and	local02, #511
	add	arg01, local02
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	local06, arg01
	bitl	local06, #124
' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
' 			break;
	jmp	#LR__1033
LR__1032
	mov	local06, #1
LR__1033
LR__1034
' 			val = 1;
' 		}
' 	}
' 
' 	return val;
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_fat_ret
	ret

_fatfs_cc_put_fat
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, #2
	cmp	local02, #2 wc
 if_b	jmp	#LR__1043
	add	local01, #20
	rdlong	local05, local01
	sub	local01, #20
	mov	local06, local05
	cmp	local02, local06 wc
 if_ae	jmp	#LR__1043
' 		switch (fs->fs_type) {
	rdbyte	local07, local01
	sub	local07, #1
	fle	local07, #3
	jmprel	local07
LR__1035
	jmp	#LR__1036
	jmp	#LR__1040
	jmp	#LR__1041
	jmp	#LR__1042
LR__1036
	mov	local08, local02
	mov	local05, local02
	shr	local05, #1
	add	local08, local05
	mov	arg01, local01
	mov	local09, local08
	shr	local09, #9
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local11, local10
	add	local11, local09
	mov	local05, local11
	mov	arg02, local05
	call	#_fatfs_cc_move_window
	mov	local06, result1
	mov	local04, local06 wz
 if_ne	jmp	#LR__1042
	add	local01, #48
	mov	local12, local01
	mov	local13, local08
	and	local13, #511
	add	local12, local13
	test	local02, #1 wz
	sub	local01, #48
	add	local08, #1
 if_e	jmp	#LR__1037
	rdbyte	local06, local12
	getnib	local06, local06, #0
	getbyte	local09, local03, #0
	shl	local09, #4
	or	local06, local09
	jmp	#LR__1038
LR__1037
	mov	local06, local03
LR__1038
	wrbyte	local06, local12
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
	mov	arg01, local01
	mov	local09, local08
	shr	local09, #9
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local11, local10
	add	local11, local09
	mov	local05, local11
	mov	arg02, local05
	call	#_fatfs_cc_move_window
	mov	local06, result1
	mov	local04, local06 wz
 if_ne	jmp	#LR__1042
	add	local01, #48
	mov	local12, local01
	mov	local11, local08
	and	local11, #511
	mov	local09, local11
	add	local12, local11
	mov	local05, local02
	and	local05, #1 wz
	sub	local01, #48
 if_ne	mov	local11, local03
 if_ne	shr	local11, #4
 if_ne	mov	local06, local11
 if_ne	jmp	#LR__1039
	rdbyte	local09, local12
	and	local09, #240
	getbyte	local10, local03, #1
	getnib	local10, local10, #0
	or	local09, local10
	mov	local06, local09
LR__1039
	wrbyte	local06, local12
	mov	local06, #1
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
' 			p = fs->win + bc %  ((UINT) 512 ) ;
' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__1042
LR__1040
	mov	arg01, local01
	mov	local09, local02
	shr	local09, #8
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local11, local10
	add	local11, local09
	mov	local05, local11
	mov	arg02, local05
	call	#_fatfs_cc_move_window
	mov	local06, result1
	mov	local04, local06 wz
 if_ne	jmp	#LR__1042
	add	local01, #48
	mov	local11, local01
	mov	local09, local02
	shl	local09, #1
	mov	local10, local09
	and	local10, #511
	mov	local13, local10
	mov	arg01, local11
	add	arg01, local13
	mov	local05, local03
	mov	arg02, local05
	wrword	arg02, arg01
	mov	local06, #1
	sub	local01, #45
	wrbyte	#1, local01
	sub	local01, #3
' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__1042
LR__1041
	mov	arg01, local01
	mov	local09, local02
	shr	local09, #7
	add	local01, #32
	rdlong	local10, local01
	sub	local01, #32
	mov	local11, local10
	add	local11, local09
	mov	local05, local11
	mov	arg02, local05
	call	#_fatfs_cc_move_window
	mov	local06, result1
	mov	local04, local06 wz
 if_ne	jmp	#LR__1042
	bitl	local03, #124
	add	local01, #48
	mov	arg01, local01
	mov	local14, local02
	shl	local14, #2
	and	local14, #511
	mov	local15, local14
	add	arg01, local14
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	and	result1, ##-268435456
	or	local03, result1
	mov	local11, local01
	mov	local09, local02
	shl	local09, #2
	mov	local10, local09
	and	local10, #511
	mov	local13, local10
	mov	arg01, local11
	add	arg01, local13
	mov	local05, local03
	mov	arg02, local05
	wrlong	arg02, arg01
	mov	local06, #1
	sub	local01, #45
	wrbyte	#1, local01
	sub	local01, #3
' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
' 			}
' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
' 			fs->wflag = 1;
' 			break;
LR__1042
LR__1043
' 		}
' 	}
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_put_fat_ret
	ret

_fatfs_cc_remove_chain
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local01
	cmp	local02, #2 wc
 if_b	jmp	#LR__1044
	add	local04, #20
	rdlong	result1, local04
	sub	local04, #20
	cmp	local02, result1 wc
 if_b	jmp	#LR__1045
LR__1044
	mov	result1, #2
	jmp	#LR__1050
LR__1045
	cmp	local03, #0 wz
 if_e	jmp	#LR__1046
	mov	arg01, local04
	mov	arg02, local03
	neg	arg03, #1
	call	#_fatfs_cc_put_fat
	mov	local05, result1 wz
 if_ne	mov	result1, local05
 if_ne	jmp	#LR__1050
LR__1046
' 	}
' 
' 
' 	do {
LR__1047
	mov	arg02, local02
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local06, result1 wz
 if_e	jmp	#LR__1049
	cmp	local06, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__1050
	cmp	local06, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1050
	mov	arg02, local02
	mov	arg01, local04
	mov	arg03, #0
	call	#_fatfs_cc_put_fat
	mov	local05, result1 wz
 if_ne	mov	result1, local05
 if_ne	jmp	#LR__1050
	add	local04, #20
	rdlong	local05, local04
	sub	local05, #2
	sub	local04, #4
	rdlong	local03, local04
	sub	local04, #16
	cmp	local03, local05 wc
 if_ae	jmp	#LR__1048
	add	local04, #16
	rdlong	local05, local04
	add	local05, #1
	wrlong	local05, local04
	sub	local04, #12
	rdbyte	local05, local04
	or	local05, #1
	wrbyte	local05, local04
	sub	local04, #4
LR__1048
	mov	local02, local06
	add	local04, #20
	rdlong	local05, local04
	sub	local04, #20
	cmp	local02, local05 wc
 if_b	jmp	#LR__1047
LR__1049
' #line 1500 "ff.c"
' 	return FR_OK;
	mov	result1, #0
LR__1050
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_remove_chain_ret
	ret

_fatfs_cc_create_chain
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	rdlong	local03, local01
 if_ne	jmp	#LR__1051
	add	local03, #12
	rdlong	local04, local03 wz
	sub	local03, #12
 if_ne	add	local03, #20
 if_ne	rdlong	local05, local03
 if_ne	sub	local03, #20
 if_ne	cmp	local04, local05 wc
 if_c_and_nz	jmp	#LR__1052
	mov	local04, #1
	jmp	#LR__1052
LR__1051
	mov	arg02, local02
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local06, result1
	cmp	local06, #2 wc
 if_b	mov	result1, #1
 if_b	jmp	#LR__1062
	cmp	local06, ##-1 wz
 if_e	mov	result1, local06
 if_e	jmp	#LR__1062
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local06, local05 wc
 if_b	mov	result1, local06
 if_b	jmp	#LR__1062
	mov	local04, local02
LR__1052
	add	local03, #16
	rdlong	local05, local03 wz
	sub	local03, #16
 if_e	mov	result1, #0
 if_e	jmp	#LR__1062
	mov	local07, #0
	cmp	local04, local02 wz
 if_ne	jmp	#LR__1055
	mov	local07, local04
	add	local07, #1
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local07, local05 wc
 if_ae	mov	local07, #2
	mov	arg02, local07
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local06, result1
	cmp	local06, #1 wz
 if_ne	cmp	local06, ##-1 wz
 if_e	mov	result1, local06
 if_e	jmp	#LR__1062
	cmp	local06, #0 wz
 if_e	jmp	#LR__1054
	add	local03, #12
	rdlong	local06, local03
	sub	local03, #12
	cmp	local06, #2 wc
 if_b	jmp	#LR__1053
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local06, local05 wc
 if_b	mov	local04, local06
LR__1053
	mov	local07, #0
LR__1054
LR__1055
	cmp	local07, #0 wz
 if_ne	jmp	#LR__1058
	mov	local07, local04
' 			ncl = scl;
' 			for (;;) {
LR__1056
	add	local07, #1
	add	local03, #20
	rdlong	local05, local03
	sub	local03, #20
	cmp	local07, local05 wc
 if_ae	mov	local07, #2
 if_ae	cmp	local07, local04 wcz
 if_a	mov	result1, #0
 if_a	jmp	#LR__1062
	mov	arg02, local07
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local06, result1 wz
 if_e	jmp	#LR__1057
	cmp	local06, #1 wz
 if_ne	cmp	local06, ##-1 wz
 if_e	mov	result1, local06
 if_e	jmp	#LR__1062
	cmp	local07, local04 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1062
	jmp	#LR__1056
LR__1057
LR__1058
	mov	arg01, local03
	mov	arg02, local07
	neg	arg03, #1
	call	#_fatfs_cc_put_fat
	mov	local08, result1 wz
 if_ne	jmp	#LR__1059
	cmp	local02, #0 wz
 if_e	jmp	#LR__1059
	mov	local09, local02
	mov	local10, local07
	mov	arg01, local03
	mov	arg02, local09
	mov	arg03, local10
	call	#_fatfs_cc_put_fat
	mov	local05, result1
	mov	local08, local05
LR__1059
	cmp	local08, #0 wz
 if_ne	jmp	#LR__1060
	add	local03, #12
	wrlong	local07, local03
	add	local03, #8
	rdlong	local05, local03
	sub	local05, #2
	sub	local03, #4
	rdlong	local10, local03
	sub	local03, #16
	cmp	local10, local05 wcz
 if_be	add	local03, #16
 if_be	rdlong	local10, local03
 if_be	sub	local10, #1
 if_be	wrlong	local10, local03
 if_be	sub	local03, #16
	add	local03, #4
	rdbyte	local05, local03
	or	local05, #1
	wrbyte	local05, local03
	jmp	#LR__1061
LR__1060
	cmp	local08, #1 wz
	negz	local07, #1
LR__1061
' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
' 	}
' 
' 	return ncl;
	mov	result1, local07
LR__1062
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_create_chain_ret
	ret

_fatfs_cc_dir_clear
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	call	#_fatfs_cc_sync_window
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1065
	mov	arg01, local01
	mov	arg02, local02
	call	#_fatfs_cc_clst2sect
	mov	local03, result1
	add	local01, #44
	wrlong	local03, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #9
	call	#\builtin_bytefill_
	mov	local04, local01
' #line 1667 "ff.c"
' 	{
' 		ibuf = fs->win; szb = 1;
' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
	mov	local05, #0
	sub	local01, #48
LR__1063
	add	local01, #10
	rdword	local06, local01
	sub	local01, #10
	cmp	local05, local06 wc
 if_ae	jmp	#LR__1064
	add	local01, #1
	rdbyte	arg01, local01
	sub	local01, #1
	mov	arg02, local04
	mov	arg03, local03
	add	arg03, local05
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	add	local05, #1
 if_e	jmp	#LR__1063
LR__1064
' 	}
' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
	add	local01, #10
	rdword	local04, local01
	cmp	local05, local04 wz
 if_e	mov	local06, #0
 if_ne	mov	local06, #1
	mov	result1, local06
LR__1065
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_clear_ret
	ret

_fatfs_cc_dir_sdi
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	cmp	local02, ##2097152 wc
 if_b	mov	local04, local02
 if_b	test	local04, #31 wz
' 		return FR_INT_ERR;
 if_nc_or_nz	mov	result1, #2
 if_nc_or_nz	jmp	#LR__1073
	add	local01, #16
	wrlong	local02, local01
	sub	local01, #8
	rdlong	local05, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__1066
	rdbyte	local04, local03
	cmp	local04, #3 wc
 if_ae	add	local03, #36
 if_ae	rdlong	local04, local03
 if_ae	sub	local03, #36
 if_ae	mov	local05, local04
LR__1066
	cmp	local05, #0 wz
 if_ne	jmp	#LR__1067
	mov	local04, local02
	shr	local04, #5
	add	local03, #8
	rdword	arg02, local03
	sub	local03, #8
	cmp	local04, arg02 wc
 if_ae	mov	result1, #2
 if_ae	jmp	#LR__1073
	add	local03, #36
	rdlong	local04, local03
	sub	local03, #36
	add	local01, #24
	wrlong	local04, local01
	sub	local01, #24
	jmp	#LR__1072
LR__1067
	add	local03, #10
	rdword	local06, local03
	sub	local03, #10
	shl	local06, #9
' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 		while (ofs >= csz) {
LR__1068
	cmp	local02, local06 wc
 if_b	jmp	#LR__1071
	mov	arg01, local01
	mov	arg02, local05
	call	#_fatfs_cc_get_fat
	mov	local05, result1
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1073
	cmp	local05, #2 wc
 if_b	jmp	#LR__1069
	add	local03, #20
	rdlong	local04, local03
	sub	local03, #20
	cmp	local05, local04 wc
 if_b	jmp	#LR__1070
LR__1069
	mov	result1, #2
	jmp	#LR__1073
LR__1070
	sub	local02, local06
	jmp	#LR__1068
LR__1071
	mov	arg01, local03
	mov	arg02, local05
	call	#_fatfs_cc_clst2sect
	add	local01, #24
	wrlong	result1, local01
	sub	local01, #24
LR__1072
	add	local01, #20
	wrlong	local05, local01
	add	local01, #4
	rdlong	local04, local01 wz
	sub	local01, #24
 if_e	mov	result1, #2
 if_e	jmp	#LR__1073
	mov	result1, local02
	shr	result1, #9
	add	local01, #24
	rdlong	local04, local01
	add	local04, result1
	wrlong	local04, local01
	add	local03, #48
	mov	local04, local03
	and	local02, #511
	add	local04, local02
	add	local01, #4
	wrlong	local04, local01
' 	dp->sect += ofs /  ((UINT) 512 ) ;
' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
' 
' 	return FR_OK;
	mov	result1, #0
LR__1073
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_sdi_ret
	ret

_fatfs_cc_dir_next
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	add	local01, #16
	rdlong	local04, local01
	sub	local01, #16
	add	local04, #32
	cmp	local04, ##2097152 wc
 if_ae	add	local01, #24
 if_ae	wrlong	#0, local01
 if_ae	sub	local01, #24
	add	local01, #24
	rdlong	arg02, local01 wz
	sub	local01, #24
 if_e	mov	result1, #4
 if_e	jmp	#LR__1079
	test	local04, #511 wz
 if_ne	jmp	#LR__1078
	add	local01, #24
	rdlong	arg02, local01
	add	arg02, #1
	wrlong	arg02, local01
	sub	local01, #4
	rdlong	arg02, local01 wz
	sub	local01, #20
 if_ne	jmp	#LR__1074
	mov	arg02, local04
	shr	arg02, #5
	add	local03, #8
	rdword	local02, local03
	sub	local03, #8
	cmp	arg02, local02 wc
 if_ae	add	local01, #24
 if_ae	wrlong	#0, local01
' 				dp->sect = 0; return FR_NO_FILE;
 if_ae	mov	result1, #4
 if_ae	jmp	#LR__1079
	jmp	#LR__1077
LR__1074
	mov	arg01, local04
	shr	arg01, #9
	add	local03, #10
	rdword	arg02, local03
	sub	local03, #10
	sub	arg02, #1
	test	arg01, arg02 wz
 if_ne	jmp	#LR__1076
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_fatfs_cc_get_fat
	mov	local05, result1
	cmp	local05, #2 wc
 if_b	mov	result1, #2
 if_b	jmp	#LR__1079
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1079
	add	local03, #20
	rdlong	arg02, local03
	sub	local03, #20
	cmp	local05, arg02 wc
 if_b	jmp	#LR__1075
	cmp	local02, #0 wz
 if_e	add	local01, #24
 if_e	wrlong	#0, local01
' 						dp->sect = 0; return FR_NO_FILE;
 if_e	mov	result1, #4
 if_e	jmp	#LR__1079
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_fatfs_cc_create_chain
	mov	local05, result1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__1079
	cmp	local05, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__1079
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1079
	mov	arg02, local05
	mov	arg01, local03
	call	#_fatfs_cc_dir_clear
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1079
LR__1075
	add	local01, #20
	wrlong	local05, local01
	mov	arg01, local03
	mov	arg02, local05
	call	#_fatfs_cc_clst2sect
	add	local01, #4
	wrlong	result1, local01
	sub	local01, #24
LR__1076
LR__1077
LR__1078
	add	local01, #16
	wrlong	local04, local01
	add	local03, #48
	and	local04, #511
	add	local03, local04
	add	local01, #12
	wrlong	local03, local01
' #line 1771 "ff.c"
' 				}
' 				dp->clust = clst;
' 				dp->sect = clst2sect(fs, clst);
' 			}
' 		}
' 	}
' 	dp->dptr = ofs;
' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
' 
' 	return FR_OK;
	mov	result1, #0
LR__1079
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_next_ret
	ret

_fatfs_cc_dir_alloc
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	mov	local04, result1 wz
 if_ne	jmp	#LR__1085
	mov	local05, #0
' 		n = 0;
' 		do {
LR__1080
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local03
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__1084
	add	local01, #28
	rdlong	local06, local01
	sub	local01, #28
	rdbyte	local07, local06
	cmp	local07, #229 wz
 if_e	jmp	#LR__1081
	add	local01, #28
	rdlong	local08, local01
	sub	local01, #28
	mov	local09, local08
	rdbyte	local10, local09 wz
 if_ne	jmp	#LR__1082
LR__1081
	add	local05, #1
	cmp	local05, local02 wz
 if_e	jmp	#LR__1084
	jmp	#LR__1083
LR__1082
	mov	local05, #0
LR__1083
	mov	local11, #1
	mov	arg01, local01
	mov	arg02, #1
	call	#_fatfs_cc_dir_next
	mov	local07, result1
	mov	local04, local07 wz
 if_e	jmp	#LR__1080
LR__1084
LR__1085
	cmp	local04, #4 wz
 if_e	mov	local04, #7
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_alloc_ret
	ret

_fatfs_cc_ld_clust
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	add	arg01, #26
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	arg01, result1, #0
	rdbyte	local01, local01
	cmp	local01, #3 wz
 if_e	add	arg02, #20
' {
' 
' 	return *((WORD*)ptr);
 if_e	rdword	result1, arg02
 if_e	shl	result1, #16
 if_e	or	arg01, result1
' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
' 	}
' 
' 	return cl;
	mov	result1, arg01
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_ld_clust_ret
	ret

_fatfs_cc_st_clust
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	add	arg01, #26
	wrword	arg03, arg01
	rdbyte	local01, local01
	cmp	local01, #3 wz
 if_e	add	arg02, #20
 if_e	shr	arg03, #16
 if_e	wrword	arg03, arg02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_st_clust_ret
	ret

_fatfs_cc_dir_read
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #4
	rdlong	local04, local01
' )
' {
' 	FRESULT res = FR_NO_FILE;
' 	FATFS *fs = dp->obj.fs;
' 	BYTE attr, b;
' #line 2303 "ff.c"
' 	while (dp->sect) {
LR__1086
	add	local01, #24
	rdlong	result1, local01 wz
	sub	local01, #24
 if_e	jmp	#LR__1088
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local04
	call	#_fatfs_cc_move_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__1088
	add	local01, #28
	rdlong	local05, local01
	sub	local01, #28
	rdbyte	local06, local05
	mov	local05, local06
	zerox	local05, #7 wz
 if_e	mov	local03, #4
' 			res = FR_NO_FILE; break;
 if_e	jmp	#LR__1088
	add	local01, #28
	rdlong	local07, local01
	add	local07, #11
	rdbyte	local08, local07
	and	local08, #63
	sub	local01, #22
	wrbyte	local08, local01
	sub	local01, #6
	getbyte	local05, local06, #0
	cmp	local05, #229 wz
 if_e	jmp	#LR__1087
	getbyte	local07, local06, #0
	cmp	local07, #46 wz
 if_e	jmp	#LR__1087
	getbyte	local09, local08, #0
	cmp	local09, #15 wz
 if_e	jmp	#LR__1087
	mov	local10, #0
	getbyte	local11, local08, #0
	andn	local11, #32
	cmp	local11, #8 wz
 if_e	mov	local10, #1
	cmp	local10, local02 wz
' 				break;
 if_e	jmp	#LR__1088
LR__1087
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	mov	local03, result1 wz
 if_e	jmp	#LR__1086
LR__1088
	cmp	local03, #0 wz
 if_ne	add	local01, #24
 if_ne	wrlong	#0, local01
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_read_ret
	ret

_fatfs_cc_dir_find
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1092
' #line 2406 "ff.c"
' 	do {
LR__1089
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_fatfs_cc_move_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__1091
	add	local01, #28
	rdlong	result1, local01
	sub	local01, #28
	rdbyte	local04, result1
	mov	result1, local04
	zerox	result1, #7 wz
 if_e	mov	local03, #4
 if_e	jmp	#LR__1091
	add	local01, #28
	rdlong	result1, local01
	add	result1, #11
	rdbyte	result1, result1
	and	result1, #63
	sub	local01, #22
	wrbyte	result1, local01
	add	local01, #22
	rdlong	local05, local01
	sub	local01, #28
	mov	arg02, local05
	add	arg02, #11
	rdbyte	local06, arg02
	getbyte	result1, local06, #0
	test	result1, #8 wz
 if_ne	jmp	#LR__1090
	add	local01, #28
	rdlong	arg01, local01
	add	local01, #4
	mov	local07, local01
	mov	local08, #11
	mov	arg02, local07
	mov	arg03, #11
	call	#_fatfs_cc_memcmp
	mov	local09, result1 wz
	sub	local01, #32
 if_e	jmp	#LR__1091
LR__1090
	mov	local10, #0
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	mov	local11, result1
	mov	local03, local11 wz
 if_e	jmp	#LR__1089
LR__1091
' 
' 	return res;
	mov	result1, local03
LR__1092
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_find_ret
	ret

_fatfs_cc_dir_register
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	mov	arg02, #1
	call	#_fatfs_cc_dir_alloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__1094
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_fatfs_cc_move_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__1093
	add	local01, #28
	rdlong	arg01, local01
	mov	arg02, #0
	mov	arg03, #32
	call	#\builtin_bytefill_
	rdlong	arg01, local01
	add	local01, #4
	mov	arg02, local01
	mov	arg03, #11
	call	#__system____builtin_memmove
	add	local02, #3
	wrbyte	#1, local02
LR__1093
LR__1094
' 			__builtin_memset(dp->dir, 0, 32 ) ;
' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
' #line 2540 "ff.c"
' 			fs->wflag = 1;
' 		}
' 	}
' 
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_register_ret
	ret

_fatfs_cc_dir_remove
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_fatfs_cc_move_window
	cmps	result1, #0 wz
 if_e	add	local01, #28
 if_e	rdlong	local01, local01
 if_e	wrbyte	#229, local01
 if_e	add	local02, #3
 if_e	wrbyte	#1, local02
' 		dp->dir[ 0 ] =  0xE5 ;
' 		fs->wflag = 1;
' 	}
' 
' 
' 	return res;
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_remove_ret
	ret

_fatfs_cc_get_fileinfo
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local02, #12
	wrbyte	#0, local02
	sub	local02, #12
	add	local01, #24
	rdlong	local03, local01
	sub	local01, #24
	mov	local04, local03 wz
 if_e	jmp	#LR__1098
	mov	local05, #0
	mov	local06, #0
' #line 2708 "ff.c"
' 	si = di = 0;
' 	while (si < 11) {
LR__1095
	cmp	local06, #11 wc
 if_ae	jmp	#LR__1097
	add	local01, #28
	rdlong	local04, local01
	sub	local01, #28
	mov	local03, local06
	add	local03, local04
	rdbyte	local07, local03
	getbyte	local04, local07, #0
	cmp	local04, #32 wz
	add	local06, #1
 if_e	jmp	#LR__1095
	getbyte	local04, local07, #0
	cmp	local04, #5 wz
 if_e	mov	local07, #229
	cmp	local06, #9 wz
 if_ne	jmp	#LR__1096
	mov	local04, local05
	add	local02, #12
	add	local04, local02
	wrbyte	#46, local04
	add	local05, #1
	sub	local02, #12
LR__1096
	mov	local04, local05
	add	local02, #12
	add	local04, local02
	wrbyte	local07, local04
	add	local05, #1
	sub	local02, #12
	jmp	#LR__1095
LR__1097
	add	local02, #12
	add	local05, local02
	wrbyte	#0, local05
	add	local01, #28
	rdlong	local03, local01
	add	local03, #11
	rdbyte	local04, local03
	and	local04, #63
	sub	local02, #4
	wrbyte	local04, local02
	sub	local02, #8
	rdlong	arg01, local01
	add	arg01, #28
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	wrlong	result1, local02
	rdlong	arg01, local01
	add	arg01, #22
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	add	local02, #6
	wrword	result1, local02
	rdlong	arg01, local01
	add	arg01, #24
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	sub	local02, #2
	wrword	result1, local02
LR__1098
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_fileinfo_ret
	ret

_fatfs_cc_create_name
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local01, #32
	mov	local04, local01
	mov	arg01, local04
	mov	arg02, #32
	mov	arg03, #11
	mov	local05, arg01
	call	#\builtin_bytefill_
	mov	result1, local05
	mov	local06, #0
	mov	local07, #0
	mov	local08, #8
' 
' 
' 	p = *path; sfn = dp->fn;
' 	__builtin_memset(sfn, ' ', 11) ;
' 	si = i = 0; ni = 8;
' #line 2970 "ff.c"
' 	for (;;) {
	sub	local01, #32
LR__1099
	mov	local01, local07
	add	local01, local03
	rdbyte	local09, local01
	getbyte	local01, local09, #0
	cmp	local01, #33 wc
	add	local07, #1
 if_b	jmp	#LR__1107
	getbyte	local01, local09, #0
	cmp	local01, #47 wz
 if_ne	mov	local10, local09
 if_ne	getbyte	local10, local10, #0
 if_ne	cmp	local10, #92 wz
 if_ne	jmp	#LR__1101
' 			while ( ((p[si]) == '/' || (p[si]) == '\\') ) si++;
LR__1100
	mov	local10, local07
	add	local10, local03
	rdbyte	local10, local10
	cmp	local10, #47 wz
 if_ne	mov	local11, local07
 if_ne	add	local11, local03
 if_ne	rdbyte	local12, local11
 if_ne	cmp	local12, #92 wz
 if_ne	jmp	#LR__1107
	add	local07, #1
	jmp	#LR__1100
' 			break;
LR__1101
	getbyte	local01, local09, #0
	cmp	local01, #46 wz
 if_ne	cmp	local06, local08 wc
 if_c_and_nz	jmp	#LR__1104
	cmp	local08, #11 wz
 if_e	jmp	#LR__1102
	getbyte	local09, local09, #0
	cmp	local09, #46 wz
 if_e	jmp	#LR__1103
LR__1102
	mov	result1, #6
	jmp	#LR__1108
LR__1103
	mov	local06, #8
	mov	local08, #11
' 			i = 8; ni = 11;
' 			continue;
	jmp	#LR__1099
LR__1104
	getbyte	local01, local09, #0
	cmp	local01, #128 wc
 if_ae	getbyte	local09, local09, #0
 if_ae	and	local09, #127
 if_ae	add	local09, ptr__fatfs_cc_dat__
 if_ae	rdbyte	local09, local09
	mov	arg01, local09
	zerox	arg01, #7 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmp	result1, #0 wz
 if_e	jmp	#LR__1105
	mov	local01, local07
	mov	local12, local03
	add	local01, local03
	rdbyte	local13, local01
	mov	arg01, local13
	zerox	arg01, #7 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmps	result1, #0 wz
	add	local07, #1
 if_ne	mov	local10, local08
 if_ne	sub	local10, #1
 if_ne	cmp	local06, local10 wc
 if_nc_or_z	mov	result1, #6
 if_nc_or_z	jmp	#LR__1108
	mov	local01, local06
	add	local01, local04
	wrbyte	local09, local01
	add	local06, #1
	mov	local09, local06
	add	local09, local04
	wrbyte	local13, local09
	add	local06, #1
	jmp	#LR__1099
LR__1105
	mov	arg01, ##@LR__2279
	getbyte	arg02, local09, #0
	call	#_fatfs_cc_strchr
	cmp	result1, #0 wz
 if_ne	mov	result1, #6
 if_ne	jmp	#LR__1108
	getbyte	local14, local09, #0
	cmp	local14, #97 wc
 if_b	jmp	#LR__1106
	getbyte	local10, local09, #0
	cmp	local10, #123 wc
 if_b	mov	local14, local09
 if_b	getbyte	local14, local14, #0
 if_b	sub	local14, #32
 if_b	mov	local09, local14
LR__1106
	mov	local15, local06
	add	local15, local04
	wrbyte	local09, local15
	add	local06, #1
	jmp	#LR__1099
LR__1107
	mov	local15, local07
	add	local15, local03
	wrlong	local15, local02
	cmp	local06, #0 wz
 if_e	mov	result1, #6
 if_e	jmp	#LR__1108
	rdbyte	local14, local04
	cmp	local14, #229 wz
 if_e	wrbyte	#5, local04
	getbyte	local10, local09, #0
	cmp	local10, #33 wc
 if_ae	add	local07, local03
 if_ae	rdbyte	local15, local07
 if_ae	cmp	local15, #33 wc
 if_b	mov	local14, #4
 if_ae	mov	local14, #0
	add	local04, #11
	wrbyte	local14, local04
' 	sfn[ 11 ] = (c <= ' ' || p[si] <= ' ') ?  0x04  : 0;
' 
' 	return FR_OK;
	mov	result1, #0
LR__1108
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_create_name_ret
	ret

_fatfs_cc_follow_path
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	result1, fp
	rdlong	local01, result1
	add	fp, #16
	wrlong	local01, fp
	sub	fp, #20
	loc	pa,	#(@LR__1111-@LR__1109)
	call	#FCACHE_LOAD_
' )
' {
' 	FRESULT res;
' 	BYTE ns;
' 	FATFS *fs = dp->obj.fs;
' #line 3034 "ff.c"
' 	{
' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
LR__1109
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #47 wz
 if_e	jmp	#LR__1110
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #92 wz
 if_ne	jmp	#LR__1112
LR__1110
	add	fp, #8
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #8
	jmp	#LR__1109
LR__1111
LR__1112
	add	fp, #4
	rdlong	local01, fp
	add	local01, #8
	wrlong	#0, local01
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #32 wc
 if_ae	jmp	#LR__1113
	add	fp, #4
	rdlong	local01, fp
	add	local01, #43
	wrbyte	#128, local01
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__1117
LR__1113
' 		for (;;) {
LR__1114
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_create_name
	add	fp, #12
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #12
 if_ne	jmp	#LR__1116
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	call	#_fatfs_cc_dir_find
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #43
	rdbyte	local01, local01
	add	fp, #12
	wrbyte	local01, fp
	sub	fp, #4
	rdlong	local01, fp wz
	sub	fp, #12
 if_e	jmp	#LR__1115
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_ne	jmp	#LR__1116
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
' 					}
' 				}
' 				break;
	jmp	#LR__1116
LR__1115
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #4 wz
 if_ne	jmp	#LR__1116
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #6
	rdbyte	arg02, arg02
	test	arg02, #16 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
' 				res = FR_NO_PATH; break;
 if_e	jmp	#LR__1116
	add	fp, #4
	rdlong	local02, fp
	mov	local03, local02
	add	fp, #16
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #48
	sub	fp, #20
	add	local02, #16
	rdlong	local04, local02
	and	local04, #511
	add	arg02, local04
	call	#_fatfs_cc_ld_clust
	add	local03, #8
	wrlong	result1, local03
	jmp	#LR__1114
LR__1116
LR__1117
' 			}
' #line 3090 "ff.c"
' 			{
' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
' 			}
' 		}
' 	}
' 
' 	return res;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_follow_path_ret
	ret

_fatfs_cc_get_ldnumber
	mov	_var01, arg01
	neg	_var02, #1
	rdlong	_var03, _var01 wz
	mov	_var04, _var03
 if_e	neg	result1, #1
 if_e	jmp	#_fatfs_cc_get_ldnumber_ret
	loc	pa,	#(@LR__1119-@LR__1118)
	call	#FCACHE_LOAD_
' 	do tc = *tt++; while (! ((UINT)(tc) < ( 0 ? ' ' : '!'))  && tc != ':');
LR__1118
	rdbyte	_var05, _var04
	getbyte	_var06, _var05, #0
	cmp	_var06, #33 wc
	add	_var04, #1
 if_ae	mov	_var07, _var05
 if_ae	getbyte	_var07, _var07, #0
 if_ae	cmp	_var07, #58 wz
 if_a	jmp	#LR__1118
LR__1119
	getbyte	_var06, _var05, #0
	cmp	_var06, #58 wz
 if_ne	jmp	#LR__1121
	mov	_var08, #1
	rdbyte	_var06, _var03
	cmp	_var06, #48 wc
 if_b	jmp	#LR__1120
	rdbyte	_var07, _var03
	cmp	_var07, #58 wc
 if_ae	jmp	#LR__1120
	mov	_var09, _var03
	add	_var09, #2
	cmp	_var09, _var04 wz
 if_e	rdbyte	_var06, _var03
 if_e	sub	_var06, #48
 if_e	mov	_var08, _var06
LR__1120
	cmps	_var08, #1 wc
 if_b	mov	_var02, _var08
 if_b	wrlong	_var04, _var01
' 			vol = i;
' 			*path = tt;
' 		}
' 		return vol;
	mov	result1, _var02
	jmp	#_fatfs_cc_get_ldnumber_ret
LR__1121
' 	}
' #line 3170 "ff.c"
' 	vol = 0;
' 
' 	return vol;
	mov	result1, #0
_fatfs_cc_get_ldnumber_ret
	ret

_fatfs_cc_check_fs
	mov	COUNT_, #23
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #41
	wrlong	##-1, local01
	sub	local01, #44
	mov	arg02, local02
	mov	arg01, local01
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	mov	result1, #4
 if_ne	jmp	#LR__1127
	add	local01, #48
	mov	arg01, local01
	add	arg01, #510
' {
' 
' 	return *((WORD*)ptr);
	rdword	local03, arg01
	rdbyte	local04, local01
	sub	local01, #48
	getbyte	local05, local04, #0
	cmp	local05, #235 wz
 if_e	jmp	#LR__1122
	getbyte	result1, local04, #0
	cmp	result1, #233 wz
 if_ne	mov	local06, local04
 if_ne	getbyte	local06, local06, #0
 if_ne	cmp	local06, #232 wz
 if_ne	jmp	#LR__1126
LR__1122
	getword	local05, local03, #0
	cmp	local05, ##43605 wz
 if_ne	jmp	#LR__1123
	add	local01, #48
	mov	arg01, local01
	sub	local01, #48
	add	arg01, #82
	mov	arg02, ##@LR__2280
	mov	arg03, #8
	call	#_fatfs_cc_memcmp
	cmp	result1, #0 wz
' 			return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1127
LR__1123
	add	local01, #48
	mov	arg01, local01
	add	arg01, #11
' {
' 
' 	return *((WORD*)ptr);
	rdword	local07, arg01
	add	local01, #13
	rdbyte	local04, local01
	sub	local01, #61
	getword	local05, local07, #0
	getword	local08, local07, #0
	sub	local08, #1
	and	local05, local08 wz
 if_ne	jmp	#LR__1125
	getword	local06, local07, #0
	cmp	local06, ##512 wc
 if_b	jmp	#LR__1125
	getword	local09, local07, #0
	cmp	local09, ##513 wc
 if_ae	jmp	#LR__1125
	mov	local10, local04
	zerox	local10, #7 wz
 if_e	jmp	#LR__1125
	getbyte	local11, local04, #0
	getbyte	local12, local04, #0
	sub	local12, #1
	and	local11, local12 wz
 if_ne	jmp	#LR__1125
	add	local01, #48
	mov	arg01, local01
	sub	local01, #48
	add	arg01, #14
' {
' 
' 	return *((WORD*)ptr);
	rdword	local13, arg01
	mov	local14, local13
	zerox	local14, #15 wz
 if_e	jmp	#LR__1125
	add	local01, #64
	rdbyte	local15, local01
	sub	local01, #64
	getbyte	local16, local15, #0
	sub	local16, #1
	cmp	local16, #2 wc
 if_ae	jmp	#LR__1125
	add	local01, #48
	mov	arg01, local01
	sub	local01, #48
	add	arg01, #17
' {
' 
' 	return *((WORD*)ptr);
	rdword	local17, arg01
	mov	local18, local17
	zerox	local18, #15 wz
 if_e	jmp	#LR__1125
	add	local01, #48
	mov	arg01, local01
	sub	local01, #48
	add	arg01, #19
' {
' 
' 	return *((WORD*)ptr);
	rdword	local19, arg01
	getword	local20, local19, #0
	cmp	local20, #128 wc
 if_ae	jmp	#LR__1124
	add	local01, #48
	mov	local21, local01
	mov	local22, local21
	add	local22, #32
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	local23, local22
	cmp	local23, ##65536 wc
	sub	local01, #48
 if_b	jmp	#LR__1125
LR__1124
	add	local01, #48
	mov	arg01, local01
	add	arg01, #22
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
' 			&& b != 0 && (b & (b - 1)) == 0
' 			&& ld_word(fs->win +  14 ) != 0
' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
' 			&& ld_word(fs->win +  17 ) != 0
' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
' 			&& ld_word(fs->win +  22 ) != 0) {
' 				return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1127
LR__1125
LR__1126
' 		}
' 	}
' 	return sign == 0xAA55 ? 2 : 3;
	getword	local08, local03, #0
	cmp	local08, ##43605 wz
 if_e	mov	local05, #2
 if_ne	mov	local05, #3
	mov	result1, local05
LR__1127
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_check_fs_ret
	ret

_fatfs_cc_find_volume
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #36
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_check_fs
	mov	local03, result1
	mov	local04, local03
	cmp	local04, #2 wz
 if_e	jmp	#LR__1128
	cmp	local04, #3 wc
 if_b	cmp	local02, #0 wz
 if_nc_or_z	mov	result1, local04
 if_nc_or_z	jmp	#LR__1136
LR__1128
' 	for (i = 0; i < 4; i++) {
	mov	local05, #0
	loc	pa,	#(@LR__1130-@LR__1129)
	call	#FCACHE_LOAD_
LR__1129
	cmp	local05, #4 wc
 if_ae	jmp	#LR__1131
	mov	local03, local05
	shl	local03, #2
	add	fp, #20
	add	local03, fp
	add	local01, #48
	mov	local06, local01
	mov	arg01, local06
	add	arg01, #446
	mov	local07, local05
	shl	local07, #4
	mov	local08, local07
	add	arg01, local07
	add	arg01, #8
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	fp, #20
	wrlong	result1, local03
	add	local05, #1
	sub	local01, #48
	jmp	#LR__1129
LR__1130
LR__1131
	cmp	local02, #0 wz
 if_ne	mov	local03, local02
 if_ne	sub	local03, #1
 if_e	mov	local03, #0
	mov	local05, local03
' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
' 	}
' 	i = part ? part - 1 : 0;
' 	do {
LR__1132
	mov	local09, local05
	shl	local09, #2
	add	fp, #20
	mov	local10, fp
	add	local09, fp
	rdlong	local11, local09 wz
	sub	fp, #20
 if_e	jmp	#LR__1133
	mov	local08, local05
	shl	local08, #2
	add	fp, #20
	mov	local12, fp
	add	local08, fp
	rdlong	local07, local08
	mov	arg01, local01
	mov	arg02, local07
	sub	fp, #20
	call	#_fatfs_cc_check_fs
	mov	local06, result1
	mov	local03, local06
	jmp	#LR__1134
LR__1133
	mov	local03, #3
LR__1134
	mov	local04, local03
	cmp	local02, #0 wz
 if_ne	jmp	#LR__1135
	cmp	local04, #2 wc
 if_b	jmp	#LR__1135
	mov	local03, local05
	add	local03, #1
	mov	local05, local03
	cmp	local05, #4 wc
 if_b	jmp	#LR__1132
LR__1135
' 	return fmt;
	mov	result1, local04
LR__1136
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_find_volume_ret
	ret

_fatfs_cc_mount_volume
	mov	COUNT_, #24
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	wrlong	#0, local02
	mov	arg01, local01
	call	#_fatfs_cc_get_ldnumber
	mov	local04, result1
	cmps	local04, #0 wc
 if_b	mov	result1, #11
 if_b	jmp	#LR__1148
	mov	arg01, local04
	shl	arg01, #2
	add	arg01, objptr
	rdlong	local05, arg01 wz
 if_e	mov	result1, #12
 if_e	jmp	#LR__1148
	wrlong	local05, local02
	getbyte	local03, local03, #0
	and	local03, #254
	rdbyte	arg01, local05 wz
 if_e	jmp	#LR__1138
	add	local05, #1
	rdbyte	arg01, local05 wz
	sub	local05, #1
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, #24
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, #24
	getbyte	arg01, result1, #0
	test	arg01, #1 wz
 if_ne	jmp	#LR__1137
	cmp	local03, #0 wz
 if_ne	getbyte	result1, result1, #0
 if_ne	and	result1, #4 wz
' 				return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__1148
' 			}
' 			return FR_OK;
	mov	result1, #0
	jmp	#LR__1148
LR__1137
LR__1138
	wrbyte	#0, local05
	add	local05, #1
	wrbyte	local04, local05
	rdbyte	arg01, local05
	sub	local05, #1
	call	#_fatfs_cc_disk_initialize
	mov	local06, result1
	getbyte	local07, local06, #0
	test	local07, #1 wz
' 		return FR_NOT_READY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1148
	cmp	local03, #0 wz
 if_ne	getbyte	local07, local06, #0
 if_ne	test	local07, #4 wz
' 		return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__1148
	mov	arg01, local05
	mov	arg02, #0
	call	#_fatfs_cc_find_volume
	mov	arg01, result1
	cmp	arg01, #4 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1148
	cmp	arg01, #2 wc
 if_ae	mov	result1, #13
 if_ae	jmp	#LR__1148
	add	local05, #44
	rdlong	local08, local05
	add	local05, #4
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #11
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	cmp	result1, ##512 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1148
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #22
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local09, result1
	zerox	local09, #15 wz
 if_ne	jmp	#LR__1139
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #36
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	mov	local09, result1
LR__1139
	add	local05, #24
	wrlong	local09, local05
	add	local05, #40
	rdbyte	local07, local05
	sub	local05, #62
	wrbyte	local07, local05
	rdbyte	local07, local05
	sub	local05, #2
	cmp	local07, #1 wz
 if_e	jmp	#LR__1140
	add	local05, #2
	rdbyte	local07, local05
	sub	local05, #2
	cmp	local07, #2 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1148
LR__1140
	add	local05, #2
	rdbyte	local07, local05
	qmul	local09, local07
	add	local05, #59
	rdbyte	local07, local05
	sub	local05, #51
	wrword	local07, local05
	rdword	local07, local05
	sub	local05, #10
	zerox	local07, #15 wz
	getqx	local09
 if_e	jmp	#LR__1141
	add	local05, #10
	rdword	local10, local05
	getword	local07, local10, #0
	sub	local05, #10
	getword	result1, local10, #0
	sub	result1, #1
	test	local07, result1 wz
 if_e	jmp	#LR__1142
LR__1141
	mov	result1, #13
	jmp	#LR__1148
LR__1142
	add	local05, #48
	mov	arg01, local05
	add	arg01, #17
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	sub	local05, #40
	wrword	result1, local05
	rdword	local07, local05
	sub	local05, #8
	abs	arg01, local07 wc
	getnib	arg01, arg01, #0
	negc	arg01, arg01 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1148
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #19
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local11, result1 wz
 if_e	add	local05, #48
 if_e	mov	arg01, local05
 if_e	sub	local05, #48
 if_e	add	arg01, #32
' {
' 
' 	return *((DWORD*)ptr);
 if_e	rdlong	local11, arg01
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #14
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local12, result1
	mov	local07, local12
	zerox	local07, #15 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1148
	getword	local13, local12, #0
	add	local13, local09
	add	local05, #8
	rdword	local07, local05
	sub	local05, #8
	abs	local07, local07 wc
	shr	local07, #4
	negc	local07, local07
	add	local13, local07
	cmp	local11, local13 wc
 if_b	mov	result1, #13
 if_b	jmp	#LR__1148
	mov	local07, local11
	sub	local07, local13
	add	local05, #10
	rdword	arg01, local05
	qdiv	local07, arg01
	sub	local05, #10
	getqx	local14
	cmp	local14, #0 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1148
	mov	local15, #0
	cmp	local14, ##268435446 wc
 if_b	mov	local15, #3
	cmp	local14, ##65526 wc
 if_b	mov	local15, #2
	cmp	local14, ##4086 wc
 if_b	mov	local15, #1
	cmp	local15, #0 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1148
	mov	local07, local14
	add	local07, #2
	add	local05, #20
	wrlong	local07, local05
	add	local05, #8
	wrlong	local08, local05
	mov	local07, local08
	getword	arg02, local12, #0
	add	local07, arg02
	add	local05, #4
	wrlong	local07, local05
	mov	local07, local08
	add	local07, local13
	add	local05, #8
	wrlong	local07, local05
	sub	local05, #40
	cmp	local15, #3 wz
 if_ne	jmp	#LR__1143
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #42
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1148
	add	local05, #8
	rdword	local07, local05
	sub	local05, #8
	zerox	local07, #15 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1148
	add	local05, #48
	mov	arg01, local05
	add	arg01, #44
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	local05, #12
	wrlong	result1, local05
	sub	local05, #16
	rdlong	local16, local05
	sub	local05, #20
	shl	local16, #2
	jmp	#LR__1145
LR__1143
	add	local05, #8
	rdword	local07, local05
	sub	local05, #8
	zerox	local07, #15 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1148
	add	local05, #32
	rdlong	local07, local05
	add	local07, local09
	add	local05, #4
	wrlong	local07, local05
	sub	local05, #36
	cmp	local15, #2 wz
 if_e	add	local05, #20
 if_e	rdlong	local07, local05
 if_e	sub	local05, #20
 if_e	shl	local07, #1
 if_e	jmp	#LR__1144
	add	local05, #20
	rdlong	local17, local05
	mov	local18, local17
	mov	local10, local18
	shl	local10, #1
	add	local10, local18
	mov	local07, local10
	shr	local07, #1
	mov	local19, local17
	sub	local05, #20
	mov	local20, local19
	and	local20, #1
	add	local07, local20
LR__1144
	mov	local16, local07
LR__1145
	mov	local07, local16
	add	local07, #511
	shr	local07, #9
	add	local05, #24
	rdlong	arg02, local05
	sub	local05, #24
	cmp	arg02, local07 wc
 if_b	mov	result1, #13
 if_b	jmp	#LR__1148
	add	local05, #16
	wrlong	##-1, local05
	sub	local05, #4
	wrlong	##-1, local05
	sub	local05, #8
	wrbyte	#128, local05
	sub	local05, #4
	cmp	local15, #3 wz
 if_ne	jmp	#LR__1147
	add	local05, #48
	mov	arg01, local05
	sub	local05, #48
	add	arg01, #48
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	local07, result1, #0
	cmp	local07, #1 wz
 if_ne	jmp	#LR__1147
	mov	local21, local08
	add	local21, #1
	mov	arg01, local05
	mov	arg02, local21
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1147
	add	local05, #4
	wrbyte	#0, local05
	add	local05, #44
	mov	local22, local05
	mov	local23, local22
	add	local23, #510
	mov	arg01, local23
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local24, result1
	getword	local07, local24, #0
	cmp	local07, ##43605 wz
	sub	local05, #48
 if_ne	jmp	#LR__1146
	add	local05, #48
	mov	local21, local05
	mov	local22, local21
	mov	arg01, local22
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	mov	local23, result1
	cmp	local23, ##1096897106 wz
	sub	local05, #48
 if_ne	jmp	#LR__1146
	add	local05, #48
	mov	local10, local05
	mov	local21, local10
	add	local21, #484
	mov	arg01, local21
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	mov	local22, result1
	cmp	local22, ##1631679090 wz
	sub	local05, #48
 if_ne	jmp	#LR__1146
	add	local05, #48
	mov	arg01, local05
	add	arg01, #488
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	local05, #32
	wrlong	result1, local05
	add	local05, #32
	mov	local23, local05
	mov	local24, local23
	add	local24, #492
	mov	arg01, local24
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	mov	local07, result1
	sub	local05, #36
	wrlong	local07, local05
	sub	local05, #12
LR__1146
LR__1147
	wrbyte	local15, local05
	add	objptr, #4
	rdword	local07, objptr
	add	local07, #1
	wrword	local07, objptr
	rdword	local23, objptr
	sub	objptr, #4
	add	local05, #6
	wrword	local23, local05
' 				&& ld_dword(fs->win +  0 ) == 0x41615252
' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
' 			{
' 
' 				fs->free_clst = ld_dword(fs->win +  488 );
' 
' 
' 				fs->last_clst = ld_dword(fs->win +  492 );
' 
' 			}
' 		}
' 
' 
' 	}
' 
' 	fs->fs_type = (BYTE)fmt;
' 	fs->id = ++Fsid;
' #line 3567 "ff.c"
' 	return FR_OK;
	mov	result1, #0
LR__1148
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_mount_volume_ret
	ret

_fatfs_cc_validate
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
	mov	local03, #9
 if_e	jmp	#LR__1149
	rdlong	local04, local01 wz
 if_e	jmp	#LR__1149
	rdlong	result1, local01
	rdbyte	result1, result1 wz
 if_e	jmp	#LR__1149
	add	local01, #4
	rdword	local05, local01
	sub	local01, #4
	getword	result1, local05, #0
	rdlong	local06, local01
	add	local06, #6
	rdword	local07, local06
	sub	local06, #6
	getword	local08, local07, #0
	cmp	result1, local08 wz
 if_ne	jmp	#LR__1149
	rdlong	local09, local01
	add	local09, #1
	rdbyte	local10, local09
	sub	local09, #1
	mov	arg01, local10 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, #24
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, #24
	mov	local11, result1
	getbyte	local04, local11, #0
	and	local04, #1 wz
 if_e	mov	local03, #0
LR__1149
	cmp	local03, #0 wz
 if_e	rdlong	local04, local01
 if_ne	mov	local04, #0
	wrlong	local04, local02
' 			res = FR_OK;
' 		}
' 
' 	}
' 	*rfs = (res == FR_OK) ? obj->fs : 0;
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_validate_ret
	ret

_fatfs_cc_f_mount
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #32
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	fp, #20
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #28
	call	#_fatfs_cc_get_ldnumber
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wc
 if_b	mov	result1, #11
 if_b	jmp	#LR__1150
	add	fp, #20
	rdlong	local01, fp
	shl	local01, #2
	add	local01, objptr
	rdlong	local01, local01 wz
	sub	fp, #4
	wrlong	local01, fp
	sub	fp, #16
 if_ne	add	fp, #16
 if_ne	rdlong	local01, fp
 if_ne	sub	fp, #16
 if_ne	wrbyte	#0, local01
	add	fp, #4
	rdlong	local01, fp wz
	sub	fp, #4
 if_ne	add	fp, #4
 if_ne	rdlong	local01, fp
 if_ne	sub	fp, #4
 if_ne	wrbyte	#0, local01
	add	fp, #20
	rdlong	local01, fp
	shl	local01, #2
	add	local01, objptr
	sub	fp, #16
	rdlong	arg03, fp
	wrlong	arg03, local01
	add	fp, #8
	rdbyte	local01, fp
	sub	fp, #12
	zerox	local01, #7 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1150
	add	fp, #8
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, fp
	sub	fp, #4
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #24
	wrlong	result1, fp
' 
' 	res = mount_volume(&path, &fs, 0);
' 	return res ;
	sub	fp, #24
LR__1150
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_mount_ret
	ret

_fatfs_cc_f_open
	mov	COUNT_, #14
	call	#pushregs_
	add	ptra, #92
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #8
	rdlong	arg03, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__1169
	add	fp, #12
	rdbyte	arg03, fp
	and	arg03, #63
	wrbyte	arg03, fp
	sub	fp, #4
	mov	arg01, fp
	add	fp, #56
	mov	arg02, fp
	sub	fp, #52
	rdbyte	local01, fp
	sub	fp, #12
	mov	arg03, local01
	call	#_fatfs_cc_mount_volume
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1168
	add	fp, #64
	rdlong	arg02, fp
	sub	fp, #44
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #12
	rdlong	local02, fp
	sub	fp, #8
	mov	arg02, local02
	call	#_fatfs_cc_follow_path
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1151
	add	fp, #63
	rdbyte	local03, fp
	sub	fp, #63
	test	local03, #128 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #16
LR__1151
	add	fp, #12
	rdbyte	local03, fp
	sub	fp, #12
	test	local03, #28 wz
 if_e	jmp	#LR__1156
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_e	jmp	#LR__1153
	add	fp, #16
	rdlong	local03, fp
	sub	fp, #16
	cmp	local03, #4 wz
 if_ne	jmp	#LR__1152
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc_dir_register
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
LR__1152
	add	fp, #12
	rdbyte	local03, fp
	or	local03, #8
	wrbyte	local03, fp
	sub	fp, #12
	jmp	#LR__1155
LR__1153
	add	fp, #26
	rdbyte	local03, fp
	sub	fp, #26
	test	local03, #17 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #16
 if_ne	jmp	#LR__1154
	add	fp, #12
	rdbyte	local03, fp
	sub	fp, #12
	test	local03, #4 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#8, fp
 if_ne	sub	fp, #16
LR__1154
LR__1155
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1160
	add	fp, #12
	rdbyte	local02, fp
	sub	fp, #12
	test	local02, #8 wz
 if_e	jmp	#LR__1160
	call	#_fatfs_cc__get_fattime
	add	fp, #80
	wrlong	result1, fp
	sub	fp, #32
	rdlong	arg01, fp
	add	arg01, #14
	wrlong	result1, arg01
	rdlong	arg01, fp
	add	arg01, #22
	add	fp, #32
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	call	#_fatfs_cc_ld_clust
	add	fp, #68
	wrlong	result1, fp
	sub	fp, #20
	rdlong	local03, fp
	add	local03, #11
	wrbyte	#32, local03
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	mov	arg03, #0
	call	#_fatfs_cc_st_clust
	add	fp, #48
	rdlong	arg01, fp
	add	arg01, #28
	wrlong	#0, arg01
	add	fp, #16
	rdlong	local03, fp
	add	local03, #3
	wrbyte	#1, local03
	add	fp, #4
	rdlong	local03, fp wz
	sub	fp, #68
 if_e	jmp	#LR__1160
	add	fp, #64
	rdlong	local03, fp
	add	local03, #44
	rdlong	local02, local03
	add	fp, #20
	wrlong	local02, fp
	sub	fp, #64
	mov	arg01, fp
	add	fp, #48
	rdlong	arg02, fp
	sub	fp, #68
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
	add	fp, #16
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #16
 if_ne	jmp	#LR__1160
	add	fp, #64
	rdlong	arg01, fp
	add	fp, #20
	rdlong	arg02, fp
	sub	fp, #84
	call	#_fatfs_cc_move_window
	add	fp, #16
	wrlong	result1, fp
	add	fp, #48
	rdlong	local03, fp
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #68
	sub	local02, #1
	add	local03, #12
	wrlong	local02, local03
	jmp	#LR__1160
LR__1156
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1159
	add	fp, #26
	rdbyte	local03, fp
	sub	fp, #26
	test	local03, #16 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#4, fp
 if_ne	sub	fp, #16
 if_ne	jmp	#LR__1158
	add	fp, #12
	rdbyte	local04, fp
	sub	fp, #12
	getbyte	local03, local04, #0
	and	local03, #2 wz
 if_e	jmp	#LR__1157
	add	fp, #26
	rdbyte	local01, fp
	sub	fp, #26
	getbyte	local02, local01, #0
	and	local02, #1 wz
 if_ne	mov	local03, #7
 if_ne	add	fp, #16
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #16
LR__1157
LR__1158
LR__1159
LR__1160
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1161
	add	fp, #12
	rdbyte	local03, fp
	sub	fp, #12
	test	local03, #8 wz
 if_ne	add	fp, #12
 if_ne	rdbyte	local03, fp
 if_ne	or	local03, #64
 if_ne	wrbyte	local03, fp
 if_ne	sub	fp, #12
	add	fp, #4
	rdlong	local03, fp
	add	fp, #60
	rdlong	local02, fp
	add	local02, #44
	rdlong	local04, local02
	add	local03, #32
	wrlong	local04, local03
	sub	fp, #60
	rdlong	local03, fp
	add	fp, #44
	rdlong	local02, fp
	sub	fp, #48
	add	local03, #36
	wrlong	local02, local03
LR__1161
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1167
	add	fp, #4
	rdlong	local03, fp
	add	fp, #60
	rdlong	arg01, fp
	sub	fp, #16
	rdlong	arg02, fp
	sub	fp, #48
	call	#_fatfs_cc_ld_clust
	add	local03, #8
	wrlong	result1, local03
	add	fp, #4
	rdlong	local03, fp
	add	fp, #44
	rdlong	arg01, fp
	add	arg01, #28
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	add	local03, #12
	wrlong	result1, local03
	sub	fp, #44
	rdlong	local03, fp
	add	fp, #60
	rdlong	local02, fp
	wrlong	local02, local03
	sub	fp, #60
	rdlong	local03, fp
	add	fp, #60
	rdlong	local02, fp
	add	local02, #6
	rdword	local04, local02
	add	local03, #4
	wrword	local04, local03
	sub	fp, #60
	rdlong	local03, fp
	add	fp, #8
	rdbyte	local02, fp
	add	local03, #16
	wrbyte	local02, local03
	sub	fp, #8
	rdlong	local03, fp
	add	local03, #17
	wrbyte	#0, local03
	rdlong	local03, fp
	add	local03, #28
	wrlong	#0, local03
	rdlong	local03, fp
	add	local03, #20
	wrlong	#0, local03
	rdlong	arg01, fp
	sub	fp, #4
	add	arg01, #40
	mov	arg02, #0
	decod	arg03, #9
	mov	local05, arg01
	call	#\builtin_bytefill_
	mov	result1, local05
	add	fp, #12
	rdbyte	local03, fp
	sub	fp, #12
	test	local03, #32 wz
 if_e	jmp	#LR__1166
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #12
	rdlong	local06, local02
	cmp	local06, #1 wc
 if_b	jmp	#LR__1166
	add	fp, #4
	rdlong	local02, fp
	mov	local03, local02
	add	local02, #12
	rdlong	local04, local02
	add	local03, #20
	wrlong	local04, local03
	add	fp, #60
	rdlong	local04, fp
	add	local04, #10
	rdword	local03, local04
	shl	local03, #9
	add	fp, #8
	wrlong	local03, fp
	sub	fp, #68
	rdlong	local03, fp
	add	local03, #8
	rdlong	local02, local03
	add	fp, #72
	wrlong	local02, fp
' 				fp->fptr = fp->obj.objsize;
' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 				clst = fp->obj.sclust;
' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
	sub	fp, #72
	rdlong	local03, fp
	add	local03, #12
	rdlong	local02, local03
	add	fp, #84
	wrlong	local02, fp
	sub	fp, #88
LR__1162
	add	fp, #16
	rdlong	local07, fp
	sub	fp, #16
	mov	local01, local07 wz
 if_ne	jmp	#LR__1163
	add	fp, #88
	rdlong	local08, fp
	mov	local06, local08
	sub	fp, #16
	rdlong	local09, fp
	sub	fp, #72
	mov	local10, local09
	cmp	local06, local10 wcz
 if_be	jmp	#LR__1163
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #72
	rdlong	arg02, fp
	sub	fp, #76
	call	#_fatfs_cc_get_fat
	add	fp, #76
	wrlong	result1, fp
	sub	fp, #76
	cmp	result1, #2 wc
 if_b	add	fp, #16
 if_b	wrlong	#2, fp
 if_b	sub	fp, #16
	add	fp, #76
	rdlong	local07, fp
	sub	fp, #76
	cmp	local07, ##-1 wz
 if_e	add	fp, #16
 if_e	wrlong	#1, fp
 if_e	sub	fp, #16
	add	fp, #88
	rdlong	local11, fp
	mov	local12, local11
	sub	fp, #16
	rdlong	local13, fp
	mov	local14, local13
	sub	local12, local14
	add	fp, #16
	wrlong	local12, fp
	sub	fp, #88
	jmp	#LR__1162
LR__1163
	add	fp, #4
	rdlong	local03, fp
	add	fp, #72
	rdlong	local02, fp
	add	local03, #24
	wrlong	local02, local03
	sub	fp, #60
	rdlong	local04, fp
	sub	fp, #16
	mov	local03, local04 wz
 if_ne	jmp	#LR__1165
	add	fp, #88
	rdlong	local07, fp
	sub	fp, #88
	mov	local01, local07
	mov	local02, local01
	and	local02, #511 wz
 if_e	jmp	#LR__1165
	add	fp, #64
	rdlong	arg01, fp
	add	fp, #12
	rdlong	local02, fp
	sub	fp, #76
	mov	arg02, local02
	call	#_fatfs_cc_clst2sect
	add	fp, #84
	wrlong	result1, fp
	mov	local04, result1 wz
	sub	fp, #84
 if_e	mov	local03, #2
 if_e	add	fp, #16
 if_e	wrlong	#2, fp
 if_e	sub	fp, #16
 if_e	jmp	#LR__1164
	add	fp, #4
	rdlong	local03, fp
	add	fp, #80
	rdlong	local02, fp
	add	fp, #4
	rdlong	local08, fp
	mov	local07, local08
	shr	local07, #9
	add	local02, local07
	add	local03, #28
	wrlong	local02, local03
	sub	fp, #24
	rdlong	local04, fp
	add	local04, #1
	rdbyte	arg01, local04
	sub	fp, #60
	rdlong	local07, fp
	mov	local04, local07
	add	local04, #40
	sub	fp, #4
	mov	local01, local07
	add	local01, #28
	rdlong	local06, local01
	mov	local02, local06
	mov	local01, #1
	mov	arg02, local04
	mov	arg03, local02
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	mov	local03, result1 wz
 if_ne	mov	local03, #1
 if_ne	add	fp, #16
 if_ne	wrlong	#1, fp
 if_ne	sub	fp, #16
LR__1164
LR__1165
LR__1166
LR__1167
LR__1168
	add	fp, #16
	rdlong	local03, fp wz
	sub	fp, #16
 if_ne	add	fp, #4
 if_ne	rdlong	local03, fp
 if_ne	sub	fp, #4
 if_ne	wrlong	#0, local03
' 
' 	return res ;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__1169
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_open_ret
	ret

_fatfs_cc_f_read
	mov	COUNT_, #25
	call	#pushregs_
	add	ptra, #56
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #44
	wrlong	result1, fp
	sub	fp, #36
	rdlong	result1, fp
	wrlong	#0, result1
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #20
	mov	arg02, fp
	sub	fp, #24
	call	#_fatfs_cc_validate
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_ne	jmp	#LR__1170
	add	fp, #4
	rdlong	arg02, fp
	add	arg02, #17
	rdbyte	local01, arg02
	getbyte	arg02, local01, #0
	add	fp, #16
	wrlong	arg02, fp
	sub	fp, #20
	cmps	arg02, #0 wz
 if_e	jmp	#LR__1171
LR__1170
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__1190
LR__1171
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #16
	rdbyte	arg02, arg02
	test	arg02, #1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__1190
	add	fp, #4
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #12
	rdlong	local04, local03
	add	local02, #20
	rdlong	local02, local02
	sub	local04, local02
	add	fp, #32
	wrlong	local04, fp
	sub	fp, #24
	rdlong	local05, fp
	sub	fp, #12
	cmp	local05, local04 wcz
 if_a	add	fp, #36
 if_a	rdlong	local05, fp
 if_a	sub	fp, #24
 if_a	wrlong	local05, fp
 if_a	sub	fp, #12
' 
' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
LR__1172
	add	fp, #12
	rdlong	local03, fp
	sub	fp, #12
	mov	local05, local03
	cmp	local05, #1 wc
 if_b	jmp	#LR__1189
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #20
	rdlong	local04, local04
	test	local04, #511 wz
 if_ne	jmp	#LR__1187
	add	fp, #4
	rdlong	local02, fp
	add	local02, #20
	rdlong	local04, local02
	shr	local04, #9
	add	fp, #20
	rdlong	local06, fp
	mov	local07, local06
	add	local07, #10
	rdword	local08, local07
	sub	local07, #10
	getword	local09, local08, #0
	sub	local09, #1
	and	local04, local09 wz
	add	fp, #24
	wrlong	local04, fp
	sub	fp, #48
 if_ne	jmp	#LR__1177
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #20
	rdlong	local04, local04 wz
 if_ne	jmp	#LR__1173
	add	fp, #4
	rdlong	local04, fp
	add	local04, #8
	rdlong	local04, local04
	add	fp, #24
	wrlong	local04, fp
	sub	fp, #28
	jmp	#LR__1174
LR__1173
	add	fp, #4
	rdlong	local09, fp
	mov	arg01, local09
	sub	fp, #4
	add	local09, #24
	rdlong	arg02, local09
	call	#_fatfs_cc_get_fat
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__1174
	add	fp, #28
	rdlong	local04, fp
	sub	fp, #28
	cmp	local04, #2 wc
 if_ae	jmp	#LR__1175
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#2, local04
	mov	result1, #2
	jmp	#LR__1190
LR__1175
	add	fp, #28
	rdlong	local04, fp
	sub	fp, #28
	cmp	local04, ##-1 wz
 if_ne	jmp	#LR__1176
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#1, local04
	mov	result1, #1
	jmp	#LR__1190
LR__1176
	add	fp, #4
	rdlong	local04, fp
	add	fp, #24
	rdlong	local09, fp
	sub	fp, #28
	add	local04, #24
	wrlong	local09, local04
LR__1177
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #24
	rdlong	arg02, local04
	call	#_fatfs_cc_clst2sect
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1178
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#2, local04
	mov	result1, #2
	jmp	#LR__1190
LR__1178
	add	fp, #32
	rdlong	local04, fp
	add	fp, #16
	rdlong	local09, fp
	add	local04, local09
	sub	fp, #16
	wrlong	local04, fp
	sub	fp, #20
	rdlong	local04, fp
	shr	local04, #9
	add	fp, #32
	wrlong	local04, fp
	sub	fp, #44
	cmp	local04, #1 wc
 if_b	jmp	#LR__1182
	add	fp, #48
	rdlong	local04, fp
	sub	fp, #4
	rdlong	local10, fp
	add	local04, local10
	sub	fp, #20
	rdlong	local09, fp
	sub	fp, #24
	add	local09, #10
	rdword	local11, local09
	cmp	local04, local11 wcz
 if_be	jmp	#LR__1179
	add	fp, #24
	rdlong	local02, fp
	add	local02, #10
	rdword	local04, local02
	add	fp, #24
	rdlong	local11, fp
	sub	local04, local11
	sub	fp, #4
	wrlong	local04, fp
	sub	fp, #44
LR__1179
	add	fp, #24
	rdlong	local02, fp
	add	local02, #1
	rdbyte	arg01, local02
	add	fp, #28
	rdlong	arg02, fp
	sub	fp, #20
	rdlong	arg03, fp
	add	fp, #12
	rdlong	arg04, fp
	sub	fp, #44
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1180
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#1, local04
	mov	result1, #1
	jmp	#LR__1190
LR__1180
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #16
	rdbyte	local04, local02
	and	local04, #128 wz
 if_e	jmp	#LR__1181
	add	fp, #4
	rdlong	local09, fp
	add	local09, #28
	rdlong	local11, local09
	add	fp, #28
	rdlong	local08, fp
	sub	local11, local08
	add	fp, #12
	rdlong	local12, fp
	sub	fp, #44
	cmp	local11, local12 wc
 if_ae	jmp	#LR__1181
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #48
	rdlong	local09, fp
	mov	local11, local09
	add	local11, #28
	rdlong	local07, local11
	mov	local13, local07
	add	fp, #28
	rdlong	local08, fp
	mov	local06, local08
	sub	local13, local06
	shl	local13, #9
	mov	local14, local13
	add	arg01, local13
	mov	local01, local09
	sub	fp, #32
	mov	local11, local01
	add	local11, #40
	mov	local02, local11
	decod	local10, #9
	mov	arg02, local02
	decod	arg03, #9
	call	#__system____builtin_memmove
LR__1181
	add	fp, #44
	rdlong	local04, fp
	shl	local04, #9
	sub	fp, #4
	wrlong	local04, fp
	sub	fp, #40
' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
' 				}
' 
' 
' 				rcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__1188
LR__1182
	add	fp, #4
	rdlong	local04, fp
	add	local04, #28
	rdlong	local10, local04
	add	fp, #28
	rdlong	local11, fp
	sub	fp, #32
	cmp	local10, local11 wz
 if_e	jmp	#LR__1186
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #16
	rdbyte	local04, local02
	test	local04, #128 wz
 if_e	jmp	#LR__1184
	add	fp, #24
	rdlong	local02, fp
	add	local02, #1
	rdbyte	arg01, local02
	sub	fp, #20
	rdlong	local01, fp
	mov	arg02, local01
	add	arg02, #40
	sub	fp, #4
	add	local01, #28
	rdlong	arg03, local01
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1183
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#1, local04
	mov	result1, #1
	jmp	#LR__1190
LR__1183
	add	fp, #4
	rdlong	local01, fp
	mov	local04, local01
	sub	fp, #4
	add	local01, #16
	rdbyte	local10, local01
	and	local10, #127
	add	local04, #16
	wrbyte	local10, local04
LR__1184
	add	fp, #24
	rdlong	local02, fp
	add	local02, #1
	rdbyte	arg01, local02
	sub	fp, #20
	rdlong	arg02, fp
	add	arg02, #40
	add	fp, #28
	rdlong	arg03, fp
	sub	fp, #32
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1185
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #4
	add	local04, #17
	wrbyte	#1, local04
	mov	result1, #1
	jmp	#LR__1190
LR__1185
LR__1186
	add	fp, #4
	rdlong	local04, fp
	add	fp, #28
	rdlong	local10, fp
	sub	fp, #32
	add	local04, #28
	wrlong	local10, local04
LR__1187
	add	fp, #4
	rdlong	local02, fp
	add	local02, #20
	rdlong	local01, local02
	and	local01, #511
	decod	local04, #9
	sub	local04, local01
	add	fp, #36
	wrlong	local04, fp
	sub	fp, #28
	rdlong	local10, fp
	sub	fp, #12
	cmp	local04, local10 wcz
 if_a	add	fp, #12
 if_a	rdlong	local04, fp
 if_a	add	fp, #28
 if_a	wrlong	local04, fp
 if_a	sub	fp, #40
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #48
	rdlong	local07, fp
	mov	arg02, local07
	add	arg02, #40
	add	local07, #20
	rdlong	local12, local07
	and	local12, #511
	add	arg02, local12
	add	fp, #36
	rdlong	arg03, fp
	sub	fp, #40
	call	#__system____builtin_memmove
LR__1188
	add	fp, #12
	rdlong	local04, fp
	add	fp, #28
	rdlong	local01, fp
	sub	local04, local01
	sub	fp, #28
	wrlong	local04, fp
	add	fp, #4
	rdlong	local09, fp
	rdlong	local07, local09
	add	fp, #24
	rdlong	local14, fp
	mov	local13, local14
	add	local07, local14
	wrlong	local07, local09
	add	fp, #12
	rdlong	local15, fp
	mov	local12, local15
	sub	fp, #12
	rdlong	local16, fp
	mov	local17, local16
	add	local12, local16
	add	fp, #12
	wrlong	local12, fp
	sub	fp, #48
	rdlong	local18, fp
	mov	local19, local18
	mov	local20, local18
	mov	local21, local20
	add	local21, #20
	rdlong	local22, local21
	sub	local21, #20
	mov	local23, local22
	add	fp, #36
	rdlong	local24, fp
	sub	fp, #40
	mov	local25, local24
	add	local23, local24
	add	local19, #20
	wrlong	local23, local19
	sub	local19, #20
	jmp	#LR__1172
LR__1189
' 
' 
' 
' 
' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
' 
' 	}
' 
' 	return FR_OK ;
	mov	result1, #0
LR__1190
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_read_ret
	ret

_fatfs_cc_f_write
	mov	COUNT_, #42
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #40
	wrlong	result1, fp
	sub	fp, #32
	rdlong	result1, fp
	wrlong	#0, result1
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #20
	mov	arg02, fp
	sub	fp, #24
	call	#_fatfs_cc_validate
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_ne	jmp	#LR__1191
	add	fp, #4
	rdlong	arg02, fp
	add	arg02, #17
	rdbyte	arg02, arg02
	getbyte	arg02, arg02, #0
	add	fp, #16
	wrlong	arg02, fp
	sub	fp, #20
	cmps	arg02, #0 wz
 if_e	jmp	#LR__1192
LR__1191
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__1214
LR__1192
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #16
	rdbyte	arg02, arg02
	test	arg02, #2 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__1214
	add	fp, #4
	rdlong	local01, fp
	mov	arg02, local01
	add	arg02, #20
	rdlong	arg02, arg02
	add	fp, #8
	rdlong	result1, fp
	add	arg02, result1
	mov	result1, local01
	sub	fp, #12
	add	result1, #20
	rdlong	local02, result1
	mov	local03, local02
	cmp	arg02, local03 wc
 if_ae	jmp	#LR__1193
	add	fp, #4
	rdlong	arg02, fp
	neg	result1, #1
	add	arg02, #20
	rdlong	arg02, arg02
	sub	result1, arg02
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #12
LR__1193
' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
' 	}
' 
' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
LR__1194
	add	fp, #12
	rdlong	local04, fp
	sub	fp, #12
	mov	local05, local04
	cmp	local05, #1 wc
 if_b	jmp	#LR__1213
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #20
	rdlong	result1, result1
	test	result1, #511 wz
 if_ne	jmp	#LR__1209
	add	fp, #4
	rdlong	local06, fp
	add	local06, #20
	rdlong	local07, local06
	mov	result1, local07
	shr	result1, #9
	add	fp, #20
	rdlong	local08, fp
	mov	local09, local08
	add	local09, #10
	rdword	local10, local09
	sub	local09, #10
	getword	local11, local10, #0
	sub	local11, #1
	and	result1, local11 wz
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #44
 if_ne	jmp	#LR__1200
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #20
	rdlong	arg02, local12 wz
 if_ne	jmp	#LR__1195
	add	fp, #4
	rdlong	local12, fp
	add	local12, #8
	rdlong	local12, local12 wz
	add	fp, #24
	wrlong	local12, fp
	sub	fp, #28
 if_ne	jmp	#LR__1196
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	jmp	#LR__1196
LR__1195
	add	fp, #4
	rdlong	local13, fp
	mov	arg01, local13
	sub	fp, #4
	add	local13, #24
	rdlong	arg02, local13
	call	#_fatfs_cc_create_chain
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__1196
	add	fp, #28
	rdlong	local12, fp wz
	sub	fp, #28
 if_e	jmp	#LR__1213
	add	fp, #28
	rdlong	local12, fp
	sub	fp, #28
	cmp	local12, #1 wz
 if_ne	jmp	#LR__1197
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#2, local12
	mov	result1, #2
	jmp	#LR__1214
LR__1197
	add	fp, #28
	rdlong	local12, fp
	sub	fp, #28
	cmp	local12, ##-1 wz
 if_ne	jmp	#LR__1198
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#1, local12
	mov	result1, #1
	jmp	#LR__1214
LR__1198
	add	fp, #4
	rdlong	local12, fp
	add	fp, #24
	rdlong	local13, fp
	add	local12, #24
	wrlong	local13, local12
	sub	fp, #24
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #8
	rdlong	local13, local12 wz
 if_ne	jmp	#LR__1199
	add	fp, #4
	rdlong	local12, fp
	add	fp, #24
	rdlong	local13, fp
	sub	fp, #28
	add	local12, #8
	wrlong	local13, local12
LR__1199
LR__1200
	add	fp, #4
	rdlong	local06, fp
	sub	fp, #4
	add	local06, #16
	rdbyte	local12, local06
	test	local12, #128 wz
 if_e	jmp	#LR__1202
	add	fp, #24
	rdlong	local06, fp
	add	local06, #1
	rdbyte	arg01, local06
	sub	fp, #20
	rdlong	local01, fp
	mov	arg02, local01
	add	arg02, #40
	sub	fp, #4
	add	local01, #28
	rdlong	arg03, local01
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1201
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#1, local12
	mov	result1, #1
	jmp	#LR__1214
LR__1201
	add	fp, #4
	rdlong	local01, fp
	mov	local12, local01
	sub	fp, #4
	add	local01, #16
	rdbyte	local13, local01
	and	local13, #127
	add	local12, #16
	wrbyte	local13, local12
LR__1202
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local13, fp
	sub	fp, #4
	add	local13, #24
	rdlong	arg02, local13
	call	#_fatfs_cc_clst2sect
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1203
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#2, local12
	mov	result1, #2
	jmp	#LR__1214
LR__1203
	add	fp, #32
	rdlong	local12, fp
	add	fp, #12
	rdlong	local13, fp
	add	local12, local13
	sub	fp, #12
	wrlong	local12, fp
	sub	fp, #20
	rdlong	local12, fp
	shr	local12, #9
	add	fp, #28
	wrlong	local12, fp
	sub	fp, #40
	cmp	local12, #1 wc
 if_b	jmp	#LR__1207
	add	fp, #44
	rdlong	local12, fp
	sub	fp, #4
	rdlong	local13, fp
	add	local12, local13
	sub	fp, #16
	rdlong	local11, fp
	sub	fp, #24
	add	local11, #10
	rdword	local07, local11
	cmp	local12, local07 wcz
 if_be	jmp	#LR__1204
	add	fp, #24
	rdlong	local06, fp
	add	local06, #10
	rdword	local12, local06
	add	fp, #20
	rdlong	local07, fp
	sub	local12, local07
	sub	fp, #4
	wrlong	local12, fp
	sub	fp, #40
LR__1204
	add	fp, #24
	rdlong	local06, fp
	add	local06, #1
	rdbyte	arg01, local06
	add	fp, #24
	rdlong	arg02, fp
	sub	fp, #16
	rdlong	arg03, fp
	add	fp, #8
	rdlong	arg04, fp
	sub	fp, #40
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1205
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#1, local12
	mov	result1, #1
	jmp	#LR__1214
LR__1205
	add	fp, #4
	rdlong	local06, fp
	add	local06, #28
	rdlong	local12, local06
	add	fp, #28
	rdlong	local07, fp
	sub	local12, local07
	add	fp, #8
	rdlong	local09, fp
	sub	fp, #40
	cmp	local12, local09 wc
 if_ae	jmp	#LR__1206
	add	fp, #4
	rdlong	arg01, fp
	add	arg01, #40
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #44
	rdlong	local11, fp
	add	local11, #28
	rdlong	local13, local11
	add	fp, #28
	rdlong	local10, fp
	sub	fp, #32
	sub	local13, local10
	shl	local13, #9
	add	arg02, local13
	decod	arg03, #9
	call	#__system____builtin_memmove
	add	fp, #4
	rdlong	local01, fp
	mov	local12, local01
	sub	fp, #4
	add	local01, #16
	rdbyte	local13, local01
	and	local13, #127
	add	local12, #16
	wrbyte	local13, local12
LR__1206
	add	fp, #40
	rdlong	local12, fp
	shl	local12, #9
	sub	fp, #4
	wrlong	local12, fp
	sub	fp, #36
' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
' 					fp->flag &= (BYTE)~ 0x80 ;
' 				}
' 
' 
' 				wcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__1210
LR__1207
	add	fp, #4
	rdlong	local12, fp
	add	local12, #28
	rdlong	local13, local12
	add	fp, #28
	rdlong	local07, fp
	sub	fp, #32
	cmp	local13, local07 wz
 if_e	jmp	#LR__1208
	add	fp, #4
	rdlong	local10, fp
	mov	local09, local10
	sub	fp, #4
	add	local09, #20
	rdlong	local02, local09
	add	local10, #12
	rdlong	local13, local10
	cmp	local02, local13 wc
 if_ae	jmp	#LR__1208
	add	fp, #24
	rdlong	local12, fp
	add	local12, #1
	rdbyte	arg01, local12
	sub	fp, #20
	rdlong	arg02, fp
	add	arg02, #40
	add	fp, #28
	rdlong	arg03, fp
	sub	fp, #32
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1208
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #4
	add	local12, #17
	wrbyte	#1, local12
' 				fp->fptr < fp->obj.objsize &&
' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
	mov	result1, #1
	jmp	#LR__1214
LR__1208
	add	fp, #4
	rdlong	local12, fp
	add	fp, #28
	rdlong	local13, fp
	sub	fp, #32
	add	local12, #28
	wrlong	local13, local12
LR__1209
	add	fp, #4
	rdlong	local06, fp
	add	local06, #20
	rdlong	local01, local06
	and	local01, #511
	decod	local12, #9
	sub	local12, local01
	add	fp, #32
	wrlong	local12, fp
	sub	fp, #24
	rdlong	local13, fp
	sub	fp, #12
	cmp	local12, local13 wcz
 if_a	add	fp, #12
 if_a	rdlong	local12, fp
 if_a	add	fp, #24
 if_a	wrlong	local12, fp
 if_a	sub	fp, #36
	add	fp, #4
	rdlong	local11, fp
	mov	arg01, local11
	add	arg01, #40
	add	local11, #20
	rdlong	local02, local11
	and	local02, #511
	add	arg01, local02
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg03, fp
	sub	fp, #36
	call	#__system____builtin_memmove
	add	fp, #4
	rdlong	local01, fp
	mov	local12, local01
	sub	fp, #4
	add	local01, #16
	rdbyte	local13, local01
	or	local13, #128
	add	local12, #16
	wrbyte	local13, local12
LR__1210
	add	fp, #12
	rdlong	local12, fp
	add	fp, #24
	rdlong	local01, fp
	sub	local12, local01
	sub	fp, #24
	wrlong	local12, fp
	add	fp, #4
	rdlong	local08, fp
	mov	local07, local08
	rdlong	local09, local08
	add	fp, #20
	rdlong	local02, fp
	mov	local03, local02
	add	local09, local02
	wrlong	local09, local07
	add	fp, #12
	rdlong	local14, fp
	mov	local15, local14
	sub	fp, #12
	rdlong	local16, fp
	mov	local17, local16
	add	local15, local16
	add	fp, #12
	wrlong	local15, fp
	sub	fp, #44
	rdlong	local18, fp
	mov	local19, local18
	mov	local20, local18
	mov	local21, local20
	add	local21, #20
	rdlong	local22, local21
	sub	local21, #20
	mov	local23, local22
	add	fp, #32
	rdlong	local24, fp
	mov	local25, local24
	add	local23, local24
	add	local19, #20
	wrlong	local23, local19
	sub	local19, #20
	sub	fp, #32
	rdlong	local26, fp
	mov	local27, local26
	mov	local28, local26
	mov	local29, local28
	mov	local30, local26
	sub	fp, #4
	mov	local31, local30
	add	local29, #20
	rdlong	local32, local29
	sub	local29, #20
	mov	local33, local32
	add	local31, #12
	rdlong	local34, local31
	sub	local31, #12
	mov	local35, local34
	cmp	local33, local35 wcz
 if_be	jmp	#LR__1211
	add	fp, #4
	rdlong	local36, fp
	sub	fp, #4
	mov	local37, local36
	add	local37, #20
	rdlong	local38, local37
	sub	local37, #20
	mov	local39, local38
	jmp	#LR__1212
LR__1211
	add	fp, #4
	rdlong	local40, fp
	sub	fp, #4
	mov	local41, local40
	add	local41, #12
	rdlong	local42, local41
	sub	local41, #12
	mov	local39, local42
LR__1212
	add	local27, #12
	wrlong	local39, local27
	sub	local27, #12
	jmp	#LR__1194
LR__1213
	add	fp, #4
	rdlong	local06, fp
	mov	local05, local06
	sub	fp, #4
	add	local06, #16
	rdbyte	local12, local06
	or	local12, #64
	add	local05, #16
	wrbyte	local12, local05
' 
' 
' 
' 
' 
' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
' 		fp->flag |=  0x80 ;
' 
' 	}
' 
' 	fp->flag |=  0x40 ;
' 
' 	return FR_OK ;
	mov	result1, #0
LR__1214
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_write_ret
	ret

_fatfs_cc_f_sync
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1218
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #16
	rdbyte	result1, result1
	test	result1, #64 wz
 if_e	jmp	#LR__1217
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #16
	rdbyte	result1, result1
	test	result1, #128 wz
 if_e	jmp	#LR__1215
	add	fp, #12
	rdlong	arg04, fp
	add	arg04, #1
	rdbyte	arg01, arg04
	sub	fp, #8
	rdlong	arg04, fp
	mov	arg02, arg04
	add	arg02, #40
	sub	fp, #4
	add	arg04, #28
	rdlong	arg03, arg04
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1219
	add	fp, #4
	rdlong	result1, fp
	mov	local01, result1
	sub	fp, #4
	add	result1, #16
	rdbyte	result1, result1
	and	result1, #127
	add	local01, #16
	wrbyte	result1, local01
LR__1215
	call	#_fatfs_cc__get_fattime
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #32
	rdlong	arg02, local01
	call	#_fatfs_cc_move_window
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1216
	add	fp, #4
	rdlong	local01, fp
	add	local01, #36
	rdlong	local01, local01
	add	fp, #16
	wrlong	local01, fp
	mov	arg03, local01
	add	arg03, #11
	rdbyte	arg03, arg03
	or	arg03, #32
	add	local01, #11
	wrbyte	arg03, local01
	sub	fp, #16
	rdlong	local01, fp
	rdlong	arg01, local01
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	add	local01, #8
	rdlong	arg03, local01
	call	#_fatfs_cc_st_clust
	add	fp, #20
	rdlong	arg01, fp
	add	arg01, #28
	sub	fp, #16
	rdlong	local01, fp
	add	local01, #12
	rdlong	arg02, local01
	wrlong	arg02, arg01
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, #22
	sub	fp, #4
	rdlong	arg02, fp
	wrlong	arg02, arg01
	add	fp, #4
	rdlong	arg01, fp
	add	arg01, #18
	mov	arg02, #0
	wrword	#0, arg01
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	rdlong	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg04, fp
	mov	local01, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #191
	add	local01, #16
	wrbyte	arg04, local01
LR__1216
LR__1217
LR__1218
' 					dir = fp->dir_ptr;
' 					dir[ 11 ] |=  0x20 ;
' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
' 					st_dword(dir +  22 , tm);
' 					st_word(dir +  18 , 0);
' 					fs->wflag = 1;
' 					res = sync_fs(fs);
' 					fp->flag &= (BYTE)~ 0x40 ;
' 				}
' 			}
' 		}
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
LR__1219
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_sync_ret
	ret

_fatfs_cc_f_close
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	sub	fp, #4
	call	#_fatfs_cc_f_sync
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1220
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_e	add	fp, #4
 if_e	rdlong	local01, fp
 if_e	sub	fp, #4
 if_e	wrlong	#0, local01
LR__1220
' 
' 
' 
' 
' 			fp->obj.fs = 0;
' #line 4191 "ff.c"
' 		}
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_close_ret
	ret

_fatfs_cc_f_lseek
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #36
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_validate
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1221
	add	fp, #4
	rdlong	local01, fp
	add	local01, #17
	rdbyte	local01, local01
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #12
LR__1221
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	add	fp, #12
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #12
 if_ne	jmp	#LR__1244
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #8
	add	local01, #12
	rdlong	local03, local01
	mov	local04, local03
	cmp	local02, local04 wcz
 if_be	jmp	#LR__1222
	add	fp, #4
	rdlong	local05, fp
	sub	fp, #4
	mov	local06, local05
	add	local06, #16
	rdbyte	local07, local06
	sub	local06, #16
	getbyte	local08, local07, #0
	and	local08, #2 wz
 if_ne	jmp	#LR__1222
	add	fp, #4
	rdlong	local01, fp
	mov	local09, local01
	add	local09, #12
	rdlong	local10, local09
	sub	local09, #12
	add	fp, #4
	wrlong	local10, fp
	sub	fp, #8
LR__1222
	add	fp, #4
	rdlong	local09, fp
	add	local09, #20
	rdlong	local10, local09
	add	fp, #28
	wrlong	local10, fp
	sub	fp, #28
	rdlong	local09, fp
	add	fp, #24
	wrlong	#0, fp
	add	local09, #20
	wrlong	#0, local09
	sub	fp, #20
	rdlong	local09, fp
	sub	fp, #8
	cmp	local09, #1 wc
 if_b	jmp	#LR__1238
	add	fp, #16
	rdlong	local01, fp
	add	local01, #10
	rdword	local04, local01
	shl	local04, #9
	add	fp, #8
	wrlong	local04, fp
	add	fp, #8
	rdlong	local09, fp
	sub	fp, #32
	cmp	local09, #1 wc
 if_b	jmp	#LR__1223
	add	fp, #8
	rdlong	local04, fp
	sub	local04, #1
	add	fp, #16
	rdlong	local11, fp
	qdiv	local04, local11
	add	fp, #8
	rdlong	local05, fp
	mov	local07, local05
	sub	local07, #1
	mov	local12, local11
	getqx	local04
	qdiv	local07, local12
	sub	fp, #32
	getqx	local07
	cmp	local04, local07 wc
 if_b	jmp	#LR__1223
	add	fp, #4
	rdlong	local09, fp
	add	fp, #28
	rdlong	local10, fp
	sub	local10, #1
	sub	fp, #8
	rdlong	local04, fp
	sub	local04, #1
	andn	local10, local04
	add	local09, #20
	wrlong	local10, local09
	sub	fp, #16
	rdlong	local09, fp
	sub	fp, #4
	rdlong	local10, fp
	add	local10, #20
	rdlong	local04, local10
	sub	local09, local04
	add	fp, #4
	wrlong	local09, fp
	sub	fp, #4
	rdlong	local09, fp
	add	local09, #24
	rdlong	local10, local09
	add	fp, #16
	wrlong	local10, fp
	sub	fp, #20
	jmp	#LR__1227
LR__1223
	add	fp, #4
	rdlong	local09, fp
	add	local09, #8
	rdlong	local09, local09 wz
	add	fp, #16
	wrlong	local09, fp
	sub	fp, #20
 if_ne	jmp	#LR__1226
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #1 wz
 if_ne	jmp	#LR__1224
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#2, local09
	mov	result1, #2
	jmp	#LR__1244
LR__1224
	add	fp, #20
	rdlong	local09, fp
	sub	fp, #20
	cmp	local09, ##-1 wz
 if_ne	jmp	#LR__1225
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__1244
LR__1225
	add	fp, #4
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #20
	add	local09, #8
	wrlong	local10, local09
LR__1226
	add	fp, #4
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #20
	add	local09, #24
	wrlong	local10, local09
LR__1227
	add	fp, #20
	rdlong	local09, fp wz
	sub	fp, #20
 if_e	jmp	#LR__1237
' 				while (ofs > bcs) {
LR__1228
	add	fp, #8
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #24
	cmp	local09, local10 wcz
 if_be	jmp	#LR__1234
	add	fp, #8
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	local09, local10
	sub	fp, #16
	wrlong	local09, fp
	sub	fp, #4
	rdlong	local04, fp
	mov	local02, local04
	add	local02, #20
	rdlong	local10, local02
	add	fp, #20
	rdlong	local06, fp
	add	local10, local06
	add	local04, #20
	wrlong	local10, local04
	sub	fp, #20
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdbyte	local09, local01
	test	local09, #2 wz
 if_e	jmp	#LR__1229
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_create_chain
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_e	add	fp, #8
 if_e	wrlong	#0, fp
 if_e	sub	fp, #8
' 							ofs = 0; break;
 if_e	jmp	#LR__1234
	jmp	#LR__1230
LR__1229
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_get_fat
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
LR__1230
	add	fp, #20
	rdlong	local09, fp
	sub	fp, #20
	cmp	local09, ##-1 wz
 if_ne	jmp	#LR__1231
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__1244
LR__1231
	add	fp, #20
	rdlong	local09, fp
	sub	fp, #20
	cmp	local09, #2 wc
 if_b	jmp	#LR__1232
	add	fp, #16
	rdlong	local10, fp
	add	fp, #4
	rdlong	local04, fp
	sub	fp, #20
	add	local10, #20
	rdlong	local08, local10
	cmp	local04, local08 wc
 if_b	jmp	#LR__1233
LR__1232
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#2, local09
	mov	result1, #2
	jmp	#LR__1244
LR__1233
	add	fp, #4
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #20
	add	local09, #24
	wrlong	local10, local09
	jmp	#LR__1228
LR__1234
	add	fp, #4
	rdlong	local02, fp
	mov	local09, local02
	add	local02, #20
	rdlong	local10, local02
	add	fp, #4
	rdlong	local08, fp
	add	local10, local08
	add	local09, #20
	wrlong	local10, local09
	rdlong	local09, fp
	sub	fp, #8
	test	local09, #511 wz
 if_e	jmp	#LR__1236
	add	fp, #16
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_clst2sect
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1235
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#2, local09
	mov	result1, #2
	jmp	#LR__1244
LR__1235
	add	fp, #28
	rdlong	local09, fp
	sub	fp, #20
	rdlong	local10, fp
	shr	local10, #9
	add	local09, local10
	add	fp, #20
	wrlong	local09, fp
	sub	fp, #28
LR__1236
LR__1237
LR__1238
	add	fp, #4
	rdlong	local10, fp
	mov	local09, local10
	sub	fp, #4
	add	local09, #20
	rdlong	local04, local09
	add	local10, #12
	rdlong	local08, local10
	cmp	local04, local08 wcz
 if_be	jmp	#LR__1239
	add	fp, #4
	rdlong	local10, fp
	mov	local09, local10
	add	local10, #20
	rdlong	local04, local10
	add	local09, #12
	wrlong	local04, local09
	rdlong	local02, fp
	mov	local09, local02
	sub	fp, #4
	add	local02, #16
	rdbyte	local10, local02
	or	local10, #64
	add	local09, #16
	wrbyte	local10, local09
LR__1239
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #20
	rdlong	local10, local09
	test	local10, #511 wz
 if_e	jmp	#LR__1243
	add	fp, #4
	rdlong	local08, fp
	mov	local03, local08
	add	fp, #24
	rdlong	local05, fp
	sub	fp, #28
	mov	local06, local05
	add	local03, #28
	rdlong	local12, local03
	sub	local03, #28
	mov	local07, local12
	cmp	local06, local07 wz
 if_e	jmp	#LR__1243
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdbyte	local09, local01
	test	local09, #128 wz
 if_e	jmp	#LR__1241
	add	fp, #16
	rdlong	local01, fp
	add	local01, #1
	rdbyte	arg01, local01
	sub	fp, #12
	rdlong	local02, fp
	mov	arg02, local02
	add	arg02, #40
	sub	fp, #4
	add	local02, #28
	rdlong	arg03, local02
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1240
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__1244
LR__1240
	add	fp, #4
	rdlong	local02, fp
	mov	local09, local02
	sub	fp, #4
	add	local02, #16
	rdbyte	local03, local02
	getbyte	local10, local03, #0
	and	local10, #127
	add	local09, #16
	wrbyte	local10, local09
LR__1241
	add	fp, #16
	rdlong	local01, fp
	add	local01, #1
	rdbyte	arg01, local01
	sub	fp, #12
	rdlong	local04, fp
	add	local04, #40
	add	fp, #24
	rdlong	arg03, fp
	sub	fp, #28
	mov	local02, #1
	mov	arg02, local04
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1242
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #4
	add	local09, #17
	wrbyte	#1, local09
	mov	result1, #1
	jmp	#LR__1244
LR__1242
	add	fp, #4
	rdlong	local01, fp
	mov	local09, local01
	add	fp, #24
	rdlong	local10, fp
	sub	fp, #28
	add	local09, #28
	wrlong	local10, local09
	sub	local09, #28
LR__1243
' 
' 			fp->sect = nsect;
' 		}
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1244
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_lseek_ret
	ret

_fatfs_cc_f_opendir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg03, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__1251
	add	fp, #8
	mov	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1250
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #12
	rdlong	result1, fp
	wrlong	result1, arg02
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1249
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #43
	rdbyte	result1, result1
	test	result1, #128 wz
 if_ne	jmp	#LR__1247
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #6
	rdbyte	result1, arg02
	test	result1, #16 wz
 if_e	jmp	#LR__1245
	add	fp, #4
	rdlong	arg02, fp
	mov	local01, arg02
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	add	arg02, #28
	rdlong	arg02, arg02
	call	#_fatfs_cc_ld_clust
	add	local01, #8
	wrlong	result1, local01
	jmp	#LR__1246
LR__1245
	add	fp, #12
	wrlong	#5, fp
	sub	fp, #12
LR__1246
LR__1247
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1248
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg02, fp
	add	arg02, #6
	rdword	arg02, arg02
	add	local01, #4
	wrword	arg02, local01
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1248
LR__1249
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
LR__1250
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	add	fp, #4
 if_ne	rdlong	local01, fp
 if_ne	sub	fp, #4
 if_ne	wrlong	#0, local01
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1251
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_opendir_ret
	ret

_fatfs_cc_f_closedir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_e	add	fp, #4
 if_e	rdlong	result1, fp
 if_e	sub	fp, #4
 if_e	wrlong	#0, result1
' 
' 
' 
' 
' 		dp->obj.fs = 0;
' #line 4632 "ff.c"
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_closedir_ret
	ret

_fatfs_cc_f_readdir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_validate
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1255
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1252
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__1254
LR__1252
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_read
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdlong	result1, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1253
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_get_fileinfo
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
LR__1253
LR__1254
LR__1255
' 			}
' 			;
' 		}
' 	}
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_readdir_ret
	ret

_fatfs_cc_f_stat
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #60
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	mov	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1259
	add	fp, #16
	mov	arg01, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1258
	add	fp, #59
	rdbyte	result1, fp
	sub	fp, #59
	test	result1, #128 wz
 if_ne	add	fp, #12
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #12
 if_ne	jmp	#LR__1257
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_e	jmp	#LR__1256
	add	fp, #16
	mov	arg01, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_get_fileinfo
LR__1256
LR__1257
LR__1258
LR__1259
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_stat_ret
	ret

_fatfs_cc_f_unlink
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #108
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #96
	wrlong	#0, fp
	sub	fp, #96
	mov	arg01, fp
	add	fp, #100
	mov	arg02, fp
	sub	fp, #104
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1268
	add	fp, #104
	rdlong	arg02, fp
	sub	fp, #92
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__1267
	add	fp, #55
	rdbyte	result1, fp
	sub	fp, #55
	test	result1, #128 wz
 if_ne	add	fp, #8
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #8
 if_ne	jmp	#LR__1260
	add	fp, #18
	rdbyte	result1, fp
	sub	fp, #18
	test	result1, #1 wz
 if_ne	add	fp, #8
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #8
LR__1260
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1263
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #64
	rdlong	arg02, fp
	sub	fp, #40
	call	#_fatfs_cc_ld_clust
	add	fp, #100
	wrlong	result1, fp
	sub	fp, #82
	rdbyte	result1, fp
	sub	fp, #18
	test	result1, #16 wz
 if_e	jmp	#LR__1262
	add	fp, #104
	rdlong	result1, fp
	sub	fp, #48
	wrlong	result1, fp
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #36
	wrlong	arg02, fp
	sub	fp, #8
	mov	arg01, fp
	sub	fp, #56
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1261
	add	fp, #56
	mov	arg01, fp
	sub	fp, #56
	mov	arg02, #0
	call	#_fatfs_cc_dir_read
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	cmp	result1, #4 wz
 if_e	add	fp, #8
 if_e	wrlong	#0, fp
 if_e	sub	fp, #8
LR__1261
LR__1262
LR__1263
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1266
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_dir_remove
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1264
	add	fp, #100
	rdlong	local01, fp wz
	sub	fp, #100
 if_e	jmp	#LR__1264
	add	fp, #12
	mov	arg01, fp
	add	fp, #88
	rdlong	local02, fp
	sub	fp, #100
	mov	local03, #0
	mov	arg02, local02
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
	mov	local04, result1
	add	fp, #8
	wrlong	local04, fp
	sub	fp, #8
LR__1264
	add	fp, #8
	rdlong	local04, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1265
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #104
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__1265
LR__1266
LR__1267
LR__1268
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_unlink_ret
	ret

_fatfs_cc_f_mkdir
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #88
	add	fp, #4
	wrlong	arg01, fp
	mov	arg01, fp
	add	fp, #68
	mov	arg02, fp
	sub	fp, #72
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1274
	add	fp, #72
	rdlong	arg02, fp
	sub	fp, #60
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	mov	arg02, local01
	call	#_fatfs_cc_follow_path
	add	fp, #8
	wrlong	result1, fp
	mov	local02, result1 wz
	sub	fp, #8
 if_e	add	fp, #8
 if_e	wrlong	#8, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	cmp	result1, #4 wz
 if_ne	jmp	#LR__1273
	add	fp, #72
	rdlong	arg02, fp
	sub	fp, #16
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #56
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #76
	wrlong	result1, fp
	sub	fp, #68
	wrlong	#0, fp
	add	fp, #68
	rdlong	result1, fp wz
	sub	fp, #76
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #76
	rdlong	result1, fp
	sub	fp, #76
	cmp	result1, #1 wz
 if_e	add	fp, #8
 if_e	wrlong	#2, fp
 if_e	sub	fp, #8
	add	fp, #76
	rdlong	local03, fp
	sub	fp, #76
	cmp	local03, ##-1 wz
 if_e	add	fp, #8
 if_e	wrlong	#1, fp
 if_e	sub	fp, #8
	call	#_fatfs_cc__get_fattime
	add	fp, #84
	wrlong	result1, fp
	sub	fp, #76
	rdlong	local03, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1270
	add	fp, #72
	rdlong	arg01, fp
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #76
	mov	arg02, local01
	call	#_fatfs_cc_dir_clear
	add	fp, #8
	wrlong	result1, fp
	mov	local02, result1 wz
	sub	fp, #8
 if_ne	jmp	#LR__1269
	add	fp, #72
	rdlong	arg01, fp
	sub	fp, #72
	add	arg01, #48
	mov	arg02, #32
	mov	arg03, #11
	mov	local04, arg01
	call	#\builtin_bytefill_
	add	fp, #72
	rdlong	local03, fp
	add	local03, #48
	wrbyte	#46, local03
	rdlong	local03, fp
	add	local03, #59
	wrbyte	#16, local03
	rdlong	arg01, fp
	add	arg01, #70
	add	fp, #12
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #12
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #48
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #76
	call	#_fatfs_cc_st_clust
	add	fp, #72
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg01, #80
	sub	fp, #72
	add	arg02, #48
	mov	arg03, #32
	call	#__system____builtin_memmove
	add	fp, #72
	rdlong	local03, fp
	add	local03, #81
	wrbyte	#46, local03
	sub	fp, #52
	rdlong	arg03, fp
	add	fp, #60
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #80
	sub	fp, #72
	call	#_fatfs_cc_st_clust
	add	fp, #72
	rdlong	local03, fp
	add	local03, #3
	wrbyte	#1, local03
	sub	fp, #60
	mov	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_dir_register
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__1269
LR__1270
	add	fp, #8
	rdlong	local03, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1271
	add	fp, #40
	rdlong	arg01, fp
	add	arg01, #22
	add	fp, #44
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #32
	rdlong	arg02, fp
	add	fp, #36
	rdlong	arg03, fp
	sub	fp, #76
	call	#_fatfs_cc_st_clust
	add	fp, #40
	rdlong	local03, fp
	add	local03, #11
	wrbyte	#16, local03
	add	fp, #32
	rdlong	local03, fp
	add	local03, #3
	wrbyte	#1, local03
	sub	fp, #64
	rdlong	local03, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1272
	add	fp, #72
	rdlong	arg01, fp
	sub	fp, #72
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	jmp	#LR__1272
LR__1271
	add	fp, #56
	mov	arg01, fp
	add	fp, #20
	rdlong	arg02, fp
	sub	fp, #76
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
LR__1272
LR__1273
LR__1274
' 				remove_chain(&sobj, dcl, 0);
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_mkdir_ret
	ret

_fatfs_cc_f_rename
	mov	COUNT_, #9
	call	#pushregs_
	add	ptra, #148
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #8
	call	#_fatfs_cc_get_ldnumber
	add	fp, #4
	mov	arg01, fp
	add	fp, #100
	mov	arg02, fp
	sub	fp, #104
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1288
	add	fp, #104
	rdlong	arg02, fp
	sub	fp, #88
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #12
 if_ne	jmp	#LR__1275
	add	fp, #59
	rdbyte	result1, fp
	sub	fp, #59
	test	result1, #160 wz
 if_ne	add	fp, #12
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #12
LR__1275
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1287
	add	fp, #108
	mov	arg01, fp
	sub	fp, #64
	rdlong	arg02, fp
	sub	fp, #44
	mov	arg03, #32
	call	#__system____builtin_memmove
	add	fp, #60
	mov	arg01, fp
	sub	fp, #44
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #44
	call	#__system____builtin_memmove
	add	fp, #60
	mov	arg01, fp
	sub	fp, #52
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1278
	add	fp, #68
	rdlong	arg01, fp
	sub	fp, #44
	rdlong	result1, fp
	sub	fp, #24
	cmp	arg01, result1 wz
 if_ne	jmp	#LR__1276
	add	fp, #76
	rdlong	result1, fp
	sub	fp, #44
	rdlong	local02, fp
	sub	fp, #32
	cmp	result1, local02 wz
 if_e	mov	local01, #4
 if_e	jmp	#LR__1277
LR__1276
	mov	local01, #8
LR__1277
	add	fp, #12
	wrlong	local01, fp
	sub	fp, #12
LR__1278
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_ne	jmp	#LR__1284
	add	fp, #60
	mov	arg01, fp
	sub	fp, #60
	call	#_fatfs_cc_dir_register
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1283
	add	fp, #88
	rdlong	arg01, fp
	add	fp, #52
	wrlong	arg01, fp
	add	arg01, #13
	sub	fp, #32
	mov	arg02, fp
	sub	fp, #108
	add	arg02, #13
	mov	arg03, #19
	call	#__system____builtin_memmove
	add	fp, #140
	rdlong	local01, fp
	sub	fp, #21
	rdbyte	result1, fp
	add	local01, #11
	wrbyte	result1, local01
	add	fp, #21
	rdlong	local01, fp
	sub	fp, #140
	add	local01, #11
	rdbyte	local01, local01
	test	local01, #16 wz
 if_ne	jmp	#LR__1279
	add	fp, #140
	rdlong	result1, fp
	mov	local01, result1
	sub	fp, #140
	add	result1, #11
	rdbyte	result1, result1
	or	result1, #32
	add	local01, #11
	wrbyte	result1, local01
LR__1279
	add	fp, #104
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	add	fp, #36
	rdlong	local01, fp
	sub	fp, #140
	add	local01, #11
	rdbyte	local01, local01
	test	local01, #16 wz
 if_e	jmp	#LR__1282
	add	fp, #24
	rdlong	local03, fp
	mov	local04, local03
	add	fp, #44
	rdlong	local05, fp
	sub	fp, #68
	mov	local06, local05
	cmp	local04, local06 wz
 if_e	jmp	#LR__1282
	add	fp, #104
	rdlong	arg01, fp
	mov	local01, arg01
	add	fp, #36
	rdlong	local07, fp
	sub	fp, #140
	mov	local08, local07
	mov	arg02, local08
	call	#_fatfs_cc_ld_clust
	mov	arg02, result1
	mov	arg01, local01
	call	#_fatfs_cc_clst2sect
	add	fp, #144
	wrlong	result1, fp
	mov	local09, result1 wz
	sub	fp, #144
 if_e	mov	local01, #2
 if_e	add	fp, #12
 if_e	wrlong	#2, fp
 if_e	sub	fp, #12
 if_e	jmp	#LR__1281
	add	fp, #104
	rdlong	arg01, fp
	add	fp, #40
	rdlong	arg02, fp
	sub	fp, #144
	call	#_fatfs_cc_move_window
	add	fp, #12
	wrlong	result1, fp
	add	fp, #92
	rdlong	local08, fp
	mov	local07, local08
	add	local07, #48
	mov	local01, local07
	add	local01, #32
	add	fp, #36
	wrlong	local01, fp
	sub	fp, #128
	rdlong	local09, fp
	sub	fp, #12
	mov	local01, local09 wz
 if_ne	jmp	#LR__1280
	add	fp, #140
	rdlong	local04, fp
	sub	fp, #140
	mov	local07, local04
	add	local07, #1
	rdbyte	local03, local07
	sub	local07, #1
	getbyte	local08, local03, #0
	cmp	local08, #46 wz
 if_ne	jmp	#LR__1280
	add	fp, #104
	rdlong	arg01, fp
	add	fp, #36
	rdlong	arg02, fp
	sub	fp, #72
	rdlong	local07, fp
	sub	fp, #68
	mov	arg03, local07
	call	#_fatfs_cc_st_clust
	add	fp, #104
	rdlong	local09, fp
	sub	fp, #104
	mov	local01, local09
	mov	local08, #1
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
LR__1280
LR__1281
LR__1282
LR__1283
LR__1284
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1286
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	call	#_fatfs_cc_dir_remove
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1285
	add	fp, #104
	rdlong	arg01, fp
	sub	fp, #104
	call	#_fatfs_cc_sync_fs
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1285
LR__1286
LR__1287
LR__1288
' 					res = sync_fs(fs);
' 				}
' 			}
' 
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_rename_ret
	ret

_fatfs_cc_time
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	call	#_fatfs_cc_gettimeofday
	add	fp, #8
	rdlong	result1, fp
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #12
	rdlong	result1, fp wz
	sub	fp, #4
 if_e	jmp	#LR__1289
	add	fp, #4
	rdlong	result1, fp
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #16
	wrlong	arg02, result1
LR__1289
'         *tp = now;
'     return now;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_time_ret
	ret

_fatfs_cc_mktime
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	add	local01, #20
	rdlong	arg01, local01
	sub	local01, #20
	cmps	arg01, #70 wc
'                 return (time_t) -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__1294
	mov	local02, ##1900
	add	local01, #20
	rdlong	result1, local01
	add	local02, result1
	sub	local01, #8
	rdlong	local03, local01
	sub	local03, #1
	add	local01, #4
	rdlong	arg01, local01
	sub	local01, #16
	shl	arg01, #2
	add	ptr__fatfs_cc_dat__, #404
	add	arg01, ptr__fatfs_cc_dat__
	rdlong	result1, arg01
	add	local03, result1
	mov	arg01, local02
	sub	ptr__fatfs_cc_dat__, #404
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_e	jmp	#LR__1290
	mov	local04, #0
	add	local01, #16
	rdlong	result1, local01
	sub	local01, #16
	cmps	result1, #2 wc
 if_ae	mov	local04, #1
	jmp	#LR__1291
LR__1290
	mov	local04, #0
LR__1291
	add	local01, #4
	rdlong	local05, local01
	sub	local01, #4
	rdlong	local06, local01
	add	local01, #8
	rdlong	result1, local01
	qmul	result1, ##3600
	add	local03, local04
	mov	local04, local05
	shl	local04, #4
	sub	local04, local05
	shl	local04, #2
	add	local06, local04
	sub	local01, #8
	getqx	local05
	qmul	local03, ##86400
	add	local06, local05
	mov	local03, local02
	sub	local03, ##1970
	getqx	local05
	qmul	local03, ##31536000
	add	local06, local05
	mov	local03, local02
	sub	local03, ##1969
	abs	local07, local03 wc
	shr	local07, #2
	negc	local07, local07
	cmps	local02, ##2001 wc
	getqx	local05
	add	local06, local05
 if_b	jmp	#LR__1292
	sub	local02, ##2000
	abs	local05, local02 wc
	qdiv	local05, #100
	getqx	local05
	negc	local05, local05
	sub	local07, local05
LR__1292
	qmul	local07, ##86400
	getqx	local07
	add	local06, local07
	call	#_fatfs_cc__tzset
	add	ptr__fatfs_cc_dat__, #352
	rdlong	local07, ptr__fatfs_cc_dat__
	add	local06, local07
	add	ptr__fatfs_cc_dat__, #104
	rdlong	arg01, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #456
	cmp	arg01, #1 wz
 if_ne	jmp	#LR__1293
	mov	arg01, local01
	call	#_fatfs_cc___indst
	cmps	result1, #0 wz
 if_ne	sub	local06, ##3600
LR__1293
'                 s -=  (3600L) ;
' 
'         return s;
	mov	result1, local06
LR__1294
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_mktime_ret
	ret

_fatfs_cc__gmtime_r
	mov	COUNT_, #3
	call	#pushregs_
	rdlong	local01, arg01
	qdiv	local01, ##86400
	getqx	result1
	add	result1, #4
	qdiv	result1, #7
	add	arg02, #24
	cmp	local01, ##1325376000 wc
 if_ae	sub	local01, ##1325376000
 if_ae	mov	local02, ##2012
 if_b	mov	local02, ##1970
' 	  year = 1970;
' 	}
' 
' 	for(;;) {
	getqy	result1
	wrlong	result1, arg02
	sub	arg02, #24
LR__1295
	mov	arg01, local02
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_ne	mov	local03, ##31622400
 if_e	mov	local03, ##31536000
	cmp	local01, local03 wc
' 	    break;
 if_ae	add	local02, #1
 if_ae	sub	local01, local03
 if_ae	jmp	#LR__1295
	qdiv	local01, ##86400
	mov	local03, local02
	sub	local03, ##1900
	add	arg02, #20
	wrlong	local03, arg02
	add	arg02, #8
	mov	arg01, local02
	getqx	local02
	wrlong	local02, arg02
	sub	arg02, #28
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_ne	mov	local03, #29
 if_e	mov	local03, #28
	add	ptr__fatfs_cc_dat__, #360
	wrlong	local03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #360
' 
'         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
'         for (i = 0; mday >= days_per_mth[i]; i++)
	mov	arg01, #0
	loc	pa,	#(@LR__1297-@LR__1296)
	call	#FCACHE_LOAD_
LR__1296
	mov	local03, arg01
	shl	local03, #2
	add	ptr__fatfs_cc_dat__, #356
	add	local03, ptr__fatfs_cc_dat__
	rdlong	local03, local03
	cmps	local02, local03 wc
	sub	ptr__fatfs_cc_dat__, #356
 if_b	jmp	#LR__1298
	mov	local03, arg01
	shl	local03, #2
	add	ptr__fatfs_cc_dat__, #356
	add	local03, ptr__fatfs_cc_dat__
	rdlong	local03, local03
	sub	local02, local03
	add	arg01, #1
	sub	ptr__fatfs_cc_dat__, #356
	jmp	#LR__1296
LR__1297
LR__1298
	qdiv	local01, ##86400
	add	arg02, #16
	wrlong	arg01, arg02
	add	local02, #1
	sub	arg02, #4
	wrlong	local02, arg02
	getqy	local01
	qdiv	local01, ##3600
	getqx	local03
	qdiv	local01, ##3600
	sub	arg02, #4
	wrlong	local03, arg02
	getqy	local01
	qdiv	local01, #60
	getqx	local03
	qdiv	local01, #60
	sub	arg02, #4
	wrlong	local03, arg02
	sub	arg02, #4
'         stm->tm_isdst = 0;
' 
' ;
'         return stm;
	mov	result1, arg02
	getqy	local03
	wrlong	local03, arg02
	add	arg02, #32
	wrlong	#0, arg02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__gmtime_r_ret
	ret

_fatfs_cc__tzset
	mov	arg01, ##@LR__2281
	call	#_fatfs_cc_getenv
	mov	arg01, result1
	add	ptr__fatfs_cc_dat__, #456
	mov	arg02, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #456
	call	#_fatfs_cc___tzoffset
	add	ptr__fatfs_cc_dat__, #352
	wrlong	result1, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #352
_fatfs_cc__tzset_ret
	ret

_fatfs_cc_opendir
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
	add	ptr___system__dat__, #380
	mov	local01, ptr___system__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr___system__dat__, #380
	call	#__system____getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #40
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #40
 if_ne	cmps	arg01, #0 wz
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
' #line 19 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror( 16 );
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1300
	mov	arg01, #92
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
' #line 27 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror( 7 );
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1300
	add	local02, #40
	rdlong	arg02, local02
	sub	local02, #40
	rdlong	local04, arg02
	add	arg02, #4
	rdlong	local05, arg02
	mov	arg01, local03
	mov	arg02, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	arg01, result1 wz
 if_e	jmp	#LR__1299
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
' #line 35 "C:/flexprop/include/libc/unix/opendir.c"
'         _seterror(r);
'         free(dir);
'         return 0;
	mov	result1, #0
	jmp	#LR__1300
LR__1299
	wrlong	local02, local03
'     }
'     dir->vfs = v;
'     return dir;
	mov	result1, local03
LR__1300
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_opendir_ret
	ret

_fatfs_cc_closedir
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	rdlong	arg01, local01
	add	arg01, #44
	rdlong	arg01, arg01
	rdlong	local02, arg01
	add	arg01, #4
	rdlong	local03, arg01
	mov	arg01, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	local04, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
'     r = v->closedir(dir);
'     free(dir);
'     return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	local04, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	local04, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_closedir_ret
	ret

_fatfs_cc_readdir
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	arg02, arg01 wz
	add	arg01, #8
	mov	local01, arg01
'         return 0;
	sub	arg01, #8
 if_e	mov	result1, #0
 if_e	jmp	#LR__1302
	add	arg02, #48
	rdlong	arg02, arg02
	rdlong	local02, arg02
	add	arg02, #4
	rdlong	local03, arg02
	mov	arg02, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wz
 if_e	jmp	#LR__1301
	cmps	result1, #1 wc
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	result1, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
'             _seterror(r);
'         }
'         return 0;
	mov	result1, #0
	jmp	#LR__1302
LR__1301
'     }
'     return D;
	mov	result1, local01
LR__1302
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_readdir_ret
	ret

_fatfs_cc__openraw
	mov	COUNT_, #12
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #12
	wrlong	#4, fp
	sub	fp, #24
	rdlong	arg03, fp
	add	fp, #28
	wrlong	arg03, fp
	add	ptr___system__dat__, #380
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #380
	add	fp, #4
	wrlong	arg01, fp
	sub	fp, #28
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #0
	call	#__system____getvfsforfile
	add	fp, #24
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #24
 if_e	jmp	#LR__1303
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
	add	result1, #32
	rdlong	result1, result1 wz
 if_ne	jmp	#LR__1304
LR__1303
' #line 112 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
	add	ptr___system__dat__, #24
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
	jmp	#LR__1319
LR__1304
	add	fp, #32
	rdlong	arg01, fp
	sub	fp, #32
	mov	arg02, #0
	mov	arg03, #48
	mov	local01, arg01
	call	#\builtin_bytefill_
	add	fp, #24
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #32
	rdlong	local04, local03
	mov	arg03, local04
	rdlong	local05, arg03
	add	arg03, #4
	rdlong	local06, arg03
	mov	local07, local06
	add	fp, #8
	rdlong	local08, fp
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #24
	rdlong	local10, fp
	sub	fp, #12
	mov	arg01, local08
	mov	arg02, local09
	mov	arg03, local10
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__1305
	add	fp, #12
	rdlong	local07, fp
	sub	fp, #12
	test	local07, #4 wz
 if_e	jmp	#LR__1305
	add	fp, #24
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #36
	rdlong	local04, local03
	sub	local03, #36
	mov	local11, local04
	rdlong	local05, local11
	add	local11, #4
	rdlong	local06, local11
	mov	local07, local06
	add	fp, #8
	rdlong	local08, fp
	add	fp, #4
	rdlong	local09, fp
	sub	fp, #20
	rdlong	local10, fp
	sub	fp, #16
	mov	arg01, local08
	mov	arg02, local09
	mov	arg03, local10
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	mov	local12, result1
	add	fp, #20
	wrlong	local12, fp
	sub	fp, #20
LR__1305
	add	fp, #20
	rdlong	local12, fp wz
	sub	fp, #20
 if_ne	jmp	#LR__1318
	add	fp, #12
	rdlong	local12, fp
	and	local12, #3 wz
	add	fp, #28
	wrlong	local12, fp
	sub	fp, #40
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #2
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #40
	rdlong	local12, fp
	sub	fp, #40
	cmp	local12, #1 wz
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #1
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #12
	rdlong	local12, fp
	sub	fp, #12
	test	local12, #32 wz
 if_ne	add	fp, #28
 if_ne	rdlong	local12, fp
 if_ne	or	local12, #192
 if_ne	wrlong	local12, fp
 if_ne	sub	fp, #28
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #4
	rdlong	local07, fp
	add	local12, #8
	wrlong	local07, local12
	add	fp, #4
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #16
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1306
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #4
	rdlong	local02, local07
	add	local12, #16
	wrlong	local02, local12
LR__1306
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #20
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1307
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #8
	rdlong	local02, local07
	add	local12, #20
	wrlong	local02, local12
LR__1307
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #32
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1308
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	rdlong	local02, local07
	add	local12, #32
	wrlong	local02, local12
LR__1308
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #36
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1309
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #16
	rdlong	local02, local07
	add	local12, #36
	wrlong	local02, local12
LR__1309
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #44
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1310
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #12
	rdlong	local02, local07
	add	local12, #44
	wrlong	local02, local12
LR__1310
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #24
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1313
	add	fp, #32
	rdlong	arg01, fp
	mov	local03, arg01
	add	local03, #36
	rdlong	local12, local03
	rdlong	local05, local12
	add	local12, #4
	rdlong	local07, local12
	add	fp, #16
	mov	arg03, fp
	sub	fp, #48
	mov	arg02, #256
	mov	local11, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local11
	add	fp, #44
	wrlong	result1, fp
	sub	fp, #44
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1311
	add	fp, #48
	rdlong	local07, fp
	sub	fp, #48
	test	local07, #2 wz
 if_e	jmp	#LR__1311
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc___default_putc_terminal_
	call	#__system___make_methodptr
	mov	local07, result1
	add	local12, #24
	wrlong	local07, local12
	jmp	#LR__1312
LR__1311
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc___default_putc_
	call	#__system___make_methodptr
	add	local12, #24
	wrlong	result1, local12
LR__1312
LR__1313
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #28
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1314
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc___default_getc_
	call	#__system___make_methodptr
	add	local12, #28
	wrlong	result1, local12
LR__1314
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	add	local12, #40
	rdlong	local07, local12 wz
 if_ne	jmp	#LR__1317
	add	fp, #24
	rdlong	local12, fp
	sub	fp, #24
	add	local12, #20
	rdlong	local07, local12 wz
 if_e	jmp	#LR__1315
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #8
	rdlong	local07, fp
	sub	fp, #24
	add	local07, #20
	rdlong	local02, local07
	add	local12, #40
	wrlong	local02, local12
	jmp	#LR__1316
LR__1315
	add	fp, #32
	rdlong	local12, fp
	sub	fp, #32
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc___default_flush_
	call	#__system___make_methodptr
	add	local12, #40
	wrlong	result1, local12
LR__1316
LR__1317
LR__1318
	add	fp, #20
	rdlong	local12, fp wz
 if_e	mov	arg01, #0
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	arg01, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
'     return r;
	rdlong	result1, fp
	sub	fp, #20
LR__1319
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__openraw_ret
	ret

_fatfs_cc__closeraw
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	result1, local01 wz
	sub	local01, #8
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1322
	add	local01, #40
	rdlong	result1, local01 wz
	sub	local01, #40
 if_e	jmp	#LR__1320
	add	local01, #40
	rdlong	arg01, local01
	sub	local01, #40
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
LR__1320
	add	local01, #32
	rdlong	local05, local01 wz
	sub	local01, #32
 if_e	jmp	#LR__1321
	add	local01, #32
	rdlong	local05, local01
	sub	local01, #32
	rdlong	local03, local05
	add	local05, #4
	rdlong	local04, local05
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local02, result1
LR__1321
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
'     return r;
	mov	result1, local02
LR__1322
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__closeraw_ret
	ret

_fatfs_cc___default_getc
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	test	local03, #2 wz
 if_ne	mov	arg01, local01
 if_ne	call	#_fatfs_cc___default_flush
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local03, local02 wz
 if_ne	jmp	#LR__1323
	mov	arg01, local01
	call	#_fatfs_cc___default_filbuf
	mov	local03, result1
LR__1323
	cmps	local03, #1 wc
'         return -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__1324
	sub	local03, #1
	wrlong	local03, local02
	add	local02, #4
	rdlong	local03, local02
	rdbyte	result1, local03
	add	local03, #1
	wrlong	local03, local02
'     }
'     b->cnt = i-1;
'     ptr = b->ptr;
'     i = *ptr++;
'     b->ptr = ptr;
'     return i;
LR__1324
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___default_getc_ret
	ret

_fatfs_cc___default_putc
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	result1, local03
	test	result1, #1 wz
 if_ne	mov	arg01, local02
 if_ne	call	#_fatfs_cc___default_flush
	rdlong	arg01, local03
	or	arg01, #2
	wrlong	arg01, local03
	sub	local03, #8
	rdlong	arg01, local03
	mov	local04, arg01
	add	local03, #12
	add	local04, local03
	wrbyte	local01, local04
	getbyte	local01, local01, #0
	add	arg01, #1
	sub	local03, #12
	wrlong	arg01, local03
	cmp	arg01, ##1024 wz
 if_ne	jmp	#LR__1325
	mov	arg01, local02
	call	#_fatfs_cc___default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__1325
'             c = -1;
'         }
'     }
'     return c;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___default_putc_ret
	ret

_fatfs_cc___default_putc_terminal
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	result1, local03
	test	result1, #1 wz
 if_ne	mov	arg01, local02
 if_ne	call	#_fatfs_cc___default_flush
	rdlong	arg01, local03
	or	arg01, #2
	wrlong	arg01, local03
	sub	local03, #8
	rdlong	arg01, local03
	mov	local04, arg01
	add	local03, #12
	add	local04, local03
	wrbyte	local01, local04
	getbyte	local01, local01, #0
	sub	local03, #12
	add	arg01, #1
	wrlong	arg01, local03
	cmp	local01, #10 wz
 if_ne	cmp	arg01, ##1024 wz
 if_ne	jmp	#LR__1326
	mov	arg01, local02
	call	#_fatfs_cc___default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__1326
'             c = -1;
'         }
'     }
'     return c;
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___default_putc_terminal_ret
	ret

_fatfs_cc___default_flush
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #2 wz
 if_e	jmp	#LR__1329
	cmps	local03, #1 wc
 if_b	jmp	#LR__1331
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #64 wz
 if_e	jmp	#LR__1328
	add	local01, #8
	rdlong	local04, local01
	sub	local01, #8
	test	local04, #128 wz
 if_e	jmp	#LR__1327
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	rdlong	local05, local04
	add	local04, #4
	rdlong	local04, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local06, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local06
	add	local01, #8
	rdlong	local04, local01
	andn	local04, #128
	wrlong	local04, local01
	sub	local01, #8
LR__1327
LR__1328
	add	local01, #20
	rdlong	local04, local01
	sub	local01, #20
	rdlong	local05, local04
	add	local04, #4
	rdlong	local07, local04
	add	local02, #12
	mov	arg02, local02
	sub	local02, #12
	mov	arg01, local01
	mov	arg03, local03
	mov	local06, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local06
	jmp	#LR__1331
LR__1329
	add	local02, #8
	rdlong	local04, local02
	sub	local02, #8
	test	local04, #1 wz
 if_e	jmp	#LR__1330
	cmp	local03, #0 wz
 if_e	jmp	#LR__1330
	add	local01, #44
	rdlong	local08, local01
	sub	local01, #44
	mov	local04, local08
	rdlong	local05, local04
	add	local04, #4
	rdlong	local09, local04
	mov	local07, local09
	mov	local10, local01
	neg	local11, local03
	mov	local12, #1
	mov	arg01, local10
	mov	arg02, local11
	mov	arg03, #1
	mov	local06, objptr
	mov	objptr, local05
	call	local07
	mov	objptr, local06
	mov	local04, result1
	mov	local13, local04
	cmps	local13, #0 wc
 if_ae	mov	local13, local03
LR__1330
LR__1331
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
'     }
'     b->cnt = 0;
'     b->ptr = 0;
'     b->flags = 0;
'     return 0;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___default_flush_ret
	ret

_fatfs_cc_stat
	mov	COUNT_, #7
	call	#pushregs_
	mov	arg03, arg01
	mov	local01, arg02
	add	ptr___system__dat__, #380
	mov	local02, ptr___system__dat__
	mov	arg01, local02
	mov	arg02, arg03
	mov	arg03, #0
	sub	ptr___system__dat__, #380
	call	#__system____getvfsforfile
	mov	local03, result1 wz
 if_ne	add	local03, #52
 if_ne	rdlong	arg01, local03
 if_ne	sub	local03, #52
 if_ne	cmps	arg01, #0 wz
' #line 22 "C:/flexprop/include/libc/unix/stat.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1332
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	mov	local04, arg01
	call	#\builtin_bytefill_
	mov	result1, local04
	rdbyte	arg02, local02 wz
 if_e	add	local01, #8
 if_e	wrlong	##4607, local01
' #line 29 "C:/flexprop/include/libc/unix/stat.c"
'         buf->st_mode =  0010000  | 0777;
'         return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1332
	add	local03, #52
	rdlong	arg02, local03
	rdlong	local05, arg02
	add	arg02, #4
	rdlong	local06, arg02
	mov	arg01, local02
	mov	arg02, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
'     }
' #line 39 "C:/flexprop/include/libc/unix/stat.c"
'     r = v->stat(name, buf);
' #line 43 "C:/flexprop/include/libc/unix/stat.c"
'     return r;
LR__1332
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_stat_ret
	ret

_fatfs_cc_open
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	add	ptr__fatfs_cc_dat__, ##536
	mov	local04, ptr__fatfs_cc_dat__
' 
'     for (fd = 0; fd <  10 ; fd++) {
	mov	local05, #0
	sub	ptr__fatfs_cc_dat__, ##536
	loc	pa,	#(@LR__1334-@LR__1333)
	call	#FCACHE_LOAD_
LR__1333
	cmps	local05, #10 wc
 if_ae	jmp	#LR__1335
	mov	result1, local05
	shl	result1, #1
	add	result1, local05
	shl	result1, #4
	add	result1, local04
	add	result1, #8
	rdlong	result1, result1 wz
 if_ne	add	local05, #1
 if_ne	jmp	#LR__1333
LR__1334
LR__1335
	cmp	local05, #10 wz
'         return _seterror( 11 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#11, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1336
	mov	arg01, local05
	shl	arg01, #1
	add	arg01, local05
	shl	arg01, #4
	add	arg01, local04
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, local03
	call	#_fatfs_cc__openraw
	cmps	result1, #0 wz
 if_e	mov	result1, local05
'         r = fd;
'     }
'     return r;
LR__1336
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_open_ret
	ret

_fatfs_cc_write
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__1337
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__fatfs_cc_dat__, ##536
	add	arg01, ptr__fatfs_cc_dat__
'     }
'     f = &__filetab[fd];
'     return _vfswrite(f, vbuf, count);
	sub	ptr__fatfs_cc_dat__, ##536
	call	#_fatfs_cc__vfswrite
LR__1337
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_write_ret
	ret

_fatfs_cc_read
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__1338
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__fatfs_cc_dat__, ##536
	add	arg01, ptr__fatfs_cc_dat__
'     }
'     f = &__filetab[fd];
'     return _vfsread(f, vbuf, count);
	sub	ptr__fatfs_cc_dat__, ##536
	call	#_fatfs_cc__vfsread
LR__1338
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_read_ret
	ret

_fatfs_cc_close
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__1339
	mov	arg01, local01
	shl	arg01, #1
	add	arg01, local01
	shl	arg01, #4
	add	ptr__fatfs_cc_dat__, ##536
	add	arg01, ptr__fatfs_cc_dat__
'     }
'     f = &__filetab[fd];
'     return _closeraw(f);
	sub	ptr__fatfs_cc_dat__, ##536
	call	#_fatfs_cc__closeraw
LR__1339
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_close_ret
	ret

_fatfs_cc_lseek
	mov	COUNT_, #6
	call	#pushregs_
	cmp	arg01, #10 wc
'         return _seterror( 5 );
 if_ae	add	ptr___system__dat__, #24
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #24
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__1341
	mov	local01, arg01
	shl	local01, #1
	add	local01, arg01
	shl	local01, #4
	add	ptr__fatfs_cc_dat__, ##536
	add	local01, ptr__fatfs_cc_dat__
	add	local01, #44
	rdlong	arg01, local01 wz
	sub	local01, #44
	sub	ptr__fatfs_cc_dat__, ##536
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1341
	add	local01, #8
	rdlong	local02, local01
	sub	local01, #8
	test	local02, #64 wz
 if_ne	add	local01, #8
 if_ne	rdlong	local02, local01
 if_ne	or	local02, #128
 if_ne	wrlong	local02, local01
 if_ne	sub	local01, #8
	add	local01, #44
	rdlong	local02, local01
	sub	local01, #44
	rdlong	local03, local02
	add	local02, #4
	rdlong	local04, local02
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmps	local06, #0 wc
 if_ae	jmp	#LR__1340
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1341
LR__1340
'     }
'     return r;
	mov	result1, local06
LR__1341
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_lseek_ret
	ret

_fatfs_cc_ioctl
	mov	COUNT_, #4
	call	#pushregs_
	call	#_fatfs_cc___getftab
	mov	local01, result1 wz
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1343
	add	local01, #36
	rdlong	arg01, local01
	sub	local01, #36
	rdlong	local02, arg01
	add	arg01, #4
	rdlong	local03, arg01
	mov	arg01, local01
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	arg01, result1 wz
 if_e	jmp	#LR__1342
'         return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	arg01, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1343
LR__1342
'     }
'     return 0;
	mov	result1, #0
LR__1343
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_ioctl_ret
	ret

_fatfs_cc_rmdir
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
	add	ptr___system__dat__, #380
	mov	local01, ptr___system__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr___system__dat__, #380
	call	#__system____getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #60
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #60
 if_ne	cmps	arg01, #0 wz
' #line 434 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1345
	add	local02, #60
	rdlong	arg01, local02
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1 wz
 if_e	jmp	#LR__1344
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1345
LR__1344
'     }
'     return r;
	mov	result1, local06
LR__1345
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_rmdir_ret
	ret

_fatfs_cc_mkdir
	mov	COUNT_, #7
	call	#pushregs_
	mov	arg03, arg01
	mov	local01, arg02
	add	ptr___system__dat__, #380
	mov	local02, ptr___system__dat__
	mov	arg01, local02
	mov	arg02, arg03
	mov	arg03, #0
	sub	ptr___system__dat__, #380
	call	#__system____getvfsforfile
	mov	local03, result1 wz
 if_ne	add	local03, #32
 if_ne	rdlong	arg01, local03
 if_ne	sub	local03, #32
 if_ne	cmps	arg01, #0 wz
' #line 454 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1347
	add	local03, #56
	rdlong	arg02, local03
	rdlong	local04, arg02
	add	arg02, #4
	rdlong	local05, arg02
	mov	arg01, local02
	mov	arg02, local01
	mov	local06, objptr
	mov	objptr, local04
	call	local05
	mov	objptr, local06
	mov	local07, result1 wz
 if_e	jmp	#LR__1346
'         return _seterror(-r);
	neg	arg01, local07 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1347
LR__1346
'     }
'     return r;
	mov	result1, local07
LR__1347
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_mkdir_ret
	ret

_fatfs_cc_getenv
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	loc	pa,	#(@LR__1349-@LR__1348)
	call	#FCACHE_LOAD_
LR__1348
	rdbyte	result1, arg01 wz
 if_ne	add	local02, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__1348
LR__1349
	mov	result1, local02
	mov	local03, result1
	add	ptr__fatfs_cc_dat__, ##1112
	rdlong	arg03, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, ##1112
'             return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1353
' 
' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
	add	ptr__fatfs_cc_dat__, ##1112
	rdlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1112
LR__1350
	rdlong	local05, local04 wz
 if_e	jmp	#LR__1352
	mov	arg01, local05
	mov	arg02, local01
	mov	arg03, local03
	call	#_fatfs_cc_strncmp
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1351
	mov	arg03, local03
	add	arg03, local05
	rdbyte	arg03, arg03
	cmp	arg03, #61 wz
' 			return name+len+1;
 if_e	mov	result1, local05
 if_e	add	result1, local03
 if_e	add	result1, #1
 if_e	jmp	#LR__1353
LR__1351
	add	local04, #4
	jmp	#LR__1350
LR__1352
' 	}
' 	return 0;
	mov	result1, #0
LR__1353
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_getenv_ret
	ret

_fatfs_cc__get_fattime
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #52
	mov	arg01, #0
	call	#_fatfs_cc_time
	add	fp, #4
	wrlong	result1, fp
	mov	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc__gmtime_r
	add	fp, #36
	rdlong	arg02, fp
	sub	arg02, #80
	shl	arg02, #9
	sub	fp, #4
	rdlong	result1, fp
	add	result1, #1
	shl	result1, #5
	or	arg02, result1
	sub	fp, #4
	rdlong	result1, fp
	or	arg02, result1
	sub	fp, #20
	wrlong	arg02, fp
	add	fp, #16
	rdlong	arg02, fp
	shl	arg02, #11
	sub	fp, #4
	rdlong	result1, fp
	shl	result1, #5
	or	arg02, result1
	sub	fp, #4
	rdlong	result1, fp
	or	arg02, result1
	sub	fp, #4
	wrlong	arg02, fp
' 
'     now = time(0);
'     _gmtime_r (&now, &date);
'     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
'     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
'     return (ffdate << 16) | fftime;
	sub	fp, #4
	rdlong	result1, fp
	shl	result1, #16
	sub	fp, #8
	or	result1, arg02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__get_fattime_ret
	ret

_fatfs_cc_unixtime_0220
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	shr	arg01, #9
	and	arg01, #127
	mov	result1, #80
	add	result1, arg01
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	rdlong	result1, fp
	shr	result1, #5
	getnib	result1, result1, #0
	sub	result1, #1
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	rdlong	result1, fp
	and	result1, #31
	add	fp, #24
	wrlong	result1, fp
	sub	fp, #20
	rdlong	result1, fp
	shr	result1, #11
	and	result1, #31
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	rdlong	result1, fp
	shr	result1, #5
	and	result1, #63
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	rdlong	arg01, fp
	and	arg01, #31
	shl	arg01, #1
	add	fp, #8
	wrlong	arg01, fp
	mov	arg01, fp
	sub	fp, #16
	call	#_fatfs_cc_mktime
	add	fp, #12
	wrlong	result1, fp
' 
'     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
'     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
'     date.tm_mday = (dosdate & 0x1f);
'     date.tm_hour = (dostime >> 11) & 0x1f;
'     date.tm_min = (dostime >> 5) & 0x3f;
'     date.tm_sec = (dostime & 0x1f) << 1;
' 
'     t = mktime(&date);
' #line 58 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'     return t;
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_unixtime_0220_ret
	ret

_fatfs_cc__set_dos_error_0222
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
' #line 72 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'     switch (derr) {
	mov	local02, local01
	fle	local02, #20
	jmprel	local02
LR__1354
	jmp	#LR__1355
	jmp	#LR__1369
	jmp	#LR__1370
	jmp	#LR__1371
	jmp	#LR__1356
	jmp	#LR__1357
	jmp	#LR__1358
	jmp	#LR__1359
	jmp	#LR__1361
	jmp	#LR__1364
	jmp	#LR__1360
	jmp	#LR__1365
	jmp	#LR__1366
	jmp	#LR__1367
	jmp	#LR__1372
	jmp	#LR__1372
	jmp	#LR__1372
	jmp	#LR__1362
	jmp	#LR__1368
	jmp	#LR__1363
	jmp	#LR__1372
LR__1355
	mov	local03, #0
'         r = 0;
'         break;
	jmp	#LR__1373
LR__1356
LR__1357
LR__1358
	mov	local03, #4
'         r =  4 ;
'         break;
	jmp	#LR__1373
LR__1359
LR__1360
	mov	local03, #6
'         r =  6 ;
'         break;
	jmp	#LR__1373
LR__1361
	mov	local03, #9
'         r =  9 ;
'         break;
	jmp	#LR__1373
LR__1362
	mov	local03, #7
'         r =  7 ;
'         break;
	jmp	#LR__1373
LR__1363
LR__1364
LR__1365
LR__1366
LR__1367
	mov	local03, #10
'         r =  10 ;
'         break;
	jmp	#LR__1373
LR__1368
	mov	local03, #11
'         r =  11 ;
'         break;
	jmp	#LR__1373
LR__1369
LR__1370
LR__1371
LR__1372
	mov	local03, #12
'         r =  12 ;
'         break;
LR__1373
'     }
'     return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	local03, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	local03, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__set_dos_error_0222_ret
	ret

_fatfs_cc_v_creat
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, ##1588
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1375
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, ##1588
	call	#\builtin_bytefill_
	add	local03, ##1036
	mov	arg01, local03
	sub	local03, ##1036
	mov	arg02, local02
	mov	arg03, #7
	call	#_fatfs_cc_f_open
	mov	local04, result1 wz
 if_e	jmp	#LR__1374
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local04
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1375
LR__1374
	wrlong	local03, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__1375
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_creat_ret
	ret

_fatfs_cc_v_close
	mov	COUNT_, #2
	call	#pushregs_
	rdlong	local01, arg01
	add	local01, ##1036
	mov	arg01, local01
	sub	local01, ##1036
	call	#_fatfs_cc_f_close
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
'     FAT_FIL *f = fil->vfsdata;
'     r=f_close(&f->fil);
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local02
	call	#_fatfs_cc__set_dos_error_0222
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_close_ret
	ret

_fatfs_cc_v_opendir
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #44
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
' #line 156 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1377
	mov	arg02, local02
	mov	arg01, local03
	call	#_fatfs_cc_f_opendir
	mov	local04, result1 wz
 if_e	jmp	#LR__1376
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'         free(f);
'         return _set_dos_error(r);
	mov	arg01, local04
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1377
LR__1376
	add	local01, #4
	wrlong	local03, local01
'     }
'     dir->vfsdata = f;
'     return 0;
	mov	result1, #0
LR__1377
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_opendir_ret
	ret

_fatfs_cc_v_closedir
	mov	COUNT_, #2
	call	#pushregs_
	add	arg01, #4
	rdlong	local01, arg01
	mov	arg01, local01
	call	#_fatfs_cc_f_closedir
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
	cmp	local02, #0 wz
 if_ne	mov	arg01, local02
 if_ne	call	#_fatfs_cc__set_dos_error_0222
'     return r;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_closedir_ret
	ret

_fatfs_cc_v_readdir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #44
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg02, fp
	add	arg02, #4
	rdlong	arg01, arg02
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_f_readdir
	add	fp, #40
	wrlong	result1, fp
	sub	fp, #40
	cmp	result1, #0 wz
 if_e	jmp	#LR__1378
'         return _set_dos_error(r);
	add	fp, #40
	rdlong	arg01, fp
	sub	fp, #40
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1381
LR__1378
	add	fp, #24
	rdbyte	arg02, fp
	sub	fp, #24
	zerox	arg02, #7 wz
'         return -1;
 if_e	neg	result1, #1
 if_e	jmp	#LR__1381
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #16
	mov	arg02, fp
	sub	fp, #24
	call	#__system____builtin_strcpy
	add	fp, #20
	rdbyte	result1, fp
	sub	fp, #20
	test	result1, #16 wz
 if_e	jmp	#LR__1379
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	add	result1, #80
	wrbyte	#1, result1
	jmp	#LR__1380
LR__1379
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	add	result1, #80
	wrbyte	#0, result1
LR__1380
	add	fp, #8
	rdlong	result1, fp
	add	fp, #4
	rdlong	arg02, fp
	add	result1, #72
	wrlong	arg02, result1
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #8
	rdword	arg01, fp
	add	fp, #2
	rdword	arg02, fp
	sub	fp, #18
	call	#_fatfs_cc_unixtime_0220
	add	local01, #76
	wrlong	result1, local01
'         ent->d_type =  (0) ;
'     }
'     ent->d_size = finfo.fsize;
'     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
'     return 0;
	mov	result1, #0
LR__1381
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_readdir_ret
	ret

_fatfs_cc_v_stat
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #48
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #8
	mov	arg01, arg02
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	rdbyte	result1, result1 wz
 if_e	jmp	#LR__1382
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	rdbyte	result1, result1
	cmp	result1, #46 wz
 if_ne	jmp	#LR__1383
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #1
	rdbyte	result1, result1 wz
 if_ne	jmp	#LR__1383
LR__1382
	add	fp, #24
	wrbyte	#16, fp
	sub	fp, #12
	wrlong	#0, fp
	sub	fp, #12
	jmp	#LR__1384
LR__1383
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_f_stat
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1384
	add	fp, #12
	rdlong	result1, fp wz
	sub	fp, #12
 if_e	jmp	#LR__1385
'         return _set_dos_error(r);
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1386
LR__1385
	add	fp, #44
	wrlong	#292, fp
	sub	fp, #20
	rdbyte	local01, fp
	sub	fp, #24
	test	local01, #1 wz
 if_ne	add	fp, #44
 if_ne	rdlong	local01, fp
 if_ne	or	local01, #146
 if_ne	wrlong	local01, fp
 if_ne	sub	fp, #44
	add	fp, #24
	rdbyte	local01, fp
	sub	fp, #24
	test	local01, #16 wz
 if_ne	add	fp, #44
 if_ne	rdlong	local01, fp
 if_ne	or	local01, ##4169
 if_ne	wrlong	local01, fp
 if_ne	sub	fp, #44
	add	fp, #8
	rdlong	local01, fp
	add	fp, #36
	rdlong	result1, fp
	add	local01, #8
	wrlong	result1, local01
	sub	fp, #36
	rdlong	local01, fp
	add	local01, #12
	wrlong	#1, local01
	rdlong	local01, fp
	add	fp, #8
	rdlong	result1, fp
	add	local01, #24
	wrlong	result1, local01
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #28
	wrlong	##512, local01
	rdlong	result1, fp
	mov	local01, result1
	add	result1, #24
	rdlong	result1, result1
	abs	result1, result1 wc
	shr	result1, #9
	negc	result1, result1
	add	local01, #32
	wrlong	result1, local01
	rdlong	local02, fp
	mov	local01, local02
	mov	local03, local02
	add	fp, #12
	rdword	arg01, fp
	add	fp, #2
	rdword	arg02, fp
	sub	fp, #22
	call	#_fatfs_cc_unixtime_0220
	add	local03, #44
	wrlong	result1, local03
	add	local02, #40
	wrlong	result1, local02
	add	local01, #36
	wrlong	result1, local01
'         mode |=  0010000  |  0100  |  0010  |  0001 ;
'     }
'     buf->st_mode = mode;
'     buf->st_nlink = 1;
'     buf->st_size = finfo.fsize;
'     buf->st_blksize = 512;
'     buf->st_blocks = buf->st_size / 512;
'     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
' #line 247 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'     return r;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1386
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_stat_ret
	ret

_fatfs_cc_v_read
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg01, fp
	rdlong	arg01, arg01 wz
	add	fp, #12
	wrlong	arg01, fp
	sub	fp, #16
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1389
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1036
	sub	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #12
	mov	arg04, fp
	sub	fp, #24
	call	#_fatfs_cc_f_read
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__1387
	add	fp, #4
	rdlong	arg01, fp
	mov	local01, arg01
	add	arg01, #8
	rdlong	arg01, arg01
	or	arg01, #32
	add	local01, #8
	wrlong	arg01, local01
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1389
LR__1387
	add	fp, #24
	rdlong	local01, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__1388
	add	fp, #4
	rdlong	result1, fp
	mov	local01, result1
	sub	fp, #4
	add	result1, #8
	rdlong	result1, result1
	or	result1, #16
	add	local01, #8
	wrlong	result1, local01
LR__1388
'         fil->state |=  (0x10) ;
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__1389
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_read_ret
	ret

_fatfs_cc_v_write
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg01, fp
	rdlong	arg01, arg01 wz
	add	fp, #12
	wrlong	arg01, fp
	sub	fp, #16
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1391
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1036
	sub	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #12
	mov	arg04, fp
	sub	fp, #24
	call	#_fatfs_cc_f_write
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__1390
	add	fp, #4
	rdlong	arg01, fp
	mov	local01, arg01
	add	arg01, #8
	rdlong	arg01, arg01
	or	arg01, #32
	add	local01, #8
	wrlong	arg01, local01
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1391
LR__1390
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__1391
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_write_ret
	ret

_fatfs_cc_v_lseek
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	rdlong	local03, arg01
	add	local03, ##1036 wz
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1394
	cmp	local02, #0 wz
 if_e	jmp	#LR__1392
	cmp	local02, #1 wz
 if_e	add	local03, #20
 if_e	rdlong	local04, local03
 if_e	sub	local03, #20
 if_e	add	local01, local04
 if_ne	add	local03, #12
 if_ne	rdlong	local04, local03
 if_ne	sub	local03, #12
 if_ne	add	local01, local04
LR__1392
	mov	arg02, local01
	mov	arg01, local03
	call	#_fatfs_cc_f_lseek
	mov	arg01, result1 wz
 if_e	jmp	#LR__1393
'         return _set_dos_error(result);
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1394
LR__1393
'     }
'     return offset;
	mov	result1, local01
LR__1394
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_lseek_ret
	ret

_fatfs_cc_v_ioctl
' {
'     return _seterror( 10 );
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
_fatfs_cc_v_ioctl_ret
	ret

_fatfs_cc_v_mkdir
	call	#_fatfs_cc_f_mkdir
	mov	arg01, result1
' 
'     r = f_mkdir(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0222
_fatfs_cc_v_mkdir_ret
	ret

_fatfs_cc_v_remove
	call	#_fatfs_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0222
_fatfs_cc_v_remove_ret
	ret

_fatfs_cc_v_rmdir
	call	#_fatfs_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0222
_fatfs_cc_v_rmdir_ret
	ret

_fatfs_cc_v_rename
	call	#_fatfs_cc_f_rename
	mov	arg01, result1
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0222
_fatfs_cc_v_rename_ret
	ret

_fatfs_cc_v_open
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg01, ##1588
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local04, result1 wz
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1401
	mov	local05, local04
	mov	local06, #0
	mov	local07, ##1588
	mov	arg01, local05
	mov	arg02, #0
	mov	arg03, ##1588
	mov	local08, arg01
	call	#\builtin_bytefill_
	mov	result1, local08
'   switch (flags & 3) {
	mov	local09, local03
	and	local09, #3 wz
 if_e	jmp	#LR__1395
	cmp	local09, #1 wz
 if_e	jmp	#LR__1396
	jmp	#LR__1397
LR__1395
	mov	local10, #1
'       fs_flags =  0x01 ;
'       break;
	jmp	#LR__1398
LR__1396
	mov	local10, #2
'       fs_flags =  0x02 ;
'       break;
	jmp	#LR__1398
LR__1397
	mov	local10, #3
'       fs_flags =  0x01  |  0x02 ;
'       break;
LR__1398
	test	local03, #8 wz
 if_ne	or	local10, #24
 if_ne	jmp	#LR__1399
	test	local03, #32 wz
 if_ne	or	local10, #48
LR__1399
	add	local04, ##1036
	mov	arg01, local04
	sub	local04, ##1036
	mov	arg02, local02
	mov	arg03, local10
	call	#_fatfs_cc_f_open
	mov	local11, result1 wz
 if_e	jmp	#LR__1400
	mov	arg01, local04
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
' #line 395 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'     return _set_dos_error(r);
	mov	arg01, local11
	call	#_fatfs_cc__set_dos_error_0222
	jmp	#LR__1401
LR__1400
	wrlong	local04, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__1401
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_open_ret
	ret

_fatfs_cc_v_init
' {
'     return 0;
	mov	result1, #0
_fatfs_cc_v_init_ret
	ret

_fatfs_cc_v_deinit
	mov	arg02, ##@LR__2282
	mov	arg01, #0
	mov	arg03, #0
	call	#_fatfs_cc_f_mount
' #line 417 "C:/flexprop/include/filesys/fatfs/fatfs.cc"
'     return 0;
	mov	result1, #0
_fatfs_cc_v_deinit_ret
	ret

_fatfs_cc_get_vfs
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #80
	call	#__system___gc_alloc_managed
	mov	local02, result1
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_close_
	call	#__system___make_methodptr
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_read_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_write_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_lseek_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_ioctl_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	local01, local02
	add	local02, #4
	wrlong	#0, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_open_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_creat_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_opendir_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_closedir_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_readdir_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_stat_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_mkdir_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_rmdir_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_remove_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_rename_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_init_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	mov	arg01, objptr
	mov	arg02, ptr__fatfs_cc_v_deinit_
	call	#__system___make_methodptr
	add	local02, #4
	wrlong	result1, local02
	sub	local02, #76
' 
'     v->close = &v_close;
'     v->read = &v_read;
'     v->write = &v_write;
'     v->lseek = &v_lseek;
'     v->ioctl = &v_ioctl;
'     v->flush = 0;
'     v->vfs_data = ptr;
'     v->reserved = 0;
' 
'     v->open = &v_open;
'     v->creat = &v_creat;
'     v->opendir = &v_opendir;
'     v->closedir = &v_closedir;
'     v->readdir = &v_readdir;
'     v->stat = &v_stat;
' 
'     v->mkdir = &v_mkdir;
'     v->rmdir = &v_rmdir;
' 
'     v->remove = &v_remove;
'     v->rename = &v_rename;
' 
'     v->init = &v_init;
'     v->deinit = &v_deinit;
' 
'     return v;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_vfs_ret
	ret

_fatfs_cc_xmit_mmc_0398
	add	objptr, #8
	rdlong	_var01, objptr
	add	objptr, #8
	rdlong	_var02, objptr
	sub	objptr, #16
	dirl	_var02
	setq	#1
	rdlong	_var03, arg01
	rev	_var03
	movbyts	_var03, #27
	wypin	_var03, _var02
	mov	_var03, arg02
	shr	arg02, #2 wz
	shl	_var03, #3
	wypin	_var03, _var01
	dirh	_var02
	add	arg01, #8
	rev	_var04
	movbyts	_var04, #27
LR__1402
 if_ne	wypin	_var04, _var02
 if_ne	rdlong	_var04, arg01
 if_ne	add	arg01, #4
 if_ne	rev	_var04
 if_ne	movbyts	_var04, #27
LR__1403
 if_ne	testp	_var02 wc
 if_a	jmp	#LR__1403
 if_ne	djnz	arg02, #LR__1402
LR__1404
	testp	_var01 wc
 if_ae	jmp	#LR__1404
	dirl	_var02
	wypin	##-1, _var02
	dirh	_var02
_fatfs_cc_xmit_mmc_0398_ret
	ret

_fatfs_cc_rcvr_mmc_0405
	add	objptr, #8
	rdlong	_var01, objptr
	add	objptr, #12
	rdlong	_var02, objptr
	sub	objptr, #20
	akpin	_var02
	mov	_var03, arg02 wz
	shr	_var03, #2 wz
 if_e	jmp	#LR__1407
	mov	_var04, _var03
	shl	_var04, #5
	wypin	_var04, _var01
	wxpin	#63, _var02
LR__1405
LR__1406
	testp	_var02 wc
 if_ae	jmp	#LR__1406
	rdpin	_var04, _var02
	rev	_var04
	movbyts	_var04, #27
	wrlong	_var04, arg01
	add	arg01, #4
	djnz	_var03, #LR__1405
LR__1407
	and	arg02, #3 wz
 if_e	jmp	#LR__1410
	wxpin	#39, _var02
LR__1408
	wypin	#8, _var01
LR__1409
	testp	_var02 wc
 if_ae	jmp	#LR__1409
	rdpin	_var04, _var02
	rev	_var04
	wrbyte	_var04, arg01
	add	arg01, #1
	djnz	arg02, #LR__1408
LR__1410
_fatfs_cc_rcvr_mmc_0405_ret
	ret

_fatfs_cc_wait_ready_0409
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #16
	getct	result1
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, #20
	shr	local01, #1
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #12
' {
' 	BYTE d;
' 	UINT tmr, tmout;
' 
' 	tmr = _cnt();
' 	tmout =  (*(uint32_t *)0x14)  >> 1;
' 	for(;;) {
LR__1411
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #255 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1412
	getct	result1
	add	fp, #8
	rdlong	local01, fp
	sub	result1, local01
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #12
	cmp	result1, local01 wc
 if_ae	mov	result1, #0
 if_b	jmp	#LR__1411
LR__1412
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_wait_ready_0409_ret
	ret

_fatfs_cc_deselect_0415
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	objptr, #12
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	sub	objptr, #4
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	add	objptr, #8
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #20
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	drvh	arg01
	waitx	#16
	mov	arg01, fp
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_deselect_0415_ret
	ret

_fatfs_cc_select_0419
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	objptr, #12
	rdlong	arg01, objptr
	add	fp, #8
	wrlong	arg01, fp
	add	objptr, #8
	rdlong	arg01, objptr
	sub	objptr, #20
	add	fp, #4
	wrlong	arg01, fp
	fltl	arg01
	sub	fp, #4
	rdlong	arg01, fp
	drvl	arg01
	waitx	#16
	add	fp, #4
	rdlong	arg01, fp
	dirh	arg01
	sub	fp, #8
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	call	#_fatfs_cc_wait_ready_0409
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1413
	call	#_fatfs_cc_deselect_0415
' 
' 	deselect();
' 	return 0;
	mov	result1, #0
LR__1413
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_select_0419_ret
	ret

_fatfs_cc_rcvr_datablock_0423
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	getct	result1
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, #20
	shr	local01, #3
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #20
' 	BYTE *buff,
' 	UINT btr
' )
' {
' 	BYTE d[2];
' 	UINT tmr, tmout;
' 
' 	tmr = _cnt();
' 	tmout =  (*(uint32_t *)0x14)  >> 3;
' 	for(;;) {
LR__1414
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	cmp	local01, #255 wz
 if_ne	jmp	#LR__1415
	getct	result1
	mov	local01, result1
	add	fp, #16
	rdlong	arg02, fp
	sub	local01, arg02
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #20
	cmp	local01, arg02 wc
 if_b	jmp	#LR__1414
LR__1415
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	cmp	local01, #254 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1416
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #2
	call	#_fatfs_cc_rcvr_mmc_0405
' 
' 	rcvr_mmc(buff, btr);
' 	rcvr_mmc(d, 2);
' 
' 	return 1;
	mov	result1, #1
LR__1416
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_rcvr_datablock_0423_ret
	ret

_fatfs_cc_xmit_datablock_0425
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_wait_ready_0409
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1418
	add	fp, #8
	rdbyte	arg02, fp
	add	fp, #4
	wrbyte	arg02, fp
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_xmit_mmc_0398
	add	fp, #8
	rdbyte	arg02, fp
	sub	fp, #8
	cmp	arg02, #253 wz
 if_e	jmp	#LR__1417
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	decod	arg02, #9
	call	#_fatfs_cc_xmit_mmc_0398
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #2
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	rdbyte	arg02, fp
	sub	fp, #12
	and	arg02, #31
	cmp	arg02, #5 wz
' 			return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1418
LR__1417
' 	}
' 
' 	return 1;
	mov	result1, #1
LR__1418
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_xmit_datablock_0425_ret
	ret

_fatfs_cc_send_cmd_0429
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #28
_fatfs_cc_send_cmd_0429_enter
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdbyte	result1, fp
	sub	fp, #4
	test	result1, #128 wz
 if_e	jmp	#LR__1419
	add	fp, #4
	rdbyte	arg02, fp
	and	arg02, #127
	wrbyte	arg02, fp
	sub	fp, #4
	mov	arg01, #55
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0429
	add	fp, #12
	wrbyte	result1, fp
	rdbyte	local01, fp
	sub	fp, #12
	cmp	local01, #2 wc
 if_ae	add	fp, #12
 if_ae	rdbyte	result1, fp
 if_ae	sub	fp, #12
 if_ae	jmp	#LR__1423
LR__1419
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #12 wz
 if_e	jmp	#LR__1420
	call	#_fatfs_cc_deselect_0415
	call	#_fatfs_cc_select_0419
	cmp	result1, #0 wz
 if_e	mov	result1, #255
 if_e	jmp	#LR__1423
LR__1420
	add	fp, #4
	rdbyte	arg02, fp
	mov	local01, #64
	or	local01, arg02
	add	fp, #16
	wrbyte	local01, fp
	sub	fp, #12
	rdlong	local01, fp
	shr	local01, #24
	add	fp, #13
	wrbyte	local01, fp
	sub	fp, #13
	rdlong	local01, fp
	shr	local01, #16
	add	fp, #14
	wrbyte	local01, fp
	sub	fp, #14
	rdlong	local01, fp
	shr	local01, #8
	add	fp, #15
	wrbyte	local01, fp
	sub	fp, #15
	rdlong	local01, fp
	add	fp, #16
	wrbyte	local01, fp
	sub	fp, #12
	wrbyte	#1, fp
	sub	fp, #8
	rdbyte	local01, fp
	sub	fp, #4
	zerox	local01, #7 wz
 if_e	add	fp, #12
 if_e	wrbyte	#149, fp
 if_e	sub	fp, #12
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #8 wz
 if_e	add	fp, #12
 if_e	wrbyte	#135, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdbyte	local01, fp
	add	fp, #13
	wrbyte	local01, fp
	sub	fp, #5
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #6
	call	#_fatfs_cc_xmit_mmc_0398
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #12 wz
 if_e	add	fp, #16
 if_e	mov	arg01, fp
 if_e	sub	fp, #16
 if_e	mov	arg02, #1
 if_e	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #12
	wrbyte	#10, fp
	sub	fp, #12
' 	n = 10;
' 	do
LR__1421
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0405
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #128 wz
 if_e	jmp	#LR__1422
	add	fp, #12
	rdbyte	local01, fp
	sub	local01, #1
	wrbyte	local01, fp
	rdbyte	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1421
LR__1422
' 
' 	return d;
	add	fp, #16
	rdbyte	result1, fp
	sub	fp, #16
LR__1423
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_send_cmd_0429_ret
	ret

_fatfs_cc_gettimeofday
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	call	#__system___getus
	mov	arg01, result1
	add	ptr__fatfs_cc_dat__, ##1124
	rdlong	local02, ptr__fatfs_cc_dat__
	mov	result1, arg01
	sub	result1, local02
	qdiv	result1, ##1000000
	sub	ptr__fatfs_cc_dat__, ##1124
	getqx	local02
	qdiv	result1, ##1000000
	cmp	local02, #0 wz
	getqy	local03
 if_e	jmp	#LR__1424
	add	ptr__fatfs_cc_dat__, ##1120
	rdlong	local04, ptr__fatfs_cc_dat__
	add	local04, local02
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	arg01, local03
	add	ptr__fatfs_cc_dat__, #4
	wrlong	arg01, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1124
LR__1424
	add	ptr__fatfs_cc_dat__, ##1120
	rdlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1120
	wrlong	local04, local01
	add	local01, #4
	wrlong	local03, local01
'         lastsec += secs;
'         lastus = now - leftover;
'     }
'     tv->tv_sec = lastsec;
'     tv->tv_usec = leftover;
'     return 0;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_gettimeofday_ret
	ret

_fatfs_cc___getftab
	cmp	arg01, #10 wc
'         return 0;
 if_ae	mov	result1, #0
 if_ae	jmp	#_fatfs_cc___getftab_ret
'     }
'     return &__filetab[i];
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr__fatfs_cc_dat__, ##536
	add	result1, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##536
_fatfs_cc___getftab_ret
	ret

_fatfs_cc_rename
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #284
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	ptr___system__dat__, #380
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #380
	add	fp, #16
	wrlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg03, #0
	call	#__system____getvfsforfile
	add	fp, #16
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #16
 if_e	jmp	#LR__1425
	add	fp, #16
	rdlong	arg03, fp
	sub	fp, #16
	add	arg03, #68
	rdlong	arg03, arg03 wz
 if_ne	jmp	#LR__1426
LR__1425
'         return _seterror( 16 );
	add	ptr___system__dat__, #24
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
	jmp	#LR__1427
LR__1426
	add	fp, #28
	mov	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #0
	call	#__system____getvfsforfile
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #16
	cmp	result1, arg01 wz
'         return _seterror( 23 );
 if_ne	add	ptr___system__dat__, #24
 if_ne	wrlong	#23, ptr___system__dat__
 if_ne	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_ne	jmp	#LR__1427
	add	fp, #16
	rdlong	local01, fp
	add	local01, #68
	rdlong	local01, local01
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #28
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	add	fp, #12
	wrlong	result1, fp
'     }
'     r = (v->rename)(oldname, newname);
'     return _seterror(r);
	mov	arg01, result1 wz
	sub	fp, #12
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
LR__1427
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_rename_ret
	ret

_fatfs_cc__is_leap_year
	abs	result1, arg01 wc
	and	result1, #3
	negc	result1, result1 wz
 if_ne	jmp	#LR__1429
	abs	result1, arg01 wc
	qdiv	result1, #100
	getqy	result1
	negc	result1, result1 wz
 if_ne	jmp	#LR__1428
	abs	result1, arg01 wc
	qdiv	result1, #400
'       return (0 == y % 400);
	mov	result1, #0
	getqy	_var01
	negc	_var01, _var01 wz
 if_e	mov	result1, #1
	jmp	#_fatfs_cc__is_leap_year_ret
LR__1428
'     return 1;
	mov	result1, #1
	jmp	#_fatfs_cc__is_leap_year_ret
LR__1429
'   }
'   return 0;
	mov	result1, #0
_fatfs_cc__is_leap_year_ret
	ret

_fatfs_cc___tzoffset
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
	wrlong	##-1, local02
	mov	local03, #1
 if_ne	rdbyte	local04, local01 wz
'                 return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1447
	wrlong	#0, local02
	add	ptr__fatfs_cc_dat__, #504
	mov	local05, ptr__fatfs_cc_dat__
' 
'        *hasdst = 0;
' 
' 	n = stdname;
'         while (*s && isalpha(*s)) {
	sub	ptr__fatfs_cc_dat__, #504
	loc	pa,	#(@LR__1431-@LR__1430)
	call	#FCACHE_LOAD_
LR__1430
	rdbyte	local04, local01 wz
 if_e	jmp	#LR__1432
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1128
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1128
	test	result1, #12 wz
 if_e	jmp	#LR__1432
	mov	local06, local01
	mov	local07, local01
	add	local07, #1
	rdbyte	local08, local06
	mov	local01, local07
	wrbyte	local08, local05
	add	local05, #1
	jmp	#LR__1430
LR__1431
LR__1432
	wrbyte	#0, local05
	mov	local09, #0
	rdbyte	local04, local01
	cmp	local04, #45 wz
 if_e	neg	local03, #1
 if_e	add	local01, #1
	loc	pa,	#(@LR__1434-@LR__1433)
	call	#FCACHE_LOAD_
'                 sgn = -1;
'                 s++;
'         }
'         while (isdigit(*s)) {
LR__1433
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1128
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1128
	test	result1, #2 wz
 if_e	jmp	#LR__1435
	mov	local04, local09
	shl	local04, #2
	add	local04, local09
	shl	local04, #1
	rdbyte	local06, local01
	sub	local06, #48
	add	local04, local06
	mov	local09, local04
	add	local01, #1
	jmp	#LR__1433
LR__1434
LR__1435
	qmul	local09, ##3600
	rdbyte	local04, local01
	cmp	local04, #58 wz
	getqx	local10
 if_ne	jmp	#LR__1439
	mov	local09, #0
	add	local01, #1
	loc	pa,	#(@LR__1437-@LR__1436)
	call	#FCACHE_LOAD_
'                 x = 0;
'                 s++;
'                 while (isdigit(*s)) {
LR__1436
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1128
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1128
	test	result1, #2 wz
 if_e	jmp	#LR__1438
	mov	local04, local09
	shl	local04, #2
	add	local04, local09
	shl	local04, #1
	rdbyte	local06, local01
	sub	local06, #48
	add	local04, local06
	mov	local09, local04
	add	local01, #1
	jmp	#LR__1436
LR__1437
LR__1438
	mov	local08, local09
	shl	local08, #4
	sub	local08, local09
	shl	local08, #2
	add	local10, local08
LR__1439
	add	ptr__fatfs_cc_dat__, ##513
	mov	local05, ptr__fatfs_cc_dat__
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##615
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1128
	test	result1, #12 wz
 if_e	jmp	#LR__1442
	wrlong	#1, local02
'                 *hasdst = 1;
' 		while (*s && isalpha(*s)) *n++ = *s++;
LR__1440
	rdbyte	local04, local01 wz
 if_e	jmp	#LR__1441
	rdbyte	arg01, local01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1128
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1128
	test	result1, #12 wz
 if_e	jmp	#LR__1441
	mov	local07, local01
	add	local07, #1
	rdbyte	local08, local01
	mov	local01, local07
	wrbyte	local08, local05
	add	local05, #1
	jmp	#LR__1440
LR__1441
LR__1442
	wrbyte	#0, local05
	add	ptr__fatfs_cc_dat__, #504
	rdbyte	local04, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, #504
 if_e	jmp	#LR__1443
	add	ptr__fatfs_cc_dat__, #504
	mov	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #8
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #496
	jmp	#LR__1444
LR__1443
	add	ptr__fatfs_cc_dat__, ##522
	mov	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #26
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #496
LR__1444
	add	ptr__fatfs_cc_dat__, ##513
	rdbyte	local04, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, ##513
 if_e	jmp	#LR__1445
	add	ptr__fatfs_cc_dat__, ##513
	mov	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #13
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #500
	jmp	#LR__1446
LR__1445
	add	ptr__fatfs_cc_dat__, #504
	mov	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #4
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #500
LR__1446
	qmul	local03, local10
' 		_tzname[1] = stdname;
' 
'         return sgn * off;
	getqx	result1
LR__1447
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___tzoffset_ret
	ret

_fatfs_cc___indst
	mov	_var01, arg01
	add	_var01, #16
	rdlong	_var02, _var01
	sub	_var01, #16
	cmp	_var02, #2 wz
 if_ne	jmp	#LR__1448
	mov	_var02, #7
	add	_var01, #24
	rdlong	_var03, _var01
	add	_var02, _var03
	sub	_var01, #12
	rdlong	_var04, _var01
	sub	_var02, _var04
	cmps	_var02, #0 wc
'                         return 1;
 if_b	mov	result1, #1
 if_b	jmp	#_fatfs_cc___indst_ret
'                 return 0;
	mov	result1, #0
	jmp	#_fatfs_cc___indst_ret
LR__1448
	add	_var01, #16
	rdlong	_var02, _var01
	sub	_var01, #16
	cmp	_var02, #10 wz
 if_ne	jmp	#LR__1449
	add	_var01, #24
	rdlong	_var02, _var01
	sub	_var01, #12
	rdlong	_var05, _var01
	sub	_var02, _var05
	cmps	_var02, #0 wc
'                         return 0;
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc___indst_ret
'                 return 1;
	mov	result1, #1
	jmp	#_fatfs_cc___indst_ret
LR__1449
'         }
' 
'         return (t->tm_mon > 2 && t->tm_mon < 10);
	mov	_var02, #0
	add	_var01, #16
	rdlong	_var03, _var01
	sub	_var01, #16
	cmps	_var03, #3 wc
 if_b	jmp	#LR__1450
	add	_var01, #16
	rdlong	_var04, _var01
	cmps	_var04, #10 wc
 if_b	mov	_var02, #1
LR__1450
	mov	result1, _var02
_fatfs_cc___indst_ret
	ret

_fatfs_cc__rxtxioctl_1333
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
'     switch (req) {
	cmp	local01, #256 wz
 if_e	jmp	#LR__1451
	cmp	local01, #257 wz
 if_e	jmp	#LR__1452
	jmp	#LR__1453
LR__1451
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
'         *argl = _getrxtxflags();
'         return 0;
	mov	result1, #0
	jmp	#LR__1454
LR__1452
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
'         _setrxtxflags(*argl);
'         return 0;
	mov	result1, #0
	jmp	#LR__1454
LR__1453
'         return _seterror( 10 );
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
LR__1454
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__rxtxioctl_1333_ret
	ret

_fatfs_cc___dummy_flush_1334
' {
'     return 0;
	mov	result1, #0
_fatfs_cc___dummy_flush_1334_ret
	ret

_fatfs_cc__vfswrite
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, local02
	add	local01, #8
	rdlong	arg01, local01
	sub	local01, #8
	test	arg01, #2 wz
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1461
	add	local01, #8
	rdlong	result1, local01
	sub	local01, #8
	test	result1, #64 wz
 if_e	jmp	#LR__1456
	add	local01, #8
	rdlong	result1, local01
	sub	local01, #8
	test	result1, #128 wz
 if_e	jmp	#LR__1455
	add	local01, #44
	rdlong	arg03, local01
	sub	local01, #44
	rdlong	local05, arg03
	add	arg03, #4
	rdlong	local06, arg03
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local01, #8
	rdlong	local07, local01
	andn	local07, #128
	wrlong	local07, local01
	sub	local01, #8
LR__1455
LR__1456
	add	local01, #20
	rdlong	local07, local01 wz
	sub	local01, #20
 if_e	jmp	#LR__1458
	add	local01, #20
	rdlong	local07, local01
	sub	local01, #20
	rdlong	local05, local07
	add	local07, #4
	rdlong	local06, local07
	mov	arg02, local02
	mov	arg03, local03
	mov	arg01, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	mov	local08, result1
	cmps	local08, #0 wc
 if_ae	jmp	#LR__1457
	add	local01, #8
	rdlong	local07, local01
	or	local07, #32
	wrlong	local07, local01
'             f->state |=  (0x20) ;
'             return _seterror(r);
	add	ptr___system__dat__, #24
	wrlong	local08, ptr___system__dat__
	sub	ptr___system__dat__, #24
	cmp	local08, #0 wz
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1461
LR__1457
'         }
'         return r;
	mov	result1, local08
	jmp	#LR__1461
LR__1458
	add	local01, #24
	rdlong	local09, local01 wz
	sub	local01, #24
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1461
	mov	local08, #0
'     }
'     r = 0;
'     while (count > 0) {
LR__1459
	cmp	local03, #1 wc
 if_b	jmp	#LR__1460
	mov	local07, local09
	rdlong	local05, local07
	add	local07, #4
	rdlong	local06, local07
	rdbyte	arg01, local04
	mov	arg02, local01
	mov	local07, objptr
	mov	objptr, local05
	call	local06
	mov	objptr, local07
	add	local08, result1
	sub	local03, #1
	add	local04, #1
	jmp	#LR__1459
LR__1460
'         r += (*tx)(*buf++, f);
'         --count;
'     }
'     return r;
	mov	result1, local08
LR__1461
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__vfswrite_ret
	ret

_fatfs_cc__vfsread
	mov	COUNT_, #11
	call	#pushregs_
	add	ptra, #40
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #20
	wrlong	local01, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #28
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #8
	rdlong	local01, local02
	test	local01, #1 wz
' #line 316 "C:/flexprop/include/libc/unix/posixio.c"
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1468
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdlong	local01, local01 wz
 if_e	jmp	#LR__1463
	add	fp, #4
	rdlong	arg01, fp
	mov	local02, arg01
	add	local02, #16
	rdlong	local01, local02
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #12
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmps	result1, #0 wc
 if_ae	jmp	#LR__1462
	add	fp, #4
	rdlong	local03, fp
	mov	local01, local03
	add	local03, #8
	rdlong	local03, local03
	or	local03, #32
	add	local01, #8
	wrlong	local03, local01
'             f->state |=  (0x20) ;
'             return _seterror(r);
	add	fp, #12
	rdlong	arg01, fp wz
	sub	fp, #16
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1468
LR__1462
'         }
'         return r;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	jmp	#LR__1468
LR__1463
	add	fp, #4
	rdlong	local01, fp
	add	local01, #28
	rdlong	local01, local01 wz
	add	fp, #20
	wrlong	local01, fp
	sub	fp, #24
'         return _seterror( 6 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#6, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1468
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #36
	rdlong	local04, local01 wz
 if_e	jmp	#LR__1465
	add	fp, #4
	rdlong	local05, fp
	mov	local06, local05
	add	local06, #36
	rdlong	local07, local06
	mov	local01, local07
	rdlong	local02, local01
	add	local01, #4
	rdlong	local08, local01
	mov	local04, local08
	mov	local09, local05
	mov	local10, #256
	add	fp, #32
	mov	local11, fp
	mov	arg01, local09
	mov	arg02, #256
	mov	arg03, local11
	mov	local03, objptr
	mov	objptr, local02
	sub	fp, #36
	call	local04
	mov	objptr, local03
	add	fp, #16
	wrlong	result1, fp
	mov	local02, result1 wz
	sub	fp, #16
 if_ne	jmp	#LR__1464
	add	fp, #36
	rdlong	local06, fp
	sub	fp, #36
	mov	local04, local06
	and	local04, #2 wz
 if_ne	mov	local01, #1
 if_ne	add	fp, #32
 if_ne	wrlong	#1, fp
 if_ne	sub	fp, #32
LR__1464
LR__1465
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
'             break_on_nl = 1;
'         }
'     }
'     r = 0;
'     while (count > 0) {
LR__1466
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #1 wc
 if_b	jmp	#LR__1467
	add	fp, #24
	rdlong	local01, fp
	rdlong	local02, local01
	add	local01, #4
	rdlong	local04, local01
	sub	fp, #20
	rdlong	arg01, fp
	sub	fp, #4
	mov	local08, objptr
	mov	objptr, local02
	call	local04
	mov	objptr, local08
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wc
 if_b	jmp	#LR__1467
	add	fp, #28
	rdlong	local02, fp
	mov	local04, local02
	add	local04, #1
	wrlong	local04, fp
	sub	fp, #8
	rdlong	local05, fp
	wrbyte	local05, local02
	sub	fp, #4
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #4
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	add	fp, #20
	rdlong	local01, fp wz
	sub	fp, #32
 if_e	jmp	#LR__1466
	add	fp, #20
	rdlong	local04, fp
	sub	fp, #20
	cmp	local04, #10 wz
'             break;
 if_ne	jmp	#LR__1466
LR__1467
'         }
'     }
'     return r;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__1468
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__vfsread_ret
	ret

_fatfs_cc__remove
	mov	COUNT_, #6
	call	#pushregs_
	mov	arg02, arg01
	add	ptr___system__dat__, #380
	mov	local01, ptr___system__dat__
	mov	arg01, local01
	mov	arg03, #0
	sub	ptr___system__dat__, #380
	call	#__system____getvfsforfile
	mov	local02, result1 wz
 if_ne	add	local02, #32
 if_ne	rdlong	arg01, local02
 if_ne	sub	local02, #32
 if_ne	cmps	arg01, #0 wz
' #line 20 "C:/flexprop/include/libsys/remove.c"
'         return _seterror( 16 );
 if_e	add	ptr___system__dat__, #24
 if_e	wrlong	#16, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	neg	result1, #1
 if_e	jmp	#LR__1471
	add	local02, #64
	rdlong	arg01, local02
	sub	local02, #64
	rdlong	local03, arg01
	add	arg01, #4
	rdlong	local04, arg01
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
	cmp	local06, ##-14 wz
 if_ne	jmp	#LR__1469
	add	local02, #60
	rdlong	local06, local02
	rdlong	local03, local06
	add	local06, #4
	rdlong	local04, local06
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local05
	mov	local06, result1
LR__1469
	cmp	local06, #0 wz
 if_e	jmp	#LR__1470
'         return _seterror(-r);
	neg	arg01, local06 wz
	add	ptr___system__dat__, #24
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #24
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__1471
LR__1470
'     }
'     return 0;
	mov	result1, #0
LR__1471
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__remove_ret
	ret

_fatfs_cc___default_filbuf
	mov	COUNT_, #4
	call	#pushregs_
	rdlong	local01, arg01
	add	arg01, #16
	rdlong	arg03, arg01
	sub	arg01, #16
	rdlong	local02, arg03
	add	arg03, #4
	rdlong	local03, arg03
	add	local01, #12
	mov	arg02, local01
	sub	local01, #12
	decod	arg03, #10
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	mov	local04, result1
	cmps	local04, #0 wc
'         return -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__1472
	wrlong	local04, local01
	add	local01, #12
	mov	local03, local01
	sub	local01, #8
	wrlong	local03, local01
	add	local01, #4
	rdlong	local03, local01
	or	local03, #1
	wrlong	local03, local01
'     }
'     b->cnt = r;
'     b->ptr = &b->buf[0];
'     b->flags |=  (0x01) ;
'     return r;
	mov	result1, local04
LR__1472
	mov	ptra, fp
	call	#popregs_
_fatfs_cc___default_filbuf_ret
	ret

__struct___anon_9b5668f900000005_sputc
	rdlong	_var01, objptr
	add	objptr, #4
	rdlong	_var02, objptr
	sub	objptr, #4
	cmps	_var01, _var02 wc
 if_b	rdlong	_var01, objptr
 if_b	mov	_var02, _var01
 if_b	add	_var02, #1
 if_b	wrlong	_var02, objptr
 if_b	wrbyte	arg01, _var01
'             *ptr++ = c;
'         }
'         return 1;
	mov	result1, #1
__struct___anon_9b5668f900000005_sputc_ret
	ret

__struct___fmtfile_putchar
	mov	COUNT_, #3
	call	#pushregs_
'         return f->putcf(c, f);
	rdlong	arg02, objptr
	add	arg02, #24
	rdlong	arg02, arg02
	rdlong	local01, arg02
	add	arg02, #4
	rdlong	local02, arg02
	rdlong	arg02, objptr
	mov	local03, objptr
	mov	objptr, local01
	call	local02
	mov	objptr, local03
	mov	ptra, fp
	call	#popregs_
__struct___fmtfile_putchar_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	rdlong	result1, ptr___system__dat__ wz
 if_e	mov	arg01, ##230400
 if_e	call	#__system___setbaud
	wypin	local01, #62
	waitx	#1
	loc	pa,	#(@LR__1474-@LR__1473)
	call	#FCACHE_LOAD_
LR__1473
	testp	#62 wc
 if_ae	jmp	#LR__1473
LR__1474
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_e	mov	arg01, ##230400
 if_e	call	#__system___setbaud
	cmp	local01, #0 wz
 if_e	jmp	#LR__1475
	rdlong	local03, #20
	shr	local03, #10
	qmul	local01, local03
	getct	result1
	getqx	local04
	add	result1, local04
	mov	local05, result1
LR__1475
	neg	local06, #1
	mov	local07, #63
	mov	local08, #0
	add	ptr___system__dat__, #4
	rdlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__1476
	testb	local09, #8 wc
	testbn	local09, #9 andc
	shr	local09, #10
 if_b	mov	local08, #1
 if_ae	testp	#63 wz
 if_nc_and_z	mov	local08, #1
 if_nc_and_z	rdpin	local09, #63
 if_nc_and_z	shr	local09, #4
LR__1477
	mov	local02, #0
	cmp	local08, #0 wz
 if_ne	neg	local02, #1
	mov	local10, #0
	mov	local03, #0
	cmp	local01, #0 wz
 if_ne	neg	local03, #1
	mov	local04, #0
	mov	local11, #0
	getct	result1
	mov	local12, result1
	mov	local13, local12
	sub	local13, local05
	cmps	local13, #0 wc
 if_b	not	local11, #0
	cmp	local11, #0 wz
 if_ne	not	local04, #0
	test	local03, local04 wz
 if_ne	not	local10, #0
	or	local02, local10 wz
 if_e	jmp	#LR__1476
	cmp	local08, #0 wz
 if_ne	mov	local06, local09
 if_ne	getbyte	local06, local06, #0
	add	ptr___system__dat__, #4
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system___getms
	mov	COUNT_, #2
	call	#pushregs_
	getct	result2 wc
	getct	local01
	add	ptr___system__dat__, #12
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__1478
	rdlong	local02, #20
	qdiv	local02, ##1000
	add	ptr___system__dat__, #12
	getqx	result1
	mov	local02, result1
	wrlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__1478
	setq	result2
	qdiv	local01, local02
	getqx	result1
	mov	ptra, fp
	call	#popregs_
__system___getms_ret
	ret

__system___getus
	mov	COUNT_, #2
	call	#pushregs_
	getct	result2 wc
	getct	local01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__1479
	rdlong	local02, #20
	qdiv	local02, ##1000000
	add	ptr___system__dat__, #16
	getqx	result1
	mov	local02, result1
	wrlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__1479
	qdiv	result2, local02
	getqy	result2
	setq	result2
	qdiv	local01, local02
	getqx	result1
	mov	ptra, fp
	call	#popregs_
__system___getus_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wc
 if_ae	jmp	#LR__1487
	loc	pa,	#(@LR__1481-@LR__1480)
	call	#FCACHE_LOAD_
LR__1480
	cmps	arg03, #4 wc
 if_b	jmp	#LR__1482
	rdlong	result1, arg02
	wrlong	result1, arg01
	add	arg01, #4
	add	arg02, #4
	sub	arg03, #4
	jmp	#LR__1480
LR__1481
LR__1482
	mov	_var02, arg03 wz
 if_e	jmp	#LR__1493
	loc	pa,	#(@LR__1485-@LR__1483)
	call	#FCACHE_LOAD_
LR__1483
	rep	@LR__1486, _var02
LR__1484
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
	add	arg01, #1
	add	arg02, #1
LR__1485
LR__1486
	jmp	#LR__1493
LR__1487
	add	arg01, arg03
	add	arg02, arg03
	mov	_var03, arg03 wz
 if_e	jmp	#LR__1492
	loc	pa,	#(@LR__1490-@LR__1488)
	call	#FCACHE_LOAD_
LR__1488
	rep	@LR__1491, _var03
LR__1489
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var04, arg02
	wrbyte	_var04, arg01
LR__1490
LR__1491
LR__1492
LR__1493
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system____builtin_strcpy
	mov	_var01, arg01
	loc	pa,	#(@LR__1495-@LR__1494)
	call	#FCACHE_LOAD_
LR__1494
	rdbyte	result1, arg02 wz
	wrbyte	result1, arg01
	add	arg02, #1
	add	arg01, #1
 if_ne	jmp	#LR__1494
LR__1495
	mov	result1, _var01
__system____builtin_strcpy_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___make_methodptr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #8
	call	#__system___gc_alloc_managed
	cmps	result1, #0 wz
 if_ne	wrlong	local01, result1
 if_ne	mov	local01, result1
 if_ne	add	local01, #4
 if_ne	wrlong	local02, local01
	mov	ptra, fp
	call	#popregs_
__system___make_methodptr_ret
	ret

__system___lockmem
	mov	COUNT_, #1
	call	#pushregs_
	mov	result1, #0
	cogid	result1
	add	result1, #256
LR__1496
	rdlong	local01, arg01 wz
 if_e	wrlong	result1, arg01
 if_e	rdlong	local01, arg01
 if_e	rdlong	local01, arg01
	cmp	local01, result1 wz
 if_ne	jmp	#LR__1496
	mov	ptra, fp
	call	#popregs_
__system___lockmem_ret
	ret

__system___funcptr_cmp
	rdlong	result1, arg01
	rdlong	_var01, arg02
	sub	result1, _var01 wz
 if_e	add	arg01, #4
 if_e	rdlong	result1, arg01
 if_e	add	arg02, #4
 if_e	rdlong	_var01, arg02
 if_e	sub	result1, _var01
__system___funcptr_cmp_ret
	ret

__system___tx
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__1497
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	arg01, #13
 if_ne	call	#__system___txraw
LR__1497
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #1
	call	#pushregs_
LR__1498
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__1498
	cmp	local01, #13 wz
 if_ne	jmp	#LR__1499
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	result1, #2 wz
 if_ne	mov	local01, #10
LR__1499
	add	ptr___system__dat__, #8
	rdlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	arg01, #1 wz
 if_e	jmp	#LR__1502
	cmp	local01, #127 wz
 if_ne	jmp	#LR__1500
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__1501
LR__1500
	mov	arg01, local01
	call	#__system___tx
LR__1501
LR__1502
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___waitms
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, #20
	loc	pa,	#(@LR__1504-@LR__1503)
	call	#FCACHE_LOAD_
LR__1503
	cmps	local01, ##1001 wc
 if_ae	waitx	local02
 if_ae	sub	local01, ##1000
 if_ae	jmp	#LR__1503
LR__1504
	add	ptr___system__dat__, #12
	rdlong	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #12
 if_ne	jmp	#LR__1505
	qdiv	local02, ##1000
	add	ptr___system__dat__, #12
	getqx	local02
	mov	local03, local02
	wrlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #12
LR__1505
	cmps	local01, #1 wc
 if_ae	qmul	local01, local03
 if_ae	getqx	arg01
 if_ae	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitms_ret
	ret

__system___waitus
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	add	ptr___system__dat__, #16
	rdlong	local02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__1506
	rdlong	local02, #20
	qdiv	local02, ##1000000
	add	ptr___system__dat__, #16
	getqx	arg01
	mov	local02, arg01
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__1506
	qmul	local01, local02
	getqx	arg01
	waitx	arg01
	mov	ptra, fp
	call	#popregs_
__system___waitus_ret
	ret

__system____getvfsforfile
	mov	COUNT_, #19
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	loc	pa,	#(@LR__1508-@LR__1507)
	call	#FCACHE_LOAD_
LR__1507
	rdbyte	result1, local02
	cmp	result1, #47 wz
 if_ne	jmp	#LR__1509
	add	local02, #1
	rdbyte	result1, local02
	sub	local02, #1
	cmp	result1, #47 wz
 if_e	add	local02, #1
 if_e	jmp	#LR__1507
LR__1508
LR__1509
	rdbyte	arg03, local02
	cmp	arg03, #47 wz
 if_ne	jmp	#LR__1510
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncpy
	jmp	#LR__1515
LR__1510
	add	ptr___system__dat__, #124
	mov	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #124
	mov	arg01, local01
	mov	arg03, #256
	call	#__system__strncpy
	rdbyte	local04, local02 wz
 if_e	jmp	#LR__1514
	rdbyte	local05, local02
	cmp	local05, #46 wz
 if_ne	jmp	#LR__1511
	add	local02, #1
	rdbyte	local06, local02
	sub	local02, #1
	mov	local07, local06
	zerox	local07, #7 wz
 if_e	jmp	#LR__1514
LR__1511
	rdbyte	local04, local01
	cmp	local04, #47 wz
 if_ne	jmp	#LR__1512
	add	local01, #1
	rdbyte	local07, local01
	sub	local01, #1
	mov	local05, local07
	zerox	local05, #7 wz
 if_e	jmp	#LR__1513
LR__1512
	mov	arg02, ##@LR__1802
	mov	arg01, local01
	mov	arg03, #256
	call	#__system__strncat
LR__1513
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncat
LR__1514
LR__1515
	rdbyte	local04, local01 wz
 if_e	jmp	#LR__1516
	rdbyte	local05, local01
	cmp	local05, #47 wz
 if_ne	jmp	#LR__1517
	add	local01, #1
	rdbyte	local07, local01
	sub	local01, #1
	zerox	local07, #7 wz
 if_ne	jmp	#LR__1517
LR__1516
	add	ptr___system__dat__, ##636
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##636
	jmp	#LR__1532
LR__1517
	mov	local08, #0
LR__1518
	cmps	local08, #4 wc
 if_ae	jmp	#LR__1531
	mov	local04, local08
	shl	local04, #2
	add	ptr___system__dat__, #92
	add	local04, ptr___system__dat__
	rdlong	local07, local04 wz
	sub	ptr___system__dat__, #92
 if_e	jmp	#LR__1530
	mov	local05, local08
	shl	local05, #2
	add	ptr___system__dat__, #92
	add	local05, ptr___system__dat__
	rdlong	arg01, local05
	sub	ptr___system__dat__, #92
	mov	local09, #0
	loc	pa,	#(@LR__1520-@LR__1519)
	call	#FCACHE_LOAD_
LR__1519
	rdbyte	result1, arg01 wz
 if_ne	add	local09, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__1519
LR__1520
	mov	local10, local09
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #47 wz
 if_ne	mov	local11, local10
 if_ne	mov	local12, local01
 if_ne	add	local11, local12
 if_ne	rdbyte	local06, local11 wz
 if_ne	jmp	#LR__1529
	mov	local07, local08
	shl	local07, #2
	add	ptr___system__dat__, #92
	mov	local13, ptr___system__dat__
	add	local07, ptr___system__dat__
	rdlong	local14, local07
	mov	local15, local10
	mov	arg01, local01
	mov	arg02, local14
	mov	arg03, local15
	sub	ptr___system__dat__, #92
	call	#__system__strncmp
	mov	local16, result1 wz
 if_ne	jmp	#LR__1529
	mov	local04, local08
	shl	local04, #2
	add	ptr___system__dat__, #108
	add	local04, ptr___system__dat__
	rdlong	local17, local04
	sub	ptr___system__dat__, #108
	loc	pa,	#(@LR__1523-@LR__1521)
	call	#FCACHE_LOAD_
LR__1521
	mov	local05, local10
	add	local05, #1
	mov	local07, local05
	mov	local06, local01
	add	local07, local01
	rdbyte	local04, local07
	cmp	local04, #46 wz
 if_ne	jmp	#LR__1524
	mov	local12, local10
	add	local12, #2
	mov	local16, local12
	mov	local14, local01
	add	local16, local01
	rdbyte	local11, local16
	cmp	local11, #47 wz
 if_e	jmp	#LR__1522
	mov	local13, local10
	add	local13, #2
	mov	local18, local13
	mov	local19, local01
	add	local18, local01
	rdbyte	local15, local18 wz
 if_ne	jmp	#LR__1524
LR__1522
	add	local10, #1
	jmp	#LR__1521
LR__1523
LR__1524
	cmp	local03, #0 wz
 if_ne	mov	arg01, local03
 if_ne	mov	arg02, local01
 if_ne	mov	arg03, #256
 if_ne	call	#__system__strncpy
	mov	arg02, local01
	add	arg02, local10
	add	arg02, #1
	mov	arg01, local01
	call	#__system____builtin_strcpy
	mov	arg01, local01
	mov	local09, #0
	loc	pa,	#(@LR__1526-@LR__1525)
	call	#FCACHE_LOAD_
LR__1525
	rdbyte	result1, arg01 wz
 if_ne	add	local09, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__1525
LR__1526
	mov	result1, local09
	mov	local10, result1
LR__1527
	cmps	local10, #1 wc
 if_b	jmp	#LR__1528
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #47 wz
 if_e	mov	local04, local10
 if_e	add	local04, local01
 if_e	wrbyte	#0, local04
 if_e	sub	local10, #1
 if_e	jmp	#LR__1527
	mov	local05, local10
	add	local05, local01
	rdbyte	local04, local05
	cmp	local04, #46 wz
 if_ne	jmp	#LR__1528
	cmps	local10, #2 wc
 if_b	jmp	#LR__1528
	mov	local12, local10
	sub	local12, #1
	add	local12, local01
	rdbyte	local06, local12
	cmp	local06, #47 wz
 if_ne	jmp	#LR__1528
	mov	local05, local10
	sub	local05, #1
	add	local05, local01
	wrbyte	#0, local05
	sub	local10, #2
	jmp	#LR__1527
LR__1528
	mov	result1, local17
	jmp	#LR__1532
LR__1529
LR__1530
	add	local08, #1
	jmp	#LR__1518
LR__1531
	add	ptr___system__dat__, ##748
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##748
LR__1532
	mov	ptra, fp
	call	#popregs_
__system____getvfsforfile_ret
	ret

__system___basic_print_char
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	arg01, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1533
	rdlong	local02, arg01
	add	arg01, #4
	rdlong	local03, arg01
	mov	arg01, local01
	mov	local01, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local01
	mov	result1, #1
LR__1533
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1534
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_ne	mov	arg02, local02
 if_ne	mov	arg03, local01
 if_ne	mov	arg01, local03
 if_ne	call	#__system___fmtstr
LR__1534
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_ne	mov	arg02, local02
 if_ne	mov	arg03, local01
 if_ne	mov	arg04, local03
 if_ne	mov	arg01, local04
 if_ne	call	#__system___fmtnum
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrbyte	arg03, fp
	add	fp, #1
	wrbyte	#0, fp
	sub	fp, #13
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #8
	mov	arg03, fp
	sub	fp, #16
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #10
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	getbyte	arg04, local02, #0
	mov	arg01, local03
	mov	local04, #0
	loc	pa,	#(@LR__1536-@LR__1535)
	call	#FCACHE_LOAD_
LR__1535
	rdbyte	result1, arg01 wz
 if_ne	add	local04, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__1535
LR__1536
	mov	local05, local04
	cmp	arg04, #0 wz
 if_ne	fles	local05, arg04 wcz
	mov	arg02, local02
	mov	arg03, local05
	mov	arg01, local01
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local06, result1
	cmps	local06, #0 wc
 if_b	mov	result1, local06
 if_b	jmp	#LR__1539
	mov	local07, #0
LR__1537
	cmps	local07, local05 wc
 if_ae	jmp	#LR__1538
	mov	arg01, local01
	rdlong	local04, arg01
	add	arg01, #4
	rdlong	local08, arg01
	rdbyte	arg01, local03
	mov	local09, objptr
	mov	objptr, local04
	call	local08
	mov	objptr, local09
	mov	local09, result1
	cmps	local09, #0 wc
	add	local03, #1
 if_b	mov	result1, local09
 if_b	jmp	#LR__1539
	add	local06, local09
	add	local07, #1
	jmp	#LR__1537
LR__1538
	mov	arg02, local02
	mov	arg03, local05
	mov	arg01, local01
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local10, result1
	cmps	local10, #0 wc
 if_b	mov	result1, local10
 if_ae	add	local06, local10
 if_ae	mov	result1, local06
LR__1539
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #112
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #4
	mov	result1, fp
	add	fp, #68
	wrlong	result1, fp
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #84
	rdlong	result1, fp
	shr	result1, #16
	and	result1, #63
	add	fp, #88
	wrlong	result1, fp
	sub	fp, #88
	rdlong	result1, fp
	getbyte	result1, result1, #0
	add	fp, #92
	wrlong	result1, fp
	sub	fp, #92
	rdlong	result1, fp
	shr	result1, #26
	and	result1, #3
	add	fp, #96
	wrlong	result1, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #96
	cmps	local01, #1 wc
 if_ae	add	fp, #96
 if_ae	rdlong	local01, fp
 if_ae	sub	local01, #1
 if_ae	wrlong	local01, fp
 if_ae	sub	fp, #96
	add	fp, #100
	rdlong	local01, fp
	sub	fp, #100
	cmps	local01, #65 wc
 if_b	add	fp, #100
 if_b	rdlong	local01, fp
 if_b	sub	fp, #100
 if_b	cmps	local01, #0 wz
 if_nc_or_z	add	fp, #100
 if_nc_or_z	wrlong	#64, fp
 if_nc_or_z	sub	fp, #100
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #3 wz
 if_e	add	fp, #104
 if_e	wrlong	#0, fp
 if_e	sub	fp, #104
 if_e	jmp	#LR__1541
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmps	local01, #0 wc
 if_ae	jmp	#LR__1540
	add	fp, #104
	wrlong	#4, fp
	sub	fp, #92
	rdlong	local01, fp
	neg	local01, local01
	wrlong	local01, fp
	sub	fp, #12
LR__1540
LR__1541
	add	fp, #104
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__1548
	add	fp, #92
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	add	fp, #4
	rdlong	local01, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #100
	cmp	local01, arg03 wz
 if_ne	jmp	#LR__1543
	add	fp, #96
	rdlong	local01, fp
	sub	local01, #1 wz
	wrlong	local01, fp
	sub	fp, #96
 if_ne	jmp	#LR__1542
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__1553
LR__1542
LR__1543
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #2 wz
 if_ne	jmp	#LR__1544
	add	fp, #88
	rdlong	local01, fp
	mov	result1, local01
	add	result1, #1
	wrlong	result1, fp
	sub	fp, #88
	wrbyte	#32, local01
	jmp	#LR__1547
LR__1544
	add	fp, #104
	rdlong	local01, fp
	sub	fp, #104
	cmp	local01, #4 wz
 if_ne	jmp	#LR__1545
	add	fp, #88
	rdlong	local01, fp
	mov	result1, local01
	add	result1, #1
	wrlong	result1, fp
	sub	fp, #88
	wrbyte	#45, local01
	jmp	#LR__1546
LR__1545
	add	fp, #88
	rdlong	local01, fp
	mov	result1, local01
	add	result1, #1
	wrlong	result1, fp
	sub	fp, #88
	wrbyte	#43, local01
LR__1546
LR__1547
LR__1548
	add	fp, #88
	rdlong	arg01, fp
	sub	fp, #76
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #80
	rdlong	arg04, fp
	mov	arg05, #0
	sub	fp, #88
	rdlong	local01, fp
	sub	fp, #8
	testbn	local01, #29 wz
 if_ne	mov	arg05, #1
	call	#__system___uitoa
	mov	local02, result1
	add	fp, #92
	rdlong	local01, fp
	add	local01, local02
	wrlong	local01, fp
	add	fp, #8
	rdlong	local03, fp
	sub	fp, #100
	cmps	local01, local03 wcz
 if_be	jmp	#LR__1552
	loc	pa,	#(@LR__1550-@LR__1549)
	call	#FCACHE_LOAD_
LR__1549
	add	fp, #100
	rdlong	local02, fp
	mov	local03, local02
	sub	local03, #1
	wrlong	local03, fp
	sub	fp, #100
	cmps	local02, #1 wc
 if_b	jmp	#LR__1551
	add	fp, #88
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#35, local02
	jmp	#LR__1549
LR__1550
LR__1551
	add	fp, #88
	rdlong	local02, fp
	mov	local03, local02
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #88
	wrbyte	#0, local02
LR__1552
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #12
	mov	arg03, fp
	sub	fp, #20
	call	#__system___fmtstr
LR__1553
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system___fmtfloat
	mov	COUNT_, #16
	call	#pushregs_
	add	ptra, #292
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	add	fp, #12
	wrlong	#10, fp
	add	fp, #8
	wrlong	#0, fp
	add	fp, #8
	wrlong	#0, fp
	add	fp, #8
	wrlong	#0, fp
	add	fp, #4
	wrlong	#2, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #4
	wrlong	#0, fp
	add	fp, #24
	wrlong	#0, fp
	add	fp, #104
	mov	local01, fp
	sub	fp, #8
	wrlong	local01, fp
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #188
	rdlong	local02, fp
	shr	local02, #16
	and	local02, #63
	add	fp, #176
	wrlong	local02, fp
	sub	fp, #176
	rdlong	local02, fp
	shr	local02, #28
	and	local02, #1
	add	fp, #264
	wrlong	local02, fp
	sub	fp, #88
	rdlong	local02, fp wz
	sub	fp, #184
 if_ne	jmp	#LR__1555
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	cmp	local02, #97 wz
 if_ne	jmp	#LR__1554
	add	fp, #184
	wrlong	#13, fp
	sub	fp, #132
	wrlong	#1, fp
	sub	fp, #52
	jmp	#LR__1556
LR__1554
	add	fp, #184
	wrlong	#6, fp
	sub	fp, #184
	jmp	#LR__1556
LR__1555
	add	fp, #184
	rdlong	local02, fp
	sub	local02, #1
	wrlong	local02, fp
	sub	fp, #184
LR__1556
	add	fp, #8
	rdlong	local02, fp
	shr	local02, #22
	and	local02, #3
	add	fp, #260
	wrlong	local02, fp
	sub	fp, #260
	rdlong	local02, fp
	shr	local02, #29
	and	local02, #1
	add	fp, #180
	wrlong	local02, fp
	sub	fp, #180
	rdlong	local02, fp
	getbyte	local02, local02, #1
	add	fp, #96
	wrlong	local02, fp
	sub	fp, #96
	rdlong	local02, fp
	getbyte	local02, local02, #0
	add	fp, #100
	wrlong	local02, fp
	mov	local02, #0
	sub	fp, #92
	rdlong	local01, fp
	cmp	local01, #101 wz
 if_e	mov	local02, #1
	add	fp, #20
	wrlong	local02, fp
	add	fp, #152
	rdlong	local01, fp wz
 if_ne	mov	local02, #69
 if_e	mov	local02, #101
	sub	fp, #140
	wrlong	local02, fp
	sub	fp, #32
	rdlong	local02, fp
	sub	fp, #16
	cmp	local02, #97 wz
 if_ne	jmp	#LR__1557
	add	fp, #36
	wrlong	#1, fp
	add	fp, #152
	rdlong	local01, fp wz
 if_ne	mov	local02, #80
 if_e	mov	local02, #112
	sub	fp, #140
	wrlong	local02, fp
	sub	fp, #20
	wrlong	#2, fp
	add	fp, #28
	wrlong	#1, fp
	add	fp, #132
	rdlong	local01, fp wz
 if_ne	mov	local02, #88
 if_e	mov	local02, #120
	sub	fp, #124
	wrlong	local02, fp
	sub	fp, #64
LR__1557
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	cmp	local02, #35 wz
 if_ne	jmp	#LR__1560
	add	fp, #72
	wrlong	#1, fp
	add	fp, #200
	rdlong	local02, fp wz
	sub	fp, #272
 if_e	jmp	#LR__1558
	add	fp, #16
	wrlong	#102, fp
	add	fp, #256
	wrlong	#0, fp
	sub	fp, #272
	jmp	#LR__1559
LR__1558
	add	fp, #272
	wrlong	#1, fp
	sub	fp, #272
LR__1559
LR__1560
	add	fp, #8
	rdlong	local02, fp
	shr	local02, #26
	and	local02, #3
	add	fp, #92
	wrlong	local02, fp
	sub	fp, #88
	rdlong	result1, fp
	sub	fp, #12
	shr	result1, #31 wz
 if_e	jmp	#LR__1561
	add	fp, #44
	wrlong	#45, fp
	sub	fp, #32
	rdlong	result1, fp
	bitnot	result1, #31
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__1563
LR__1561
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	cmp	local02, #1 wz
 if_e	add	fp, #44
 if_e	wrlong	#43, fp
 if_e	sub	fp, #44
 if_e	jmp	#LR__1562
	add	fp, #100
	rdlong	local02, fp
	sub	fp, #100
	cmp	local02, #2 wz
 if_e	add	fp, #44
 if_e	wrlong	#32, fp
 if_e	sub	fp, #44
LR__1562
LR__1563
	add	fp, #8
	rdlong	local02, fp
	shr	local02, #24
	and	local02, #3
	add	fp, #60
	wrlong	local02, fp
	mov	local02, #0
	sub	fp, #24
	rdlong	local03, fp
	sub	fp, #44
	mov	local01, local03 wz
 if_ne	jmp	#LR__1564
	add	fp, #28
	rdlong	local04, fp
	sub	fp, #28
	mov	local05, local04
	cmp	local05, #10 wz
 if_e	jmp	#LR__1565
LR__1564
	xor	local02, #1
LR__1565
	add	fp, #60
	wrlong	local02, fp
	sub	fp, #60
	cmp	local02, #0 wz
 if_e	jmp	#LR__1567
	add	fp, #68
	rdlong	local03, fp
	sub	fp, #68
	cmp	local03, #2 wz
 if_ne	jmp	#LR__1567
	add	fp, #268
	rdlong	local06, fp
	sub	fp, #268
	mov	local04, local06
	cmp	local04, #2 wz
 if_e	jmp	#LR__1567
	add	fp, #192
	rdlong	arg01, fp
	sub	fp, #148
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #64
	call	#__system__emitsign_1165
	add	fp, #276
	wrlong	result1, fp
	sub	fp, #276
	cmps	result1, #0 wc
 if_b	add	fp, #276
 if_b	rdlong	result1, fp
 if_b	sub	fp, #276
 if_b	jmp	#LR__1618
	add	fp, #192
	rdlong	local02, fp
	add	fp, #84
	rdlong	local05, fp
	mov	local03, local05
	add	local02, local05
	sub	fp, #84
	wrlong	local02, fp
	sub	fp, #88
	rdlong	local01, fp wz
	sub	fp, #104
 if_e	jmp	#LR__1566
	add	fp, #104
	rdlong	local02, fp
	add	fp, #172
	rdlong	local03, fp
	sub	local02, local03
	sub	fp, #172
	wrlong	local02, fp
	sub	fp, #104
	cmps	local02, #0 wc
 if_b	add	fp, #104
 if_b	wrlong	#0, fp
 if_b	sub	fp, #104
	add	fp, #8
	rdlong	local01, fp
	bitl	local01, #232
	wrlong	local01, fp
	mov	local02, local01
	add	fp, #96
	rdlong	local05, fp
	mov	local03, local05
	shl	local03, #8
	or	local02, local03
	sub	fp, #96
	wrlong	local02, fp
	sub	fp, #8
LR__1566
	mov	local02, #0
	add	fp, #60
	wrlong	#0, fp
	sub	fp, #60
LR__1567
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	call	#__system____builtin_ilogb
	cmp	result1, ##2147483647 wz
 if_ne	jmp	#LR__1569
	add	fp, #44
	rdlong	local02, fp wz
	sub	fp, #44
 if_e	jmp	#LR__1568
	add	fp, #192
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #148
	rdlong	local04, fp
	sub	fp, #44
	wrbyte	local04, local01
LR__1568
	add	fp, #192
	rdlong	arg01, fp
	sub	fp, #192
	mov	arg02, ##@LR__1803
	call	#__system____builtin_strcpy
	jmp	#LR__1606
LR__1569
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	call	#__system____builtin_ilogb
	cmp	result1, ##-2147483648 wz
 if_ne	jmp	#LR__1571
	add	fp, #44
	rdlong	local02, fp wz
	sub	fp, #44
 if_e	jmp	#LR__1570
	add	fp, #192
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #148
	rdlong	local04, fp
	sub	fp, #44
	wrbyte	local04, local01
LR__1570
	add	fp, #192
	rdlong	arg01, fp
	sub	fp, #192
	mov	arg02, ##@LR__1804
	call	#__system____builtin_strcpy
	jmp	#LR__1606
LR__1571
	add	fp, #16
	rdlong	local01, fp
	sub	fp, #16
	cmp	local01, #103 wz
 if_e	jmp	#LR__1572
	add	fp, #16
	rdlong	local05, fp
	sub	fp, #16
	mov	local03, local05
	cmp	local03, #35 wz
 if_ne	jmp	#LR__1577
LR__1572
	add	fp, #12
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	add	fp, #12
	mov	arg03, fp
	add	fp, #152
	rdlong	arg04, fp
	sub	fp, #156
	rdlong	arg05, fp
	sub	fp, #28
	call	#__system__disassemble_1163
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	cmp	local02, #35 wz
 if_ne	jmp	#LR__1574
	add	fp, #32
	rdlong	local02, fp
	add	fp, #152
	rdlong	local03, fp
	sub	fp, #184
	cmps	local02, local03 wcz
 if_a	add	fp, #36
 if_a	wrlong	#1, fp
 if_a	sub	fp, #36
 if_a	jmp	#LR__1580
	add	fp, #32
	rdlong	local02, fp
	sub	fp, #32
	cmps	local02, #0 wc
 if_ae	jmp	#LR__1573
	add	fp, #184
	rdlong	local02, fp
	neg	local02, local02
	sub	fp, #152
	rdlong	local03, fp
	sub	fp, #32
	cmps	local03, local02 wcz
 if_be	add	fp, #36
 if_be	wrlong	#1, fp
 if_be	sub	fp, #36
	jmp	#LR__1580
LR__1573
	add	fp, #32
	rdlong	local02, fp
	sub	fp, #32
	cmps	local02, #1 wc
 if_b	jmp	#LR__1580
	add	fp, #184
	rdlong	local02, fp
	sub	fp, #152
	rdlong	local03, fp
	sub	local02, local03
	add	fp, #152
	wrlong	local02, fp
	sub	fp, #184
	jmp	#LR__1580
LR__1574
	mov	local02, #0
	add	fp, #8
	rdlong	local01, fp
	shr	local01, #28
	test	local01, #1 wz
 if_e	mov	local02, #1
	add	fp, #44
	wrlong	local02, fp
	sub	fp, #20
	rdlong	local01, fp
	mov	local02, local01
	add	fp, #152
	rdlong	local05, fp
	sub	fp, #184
	cmps	local02, local05 wc
 if_ae	jmp	#LR__1575
	add	fp, #32
	rdlong	local06, fp
	sub	fp, #32
	cmps	local06, ##-4 wc
 if_ae	jmp	#LR__1576
LR__1575
	add	fp, #36
	wrlong	#1, fp
	sub	fp, #36
	jmp	#LR__1580
LR__1576
	add	fp, #184
	rdlong	local04, fp
	sub	fp, #152
	rdlong	local03, fp
	sub	local04, local03
	add	fp, #152
	wrlong	local04, fp
	sub	fp, #172
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	add	fp, #12
	mov	arg03, fp
	neg	arg04, local04
	sub	fp, #4
	rdlong	arg05, fp
	sub	fp, #28
	call	#__system__disassemble_1163
	jmp	#LR__1580
LR__1577
	add	fp, #36
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	jmp	#LR__1578
	add	fp, #12
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	add	fp, #12
	mov	arg03, fp
	add	fp, #152
	rdlong	arg04, fp
	sub	fp, #156
	rdlong	arg05, fp
	sub	fp, #28
	call	#__system__disassemble_1163
	jmp	#LR__1579
LR__1578
	add	fp, #12
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	add	fp, #12
	mov	arg03, fp
	add	fp, #152
	rdlong	local04, fp
	add	local04, #1
	neg	arg04, local04
	sub	fp, #156
	rdlong	arg05, fp
	sub	fp, #28
	call	#__system__disassemble_1163
LR__1579
LR__1580
	add	fp, #28
	rdlong	local02, fp
	sub	fp, #28
	cmp	local02, #2 wz
 if_ne	jmp	#LR__1583
	add	fp, #28
	wrlong	#16, fp
	sub	fp, #28
LR__1581
	add	fp, #20
	rdlong	local02, fp wz
	sub	fp, #20
 if_e	jmp	#LR__1582
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #20
	cmp	local03, ##16777216 wc
 if_ae	jmp	#LR__1582
	add	fp, #20
	rdlong	local02, fp
	shl	local02, #1
	wrlong	local02, fp
	sub	fp, #20
	jmp	#LR__1581
LR__1582
LR__1583
	add	fp, #112
	mov	arg01, fp
	sub	fp, #92
	rdlong	arg02, fp
	add	fp, #8
	rdlong	arg03, fp
	add	fp, #160
	rdlong	arg05, fp
	sub	fp, #188
	mov	arg04, #1
	call	#__system___uitoa
	add	fp, #88
	wrlong	result1, fp
	sub	fp, #56
	rdlong	local02, fp
	sub	fp, #32
	cmps	local02, #0 wc
 if_ae	jmp	#LR__1584
	add	fp, #96
	wrlong	#45, fp
	add	fp, #80
	mov	arg01, fp
	sub	fp, #144
	rdlong	local03, fp
	neg	arg02, local03
	add	fp, #24
	rdlong	arg04, fp
	add	fp, #132
	rdlong	local06, fp
	sub	fp, #188
	mov	arg03, #10
	mov	arg05, local06
	call	#__system___uitoa
	add	fp, #92
	wrlong	result1, fp
	sub	fp, #92
	jmp	#LR__1585
LR__1584
	add	fp, #96
	wrlong	#43, fp
	add	fp, #80
	mov	arg01, fp
	sub	fp, #144
	rdlong	arg02, fp
	add	fp, #24
	rdlong	arg04, fp
	add	fp, #132
	rdlong	local06, fp
	sub	fp, #188
	mov	arg03, #10
	mov	arg05, local06
	call	#__system___uitoa
	add	fp, #92
	wrlong	result1, fp
	sub	fp, #92
LR__1585
	add	fp, #36
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	jmp	#LR__1586
	add	fp, #80
	wrlong	#0, fp
	sub	fp, #4
	wrlong	#0, fp
	add	fp, #108
	rdlong	local02, fp
	add	local02, #1
	sub	fp, #100
	wrlong	local02, fp
	sub	fp, #84
	jmp	#LR__1589
LR__1586
	add	fp, #32
	rdlong	local02, fp
	sub	fp, #32
	cmps	local02, #0 wc
 if_ae	jmp	#LR__1587
	add	fp, #32
	rdlong	local01, fp
	add	fp, #48
	wrlong	local01, fp
	sub	fp, #4
	wrlong	local01, fp
	sub	fp, #44
	rdlong	local02, fp
	add	fp, #152
	rdlong	local03, fp
	add	local02, local03
	add	local02, #1
	sub	fp, #100
	wrlong	local02, fp
	sub	fp, #84
	jmp	#LR__1588
LR__1587
	add	fp, #76
	wrlong	#0, fp
	sub	fp, #44
	rdlong	local02, fp
	add	fp, #48
	wrlong	local02, fp
	add	fp, #104
	rdlong	local03, fp
	add	local02, local03
	add	local02, #1
	sub	fp, #100
	wrlong	local02, fp
	sub	fp, #84
LR__1588
LR__1589
	add	fp, #84
	rdlong	local02, fp
	sub	fp, #8
	rdlong	local03, fp
	sub	local02, local03
	add	local02, #1
	sub	fp, #36
	wrlong	local02, fp
	add	fp, #4
	rdlong	local02, fp wz
	sub	fp, #44
 if_ne	add	fp, #40
 if_ne	rdlong	local03, fp
 if_ne	add	local03, #1
 if_ne	wrlong	local03, fp
 if_ne	sub	fp, #40
	add	fp, #28
	rdlong	local02, fp
	sub	fp, #28
	cmp	local02, #16 wz
 if_e	add	fp, #40
 if_e	rdlong	local02, fp
 if_e	add	local02, #2
 if_e	wrlong	local02, fp
 if_e	sub	fp, #40
	add	fp, #36
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	jmp	#LR__1590
	add	fp, #40
	rdlong	local02, fp
	mov	local03, #2
	add	fp, #52
	rdlong	local05, fp
	add	local03, local05
	add	local02, local03
	sub	fp, #52
	wrlong	local02, fp
	sub	fp, #40
LR__1590
	add	fp, #40
	rdlong	local02, fp
	sub	fp, #40
	cmps	local02, #65 wc
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__1618
	add	fp, #60
	rdlong	local02, fp wz
	sub	fp, #60
 if_e	jmp	#LR__1591
	add	fp, #192
	rdlong	arg01, fp
	sub	fp, #148
	rdlong	arg02, fp
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #64
	call	#__system__emitsign_1165
	add	fp, #280
	wrlong	result1, fp
	sub	fp, #280
	cmps	result1, #0 wc
 if_b	add	fp, #280
 if_b	rdlong	result1, fp
 if_b	sub	fp, #280
 if_b	jmp	#LR__1618
	add	fp, #192
	rdlong	local02, fp
	add	fp, #88
	rdlong	local03, fp
	add	local02, local03
	sub	fp, #88
	wrlong	local02, fp
	sub	fp, #192
LR__1591
	add	fp, #76
	rdlong	local02, fp
	sub	fp, #52
	wrlong	local02, fp
	sub	fp, #24
	loc	pa,	#(@LR__1597-@LR__1592)
	call	#FCACHE_LOAD_
LR__1592
	add	fp, #24
	rdlong	local03, fp
	mov	local01, local03
	add	fp, #60
	rdlong	local04, fp
	sub	fp, #84
	mov	local05, local04
	cmps	local01, local05 wc
 if_ae	jmp	#LR__1598
	add	fp, #24
	rdlong	local06, fp
	sub	fp, #24
	cmps	local06, #0 wc
 if_b	jmp	#LR__1593
	add	fp, #24
	rdlong	local06, fp
	add	fp, #64
	rdlong	local07, fp
	sub	fp, #88
	cmps	local06, local07 wc
 if_ae	jmp	#LR__1593
	add	fp, #192
	rdlong	local07, fp
	mov	local06, local07
	add	local07, #1
	wrlong	local07, fp
	sub	fp, #168
	rdlong	local07, fp
	mov	local08, local07
	add	fp, #88
	mov	local09, fp
	add	local08, fp
	rdbyte	local10, local08
	wrbyte	local10, local06
	sub	fp, #112
	jmp	#LR__1594
LR__1593
	add	fp, #192
	rdlong	local06, fp
	mov	local08, local06
	add	local08, #1
	wrlong	local08, fp
	sub	fp, #192
	mov	local08, #48
	wrbyte	#48, local06
LR__1594
	add	fp, #24
	rdlong	local06, fp
	add	fp, #56
	rdlong	local11, fp
	sub	fp, #80
	cmp	local06, local11 wz
 if_ne	jmp	#LR__1596
	add	fp, #272
	rdlong	local07, fp
	sub	fp, #272
	mov	local08, local07 wz
 if_ne	jmp	#LR__1595
	add	fp, #84
	rdlong	local10, fp
	mov	local09, local10
	sub	local09, #1
	sub	fp, #60
	rdlong	local12, fp
	sub	fp, #24
	mov	local13, local12
	cmps	local13, local09 wc
 if_ae	jmp	#LR__1596
LR__1595
	add	fp, #192
	rdlong	local14, fp
	mov	local06, local14
	mov	local15, local14
	mov	local11, local15
	add	local11, #1
	wrlong	local11, fp
	sub	fp, #192
	mov	local08, #46
	wrbyte	#46, local06
LR__1596
	add	fp, #24
	rdlong	local14, fp
	mov	local06, local14
	mov	local15, local14
	mov	local11, local15
	add	local11, #1
	wrlong	local11, fp
	sub	fp, #24
	jmp	#LR__1592
LR__1597
LR__1598
	add	fp, #52
	rdlong	local02, fp wz
	sub	fp, #52
 if_e	jmp	#LR__1602
	add	fp, #192
	rdlong	local02, fp
	sub	local02, #1
	wrlong	local02, fp
	sub	fp, #192
	loc	pa,	#(@LR__1600-@LR__1599)
	call	#FCACHE_LOAD_
LR__1599
	add	fp, #192
	rdlong	local02, fp
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #196
	cmps	local02, local03 wcz
 if_be	jmp	#LR__1601
	add	fp, #192
	rdlong	local14, fp
	sub	fp, #192
	mov	local06, local14
	rdbyte	local04, local06
	cmp	local04, #48 wz
 if_ne	jmp	#LR__1601
	add	fp, #192
	rdlong	local02, fp
	sub	local02, #1
	wrlong	local02, fp
	sub	fp, #192
	jmp	#LR__1599
LR__1600
LR__1601
	add	fp, #192
	rdlong	local01, fp
	sub	fp, #192
	rdbyte	local02, local01
	cmp	local02, #46 wz
 if_e	add	fp, #192
 if_e	rdlong	local02, fp
 if_e	sub	local02, #1
 if_e	wrlong	local02, fp
 if_e	sub	fp, #192
	add	fp, #192
	rdlong	local05, fp
	mov	local03, local05
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #192
LR__1602
	add	fp, #36
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	jmp	#LR__1605
	add	fp, #192
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #144
	rdlong	local04, fp
	wrbyte	local04, local01
	add	fp, #144
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #96
	rdlong	local04, fp
	wrbyte	local04, local01
	sub	fp, #72
	wrlong	#0, fp
	sub	fp, #24
LR__1603
	add	fp, #24
	rdlong	local01, fp
	add	fp, #68
	rdlong	local04, fp
	sub	fp, #92
	mov	local05, local04
	cmps	local01, local05 wc
 if_ae	jmp	#LR__1604
	add	fp, #192
	rdlong	local14, fp
	mov	local11, local14
	add	local11, #1
	wrlong	local11, fp
	sub	fp, #168
	rdlong	local07, fp
	mov	local08, local07
	add	fp, #152
	mov	local09, fp
	add	local08, fp
	rdbyte	local10, local08
	wrbyte	local10, local14
	sub	fp, #152
	rdlong	local14, fp
	mov	local06, local14
	mov	local15, local14
	mov	local11, local15
	add	local11, #1
	wrlong	local11, fp
	sub	fp, #24
	jmp	#LR__1603
LR__1604
LR__1605
	add	fp, #192
	rdlong	local01, fp
	sub	fp, #192
	mov	local02, local01
	mov	local03, #0
	wrbyte	#0, local02
LR__1606
	add	fp, #108
	rdlong	local02, fp wz
	sub	fp, #108
 if_e	jmp	#LR__1617
	add	fp, #72
	rdlong	local03, fp wz
	sub	fp, #72
 if_e	jmp	#LR__1617
	add	fp, #196
	rdlong	arg01, fp
	sub	fp, #196
	mov	local16, #0
	loc	pa,	#(@LR__1608-@LR__1607)
	call	#FCACHE_LOAD_
LR__1607
	rdbyte	result1, arg01 wz
 if_ne	add	local16, #1
 if_ne	add	arg01, #1
 if_ne	jmp	#LR__1607
LR__1608
	mov	result1, local16
	mov	local04, result1
	add	fp, #108
	rdlong	local14, fp
	sub	fp, #108
	mov	local06, local14
	cmps	local04, local06 wcz
 if_be	jmp	#LR__1617
	add	fp, #196
	rdlong	local02, fp
	add	fp, #92
	wrlong	local02, fp
	sub	fp, #252
	rdlong	local02, fp wz
	sub	fp, #36
 if_e	jmp	#LR__1609
	add	fp, #184
	wrlong	#0, fp
	sub	fp, #76
	rdlong	local02, fp
	add	fp, #176
	wrlong	local02, fp
	sub	fp, #284
	jmp	#LR__1610
LR__1609
	add	fp, #108
	rdlong	local02, fp
	sub	local02, #1
	add	fp, #76
	rdlong	local03, fp
	sub	local02, local03
	add	fp, #100
	wrlong	local02, fp
	sub	fp, #284
LR__1610
	loc	pa,	#(@LR__1612-@LR__1611)
	call	#FCACHE_LOAD_
LR__1611
	add	fp, #284
	rdlong	local02, fp wz
	sub	fp, #284
 if_e	jmp	#LR__1613
	add	fp, #288
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	wrbyte	#42, local01
	sub	fp, #4
	rdlong	local02, fp
	sub	local02, #1
	wrlong	local02, fp
	sub	fp, #284
	jmp	#LR__1611
LR__1612
LR__1613
	add	fp, #184
	rdlong	local02, fp wz
	sub	fp, #184
 if_e	jmp	#LR__1616
	add	fp, #288
	rdlong	local01, fp
	mov	local03, local01
	add	local03, #1
	wrlong	local03, fp
	wrbyte	#46, local01
	sub	fp, #4
	wrlong	#0, fp
	sub	fp, #284
LR__1614
	add	fp, #284
	rdlong	local01, fp
	sub	fp, #100
	rdlong	local05, fp
	sub	fp, #184
	cmps	local01, local05 wc
 if_ae	jmp	#LR__1615
	add	fp, #288
	rdlong	local14, fp
	mov	local11, local14
	add	local11, #1
	wrlong	local11, fp
	mov	local08, #42
	wrbyte	#42, local14
	sub	fp, #4
	rdlong	local14, fp
	mov	local06, local14
	mov	local15, local14
	mov	local11, local15
	add	local11, #1
	wrlong	local11, fp
	sub	fp, #284
	jmp	#LR__1614
LR__1615
LR__1616
	add	fp, #288
	rdlong	local01, fp
	mov	local02, local01
	mov	local05, local01
	mov	local03, local05
	add	local03, #1
	wrlong	local03, fp
	sub	fp, #288
	mov	local04, #0
	wrbyte	#0, local02
LR__1617
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #188
	rdlong	arg03, fp
	sub	fp, #196
	call	#__system___fmtstr
LR__1618
	mov	ptra, fp
	call	#popregs_
__system___fmtfloat_ret
	ret

__system___float_fromuns
	mov	arg03, arg01 wz
 if_e	mov	result1, arg03
 if_e	jmp	#LR__1619
	encod	arg02, arg03 wc
 if_b	add	arg02, #1
	sub	arg02, #1
	mov	arg01, #31
	sub	arg01, arg02
	shl	arg03, arg01
	shr	arg03, #2
	mov	arg01, #0
	call	#__system___float_Pack
LR__1619
__system___float_fromuns_ret
	ret

__system___float_fromint
	mov	COUNT_, #1
	call	#pushregs_
	cmps	arg01, #0 wc
 if_b	neg	arg01, arg01
 if_b	mov	local01, #1
 if_ae	mov	local01, #0
	call	#__system___float_fromuns
	cmp	local01, #0 wz
 if_ne	bitnot	result1, #31
	mov	ptra, fp
	call	#popregs_
__system___float_fromint_ret
	ret

__system___float_add
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	mov	local04, local01
	mov	local05, local04
	zerox	local05, #22
	mov	local06, local04
	shl	local06, #1
	shr	local06, #24
	shr	local04, #31
	mov	arg01, local02
	mov	result1, arg01
	mov	local07, result1
	zerox	local07, #22
	mov	local08, result1
	shl	local08, #1
	shr	local08, #24
	mov	local09, result1
	shr	local09, #31
	mov	local10, local09
	mov	local11, #0
	mov	local12, #0
	cmp	local06, local08 wc
 if_ae	cmp	local06, local08 wz
 if_a	jmp	#LR__1620
 if_ae	cmp	local05, local07 wc
 if_ae	jmp	#LR__1620
	mov	local13, local05
	mov	local05, local07
	mov	local07, local13
	mov	local13, local06
	mov	local06, local08
	mov	local08, local13
	mov	local13, local04
	mov	local04, local10
	mov	local10, local13
LR__1620
	cmp	local06, #255 wz
 if_e	jmp	#LR__1635
	cmp	local06, #0 wz
 if_e	jmp	#LR__1637
	bith	local05, #23
LR__1621
	cmp	local08, #0 wz
 if_e	jmp	#LR__1641
	bith	local07, #23
LR__1622
	sub	local06, #127
	sub	local08, #127
	mov	local14, local06
	sub	local14, local08
	loc	pa,	#(@LR__1624-@LR__1623)
	call	#FCACHE_LOAD_
LR__1623
	cmps	local14, #32 wc
 if_b	jmp	#LR__1625
	mov	local09, local07
	cmp	local11, #0 wz
	wrnz	local11
	or	local09, local11
	mov	local11, local09
	mov	local07, #0
	sub	local14, #32
	jmp	#LR__1623
LR__1624
LR__1625
	cmp	local14, #0 wz
 if_e	jmp	#LR__1626
	mov	local13, local07
	mov	local09, #32
	sub	local09, local14
	shl	local13, local09
	mov	local09, local11
	mov	local08, #32
	sub	local08, local14
	shl	local09, local08 wz
	shr	local11, local14
	shr	local07, local14
	or	local11, local13
	mov	local15, #0
 if_ne	mov	local15, #1
	or	local11, local15
LR__1626
	mov	local15, local04
	xor	local15, local10
	test	local15, #1 wz
 if_e	jmp	#LR__1627
	not	local07, local07
	not	local11, local11
	add	local11, #1 wz
	mov	local15, #0
 if_e	mov	local15, #1
	add	local07, local15
LR__1627
	add	local12, local11 wc
	addx	local05, local07
	cmps	local05, #0 wc
 if_ae	jmp	#LR__1628
	xor	local04, #1
	not	local05, local05
	not	local12, local12
	add	local12, #1 wz
	mov	local15, #0
 if_e	mov	local15, #1
	add	local05, local15
LR__1628
	cmp	local05, ##16777216 wc
 if_b	jmp	#LR__1629
	add	local06, #1
	mov	local14, local12
	and	local14, #1
	shr	local12, #1
	mov	local15, local05
	shl	local15, #31
	or	local12, local15
	or	local12, local14
	shr	local05, #1
	jmp	#LR__1634
LR__1629
	cmp	local05, ##8388608 wc
 if_ae	jmp	#LR__1633
	cmp	local05, #0 wz
 if_e	cmp	local12, #0 wz
 if_e	or	local04, #8
 if_e	andn	local04, #1
 if_e	jmp	#LR__1632
LR__1630
	cmp	local05, ##8388608 wc
 if_ae	jmp	#LR__1631
	add	local12, local12 wc
	addx	local05, local05
	sub	local06, #1
	jmp	#LR__1630
LR__1631
LR__1632
LR__1633
LR__1634
	mov	arg01, local05
	mov	arg02, local12
	mov	arg03, local06
	mov	arg04, local04
	call	#__system__pack_1245
	jmp	#LR__1645
LR__1635
	cmp	local08, #255 wz
 if_ne	jmp	#LR__1636
	cmp	local10, local04 wz
 if_ne	mov	result1, ##2146435072
 if_ne	jmp	#LR__1645
LR__1636
	cmp	local05, #0 wz
 if_ne	mov	result1, ##2146435072
 if_ne	jmp	#LR__1645
	mov	arg02, local12
	mov	arg03, local06
	mov	arg04, local04
	or	arg04, #2
	mov	arg01, local05
	call	#__system__pack_1245
	jmp	#LR__1645
LR__1637
	cmp	local05, #0 wz
 if_e	jmp	#LR__1640
	shl	local05, #1
	loc	pa,	#(@LR__1639-@LR__1638)
	call	#FCACHE_LOAD_
LR__1638
	cmp	local05, ##8388608 wc
 if_b	mov	local15, local06
 if_b	sub	local15, #1
 if_b	mov	local06, local15
 if_b	shl	local05, #1
 if_b	jmp	#LR__1638
LR__1639
	jmp	#LR__1621
LR__1640
	and	local04, local10
	mov	arg04, local04
	or	arg04, #8
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#__system__pack_1245
	jmp	#LR__1645
LR__1641
	cmp	local07, #0 wz
 if_e	jmp	#LR__1644
	shl	local07, #1
	loc	pa,	#(@LR__1643-@LR__1642)
	call	#FCACHE_LOAD_
LR__1642
	cmp	local07, ##8388608 wc
 if_b	mov	local15, local08
 if_b	sub	local15, #1
 if_b	mov	local08, local15
 if_b	shl	local07, #1
 if_b	jmp	#LR__1642
LR__1643
	jmp	#LR__1622
LR__1644
	mov	arg02, local12
	sub	local06, #127
	mov	arg03, local06
	mov	arg04, local04
	mov	arg01, local05
	call	#__system__pack_1245
LR__1645
	mov	ptra, fp
	call	#popregs_
__system___float_add_ret
	ret

__system___float_mul
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, local01
	mov	local04, local03
	zerox	local04, #22
	mov	local05, local03
	shl	local05, #1
	shr	local05, #24
	shr	local03, #31
	mov	arg01, local02
	mov	result1, arg01
	mov	local06, result1
	mov	local07, local06
	zerox	local07, #22
	mov	local08, local06
	shl	local08, #1
	shr	local08, #24
	mov	local09, local08
	shr	local06, #31
	mov	local10, #0
	xor	local03, local06
	cmp	local05, #255 wz
 if_e	jmp	#LR__1649
	cmp	local09, #255 wz
 if_e	jmp	#LR__1652
	cmp	local05, #0 wz
 if_e	jmp	#LR__1653
	bith	local04, #23
LR__1646
	cmp	local09, #0 wz
 if_e	jmp	#LR__1657
	bith	local07, #23
LR__1647
	mov	local08, local04
	shl	local08, #4
	mov	local10, local07
	shl	local10, #5
	qmul	local08, local10
	add	local05, local09
	sub	local05, #254
	mov	local11, local05
	shl	local04, #4
	shl	local07, #5
	getqx	local10
	qmul	local04, local07
	getqy	local12
	cmp	local12, ##16777216 wc
 if_b	jmp	#LR__1648
	add	local11, #1
	shr	local10, #1
	mov	local09, local12
	shl	local09, #31
	or	local10, local09
	shr	local12, #1
LR__1648
	mov	arg01, local12
	mov	arg02, local10
	mov	arg03, local11
	mov	arg04, local03
	call	#__system__pack_1245
	jmp	#LR__1661
LR__1649
	cmp	local04, #0 wz
 if_ne	mov	result1, local01
 if_ne	jmp	#LR__1661
	cmps	local09, #255 wc
 if_ae	jmp	#LR__1650
	cmp	local09, #0 wz
 if_ne	jmp	#LR__1651
	cmp	local07, #0 wz
 if_ne	jmp	#LR__1651
	mov	result1, ##2146435072
	jmp	#LR__1661
LR__1650
	cmp	local07, #0 wz
 if_ne	mov	result1, local02
 if_ne	jmp	#LR__1661
LR__1651
	or	local03, #2
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, local05
	mov	arg04, local03
	call	#__system__pack_1245
	jmp	#LR__1661
LR__1652
	cmp	local05, #0 wz
 if_e	cmp	local04, #0 wz
 if_e	mov	result1, ##2146435072
 if_e	jmp	#LR__1661
	cmp	local07, #0 wz
 if_ne	mov	result1, local02
 if_ne	jmp	#LR__1661
	mov	arg03, local09
	mov	arg04, local03
	or	arg04, #2
	mov	arg01, #0
	mov	arg02, #0
	call	#__system__pack_1245
	jmp	#LR__1661
LR__1653
	cmp	local04, #0 wz
 if_e	jmp	#LR__1656
	shl	local04, #1
	loc	pa,	#(@LR__1655-@LR__1654)
	call	#FCACHE_LOAD_
LR__1654
	cmp	local04, ##8388608 wc
 if_b	sub	local05, #1
 if_b	shl	local04, #1
 if_b	jmp	#LR__1654
LR__1655
	jmp	#LR__1646
LR__1656
	or	local03, #8
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	mov	arg04, local03
	call	#__system__pack_1245
	jmp	#LR__1661
LR__1657
	cmp	local07, #0 wz
 if_e	jmp	#LR__1660
	shl	local07, #1
	loc	pa,	#(@LR__1659-@LR__1658)
	call	#FCACHE_LOAD_
LR__1658
	cmp	local07, ##8388608 wc
 if_b	sub	local09, #1
 if_b	shl	local07, #1
 if_b	jmp	#LR__1658
LR__1659
	jmp	#LR__1647
LR__1660
	mov	arg04, local03
	or	arg04, #8
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#__system__pack_1245
LR__1661
	mov	ptra, fp
	call	#popregs_
__system___float_mul_ret
	ret

__system___float_div
	mov	COUNT_, #14
	call	#pushregs_
	mov	local03, arg01
	mov	local04, arg02
	mov	local05, local03
	mov	local06, local05
	zerox	local06, #22
	mov	local07, local05
	shl	local07, #1
	shr	local07, #24
	shr	local05, #31
	mov	result1, local04
	mov	local08, result1
	mov	local09, local08
	zerox	local09, #22
	mov	local10, local08
	shl	local10, #1
	shr	local10, #24
	shr	local08, #31
	xor	local05, local08
	cmp	local07, #255 wz
 if_e	jmp	#LR__1667
	cmp	local10, #255 wz
 if_e	jmp	#LR__1668
	cmp	local07, #0 wz
 if_e	jmp	#LR__1669
	bith	local06, #23
LR__1662
	cmp	local10, #0 wz
 if_e	jmp	#LR__1673
	bith	local09, #23
LR__1663
	sub	local07, local10
	mov	local11, local07
	mov	arg01, local06
	shr	arg01, #2
	shl	local06, #30
	mov	arg02, local06
	mov	arg03, local09
	setq	arg01
	qdiv	arg02, arg03
	mov	local12, #0
	getqx	local01
	getqy	result2
	mov	local02, result2
	mov	local13, local01
	cmps	local02, #0 wz
	mov	local14, local13
	shl	local14, #25
 if_ne	mov	local12, #1
	or	local14, local12
	shr	local13, #7
	cmp	local13, ##16777216 wc
 if_b	jmp	#LR__1664
	add	local11, #1
	shr	local14, #1
	mov	local12, local13
	shl	local12, #31
	or	local14, local12
	shr	local13, #1
	jmp	#LR__1666
LR__1664
	cmp	local13, ##8388608 wc
 if_ae	jmp	#LR__1665
	sub	local11, #1
	shl	local13, #1
	mov	local12, local14
	shr	local12, #31
	or	local13, local12
	shl	local14, #1
LR__1665
LR__1666
	mov	arg01, local13
	mov	arg02, local14
	mov	arg03, local11
	mov	arg04, local05
	call	#__system__pack_1245
	jmp	#LR__1677
LR__1667
	cmp	local06, #0 wz
 if_ne	mov	result1, local03
 if_ne	jmp	#LR__1677
	cmp	local10, #255 wz
 if_e	mov	result1, ##2146435072
 if_e	jmp	#LR__1677
	or	local05, #2
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, local07
	mov	arg04, local05
	call	#__system__pack_1245
	jmp	#LR__1677
LR__1668
	cmp	local09, #0 wz
 if_ne	mov	result1, local04
 if_ne	jmp	#LR__1677
	mov	arg04, local05
	or	arg04, #8
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#__system__pack_1245
	jmp	#LR__1677
LR__1669
	cmp	local06, #0 wz
 if_e	jmp	#LR__1672
	shl	local06, #1
	loc	pa,	#(@LR__1671-@LR__1670)
	call	#FCACHE_LOAD_
LR__1670
	cmp	local06, ##8388608 wc
 if_b	sub	local07, #1
 if_b	shl	local06, #1
 if_b	jmp	#LR__1670
LR__1671
	jmp	#LR__1662
LR__1672
	cmp	local10, #0 wz
 if_e	cmp	local09, #0 wz
 if_e	mov	result1, ##2146435072
 if_e	jmp	#LR__1677
	mov	arg04, local05
	or	arg04, #8
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#__system__pack_1245
	jmp	#LR__1677
LR__1673
	cmp	local09, #0 wz
 if_e	jmp	#LR__1676
	shl	local09, #1
	loc	pa,	#(@LR__1675-@LR__1674)
	call	#FCACHE_LOAD_
LR__1674
	cmp	local09, ##8388608 wc
 if_b	sub	local10, #1
 if_b	shl	local09, #1
 if_b	jmp	#LR__1674
LR__1675
	jmp	#LR__1663
LR__1676
	mov	arg04, local05
	or	arg04, #2
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#__system__pack_1245
LR__1677
	mov	ptra, fp
	call	#popregs_
__system___float_div_ret
	ret

__system___float_cmp
	mov	_var01, arg01
	cmps	_var01, ##2139095041 wc
 if_b	cmps	arg02, ##2139095041 wc
 if_ae	mov	result1, arg03
 if_ae	jmp	#__system___float_cmp_ret
	cmp	_var01, ##-8388607 wc
 if_b	cmp	_var01, ##-8388607 wc
 if_ae	mov	result1, arg03
 if_ae	jmp	#__system___float_cmp_ret
	cmps	_var01, #0 wc
 if_ae	jmp	#LR__1678
	cmps	arg02, #0 wc
 if_b	mov	result1, arg02
 if_b	sub	result1, _var01
 if_b	jmp	#__system___float_cmp_ret
	cmp	arg02, #0 wz
 if_e	cmp	_var01, ##-2147483648 wz
 if_e	mov	result1, #0
 if_e	jmp	#__system___float_cmp_ret
	neg	result1, #1
	jmp	#__system___float_cmp_ret
LR__1678
	cmps	arg02, #0 wc
 if_ae	jmp	#LR__1679
	cmp	_var01, #0 wz
 if_e	cmp	arg02, ##-2147483648 wz
 if_e	mov	result1, #0
 if_e	jmp	#__system___float_cmp_ret
	mov	result1, #1
	jmp	#__system___float_cmp_ret
LR__1679
	sub	_var01, arg02
	mov	result1, _var01
__system___float_cmp_ret
	ret

__system___float_tointeger
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	call	#__system___float_Unpack
	mov	local02, result3
	mov	local03, result2
	cmps	local03, ##-1 wc
 if_b	jmp	#LR__1680
	cmps	local03, #31 wc
 if_ae	jmp	#LR__1680
	shl	local02, #2
	mov	local04, #30
	sub	local04, local03
	shr	local02, local04
	add	local02, local01
	shr	local02, #1
	cmp	result1, #0 wz
 if_ne	neg	local02, local02
	mov	result1, local02
	jmp	#LR__1681
LR__1680
	mov	result1, #0
LR__1681
	mov	ptra, fp
	call	#popregs_
__system___float_tointeger_ret
	ret

__system___float_Unpack
	mov	_var01, arg01
	shr	_var01, #31
	mov	_var02, arg01
	shl	_var02, #1
	shr	_var02, #24 wz
	bitl	arg01, #279
 if_ne	shl	arg01, #6
 if_ne	bith	arg01, #29
 if_ne	jmp	#LR__1682
	encod	_var03, arg01 wc
 if_b	add	_var03, #1
	sub	_var03, #23
	mov	_var02, _var03
	mov	result2, #7
	sub	result2, _var03
	shl	arg01, result2
LR__1682
	sub	_var02, #127
	mov	result3, arg01
	mov	result1, _var01
	mov	result2, _var02
__system___float_Unpack_ret
	ret

__system___float_Pack
	mov	_var01, #0
	cmp	arg03, #0 wz
 if_e	jmp	#LR__1684
	encod	_var02, arg03 wc
 if_b	add	_var02, #1
	mov	_var01, #33
	sub	_var01, _var02
	shl	arg03, _var01
	mov	_var02, #3
	sub	_var02, _var01
	add	arg02, _var02
	mov	_var03, arg02
	add	arg03, #256
	mov	_var02, arg03
	andn	_var02, #255 wz
 if_e	add	_var03, #1
	add	_var03, #127
	fges	_var03, ##-23
	fles	_var03, #255
	cmps	_var03, #1 wc
 if_ae	jmp	#LR__1683
	shr	arg03, #1
	decod	_var02, #31
	add	_var02, arg03
	neg	_var03, _var03
	shr	_var02, _var03
	mov	arg03, _var02
	mov	_var03, #0
LR__1683
	mov	result1, arg01
	shl	result1, #31
	mov	_var02, _var03
	shl	_var02, #23
	or	result1, _var02
	mov	_var04, arg03
	shr	_var04, #9
	or	result1, _var04
	jmp	#__system___float_Pack_ret
LR__1684
	mov	result1, _var01
__system___float_Pack_ret
	ret

__system___basic_print_float
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03 wz
	mov	local04, arg04
 if_ne	jmp	#LR__1685
	cmp	local04, #35 wz
 if_e	mov	local05, ##537198592
 if_ne	decod	local05, #29
	mov	local03, local05
LR__1685
	mov	arg01, local01
	call	#__system___gettxfunc
	mov	local05, result1 wz
 if_e	mov	result1, #0
 if_ne	mov	arg02, local03
 if_ne	mov	arg03, local02
 if_ne	mov	arg04, local04
 if_ne	mov	arg01, local05
 if_ne	call	#__system___fmtfloat
	mov	ptra, fp
	call	#popregs_
__system___basic_print_float_ret
	ret

__system____builtin_ilogb
	mov	COUNT_, #2
	call	#pushregs_
	call	#__system___float_Unpack
	mov	local01, result2
	mov	local02, result3 wz
 if_e	mov	result1, ##-2147483647
 if_e	jmp	#LR__1687
	cmp	local01, #128 wz
 if_ne	jmp	#LR__1686
	cmp	local02, ##536870912 wz
 if_e	bmask	result1, #30
 if_e	jmp	#LR__1687
	decod	result1, #31
	jmp	#LR__1687
LR__1686
	mov	result1, local01
LR__1687
	mov	ptra, fp
	call	#popregs_
__system____builtin_ilogb_ret
	ret

__system____builtin_exp2f
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, ##1123942400
	neg	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_ae	mov	result1, ##2139095040
 if_ae	jmp	#LR__1689
	mov	arg01, local01
	mov	arg02, ##-1023541248
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_b	mov	result1, #0
 if_b	jmp	#LR__1689
	mov	arg01, local01
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	local02, result1
	mov	arg01, local02
	call	#__system___float_fromint
	mov	arg02, result1
	mov	arg01, local01
	bitnot	arg02, #31
	call	#__system___float_add
	mov	local03, result1
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_ae	jmp	#LR__1688
	mov	arg01, local03
	mov	arg02, ##1065353216
	call	#__system___float_add
	mov	local03, result1
	sub	local02, #1
LR__1688
	add	local02, #127
	shl	local02, #23
	mov	local04, local02
	mov	arg01, local03
	mov	arg02, ##1291845632
	call	#__system___float_mul
	mov	arg01, result1
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	arg02, result1 wz
 if_e	mov	result1, local04
 if_e	jmp	#LR__1689
	bith	arg02, #62
	qexp	arg02
	mov	arg01, local04
	getqx	arg02
	add	arg02, #1
	shr	arg02, #1
	add	arg02, ##1056964608
	call	#__system___float_mul
LR__1689
	mov	ptra, fp
	call	#popregs_
__system____builtin_exp2f_ret
	ret

__system____builtin_log2f
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg01 wz
 if_ne	cmp	local02, ##-2147483648 wz
 if_e	mov	result1, ##2139095040
 if_e	bitnot	result1, #31
 if_e	jmp	#LR__1694
	cmps	local02, #0 wc
 if_b	mov	result1, ##2143289344
 if_b	jmp	#LR__1694
	mov	arg01, local01
	mov	arg02, ##1092616192
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_e	mov	result1, ##1079286392
 if_e	jmp	#LR__1694
	mov	arg01, local01
	mov	arg02, ##1076754516
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_e	mov	result1, ##1069066811
 if_e	jmp	#LR__1694
	mov	local03, local02
	shr	local03, #23
	getbyte	local03, local03, #0
	bitl	local02, #279
	mov	local04, local02
	cmp	local03, #255 wz
 if_ne	jmp	#LR__1690
	cmp	local04, #0 wz
 if_ne	mov	local05, ##2139095040
 if_e	mov	local05, ##2143289344
	mov	result1, local05
	jmp	#LR__1694
LR__1690
	cmp	local03, #0 wz
 if_ne	bith	local04, #23
 if_ne	sub	local03, #127
 if_ne	jmp	#LR__1693
	cmp	local04, #0 wz
 if_e	mov	result1, ##2139095040
 if_e	bitnot	result1, #31
 if_e	jmp	#LR__1694
	neg	local03, #126
	loc	pa,	#(@LR__1692-@LR__1691)
	call	#FCACHE_LOAD_
LR__1691
	testbn	local04, #23 wz
 if_e	shl	local04, #1
 if_e	add	local03, #1
 if_e	jmp	#LR__1691
LR__1692
LR__1693
	qlog	local04
	sub	local03, #1
	mov	arg01, local03
	getqx	local05
	bitl	local05, #155
	add	local05, #8
	shr	local05, #4
	add	local05, ##1065353216
	call	#__system___float_fromint
	mov	arg02, result1
	mov	arg01, local05
	call	#__system___float_add
LR__1694
	mov	ptra, fp
	call	#popregs_
__system____builtin_log2f_ret
	ret

__system____builtin_powf
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local02
	mov	arg02, #0
	call	#__system___float_tointeger
	mov	local03, result1
	mov	arg01, local03
	call	#__system___float_fromint
	mov	arg01, result1
	mov	arg02, local02
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1695
	mov	arg01, ##1065353216
	mov	arg02, local01
	mov	arg03, local03
	call	#__system___float_pow_n
	jmp	#LR__1696
LR__1695
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_b	mov	result1, ##2143289344
 if_b	jmp	#LR__1696
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1696
	mov	arg01, local01
	call	#__system____builtin_log2f
	mov	arg01, result1
	mov	arg02, local02
	call	#__system___float_mul
	mov	arg01, result1
	call	#__system____builtin_exp2f
LR__1696
	mov	ptra, fp
	call	#popregs_
__system____builtin_powf_ret
	ret

__system____builtin_logbase
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	call	#__system____builtin_log2f
	mov	local02, result1
	mov	arg01, local01
	call	#__system____builtin_log2f
	mov	arg02, result1
	mov	arg01, local02
	call	#__system___float_div
	mov	ptra, fp
	call	#popregs_
__system____builtin_logbase_ret
	ret

__system___float_pow_n
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	cmps	local03, #0 wc
 if_ae	jmp	#LR__1697
	mov	local04, #1
	neg	local03, local03
	cmps	local03, #0 wc
 if_b	mov	result1, #0
 if_b	jmp	#LR__1705
	jmp	#LR__1698
LR__1697
	mov	local04, #0
LR__1698
	mov	local05, ##1065353216
LR__1699
	cmps	local03, #1 wc
 if_b	jmp	#LR__1701
	test	local03, #1 wz
 if_e	jmp	#LR__1700
	mov	arg01, local05
	mov	arg02, local02
	call	#__system___float_mul
	mov	local05, result1
LR__1700
	sar	local03, #1
	mov	arg01, local02
	mov	arg02, local02
	call	#__system___float_mul
	mov	local02, result1
	jmp	#LR__1699
LR__1701
	cmp	local04, #0 wz
 if_e	jmp	#LR__1702
	mov	arg01, local01
	mov	arg02, local05
	call	#__system___float_div
	mov	local05, result1
	jmp	#LR__1704
LR__1702
	mov	arg01, local01
	mov	arg02, ##1065353216
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_e	jmp	#LR__1703
	mov	arg01, local01
	mov	arg02, local05
	call	#__system___float_mul
	mov	local05, result1
LR__1703
LR__1704
	mov	result1, local05
LR__1705
	mov	ptra, fp
	call	#popregs_
__system___float_pow_n_ret
	ret

__system___gc_ptrs
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, __heap_ptr
	mov	local02, local01
	add	local02, ##32760
	rdlong	result2, local01 wz
 if_ne	jmp	#LR__1706
	mov	result2, local02
	sub	result2, local01
	wrword	#1, local01
	mov	result1, local01
	add	result1, #2
	wrword	##27792, result1
	mov	result1, local01
	add	result1, #4
	wrword	#0, result1
	mov	result1, local01
	add	result1, #6
	wrword	#1, result1
	add	local01, #16
	abs	result2, result2 wc
	shr	result2, #4
	negc	result2, result2
	wrword	result2, local01
	mov	result2, local01
	add	result2, #2
	wrword	##27791, result2
	mov	result2, local01
	add	result2, #4
	wrword	#0, result2
	mov	result2, local01
	add	result2, #6
	wrword	#0, result2
	sub	local01, #16
LR__1706
	mov	result2, local02
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___gc_ptrs_ret
	ret

__system___gc_nextBlockPtr
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdword	local02, local01 wz
 if_ne	jmp	#LR__1707
	mov	arg01, ##@LR__1808
	call	#__system___gc_errmsg
	jmp	#LR__1708
LR__1707
	mov	result1, local01
	shl	local02, #4
	add	result1, local02
LR__1708
	mov	ptra, fp
	call	#popregs_
__system___gc_nextBlockPtr_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	loc	pa,	#(@LR__1710-@LR__1709)
	call	#FCACHE_LOAD_
LR__1709
	mov	local07, local05
	add	local05, #6
	rdword	arg02, local05 wz
	mov	arg01, local03
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local08, result1
	mov	local05, local08 wz
 if_ne	mov	local08, local05
 if_ne	rdword	local06, local08
	cmp	local05, #0 wz
 if_ne	cmps	local05, local04 wc
 if_a	jmp	#LR__1711
 if_ne	cmps	local01, local06 wcz
 if_a	jmp	#LR__1709
LR__1710
LR__1711
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__1714
	mov	local08, local05
	add	local08, #6
	rdword	local09, local08
	cmps	local01, local06 wc
 if_ae	jmp	#LR__1713
	wrword	local01, local05
	mov	arg01, local05
	mov	local09, local01
	shl	local09, #4
	add	arg01, local09
	mov	local08, local06
	sub	local08, local01
	wrword	local08, arg01
	mov	local08, arg01
	add	local08, #2
	wrword	##27791, local08
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local09, arg01
	add	local09, #4
	wrword	result1, local09
	mov	local08, local05
	add	local08, #6
	mov	local09, arg01
	rdword	local10, local08
	add	local09, #6
	wrword	local10, local09
	mov	local11, arg01
	mov	arg02, local11 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local09, result1
	call	#__system___gc_nextBlockPtr
	mov	local12, result1 wz
 if_e	jmp	#LR__1712
	cmps	local12, local04 wc
 if_ae	jmp	#LR__1712
	mov	arg01, local03
	mov	arg02, local11 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local08, result1
	mov	local13, local12
	add	local13, #4
	wrword	local08, local13
LR__1712
LR__1713
	add	local07, #6
	wrword	local09, local07
	mov	local08, ##27776
	or	local08, local02
	mov	result1, #0
	cogid	result1
	or	local08, result1
	mov	local10, local05
	add	local10, #2
	wrword	local08, local10
	mov	local08, local03
	add	local08, #8
	mov	local13, local05
	rdword	local10, local08
	add	local13, #6
	wrword	local10, local13
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	add	local03, #8
	wrword	result1, local03
	mov	result1, local05
	add	result1, #8
	or	result1, ##1669332992
LR__1714
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_errmsg
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
LR__1715
	rdbyte	arg01, local01 wz
	add	local01, #1
 if_e	jmp	#LR__1716
	call	#__system___tx
	jmp	#LR__1715
LR__1716
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___gc_errmsg_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	local02, result1 wz
 if_ne	jmp	#LR__1717
	cmps	local01, #1 wc
 if_b	jmp	#LR__1717
	mov	arg01, ##@LR__1809
	call	#__system___gc_errmsg
	jmp	#LR__1718
LR__1717
	mov	result1, local02
LR__1718
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__1726
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__1719
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1
LR__1719
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	wrlong	#0, arg01
	cmp	local03, #0 wz
 if_e	jmp	#LR__1725
	shl	local01, #4
	sub	local01, #8
	abs	local04, local01 wc
	shr	local04, #2
	negc	local05, local04 wz
	mov	local06, local03
 if_e	jmp	#LR__1724
	loc	pa,	#(@LR__1722-@LR__1720)
	call	#FCACHE_LOAD_
LR__1720
	rep	@LR__1723, local05
LR__1721
	wrlong	#0, local06
	add	local06, #4
LR__1722
LR__1723
LR__1724
LR__1725
	mov	result1, local03
LR__1726
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	mov	_var01, arg03
	mov	_var02, _var01
	and	_var02, ##-1048576
	cmp	_var02, ##1669332992 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	sub	_var01, #8
	bitl	_var01, #372
	cmps	_var01, arg01 wc
 if_b	jmp	#LR__1727
	cmps	_var01, arg02 wc
 if_b	jmp	#LR__1728
LR__1727
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__1728
	mov	_var02, _var01
	xor	_var02, arg01
	and	_var02, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var02, _var01
	add	_var02, #2
	rdword	_var02, _var02
	and	_var02, ##65472
	cmp	_var02, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, _var01
__system___gc_isvalidptr_ret
	ret

__system___gc_free
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	arg01, result1
	mov	arg02, result2
	mov	arg03, local01
	call	#__system___gc_isvalidptr
	mov	local01, result1 wz
 if_e	jmp	#LR__1729
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	call	#__system___lockmem
	mov	arg01, local01
	call	#__system___gc_dofree
	add	ptr___system__dat__, #20
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	wrlong	#0, arg01
LR__1729
	mov	ptra, fp
	call	#popregs_
__system___gc_free_ret
	ret

__system___gc_dofree
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result1
	mov	local03, result2
	mov	arg01, local01
	add	arg01, #2
	wrword	##27791, arg01
	mov	local04, local01
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local05, result1
	loc	pa,	#(@LR__1731-@LR__1730)
	call	#FCACHE_LOAD_
LR__1730
	add	local04, #4
	rdword	arg02, local04 wz
	mov	arg01, local02
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local04, result1 wz
 if_e	jmp	#LR__1732
	mov	arg01, local04
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmps	result1, #0 wz
 if_e	jmp	#LR__1730
LR__1731
LR__1732
	cmp	local04, #0 wz
 if_e	mov	local04, local02
	mov	arg02, local04
	add	arg02, #6
	mov	arg01, local01
	rdword	arg02, arg02
	add	arg01, #6
	wrword	arg02, arg01
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	arg01, local04
	add	arg01, #6
	wrword	result1, arg01
	cmp	local04, local02 wz
 if_e	jmp	#LR__1735
	mov	arg01, local04
	call	#__system___gc_nextBlockPtr
	cmp	result1, local01 wz
 if_ne	jmp	#LR__1734
	rdword	local05, local04
	rdword	result2, local01
	add	local05, result2
	wrword	local05, local04
	mov	local05, local01
	add	local05, #2
	wrword	#0, local05
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local05, result1
	cmps	local05, local03 wc
 if_ae	jmp	#LR__1733
	mov	arg02, local04 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	result2, local05
	add	result2, #4
	wrword	result1, result2
LR__1733
	mov	result2, local01
	add	result2, #6
	mov	result1, local04
	rdword	result2, result2
	add	result1, #6
	wrword	result2, result1
	add	local01, #6
	wrword	#0, local01
	mov	local01, local04
LR__1734
LR__1735
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local06, result1 wz
 if_e	jmp	#LR__1737
	cmps	local06, local03 wc
 if_ae	jmp	#LR__1737
	mov	arg01, local06
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmp	result1, #0 wz
 if_e	jmp	#LR__1737
	mov	local04, local01
	rdword	local05, local04
	mov	local01, local06
	rdword	local07, local01
	add	local05, local07
	mov	local08, local04
	wrword	local05, local08
	mov	local05, local01
	add	local05, #6
	mov	result2, local04
	rdword	local09, local05
	add	result2, #6
	wrword	local09, result2
	mov	local05, local01
	add	local05, #2
	wrword	#170, local05
	mov	local05, local01
	add	local05, #6
	mov	local10, #0
	wrword	#0, local05
	mov	arg01, local01
	call	#__system___gc_nextBlockPtr
	mov	local11, result1
	mov	local05, local11 wz
 if_e	jmp	#LR__1736
	cmps	local05, local03 wc
 if_ae	jmp	#LR__1736
	mov	arg01, local02
	mov	arg02, local04 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, arg01
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local11, result1
	mov	local10, local05
	add	local10, #4
	wrword	local11, local10
LR__1736
LR__1737
	mov	result1, local05
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #9
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
	mov	local04, #0
	cogid	local04
 if_e	jmp	#LR__1739
LR__1738
	cmps	local03, local01 wc
 if_ae	jmp	#LR__1739
	mov	local05, local03
	add	local05, #2
	rdword	local06, local05
	andn	local06, #32
	mov	local07, local03
	add	local07, #2
	wrword	local06, local07
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local03, result1 wz
 if_ne	jmp	#LR__1738
LR__1739
	mov	local06, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	arg02, result1
	mov	arg01, local06
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	call	#__system___gc_nextBlockPtr
	mov	local08, result1 wz
 if_ne	jmp	#LR__1740
	mov	arg01, ##@LR__1810
	call	#__system___gc_errmsg
	jmp	#LR__1744
LR__1740
LR__1741
	mov	local03, local08
	mov	arg01, local03
	call	#__system___gc_nextBlockPtr
	mov	local08, result1
	mov	local06, local03
	add	local06, #2
	rdword	local06, local06
	test	local06, #32 wz
 if_ne	jmp	#LR__1743
	mov	local05, local06
	and	local05, #16 wz
 if_ne	jmp	#LR__1743
	getnib	local06, local06, #0
	mov	local09, local06
	cmp	local09, local04 wz
 if_ne	cmp	local09, #14 wz
 if_ne	jmp	#LR__1742
	mov	arg01, local03
	call	#__system___gc_dofree
	mov	local06, result1
	mov	local08, local06
LR__1742
LR__1743
	cmp	local08, #0 wz
 if_ne	cmps	local08, local01 wc
 if_c_and_nz	jmp	#LR__1741
LR__1744
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__1745
	cmps	local01, local02 wc
 if_ae	jmp	#LR__1746
	rdlong	arg03, local01
	add	local01, #4
	mov	arg02, local04
	mov	arg01, local03
	call	#__system___gc_isvalidptr
	mov	arg03, result1 wz
 if_e	jmp	#LR__1745
	mov	arg01, arg03
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1745
	mov	result2, arg03
	add	result2, #2
	rdword	result2, result2
	andn	result2, #15
	or	result2, #46
	add	arg03, #2
	wrword	result2, arg03
	jmp	#LR__1745
LR__1746
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #4
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #0
LR__1747
	mov	local04, #496
	sub	local04, local03
	add	local04, #496
	'.live	local04
	alts	local04, #0
	mov	local04, local04
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local04
	call	#__system___gc_isvalidptr
	cmp	result1, #0 wz
 if_e	jmp	#LR__1748
	mov	local04, result1
	add	local04, #2
	rdword	local04, local04
	or	local04, #32
	add	result1, #2
	wrword	local04, result1
LR__1748
	add	local03, #1
	cmps	local03, #496 wc
 if_b	jmp	#LR__1747
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system____default_getc
__system____default_getc_ret
	ret

__system____default_putc
__system____default_putc_ret
	ret

__system____default_putc_terminal
__system____default_putc_terminal_ret
	ret

__system____default_flush
__system____default_flush_ret
	ret

__system____getftab
	cmp	arg01, #10 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#__system____getftab_ret
	mov	result1, arg01
	shl	result1, #1
	add	result1, arg01
	shl	result1, #4
	add	ptr___system__dat__, ##756
	add	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##756
__system____getftab_ret
	ret

__system__strncpy
	mov	_var01, arg01
LR__1749
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_b	jmp	#LR__1750
	rdbyte	result1, arg02
	wrbyte	result1, _var01
	add	arg02, #1
	rdbyte	result1, _var01 wz
	add	_var01, #1
 if_ne	jmp	#LR__1749
LR__1750
	loc	pa,	#(@LR__1752-@LR__1751)
	call	#FCACHE_LOAD_
LR__1751
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_ae	mov	_var02, _var01
 if_ae	add	_var01, #1
 if_ae	wrbyte	#0, _var02
 if_ae	jmp	#LR__1751
LR__1752
	mov	result1, arg01
__system__strncpy_ret
	ret

__system__strncat
	mov	_var01, arg01
	mov	_var02, arg02
	mov	_var03, arg03
	mov	_var04, _var02 wz
 if_e	jmp	#LR__1757
	cmp	_var03, #1 wc
 if_b	jmp	#LR__1757
	mov	_var05, _var01
	loc	pa,	#(@LR__1755-@LR__1753)
	call	#FCACHE_LOAD_
LR__1753
	rdbyte	_var06, _var05 wz
 if_ne	add	_var05, #1
 if_ne	jmp	#LR__1753
	mov	_var07, _var03
LR__1754
	mov	_var08, _var04
	mov	_var09, _var04
	add	_var09, #1
	mov	_var04, _var09
	rdbyte	_var10, _var08
	mov	_var06, _var10
	zerox	_var06, #7 wz
 if_e	jmp	#LR__1756
	mov	_var11, _var07
	sub	_var11, #1
	mov	_var07, _var11
	cmps	_var07, #0 wc
 if_ae	mov	_var06, _var05
 if_ae	add	_var05, #1
 if_ae	wrbyte	_var10, _var06
 if_ae	jmp	#LR__1754
LR__1755
LR__1756
	mov	_var06, #0
	wrbyte	#0, _var05
LR__1757
	mov	result1, _var01
__system__strncat_ret
	ret

__system__strncmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__1758
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#__system__strncmp_ret
LR__1758
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#__system__strncmp_ret
	mov	_var03, arg03
	loc	pa,	#(@LR__1760-@LR__1759)
	call	#FCACHE_LOAD_
LR__1759
	rdbyte	_var04, _var01
	mov	_var05, arg02
	mov	_var06, arg02
	add	_var06, #1
	mov	arg02, _var06
	rdbyte	_var07, _var05
	mov	_var02, _var03
	sub	_var02, #1
	mov	_var03, _var02
	cmps	_var03, #0 wc
	add	_var01, #1
 if_ae	cmp	_var04, #0 wz
 if_nc_and_z	jmp	#LR__1761
 if_ae	cmp	_var04, _var07 wz
 if_nc_and_z	jmp	#LR__1759
LR__1760
LR__1761
	cmps	_var03, #0 wc
 if_b	mov	result1, #0
 if_b	jmp	#__system__strncmp_ret
	cmp	_var04, _var07 wz
 if_e	mov	result1, #0
 if_e	jmp	#__system__strncmp_ret
	cmp	_var04, #0 wz
 if_e	neg	result1, #1
 if_e	jmp	#__system__strncmp_ret
	cmp	_var07, #0 wz
 if_e	mov	result1, #1
 if_ne	mov	result1, _var04
 if_ne	sub	result1, _var07
__system__strncmp_ret
	ret

__system____root_opendir
	add	ptr___system__dat__, #92
	add	arg01, #4
	wrlong	ptr___system__dat__, arg01
	mov	result1, #0
	sub	ptr___system__dat__, #92
__system____root_opendir_ret
	ret

__system____root_readdir
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #4
	rdlong	local03, local01
	sub	local01, #4
LR__1762
	add	ptr___system__dat__, #108
	cmp	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #108
 if_e	neg	result1, #1
 if_e	jmp	#LR__1763
	rdlong	arg03, local03 wz
 if_e	add	local03, #4
 if_e	jmp	#LR__1762
	rdlong	arg02, local03
	add	arg02, #1
	mov	arg01, local02
	mov	arg03, #64
	call	#__system__strncpy
	add	local02, #80
	wrbyte	#1, local02
	sub	local02, #8
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local03, #4
	add	local01, #4
	wrlong	local03, local01
	mov	result1, #0
LR__1763
	mov	ptra, fp
	call	#popregs_
__system____root_readdir_ret
	ret

__system____root_closedir
	mov	result1, #0
__system____root_closedir_ret
	ret

__system____root_stat
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg02
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	add	local01, #8
	wrlong	##4607, local01
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____root_stat_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	loc	pa,	#(@LR__1766-@LR__1764)
	call	#FCACHE_LOAD_
LR__1764
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__1764
	sub	_var02, #1
LR__1765
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__1767
	rdbyte	_var01, arg01
	rdbyte	_var03, _var02
	wrbyte	_var03, arg01
	wrbyte	_var01, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__1765
LR__1766
LR__1767
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	getbyte	arg01, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local04, #0
 if_e	mov	local02, #1
	test	local02, arg04 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1771
	subr	local03, arg01
	cmps	local03, #1 wc
 if_b	mov	result1, #0
 if_b	jmp	#LR__1771
	cmp	local02, #3 wz
 if_ne	jmp	#LR__1768
	cmp	arg04, #1 wz
	wrz	local02
	add	local03, local02
	abs	local03, local03 wc
	shr	local03, #1
	negc	local03, local03
LR__1768
	mov	local05, #0
LR__1769
	cmps	local05, local03 wc
 if_ae	jmp	#LR__1770
	mov	local06, local01
	rdlong	local07, local06
	add	local06, #4
	rdlong	local06, local06
	mov	arg01, #32
	mov	local02, objptr
	mov	objptr, local07
	call	local06
	mov	objptr, local02
	mov	local06, result1
	cmps	local06, #0 wc
 if_b	mov	result1, local06
 if_b	jmp	#LR__1771
	add	local04, local06
	add	local05, #1
	jmp	#LR__1769
LR__1770
	mov	result1, local04
LR__1771
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05 wz
	mov	local06, local01
	mov	local07, #0
 if_ne	mov	local08, #55
 if_e	mov	local08, #87
LR__1772
	qdiv	local02, local03
	getqy	local05
	qdiv	local02, local03
	cmp	local05, #10 wc
 if_b	add	local05, #48
 if_ae	add	local05, local08
	wrbyte	local05, local06
	add	local06, #1
	add	local07, #1
	getqx	local02
	cmp	local02, #0 wz
 if_ne	jmp	#LR__1772
	cmp	local07, local04 wc
 if_b	jmp	#LR__1772
	wrbyte	#0, local06
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local07
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system__disassemble_1163
	mov	COUNT_, #22
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, arg05
	mov	arg01, local05
	call	#__system___float_fromint
	mov	local06, result1
	mov	local07, #0
	mov	local08, #0
	mov	local09, #1
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #1
	call	#__system___float_cmp
	cmp	result1, #0 wz
 if_e	mov	local10, #0
 if_e	wrlong	#0, local02
 if_e	wrlong	local10, local03
 if_e	jmp	#LR__1785
	mov	arg01, local01
	call	#__system____builtin_ilogb
	mov	local11, result1
	cmp	local05, #10 wz
 if_ne	jmp	#LR__1773
	mov	local10, local11
	shl	local10, #1
	add	local10, local11
	abs	local11, local10 wc
	qdiv	local11, #10
	mov	local12, #9
	getqx	local11
	negc	local11, local11
	jmp	#LR__1774
LR__1773
	mov	local12, #24
LR__1774
LR__1775
	cmps	local07, #8 wc
	add	local07, #1
 if_ae	jmp	#LR__1776
	mov	arg01, ##1065353216
	mov	arg02, local06
	mov	arg03, local11
	call	#__system___float_pow_n
	mov	local13, result1
	mov	arg01, local01
	mov	arg02, local13
	call	#__system___float_div
	mov	local14, result1
	mov	local09, #1
	mov	arg01, local14
	mov	arg02, ##1065353216
	mov	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_b	sub	local11, #1
 if_b	jmp	#LR__1775
	mov	arg02, local06
	neg	local09, #1
	mov	arg01, local14
	neg	arg03, #1
	call	#__system___float_cmp
	cmps	result1, #0 wc
 if_ae	add	local11, #1
 if_ae	jmp	#LR__1775
LR__1776
	mov	arg01, local14
	call	#__system____builtin_ilogb
	mov	local15, result1
	mov	local16, local14
	mov	local17, local16
	bitl	local17, #279
	bith	local17, #23
	shl	local17, local15
	cmp	local05, #2 wz
 if_e	shl	local04, #2
	mov	local18, #0
	cmps	local04, #0 wc
 if_ae	jmp	#LR__1777
	subr	local04, local11
	cmps	local04, #0 wc
 if_b	jmp	#LR__1784
	jmp	#LR__1778
LR__1777
	add	local04, #1
LR__1778
	fles	local04, local12 wcz
	mov	local19, #1
	loc	pa,	#(@LR__1780-@LR__1779)
	call	#FCACHE_LOAD_
LR__1779
	cmp	local18, ##8388608 wc
 if_ae	jmp	#LR__1781
	cmps	local04, #1 wc
	sub	local04, #1
 if_b	jmp	#LR__1781
	qmul	local18, local05
	mov	local20, local17
	shr	local20, #23
	bitl	local17, #279
	getqx	local18
	qmul	local19, local05
	getqx	local19
	qmul	local17, local05
	add	local18, local20
	getqx	local17
	jmp	#LR__1779
LR__1780
LR__1781
	mov	local10, local05
	shl	local10, #23
	abs	local08, local10 wc
	shr	local08, #1
	negc	local08, local08
	cmp	local17, local08 wcz
 if_a	jmp	#LR__1782
	mov	local09, local05
	shl	local09, #23
	abs	local21, local09 wc
	shr	local21, #1
	negc	local21, local21
	cmp	local17, local21 wz
 if_ne	jmp	#LR__1783
	mov	local22, local18
	and	local22, #1 wz
 if_e	jmp	#LR__1783
LR__1782
	mov	local10, local18
	mov	local08, local18
	add	local08, #1
	mov	local18, local08
	cmp	local18, local19 wz
 if_e	mov	local10, local11
 if_e	add	local10, #1
 if_e	mov	local11, local10
LR__1783
LR__1784
	wrlong	local18, local02
	wrlong	local11, local03
LR__1785
	mov	ptra, fp
	call	#popregs_
__system__disassemble_1163_ret
	ret

__system__emitsign_1165
	mov	result1, #0
	cmp	arg02, #0 wz
 if_ne	mov	_var01, arg01
 if_ne	add	arg01, #1
 if_ne	wrbyte	arg02, _var01
 if_ne	mov	result1, #1
	cmp	arg03, #0 wz
 if_ne	wrbyte	#48, arg01
 if_ne	add	arg01, #1
 if_ne	wrbyte	arg03, arg01
 if_ne	add	result1, #2
__system__emitsign_1165_ret
	ret

__system___gettxfunc
	mov	COUNT_, #2
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_ne	add	local01, #8
 if_ne	rdlong	local02, local01
 if_ne	sub	local01, #8
 if_ne	cmps	local02, #0 wz
 if_e	mov	result1, #0
 if_ne	mov	arg02, ptr___struct__s_vfs_file_t_putchar_
 if_ne	mov	arg01, local01
 if_ne	call	#__system___make_methodptr
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getiolock_1205
	mov	COUNT_, #2
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_ne	add	local01, #8
 if_ne	rdlong	local02, local01
 if_ne	sub	local01, #8
 if_ne	cmps	local02, #0 wz
 if_e	add	ptr___system__dat__, ##752
 if_e	mov	result1, ptr___system__dat__
 if_e	sub	ptr___system__dat__, ##752
 if_ne	add	local01, #12
 if_ne	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___getiolock_1205_ret
	ret

__system__pack_1245
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	add	local03, #127
	test	local04, #4 wz
 if_e	jmp	#LR__1786
	cmp	local01, #0 wz
 if_e	decod	local01, #22
	bith	local01, #247
	jmp	#LR__1795
LR__1786
	test	local04, #2 wz
 if_ne	mov	local01, ##2139095040
 if_ne	mov	local02, #0
 if_ne	jmp	#LR__1794
	test	local04, #8 wz
 if_ne	mov	local01, #0
 if_ne	jmp	#LR__1793
	cmps	local03, #255 wc
 if_ae	mov	local01, ##2139095040
 if_ae	mov	local02, #0
 if_ae	jmp	#LR__1792
	cmps	local03, #1 wc
 if_ae	jmp	#LR__1790
	shr	local02, #1
	mov	local05, local01
	and	local05, #1
	shl	local05, #31
	or	local02, local05
	shr	local01, #1
	loc	pa,	#(@LR__1788-@LR__1787)
	call	#FCACHE_LOAD_
LR__1787
	cmps	local03, #0 wc
 if_ae	jmp	#LR__1789
	cmp	local01, #0 wz
 if_e	jmp	#LR__1789
	mov	local06, local02
	and	local06, #1
	add	local03, #1
	shr	local02, #1
	mov	local05, local01
	and	local05, #1
	shl	local05, #31
	or	local02, local05
	or	local02, local06
	shr	local01, #1
	jmp	#LR__1787
LR__1788
LR__1789
	cmps	local03, #0 wc
 if_ae	jmp	#LR__1791
	cmp	local02, #0 wz
	wrnz	local02
	jmp	#LR__1791
LR__1790
	bitl	local01, #279
	shl	local03, #23
	or	local01, local03
LR__1791
LR__1792
LR__1793
LR__1794
LR__1795
	test	local01, #1 wz
 if_ne	or	local02, #1
	mov	local06, local02
	mov	local05, #0
	add	local02, ##2147483647
	cmp	local02, local06 wc
 if_b	mov	local05, #1
	add	local01, local05
	test	local04, #1 wz
 if_ne	bith	local01, #31
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system__pack_1245_ret
	ret

__system___rxtxioctl_1991
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	cmp	local01, #256 wz
 if_e	jmp	#LR__1796
	cmp	local01, #257 wz
 if_e	jmp	#LR__1797
	jmp	#LR__1798
LR__1796
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, local02
	mov	result1, #0
	jmp	#LR__1799
LR__1797
	rdlong	arg01, local02
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__1799
LR__1798
	add	ptr___system__dat__, #24
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
LR__1799
	mov	ptra, fp
	call	#popregs_
__system___rxtxioctl_1991_ret
	ret

__system____dummy_flush_1992
	mov	result1, #0
__system____dummy_flush_1992_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #24
	rdlong	arg02, objptr wz
	sub	objptr, #24
 if_e	mov	result1, #0
 if_e	jmp	#LR__1800
	add	objptr, #24
	rdlong	local01, objptr
	sub	objptr, #24
	rdlong	local02, local01
	add	local01, #4
	rdlong	local03, local01
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local04
	cmps	result1, #0 wc
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__1800
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #3
	call	#pushregs_
	add	objptr, #28
	rdlong	arg01, objptr wz
	sub	objptr, #28
 if_e	neg	result1, #1
 if_e	jmp	#LR__1801
'         return getcf(__this);
	add	objptr, #28
	rdlong	arg01, objptr
	sub	objptr, #28
	rdlong	local01, arg01
	add	arg01, #4
	rdlong	local02, arg01
	mov	arg01, objptr
	mov	local03, objptr
	mov	objptr, local01
	call	local02
	mov	objptr, local03
LR__1801
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #3
	call	#pushregs_
	rdlong	local01, objptr
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

__struct___bas_wrap_sender_rx
	mov	COUNT_, #3
	call	#pushregs_
	add	objptr, #4
	rdlong	local01, objptr
	sub	objptr, #4
	rdlong	local02, local01
	add	local01, #4
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_rx_ret
	ret

LR__1802
	byte	"/"
	byte	0
LR__1803
	byte	"inf"
	byte	0
LR__1804
	byte	"nan"
	byte	0
LR__1805
	byte	0
	byte	0
LR__1806
	byte	0
	byte	0
LR__1807
	byte	0
	byte	0
LR__1808
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__1809
	byte	" !!! out of heap memory !!! "
	byte	0
LR__1810
	byte	" !!! corrupted heap !!! "
	byte	0
LR__1811
	byte	0
	byte	0
LR__1812
	byte	"Error setting up MCP23017: ACK:%d",10
	byte	0
LR__1813
	byte	"Error allocating new lock",10
	byte	0
LR__1814
	byte	"Must be in test mode to run test",10
	byte	0
LR__1815
	byte	"Display not found"
	byte	0
LR__1816
	byte	"Error:"
	byte	0
LR__1817
	byte	"Loading image "
	byte	0
LR__1818
	byte	"/sd/img"
	byte	0
LR__1819
	byte	"/sd/img"
	byte	0
LR__1820
	byte	"Loading image "
	byte	0
LR__1821
	byte	"r"
	byte	0
LR__1822
	byte	"Error opening file("
	byte	0
LR__1823
	byte	"): "
	byte	0
LR__1824
	byte	"PLL initial fail!"
	byte	0
LR__1825
	byte	"SDRAM initial fail!"
	byte	0
LR__1826
	byte	"Error: json_createWithPool: invalid json string(missing opening {/[.",10
	byte	0
LR__1827
	byte	"Error: json_createWithPool: invalid json string.",10
	byte	0
LR__1828
	byte	0
	byte	0
LR__1829
	byte	0
	byte	0
LR__1830
	byte	0
	byte	0
LR__1831
	byte	0
	byte	0
LR__1832
	byte	"w"
	byte	0
LR__1833
	byte	"Error opening file:"
	byte	0
LR__1834
	byte	"{"
	byte	0
LR__1835
	byte	"Name"
	byte	0
LR__1836
	byte	"writing name: "
	byte	0
LR__1837
	byte	","
	byte	0
LR__1838
	byte	"Number"
	byte	0
LR__1839
	byte	","
	byte	0
LR__1840
	byte	","
	byte	0
LR__1841
	byte	"}"
	byte	0
LR__1842
	byte	"w"
	byte	0
LR__1843
	byte	"Error opening file: "
	byte	0
LR__1844
	byte	"{"
	byte	0
LR__1845
	byte	"Name"
	byte	0
LR__1846
	byte	"Sample Serial Number"
	byte	0
LR__1847
	byte	","
	byte	0
LR__1848
	byte	"Machine Profile Name"
	byte	0
LR__1849
	byte	","
	byte	0
LR__1850
	byte	"Sample Profile Name"
	byte	0
LR__1851
	byte	","
	byte	0
LR__1852
	byte	"Motion Profile Name"
	byte	0
LR__1853
	byte	","
	byte	0
LR__1854
	byte	"Comment"
	byte	0
LR__1855
	byte	"}"
	byte	0
LR__1856
	byte	"w"
	byte	0
LR__1857
	byte	"Error opening file: "
	byte	0
LR__1858
	byte	"{"
	byte	0
LR__1859
	byte	"Name"
	byte	0
LR__1860
	byte	","
	byte	0
LR__1861
	byte	"Number"
	byte	0
LR__1862
	byte	","
	byte	0
LR__1863
	byte	34,"Motion Sets",34,":["
	byte	0
LR__1864
	byte	"writing motion set: "
	byte	0
LR__1865
	byte	34,"%s",34
	byte	0
LR__1866
	byte	","
	byte	0
LR__1867
	byte	"]}"
	byte	0
LR__1868
	byte	"w"
	byte	0
LR__1869
	byte	"Error opening file: "
	byte	0
LR__1870
	byte	"{"
	byte	0
LR__1871
	byte	"Name"
	byte	0
LR__1872
	byte	","
	byte	0
LR__1873
	byte	"Number"
	byte	0
LR__1874
	byte	","
	byte	0
LR__1875
	byte	"Type"
	byte	0
LR__1876
	byte	","
	byte	0
LR__1877
	byte	"Executions"
	byte	0
LR__1878
	byte	","
	byte	0
LR__1879
	byte	34,"Quartets",34,":["
	byte	0
LR__1880
	byte	34,"%s",34
	byte	0
LR__1881
	byte	","
	byte	0
LR__1882
	byte	"]}"
	byte	0
LR__1883
	byte	"w"
	byte	0
LR__1884
	byte	"Error opening file: "
	byte	0
LR__1885
	byte	"{"
	byte	0
LR__1886
	byte	"Name"
	byte	0
LR__1887
	byte	","
	byte	0
LR__1888
	byte	"Function"
	byte	0
LR__1889
	byte	","
	byte	0
LR__1890
	byte	34,"Parameters",34,":["
	byte	0
LR__1891
	byte	"%f"
	byte	0
LR__1892
	byte	","
	byte	0
LR__1893
	byte	"],"
	byte	0
LR__1894
	byte	"Dwell"
	byte	0
LR__1895
	byte	"}"
	byte	0
LR__1896
	byte	"r"
	byte	0
LR__1897
	byte	"Error opening file:"
	byte	0
LR__1898
	byte	"Error allocating memory"
	byte	0
LR__1899
	byte	"Error, the  JSON cannot be parsed."
	byte	0
LR__1900
	byte	"Name"
	byte	0
LR__1901
	byte	"Number"
	byte	0
LR__1902
	byte	"Configuration"
	byte	0
LR__1903
	byte	"Error, the  Machine Configuration  property is not found."
	byte	0
LR__1904
	byte	"Performance"
	byte	0
LR__1905
	byte	"Error, the  Machine Profile  property is not found."
	byte	0
LR__1906
	byte	"r"
	byte	0
LR__1907
	byte	"Error opening file:"
	byte	0
LR__1908
	byte	"Name"
	byte	0
LR__1909
	byte	"Number"
	byte	0
LR__1910
	byte	"Length"
	byte	0
LR__1911
	byte	"Stretch Max"
	byte	0
LR__1912
	byte	"Max Velocity"
	byte	0
LR__1913
	byte	"Max Acceleration"
	byte	0
LR__1914
	byte	"Max Jerk"
	byte	0
LR__1915
	byte	"Max Force Tensile"
	byte	0
LR__1916
	byte	"Max Force Compression"
	byte	0
LR__1917
	byte	"before open"
	byte	0
LR__1918
	byte	"r"
	byte	0
LR__1919
	byte	"after open"
	byte	0
LR__1920
	byte	"Error opening file:"
	byte	0
LR__1921
	byte	"before read"
	byte	0
LR__1922
	byte	"Name"
	byte	0
LR__1923
	byte	"Sample Serial Number"
	byte	0
LR__1924
	byte	"Machine Profile Name"
	byte	0
LR__1925
	byte	"Sample Profile Name"
	byte	0
LR__1926
	byte	"Motion Profile Name"
	byte	0
LR__1927
	byte	"r"
	byte	0
LR__1928
	byte	"Error opening file:"
	byte	0
LR__1929
	byte	"before read"
	byte	0
LR__1930
	byte	"Name"
	byte	0
LR__1931
	byte	"Number"
	byte	0
LR__1932
	byte	"Motion Sets"
	byte	0
LR__1933
	byte	"reading motion profile: "
	byte	0
LR__1934
	byte	"r"
	byte	0
LR__1935
	byte	"Error opening file:"
	byte	0
LR__1936
	byte	"Name"
	byte	0
LR__1937
	byte	"Number"
	byte	0
LR__1938
	byte	"Type"
	byte	0
LR__1939
	byte	"Executions"
	byte	0
LR__1940
	byte	"Quartets"
	byte	0
LR__1941
	byte	"reading motion set: "
	byte	0
LR__1942
	byte	"Opening file"
	byte	0
LR__1943
	byte	"r"
	byte	0
LR__1944
	byte	"Error opening file:"
	byte	0
LR__1945
	byte	"file opened"
	byte	0
LR__1946
	byte	"parsing name"
	byte	0
LR__1947
	byte	"Name"
	byte	0
LR__1948
	byte	"parsing Function"
	byte	0
LR__1949
	byte	"Function"
	byte	0
LR__1950
	byte	"parsing Parameters"
	byte	0
LR__1951
	byte	"Parameters"
	byte	0
LR__1952
	byte	"paramouter:"
	byte	0
LR__1953
	byte	" "
	byte	0
LR__1954
	byte	"parsing Dwell"
	byte	0
LR__1955
	byte	"Dwell"
	byte	0
LR__1956
	byte	"done"
	byte	0
LR__1957
	byte	"Name:"
	byte	0
LR__1958
	byte	"Number:"
	byte	0
LR__1959
	byte	"Name:"
	byte	0
LR__1960
	byte	"Number:"
	byte	0
LR__1961
	byte	"Sets:"
	byte	0
LR__1962
	byte	"Force gauge not responding"
	byte	0
LR__1963
	byte	"Error: Too many children"
	byte	0
LR__1964
	byte	0
	byte	0
LR__1965
	byte	"keyboard running:"
	byte	0
LR__1966
	byte	0
	byte	0
LR__1967
	byte	"Starting navigation page"
	byte	0
LR__1968
	byte	"done drawing page"
	byte	0
LR__1969
	byte	"-----------------"
	byte	0
LR__1970
	byte	"TEMP DISPLAY: "
	byte	0
LR__1971
	byte	"-----------------"
	byte	0
LR__1972
	byte	"%.2f"
	byte	0
LR__1973
	byte	"%.2f"
	byte	0
LR__1974
	byte	"Position"
	byte	0
LR__1975
	byte	"mm"
	byte	0
LR__1976
	byte	"Force"
	byte	0
LR__1977
	byte	"N"
	byte	0
LR__1978
	byte	"%0.3fmm"
	byte	0
LR__1979
	byte	"%0.3fN"
	byte	0
LR__1980
	byte	"Error: "
	byte	0
LR__1981
	byte	"File: "
	byte	0
LR__1982
	byte	"selection: "
	byte	0
LR__1983
	byte	"done drawing"
	byte	0
LR__1984
	byte	0
	byte	0
LR__1985
	byte	"/"
	byte	0
LR__1986
	byte	"Path:"
	byte	0
LR__1987
	byte	"adding option"
	byte	0
LR__1988
	byte	"done adding option"
	byte	0
LR__1989
	byte	"selected: "
	byte	0
LR__1990
	byte	"Line"
	byte	0
LR__1991
	byte	"distance"
	byte	0
LR__1992
	byte	"strain rate"
	byte	0
LR__1993
	byte	"Sigmoid"
	byte	0
LR__1994
	byte	"distance"
	byte	0
LR__1995
	byte	"strain rate"
	byte	0
LR__1996
	byte	"error"
	byte	0
LR__1997
	byte	0
	byte	0
LR__1998
	byte	"/sd"
	byte	0
LR__1999
	byte	0
	byte	0
LR__2000
	byte	"Position Vs. Time"
	byte	0
LR__2001
	byte	"mm"
	byte	0
LR__2002
	byte	0
	byte	0
LR__2003
	byte	"Test profile page running"
	byte	0
LR__2004
	byte	"Mode:"
	byte	0
LR__2005
	byte	"Quartet"
	byte	0
LR__2006
	byte	"Quartet name:"
	byte	0
LR__2007
	byte	"Quartet"
	byte	0
LR__2008
	byte	"Name: %s"
	byte	0
LR__2009
	byte	"Name:"
	byte	0
LR__2010
	byte	"Function: %s"
	byte	0
LR__2011
	byte	"    %s: %0.3f"
	byte	0
LR__2012
	byte	"Dwell (ms): %0.3f"
	byte	0
LR__2013
	byte	"Set"
	byte	0
LR__2014
	byte	"Set"
	byte	0
LR__2015
	byte	"Name: %s"
	byte	0
LR__2016
	byte	"Number: %d"
	byte	0
LR__2017
	byte	"Type: %s"
	byte	0
LR__2018
	byte	"Executions: %d"
	byte	0
LR__2019
	byte	"%s"
	byte	0
LR__2020
	byte	"New Quartet"
	byte	0
LR__2021
	byte	"Starting MAD P2"
	byte	0
LR__2022
	byte	"Error starting display"
	byte	0
LR__2023
	byte	"Display Initialized!"
	byte	0
LR__2024
	byte	"Loaded Machine Profile"
	byte	0
LR__2025
	byte	"All Images Loaded"
	byte	0
LR__2026
	byte	"Monitor Started"
	byte	0
LR__2027
	byte	"Monitor Failed, please reset"
	byte	0
LR__2028
	byte	"ControlSystem Started"
	byte	0
LR__2029
	byte	"ControlSystem Failed, please reset"
	byte	0
LR__2030
	byte	"Machine propfile size:"
	byte	0
LR__2031
	byte	"Loading status page"
	byte	0
LR__2032
	byte	"Leaving status page"
	byte	0
LR__2033
	byte	"Loading manual page"
	byte	0
LR__2034
	byte	"Leaving manual page"
	byte	0
LR__2035
	byte	"Loading automatic page..."
	byte	0
LR__2036
	byte	"Leaving automatic page"
	byte	0
LR__2037
	byte	"Loading force calibration page..."
	byte	0
LR__2038
	byte	"Leaving force calibration page"
	byte	0
LR__2039
	byte	"Loading settings page..."
	byte	0
LR__2040
	byte	"Leaving settings page"
	byte	0
LR__2041
	byte	"Selecting new page"
	byte	0
LR__2042
	byte	"/sd"
	byte	0
LR__2043
	byte	"keyboard.bin"
	byte	0
LR__2044
	byte	"Name:"
	byte	0
LR__2045
	byte	"manual.bin"
	byte	0
LR__2046
	byte	"auto.bin"
	byte	0
LR__2047
	byte	"status.bin"
	byte	0
LR__2048
	byte	"calib.bin"
	byte	0
LR__2049
	byte	"files.bin"
	byte	0
LR__2050
	byte	"nav.bin"
	byte	0
LR__2051
	byte	"check.bin"
	byte	0
LR__2052
	byte	"ex.bin"
	byte	0
LR__2053
	byte	"add.bin"
	byte	0
LR__2054
	byte	"garbage.bin"
	byte	0
LR__2055
	byte	"file.bin"
	byte	0
LR__2056
	byte	"folder.bin"
	byte	0
LR__2057
	byte	"Loading Image: nav"
	byte	0
LR__2058
	byte	"Loading Image: manual page"
	byte	0
LR__2059
	byte	"Loading Image: automatic page"
	byte	0
LR__2060
	byte	"Loading Image: status page"
	byte	0
LR__2061
	byte	"Loading Image: calibrate page"
	byte	0
LR__2062
	byte	"Loading Image: files page"
	byte	0
LR__2063
	byte	"Loading Image: check status"
	byte	0
LR__2064
	byte	"Loading Image: fail status"
	byte	0
LR__2065
	byte	"Loading Image: add status"
	byte	0
LR__2066
	byte	"Loading Image: garbage status"
	byte	0
LR__2067
	byte	"Loading Image: file status"
	byte	0
LR__2068
	byte	"Loading Image: folder status"
	byte	0
LR__2069
	byte	"/sd/settings"
	byte	0
LR__2070
	byte	"Writing machine profile to settings file"
	byte	0
LR__2071
	byte	"/sd/settings/Default.mcp"
	byte	0
LR__2072
	byte	"/sd/settings/Default.mcp"
	byte	0
LR__2073
	byte	"Opening existing profile"
	byte	0
LR__2074
	byte	"/sd/settings/Default.mcp"
	byte	0
LR__2075
	byte	"No machine profile found, creating default"
	byte	0
LR__2076
	byte	"Tensile_Test_1"
	byte	0
LR__2077
	byte	"640-DST"
	byte	0
LR__2078
	byte	"QuadEncoder"
	byte	0
LR__2079
	byte	"DS2-5N"
	byte	0
LR__2080
	byte	"/sd/profiles"
	byte	0
LR__2081
	byte	"/sd/profiles/Test1.mp"
	byte	0
LR__2082
	byte	"/sd/profiles/Set_1.set"
	byte	0
LR__2083
	byte	"/sd/profiles/qrt1.qrt"
	byte	0
LR__2084
	byte	"/sd/profiles/qrt2.qrt"
	byte	0
LR__2085
	byte	"/sd/profiles/Set_2.set"
	byte	0
LR__2086
	byte	"/sd/profiles/qrt3.qrt"
	byte	0
LR__2087
	byte	"/sd/profiles/qrt4.qrt"
	byte	0
LR__2088
	byte	"Error starting display:"
	byte	0
LR__2089
	byte	34,"%s",34,":%f"
	byte	0
LR__2090
	byte	34,"%s",34,":%d"
	byte	0
LR__2091
	byte	34,"%s",34,":",34,"%s",34
	byte	0
LR__2092
	byte	"Error, the "
	byte	0
LR__2093
	byte	" property is not found."
	byte	0
LR__2094
	byte	"Error, the "
	byte	0
LR__2095
	byte	" property is not found."
	byte	0
LR__2096
	byte	"Error, the "
	byte	0
LR__2097
	byte	" property is not found."
	byte	0
LR__2098
	byte	"param:"
	byte	0
LR__2099
	byte	" "
	byte	0
LR__2100
	byte	"Motor Type"
	byte	0
LR__2101
	byte	"Max Motor RPM"
	byte	0
LR__2102
	byte	"Max Motor Torque"
	byte	0
LR__2103
	byte	"Gear Diameter"
	byte	0
LR__2104
	byte	"Gear Pitch"
	byte	0
LR__2105
	byte	"System Intertia"
	byte	0
LR__2106
	byte	"Static Torque"
	byte	0
LR__2107
	byte	"Load"
	byte	0
LR__2108
	byte	"Position Encoder Type"
	byte	0
LR__2109
	byte	"Position Encoder Scale Factor"
	byte	0
LR__2110
	byte	"Force Gauge"
	byte	0
LR__2111
	byte	"Force Gauge Scale Factor"
	byte	0
LR__2112
	byte	"Force Gauge Zero Factor"
	byte	0
LR__2113
	byte	"Position Minimum"
	byte	0
LR__2114
	byte	"Position Maximum"
	byte	0
LR__2115
	byte	"Velocity Maximum"
	byte	0
LR__2116
	byte	"Acceleration Maximum"
	byte	0
LR__2117
	byte	"Force Tensile Maximum"
	byte	0
LR__2118
	byte	"Force Compression Maximum"
	byte	0
LR__2119
	byte	"Force gauge Neutral Offset"
	byte	0
LR__2120
	byte	34,"Configuration",34,":{"
	byte	0
LR__2121
	byte	"Motor Type"
	byte	0
LR__2122
	byte	","
	byte	0
LR__2123
	byte	"Max Motor RPM"
	byte	0
LR__2124
	byte	","
	byte	0
LR__2125
	byte	"Max Motor Torque"
	byte	0
LR__2126
	byte	","
	byte	0
LR__2127
	byte	"Gear Diameter"
	byte	0
LR__2128
	byte	","
	byte	0
LR__2129
	byte	"Gear Pitch"
	byte	0
LR__2130
	byte	","
	byte	0
LR__2131
	byte	"System Intertia"
	byte	0
LR__2132
	byte	","
	byte	0
LR__2133
	byte	"Static Torque"
	byte	0
LR__2134
	byte	","
	byte	0
LR__2135
	byte	"Load"
	byte	0
LR__2136
	byte	","
	byte	0
LR__2137
	byte	"Position Encoder Type"
	byte	0
LR__2138
	byte	","
	byte	0
LR__2139
	byte	"Position Encoder Scale Factor"
	byte	0
LR__2140
	byte	","
	byte	0
LR__2141
	byte	"Force Gauge"
	byte	0
LR__2142
	byte	","
	byte	0
LR__2143
	byte	"Force Gauge Scale Factor"
	byte	0
LR__2144
	byte	","
	byte	0
LR__2145
	byte	"Force Gauge Zero Factor"
	byte	0
LR__2146
	byte	"}"
	byte	0
LR__2147
	byte	34,"Performance",34,":{"
	byte	0
LR__2148
	byte	"Position Minimum"
	byte	0
LR__2149
	byte	","
	byte	0
LR__2150
	byte	"Position Maximum"
	byte	0
LR__2151
	byte	","
	byte	0
LR__2152
	byte	"Velocity Maximum"
	byte	0
LR__2153
	byte	","
	byte	0
LR__2154
	byte	"Acceleration Maximum"
	byte	0
LR__2155
	byte	","
	byte	0
LR__2156
	byte	"Force Tensile Maximum"
	byte	0
LR__2157
	byte	","
	byte	0
LR__2158
	byte	"Force Compression Maximum"
	byte	0
LR__2159
	byte	","
	byte	0
LR__2160
	byte	"Force gauge Neutral Offset"
	byte	0
LR__2161
	byte	"}"
	byte	0
LR__2162
	byte	"Machine Configuration:"
	byte	0
LR__2163
	byte	"    Motor Type: "
	byte	0
LR__2164
	byte	"    maxMotorTorque: "
	byte	0
LR__2165
	byte	"    maxMotorRPM: "
	byte	0
LR__2166
	byte	"    gearPitch: "
	byte	0
LR__2167
	byte	"    systemIntertia: "
	byte	0
LR__2168
	byte	"    staticTorque: "
	byte	0
LR__2169
	byte	"    load: "
	byte	0
LR__2170
	byte	"    positionEncoderType: "
	byte	0
LR__2171
	byte	"    positionEncoderScaleFactor: "
	byte	0
LR__2172
	byte	"    forceGauge: "
	byte	0
LR__2173
	byte	"    forceGaugeScaleFactor: "
	byte	0
LR__2174
	byte	"    forceGaugeZeroFactor: "
	byte	0
LR__2175
	byte	"Machine performance:"
	byte	0
LR__2176
	byte	"    minPosition: "
	byte	0
LR__2177
	byte	"    maxPosition: "
	byte	0
LR__2178
	byte	"    maxVelocity: "
	byte	0
LR__2179
	byte	"    maxAcceleration: "
	byte	0
LR__2180
	byte	"    maxForceTensile: "
	byte	0
LR__2181
	byte	"    maxForceCompression: "
	byte	0
LR__2182
	byte	"    forceGaugeNeutralOffset: "
	byte	0
LR__2183
	byte	"        Name:"
	byte	0
LR__2184
	byte	"        Function:"
	byte	0
LR__2185
	byte	"        Dwell:"
	byte	0
LR__2186
	byte	"        Parameters:["
	byte	0
LR__2187
	byte	","
	byte	0
LR__2188
	byte	"    Name:"
	byte	0
LR__2189
	byte	"    Number:"
	byte	0
LR__2190
	byte	"    Type:"
	byte	0
LR__2191
	byte	"    Executions:"
	byte	0
LR__2192
	byte	"    Quartest:"
	byte	0
LR__2193
	byte	"Monitor Cog Started at "
	byte	0
LR__2194
	byte	"Hz with delay of:"
	byte	0
LR__2195
	byte	"Force Gauge disconnected, attempting to reconnect"
	byte	0
LR__2196
	byte	"/da/raw1.txt"
	byte	0
LR__2197
	byte	"w"
	byte	0
LR__2198
	byte	"opening file"
	byte	0
LR__2199
	byte	"time (ms),force (mN),position (mm),forceRaw,encoderRaw",10
	byte	0
LR__2200
	byte	"%d,%d,%d",10
	byte	0
LR__2201
	byte	"closing file"
	byte	0
LR__2202
	byte	"moving relitive"
	byte	0
LR__2203
	byte	"MCP23017 not communicating, trying again"
	byte	0
LR__2204
	byte	"Control cog started"
	byte	0
LR__2205
	byte	"up released"
	byte	0
LR__2206
	byte	"down released"
	byte	0
LR__2207
	byte	"/sd"
	byte	0
LR__2208
	byte	"Filepath: "
	byte	0
LR__2209
	byte	0
	byte	0
LR__2210
	byte	"Filepath: "
	byte	0
LR__2211
	byte	"Name: %s"
	byte	0
LR__2212
	byte	"Number: %d"
	byte	0
LR__2213
	byte	"/"
	byte	0
LR__2214
	byte	"Removing "
	byte	0
LR__2215
	byte	" from "
	byte	0
LR__2216
	byte	0
	byte	0
LR__2217
	byte	"/"
	byte	0
LR__2218
	byte	"/"
	byte	0
LR__2219
	byte	"/sd"
	byte	0
LR__2220
	byte	0
	byte	0
LR__2221
	byte	"Found mode:"
	byte	0
LR__2222
	byte	"Mode:"
	byte	0
LR__2223
	byte	"Quartet from json"
	byte	0
LR__2224
	byte	"TestProfile Button new Keyboard could not allocate memory"
	byte	0
LR__2225
	byte	"Enter file name: "
	byte	0
LR__2226
	byte	0
	byte	0
LR__2227
	byte	"/sd"
	byte	0
LR__2228
	byte	"Testprofile.c explorer could not allocate memory"
	byte	0
LR__2229
	byte	0
	byte	0
LR__2230
	byte	"Saving quartet"
	byte	0
LR__2231
	byte	"Saving set"
	byte	0
LR__2232
	byte	"Saving motion"
	byte	0
LR__2233
	byte	"Saving test"
	byte	0
LR__2234
	byte	"BUTTON_QUARTET_id:"
	byte	0
LR__2235
	byte	"Enter file name: "
	byte	0
LR__2236
	byte	0
	byte	0
LR__2237
	byte	"function:"
	byte	0
LR__2238
	byte	",name:"
	byte	0
LR__2239
	byte	"Dwell: "
	byte	0
LR__2240
	byte	": "
	byte	0
LR__2241
	byte	"Enter file name: "
	byte	0
LR__2242
	byte	0
	byte	0
LR__2243
	byte	"Number: "
	byte	0
LR__2244
	byte	"Enter file name: "
	byte	0
LR__2245
	byte	0
	byte	0
LR__2246
	byte	"Executions: "
	byte	0
LR__2247
	byte	"/sd"
	byte	0
LR__2248
	byte	0
	byte	0
LR__2249
	byte	"/"
	byte	0
LR__2250
	byte	"???"
	byte	0
LR__2251
	byte	" ",10,13,9,12
	byte	0
LR__2252
	byte	"}]"
	byte	0
LR__2253
	byte	" ",10,13,9,12
	byte	0
LR__2254
	byte	"}]"
	byte	0
LR__2255
	byte	"true"
	byte	0
LR__2256
	byte	"false"
	byte	0
LR__2257
	byte	"null"
	byte	0
LR__2258
	byte	"Error: Unexpected goblank error.",10
	byte	0
LR__2259
	byte	"Error: Unexpected allocation error.",10
	byte	0
LR__2260
	byte	"Error: Unexpected quote missing.",10
	byte	0
LR__2261
	byte	"Error: property name does not exist.",10
	byte	0
LR__2262
	byte	"Error: unable to parse value.",10
	byte	0
LR__2263
	byte	0
	byte	0
LR__2264
	byte	" "
	byte	0
LR__2265
	byte	"Status: Disabled"
	byte	0
LR__2266
	byte	"Status: enabled"
	byte	0
LR__2267
	byte	"OFF"
	byte	0
LR__2268
	byte	"INCR JOG: %0.1fmm"
	byte	0
LR__2269
	byte	"CONT JOG: %dmm"
	byte	0
LR__2270
	byte	"POSN MOVE: %dmm"
	byte	0
LR__2271
	byte	"HOME"
	byte	0
LR__2272
	byte	"HOMING"
	byte	0
LR__2273
	byte	"HOMING SEEKING SLOW"
	byte	0
LR__2274
	byte	"HOMING BACKING OFF"
	byte	0
LR__2275
	byte	"HOMING COMPLETE"
	byte	0
LR__2276
	byte	"GAUGE LENGTH: %dmm"
	byte	0
LR__2277
	byte	"GAUGE FORCE: %dmN"
	byte	0
LR__2278
	byte	"OFF"
	byte	0
LR__2279
	byte	"*+,:;<=>[]|",34,"?",127
	byte	0
LR__2280
	byte	"FAT32   "
	byte	0
LR__2281
	byte	"TZ"
	byte	0
LR__2282
	byte	0
	byte	0
	alignl
_dat_
	byte	$00[87416]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@_dat_ + 87888
	long	@@@_dat_ + 87896
	byte	$00, $00, $00, $00
	long	@@@_dat_ + 87904
	long	@@@_dat_ + 87912
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@_dat_ + 87920
	long	@@@_dat_ + 87928
	byte	$00, $00, $00, $00
	long	@@@_dat_ + 87936
	long	@@@_dat_ + 87944
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@_dat_ + 87952
	long	@@@_dat_ + 87960
	byte	$00, $00, $00, $00
	long	@@@_dat_ + 87968
	long	@@@_dat_ + 87976
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__rxtxioctl_0485
	byte	$00, $00, $00, $00
	long	@@@___dummy_flush_0486
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__rxtxioctl_0485
	byte	$00, $00, $00, $00
	long	@@@___dummy_flush_0486
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__rxtxioctl_0485
	byte	$00, $00, $00, $00
	long	@@@___dummy_flush_0486
	byte	$00[256]
	byte	$63, $00, $04, $58, $02, $0a, $3d, $00, $01, $08, $28, $0f, $50, $32, $03, $05
	byte	$00[7]
	byte	$17, $19, $1d, $14, $90, $2f, $89, $23, $25, $d3, $07, $00, $00, $00, $02, $03
	byte	$1d, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $19, $32, $94, $d5
	byte	$02, $07, $00, $00, $04, $a2, $1a, $00, $90, $1e, $00, $80, $23, $00, $73, $28
	byte	$00, $68, $2e, $00, $68, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[25]
	byte	$16, $15, $14, $11, $10, $0f, $0e, $0d, $0c, $09, $08, $07, $06, $05, $04, $01
	byte	$00, $ff, $ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $29, $28
	byte	$27, $26, $25, $24, $23, $22, $21, $20, $1f, $1e, $1c, $1b, $19, $14, $13, $12
	byte	$11, $10, $0f, $0e, $0d, $0c, $0a, $08, $07, $06, $04, $02, $00, $ff, $00, $00
	byte	$00[8]
	byte	$71, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[5989]
	byte	$53, $74, $61, $74, $75, $73, $00, $4d, $61, $6e, $75, $61, $6c, $00, $54, $65
	byte	$73, $74, $00, $43, $61, $6c, $69, $62, $72, $61, $74, $65, $00, $53, $65, $74
	byte	$74, $69, $6e, $67, $73, $00, $43, $72, $65, $61, $74, $65, $20, $50, $72, $6f
	byte	$66, $69, $6c, $65, $73, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[17228]
	byte	$4d, $61, $63, $68, $69, $6e, $65, $20, $53, $74, $61, $74, $65, $00, $43, $68
	byte	$61, $72, $67, $65, $20, $50, $75, $6d, $70, $00, $53, $77, $69, $74, $63, $68
	byte	$65, $64, $20, $50, $6f, $77, $65, $72, $00, $45, $53, $44, $20, $53, $77, $69
	byte	$74, $63, $68, $00, $45, $53, $44, $20, $55, $70, $70, $65, $72, $00, $45, $53
	byte	$44, $20, $4c, $6f, $77, $65, $72, $00, $53, $65, $72, $76, $6f, $20, $52, $65
	byte	$61, $64, $79, $00, $46, $6f, $72, $63, $65, $20, $43, $6f, $6d, $6d, $00, $53
	byte	$65, $72, $76, $6f, $20, $43, $6f, $6d, $6d, $00, $4d, $61, $63, $68, $69, $6e
	byte	$65, $20, $49, $6e, $66, $6f, $00, $46, $6f, $72, $63, $65, $20, $28, $4e, $29
	byte	$00, $50, $6f, $73, $69, $74, $69, $6f, $6e, $20, $28, $6d, $6d, $29, $00, $00
	byte	$00[17367]
	byte	$52, $75, $6e, $20, $54, $65, $73, $74, $20, $50, $72, $6f, $66, $69, $6c, $65
	byte	$00, $4f, $70, $65, $6e, $00, $52, $75, $6e, $21, $00, $43, $61, $6e, $63, $65
	byte	$6c, $00, $2e, $2e, $00, $3c, $00, $3e, $00, $44, $6f, $6e, $65, $00, $00, $00
	byte	$00[12852]
	byte	$4f, $70, $65, $6e, $00, $4e, $65, $77, $00, $53, $61, $76, $65, $00, $00, $00
	long	@@@_dat_ + 142181
	long	@@@_dat_ + 142189
	long	@@@_dat_ + 142193
	long	@@@_dat_ + 142200
	long	@@@_dat_ + 142205
	long	@@@_dat_ + 142210
	long	@@@_dat_ + 142215
	long	@@@_dat_ + 142220
	byte	$00, $51, $75, $61, $72, $74, $65, $74, $00, $53, $65, $74, $00, $4d, $6f, $74
	byte	$69, $6f, $6e, $00, $54, $65, $73, $74, $00, $2e, $51, $52, $54, $00, $2e, $53
	byte	$45, $54, $00, $2e, $4d, $4f, $54, $00, $2e, $54, $53, $54, $00, $00, $00, $00
	byte	$00[648]
	long	@@@_dat_ + 142916
	long	@@@_dat_ + 142924
	long	@@@_dat_ + 142932
	long	@@@_dat_ + 142940
	byte	$00[28]
	long	@@@___root_opendir
	byte	$00, $00, $00, $00
	long	@@@___root_closedir
	byte	$00, $00, $00, $00
	long	@@@___root_readdir
	byte	$00, $00, $00, $00
	long	@@@___root_stat
	byte	$22, $22, $00, $00, $5c, $5c, $00, $00, $2f, $2f, $00, $00, $62, $08, $00, $00
	byte	$66, $0c, $00, $00, $6e, $0a, $00, $00, $72, $0d, $00, $00, $74, $09, $00, $00
	byte	$2d, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38, $35, $34, $37, $37
	byte	$35, $38, $30, $38, $00, $39, $32, $32, $33, $33, $37, $32, $30, $33, $36, $38
	byte	$35, $34, $37, $37, $35, $38, $30, $37, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[31768]
	long	@@@_dat_ + 174984
	long	@@@_dat_ + 174986
	long	@@@_dat_ + 174988
	long	@@@_dat_ + 174990
	long	@@@_dat_ + 174992
	long	@@@_dat_ + 174994
	long	@@@_dat_ + 174996
	long	@@@_dat_ + 174998
	long	@@@_dat_ + 175000
	long	@@@_dat_ + 175002
	long	@@@_dat_ + 175004
	long	@@@_dat_ + 175008
	long	@@@_dat_ + 175010
	long	@@@_dat_ + 175012
	long	@@@_dat_ + 175014
	long	@@@_dat_ + 175016
	long	@@@_dat_ + 175018
	long	@@@_dat_ + 175020
	long	@@@_dat_ + 175022
	long	@@@_dat_ + 175024
	long	@@@_dat_ + 175026
	long	@@@_dat_ + 175028
	long	@@@_dat_ + 175030
	long	@@@_dat_ + 175032
	long	@@@_dat_ + 175034
	long	@@@_dat_ + 175036
	long	@@@_dat_ + 175038
	long	@@@_dat_ + 175040
	long	@@@_dat_ + 175042
	long	@@@_dat_ + 175044
	long	@@@_dat_ + 175046
	long	@@@_dat_ + 175048
	long	@@@_dat_ + 175052
	long	@@@_dat_ + 175058
	long	@@@_dat_ + 175060
	long	@@@_dat_ + 175062
	long	@@@_dat_ + 175064
	long	@@@_dat_ + 175066
	long	@@@_dat_ + 175068
	long	@@@_dat_ + 175070
	long	@@@_dat_ + 175072
	long	@@@_dat_ + 175074
	long	@@@_dat_ + 175076
	long	@@@_dat_ + 175083
	long	@@@_dat_ + 175085
	long	@@@_dat_ + 175091
	long	@@@_dat_ + 175093
	byte	$30, $00, $31, $00, $32, $00, $33, $00, $34, $00, $35, $00, $36, $00, $37, $00
	byte	$38, $00, $39, $00, $74, $61, $62, $00, $71, $00, $77, $00, $65, $00, $72, $00
	byte	$74, $00, $79, $00, $75, $00, $69, $00, $6f, $00, $70, $00, $2d, $00, $61, $00
	byte	$73, $00, $64, $00, $66, $00, $67, $00, $68, $00, $6a, $00, $6b, $00, $6c, $00
	byte	$64, $65, $6c, $00, $73, $68, $69, $66, $74, $00, $7a, $00, $78, $00, $63, $00
	byte	$76, $00, $62, $00, $6e, $00, $6d, $00, $2c, $00, $2e, $00, $63, $61, $6e, $63
	byte	$65, $6c, $00, $3c, $00, $73, $70, $61, $63, $65, $00, $3e, $00, $73, $75, $62
	byte	$6d, $69, $74, $00, $44, $49, $53, $41, $42, $4c, $44, $00, $45, $4e, $41, $42
	byte	$4c, $45, $44, $00, $53, $4d, $50, $20, $4c, $49, $4d, $00, $4d, $43, $48, $20
	byte	$4c, $49, $4d, $00, $46, $41, $55, $4c, $54, $45, $44, $00, $4c, $45, $4e, $47
	byte	$54, $48, $00, $46, $4f, $52, $43, $45, $00, $54, $45, $4e, $53, $49, $4f, $4e
	byte	$00, $43, $4f, $4d, $50, $52, $45, $53, $00, $55, $50, $50, $45, $52, $00, $4c
	byte	$4f, $57, $45, $52, $00, $44, $4f, $4f, $52, $00, $53, $54, $4f, $50, $50, $45
	byte	$44, $00, $4d, $4f, $56, $49, $4e, $47, $00, $4d, $41, $4e, $55, $41, $4c, $00
	byte	$54, $45, $53, $54, $00, $52, $55, $4e, $00, $53, $74, $61, $74, $75, $73, $00
	byte	$43, $6f, $6e, $64, $69, $74, $69, $6f, $6e, $00, $4d, $6f, $64, $65, $00, $4f
	byte	$66, $66, $00, $49, $4e, $43, $52, $00, $43, $4f, $4e, $54, $00, $50, $4f, $53
	byte	$4e, $00, $48, $4f, $4d, $45, $00, $47, $41, $2d, $4c, $00, $47, $41, $2d, $46
	byte	$00, $53, $65, $6c, $65, $63, $74, $00, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$01, $91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$01[8]
	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
	byte	$42[10]
	byte	$20[7]
	byte	$44[6]
	byte	$04[20]
	byte	$20[6]
	byte	$48[6]
	byte	$08[20]
	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
	alignl
_jm_fullduplexserial_spin2_dat_
'-' 
'-'                 org
'-' 
'-' uart_mgr        setq      #4-1                                  ' get 4 parameters from hub
	byte	$28, $06, $64, $fd
'-'                 rdlong    rxd, ptra
	byte	$00, $3b, $04, $fb
'-' 
'-' 
'-' uart_main       testb     rxd, #31                      wc      ' rx in use?
	byte	$1f, $3a, $14, $f4
'-'     if_nc       call      #rx_serial
	byte	$0c, $00, $b0, $3d
'-' 
'-'                 testb     txd, #31                      wc      ' tx in use?
	byte	$1f, $3c, $14, $f4
'-'     if_nc       call      #tx_serial
	byte	$2c, $00, $b0, $3d
'-' 
'-'                 jmp       #uart_main
	byte	$ec, $ff, $9f, $fd
'-' 
'-' 
'-' rx_serial       testp     rxd                           wc      ' anything waiting?
	byte	$40, $3a, $70, $fd
'-'     if_nc       ret
	byte	$2d, $00, $64, $3d
'-' 
'-'                 rdpin     t3, rxd                               ' read new byte
	byte	$1d, $46, $88, $fa
'-'                 shr       t3, #24                               ' align lsb
	byte	$18, $46, $44, $f0
'-'                 mov       t1, p_rxbuf                           ' t1 := @rxbuf
	byte	$1f, $42, $00, $f6
'-'                 rdlong    t2, ptra[4]                           ' t2 := rxhead
	byte	$04, $45, $04, $fb
'-'                 add       t1, t2
	byte	$22, $42, $00, $f1
'-'                 wrbyte    t3, t1                                ' rxbuf[rxhead] := t3
	byte	$21, $46, $40, $fc
'-'                 incmod    t2, #(BUF_SIZE-1)                     ' update head index
	byte	$ff, $44, $04, $f7
'-'     _ret_       wrlong    t2, ptra[4]                           ' write head index back to hub
	byte	$04, $45, $64, $0c
'-' 
'-' 
'-' tx_serial       rdpin     t1, txd                       wc      ' check busy flag
	byte	$1e, $42, $98, $fa
'-'     if_c        ret                                             '  abort if busy
	byte	$2d, $00, $64, $cd
'-' 
'-'                 rdlong    t1, ptra[6]                           ' t1 = txhead
	byte	$06, $43, $04, $fb
'-'                 rdlong    t2, ptra[7]                           ' t2 = txtail
	byte	$07, $45, $04, $fb
'-'                 cmp       t1, t2                        wz      ' byte(s) to tx?
	byte	$22, $42, $08, $f2
'-'     if_e        ret
	byte	$2d, $00, $64, $ad
'-' 
'-'                 mov       t1, p_txbuf                           ' start of tx buffer
	byte	$20, $42, $00, $f6
'-'                 add       t1, t2                                ' add tail index
	byte	$22, $42, $00, $f1
'-'                 rdbyte    t3, t1                                ' t3 := txbuf[txtail]
	byte	$21, $46, $c0, $fa
'-'                 wypin     t3, txd                               ' load into sp uart
	byte	$1e, $46, $20, $fc
'-'                 incmod    t2, #(BUF_SIZE-1)                     ' update tail index
	byte	$ff, $44, $04, $f7
'-'     _ret_       wrlong    t2, ptra[7]                           ' write tail index back to hub
	byte	$07, $45, $64, $0c
'-' 
'-' 
'-' ' --------------------------------------------------------------------------------------------------
'-' 
'-' rxd             res       1                                     ' receive pin
'-' rxd             res       1                                     ' receive pin
'-' txd             res       1                                     ' transmit pin
'-' txd             res       1                                     ' transmit pin
'-' p_rxbuf         res       1                                     ' pointer to rxbuf
'-' p_rxbuf         res       1                                     ' pointer to rxbuf
'-' p_txbuf         res       1                                     ' pointer to txbuf
'-' p_txbuf         res       1                                     ' pointer to txbuf
'-' 
'-' t1              res       1                                     ' work vars
'-' t1              res       1                                     ' work vars
'-' t2              res       1
'-' t2              res       1
'-' t3              res       1
'-' t3              res       1
'-'                 fit       496
	alignl
_fatfs_cc_dat_
	byte	$43, $55, $45, $41, $41, $41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41
	byte	$45, $92, $92, $4f, $4f, $4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f
	byte	$41, $49, $4f, $55, $a5, $a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af
	byte	$b0, $b1, $b2, $b3, $b4, $41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf
	byte	$c0, $c1, $c2, $c3, $c4, $c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf
	byte	$d1, $d1, $45, $45, $45, $49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df
	byte	$4f, $e1, $4f, $4f, $4f, $4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef
	byte	$f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff
	byte	$00, $00, $00, $00, $00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 216
	long	@@@_fatfs_cc_dat_ + 224
	long	@@@_fatfs_cc_dat_ + 232
	long	@@@_fatfs_cc_dat_ + 240
	long	@@@_fatfs_cc_dat_ + 248
	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 256
	long	@@@_fatfs_cc_dat_ + 264
	long	@@@_fatfs_cc_dat_ + 272
	long	@@@_fatfs_cc_dat_ + 280
	long	@@@_fatfs_cc_dat_ + 288
	long	@@@_fatfs_cc_dat_ + 296
	long	@@@_fatfs_cc_dat_ + 304
	long	@@@_fatfs_cc_dat_ + 312
	long	@@@_fatfs_cc_dat_ + 320
	long	@@@_fatfs_cc_dat_ + 328
	long	@@@_fatfs_cc_dat_ + 336
	long	@@@_fatfs_cc_dat_ + 344
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_close
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_read
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_write
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_lseek
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_ioctl
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_open
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_creat
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_opendir
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_closedir
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_readdir
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_stat
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_mkdir
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_rmdir
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_remove
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_rename
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_init
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_v_deinit
	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
	byte	$00[32]
	long	@@@_fatfs_cc_dat_ + 526
	long	@@@_fatfs_cc_dat_ + 530
	byte	$00[18]
	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
	byte	$00[6]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1016
	long	@@@_fatfs_cc_dat_ + 1024
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1032
	long	@@@_fatfs_cc_dat_ + 1040
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1048
	long	@@@_fatfs_cc_dat_ + 1056
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1064
	long	@@@_fatfs_cc_dat_ + 1072
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1080
	long	@@@_fatfs_cc_dat_ + 1088
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc_dat_ + 1096
	long	@@@_fatfs_cc_dat_ + 1104
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc__rxtxioctl_1333
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc___dummy_flush_1334
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc__rxtxioctl_1333
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc___dummy_flush_1334
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc__rxtxioctl_1333
	byte	$00, $00, $00, $00
	long	@@@_fatfs_cc___dummy_flush_1334
	byte	$00[9]
	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$01[7]
	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
	byte	$42[10]
	byte	$20[7]
	byte	$44[6]
	byte	$04[20]
	byte	$20[6]
	byte	$48[6]
	byte	$08[20]
	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[652]
	long	@@@__system__dat_ + 716
	long	@@@__system__dat_ + 724
	long	@@@__system__dat_ + 732
	long	@@@__system__dat_ + 740
	byte	$00[28]
	long	@@@__system____root_opendir
	byte	$00, $00, $00, $00
	long	@@@__system____root_closedir
	byte	$00, $00, $00, $00
	long	@@@__system____root_readdir
	byte	$00, $00, $00, $00
	long	@@@__system____root_stat
	byte	$00[16]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	long	@@@__system__dat_ + 1236
	long	@@@__system__dat_ + 1244
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1252
	long	@@@__system__dat_ + 1260
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1268
	long	@@@__system__dat_ + 1276
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1284
	long	@@@__system__dat_ + 1292
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1300
	long	@@@__system__dat_ + 1308
	byte	$00, $00, $00, $00
	long	@@@__system__dat_ + 1316
	long	@@@__system__dat_ + 1324
	byte	$00[344]
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_1991
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_1992
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_1991
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_1992
	byte	$00, $00, $00, $00
	long	@@@__system___tx
	byte	$00, $00, $00, $00
	long	@@@__system___rx
	byte	$00, $00, $00, $00
	long	@@@__system___rxtxioctl_1991
	byte	$00, $00, $00, $00
	long	@@@__system____dummy_flush_1992
__heap_base
	long	0[8194]
objmem
	long	0[0]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
_var10
	res	1
_var11
	res	1
_var12
	res	1
_var13
	res	1
_var14
	res	1
_var15
	res	1
_var16
	res	1
_var17
	res	1
_var18
	res	1
_var19
	res	1
_var20
	res	1
_var21
	res	1
_var22
	res	1
_var23
	res	1
_var24
	res	1
_var25
	res	1
_var26
	res	1
_var27
	res	1
_var28
	res	1
_var29
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
arg06
	res	1
arg07
	res	1
arg08
	res	1
arg09
	res	1
arg10
	res	1
arg11
	res	1
arg12
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
local22
	res	1
local23
	res	1
local24
	res	1
local25
	res	1
local26
	res	1
local27
	res	1
local28
	res	1
local29
	res	1
local30
	res	1
local31
	res	1
local32
	res	1
local33
	res	1
local34
	res	1
local35
	res	1
local36
	res	1
local37
	res	1
local38
	res	1
local39
	res	1
local40
	res	1
local41
	res	1
local42
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
